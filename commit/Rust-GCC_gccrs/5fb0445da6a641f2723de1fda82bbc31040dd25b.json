{"sha": "5fb0445da6a641f2723de1fda82bbc31040dd25b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZiMDQ0NWRhNmE2NDFmMjcyM2RlMWZkYTgyYmJjMzEwNDBkZDI1Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-05-20T18:11:34Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-05-20T18:11:34Z"}, "message": "PR c++/33979 (partial)\n\n2008-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/33979 (partial)\n\t* include/tr1_impl/functional_hash.h (hash<char16_t>,\n\thash<char32_t>): Add specializations.\n\t* include/tr1_impl/type_traits (is_integral<char16_t>,\n\tis_integral<char32_t>): Likewise.\n\t* include/std/limits (numeric_limits<char16_t>,\n\tnumeric_limits<char32_t>): Likewise.\n\t* src/limits_c++0x.cc: Add.\n\t* src/Makefile.am: Update.\n\t* testsuite/20_util/hash/requirements/explicit_instantiation.cc:\n\tUpdate.\n\t* testsuite/20_util/is_integral/value.cc: New.\n\t* testsuite/20_util/is_integral/requirements/typedefs.cc: Likewise.\n\t* testsuite/20_util/is_integral/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/18_support/numeric_limits/char16_32_t.cc: Likewise.\t\n\t* config/abi/pre/gnu.ver: Export new numeric_limits symbols at\n\tGLIBCXX_3.4.11.\n\t* configure: Regenerate.\n\t* src/Makefile.in: Likewise.\n\t* config.h.in: Likewise.\n\nFrom-SVN: r135668", "tree": {"sha": "f6d0edebac2d919d881c984309a9a0736ef21524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6d0edebac2d919d881c984309a9a0736ef21524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fb0445da6a641f2723de1fda82bbc31040dd25b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb0445da6a641f2723de1fda82bbc31040dd25b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fb0445da6a641f2723de1fda82bbc31040dd25b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fb0445da6a641f2723de1fda82bbc31040dd25b/comments", "author": null, "committer": null, "parents": [{"sha": "f30fad6135c1603294b980340dc471874195aebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f30fad6135c1603294b980340dc471874195aebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f30fad6135c1603294b980340dc471874195aebb"}], "stats": {"total": 595, "additions": 491, "deletions": 104}, "files": [{"sha": "c2b2ea6034054848d62d00db3dc610ee8c0a04e8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -1,3 +1,27 @@\n+2008-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/33979 (partial)\n+\t* include/tr1_impl/functional_hash.h (hash<char16_t>,\n+\thash<char32_t>): Add specializations.\n+\t* include/tr1_impl/type_traits (is_integral<char16_t>,\n+\tis_integral<char32_t>): Likewise.\n+\t* include/std/limits (numeric_limits<char16_t>,\n+\tnumeric_limits<char32_t>): Likewise.\n+\t* src/limits_c++0x.cc: Add.\n+\t* src/Makefile.am: Update.\n+\t* testsuite/20_util/hash/requirements/explicit_instantiation.cc:\n+\tUpdate.\n+\t* testsuite/20_util/is_integral/value.cc: New.\n+\t* testsuite/20_util/is_integral/requirements/typedefs.cc: Likewise.\n+\t* testsuite/20_util/is_integral/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/18_support/numeric_limits/char16_32_t.cc: Likewise.\t\n+\t* config/abi/pre/gnu.ver: Export new numeric_limits symbols at\n+\tGLIBCXX_3.4.11.\n+\t* configure: Regenerate.\n+\t* src/Makefile.in: Likewise.\n+\t* config.h.in: Likewise.\n+\n 2008-05-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/std/system_error: Align to current draft specifications."}, {"sha": "bb7ecafc12d8bfa1ca38c29b513d7477f8b7991b", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -379,9 +379,6 @@\n /* Define to 1 if you have the <sys/machine.h> header file. */\n #undef HAVE_SYS_MACHINE_H\n \n-/* Define if sys_nerr exists. */\n-#undef HAVE_SYS_NERR\n-\n /* Define to 1 if you have the <sys/param.h> header file. */\n #undef HAVE_SYS_PARAM_H\n "}, {"sha": "547624c893f055e4be21d60e93450782d6f267e0", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -383,7 +383,8 @@ GLIBCXX_3.4 {\n     _ZNKSt9money_putI[cw]St19ostreambuf_iteratorI[cw]St11char_traitsI[cw]EEE*;\n \n     # std::numeric_limits\n-    _ZNSt14numeric_limitsI[^g]*;\n+    # _ZNSt14numeric_limitsI[^g]*;\n+    _ZNSt14numeric_limitsI[a-z]E*;\n \n     # std::_Rb_tree\n     _ZSt18_Rb_tree_decrementPKSt18_Rb_tree_node_base;\n@@ -891,6 +892,9 @@ GLIBCXX_3.4.11 {\n     _ZNSt11system_time16ticks_per_secondE;\n     _ZNSt11system_time12is_subsecondE;\n \n+    # char16_t and char32_t\n+    _ZNSt14numeric_limitsIu8char*;\n+\n } GLIBCXX_3.4.10;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "dddf05b863086a36cba4df3515b7fad9df29610e", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 23, "deletions": 86, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -17842,8 +17842,8 @@ cat >>confdefs.h <<\\_ACEOF\n _ACEOF\n \n fi\n-echo \"$as_me:$LINENO: checking for sys_nerr\" >&5\n-echo $ECHO_N \"checking for sys_nerr... $ECHO_C\" >&6\n+echo \"$as_me:$LINENO: checking for EBADMSG\" >&5\n+echo $ECHO_N \"checking for EBADMSG... $ECHO_C\" >&6\n if test \"${glibcxx_cv_system_error9+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n@@ -17858,7 +17858,7 @@ cat >>conftest.$ac_ext <<_ACEOF\n int\n main ()\n {\n-int i = sys_nerr;\n+int i = EBADMSG;\n   ;\n   return 0;\n }\n@@ -17901,12 +17901,12 @@ echo \"${ECHO_T}$glibcxx_cv_system_error9\" >&6\n if test x\"$glibcxx_cv_system_error9\" = x\"yes\"; then\n \n cat >>confdefs.h <<\\_ACEOF\n-#define HAVE_SYS_NERR 1\n+#define HAVE_EBADMSG 1\n _ACEOF\n \n fi\n-echo \"$as_me:$LINENO: checking for EBADMSG\" >&5\n-echo $ECHO_N \"checking for EBADMSG... $ECHO_C\" >&6\n+echo \"$as_me:$LINENO: checking for ECANCELED\" >&5\n+echo $ECHO_N \"checking for ECANCELED... $ECHO_C\" >&6\n if test \"${glibcxx_cv_system_error10+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n@@ -17921,7 +17921,7 @@ cat >>conftest.$ac_ext <<_ACEOF\n int\n main ()\n {\n-int i = EBADMSG;\n+int i = ECANCELED;\n   ;\n   return 0;\n }\n@@ -17964,12 +17964,12 @@ echo \"${ECHO_T}$glibcxx_cv_system_error10\" >&6\n if test x\"$glibcxx_cv_system_error10\" = x\"yes\"; then\n \n cat >>confdefs.h <<\\_ACEOF\n-#define HAVE_EBADMSG 1\n+#define HAVE_ECANCELED 1\n _ACEOF\n \n fi\n-echo \"$as_me:$LINENO: checking for ECANCELED\" >&5\n-echo $ECHO_N \"checking for ECANCELED... $ECHO_C\" >&6\n+echo \"$as_me:$LINENO: checking for EOVERFLOW\" >&5\n+echo $ECHO_N \"checking for EOVERFLOW... $ECHO_C\" >&6\n if test \"${glibcxx_cv_system_error11+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n@@ -17984,7 +17984,7 @@ cat >>conftest.$ac_ext <<_ACEOF\n int\n main ()\n {\n-int i = ECANCELED;\n+int i = EOVERFLOW;\n   ;\n   return 0;\n }\n@@ -18027,12 +18027,12 @@ echo \"${ECHO_T}$glibcxx_cv_system_error11\" >&6\n if test x\"$glibcxx_cv_system_error11\" = x\"yes\"; then\n \n cat >>confdefs.h <<\\_ACEOF\n-#define HAVE_ECANCELED 1\n+#define HAVE_EOVERFLOW 1\n _ACEOF\n \n fi\n-echo \"$as_me:$LINENO: checking for EOVERFLOW\" >&5\n-echo $ECHO_N \"checking for EOVERFLOW... $ECHO_C\" >&6\n+echo \"$as_me:$LINENO: checking for ENOTSUP\" >&5\n+echo $ECHO_N \"checking for ENOTSUP... $ECHO_C\" >&6\n if test \"${glibcxx_cv_system_error12+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n@@ -18047,7 +18047,7 @@ cat >>conftest.$ac_ext <<_ACEOF\n int\n main ()\n {\n-int i = EOVERFLOW;\n+int i = ENOTSUP;\n   ;\n   return 0;\n }\n@@ -18090,12 +18090,12 @@ echo \"${ECHO_T}$glibcxx_cv_system_error12\" >&6\n if test x\"$glibcxx_cv_system_error12\" = x\"yes\"; then\n \n cat >>confdefs.h <<\\_ACEOF\n-#define HAVE_EOVERFLOW 1\n+#define HAVE_ENOTSUP 1\n _ACEOF\n \n fi\n-echo \"$as_me:$LINENO: checking for ENOTSUP\" >&5\n-echo $ECHO_N \"checking for ENOTSUP... $ECHO_C\" >&6\n+echo \"$as_me:$LINENO: checking for EIDRM\" >&5\n+echo $ECHO_N \"checking for EIDRM... $ECHO_C\" >&6\n if test \"${glibcxx_cv_system_error13+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n@@ -18110,7 +18110,7 @@ cat >>conftest.$ac_ext <<_ACEOF\n int\n main ()\n {\n-int i = ENOTSUP;\n+int i = EIDRM;\n   ;\n   return 0;\n }\n@@ -18153,12 +18153,12 @@ echo \"${ECHO_T}$glibcxx_cv_system_error13\" >&6\n if test x\"$glibcxx_cv_system_error13\" = x\"yes\"; then\n \n cat >>confdefs.h <<\\_ACEOF\n-#define HAVE_ENOTSUP 1\n+#define HAVE_EIDRM 1\n _ACEOF\n \n fi\n-echo \"$as_me:$LINENO: checking for EIDRM\" >&5\n-echo $ECHO_N \"checking for EIDRM... $ECHO_C\" >&6\n+echo \"$as_me:$LINENO: checking for ETXTBSY\" >&5\n+echo $ECHO_N \"checking for ETXTBSY... $ECHO_C\" >&6\n if test \"${glibcxx_cv_system_error14+set}\" = set; then\n   echo $ECHO_N \"(cached) $ECHO_C\" >&6\n else\n@@ -18173,7 +18173,7 @@ cat >>conftest.$ac_ext <<_ACEOF\n int\n main ()\n {\n-int i = EIDRM;\n+int i = ETXTBSY;\n   ;\n   return 0;\n }\n@@ -18215,69 +18215,6 @@ echo \"$as_me:$LINENO: result: $glibcxx_cv_system_error14\" >&5\n echo \"${ECHO_T}$glibcxx_cv_system_error14\" >&6\n if test x\"$glibcxx_cv_system_error14\" = x\"yes\"; then\n \n-cat >>confdefs.h <<\\_ACEOF\n-#define HAVE_EIDRM 1\n-_ACEOF\n-\n-fi\n-echo \"$as_me:$LINENO: checking for ETXTBSY\" >&5\n-echo $ECHO_N \"checking for ETXTBSY... $ECHO_C\" >&6\n-if test \"${glibcxx_cv_system_error15+set}\" = set; then\n-  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n-else\n-\n-cat >conftest.$ac_ext <<_ACEOF\n-/* confdefs.h.  */\n-_ACEOF\n-cat confdefs.h >>conftest.$ac_ext\n-cat >>conftest.$ac_ext <<_ACEOF\n-/* end confdefs.h.  */\n-#include <errno.h>\n-int\n-main ()\n-{\n-int i = ETXTBSY;\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-rm -f conftest.$ac_objext\n-if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n-  (eval $ac_compile) 2>conftest.er1\n-  ac_status=$?\n-  grep -v '^ *+' conftest.er1 >conftest.err\n-  rm -f conftest.er1\n-  cat conftest.err >&5\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); } &&\n-\t { ac_try='test -z \"$ac_c_werror_flag\"\n-\t\t\t || test ! -s conftest.err'\n-  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); }; } &&\n-\t { ac_try='test -s conftest.$ac_objext'\n-  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n-  (exit $ac_status); }; }; then\n-  glibcxx_cv_system_error15=yes\n-else\n-  echo \"$as_me: failed program was:\" >&5\n-sed 's/^/| /' conftest.$ac_ext >&5\n-\n-glibcxx_cv_system_error15=no\n-fi\n-rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n-\n-fi\n-\n-echo \"$as_me:$LINENO: result: $glibcxx_cv_system_error15\" >&5\n-echo \"${ECHO_T}$glibcxx_cv_system_error15\" >&6\n-if test x\"$glibcxx_cv_system_error15\" = x\"yes\"; then\n-\n cat >>confdefs.h <<\\_ACEOF\n #define HAVE_ETXTBSY 1\n _ACEOF"}, {"sha": "f5494ed38f5fe5ff9a6444169e192be8fa937018", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -566,6 +566,110 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       static const float_round_style round_style = round_toward_zero;\n     };\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  /// numeric_limits<char16_t> specialization.\n+  template<>\n+    struct numeric_limits<char16_t>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static char16_t min() throw()\n+      { return __glibcxx_min (char16_t); }\n+      static char16_t max() throw()\n+      { return __glibcxx_max (char16_t); }\n+\n+      static const int digits = __glibcxx_digits (char16_t);\n+      static const int digits10 = __glibcxx_digits10 (char16_t);\n+      static const bool is_signed = __glibcxx_signed (char16_t);\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static char16_t epsilon() throw()\n+      { return 0; }\n+      static char16_t round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static char16_t infinity() throw()\n+      { return char16_t(); }\n+      static char16_t quiet_NaN() throw()\n+      { return char16_t(); }\n+      static char16_t signaling_NaN() throw()\n+      { return char16_t(); }\n+      static char16_t denorm_min() throw()\n+      { return char16_t(); }\n+\n+      static const bool is_iec559 = false;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = true;\n+\n+      static const bool traps = __glibcxx_integral_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+\n+  /// numeric_limits<char32_t> specialization.\n+  template<>\n+    struct numeric_limits<char32_t>\n+    {\n+      static const bool is_specialized = true;\n+\n+      static char32_t min() throw()\n+      { return __glibcxx_min (char32_t); }\n+      static char32_t max() throw()\n+      { return __glibcxx_max (char32_t); }\n+\n+      static const int digits = __glibcxx_digits (char32_t);\n+      static const int digits10 = __glibcxx_digits10 (char32_t);\n+      static const bool is_signed = __glibcxx_signed (char32_t);\n+      static const bool is_integer = true;\n+      static const bool is_exact = true;\n+      static const int radix = 2;\n+      static char32_t epsilon() throw()\n+      { return 0; }\n+      static char32_t round_error() throw()\n+      { return 0; }\n+\n+      static const int min_exponent = 0;\n+      static const int min_exponent10 = 0;\n+      static const int max_exponent = 0;\n+      static const int max_exponent10 = 0;\n+\n+      static const bool has_infinity = false;\n+      static const bool has_quiet_NaN = false;\n+      static const bool has_signaling_NaN = false;\n+      static const float_denorm_style has_denorm = denorm_absent;\n+      static const bool has_denorm_loss = false;\n+\n+      static char32_t infinity() throw()\n+      { return char32_t(); }\n+      static char32_t quiet_NaN() throw()\n+      { return char32_t(); }\n+      static char32_t signaling_NaN() throw()\n+      { return char32_t(); }\n+      static char32_t denorm_min() throw()\n+      { return char32_t(); }\n+\n+      static const bool is_iec559 = false;\n+      static const bool is_bounded = true;\n+      static const bool is_modulo = true;\n+\n+      static const bool traps = __glibcxx_integral_traps;\n+      static const bool tinyness_before = false;\n+      static const float_round_style round_style = round_toward_zero;\n+    };\n+#endif\n+\n   /// numeric_limits<short> specialization.\n   template<>\n     struct numeric_limits<short>"}, {"sha": "49f2cb7384d89a1c0a65c9e00c2d79c57d3f3200", "filename": "libstdc++-v3/include/tr1_impl/functional_hash.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ffunctional_hash.h?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -67,6 +67,10 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   _TR1_hashtable_define_trivial_hash(signed char);\n   _TR1_hashtable_define_trivial_hash(unsigned char);\n   _TR1_hashtable_define_trivial_hash(wchar_t);\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+  _TR1_hashtable_define_trivial_hash(char16_t);\n+  _TR1_hashtable_define_trivial_hash(char32_t);\n+#endif\n   _TR1_hashtable_define_trivial_hash(short);\n   _TR1_hashtable_define_trivial_hash(int);\n   _TR1_hashtable_define_trivial_hash(long);"}, {"sha": "5d0824a365fdaaf93ab441bcf26881d61cbf75b7", "filename": "libstdc++-v3/include/tr1_impl/type_traits", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Ftype_traits?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -101,6 +101,10 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   _DEFINE_SPEC(0, is_integral, unsigned char, true)\n #ifdef _GLIBCXX_USE_WCHAR_T\n   _DEFINE_SPEC(0, is_integral, wchar_t, true)\n+#endif\n+#ifdef _GLIBCXX_INCLUDE_AS_CXX0X\n+  _DEFINE_SPEC(0, is_integral, char16_t, true)\n+  _DEFINE_SPEC(0, is_integral, char32_t, true)\n #endif\n   _DEFINE_SPEC(0, is_integral, short, true)\n   _DEFINE_SPEC(0, is_integral, unsigned short, true)"}, {"sha": "f5d99c63525b351a7f1078b8978695734d517b5c", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -1,6 +1,7 @@\n ## Makefile for the src subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n+## Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+## 2006, 2007, 2008\n ## Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n@@ -155,6 +156,7 @@ sources = \\\n \tios_init.cc \\\n \tios_locale.cc \\\n \tlimits.cc \\\n+\tlimits_c++0x.cc \\\n \tlist.cc \\\n \tdebug_list.cc \\\n \tlocale.cc \\\n@@ -261,6 +263,11 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+limits_c++0x.lo: limits_c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+limits_c++0x.o: limits_c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n date_time.lo: date_time.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n date_time.o: date_time.cc"}, {"sha": "508a399e7e8a8e1231294f9e59df39e3ce0332d1", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -77,17 +77,17 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \tcomplex_io.cc ctype.cc date_time.cc debug.cc functexcept.cc \\\n \thash.cc hash_c++0x.cc globals_io.cc hashtable.cc \\\n \thashtable_c++0x.cc ios.cc ios_failure.cc ios_init.cc \\\n-\tios_locale.cc limits.cc list.cc debug_list.cc locale.cc \\\n-\tlocale_init.cc locale_facets.cc localename.cc stdexcept.cc \\\n-\tstrstream.cc system_error.cc tree.cc allocator-inst.cc \\\n-\tconcept-inst.cc fstream-inst.cc ext-inst.cc ios-inst.cc \\\n-\tiostream-inst.cc istream-inst.cc istream.cc locale-inst.cc \\\n-\tmisc-inst.cc ostream-inst.cc sstream-inst.cc streambuf-inst.cc \\\n-\tstreambuf.cc string-inst.cc valarray-inst.cc wlocale-inst.cc \\\n-\twstring-inst.cc mutex.cc condition_variable.cc atomicity.cc \\\n-\tcodecvt_members.cc collate_members.cc ctype_members.cc \\\n-\tmessages_members.cc monetary_members.cc numeric_members.cc \\\n-\ttime_members.cc basic_file.cc c++locale.cc \\\n+\tios_locale.cc limits.cc limits_c++0x.cc list.cc debug_list.cc \\\n+\tlocale.cc locale_init.cc locale_facets.cc localename.cc \\\n+\tstdexcept.cc strstream.cc system_error.cc tree.cc \\\n+\tallocator-inst.cc concept-inst.cc fstream-inst.cc ext-inst.cc \\\n+\tios-inst.cc iostream-inst.cc istream-inst.cc istream.cc \\\n+\tlocale-inst.cc misc-inst.cc ostream-inst.cc sstream-inst.cc \\\n+\tstreambuf-inst.cc streambuf.cc string-inst.cc valarray-inst.cc \\\n+\twlocale-inst.cc wstring-inst.cc mutex.cc condition_variable.cc \\\n+\tatomicity.cc codecvt_members.cc collate_members.cc \\\n+\tctype_members.cc messages_members.cc monetary_members.cc \\\n+\tnumeric_members.cc time_members.cc basic_file.cc c++locale.cc \\\n \tcompatibility-ldbl.cc parallel_list.cc parallel_settings.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n@@ -102,7 +102,7 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tctype.lo date_time.lo debug.lo functexcept.lo hash.lo \\\n \thash_c++0x.lo globals_io.lo hashtable.lo hashtable_c++0x.lo \\\n \tios.lo ios_failure.lo ios_init.lo ios_locale.lo limits.lo \\\n-\tlist.lo debug_list.lo locale.lo locale_init.lo \\\n+\tlimits_c++0x.lo list.lo debug_list.lo locale.lo locale_init.lo \\\n \tlocale_facets.lo localename.lo stdexcept.lo strstream.lo \\\n \tsystem_error.lo tree.lo allocator-inst.lo concept-inst.lo \\\n \tfstream-inst.lo ext-inst.lo ios-inst.lo iostream-inst.lo \\\n@@ -392,6 +392,7 @@ sources = \\\n \tios_init.cc \\\n \tios_locale.cc \\\n \tlimits.cc \\\n+\tlimits_c++0x.cc \\\n \tlist.cc \\\n \tdebug_list.cc \\\n \tlocale.cc \\\n@@ -856,6 +857,11 @@ hashtable_c++0x.lo: hashtable_c++0x.cc\n hashtable_c++0x.o: hashtable_c++0x.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+limits_c++0x.lo: limits_c++0x.cc\n+\t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n+limits_c++0x.o: limits_c++0x.cc\n+\t$(CXXCOMPILE) -std=gnu++0x -c $<\n+\n date_time.lo: date_time.cc\n \t$(LTCXXCOMPILE) -std=gnu++0x -c $<\n date_time.o: date_time.cc"}, {"sha": "d3d5df68ab89a77a1faa726f6c34f64e84d2def4", "filename": "libstdc++-v3/src/limits_c++0x.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fsrc%2Flimits_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Fsrc%2Flimits_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits_c%2B%2B0x.cc?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -0,0 +1,81 @@\n+// std::limits definitions -*- C++ -*-\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <limits>\n+\n+namespace std\n+{\n+  // char16_t\n+  const bool numeric_limits<char16_t>::is_specialized;\n+  const int  numeric_limits<char16_t>::digits;\n+  const int  numeric_limits<char16_t>::digits10;\n+  const bool numeric_limits<char16_t>::is_signed;\n+  const bool numeric_limits<char16_t>::is_integer;\n+  const bool numeric_limits<char16_t>::is_exact;\n+  const int  numeric_limits<char16_t>::radix;\n+  const int  numeric_limits<char16_t>::min_exponent;\n+  const int  numeric_limits<char16_t>::min_exponent10;\n+  const int  numeric_limits<char16_t>::max_exponent;\n+  const int  numeric_limits<char16_t>::max_exponent10;\n+  const bool numeric_limits<char16_t>::has_infinity;\n+  const bool numeric_limits<char16_t>::has_quiet_NaN;\n+  const bool numeric_limits<char16_t>::has_signaling_NaN;\n+  const float_denorm_style numeric_limits<char16_t>::has_denorm;\n+  const bool numeric_limits<char16_t>::has_denorm_loss;\n+  const bool numeric_limits<char16_t>::is_iec559;\n+  const bool numeric_limits<char16_t>::is_bounded;\n+  const bool numeric_limits<char16_t>::is_modulo;\n+  const bool numeric_limits<char16_t>::traps;\n+  const bool numeric_limits<char16_t>::tinyness_before;\n+  const float_round_style numeric_limits<char16_t>::round_style;\n+\n+  // char32_t\n+  const bool numeric_limits<char32_t>::is_specialized;\n+  const int  numeric_limits<char32_t>::digits;\n+  const int  numeric_limits<char32_t>::digits10;\n+  const bool numeric_limits<char32_t>::is_signed;\n+  const bool numeric_limits<char32_t>::is_integer;\n+  const bool numeric_limits<char32_t>::is_exact;\n+  const int  numeric_limits<char32_t>::radix;\n+  const int  numeric_limits<char32_t>::min_exponent;\n+  const int  numeric_limits<char32_t>::min_exponent10;\n+  const int  numeric_limits<char32_t>::max_exponent;\n+  const int  numeric_limits<char32_t>::max_exponent10;\n+  const bool numeric_limits<char32_t>::has_infinity;\n+  const bool numeric_limits<char32_t>::has_quiet_NaN;\n+  const bool numeric_limits<char32_t>::has_signaling_NaN;\n+  const float_denorm_style numeric_limits<char32_t>::has_denorm;\n+  const bool numeric_limits<char32_t>::has_denorm_loss;\n+  const bool numeric_limits<char32_t>::is_iec559;\n+  const bool numeric_limits<char32_t>::is_bounded;\n+  const bool numeric_limits<char32_t>::is_modulo;\n+  const bool numeric_limits<char32_t>::traps;\n+  const bool numeric_limits<char32_t>::tinyness_before;\n+  const float_round_style numeric_limits<char32_t>::round_style;\n+}"}, {"sha": "c2957506cb0bdbbe8d8e337c833b4f552d0f84c0", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/char16_32_t.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fchar16_32_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fchar16_32_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fchar16_32_t.cc?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 18.2.1.1 template class numeric_limits\n+\n+#include <limits>\n+#include <cstdint>\n+#include <testsuite_hooks.h>\n+\n+// Test specializations for char16_t and char32_t, in C++0x.\n+template<typename T, typename R>\n+  void\n+  do_test()\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    typedef std::numeric_limits<T> char_type;\n+    typedef std::numeric_limits<R> impl_type;\n+\n+    VERIFY( char_type::is_specialized == impl_type::is_specialized );\n+    VERIFY( char_type::min() == impl_type::min() );\n+    VERIFY( char_type::max() == impl_type::max() );\n+    VERIFY( char_type::digits == impl_type::digits );\n+    VERIFY( char_type::digits10 == impl_type::digits10 );\n+    VERIFY( char_type::is_signed == impl_type::is_signed );\n+    VERIFY( char_type::is_integer == impl_type::is_integer );\n+    VERIFY( char_type::is_exact == impl_type::is_exact );\n+    VERIFY( char_type::radix == impl_type::radix );\n+    VERIFY( char_type::epsilon() == impl_type::epsilon() );\n+    VERIFY( char_type::round_error() == impl_type::round_error() );\n+    VERIFY( char_type::min_exponent == impl_type::min_exponent );\n+    VERIFY( char_type::min_exponent10 == impl_type::min_exponent10 );\n+    VERIFY( char_type::max_exponent == impl_type::max_exponent );\n+    VERIFY( char_type::max_exponent10 == impl_type::max_exponent10 );\n+    VERIFY( char_type::has_infinity == impl_type::has_infinity );\n+    VERIFY( char_type::has_quiet_NaN == impl_type::has_quiet_NaN );\n+    VERIFY( char_type::has_signaling_NaN == impl_type::has_signaling_NaN );\n+    VERIFY( char_type::has_denorm == impl_type::has_denorm );\n+    VERIFY( char_type::has_denorm_loss == impl_type::has_denorm_loss );\n+    VERIFY( char_type::infinity() == impl_type::infinity() );\n+    VERIFY( char_type::quiet_NaN() == impl_type::quiet_NaN() );\n+    VERIFY( char_type::signaling_NaN() == impl_type::signaling_NaN() );\n+    VERIFY( char_type::denorm_min() == impl_type::denorm_min() );\n+    VERIFY( char_type::is_iec559 == impl_type::is_iec559 );\n+    VERIFY( char_type::is_bounded == impl_type::is_bounded );\n+    VERIFY( char_type::is_modulo == impl_type::is_modulo );\n+    VERIFY( char_type::traps == impl_type::traps );\n+    VERIFY( char_type::tinyness_before == impl_type::tinyness_before );\n+    VERIFY( char_type::round_style == impl_type::round_style );\n+  }\n+\n+int main()\n+{\n+#if _GLIBCXX_USE_C99_STDINT_TR1\n+  do_test<char16_t, uint_least16_t>();\n+  do_test<char32_t, uint_least32_t>();\n+#endif\n+  return 0;\n+}"}, {"sha": "91b8db017ef4d086c0335acb4afa6d1b3be146e9", "filename": "libstdc++-v3/testsuite/20_util/hash/requirements/explicit_instantiation.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fhash%2Frequirements%2Fexplicit_instantiation.cc?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -1,7 +1,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,6 +28,8 @@ template class std::hash<bool>;\n template class std::hash<char>;\n template class std::hash<signed char>;\n template class std::hash<unsigned char>;\n+template class std::hash<char16_t>;\n+template class std::hash<char32_t>;\n template class std::hash<short>;\n template class std::hash<int>;\n template class std::hash<long>;"}, {"sha": "f3acb574369fee557ec1872823eadab70508536f", "filename": "libstdc++-v3/testsuite/20_util/is_integral/requirements/explicit_instantiation.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Frequirements%2Fexplicit_instantiation.cc?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+// 2008-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_integral<test_type>;\n+}"}, {"sha": "61ef22e5392d9b1056dd340b8fc3179d2a93f7cd", "filename": "libstdc++-v3/testsuite/20_util/is_integral/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Frequirements%2Ftypedefs.cc?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_integral<int>               test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "5ff12c8f2c0fc3b27c1fb01c10d5c4ed45c1d8d3", "filename": "libstdc++-v3/testsuite/20_util/is_integral/value.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fb0445da6a641f2723de1fda82bbc31040dd25b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_integral%2Fvalue.cc?ref=5fb0445da6a641f2723de1fda82bbc31040dd25b", "patch": "@@ -0,0 +1,63 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_integral;\n+  using namespace __gnu_test;\n+  \n+  VERIFY( (test_category<is_integral, void>(false)) );\n+  \n+  VERIFY( (test_category<is_integral, char>(true)) );\n+  VERIFY( (test_category<is_integral, signed char>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned char>(true)) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( (test_category<is_integral, wchar_t>(true)) );\n+#endif\n+  VERIFY( (test_category<is_integral, char16_t>(true)) );\n+  VERIFY( (test_category<is_integral, char32_t>(true)) );\n+  VERIFY( (test_category<is_integral, short>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned short>(true)) );\n+  VERIFY( (test_category<is_integral, int>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned int>(true)) );\n+  VERIFY( (test_category<is_integral, long>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned long>(true)) );\n+  VERIFY( (test_category<is_integral, long long>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned long long>(true)) );\n+\n+  VERIFY( (test_category<is_integral, float>(false)) );\n+  VERIFY( (test_category<is_integral, double>(false)) );\n+  VERIFY( (test_category<is_integral, long double>(false)) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_integral, ClassType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}