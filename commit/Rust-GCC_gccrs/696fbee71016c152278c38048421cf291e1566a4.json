{"sha": "696fbee71016c152278c38048421cf291e1566a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk2ZmJlZTcxMDE2YzE1MjI3OGMzODA0ODQyMWNmMjkxZTE1NjZhNA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2007-04-03T15:28:16Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-04-03T15:28:16Z"}, "message": "jvgenmain.c (main): Change main to use class$, not class$$.\n\n2007-04-03  Andrew Haley  <aph@redhat.com>\n\n        * jvgenmain.c (main): Change main to use class$, not class$$.\n        (do_mangle_classname): Likewise.\n        * class.c (hide): New function.\n        (add_field): Hide everything that shouldn't be visible outside a\n        DSO.\n        (build_static_class_ref): Likewise.\n        (build_classdollar_field): Likewise.\n        (make_class_data): Likewise.\n        (layout_class_method): Likewise.\n        * expr.c (special_method_p): New function.\n\n        * class.c (push_class): Don't bogusly guess the source filename.\n        * jcf-parse.c (give_name_to_class): Don't set input_location from\n        DECL_ARTIFICIAL decls.\n\nFrom-SVN: r123476", "tree": {"sha": "60fe445d5b46b75e3d08f3d3944f489dda85b945", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60fe445d5b46b75e3d08f3d3944f489dda85b945"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/696fbee71016c152278c38048421cf291e1566a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696fbee71016c152278c38048421cf291e1566a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/696fbee71016c152278c38048421cf291e1566a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696fbee71016c152278c38048421cf291e1566a4/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83ff0d10edd6af76343e00f4cd8cdb78c1c0b640", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ff0d10edd6af76343e00f4cd8cdb78c1c0b640", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ff0d10edd6af76343e00f4cd8cdb78c1c0b640"}], "stats": {"total": 83, "additions": 74, "deletions": 9}, "files": [{"sha": "e02257fb84e5f611060c03ab21ffe140f88416bb", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=696fbee71016c152278c38048421cf291e1566a4", "patch": "@@ -1,3 +1,20 @@\n+2007-04-03  Andrew Haley  <aph@redhat.com>\n+\n+        * jvgenmain.c (main): Change main to use class$, not class$$.\n+        (do_mangle_classname): Likewise.\n+        * class.c (hide): New function.\n+        (add_field): Hide everything that shouldn't be visible outside a\n+        DSO.\n+        (build_static_class_ref): Likewise.\n+        (build_classdollar_field): Likewise.\n+        (make_class_data): Likewise.\n+        (layout_class_method): Likewise.\n+        * expr.c (special_method_p): New function.\n+\n+\t* class.c (push_class): Don't bogusly guess the source filename.\n+\t* jcf-parse.c (give_name_to_class): Don't set input_location from\n+\tDECL_ARTIFICIAL decls.\n+\n 2007-03-30  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* typeck.c (java_signed_or_unsigned_type): Removed."}, {"sha": "d7074610c7de9fe77805bc1479556158cb28bd45", "filename": "gcc/java/class.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=696fbee71016c152278c38048421cf291e1566a4", "patch": "@@ -428,8 +428,7 @@ push_class (tree class_type, tree class_name)\n   tree decl, signature;\n   location_t saved_loc = input_location;\n #ifndef USE_MAPPED_LOCATION\n-  tree source_name = identifier_subst (class_name, \"\", '.', '/', \".java\");\n-  input_filename = IDENTIFIER_POINTER (source_name);\n+  input_filename = \"<unknown>\";\n   input_line = 0;\n #endif\n   CLASS_P (class_type) = 1;\n@@ -691,6 +690,13 @@ build_java_method_type (tree fntype, tree this_class, int access_flags)\n   return fntype;\n }\n \n+static void\n+hide (tree decl)\n+{\n+  DECL_VISIBILITY (decl) = VISIBILITY_HIDDEN;\n+  DECL_VISIBILITY_SPECIFIED (decl) = 1;\n+}\n+\n tree\n add_method_1 (tree this_class, int access_flags, tree name, tree function_type)\n {\n@@ -801,6 +807,10 @@ add_field (tree class, tree name, tree field_type, int flags)\n       /* Always make field externally visible.  This is required so\n \t that native methods can always access the field.  */\n       TREE_PUBLIC (field) = 1;\n+      /* Hide everything that shouldn't be visible outside a DSO.  */\n+      if (flag_indirect_classes\n+\t  || (FIELD_PRIVATE (field)))\n+\thide (field);\n       /* Considered external unless we are compiling it into this\n \t object file.  */\n       DECL_EXTERNAL (field) = (is_compiled_class (class) != 2);\n@@ -958,7 +968,11 @@ build_static_class_ref (tree type)\n       decl = build_decl (VAR_DECL, decl_name, class_type_node);\n       TREE_STATIC (decl) = 1;\n       if (! flag_indirect_classes)\n-\tTREE_PUBLIC (decl) = 1;\n+\t{\n+\t  TREE_PUBLIC (decl) = 1;\n+\t  if (CLASS_PRIVATE (TYPE_NAME (type)))\n+\t    hide (decl);\n+\t}\n       DECL_IGNORED_P (decl) = 1;\n       DECL_ARTIFICIAL (decl) = 1;\n       if (is_compiled_class (type) == 1)\n@@ -997,6 +1011,7 @@ build_classdollar_field (tree type)\n       TREE_CONSTANT (decl) = 1;\n       TREE_READONLY (decl) = 1;\n       TREE_PUBLIC (decl) = 1;\n+      hide (decl);\n       DECL_IGNORED_P (decl) = 1;\n       DECL_ARTIFICIAL (decl) = 1;\n       MAYBE_CREATE_VAR_LANG_DECL_SPECIFIC (decl);\n@@ -1684,6 +1699,10 @@ make_class_data (tree type)\n \n       TREE_PUBLIC (dtable_decl) = 1;\n       DECL_INITIAL (dtable_decl) = dtable;\n+      /* The only dispatch table exported from a DSO is the dispatch\n+\t table for java.lang.Class.  */\n+      if (DECL_NAME (type_decl) != id_class)\n+\thide (dtable_decl);\n       if (! flag_indirect_classes)\n \trest_of_decl_compilation (dtable_decl, 1, 0);\n       /* Maybe we're compiling Class as the first class.  If so, set\n@@ -2553,6 +2572,12 @@ layout_class_method (tree this_class, tree super_class,\n \n   TREE_PUBLIC (method_decl) = 1;\n \n+  if (flag_indirect_classes\n+      || (METHOD_PRIVATE (method_decl) && METHOD_STATIC (method_decl)\n+\t  && ! METHOD_NATIVE (method_decl)\n+\t  && ! special_method_p (method_decl)))\n+    hide (method_decl);\n+\n   /* Considered external unless it is being compiled into this object\n      file, or it was already flagged as external.  */\n   if (!DECL_EXTERNAL (method_decl))"}, {"sha": "1a5ec68648bc024e5c857af9179c2481c7bde8fc", "filename": "gcc/java/expr.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=696fbee71016c152278c38048421cf291e1566a4", "patch": "@@ -2095,6 +2095,25 @@ static rewrite_rule rules[] =\n \n    {NULL, NULL, NULL, NULL, 0, NULL}};\n \n+/* True if this method is special, i.e. it's a private method that\n+   should be exported from a DSO.  */\n+\n+bool\n+special_method_p (tree candidate_method)\n+{\n+  tree context = DECL_NAME (TYPE_NAME (DECL_CONTEXT (candidate_method)));\n+  tree method = DECL_NAME (candidate_method);\n+  rewrite_rule *p;\n+\n+  for (p = rules; p->classname; p++)\n+    {\n+      if (get_identifier (p->classname) == context\n+\t  && get_identifier (p->method) == method)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n /* Scan the rules list for replacements for *METHOD_P and replace the\n    args accordingly.  If the rewrite results in an access to a private\n    method, update SPECIAL.*/"}, {"sha": "00ac1b97e9f50d8dd4ea1144625aaf52e2dc3ebb", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=696fbee71016c152278c38048421cf291e1566a4", "patch": "@@ -1174,6 +1174,7 @@ extern tree check_for_builtin (tree, tree);\n extern void initialize_builtins (void);\n \n extern tree lookup_name (tree);\n+extern bool special_method_p (tree);\n extern void maybe_rewrite_invocation (tree *, tree *, tree *, tree *);\n extern tree build_known_method_ref (tree, tree, tree, tree, tree, tree);\n extern tree build_class_init (tree, tree);"}, {"sha": "9411119d0a9f20e30a02dcbd4821d1de39883371", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=696fbee71016c152278c38048421cf291e1566a4", "patch": "@@ -1218,9 +1218,12 @@ give_name_to_class (JCF *jcf, int i)\n \tmain_input_filename = sfname;\n       }\n #else\n-      input_location = DECL_SOURCE_LOCATION (TYPE_NAME (this_class));\n-      if (main_input_filename == NULL && jcf == main_jcf)\n-\tmain_input_filename = input_filename;\n+     if (! DECL_ARTIFICIAL (TYPE_NAME (this_class)))\n+      {\n+\tinput_location = DECL_SOURCE_LOCATION (TYPE_NAME (this_class));\n+\tif (main_input_filename == NULL && jcf == main_jcf)\n+\t  main_input_filename = input_filename;\n+      }\n #endif\n \n       jcf->cpool.data[i].t = this_class;"}, {"sha": "0bce0043b71ae07459c16625ce08b0436af255f6", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/696fbee71016c152278c38048421cf291e1566a4/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=696fbee71016c152278c38048421cf291e1566a4", "patch": "@@ -143,8 +143,8 @@ main (int argc, char **argv)\n     fprintf (stream, \"   JvRunMainName (\\\"%s\\\", argc, argv);\\n\", classname);\n   else\n     {\n-      fprintf (stream, \"   extern void *%s;\\n\", mangled_classname);\n-      fprintf (stream, \"   JvRunMain (%s, argc, argv);\\n\", mangled_classname);\n+      fprintf (stream, \"   extern char %s;\\n\", mangled_classname);\n+      fprintf (stream, \"   JvRunMain (&%s, argc, argv);\\n\", mangled_classname);\n     }\n   fprintf (stream, \"}\\n\");\n   if (stream != stdout && fclose (stream) != 0)\n@@ -176,7 +176,7 @@ do_mangle_classname (const char *string)\n \tcount++;\n     }\n   append_gpp_mangled_name (&ptr [-count], count);\n-  obstack_grow (mangle_obstack, \"7class$$E\", strlen (\"7class$$E\"));\n+  obstack_grow (mangle_obstack, \"6class$E\", strlen (\"6class$E\"));\n   obstack_1grow (mangle_obstack, '\\0');\n   return obstack_finish (mangle_obstack);\n }"}]}