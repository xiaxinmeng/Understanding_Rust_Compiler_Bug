{"sha": "82daaf6d550e9380e33f802310b52c2af1758ff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJkYWFmNmQ1NTBlOTM4MGUzM2Y4MDIzMTBiNTJjMmFmMTc1OGZmMA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-11-23T08:23:59Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-11-23T08:23:59Z"}, "message": "PR c++/51145 - Alias template in elaborated-type-specifier accepted\n\ngcc/cp/\n\n\tPR c++/51145\n\t* decl.c (check_elaborated_type_specifier): Gracefully handle\n\terror_mark_node.  Accept bound template template parameters.\n\tUpdate diagnostics for alias template specializations.  Update\n\tcomment.\n\t* parser.c (cp_parser_elaborated_type_specifier): Use\n\tcheck_elaborated_type_specifier for simple-template-ids as well.\n\ngcc/testsuite/\n\n\tPR c++/51145\n\t* g++.dg/cpp0x/alias-decl-14.C: New test.\n\t* g++.dg/cpp0x/alias-decl-2.C: Adjust for tests that were wrongly\n\tpassing before.\n\t* g++.dg/cpp0x/alias-decl-10.C: Likewise and adjust for diagnostic\n\tchange.\n\t* g++.dg/ext/attrib27.C: Adjust for diagnostic change.\n\t* g++.dg/lookup/struct1.C: Likewise.\n\t* g++.dg/parse/elab1.C: Likewise.\n\t* g++.dg/parse/elab2.C: Likewise.\n\t* g++.dg/parse/int-as-enum1.C: Likewise.\n\t* g++.dg/parse/typedef1.C: Likewise.\n\t* g++.dg/parse/typedef3.C: Likewise.\n\t* g++.dg/parse/typedef4.C: Likewise.\n\t* g++.dg/parse/typedef5.C: Likewise.\n\t* g++.dg/template/crash26.C: Likewise.\n\t* g++.dg/template/nontype4.C: Likewise.\n\t* g++.old-deja/g++.benjamin/typedef01.C: Likewise.\n\t* g++.old-deja/g++.brendan/line1.C: Likewise.\n\t* g++.old-deja/g++.other/elab1.C: Likewise.\n\t* g++.old-deja/g++.other/syntax4.C: Likewise.\n\nFrom-SVN: r181653", "tree": {"sha": "d99b07867ba0ab8aed14e5f7ad8d2531edaf7198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d99b07867ba0ab8aed14e5f7ad8d2531edaf7198"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82daaf6d550e9380e33f802310b52c2af1758ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82daaf6d550e9380e33f802310b52c2af1758ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82daaf6d550e9380e33f802310b52c2af1758ff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82daaf6d550e9380e33f802310b52c2af1758ff0/comments", "author": null, "committer": null, "parents": [{"sha": "b64cd62a6e012311c812b224198d4442a155e747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64cd62a6e012311c812b224198d4442a155e747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64cd62a6e012311c812b224198d4442a155e747"}], "stats": {"total": 124, "additions": 97, "deletions": 27}, "files": [{"sha": "6833fc390f293b596ae3f2d382ea55a51bca91ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -1,3 +1,13 @@\n+2011-11-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/51145\n+\t* decl.c (check_elaborated_type_specifier): Gracefully handle\n+\terror_mark_node.  Accept bound template template parameters.\n+\tUpdate diagnostics for alias template specializations.  Update\n+\tcomment.\n+\t* parser.c (cp_parser_elaborated_type_specifier): Use\n+\tcheck_elaborated_type_specifier for simple-template-ids as well.\n+\n 2011-11-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51265"}, {"sha": "84064326f4dd00172dd9c480eb77cac7eb9e2ab4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -11342,6 +11342,9 @@ check_elaborated_type_specifier (enum tag_types tag_code,\n {\n   tree type;\n \n+  if (decl == error_mark_node)\n+    return error_mark_node;\n+\n   /* In the case of:\n \n        struct S { struct S *p; };\n@@ -11361,10 +11364,15 @@ check_elaborated_type_specifier (enum tag_types tag_code,\n \t     type, tag_name (tag_code));\n       return error_mark_node;\n     }\n+  /* Accept bound template template parameters.  */\n+  else if (allow_template_p\n+\t   && TREE_CODE (type) == BOUND_TEMPLATE_TEMPLATE_PARM)\n+    ;\n   /*   [dcl.type.elab]\n \n-       If the identifier resolves to a typedef-name or a template\n-       type-parameter, the elaborated-type-specifier is ill-formed.\n+       If the identifier resolves to a typedef-name or the\n+       simple-template-id resolves to an alias template\n+       specialization, the elaborated-type-specifier is ill-formed.\n \n      In other words, the only legitimate declaration to use in the\n      elaborated type specifier is the implicit typedef created when\n@@ -11373,8 +11381,13 @@ check_elaborated_type_specifier (enum tag_types tag_code,\n \t   && !DECL_SELF_REFERENCE_P (decl)\n \t   && tag_code != typename_type)\n     {\n-      error (\"using typedef-name %qD after %qs\", decl, tag_name (tag_code));\n-      error (\"%q+D has a previous declaration here\", decl);\n+      if (alias_template_specialization_p (type))\n+\terror (\"using alias template specialization %qT after %qs\",\n+\t       type, tag_name (tag_code));\n+      else\n+\terror (\"using typedef-name %qD after %qs\", decl, tag_name (tag_code));\n+      inform (DECL_SOURCE_LOCATION (decl),\n+\t      \"%qD has a previous declaration here\", decl);\n       return error_mark_node;\n     }\n   else if (TREE_CODE (type) != RECORD_TYPE"}, {"sha": "2fdd6753d08802add0bc441b9df28e47c9767f12", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -13960,7 +13960,8 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n       else if (tag_type == typename_type && TREE_CODE (decl) != TYPE_DECL)\n         type = NULL_TREE; \n       else \n-\ttype = TREE_TYPE (decl);\n+\ttype = check_elaborated_type_specifier (tag_type, decl,\n+\t\t\t\t\t\t/*allow_template_p=*/true);\n     }\n \n   if (!type)"}, {"sha": "9b3b01f97ef2c831c47d4ca3112b861c8337a944", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -1,3 +1,27 @@\n+2011-11-22  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/51145\n+\t* g++.dg/cpp0x/alias-decl-14.C: New test.\n+\t* g++.dg/cpp0x/alias-decl-2.C: Adjust for tests that were wrongly\n+\tpassing before.\n+\t* g++.dg/cpp0x/alias-decl-10.C: Likewise and adjust for diagnostic\n+\tchange.\n+\t* g++.dg/ext/attrib27.C: Adjust for diagnostic change.\n+\t* g++.dg/lookup/struct1.C: Likewise.\n+\t* g++.dg/parse/elab1.C: Likewise.\n+\t* g++.dg/parse/elab2.C: Likewise.\n+\t* g++.dg/parse/int-as-enum1.C: Likewise.\n+\t* g++.dg/parse/typedef1.C: Likewise.\n+\t* g++.dg/parse/typedef3.C: Likewise.\n+\t* g++.dg/parse/typedef4.C: Likewise.\n+\t* g++.dg/parse/typedef5.C: Likewise.\n+\t* g++.dg/template/crash26.C: Likewise.\n+\t* g++.dg/template/nontype4.C: Likewise.\n+\t* g++.old-deja/g++.benjamin/typedef01.C: Likewise.\n+\t* g++.old-deja/g++.brendan/line1.C: Likewise.\n+\t* g++.old-deja/g++.other/elab1.C: Likewise.\n+\t* g++.old-deja/g++.other/syntax4.C: Likewise.\n+\n 2011-11-22  Tom de Vries  <tom@codesourcery.com>\n \n \tPR rtl-optimization/50764"}, {"sha": "733e791c2bc63b7e0ff65fc5a0015bd683a8527e", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-10.C", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-10.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -3,16 +3,24 @@\n template <class T> using Ptr = T*;\n Ptr<unsigned>; // { dg-error \"does not declare anything\" }\n Ptr<char><int>; // { dg-error \"not a template|does not declare anything\" }\n-template class Ptr<int>;//{ dg-error \"explicit instantiation|non-class templ|does not decl|anything\" }\n+template class Ptr<int>;//{ dg-error \"alias template specialization\\[^\\n\\r\\]*after\\[^\\n\\r\\]*class\" }\n \n template <class T> using Arg = T;\n struct A {};\n-template class Arg<A>;// { dg-error \"explicit instantiation|non-class templ\" }\n+template class Arg<A>;// { dg-error \"alias templ\\[^\\n\\r\\]*specialization\\[^\\n\\r\\]*Arg<A>\\[^\\n\\r\\]*after\\[^\\n\\r\\]*class\" }\n \n template <template <class> class TT, class T> using Instantiate = TT<T>;\n template <class> struct Vector {};\n-template class Instantiate<Vector, int>; // OK Vector<int> can be explicitely instantiated\n+\n+// The below is not OK, because of [dcl.type.elab]:\n+// \n+//     If the identifier resolves to a typedef-name or the\n+//     simple-template-id resolves to an alias template\n+//     specialization, the elaborated-type-specifier is ill-formed.\n+//\n+template class Instantiate<Vector, int>;//{ dg-error \"alias template specialization\\[^\\n\\r\\]*after\\[^\\n\\r\\]*class\" }\n \n template <class T> struct S {};\n template<class T> using SFor = S<T>;\n-template class SFor<int>; // OK, S<int> can be explicitely instantiated\n+// Likewise, this is not OK.\n+template class SFor<int>; //{ dg-error \"alias template specialization\\[^\\n\\r\\]*after\\[^\\n\\r\\]*class\" }"}, {"sha": "1a998022adcd375d3a989c4d2ce2da4e1c58146d", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-14.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-14.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -0,0 +1,14 @@\n+// Origin: PR c++/51145\n+// { dg-options \"-std=c++0x\" }\n+\n+struct A {};\n+\n+template<class>\n+using X = A;\n+\n+struct X<int>* px; // { dg-error \"using\\[^\\n\\r\\]*alias\\[^\\n\\r\\]*specialization\\[^\\n\\r\\]*X<int>\\[^\\n\\r\\]*after\\[^\\n\\r\\]*struct|invalid type in declaration before\\[^\\n\\r\\]*;\" }\n+\n+template<int>\n+using Y = A;\n+\n+struct Y<0>* py;// { dg-error \"alias\\[^\\n\\r\\]*specialization\\[^\\n\\r\\]*Y<0>\\[^\\n\\r\\]*after\\[^\\n\\r\\]*struct|invalid type in declaration before\\[^\\n\\r\\]*;\" }"}, {"sha": "6b5b42f7fde2f1a7e568659d164755e456fee45f", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-2.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -6,7 +6,7 @@ template<class T> using AS0 = S0<T>;\n template<template<class> class TT>\n void f(TT<int>);\n \n-template class AS0<char>;\n+template class AS0<char>; // { dg-error \"alias templ\\[^\\n\\r\\]*specialization\\[^\\n\\r\\]*after\\[^\\n\\r\\]*class\" }\n \n void\n foo()"}, {"sha": "b770c1c4404b9093a615f2beeff2579b8473c483", "filename": "gcc/testsuite/g++.dg/ext/attrib27.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib27.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -1,5 +1,5 @@\n //PR c++/29980\n \n-struct A { typedef int X; };            // { dg-error \"previous declaration\" }\n+struct A { typedef int X; };            // { dg-message \"previous declaration\" }\n \n struct __attribute__((unused)) A::X;    // { dg-error \"typedef-name\" }"}, {"sha": "7c1e38c1863fdeacbb8f9fe3a7545ab62c794522", "filename": "gcc/testsuite/g++.dg/lookup/struct1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstruct1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstruct1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fstruct1.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -2,10 +2,10 @@\n // the definition of C.\n \n struct A;\n-typedef struct A B;\t\t// { dg-error \"previous declaration\" }\n+typedef struct A B;\t\t// { dg-message \"previous declaration\" }\n struct B;\t\t\t// { dg-error \"using typedef-name\" }\n \n-typedef struct { int i; } C;\t// { dg-error \"previous declaration\" }\n+typedef struct { int i; } C;\t// { dg-message \"previous declaration\" }\n struct C;\t\t\t// { dg-error \"using typedef-name\" }\n \n struct D;"}, {"sha": "8108e1d0f6d106fb86d17e74e1fa192635f4fb90", "filename": "gcc/testsuite/g++.dg/parse/elab1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felab1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felab1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felab1.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -1,6 +1,6 @@\n namespace Name {\n \n-    typedef void *(*Function)( void *, int ); // { dg-error \"previous declaration\" }\n+    typedef void *(*Function)( void *, int ); // { dg-message \"previous declaration\" }\n \n     struct Foo {\n       struct Function xyz[5]; // { dg-error \"\" }"}, {"sha": "bf59f1b711dc956d8006d2e1c44857800f6263d0", "filename": "gcc/testsuite/g++.dg/parse/elab2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felab2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felab2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Felab2.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -2,6 +2,6 @@ struct A {};\n \n struct B\n {\n-  typedef A T; // { dg-error \"previous declaration\" }\n+  typedef A T; // { dg-message \"previous declaration\" }\n   friend struct T; // { dg-error \"\" }\n };"}, {"sha": "c5ed261f6254c34f56f4f00ef3342a57aecfb6aa", "filename": "gcc/testsuite/g++.dg/parse/int-as-enum1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fint-as-enum1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fint-as-enum1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fint-as-enum1.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -2,5 +2,5 @@\n // Origin: <wanderer@rsu.ru>\n // { dg-do compile }\n \n-typedef int A;\t// { dg-error \"previous\" }\n+typedef int A;\t// { dg-message \"previous\" }\n enum ::A {};\t// { dg-error \"typedef-name|expected unqualified-id\" }"}, {"sha": "4d6f5b4fba5df9fe15343f42701ae5dc5a03f262", "filename": "gcc/testsuite/g++.dg/parse/typedef1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef1.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -1,3 +1,3 @@\n // PR c++/6477\n-typedef struct A_ *A;\t// { dg-error \"previous declaration\" }\n+typedef struct A_ *A;\t// { dg-message \"previous declaration\" }\n typedef struct A B;\t// { dg-error \"typedef|invalid type\" }"}, {"sha": "3f6a7cb91b48f6bb2422670e45a1919b2e0c43e3", "filename": "gcc/testsuite/g++.dg/parse/typedef3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef3.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -2,6 +2,6 @@\n // Origin: Travis J.I. Corcoran <tjic@permabit.com>\n // { dg-do compile }\n \n-struct A { typedef A* Ptr; };\t// { dg-error \"previous declaration\" }\n+struct A { typedef A* Ptr; };\t// { dg-message \"previous declaration\" }\n \n struct A::Ptr;\t\t\t// { dg-error \"typedef|not declare anything\" }"}, {"sha": "d4cec7f9c5241c00f49637eedb4012ab976869dd", "filename": "gcc/testsuite/g++.dg/parse/typedef4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef4.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -7,6 +7,6 @@\n template<class T> class smart_ptr2 {\n     T* real_ptr;\n  public:\n-    typedef typename T::subT  td; // { dg-error \"previous declaration\" }\n+    typedef typename T::subT  td; // { dg-message \"previous declaration\" }\n     friend class td; // { dg-error \"typedef|not name a class\" }\n };"}, {"sha": "ecd1d513efa75decafb1edc2733db903e504615a", "filename": "gcc/testsuite/g++.dg/parse/typedef5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef5.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -1,6 +1,6 @@\n namespace A\n {\n-  typedef int T;\t// { dg-error \"previous declaration\" }\n+  typedef int T;\t// { dg-message \"previous declaration\" }\n }\n \n class A::T x;\t\t// { dg-error \"using typedef-name|invalid type\" }"}, {"sha": "3be7ff97c26f261de325bc5121403adebd8144f2", "filename": "gcc/testsuite/g++.dg/template/crash26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash26.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -4,5 +4,5 @@\n \n // PR c++/18471: ICE redeclaration of typedef as class template\n \n-typedef int X;\t\t\t// { dg-error \"previous\" }\n+typedef int X;\t\t\t// { dg-message \"previous\" }\n template<X> struct X {};\t// { dg-error \"typedef-name\" }"}, {"sha": "41e3e22c0003b6d7682dfb5695db3768f155dbaf", "filename": "gcc/testsuite/g++.dg/template/nontype4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype4.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -7,7 +7,7 @@\n \n template <int> struct A\n {\n-    typedef A<0> B;\t\t// { dg-error \"previous declaration\" }\n+    typedef A<0> B;\t\t// { dg-message \"previous declaration\" }\n     template <B> struct B {};\t// { dg-error \"not a valid type|typedef\" }\n };\n "}, {"sha": "d5ed39af3644a919a07efd4020a4c78add6e95ae", "filename": "gcc/testsuite/g++.old-deja/g++.benjamin/typedef01.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftypedef01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftypedef01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.benjamin%2Ftypedef01.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -18,7 +18,7 @@ typedef I I;\n //p3--cannot redefine to a different type in a given scope\n class complex2 { /* ... */ };// { dg-error \"\" } .*\n typedef int complex2;// { dg-error \"\" } .*\n-typedef int complex3;// { dg-error \"\" } .*\n+typedef int complex3;// { dg-message \"\" } .*\n class complex3 { /* ... */ };// { dg-error \"\" } .*\n \n \n@@ -37,7 +37,7 @@ struct S {\n   ~S();\n };\n \n-typedef struct S T;\t\t// { dg-error \"previous declaration\" }\n+typedef struct S T;\t\t// { dg-message \"previous declaration\" }\n \n S a = T();                      // OK \n struct T * p;                   // { dg-error \"\" } using typedef after struct"}, {"sha": "94130ec467688a66ec474b1d4a8ea89ecbdcffd3", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/line1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fline1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fline1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fline1.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -1,4 +1,4 @@\n // { dg-do assemble  }\n // GROUPS passed error-messages\n-typedef struct s S;// { dg-error \"\" }  previous.*\n+typedef struct s S;// { dg-message \"\" }  previous.*\n struct S { int member:1; };  // the lineno for this should be 2, not 0// { dg-error \"\" }  conflicting types.*"}, {"sha": "f09ff6f1c4c9379b9990b91a2dcdec4541c9e41b", "filename": "gcc/testsuite/g++.old-deja/g++.other/elab1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Felab1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Felab1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Felab1.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n-typedef struct {} S; // { dg-error \"\" } Previous declaration of S\n+typedef struct {} S; // { dg-message \"\" } Previous declaration of S\n \n S s1;\n struct S* s2; // { dg-error \"\" } S is a typedef name"}, {"sha": "445c539c921107dce72fd6b3bc4df019f18217e5", "filename": "gcc/testsuite/g++.old-deja/g++.other/syntax4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsyntax4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82daaf6d550e9380e33f802310b52c2af1758ff0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsyntax4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsyntax4.C?ref=82daaf6d550e9380e33f802310b52c2af1758ff0", "patch": "@@ -17,7 +17,7 @@ class X {\n \n class Y {\n   public:\n-  typedef ::X W;   // { dg-error \"\" } previous declaration\n+  typedef ::X W;   // { dg-message \"\" } previous declaration\n   class Z;\n };\n "}]}