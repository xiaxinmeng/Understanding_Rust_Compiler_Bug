{"sha": "79b87c74d764bd42703818289685e48996b54eb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzliODdjNzRkNzY0YmQ0MjcwMzgxODI4OTY4NWU0ODk5NmI1NGViOA==", "commit": {"author": {"name": "Michael Meissner", "email": "michael.meissner@amd.com", "date": "2007-03-24T17:04:47Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2007-03-24T17:04:47Z"}, "message": "Add BID decimal support\n\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\nCo-Authored-By: Marius Cornea <marius.cornea@intel.com>\n\nFrom-SVN: r123185", "tree": {"sha": "ec50c8ab7786788a6da7d4f06b0cd93e9555d487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec50c8ab7786788a6da7d4f06b0cd93e9555d487"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79b87c74d764bd42703818289685e48996b54eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b87c74d764bd42703818289685e48996b54eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b87c74d764bd42703818289685e48996b54eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b87c74d764bd42703818289685e48996b54eb8/comments", "author": null, "committer": null, "parents": [{"sha": "cca643862ddb1f61f200b567c667576d39961fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca643862ddb1f61f200b567c667576d39961fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca643862ddb1f61f200b567c667576d39961fb2"}], "stats": {"total": 12693, "additions": 12540, "deletions": 153}, "files": [{"sha": "3f122001616baef92fd5d73646d3c2811c034d89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -1,3 +1,68 @@\n+2007-03-23  Michael Meissner  <michael.meissner@amd.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/dfp-bit.h (DPD_BID_NAME): New macro to give either the\n+\tDPD or BID name.\n+\t(name macros): Use DPD_BID_NAME to convert names properly.\n+\n+\t* optabs.c (DECIMAL_PREFIX): Prefix string to use for the current\n+\tdecimal floating point format.\n+\t(init_floating_libfuncs): Change decimal functions so that they\n+\thave a \"bid_\" prefix if the decimal system uses the BID format,\n+\tand \"dpd_\" prefix if the decimal system uses the DPD format.\n+\t(init_interclass_conv_libfuncs): Ditto.\n+\t(init_intraclass_conv_libfuncs): Ditto.\n+\n+\t* config.in (ENABLE_DECIMAL_BID_FORMAT): New macro to say we are\n+\tusing the BID format.\n+\n+\t* configure.ac (ENABLE_DECIMAL_BID_FORMAT): Set to 1/0 to say\n+\twhether we are using the BID decimal format.\n+\t* configure: Regenerate.\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __STDC_WANT_DEC_FP__ if\n+\tthe compiler has decimal floating point enabled.  Define\n+\t__DECIMAL_BID_FORMAT__ if BID decimal floating point is used\n+\tinstead of DPD.\n+\n+\t* config.in (ENABLE_DECIMAL_BID_FORMAT): New macro to say we are\n+\tusing the BID format.\n+\n+\t* configure.ac (ENABLE_DECIMAL_BID_FORMAT): Set to 1/0 to say\n+\twhether we are using the BID decimal format.\n+\t* configure: Regenerate.\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define __STDC_WANT_DEC_FP__ if\n+\tthe compiler has decimal floating point enabled.  Define\n+\t__DECIMAL_BID_FORMAT__ if BID decimal floating point is used\n+\tinstead of DPD.\n+\n+\t* doc/install.texi (--enable-decimal-float): Document BID and DPD\n+\toptions, and that it is enabled for i386/x86_64 systems.\n+\n+\t* Makefile.in (enable_decimal_float): New.\n+\t(DECNUMFMT): New.\n+\t(DECNUMINC): Add  -I$(DECNUMFMT).\n+\t(DECNUM_H): Mov decimal32.h, decimal64.h and decimal128.h\n+\tto $(DECNUMFMT) from $(DECNUM).\n+\n+\t* configure.ac: Support * --enable-decimal-float={no,yes,bid,dpd}.\n+\tSubstitute enable_decimal_float.\n+\t* configure: Regenerated.\n+\n+\tPR other/30529\n+\t* config/dfp-bit.c (__dec_byte_swap): Use uint32_t instead of\n+\tunsigned long.\n+\n+\t* configure.ac: Enable decimal float for x86_64-*-linux*.\n+\t* configure: Regenerated.\n+\n+\tPR other/30530\n+\t* dfp.c (decimal_real_arithmetic): Use decimal128FlipSign and\n+\tdecimal128ClearSign to flip and clear the sign bit in decimal128.\n+\t(decimal_real_maxval): Set decimal128SetSign to set the sign\n+\tbit in decimal128.\n+\n 2007-03-23  Ian Lance Taylor  <iant@google.com>\n \n \t* fold-const.c (fold_binary): Correct warning for X - c >= X."}, {"sha": "ea6255f8197fecb9f084524e23a65a168235a9d6", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -289,8 +289,10 @@ CPPLIB = ../libcpp/libcpp.a\n CPPINC = -I$(srcdir)/../libcpp/include\n \n # Where to find decNumber\n+enable_decimal_float = @enable_decimal_float@\n DECNUM = $(srcdir)/../libdecnumber\n-DECNUMINC = -I$(DECNUM) -I../libdecnumber\n+DECNUMFMT = $(srcdir)/../libdecnumber/$(enable_decimal_float)\n+DECNUMINC = -I$(DECNUM) -I$(DECNUMFMT) -I../libdecnumber\n LIBDECNUMBER = ../libdecnumber/libdecnumber.a\n \n # Substitution type for target's getgroups 2nd arg.\n@@ -770,7 +772,7 @@ PREDICT_H = predict.h predict.def\n CPPLIB_H = $(srcdir)/../libcpp/include/line-map.h \\\n \t$(srcdir)/../libcpp/include/cpplib.h\n DECNUM_H = $(DECNUM)/decContext.h $(DECNUM)/decDPD.h $(DECNUM)/decNumber.h \\\n-\t$(DECNUM)/decimal32.h $(DECNUM)/decimal64.h $(DECNUM)/decimal128.h\n+\t$(DECNUMFMT)/decimal32.h $(DECNUMFMT)/decimal64.h $(DECNUMFMT)/decimal128.h\n MKDEPS_H = $(srcdir)/../libcpp/include/mkdeps.h\n SYMTAB_H = $(srcdir)/../libcpp/include/symtab.h\n CPP_ID_DATA_H = $(CPPLIB_H) $(srcdir)/../libcpp/include/cpp-id-data.h"}, {"sha": "d27b96bc6b328dd8b2450fd0251fa383ef40e5d8", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -605,6 +605,17 @@ c_cpp_builtins (cpp_reader *pfile)\n      new appearance would clobber any existing args.  */\n   if (TARGET_DECLSPEC)\n     builtin_define (\"__declspec(x)=__attribute__((x))\");\n+\n+  /* Tell the user whether decimal floating point is supported,\n+     and if it is supported, whether the alternate format (BID)\n+     is used over the standard (DPD) format.  */\n+\n+  if (ENABLE_DECIMAL_FLOAT)\n+    {\n+      cpp_define (pfile, \"__STDC_WANT_DEC_FP__\");\n+      if (ENABLE_DECIMAL_BID_FORMAT)\n+\tcpp_define (pfile, \"__DECIMAL_BID_FORMAT__\");\n+    }\n }\n \n /* Pass an object-like macro.  If it doesn't lie in the user's"}, {"sha": "7e60a3ef34705e452974bf7c9681c87ee9c3abe6", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -52,6 +52,12 @@\n #endif\n \n \n+/* Define to 1 to say we are using the BID decimal format */\n+#ifndef USED_FOR_TARGET\n+#undef ENABLE_DECIMAL_BID_FORMAT\n+#endif\n+\n+\n /* Define if you want fold checked that it never destructs its argument. This\n    is quite expensive. */\n #ifndef USED_FOR_TARGET"}, {"sha": "af1db1623ec85f07772d76f25f7bc990deaafcdb", "filename": "gcc/config/dfp-bit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fconfig%2Fdfp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fconfig%2Fdfp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -1,5 +1,5 @@\n /* This is a software decimal floating point library.\n-   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -66,7 +66,7 @@ typedef decNumber* (*dfp_unary_func)\n typedef decNumber* (*dfp_binary_func)\n      (decNumber *, const decNumber *, const decNumber *, decContext *);\n \n-extern unsigned long __dec_byte_swap (unsigned long);\n+extern uint32_t __dec_byte_swap (uint32_t);\n \f\n /* Unary operations.  */\n "}, {"sha": "5238a2b3765a25b542f3fb92adac2551c82cdbe7", "filename": "gcc/config/dfp-bit.h", "status": "modified", "additions": 88, "deletions": 82, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fconfig%2Fdfp-bit.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fconfig%2Fdfp-bit.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdfp-bit.h?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -1,5 +1,5 @@\n /* Header file for dfp-bit.c.\n-   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -288,148 +288,154 @@ extern float strtof (const char *, char **);\n \n /* Names of arithmetic functions.  */\n \n+#if ENABLE_DECIMAL_BID_FORMAT\n+#define DPD_BID_NAME(DPD,BID) BID\n+#else\n+#define DPD_BID_NAME(DPD,BID) DPD\n+#endif\n+\n #if WIDTH == 32\n-#define DFP_ADD\t\t__addsd3\n-#define DFP_SUB\t\t__subsd3\n-#define DFP_MULTIPLY\t__mulsd3\n-#define DFP_DIVIDE\t__divsd3\n-#define DFP_EQ\t\t__eqsd2\n-#define DFP_NE\t\t__nesd2\n-#define DFP_LT\t\t__ltsd2\n-#define DFP_GT\t\t__gtsd2\n-#define DFP_LE\t\t__lesd2\n-#define DFP_GE\t\t__gesd2\n-#define DFP_UNORD\t__unordsd2\n+#define DFP_ADD\t\tDPD_BID_NAME(__dpd_addsd3,__bid_addsd3)\n+#define DFP_SUB\t\tDPD_BID_NAME(__dpd_subsd3,__bid_subsd3)\n+#define DFP_MULTIPLY\tDPD_BID_NAME(__dpd_mulsd3,__bid_mulsd3)\n+#define DFP_DIVIDE\tDPD_BID_NAME(__dpd_divsd3,__bid_divsd3)\n+#define DFP_EQ\t\tDPD_BID_NAME(__dpd_eqsd2,__bid_eqsd2)\n+#define DFP_NE\t\tDPD_BID_NAME(__dpd_nesd2,__bid_nesd2)\n+#define DFP_LT\t\tDPD_BID_NAME(__dpd_ltsd2,__bid_ltsd2)\n+#define DFP_GT\t\tDPD_BID_NAME(__dpd_gtsd2,__bid_gtsd2)\n+#define DFP_LE\t\tDPD_BID_NAME(__dpd_lesd2,__bid_lesd2)\n+#define DFP_GE\t\tDPD_BID_NAME(__dpd_gesd2,__bid_gesd2)\n+#define DFP_UNORD\tDPD_BID_NAME(__dpd_unordsd2,__bid_unordsd2)\n #elif WIDTH == 64\n-#define DFP_ADD\t\t__adddd3\n-#define DFP_SUB\t\t__subdd3\n-#define DFP_MULTIPLY\t__muldd3\n-#define DFP_DIVIDE\t__divdd3\n-#define DFP_EQ\t\t__eqdd2\n-#define DFP_NE\t\t__nedd2\n-#define DFP_LT\t\t__ltdd2\n-#define DFP_GT\t\t__gtdd2\n-#define DFP_LE\t\t__ledd2\n-#define DFP_GE\t\t__gedd2\n-#define DFP_UNORD\t__unorddd2\n+#define DFP_ADD\t\tDPD_BID_NAME(__dpd_adddd3,__bid_adddd3)\n+#define DFP_SUB\t\tDPD_BID_NAME(__dpd_subdd3,__bid_subdd3)\n+#define DFP_MULTIPLY\tDPD_BID_NAME(__dpd_muldd3,__bid_muldd3)\n+#define DFP_DIVIDE\tDPD_BID_NAME(__dpd_divdd3,__bid_divdd3)\n+#define DFP_EQ\t\tDPD_BID_NAME(__dpd_eqdd2,__bid_eqdd2)\n+#define DFP_NE\t\tDPD_BID_NAME(__dpd_nedd2,__bid_nedd2)\n+#define DFP_LT\t\tDPD_BID_NAME(__dpd_ltdd2,__bid_ltdd2)\n+#define DFP_GT\t\tDPD_BID_NAME(__dpd_gtdd2,__bid_gtdd2)\n+#define DFP_LE\t\tDPD_BID_NAME(__dpd_ledd2,__bid_ledd2)\n+#define DFP_GE\t\tDPD_BID_NAME(__dpd_gedd2,__bid_gedd2)\n+#define DFP_UNORD\tDPD_BID_NAME(__dpd_unorddd2,__bid_unorddd2)\n #elif WIDTH == 128\n-#define DFP_ADD\t\t__addtd3\n-#define DFP_SUB\t\t__subtd3\n-#define DFP_MULTIPLY\t__multd3\n-#define DFP_DIVIDE\t__divtd3\n-#define DFP_EQ\t\t__eqtd2\n-#define DFP_NE\t\t__netd2\n-#define DFP_LT\t\t__lttd2\n-#define DFP_GT\t\t__gttd2\n-#define DFP_LE\t\t__letd2\n-#define DFP_GE\t\t__getd2\n-#define DFP_UNORD\t__unordtd2\n+#define DFP_ADD\t\tDPD_BID_NAME(__dpd_addtd3,__bid_addtd3)\n+#define DFP_SUB\t\tDPD_BID_NAME(__dpd_subtd3,__bid_subtd3)\n+#define DFP_MULTIPLY\tDPD_BID_NAME(__dpd_multd3,__bid_multd3)\n+#define DFP_DIVIDE\tDPD_BID_NAME(__dpd_divtd3,__bid_divtd3)\n+#define DFP_EQ\t\tDPD_BID_NAME(__dpd_eqtd2,__bid_eqtd2)\n+#define DFP_NE\t\tDPD_BID_NAME(__dpd_netd2,__bid_netd2)\n+#define DFP_LT\t\tDPD_BID_NAME(__dpd_lttd2,__bid_lttd2)\n+#define DFP_GT\t\tDPD_BID_NAME(__dpd_gttd2,__bid_gttd2)\n+#define DFP_LE\t\tDPD_BID_NAME(__dpd_letd2,__bid_letd2)\n+#define DFP_GE\t\tDPD_BID_NAME(__dpd_getd2,__bid_getd2)\n+#define DFP_UNORD\tDPD_BID_NAME(__dpd_unordtd2,__bid_unordtd2)\n #endif\n \n /* Names of functions to convert between different decimal float types.  */\n \n #if WIDTH == 32\n #if WIDTH_TO == 64\n-#define DFP_TO_DFP\t__extendsddd2\n+#define DFP_TO_DFP\tDPD_BID_NAME(__dpd_extendsddd2,__bid_extendsddd2)\n #elif WIDTH_TO == 128\n-#define DFP_TO_DFP\t__extendsdtd2\n+#define DFP_TO_DFP\tDPD_BID_NAME(__dpd_extendsdtd2,__bid_extendsdtd2)\n #endif\n #elif WIDTH == 64\t\n #if WIDTH_TO == 32\n-#define DFP_TO_DFP\t__truncddsd2\n+#define DFP_TO_DFP\tDPD_BID_NAME(__dpd_truncddsd2,__bid_truncddsd2)\n #elif WIDTH_TO == 128\n-#define DFP_TO_DFP\t__extendddtd2\n+#define DFP_TO_DFP\tDPD_BID_NAME(__dpd_extendddtd2,__bid_extendddtd2)\n #endif\n #elif WIDTH == 128\n #if WIDTH_TO == 32\n-#define DFP_TO_DFP\t__trunctdsd2\n+#define DFP_TO_DFP\tDPD_BID_NAME(__dpd_trunctdsd2,__bid_trunctdsd2)\n #elif WIDTH_TO == 64\n-#define DFP_TO_DFP\t__trunctddd2\n+#define DFP_TO_DFP\tDPD_BID_NAME(__dpd_trunctddd2,__bid_trunctddd2)\n #endif\n #endif\n \n /* Names of functions to convert between decimal float and integers.  */\n \n #if WIDTH == 32\n #if INT_KIND == 1\n-#define INT_TO_DFP\t__floatsisd\n-#define DFP_TO_INT\t__fixsdsi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatsisd,__bid_floatsisd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixsdsi,__bid_fixsdsi)\n #elif INT_KIND == 2\n-#define INT_TO_DFP\t__floatdisd\n-#define DFP_TO_INT\t__fixsddi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatdisd,__bid_floatdisd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixsddi,__bid_fixsddi)\n #elif INT_KIND == 3\n-#define INT_TO_DFP\t__floatunssisd\n-#define DFP_TO_INT\t__fixunssdsi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatunssisd,__bid_floatunssisd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixunssdsi,__bid_fixunssdsi)\n #elif INT_KIND == 4\n-#define INT_TO_DFP\t__floatunsdisd\n-#define DFP_TO_INT\t__fixunssddi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatunsdisd,__bid_floatunsdisd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixunssddi,__bid_fixunssddi)\n #endif\n #elif WIDTH == 64\n #if INT_KIND == 1\n-#define INT_TO_DFP\t__floatsidd\n-#define DFP_TO_INT\t__fixddsi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatsidd,__bid_floatsidd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixddsi,__bid_fixddsi)\n #elif INT_KIND == 2\n-#define INT_TO_DFP\t__floatdidd\n-#define DFP_TO_INT\t__fixdddi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatdidd,__bid_floatdidd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixdddi,__bid_fixdddi)\n #elif INT_KIND == 3\n-#define INT_TO_DFP\t__floatunssidd\n-#define DFP_TO_INT\t__fixunsddsi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatunssidd,__bid_floatunssidd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixunsddsi,__bid_fixunsddsi)\n #elif INT_KIND == 4\n-#define INT_TO_DFP\t__floatunsdidd\n-#define DFP_TO_INT\t__fixunsdddi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatunsdidd,__bid_floatunsdidd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixunsdddi,__bid_fixunsdddi)\n #endif\n #elif WIDTH == 128\n #if INT_KIND == 1\n-#define INT_TO_DFP\t__floatsitd\n-#define DFP_TO_INT\t__fixtdsi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatsitd,__bid_floatsitd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixtdsi,__bid_fixtdsi)\n #elif INT_KIND == 2\n-#define INT_TO_DFP\t__floatditd\n-#define DFP_TO_INT\t__fixtddi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatditd,__bid_floatditd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixtddi,__bid_fixtddi)\n #elif INT_KIND == 3\n-#define INT_TO_DFP\t__floatunssitd\n-#define DFP_TO_INT\t__fixunstdsi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatunssitd,__bid_floatunssitd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixunstdsi,__bid_fixunstdsi)\n #elif INT_KIND == 4\n-#define INT_TO_DFP\t__floatunsditd\n-#define DFP_TO_INT\t__fixunstddi\n+#define INT_TO_DFP\tDPD_BID_NAME(__dpd_floatunsditd,__bid_floatunsditd)\n+#define DFP_TO_INT\tDPD_BID_NAME(__dpd_fixunstddi,__bid_fixunstddi)\n #endif\n #endif\n \n /* Names of functions to convert between decimal float and binary float.  */\n \n #if WIDTH == 32\n #if BFP_KIND == 1\n-#define BFP_TO_DFP\t__extendsfsd\n-#define DFP_TO_BFP\t__truncsdsf\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_extendsfsd,__bid_extendsfsd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_truncsdsf,__bid_truncsdsf)\n #elif BFP_KIND == 2\n-#define BFP_TO_DFP\t__truncdfsd\n-#define DFP_TO_BFP\t__extendsddf\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_truncdfsd,__bid_truncdfsd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_extendsddf,__bid_extendsddf)\n #elif BFP_KIND == 3\n-#define BFP_TO_DFP\t__truncxfsd\n-#define DFP_TO_BFP\t__extendsdxf\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_truncxfsd,__bid_truncxfsd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_extendsdxf,__bid_extendsdxf)\n #endif /* BFP_KIND */\n \n #elif WIDTH == 64\n #if BFP_KIND == 1\n-#define BFP_TO_DFP\t__extendsfdd\n-#define DFP_TO_BFP\t__truncddsf\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_extendsfdd,__bid_extendsfdd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_truncddsf,__bid_truncddsf)\n #elif BFP_KIND == 2\n-#define BFP_TO_DFP\t__extenddfdd\n-#define DFP_TO_BFP\t__truncdddf\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_extenddfdd,__bid_extenddfdd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_truncdddf,__bid_truncdddf)\n #elif BFP_KIND == 3\n-#define BFP_TO_DFP\t__truncxfdd\n-#define DFP_TO_BFP\t__extendddxf\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_truncxfdd,__bid_truncxfdd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_extendddxf,__bid_extendddxf)\n #endif /* BFP_KIND */\n \n #elif WIDTH == 128\n #if BFP_KIND == 1\n-#define BFP_TO_DFP\t__extendsftd\n-#define DFP_TO_BFP\t__trunctdsf\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_extendsftd,__bid_extendsftd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_trunctdsf,__bid_trunctdsf)\n #elif BFP_KIND == 2\n-#define BFP_TO_DFP\t__extenddftd\n-#define DFP_TO_BFP\t__trunctddf\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_extenddftd,__bid_extenddftd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_trunctddf,__bid_trunctddf)\n #elif BFP_KIND == 3\n-#define BFP_TO_DFP\t__extendxftd\n-#define DFP_TO_BFP\t__trunctdxf\n+#define BFP_TO_DFP\tDPD_BID_NAME(__dpd_extendxftd,__bid_extendxftd)\n+#define DFP_TO_BFP\tDPD_BID_NAME(__dpd_trunctdxf,__bid_trunctdxf)\n #endif /* BFP_KIND */\n \n #endif /* WIDTH */"}, {"sha": "627c946b82311694919f0d319028102a79662986", "filename": "gcc/configure", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -879,7 +879,10 @@ Optional Features:\n   --enable-gather-detailed-mem-stats         enable detailed memory allocation stats gathering\n   --enable-multilib       enable library support for multiple ABIs\n   --enable-__cxa_atexit   enable __cxa_atexit for C++\n-  --enable-decimal-float  enable decimal float extension to C\n+  --enable-decimal-float={no,yes,bid,dpd}\n+\t\t\tenable decimal float extension to C.  Selecting 'bid'\n+\t\t\tor 'dpd' choses which decimal floating point format\n+\t\t\tto use\n   --enable-threads        enable thread usage for target GCC\n   --enable-threads=LIB    use LIB thread package for target GCC\n   --enable-tls            enable or disable generation of tls code\n@@ -7012,29 +7015,61 @@ fi;\n if test \"${enable_decimal_float+set}\" = set; then\n   enableval=\"$enable_decimal_float\"\n \n-  if test x$enablevar = xyes ; then\n-    case $target in\n-    powerpc*-*-linux* | i?86*-*-linux*)\n+  case $enable_decimal_float in\n+    yes | no | bid | dpd) ;;\n+    *) { { echo \"$as_me:$LINENO: error: '$enable_decimal_float' is an invalid value for --enable-decimal-float.\n+Valid choices are 'yes', 'bid', 'dpd', and 'no'.\" >&5\n+echo \"$as_me: error: '$enable_decimal_float' is an invalid value for --enable-decimal-float.\n+Valid choices are 'yes', 'bid', 'dpd', and 'no'.\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+  esac\n+\n+else\n+\n+  case $target in\n+    powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux*)\n       enable_decimal_float=yes\n       ;;\n     *)\n       { echo \"$as_me:$LINENO: WARNING: decimal float is not supported for this target\" >&5\n echo \"$as_me: WARNING: decimal float is not supported for this target\" >&2;}\n       enable_decimal_float=no\n       ;;\n-    esac\n-  fi\n+  esac\n \n-else\n-  enable_decimal_float=no\n fi;\n \n+dfp=`if test $enable_decimal_float != no; then echo 1; else echo 0; fi`\n \n+cat >>confdefs.h <<_ACEOF\n+#define ENABLE_DECIMAL_FLOAT $dfp\n+_ACEOF\n \n-dfp=`if test $enable_decimal_float = yes; then echo 1; else echo 0; fi`\n+\n+# x86's use BID format instead of DPD\n+case x$enable_decimal_float in\n+  xyes)\n+    case $target in\n+      i?86*-*-linux* | x86_64*-*-linux*)\n+\tenable_decimal_float=bid\n+\t;;\n+      *)\n+\tenable_decimal_float=dpd\n+\t;;\n+    esac\n+    ;;\n+  xno)\n+    # ENABLE_DECIMAL_FLOAT is set to 0. But we have to have proper\n+    # dependency on libdecnumber.\n+    enable_decimal_float=dpd\n+    ;;\n+esac\n+\n+\n+bid=`if test $enable_decimal_float = bid; then echo 1; else echo 0; fi`\n \n cat >>confdefs.h <<_ACEOF\n-#define ENABLE_DECIMAL_FLOAT $dfp\n+#define ENABLE_DECIMAL_BID_FORMAT $bid\n _ACEOF\n \n \n@@ -7630,7 +7665,7 @@ if test \"${gcc_cv_prog_makeinfo_modern+set}\" = set; then\n else\n     ac_prog_version=`$MAKEINFO --version 2>&1 |\n                    sed -n 's/^.*GNU texinfo.* \\([0-9][0-9.]*\\).*$/\\1/p'`\n-  echo \"configure:7633: version of makeinfo is $ac_prog_version\" >&5\n+  echo \"configure:7668: version of makeinfo is $ac_prog_version\" >&5\n   case $ac_prog_version in\n     '')     gcc_cv_prog_makeinfo_modern=no;;\n     4.[4-9]*)"}, {"sha": "226b62a0d48ff128bcf9735fc298863d43638938", "filename": "gcc/configure.ac", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -667,27 +667,58 @@ AC_ARG_ENABLE(__cxa_atexit,\n \n # Enable C extension for decimal float if target supports it.\n AC_ARG_ENABLE(decimal-float,\n-[  --enable-decimal-float  enable decimal float extension to C],\n+[  --enable-decimal-float={no,yes,bid,dpd}\n+\t\t\tenable decimal float extension to C.  Selecting 'bid'\n+\t\t\tor 'dpd' choses which decimal floating point format\n+\t\t\tto use],\n [\n-  if test x$enablevar = xyes ; then\n-    case $target in\n-    powerpc*-*-linux* | i?86*-*-linux*)\n+  case $enable_decimal_float in\n+    yes | no | bid | dpd) ;;\n+    *) AC_MSG_ERROR(['$enable_decimal_float' is an invalid value for --enable-decimal-float.\n+Valid choices are 'yes', 'bid', 'dpd', and 'no'.]) ;;\n+  esac\n+],\n+[\n+  case $target in\n+    powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux*)\n       enable_decimal_float=yes\n       ;;\n     *)\n       AC_MSG_WARN(decimal float is not supported for this target, ignored)\n       enable_decimal_float=no\n       ;;\n-    esac\n-  fi\n-], [enable_decimal_float=no])\n-\n-AC_SUBST(enable_decimal_float)\n+  esac\n+])\n \n-dfp=`if test $enable_decimal_float = yes; then echo 1; else echo 0; fi`\n+dfp=`if test $enable_decimal_float != no; then echo 1; else echo 0; fi`\n AC_DEFINE_UNQUOTED(ENABLE_DECIMAL_FLOAT, $dfp,\n [Define to 1 to enable decimal float extension to C.])\n \n+# x86's use BID format instead of DPD\n+case x$enable_decimal_float in\n+  xyes)\n+    case $target in\n+      i?86*-*-linux* | x86_64*-*-linux*)\n+\tenable_decimal_float=bid\n+\t;;\n+      *)\n+\tenable_decimal_float=dpd\n+\t;;\n+    esac\n+    ;;\n+  xno)\n+    # ENABLE_DECIMAL_FLOAT is set to 0. But we have to have proper\n+    # dependency on libdecnumber.\n+    enable_decimal_float=dpd\n+    ;;\n+esac\n+AC_SUBST(enable_decimal_float)\n+\n+bid=`if test $enable_decimal_float = bid; then echo 1; else echo 0; fi`\n+AC_DEFINE_UNQUOTED(ENABLE_DECIMAL_BID_FORMAT, $bid,\n+[Define to 1 to specify that we are using the BID decimal floating\n+point format instead of DPD])\n+\n # Enable threads\n # Pass with no value to take the default\n # Pass with a value to specify a thread package"}, {"sha": "c15afa91c90f6d015d8a13aa71391de057c264e6", "filename": "gcc/dfp.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fdfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fdfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdfp.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -1,5 +1,5 @@\n /* Decimal floating point support.\n-   Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -656,23 +656,19 @@ decimal_real_arithmetic (REAL_VALUE_TYPE *r, enum tree_code code,\n \n     case NEGATE_EXPR:\n       {\n-\tdecimal128 *d128;\n \t*r = *op0;\n-\td128 = (decimal128 *) r->sig;\n-\t/* Flip high bit.  */\n-\td128->bytes[0] ^= 1 << 7;\n+\t/* Flip sign bit.  */\n+\tdecimal128FlipSign ((decimal128 *) r->sig);\n \t/* Keep sign field in sync.  */\n \tr->sign ^= 1;\n       }\n       return false;\n \n     case ABS_EXPR:\n       {\n-        decimal128 *d128;\n         *r = *op0;\n-        d128 = (decimal128 *) r->sig;\n-\t/* Clear high bit.  */\n-        d128->bytes[0] &= 0x7f;\n+\t/* Clear sign bit.  */\n+\tdecimal128ClearSign ((decimal128 *) r->sig);\n \t/* Keep sign field in sync.  */\n \tr->sign = 0;\n       }\n@@ -712,5 +708,5 @@ decimal_real_maxval (REAL_VALUE_TYPE *r, int sign, enum machine_mode mode)\n \n   decimal_real_from_string (r, max);\n   if (sign)\n-    r->sig[0] |= 0x80000000;\n+    decimal128SetSign ((decimal128 *) r->sig, 1);\n }"}, {"sha": "76545c08996fbf5b1031439f87366c3be969e800", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -1304,11 +1304,20 @@ is removed entirely in the next major release, unless someone steps\n forward to maintain the port.\n \n @item --enable-decimal-float\n+@itemx --enable-decimal-float=yes\n+@itemx --enable-decimal-float=no\n+@itemx --enable-decimal-float=bid\n+@itemx --enable-decimal-float=dpd\n @itemx --disable-decimal-float\n-Enable (or disable) support for the C decimal floating point\n-extension.  This is enabled by default only on PowerPC GNU/Linux\n-systems.  Other systems may also support it, but require the user to\n-specifically enable it.\n+Enable (or disable) support for the C decimal floating point extension\n+that is in the IEEE 754R extension to the IEEE754 floating point\n+standard.  This is enabled by default only on PowerPC, i386, and\n+x86_64 GNU/Linux systems.  Other systems may also support it, but\n+require the user to specifically enable it.  You can optionally\n+control which decimal floating point format is used (either @samp{bid}\n+or @samp{dpd}).  The @samp{bid} (binary integer decimal) format is\n+default on i386 and x86_64 systems, and the @samp{dpd} (densely packed\n+decimal) format is default on PowerPC systems.\n \n @item --with-long-double-128\n Specify if @code{long double} type should be 128-bit by default on selected"}, {"sha": "94e369169697252e2c8ff1fcdc2c58c352b02895", "filename": "gcc/optabs.c", "status": "modified", "additions": 72, "deletions": 11, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -130,6 +130,14 @@ static rtx vector_compare_rtx (tree, bool, enum insn_code);\n #define HAVE_conditional_trap 0\n #define gen_conditional_trap(a,b) (gcc_unreachable (), NULL_RTX)\n #endif\n+\n+/* Prefixes for the current version of decimal floating point (BID vs. DPD) */\n+#if ENABLE_DECIMAL_BID_FORMAT\n+#define DECIMAL_PREFIX \"bid_\"\n+#else\n+#define DECIMAL_PREFIX \"dpd_\"\n+#endif\n+\n \f\n /* Add a REG_EQUAL note to the last insn in INSNS.  TARGET is being set to\n    the result of operation CODE applied to OP0 (and OP1 if it is a binary\n@@ -5177,9 +5185,16 @@ init_integral_libfuncs (optab optable, const char *opname, int suffix)\n static void\n init_floating_libfuncs (optab optable, const char *opname, int suffix)\n {\n+  char *dec_opname = alloca (sizeof (DECIMAL_PREFIX) + strlen (opname));\n+\n+  /* For BID support, change the name to have either a bid_ or dpd_ prefix\n+     depending on the low level floating format used.  */\n+  memcpy (dec_opname, DECIMAL_PREFIX, sizeof (DECIMAL_PREFIX) - 1);\n+  strcpy (dec_opname + sizeof (DECIMAL_PREFIX) - 1, opname);\n+\n   init_libfuncs (optable, MIN_MODE_FLOAT, MAX_MODE_FLOAT, opname, suffix);\n   init_libfuncs (optable, MIN_MODE_DECIMAL_FLOAT, MAX_MODE_DECIMAL_FLOAT,\n-\t\t opname, suffix);\n+\t\t dec_opname, suffix);\n }\n \n /* Initialize the libfunc fields of an entire group of entries of an\n@@ -5201,8 +5216,13 @@ init_interclass_conv_libfuncs (convert_optab tab, const char *opname,\n   const char *fname, *tname;\n   const char *q;\n   char *libfunc_name, *suffix;\n+  char *nondec_name, *dec_name, *nondec_suffix, *dec_suffix;\n   char *p;\n \n+  /* If this is a decimal conversion, add the current BID vs. DPD prefix that\n+     depends on which underlying decimal floating point format is used.  */\n+  const size_t dec_len = sizeof (DECIMAL_PREFIX) - 1;\n+\n   for (fmode = first_from_mode;\n        fmode != VOIDmode;\n        fmode = GET_MODE_WIDER_MODE (fmode))\n@@ -5213,11 +5233,18 @@ init_interclass_conv_libfuncs (convert_optab tab, const char *opname,\n        tmode = GET_MODE_WIDER_MODE (tmode))\n     max_mname_len = MAX (max_mname_len, strlen (GET_MODE_NAME (tmode)));\n \n-  libfunc_name = alloca (2 + opname_len + 2*max_mname_len + 1 + 1);\n-  libfunc_name[0] = '_';\n-  libfunc_name[1] = '_';\n-  memcpy (&libfunc_name[2], opname, opname_len);\n-  suffix = libfunc_name + opname_len + 2;\n+  nondec_name = alloca (2 + opname_len + 2*max_mname_len + 1 + 1);\n+  nondec_name[0] = '_';\n+  nondec_name[1] = '_';\n+  memcpy (&nondec_name[2], opname, opname_len);\n+  nondec_suffix = nondec_name + opname_len + 2;\n+\n+  dec_name = alloca (2 + dec_len + opname_len + 2*max_mname_len + 1 + 1);\n+  dec_name[0] = '_';\n+  dec_name[1] = '_';\n+  memcpy (&dec_name[2], DECIMAL_PREFIX, dec_len);\n+  memcpy (&dec_name[2+dec_len], opname, opname_len);\n+  dec_suffix = dec_name + dec_len + opname_len + 2;\n \n   for (fmode = first_from_mode; fmode != VOIDmode;\n        fmode = GET_MODE_WIDER_MODE (fmode))\n@@ -5227,6 +5254,17 @@ init_interclass_conv_libfuncs (convert_optab tab, const char *opname,\n \tfname = GET_MODE_NAME (fmode);\n \ttname = GET_MODE_NAME (tmode);\n \n+\tif (DECIMAL_FLOAT_MODE_P(fmode) || DECIMAL_FLOAT_MODE_P(tmode))\n+\t  {\n+\t    libfunc_name = dec_name;\n+\t    suffix = dec_suffix;\n+\t  }\n+\telse\n+\t  {\n+\t    libfunc_name = nondec_name;\n+\t    suffix = nondec_suffix;\n+\t  }\n+\n \tp = suffix;\n \tfor (q = fname; *q; p++, q++)\n \t  *p = TOLOWER (*q);\n@@ -5257,18 +5295,30 @@ init_intraclass_conv_libfuncs (convert_optab tab, const char *opname,\n   enum machine_mode nmode, wmode;\n   const char *nname, *wname;\n   const char *q;\n+  char *nondec_name, *dec_name, *nondec_suffix, *dec_suffix;\n   char *libfunc_name, *suffix;\n   char *p;\n \n+  /* If this is a decimal conversion, add the current BID vs. DPD prefix that\n+     depends on which underlying decimal floating point format is used.  */\n+  const size_t dec_len = sizeof (DECIMAL_PREFIX) - 1;\n+\n   for (nmode = first_mode; nmode != VOIDmode;\n        nmode = GET_MODE_WIDER_MODE (nmode))\n     max_mname_len = MAX (max_mname_len, strlen (GET_MODE_NAME (nmode)));\n \n-  libfunc_name = alloca (2 + opname_len + 2*max_mname_len + 1 + 1);\n-  libfunc_name[0] = '_';\n-  libfunc_name[1] = '_';\n-  memcpy (&libfunc_name[2], opname, opname_len);\n-  suffix = libfunc_name + opname_len + 2;\n+  nondec_name = alloca (2 + opname_len + 2*max_mname_len + 1 + 1);\n+  nondec_name[0] = '_';\n+  nondec_name[1] = '_';\n+  memcpy (&nondec_name[2], opname, opname_len);\n+  nondec_suffix = nondec_name + opname_len + 2;\n+\n+  dec_name = alloca (2 + dec_len + opname_len + 2*max_mname_len + 1 + 1);\n+  dec_name[0] = '_';\n+  dec_name[1] = '_';\n+  memcpy (&dec_name[2], DECIMAL_PREFIX, dec_len);\n+  memcpy (&dec_name[2 + dec_len], opname, opname_len);\n+  dec_suffix = dec_name + dec_len + opname_len + 2;\n \n   for (nmode = first_mode; nmode != VOIDmode;\n        nmode = GET_MODE_WIDER_MODE (nmode))\n@@ -5278,6 +5328,17 @@ init_intraclass_conv_libfuncs (convert_optab tab, const char *opname,\n \tnname = GET_MODE_NAME (nmode);\n \twname = GET_MODE_NAME (wmode);\n \n+\tif (DECIMAL_FLOAT_MODE_P(nmode) || DECIMAL_FLOAT_MODE_P(wmode))\n+\t  {\n+\t    libfunc_name = dec_name;\n+\t    suffix = dec_suffix;\n+\t  }\n+\telse\n+\t  {\n+\t    libfunc_name = nondec_name;\n+\t    suffix = nondec_suffix;\n+\t  }\n+\n \tp = suffix;\n \tfor (q = widening ? nname : wname; *q; p++, q++)\n \t  *p = TOLOWER (*q);"}, {"sha": "39365b756b54a07d1b210bfd1f3173032133bee8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -1,3 +1,10 @@\n+2007-03-23  Michael Meissner  <michael.meissner@amd.com>\n+\n+\t* gcc.dg/dfp/convert-dfp.c: Wrap __STDC_WANT_DEC_FP__ with\n+\t#ifndef/#endif.\n+\t* gcc.dg/dfp/convert-int-saturate.c: Ditto.\n+\t* gcc.dg/dfp/decfloat-constants.c: Ditto.\n+\n 2007-03-24  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/31209"}, {"sha": "b84e67d40716d61dfc7b057ad7c17004acd881e4", "filename": "gcc/testsuite/gcc.dg/dfp/convert-dfp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -6,7 +6,10 @@\n \n    Test various conversions involving decimal floating types. */\n \n+#ifndef\t__STDC_WANT_DEC_FP__\n #define __STDC_WANT_DEC_FP__ 1\n+#endif\n+\n #include <float.h>\n \n extern void abort (void);"}, {"sha": "ab4c8d268ada5fac826dde4a76cd2c6a53f599a3", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int-saturate.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-saturate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-saturate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-saturate.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -4,7 +4,10 @@\n    C99 6.3.1.4(1a) New.\n    Test integer saturation.  */\n \n+#ifndef\t__STDC_WANT_DEC_FP__\n #define __STDC_WANT_DEC_FP__ 1\n+#endif\n+\n #include <float.h>\n #include <limits.h>\n "}, {"sha": "87c9849ac9b882998a8187ade4c8fd9abc8e6289", "filename": "gcc/testsuite/gcc.dg/dfp/decfloat-constants.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdecfloat-constants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdecfloat-constants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdecfloat-constants.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -7,7 +7,10 @@\n    decimal float defined in float.h.  */\n \n /* Make sure we are exporting the right values to float.h. */\n+#ifndef\t__STDC_WANT_DEC_FP__\n #define __STDC_WANT_DEC_FP__ 1\n+#endif\n+\n #include <float.h>\n \n extern void abort (void);"}, {"sha": "fff1fb3e3257881d88f760a2fa9223b1aa18a2f7", "filename": "libdecnumber/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FChangeLog?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -1,3 +1,60 @@\n+2007-03-23  Michael Meissner  <michael.meissner@amd.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Marius Cornea  <marius.cornea@intel.com>\n+\n+\t* Makefile.in (enable_decimal_float): New.\n+\t(libdecnumber_a_OBJS): Add bid2dpd_dpd2bid.o, host-ieee32.o,\n+\thost-ieee64.o and host-ieee128.o for BID.\n+\t(libdecnumber_a_SOURCES): Support DPD and BID.\n+\t(decimal32.o): Support dependency for both DPD and BID.\n+\t(decimal64.o): Likewise.\n+\t(decimal128.o): Likewise.\n+\t(bid2dpd_dpd2bid.o): New target.\n+\t(host-ieee32.o): Likewise.\n+\t(host-ieee64.o): Likewise.\n+\t(host-ieee128.o): Likewise.\n+\n+\t* bid/bid-dpd.h: New file.\n+\t* bid/decimal128.c: Likewise.\n+\t* bid/decimal128.h: Likewise.\n+\t* bid/decimal32.c: Likewise.\n+\t* bid/decimal32.h: Likewise.\n+\t* bid/decimal64.c: Likewise.\n+\t* bid/decimal64.h: Likewise.\n+\t* bid/host-ieee128.c: Likewise.\n+\t* bid/host-ieee32.c: Likewise.\n+\t* bid/host-ieee64.c: Likewise.\n+\t* bid/bid2dpd_dpd2bid.c: Likewise.\n+\t* bid/bid2dpd_dpd2bid.h: Likewise.\n+\n+\t* decimal128.c: Moved to ...\n+\t* dpd/decimal128.c: This.\n+\t* decimal128.h:  Moved to ...\n+\t* dpd/decimal128.h: This.\n+\t* decimal32.c: Moved to ...\n+\t* dpd/decimal32.c: This.\n+\t* decimal32.h: Moved to ...\n+\t* dpd/decimal32.h: This.\n+\t* decimal64.c: Moved to ...\n+\t* dpd/decimal64.c: This.\n+\t* decimal64.h: Moved to ...\n+\t* dpd/decimal64.h: This.\n+\n+\t* configure.ac: Support * --enable-decimal-float={no,yes,bid,dpd}.\n+\tAdd AC_C_BIGENDIAN.  Substitute enable_decimal_float.\n+\t* config.in: Add decimal support variables.\n+\t* configure: Regenerate.\n+\n+\tPR other/30530\n+\t* decimal128.h (decimal128ClearSign): New.\n+\t(decimal128FlipSign): Likewise.\n+\n+\t* decimal32.h: (decimal32ClearSign): New.\n+\t(decimal32FlipSign): Likewise.\n+\n+\t* decimal64.h (decimal64ClearSign): New.\n+\t(decimal64FlipSign): Likewise.\n+\n 2007-03-08  Ben Elliston  <bje@au.ibm.com>\n \n \t* decContext.c, decContext.h, decDPD.h, decimal128.c,"}, {"sha": "caa5f7df57c033bc9c689aaea7ce94ba7e7ef959", "filename": "libdecnumber/Makefile.in", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2FMakefile.in?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -1,7 +1,7 @@\n # @configure_input@\n # Makefile for libdecnumber.  Run 'configure' to generate Makefile from Makefile.in\n \n-# Copyright (C) 2005 Free Software Foundation, Inc.\n+# Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -50,18 +50,29 @@ libdir = @libdir@\n localedir = $(datadir)/locale\n prefix = @prefix@\n \n+enable_decimal_float= @enable_decimal_float@\n+\n INCLUDES = -I$(srcdir) -I.\n \n ALL_CFLAGS = $(CFLAGS) $(WARN_CFLAGS) $(INCLUDES) $(CPPFLAGS)\n \n libdecnumber_a_OBJS = decNumber.o decContext.o decUtility.o \\\n \tdecimal32.o decimal64.o decimal128.o\n \n+ifeq ($(enable_decimal_float),bid)\n+libdecnumber_a_OBJS+=bid2dpd_dpd2bid.o host-ieee32.o host-ieee64.o \\\n+\thost-ieee128.o\n+endif\n+\n libdecnumber_a_SOURCES = decContext.c decContext.h decDPD.h \\\n \tdecNumber.c decNumber.h decNumberLocal.h \\\n \tdecUtility.c decUtility.h \\\n-\tdecimal128.c decimal128.h decimal32.c decimal32.h \\\n-\tdecimal64.c decimal64.h\n+\tdpd/decimal128.c dpd/decimal128.h \\\n+\tdpd/decimal32.c dpd/decimal32.h \\\n+\tdpd/decimal64.c dpd/decimal64.h \\\n+\tbid/decimal128.c bid/decimal128.h \\\n+\tbid/decimal32.c bid/decimal32.h \\\n+\tbid/decimal64.c bid/decimal64.h\n \n all: libdecnumber.a\n \n@@ -104,13 +115,26 @@ $(srcdir)/config.in: @MAINT@ $(srcdir)/configure\n \n decContext.o: decContext.c decContext.h decNumberLocal.h\n decNumber.o:  decNumber.c decNumber.h decContext.h decNumberLocal.h\n-decimal32.o:  decimal32.c decNumber.h decContext.h decNumberLocal.h \\\n-   decimal32.h decUtility.h\n-decimal64.o:  decimal64.c decNumber.h decContext.h decNumberLocal.h \\\n-   decimal64.h decUtility.h\n-decimal128.o: decimal128.c decNumber.h decNumberLocal.h decimal128.h \\\n-   decUtility.h\n-\n+decimal32.o:  $(enable_decimal_float)/decimal32.c \\\n+   $(enable_decimal_float)/decimal32.h \\\n+   decNumber.h decContext.h decNumberLocal.h decUtility.h\n+\t$(COMPILE) $<\n+decimal64.o:  $(enable_decimal_float)/decimal64.c \\\n+   $(enable_decimal_float)/decimal64.h \\\n+   decNumber.h decContext.h decNumberLocal.h decUtility.h\n+\t$(COMPILE) $<\n+decimal128.o:  $(enable_decimal_float)/decimal128.c \\\n+   $(enable_decimal_float)/decimal128.h \\\n+   decNumber.h decContext.h decNumberLocal.h decUtility.h\n+\t$(COMPILE) $<\n+bid2dpd_dpd2bid.o : bid/bid2dpd_dpd2bid.c bid/bid2dpd_dpd2bid.h\n+\t$(COMPILE) $<\n+host-ieee32.o : bid/host-ieee32.c bid/decimal32.h\n+\t$(COMPILE) $<\n+host-ieee64.o : bid/host-ieee64.c bid/decimal64.h\n+\t$(COMPILE) $<\n+host-ieee128.o : bid/host-ieee128.c bid/decimal128.h\n+\t$(COMPILE) $<\n # Other miscellaneous targets.\n \n mostlyclean:"}, {"sha": "d8bf327f3a7bbcbf48d032c510dcf8ed1be3ce50", "filename": "libdecnumber/bid/bid-dpd.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fbid-dpd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fbid-dpd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fbid-dpd.h?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1,43 @@\n+/* Copyright (C) 2007\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+typedef unsigned int UINT32;\n+typedef unsigned long long UINT64;\n+typedef struct { UINT64 w[2]; } UINT128;\n+\n+#ifndef IN_LIBGCC2\n+#define _Decimal32 UINT32\n+#define _Decimal64 UINT64\n+#define _Decimal128 UINT128\n+#endif\n+\n+void _bid_to_dpd32 (_Decimal32 *, _Decimal32 *);\n+void _dpd_to_bid32 (_Decimal32 *, _Decimal32 *);\n+void _bid_to_dpd64 (_Decimal64 *, _Decimal64 *);\n+void _dpd_to_bid64 (_Decimal64 *, _Decimal64 *);\n+void _bid_to_dpd128 (_Decimal128 *, _Decimal128 *);\n+void _dpd_to_bid128 (_Decimal128 *, _Decimal128 *);"}, {"sha": "01e83bcd3067ce5a10d53a93f574a31186eb47e8", "filename": "libdecnumber/bid/bid2dpd_dpd2bid.c", "status": "added", "additions": 428, "deletions": 0, "changes": 428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fbid2dpd_dpd2bid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fbid2dpd_dpd2bid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fbid2dpd_dpd2bid.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1,428 @@\n+/* Copyright (C) 2007  Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+#undef IN_LIBGCC2\n+#include \"bid-dpd.h\"\n+\n+/* get full 64x64bit product */\n+#define __mul_64x64_to_128(P, CX, CY)             \\\n+{                                                 \\\n+  UINT64 CXH, CXL, CYH,CYL,PL,PH,PM,PM2;  \\\n+  CXH = (CX) >> 32;                               \\\n+  CXL = (UINT32)(CX);                             \\\n+  CYH = (CY) >> 32;                               \\\n+  CYL = (UINT32)(CY);                             \\\n+                                                  \\\n+  PM = CXH*CYL;                                   \\\n+  PH = CXH*CYH;                                   \\\n+  PL = CXL*CYL;                                   \\\n+  PM2 = CXL*CYH;                                  \\\n+  PH += (PM>>32);                                 \\\n+  PM = (UINT64)((UINT32)PM)+PM2+(PL>>32);         \\\n+                                                  \\\n+  (P).w[1] = PH + (PM>>32);                       \\\n+  (P).w[0] = (PM<<32)+(UINT32)PL;                 \\\n+}\n+\n+/* add 64-bit value to 128-bit */\n+#define __add_128_64(R128, A128, B64)             \\\n+{                                                 \\\n+  UINT64 R64H;                                    \\\n+  R64H = (A128).w[1];                             \\\n+  (R128).w[0] = (B64) + (A128).w[0];              \\\n+  if((R128).w[0] < (B64)) R64H ++;                \\\n+  (R128).w[1] = R64H;                             \\\n+}\n+\n+/* add 128-bit value to 128-bit (assume no carry-out) */\n+#define __add_128_128(R128, A128, B128)           \\\n+{                                                 \\\n+  UINT128 Q128;                                   \\\n+  Q128.w[1] = (A128).w[1]+(B128).w[1];            \\\n+  Q128.w[0] = (B128).w[0] + (A128).w[0];          \\\n+  if(Q128.w[0] < (B128).w[0]) Q128.w[1] ++;       \\\n+  (R128).w[1] = Q128.w[1];                        \\\n+  (R128).w[0] = Q128.w[0];                        \\\n+}\n+\n+#define __mul_128x128_high(Q, A, B)               \\\n+{                                                 \\\n+  UINT128 ALBL, ALBH, AHBL, AHBH, QM, QM2;        \\\n+                                                  \\\n+  __mul_64x64_to_128(ALBH, (A).w[0], (B).w[1]);   \\\n+  __mul_64x64_to_128(AHBL, (B).w[0], (A).w[1]);   \\\n+  __mul_64x64_to_128(ALBL, (A).w[0], (B).w[0]);   \\\n+  __mul_64x64_to_128(AHBH, (A).w[1],(B).w[1]);    \\\n+                                                  \\\n+  __add_128_128(QM, ALBH, AHBL);                  \\\n+  __add_128_64(QM2, QM, ALBL.w[1]);               \\\n+  __add_128_64((Q), AHBH, QM2.w[1]);              \\\n+}\n+\n+#include \"bid2dpd_dpd2bid.h\"\n+\n+static const unsigned int dm103[] =\n+  { 0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000 };\n+\n+void _bid_to_dpd32 (_Decimal32 *, _Decimal32 *);\n+\n+void\n+_bid_to_dpd32 (_Decimal32 *pres, _Decimal32 *px) {\n+  unsigned int sign, coefficient_x, exp, dcoeff;\n+  unsigned int b2, b1, b0, b01, res;\n+  _Decimal32 x = *px;\n+\n+  sign = (x & 0x80000000);\n+  if ((x & 0x60000000ul) == 0x60000000ul) {\n+    /* special encodings */\n+    if ((x & 0x78000000ul) == 0x78000000ul) {\n+      *pres = x; /* NaN or Infinity */\n+      return;\n+    }\n+    /* coefficient */\n+    coefficient_x = (x & 0x001ffffful) | 0x00800000ul;\n+    if (coefficient_x >= 10000000) coefficient_x = 0;\n+    /* get exponent */\n+    exp = (x >> 21) & 0xff;\n+  } else {\n+    exp = (x >> 23) & 0xff;\n+    coefficient_x = (x & 0x007ffffful);\n+  }\n+  b01 = coefficient_x / 1000;\n+  b2 = coefficient_x - 1000 * b01;\n+  b0 = b01 / 1000;\n+  b1 = b01 - 1000 * b0;\n+  dcoeff = b2d[b2] | b2d2[b1];\n+  if (b0 >= 8) { /* is b0 8 or 9? */\n+    res = sign | ((0x600 | ((exp >> 6) << 7) | \n+        ((b0 & 1) << 6) | (exp & 0x3f)) << 20) | dcoeff;\n+  } else { /* else b0 is 0..7 */\n+    res = sign | ((((exp >> 6) << 9) | (b0 << 6) | \n+        (exp & 0x3f)) << 20) | dcoeff;\n+  }\n+  *pres = res;\n+}\n+\n+void _dpd_to_bid32 (_Decimal32 *, _Decimal32 *);\n+\n+void\n+_dpd_to_bid32 (_Decimal32 *pres, _Decimal32 *px) {\n+  unsigned int r;\n+  unsigned int sign, exp, bcoeff;\n+  UINT64 trailing;\n+  unsigned int d0, d1, d2;\n+  _Decimal32 x = *px;\n+\n+  sign = (x & 0x80000000);\n+  trailing = (x & 0x000fffff);\n+  if ((x & 0x78000000) == 0x78000000) {\n+    *pres = x;\n+    return;\n+  } else { /* normal number */\n+    if ((x & 0x60000000) == 0x60000000) { /* G0..G1 = 11 -> d0 = 8 + G4 */\n+      d0 = d2b3[((x >> 26) & 1) | 8]; /* d0 = (comb & 0x0100 ? 9 : 8); */\n+      exp = (x >> 27) & 3; /* exp leading bits are G2..G3 */\n+    } else {\n+      d0 = d2b3[(x >> 26) & 0x7];\n+      exp = (x >> 29) & 3; /* exp loading bits are G0..G1 */\n+    }\n+    d1 = d2b2[(trailing >> 10) & 0x3ff];\n+    d2 = d2b[(trailing) & 0x3ff];\n+    bcoeff = d2 + d1 + d0;\n+    exp = (exp << 6) + ((x >> 20) & 0x3f);\n+    if (bcoeff < (1 << 23)) {\n+      r = exp;\n+      r <<= 23;\n+      r |= (bcoeff | sign);\n+    } else {\n+      r = exp;\n+      r <<= 21;\n+      r |= (sign | 0x60000000ul);\n+      /* add coeff, without leading bits */\n+      r |= (((unsigned int) bcoeff) & 0x1fffff);\n+    }\n+  }\n+  *pres = r;\n+}\n+\n+void _bid_to_dpd64 (_Decimal64 *, _Decimal64 *);\n+\n+void\n+_bid_to_dpd64 (_Decimal64 *pres, _Decimal64 *px) {\n+  UINT64 res;\n+  UINT64 sign, comb, exp, B34, B01;\n+  UINT64 d103, D61;\n+  UINT64 b0, b2, b3, b5;\n+  unsigned int b1, b4;\n+  UINT64 bcoeff;\n+  UINT64 dcoeff;\n+  unsigned int yhi, ylo;\n+  _Decimal64 x = *px;\n+\n+  sign = (x & 0x8000000000000000ull);\n+  comb = (x & 0x7ffc000000000000ull) >> 51;\n+  if ((comb & 0xf00) == 0xf00) {\n+    *pres = x;\n+    return;\n+  } else { /* Normal number */\n+    if ((comb & 0xc00) == 0xc00) { /* G0..G1 = 11 -> exp is G2..G11 */\n+      exp = (comb) & 0x3ff;\n+      bcoeff = (x & 0x0007ffffffffffffull) | 0x0020000000000000ull;\n+    } else {\n+      exp = (comb >> 2) & 0x3ff;\n+      bcoeff = (x & 0x001fffffffffffffull);\n+    }\n+    D61 = 2305843009ull; /* Floor(2^61 / 10^9) */\n+    /* Multiply the binary coefficient by ceil(2^64 / 1000), and take the upper\n+       64-bits in order to compute a division by 1000. */\n+    yhi = (D61 * (UINT64)(bcoeff >> (UINT64)27)) >> (UINT64)34;\n+    ylo = bcoeff - 1000000000ull * yhi;\n+    if (ylo >= 1000000000) {\n+      ylo = ylo - 1000000000;\n+      yhi = yhi + 1;\n+    }\n+    d103 = 0x4189374c;\n+    B34 = ((UINT64) ylo * d103) >> (32 + 8);\n+    B01 = ((UINT64) yhi * d103) >> (32 + 8);\n+    b5 = ylo - B34 * 1000;\n+    b2 = yhi - B01 * 1000;\n+    b3 = ((UINT64) B34 * d103) >> (32 + 8);\n+    b0 = ((UINT64) B01 * d103) >> (32 + 8);\n+    b4 = (unsigned int) B34 - (unsigned int) b3 *1000;\n+    b1 = (unsigned int) B01 - (unsigned int) dm103[b0];\n+    dcoeff = b2d[b5] | b2d2[b4] | b2d3[b3] | b2d4[b2] | b2d5[b1];\n+    if (b0 >= 8) /* is b0 8 or 9? */\n+      res = sign | ((0x1800 | ((exp >> 8) << 9) | ((b0 & 1) << 8) | \n+          (exp & 0xff)) << 50) | dcoeff;\n+    else /* else b0 is 0..7 */\n+      res = sign | ((((exp >> 8) << 11) | (b0 << 8) | \n+          (exp & 0xff)) << 50) | dcoeff;\n+  }\n+  *pres = res;\n+}\n+\n+void _dpd_to_bid64 (_Decimal64 *, _Decimal64 *);\n+\n+void\n+_dpd_to_bid64 (_Decimal64 *pres, _Decimal64 *px) {\n+  UINT64 res;\n+  UINT64 sign, comb, exp;\n+  UINT64 trailing;\n+  UINT64 d0, d1, d2;\n+  unsigned int d3, d4, d5;\n+  UINT64 bcoeff, mask;\n+  _Decimal64 x = *px;\n+\n+  sign = (x & 0x8000000000000000ull);\n+  comb = (x & 0x7ffc000000000000ull) >> 50;\n+  trailing = (x & 0x0003ffffffffffffull);\n+  if ((comb & 0x1e00) == 0x1e00) {\n+    if ((comb & 0x1f00) == 0x1f00) { /* G0..G4 = 11111 -> NaN */\n+      if (comb & 0x0100) { /* G5 = 1 -> sNaN */\n+        *pres = x;\n+      } else { /* G5 = 0 -> qNaN */\n+        *pres = x;\n+      }\n+    } else { /*if ((comb & 0x1e00) == 0x1e00); G0..G4 = 11110 -> INF */\n+      *pres = x;\n+    }\n+    return;\n+  } else { /* normal number */\n+    if ((comb & 0x1800) == 0x1800) { /* G0..G1 = 11 -> d0 = 8 + G4 */\n+      d0 = d2b6[((comb >> 8) & 1) | 8]; /* d0 = (comb & 0x0100 ? 9 : 8); */\n+      exp = (comb & 0x600) >> 1; /* exp = (comb & 0x0400 ? 1 : 0) * 0x200 + \n+          (comb & 0x0200 ? 1 : 0) * 0x100; exp leading bits are G2..G3 */\n+    } else {\n+      d0 = d2b6[(comb >> 8) & 0x7];\n+      exp = (comb & 0x1800) >> 3; /* exp = (comb & 0x1000 ? 1 : 0) * 0x200 + \n+          (comb & 0x0800 ? 1 : 0) * 0x100; exp loading bits are G0..G1 */\n+    }\n+    d1 = d2b5[(trailing >> 40) & 0x3ff];\n+    d2 = d2b4[(trailing >> 30) & 0x3ff];\n+    d3 = d2b3[(trailing >> 20) & 0x3ff];\n+    d4 = d2b2[(trailing >> 10) & 0x3ff];\n+    d5 = d2b[(trailing) & 0x3ff];\n+    bcoeff = (d5 + d4 + d3) + d2 + d1 + d0;\n+    exp += (comb & 0xff);\n+    mask = 1;\n+    mask <<= 53;\n+    if (bcoeff < mask) { /* check whether coefficient fits in 10*5+3 bits */\n+      res = exp;\n+      res <<= 53;\n+      res |= (bcoeff | sign);\n+      *pres = res;\n+      return;\n+    }\n+    /* special format */\n+    res = (exp << 51) | (sign | 0x6000000000000000ull);\n+    /* add coeff, without leading bits */\n+    mask = (mask >> 2) - 1;\n+    bcoeff &= mask;\n+    res |= bcoeff;\n+  }\n+  *pres = res;\n+}\n+\n+void _bid_to_dpd128 (_Decimal128 *, _Decimal128 *);\n+\n+void\n+_bid_to_dpd128 (_Decimal128 *pres, _Decimal128 *px) {\n+  UINT128 res;\n+  UINT128 sign;\n+  unsigned int comb;\n+  UINT128 bcoeff;\n+  UINT128 dcoeff;\n+  UINT128 BH, d1018, BT2, BT1;\n+  UINT64 exp, BL, d109;\n+  UINT64 d106, d103;\n+  UINT64 k1, k2, k4, k5, k7, k8, k10, k11;\n+  unsigned int BHH32, BLL32, BHL32, BLH32, k0, k3, k6, k9, amount;\n+  _Decimal128 x = *px;\n+\n+  sign.w[1] = (x.w[1] & 0x8000000000000000ull);\n+  sign.w[0] = 0;\n+  comb = (x.w[1] /*& 0x7fffc00000000000ull */ ) >> 46;\n+  exp = 0;\n+  if ((comb & 0x1e000) == 0x1e000) {\n+    if ((comb & 0x1f000) == 0x1f000) { /* G0..G4 = 11111 -> NaN */\n+      if (comb & 0x01000) { /* G5 = 1 -> sNaN */\n+        res = x;\n+      } else { /* G5 = 0 -> qNaN */\n+        res = x;\n+      }\n+    } else { /* G0..G4 = 11110 -> INF */\n+      res = x;\n+    }\n+  } else { /* normal number */\n+    exp = ((x.w[1] & 0x7fff000000000000ull) >> 49) & 0x3fff;\n+    bcoeff.w[1] = (x.w[1] & 0x0001ffffffffffffull);\n+    bcoeff.w[0] = x.w[0];\n+    d1018 = reciprocals10_128[18];\n+    __mul_128x128_high (BH, bcoeff, d1018);\n+    amount = recip_scale[18];\n+    BH.w[0] = (BH.w[0] >> amount) | (BH.w[1] << (64 - amount));\n+    BL = bcoeff.w[0] - BH.w[0] * 1000000000000000000ull;\n+    d109 = reciprocals10_64[9];\n+    __mul_64x64_to_128 (BT1, BH.w[0], d109);\n+    BHH32 = (unsigned int) (BT1.w[1] >> short_recip_scale[9]);\n+    BHL32 = (unsigned int) BH.w[0] - BHH32 * 1000000000;\n+    __mul_64x64_to_128 (BT2, BL, d109);\n+    BLH32 = (unsigned int) (BT2.w[1] >> short_recip_scale[9]);\n+    BLL32 = (unsigned int) BL - BLH32 * 1000000000;\n+    d106 = 0x431BDE83;\n+    d103 = 0x4189374c;\n+    k0 = ((UINT64) BHH32 * d106) >> (32 + 18);\n+    BHH32 -= (unsigned int) k0 *1000000;\n+    k1 = ((UINT64) BHH32 * d103) >> (32 + 8);\n+    k2 = BHH32 - (unsigned int) k1 *1000;\n+    k3 = ((UINT64) BHL32 * d106) >> (32 + 18);\n+    BHL32 -= (unsigned int) k3 *1000000;\n+    k4 = ((UINT64) BHL32 * d103) >> (32 + 8);\n+    k5 = BHL32 - (unsigned int) k4 *1000;\n+    k6 = ((UINT64) BLH32 * d106) >> (32 + 18);\n+    BLH32 -= (unsigned int) k6 *1000000;\n+    k7 = ((UINT64) BLH32 * d103) >> (32 + 8);\n+    k8 = BLH32 - (unsigned int) k7 *1000;\n+    k9 = ((UINT64) BLL32 * d106) >> (32 + 18);\n+    BLL32 -= (unsigned int) k9 *1000000;\n+    k10 = ((UINT64) BLL32 * d103) >> (32 + 8);\n+    k11 = BLL32 - (unsigned int) k10 *1000;\n+    dcoeff.w[1] = (b2d[k5] >> 4) | (b2d[k4] << 6) | (b2d[k3] << 16) | \n+        (b2d[k2] << 26) | (b2d[k1] << 36);\n+    dcoeff.w[0] = b2d[k11] | (b2d[k10] << 10) | (b2d[k9] << 20) | \n+        (b2d[k8] << 30) | (b2d[k7] << 40) | (b2d[k6] << 50) | (b2d[k5] << 60);\n+    res.w[0] = dcoeff.w[0];\n+    if (k0 >= 8) {\n+      res.w[1] = sign.w[1] | ((0x18000 | ((exp >> 12) << 13) | \n+          ((k0 & 1) << 12) | (exp & 0xfff)) << 46) | dcoeff.w[1];\n+    } else {\n+      res.w[1] = sign.w[1] | ((((exp >> 12) << 15) | (k0 << 12) | \n+          (exp & 0xfff)) << 46) | dcoeff.w[1];\n+    }\n+  }\n+  *pres = res;\n+}\n+\n+void _dpd_to_bid128 (_Decimal128 *, _Decimal128 *);\n+\n+void\n+_dpd_to_bid128 (_Decimal128 *pres, _Decimal128 *px) {\n+  UINT128 res;\n+  UINT128 sign;\n+  UINT64 exp, comb;\n+  UINT128 trailing;\n+  UINT64 d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11;\n+  UINT128 bcoeff;\n+  UINT64 tl, th;\n+  _Decimal128 x = *px;\n+\n+  sign.w[1] = (x.w[1] & 0x8000000000000000ull);\n+  sign.w[0] = 0;\n+  comb = (x.w[1] & 0x7fffc00000000000ull) >> 46;\n+  trailing.w[1] = x.w[1];\n+  trailing.w[0] = x.w[0];\n+  if ((comb & 0x1e000) == 0x1e000) {\n+    if ((comb & 0x1f000) == 0x1f000) { /* G0..G4 = 11111 -> NaN */\n+      if (comb & 0x01000) { /* G5 = 1 -> sNaN */\n+        *pres = x;\n+      } else { /* G5 = 0 -> qNaN */\n+        *pres = x;\n+      }\n+    } else { /* G0..G4 = 11110 -> INF */\n+      *pres = x;\n+    }\n+    return;\n+  } else { /* Normal number */\n+    if ((comb & 0x18000) == 0x18000) { /* G0..G1 = 11 -> d0 = 8 + G4 */\n+      d0 = d2b6[8 + ((comb & 0x01000) >> 12)];\n+      exp = (comb & 0x06000) >> 1;  /* exp leading bits are G2..G3 */\n+    } else {\n+      d0 = d2b6[((comb & 0x07000) >> 12)];\n+      exp = (comb & 0x18000) >> 3;  /* exp loading bits are G0..G1 */\n+    }\n+    d11 = d2b[(trailing.w[0]) & 0x3ff];\n+    d10 = d2b2[(trailing.w[0] >> 10) & 0x3ff];\n+    d9 = d2b3[(trailing.w[0] >> 20) & 0x3ff];\n+    d8 = d2b4[(trailing.w[0] >> 30) & 0x3ff];\n+    d7 = d2b5[(trailing.w[0] >> 40) & 0x3ff];\n+    d6 = d2b6[(trailing.w[0] >> 50) & 0x3ff];\n+    d5 = d2b[(trailing.w[0] >> 60) | ((trailing.w[1] & 0x3f) << 4)];\n+    d4 = d2b2[(trailing.w[1] >> 6) & 0x3ff];\n+    d3 = d2b3[(trailing.w[1] >> 16) & 0x3ff];\n+    d2 = d2b4[(trailing.w[1] >> 26) & 0x3ff];\n+    d1 = d2b5[(trailing.w[1] >> 36) & 0x3ff];\n+    tl = d11 + d10 + d9 + d8 + d7 + d6;\n+    th = d5 + d4 + d3 + d2 + d1 + d0;\n+    __mul_64x64_to_128 (bcoeff, th, 1000000000000000000ull);\n+    __add_128_64 (bcoeff, bcoeff, tl);\n+    exp += (comb & 0xfff);\n+    res.w[0] = bcoeff.w[0];\n+    res.w[1] = (exp << 49) | sign.w[1] | bcoeff.w[1];\n+  }\n+  *pres = res;\n+}"}, {"sha": "7728cffdcc7469a2dd473ea0744ff01960921ea8", "filename": "libdecnumber/bid/bid2dpd_dpd2bid.h", "status": "added", "additions": 10407, "deletions": 0, "changes": 10407, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fbid2dpd_dpd2bid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fbid2dpd_dpd2bid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fbid2dpd_dpd2bid.h?ref=79b87c74d764bd42703818289685e48996b54eb8"}, {"sha": "1daf5df1913db028a2a0e9587fe753edc5291c78", "filename": "libdecnumber/bid/decimal128.c", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fdecimal128.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1,148 @@\n+/* Copyright (C) 2007\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+#define decimal128FromString __dpd128FromString\n+#define decimal128ToString __dpd128ToString\n+#define decimal128ToEngString __dpd128ToEngString\n+#define decimal128FromNumber __dpd128FromNumber\n+#define decimal128ToNumber __dpd128ToNumber\n+\n+#include \"dpd/decimal128.c\"\n+\n+#undef decimal128FromString\n+#undef decimal128ToString\n+#undef decimal128ToEngString\n+#undef decimal128FromNumber\n+#undef decimal128ToNumber\n+\n+#include \"bid-dpd.h\"\n+\n+#ifdef IN_LIBGCC2\n+#define decimal128FromString __decimal128FromString\n+#define decimal128ToString __decimal128ToString\n+#define decimal128ToEngString __decimal128ToEngString\n+#define decimal128FromNumber __decimal128FromNumber\n+#define decimal128ToNumber __decimal128ToNumber\n+#endif\n+\n+decimal128 *decimal128FromString (decimal128 *, const char *, decContext *);\n+char *decimal128ToString (const decimal128 *, char *);\n+char *decimal128ToEngString (const decimal128 *, char *);\n+decimal128 *decimal128FromNumber (decimal128 *, const decNumber *, decContext *);\n+decNumber *decimal128ToNumber (const decimal128 *, decNumber *);\n+\n+void __host_to_ieee_128 (_Decimal128 in, decimal128 *out);\n+void __ieee_to_host_128 (decimal128 in, _Decimal128 *out);\n+\n+decimal128 *\n+decimal128FromNumber (decimal128 *d128, const decNumber *dn,\n+\t\t      decContext *set)\n+{\n+  /* decimal128 and _Decimal128 are different types.  */\n+  union\n+    {\n+      _Decimal128 _Dec;\n+      decimal128 dec;\n+    } u;\n+\n+  __dpd128FromNumber (d128, dn, set);\n+\n+  /* __dpd128FromNumber returns in big endian. But _dpd_to_bid128 takes\n+     host endian. */\n+  __ieee_to_host_128 (*d128, &u._Dec);\n+\n+  /* Convert DPD to BID.  */\n+  _dpd_to_bid128 (&u._Dec, &u._Dec);\n+\n+  /* dfp.c is in bid endian. */\n+  __host_to_ieee_128 (u._Dec, &u.dec);\n+\n+  /* d128 is returned as a pointer to _Decimal128 here.  */\n+  *d128 = u.dec;\n+\n+  return d128;\n+}\n+\n+decNumber *\n+decimal128ToNumber (const decimal128 *bid128, decNumber *dn)\n+{\n+  /* decimal128 and _Decimal128 are different types.  */\n+  union\n+    {\n+      _Decimal128 _Dec;\n+      decimal128 dec;\n+    } u;\n+\n+  /* bid128 is a pointer to _Decimal128 in bid endian. But _bid_to_dpd128\n+     takes host endian.  */\n+  __ieee_to_host_128 (*bid128, &u._Dec);\n+\n+  /* Convert BID to DPD.  */\n+  _bid_to_dpd128 (&u._Dec, &u._Dec);\n+\n+  /* __dpd128ToNumber is in bid endian.  */\n+  __host_to_ieee_128 (u._Dec, &u.dec);\n+\n+  return __dpd128ToNumber (&u.dec, dn);\n+}\n+\n+char *\n+decimal128ToString (const decimal128 *d128, char *string)\n+{\n+  decNumber dn;\t\t\t/* work */\n+  decimal128ToNumber (d128, &dn);\n+  decNumberToString (&dn, string);\n+  return string;\n+}\n+\n+char *\n+decimal128ToEngString (const decimal128 *d128, char *string)\n+{\n+  decNumber dn;\t\t\t/* work */\n+  decimal128ToNumber (d128, &dn);\n+  decNumberToEngString (&dn, string);\n+  return string;\n+}\n+\n+decimal128 *\n+decimal128FromString (decimal128 *result, const char *string,\n+\t\t      decContext *set)\n+{\n+  decContext dc;\t\t/* work */\n+  decNumber dn;\t\t\t/* .. */\n+\n+  decContextDefault (&dc, DEC_INIT_DECIMAL128);\t/* no traps, please */\n+  dc.round = set->round;\t/* use supplied rounding */\n+\n+  decNumberFromString (&dn, string, &dc);\t/* will round if needed */\n+  decimal128FromNumber (result, &dn, &dc);\n+  if (dc.status != 0)\n+    {\t\t\t\t/* something happened */\n+      decContextSetStatus (set, dc.status);\t/* .. pass it on */\n+    }\n+  return result;\n+}"}, {"sha": "138735280438d5ca5bbf013abe2016a1f865e78b", "filename": "libdecnumber/bid/decimal128.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fdecimal128.h?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1 @@\n+#include \"dpd/decimal128.h\""}, {"sha": "68e004ebd9b69fa1a1f8352fae38ed2f46d575cc", "filename": "libdecnumber/bid/decimal32.c", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fdecimal32.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1,148 @@\n+/* Copyright (C) 2007\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+#define decimal32FromString __dpd32FromString\n+#define decimal32ToString __dpd32ToString\n+#define decimal32ToEngString __dpd32ToEngString\n+#define decimal32FromNumber __dpd32FromNumber\n+#define decimal32ToNumber __dpd32ToNumber\n+\n+#include \"dpd/decimal32.c\"\n+\n+#undef decimal32FromString\n+#undef decimal32ToString\n+#undef decimal32ToEngString\n+#undef decimal32FromNumber\n+#undef decimal32ToNumber\n+\n+#include \"bid-dpd.h\"\n+\n+#ifdef IN_LIBGCC2\n+#define decimal32FromString __decimal32FromString\n+#define decimal32ToString __decimal32ToString\n+#define decimal32ToEngString __decimal32ToEngString\n+#define decimal32FromNumber __decimal32FromNumber\n+#define decimal32ToNumber __decimal32ToNumber\n+#endif\n+\n+decimal32 *decimal32FromString (decimal32 *, const char *, decContext *);\n+char *decimal32ToString (const decimal32 *, char *);\n+char *decimal32ToEngString (const decimal32 *, char *);\n+decimal32 *decimal32FromNumber (decimal32 *, const decNumber *, decContext *);\n+decNumber *decimal32ToNumber (const decimal32 *, decNumber *);\n+\n+void __host_to_ieee_32 (_Decimal32 in, decimal32 *out);\n+void __ieee_to_host_32 (decimal32 in, _Decimal32 *out);\n+\n+decimal32 *\n+decimal32FromNumber (decimal32 *d32, const decNumber *dn,\n+\t\t      decContext *set)\n+{\n+  /* decimal32 and _Decimal32 are different types.  */\n+  union\n+    {\n+      _Decimal32 _Dec;\n+      decimal32 dec;\n+    } u;\n+\n+  __dpd32FromNumber (d32, dn, set);\n+\n+  /* __dpd32FromNumber returns in big endian. But _dpd_to_bid32 takes\n+     host endian. */\n+  __ieee_to_host_32 (*d32, &u._Dec);\n+\n+  /* Convert DPD to BID.  */\n+  _dpd_to_bid32 (&u._Dec, &u._Dec);\n+\n+  /* dfp.c is in bid endian. */\n+  __host_to_ieee_32 (u._Dec, &u.dec);\n+\n+  /* d32 is returned as a pointer to _Decimal32 here.  */\n+  *d32 = u.dec;\n+\n+  return d32;\n+}\n+\n+decNumber *\n+decimal32ToNumber (const decimal32 *bid32, decNumber *dn)\n+{\n+  /* decimal32 and _Decimal32 are different types.  */\n+  union\n+    {\n+      _Decimal32 _Dec;\n+      decimal32 dec;\n+    } u;\n+\n+  /* bid32 is a pointer to _Decimal32 in bid endian. But _bid_to_dpd32\n+     takes host endian.  */\n+  __ieee_to_host_32 (*bid32, &u._Dec);\n+\n+  /* Convert BID to DPD.  */\n+  _bid_to_dpd32 (&u._Dec, &u._Dec);\n+\n+  /* __dpd32ToNumber is in bid endian.  */\n+  __host_to_ieee_32 (u._Dec, &u.dec);\n+\n+  return __dpd32ToNumber (&u.dec, dn);\n+}\n+\n+char *\n+decimal32ToString (const decimal32 *d32, char *string)\n+{\n+  decNumber dn;\t\t\t/* work */\n+  decimal32ToNumber (d32, &dn);\n+  decNumberToString (&dn, string);\n+  return string;\n+}\n+\n+char *\n+decimal32ToEngString (const decimal32 *d32, char *string)\n+{\n+  decNumber dn;\t\t\t/* work */\n+  decimal32ToNumber (d32, &dn);\n+  decNumberToEngString (&dn, string);\n+  return string;\n+}\n+\n+decimal32 *\n+decimal32FromString (decimal32 *result, const char *string,\n+\t\t      decContext *set)\n+{\n+  decContext dc;\t\t/* work */\n+  decNumber dn;\t\t\t/* .. */\n+\n+  decContextDefault (&dc, DEC_INIT_DECIMAL32);\t/* no traps, please */\n+  dc.round = set->round;\t/* use supplied rounding */\n+\n+  decNumberFromString (&dn, string, &dc);\t/* will round if needed */\n+  decimal32FromNumber (result, &dn, &dc);\n+  if (dc.status != 0)\n+    {\t\t\t\t/* something happened */\n+      decContextSetStatus (set, dc.status);\t/* .. pass it on */\n+    }\n+  return result;\n+}"}, {"sha": "e12e3b1c305165bd3f9ef12e0335a96f073004dd", "filename": "libdecnumber/bid/decimal32.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fdecimal32.h?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1 @@\n+#include \"dpd/decimal32.h\""}, {"sha": "bdbee38ce623e6d7adb4e24d11873438c5c85e44", "filename": "libdecnumber/bid/decimal64.c", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fdecimal64.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1,148 @@\n+/* Copyright (C) 2007\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+#define decimal64FromString __dpd64FromString\n+#define decimal64ToString __dpd64ToString\n+#define decimal64ToEngString __dpd64ToEngString\n+#define decimal64FromNumber __dpd64FromNumber\n+#define decimal64ToNumber __dpd64ToNumber\n+\n+#include \"dpd/decimal64.c\"\n+\n+#undef decimal64FromString\n+#undef decimal64ToString\n+#undef decimal64ToEngString\n+#undef decimal64FromNumber\n+#undef decimal64ToNumber\n+\n+#include \"bid-dpd.h\"\n+\n+#ifdef IN_LIBGCC2\n+#define decimal64FromString __decimal64FromString\n+#define decimal64ToString __decimal64ToString\n+#define decimal64ToEngString __decimal64ToEngString\n+#define decimal64FromNumber __decimal64FromNumber\n+#define decimal64ToNumber __decimal64ToNumber\n+#endif\n+\n+decimal64 *decimal64FromString (decimal64 *, const char *, decContext *);\n+char *decimal64ToString (const decimal64 *, char *);\n+char *decimal64ToEngString (const decimal64 *, char *);\n+decimal64 *decimal64FromNumber (decimal64 *, const decNumber *, decContext *);\n+decNumber *decimal64ToNumber (const decimal64 *, decNumber *);\n+\n+void __host_to_ieee_64 (_Decimal64 in, decimal64 *out);\n+void __ieee_to_host_64 (decimal64 in, _Decimal64 *out);\n+\n+decimal64 *\n+decimal64FromNumber (decimal64 *d64, const decNumber *dn,\n+\t\t      decContext *set)\n+{\n+  /* decimal64 and _Decimal64 are different types.  */\n+  union\n+    {\n+      _Decimal64 _Dec;\n+      decimal64 dec;\n+    } u;\n+\n+  __dpd64FromNumber (d64, dn, set);\n+\n+  /* __dpd64FromNumber returns in big endian. But _dpd_to_bid64 takes\n+     host endian. */\n+  __ieee_to_host_64 (*d64, &u._Dec);\n+\n+  /* Convert DPD to BID.  */\n+  _dpd_to_bid64 (&u._Dec, &u._Dec);\n+\n+  /* dfp.c is in bid endian. */\n+  __host_to_ieee_64 (u._Dec, &u.dec);\n+\n+  /* d64 is returned as a pointer to _Decimal64 here.  */\n+  *d64 = u.dec;\n+\n+  return d64;\n+}\n+\n+decNumber *\n+decimal64ToNumber (const decimal64 *bid64, decNumber *dn)\n+{\n+  /* decimal64 and _Decimal64 are different types.  */\n+  union\n+    {\n+      _Decimal64 _Dec;\n+      decimal64 dec;\n+    } u;\n+\n+  /* bid64 is a pointer to _Decimal64 in bid endian. But _bid_to_dpd64\n+     takes host endian.  */\n+  __ieee_to_host_64 (*bid64, &u._Dec);\n+\n+  /* Convert BID to DPD.  */\n+  _bid_to_dpd64 (&u._Dec, &u._Dec);\n+\n+  /* __dpd64ToNumber is in bid endian.  */\n+  __host_to_ieee_64 (u._Dec, &u.dec);\n+\n+  return __dpd64ToNumber (&u.dec, dn);\n+}\n+\n+char *\n+decimal64ToString (const decimal64 *d64, char *string)\n+{\n+  decNumber dn;\t\t\t/* work */\n+  decimal64ToNumber (d64, &dn);\n+  decNumberToString (&dn, string);\n+  return string;\n+}\n+\n+char *\n+decimal64ToEngString (const decimal64 *d64, char *string)\n+{\n+  decNumber dn;\t\t\t/* work */\n+  decimal64ToNumber (d64, &dn);\n+  decNumberToEngString (&dn, string);\n+  return string;\n+}\n+\n+decimal64 *\n+decimal64FromString (decimal64 *result, const char *string,\n+\t\t      decContext *set)\n+{\n+  decContext dc;\t\t/* work */\n+  decNumber dn;\t\t\t/* .. */\n+\n+  decContextDefault (&dc, DEC_INIT_DECIMAL64);\t/* no traps, please */\n+  dc.round = set->round;\t/* use supplied rounding */\n+\n+  decNumberFromString (&dn, string, &dc);\t/* will round if needed */\n+  decimal64FromNumber (result, &dn, &dc);\n+  if (dc.status != 0)\n+    {\t\t\t\t/* something happened */\n+      decContextSetStatus (set, dc.status);\t/* .. pass it on */\n+    }\n+  return result;\n+}"}, {"sha": "94d4d0c585a491287ffbdd81aa82df63fffda6da", "filename": "libdecnumber/bid/decimal64.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fdecimal64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fdecimal64.h?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1 @@\n+#include \"dpd/decimal64.h\""}, {"sha": "2c8ea32746aec7dbbb374a85f0025eec48bdf81c", "filename": "libdecnumber/bid/host-ieee128.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fhost-ieee128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fhost-ieee128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fhost-ieee128.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1,82 @@\n+/* This is a software decimal floating point library.\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <limits.h>\n+\n+#include \"config.h\"\n+#include \"gstdint.h\"\n+#include \"bid-dpd.h\"\n+#include \"decimal128.h\"\n+\n+extern uint32_t __dec_byte_swap (uint32_t);\n+void __host_to_ieee_128 (_Decimal128 in, decimal128 *out);\n+void __ieee_to_host_128 (decimal128 in, _Decimal128 *out);\n+\n+#ifndef WORDS_BIGENDIAN\n+#define WORDS_BIGENDIAN 0\n+#endif\n+\n+static void\n+__swap128 (char *src, char *dst)\n+{\n+  uint32_t t1, t2, t3, t4;\n+\n+  if (!WORDS_BIGENDIAN)\n+    {\n+      memcpy (&t1, src, 4);\n+      memcpy (&t2, src + 4, 4);\n+      memcpy (&t3, src + 8, 4);\n+      memcpy (&t4, src + 12, 4);\n+      t1 = __dec_byte_swap (t1);\n+      t2 = __dec_byte_swap (t2);\n+      t3 = __dec_byte_swap (t3);\n+      t4 = __dec_byte_swap (t4);\n+      memcpy (dst, &t4, 4);\n+      memcpy (dst + 4, &t3, 4);\n+      memcpy (dst + 8, &t2, 4);\n+      memcpy (dst + 12, &t1, 4);\n+    }\n+  else\n+    memcpy (dst, src, 16);\n+}\n+\n+void\n+__host_to_ieee_128 (_Decimal128 in, decimal128 *out)\n+{\n+  __swap128 ((char *) &in, (char *) out);\n+}\n+\n+void\n+__ieee_to_host_128 (decimal128 in, _Decimal128 *out)\n+{\n+  __swap128 ((char *) &in, (char *) out);\n+}"}, {"sha": "639662edfee943b1649ba3d936065b7454ea0161", "filename": "libdecnumber/bid/host-ieee32.c", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fhost-ieee32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fhost-ieee32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fhost-ieee32.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1,105 @@\n+/* This is a software decimal floating point library.\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+/* This implements IEEE 754R decimal floating point arithmetic, but\n+   does not provide a mechanism for setting the rounding mode, or for\n+   generating or handling exceptions.  Conversions between decimal\n+   floating point types and other types depend on C library functions.\n+\n+   Contributed by Ben Elliston  <bje@au.ibm.com>.  */\n+\n+/* The intended way to use this file is to make two copies, add `#define '\n+   to one copy, then compile both copies and add them to libgcc.a.  */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <limits.h>\n+\n+#include \"config.h\"\n+#include \"gstdint.h\"\n+#include \"bid-dpd.h\"\n+#include \"decimal32.h\"\n+\n+uint32_t __dec_byte_swap (uint32_t);\n+void __host_to_ieee_32 (_Decimal32 in, decimal32 *out);\n+void __ieee_to_host_32 (decimal32 in, _Decimal32 *out);\n+\n+#ifndef WORDS_BIGENDIAN\n+#define WORDS_BIGENDIAN 0\n+#endif\n+\n+uint32_t\n+__dec_byte_swap (uint32_t in)\n+{\n+  uint32_t out = 0;\n+  unsigned char *p = (unsigned char *) &out;\n+  union {\n+    uint32_t i;\n+    unsigned char b[4];\n+  } u;\n+\n+  u.i = in;\n+  p[0] = u.b[3];\n+  p[1] = u.b[2];\n+  p[2] = u.b[1];\n+  p[3] = u.b[0];\n+\n+  return out;\n+}\n+\n+void\n+__host_to_ieee_32 (_Decimal32 in, decimal32 *out)\n+{\n+  uint32_t t;\n+\n+  if (!WORDS_BIGENDIAN)\n+    {\n+      memcpy (&t, &in, 4);\n+      t = __dec_byte_swap (t);\n+      memcpy (out, &t, 4);\n+    }\n+  else\n+    memcpy (out, &in, 4);\n+}\n+\n+void\n+__ieee_to_host_32 (decimal32 in, _Decimal32 *out)\n+{\n+  uint32_t t;\n+\n+  if (!WORDS_BIGENDIAN)\n+    {\n+      memcpy (&t, &in, 4);\n+      t = __dec_byte_swap (t);\n+      memcpy (out, &t, 4);\n+    }\n+  else\n+    memcpy (out, &in, 4);\n+}"}, {"sha": "3c98985244dfbdb797c4cd87d5ac58fd2e971a1f", "filename": "libdecnumber/bid/host-ieee64.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fhost-ieee64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fbid%2Fhost-ieee64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fbid%2Fhost-ieee64.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -0,0 +1,86 @@\n+/* This is a software decimal floating point library.\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+/* This implements IEEE 754R decimal floating point arithmetic, but\n+   does not provide a mechanism for setting the rounding mode, or for\n+   generating or handling exceptions.  Conversions between decimal\n+   floating point types and other types depend on C library functions.\n+\n+   Contributed by Ben Elliston  <bje@au.ibm.com>.  */\n+\n+/* The intended way to use this file is to make two copies, add `#define '\n+   to one copy, then compile both copies and add them to libgcc.a.  */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <limits.h>\n+\n+#include \"config.h\"\n+#include \"gstdint.h\"\n+#include \"bid-dpd.h\"\n+#include \"decimal64.h\"\n+\n+uint32_t __dec_byte_swap (uint32_t);\n+void __host_to_ieee_64 (_Decimal64 in, decimal64 *out);\n+void __ieee_to_host_64 (decimal64 in, _Decimal64 *out);\n+\n+#ifndef WORDS_BIGENDIAN\n+#define WORDS_BIGENDIAN 0\n+#endif\n+\n+static void\n+__swap64 (char *src, char *dst)\n+{\n+  uint32_t t1, t2;\n+\n+  if (!WORDS_BIGENDIAN) \n+    {\n+      memcpy (&t1, src, 4);\n+      memcpy (&t2, src + 4, 4);\n+      t1 = __dec_byte_swap (t1);\n+      t2 = __dec_byte_swap (t2);\n+      memcpy (dst, &t2, 4);\n+      memcpy (dst + 4, &t1, 4);\n+    }\n+  else\n+    memcpy (dst, src, 8);\n+}\n+\n+void\n+__host_to_ieee_64 (_Decimal64 in, decimal64 *out)\n+{\n+  __swap64 ((char *) &in, (char *) out);\n+}\n+\n+void\n+__ieee_to_host_64 (decimal64 in, _Decimal64 *out)\n+{\n+  __swap64 ((char *) &in, (char *) out);\n+}"}, {"sha": "b25b9e9cdd48ecf3bcf1df24860ca4ccf2482365", "filename": "libdecnumber/config.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfig.in?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -69,6 +69,10 @@\n /* Define to 1 if you have the ANSI C header files. */\n #undef STDC_HEADERS\n \n+/* Define to 1 if your processor stores words with the most significant byte\n+   first (like Motorola and SPARC, unlike Intel and VAX). */\n+#undef WORDS_BIGENDIAN\n+\n /* Define to empty if `const' does not conform to ANSI C. */\n #undef const\n "}, {"sha": "4079e4be64ba231cb184037ef8946fb96ed479bd", "filename": "libdecnumber/configure", "status": "modified", "additions": 288, "deletions": 3, "changes": 291, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -311,7 +311,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS SET_MAKE CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT RANLIB ac_ct_RANLIB ACLOCAL AUTOCONF AUTOHEADER WARN_CFLAGS WARN_PEDANTIC WERROR CPP EGREP MAINT LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS SET_MAKE CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT RANLIB ac_ct_RANLIB ACLOCAL AUTOCONF AUTOHEADER WARN_CFLAGS WARN_PEDANTIC WERROR CPP EGREP MAINT enable_decimal_float LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -846,6 +846,10 @@ Optional Features:\n   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n   --enable-werror-always  enable -Werror despite compiler version\n   --enable-maintainer-mode enable rules only needed by maintainers\n+  --enable-decimal-float={no,yes,bid,dpd}\n+\t\t\tenable decimal float extension to C.  Selecting 'bid'\n+\t\t\tor 'dpd' choses which decimal floating point format\n+\t\t\tto use\n \n Some influential environment variables:\n   CC          C compiler command\n@@ -2616,7 +2620,7 @@ fi\n echo \"$as_me:$LINENO: result: $acx_cv_prog_cc_pedantic__Wno_long_long\" >&5\n echo \"${ECHO_T}$acx_cv_prog_cc_pedantic__Wno_long_long\" >&6\n if test $acx_cv_prog_cc_pedantic__Wno_long_long = yes; then\n-  WARN_PEDANTIC=\"-pedantic -Wno-long-long\"\n+  WARN_PEDANTIC=\"$WARN_PEDANTIC${WARN_PEDANTIC:+ }-pedantic -Wno-long-long\"\n fi\n \n \n@@ -2635,11 +2639,12 @@ else\n   enable_werror_always=no\n fi;\n if test $enable_werror_always = yes; then\n-  WERROR=-Werror\n+  WERROR=\"$WERROR${WERROR:+ }-Werror\"\n fi\n \n \n \n+\n # Checks for header files.\n ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n@@ -7316,6 +7321,285 @@ else\n fi\n \n \n+# Default decimal format\n+# If you change the defaults here, be sure to change them in the GCC directory also\n+echo \"$as_me:$LINENO: checking for decimal floating point\" >&5\n+echo $ECHO_N \"checking for decimal floating point... $ECHO_C\" >&6\n+# Check whether --enable-decimal-float or --disable-decimal-float was given.\n+if test \"${enable_decimal_float+set}\" = set; then\n+  enableval=\"$enable_decimal_float\"\n+\n+  case $enable_decimal_float in\n+    yes | no | bid | dpd) ;;\n+    *) { { echo \"$as_me:$LINENO: error: '$enable_decimal_float' is an invalid value for --enable-decimal-float.\n+Valid choices are 'yes', 'bid', 'dpd', and 'no'.\" >&5\n+echo \"$as_me: error: '$enable_decimal_float' is an invalid value for --enable-decimal-float.\n+Valid choices are 'yes', 'bid', 'dpd', and 'no'.\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+  esac\n+\n+else\n+\n+  case $target in\n+    powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux*)\n+      enable_decimal_float=yes\n+      ;;\n+    *)\n+      enable_decimal_float=no\n+      ;;\n+  esac\n+\n+fi;\n+\n+# x86's use BID format instead of DPD\n+# In theory --enable-decimal-float=no should not compile anything\n+# For the sake of simplicity, just use the default format in this directory\n+if test x$enable_decimal_float = xyes -o x$enable_decimal_float = xno; then\n+  case $target in\n+    i?86*-*-linux* | x86_64*-*-linux*)\n+      enable_decimal_float=bid\n+      ;;\n+    *)\n+      enable_decimal_float=dpd\n+      ;;\n+  esac\n+fi\n+\n+echo \"$as_me:$LINENO: result: $enable_decimal_float\" >&5\n+echo \"${ECHO_T}$enable_decimal_float\" >&6\n+\n+\n+echo \"$as_me:$LINENO: checking whether byte ordering is bigendian\" >&5\n+echo $ECHO_N \"checking whether byte ordering is bigendian... $ECHO_C\" >&6\n+if test \"${ac_cv_c_bigendian+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  # See if sys/param.h defines the BYTE_ORDER macro.\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <sys/types.h>\n+#include <sys/param.h>\n+\n+int\n+main ()\n+{\n+#if !BYTE_ORDER || !BIG_ENDIAN || !LITTLE_ENDIAN\n+ bogus endian macros\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  # It does; now see whether it defined to BIG_ENDIAN or not.\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <sys/types.h>\n+#include <sys/param.h>\n+\n+int\n+main ()\n+{\n+#if BYTE_ORDER != BIG_ENDIAN\n+ not big endian\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_c_bigendian=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_c_bigendian=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+# It does not; compile a test program.\n+if test \"$cross_compiling\" = yes; then\n+  # try to guess the endianness by grepping values into an object file\n+  ac_cv_c_bigendian=unknown\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+short ascii_mm[] = { 0x4249, 0x4765, 0x6E44, 0x6961, 0x6E53, 0x7953, 0 };\n+short ascii_ii[] = { 0x694C, 0x5454, 0x656C, 0x6E45, 0x6944, 0x6E61, 0 };\n+void _ascii () { char *s = (char *) ascii_mm; s = (char *) ascii_ii; }\n+short ebcdic_ii[] = { 0x89D3, 0xE3E3, 0x8593, 0x95C5, 0x89C4, 0x9581, 0 };\n+short ebcdic_mm[] = { 0xC2C9, 0xC785, 0x95C4, 0x8981, 0x95E2, 0xA8E2, 0 };\n+void _ebcdic () { char *s = (char *) ebcdic_mm; s = (char *) ebcdic_ii; }\n+int\n+main ()\n+{\n+ _ascii (); _ebcdic ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  if grep BIGenDianSyS conftest.$ac_objext >/dev/null ; then\n+  ac_cv_c_bigendian=yes\n+fi\n+if grep LiTTleEnDian conftest.$ac_objext >/dev/null ; then\n+  if test \"$ac_cv_c_bigendian\" = unknown; then\n+    ac_cv_c_bigendian=no\n+  else\n+    # finding both strings is unlikely to happen, but who knows?\n+    ac_cv_c_bigendian=unknown\n+  fi\n+fi\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+int\n+main ()\n+{\n+  /* Are we little or big endian?  From Harbison&Steele.  */\n+  union\n+  {\n+    long l;\n+    char c[sizeof (long)];\n+  } u;\n+  u.l = 1;\n+  exit (u.c[sizeof (long) - 1] == 1);\n+}\n+_ACEOF\n+rm -f conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_c_bigendian=no\n+else\n+  echo \"$as_me: program exited with status $ac_status\" >&5\n+echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+( exit $ac_status )\n+ac_cv_c_bigendian=yes\n+fi\n+rm -f core *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext\n+fi\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_c_bigendian\" >&5\n+echo \"${ECHO_T}$ac_cv_c_bigendian\" >&6\n+case $ac_cv_c_bigendian in\n+  yes)\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define WORDS_BIGENDIAN 1\n+_ACEOF\n+ ;;\n+  no)\n+     ;;\n+  *)\n+    { { echo \"$as_me:$LINENO: error: unknown endianness\n+presetting ac_cv_c_bigendian=no (or yes) will help\" >&5\n+echo \"$as_me: error: unknown endianness\n+presetting ac_cv_c_bigendian=no (or yes) will help\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+esac\n+\n+\n # Output.\n \n           ac_config_headers=\"$ac_config_headers config.h:config.in\"\n@@ -7980,6 +8264,7 @@ s,@WERROR@,$WERROR,;t t\n s,@CPP@,$CPP,;t t\n s,@EGREP@,$EGREP,;t t\n s,@MAINT@,$MAINT,;t t\n+s,@enable_decimal_float@,$enable_decimal_float,;t t\n s,@LIBOBJS@,$LIBOBJS,;t t\n s,@LTLIBOBJS@,$LTLIBOBJS,;t t\n CEOF"}, {"sha": "ed56e2c0eda0b5c35b9af7be38b26d98ae270669", "filename": "libdecnumber/configure.ac", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fconfigure.ac?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -71,6 +71,51 @@ else\n fi\n AC_SUBST(MAINT)\n \n+# Default decimal format\n+# If you change the defaults here, be sure to change them in the GCC directory also\n+AC_MSG_CHECKING([for decimal floating point])\n+AC_ARG_ENABLE(decimal-float,\n+[  --enable-decimal-float={no,yes,bid,dpd}\n+\t\t\tenable decimal float extension to C.  Selecting 'bid'\n+\t\t\tor 'dpd' choses which decimal floating point format\n+\t\t\tto use],\n+[\n+  case $enable_decimal_float in\n+    yes | no | bid | dpd) ;;\n+    *) AC_MSG_ERROR(['$enable_decimal_float' is an invalid value for --enable-decimal-float.\n+Valid choices are 'yes', 'bid', 'dpd', and 'no'.]) ;;\n+  esac\n+],\n+[\n+  case $target in\n+    powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux*)\n+      enable_decimal_float=yes\n+      ;;\n+    *)\n+      enable_decimal_float=no\n+      ;;\n+  esac\n+])\n+\n+# x86's use BID format instead of DPD\n+# In theory --enable-decimal-float=no should not compile anything\n+# For the sake of simplicity, just use the default format in this directory\n+if test x$enable_decimal_float = xyes -o x$enable_decimal_float = xno; then\n+  case $target in\n+    i?86*-*-linux* | x86_64*-*-linux*)\n+      enable_decimal_float=bid\n+      ;;\n+    *)\n+      enable_decimal_float=dpd\n+      ;;\n+  esac\n+fi\n+\n+AC_MSG_RESULT($enable_decimal_float)\n+AC_SUBST(enable_decimal_float)\n+\n+AC_C_BIGENDIAN\n+\n # Output.\n \n AC_CONFIG_HEADERS(config.h:config.in, [echo timestamp > stamp-h1])"}, {"sha": "92b4f618eff3cb487a9f612e4235e9b39b4bcd56", "filename": "libdecnumber/dpd/decimal128.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdpd%2Fdecimal128.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "previous_filename": "libdecnumber/decimal128.c"}, {"sha": "a6bc87bb4a3ac39df249796bd7d3e0a042e1ee16", "filename": "libdecnumber/dpd/decimal128.h", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdpd%2Fdecimal128.h?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -90,6 +90,12 @@ typedef struct\n #define decimal128SetSign(d, b) {                                   \\\n     (d)->bytes[0]|=((unsigned)(b)<<7);}\n \n+  /* Clear sign */\n+#define decimal128ClearSign(d) {(d)->bytes[0]&=~0x80;}\n+\n+  /* Flip sign */\n+#define decimal128FlipSign(d) {(d)->bytes[0]^=0x80;}\n+\n   /* Set exponent continuation [does not apply bias] */\n   /* This assumes range has been checked and exponent previously 0; */\n   /* type of exponent must be unsigned */\n@@ -103,11 +109,13 @@ typedef struct\n   /* ------------------------------------------------------------------ */\n \n #ifdef IN_LIBGCC2\n+#ifndef decimal128FromString\n #define decimal128FromString __decimal128FromString\n #define decimal128ToString __decimal128ToString\n #define decimal128ToEngString __decimal128ToEngString\n #define decimal128FromNumber __decimal128FromNumber\n #define decimal128ToNumber __decimal128ToNumber\n+#endif\n #endif\n \n   /* String conversions */", "previous_filename": "libdecnumber/decimal128.h"}, {"sha": "86912864c9f7d2df15e32fa2557373c696980212", "filename": "libdecnumber/dpd/decimal32.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdpd%2Fdecimal32.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "previous_filename": "libdecnumber/decimal32.c"}, {"sha": "cbe8ab4a65cd134f8e3457884e55ff0853e4fcf8", "filename": "libdecnumber/dpd/decimal32.h", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdpd%2Fdecimal32.h?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -81,6 +81,12 @@ typedef struct\n #define decimal32SetSign(d, b) {                                    \\\n     (d)->bytes[0]|=((unsigned)(b)<<7);}\n \n+  /* Clear sign */\n+#define decimal32ClearSign(d) {(d)->bytes[0]&=~0x80;}\n+\n+  /* Flip sign */\n+#define decimal32FlipSign(d) {(d)->bytes[0]^=0x80;}\n+\n   /* Set exponent continuation [does not apply bias] */\n   /* This assumes range has been checked and exponent previously 0; */\n   /* type of exponent must be unsigned */\n@@ -93,12 +99,14 @@ typedef struct\n   /* ------------------------------------------------------------------ */\n \n #ifdef IN_LIBGCC2\n+#ifndef decimal32FromString\n #define decimal32FromString __decimal32FromString\n #define decimal32ToString __decimal32ToString\n #define decimal32ToEngString __decimal32ToEngString\n #define decimal32FromNumber __decimal32FromNumber\n #define decimal32ToNumber __decimal32ToNumber\n #endif\n+#endif\n \n /* String conversions.  */\n decimal32 *decimal32FromString (decimal32 *, const char *, decContext *);", "previous_filename": "libdecnumber/decimal32.h"}, {"sha": "c1c1c7c9b09c95ddcf2992779816e0dcbcb4c380", "filename": "libdecnumber/dpd/decimal64.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdpd%2Fdecimal64.c?ref=79b87c74d764bd42703818289685e48996b54eb8", "previous_filename": "libdecnumber/decimal64.c"}, {"sha": "fb7339512dcaaaea6c569408a63e876a09481fe9", "filename": "libdecnumber/dpd/decimal64.h", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libdecnumber%2Fdpd%2Fdecimal64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libdecnumber%2Fdpd%2Fdecimal64.h?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -85,6 +85,12 @@ typedef struct\n #define decimal64SetSign(d, b) {                                    \\\n     (d)->bytes[0]|=((unsigned)(b)<<7);}\n \n+  /* Clear sign */\n+#define decimal64ClearSign(d) {(d)->bytes[0]&=~0x80;}\n+\n+  /* Flip sign */\n+#define decimal64FlipSign(d) {(d)->bytes[0]^=0x80;}\n+\n   /* Set exponent continuation [does not apply bias] */\n   /* This assumes range has been checked and exponent previously 0; type */\n   /* of exponent must be unsigned */\n@@ -97,11 +103,13 @@ typedef struct\n   /* ------------------------------------------------------------------ */\n \n #ifdef IN_LIBGCC2\n+#ifndef decimal64FromString\n #define decimal64FromString __decimal64FromString\n #define decimal64ToString __decimal64ToString\n #define decimal64ToEngString __decimal64ToEngString\n #define decimal64FromNumber __decimal64FromNumber\n #define decimal64ToNumber __decimal64ToNumber\n+#endif\n #endif\n \n   /* String conversions */", "previous_filename": "libdecnumber/decimal64.h"}, {"sha": "4271a4018b586ba6df1e3b6ce49e3b5e77dbd02d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -1,3 +1,18 @@\n+2007-03-23  Michael Meissner  <michael.meissner@amd.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* Makefile.in (enable_decimal_float): New.\n+\t(DECNUMINC): Add\n+\t-I$(srcdir)/../libdecnumber/$(enable_decimal_float).\n+\t(dec-objects): Move decimal32, decimal64 and decimal128 to ...\n+\t(decbits-filenames): This.\n+\t(decbits-objects): New.\n+\t(libgcc-objects): Add $(decbits-objects).\n+\n+\t* configure.ac: Support * --enable-decimal-float={no,yes,bid,dpd}.\n+\tSubstitute enable_decimal_float.\n+\t* configure: Regenerated.\n+\n 2007-03-19  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config.host (cris-*-elf | cris-*-none): Set extra_parts."}, {"sha": "684c80afaed2eca3b454ef6d68a9f3a3e1b08e0c", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -37,6 +37,7 @@ SHELL = @SHELL@\n \n enable_shared = @enable_shared@\n decimal_float = @decimal_float@\n+enable_decimal_float = @enable_decimal_float@\n \n host_noncanonical = @host_noncanonical@\n \n@@ -183,7 +184,13 @@ export slibdir\n \n version := $(shell $(CC) -dumpversion)\n \n-DECNUMINC = -I$(srcdir)/../libdecnumber -I$(MULTIBUILDTOP)../../libdecnumber\n+ifeq ($(decimal_float),yes)\n+DECNUMINC = -I$(srcdir)/../libdecnumber/$(enable_decimal_float) \\\n+\t    -I$(srcdir)/../libdecnumber \\\n+\t    -I$(MULTIBUILDTOP)../../libdecnumber\n+else\n+DECNUMINC =\n+endif\n \n # Specify the directories to be searched for header files.\n # Both . and srcdir are used, in that order,\n@@ -467,22 +474,32 @@ ifneq ($(D32PBIT)$(D64PBIT)$(D128PBIT),)\n dec-filenames += decContext decNumber decExcept decRound decLibrary decUtility\n endif\n \n+dec-objects = $(patsubst %,%$(objext),$(dec-filenames))\n+$(dec-objects): %$(objext): $(srcdir)/../libdecnumber/%.c\n+\t$(gcc_compile) -c $<\n+libgcc-objects += $(dec-objects)\n+\n+decbits-filenames =\n ifneq ($(D32PBIT),)\n-dec-filenames += decimal32\n+decbits-filenames += decimal32\n endif\n \n ifneq ($(D64PBIT),)\n-dec-filenames += decimal64\n+decbits-filenames += decimal64\n endif\n \n ifneq ($(D128PBIT),)\n-dec-filenames += decimal128\n+decbits-filenames += decimal128\n endif\n \n-dec-objects = $(patsubst %,%$(objext),$(dec-filenames))\n-$(dec-objects): %$(objext): $(srcdir)/../libdecnumber/%.c\n+ifeq ($(enable_decimal_float),bid)\n+decbits-filenames += bid2dpd_dpd2bid\n+endif\n+\n+decbits-objects = $(patsubst %,%$(objext),$(decbits-filenames))\n+$(decbits-objects): %$(objext): $(srcdir)/../libdecnumber/$(enable_decimal_float)/%.c\n \t$(gcc_compile) -c $<\n-libgcc-objects += $(dec-objects)\n+libgcc-objects += $(decbits-objects)\n \n # Next build individual support functions.\n ifneq ($(D32PBIT),)"}, {"sha": "492e97686e97ef7c72aeca03d81cec9fa1a7dfc8", "filename": "libgcc/configure", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -272,7 +272,7 @@ PACKAGE_STRING='GNU C Runtime Library 1.0'\n PACKAGE_BUGREPORT=''\n \n ac_unique_file=\"static-object.mk\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libgcc_topdir enable_shared slibdir INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA AWK build build_cpu build_vendor build_os host host_cpu host_vendor host_os host_noncanonical build_libsubdir build_subdir host_subdir target_subdir AR ac_ct_AR LIPO ac_ct_LIPO NM ac_ct_NM RANLIB ac_ct_RANLIB STRIP ac_ct_STRIP LN_S CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CPP decimal_float vis_hide tmake_file extra_parts asm_hidden_op LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libgcc_topdir enable_shared slibdir INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA AWK build build_cpu build_vendor build_os host host_cpu host_vendor host_os host_noncanonical build_libsubdir build_subdir host_subdir target_subdir AR ac_ct_AR LIPO ac_ct_LIPO NM ac_ct_NM RANLIB ac_ct_RANLIB STRIP ac_ct_STRIP LN_S CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CPP decimal_float enable_decimal_float vis_hide tmake_file extra_parts asm_hidden_op LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -811,6 +811,10 @@ Optional Features:\n   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n   --disable-shared        don't provide a shared libgcc\n   --enable-version-specific-runtime-libs    Specify that runtime libraries should be installed in a compiler-specific directory\n+  --enable-decimal-float={no,yes,bid,dpd}\n+\t\t\tenable decimal float extension to C.  Selecting 'bid'\n+\t\t\tor 'dpd' choses which decimal floating point format\n+\t\t\tto use\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -3286,6 +3290,45 @@ echo \"${ECHO_T}$libgcc_cv_dfp\" >&6\n decimal_float=$libgcc_cv_dfp\n \n \n+# Check whether --enable-decimal-float or --disable-decimal-float was given.\n+if test \"${enable_decimal_float+set}\" = set; then\n+  enableval=\"$enable_decimal_float\"\n+\n+  case $enable_decimal_float in\n+    yes | no | bid | dpd) ;;\n+    *) { { echo \"$as_me:$LINENO: error: '$enable_decimal_float' is an invalid value for --enable-decimal-float.\n+Valid choices are 'yes', 'bid', 'dpd', and 'no'.\" >&5\n+echo \"$as_me: error: '$enable_decimal_float' is an invalid value for --enable-decimal-float.\n+Valid choices are 'yes', 'bid', 'dpd', and 'no'.\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+  esac\n+\n+else\n+\n+  case $target in\n+    powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux*)\n+      enable_decimal_float=yes\n+      ;;\n+    *)\n+      enable_decimal_float=no\n+      ;;\n+  esac\n+\n+fi;\n+\n+# x86's use BID format instead of DPD\n+if test x$enable_decimal_float = xyes; then\n+  case $target in\n+    i?86*-*-linux* | x86_64*-*-linux*)\n+      enable_decimal_float=bid\n+      ;;\n+    *)\n+      enable_decimal_float=dpd\n+      ;;\n+  esac\n+fi\n+\n+\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n \n@@ -4039,6 +4082,7 @@ s,@EXEEXT@,$EXEEXT,;t t\n s,@OBJEXT@,$OBJEXT,;t t\n s,@CPP@,$CPP,;t t\n s,@decimal_float@,$decimal_float,;t t\n+s,@enable_decimal_float@,$enable_decimal_float,;t t\n s,@vis_hide@,$vis_hide,;t t\n s,@tmake_file@,$tmake_file,;t t\n s,@extra_parts@,$extra_parts,;t t"}, {"sha": "2e95e31e390bd0cef62fed7e618bd459f222da2d", "filename": "libgcc/configure.ac", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b87c74d764bd42703818289685e48996b54eb8/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b87c74d764bd42703818289685e48996b54eb8/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=79b87c74d764bd42703818289685e48996b54eb8", "patch": "@@ -107,6 +107,42 @@ AC_CACHE_CHECK([whether decimal floating point is supported], [libgcc_cv_dfp],\n decimal_float=$libgcc_cv_dfp\n AC_SUBST(decimal_float)\n \n+AC_ARG_ENABLE(decimal-float,\n+[  --enable-decimal-float={no,yes,bid,dpd}\n+\t\t\tenable decimal float extension to C.  Selecting 'bid'\n+\t\t\tor 'dpd' choses which decimal floating point format\n+\t\t\tto use],\n+[\n+  case $enable_decimal_float in\n+    yes | no | bid | dpd) ;;\n+    *) AC_MSG_ERROR(['$enable_decimal_float' is an invalid value for --enable-decimal-float.\n+Valid choices are 'yes', 'bid', 'dpd', and 'no'.]) ;;\n+  esac\n+],\n+[\n+  case $target in\n+    powerpc*-*-linux* | i?86*-*-linux* | x86_64*-*-linux*)\n+      enable_decimal_float=yes\n+      ;;\n+    *)\n+      enable_decimal_float=no\n+      ;;\n+  esac\n+])\n+\n+# x86's use BID format instead of DPD\n+if test x$enable_decimal_float = xyes; then\n+  case $target in\n+    i?86*-*-linux* | x86_64*-*-linux*)\n+      enable_decimal_float=bid\n+      ;;\n+    *)\n+      enable_decimal_float=dpd\n+      ;;\n+  esac\n+fi\n+AC_SUBST(enable_decimal_float)\n+\n # Collect host-machine-specific information.\n . ${srcdir}/config.host\n "}]}