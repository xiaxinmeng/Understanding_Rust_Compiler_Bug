{"sha": "bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1ZThhN2ZmYzAxMjY3Zjc5ZjdkM2E3MGI5OGEyOWZjNmViNjA0Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-25T19:39:47Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-25T19:39:47Z"}, "message": "class.c (build_vtbl_initializer): Don't use build_vtable_entry.\n\n\t* class.c (build_vtbl_initializer): Don't use build_vtable_entry.\n\t(build_vtable_entry): Remove.\n\t* cp-tree.h (BINFO_VIRTUALS): Expand documentation.\n\t(lang_decl): Add thunks.\n\t(DECL_THUNKS): New macro.\n\t* decl.c (duplicate_decls): Copy it.\n\t* method.c (make_thunk): Simplify, and add thunks to DECL_THUNKS.\n\t* semantics.c (emit_associated_thunks): Simplify.\n\n\t* g++.dg/abi/vthunk2.C: New test.\n\nFrom-SVN: r58536", "tree": {"sha": "bc8ca7b32029d71b1854594ff6c94c1ba702f188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc8ca7b32029d71b1854594ff6c94c1ba702f188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/comments", "author": null, "committer": null, "parents": [{"sha": "f3763a442e854320fd233fd63b7871f301f723be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3763a442e854320fd233fd63b7871f301f723be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3763a442e854320fd233fd63b7871f301f723be"}], "stats": {"total": 244, "additions": 116, "deletions": 128}, "files": [{"sha": "35251df32ead2fda15bb4b9e4342ef185294f4b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "patch": "@@ -1,3 +1,14 @@\n+2002-10-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (build_vtbl_initializer): Don't use build_vtable_entry.\n+\t(build_vtable_entry): Remove.\n+\t* cp-tree.h (BINFO_VIRTUALS): Expand documentation.\n+\t(lang_decl): Add thunks.\n+\t(DECL_THUNKS): New macro.\n+\t* decl.c (duplicate_decls): Copy it.\n+\t* method.c (make_thunk): Simplify, and add thunks to DECL_THUNKS.\n+\t* semantics.c (emit_associated_thunks): Simplify.\n+\t\n 2002-10-24  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR c++/7228"}, {"sha": "a11ad7baf3bfbb94538e80892be569c677adcfff", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "patch": "@@ -103,7 +103,6 @@ varray_type local_classes;\n \n static tree get_vfield_name PARAMS ((tree));\n static void finish_struct_anon PARAMS ((tree));\n-static tree build_vtable_entry PARAMS ((tree, tree, tree));\n static tree get_vtable_name PARAMS ((tree));\n static tree get_basefndecls PARAMS ((tree, tree));\n static int build_primary_vtable PARAMS ((tree, tree));\n@@ -7673,7 +7672,6 @@ build_vtbl_initializer (binfo, orig_binfo, t, rtti_binfo, non_fn_entries_p)\n       tree delta;\n       tree vcall_index;\n       tree fn;\n-      tree pfn;\n       tree init = NULL_TREE;\n       \n       fn = BV_FN (v);\n@@ -7724,15 +7722,13 @@ build_vtbl_initializer (binfo, orig_binfo, t, rtti_binfo, non_fn_entries_p)\n \t     So, we replace these functions with __pure_virtual.  */\n \t  if (DECL_PURE_VIRTUAL_P (fn))\n \t    fn = abort_fndecl;\n-\n+\t  else if (!integer_zerop (delta) || vcall_index)\n+\t    fn = make_thunk (fn, delta, vcall_index);\n \t  /* Take the address of the function, considering it to be of an\n \t     appropriate generic type.  */\n-\t  pfn = build1 (ADDR_EXPR, vfunc_ptr_type_node, fn);\n+\t  init = build1 (ADDR_EXPR, vfunc_ptr_type_node, fn);\n \t  /* The address of a function can't change.  */\n-\t  TREE_CONSTANT (pfn) = 1;\n-\n-\t  /* Enter it in the vtable.  */\n-\t  init = build_vtable_entry (delta, vcall_index, pfn);\n+\t  TREE_CONSTANT (init) = 1;\n \t}\n \n       /* And add it to the chain of initializers.  */\n@@ -8164,33 +8160,3 @@ build_rtti_vtbl_entries (binfo, vid)\n   *vid->last_init = build_tree_list (NULL_TREE, init);\n   vid->last_init = &TREE_CHAIN (*vid->last_init);\n }\n-\n-/* Build an entry in the virtual function table.  DELTA is the offset\n-   for the `this' pointer.  VCALL_INDEX is the vtable index containing\n-   the vcall offset; NULL_TREE if none.  ENTRY is the virtual function\n-   table entry itself.  It's TREE_TYPE must be VFUNC_PTR_TYPE_NODE,\n-   but it may not actually be a virtual function table pointer.  (For\n-   example, it might be the address of the RTTI object, under the new\n-   ABI.)  */\n-\n-static tree\n-build_vtable_entry (delta, vcall_index, entry)\n-     tree delta;\n-     tree vcall_index;\n-     tree entry;\n-{\n-  tree fn = TREE_OPERAND (entry, 0);\n-  \n-  if ((!integer_zerop (delta) || vcall_index != NULL_TREE)\n-      && fn != abort_fndecl)\n-    {\n-      entry = make_thunk (entry, delta, vcall_index);\n-      entry = build1 (ADDR_EXPR, vtable_entry_type, entry);\n-      TREE_READONLY (entry) = 1;\n-      TREE_CONSTANT (entry) = 1;\n-    }\n-#ifdef GATHER_STATISTICS\n-  n_vtable_entries += 1;\n-#endif\n-  return entry;\n-}"}, {"sha": "5b30d390656a10f078b48a8f6b708843047003aa", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "patch": "@@ -121,11 +121,15 @@ struct diagnostic_context;\n      For a FUNCTION_TYPE or METHOD_TYPE, this is TYPE_RAISES_EXCEPTIONS\n \n   BINFO_VIRTUALS\n-     For a binfo, this is a TREE_LIST.  The BV_DELTA of each node\n-     gives the amount by which to adjust the `this' pointer when\n-     calling the function.  If the method is an overriden version of a\n-     base class method, then it is assumed that, prior to adjustment,\n-     the this pointer points to an object of the base class.\n+     For a binfo, this is a TREE_LIST.  There is an entry for each\n+     virtual function declared either in BINFO or its direct and\n+     indirect primary bases.\n+\n+     The BV_DELTA of each node gives the amount by which to adjust the\n+     `this' pointer when calling the function.  If the method is an\n+     overriden version of a base class method, then it is assumed\n+     that, prior to adjustment, the this pointer points to an object\n+     of the base class.\n \n      The BV_VCALL_INDEX of each node, if non-NULL, gives the vtable\n      index of the vcall offset for this entry.  If\n@@ -1766,6 +1770,10 @@ struct lang_decl GTY(())\n \t   non-virtual FUNCTION_DECL, this is DECL_FRIEND_CONTEXT.  */\n \ttree context;\n \t\n+\t/* In a FUNCTION_DECL for which DECL_THUNK_P does not hold, this\n+\t   is DECL_THUNKS.  */\n+\ttree thunks;\n+\n \t/* In a FUNCTION_DECL, this is DECL_CLONED_FUNCTION.  */\n \ttree cloned_function;\n \t\n@@ -2049,6 +2057,11 @@ struct lang_decl GTY(())\n #define DECL_NEEDS_FINAL_OVERRIDER_P(NODE) \\\n   (DECL_LANG_SPECIFIC (NODE)->decl_flags.needs_final_overrider)\n \n+/* The thunks associated with NODE, a FUNCTION_DECL that is not itself\n+   a thunk.  */\n+#define DECL_THUNKS(NODE) \\\n+  (DECL_LANG_SPECIFIC (NODE)->u.f.thunks)\n+\n /* Nonzero if NODE is a thunk, rather than an ordinary function.  */\n #define DECL_THUNK_P(NODE)\t\t\t\\\n   (TREE_CODE (NODE) == FUNCTION_DECL\t\t\\"}, {"sha": "7459c8750ee0e92199b6a6456a9024952b6109de", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "patch": "@@ -3594,9 +3594,12 @@ duplicate_decls (newdecl, olddecl)\n       /* Only functions have DECL_BEFRIENDING_CLASSES.  */\n       if (TREE_CODE (newdecl) == FUNCTION_DECL\n \t  || DECL_FUNCTION_TEMPLATE_P (newdecl))\n-\tDECL_BEFRIENDING_CLASSES (newdecl)\n-\t  = chainon (DECL_BEFRIENDING_CLASSES (newdecl),\n-\t\t     DECL_BEFRIENDING_CLASSES (olddecl));\n+\t{\n+\t  DECL_BEFRIENDING_CLASSES (newdecl)\n+\t    = chainon (DECL_BEFRIENDING_CLASSES (newdecl),\n+\t\t       DECL_BEFRIENDING_CLASSES (olddecl));\n+\t  DECL_THUNKS (newdecl) = DECL_THUNKS (olddecl);\n+\t}\n     }\n \n   if (TREE_CODE (newdecl) == FUNCTION_DECL)"}, {"sha": "8a905b21b75e0c96410ad33f42a4a7f340509a8a", "filename": "gcc/cp/method.c", "status": "modified", "additions": 54, "deletions": 53, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "patch": "@@ -278,10 +278,11 @@ make_thunk (function, delta, vcall_index)\n {\n   tree thunk_id;\n   tree thunk;\n-  tree func_decl;\n   tree vcall_offset;\n   HOST_WIDE_INT d;\n \n+  my_friendly_assert (TREE_CODE (function) == FUNCTION_DECL, 20021025);\n+\n   /* Scale the VCALL_INDEX to be in terms of bytes.  */\n   if (vcall_index)\n     vcall_offset \n@@ -294,59 +295,59 @@ make_thunk (function, delta, vcall_index)\n \n   d = tree_low_cst (delta, 0);\n \n-  if (TREE_CODE (function) != ADDR_EXPR)\n-    abort ();\n-  func_decl = TREE_OPERAND (function, 0);\n-  if (TREE_CODE (func_decl) != FUNCTION_DECL)\n-    abort ();\n+  /* See if we already have the thunk in question.  */\n+  for (thunk = DECL_THUNKS (function); thunk; thunk = TREE_CHAIN (thunk))\n+    if (THUNK_DELTA (thunk) == d\n+\t&& ((THUNK_VCALL_OFFSET (thunk) != NULL_TREE)\n+\t    == (vcall_offset != NULL_TREE))\n+\t&& (THUNK_VCALL_OFFSET (thunk)\n+\t    ? tree_int_cst_equal (THUNK_VCALL_OFFSET (thunk), \n+\t\t\t\t  vcall_offset)\n+\t    : true))\n+      return thunk;\n+\n+  /* All thunks must be created before FUNCTION is actually emitted;\n+     the ABI requires that all thunks be emitted together with the\n+     function to which they transfer control.  */\n+  my_friendly_assert (!TREE_ASM_WRITTEN (function), 20021025);\n+\n+  thunk_id = mangle_thunk (function, delta, vcall_offset);\n+  thunk = build_decl (FUNCTION_DECL, thunk_id, TREE_TYPE (function));\n+  DECL_LANG_SPECIFIC (thunk) = DECL_LANG_SPECIFIC (function);\n+  cxx_dup_lang_specific_decl (function);\n+  SET_DECL_ASSEMBLER_NAME (thunk, thunk_id);\n+  DECL_CONTEXT (thunk) = DECL_CONTEXT (function);\n+  TREE_READONLY (thunk) = TREE_READONLY (function);\n+  TREE_THIS_VOLATILE (thunk) = TREE_THIS_VOLATILE (function);\n+  TREE_PUBLIC (thunk) = TREE_PUBLIC (function);\n+  if (flag_weak)\n+    comdat_linkage (thunk);\n+  SET_DECL_THUNK_P (thunk);\n+  DECL_INITIAL (thunk) = build1 (ADDR_EXPR, vfunc_ptr_type_node, function);\n+  THUNK_DELTA (thunk) = d;\n+  THUNK_VCALL_OFFSET (thunk) = vcall_offset;\n+  /* The thunk itself is not a constructor or destructor, even if\n+     the thing it is thunking to is.  */\n+  DECL_INTERFACE_KNOWN (thunk) = 1;\n+  DECL_NOT_REALLY_EXTERN (thunk) = 1;\n+  DECL_SAVED_FUNCTION_DATA (thunk) = NULL;\n+  DECL_DESTRUCTOR_P (thunk) = 0;\n+  DECL_CONSTRUCTOR_P (thunk) = 0;\n+  /* And neither is it a clone.  */\n+  DECL_CLONED_FUNCTION (thunk) = NULL_TREE;\n+  DECL_EXTERNAL (thunk) = 1;\n+  DECL_ARTIFICIAL (thunk) = 1;\n+  /* Even if this thunk is a member of a local class, we don't\n+     need a static chain.  */\n+  DECL_NO_STATIC_CHAIN (thunk) = 1;\n+  /* The THUNK is not a pending inline, even if the FUNCTION is.  */\n+  DECL_PENDING_INLINE_P (thunk) = 0;\n+  /* Nor has it been deferred.  */\n+  DECL_DEFERRED_FN (thunk) = 0;\n+  /* Add it to the list of thunks associated with FUNCTION.  */\n+  TREE_CHAIN (thunk) = DECL_THUNKS (function);\n+  DECL_THUNKS (function) = thunk;\n \n-  thunk_id = mangle_thunk (TREE_OPERAND (function, 0), \n-\t\t\t   delta, vcall_offset);\n-  thunk = IDENTIFIER_GLOBAL_VALUE (thunk_id);\n-  if (thunk && !DECL_THUNK_P (thunk))\n-    {\n-      error (\"implementation-reserved name `%D' used\", thunk_id);\n-      thunk = NULL_TREE;\n-      SET_IDENTIFIER_GLOBAL_VALUE (thunk_id, thunk);\n-    }\n-  if (thunk == NULL_TREE)\n-    {\n-      thunk = build_decl (FUNCTION_DECL, thunk_id, TREE_TYPE (func_decl));\n-      DECL_LANG_SPECIFIC (thunk) = DECL_LANG_SPECIFIC (func_decl);\n-      cxx_dup_lang_specific_decl (func_decl);\n-      SET_DECL_ASSEMBLER_NAME (thunk, thunk_id);\n-      DECL_CONTEXT (thunk) = DECL_CONTEXT (func_decl);\n-      TREE_READONLY (thunk) = TREE_READONLY (func_decl);\n-      TREE_THIS_VOLATILE (thunk) = TREE_THIS_VOLATILE (func_decl);\n-      TREE_PUBLIC (thunk) = TREE_PUBLIC (func_decl);\n-      if (flag_weak)\n-\tcomdat_linkage (thunk);\n-      SET_DECL_THUNK_P (thunk);\n-      DECL_INITIAL (thunk) = function;\n-      THUNK_DELTA (thunk) = d;\n-      THUNK_VCALL_OFFSET (thunk) = vcall_offset;\n-      /* The thunk itself is not a constructor or destructor, even if\n-         the thing it is thunking to is.  */\n-      DECL_INTERFACE_KNOWN (thunk) = 1;\n-      DECL_NOT_REALLY_EXTERN (thunk) = 1;\n-      DECL_SAVED_FUNCTION_DATA (thunk) = NULL;\n-      DECL_DESTRUCTOR_P (thunk) = 0;\n-      DECL_CONSTRUCTOR_P (thunk) = 0;\n-      /* And neither is it a clone.  */\n-      DECL_CLONED_FUNCTION (thunk) = NULL_TREE;\n-      DECL_EXTERNAL (thunk) = 1;\n-      DECL_ARTIFICIAL (thunk) = 1;\n-      /* Even if this thunk is a member of a local class, we don't\n-\t need a static chain.  */\n-      DECL_NO_STATIC_CHAIN (thunk) = 1;\n-      /* The THUNK is not a pending inline, even if the FUNC_DECL is.  */\n-      DECL_PENDING_INLINE_P (thunk) = 0;\n-      /* Nor has it been deferred.  */\n-      DECL_DEFERRED_FN (thunk) = 0;\n-      /* So that finish_file can write out any thunks that need to be: */\n-      pushdecl_top_level (thunk);\n-      SET_IDENTIFIER_GLOBAL_VALUE (thunk_id, thunk);\n-    }\n   return thunk;\n }\n "}, {"sha": "e2428a916e1e4ec2acd56522e23f20d3b5a514e9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "patch": "@@ -2271,35 +2271,9 @@ emit_associated_thunks (fn)\n      enabling you to output all the thunks with the function itself.  */\n   if (DECL_VIRTUAL_P (fn))\n     {\n-      tree binfo;\n-      tree v;\n-\n-      for (binfo = TYPE_BINFO (DECL_CONTEXT (fn));\n-\t   binfo;\n-\t   binfo = TREE_CHAIN (binfo))\n-\tfor (v = BINFO_VIRTUALS (binfo); v; v = TREE_CHAIN (v))\n-\t  if (BV_FN (v) == fn\n-\t      && (!integer_zerop (BV_DELTA (v))\n-\t\t  || BV_USE_VCALL_INDEX_P (v)))\n-\t    {\n-\t      tree thunk;\n-\t      tree vcall_index;\n-\n-\t      if (BV_USE_VCALL_INDEX_P (v))\n-\t\t{\n-\t\t  vcall_index = BV_VCALL_INDEX (v);\n-\t\t  my_friendly_assert (vcall_index != NULL_TREE, 20000621);\n-\t\t}\n-\t      else\n-\t\tvcall_index = NULL_TREE;\n-\n-\t      thunk = make_thunk (build1 (ADDR_EXPR,\n-\t\t\t\t\t  vfunc_ptr_type_node,\n-\t\t\t\t\t  fn),\n-\t\t\t\t  BV_DELTA (v),\n-\t\t\t\t  vcall_index);\n-\t      use_thunk (thunk, /*emit_p=*/1);\n-\t    }\n+      tree thunk;\n+      for (thunk = DECL_THUNKS (fn); thunk; thunk = TREE_CHAIN (thunk))\n+\tuse_thunk (thunk, /*emit_p=*/1);\n     }\n }\n "}, {"sha": "a073e683dbc160df64b037671d1055796e4d680e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "patch": "@@ -1,3 +1,7 @@\n+2002-10-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/abi/vthunk2.C: New test.\n+\n 2002-10-25  Zack Weinberg  <zack@codesourcery.com>\n \n \t* g++.dg/ext/vla1.C, gcc.dg/vla-2.c: New tests."}, {"sha": "2499749d64c1f19c7319a8d4bfea0bfdb6994310", "filename": "gcc/testsuite/g++.dg/abi/vthunk2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvthunk2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvthunk2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvthunk2.C?ref=bb5e8a7ffc01267f79f7d3a70b98a29fc6eb604c", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target i?86-*-* } }\n+\n+struct c0 {\n+  virtual void f ();\n+};\n+\n+struct c1 : virtual public c0 {\n+};\n+\n+struct c2 : virtual public c0, public c1 {\n+  virtual void f ();\n+};\n+\n+void c2::f () {}\n+\n+// { dg-final { scan-assembler _ZTv0_n12_N2c21fEv } }"}]}