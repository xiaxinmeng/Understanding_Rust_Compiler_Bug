{"sha": "20cef83acca722837e262ac90c4f5fce51559274", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBjZWY4M2FjY2E3MjI4MzdlMjYyYWM5MGM0ZjVmY2U1MTU1OTI3NA==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2008-03-13T07:06:30Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2008-03-13T07:06:30Z"}, "message": "re PR target/35054 (No documentation of  #pragma push_macro(\"macro_name\"))\n\n\tPR 35054\n\t* doc/extend.texi (Structure-Packing Pragmas): Replace \"Win32\"\n\twith the phrase \"Microsoft Windows compilers\".\n\t(Push/Pop Macro Pragmas): New subsection. Document\n\t#pragma push_macro and pragma pop_macro.\n\nFrom-SVN: r133161", "tree": {"sha": "35f3ef1a36b9567d4fd9325681d64d3422394e53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35f3ef1a36b9567d4fd9325681d64d3422394e53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20cef83acca722837e262ac90c4f5fce51559274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20cef83acca722837e262ac90c4f5fce51559274", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20cef83acca722837e262ac90c4f5fce51559274", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20cef83acca722837e262ac90c4f5fce51559274/comments", "author": null, "committer": null, "parents": [{"sha": "5dea0c1939a51ebb53cab4466bd49f3f828f740d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dea0c1939a51ebb53cab4466bd49f3f828f740d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dea0c1939a51ebb53cab4466bd49f3f828f740d"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "98dc171913cd9f384f8cb3bc6667b67d09794b88", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cef83acca722837e262ac90c4f5fce51559274/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cef83acca722837e262ac90c4f5fce51559274/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20cef83acca722837e262ac90c4f5fce51559274", "patch": "@@ -1,3 +1,11 @@\n+2008-03-13  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\tPR 35054\n+\t* doc/extend.texi (Structure-Packing Pragmas): Replace \"Win32\"\n+\twith the phrase \"Microsoft Windows compilers\".\n+\t(Push/Pop Macro Pragmas): New subsection. Document\n+\t#pragma push_macro and pragma pop_macro.\n+\n 2008-03-12  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.c (output_move_double): Prefer LDRD to LDM."}, {"sha": "5dfbbcff83ff2f845a1cd225d86fe30407dd5b77", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20cef83acca722837e262ac90c4f5fce51559274/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20cef83acca722837e262ac90c4f5fce51559274/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=20cef83acca722837e262ac90c4f5fce51559274", "patch": "@@ -10868,6 +10868,7 @@ for further explanation.\n * Weak Pragmas::\n * Diagnostic Pragmas::\n * Visibility Pragmas::\n+* Push/Pop Macro Pragmas::\n @end menu\n \n @node ARM Pragmas\n@@ -11064,11 +11065,11 @@ way of knowing that that happened.)\n @node Structure-Packing Pragmas\n @subsection Structure-Packing Pragmas\n \n-For compatibility with Win32, GCC supports a set of @code{#pragma}\n-directives which change the maximum alignment of members of structures\n-(other than zero-width bitfields), unions, and classes subsequently\n-defined.  The @var{n} value below always is required to be a small power\n-of two and specifies the new alignment in bytes.\n+For compatibility with Microsoft Windows compilers, GCC supports a\n+set of @code{#pragma} directives which change the maximum alignment of\n+members of structures (other than zero-width bitfields), unions, and\n+classes subsequently defined. The @var{n} value below always is required\n+to be a small power of two and specifies the new alignment in bytes.\n \n @enumerate\n @item @code{#pragma pack(@var{n})} simply sets the new alignment.\n@@ -11183,6 +11184,41 @@ member or instantiation, you must use an attribute.\n \n @end table\n \n+\n+@node Push/Pop Macro Pragmas\n+@subsection Push/Pop Macro Pragmas\n+\n+For compatibility with Microsoft Windows compilers, GCC supports\n+@samp{#pragma push_macro(@var{\"macro_name\"})}\n+and @samp{#pragma pop_macro(@var{\"macro_name\"})}.\n+\n+@table @code\n+@item #pragma push_macro(@var{\"macro_name\"})\n+@cindex pragma, push_macro\n+This pragma saves the value of the macro named as @var{macro_name} to\n+the top of the stack for this macro.\n+\n+@item #pragma pop_macro(@var{\"macro_name\"})\n+@cindex pragma, pop_macro\n+This pragma sets the value of the macro named as @var{macro_name} to\n+the value on top of the stack for this macro. If the stack for\n+@var{macro_name} is empty, the value of the macro remains unchanged.\n+@end table\n+\n+For example:\n+\n+@smallexample\n+#define X  1\n+#pragma push_macro(\"X\")\n+#undef X\n+#define X -1\n+#pragma pop_macro(\"X\")\n+int x [X]; \n+@end smallexample\n+\n+In this example, the definition of X as 1 is saved by @code{#pragma\n+push_macro} and restored by @code{#pragma pop_macro}.\n+\n @node Unnamed Fields\n @section Unnamed struct/union fields within structs/unions\n @cindex struct"}]}