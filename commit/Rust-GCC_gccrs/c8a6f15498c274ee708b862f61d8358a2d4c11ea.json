{"sha": "c8a6f15498c274ee708b862f61d8358a2d4c11ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhNmYxNTQ5OGMyNzRlZTcwOGI4NjJmNjFkODM1OGEyZDRjMTFlYQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-06-15T18:37:34Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-06-15T18:37:34Z"}, "message": "tree-flow-inline.h (stmt_ann): Remove use of is_essa_node.\n\n2004-06-15  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-flow-inline.h (stmt_ann): Remove use of is_essa_node.\n\t* tree-dfa.c (create_stmt_ann): Ditto.\n\t* tree-pretty-print.c (dump_generic_node): Remove E* node handling.\n\t* tree-inline.c (estimate_num_insns_1): Ditto.\n\t* tree.c (tree_size): Ditto.\n\t(make_node_stat): Ditto.\n\t(tree_node_structure): Ditto.\n\t(ephi_node_elt_check_failed): Remove.\n\t(is_essa_node): Ditto.\n\t* tree.def (EPHI_NODE): Ditto.\n\t(EEXIT_NODE): Ditto.\n\t(EUSE_NODE): Ditto.\n\t(EKILL_NODE): Ditto.\n\t* tree.h (EREF_NODE_CHECK): Remove.\n\t(EPHI_NODE_ELT_CHECK): Ditto.\n\t(struct tree_eref_common): Ditto.\n\t(struct tree_euse_node): Ditto.\n\t(struct ephi_arg_d): Ditto.\n\t(struct tree_ephi_node): Ditto.\n\t(ephi_node_elt_check_failed): Remove prototype.\n\t(is_essa_node): Ditto.\n\t(enum tree_node_structure_enum): Remove TS_E*_NODE.\n\t(union tree_node): Remove E*_NODE uses.\n\nFrom-SVN: r83196", "tree": {"sha": "d933c91f87d843c7ce6592ba3bd9d2b116fc9938", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d933c91f87d843c7ce6592ba3bd9d2b116fc9938"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8a6f15498c274ee708b862f61d8358a2d4c11ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a6f15498c274ee708b862f61d8358a2d4c11ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a6f15498c274ee708b862f61d8358a2d4c11ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a6f15498c274ee708b862f61d8358a2d4c11ea/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8cfc6aa070047007c18468b54996c116e593642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8cfc6aa070047007c18468b54996c116e593642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8cfc6aa070047007c18468b54996c116e593642"}], "stats": {"total": 350, "additions": 30, "deletions": 320}, "files": [{"sha": "a9cfaae1eaef53ba3918bdaf89ae9a9128968b1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8a6f15498c274ee708b862f61d8358a2d4c11ea", "patch": "@@ -1,3 +1,29 @@\n+2004-06-15  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-flow-inline.h (stmt_ann): Remove use of is_essa_node.\n+\t* tree-dfa.c (create_stmt_ann): Ditto.\n+\t* tree-pretty-print.c (dump_generic_node): Remove E* node handling.\n+\t* tree-inline.c (estimate_num_insns_1): Ditto.\n+\t* tree.c (tree_size): Ditto.\n+\t(make_node_stat): Ditto.\n+\t(tree_node_structure): Ditto.\n+\t(ephi_node_elt_check_failed): Remove.\n+\t(is_essa_node): Ditto.\n+\t* tree.def (EPHI_NODE): Ditto.\n+\t(EEXIT_NODE): Ditto.\n+\t(EUSE_NODE): Ditto.\n+\t(EKILL_NODE): Ditto.\n+\t* tree.h (EREF_NODE_CHECK): Remove.\n+\t(EPHI_NODE_ELT_CHECK): Ditto.\n+\t(struct tree_eref_common): Ditto.\n+\t(struct tree_euse_node): Ditto.\n+\t(struct ephi_arg_d): Ditto.\n+\t(struct tree_ephi_node): Ditto.\n+\t(ephi_node_elt_check_failed): Remove prototype.\n+\t(is_essa_node): Ditto.\n+\t(enum tree_node_structure_enum): Remove TS_E*_NODE.\n+\t(union tree_node): Remove E*_NODE uses.\n+\n 2004-06-15  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* alias.c (record_set, record_base_value, canon_rtx, get_addr,"}, {"sha": "a2b8a698af24926bc0d82e4c0f940a0ef7ffb601", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=c8a6f15498c274ee708b862f61d8358a2d4c11ea", "patch": "@@ -443,7 +443,7 @@ create_stmt_ann (tree t)\n   stmt_ann_t ann;\n \n #if defined ENABLE_CHECKING\n-  if ((!is_gimple_stmt (t) && !is_essa_node (t))\n+  if ((!is_gimple_stmt (t))\n       || (t->common.ann\n \t  && t->common.ann->common.type != STMT_ANN))\n     abort ();"}, {"sha": "5ecaa1d3832c61e40ca28227c37acf352058f878", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=c8a6f15498c274ee708b862f61d8358a2d4c11ea", "patch": "@@ -91,7 +91,7 @@ static inline stmt_ann_t\n stmt_ann (tree t)\n {\n #if defined ENABLE_CHECKING\n-  if (!is_gimple_stmt (t) && !is_essa_node (t))\n+  if (!is_gimple_stmt (t))\n     abort ();\n #endif\n "}, {"sha": "7d8b0db8ea95e37075a39cb6ea058590a0780c59", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=c8a6f15498c274ee708b862f61d8358a2d4c11ea", "patch": "@@ -1238,10 +1238,6 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case RETURN_EXPR:\n     case EXIT_EXPR:\n     case LOOP_EXPR:\n-    case EUSE_NODE:\n-    case EKILL_NODE:\n-    case EPHI_NODE:\n-    case EEXIT_NODE:\n     case PHI_NODE:\n       break;\n     /* We don't account constants for now.  Assume that the cost is amortized"}, {"sha": "691a9202c5fd18cc585c015dd6920906a01503b7", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=c8a6f15498c274ee708b862f61d8358a2d4c11ea", "patch": "@@ -1358,86 +1358,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       pp_character (buffer, '>');\n       break;\n \n-    case EPHI_NODE:\n-      {\n-\tint i;\n-\n-\tpp_string (buffer, \" EPHI (\");\n-\tdump_generic_node (buffer, EREF_NAME (node), spc, flags, false);\n-\tpp_string (buffer, \") \");\n-\tpp_character (buffer, '[');\n-\tpp_string (buffer, \" class:\");\n-\tpp_decimal_int (buffer, EREF_CLASS (node));\n-\tif (EPHI_DOWNSAFE (node))\n-\t  pp_string (buffer, \" downsafe\");\n-\tif (EPHI_CANT_BE_AVAIL (node))\n-\t  pp_string (buffer, \" cant_be_avail\");\n-\tif (EPHI_STOPS (node))\n-\t  pp_string (buffer, \" stops\");\n-\tpp_string (buffer, \" bb:\");\n-\tpp_decimal_int (buffer, bb_for_stmt (node)->index);\n-\tpp_character (buffer, ']');\n-\tif (! (flags & TDF_SLIM))\n-\t  {\n-\t    pp_string (buffer, \" <\");\n-\t    for (i = 0; i < EPHI_NUM_ARGS (node); i++)\n-\t      {\t    \n-\t\tif (EPHI_ARG_DEF (node, i))\n-\t\t  {\n-\t\t    newline_and_indent (buffer, spc + 2);\n-\t\t    pp_string (buffer, \" edge \");\n-\t\t    pp_decimal_int (buffer, EPHI_ARG_EDGE (node, i)->src->index);\n-\t\t    pp_string (buffer, \"->\");\n-\t\t    pp_decimal_int (buffer, EPHI_ARG_EDGE (node, i)->dest->index);\n-\t\t    pp_string (buffer, \" [ \");\n-\t\t    if (EPHI_ARG_HAS_REAL_USE (node, i))\n-\t\t      pp_string (buffer, \" real use\");\n-\t\t    if (EPHI_ARG_INJURED (node, i))\n-\t\t      pp_string (buffer, \" injured\");\n-\t\t    if (EPHI_ARG_STOPS (node, i))\n-\t\t      pp_string (buffer, \" stops\");\n-\t\t    pp_string (buffer, \" ] \");\n-\t\t    pp_string (buffer, \" defined by:\");\n-\t\t    dump_generic_node (buffer, EPHI_ARG_DEF (node, i),\n-\t\t\t\t       spc + 4, flags | TDF_SLIM, false);\n-\t\t  }\n-\t      }\n-\t  }\n-\tpp_string (buffer, \" >\");\n-      }\n-      break;\n-    case EEXIT_NODE:\n-    case EKILL_NODE:\n-      if (TREE_CODE (node) == EEXIT_NODE)\n-\tpp_string (buffer, \"EEXIT (\");\n-      else if (TREE_CODE (node) == EKILL_NODE)\n-\tpp_string (buffer, \"EKILL (\");\n-      dump_generic_node (buffer, EREF_NAME (node), spc, flags, false);\n-      pp_string (buffer, \") \");\n-      pp_character (buffer, '[');\n-      pp_string (buffer, \"class:\");\n-      pp_decimal_int (buffer, EREF_CLASS (node));\n-      pp_string (buffer, \" bb:\");\n-      pp_decimal_int (buffer, bb_for_stmt (node)->index);\n-      pp_character (buffer, ']');\n-      break;\n-    case EUSE_NODE:\n-      pp_string (buffer, \" EUSE (\");\n-      dump_generic_node (buffer, EREF_NAME (node), spc, flags, false);\n-\n-      pp_string (buffer, \") \");\n-      pp_character (buffer, '[');\n-      pp_string (buffer, \"class:\");\n-      pp_decimal_int (buffer, EREF_CLASS (node));\n-      pp_string (buffer, \" phiop:\");\n-      pp_decimal_int (buffer, EUSE_PHIOP (node));\n-      pp_string (buffer, \" bb:\");\n-      pp_decimal_int (buffer, bb_for_stmt (node)->index);\n-      if (EUSE_LVAL (node))\n-\tpp_string (buffer, \" left-occurrence\");\n-      pp_string (buffer, \" ]\");\n-\t\n-      break;\n     case PHI_NODE:\n       {\n \tint i;"}, {"sha": "bb7ed19272cc3e241e6e8066f49a99c75c097682", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c8a6f15498c274ee708b862f61d8358a2d4c11ea", "patch": "@@ -192,15 +192,7 @@ tree_size (tree node)\n \t\t\t\t\t+ (PHI_ARG_CAPACITY (node) - 1) *\n \t\t\t\t\tsizeof (struct phi_arg_d));\n \n-\tcase EPHI_NODE:\t\treturn (sizeof (struct tree_ephi_node)\n-\t\t\t\t\t+ (EPHI_ARG_CAPACITY (node) - 1) *\n-\t\t\t\t\tsizeof (struct ephi_arg_d));\n-\n \tcase SSA_NAME:\t\treturn sizeof (struct tree_ssa_name);\n-\tcase EUSE_NODE:\t\treturn sizeof (struct tree_euse_node);\n-\n-\tcase EKILL_NODE:\n-\tcase EEXIT_NODE: \treturn sizeof (struct tree_eref_common);\n \n \tcase STATEMENT_LIST:\treturn sizeof (struct tree_statement_list);\n \tcase BLOCK:\t\treturn sizeof (struct tree_block);\n@@ -231,9 +223,9 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n #endif\n   struct tree_common ttmp;\n \n-  /* We can't allocate a TREE_VEC, PHI_NODE, EPHI_NODE or STRING_CST\n+  /* We can't allocate a TREE_VEC, PHI_NODE, or STRING_CST\n      without knowing how many elements it will have.  */\n-  if (code == TREE_VEC || code == PHI_NODE || code == EPHI_NODE)\n+  if (code == TREE_VEC || code == PHI_NODE)\n     abort ();\n \n   TREE_SET_CODE ((tree)&ttmp, code);\n@@ -1501,10 +1493,6 @@ tree_node_structure (tree t)\n     case TREE_LIST:\t\treturn TS_LIST;\n     case TREE_VEC:\t\treturn TS_VEC;\n     case PHI_NODE:\t\treturn TS_PHI_NODE;\n-    case EPHI_NODE:\t\treturn TS_EPHI_NODE;\n-    case EUSE_NODE:             return TS_EUSE_NODE;\n-    case EKILL_NODE:            return TS_EREF_NODE;\n-    case EEXIT_NODE:            return TS_EREF_NODE;\n     case SSA_NAME:\t\treturn TS_SSA_NAME;\n     case PLACEHOLDER_EXPR:\treturn TS_COMMON;\n     case STATEMENT_LIST:\treturn TS_STATEMENT_LIST;\n@@ -5174,18 +5162,6 @@ tree_vec_elt_check_failed (int idx, int len, const char *file, int line,\n      idx + 1, len, function, trim_filename (file), line);\n }\n \n-/* Similar to above, except that the check is for the bounds of a EPHI_NODE's\n-   (dynamically sized) vector.  */\n-\n-void\n-ephi_node_elt_check_failed (int idx, int len, const char *file, int line,\n-\t\t\t    const char *function)\n-{\n-  internal_error\n-    (\"tree check: accessed elt %d of ephi_node with %d elts in %s, at %s:%d\",\n-     idx + 1, len, function, trim_filename (file), line);\n-}\n-\n /* Similar to above, except that the check is for the bounds of a PHI_NODE's\n    (dynamically sized) vector.  */\n \n@@ -5556,15 +5532,6 @@ build_empty_stmt (void)\n   return build1 (NOP_EXPR, void_type_node, size_zero_node);\n }\n \n-bool\n-is_essa_node (tree t)\n-{\n-  if (TREE_CODE (t) == EPHI_NODE || TREE_CODE (t) == EUSE_NODE \n-      || TREE_CODE (t) == EEXIT_NODE || TREE_CODE (t) == EKILL_NODE)\n-    return true;\n-  return false;\n-}\n-\n \n /* Return true if T (assumed to be a DECL) must be assigned a memory\n    location.  */"}, {"sha": "5c40c8a163fa4cbd8e540f2ca6f08ab28d2a4cd2", "filename": "gcc/tree.def", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=c8a6f15498c274ee708b862f61d8358a2d4c11ea", "patch": "@@ -866,19 +866,6 @@ DEFTREECODE (ASM_EXPR, \"asm_expr\", 's', 4)\n    nodes to implement SSA versioning.  */\n DEFTREECODE (SSA_NAME, \"ssa_name\", 'x', 0)\n \n-/* Expression SSA real and phi operand occurrence node.  */\n-DEFTREECODE (EUSE_NODE, \"euse_node\", 'x', 0)\n-\n-/* Expression SSA kill occurrence node.  */\n-DEFTREECODE (EKILL_NODE, \"ekill_node\", 'x', 0)\n-\n-/* Expression SSA expression PHI.  Like a regular SSA PHI operator,\n-   but for expressions*/\n-DEFTREECODE (EPHI_NODE, \"ephi_node\", 'x', 0)\n-\n-/* Expression SSA exit occurrence node.  */\n-DEFTREECODE (EEXIT_NODE, \"eexit_node\", 'x', 0)\n-\n /* SSA PHI operator.  PHI_RESULT is the new SSA_NAME node created by\n    the PHI node.  PHI_ARG_LENGTH is the number of arguments.\n    PHI_ARG_ELT returns the Ith tuple <ssa_name, edge> from the"}, {"sha": "618089532744d8bd9b25e6abf38698293b3e84ea", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 186, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a6f15498c274ee708b862f61d8358a2d4c11ea/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c8a6f15498c274ee708b862f61d8358a2d4c11ea", "patch": "@@ -406,16 +406,6 @@ struct tree_common GTY(())\n \t\t\t       __FUNCTION__);\t\t\t\t\\\n     __t; })\n \n-#define EREF_NODE_CHECK(t) __extension__\t\t\t\t\\\n-({  const tree __t = t;\t\t\t\t\t\t\t\\\n-    if (TREE_CODE (__t) != EPHI_NODE                                    \\\n-        && TREE_CODE (__t) != EKILL_NODE\t\t\t\t\\\n-        && TREE_CODE (__t) != EUSE_NODE\t\t\t\t\t\\\n-\t&& TREE_CODE (__t) != EEXIT_NODE)\t\t\t\t\\\n-      tree_check_failed (__t, TREE_CODE (t),\t\t\t\t\\\n-\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\t\\\n-    __t; })\n-\n #define TREE_VEC_ELT_CHECK(T, I) __extension__\t\t\t\t\\\n (*({const tree __t = (T);\t\t\t\t\t\t\\\n     const int __i = (I);\t\t\t\t\t\t\\\n@@ -427,17 +417,6 @@ struct tree_common GTY(())\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n     &__t->vec.a[__i]; }))\n \n-#define EPHI_NODE_ELT_CHECK(t, i) __extension__\t\t\t\t\\\n-(*({const tree __t = t;\t\t\t\t\t\t\t\\\n-    const int __i = (i);\t\t\t\t\t\t\\\n-    if (TREE_CODE (__t) != EPHI_NODE)\t\t\t\t\t\\\n-      tree_check_failed (__t, EPHI_NODE,\t\t\t\t\t\\\n-\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\t\\\n-    if (__i < 0 || __i >= __t->ephi.capacity)\t\t\t\t\\\n-      ephi_node_elt_check_failed (__i, __t->ephi.num_args,\t\t\\\n-\t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n-    &__t->ephi.a[__i]; }))\n-\n #define PHI_NODE_ELT_CHECK(t, i) __extension__\t\t\t\t\\\n (*({const tree __t = t;\t\t\t\t\t\t\t\\\n     const int __i = (i);\t\t\t\t\t\t\\\n@@ -506,10 +485,6 @@ extern void tree_vec_elt_check_failed (int, int, const char *,\n extern void phi_node_elt_check_failed (int, int, const char *,\n \t\t\t\t       int, const char *)\n     ATTRIBUTE_NORETURN;\n-extern void ephi_node_elt_check_failed (int, int, const char *,\n-\t\t\t\t\tint, const char *)\n-    ATTRIBUTE_NORETURN;\n-\n extern void tree_operand_check_failed (int, enum tree_code,\n \t\t\t\t       const char *, int, const char *)\n     ATTRIBUTE_NORETURN;\n@@ -528,9 +503,7 @@ extern void tree_operand_check_failed (int, enum tree_code,\n #define TREE_OPERAND_CHECK(T, I)\t\t((T)->exp.operands[I])\n #define TREE_OPERAND_CHECK_CODE(T, CODE, I)\t((T)->exp.operands[I])\n #define TREE_RTL_OPERAND_CHECK(T, CODE, I)  (*(rtx *) &((T)->exp.operands[I]))\n-#define EREF_NODE_CHECK(T)\t\t(T)\n #define PHI_NODE_ELT_CHECK(T, i)\t((T)->phi.a[i])\n-#define EPHI_NODE_ELT_CHECK(T, i)\t((T)->ephi.a[i])\n \n #endif\n \n@@ -1271,158 +1244,6 @@ struct tree_phi_node GTY(())\n \n struct varray_head_tag;\n \n-struct tree_eref_common GTY(())\n-{\n-  struct tree_common common;\n-  \n-  /* SSAPRE: ID for the EREF. Used only for sorting erefs inside a\n-     block.  */\n-  int id;\n-\n-  /* SSAPRE: Name for the EREF.  Used only for printing.*/\n-  tree name;\n-  \n-  /* SSAPRE: The statement associated with this expression reference.  */\n-  tree stmt;\n-  \n-  /* SSAPRE: True if expression needs to be saved to a temporary.  */\n-  unsigned int save:1;\n-  \n-  /* SSAPRE: True if expression needs to be reloaded from a temporary.  */\n-  unsigned int reload:1;\n-\n-  /* SSAPRE: Redundancy class of expression.  */\n-  unsigned int class;\n-  \n-  /* SSAPRE: Processed flag 1.  */\n-  unsigned int processed:1;\n-\n-  /* SSAPRE: True if expression is injured.  */\n-  unsigned int injured:1;\n-\n-  /* SSAPRE: Temporary assigned to this reference.  */\n-  tree temp;\n-\n-};\n-\n-struct tree_euse_node GTY(())\n-{\n-  struct tree_eref_common common;\n-  \n-  /* SSAPRE: Definition for this use.  */\n-  tree def;\n-  \n-  /* SSAPRE: True if this is an EPHI operand occurrence.  */\n-  unsigned int op_occurrence:1;\n-  \n-  /* SSAPRE: True if expression was inserted as a PHI operand occurrence.  */\n-  unsigned int inserted:1;\n-\n-  /* SSAPRE: True if expression occurs as a lvalue.  */\n-  unsigned int lval:1;\n-};\n-struct ephi_arg_d GTY(())\n-{\n-\n-  /* SSAPRE: True if this phi argument is injured.  */\n-  unsigned int injured:1;\n-\n-  /* SSAPRE: True if there is a real occurrence for this phi argument.  */\n-  unsigned int has_real_use:1;\n-\n-  /* SSAPRE: True if delayed renaming is required on this phi argument.  */\n-  unsigned int delayed_rename:1;\n-  \n-  /* SSAPRE: Processed 2 flag for this phi argument.  */\n-  unsigned int processed2:1;\n-\n-  /* SSAPRE: True if this operand stops forward movement.  */\n-  unsigned int stops:1;\n- \n-  /* SSAPRE: Definition of this phi operand.  */\n-  tree def;\n-  \n-  /* SSAPRE: Phi predecessor for this phi operand.  */\n-  tree pred;\n-\n-  struct edge_def * GTY((skip (\"\"))) e;\n-};\n-struct tree_ephi_node GTY(())\n-{\n-  struct tree_eref_common common;\n-\n-  /* SSAPRE: True if PHI is downsafe.  */\n-  unsigned int downsafe:1;\n-  \n-  /* SSAPRE: True if PHI is cant_be_avail.  */\n-  unsigned int cant_be_avail:1;\n-\n-  /* SSAPRE: True if PHI is dead.  */\n-  unsigned int dead:1;\n-  \n-  /* SSAPRE: True if PHI is pointless or identical to some value.  */\n-  unsigned int identity:1;\n-\n-  /* SSAPRE: True if replacing occurrence known for ESSA minimization.  */\n-  unsigned int rep_occur_known:1;\n-  \n-  /* SSAPRE: True if PHI is pointless, but is also injured.  */\n-  unsigned int ident_injured:1;\n-  \n-  /* SSAPRE: True if this PHI stops forward movement.  */\n-  unsigned int stops:1;\n-\n-  /* SSAPRE: If PHI's replacing occurrence is known, this is it.  */\n-  tree identical_to;\n-\n-  /* SSAPRE: Uses of this ephi.  */\n-  struct varray_head_tag *uses;\n-\n-  int num_args;\n-  int capacity;\n-  struct ephi_arg_d GTY ((length (\"((tree)&%h)->ephi.capacity\"))) a[1];\n-\n-};\n-/* In both EPHI's and EUSES */\n-#define EREF_PROCESSED(NODE)    EREF_NODE_CHECK (NODE)->eref.processed\n-#define EREF_ID(NODE)           EREF_NODE_CHECK (NODE)->eref.id\n-#define EREF_NAME(NODE)         EREF_NODE_CHECK (NODE)->eref.name\n-#define EREF_STMT(NODE)         EREF_NODE_CHECK (NODE)->eref.stmt\n-#define EREF_RELOAD(NODE)       EREF_NODE_CHECK (NODE)->eref.reload\n-#define EREF_SAVE(NODE)         EREF_NODE_CHECK (NODE)->eref.save\n-#define EREF_CLASS(NODE)        EREF_NODE_CHECK (NODE)->eref.class\n-#define EREF_INJURED(NODE)      EREF_NODE_CHECK (NODE)->eref.injured\n-#define EREF_TEMP(NODE)         EREF_NODE_CHECK (NODE)->eref.temp\n-\n-/* In a EUSE_NODE node.  */\n-#define EUSE_DEF(NODE)          EUSE_NODE_CHECK (NODE)->euse.def\n-#define EUSE_PHIOP(NODE)        EUSE_NODE_CHECK (NODE)->euse.op_occurrence\n-#define EUSE_INSERTED(NODE)     EUSE_NODE_CHECK (NODE)->euse.inserted\n-#define EUSE_LVAL(NODE)         EUSE_NODE_CHECK (NODE)->euse.lval\n-\n-/* In a EPHI_NODE node.  */\n-#define EPHI_NUM_ARGS(NODE)\tEPHI_NODE_CHECK (NODE)->ephi.num_args\n-#define EPHI_ARG_CAPACITY(NODE)\tEPHI_NODE_CHECK (NODE)->ephi.capacity\n-#define EPHI_ARG_ELT(NODE, I)\tEPHI_NODE_ELT_CHECK (NODE, I)\n-#define EPHI_ARG_EDGE(NODE, I)\tEPHI_NODE_ELT_CHECK (NODE, I).e\n-#define EPHI_ARG_PRED(NODE, I)  EPHI_NODE_ELT_CHECK (NODE, I).pred\n-#define EPHI_ARG_DEF(NODE, I)\tEPHI_NODE_ELT_CHECK (NODE, I).def\n-#define EPHI_ARG_INJURED(NODE, I) EPHI_NODE_ELT_CHECK (NODE, I).injured\n-#define EPHI_ARG_DELAYED_RENAME(NODE, I) EPHI_NODE_ELT_CHECK (NODE, I).delayed_rename\n-#define EPHI_ARG_HAS_REAL_USE(NODE, I) EPHI_NODE_ELT_CHECK (NODE, I).has_real_use\n-#define EPHI_ARG_STOPS(NODE, I) EPHI_NODE_ELT_CHECK (NODE, I).stops\n-#define EPHI_ARG_PROCESSED2(NODE, I) EPHI_NODE_ELT_CHECK (NODE, I).processed2\n-#define EPHI_IDENTITY(NODE)     EPHI_NODE_CHECK (NODE)->ephi.identity\n-#define EPHI_IDENT_INJURED(NODE) EPHI_NODE_CHECK (NODE)->ephi.ident_injured\n-\n-#define EPHI_REP_OCCUR_KNOWN(NODE) EPHI_NODE_CHECK (NODE)->ephi.rep_occur_known\n-#define EPHI_IDENTICAL_TO(NODE) EPHI_NODE_CHECK (NODE)->ephi.identical_to\n-#define EPHI_DOWNSAFE(NODE)     EPHI_NODE_CHECK (NODE)->ephi.downsafe\n-#define EPHI_CANT_BE_AVAIL(NODE) EPHI_NODE_CHECK (NODE)->ephi.cant_be_avail\n-#define EPHI_DEAD(NODE)         EPHI_NODE_CHECK (NODE)->ephi.dead\n-#define EPHI_USES(NODE)         EPHI_NODE_CHECK (NODE)->ephi.uses\n-#define EPHI_STOPS(NODE)         EPHI_NODE_CHECK (NODE)->ephi.stops\n-\n /* In a BLOCK node.  */\n #define BLOCK_VARS(NODE) (BLOCK_CHECK (NODE)->block.vars)\n #define BLOCK_SUBBLOCKS(NODE) (BLOCK_CHECK (NODE)->block.subblocks)\n@@ -2421,9 +2242,6 @@ enum tree_node_structure_enum {\n   TS_EXP,\n   TS_SSA_NAME,\n   TS_PHI_NODE,\n-  TS_EPHI_NODE,\n-  TS_EUSE_NODE,\n-  TS_EREF_NODE,\n   TS_BLOCK,\n   TS_STATEMENT_LIST,\n   LAST_TS_ENUM\n@@ -2450,9 +2268,6 @@ union tree_node GTY ((ptr_alias (union lang_tree_node),\n   struct tree_exp GTY ((tag (\"TS_EXP\"))) exp;\n   struct tree_ssa_name GTY ((tag (\"TS_SSA_NAME\"))) ssa_name;\n   struct tree_phi_node GTY ((tag (\"TS_PHI_NODE\"))) phi;\n-  struct tree_eref_common GTY ((tag (\"TS_EREF_NODE\"))) eref;\n-  struct tree_ephi_node GTY ((tag (\"TS_EPHI_NODE\"))) ephi;\n-  struct tree_euse_node GTY ((tag (\"TS_EUSE_NODE\"))) euse;\n   struct tree_block GTY ((tag (\"TS_BLOCK\"))) block;\n   struct tree_statement_list GTY ((tag (\"TS_STATEMENT_LIST\"))) stmt_list;\n };\n@@ -3410,7 +3225,6 @@ extern tree get_callee_fndecl (tree);\n extern void change_decl_assembler_name (tree, tree);\n extern int type_num_arguments (tree);\n extern tree lhd_unsave_expr_now (tree);\n-extern bool is_essa_node (tree);\n extern bool associative_tree_code (enum tree_code);\n extern bool commutative_tree_code (enum tree_code);\n "}]}