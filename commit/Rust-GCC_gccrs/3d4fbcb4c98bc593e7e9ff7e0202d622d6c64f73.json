{"sha": "3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q0ZmJjYjRjOThiYzU5M2U3ZTlmZjdlMDIwMmQ2MjJkNmM2NGY3Mw==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2021-02-10T01:18:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-15T10:19:29Z"}, "message": "[Ada] Error when passing subprogram'Access to null-defaulted formal subprogram\n\ngcc/ada/\n\n\t* freeze.adb (Freeze_Subprogram): Don't propagate conventions\n\tIntrinsic or Entry to anonymous access-to-subprogram types\n\tassociated with subprograms having those conventions. Update\n\trelated comment.\n\t* sem_attr.adb (Resolve_Attribute, Attribute_*Access): Remove\n\tspecial-case warning code for cases where a called subprogram\n\thas convention Intrinsic as well as its formal's type (the\n\texpected type for the Access attribute), since this case can no\n\tlonger occur.", "tree": {"sha": "a590dc97271431a21112e108594656786de918e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a590dc97271431a21112e108594656786de918e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d675f3528764107d70cc7e299419156aaa6f1e87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d675f3528764107d70cc7e299419156aaa6f1e87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d675f3528764107d70cc7e299419156aaa6f1e87"}], "stats": {"total": 39, "additions": 9, "deletions": 30}, "files": [{"sha": "48b958d3b467051081746ee3e916d49f6bb345cc", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73", "patch": "@@ -9428,15 +9428,18 @@ package body Freeze is\n       end if;\n \n       --  Ensure that all anonymous access-to-subprogram types inherit the\n-      --  convention of their related subprogram (RM 6.3.1 13.1/3). This is\n+      --  convention of their related subprogram (RM 6.3.1(13.1/5)). This is\n       --  not done for a defaulted convention Ada because those types also\n       --  default to Ada. Convention Protected must not be propagated when\n       --  the subprogram is an entry because this would be illegal. The only\n       --  way to force convention Protected on these kinds of types is to\n-      --  include keyword \"protected\" in the access definition.\n+      --  include keyword \"protected\" in the access definition. Conventions\n+      --  Entry and Intrinsic are also not propagated (specified by AI12-0207).\n \n       if Convention (E) /= Convention_Ada\n         and then Convention (E) /= Convention_Protected\n+        and then Convention (E) /= Convention_Entry\n+        and then Convention (E) /= Convention_Intrinsic\n       then\n          Set_Profile_Convention (E);\n       end if;"}, {"sha": "83f53cdf1fb526c8bebc95f01bcc9fb09255cc66", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=3d4fbcb4c98bc593e7e9ff7e0202d622d6c64f73", "patch": "@@ -10887,34 +10887,10 @@ package body Sem_Attr is\n                   if Convention (Designated_Type (Btyp)) /=\n                      Convention (Entity (P))\n                   then\n-                     --  The rule in 6.3.1 (8) deserves a special error\n-                     --  message.\n-\n-                     if Convention (Btyp) = Convention_Intrinsic\n-                       and then Nkind (Parent (N)) = N_Procedure_Call_Statement\n-                       and then Is_Entity_Name (Name (Parent (N)))\n-                       and then Inside_A_Generic\n-                     then\n-                        declare\n-                           Subp : constant Entity_Id :=\n-                                    Entity (Name (Parent (N)));\n-                        begin\n-                           if Convention (Subp) = Convention_Intrinsic then\n-                              Error_Msg_FE\n-                                (\"?subprogram and its formal access \"\n-                                 & \"parameters have convention Intrinsic\",\n-                                 Parent (N), Subp);\n-                              Error_Msg_N\n-                                (\"actual cannot be access attribute\", N);\n-                           end if;\n-                        end;\n-\n-                     else\n-                        Error_Msg_FE\n-                          (\"subprogram & has wrong convention\", P, Entity (P));\n-                        Error_Msg_Sloc := Sloc (Btyp);\n-                        Error_Msg_FE (\"\\does not match & declared#\", P, Btyp);\n-                     end if;\n+                     Error_Msg_FE\n+                       (\"subprogram & has wrong convention\", P, Entity (P));\n+                     Error_Msg_Sloc := Sloc (Btyp);\n+                     Error_Msg_FE (\"\\does not match & declared#\", P, Btyp);\n \n                      if not Is_Itype (Btyp)\n                        and then not Has_Convention_Pragma (Btyp)"}]}