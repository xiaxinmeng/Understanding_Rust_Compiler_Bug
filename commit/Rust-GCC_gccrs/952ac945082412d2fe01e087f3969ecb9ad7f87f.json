{"sha": "952ac945082412d2fe01e087f3969ecb9ad7f87f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUyYWM5NDUwODI0MTJkMmZlMDFlMDg3ZjM5NjllY2I5YWQ3Zjg3Zg==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2017-06-26T14:29:48Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-06-26T14:29:48Z"}, "message": "rs6000-c.c: Add support for built-in functions vector bool char vec_reve (vector bool char)...\n\ngcc/ChangeLog:\n\n2017-06-26  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c: Add support for built-in functions\n\tvector bool char vec_reve (vector bool char);\n\tvector signed char vec_reve (vector signed char);\n\tvector unsigned char vec_reve (vector unsigned char);\n\tvector bool int vec_reve (vector bool int);\n\tvector signed int vec_reve (vector signed int);\n\tvector unsigned int vec_reve (vector unsigned int);\n\tvector bool long long vec_reve (vector bool long long);\n\tvector signed long long vec_reve (vector signed long long);\n\tvector unsigned long long vec_reve (vector unsigned long long);\n\tvector bool short vec_reve (vector bool short);\n\tvector signed short vec_reve (vector signed short);\n\tvector double vec_reve (vector double);\n\tvector float vec_reve (vector float);\n\t* config/rs6000/rs6000-builtin.def (VREVE_V2DI, VREVE_V4SI,\n\tVREVE_V8HI, VREVE_V16QI, VREVE_V2DF, VREVE_V4SF, VREVE): New builtin.\n\t* config/rs6000/altivec.md (UNSPEC_VREVEV): New UNSPEC.\n\t(altivec_vreve): New pattern.\n\t* config/rs6000/altivec.h (vec_reve): New define.\n\t* doc/extend.texi (vec_rev): Update the built-in documentation file\n\tfor the new built-in functions.\n\ngcc/testsuite/ChangeLog:\n\n2017-06-26  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-3-vec_reve-runnable.c:\n\tAdd new runnable test file for the vec_rev built-ins.\n\nFrom-SVN: r249650", "tree": {"sha": "247b01e4e367ceb087e9e0eaf0f3f5c3d190d088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247b01e4e367ceb087e9e0eaf0f3f5c3d190d088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/952ac945082412d2fe01e087f3969ecb9ad7f87f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952ac945082412d2fe01e087f3969ecb9ad7f87f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/952ac945082412d2fe01e087f3969ecb9ad7f87f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/952ac945082412d2fe01e087f3969ecb9ad7f87f/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "226ab0a80879f9d758ba992b2fe06ac1049e8a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226ab0a80879f9d758ba992b2fe06ac1049e8a98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/226ab0a80879f9d758ba992b2fe06ac1049e8a98"}], "stats": {"total": 502, "additions": 502, "deletions": 0}, "files": [{"sha": "96a0f5c5580f8651be134b565bfd03be6ab4e1d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=952ac945082412d2fe01e087f3969ecb9ad7f87f", "patch": "@@ -1,3 +1,29 @@\n+gcc/ChangeLog:\n+\n+2017-06-26  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c: Add support for built-in functions\n+\tvector bool char vec_reve (vector bool char);\n+\tvector signed char vec_reve (vector signed char);\n+\tvector unsigned char vec_reve (vector unsigned char);\n+\tvector bool int vec_reve (vector bool int);\n+\tvector signed int vec_reve (vector signed int);\n+\tvector unsigned int vec_reve (vector unsigned int);\n+\tvector bool long long vec_reve (vector bool long long);\n+\tvector signed long long vec_reve (vector signed long long);\n+\tvector unsigned long long vec_reve (vector unsigned long long);\n+\tvector bool short vec_reve (vector bool short);\n+\tvector signed short vec_reve (vector signed short);\n+\tvector double vec_reve (vector double);\n+\tvector float vec_reve (vector float);\n+\t* config/rs6000/rs6000-builtin.def (VREVE_V2DI, VREVE_V4SI,\n+\tVREVE_V8HI, VREVE_V16QI, VREVE_V2DF, VREVE_V4SF, VREVE): New builtin.\n+\t* config/rs6000/altivec.md (UNSPEC_VREVEV): New UNSPEC.\n+\t(altivec_vreve): New pattern.\n+\t* config/rs6000/altivec.h (vec_reve): New define.\n+\t* doc/extend.texi (vec_rev): Update the built-in documentation file\n+\tfor the new built-in functions.\n+\n 2016-06-26  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/71815"}, {"sha": "dd68ae10e5a2070308ec17da59a26fa656c14c51", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=952ac945082412d2fe01e087f3969ecb9ad7f87f", "patch": "@@ -142,6 +142,7 @@\n #define vec_madd __builtin_vec_madd\n #define vec_madds __builtin_vec_madds\n #define vec_mtvscr __builtin_vec_mtvscr\n+#define vec_reve __builtin_vec_vreve\n #define vec_vmaxfp __builtin_vec_vmaxfp\n #define vec_vmaxsw __builtin_vec_vmaxsw\n #define vec_vmaxsh __builtin_vec_vmaxsh"}, {"sha": "5629d776959f1a7aa5050f8c098f17131ca68b3c", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=952ac945082412d2fe01e087f3969ecb9ad7f87f", "patch": "@@ -50,6 +50,7 @@\n    UNSPEC_VPACK_UNS_UNS_SAT\n    UNSPEC_VPACK_UNS_UNS_MOD\n    UNSPEC_VPACK_UNS_UNS_MOD_DIRECT\n+   UNSPEC_VREVEV\n    UNSPEC_VSLV4SI\n    UNSPEC_VSLO\n    UNSPEC_VSR\n@@ -3820,6 +3821,31 @@\n   DONE;\n }\")\n \n+;; Vector reverse elements\n+(define_expand \"altivec_vreve<mode>2\"\n+  [(set (match_operand:VEC_A 0 \"register_operand\" \"=v\")\n+\t(unspec:VEC_A [(match_operand:VEC_A 1 \"register_operand\" \"v\")]\n+\t\t      UNSPEC_VREVEV))]\n+  \"TARGET_ALTIVEC\"\n+{\n+  int i, j, size, num_elements;\n+  rtvec v = rtvec_alloc (16);\n+  rtx mask = gen_reg_rtx (V16QImode);\n+\n+  size = GET_MODE_UNIT_SIZE (<MODE>mode);\n+  num_elements = GET_MODE_NUNITS (<MODE>mode);\n+\n+  for (j = 0; j < num_elements; j++)\n+    for (i = 0; i < size; i++)\n+      RTVEC_ELT (v, i + j * size)\n+\t= GEN_INT (i + (num_elements - 1 - j) * size);\n+\n+  emit_insn (gen_vec_initv16qi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n+  emit_insn (gen_altivec_vperm_<mode> (operands[0], operands[1],\n+\t     operands[1], mask));\n+  DONE;\n+})\n+\n ;; Vector SIMD PEM v2.06c defines LVLX, LVLXL, LVRX, LVRXL,\n ;; STVLX, STVLXL, STVVRX, STVRXL are available only on Cell.\n (define_insn \"altivec_lvlx\""}, {"sha": "0e7621cf1ca3a952c179d4c2643d0f6205b2da23", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=952ac945082412d2fe01e087f3969ecb9ad7f87f", "patch": "@@ -1134,6 +1134,13 @@ BU_ALTIVEC_1 (VUPKLSB,\t      \"vupklsb\",\tCONST,\taltivec_vupklsb)\n BU_ALTIVEC_1 (VUPKLPX,\t      \"vupklpx\",\tCONST,\taltivec_vupklpx)\n BU_ALTIVEC_1 (VUPKLSH,\t      \"vupklsh\",\tCONST,\taltivec_vupklsh)\n \n+BU_ALTIVEC_1 (VREVE_V2DI,      \"vreve_v2di\", CONST,  altivec_vrevev2di2)\n+BU_ALTIVEC_1 (VREVE_V4SI,      \"vreve_v4si\", CONST,  altivec_vrevev4si2)\n+BU_ALTIVEC_1 (VREVE_V8HI,      \"vreve_v8hi\", CONST,  altivec_vrevev8hi2)\n+BU_ALTIVEC_1 (VREVE_V16QI,     \"vreve_v16qi\", CONST, altivec_vrevev16qi2)\n+BU_ALTIVEC_1 (VREVE_V2DF,      \"vreve_v2df\", CONST,  altivec_vrevev2df2)\n+BU_ALTIVEC_1 (VREVE_V4SF,      \"vreve_v4sf\", CONST,  altivec_vrevev4sf2)\n+\n BU_ALTIVEC_1 (FLOAT_V4SI_V4SF,    \"float_sisf\",\t    FP,\tfloatv4siv4sf2)\n BU_ALTIVEC_1 (UNSFLOAT_V4SI_V4SF, \"uns_float_sisf\", FP, floatunsv4siv4sf2)\n BU_ALTIVEC_1 (FIX_V4SF_V4SI,      \"fix_sfsi\",       FP, fix_truncv4sfv4si2)\n@@ -1422,6 +1429,8 @@ BU_ALTIVEC_OVERLOAD_1 (VUPKLPX,\t   \"vupklpx\")\n BU_ALTIVEC_OVERLOAD_1 (VUPKLSB,\t   \"vupklsb\")\n BU_ALTIVEC_OVERLOAD_1 (VUPKLSH,\t   \"vupklsh\")\n \n+BU_ALTIVEC_OVERLOAD_1 (VREVE,        \"vreve\")\n+\n /* Overloaded altivec predicates.  */\n BU_ALTIVEC_OVERLOAD_P (VCMPEQ_P,   \"vcmpeq_p\")\n BU_ALTIVEC_OVERLOAD_P (VCMPGT_P,   \"vcmpgt_p\")"}, {"sha": "fdf18fda5536175910275ae43d14e973095c8816", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=952ac945082412d2fe01e087f3969ecb9ad7f87f", "patch": "@@ -5521,6 +5521,35 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_REVB, P9V_BUILTIN_XXBRH_V8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n \n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V2DI,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V4SI,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V8HI,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V16QI,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0, 0 },\n+  { ALTIVEC_BUILTIN_VEC_VREVE, ALTIVEC_BUILTIN_VREVE_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n+\n   /* Crypto builtins.  */\n   { CRYPTO_BUILTIN_VPERMXOR, CRYPTO_BUILTIN_VPERMXOR_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,"}, {"sha": "7f5191da92008782e9a32aa495d2e32dd08d4d63", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=952ac945082412d2fe01e087f3969ecb9ad7f87f", "patch": "@@ -16558,6 +16558,19 @@ vector bool char vec_perm (vector bool char,\n \n vector float vec_re (vector float);\n \n+vector bool char vec_reve (vector bool char);\n+vector signed char vec_reve (vector signed char);\n+vector unsigned char vec_reve (vector unsigned char);\n+vector bool int vec_reve (vector bool int);\n+vector signed int vec_reve (vector signed int);\n+vector unsigned int vec_reve (vector unsigned int);\n+vector bool long long vec_reve (vector bool long long);\n+vector signed long long vec_reve (vector signed long long);\n+vector unsigned long long vec_reve (vector unsigned long long);\n+vector bool short vec_reve (vector bool short);\n+vector signed short vec_reve (vector signed short);\n+vector unsigned short vec_reve (vector unsigned short);\n+\n vector signed char vec_rl (vector signed char,\n                            vector unsigned char);\n vector unsigned char vec_rl (vector unsigned char,"}, {"sha": "8b1d5af941d53f78f68b66d97f4f12ddc0ae8e16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=952ac945082412d2fe01e087f3969ecb9ad7f87f", "patch": "@@ -1,3 +1,8 @@\n+2017-06-26  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-3-vec_reve-runnable.c:\n+\tAdd new runnable test file for the vec_rev built-ins.\n+\n 2016-06-26  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR/tree-optimization 71815"}, {"sha": "9c05de0a1a9ad0bf8314019e266752506ea61fae", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-vec_reve-runnable.c", "status": "added", "additions": 393, "deletions": 0, "changes": 393, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-vec_reve-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/952ac945082412d2fe01e087f3969ecb9ad7f87f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-vec_reve-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-vec_reve-runnable.c?ref=952ac945082412d2fe01e087f3969ecb9ad7f87f", "patch": "@@ -0,0 +1,393 @@\n+/* { dg-do run { target { powerpc*-*-linux* } } } */\n+/* { dg-options \"-O2\" } */\n+\n+\n+#include <altivec.h> // vector\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define VBC   0\n+#define VSC   1\n+#define VUC   2\n+#define VBS   3\n+#define VSS   4\n+#define VUS   5\n+#define VBI   6\n+#define VI    7\n+#define VUI   8\n+#define VLLB  9\n+#define VLLI  10\n+#define VLLUI 11\n+#define VF    12\n+#define VD    13\n+\n+union vector_value\n+{\n+  vector bool char vbc;\n+  vector signed char vsc;\n+  vector unsigned char vuc;\n+  vector bool short vbs;\n+  vector signed short vss;\n+  vector unsigned short vus;\n+  vector bool int vbi;\n+  vector signed int vi;\n+  vector unsigned int vui;\n+  vector bool long long vllb;\n+  vector long long signed int vlli;\n+  vector long long unsigned int vllui;\n+  vector float vf;\n+  vector double vd;\n+} vec_element;\n+\n+struct vector_struct\n+{\n+  int vector_id;\n+  int element_size;  // element size in bytes\n+  union vector_value vec;\n+} vec;\n+\n+void abort (void);\n+\n+void test_results(struct vector_struct *vec_result,\n+\t\t  struct vector_struct *vec_expected)\n+{\n+  int i;\n+  int num_elements;\n+  if (vec_result->element_size != vec_expected->element_size)\n+#ifdef DEBUG\n+    printf(\"vec_result->element_size != vec_expected->element_size\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  if (vec_result->vector_id != vec_expected->vector_id)\n+#ifdef DEBUG\n+    printf(\"vec_result->vector_id != vec_expected->vector_id\\n\");\n+#else\n+    abort();\n+#endif\n+\n+   num_elements = 16 / vec_result->element_size;\n+\n+  for (i = 0; i<num_elements; i++) {\n+    switch (vec_result->vector_id) {\n+      case VBC:\n+\tif (vec_result->vec.vbc[i] != vec_expected->vec.vbc[i])\n+\t  {\n+#ifdef DEBUG\n+\t     printf(\"vec_result->vec.vbc[%d] (%d) != \",\n+\t\t    i, vec_result->vec.vbc[i]);\n+\t     printf(\"vec_expected->vec.vbc[%d] (%d)\\n\",\n+\t\t    i, vec_expected->vec.vbc[i]);\n+#else\n+\t     abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VSC:\n+\tif (vec_result->vec.vsc[i] != vec_expected->vec.vsc[i])\n+\t  {\n+#ifdef DEBUG\n+\t     printf(\"vec_result->vec.vsc[%d] (%d) != \",\n+\t\t    i, vec_result->vec.vsc[i]);\n+\t     printf(\"vec_expected->vec.vsc[%d] (%d)\\n\",\n+\t\t    i, vec_expected->vec.vsc[i]);\n+#else\n+\t     abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VUC:\n+\tif (vec_result->vec.vuc[i] != vec_expected->vec.vuc[i])\n+\t  {\n+#ifdef DEBUG\n+\t     printf(\"vec_result->vec.vuc[%d] (%d) != \",\n+\t\t    i, vec_result->vec.vuc[i]);\n+\t     printf(\"vec_expected->vec.vuc[%d] (%d)\\n\",\n+\t\t    i, vec_expected->vec.vuc[i]);\n+#else\n+\t     abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VBS:\n+\tif (vec_result->vec.vbs[i] != vec_expected->vec.vbs[i])\n+\t  {\n+#ifdef DEBUG\n+\t     printf(\"vec_result->vec.vbs[%d] (%d) != \",\n+\t\t    i, vec_result->vec.vbs[i]);\n+\t     printf(\"vec_expected->vec.vbs[%d] (%d)\\n\",\n+\t\t    i, vec_expected->vec.vbs[i]);\n+#else\n+\t    abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VSS:\n+\tif (vec_result->vec.vss[i] != vec_expected->vec.vss[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf(\"vec_result->vec.vss[%d] (%d) != \",\n+\t\t    i, vec_result->vec.vss[i]);\n+\t    printf(\"vec_expected->vec.vss[%d] (%d)\\n\",\n+\t\t    i, vec_expected->vec.vss[i]);\n+#else\n+\t    abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VUS:\n+\tif (vec_result->vec.vus[i] != vec_expected->vec.vus[i])\n+\t  {\n+#ifdef DEBUG\n+\t     printf(\"vec_result->vec.vus[%d] (%d) != \",\n+\t\t    i, vec_expected->vec.vus[i]);\n+\t     printf(\"vec_expected->vec.vus[%d] (%d)\\n\",\n+\t\t    i, vec_expected->vec.vus[i]);\n+#else\n+\t     abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VBI:\n+\tif (vec_result->vec.vbi[i] != vec_expected->vec.vbi[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf(\"vec_result->vec.vbi[%d] (%d) != \",\n+\t\t   i, vec_result->vec.vbi[i]);\n+\t    printf(\"vec_expected->vec.vbi[%d] (%d)\\n\",\n+\t\t   i, vec_expected->vec.vbi[i]);\n+#else\n+\t    abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VI:\n+\tif (vec_result->vec.vi[i] != vec_expected->vec.vi[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf(\"vec_result->vec.vi[%d] (%d) != \",\n+\t\t   i, vec_result->vec.vi[i]);\n+\t    printf(\"vec_expected->vec.vi[%d] (%d)\\n\",\n+\t\t   i, vec_expected->vec.vi[i]);\n+#else\n+\t    abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VUI:\n+\tif (vec_result->vec.vui[i] != vec_expected->vec.vui[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf(\"vec_result->vec.vui[%d] (%u) != \",\n+\t\t   i, vec_result->vec.vui[i]);\n+\t    printf(\"vec_expected->vec.vui[%u] (%d)\\n\",\n+\t\t   i, vec_expected->vec.vui[i]);\n+#else\n+\t    abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VLLB:\n+\tif (vec_result->vec.vllb[i] != vec_expected->vec.vllb[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf(\"vec_result->vec.vllb[%d] (%lld != \",\n+\t\t   i, vec_result->vec.vllb[i]);\n+\t    printf(\"vec_expected->vec.vllb[%lld] (%d)\\n\",\n+\t\t   i, vec_expected->vec.vllb[i]);\n+#else\n+\t    abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VLLI:\n+\tif (vec_result->vec.vlli[i] != vec_expected->vec.vlli[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf(\"vec_result->vec.vlli[%d] (%d) != \",\n+\t\t   i, vec_result->vec.vlli[i]);\n+\t    printf(\"vec_expected->vec.vlli[%d] (%d)\\n\",\n+\t\t   i, vec_expected->vec.vlli[i]);\n+#else\n+\t    abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VLLUI:\n+\tif (vec_result->vec.vllui[i] != vec_expected->vec.vllui[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf(\"vec_result->vec.vllui[%d] (%llu) != \",\n+\t\t   i, vec_result->vec.vllui[i]);\n+\t    printf(\"vec_expected->vec.vllui[%d] (%llu)\\n\",\n+\t\t   i, vec_expected->vec.vllui[i]);\n+#else\n+\t    abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VF:\n+\tif (vec_result->vec.vf[i] != vec_expected->vec.vf[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf(\"vec_result->vec.vf[%d] (%f) != \",\n+\t\t   i, vec_result->vec.vf[i]);\n+\t    printf(\"vec_expected->vec.vf[%d] (%f)\\n\",\n+\t\t   i, vec_expected->vec.vf[i]);\n+#else\n+\t    abort();\n+#endif\n+\t  }\n+\tbreak;\n+\n+      case VD:\n+\tif (vec_result->vec.vd[i] != vec_expected->vec.vd[i])\n+\t  {\n+#ifdef DEBUG\n+\t    printf(\"vec_result->vec.vd[%d] (%f) != \",\n+\t\t   i, vec_result->vec.vd[i]);\n+\t    printf(\"vec_expected->vec.vd[%d] (%f)\\n\",\n+\t\t   i, vec_expected->vec.vd[i]);\n+#else\n+\t    abort();\n+#endif\n+\t  }\n+\t   break;\n+\n+      default:\n+#ifdef DEBUG\n+\tprintf(\"Unknown case.\\n\");\n+#else\n+\tabort();\n+#endif\n+      }\n+   }\n+}\n+\n+int main()\n+{\n+  int i;\n+  struct vector_struct vec_src, vec_expected, vec_result;\n+\n+  vec_src.vec.vbc = (vector bool char){ 0, 1, 0, 0, 1, 1, 0, 0,\n+\t\t\t\t\t0, 1, 1, 1, 0, 0, 0, 0 };\n+  vec_expected.vec.vbc = (vector bool char){ 0, 0, 0, 0, 1, 1, 1, 0,\n+\t\t\t\t\t     0, 0, 1, 1, 0, 0, 1, 0 };\n+  vec_result.element_size = vec_expected.element_size = 1;\n+  vec_result.vector_id = vec_expected.vector_id = VBC;\n+  vec_result.vec.vbc = vec_reve (vec_src.vec.vbc);\n+  test_results(&vec_result, &vec_expected);\n+\n+  vec_src.vec.vsc = (vector signed char){ 0, 1, -2, -3, 4, 5, -6, -7, 8,\n+\t\t\t\t\t  9, -10, -11, 12, 13, -14, -15 };\n+  vec_expected.vec.vsc = (vector signed char){ -15, -14, 13, 12, -11, -10,\n+\t\t\t\t\t       9, 8, -7, -6, 5, 4, -3, -2,\n+\t\t\t\t\t       1, 0 };\n+  vec_result.element_size = vec_expected.element_size = 1;\n+  vec_result.vector_id = vec_expected.vector_id = VSC;\n+  vec_result.vec.vsc = vec_reve (vec_src.vec.vsc);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vuc = (vector unsigned char){ 10, 11, 12, 13, 14, 15, 16, 17,\n+\t\t\t\t\t    18, 19, 20, 21, 22, 23, 24, 25 };\n+  vec_expected.vec.vuc = (vector unsigned char){ 25, 24, 23, 22, 21, 20,\n+\t\t\t\t\t\t 19, 18, 17, 16, 15, 14, 13,\n+\t\t\t\t\t\t 12, 11, 10 };\n+  vec_result.element_size = vec_expected.element_size = 1;\n+  vec_result.vector_id = vec_expected.vector_id = VUC;\n+  vec_result.vec.vuc = vec_reve (vec_src.vec.vuc);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vbs = (vector bool short){ 0, 0, 1, 1, 0, 1, 0, 1 };\n+  vec_expected.vec.vbs = (vector bool short){ 1, 0, 1, 0, 1, 1, 0, 0 };\n+  vec_result.element_size = vec_expected.element_size = 2;\n+  vec_result.vector_id = vec_expected.vector_id = VBS;\n+  vec_result.vec.vbs = vec_reve (vec_src.vec.vbs);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vss = (vector signed short){ -1, -2, 3, 4, -5, -6, 7, 8 };\n+  vec_expected.vec.vss = (vector signed short){ 8, 7, -6, -5, 4, 3, -2, -1 };\n+  vec_result.element_size = vec_expected.element_size = 2;\n+  vec_result.vector_id = vec_expected.vector_id = VSS;\n+  vec_result.vec.vss = vec_reve (vec_src.vec.vss);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vus = (vector unsigned short){ 11, 22, 33, 44, 55, 66, 77, 88 };\n+  vec_expected.vec.vus = (vector unsigned short){ 88, 77, 66, 55,\n+\t\t\t\t\t\t  44, 33, 22, 11 };\n+  vec_result.element_size = vec_expected.element_size = 2;\n+  vec_result.vector_id = vec_expected.vector_id = VUS;\n+  vec_result.vec.vus = vec_reve (vec_src.vec.vus);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vbi = (vector bool int){ 0, 1, 1, 1 };\n+  vec_expected.vec.vbi = (vector bool int){ 1, 1, 1, 0 };\n+  vec_result.element_size = vec_expected.element_size = 4;\n+  vec_result.vector_id = vec_expected.vector_id = VBI;\n+  vec_result.vec.vbi = vec_reve (vec_src.vec.vbi);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vi = (vector signed int){ -1, 3, -5, 1234567 };\n+  vec_expected.vec.vi = (vector signed int){1234567, -5, 3, -1};\n+  vec_result.element_size = vec_expected.element_size = 4;\n+  vec_result.vector_id = vec_expected.vector_id = VI;\n+  vec_result.vec.vi = vec_reve (vec_src.vec.vi);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vui = (vector unsigned int){ 9, 11, 15, 2468013579 };\n+  vec_expected.vec.vui = (vector unsigned int){2468013579, 15, 11, 9};\n+  vec_result.element_size = vec_expected.element_size = 4;\n+  vec_result.vector_id = vec_expected.vector_id = VUI;\n+  vec_result.vec.vui = vec_reve (vec_src.vec.vui);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vllb = (vector bool long long ){ 0, 1 };\n+  vec_expected.vec.vllb = (vector bool long long){1, 0};\n+  vec_result.element_size = vec_expected.element_size = 8;\n+  vec_result.vector_id = vec_expected.vector_id = VLLB;\n+  vec_result.vec.vllb = vec_reve (vec_src.vec.vllb);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vlli = (vector long long int){ -12, -12345678901234 };\n+  vec_expected.vec.vlli = (vector long long int){-12345678901234, -12};\n+  vec_result.element_size = vec_expected.element_size = 8;\n+  vec_result.vector_id = vec_expected.vector_id = VLLI;\n+  vec_result.vec.vlli = vec_reve (vec_src.vec.vlli);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vllui = (vector unsigned long long int){ 102, 9753108642 };\n+  vec_expected.vec.vllui = (vector unsigned long long int){9753108642, 102};\n+  vec_result.element_size = vec_expected.element_size = 8;\n+  vec_result.vector_id = vec_expected.vector_id = VLLUI;\n+  vec_result.vec.vllui = vec_reve (vec_src.vec.vllui);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vf = (vector float){ -21., 3.5, -53., 78. };\n+  vec_expected.vec.vf = (vector float){78., -53, 3.5, -21};\n+  vec_result.element_size = vec_expected.element_size = 4;\n+  vec_result.vector_id = vec_expected.vector_id = VF;\n+  vec_result.vec.vf = vec_reve (vec_src.vec.vf);\n+  test_results (&vec_result, &vec_expected);\n+\n+  vec_src.vec.vd = (vector double){ 34.0, 97.0 };\n+  vec_expected.vec.vd = (vector double){97.0, 34.0};\n+  vec_result.element_size = vec_expected.element_size = 8;\n+  vec_result.vector_id = vec_expected.vector_id = VD;\n+  vec_result.vec.vd = vec_reve (vec_src.vec.vd);\n+  test_results (&vec_result, &vec_expected);\n+}"}]}