{"sha": "ae085ac7b12809cadaf6bfdb18c34f1a177290c1", "node_id": "C_kwDOANBUbNoAKGFlMDg1YWM3YjEyODA5Y2FkYWY2YmZkYjE4YzM0ZjFhMTc3MjkwYzE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-28T13:28:27Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-04-28T13:43:41Z"}, "message": "Remove unused parameter caller from generating Call expressions\n\nWithin const context the fncontext maybe empty which in turn results in a\nsegv for generating const calls which will be evaluated by the const-expr\ncode anyway.\n\nAddresses #1130", "tree": {"sha": "664659586e7c79d2fd8e28d7e1c1458530a4be22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/664659586e7c79d2fd8e28d7e1c1458530a4be22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae085ac7b12809cadaf6bfdb18c34f1a177290c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae085ac7b12809cadaf6bfdb18c34f1a177290c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae085ac7b12809cadaf6bfdb18c34f1a177290c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae085ac7b12809cadaf6bfdb18c34f1a177290c1/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ada076b9324982fd6f49aea6456e99613e394a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ada076b9324982fd6f49aea6456e99613e394a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ada076b9324982fd6f49aea6456e99613e394a8"}], "stats": {"total": 35, "additions": 13, "deletions": 22}, "files": [{"sha": "edeea8d2fbdc31ff45ffae34bbbb2700c6e9a0da", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae085ac7b12809cadaf6bfdb18c34f1a177290c1/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae085ac7b12809cadaf6bfdb18c34f1a177290c1/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=ae085ac7b12809cadaf6bfdb18c34f1a177290c1", "patch": "@@ -497,10 +497,8 @@ CompileExpr::visit (HIR::CallExpr &expr)\n \n   // must be a call to a function\n   auto fn_address = CompileExpr::Compile (expr.get_fnexpr (), ctx);\n-  auto fncontext = ctx->peek_fn ();\n-  translated\n-    = ctx->get_backend ()->call_expression (fncontext.fndecl, fn_address, args,\n-\t\t\t\t\t    nullptr, expr.get_locus ());\n+  translated = ctx->get_backend ()->call_expression (fn_address, args, nullptr,\n+\t\t\t\t\t\t     expr.get_locus ());\n }\n \n void\n@@ -610,10 +608,8 @@ CompileExpr::visit (HIR::MethodCallExpr &expr)\n       args.push_back (rvalue);\n     }\n \n-  auto fncontext = ctx->peek_fn ();\n-  translated\n-    = ctx->get_backend ()->call_expression (fncontext.fndecl, fn_expr, args,\n-\t\t\t\t\t    nullptr, expr.get_locus ());\n+  translated = ctx->get_backend ()->call_expression (fn_expr, args, nullptr,\n+\t\t\t\t\t\t     expr.get_locus ());\n }\n \n tree\n@@ -696,8 +692,8 @@ CompileExpr::compile_dyn_dispatch_call (const TyTy::DynamicObjectType *dyn,\n   tree fn_expr\n     = ctx->get_backend ()->var_expression (fn_convert_expr_tmp, expr_locus);\n \n-  return ctx->get_backend ()->call_expression (fnctx.fndecl, fn_expr, args,\n-\t\t\t\t\t       nullptr, expr_locus);\n+  return ctx->get_backend ()->call_expression (fn_expr, args, nullptr,\n+\t\t\t\t\t       expr_locus);\n }\n \n tree\n@@ -866,9 +862,8 @@ CompileExpr::resolve_operator_overload (\n   if (rhs != nullptr)\t // can be null for negation_expr (unary ones)\n     args.push_back (rhs);\n \n-  auto fncontext = ctx->peek_fn ();\n-  return ctx->get_backend ()->call_expression (fncontext.fndecl, fn_expr, args,\n-\t\t\t\t\t       nullptr, expr.get_locus ());\n+  return ctx->get_backend ()->call_expression (fn_expr, args, nullptr,\n+\t\t\t\t\t       expr.get_locus ());\n }\n \n tree\n@@ -1289,10 +1284,8 @@ HIRCompileBase::resolve_deref_adjustment (Resolver::Adjustment &adjustment,\n     }\n \n   // make the call\n-  auto fncontext = ctx->peek_fn ();\n-  return ctx->get_backend ()->call_expression (fncontext.fndecl, fn_address,\n-\t\t\t\t\t       {adjusted_argument}, nullptr,\n-\t\t\t\t\t       locus);\n+  return ctx->get_backend ()->call_expression (fn_address, {adjusted_argument},\n+\t\t\t\t\t       nullptr, locus);\n }\n \n tree"}, {"sha": "6d631a0365ac17ebc72dd5ff97617ee0b8a97a18", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae085ac7b12809cadaf6bfdb18c34f1a177290c1/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae085ac7b12809cadaf6bfdb18c34f1a177290c1/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=ae085ac7b12809cadaf6bfdb18c34f1a177290c1", "patch": "@@ -285,8 +285,7 @@ class Backend\n \n   // Create an expression for a call to FN with ARGS, taking place within\n   // caller CALLER.\n-  virtual tree call_expression (tree caller, tree fn,\n-\t\t\t\tconst std::vector<tree> &args,\n+  virtual tree call_expression (tree fn, const std::vector<tree> &args,\n \t\t\t\ttree static_chain, Location)\n     = 0;\n "}, {"sha": "445cb0da8766d2027cfdbdef085dc770b5cb7ed1", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae085ac7b12809cadaf6bfdb18c34f1a177290c1/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae085ac7b12809cadaf6bfdb18c34f1a177290c1/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=ae085ac7b12809cadaf6bfdb18c34f1a177290c1", "patch": "@@ -250,7 +250,7 @@ class Gcc_backend : public Backend\n \n   tree array_index_expression (tree array, tree index, Location);\n \n-  tree call_expression (tree caller, tree fn, const std::vector<tree> &args,\n+  tree call_expression (tree fn, const std::vector<tree> &args,\n \t\t\ttree static_chain, Location);\n \n   // Statements.\n@@ -1794,8 +1794,7 @@ Gcc_backend::array_index_expression (tree array_tree, tree index_tree,\n \n // Create an expression for a call to FN_EXPR with FN_ARGS.\n tree\n-Gcc_backend::call_expression (tree, // containing fcn for call\n-\t\t\t      tree fn, const std::vector<tree> &fn_args,\n+Gcc_backend::call_expression (tree fn, const std::vector<tree> &fn_args,\n \t\t\t      tree chain_expr, Location location)\n {\n   if (fn == error_mark_node || TREE_TYPE (fn) == error_mark_node)"}]}