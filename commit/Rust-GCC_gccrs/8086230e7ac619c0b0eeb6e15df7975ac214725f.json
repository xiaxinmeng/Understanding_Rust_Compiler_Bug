{"sha": "8086230e7ac619c0b0eeb6e15df7975ac214725f", "node_id": "C_kwDOANBUbNoAKDgwODYyMzBlN2FjNjE5YzBiMGVlYjZlMTVkZjc5NzVhYzIxNDcyNWY", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-02-15T15:33:53Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-05-24T15:18:13Z"}, "message": "amdgcn: Remove LLVM 9 assembler/linker support\n\nThe minimum required LLVM version is now 13.0.1, and is enforced by configure.\n\ngcc/ChangeLog:\n\n\t* config.in: Regenerate.\n\t* config/gcn/gcn-hsa.h (X_FIJI): Delete.\n\t(X_900): Delete.\n\t(X_906): Delete.\n\t(X_908): Delete.\n\t(S_FIJI): Delete.\n\t(S_900): Delete.\n\t(S_906): Delete.\n\t(S_908): Delete.\n\t(NO_XNACK): New macro.\n\t(NO_SRAM_ECC): New macro.\n\t(SRAMOPT): Keep only v4 variant.\n\t(HSACO3_SELECT_OPT): Delete.\n\t(DRIVER_SELF_SPECS): Delete.\n\t(ASM_SPEC): Remove LLVM 9 support.\n\t* config/gcn/gcn-valu.md\n\t(gather<mode>_insn_2offsets<exec>): Remove assembler bug workaround.\n\t(scatter<mode>_insn_2offsets<exec_scatter>): Likewise.\n\t* config/gcn/gcn.cc (output_file_start): Remove LLVM 9 support.\n\t(print_operand_address): Remove assembler bug workaround.\n\t* config/gcn/mkoffload.cc (EF_AMDGPU_XNACK_V3): Delete.\n\t(EF_AMDGPU_SRAM_ECC_V3): Delete.\n\t(SET_XNACK_ON): Delete v3 variants.\n\t(SET_XNACK_OFF): Delete v3 variants.\n\t(TEST_XNACK): Delete v3 variants.\n\t(SET_SRAM_ECC_ON): Delete v3 variants.\n\t(SET_SRAM_ECC_ANY): Delete v3 variants.\n\t(SET_SRAM_ECC_OFF): Delete v3 variants.\n\t(SET_SRAM_ECC_UNSUPPORTED): Delete v3 variants.\n\t(TEST_SRAM_ECC_ANY): Delete v3 variants.\n\t(TEST_SRAM_ECC_ON): Delete v3 variants.\n\t(copy_early_debug_info): Remove v3 support.\n\t(main): Remove v3 support.\n\t* configure: Regenerate.\n\t* configure.ac: Replace all GCN feature checks with a version check.", "tree": {"sha": "5e7722feadf268895131cedb945dc4bcc36ee7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7722feadf268895131cedb945dc4bcc36ee7f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8086230e7ac619c0b0eeb6e15df7975ac214725f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8086230e7ac619c0b0eeb6e15df7975ac214725f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8086230e7ac619c0b0eeb6e15df7975ac214725f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8086230e7ac619c0b0eeb6e15df7975ac214725f/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c5c64566329181b0a234ae9015491c7a727f323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5c64566329181b0a234ae9015491c7a727f323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5c64566329181b0a234ae9015491c7a727f323"}], "stats": {"total": 876, "additions": 64, "deletions": 812}, "files": [{"sha": "6a4f8856c4fb4df7b360d3de9870e494515213db", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 73, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=8086230e7ac619c0b0eeb6e15df7975ac214725f", "patch": "@@ -1331,13 +1331,6 @@\n #endif\n \n \n-/* Define if your Arm assembler permits context-specific feature extensions.\n-   */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GAS_ARM_EXTENDED_ARCH\n-#endif\n-\n-\n /* Define if your assembler supports .balign and .p2align. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GAS_BALIGN_AND_P2ALIGN\n@@ -1457,72 +1450,6 @@\n #endif\n \n \n-/* Define if your assembler has fixed global_load functions. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_ASM_GLOBAL_LOAD_FIXED\n-#endif\n-\n-\n-/* Define if your assembler expects amdgcn_target gfx908+xnack syntax. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_ASM_V3_SYNTAX\n-#endif\n-\n-\n-/* Define if your assembler expects amdgcn_target gfx908:xnack+ syntax. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_ASM_V4_SYNTAX\n-#endif\n-\n-\n-/* Define if your assembler allows -mattr=+sramecc for fiji. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_SRAM_ECC_FIJI\n-#endif\n-\n-\n-/* Define if your assembler allows -mattr=+sramecc for gfx900. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_SRAM_ECC_GFX900\n-#endif\n-\n-\n-/* Define if your assembler allows -mattr=+sramecc for gfx906. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_SRAM_ECC_GFX906\n-#endif\n-\n-\n-/* Define if your assembler allows -mattr=+sramecc for gfx908. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_SRAM_ECC_GFX908\n-#endif\n-\n-\n-/* Define if your assembler allows -mattr=+xnack for fiji. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_XNACK_FIJI\n-#endif\n-\n-\n-/* Define if your assembler allows -mattr=+xnack for gfx900. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_XNACK_GFX900\n-#endif\n-\n-\n-/* Define if your assembler allows -mattr=+xnack for gfx906. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_XNACK_GFX906\n-#endif\n-\n-\n-/* Define if your assembler allows -mattr=+xnack for gfx908. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_GCN_XNACK_GFX908\n-#endif\n-\n-\n /* Define to 1 if you have the `getchar_unlocked' function. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GETCHAR_UNLOCKED\n@@ -2208,6 +2135,12 @@\n #endif\n \n \n+/* Define which stat syscall is able to handle 64bit indodes. */\n+#ifndef USED_FOR_TARGET\n+#undef HOST_STAT_FOR_64BIT_INODES\n+#endif\n+\n+\n /* Define as const if the declaration of iconv() needs const. */\n #ifndef USED_FOR_TARGET\n #undef ICONV_CONST"}, {"sha": "b3079cebb430391cb0cff517c18c2391a61b082b", "filename": "gcc/config/gcn/gcn-hsa.h", "status": "modified", "additions": 5, "deletions": 54, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-hsa.h?ref=8086230e7ac619c0b0eeb6e15df7975ac214725f", "patch": "@@ -75,68 +75,19 @@ extern unsigned int gcn_local_sym_hash (const char *name);\n    supported for gcn.  */\n #define GOMP_SELF_SPECS \"\"\n \n-#ifdef HAVE_GCN_XNACK_FIJI\n-#define X_FIJI\n-#else\n-#define X_FIJI \"!march=*:;march=fiji:;\"\n-#endif\n-#ifdef HAVE_GCN_XNACK_GFX900\n-#define X_900\n-#else\n-#define X_900 \"march=gfx900:;\"\n-#endif\n-#ifdef HAVE_GCN_XNACK_GFX906\n-#define X_906\n-#else\n-#define X_906 \"march=gfx906:;\"\n-#endif\n-#ifdef HAVE_GCN_XNACK_GFX908\n-#define X_908\n-#else\n-#define X_908 \"march=gfx908:;\"\n-#endif\n-\n-/* These targets can't have SRAM-ECC, even if a broken assembler allows it.  */\n-#define S_FIJI \"!march=*:;march=fiji:;\"\n-#define S_900 \"march=gfx900:;\"\n-#define S_906 \"march=gfx906:;\"\n-#ifdef HAVE_GCN_SRAM_ECC_GFX908\n-#define S_908\n-#else\n-#define S_908 \"march=gfx908:;\"\n-#endif\n+#define NO_XNACK \"!march=*:;march=fiji:;\"\n+#define NO_SRAM_ECC \"!march=*:;march=fiji:;march=gfx900:;march=gfx906:;\"\n \n-#ifdef HAVE_GCN_ASM_V3_SYNTAX\n-#define SRAMOPT \"!msram-ecc=off:-mattr=+sram-ecc;:-mattr=-sram-ecc\"\n-#endif\n-#ifdef HAVE_GCN_ASM_V4_SYNTAX\n /* In HSACOv4 no attribute setting means the binary supports \"any\" hardware\n    configuration.  The name of the attribute also changed.  */\n #define SRAMOPT \"msram-ecc=on:-mattr=+sramecc;msram-ecc=off:-mattr=-sramecc\"\n-#endif\n-#if !defined(SRAMOPT) && !defined(IN_LIBGCC2)\n-#error \"No assembler syntax configured\"\n-#endif\n-\n-#ifdef HAVE_GCN_ASM_V4_SYNTAX\n-/* FIJI cards don't seem to support drivers new enough to allow HSACOv4.  */\n-#define HSACO3_SELECT_OPT \\\n-    \"%{!march=*|march=fiji:--amdhsa-code-object-version=3} \"\n-#else\n-#define HSACO3_SELECT_OPT\n-#endif\n-\n-/* These targets can't have SRAM-ECC, even if a broken assembler allows it.  */\n-#define DRIVER_SELF_SPECS \\\n-  \"%{march=fiji|march=gfx900|march=gfx906:%{!msram-ecc=*:-msram-ecc=off}}\"\n \n /* Use LLVM assembler and linker options.  */\n #define ASM_SPEC  \"-triple=amdgcn--amdhsa \"  \\\n \t\t  \"%:last_arg(%{march=*:-mcpu=%*}) \" \\\n-\t\t  HSACO3_SELECT_OPT \\\n-\t\t  \"%{\" X_FIJI X_900 X_906 X_908 \\\n-\t\t     \"mxnack:-mattr=+xnack;:-mattr=-xnack} \" \\\n-\t\t  \"%{\" S_FIJI S_900 S_906 S_908 SRAMOPT \"} \" \\\n+\t\t  \"%{!march=*|march=fiji:--amdhsa-code-object-version=3} \" \\\n+\t\t  \"%{\" NO_XNACK \"mxnack:-mattr=+xnack;:-mattr=-xnack} \" \\\n+\t\t  \"%{\" NO_SRAM_ECC SRAMOPT \"} \" \\\n \t\t  \"-filetype=obj\"\n #define LINK_SPEC \"--pie --export-dynamic\"\n #define LIB_SPEC  \"-lc\""}, {"sha": "abe46201344cbd9345e6bf8d953a019e72e62765", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=8086230e7ac619c0b0eeb6e15df7975ac214725f", "patch": "@@ -823,17 +823,8 @@\n \n     static char buf[200];\n     if (AS_GLOBAL_P (as))\n-      {\n-\t/* Work around assembler bug in which a 64-bit register is expected,\n-\tbut a 32-bit value would be correct.  */\n-\tint reg = REGNO (operands[2]) - FIRST_VGPR_REG;\n-\tif (HAVE_GCN_ASM_GLOBAL_LOAD_FIXED)\n-\t  sprintf (buf, \"global_load%%o0\\t%%0, v%d, %%1 offset:%%3%s\\;\"\n-\t\t\t\"s_waitcnt\\tvmcnt(0)\", reg, glc);\n-\telse\n-\t  sprintf (buf, \"global_load%%o0\\t%%0, v[%d:%d], %%1 offset:%%3%s\\;\"\n-\t\t\t\"s_waitcnt\\tvmcnt(0)\", reg, reg + 1, glc);\n-      }\n+      sprintf (buf, \"global_load%%o0\\t%%0, %%2, %%1 offset:%%3%s\\;\"\n+\t       \"s_waitcnt\\tvmcnt(0)\", glc);\n     else\n       gcc_unreachable ();\n       \n@@ -958,17 +949,7 @@\n \n     static char buf[200];\n     if (AS_GLOBAL_P (as))\n-      {\n-\t/* Work around assembler bug in which a 64-bit register is expected,\n-\tbut a 32-bit value would be correct.  */\n-\tint reg = REGNO (operands[1]) - FIRST_VGPR_REG;\n-\tif (HAVE_GCN_ASM_GLOBAL_LOAD_FIXED)\n-\t  sprintf (buf, \"global_store%%s3\\tv%d, %%3, %%0 offset:%%2%s\",\n-\t\t   reg, glc);\n-\telse\n-\t  sprintf (buf, \"global_store%%s3\\tv[%d:%d], %%3, %%0 offset:%%2%s\",\n-\t\t   reg, reg + 1, glc);\n-      }\n+      sprintf (buf, \"global_store%%s3\\t%%1, %%3, %%0 offset:%%2%s\", glc);\n     else\n       gcc_unreachable ();\n "}, {"sha": "39a7a96650235941e8df3d9dcbfa1f2a85215c90", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 15, "deletions": 61, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=8086230e7ac619c0b0eeb6e15df7975ac214725f", "patch": "@@ -5216,71 +5216,38 @@ gcn_shared_mem_layout (unsigned HOST_WIDE_INT *lo,\n static void\n output_file_start (void)\n {\n+  /* In HSACOv4 no attribute setting means the binary supports \"any\" hardware\n+     configuration.  In GCC binaries, this is true for SRAM ECC, but not\n+     XNACK.  */\n+  const char *xnack = (flag_xnack ? \":xnack+\" : \":xnack-\");\n+  const char *sram_ecc = (flag_sram_ecc == SRAM_ECC_ON ? \":sramecc+\"\n+\t\t\t  : flag_sram_ecc == SRAM_ECC_OFF ? \":sramecc-\"\n+\t\t\t  : \"\");\n+\n   const char *cpu;\n-  bool use_xnack_attr = true;\n-  bool use_sram_attr = true;\n   switch (gcn_arch)\n     {\n     case PROCESSOR_FIJI:\n       cpu = \"gfx803\";\n-#ifndef HAVE_GCN_XNACK_FIJI\n-      use_xnack_attr = false;\n-#endif\n-      use_sram_attr = false;\n+      xnack = \"\";\n+      sram_ecc = \"\";\n       break;\n     case PROCESSOR_VEGA10:\n       cpu = \"gfx900\";\n-#ifndef HAVE_GCN_XNACK_GFX900\n-      use_xnack_attr = false;\n-#endif\n-      use_sram_attr = false;\n+      sram_ecc = \"\";\n       break;\n     case PROCESSOR_VEGA20:\n       cpu = \"gfx906\";\n-#ifndef HAVE_GCN_XNACK_GFX906\n-      use_xnack_attr = false;\n-#endif\n-      use_sram_attr = false;\n+      sram_ecc = \"\";\n       break;\n     case PROCESSOR_GFX908:\n       cpu = \"gfx908\";\n-#ifndef HAVE_GCN_XNACK_GFX908\n-      use_xnack_attr = false;\n-#endif\n-#ifndef HAVE_GCN_SRAM_ECC_GFX908\n-      use_sram_attr = false;\n-#endif\n       break;\n     default: gcc_unreachable ();\n     }\n \n-#if HAVE_GCN_ASM_V3_SYNTAX\n-  const char *xnack = (flag_xnack ? \"+xnack\" : \"\");\n-  const char *sram_ecc = (flag_sram_ecc ? \"+sram-ecc\" : \"\");\n-#endif\n-#if HAVE_GCN_ASM_V4_SYNTAX\n-  /* In HSACOv4 no attribute setting means the binary supports \"any\" hardware\n-     configuration.  In GCC binaries, this is true for SRAM ECC, but not\n-     XNACK.  */\n-  const char *xnack = (flag_xnack ? \":xnack+\" : \":xnack-\");\n-  const char *sram_ecc = (flag_sram_ecc == SRAM_ECC_ON ? \":sramecc+\"\n-\t\t\t  : flag_sram_ecc == SRAM_ECC_OFF ? \":sramecc-\"\n-\t\t\t  : \"\");\n-#endif\n-  if (!use_xnack_attr)\n-    xnack = \"\";\n-  if (!use_sram_attr)\n-    sram_ecc = \"\";\n-\n   fprintf(asm_out_file, \"\\t.amdgcn_target \\\"amdgcn-unknown-amdhsa--%s%s%s\\\"\\n\",\n-\t  cpu,\n-#if HAVE_GCN_ASM_V3_SYNTAX\n-\t  xnack, sram_ecc\n-#endif\n-#ifdef HAVE_GCN_ASM_V4_SYNTAX\n-\t  sram_ecc, xnack\n-#endif\n-\t  );\n+\t  cpu, sram_ecc, xnack);\n }\n \n /* Implement ASM_DECLARE_FUNCTION_NAME via gcn-hsa.h.\n@@ -5724,23 +5691,10 @@ print_operand_address (FILE *file, rtx mem)\n \t      if (vgpr_offset == NULL_RTX)\n \t\t/* In this case, the vector offset is zero, so we use the first\n \t\t   lane of v1, which is initialized to zero.  */\n-\t\t{\n-\t\t  if (HAVE_GCN_ASM_GLOBAL_LOAD_FIXED)\n-\t\t    fprintf (file, \"v1\");\n-\t\t  else\n-\t\t    fprintf (file, \"v[1:2]\");\n-\t\t}\n+\t\tfprintf (file, \"v1\");\n \t      else if (REG_P (vgpr_offset)\n \t\t       && VGPR_REGNO_P (REGNO (vgpr_offset)))\n-\t\t{\n-\t\t  if (HAVE_GCN_ASM_GLOBAL_LOAD_FIXED)\n-\t\t    fprintf (file, \"v%d\",\n-\t\t\t     REGNO (vgpr_offset) - FIRST_VGPR_REG);\n-\t\t  else\n-\t\t    fprintf (file, \"v[%d:%d]\",\n-\t\t\t     REGNO (vgpr_offset) - FIRST_VGPR_REG,\n-\t\t\t     REGNO (vgpr_offset) - FIRST_VGPR_REG + 1);\n-\t\t}\n+\t\tfprintf (file, \"v%d\", REGNO (vgpr_offset) - FIRST_VGPR_REG);\n \t      else\n \t\toutput_operand_lossage (\"bad ADDR_SPACE_GLOBAL address\");\n \t    }"}, {"sha": "e98277c412bb8617918257c2e0adf335adcde5cb", "filename": "gcc/config/gcn/mkoffload.cc", "status": "modified", "additions": 3, "deletions": 62, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fmkoffload.cc?ref=8086230e7ac619c0b0eeb6e15df7975ac214725f", "patch": "@@ -56,9 +56,6 @@\n #undef  EF_AMDGPU_MACH_AMDGCN_GFX908\n #define EF_AMDGPU_MACH_AMDGCN_GFX908 0x30\n \n-#define EF_AMDGPU_XNACK_V3    0x100\n-#define EF_AMDGPU_SRAM_ECC_V3 0x200\n-\n #define EF_AMDGPU_FEATURE_XNACK_V4\t0x300  /* Mask.  */\n #define EF_AMDGPU_FEATURE_XNACK_UNSUPPORTED_V4\t0x000\n #define EF_AMDGPU_FEATURE_XNACK_ANY_V4\t0x100\n@@ -71,19 +68,6 @@\n #define EF_AMDGPU_FEATURE_SRAMECC_OFF_V4\t0x800\n #define EF_AMDGPU_FEATURE_SRAMECC_ON_V4\t\t0xc00\n \n-#ifdef HAVE_GCN_ASM_V3_SYNTAX\n-#define SET_XNACK_ON(VAR) VAR |= EF_AMDGPU_XNACK_V3\n-#define SET_XNACK_OFF(VAR) VAR &= ~EF_AMDGPU_XNACK_V3\n-#define TEST_XNACK(VAR) (VAR & EF_AMDGPU_XNACK_V3)\n-\n-#define SET_SRAM_ECC_ON(VAR) VAR |= EF_AMDGPU_SRAM_ECC_V3\n-#define SET_SRAM_ECC_ANY(VAR) SET_SRAM_ECC_ON (VAR)\n-#define SET_SRAM_ECC_OFF(VAR) VAR &= ~EF_AMDGPU_SRAM_ECC_V3\n-#define SET_SRAM_ECC_UNSUPPORTED(VAR) SET_SRAM_ECC_OFF (VAR)\n-#define TEST_SRAM_ECC_ANY(VAR) 0 /* Not supported.  */\n-#define TEST_SRAM_ECC_ON(VAR) (VAR & EF_AMDGPU_SRAM_ECC_V3)\n-#endif\n-#ifdef HAVE_GCN_ASM_V4_SYNTAX\n #define SET_XNACK_ON(VAR) VAR = ((VAR & ~EF_AMDGPU_FEATURE_XNACK_V4) \\\n \t\t\t\t | EF_AMDGPU_FEATURE_XNACK_ON_V4)\n #define SET_XNACK_OFF(VAR) VAR = ((VAR & ~EF_AMDGPU_FEATURE_XNACK_V4) \\\n@@ -104,7 +88,6 @@\n \t\t\t\t== EF_AMDGPU_FEATURE_SRAMECC_ANY_V4)\n #define TEST_SRAM_ECC_ON(VAR) ((VAR & EF_AMDGPU_FEATURE_SRAMECC_V4) \\\n \t\t\t       == EF_AMDGPU_FEATURE_SRAMECC_ON_V4)\n-#endif\n \n #ifndef R_AMDGPU_NONE\n #define R_AMDGPU_NONE\t\t0\n@@ -130,12 +113,7 @@ static struct obstack files_to_cleanup;\n enum offload_abi offload_abi = OFFLOAD_ABI_UNSET;\n uint32_t elf_arch = EF_AMDGPU_MACH_AMDGCN_GFX803;  // Default GPU architecture.\n uint32_t elf_flags =\n-#ifdef HAVE_GCN_ASM_V3_SYNTAX\n-    0;\n-#endif\n-#ifdef HAVE_GCN_ASM_V4_SYNTAX\n     (EF_AMDGPU_FEATURE_XNACK_ANY_V4 | EF_AMDGPU_FEATURE_SRAMECC_ANY_V4);\n-#endif\n \n /* Delete tempfiles.  */\n \n@@ -362,14 +340,9 @@ copy_early_debug_info (const char *infile, const char *outfile)\n \n   /* Patch the correct elf architecture flag into the file.  */\n   ehdr.e_ident[7] = ELFOSABI_AMDGPU_HSA;\n-#ifdef HAVE_GCN_ASM_V3_SYNTAX\n-  ehdr.e_ident[8] = ELFABIVERSION_AMDGPU_HSA_V3;\n-#endif\n-#ifdef HAVE_GCN_ASM_V4_SYNTAX\n   ehdr.e_ident[8] = (elf_arch == EF_AMDGPU_MACH_AMDGCN_GFX803\n \t\t     ? ELFABIVERSION_AMDGPU_HSA_V3\n \t\t     : ELFABIVERSION_AMDGPU_HSA_V4);\n-#endif\n   ehdr.e_type = ET_REL;\n   ehdr.e_machine = EM_AMDGPU;\n   ehdr.e_flags = elf_arch | elf_flags_actual;\n@@ -884,7 +857,6 @@ main (int argc, char **argv)\n   bool fopenacc = false;\n   bool fPIC = false;\n   bool fpic = false;\n-  bool sram_seen = false;\n   for (int i = 1; i < argc; i++)\n     {\n #define STR \"-foffload-abi=\"\n@@ -912,20 +884,11 @@ main (int argc, char **argv)\n       else if (strcmp (argv[i], \"-mno-xnack\") == 0)\n \tSET_XNACK_OFF (elf_flags);\n       else if (strcmp (argv[i], \"-msram-ecc=on\") == 0)\n-\t{\n-\t  SET_SRAM_ECC_ON (elf_flags);\n-\t  sram_seen = true;\n-\t}\n+\tSET_SRAM_ECC_ON (elf_flags);\n       else if (strcmp (argv[i], \"-msram-ecc=any\") == 0)\n-\t{\n-\t  SET_SRAM_ECC_ANY (elf_flags);\n-\t  sram_seen = true;\n-\t}\n+\tSET_SRAM_ECC_ANY (elf_flags);\n       else if (strcmp (argv[i], \"-msram-ecc=off\") == 0)\n-\t{\n-\t  SET_SRAM_ECC_OFF (elf_flags);\n-\t  sram_seen = true;\n-\t}\n+\tSET_SRAM_ECC_OFF (elf_flags);\n       else if (strcmp (argv[i], \"-save-temps\") == 0)\n \tsave_temps = true;\n       else if (strcmp (argv[i], \"-v\") == 0)\n@@ -946,28 +909,6 @@ main (int argc, char **argv)\n   if (!(fopenacc ^ fopenmp))\n     fatal_error (input_location, \"either -fopenacc or -fopenmp must be set\");\n \n-  if (!sram_seen)\n-    {\n-#ifdef HAVE_GCN_ASM_V3_SYNTAX\n-      /* For HSACOv3, the SRAM-ECC feature defaults to \"on\" on GPUs where the\n-\t feature is available.\n-\t (HSACOv4 has elf_flags initialsed to \"any\" in all cases.)  */\n-      switch (elf_arch)\n-\t{\n-\tcase EF_AMDGPU_MACH_AMDGCN_GFX803:\n-\tcase EF_AMDGPU_MACH_AMDGCN_GFX900:\n-\tcase EF_AMDGPU_MACH_AMDGCN_GFX906:\n-#ifndef HAVE_GCN_SRAM_ECC_GFX908\n-\tcase EF_AMDGPU_MACH_AMDGCN_GFX908:\n-#endif\n-\t  break;\n-\tdefault:\n-\t  SET_SRAM_ECC_ON (elf_flags);\n-\t  break;\n-\t}\n-#endif\n-    }\n-\n   const char *abi;\n   switch (offload_abi)\n     {"}, {"sha": "ba3a998cae1f850fb9e101a1295cc41986d480ad", "filename": "gcc/configure", "status": "modified", "additions": 17, "deletions": 410, "changes": 427, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=8086230e7ac619c0b0eeb6e15df7975ac214725f", "patch": "@@ -29015,421 +29015,28 @@ case \"$target\" in\n     ;;\n esac\n \n-# This tests if the assembler supports two registers for global_load functions\n-# (like in LLVM versions <12) or one register (like in LLVM 12).\n+# AMD GCN needs the LLVM assembler and linker.\n+# Test that LLVM is at least 13.0.1.\n case \"$target\" in\n   amdgcn-* | gcn-*)\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler fix for global_load functions\" >&5\n-$as_echo_n \"checking assembler fix for global_load functions... \" >&6; }\n-    gcc_cv_as_gcn_global_load_fixed=yes\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking llvm assembler version\" >&5\n+$as_echo_n \"checking llvm assembler version... \" >&6; }\n+    gcc_cv_as_version=\"unknown\"\n     if test x$gcc_cv_as != x; then\n-      cat > conftest.s <<EOF\n-\tglobal_store_dwordx2    v[1:2], v[4:5], s[14:15]\n-EOF\n-      if $gcc_cv_as -triple=amdgcn--amdhsa -filetype=obj -mcpu=gfx900 -o conftest.o conftest.s > /dev/null 2>&1; then\n-        gcc_cv_as_gcn_global_load_fixed=no\n-      fi\n-      rm -f conftest.s conftest.o conftest\n-    fi\n-    global_load_fixed=`if test x$gcc_cv_as_gcn_global_load_fixed = xyes; then echo 1; else echo 0; fi`\n-\n-cat >>confdefs.h <<_ACEOF\n-#define HAVE_GCN_ASM_GLOBAL_LOAD_FIXED $global_load_fixed\n-_ACEOF\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_global_load_fixed\" >&5\n-$as_echo \"$gcc_cv_as_gcn_global_load_fixed\" >&6; }\n-    ;;\n-esac\n-\n-case \"$target\" in\n-  amdgcn-* | gcn-*)\n-    # Test the LLVM assembler syntax dialect; they have made a number of\n-    # changes between LLVM 12 & 13 without any backward compatibility.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler amdgcn_target v2/3 syntax\" >&5\n-$as_echo_n \"checking assembler for assembler amdgcn_target v2/3 syntax... \" >&6; }\n-if ${gcc_cv_as_gcn_asm_v3_syntax+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_gcn_asm_v3_syntax=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '.amdgcn_target \"amdgcn-unknown-amdhsa--gfx906+xnack\"' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx906 -mattr=+xnack -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgcc_cv_as_gcn_asm_v3_syntax=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_asm_v3_syntax\" >&5\n-$as_echo \"$gcc_cv_as_gcn_asm_v3_syntax\" >&6; }\n-if test $gcc_cv_as_gcn_asm_v3_syntax = yes; then\n-\n-$as_echo \"#define HAVE_GCN_ASM_V3_SYNTAX 1\" >>confdefs.h\n-\n-fi\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler amdgcn_target v4 syntax\" >&5\n-$as_echo_n \"checking assembler for assembler amdgcn_target v4 syntax... \" >&6; }\n-if ${gcc_cv_as_gcn_asm_v4_syntax+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_gcn_asm_v4_syntax=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '.amdgcn_target \"amdgcn-unknown-amdhsa--gfx908:xnack+\"' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx908 -mattr=+xnack -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgcc_cv_as_gcn_asm_v4_syntax=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_asm_v4_syntax\" >&5\n-$as_echo \"$gcc_cv_as_gcn_asm_v4_syntax\" >&6; }\n-if test $gcc_cv_as_gcn_asm_v4_syntax = yes; then\n-\n-$as_echo \"#define HAVE_GCN_ASM_V4_SYNTAX 1\" >>confdefs.h\n-\n-fi\n-\n-\n-    # Some attribute names changed in the move to v4 ...\n-    if test $gcc_cv_as_gcn_asm_v3_syntax = yes; then\n-\tsramopt=\"+sram-ecc\"\n-\tsramattr=\"+sram-ecc\"\n-\txnackattr=\"+xnack\"\n-    elif test $gcc_cv_as_gcn_asm_v4_syntax = yes; then\n-\tsramopt=\"+sramecc\"\n-\tsramattr=\":sramecc+\"\n-\txnackattr=\":xnack+\"\n-    else\n-\tas_fn_error $? \"Unrecognised assembler version\" \"$LINENO\" 5\n-    fi\n-\n-    # Test whether the LLVM assembler accepts -mattr=+xnack without any\n-    # diagnostic. LLVM 9 & 10 accept the option whether it makes sense or not,\n-    # LLVM 12+ throws a warning for GPUs without support.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=+xnack for fiji\" >&5\n-$as_echo_n \"checking assembler for assembler accepts -mattr=+xnack for fiji... \" >&6; }\n-if ${gcc_cv_as_gcn_xnack_ecc_fiji+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_gcn_xnack_ecc_fiji=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=fiji -mattr=+xnack 2>conftest.err -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgrep \".\" conftest.err >&5 \\\n-       || gcc_cv_as_gcn_xnack_ecc_fiji=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_xnack_ecc_fiji\" >&5\n-$as_echo \"$gcc_cv_as_gcn_xnack_ecc_fiji\" >&6; }\n-if test $gcc_cv_as_gcn_xnack_ecc_fiji = yes; then\n-\n-$as_echo \"#define HAVE_GCN_XNACK_FIJI 1\" >>confdefs.h\n-\n-fi\n-\n-    rm -f conftest.err\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=+xnack for gfx900\" >&5\n-$as_echo_n \"checking assembler for assembler accepts -mattr=+xnack for gfx900... \" >&6; }\n-if ${gcc_cv_as_gcn_xnack_ecc_gfx900+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_gcn_xnack_ecc_gfx900=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx900 -mattr=+xnack 2>conftest.err -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgrep \".\" conftest.err >&5 \\\n-       || gcc_cv_as_gcn_xnack_ecc_gfx900=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_xnack_ecc_gfx900\" >&5\n-$as_echo \"$gcc_cv_as_gcn_xnack_ecc_gfx900\" >&6; }\n-if test $gcc_cv_as_gcn_xnack_ecc_gfx900 = yes; then\n-\n-$as_echo \"#define HAVE_GCN_XNACK_GFX900 1\" >>confdefs.h\n-\n-fi\n-\n-    rm -f conftest.err\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=+xnack for gfx906\" >&5\n-$as_echo_n \"checking assembler for assembler accepts -mattr=+xnack for gfx906... \" >&6; }\n-if ${gcc_cv_as_gcn_xnack_ecc_gfx906+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_gcn_xnack_ecc_gfx906=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx906 -mattr=+xnack 2>conftest.err -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgrep \".\" conftest.err >&5 \\\n-       || gcc_cv_as_gcn_xnack_ecc_gfx906=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_xnack_ecc_gfx906\" >&5\n-$as_echo \"$gcc_cv_as_gcn_xnack_ecc_gfx906\" >&6; }\n-if test $gcc_cv_as_gcn_xnack_ecc_gfx906 = yes; then\n-\n-$as_echo \"#define HAVE_GCN_XNACK_GFX906 1\" >>confdefs.h\n-\n-fi\n-\n-    rm -f conftest.err\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=+xnack for gfx908\" >&5\n-$as_echo_n \"checking assembler for assembler accepts -mattr=+xnack for gfx908... \" >&6; }\n-if ${gcc_cv_as_gcn_xnack_ecc_gfx908+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_gcn_xnack_ecc_gfx908=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx908 -mattr=+xnack 2>conftest.err -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgrep \".\" conftest.err >&5 \\\n-       || gcc_cv_as_gcn_xnack_ecc_gfx908=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_xnack_ecc_gfx908\" >&5\n-$as_echo \"$gcc_cv_as_gcn_xnack_ecc_gfx908\" >&6; }\n-if test $gcc_cv_as_gcn_xnack_ecc_gfx908 = yes; then\n-\n-$as_echo \"#define HAVE_GCN_XNACK_GFX908 1\" >>confdefs.h\n-\n-fi\n-\n-    rm -f conftest.err\n-\n-    # Test whether the LLVM assembler accepts -mattr=+sramecc without any\n-    # diagnostic. LLVM 9 & 10 accept the option whether it makes sense or not,\n-    # (some?) LLVM 12 rejects it for all GPUs, and LLVM13 throws a warning\n-    # for GPUs without support.\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=$sramopt for fiji\" >&5\n-$as_echo_n \"checking assembler for assembler accepts -mattr=$sramopt for fiji... \" >&6; }\n-if ${gcc_cv_as_gcn_sram_ecc_fiji+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_gcn_sram_ecc_fiji=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=fiji -mattr=$sramopt 2>conftest.err -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgrep \".\" conftest.err >&5 \\\n-       || gcc_cv_as_gcn_sram_ecc_fiji=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_sram_ecc_fiji\" >&5\n-$as_echo \"$gcc_cv_as_gcn_sram_ecc_fiji\" >&6; }\n-if test $gcc_cv_as_gcn_sram_ecc_fiji = yes; then\n-\n-$as_echo \"#define HAVE_GCN_SRAM_ECC_FIJI 1\" >>confdefs.h\n-\n-fi\n-\n-    rm -f conftest.err\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=$sramopt for gfx900\" >&5\n-$as_echo_n \"checking assembler for assembler accepts -mattr=$sramopt for gfx900... \" >&6; }\n-if ${gcc_cv_as_gcn_sram_ecc_gfx900+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_gcn_sram_ecc_gfx900=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx900 -mattr=$sramopt 2>conftest.err -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgrep \".\" conftest.err >&5 \\\n-       || gcc_cv_as_gcn_sram_ecc_gfx900=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_sram_ecc_gfx900\" >&5\n-$as_echo \"$gcc_cv_as_gcn_sram_ecc_gfx900\" >&6; }\n-if test $gcc_cv_as_gcn_sram_ecc_gfx900 = yes; then\n-\n-$as_echo \"#define HAVE_GCN_SRAM_ECC_GFX900 1\" >>confdefs.h\n-\n-fi\n-\n-    rm -f conftest.err\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=$sramopt for gfx906\" >&5\n-$as_echo_n \"checking assembler for assembler accepts -mattr=$sramopt for gfx906... \" >&6; }\n-if ${gcc_cv_as_gcn_sram_ecc_gfx906+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_gcn_sram_ecc_gfx906=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx906 -mattr=$sramopt 2>conftest.err -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgrep \".\" conftest.err >&5 \\\n-       || gcc_cv_as_gcn_sram_ecc_gfx906=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_sram_ecc_gfx906\" >&5\n-$as_echo \"$gcc_cv_as_gcn_sram_ecc_gfx906\" >&6; }\n-if test $gcc_cv_as_gcn_sram_ecc_gfx906 = yes; then\n-\n-$as_echo \"#define HAVE_GCN_SRAM_ECC_GFX906 1\" >>confdefs.h\n-\n-fi\n-\n-    rm -f conftest.err\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler accepts -mattr=$sramopt for gfx908\" >&5\n-$as_echo_n \"checking assembler for assembler accepts -mattr=$sramopt for gfx908... \" >&6; }\n-if ${gcc_cv_as_gcn_sram_ecc_gfx908+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_gcn_sram_ecc_gfx908=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -triple=amdgcn--amdhsa -mcpu=gfx908 -mattr=$sramopt 2>conftest.err -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgrep \".\" conftest.err >&5 \\\n-       || gcc_cv_as_gcn_sram_ecc_gfx908=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n+      gcc_cv_as_version=`$gcc_cv_as --version 2>&1 | sed -ne '/version/s/.* \\([0-9]\\)/\\1/p' || echo error`\n+      case \"$gcc_cv_as_version\" in\n+\t13.0.[1-9]*) ;;          # 13.0.1+\n+\t13.[1-9]*) ;;            # 13.1+\n+\t1[4-9]*) ;;              # 14..19\n+\t[2-9][0-9]*) ;;        # 20..99\n+\t[1-9][0-9][0-9]*) ;; # 100+\n+\terror) as_fn_error $? \"cannot determine LLVM version\" \"$LINENO\" 5 ;;\n+\t*) as_fn_error $? \"LLVM 13.0.1 or later is required (found LLVM $gcc_cv_as_version)\" \"$LINENO\" 5 ;;\n+      esac\n     fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_gcn_sram_ecc_gfx908\" >&5\n-$as_echo \"$gcc_cv_as_gcn_sram_ecc_gfx908\" >&6; }\n-if test $gcc_cv_as_gcn_sram_ecc_gfx908 = yes; then\n-\n-$as_echo \"#define HAVE_GCN_SRAM_ECC_GFX908 1\" >>confdefs.h\n-\n-fi\n-\n-    rm -f conftest.err\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_version, ok\" >&5\n+$as_echo \"$gcc_cv_as_version, ok\" >&6; }\n     ;;\n-  arm*)\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler for arm accepts context-specific architecture extensions\" >&5\n-$as_echo_n \"checking assembler for assembler for arm accepts context-specific architecture extensions... \" >&6; }\n-if ${gcc_cv_as_arm_option_extensions+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_arm_option_extensions=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '.text\n-\t.thumb\n-\t.syntax unified\n-\tvmov.f32 s0, s1' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -march=armv8.1-m.main+mve -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgcc_cv_as_arm_option_extensions=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_arm_option_extensions\" >&5\n-$as_echo \"$gcc_cv_as_arm_option_extensions\" >&6; }\n-if test $gcc_cv_as_arm_option_extensions = yes; then\n-\n-$as_echo \"#define HAVE_GAS_ARM_EXTENDED_ARCH 1\" >>confdefs.h\n-\n-fi\n-\n esac\n \n # ??? Not all targets support dwarf2 debug_line, even within a version"}, {"sha": "4cd48b4007174c81554e26d7cc2374aeda59d61a", "filename": "gcc/configure.ac", "status": "modified", "additions": 15, "deletions": 130, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8086230e7ac619c0b0eeb6e15df7975ac214725f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=8086230e7ac619c0b0eeb6e15df7975ac214725f", "patch": "@@ -5375,141 +5375,26 @@ case \"$target\" in\n     ;;\n esac\n \n-# This tests if the assembler supports two registers for global_load functions\n-# (like in LLVM versions <12) or one register (like in LLVM 12).\n+# AMD GCN needs the LLVM assembler and linker.\n+# Test that LLVM is at least 13.0.1.\n case \"$target\" in\n   amdgcn-* | gcn-*)\n-    AC_MSG_CHECKING(assembler fix for global_load functions)\n-    gcc_cv_as_gcn_global_load_fixed=yes\n+    AC_MSG_CHECKING(llvm assembler version)\n+    gcc_cv_as_version=\"unknown\"\n     if test x$gcc_cv_as != x; then\n-      cat > conftest.s <<EOF\n-\tglobal_store_dwordx2    v[[1:2]], v[[4:5]], s[[14:15]]\n-EOF\n-      if $gcc_cv_as -triple=amdgcn--amdhsa -filetype=obj -mcpu=gfx900 -o conftest.o conftest.s > /dev/null 2>&1; then\n-        gcc_cv_as_gcn_global_load_fixed=no\n-      fi\n-      rm -f conftest.s conftest.o conftest\n-    fi\n-    global_load_fixed=`if test x$gcc_cv_as_gcn_global_load_fixed = xyes; then echo 1; else echo 0; fi`\n-    AC_DEFINE_UNQUOTED(HAVE_GCN_ASM_GLOBAL_LOAD_FIXED, $global_load_fixed,\n-      [Define if your assembler has fixed global_load functions.])\n-    AC_MSG_RESULT($gcc_cv_as_gcn_global_load_fixed)\n-    ;;\n-esac\n-\n-case \"$target\" in\n-  amdgcn-* | gcn-*)\n-    # Test the LLVM assembler syntax dialect; they have made a number of\n-    # changes between LLVM 12 & 13 without any backward compatibility.\n-    gcc_GAS_CHECK_FEATURE([assembler amdgcn_target v2/3 syntax],\n-      gcc_cv_as_gcn_asm_v3_syntax,\n-      [-triple=amdgcn--amdhsa -mcpu=gfx906 -mattr=+xnack],\n-      [.amdgcn_target \"amdgcn-unknown-amdhsa--gfx906+xnack\"],,\n-      [AC_DEFINE(HAVE_GCN_ASM_V3_SYNTAX, 1,\n-       [Define if your assembler expects amdgcn_target gfx908+xnack syntax.])])\n-    gcc_GAS_CHECK_FEATURE([assembler amdgcn_target v4 syntax],\n-      gcc_cv_as_gcn_asm_v4_syntax,\n-      [-triple=amdgcn--amdhsa -mcpu=gfx908 -mattr=+xnack],\n-      [.amdgcn_target \"amdgcn-unknown-amdhsa--gfx908:xnack+\"],,\n-      [AC_DEFINE(HAVE_GCN_ASM_V4_SYNTAX, 1,\n-       [Define if your assembler expects amdgcn_target gfx908:xnack+ syntax.])])\n-\n-    # Some attribute names changed in the move to v4 ...\n-    if test $gcc_cv_as_gcn_asm_v3_syntax = yes; then\n-\tsramopt=\"+sram-ecc\"\n-\tsramattr=\"+sram-ecc\"\n-\txnackattr=\"+xnack\"\n-    elif test $gcc_cv_as_gcn_asm_v4_syntax = yes; then\n-\tsramopt=\"+sramecc\"\n-\tsramattr=\":sramecc+\"\n-\txnackattr=\":xnack+\"\n-    else\n-\tAC_MSG_ERROR([Unrecognised assembler version])\n+      gcc_cv_as_version=`$gcc_cv_as --version 2>&1 | sed -ne '/version/s/.* \\([[0-9]]\\)/\\1/p' || echo error`\n+      case \"$gcc_cv_as_version\" in\n+\t13.0.[[1-9]]*) ;;          # 13.0.1+\n+\t13.[[1-9]]*) ;;            # 13.1+\n+\t1[[4-9]]*) ;;              # 14..19\n+\t[[2-9]][[0-9]]*) ;;        # 20..99\n+\t[[1-9]][[0-9]][[0-9]]*) ;; # 100+\n+\terror) AC_MSG_ERROR([cannot determine LLVM version]) ;;\n+\t*) AC_MSG_ERROR([LLVM 13.0.1 or later is required (found LLVM $gcc_cv_as_version)]) ;;\n+      esac\n     fi\n-\n-    # Test whether the LLVM assembler accepts -mattr=+xnack without any\n-    # diagnostic. LLVM 9 & 10 accept the option whether it makes sense or not,\n-    # LLVM 12+ throws a warning for GPUs without support.\n-    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=+xnack for fiji],\n-      gcc_cv_as_gcn_xnack_ecc_fiji,\n-      [-triple=amdgcn--amdhsa -mcpu=fiji -mattr=+xnack 2>conftest.err], [],\n-      [grep \".\" conftest.err >&AS_MESSAGE_LOG_FD \\\n-       || gcc_cv_as_gcn_xnack_ecc_fiji=yes],\n-      [AC_DEFINE(HAVE_GCN_XNACK_FIJI, 1,\n-       [Define if your assembler allows -mattr=+xnack for fiji.])])\n-    rm -f conftest.err\n-    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=+xnack for gfx900],\n-      gcc_cv_as_gcn_xnack_ecc_gfx900,\n-      [-triple=amdgcn--amdhsa -mcpu=gfx900 -mattr=+xnack 2>conftest.err], [],\n-      [grep \".\" conftest.err >&AS_MESSAGE_LOG_FD \\\n-       || gcc_cv_as_gcn_xnack_ecc_gfx900=yes],\n-      [AC_DEFINE(HAVE_GCN_XNACK_GFX900, 1,\n-       [Define if your assembler allows -mattr=+xnack for gfx900.])])\n-    rm -f conftest.err\n-    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=+xnack for gfx906],\n-      gcc_cv_as_gcn_xnack_ecc_gfx906,\n-      [-triple=amdgcn--amdhsa -mcpu=gfx906 -mattr=+xnack 2>conftest.err], [],\n-      [grep \".\" conftest.err >&AS_MESSAGE_LOG_FD \\\n-       || gcc_cv_as_gcn_xnack_ecc_gfx906=yes],\n-      [AC_DEFINE(HAVE_GCN_XNACK_GFX906, 1,\n-       [Define if your assembler allows -mattr=+xnack for gfx906.])])\n-    rm -f conftest.err\n-    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=+xnack for gfx908],\n-      gcc_cv_as_gcn_xnack_ecc_gfx908,\n-      [-triple=amdgcn--amdhsa -mcpu=gfx908 -mattr=+xnack 2>conftest.err], [],\n-      [grep \".\" conftest.err >&AS_MESSAGE_LOG_FD \\\n-       || gcc_cv_as_gcn_xnack_ecc_gfx908=yes],\n-      [AC_DEFINE(HAVE_GCN_XNACK_GFX908, 1,\n-       [Define if your assembler allows -mattr=+xnack for gfx908.])])\n-    rm -f conftest.err\n-\n-    # Test whether the LLVM assembler accepts -mattr=+sramecc without any\n-    # diagnostic. LLVM 9 & 10 accept the option whether it makes sense or not,\n-    # (some?) LLVM 12 rejects it for all GPUs, and LLVM13 throws a warning\n-    # for GPUs without support.\n-    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=$sramopt for fiji],\n-      gcc_cv_as_gcn_sram_ecc_fiji,\n-      [-triple=amdgcn--amdhsa -mcpu=fiji -mattr=$sramopt 2>conftest.err], [],\n-      [grep \".\" conftest.err >&AS_MESSAGE_LOG_FD \\\n-       || gcc_cv_as_gcn_sram_ecc_fiji=yes],\n-      [AC_DEFINE(HAVE_GCN_SRAM_ECC_FIJI, 1,\n-       [Define if your assembler allows -mattr=+sramecc for fiji.])])\n-    rm -f conftest.err\n-    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=$sramopt for gfx900],\n-      gcc_cv_as_gcn_sram_ecc_gfx900,\n-      [-triple=amdgcn--amdhsa -mcpu=gfx900 -mattr=$sramopt 2>conftest.err], [],\n-      [grep \".\" conftest.err >&AS_MESSAGE_LOG_FD \\\n-       || gcc_cv_as_gcn_sram_ecc_gfx900=yes],\n-      [AC_DEFINE(HAVE_GCN_SRAM_ECC_GFX900, 1,\n-       [Define if your assembler allows -mattr=+sramecc for gfx900.])])\n-    rm -f conftest.err\n-    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=$sramopt for gfx906],\n-      gcc_cv_as_gcn_sram_ecc_gfx906,\n-      [-triple=amdgcn--amdhsa -mcpu=gfx906 -mattr=$sramopt 2>conftest.err], [],\n-      [grep \".\" conftest.err >&AS_MESSAGE_LOG_FD \\\n-       || gcc_cv_as_gcn_sram_ecc_gfx906=yes],\n-      [AC_DEFINE(HAVE_GCN_SRAM_ECC_GFX906, 1,\n-       [Define if your assembler allows -mattr=+sramecc for gfx906.])])\n-    rm -f conftest.err\n-    gcc_GAS_CHECK_FEATURE([assembler accepts -mattr=$sramopt for gfx908],\n-      gcc_cv_as_gcn_sram_ecc_gfx908,\n-      [-triple=amdgcn--amdhsa -mcpu=gfx908 -mattr=$sramopt 2>conftest.err], [],\n-      [grep \".\" conftest.err >&AS_MESSAGE_LOG_FD \\\n-       || gcc_cv_as_gcn_sram_ecc_gfx908=yes],\n-      [AC_DEFINE(HAVE_GCN_SRAM_ECC_GFX908, 1,\n-       [Define if your assembler allows -mattr=+sramecc for gfx908.])])\n-    rm -f conftest.err\n+    AC_MSG_RESULT([$gcc_cv_as_version, ok])\n     ;;\n-  arm*)\n-    gcc_GAS_CHECK_FEATURE([assembler for arm accepts context-specific architecture extensions],\n-      gcc_cv_as_arm_option_extensions,\n-      [-march=armv8.1-m.main+mve],\n-      [.text\n-\t.thumb\n-\t.syntax unified\n-\tvmov.f32 s0, s1],,\n-      [AC_DEFINE(HAVE_GAS_ARM_EXTENDED_ARCH, 1,\n-       [Define if your Arm assembler permits context-specific feature extensions.])])\n esac\n \n # ??? Not all targets support dwarf2 debug_line, even within a version"}]}