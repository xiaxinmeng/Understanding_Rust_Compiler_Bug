{"sha": "95e304f764f25667da60fecd1b72b9e8b9e614bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVlMzA0Zjc2NGYyNTY2N2RhNjBmZWNkMWI3MmI5ZThiOWU2MTRiYw==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1991-05-31T20:43:32Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1991-05-31T20:43:32Z"}, "message": "Initial revision\n\nFrom-SVN: r26", "tree": {"sha": "28228a9ca9652731b653f318f72df445e087a8b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28228a9ca9652731b653f318f72df445e087a8b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95e304f764f25667da60fecd1b72b9e8b9e614bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e304f764f25667da60fecd1b72b9e8b9e614bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e304f764f25667da60fecd1b72b9e8b9e614bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e304f764f25667da60fecd1b72b9e8b9e614bc/comments", "author": null, "committer": null, "parents": [{"sha": "ec21bae226259380f396efdc8d9f1ed07fa9d923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec21bae226259380f396efdc8d9f1ed07fa9d923", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec21bae226259380f396efdc8d9f1ed07fa9d923"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "018d9ed14b87ac634df20d972dcfa0a60ec3f797", "filename": "gcc/machmode.def", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e304f764f25667da60fecd1b72b9e8b9e614bc/gcc%2Fmachmode.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e304f764f25667da60fecd1b72b9e8b9e614bc/gcc%2Fmachmode.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.def?ref=95e304f764f25667da60fecd1b72b9e8b9e614bc", "patch": "@@ -0,0 +1,106 @@\n+/* This file contains the definitions and documentation for the\n+   machine modes used in the the GNU compiler.\n+   Copyright (C) 1987-1990 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+/* This file defines all the MACHINE MODES used by GNU CC.\n+\n+   A machine mode specifies a size and format of data\n+   at the machine level.\n+\n+   Each RTL expression has a machine mode.\n+\n+   At the syntax tree level, each ..._TYPE and each ..._DECL node\n+   has a machine mode which describes data of that type or the\n+   data of the variable declared.  */\n+\n+/* The first argument is the internal name of the machine mode\n+   used in the C source.\n+   By convention these are in UPPER_CASE, except for the word  \"mode\".\n+\n+   The second argument  is the name of the machine mode in the\n+   external ASCII format used for reading and printing RTL and trees.\n+   By convention these names in UPPER_CASE.\n+\n+   Third argument states the kind of representation:\n+   MODE_INT - integer\n+   MODE_FLOAT - floating\n+   MODE_PARTIAL_INT - PSImode and PDImode\n+   MODE_CC - modes used for representing the condition code in a register\n+   MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT - complex number\n+   MODE_RANDOM - anything else\n+\n+   Fourth argument is the relative size of the object, in bytes.\n+   It is zero when the size is meaningless or not determined.\n+   A byte's size is determined by BITS_PER_UNIT in tm.h. \n+\n+\n+   Fifth arg is the relative size of subunits of the object.\n+   It is same as the fourth argument except for complexes,\n+   since they are really made of two equal size subunits.\n+\n+   Sixth arg is next wider natural mode of the same class.\n+   0 if there is none.  */\n+\n+/* VOIDmode is used when no mode needs to be specified,\n+   as for example on CONST_INT RTL expressions.  */\n+DEF_MACHMODE (VOIDmode, \"VOID\", MODE_RANDOM, 0, 0, VOIDmode)\n+\n+DEF_MACHMODE (QImode, \"QI\", MODE_INT, 1, 1, HImode)\t\t/* int types */\n+DEF_MACHMODE (HImode, \"HI\", MODE_INT, 2, 2, SImode)\n+/* Pointers on some machines use this type to distinguish them from ints.\n+   Useful if a pointer is 4 bytes but has some bits that are not significant,\n+   so it is really not quite as wide as an integer.  */\n+DEF_MACHMODE (PSImode, \"PSI\", MODE_PARTIAL_INT, 4, 4, VOIDmode)\n+DEF_MACHMODE (SImode, \"SI\", MODE_INT, 4, 4, DImode)\n+DEF_MACHMODE (PDImode, \"PDI\", MODE_PARTIAL_INT, 8, 8, VOIDmode)\n+DEF_MACHMODE (DImode, \"DI\", MODE_INT, 8, 8, TImode)\n+DEF_MACHMODE (TImode, \"TI\", MODE_INT, 16, 16, VOIDmode)\n+\n+DEF_MACHMODE (SFmode, \"SF\", MODE_FLOAT, 4, 4, DFmode)\n+DEF_MACHMODE (DFmode, \"DF\", MODE_FLOAT, 8, 8, XFmode)\n+DEF_MACHMODE (XFmode, \"XF\", MODE_FLOAT, 12, 12, TFmode)   /* IEEE extended */\n+DEF_MACHMODE (TFmode, \"TF\", MODE_FLOAT, 16, 16, VOIDmode)\n+\n+DEF_MACHMODE (SCmode, \"SC\", MODE_COMPLEX_FLOAT, 8, 4, DCmode)\n+DEF_MACHMODE (DCmode, \"DC\", MODE_COMPLEX_FLOAT, 16, 8, XCmode)\n+DEF_MACHMODE (XCmode, \"XC\", MODE_COMPLEX_FLOAT, 24, 12, TCmode)\n+DEF_MACHMODE (TCmode, \"TC\", MODE_COMPLEX_FLOAT, 32, 16, VOIDmode)\n+\n+/* BLKmode is used for structures, arrays, etc.\n+   that fit no more specific mode.  */\n+DEF_MACHMODE (BLKmode, \"BLK\", MODE_RANDOM, 0, 0, VOIDmode)\n+\n+/* The modes for representing the condition codes come last.  CCmode is\n+   always defined.  Additional modes for the condition code can be specified\n+   in the EXTRA_CC_MODES macro.  Everything but the names of the modes\n+   are copied from CCmode.  For these modes, GET_MODE_WIDER_MODE points\n+   to the next defined CC mode, if any.  */\n+\n+DEF_MACHMODE (CCmode, \"CC\", MODE_CC, 4, 4, VOIDmode)\n+\n+/* The symbol Pmode stands for one of the above machine modes (usually SImode).\n+   The tm file specifies which one.  It is not a distinct mode.  */\n+\n+/*\n+Local variables:\n+mode:c\n+version-control: t\n+End:\n+*/"}]}