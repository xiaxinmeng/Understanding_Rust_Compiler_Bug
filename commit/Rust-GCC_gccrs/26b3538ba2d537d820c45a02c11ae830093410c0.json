{"sha": "26b3538ba2d537d820c45a02c11ae830093410c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiMzUzOGJhMmQ1MzdkODIwYzQ1YTAyYzExYWU4MzAwOTM0MTBjMA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-18T19:50:38Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-18T19:50:38Z"}, "message": "Introduce safe_as_a\n\ngcc/\n2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n\n\t* is-a.h (template<T, U> safe_as_a <U *p>) New function.\n\nFrom-SVN: r214117", "tree": {"sha": "9de6672999a52ba34bb22855eb614e2b5b7dc0b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9de6672999a52ba34bb22855eb614e2b5b7dc0b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b3538ba2d537d820c45a02c11ae830093410c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b3538ba2d537d820c45a02c11ae830093410c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b3538ba2d537d820c45a02c11ae830093410c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b3538ba2d537d820c45a02c11ae830093410c0/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c41b94cef21ec1b2c224bfe31223cf2e5c91305c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41b94cef21ec1b2c224bfe31223cf2e5c91305c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c41b94cef21ec1b2c224bfe31223cf2e5c91305c"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "bc5c327b931089a310a325ab5086d1bdb7415e52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b3538ba2d537d820c45a02c11ae830093410c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b3538ba2d537d820c45a02c11ae830093410c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26b3538ba2d537d820c45a02c11ae830093410c0", "patch": "@@ -1,3 +1,7 @@\n+2014-08-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* is-a.h (template<T, U> safe_as_a <U *p>) New function.\n+\n 2014-08-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-visibility.c (update_visibility_by_resolution_info): Do no turn UNDEF"}, {"sha": "176066b42bcaeb97ddc5c19243f61ccf6cba9b0d", "filename": "gcc/is-a.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b3538ba2d537d820c45a02c11ae830093410c0/gcc%2Fis-a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b3538ba2d537d820c45a02c11ae830093410c0/gcc%2Fis-a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fis-a.h?ref=26b3538ba2d537d820c45a02c11ae830093410c0", "patch": "@@ -46,6 +46,14 @@ TYPE as_a <TYPE> (pointer)\n \n       do_something_with (as_a <cgraph_node *> *ptr);\n \n+TYPE safe_as_a <TYPE> (pointer)\n+\n+    Like as_a <TYPE> (pointer), but where pointer could be NULL.  This\n+    adds a check against NULL where the regular is_a_helper hook for TYPE\n+    assumes non-NULL.\n+\n+      do_something_with (safe_as_a <cgraph_node *> *ptr);\n+\n TYPE dyn_cast <TYPE> (pointer)\n \n     Converts pointer to TYPE if and only if \"is_a <TYPE> pointer\".  Otherwise,\n@@ -185,6 +193,22 @@ as_a (U *p)\n   return is_a_helper <T>::cast (p);\n }\n \n+/* Similar to as_a<>, but where the pointer can be NULL, even if\n+   is_a_helper<T> doesn't check for NULL.  */\n+\n+template <typename T, typename U>\n+inline T\n+safe_as_a (U *p)\n+{\n+  if (p)\n+    {\n+      gcc_checking_assert (is_a <T> (p));\n+      return is_a_helper <T>::cast (p);\n+    }\n+  else\n+    return NULL;\n+}\n+\n /* A generic checked conversion from a base type U to a derived type T.  See\n    the discussion above for when to use this function.  */\n "}]}