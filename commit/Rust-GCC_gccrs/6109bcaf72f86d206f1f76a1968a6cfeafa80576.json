{"sha": "6109bcaf72f86d206f1f76a1968a6cfeafa80576", "node_id": "C_kwDOANBUbNoAKDYxMDliY2FmNzJmODZkMjA2ZjFmNzZhMTk2OGE2Y2ZlYWZhODA1NzY", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-08-26T13:42:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-04T08:45:05Z"}, "message": "[Ada] Adjust documentation of -fdump-ada-spec in GNAT UG\n\ngcc/ada/\n\n\t* doc/gnat_ugn/the_gnat_compilation_model.rst (Binding generation):\n\tDocument specific behavior for /include/-ending paths and update.\n\t* gnat_ugn.texi: Regenerate.", "tree": {"sha": "790b7e1d46a912c5bf6aa32962b92d379441c641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/790b7e1d46a912c5bf6aa32962b92d379441c641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6109bcaf72f86d206f1f76a1968a6cfeafa80576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6109bcaf72f86d206f1f76a1968a6cfeafa80576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6109bcaf72f86d206f1f76a1968a6cfeafa80576", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6109bcaf72f86d206f1f76a1968a6cfeafa80576/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a59d4dc88db02b7e19a1edf73db1b1f9d890b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a59d4dc88db02b7e19a1edf73db1b1f9d890b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a59d4dc88db02b7e19a1edf73db1b1f9d890b1"}], "stats": {"total": 106, "additions": 25, "deletions": 81}, "files": [{"sha": "8b4d4581350c91f350da7d03171da224045f0045", "filename": "gcc/ada/doc/gnat_ugn/the_gnat_compilation_model.rst", "status": "modified", "additions": 12, "deletions": 40, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6109bcaf72f86d206f1f76a1968a6cfeafa80576/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6109bcaf72f86d206f1f76a1968a6cfeafa80576/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fthe_gnat_compilation_model.rst?ref=6109bcaf72f86d206f1f76a1968a6cfeafa80576", "patch": "@@ -4526,8 +4526,8 @@ Some of the known limitations include:\n   constants. Function macros (macros with arguments) are partially translated\n   as comments, to be completed manually if needed.\n * some extensions (e.g. vector types) are not supported\n-* pointers to pointers or complex structures are mapped to System.Address\n-* identifiers with identical name (except casing) will generate compilation\n+* pointers to pointers are mapped to System.Address\n+* identifiers with identical name (except casing) may generate compilation\n   errors (e.g. ``shm_get`` vs ``SHM_GET``).\n \n The code is generated using Ada 2012 syntax, which makes it easier to interface\n@@ -4546,14 +4546,17 @@ header files needed by these files transitively. For example:\n \n .. code-block:: sh\n \n-      $ g++ -c -fdump-ada-spec -C /usr/include/time.h\n+      $ gcc -c -fdump-ada-spec -C /usr/include/time.h\n       $ gcc -c *.ads\n \n will generate, under GNU/Linux, the following files: :file:`time_h.ads`,\n :file:`bits_time_h.ads`, :file:`stddef_h.ads`, :file:`bits_types_h.ads` which\n correspond to the files :file:`/usr/include/time.h`,\n-:file:`/usr/include/bits/time.h`, etc..., and will then compile these Ada specs\n-in Ada 2005 mode.\n+:file:`/usr/include/bits/time.h`, etc..., and then compile these Ada specs.\n+That is to say, the name of the Ada specs is in keeping with the relative path\n+under :file:`/usr/include/` of the header files. This behavior is specific to\n+paths ending with :file:`/include/`; in all the other cases, the name of the\n+Ada specs is derived from the simple name of the header files instead.\n \n The :switch:`-C` switch tells ``gcc`` to extract comments from headers,\n and will attempt to generate corresponding Ada comments.\n@@ -4564,47 +4567,16 @@ can use instead the :switch:`-fdump-ada-spec-slim` switch.\n You can optionally specify a parent unit, of which all generated units will\n be children, using :switch:`-fada-spec-parent={unit}`.\n \n-Note that we recommend when possible to use the *g++* driver to\n-generate bindings, even for most C headers, since this will in general\n-generate better Ada specs. For generating bindings for C++ headers, it is\n-mandatory to use the *g++* command, or *gcc -x c++* which\n-is equivalent in this case. If *g++* cannot work on your C headers\n-because of incompatibilities between C and C++, then you can fallback to\n-``gcc`` instead.\n-\n-For an example of better bindings generated from the C++ front-end,\n-the name of the parameters (when available) are actually ignored by the C\n-front-end. Consider the following C header:\n-\n-.. code-block:: c\n-\n-     extern void foo (int variable);\n-\n-with the C front-end, ``variable`` is ignored, and the above is handled as:\n-\n-.. code-block:: c\n-\n-     extern void foo (int);\n-\n-generating a generic:\n-\n-.. code-block:: ada\n-\n-     procedure foo (param1 : int);\n-\n-with the C++ front-end, the name is available, and we generate:\n-\n-.. code-block:: ada\n-\n-     procedure foo (variable : int);\n+The simple ``gcc```-based command works only for C headers. For C++ headers\n+you need to use either the ``g++`` command or the combination ``gcc -x c++```.\n \n In some cases, the generated bindings will be more complete or more meaningful\n when defining some macros, which you can do via the :switch:`-D` switch. This\n is for example the case with :file:`Xlib.h` under GNU/Linux:\n \n .. code-block:: sh\n \n-      $ g++ -c -fdump-ada-spec -DXLIB_ILLEGAL_ACCESS -C /usr/include/X11/Xlib.h\n+      $ gcc -c -fdump-ada-spec -DXLIB_ILLEGAL_ACCESS -C /usr/include/X11/Xlib.h\n \n The above will generate more complete bindings than a straight call without\n the :switch:`-DXLIB_ILLEGAL_ACCESS` switch.\n@@ -4626,7 +4598,7 @@ and then generate Ada bindings from this file:\n \n .. code-block:: sh\n \n-      $ g++ -c -fdump-ada-spec readline1.h\n+      $ gcc -c -fdump-ada-spec readline1.h\n \n \n .. _Generating_bindings_for_C++_headers:"}, {"sha": "d7627ab413fd9e99b796e1ced80949e8dcfde48c", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 13, "deletions": 41, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6109bcaf72f86d206f1f76a1968a6cfeafa80576/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6109bcaf72f86d206f1f76a1968a6cfeafa80576/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=6109bcaf72f86d206f1f76a1968a6cfeafa80576", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT User's Guide for Native Platforms , Aug 03, 2021\n+GNAT User's Guide for Native Platforms , Sep 28, 2021\n \n AdaCore\n \n@@ -6421,10 +6421,10 @@ as comments, to be completed manually if needed.\n some extensions (e.g. vector types) are not supported\n \n @item \n-pointers to pointers or complex structures are mapped to System.Address\n+pointers to pointers are mapped to System.Address\n \n @item \n-identifiers with identical name (except casing) will generate compilation\n+identifiers with identical name (except casing) may generate compilation\n errors (e.g. @code{shm_get} vs @code{SHM_GET}).\n @end itemize\n \n@@ -6450,15 +6450,18 @@ spec files for the header files specified on the command line, and all\n header files needed by these files transitively. For example:\n \n @example\n-$ g++ -c -fdump-ada-spec -C /usr/include/time.h\n+$ gcc -c -fdump-ada-spec -C /usr/include/time.h\n $ gcc -c *.ads\n @end example\n \n will generate, under GNU/Linux, the following files: @code{time_h.ads},\n @code{bits_time_h.ads}, @code{stddef_h.ads}, @code{bits_types_h.ads} which\n correspond to the files @code{/usr/include/time.h},\n-@code{/usr/include/bits/time.h}, etc\u2026, and will then compile these Ada specs\n-in Ada 2005 mode.\n+@code{/usr/include/bits/time.h}, etc\u2026, and then compile these Ada specs.\n+That is to say, the name of the Ada specs is in keeping with the relative path\n+under @code{/usr/include/} of the header files. This behavior is specific to\n+paths ending with @code{/include/}; in all the other cases, the name of the\n+Ada specs is derived from the simple name of the header files instead.\n \n The @code{-C} switch tells @code{gcc} to extract comments from headers,\n and will attempt to generate corresponding Ada comments.\n@@ -6469,46 +6472,15 @@ can use instead the @code{-fdump-ada-spec-slim} switch.\n You can optionally specify a parent unit, of which all generated units will\n be children, using @code{-fada-spec-parent=@emph{unit}}.\n \n-Note that we recommend when possible to use the @emph{g++} driver to\n-generate bindings, even for most C headers, since this will in general\n-generate better Ada specs. For generating bindings for C++ headers, it is\n-mandatory to use the @emph{g++} command, or @emph{gcc -x c++} which\n-is equivalent in this case. If @emph{g++} cannot work on your C headers\n-because of incompatibilities between C and C++, then you can fallback to\n-@code{gcc} instead.\n-\n-For an example of better bindings generated from the C++ front-end,\n-the name of the parameters (when available) are actually ignored by the C\n-front-end. Consider the following C header:\n-\n-@example\n-extern void foo (int variable);\n-@end example\n-\n-with the C front-end, @code{variable} is ignored, and the above is handled as:\n-\n-@example\n-extern void foo (int);\n-@end example\n-\n-generating a generic:\n-\n-@example\n-procedure foo (param1 : int);\n-@end example\n-\n-with the C++ front-end, the name is available, and we generate:\n-\n-@example\n-procedure foo (variable : int);\n-@end example\n+The simple @code{gcc`}-based command works only for C headers. For C++ headers\n+you need to use either the @code{g++} command or the combination @code{gcc -x c++`}.\n \n In some cases, the generated bindings will be more complete or more meaningful\n when defining some macros, which you can do via the @code{-D} switch. This\n is for example the case with @code{Xlib.h} under GNU/Linux:\n \n @example\n-$ g++ -c -fdump-ada-spec -DXLIB_ILLEGAL_ACCESS -C /usr/include/X11/Xlib.h\n+$ gcc -c -fdump-ada-spec -DXLIB_ILLEGAL_ACCESS -C /usr/include/X11/Xlib.h\n @end example\n \n The above will generate more complete bindings than a straight call without\n@@ -6530,7 +6502,7 @@ lines in e.g. @code{readline1.h}:\n and then generate Ada bindings from this file:\n \n @example\n-$ g++ -c -fdump-ada-spec readline1.h\n+$ gcc -c -fdump-ada-spec readline1.h\n @end example\n \n @node Generating Bindings for C++ Headers,Switches,Running the Binding Generator,Generating Ada Bindings for C and C++ headers"}]}