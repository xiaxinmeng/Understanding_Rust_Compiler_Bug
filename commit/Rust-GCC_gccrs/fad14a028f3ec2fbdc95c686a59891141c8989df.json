{"sha": "fad14a028f3ec2fbdc95c686a59891141c8989df", "node_id": "C_kwDOANBUbNoAKGZhZDE0YTAyOGYzZWMyZmJkYzk1YzY4NmE1OTg5MTE0MWM4OTg5ZGY", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-01-08T12:27:50Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-01-08T12:27:50Z"}, "message": "x86_64: Improve (interunit) moves from TImode to V1TImode.\n\nThis patch improves the code generated when moving a 128-bit value\nin TImode, represented by two 64-bit registers, to V1TImode, which\nis a single SSE register.\n\nCurrently, the simple move:\ntypedef unsigned __int128 uv1ti __attribute__ ((__vector_size__ (16)));\nuv1ti foo(__int128 x) { return (uv1ti)x; }\n\nis always transferred via memory, as:\nfoo:    movq    %rdi, -24(%rsp)\n        movq    %rsi, -16(%rsp)\n        movdqa  -24(%rsp), %xmm0\n        ret\n\nwith this patch, we now generate (with -msse2):\nfoo:    movq    %rdi, %xmm1\n        movq    %rsi, %xmm2\n        punpcklqdq      %xmm2, %xmm1\n        movdqa  %xmm1, %xmm0\n        ret\n\nand with -mavx2:\nfoo:    vmovq   %rdi, %xmm1\n        vpinsrq $1, %rsi, %xmm1, %xmm0\n        ret\n\nEven more dramatic is the improvement of zero extended transfers.\n\nuv1ti bar(unsigned char c) { return (uv1ti)(__int128)c; }\n\nPreviously generated:\nbar:    movq    $0, -16(%rsp)\n        movzbl  %dil, %eax\n        movq    %rax, -24(%rsp)\n        vmovdqa -24(%rsp), %xmm0\n        ret\n\nNow generates:\nbar:    movzbl  %dil, %edi\n        movq    %rdi, %xmm0\n        ret\n\nMy first attempt at this functionality attempted to use a simple\ndefine_split, but unfortunately, this triggers very late during the\ncompilation preventing some of the simplifications we'd like (in\ncombine).  For example the foo case above becomes:\n\nfoo:    movq    %rsi, -16(%rsp)\n        movq    %rdi, %xmm0\n        movhps  -16(%rsp), %xmm0\n\ntransferring half directly, and the other half via memory.\nAnd for the bar case above, GCC fails to appreciate that\nmovq/vmovq clears the high bits, resulting in:\n\nbar:    movzbl  %dil, %eax\n        xorl    %edx, %edx\n        vmovq   %rax, %xmm1\n        vpinsrq $1, %rdx, %xmm1, %xmm0\n        ret\n\nHence the solution (i.e. this patch) is to add a special case\nto ix86_expand_vector_move for TImode to V1TImode transfers.\n\n2022-01-08  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-expand.c (ix86_expand_vector_move): Add\n\tspecial case for TImode to V1TImode moves, going via V2DImode.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/sse2-v1ti-mov-1.c: New test case.\n\t* gcc.target/i386/sse2-v1ti-zext.c: New test case.", "tree": {"sha": "c8da34db734921e48f2d1d731063ed530e9473ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8da34db734921e48f2d1d731063ed530e9473ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fad14a028f3ec2fbdc95c686a59891141c8989df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad14a028f3ec2fbdc95c686a59891141c8989df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad14a028f3ec2fbdc95c686a59891141c8989df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad14a028f3ec2fbdc95c686a59891141c8989df/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d464b608b38b9e2007948d10b1e0f1dcec142c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d464b608b38b9e2007948d10b1e0f1dcec142c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d464b608b38b9e2007948d10b1e0f1dcec142c"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "95bba254daf4d46d473b5281bf5c2d187346f964", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad14a028f3ec2fbdc95c686a59891141c8989df/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad14a028f3ec2fbdc95c686a59891141c8989df/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=fad14a028f3ec2fbdc95c686a59891141c8989df", "patch": "@@ -615,6 +615,23 @@ ix86_expand_vector_move (machine_mode mode, rtx operands[])\n       return;\n     }\n \n+  /* Special case TImode to V1TImode conversions, via V2DI.  */\n+  if (mode == V1TImode\n+      && SUBREG_P (op1)\n+      && GET_MODE (SUBREG_REG (op1)) == TImode\n+      && TARGET_64BIT && TARGET_SSE\n+      && can_create_pseudo_p ())\n+    {\n+      rtx tmp = gen_reg_rtx (V2DImode);\n+      rtx lo = gen_reg_rtx (DImode);\n+      rtx hi = gen_reg_rtx (DImode);\n+      emit_move_insn (lo, gen_lowpart (DImode, SUBREG_REG (op1)));\n+      emit_move_insn (hi, gen_highpart (DImode, SUBREG_REG (op1)));\n+      emit_insn (gen_vec_concatv2di (tmp, lo, hi));\n+      emit_move_insn (op0, gen_lowpart (V1TImode, tmp));\n+      return;\n+    }\n+\n   /* If operand0 is a hard register, make operand1 a pseudo.  */\n   if (can_create_pseudo_p ()\n       && !ix86_hardreg_mov_ok (op0, op1))"}, {"sha": "a1ef7b77132c1760a34d11cf537b0ef9b6bfc06f", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-mov-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad14a028f3ec2fbdc95c686a59891141c8989df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-mov-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad14a028f3ec2fbdc95c686a59891141c8989df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-mov-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-mov-1.c?ref=fad14a028f3ec2fbdc95c686a59891141c8989df", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned __int128 uv1ti __attribute__ ((__vector_size__ (16)));\n+\n+uv1ti foo(__int128 x)\n+{\n+  return (uv1ti)x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"%\\[er\\]sp\" } } */"}, {"sha": "4dfc6553e01199e4d2799de8897bab465909770a", "filename": "gcc/testsuite/gcc.target/i386/sse2-v1ti-zext.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fad14a028f3ec2fbdc95c686a59891141c8989df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-zext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fad14a028f3ec2fbdc95c686a59891141c8989df/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-zext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-v1ti-zext.c?ref=fad14a028f3ec2fbdc95c686a59891141c8989df", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned __int128 uv1ti __attribute__ ((__vector_size__ (16)));\n+\n+uv1ti extqi(unsigned char c) { return (uv1ti)(__int128)c; }\n+uv1ti exthi(unsigned short s) { return (uv1ti)(__int128)s; }\n+uv1ti extsi(unsigned int i) { return (uv1ti)(__int128)i; }\n+uv1ti extdi(unsigned long long l) { return (uv1ti)(__int128)l; }\n+\n+uv1ti pextqi(unsigned char *pc) { return (uv1ti)(__int128)(*pc); }\n+uv1ti pexthi(unsigned short *ps) { return (uv1ti)(__int128)(*ps); }\n+uv1ti pextsi(unsigned int *pi) { return (uv1ti)(__int128)(*pi); }\n+uv1ti pextdi(unsigned long long *pl) { return (uv1ti)(__int128)(*pl); }\n+\n+/* { dg-final { scan-assembler-not \"%\\[er\\]sp\" } } */"}]}