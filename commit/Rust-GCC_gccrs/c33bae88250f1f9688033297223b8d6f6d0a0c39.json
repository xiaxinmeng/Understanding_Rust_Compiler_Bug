{"sha": "c33bae88250f1f9688033297223b8d6f6d0a0c39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMzYmFlODgyNTBmMWY5Njg4MDMzMjk3MjIzYjhkNmY2ZDBhMGMzOQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-02-11T21:52:34Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-02-11T21:52:34Z"}, "message": "re PR tree-optimization/19876 (g++ starts eating all the memory and the CPU)\n\n\tPR tree-optimization/19876\n\tPartially revert my change from 2005-01-14\n\t* tree-ssa-pre.c (compute_antic_aux): Make recursive once again...\n\t(compute_antic): ...and remove the loop here.\n\nFrom-SVN: r94896", "tree": {"sha": "622e26d2196fc2235829cc51779ee2c4b9ffbff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/622e26d2196fc2235829cc51779ee2c4b9ffbff8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c33bae88250f1f9688033297223b8d6f6d0a0c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33bae88250f1f9688033297223b8d6f6d0a0c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c33bae88250f1f9688033297223b8d6f6d0a0c39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33bae88250f1f9688033297223b8d6f6d0a0c39/comments", "author": null, "committer": null, "parents": [{"sha": "36b23fd76a702c7144d33f3587e326c615bcb03a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b23fd76a702c7144d33f3587e326c615bcb03a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b23fd76a702c7144d33f3587e326c615bcb03a"}], "stats": {"total": 68, "additions": 27, "deletions": 41}, "files": [{"sha": "f8348f343e8475238b18823d03c0a5accd9f653f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33bae88250f1f9688033297223b8d6f6d0a0c39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33bae88250f1f9688033297223b8d6f6d0a0c39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c33bae88250f1f9688033297223b8d6f6d0a0c39", "patch": "@@ -1,3 +1,10 @@\n+2005-02-11  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR tree-optimization/19876\n+\tPartially revert my change from 2005-01-14\n+\t* tree-ssa-pre.c (compute_antic_aux): Make recursive once again...\n+\t(compute_antic): ...and remove the loop here.\n+\n 2005-02-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/19858"}, {"sha": "a364162ae36af176d46ca5d0fb186763adf2939f", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 20, "deletions": 41, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c33bae88250f1f9688033297223b8d6f6d0a0c39/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c33bae88250f1f9688033297223b8d6f6d0a0c39/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=c33bae88250f1f9688033297223b8d6f6d0a0c39", "patch": "@@ -1103,6 +1103,7 @@ clean (value_set_t set)\n }\n \n DEF_VEC_MALLOC_P (basic_block);\n+sbitmap has_abnormal_preds;\n \n /* Compute the ANTIC set for BLOCK.\n \n@@ -1121,6 +1122,7 @@ DEF_VEC_MALLOC_P (basic_block);\n static bool\n compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n {\n+  basic_block son;\n   bool changed = false;\n   value_set_t S, old, ANTIC_OUT;\n   value_set_node_t node;\n@@ -1185,7 +1187,7 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n   ANTIC_IN (block) = bitmap_set_subtract_from_value_set (EXP_GEN (block), \n \t\t\t\t\t\t\t TMP_GEN (block),\n \t\t\t\t\t\t\t true);\n-  \n+\n   /* Then union in the ANTIC_OUT - TMP_GEN values,\n      to get ANTIC_OUT U EXP_GEN - TMP_GEN */\n   for (node = S->head; node; node = node->next)\n@@ -1205,19 +1207,24 @@ compute_antic_aux (basic_block block, bool block_has_abnormal_pred_edge)\n \tprint_value_set (dump_file, S, \"S\", block->index);\n     }\n \n+  for (son = first_dom_son (CDI_POST_DOMINATORS, block);\n+       son;\n+       son = next_dom_son (CDI_POST_DOMINATORS, son))\n+    {\n+      changed |= compute_antic_aux (son,\n+\t\t\t\t    TEST_BIT (has_abnormal_preds, son->index));\n+    }\n   return changed;\n }\n \n-/* Compute ANTIC sets.  Iterates until fixpointed.  */\n+/* Compute ANTIC sets.  */\n \n static void\n compute_antic (void)\n {\n-  bool changed= true;\n+  bool changed = true;\n   int num_iterations = 0;\n-  basic_block block, *worklist;\n-  size_t sp = 0;\n-  sbitmap has_abnormal_preds;\n+  basic_block block;\n \n   /* If any predecessor edges are abnormal, we punt, so antic_in is empty.\n      We pre-build the map of blocks with incoming abnormal edges here.  */\n@@ -1229,53 +1236,25 @@ compute_antic (void)\n       edge e;\n \n       FOR_EACH_EDGE (e, ei, block->preds)\n-        if (e->flags & EDGE_ABNORMAL)\n-          {\n-            SET_BIT (has_abnormal_preds, block->index);\n-            break;\n-          }\n+\tif (e->flags & EDGE_ABNORMAL)\n+\t  {\n+\t    SET_BIT (has_abnormal_preds, block->index);\n+\t    break;\n+\t  }\n \n       /* While we are here, give empty ANTIC_IN sets to each block.  */\n       ANTIC_IN (block) = set_new (true);\n     }\n   /* At the exit block we anticipate nothing.  */\n   ANTIC_IN (EXIT_BLOCK_PTR) = set_new (true);\n \n-  /* Allocate the worklist.  */\n-  worklist = xmalloc (sizeof (basic_block) * n_basic_blocks);\n-\n-  /* Loop until fixpointed.  */\n   while (changed)\n     {\n-      basic_block son, bb;\n-\n-      changed = false;\n       num_iterations++;\n-\n-      /* Seed the algorithm by putting post-dominator children of\n-         the exit block in the worklist.  */\n-      for (son = first_dom_son (CDI_POST_DOMINATORS, EXIT_BLOCK_PTR);\n-\t   son;\n-\t   son = next_dom_son (CDI_POST_DOMINATORS, son))\n-\tworklist[sp++] = son;\n-\n-      /* Now visit all blocks in a DFS of the post dominator tree.  */\n-      while (sp)\n-\t{\n-\t  bool bb_has_abnormal_pred;\n-\n-\t  bb = worklist[--sp];\n-\t  bb_has_abnormal_pred = TEST_BIT (has_abnormal_preds, bb->index);\n- \t  changed |= compute_antic_aux (bb, bb_has_abnormal_pred);\n-\n-\t  for (son = first_dom_son (CDI_POST_DOMINATORS, bb);\n-\t       son;\n-\t       son = next_dom_son (CDI_POST_DOMINATORS, son))\n-\t    worklist[sp++] = son;\n-\t}\n+      changed = false;\n+      changed = compute_antic_aux (EXIT_BLOCK_PTR, false);\n     }\n \n-  free (worklist);\n   sbitmap_free (has_abnormal_preds);\n \n   if (dump_file && (dump_flags & TDF_STATS))"}]}