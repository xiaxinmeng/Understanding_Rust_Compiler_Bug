{"sha": "b98fcf6ecd5693f7b341bf419c5ef72b4647c304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk4ZmNmNmVjZDU2OTNmN2IzNDFiZjQxOWM1ZWY3MmI0NjQ3YzMwNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-03-02T22:24:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-03-02T22:24:45Z"}, "message": "limits (numeric_limits): Fix returns per C++11.\n\n2012-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/limits (numeric_limits): Fix returns per C++11.\n\t* testsuite/18_support/numeric_limits/primary.cc: New.\n\nFrom-SVN: r184837", "tree": {"sha": "bb5892e4f20fc9642452820b9715a434f9f0dd4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb5892e4f20fc9642452820b9715a434f9f0dd4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b98fcf6ecd5693f7b341bf419c5ef72b4647c304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98fcf6ecd5693f7b341bf419c5ef72b4647c304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b98fcf6ecd5693f7b341bf419c5ef72b4647c304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98fcf6ecd5693f7b341bf419c5ef72b4647c304/comments", "author": null, "committer": null, "parents": [{"sha": "acb3748dd19ed0bf1c0ac34e9922d475682afb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb3748dd19ed0bf1c0ac34e9922d475682afb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb3748dd19ed0bf1c0ac34e9922d475682afb7d"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "3abfc9435af48b03a2200d08c82d6a9dd013f880", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98fcf6ecd5693f7b341bf419c5ef72b4647c304/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98fcf6ecd5693f7b341bf419c5ef72b4647c304/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b98fcf6ecd5693f7b341bf419c5ef72b4647c304", "patch": "@@ -1,3 +1,8 @@\n+2012-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/limits (numeric_limits): Fix returns per C++11.\n+\t* testsuite/18_support/numeric_limits/primary.cc: New.\n+\n 2012-03-02  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/c_global/cstdio: Remove extraneous extern."}, {"sha": "e7a6e8fa934184348e93f03932557b276eaed71f", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98fcf6ecd5693f7b341bf419c5ef72b4647c304/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98fcf6ecd5693f7b341bf419c5ef72b4647c304/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=b98fcf6ecd5693f7b341bf419c5ef72b4647c304", "patch": "@@ -306,47 +306,47 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /** The minimum finite value, or for floating types with\n \t  denormalization, the minimum positive normalized value.  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      min() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n+      min() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n \n       /** The maximum finite value.  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      max() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n+      max() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /** A finite value x such that there is no other finite value y\n        *  where y < x.  */\n       static constexpr _Tp\n-      lowest() noexcept { return static_cast<_Tp>(0); }\n+      lowest() noexcept { return _Tp(); }\n #endif\n \n       /** The @e machine @e epsilon:  the difference between 1 and the least\n \t  value greater than 1 that is representable.  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      epsilon() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n+      epsilon() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n \n       /** The maximum rounding error measurement (see LIA-1).  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      round_error() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n+      round_error() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n \n       /** The representation of positive infinity, if @c has_infinity.  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n+      infinity() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n \n       /** The representation of a quiet <em>Not a Number</em>,\n \t  if @c has_quiet_NaN. */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n+      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n \n       /** The representation of a signaling <em>Not a Number</em>, if\n \t  @c has_signaling_NaN. */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n+      signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n \n       /** The minimum positive denormalized value.  For types where\n \t  @c has_denorm is false, this is the minimum positive normalized\n \t  value.  */\n       static _GLIBCXX_CONSTEXPR _Tp\n-      denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<_Tp>(0); }\n+      denorm_min() _GLIBCXX_USE_NOEXCEPT { return _Tp(); }\n     };\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "833b27a8f531b011d52b2e5b487cf3ffb78180a9", "filename": "libstdc++-v3/testsuite/18_support/numeric_limits/primary.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98fcf6ecd5693f7b341bf419c5ef72b4647c304/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fprimary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98fcf6ecd5693f7b341bf419c5ef72b4647c304/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fprimary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnumeric_limits%2Fprimary.cc?ref=b98fcf6ecd5693f7b341bf419c5ef72b4647c304", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2012 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <limits>\n+\n+struct MyBigNum { };\n+\n+template class std::numeric_limits<MyBigNum>;"}]}