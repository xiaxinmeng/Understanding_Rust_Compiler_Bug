{"sha": "fc756f9f460d5f0ec73a72128645fdb39fec77a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3NTZmOWY0NjBkNWYwZWM3M2E3MjEyODY0NWZkYjM5ZmVjNzdhMA==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-10-25T20:41:57Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-10-25T20:41:57Z"}, "message": "rs6000-c.c (P9V_BUILTIN_VEC_VSCEDPGT, [...]): Rename base overloaded name.\n\ngcc/ChangeLog:\n\n2018-10-25  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c.c (P9V_BUILTIN_VEC_VSCEDPGT,\n\tP9V_BUILTIN_VEC_VSCEDPLT, P9V_BUILTIN_VEC_VSCEDPEQ,\n\tP9V_BUILTIN_VEC_VSCEDPUO): Rename base overloaded name.  Add quad\n\tprecicion entry for each overloaded builtin.\n\t* config/rs6000/rs6000-builtin.def (VSCEDPGT, VSCEDPLT, VSCEDPEQ,\n\tVSCEDPUO): Rename overloaded name.\n\t(VSCEDPGT, VSCEQPGT, VSCEDPLT, VSCEQPLT, VSCEDPEQ, VSCEQPEQ,\n\tVSCEDPUO, VSCEQPUO): Add defitions for overloaded builtins.\n\t* config/rs6000/vsx.md (xscmpexpqp_<code>_<mode>): Add\n\tdefine_expand for xscmpexqp instruction.\n\t(*xscmpexpqp): Add define_insn for the xscmpexqp instruction.\n\ngcc/testsuite/ChangeLog:\n\n2018-10-25  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/float128-cmp2-runnable.c: New test file.\n\nFrom-SVN: r265509", "tree": {"sha": "4c5e02855679f944ada590857fc36fde03a6d91e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c5e02855679f944ada590857fc36fde03a6d91e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc756f9f460d5f0ec73a72128645fdb39fec77a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc756f9f460d5f0ec73a72128645fdb39fec77a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc756f9f460d5f0ec73a72128645fdb39fec77a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc756f9f460d5f0ec73a72128645fdb39fec77a0/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80a2dd51defd8933d425927f8c77d71bb4496620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80a2dd51defd8933d425927f8c77d71bb4496620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80a2dd51defd8933d425927f8c77d71bb4496620"}], "stats": {"total": 361, "additions": 353, "deletions": 8}, "files": [{"sha": "94e99b0c505a63893c63b5f904592aea1eccea25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc756f9f460d5f0ec73a72128645fdb39fec77a0", "patch": "@@ -1,3 +1,17 @@\n+2018-10-25  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c (P9V_BUILTIN_VEC_VSCEDPGT,\n+\tP9V_BUILTIN_VEC_VSCEDPLT, P9V_BUILTIN_VEC_VSCEDPEQ,\n+\tP9V_BUILTIN_VEC_VSCEDPUO): Rename base overloaded name.  Add quad\n+\tprecicion entry for each overloaded builtin.\n+\t* config/rs6000/rs6000-builtin.def (VSCEDPGT, VSCEDPLT, VSCEDPEQ,\n+\tVSCEDPUO): Rename overloaded name.\n+\t(VSCEDPGT, VSCEQPGT, VSCEDPLT, VSCEQPLT, VSCEDPEQ, VSCEQPEQ,\n+\tVSCEDPUO, VSCEQPUO): Add defitions for overloaded builtins.\n+\t* config/rs6000/vsx.md (xscmpexpqp_<code>_<mode>): Add\n+\tdefine_expand for xscmpexqp instruction.\n+\t(*xscmpexpqp): Add define_insn for the xscmpexqp instruction.\n+\n 2018-10-25  Bill Schmidt  <wschmidt@linux.ibm.com>\n \t    Jinsong Ji <jji@us.ibm.com>\n "}, {"sha": "ac695b6edff9b295cd0f8a8ddefcd1c11b5a44e2", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=fc756f9f460d5f0ec73a72128645fdb39fec77a0", "patch": "@@ -2117,6 +2117,11 @@ BU_P9V_VSX_2 (VSCEDPLT,\t\"scalar_cmp_exp_dp_lt\",\tCONST,\txscmpexpdp_lt)\n BU_P9V_VSX_2 (VSCEDPEQ,\t\"scalar_cmp_exp_dp_eq\",\tCONST,\txscmpexpdp_eq)\n BU_P9V_VSX_2 (VSCEDPUO,\t\"scalar_cmp_exp_dp_unordered\",\tCONST,\txscmpexpdp_unordered)\n \n+BU_P9V_VSX_2 (VSCEQPGT,\t\"scalar_cmp_exp_qp_gt\",\tCONST,\txscmpexpqp_gt_kf)\n+BU_P9V_VSX_2 (VSCEQPLT,\t\"scalar_cmp_exp_qp_lt\",\tCONST,\txscmpexpqp_lt_kf)\n+BU_P9V_VSX_2 (VSCEQPEQ,\t\"scalar_cmp_exp_qp_eq\",\tCONST,\txscmpexpqp_eq_kf)\n+BU_P9V_VSX_2 (VSCEQPUO,\t\"scalar_cmp_exp_qp_unordered\",\tCONST,\txscmpexpqp_unordered_kf)\n+\n BU_FLOAT128_HW_VSX_2 (VSTDCQP, \"scalar_test_data_class_qp\",\tCONST,\txststdcqp_kf)\n BU_P9V_VSX_2 (VSTDCDP,\t\"scalar_test_data_class_dp\",\tCONST,\txststdcdp)\n BU_P9V_VSX_2 (VSTDCSP,\t\"scalar_test_data_class_sp\",\tCONST,\txststdcsp)\n@@ -2146,10 +2151,18 @@ BU_P9V_OVERLOAD_2 (VSTDCQP,\t\"scalar_test_data_class_qp\")\n BU_P9V_OVERLOAD_2 (VSTDCDP,\t\"scalar_test_data_class_dp\")\n BU_P9V_OVERLOAD_2 (VSTDCSP,\t\"scalar_test_data_class_sp\")\n \n-BU_P9V_OVERLOAD_2 (VSCEDPGT,\t\"scalar_cmp_exp_gt\")\n-BU_P9V_OVERLOAD_2 (VSCEDPLT,\t\"scalar_cmp_exp_lt\")\n-BU_P9V_OVERLOAD_2 (VSCEDPEQ,\t\"scalar_cmp_exp_eq\")\n-BU_P9V_OVERLOAD_2 (VSCEDPUO,\t\"scalar_cmp_exp_unordered\")\n+BU_P9V_OVERLOAD_2 (VSCEGT,\t\"scalar_cmp_exp_gt\")\n+BU_P9V_OVERLOAD_2 (VSCEDPGT,\t\"scalar_cmp_exp_dp_gt\")\n+BU_P9V_OVERLOAD_2 (VSCEQPGT,\t\"scalar_cmp_exp_qp_gt\")\n+BU_P9V_OVERLOAD_2 (VSCELT,\t\"scalar_cmp_exp_lt\")\n+BU_P9V_OVERLOAD_2 (VSCEDPLT,\t\"scalar_cmp_exp_dp_lt\")\n+BU_P9V_OVERLOAD_2 (VSCEQPLT,\t\"scalar_cmp_exp_qp_lt\")\n+BU_P9V_OVERLOAD_2 (VSCEEQ,\t\"scalar_cmp_exp_eq\")\n+BU_P9V_OVERLOAD_2 (VSCEDPEQ,\t\"scalar_cmp_exp_dp_eq\")\n+BU_P9V_OVERLOAD_2 (VSCEQPEQ,\t\"scalar_cmp_exp_qp_eq\")\n+BU_P9V_OVERLOAD_2 (VSCEUO,\t\"scalar_cmp_exp_unordered\")\n+BU_P9V_OVERLOAD_2 (VSCEDPUO,\t\"scalar_cmp_exp_dp_unordered\")\n+BU_P9V_OVERLOAD_2 (VSCEQPUO,\t\"scalar_cmp_exp_qp_unordered\")\n \n /* 1 argument vsx vector functions added in ISA 3.0 (power9).  */\n BU_P9V_VSX_1 (VEEDP, \"extract_exp_dp\", CONST, xvxexpdp)"}, {"sha": "c3586b0df9778b3487bbc494cc6b7442e6c2cede", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=fc756f9f460d5f0ec73a72128645fdb39fec77a0", "patch": "@@ -5061,14 +5061,22 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P9V_BUILTIN_VEC_VSIEDP, P9V_BUILTIN_VSIEQPF,\n     RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, RS6000_BTI_UINTDI, 0 },\n \n-  { P9V_BUILTIN_VEC_VSCEDPGT, P9V_BUILTIN_VSCEDPGT,\n+  { P9V_BUILTIN_VEC_VSCEGT, P9V_BUILTIN_VSCEDPGT,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n-  { P9V_BUILTIN_VEC_VSCEDPLT, P9V_BUILTIN_VSCEDPLT,\n+  { P9V_BUILTIN_VEC_VSCEGT, P9V_BUILTIN_VSCEQPGT,\n+    RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n+  { P9V_BUILTIN_VEC_VSCELT, P9V_BUILTIN_VSCEDPLT,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n-  { P9V_BUILTIN_VEC_VSCEDPEQ, P9V_BUILTIN_VSCEDPEQ,\n+  { P9V_BUILTIN_VEC_VSCELT, P9V_BUILTIN_VSCEQPLT,\n+    RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n+  { P9V_BUILTIN_VEC_VSCEEQ, P9V_BUILTIN_VSCEDPEQ,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n-  { P9V_BUILTIN_VEC_VSCEDPUO, P9V_BUILTIN_VSCEDPUO,\n+  { P9V_BUILTIN_VEC_VSCEEQ, P9V_BUILTIN_VSCEQPEQ,\n+    RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n+  { P9V_BUILTIN_VEC_VSCEUO, P9V_BUILTIN_VSCEDPUO,\n     RS6000_BTI_INTSI, RS6000_BTI_double, RS6000_BTI_double, 0 },\n+  { P9V_BUILTIN_VEC_VSCEUO, P9V_BUILTIN_VSCEQPUO,\n+    RS6000_BTI_INTSI, RS6000_BTI_ieee128_float, RS6000_BTI_ieee128_float, 0 },\n \n   { P9V_BUILTIN_VEC_XL_LEN_R, P9V_BUILTIN_XL_LEN_R,\n     RS6000_BTI_unsigned_V16QI, ~RS6000_BTI_UINTQI,"}, {"sha": "13842cb53b8c4be11115e9f2942d6d9b91b332a9", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=fc756f9f460d5f0ec73a72128645fdb39fec77a0", "patch": "@@ -381,6 +381,7 @@\n    UNSPEC_VSX_SIEXPDP\n    UNSPEC_VSX_SIEXPQP\n    UNSPEC_VSX_SCMPEXPDP\n+   UNSPEC_VSX_SCMPEXPQP\n    UNSPEC_VSX_STSTDC\n    UNSPEC_VSX_VEXTRACT_FP_FROM_SHORTH\n    UNSPEC_VSX_VEXTRACT_FP_FROM_SHORTL\n@@ -4560,6 +4561,34 @@\n   \"xscmpexpdp %0,%x1,%x2\"\n   [(set_attr \"type\" \"fpcompare\")])\n \n+;; VSX Scalar Compare Exponents Quad-Precision\n+(define_expand \"xscmpexpqp_<code>_<mode>\"\n+  [(set (match_dup 3)\n+\t(compare:CCFP\n+\t (unspec:IEEE128\n+\t  [(match_operand:IEEE128 1 \"vsx_register_operand\" \"v\")\n+\t   (match_operand:IEEE128 2 \"vsx_register_operand\" \"v\")]\n+\t  UNSPEC_VSX_SCMPEXPQP)\n+\t (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(CMP_TEST:SI (match_dup 3)\n+\t\t     (const_int 0)))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  operands[3] = gen_reg_rtx (CCFPmode);\n+})\n+\n+(define_insn \"*xscmpexpqp\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP\n+\t (unspec:IEEE128 [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")\n+\t\t          (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")]\n+\t  UNSPEC_VSX_SCMPEXPQP)\n+\t (match_operand:SI 3 \"zero_constant\" \"j\")))]\n+  \"TARGET_P9_VECTOR\"\n+  \"xscmpexpqp %0,%1,%2\"\n+  [(set_attr \"type\" \"fpcompare\")])\n+\n ;; VSX Scalar Test Data Class Quad-Precision\n ;;  (Expansion for scalar_test_data_class (__ieee128, int))\n ;;   (Has side effect of setting the lt bit if operand 1 is negative,"}, {"sha": "0b453107793860508b607589379c53afe7a0b98b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc756f9f460d5f0ec73a72128645fdb39fec77a0", "patch": "@@ -1,3 +1,7 @@\n+2018-10-25  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-cmp2-runnable.c: New test file.\n+\n 2018-10-25  Martin Liska  <mliska@suse.cz>\n \n \tPR testsuite/87739"}, {"sha": "1c316ba9db6aeb98f106715137f071057e7dcb1d", "filename": "gcc/testsuite/gcc.target/powerpc/float128-cmp2-runnable.c", "status": "added", "additions": 277, "deletions": 0, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-cmp2-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc756f9f460d5f0ec73a72128645fdb39fec77a0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-cmp2-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-cmp2-runnable.c?ref=fc756f9f460d5f0ec73a72128645fdb39fec77a0", "patch": "@@ -0,0 +1,277 @@\n+/* { dg-do run { target { powerpc*-*-* &&  p9vector_hw } } } */\n+/* { dg-options \"-O2 -mcpu=power9 \" } */\n+\n+#define NAN_Q __builtin_nanq (\"\")\n+#define SNAN_Q __builtin_nansq (\"\")\n+#define NAN __builtin_nan (\"\")\n+#define SNAN __builtin_nans (\"\")\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+void abort (void);\n+\n+int main(void)\n+{\n+  int result;\n+  double a_dble, b_dble;\n+  __ieee128 a_ieee128, b_ieee128;\n+  \n+  a_dble = 3.10;\n+  b_dble = 3.10;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_eq(a_dble, b_dble))\n+#ifdef DEBUG\n+    printf(\"Double EQ result is true, expecting true\\n\");\n+#else\n+    ;\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"ERROR: Double EQ result is false, expecting true\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  a_dble = 3.10;\n+  b_dble = 31.0;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_eq(a_dble, b_dble))\n+#ifdef DEBUG\n+    printf(\"ERROR: Double EQ result is true, expecting false\\n\");\n+#else\n+    abort();\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"Double EQ result is false, expecting false\\n\");\n+#else\n+    ;\n+#endif\n+\n+  a_dble = 3.10;\n+  b_dble = 3.10;\n+\n+  if (__builtin_vec_scalar_cmp_exp_lt(a_dble, b_dble))\n+#ifdef DEBUG\n+    printf(\"ERROR: Double LT result is true, expecting false\\n\");\n+#else\n+    abort();\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"Double LT result is false, expecting false\\n\");\n+#else\n+    ;\n+#endif\n+\n+  a_dble = 0.31;\n+  b_dble = 3.10;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_lt(a_dble, b_dble))\n+#ifdef DEBUG\n+    printf(\"Double LT result is true, expecting true\\n\");\n+#else\n+    ;\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"ERROR: Double LT result is false, expecting true\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  a_dble = 0.31;\n+  b_dble = 3.10;\n+\n+  if (__builtin_vec_scalar_cmp_exp_gt(a_dble, b_dble))\n+#ifdef DEBUG\n+    printf(\"ERROR: Double GT result is true, expecting false\\n\");\n+#else\n+    abort();\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"Double GT result is false, expecting false\\n\");\n+#else\n+    ;\n+#endif\n+\n+  a_dble = 3.10;\n+  b_dble = 0.31;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_gt(a_dble, b_dble))\n+#ifdef DEBUG\n+    printf(\"Double GT result is true, expecting true\\n\");\n+#else\n+    ;\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"ERROR: Double GT result is false, expecting true\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  a_dble = NAN;\n+  b_dble = NAN;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_unordered(a_dble, b_dble))\n+#ifdef DEBUG\n+    printf(\"Double unordered result is true, expecting true\\n\");\n+#else\n+    ;\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"ERROR: Double unordered result is false, expecting true\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  a_dble = 3.10;\n+  b_dble = 3.10;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_unordered(a_dble, b_dble))\n+#ifdef DEBUG\n+    printf(\"ERROR: Double unordered result is true, expecting false\\n\");\n+#else\n+    abort();\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"Double unordered result is false, expecting false\\n\");\n+#else\n+    ;\n+#endif\n+    \n+  /* IEEE 128 */\n+  a_ieee128 = 3.10;\n+  b_ieee128 = 3.10;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_eq(a_ieee128, b_ieee128))\n+#ifdef DEBUG\n+    printf(\"IEEE 128 EQ result is true, expecting true\\n\");\n+#else\n+    ;\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"ERROR: IEEE 128 EQ result is false, expecting true\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  a_ieee128 = 3.10;\n+  b_ieee128 = 31.0;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_eq(a_ieee128, b_ieee128))\n+#ifdef DEBUG\n+    printf(\"ERROR: IEEE 128 EQ result is true, expecting false\\n\");\n+#else\n+    abort();\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"IEEE 128 EQ result is false, expecting false\\n\");\n+#else\n+    ;\n+#endif\n+\n+  a_ieee128 = 3.10;\n+  b_ieee128 = 3.10;\n+\n+  if (__builtin_vec_scalar_cmp_exp_lt(a_ieee128, b_ieee128))\n+#ifdef DEBUG\n+    printf(\"ERROR: IEEE 128 LT result is true, expecting false\\n\");\n+#else\n+    abort();\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"IEEE 128 LT result is false, expecting false\\n\");\n+#else\n+    ;\n+#endif\n+\n+  a_ieee128 = 0.31;\n+  b_ieee128 = 3.10;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_lt(a_ieee128, b_ieee128))\n+#ifdef DEBUG\n+    printf(\"IEEE 128 LT result is true, expecting true\\n\");\n+#else\n+    ;\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"ERROR: IEEE 128 LT result is false, expecting true\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  a_ieee128 = 0.31;\n+  b_ieee128 = 3.10;\n+\n+  if (__builtin_vec_scalar_cmp_exp_gt(a_ieee128, b_ieee128))\n+#ifdef DEBUG\n+    printf(\"ERROR: IEEE 128 GT result is true, expecting false\\n\");\n+#else\n+    abort();\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"IEEE 128 GT result is false, expecting false\\n\");\n+#else\n+    ;\n+#endif\n+\n+  a_ieee128 = 3.10;\n+  b_ieee128 = 0.31;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_gt(a_ieee128, b_ieee128))\n+#ifdef DEBUG\n+    printf(\"IEEE 128 GT result is true, expecting true\\n\");\n+#else\n+    ;\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"ERROR: IEEE 128 GT result is false, expecting true\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  a_ieee128 = NAN_Q;\n+  b_ieee128 = NAN_Q;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_unordered(a_ieee128, b_ieee128))\n+#ifdef DEBUG\n+    printf(\"IEEE unordered result is true, expecting true\\n\");\n+#else\n+    ;\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"ERROR: IEEE unordered result is false, expecting true\\n\");\n+#else\n+    abort();\n+#endif\n+\n+  a_ieee128 = 3.10;\n+  b_ieee128 = 3.10;\n+  \n+  if (__builtin_vec_scalar_cmp_exp_unordered(a_ieee128, b_ieee128))\n+#ifdef DEBUG\n+    printf(\"ERROR: IEEE unordered result is true, expecting false\\n\");\n+#else\n+    abort();\n+#endif\n+  else\n+#ifdef DEBUG\n+    printf(\"IEEE unordered result is false, expecting false\\n\");\n+#else\n+    ;\n+#endif\n+}"}]}