{"sha": "7dc58b50536223fefe18c38cde7c759ae528f934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjNThiNTA1MzYyMjNmZWZlMThjMzhjZGU3Yzc1OWFlNTI4ZjkzNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-09-17T08:47:38Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-09-17T08:47:38Z"}, "message": "i386: move alignment defaults to processor_costs.\n\n2018-09-17  Martin Liska  <mliska@suse.cz>\n\n\t* common/config/i386/i386-common.c (ix86_get_valid_option_values):\n\tUse processor_names table.\n\t* config/i386/i386.c (ix86_default_align): Use\n\tprocessor_cost_table for alignment values.\n\t(ix86_option_override_internal): Use processor_names.\n\t(ix86_function_specific_print): Likewise.\n\t* config/i386/i386.h (struct processor_costs):\n\tAdd alignment values.\n\t(struct ptt): Remove and replace with const char *.\n\t* config/i386/x86-tune-costs.h (struct processor_costs):\n\tDeclare default alignments for all costs.\n\nFrom-SVN: r264359", "tree": {"sha": "6f6cba92048d869a2b31cde2a3957bc36978450f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f6cba92048d869a2b31cde2a3957bc36978450f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc58b50536223fefe18c38cde7c759ae528f934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc58b50536223fefe18c38cde7c759ae528f934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc58b50536223fefe18c38cde7c759ae528f934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc58b50536223fefe18c38cde7c759ae528f934/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca32d61bab85b4df400d463ff891e4f833bad8ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca32d61bab85b4df400d463ff891e4f833bad8ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca32d61bab85b4df400d463ff891e4f833bad8ec"}], "stats": {"total": 237, "additions": 173, "deletions": 64}, "files": [{"sha": "db4c06541b8acee4daef92c84c176da65f8ea671", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc58b50536223fefe18c38cde7c759ae528f934/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc58b50536223fefe18c38cde7c759ae528f934/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7dc58b50536223fefe18c38cde7c759ae528f934", "patch": "@@ -1,3 +1,17 @@\n+2018-09-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* common/config/i386/i386-common.c (ix86_get_valid_option_values):\n+\tUse processor_names table.\n+\t* config/i386/i386.c (ix86_default_align): Use\n+\tprocessor_cost_table for alignment values.\n+\t(ix86_option_override_internal): Use processor_names.\n+\t(ix86_function_specific_print): Likewise.\n+\t* config/i386/i386.h (struct processor_costs):\n+\tAdd alignment values.\n+\t(struct ptt): Remove and replace with const char *.\n+\t* config/i386/x86-tune-costs.h (struct processor_costs):\n+\tDeclare default alignments for all costs.\n+\n 2018-09-17  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-vrp.c (extract_range_from_unary_expr): Do not special case"}, {"sha": "3b5312d7250941b05c8eae6fe958d0f526976d30", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc58b50536223fefe18c38cde7c759ae528f934/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc58b50536223fefe18c38cde7c759ae528f934/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=7dc58b50536223fefe18c38cde7c759ae528f934", "patch": "@@ -1461,49 +1461,45 @@ i386_except_unwind_info (struct gcc_options *opts)\n #define TARGET_SUPPORTS_SPLIT_STACK ix86_supports_split_stack\n \n /* This table must be in sync with enum processor_type in i386.h.  */\n-const struct ptt processor_target_table[PROCESSOR_max] =\n+const char *const processor_names[PROCESSOR_max] =\n {\n-  /* The \"0:0:8\" label alignment specified for some processors generates\n-     secondary 8-byte alignment only for those label/jump/loop targets\n-     which have primary alignment.  */\n-\n-  {\"generic\",        \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"i386\",           \"4\",       \"4\",       NULL,    \"4\" },\n-  {\"i486\",           \"16\",      \"16\",      \"0:0:8\", \"16\"},\n-  {\"pentium\",        \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"lakemont\",       \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"pentiumpro\",     \"16\",      \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"pentium4\",       NULL,      NULL,      NULL,    NULL},\n-  {\"nocona\",         NULL,      NULL,      NULL,    NULL},\n-  {\"core2\",          \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"nehalem\",        \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"sandybridge\",    \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"haswell\",        \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"bonnell\",        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"silvermont\",     \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"goldmont\",       \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"goldmont-plus\",  \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"tremont\",        \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"knl\",            \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"knm\",            \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"skylake\",        \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"skylake-avx512\", \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"cannonlake\",     \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"icelake-client\", \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"icelake-server\", \"16:11:8\", \"16:11:8\", \"0:0:8\", \"16\"},\n-  {\"intel\",          \"16\",      \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"geode\",          NULL,      NULL,      NULL,    NULL},\n-  {\"k6\",             \"32:8:8\",  \"32:8:8\",  \"0:0:8\", \"32\"},\n-  {\"athlon\",         \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"k8\",             \"16:8:8\",  \"16:8:8\",  \"0:0:8\", \"16\"},\n-  {\"amdfam10\",       \"32:25:8\", \"32:8:8\",  \"0:0:8\", \"32\"},\n-  {\"bdver1\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"bdver2\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"bdver3\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"bdver4\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"btver1\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"btver2\",         \"16:11:8\", \"16:8:8\",  \"0:0:8\", \"11\"},\n-  {\"znver1\",         \"16\",      \"16\",      \"0:0:8\", \"16\"}\n+  \"generic\",\n+  \"i386\",\n+  \"i486\",\n+  \"pentium\",\n+  \"lakemont\",\n+  \"pentiumpro\",\n+  \"pentium4\",\n+  \"nocona\",\n+  \"core2\",\n+  \"nehalem\",\n+  \"sandybridge\",\n+  \"haswell\",\n+  \"bonnell\",\n+  \"silvermont\",\n+  \"goldmont\",\n+  \"goldmont-plus\",\n+  \"tremont\",\n+  \"knl\",\n+  \"knm\",\n+  \"skylake\",\n+  \"skylake-avx512\",\n+  \"cannonlake\",\n+  \"icelake-client\",\n+  \"icelake-server\",\n+  \"intel\",\n+  \"geode\",\n+  \"k6\",\n+  \"athlon\",\n+  \"k8\",\n+  \"amdfam10\",\n+  \"bdver1\",\n+  \"bdver2\",\n+  \"bdver3\",\n+  \"bdver4\",\n+  \"btver1\",\n+  \"btver2\",\n+  \"znver1\"\n };\n \n const pta processor_alias_table[] =\n@@ -1715,7 +1711,7 @@ ix86_get_valid_option_values (int option_code,\n       break;\n     case OPT_mtune_:\n       for (unsigned i = 0; i < PROCESSOR_max; i++)\n-\tv.safe_push (processor_target_table[i].name);\n+\tv.safe_push (processor_names[i]);\n       break;\n     default:\n       break;"}, {"sha": "96759de49bc184ca922a2735ae6fc396cb348e94", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc58b50536223fefe18c38cde7c759ae528f934/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc58b50536223fefe18c38cde7c759ae528f934/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7dc58b50536223fefe18c38cde7c759ae528f934", "patch": "@@ -3352,13 +3352,13 @@ ix86_default_align (struct gcc_options *opts)\n {\n   /* -falign-foo without argument: supply one.  */\n   if (opts->x_flag_align_loops && !opts->x_str_align_loops)\n-    opts->x_str_align_loops = processor_target_table[ix86_tune].align_loop;\n+    opts->x_str_align_loops = processor_cost_table[ix86_tune]->align_loop;\n   if (opts->x_flag_align_jumps && !opts->x_str_align_jumps)\n-    opts->x_str_align_jumps = processor_target_table[ix86_tune].align_jump;\n+    opts->x_str_align_jumps = processor_cost_table[ix86_tune]->align_jump;\n   if (opts->x_flag_align_labels && !opts->x_str_align_labels)\n-    opts->x_str_align_labels = processor_target_table[ix86_tune].align_label;\n+    opts->x_str_align_labels = processor_cost_table[ix86_tune]->align_label;\n   if (opts->x_flag_align_functions && !opts->x_str_align_functions)\n-    opts->x_str_align_functions = processor_target_table[ix86_tune].align_func;\n+    opts->x_str_align_functions = processor_cost_table[ix86_tune]->align_func;\n }\n \n /* Implement TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE hook.  */\n@@ -3488,8 +3488,7 @@ ix86_option_override_internal (bool main_args_p,\n \topts->x_ix86_tune_string = opts->x_ix86_arch_string;\n       if (!opts->x_ix86_tune_string)\n \t{\n-\t  opts->x_ix86_tune_string\n-\t    = processor_target_table[TARGET_CPU_DEFAULT].name;\n+\t  opts->x_ix86_tune_string = processor_names[TARGET_CPU_DEFAULT];\n \t  ix86_tune_defaulted = 1;\n \t}\n \n@@ -4940,12 +4939,12 @@ ix86_function_specific_print (FILE *file, int indent,\n   gcc_assert (ptr->arch < PROCESSOR_max);\n   fprintf (file, \"%*sarch = %d (%s)\\n\",\n \t   indent, \"\",\n-\t   ptr->arch, processor_target_table[ptr->arch].name);\n+\t   ptr->arch, processor_names[ptr->arch]);\n \n   gcc_assert (ptr->tune < PROCESSOR_max);\n   fprintf (file, \"%*stune = %d (%s)\\n\",\n \t   indent, \"\",\n-\t   ptr->tune, processor_target_table[ptr->tune].name);\n+\t   ptr->tune, processor_names[ptr->tune]);\n \n   fprintf (file, \"%*sbranch_cost = %d\\n\", indent, \"\", ptr->branch_cost);\n "}, {"sha": "01eba5dd01fba83c6624d5388af3c5ac7a4310b6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc58b50536223fefe18c38cde7c759ae528f934/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc58b50536223fefe18c38cde7c759ae528f934/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7dc58b50536223fefe18c38cde7c759ae528f934", "patch": "@@ -311,6 +311,14 @@ struct processor_costs {\n \t\t\t\t\t  cost model.  */\n   const int cond_not_taken_branch_cost;/* Cost of not taken branch for\n \t\t\t\t\t  vectorizer cost model.  */\n+\n+  /* The \"0:0:8\" label alignment specified for some processors generates\n+     secondary 8-byte alignment only for those label/jump/loop targets\n+     which have primary alignment.  */\n+  const char *const align_loop;\t\t/* Loop alignment.  */\n+  const char *const align_jump;\t\t/* Jump alignment.  */\n+  const char *const align_label;\t/* Label alignment.  */\n+  const char *const align_func;\t\t/* Function alignment.  */\n };\n \n extern const struct processor_costs *ix86_cost;\n@@ -2278,19 +2286,7 @@ enum processor_type\n };\n \n #if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS) && !defined(IN_RTS)\n-/* Processor target table, indexed by processor number */\n-struct ptt\n-{\n-  const char *const name;\t\t\t/* processor name  */\n-\n-  /* Default alignments.  */\n-  const char *const align_loop;\n-  const char *const align_jump;\n-  const char *const align_label;\n-  const char *const align_func;\n-};\n-\n-extern const struct ptt processor_target_table[PROCESSOR_max];\n+extern const char *const processor_names[PROCESSOR_max];\n \n #include \"wide-int-bitmask.h\"\n "}, {"sha": "71a5854c09a6183e91a52b0ed910aac2384b8e5a", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc58b50536223fefe18c38cde7c759ae528f934/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc58b50536223fefe18c38cde7c759ae528f934/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=7dc58b50536223fefe18c38cde7c759ae528f934", "patch": "@@ -111,6 +111,10 @@ struct processor_costs ix86_size_cost = {/* costs for tuning for size */\n   ix86_size_memset,\n   COSTS_N_BYTES (1),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_BYTES (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  NULL,\t\t\t\t\t/* Loop alignment.  */\n+  NULL,\t\t\t\t\t/* Jump alignment.  */\n+  NULL,\t\t\t\t\t/* Label alignment.  */\n+  NULL,\t\t\t\t\t/* Func alignment.  */\n };\n \n /* Processor costs (relative to an add) */\n@@ -197,6 +201,10 @@ struct processor_costs i386_cost = {\t/* 386 specific costs */\n   i386_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"4\",\t\t\t\t\t/* Loop alignment.  */\n+  \"4\",\t\t\t\t\t/* Jump alignment.  */\n+  NULL,\t\t\t\t\t/* Label alignment.  */\n+  \"4\",\t\t\t\t\t/* Func alignment.  */\n };\n \n static stringop_algs i486_memcpy[2] = {\n@@ -284,6 +292,10 @@ struct processor_costs i486_cost = {\t/* 486 specific costs */\n   i486_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16\",\t\t\t\t\t/* Loop alignment.  */\n+  \"16\",\t\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n static stringop_algs pentium_memcpy[2] = {\n@@ -369,6 +381,10 @@ struct processor_costs pentium_cost = {\n   pentium_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:8:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n static const\n@@ -447,6 +463,10 @@ struct processor_costs lakemont_cost = {\n   pentium_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:8:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n /* PentiumPro has optimized rep instructions for blocks aligned by 8 bytes\n@@ -540,6 +560,10 @@ struct processor_costs pentiumpro_cost = {\n   pentiumpro_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16\",\t\t\t\t\t/* Loop alignment.  */\n+  \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n static stringop_algs geode_memcpy[2] = {\n@@ -625,6 +649,10 @@ struct processor_costs geode_cost = {\n   geode_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  NULL,\t\t\t\t\t/* Loop alignment.  */\n+  NULL,\t\t\t\t\t/* Jump alignment.  */\n+  NULL,\t\t\t\t\t/* Label alignment.  */\n+  NULL,\t\t\t\t\t/* Func alignment.  */\n };\n \n static stringop_algs k6_memcpy[2] = {\n@@ -712,6 +740,10 @@ struct processor_costs k6_cost = {\n   k6_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"32:8:8\",\t\t\t\t/* Loop alignment.  */\n+  \"32:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"32\",\t\t\t\t\t/* Func alignment.  */\n };\n \n /* For some reason, Athlon deals better with REP prefix (relative to loops)\n@@ -800,6 +832,10 @@ struct processor_costs athlon_cost = {\n   athlon_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:8:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n /* K8 has optimized REP instruction for medium sized blocks, but for very\n@@ -897,6 +933,10 @@ struct processor_costs k8_cost = {\n   k8_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:8:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n /* AMDFAM10 has optimized REP instruction for medium sized blocks, but for\n@@ -1001,6 +1041,10 @@ struct processor_costs amdfam10_cost = {\n   amdfam10_memset,\n   COSTS_N_INSNS (2),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"32:25:8\",\t\t\t\t/* Loop alignment.  */\n+  \"32:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"32\",\t\t\t\t\t/* Func alignment.  */\n };\n \n /*  BDVER1 has optimized REP instruction for medium sized blocks, but for\n@@ -1099,6 +1143,10 @@ const struct processor_costs bdver1_cost = {\n   bdver1_memset,\n   COSTS_N_INSNS (4),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"11\",\t\t\t\t\t/* Func alignment.  */\n };\n \n /*  BDVER2 has optimized REP instruction for medium sized blocks, but for\n@@ -1198,6 +1246,10 @@ const struct processor_costs bdver2_cost = {\n   bdver2_memset,\n   COSTS_N_INSNS (4),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"11\",\t\t\t\t\t/* Func alignment.  */\n };\n \n \n@@ -1296,6 +1348,10 @@ struct processor_costs bdver3_cost = {\n   bdver3_memset,\n   COSTS_N_INSNS (4),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"11\",\t\t\t\t\t/* Func alignment.  */\n };\n \n /*  BDVER4 has optimized REP instruction for medium sized blocks, but for\n@@ -1393,6 +1449,10 @@ struct processor_costs bdver4_cost = {\n   bdver4_memset,\n   COSTS_N_INSNS (4),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"11\",\t\t\t\t\t/* Func alignment.  */\n };\n \n \n@@ -1513,6 +1573,10 @@ struct processor_costs znver1_cost = {\n   znver1_memset,\n   COSTS_N_INSNS (4),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16\",\t\t\t\t\t/* Loop alignment.  */\n+  \"16\",\t\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n /* skylake_cost should produce code tuned for Skylake familly of CPUs.  */\n@@ -1605,6 +1669,10 @@ struct processor_costs skylake_cost = {\n   skylake_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n   /* BTVER1 has optimized REP instruction for medium sized blocks, but for\n      very small blocks it is better to use loop. For large blocks, libcall can\n@@ -1694,6 +1762,10 @@ const struct processor_costs btver1_cost = {\n   btver1_memset,\n   COSTS_N_INSNS (2),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"11\",\t\t\t\t\t/* Func alignment.  */\n };\n \n static stringop_algs btver2_memcpy[2] = {\n@@ -1781,6 +1853,10 @@ const struct processor_costs btver2_cost = {\n   btver2_memset,\n   COSTS_N_INSNS (2),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"11\",\t\t\t\t\t/* Func alignment.  */\n };\n \n static stringop_algs pentium4_memcpy[2] = {\n@@ -1867,6 +1943,10 @@ struct processor_costs pentium4_cost = {\n   pentium4_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  NULL,\t\t\t\t\t/* Loop alignment.  */\n+  NULL,\t\t\t\t\t/* Jump alignment.  */\n+  NULL,\t\t\t\t\t/* Label alignment.  */\n+  NULL,\t\t\t\t\t/* Func alignment.  */\n };\n \n static stringop_algs nocona_memcpy[2] = {\n@@ -1956,6 +2036,10 @@ struct processor_costs nocona_cost = {\n   nocona_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  NULL,\t\t\t\t\t/* Loop alignment.  */\n+  NULL,\t\t\t\t\t/* Jump alignment.  */\n+  NULL,\t\t\t\t\t/* Label alignment.  */\n+  NULL,\t\t\t\t\t/* Func alignment.  */\n };\n \n static stringop_algs atom_memcpy[2] = {\n@@ -2043,6 +2127,10 @@ struct processor_costs atom_cost = {\n   atom_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16\",\t\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n static stringop_algs slm_memcpy[2] = {\n@@ -2130,6 +2218,10 @@ struct processor_costs slm_cost = {\n   slm_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16\",\t\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n static stringop_algs intel_memcpy[2] = {\n@@ -2217,6 +2309,10 @@ struct processor_costs intel_cost = {\n   intel_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16\",\t\t\t\t\t/* Loop alignment.  */\n+  \"16:8:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n /* Generic should produce code tuned for Core-i7 (and newer chips)\n@@ -2313,6 +2409,10 @@ struct processor_costs generic_cost = {\n   generic_memset,\n   COSTS_N_INSNS (4),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n /* core_cost should produce code tuned for Core familly of CPUs.  */\n@@ -2416,5 +2516,9 @@ struct processor_costs core_cost = {\n   core_memset,\n   COSTS_N_INSNS (3),\t\t\t/* cond_taken_branch_cost.  */\n   COSTS_N_INSNS (1),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16:11:8\",\t\t\t\t/* Loop alignment.  */\n+  \"16:11:8\",\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n "}]}