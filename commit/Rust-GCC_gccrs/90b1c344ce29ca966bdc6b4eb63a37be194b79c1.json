{"sha": "90b1c344ce29ca966bdc6b4eb63a37be194b79c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBiMWMzNDRjZTI5Y2E5NjZiZGM2YjRlYjYzYTM3YmUxOTRiNzljMQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "ook@ucw.cz", "date": "2007-09-17T15:38:48Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-09-17T15:38:48Z"}, "message": "re PR rtl-optimization/26449 (ICE in loop invariant motion)\n\n\tPR rtl-optimization/26449\n\t* loop-invariant.c (move_invariant_reg): Do not use force_operand.\n\t(seq_insns_valid_p): Removed.\n\nFrom-SVN: r128549", "tree": {"sha": "0ed5f441b7efcebdfd2d9a9ed091d473b2b0eba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ed5f441b7efcebdfd2d9a9ed091d473b2b0eba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90b1c344ce29ca966bdc6b4eb63a37be194b79c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b1c344ce29ca966bdc6b4eb63a37be194b79c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b1c344ce29ca966bdc6b4eb63a37be194b79c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b1c344ce29ca966bdc6b4eb63a37be194b79c1/comments", "author": {"login": "rakdver", "id": 20416833, "node_id": "MDQ6VXNlcjIwNDE2ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/20416833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakdver", "html_url": "https://github.com/rakdver", "followers_url": "https://api.github.com/users/rakdver/followers", "following_url": "https://api.github.com/users/rakdver/following{/other_user}", "gists_url": "https://api.github.com/users/rakdver/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakdver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakdver/subscriptions", "organizations_url": "https://api.github.com/users/rakdver/orgs", "repos_url": "https://api.github.com/users/rakdver/repos", "events_url": "https://api.github.com/users/rakdver/events{/privacy}", "received_events_url": "https://api.github.com/users/rakdver/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e872811464621776df4021e028a536c97a43eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e872811464621776df4021e028a536c97a43eba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e872811464621776df4021e028a536c97a43eba"}], "stats": {"total": 83, "additions": 24, "deletions": 59}, "files": [{"sha": "ffa25b9caca642e34b220a607c8c84e38f9f130d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b1c344ce29ca966bdc6b4eb63a37be194b79c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b1c344ce29ca966bdc6b4eb63a37be194b79c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90b1c344ce29ca966bdc6b4eb63a37be194b79c1", "patch": "@@ -1,3 +1,9 @@\n+2007-09-17  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR rtl-optimization/26449\n+\t* loop-invariant.c (move_invariant_reg): Do not use force_operand.\n+\t(seq_insns_valid_p): Removed.\n+\n 2007-09-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-nomudflap.c (gate_mudflap): New static function."}, {"sha": "ba1f2888b009677bdaf01e91171d67395bcfea86", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 18, "deletions": 59, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b1c344ce29ca966bdc6b4eb63a37be194b79c1/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b1c344ce29ca966bdc6b4eb63a37be194b79c1/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=90b1c344ce29ca966bdc6b4eb63a37be194b79c1", "patch": "@@ -1154,20 +1154,6 @@ find_invariants_to_move (void)\n     }\n }\n \n-/* Returns true if all insns in SEQ are valid.  */\n-\n-static bool\n-seq_insns_valid_p (rtx seq)\n-{\n-  rtx x;\n-\n-  for (x = seq; x; x = NEXT_INSN (x))\n-    if (insn_invalid_p (x))\n-      return false;\n-\n-  return true;\n-}\n-\n /* Move invariant INVNO out of the LOOP.  Returns true if this succeeds, false\n    otherwise.  */\n \n@@ -1178,7 +1164,7 @@ move_invariant_reg (struct loop *loop, unsigned invno)\n   struct invariant *repr = VEC_index (invariant_p, invariants, inv->eqto);\n   unsigned i;\n   basic_block preheader = loop_preheader_edge (loop)->src;\n-  rtx reg, set, dest, seq, op;\n+  rtx reg, set, dest, note;\n   struct use *use;\n   bitmap_iterator bi;\n \n@@ -1209,50 +1195,23 @@ move_invariant_reg (struct loop *loop, unsigned invno)\n       dest = SET_DEST (set);\n       reg = gen_reg_rtx (GET_MODE (dest));\n \n-      /* If the SET_DEST of the invariant insn is a pseudo, we can just move\n-\t the insn out of the loop.  Otherwise, we have to use gen_move_insn\n-\t to let emit_move_insn produce a valid instruction stream.  */\n-      if (REG_P (dest) && !HARD_REGISTER_P (dest))\n-\t{\n-\t  rtx note;\n-\n-\t  emit_insn_after (gen_move_insn (dest, reg), inv->insn);\n-\t  SET_DEST (set) = reg;\n-\t  df_insn_rescan (inv->insn);\n-\t  reorder_insns (inv->insn, inv->insn, BB_END (preheader));\n-\n-\t  /* If there is a REG_EQUAL note on the insn we just moved, and\n-\t     insn is in a basic block that is not always executed, the note\n-\t     may no longer be valid after we move the insn.\n-\t     Note that uses in REG_EQUAL notes are taken into account in\n-\t     the computation of invariants.  Hence it is safe to retain the\n-\t     note even if the note contains register references.  */\n-\t  if (! inv->always_executed\n-\t      && (note = find_reg_note (inv->insn, REG_EQUAL, NULL_RTX)))\n-\t    remove_note (inv->insn, note);\n-\t}\n-      else\n-\t{\n-\t  start_sequence ();\n-\t  op = force_operand (SET_SRC (set), reg);\n-\t  if (!op)\n-\t    {\n-\t      end_sequence ();\n-\t      goto fail;\n-\t    }\n-\t  if (op != reg)\n-\t    emit_move_insn (reg, op);\n-\t  seq = get_insns ();\n-\t  unshare_all_rtl_in_chain (seq);\n-\t  end_sequence ();\n-\n-\t  if (!seq_insns_valid_p (seq))\n-\t    goto fail;\n-\t  emit_insn_after (seq, BB_END (preheader));\n-      \n-\t  emit_insn_after (gen_move_insn (dest, reg), inv->insn);\n-\t  delete_insn (inv->insn);\n-\t}\n+      /* Try replacing the destination by a new pseudoregister.  */\n+      if (!validate_change (inv->insn, &SET_DEST (set), reg, false))\n+\tgoto fail;\n+      df_insn_rescan (inv->insn);\n+\n+      emit_insn_after (gen_move_insn (dest, reg), inv->insn);\n+      reorder_insns (inv->insn, inv->insn, BB_END (preheader));\n+\n+      /* If there is a REG_EQUAL note on the insn we just moved, and\n+\t insn is in a basic block that is not always executed, the note\n+\t may no longer be valid after we move the insn.\n+\t Note that uses in REG_EQUAL notes are taken into account in\n+\t the computation of invariants.  Hence it is safe to retain the\n+\t note even if the note contains register references.  */\n+      if (! inv->always_executed\n+\t  && (note = find_reg_note (inv->insn, REG_EQUAL, NULL_RTX)))\n+\tremove_note (inv->insn, note);\n     }\n   else\n     {"}]}