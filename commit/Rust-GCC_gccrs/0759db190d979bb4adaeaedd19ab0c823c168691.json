{"sha": "0759db190d979bb4adaeaedd19ab0c823c168691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc1OWRiMTkwZDk3OWJiNGFkYWVhZWRkMTlhYjBjODIzYzE2ODY5MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-06-22T12:07:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-06-22T12:07:07Z"}, "message": "tree-vect-loop.c (vect_model_reduction_cost): Handle COND_REDUCTION and INTEGER_INDUC_COND_REDUCTION without REDUC_MAX_EXPR...\n\n2016-06-22  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (vect_model_reduction_cost): Handle\n\tCOND_REDUCTION and INTEGER_INDUC_COND_REDUCTION without\n\tREDUC_MAX_EXPR support.\n\t(vectorizable_reduction): Likewise.\n\t(vect_create_epilog_for_reduction): Likewise.\n\n\t* gcc.dg/vect/pr65947-1.c: Remove xfail.\n\t* gcc.dg/vect/pr65947-2.c: Likewise.\n\t* gcc.dg/vect/pr65947-3.c: Likewise.\n\t* gcc.dg/vect/pr65947-4.c: Likewise.\n\t* gcc.dg/vect/pr65947-5.c: Likewise.\n\t* gcc.dg/vect/pr65947-6.c: Likewise.\n\t* gcc.dg/vect/pr65947-8.c: Likewise.\n\t* gcc.dg/vect/pr65947-9.c: Likewise.\n\t* gcc.dg/vect/pr65947-10.c: Likewise.\n\t* gcc.dg/vect/pr65947-12.c: Likewise.\n\t* gcc.dg/vect/pr65947-13.c: Likewise.\n\t* gcc.dg/vect/pr65947-14.c: Likewise.\n\t* gcc.dg/vect/vect-cond-2.c: Likewise.\n\t* gcc.dg/vect/vect-pr69848.c: Likewise.\n\nFrom-SVN: r249553", "tree": {"sha": "0e282173be1b940aa536c4282fc27b3fad6510e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e282173be1b940aa536c4282fc27b3fad6510e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0759db190d979bb4adaeaedd19ab0c823c168691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0759db190d979bb4adaeaedd19ab0c823c168691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0759db190d979bb4adaeaedd19ab0c823c168691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0759db190d979bb4adaeaedd19ab0c823c168691/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c24c235efacf23441fdae032eb66540143f11c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c24c235efacf23441fdae032eb66540143f11c1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c24c235efacf23441fdae032eb66540143f11c1d"}], "stats": {"total": 191, "additions": 147, "deletions": 44}, "files": [{"sha": "4b78674ee3fc80539b5a3e944e152270b39d780a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -1,3 +1,11 @@\n+2016-06-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_model_reduction_cost): Handle\n+\tCOND_REDUCTION and INTEGER_INDUC_COND_REDUCTION without\n+\tREDUC_MAX_EXPR support.\n+\t(vectorizable_reduction): Likewise.\n+\t(vect_create_epilog_for_reduction): Likewise.\n+\n 2017-06-22  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* match.pd (A / (1 << B) -> A >> B): New."}, {"sha": "641e4124e377cec2d1341937263b41d2e8b28ab7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -1,3 +1,20 @@\n+2016-06-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/pr65947-1.c: Remove xfail.\n+\t* gcc.dg/vect/pr65947-2.c: Likewise.\n+\t* gcc.dg/vect/pr65947-3.c: Likewise.\n+\t* gcc.dg/vect/pr65947-4.c: Likewise.\n+\t* gcc.dg/vect/pr65947-5.c: Likewise.\n+\t* gcc.dg/vect/pr65947-6.c: Likewise.\n+\t* gcc.dg/vect/pr65947-8.c: Likewise.\n+\t* gcc.dg/vect/pr65947-9.c: Likewise.\n+\t* gcc.dg/vect/pr65947-10.c: Likewise.\n+\t* gcc.dg/vect/pr65947-12.c: Likewise.\n+\t* gcc.dg/vect/pr65947-13.c: Likewise.\n+\t* gcc.dg/vect/pr65947-14.c: Likewise.\n+\t* gcc.dg/vect/vect-cond-2.c: Likewise.\n+\t* gcc.dg/vect/vect-pr69848.c: Likewise.\n+\n 2017-06-22  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/tree-ssa/ipa-split-5.c: Make function bigger in order"}, {"sha": "9072f11a104cf9bef736c9c54afaa36e9a5cc61c", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-1.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -40,5 +40,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { xfail { ! vect_max_reduc } } } } */\n-/* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 4 \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 4 \"vect\" } } */"}, {"sha": "a8a674f40f0d404b9f8718656b34d4b50bdb1e4e", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-10.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -40,6 +40,6 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */\n "}, {"sha": "8e2c46f1a6b75c838d0f6b9fdad813d3c34e6902", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-12.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -41,5 +41,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "061777af34c2945b3c4732a18280257092e7c41f", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-13.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -41,5 +41,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "a28e80bb9fcfa881b559886e4322aab05ed8d317", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-14.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -40,5 +40,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 4 \"vect\" } } */"}, {"sha": "d72fffa6720a08682641efc9a131142634243d5a", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-2.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -41,5 +41,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "98945ba505d3dd8fdbd8fb33962b1801ebcf097f", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-3.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -51,5 +51,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "695889d743b422c599a6b7b6576e6384259bd56e", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-4.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -40,6 +40,6 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { xfail { ! vect_max_reduc } } } } */\n-/* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 4 \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"condition expression based on integer induction.\" 4 \"vect\" } } */\n "}, {"sha": "04d9b38d58aa678b90c10b6ab75d63b7896e52fc", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-5.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -41,6 +41,6 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 1 \"vect\" { xfail { ! vect_max_reduc } } } } */\n-/* { dg-final { scan-tree-dump \"loop size is greater than data size\" \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump \"loop size is greater than data size\" \"vect\" } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "caa4a14120ad6c49bf16368d5dfbc7792d04feb9", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-6.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -40,5 +40,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump-times \"LOOP VECTORIZED\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-not \"condition expression based on integer induction.\" \"vect\" } } */"}, {"sha": "f0f1ac29699fabb01582b9ee10705e17ee3b802d", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-8.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -42,4 +42,4 @@ main (void)\n }\n \n /* { dg-final { scan-tree-dump-not \"LOOP VECTORIZED\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump \"multiple types in double reduction or condition reduction\" \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump \"multiple types in double reduction or condition reduction\" \"vect\" } } */"}, {"sha": "d769af9ec732fd00e483636cee66652f0d1cebd9", "filename": "gcc/testsuite/gcc.dg/vect/pr65947-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65947-9.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -46,4 +46,4 @@ main ()\n }\n \n /* { dg-final { scan-tree-dump-not \"LOOP VECTORIZED\" \"vect\" } } */\n-/* { dg-final { scan-tree-dump \"loop size is greater than data size\" \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump \"loop size is greater than data size\" \"vect\" } } */"}, {"sha": "094cfe76701be295891c30b3253c06dcfe23ab1b", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-2.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -39,6 +39,4 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { ! vect_max_reduc } } } } */\n-\n-\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */"}, {"sha": "c08f1e2f5c0a14b55de7cd070c8c94fb1d872e06", "filename": "gcc/testsuite/gcc.dg/vect/vect-pr69848.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pr69848.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pr69848.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-pr69848.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -34,4 +34,4 @@ int main (void)\n \n   return 0;\n }\n-/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { xfail { ! vect_max_reduc } } } } */\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */"}, {"sha": "a7c3d3d7e29752f4a4b9b2658c5da6d02e49d91b", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 105, "deletions": 25, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0759db190d979bb4adaeaedd19ab0c823c168691/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=0759db190d979bb4adaeaedd19ab0c823c168691", "patch": "@@ -3772,6 +3772,18 @@ vect_model_reduction_cost (stmt_vec_info stmt_info, enum tree_code reduc_code,\n \t\t\t\t\t      vect_epilogue);\n \t    }\n \t}\n+      else if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) == COND_REDUCTION)\n+\t{\n+\t  unsigned nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+\t  /* Extraction of scalar elements.  */\n+\t  epilogue_cost += add_stmt_cost (target_cost_data, 2 * nunits,\n+\t\t\t\t\t  vec_to_scalar, stmt_info, 0,\n+\t\t\t\t\t  vect_epilogue);\n+\t  /* Scalar max reductions via COND_EXPR / MAX_EXPR.  */\n+\t  epilogue_cost += add_stmt_cost (target_cost_data, 2 * nunits - 3,\n+\t\t\t\t\t  scalar_stmt, stmt_info, 0,\n+\t\t\t\t\t  vect_epilogue);\n+\t}\n       else\n \t{\n \t  int vec_size_in_bits = tree_to_uhwi (TYPE_SIZE (vectype));\n@@ -3780,10 +3792,14 @@ vect_model_reduction_cost (stmt_vec_info stmt_info, enum tree_code reduc_code,\n \t  int element_bitsize = tree_to_uhwi (bitsize);\n \t  int nelements = vec_size_in_bits / element_bitsize;\n \n+\t  if (code == COND_EXPR)\n+\t    code = MAX_EXPR;\n+\n \t  optab = optab_for_tree_code (code, vectype, optab_default);\n \n \t  /* We have a whole vector shift available.  */\n-\t  if (VECTOR_MODE_P (mode)\n+\t  if (optab != unknown_optab\n+\t      && VECTOR_MODE_P (mode)\n \t      && optab_handler (optab, mode) != CODE_FOR_nothing\n \t      && have_whole_vector_shift (mode))\n \t    {\n@@ -4424,7 +4440,8 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n   else\n     new_phi_result = PHI_RESULT (new_phis[0]);\n \n-  if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) == COND_REDUCTION)\n+  if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) == COND_REDUCTION\n+      && reduc_code != ERROR_MARK)\n     {\n       /* For condition reductions, we have a vector (NEW_PHI_RESULT) containing\n \t various data values where the condition matched and another vector\n@@ -4536,6 +4553,70 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n       gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n       scalar_results.safe_push (new_temp);\n     }\n+  else if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) == COND_REDUCTION\n+\t   && reduc_code == ERROR_MARK)\n+    {\n+      /* Condition redution without supported REDUC_MAX_EXPR.  Generate\n+\t idx = 0;\n+         idx_val = induction_index[0];\n+\t val = data_reduc[0];\n+         for (idx = 0, val = init, i = 0; i < nelts; ++i)\n+\t   if (induction_index[i] > idx_val)\n+\t     val = data_reduc[i], idx_val = induction_index[i];\n+\t return val;  */\n+\n+      tree data_eltype = TREE_TYPE (TREE_TYPE (new_phi_result));\n+      tree idx_eltype = TREE_TYPE (TREE_TYPE (induction_index));\n+      unsigned HOST_WIDE_INT el_size = tree_to_uhwi (TYPE_SIZE (idx_eltype));\n+      unsigned HOST_WIDE_INT v_size\n+\t= el_size * TYPE_VECTOR_SUBPARTS (TREE_TYPE (induction_index));\n+      tree idx_val = NULL_TREE, val = NULL_TREE;\n+      for (unsigned HOST_WIDE_INT off = 0; off < v_size; off += el_size)\n+\t{\n+\t  tree old_idx_val = idx_val;\n+\t  tree old_val = val;\n+\t  idx_val = make_ssa_name (idx_eltype);\n+\t  epilog_stmt = gimple_build_assign (idx_val, BIT_FIELD_REF,\n+\t\t\t\t\t     build3 (BIT_FIELD_REF, idx_eltype,\n+\t\t\t\t\t\t     induction_index,\n+\t\t\t\t\t\t     bitsize_int (el_size),\n+\t\t\t\t\t\t     bitsize_int (off)));\n+\t  gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n+\t  val = make_ssa_name (data_eltype);\n+\t  epilog_stmt = gimple_build_assign (val, BIT_FIELD_REF,\n+\t\t\t\t\t     build3 (BIT_FIELD_REF,\n+\t\t\t\t\t\t     data_eltype,\n+\t\t\t\t\t\t     new_phi_result,\n+\t\t\t\t\t\t     bitsize_int (el_size),\n+\t\t\t\t\t\t     bitsize_int (off)));\n+\t  gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n+\t  if (off != 0)\n+\t    {\n+\t      tree new_idx_val = idx_val;\n+\t      tree new_val = val;\n+\t      if (off != v_size - el_size)\n+\t\t{\n+\t\t  new_idx_val = make_ssa_name (idx_eltype);\n+\t\t  epilog_stmt = gimple_build_assign (new_idx_val,\n+\t\t\t\t\t\t     MAX_EXPR, idx_val,\n+\t\t\t\t\t\t     old_idx_val);\n+\t\t  gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n+\t\t}\n+\t      new_val = make_ssa_name (data_eltype);\n+\t      epilog_stmt = gimple_build_assign (new_val,\n+\t\t\t\t\t\t COND_EXPR,\n+\t\t\t\t\t\t build2 (GT_EXPR,\n+\t\t\t\t\t\t\t boolean_type_node,\n+\t\t\t\t\t\t\t idx_val,\n+\t\t\t\t\t\t\t old_idx_val),\n+\t\t\t\t\t\t val, old_val);\n+\t      gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n+\t      idx_val = new_idx_val;\n+\t      val = new_val;\n+\t    }\n+\t}\n+      scalar_results.safe_push (val);\n+    }\n \n   /* 2.3 Create the reduction code, using one of the three schemes described\n          above. In SLP we simply need to extract all the elements from the \n@@ -4598,6 +4679,10 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n       int vec_size_in_bits = tree_to_uhwi (TYPE_SIZE (vectype));\n       tree vec_temp;\n \n+      /* COND reductions all do the final reduction with MAX_EXPR.  */\n+      if (code == COND_EXPR)\n+\tcode = MAX_EXPR;\n+\n       /* Regardless of whether we have a whole vector shift, if we're\n          emulating the operation via tree-vect-generic, we don't want\n          to use it.  Only the first round of the reduction is likely\n@@ -4763,6 +4848,22 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n             /* Not SLP - we have one scalar to keep in SCALAR_RESULTS.  */\n             scalar_results.safe_push (new_temp);\n         }\n+\n+      if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n+\t  == INTEGER_INDUC_COND_REDUCTION)\n+\t{\n+\t  /* Earlier we set the initial value to be zero.  Check the result\n+\t     and if it is zero then replace with the original initial\n+\t     value.  */\n+\t  tree zero = build_zero_cst (scalar_type);\n+\t  tree zcompare = build2 (EQ_EXPR, boolean_type_node, new_temp, zero);\n+\n+\t  tree tmp = make_ssa_name (new_scalar_dest);\n+\t  epilog_stmt = gimple_build_assign (tmp, COND_EXPR, zcompare,\n+\t\t\t\t\t     initial_def, new_temp);\n+\t  gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n+\t  scalar_results[0] = tmp;\n+\t}\n     }\n   \n vect_finalize_reduction:\n@@ -5639,21 +5740,6 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \n \t      epilog_reduc_code = ERROR_MARK;\n \t    }\n-\n-\t  /* When epilog_reduc_code is ERROR_MARK then a reduction will be\n-\t     generated in the epilog using multiple expressions.  This does not\n-\t     work for condition reductions.  */\n-\t  if (epilog_reduc_code == ERROR_MARK\n-\t      && (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n-\t\t\t== INTEGER_INDUC_COND_REDUCTION\n-\t\t  || STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n-\t\t\t== CONST_COND_REDUCTION))\n-\t    {\n-\t      if (dump_enabled_p ())\n-\t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t\t \"no reduc code for scalar code.\\n\");\n-\t      return false;\n-\t    }\n \t}\n       else\n \t{\n@@ -5674,17 +5760,11 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n       cr_index_vector_type = build_vector_type\n \t(cr_index_scalar_type, TYPE_VECTOR_SUBPARTS (vectype_out));\n \n-      epilog_reduc_code = REDUC_MAX_EXPR;\n       optab = optab_for_tree_code (REDUC_MAX_EXPR, cr_index_vector_type,\n \t\t\t\t   optab_default);\n       if (optab_handler (optab, TYPE_MODE (cr_index_vector_type))\n-\t  == CODE_FOR_nothing)\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"reduc max op not supported by target.\\n\");\n-\t  return false;\n-\t}\n+\t  != CODE_FOR_nothing)\n+\tepilog_reduc_code = REDUC_MAX_EXPR;\n     }\n \n   if ((double_reduc"}]}