{"sha": "d3c40837991a971dc9c72e144324dc8758d3ea38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNjNDA4Mzc5OTFhOTcxZGM5YzcyZTE0NDMyNGRjODc1OGQzZWEzOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-04T18:05:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-04T18:05:06Z"}, "message": "* config/h8300/h8300.md: Add comments about peephole2's.\n\nFrom-SVN: r78921", "tree": {"sha": "bfacf793cedcd1a55cfa793c40c99522afd639ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfacf793cedcd1a55cfa793c40c99522afd639ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3c40837991a971dc9c72e144324dc8758d3ea38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c40837991a971dc9c72e144324dc8758d3ea38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3c40837991a971dc9c72e144324dc8758d3ea38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3c40837991a971dc9c72e144324dc8758d3ea38/comments", "author": null, "committer": null, "parents": [{"sha": "eb3d7f9d1f9e562b379585773a26920e2cceab30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3d7f9d1f9e562b379585773a26920e2cceab30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb3d7f9d1f9e562b379585773a26920e2cceab30"}], "stats": {"total": 77, "additions": 68, "deletions": 9}, "files": [{"sha": "13ce22dab689717754fa07446f0d0c8536d7e60b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c40837991a971dc9c72e144324dc8758d3ea38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c40837991a971dc9c72e144324dc8758d3ea38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3c40837991a971dc9c72e144324dc8758d3ea38", "patch": "@@ -1,3 +1,7 @@\n+2004-03-04  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.md: Add comments about peephole2's.\n+\n 2004-03-04  Steven Bosscher  <stevenb@suse.de>\n \n \t* i386.h (TARGET_CPU_DEFAULT_nocona): Fix value."}, {"sha": "b653cc9e1d7cdcf0e6d88b99ff8b0df17129e7a6", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 64, "deletions": 9, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3c40837991a971dc9c72e144324dc8758d3ea38/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3c40837991a971dc9c72e144324dc8758d3ea38/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=d3c40837991a971dc9c72e144324dc8758d3ea38", "patch": "@@ -4373,8 +4373,15 @@\n ;;\n ;; ---- 65535                       geu/ltu mov.w\n \n-;; For a small constant, it is cheaper to actually do the subtraction\n-;; and then test the register.\n+;; Transform\n+;;\n+;;\tcmp.l\t#1,er0\n+;;\tbeq\t.L1\n+;;\n+;; into\n+;;\n+;;\tdec.l\t#1,er0\n+;;\tbeq\t.L1\n \n (define_peephole2\n   [(set (cc0)\n@@ -4399,6 +4406,16 @@\n \t\t      (pc)))]\n   \"operands[4] = GEN_INT (- INTVAL (operands[1]));\")\n \n+;; Transform\n+;;\n+;;\tcmp.l\t#65536,er0\n+;;\tbeq\t.L1\n+;;\n+;; into\n+;;\n+;;\tdec.l\t#1,e0\n+;;\tbeq\t.L1\n+\n (define_peephole2\n   [(set (cc0)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n@@ -4425,9 +4442,16 @@\n \t\t      (pc)))]\n   \"operands[4] = GEN_INT (- INTVAL (operands[1]));\")\n \n-;; For certain (in)equality comparisons against a constant, we can\n-;; XOR the register with the constant, and test the register against\n-;; 0.\n+;; Transform\n+;;\n+;;\tcmp.l\t#100,er0\n+;;\tbeq\t.L1\n+;;\n+;; into\n+;;\n+;;\txor.b\t#100,er0\n+;;\tmov.l\ter0,er0\n+;;\tbeq\t.L1\n \n (define_peephole2\n   [(set (cc0)\n@@ -4456,6 +4480,17 @@\n \t\t      (pc)))]\n   \"\")\n \n+;; Transform\n+;;\n+;;\tcmp.l\t#-100,er0\n+;;\tbeq\t.L1\n+;;\n+;; into\n+;;\n+;;\txor.b\t#99,er0\n+;;\tnot.l\ter0\n+;;\tbeq\t.L1\n+\n (define_peephole2\n   [(set (cc0)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n@@ -4484,6 +4519,17 @@\n \t\t      (pc)))]\n   \"operands[4] = GEN_INT (INTVAL (operands[1]) ^ -1);\")\n \n+;; Transform\n+;;\n+;;\tcmp.l\t#-2147483648,er0\n+;;\tbeq\t.L1\n+;;\n+;; into\n+;;\n+;;\trotl.l\ter0\n+;;\tdec.l\t#1,er0\n+;;\tbeq\t.L1\n+\n (define_peephole2\n   [(set (cc0)\n \t(compare (match_operand:SI 0 \"register_operand\" \"\")\n@@ -4829,10 +4875,19 @@\n \t\t\t\tconst0_rtx);\n })\n \n-;; For constants like -1, -2, 1, 2, it is still cheaper to make a copy\n-;; of the register being tested, do the subtraction on the copy, and\n-;; then test the copy.  We avoid this transformation if we see more\n-;; than one copy of the same compare insn.\n+;; Transform\n+;;\n+;;\tcmp.l\t#1,er0\n+;;\tbeq\t.L1\n+;;\n+;; into\n+;;\n+;;\tmov.l\ter0,er1\n+;;\tdec.l\t#1,er1\n+;;\tbeq\t.L1\n+\n+;; We avoid this transformation if we see more than one copy of the\n+;; same compare insn.\n \n (define_peephole2\n   [(match_scratch:SI 4 \"r\")"}]}