{"sha": "ae9af49bd4d4f247eb5a1d179e207da899d101a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU5YWY0OWJkNGQ0ZjI0N2ViNWExZDE3OWUyMDdkYTg5OWQxMDFhNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-04-30T17:44:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-04-30T17:44:10Z"}, "message": "escape: Analyze function values and conversions.\n\nThe analysis for variables defined as function literals did not\nproperly analyze the underlying function literal when it was converted\nto a function type.  Also, when analyzing composite literals with\nfunction literals as arguments, the connection between the composite\nliteral and the function literal was ignored.\n\nFrom-SVN: r222642", "tree": {"sha": "7a0c6c06be7e3295b7dd800967bf55b08f9fe040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a0c6c06be7e3295b7dd800967bf55b08f9fe040"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae9af49bd4d4f247eb5a1d179e207da899d101a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9af49bd4d4f247eb5a1d179e207da899d101a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae9af49bd4d4f247eb5a1d179e207da899d101a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9af49bd4d4f247eb5a1d179e207da899d101a6/comments", "author": null, "committer": null, "parents": [{"sha": "1c3289cd615ce4a38c4a54d69ebfa5ebc47685ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3289cd615ce4a38c4a54d69ebfa5ebc47685ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c3289cd615ce4a38c4a54d69ebfa5ebc47685ca"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "0d8739818ddaea4024a7fb0b80b6565f3997ef47", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae9af49bd4d4f247eb5a1d179e207da899d101a6/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae9af49bd4d4f247eb5a1d179e207da899d101a6/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=ae9af49bd4d4f247eb5a1d179e207da899d101a6", "patch": "@@ -906,6 +906,8 @@ Build_connection_graphs::handle_composite_literal(Named_object* object,\n \tcontinue;\n       else if ((*p)->call_expression() != NULL)\n \tthis->handle_call(object, *p);\n+      else if ((*p)->func_expression() != NULL)\n+\tcomposite_args.push_back((*p)->func_expression()->named_object());\n       else if ((*p)->is_composite_literal()\n \t       || (*p)->heap_expression() != NULL)\n \tthis->handle_composite_literal(object, *p);\n@@ -949,21 +951,24 @@ Build_connection_graphs::variable(Named_object* var)\n \t   p != defs->end();\n \t   ++p)\n \t{\n-\t  if (p->val == NULL)\n+\t  Expression* def = p->val;\n+\t  if (def == NULL)\n \t    continue;\n \n-\t  if (p->val->func_expression() != NULL)\n+\t  if (def->conversion_expression() != NULL)\n+\t    def = def->conversion_expression()->expr();\n+\t  if (def->func_expression() != NULL)\n \t    {\n \t      // VAR is being defined as a function object.\n-\t      Named_object* fn = p->val->func_expression()->named_object();\n+\t      Named_object* fn = def->func_expression()->named_object();\n \t      Node* fn_node = this->gogo_->add_connection_node(fn);\n \t      var_node->add_edge(fn_node);\n \t    }\n-\t  else if(p->val->is_composite_literal()\n-\t\t  || p->val->heap_expression() != NULL)\n-\t    this->handle_composite_literal(var, p->val);\n+\t  else if(def->is_composite_literal()\n+\t\t  || def->heap_expression() != NULL)\n+\t    this->handle_composite_literal(var, def);\n \n-\t  Named_object* ref = this->resolve_var_reference(p->val);\n+\t  Named_object* ref = this->resolve_var_reference(def);\n \t  if (ref == NULL)\n \t    continue;\n "}]}