{"sha": "8c66130b1f8460773912ca3a915f657db466fd39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM2NjEzMGIxZjg0NjA3NzM5MTJjYTNhOTE1ZjY1N2RiNDY2ZmQzOQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-12-03T15:07:36Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2018-12-03T15:07:36Z"}, "message": "S/390: Add support for section anchors\n\ngcc/ChangeLog:\n\n2018-12-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* common/config/s390/s390-common.c (s390_option_init_struct):\n\tUse section anchors by default.\n\t* config/s390/s390.c (s390_check_symref_alignment): Handle\n\tanchors.\n\t(TARGET_MAX_ANCHOR_OFFSET): Use short displacement.\n\t* output.h (assemble_align): Pass `align' as unsigned int, so\n\tthat the value 0x80000000, which corresponds to `aligned(1 <<\n\t28)', would pass the `align > BITS_PER_UNIT' check.\n\t* varasm.c (assemble_align): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2018-12-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/nodatarel-1.c: Expect .LANCHOR0@GOTENT instead\n\tof a@GOTENT.\n\t* gcc.target/s390/section-anchors.c: New test.\n\t* gcc.target/s390/section-anchors2.c: New test.\n\t* gcc.target/s390/section-anchors3.c: New test.\n\nFrom-SVN: r266741", "tree": {"sha": "56635cab8a70cc95eb2513f0a3b9651ae77860aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56635cab8a70cc95eb2513f0a3b9651ae77860aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c66130b1f8460773912ca3a915f657db466fd39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c66130b1f8460773912ca3a915f657db466fd39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c66130b1f8460773912ca3a915f657db466fd39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c66130b1f8460773912ca3a915f657db466fd39/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df3fdfa67f485cf68f62b555fb9bb8015fb9e3ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3fdfa67f485cf68f62b555fb9bb8015fb9e3ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df3fdfa67f485cf68f62b555fb9bb8015fb9e3ad"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "2ac32608a45721f067799b87b2834df5dd416a34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c66130b1f8460773912ca3a915f657db466fd39", "patch": "@@ -1,3 +1,15 @@\n+2018-12-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* common/config/s390/s390-common.c (s390_option_init_struct):\n+\tUse section anchors by default.\n+\t* config/s390/s390.c (s390_check_symref_alignment): Handle\n+\tanchors.\n+\t(TARGET_MAX_ANCHOR_OFFSET): Use short displacement.\n+\t* output.h (assemble_align): Pass `align' as unsigned int, so\n+\tthat the value 0x80000000, which corresponds to `aligned(1 <<\n+\t28)', would pass the `align > BITS_PER_UNIT' check.\n+\t* varasm.c (assemble_align): Likewise.\n+\n 2018-12-03  Julian Brown  <julian@codesourcery.com>\n \n \t* tree-pretty-print.c (dump_omp_clause): Make default case"}, {"sha": "59b24654c82b9e0cbda76a3078c699685e0a483d", "filename": "gcc/common/config/s390/s390-common.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c?ref=8c66130b1f8460773912ca3a915f657db466fd39", "patch": "@@ -74,6 +74,9 @@ s390_option_init_struct (struct gcc_options *opts)\n   /* By default, always emit DWARF-2 unwind info.  This allows debugging\n      without maintaining a stack frame back-chain.  */\n   opts->x_flag_asynchronous_unwind_tables = 1;\n+\n+  /* Enable section anchors by default.  */\n+  opts->x_flag_section_anchors = 1;\n }\n \n /* Implement TARGET_HANDLE_OPTION.  */"}, {"sha": "62868995ca6ee4d53f3073d2958d16255002aee8", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=8c66130b1f8460773912ca3a915f657db466fd39", "patch": "@@ -4187,6 +4187,20 @@ s390_check_symref_alignment (rtx addr, HOST_WIDE_INT alignment)\n \n   if (GET_CODE (symref) == SYMBOL_REF)\n     {\n+      /* s390_encode_section_info is not called for anchors, since they don't\n+\t have corresponding VAR_DECLs.  Therefore, we cannot rely on\n+\t SYMBOL_FLAG_NOTALIGN{2,4,8}_P returning useful information.  */\n+      if (SYMBOL_REF_ANCHOR_P (symref))\n+\t{\n+\t  HOST_WIDE_INT block_offset = SYMBOL_REF_BLOCK_OFFSET (symref);\n+\t  unsigned int block_alignment = (SYMBOL_REF_BLOCK (symref)->alignment\n+\t\t\t\t\t  / BITS_PER_UNIT);\n+\n+\t  gcc_assert (block_offset >= 0);\n+\t  return ((block_offset & (alignment - 1)) == 0\n+\t\t  && block_alignment >= alignment);\n+\t}\n+\n       /* We have load-relative instructions for 2-byte, 4-byte, and\n \t 8-byte alignment so allow only these.  */\n       switch (alignment)\n@@ -16338,6 +16352,11 @@ s390_case_values_threshold (void)\n #undef TARGET_CASE_VALUES_THRESHOLD\n #define TARGET_CASE_VALUES_THRESHOLD s390_case_values_threshold\n \n+/* Use only short displacement, since long displacement is not available for\n+   the floating point instructions.  */\n+#undef TARGET_MAX_ANCHOR_OFFSET\n+#define TARGET_MAX_ANCHOR_OFFSET 0xfff\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "b2f0cc168ebfb36fca5b21a1e72961384d23dadf", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=8c66130b1f8460773912ca3a915f657db466fd39", "patch": "@@ -219,7 +219,7 @@ extern void assemble_external (tree);\n extern void assemble_zeros (unsigned HOST_WIDE_INT);\n \n /* Assemble an alignment pseudo op for an ALIGN-bit boundary.  */\n-extern void assemble_align (int);\n+extern void assemble_align (unsigned int);\n \n /* Assemble a string constant with the specified C string as contents.  */\n extern void assemble_string (const char *, int);"}, {"sha": "27300fcc0e02627dfaf8524f181733cf3f28699a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c66130b1f8460773912ca3a915f657db466fd39", "patch": "@@ -1,3 +1,11 @@\n+2018-12-03  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/nodatarel-1.c: Expect .LANCHOR0@GOTENT instead\n+\tof a@GOTENT.\n+\t* gcc.target/s390/section-anchors.c: New test.\n+\t* gcc.target/s390/section-anchors2.c: New test.\n+\t* gcc.target/s390/section-anchors3.c: New test.\n+\n 2018-12-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/88301"}, {"sha": "f53332f901dbc4c6ec65f32735e09440967595b1", "filename": "gcc/testsuite/gcc.target/s390/nodatarel-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnodatarel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnodatarel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnodatarel-1.c?ref=8c66130b1f8460773912ca3a915f657db466fd39", "patch": "@@ -29,7 +29,7 @@ bar (int b)\n   a = b;\n }\n \n-/* { dg-final { scan-assembler-times \"a@GOTENT\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.LANCHOR\\\\d+@GOTENT\" 3 } } */\n \n /* The exrl target is a label_ref which should not be affected at\n    all.  */"}, {"sha": "68a6a393e3190e1d69741854280ff3ce1c6e8174", "filename": "gcc/testsuite/gcc.target/s390/section-anchors.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fsection-anchors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fsection-anchors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fsection-anchors.c?ref=8c66130b1f8460773912ca3a915f657db466fd39", "patch": "@@ -0,0 +1,14 @@\n+/* Test basic section anchor functionality.  */\n+\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-options \"-O3 -march=z13\" } */\n+\n+int a = 1, b = 2;\n+\n+void\n+f ()\n+{\n+  a = 1234;\n+  b = 5678;\n+  /* { dg-final { scan-assembler {(?n)\\n\\tlarl\\t(%r\\d+),\\.LANCHOR\\d+\\n\\tmvhi\\t\\d+\\(\\1\\),1234\\n\\tmvhi\\t\\d+\\(\\1\\),5678} } } */\n+}"}, {"sha": "a3c31432d7aef8962caf2f990e179e1cb677b4fc", "filename": "gcc/testsuite/gcc.target/s390/section-anchors2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fsection-anchors2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fsection-anchors2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fsection-anchors2.c?ref=8c66130b1f8460773912ca3a915f657db466fd39", "patch": "@@ -0,0 +1,26 @@\n+/* Test corner case when LG from literal pool could be preferred to LARL.  */\n+\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-options \"-O3 -march=z13\" } */\n+\n+int e = 42;\n+int *c = &e;\n+\n+void\n+h (int *i)\n+{\n+  c = i;\n+}\n+\n+void\n+j ()\n+{\n+  h (&e);\n+  /* { dg-final { scan-assembler {(?n)\\n\\tlarl\\t.+\\n\\tstgrl\\t.+\\n\\tbr\\t%r14\\n} } } */\n+}\n+\n+void\n+f ()\n+{\n+  h (c);\n+}"}, {"sha": "d9cac9d7e572a9351ce142a79f159d199405286b", "filename": "gcc/testsuite/gcc.target/s390/section-anchors3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fsection-anchors3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fsection-anchors3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fsection-anchors3.c?ref=8c66130b1f8460773912ca3a915f657db466fd39", "patch": "@@ -0,0 +1,11 @@\n+/* Test corner case when LG from literal pool could be preferred to LARL.  */\n+\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-options \"-O3 -march=z13\" } */\n+\n+int\n+a (int b)\n+{\n+  return b / 100;\n+  /* { dg-final { scan-assembler-not {\\n\\t\\.quad\\t\\.LC} } } */\n+}"}, {"sha": "dcce541d6432dd57657b3cbba6beedf13df871c2", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c66130b1f8460773912ca3a915f657db466fd39/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=8c66130b1f8460773912ca3a915f657db466fd39", "patch": "@@ -1974,7 +1974,7 @@ assemble_zeros (unsigned HOST_WIDE_INT size)\n /* Assemble an alignment pseudo op for an ALIGN-bit boundary.  */\n \n void\n-assemble_align (int align)\n+assemble_align (unsigned int align)\n {\n   if (align > BITS_PER_UNIT)\n     {"}]}