{"sha": "94ccaf62c378c3737f7e4b6a80e1160157119171", "node_id": "C_kwDOANBUbNoAKDk0Y2NhZjYyYzM3OGMzNzM3ZjdlNGI2YTgwZTExNjAxNTcxMTkxNzE", "commit": {"author": {"name": "Thomas Neumann", "email": "tneumann@users.sourceforge.net", "date": "2022-09-19T16:10:02Z"}, "committer": {"name": "Thomas Neumann", "email": "tneumann@users.sourceforge.net", "date": "2022-09-22T22:57:55Z"}, "message": "Avoid depending on destructor order\n\nIn some scenarios (e.g., when mixing gcc and clang code), it can\nhappen that frames are deregistered after the lookup structure\nhas already been destroyed. That in itself would be fine, but\nit triggers an assert in __deregister_frame_info_bases that\nexpects to find the frame.\n\nTo avoid that, we now remember that the btree as already been\ndestroyed and disable the assert in that case.\n\nlibgcc/ChangeLog:\n\n\t* unwind-dw2-fde.c: (release_register_frames) Remember\n\twhen the btree has been destroyed.\n\t(__deregister_frame_info_bases) Disable the assert when\n\tshutting down.", "tree": {"sha": "7f2d60eb3cbbf1de93e7ee15b9976dedace5e8a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f2d60eb3cbbf1de93e7ee15b9976dedace5e8a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94ccaf62c378c3737f7e4b6a80e1160157119171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ccaf62c378c3737f7e4b6a80e1160157119171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ccaf62c378c3737f7e4b6a80e1160157119171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ccaf62c378c3737f7e4b6a80e1160157119171/comments", "author": {"login": "neumannt", "id": 25097991, "node_id": "MDQ6VXNlcjI1MDk3OTkx", "avatar_url": "https://avatars.githubusercontent.com/u/25097991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neumannt", "html_url": "https://github.com/neumannt", "followers_url": "https://api.github.com/users/neumannt/followers", "following_url": "https://api.github.com/users/neumannt/following{/other_user}", "gists_url": "https://api.github.com/users/neumannt/gists{/gist_id}", "starred_url": "https://api.github.com/users/neumannt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neumannt/subscriptions", "organizations_url": "https://api.github.com/users/neumannt/orgs", "repos_url": "https://api.github.com/users/neumannt/repos", "events_url": "https://api.github.com/users/neumannt/events{/privacy}", "received_events_url": "https://api.github.com/users/neumannt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "neumannt", "id": 25097991, "node_id": "MDQ6VXNlcjI1MDk3OTkx", "avatar_url": "https://avatars.githubusercontent.com/u/25097991?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neumannt", "html_url": "https://github.com/neumannt", "followers_url": "https://api.github.com/users/neumannt/followers", "following_url": "https://api.github.com/users/neumannt/following{/other_user}", "gists_url": "https://api.github.com/users/neumannt/gists{/gist_id}", "starred_url": "https://api.github.com/users/neumannt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neumannt/subscriptions", "organizations_url": "https://api.github.com/users/neumannt/orgs", "repos_url": "https://api.github.com/users/neumannt/repos", "events_url": "https://api.github.com/users/neumannt/events{/privacy}", "received_events_url": "https://api.github.com/users/neumannt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32524808fad7dc753b177f6c2f2e4cdc7e82f3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32524808fad7dc753b177f6c2f2e4cdc7e82f3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32524808fad7dc753b177f6c2f2e4cdc7e82f3c3"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "d237179f4ea96ae38b24b05f2f218bd7e12a9abe", "filename": "libgcc/unwind-dw2-fde.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ccaf62c378c3737f7e4b6a80e1160157119171/libgcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ccaf62c378c3737f7e4b6a80e1160157119171/libgcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde.c?ref=94ccaf62c378c3737f7e4b6a80e1160157119171", "patch": "@@ -48,6 +48,7 @@ typedef __UINTPTR_TYPE__ uintptr_type;\n #include \"unwind-dw2-btree.h\"\n \n static struct btree registered_frames;\n+static bool in_shutdown;\n \n static void\n release_registered_frames (void) __attribute__ ((destructor (110)));\n@@ -57,6 +58,7 @@ release_registered_frames (void)\n   /* Release the b-tree and all frames. Frame releases that happen later are\n    * silently ignored */\n   btree_destroy (&registered_frames);\n+  in_shutdown = true;\n }\n \n static void\n@@ -282,7 +284,7 @@ __deregister_frame_info_bases (const void *begin)\n   __gthread_mutex_unlock (&object_mutex);\n #endif\n \n-  gcc_assert (ob);\n+  gcc_assert (in_shutdown || ob);\n   return (void *) ob;\n }\n "}]}