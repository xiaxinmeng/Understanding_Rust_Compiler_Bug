{"sha": "9d2bb9026f8daaacdcad58361e0c8f144df2278e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQyYmI5MDI2ZjhkYWFhY2RjYWQ1ODM2MWUwYzhmMTQ0ZGYyMjc4ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-07-15T21:32:46Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2009-07-15T21:32:46Z"}, "message": "re PR rtl-optimization/40710 (Linux kernel miscompiled for sh4-linux)\n\n\tPR rtl-optimization/40710\n\t* resource.c (mark_target_live_regs): Reset DF problem to LR.\n\nFrom-SVN: r149696", "tree": {"sha": "615c8cb293dd97ec80c72f0daee67957a04e27f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/615c8cb293dd97ec80c72f0daee67957a04e27f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d2bb9026f8daaacdcad58361e0c8f144df2278e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2bb9026f8daaacdcad58361e0c8f144df2278e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2bb9026f8daaacdcad58361e0c8f144df2278e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2bb9026f8daaacdcad58361e0c8f144df2278e/comments", "author": null, "committer": null, "parents": [{"sha": "da45599cf66aa9593c55b1ddd5726a1781fb8214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da45599cf66aa9593c55b1ddd5726a1781fb8214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da45599cf66aa9593c55b1ddd5726a1781fb8214"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "cc42a5476d83ce713b19a714cee7fd3c53f8a5cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2bb9026f8daaacdcad58361e0c8f144df2278e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2bb9026f8daaacdcad58361e0c8f144df2278e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d2bb9026f8daaacdcad58361e0c8f144df2278e", "patch": "@@ -1,3 +1,8 @@\n+2009-07-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/40710\n+\t* resource.c (mark_target_live_regs): Reset DF problem to LR.\n+\n 2009-07-15  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* config/mips/mips.md (*extenddi_truncate<mode>,"}, {"sha": "08a805519cdab474a9197d88b373e4e732d7a14f", "filename": "gcc/resource.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d2bb9026f8daaacdcad58361e0c8f144df2278e/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d2bb9026f8daaacdcad58361e0c8f144df2278e/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=9d2bb9026f8daaacdcad58361e0c8f144df2278e", "patch": "@@ -945,10 +945,11 @@ mark_target_live_regs (rtx insns, rtx target, struct resources *res)\n \n   /* If we found a basic block, get the live registers from it and update\n      them with anything set or killed between its start and the insn before\n-     TARGET.  Otherwise, we must assume everything is live.  */\n+     TARGET; this custom life analysis is really about registers so we need\n+     to use the LR problem.  Otherwise, we must assume everything is live.  */\n   if (b != -1)\n     {\n-      regset regs_live = df_get_live_in (BASIC_BLOCK (b));\n+      regset regs_live = DF_LR_IN (BASIC_BLOCK (b));\n       rtx start_insn, stop_insn;\n \n       /* Compute hard regs live at start of block.  */\n@@ -1052,7 +1053,7 @@ mark_target_live_regs (rtx insns, rtx target, struct resources *res)\n \t\t{\n \t\t  HARD_REG_SET extra_live;\n \n-\t\t  REG_SET_TO_HARD_REG_SET (extra_live, df_get_live_in (bb));\n+\t\t  REG_SET_TO_HARD_REG_SET (extra_live, DF_LR_IN (bb));\n \t\t  IOR_HARD_REG_SET (current_live_regs, extra_live);\n \t\t}\n \t    }"}]}