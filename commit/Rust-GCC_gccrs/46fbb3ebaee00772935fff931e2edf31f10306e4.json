{"sha": "46fbb3ebaee00772935fff931e2edf31f10306e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZmYmIzZWJhZWUwMDc3MjkzNWZmZjkzMWUyZWRmMzFmMTAzMDZlNA==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2014-04-22T09:33:00Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2014-04-22T09:33:00Z"}, "message": "arm-protos.h (tune_params): New struct members.\n\n\t* config/arm/arm-protos.h (tune_params): New struct members.\n\t* config/arm/arm.c: Initialise tune_params per processor.\n\t(thumb2_reorg): Suppress conversion from t32 to t16 when optimizing\n\tfor speed, based on new tune_params.\n\nFrom-SVN: r209561", "tree": {"sha": "85d8120a6119c42cc55f9232aefeb8915b244d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85d8120a6119c42cc55f9232aefeb8915b244d2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46fbb3ebaee00772935fff931e2edf31f10306e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fbb3ebaee00772935fff931e2edf31f10306e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fbb3ebaee00772935fff931e2edf31f10306e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fbb3ebaee00772935fff931e2edf31f10306e4/comments", "author": null, "committer": null, "parents": [{"sha": "74dc11ed84af069ad388d919d47cf553b83c9f60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74dc11ed84af069ad388d919d47cf553b83c9f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74dc11ed84af069ad388d919d47cf553b83c9f60"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "e34c39fde464e5cbe242f60a1d7ea1590b4063b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb3ebaee00772935fff931e2edf31f10306e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb3ebaee00772935fff931e2edf31f10306e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46fbb3ebaee00772935fff931e2edf31f10306e4", "patch": "@@ -1,3 +1,10 @@\n+2014-04-22  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/arm/arm-protos.h (tune_params): New struct members.\n+\t* config/arm/arm.c: Initialise tune_params per processor.\n+\t(thumb2_reorg): Suppress conversion from t32 to t16 when optimizing\n+\tfor speed, based on new tune_params.\n+\n 2014-04-22  Alex Velenko  <Alex.Velenko@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c (BUILTIN_VDQF_DF): Macro"}, {"sha": "74645ee1d2453d1f60c07d25b1161bfa6e81f956", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb3ebaee00772935fff931e2edf31f10306e4/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb3ebaee00772935fff931e2edf31f10306e4/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=46fbb3ebaee00772935fff931e2edf31f10306e4", "patch": "@@ -272,6 +272,11 @@ struct tune_params\n   const struct cpu_vec_costs* vec_costs;\n   /* Prefer Neon for 64-bit bitops.  */\n   bool prefer_neon_for_64bits;\n+  /* Prefer 32-bit encoding instead of flag-setting 16-bit encoding.  */\n+  bool disparage_flag_setting_t16_encodings;\n+  /* Prefer 32-bit encoding instead of 16-bit encoding where subset of flags\n+     would be set.  */\n+  bool disparage_partial_flag_setting_t16_encodings;\n };\n \n extern const struct tune_params *current_tune;"}, {"sha": "08b52557586ce4e86eb12103dd7af646a81d4cd0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 54, "deletions": 23, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb3ebaee00772935fff931e2edf31f10306e4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb3ebaee00772935fff931e2edf31f10306e4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=46fbb3ebaee00772935fff931e2edf31f10306e4", "patch": "@@ -1484,7 +1484,8 @@ const struct tune_params arm_slowmul_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_fastmul_tune =\n@@ -1500,7 +1501,8 @@ const struct tune_params arm_fastmul_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n /* StrongARM has early execution of branches, so a sequence that is worth\n@@ -1519,7 +1521,8 @@ const struct tune_params arm_strongarm_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_xscale_tune =\n@@ -1535,7 +1538,8 @@ const struct tune_params arm_xscale_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_9e_tune =\n@@ -1551,7 +1555,8 @@ const struct tune_params arm_9e_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_v6t2_tune =\n@@ -1567,7 +1572,8 @@ const struct tune_params arm_v6t2_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n /* Generic Cortex tuning.  Use more specific tunings if appropriate.  */\n@@ -1584,7 +1590,8 @@ const struct tune_params arm_cortex_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_cortex_a7_tune =\n@@ -1600,7 +1607,8 @@ const struct tune_params arm_cortex_a7_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,\t\t\t/* Vectorizer costs.  */\n-  false\t\t\t\t\t\t/* Prefer Neon for 64-bits bitops.  */\n+  false,\t\t\t\t\t/* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_cortex_a15_tune =\n@@ -1616,7 +1624,8 @@ const struct tune_params arm_cortex_a15_tune =\n   true,\t\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  true, true                                    /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_cortex_a53_tune =\n@@ -1632,7 +1641,8 @@ const struct tune_params arm_cortex_a53_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,\t\t\t/* Vectorizer costs.  */\n-  false\t\t\t\t\t\t/* Prefer Neon for 64-bits bitops.  */\n+  false,\t\t\t\t\t/* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_cortex_a57_tune =\n@@ -1667,7 +1677,8 @@ const struct tune_params arm_cortex_a5_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {false, false},\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_cortex_a9_tune =\n@@ -1683,7 +1694,8 @@ const struct tune_params arm_cortex_a9_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_cortex_a12_tune =\n@@ -1722,7 +1734,8 @@ const struct tune_params arm_v7m_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {false, false},\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n /* The arm_v6m_tune is duplicated from arm_cortex_tune, rather than\n@@ -1740,7 +1753,8 @@ const struct tune_params arm_v6m_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {false, false},\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n const struct tune_params arm_fa726te_tune =\n@@ -1756,7 +1770,8 @@ const struct tune_params arm_fa726te_tune =\n   false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n   {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n   &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false                                         /* Prefer Neon for 64-bits bitops.  */\n+  false,                                        /* Prefer Neon for 64-bits bitops.  */\n+  false, false                                  /* Prefer 32-bit encodings.  */\n };\n \n \n@@ -16793,9 +16808,20 @@ thumb2_reorg (void)\n   compute_bb_for_insn ();\n   df_analyze ();\n \n+  enum Convert_Action {SKIP, CONV, SWAP_CONV};\n+\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n+      if (current_tune->disparage_flag_setting_t16_encodings\n+\t  && optimize_bb_for_speed_p (bb))\n+\tcontinue;\n+\n       rtx insn;\n+      Convert_Action action = SKIP;\n+      Convert_Action action_for_partial_flag_setting\n+\t= (current_tune->disparage_partial_flag_setting_t16_encodings\n+\t   && optimize_bb_for_speed_p (bb))\n+\t  ? SKIP : CONV;\n \n       COPY_REG_SET (&live, DF_LR_OUT (bb));\n       df_simulate_initialize_backwards (bb, &live);\n@@ -16805,7 +16831,7 @@ thumb2_reorg (void)\n \t      && !REGNO_REG_SET_P (&live, CC_REGNUM)\n \t      && GET_CODE (PATTERN (insn)) == SET)\n \t    {\n-\t      enum {SKIP, CONV, SWAP_CONV} action = SKIP;\n+\t      action = SKIP;\n \t      rtx pat = PATTERN (insn);\n \t      rtx dst = XEXP (pat, 0);\n \t      rtx src = XEXP (pat, 1);\n@@ -16886,10 +16912,11 @@ thumb2_reorg (void)\n \t\t      /* ANDS <Rdn>,<Rm>  */\n \t\t      if (rtx_equal_p (dst, op0)\n \t\t\t  && low_register_operand (op1, SImode))\n-\t\t\taction = CONV;\n+\t\t\taction = action_for_partial_flag_setting;\n \t\t      else if (rtx_equal_p (dst, op1)\n \t\t\t       && low_register_operand (op0, SImode))\n-\t\t\taction = SWAP_CONV;\n+\t\t\taction = action_for_partial_flag_setting == SKIP\n+\t\t\t\t ? SKIP : SWAP_CONV;\n \t\t      break;\n \n \t\t    case ASHIFTRT:\n@@ -16900,26 +16927,30 @@ thumb2_reorg (void)\n \t\t      /* LSLS <Rdn>,<Rm> */\n \t\t      if (rtx_equal_p (dst, op0)\n \t\t\t  && low_register_operand (op1, SImode))\n-\t\t\taction = CONV;\n+\t\t\taction = action_for_partial_flag_setting;\n \t\t      /* ASRS <Rd>,<Rm>,#<imm5> */\n \t\t      /* LSRS <Rd>,<Rm>,#<imm5> */\n \t\t      /* LSLS <Rd>,<Rm>,#<imm5> */\n \t\t      else if (low_register_operand (op0, SImode)\n \t\t\t       && CONST_INT_P (op1)\n \t\t\t       && IN_RANGE (INTVAL (op1), 0, 31))\n-\t\t\taction = CONV;\n+\t\t\taction = action_for_partial_flag_setting;\n \t\t      break;\n \n \t\t    case ROTATERT:\n \t\t      /* RORS <Rdn>,<Rm>  */\n \t\t      if (rtx_equal_p (dst, op0)\n \t\t\t  && low_register_operand (op1, SImode))\n-\t\t\taction = CONV;\n+\t\t\taction = action_for_partial_flag_setting;\n \t\t      break;\n \n \t\t    case NOT:\n-\t\t    case NEG:\n \t\t      /* MVNS <Rd>,<Rm>  */\n+\t\t      if (low_register_operand (op0, SImode))\n+\t\t\taction = action_for_partial_flag_setting;\n+\t\t      break;\n+\n+\t\t    case NEG:\n \t\t      /* NEGS <Rd>,<Rm>  (a.k.a RSBS)  */\n \t\t      if (low_register_operand (op0, SImode))\n \t\t\taction = CONV;\n@@ -16929,7 +16960,7 @@ thumb2_reorg (void)\n \t\t      /* MOVS <Rd>,#<imm8>  */\n \t\t      if (CONST_INT_P (src)\n \t\t\t  && IN_RANGE (INTVAL (src), 0, 255))\n-\t\t\taction = CONV;\n+\t\t\taction = action_for_partial_flag_setting;\n \t\t      break;\n \n \t\t    case REG:"}]}