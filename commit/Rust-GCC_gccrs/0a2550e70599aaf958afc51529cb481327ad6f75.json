{"sha": "0a2550e70599aaf958afc51529cb481327ad6f75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEyNTUwZTcwNTk5YWFmOTU4YWZjNTE1MjljYjQ4MTMyN2FkNmY3NQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-02-19T07:42:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-02-19T07:42:06Z"}, "message": "ipa-prop.h (ipa_ancestor_jf_data): Update ocmment.\n\n\n\t* ipa-prop.h (ipa_ancestor_jf_data): Update ocmment.\n\t* ipa-prop.c (ipa_set_jf_known_type): Return early when\n\tnot devirtualizing.\n\t(ipa_set_ancestor_jf): Set type to NULL hwen it is not preserved;\n\tdo more sanity checks.\n\t(detect_type_change): Return true when giving up early.\n\t(compute_complex_assign_jump_func): Fix type parameter of\n\tipa_set_ancestor_jf.\n\t(compute_complex_ancestor_jump_func): Likewise.\n\t(update_jump_functions_after_inlining): Fix updating of\n\tancestor function.\n\t* ipa-cp.c (ipa_get_jf_ancestor_result): Be ready for type\n\tto be NULL.\n\nFrom-SVN: r207877", "tree": {"sha": "76c4ca121f72263949b151997bf74f096da8e207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76c4ca121f72263949b151997bf74f096da8e207"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a2550e70599aaf958afc51529cb481327ad6f75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2550e70599aaf958afc51529cb481327ad6f75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2550e70599aaf958afc51529cb481327ad6f75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2550e70599aaf958afc51529cb481327ad6f75/comments", "author": null, "committer": null, "parents": [{"sha": "2dbe8b7088abd37757aaa91d3cdacd3630b4438f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dbe8b7088abd37757aaa91d3cdacd3630b4438f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dbe8b7088abd37757aaa91d3cdacd3630b4438f"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "c4ea4d375b43b52f7e76aaddb064b80e59efd8cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2550e70599aaf958afc51529cb481327ad6f75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2550e70599aaf958afc51529cb481327ad6f75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a2550e70599aaf958afc51529cb481327ad6f75", "patch": "@@ -1,3 +1,19 @@\n+2014-02-18  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-prop.h (ipa_ancestor_jf_data): Update ocmment.\n+\t* ipa-prop.c (ipa_set_jf_known_type): Return early when\n+\tnot devirtualizing.\n+\t(ipa_set_ancestor_jf): Set type to NULL hwen it is not preserved;\n+\tdo more sanity checks.\n+\t(detect_type_change): Return true when giving up early.\n+\t(compute_complex_assign_jump_func): Fix type parameter of\n+\tipa_set_ancestor_jf.\n+\t(compute_complex_ancestor_jump_func): Likewise.\n+\t(update_jump_functions_after_inlining): Fix updating of\n+\tancestor function.\n+\t* ipa-cp.c (ipa_get_jf_ancestor_result): Be ready for type\n+\tto be NULL.\n+\n 2014-02-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* cgraph.c (cgraph_update_edges_for_call_stmt_node): Also remove"}, {"sha": "f7cf7164fe11e0c18c1d3f082eb1f86c68470671", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2550e70599aaf958afc51529cb481327ad6f75/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2550e70599aaf958afc51529cb481327ad6f75/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=0a2550e70599aaf958afc51529cb481327ad6f75", "patch": "@@ -798,7 +798,9 @@ ipa_get_jf_ancestor_result (struct ipa_jump_func *jfunc, tree input)\n       tree t = TREE_OPERAND (input, 0);\n       t = build_ref_for_offset (EXPR_LOCATION (t), t,\n \t\t\t\tipa_get_jf_ancestor_offset (jfunc),\n-\t\t\t\tipa_get_jf_ancestor_type (jfunc), NULL, false);\n+\t\t\t\tipa_get_jf_ancestor_type (jfunc)\n+\t\t\t\t? ipa_get_jf_ancestor_type (jfunc)\n+\t\t\t\t: ptr_type_node, NULL, false);\n       return build_fold_addr_expr (t);\n     }\n   else"}, {"sha": "133bfc0b7d8a304f90267a4f5d96da565327a782", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2550e70599aaf958afc51529cb481327ad6f75/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2550e70599aaf958afc51529cb481327ad6f75/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=0a2550e70599aaf958afc51529cb481327ad6f75", "patch": "@@ -393,6 +393,9 @@ ipa_set_jf_known_type (struct ipa_jump_func *jfunc, HOST_WIDE_INT offset,\n {\n   gcc_assert (TREE_CODE (component_type) == RECORD_TYPE\n \t      && TYPE_BINFO (component_type));\n+  if (!flag_devirtualize)\n+    return;\n+  gcc_assert (BINFO_VTABLE (TYPE_BINFO (component_type)));\n   jfunc->type = IPA_JF_KNOWN_TYPE;\n   jfunc->value.known_type.offset = offset,\n   jfunc->value.known_type.base_type = base_type;\n@@ -477,10 +480,16 @@ ipa_set_ancestor_jf (struct ipa_jump_func *jfunc, HOST_WIDE_INT offset,\n \t\t     tree type, int formal_id, bool agg_preserved,\n \t\t     bool type_preserved)\n {\n+  if (!flag_devirtualize)\n+    type_preserved = false;\n+  gcc_assert (!type_preserved\n+\t      || (TREE_CODE (type) == RECORD_TYPE\n+\t\t  && TYPE_BINFO (type)\n+\t\t  && BINFO_VTABLE (TYPE_BINFO (type))));\n   jfunc->type = IPA_JF_ANCESTOR;\n   jfunc->value.ancestor.formal_id = formal_id;\n   jfunc->value.ancestor.offset = offset;\n-  jfunc->value.ancestor.type = type;\n+  jfunc->value.ancestor.type = type_preserved ? type : NULL;\n   jfunc->value.ancestor.agg_preserved = agg_preserved;\n   jfunc->value.ancestor.type_preserved = type_preserved;\n }\n@@ -686,7 +695,7 @@ detect_type_change (tree arg, tree base, tree comp_type, gimple call,\n       || TREE_CODE (comp_type) != RECORD_TYPE\n       || !TYPE_BINFO (comp_type)\n       || !BINFO_VTABLE (TYPE_BINFO (comp_type)))\n-    return false;\n+    return true;\n \n   /* C++ methods are not allowed to change THIS pointer unless they\n      are constructors or destructors.  */\n@@ -1103,7 +1112,8 @@ compute_complex_assign_jump_func (struct ipa_node_params *info,\n       bool type_p = !detect_type_change (op1, base, TREE_TYPE (param_type),\n \t\t\t\t\t call, jfunc, offset);\n       if (type_p || jfunc->type == IPA_JF_UNKNOWN)\n-\tipa_set_ancestor_jf (jfunc, offset, TREE_TYPE (op1), index,\n+\tipa_set_ancestor_jf (jfunc, offset,\n+\t\t\t     type_p ? TREE_TYPE (param_type) : NULL, index,\n \t\t\t     parm_ref_data_pass_through_p (&parms_ainfo[index],\n \t\t\t\t\t\t\t   call, ssa), type_p);\n     }\n@@ -1236,7 +1246,7 @@ compute_complex_ancestor_jump_func (struct ipa_node_params *info,\n     type_p = !detect_type_change (obj, expr, TREE_TYPE (param_type),\n \t\t\t\t  call, jfunc, offset);\n   if (type_p || jfunc->type == IPA_JF_UNKNOWN)\n-    ipa_set_ancestor_jf (jfunc, offset, TREE_TYPE (obj), index,\n+    ipa_set_ancestor_jf (jfunc, offset, type_p ? TREE_TYPE (param_type) : NULL, index,\n \t\t\t parm_ref_data_pass_through_p (&parms_ainfo[index],\n \t\t\t\t\t\t       call, parm), type_p);\n }\n@@ -2391,7 +2401,7 @@ update_jump_functions_after_inlining (struct cgraph_edge *cs,\n \t\t    ipa_set_jf_known_type (dst,\n \t\t\t\t\t   ipa_get_jf_known_type_offset (src),\n \t\t\t\t\t   ipa_get_jf_known_type_base_type (src),\n-\t\t\t\t\t   ipa_get_jf_known_type_base_type (src));\n+\t\t\t\t\t   ipa_get_jf_known_type_component_type (src));\n \t\t  else\n \t\t    dst->type = IPA_JF_UNKNOWN;\n \t\t  break;"}, {"sha": "8fdd92c14ef789b11b0048578d1af53559d2e8d1", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2550e70599aaf958afc51529cb481327ad6f75/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2550e70599aaf958afc51529cb481327ad6f75/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=0a2550e70599aaf958afc51529cb481327ad6f75", "patch": "@@ -130,7 +130,9 @@ struct GTY(()) ipa_ancestor_jf_data\n {\n   /* Offset of the field representing the ancestor.  */\n   HOST_WIDE_INT offset;\n-  /* Type of the result.  */\n+  /* Type of the result.\n+     When TYPE_PRESERVED is false, TYPE is NULL, since it is only\n+     relevant for the devirtualization machinery.  */\n   tree type;\n   /* Number of the caller's formal parameter being passed.  */\n   int formal_id;"}]}