{"sha": "911852ff03454fef83908e8093925b4eee95e373", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTExODUyZmYwMzQ1NGZlZjgzOTA4ZTgwOTM5MjViNGVlZTk1ZTM3Mw==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2010-06-30T17:56:15Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-06-30T17:56:15Z"}, "message": "target.def (memory_move_cost): Use DEFHOOK.\n\n\t* target.def (memory_move_cost): Use DEFHOOK.\n\t* doc/tm.texi.in (TARGET_MEMORY_MOVE_COST): Use @hook.\n\tRename regclass AKA class to rclass.\n\t* doc/tm.texi: Regenerate.\n\nFrom-SVN: r161623", "tree": {"sha": "53b1863654933d4ad6700e47006a94d476465cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53b1863654933d4ad6700e47006a94d476465cf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/911852ff03454fef83908e8093925b4eee95e373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911852ff03454fef83908e8093925b4eee95e373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911852ff03454fef83908e8093925b4eee95e373", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911852ff03454fef83908e8093925b4eee95e373/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "08914aaad9a660df1206cd985198ab213d7bb365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08914aaad9a660df1206cd985198ab213d7bb365", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08914aaad9a660df1206cd985198ab213d7bb365"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "48e1a14e3a4a25dfeaf7f05284b5f67748ec760a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911852ff03454fef83908e8093925b4eee95e373/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911852ff03454fef83908e8093925b4eee95e373/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=911852ff03454fef83908e8093925b4eee95e373", "patch": "@@ -19,6 +19,11 @@\n \t* doc/tm.texi.in (TARGET_FOLD_BUILTIN): Use @hook.\n \t* doc/tm.texi: Regenerate.\n \n+\t* target.def (memory_move_cost): Use DEFHOOK.\n+\t* doc/tm.texi.in (TARGET_MEMORY_MOVE_COST): Use @hook.\n+\tRename regclass AKA class to rclass.\n+\t* doc/tm.texi: Regenerate.\n+\n 2010-06-30  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* toplev.h (_fatal_insn_not_found, _fatal_insn): Move declarations"}, {"sha": "27c1465ccfe92afef1dc44995c092827c5cbe6b3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911852ff03454fef83908e8093925b4eee95e373/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911852ff03454fef83908e8093925b4eee95e373/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=911852ff03454fef83908e8093925b4eee95e373", "patch": "@@ -6170,9 +6170,9 @@ These macros are obsolete, new ports should use the target hook\n @code{TARGET_MEMORY_MOVE_COST} instead.\n @end defmac\n \n-@deftypefn {Target Hook} int TARGET_MEMORY_MOVE_COST (enum machine_mode @var{mode}, enum reg_class @var{regclass}, bool @var{in})\n+@deftypefn {Target Hook} int TARGET_MEMORY_MOVE_COST (enum machine_mode @var{mode}, enum reg_class @var{rclass}, bool @var{in})\n This target hook should return the cost of moving data of mode @var{mode}\n-between a register of class @var{class} and memory; @var{in} is @code{false}\n+between a register of class @var{rclass} and memory; @var{in} is @code{false}\n if the value is to be written to memory, @code{true} if it is to be read in.\n This cost is relative to those in @code{TARGET_REGISTER_MOVE_COST}.\n If moving between registers and memory is more expensive than between two\n@@ -6181,7 +6181,7 @@ registers, you should add this target hook to express the relative cost.\n If you do not add this target hook, GCC uses a default cost of 4 plus\n the cost of copying via a secondary reload register, if one is\n needed.  If your machine requires a secondary reload register to copy\n-between memory and a register of @var{class} but the reload mechanism is\n+between memory and a register of @var{rclass} but the reload mechanism is\n more complex than copying via an intermediate, use this target hook to\n reflect the actual cost of the move.\n "}, {"sha": "0227464bcefc7fb2cc6381a7cbdf19db166863f0", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911852ff03454fef83908e8093925b4eee95e373/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911852ff03454fef83908e8093925b4eee95e373/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=911852ff03454fef83908e8093925b4eee95e373", "patch": "@@ -6170,9 +6170,9 @@ These macros are obsolete, new ports should use the target hook\n @code{TARGET_MEMORY_MOVE_COST} instead.\n @end defmac\n \n-@deftypefn {Target Hook} int TARGET_MEMORY_MOVE_COST (enum machine_mode @var{mode}, enum reg_class @var{regclass}, bool @var{in})\n+@hook TARGET_MEMORY_MOVE_COST\n This target hook should return the cost of moving data of mode @var{mode}\n-between a register of class @var{class} and memory; @var{in} is @code{false}\n+between a register of class @var{rclass} and memory; @var{in} is @code{false}\n if the value is to be written to memory, @code{true} if it is to be read in.\n This cost is relative to those in @code{TARGET_REGISTER_MOVE_COST}.\n If moving between registers and memory is more expensive than between two\n@@ -6181,7 +6181,7 @@ registers, you should add this target hook to express the relative cost.\n If you do not add this target hook, GCC uses a default cost of 4 plus\n the cost of copying via a secondary reload register, if one is\n needed.  If your machine requires a secondary reload register to copy\n-between memory and a register of @var{class} but the reload mechanism is\n+between memory and a register of @var{rclass} but the reload mechanism is\n more complex than copying via an intermediate, use this target hook to\n reflect the actual cost of the move.\n "}, {"sha": "ec359d245fbb7b4c6143e5467a74cc92e01f5a89", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911852ff03454fef83908e8093925b4eee95e373/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911852ff03454fef83908e8093925b4eee95e373/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=911852ff03454fef83908e8093925b4eee95e373", "patch": "@@ -1375,7 +1375,7 @@ DEFHOOK\n /* Compute cost of moving registers to/from memory.  */\n /* ??? Documenting the argument types for this hook requires a GFDL\n    license grant.  Also, the documentation uses a different name for RCLASS.  */\n-DEFHOOK_UNDOC\n+DEFHOOK\n (memory_move_cost,\n  \"\",\n  int, (enum machine_mode mode, enum reg_class rclass, bool in),"}]}