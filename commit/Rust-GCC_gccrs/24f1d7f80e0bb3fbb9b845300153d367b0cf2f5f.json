{"sha": "24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRmMWQ3ZjgwZTBiYjNmYmI5Yjg0NTMwMDE1M2QzNjdiMGNmMmY1Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-11-30T20:28:28Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-11-30T20:28:28Z"}, "message": "runtime: print C functions in traceback\n    \n    Since gccgo can trace back through C code as easily as Go code, we\n    should print C functions in the traceback.\n    \n    This worked before https://golang.org/cl/31230 for a dumb reason.  The\n    default value for runtime.traceback_cache was, and is, 2 << 2, meaning\n    to print all functions.  The old C code for runtime_parsedebugvars\n    would return immediately and do nothing if the environment variable\n    GODEBUG was not set (if GODEBUG was set it would later call\n    setTraceback.  The new Go code for runtime.parsedebugvars does not\n    return immediately if GODEBUG is not set, and always calls\n    setTraceback.  Either way, if GOTRACEBACK is not set, setTraceback\n    would set traceback_cache to 1 << 2, meaning to only print non-runtime\n    functions and having the effect of not printing plain C functions.\n    \n    Keep the current handling of GODEBUG/GOTRACEBACK, which matches the gc\n    library, but add an extra check to print C functions by default.\n    \n    Reviewed-on: https://go-review.googlesource.com/33717\n\nFrom-SVN: r243083", "tree": {"sha": "af388d60fbccb515b0412b2eb67e16a81240830d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af388d60fbccb515b0412b2eb67e16a81240830d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f/comments", "author": null, "committer": null, "parents": [{"sha": "df3f12771261f378bd250a9869271c37c69682a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3f12771261f378bd250a9869271c37c69682a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df3f12771261f378bd250a9869271c37c69682a7"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "323b07cb8c76bad6bac7cc33fd6c5ac4fc0ee34d", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f", "patch": "@@ -1,4 +1,4 @@\n-1d3e0ceee45012a1c3b4ff7f5119a72f90bfcf6a\n+9be198d960e4bc46e21e4da1e3d4a1619266b8ab\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "f61f9a0f2ddd895437a126421b06a6058d8a3590", "filename": "libgo/go/runtime/traceback_gccgo.go", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f/libgo%2Fgo%2Fruntime%2Ftraceback_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f/libgo%2Fgo%2Fruntime%2Ftraceback_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftraceback_gccgo.go?ref=24f1d7f80e0bb3fbb9b845300153d367b0cf2f5f", "patch": "@@ -89,6 +89,15 @@ func showframe(name string, gp *g) bool {\n \tif g.m.throwing > 0 && gp != nil && (gp == g.m.curg || gp == g.m.caughtsig.ptr()) {\n \t\treturn true\n \t}\n+\n+\t// Gccgo can trace back through C functions called via cgo.\n+\t// We want to print those in the traceback.\n+\t// But unless GOTRACEBACK > 1 (checked below), still skip\n+\t// internal C functions and cgo-generated functions.\n+\tif !contains(name, \".\") && !hasprefix(name, \"__go_\") && !hasprefix(name, \"_cgo_\") {\n+\t\treturn true\n+\t}\n+\n \tlevel, _, _ := gotraceback()\n \n \t// Special case: always show runtime.gopanic frame, so that we can"}]}