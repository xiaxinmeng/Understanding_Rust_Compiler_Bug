{"sha": "9e7af05301e80e24f1da8b8926351b76d6b9e29f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU3YWYwNTMwMWU4MGUyNGYxZGE4Yjg5MjYzNTFiNzZkNmI5ZTI5Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-07-26T07:36:07Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-07-26T07:36:07Z"}, "message": "genmatch.c (dt_simplify::gen): Make iterator vars const.\n\n2017-07-25  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (dt_simplify::gen): Make iterator vars const.\n\t(decision_tree::gen): Make 'type' const.\n\t(write_predicate): Likewise.\n\nFrom-SVN: r250556", "tree": {"sha": "767c55a6c78c7dd01eeb50a0f773446d9782cece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/767c55a6c78c7dd01eeb50a0f773446d9782cece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e7af05301e80e24f1da8b8926351b76d6b9e29f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e7af05301e80e24f1da8b8926351b76d6b9e29f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e7af05301e80e24f1da8b8926351b76d6b9e29f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e7af05301e80e24f1da8b8926351b76d6b9e29f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd6f4f462b2f0534ac94ec8d8e9511d364a4ad8"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "93afb1c19cb60bf5f4594fb81b1f91c24bf7510e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e7af05301e80e24f1da8b8926351b76d6b9e29f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e7af05301e80e24f1da8b8926351b76d6b9e29f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e7af05301e80e24f1da8b8926351b76d6b9e29f", "patch": "@@ -1,3 +1,9 @@\n+2017-07-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (dt_simplify::gen): Make iterator vars const.\n+\t(decision_tree::gen): Make 'type' const.\n+\t(write_predicate): Likewise.\n+\n 2017-07-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_init_hard_regno_mode_ok):"}, {"sha": "43f837236588e6c81d21c51a5d45a69fe51b85a8", "filename": "gcc/genmatch.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e7af05301e80e24f1da8b8926351b76d6b9e29f/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e7af05301e80e24f1da8b8926351b76d6b9e29f/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=9e7af05301e80e24f1da8b8926351b76d6b9e29f", "patch": "@@ -3461,11 +3461,11 @@ dt_simplify::gen (FILE *f, int indent, bool gimple)\n \t  if (! s->for_subst_vec[i].first->used)\n \t    continue;\n \t  if (is_a <operator_id *> (s->for_subst_vec[i].second))\n-\t    fprintf_indent (f, indent, \"enum tree_code %s = %s;\\n\",\n+\t    fprintf_indent (f, indent, \"const enum tree_code %s = %s;\\n\",\n \t\t\t    s->for_subst_vec[i].first->id,\n \t\t\t    s->for_subst_vec[i].second->id);\n \t  else if (is_a <fn_id *> (s->for_subst_vec[i].second))\n-\t    fprintf_indent (f, indent, \"combined_fn %s = %s;\\n\",\n+\t    fprintf_indent (f, indent, \"const combined_fn %s = %s;\\n\",\n \t\t\t    s->for_subst_vec[i].first->id,\n \t\t\t    s->for_subst_vec[i].second->id);\n \t  else\n@@ -3601,13 +3601,13 @@ decision_tree::gen (FILE *f, bool gimple)\n \t\t \"%s (code_helper *res_code, tree *res_ops,\\n\"\n \t\t \"                 gimple_seq *seq, tree (*valueize)(tree) \"\n \t\t \"ATTRIBUTE_UNUSED,\\n\"\n-\t\t \"                 tree ARG_UNUSED (type), tree *ARG_UNUSED \"\n+\t\t \"                 const tree ARG_UNUSED (type), tree *ARG_UNUSED \"\n \t\t \"(captures)\\n\",\n \t\t s->fname);\n       else\n \t{\n \t  fprintf (f, \"\\nstatic tree\\n\"\n-\t\t   \"%s (location_t ARG_UNUSED (loc), tree ARG_UNUSED (type),\\n\",\n+\t\t   \"%s (location_t ARG_UNUSED (loc), const tree ARG_UNUSED (type),\\n\",\n \t\t   (*iter).second->fname);\n \t  for (unsigned i = 0;\n \t       i < as_a <expr *>(s->s->s->match)->ops.length (); ++i)\n@@ -3619,10 +3619,10 @@ decision_tree::gen (FILE *f, bool gimple)\n \t  if (! s->s->s->for_subst_vec[i].first->used)\n \t    continue;\n \t  if (is_a <operator_id *> (s->s->s->for_subst_vec[i].second))\n-\t    fprintf (f, \", enum tree_code ARG_UNUSED (%s)\",\n+\t    fprintf (f, \", const enum tree_code ARG_UNUSED (%s)\",\n \t\t     s->s->s->for_subst_vec[i].first->id);\n \t  else if (is_a <fn_id *> (s->s->s->for_subst_vec[i].second))\n-\t    fprintf (f, \", combined_fn ARG_UNUSED (%s)\",\n+\t    fprintf (f, \", const combined_fn ARG_UNUSED (%s)\",\n \t\t     s->s->s->for_subst_vec[i].first->id);\n \t}\n \n@@ -3663,7 +3663,7 @@ decision_tree::gen (FILE *f, bool gimple)\n \t  else\n \t    fprintf (f, \"\\nstatic tree\\n\"\n \t\t     \"generic_simplify_%s (location_t ARG_UNUSED (loc), enum \"\n-\t\t     \"tree_code ARG_UNUSED (code), tree ARG_UNUSED (type)\",\n+\t\t     \"tree_code ARG_UNUSED (code), const tree ARG_UNUSED (type)\",\n \t\t     e->operation->id);\n \t  for (unsigned i = 0; i < n; ++i)\n \t    fprintf (f, \", tree op%d\", i);\n@@ -3683,11 +3683,11 @@ decision_tree::gen (FILE *f, bool gimple)\n \tfprintf (f, \"\\nstatic bool\\n\"\n \t\t \"gimple_simplify (code_helper *res_code, tree *res_ops,\\n\"\n \t\t \"                 gimple_seq *seq, tree (*valueize)(tree),\\n\"\n-\t\t \"                 code_helper code, tree type\");\n+\t\t \"                 code_helper code, const tree type\");\n       else\n \tfprintf (f, \"\\ntree\\n\"\n \t\t \"generic_simplify (location_t loc, enum tree_code code, \"\n-\t\t \"tree type ATTRIBUTE_UNUSED\");\n+\t\t \"const tree type ATTRIBUTE_UNUSED\");\n       for (unsigned i = 0; i < n; ++i)\n \tfprintf (f, \", tree op%d\", i);\n       fprintf (f, \")\\n\");\n@@ -3751,7 +3751,7 @@ write_predicate (FILE *f, predicate_id *p, decision_tree &dt, bool gimple)\n \t   p->nargs > 0 ? \", tree *res_ops\" : \"\",\n \t   gimple ? \", tree (*valueize)(tree) ATTRIBUTE_UNUSED\" : \"\");\n   /* Conveniently make 'type' available.  */\n-  fprintf_indent (f, 2, \"tree type = TREE_TYPE (t);\\n\");\n+  fprintf_indent (f, 2, \"const tree type = TREE_TYPE (t);\\n\");\n \n   if (!gimple)\n     fprintf_indent (f, 2, \"if (TREE_SIDE_EFFECTS (t)) return false;\\n\");"}]}