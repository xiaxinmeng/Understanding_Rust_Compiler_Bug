{"sha": "6de20b9d7a1af863fb51b4a783c153ea0092810a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRlMjBiOWQ3YTFhZjg2M2ZiNTFiNGE3ODNjMTUzZWEwMDkyODEwYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-07-01T08:58:44Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-07-01T08:58:44Z"}, "message": "Use ira_setup_alts for conflict detection\n\nmake_early_clobber_and_input_conflicts records allocno conflicts\nbetween inputs and earlyclobber outputs.  It (rightly) avoids\ndoing this for inputs that are explicitly allowed to match the\noutput due to matching constraints.\n\nThe problem is that whether this matching is allowed varies\nbetween alternatives.  At the moment the code avoids adding\na clobber if *any* enabled alternative allows the match,\neven if some other operand makes that alternative impossible.\n\nThe specific instance of this for SVE is that some alternatives\nallow matched earlyclobbers when a third operand X is constant zero.\nWe should avoid adding conflicts when X really is constant zero,\nbut should ignore the match if X is nonzero or nonconstant.\n\nira_setup_alts can already filter these alternatives out for us,\nso all we need to do is use it in process_bb_node_lives.  The\npreferred_alternatives variable is only used for this earlyclobber\ndetection, so no other check should be affected.\n\nWith the previous patch to check the reject weight in ira_setup_alts,\nthis has the effect of ignoring expensive alternatives if we have\nother valid alternatives with zero cost.  It seems reasonable to base\nthe heuristic on only the alternatives that we'd actually like to use,\nbut if this ends up being too aggressive, we could instead make the new\nreject behaviour conditional and only use it for add_insn_allocno_copies.\n\n2019-07-01  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* ira-lives.c (process_bb_node_lives): Use ira_setup_alts.\n\nFrom-SVN: r272851", "tree": {"sha": "cda310e70ab924dc48ca02e12b52807ee54d4a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cda310e70ab924dc48ca02e12b52807ee54d4a17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6de20b9d7a1af863fb51b4a783c153ea0092810a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de20b9d7a1af863fb51b4a783c153ea0092810a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de20b9d7a1af863fb51b4a783c153ea0092810a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de20b9d7a1af863fb51b4a783c153ea0092810a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae5569fa33c9f3286e0b747f8b6607d21a4b9827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5569fa33c9f3286e0b747f8b6607d21a4b9827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5569fa33c9f3286e0b747f8b6607d21a4b9827"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "489caf1476ad4bea4676cddc496aa122514595b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de20b9d7a1af863fb51b4a783c153ea0092810a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de20b9d7a1af863fb51b4a783c153ea0092810a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6de20b9d7a1af863fb51b4a783c153ea0092810a", "patch": "@@ -1,3 +1,7 @@\n+2019-07-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* ira-lives.c (process_bb_node_lives): Use ira_setup_alts.\n+\n 2019-07-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* ira.c (ira_get_dup_out_num): Don't punt for earlyclobbers."}, {"sha": "2029027125a1a6ca9fa9c8fdd3e9ac80d2d59416", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de20b9d7a1af863fb51b4a783c153ea0092810a/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de20b9d7a1af863fb51b4a783c153ea0092810a/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=6de20b9d7a1af863fb51b4a783c153ea0092810a", "patch": "@@ -80,8 +80,9 @@ static int last_call_num;\n /* The number of last call at which given allocno was saved.  */\n static int *allocno_saved_at_call;\n \n-/* The value of get_preferred_alternatives for the current instruction,\n-   supplemental to recog_data.  */\n+/* The value returned by ira_setup_alts for the current instruction;\n+   i.e. the set of alternatives that we should consider to be likely\n+   candidates during reloading.  */\n static alternative_mask preferred_alternatives;\n \n /* If non-NULL, the source operand of a register to register copy for which\n@@ -1236,9 +1237,7 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t\t  }\n \t      }\n \n-\t  extract_insn (insn);\n-\t  preferred_alternatives = get_preferred_alternatives (insn);\n-\t  preprocess_constraints (insn);\n+\t  preferred_alternatives = ira_setup_alts (insn);\n \t  process_single_reg_class_operands (false, freq);\n \n \t  if (call_p)"}]}