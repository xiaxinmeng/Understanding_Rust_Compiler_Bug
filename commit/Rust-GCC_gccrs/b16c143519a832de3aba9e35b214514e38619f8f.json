{"sha": "b16c143519a832de3aba9e35b214514e38619f8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2YzE0MzUxOWE4MzJkZTNhYmE5ZTM1YjIxNDUxNGUzODYxOWY4Zg==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2003-10-14T08:39:24Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2003-10-14T08:39:24Z"}, "message": "frv.c (frv_adjust_field_align): Redo check for too wide bitfields.\n\n2003-10-13  Eric Christopher  <echristo@redhat.com>\n\n\t* config/frv/frv.c (frv_adjust_field_align): Redo check for\n\ttoo wide bitfields.\n\t(frv_hard_regno_mode_ok): Add SPR_P and AP_FIRST.\n\t* config/frv/frv.h (FUNCTION_PROFILER): Remove abort call.\n\t(SBSS_SECTION_ASM_OP): Remove.\n\t(EXTRA_SECTIONS): Remove in_sbss.\n\t(EXTRA_SECTION_FUNCTIONS): Remove SBSS_SECTION_FUNCTION.\n\t(SBSS_SECTION_FUNCTION, sbss_section): Remove.\n\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Change sbss_section to\n\tnamed_section.\n\nFrom-SVN: r72463", "tree": {"sha": "ec9f03639646f043c5df5dc050340301a9ad3e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9f03639646f043c5df5dc050340301a9ad3e08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b16c143519a832de3aba9e35b214514e38619f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16c143519a832de3aba9e35b214514e38619f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16c143519a832de3aba9e35b214514e38619f8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16c143519a832de3aba9e35b214514e38619f8f/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a167978fa119e30cca1f45f0b814b4af9db7643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a167978fa119e30cca1f45f0b814b4af9db7643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a167978fa119e30cca1f45f0b814b4af9db7643"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "84a2355940af0ba273b5d267ba0fcebd4487588b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16c143519a832de3aba9e35b214514e38619f8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16c143519a832de3aba9e35b214514e38619f8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b16c143519a832de3aba9e35b214514e38619f8f", "patch": "@@ -1,3 +1,16 @@\n+2003-10-13  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config/frv/frv.c (frv_adjust_field_align): Redo check for\n+\ttoo wide bitfields.\n+\t(frv_hard_regno_mode_ok): Add SPR_P and AP_FIRST.\n+\t* config/frv/frv.h (FUNCTION_PROFILER): Remove abort call.\n+\t(SBSS_SECTION_ASM_OP): Remove.\n+\t(EXTRA_SECTIONS): Remove in_sbss.\n+\t(EXTRA_SECTION_FUNCTIONS): Remove SBSS_SECTION_FUNCTION.\n+\t(SBSS_SECTION_FUNCTION, sbss_section): Remove.\n+\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Change sbss_section to\n+\tnamed_section.\n+\n 2003-10-13  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* Makefile.in, configure.in, config.host, mkheaders.in: Replace"}, {"sha": "a9debdff2b14fc2d6c8430be79570fe05091248d", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16c143519a832de3aba9e35b214514e38619f8f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16c143519a832de3aba9e35b214514e38619f8f/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=b16c143519a832de3aba9e35b214514e38619f8f", "patch": "@@ -1469,7 +1469,7 @@ frv_frame_insn (pattern, dwarf_pattern)\n    simply be the stack pointer, but if several accesses are being made to a\n    region far away from the stack pointer, it may be more efficient to set\n    up a temporary instead.\n-   \n+\n    Store instructions will be frame-related and will be annotated with the\n    overall effect of the store.  Load instructions will be followed by a\n    (use) to prevent later optimizations from zapping them.\n@@ -1566,7 +1566,7 @@ frv_frame_access_standard_regs (op, info)\n   frv_frame_access_multi (&accessor, info, STACK_REGS_GPR);\n   frv_frame_access_multi (&accessor, info, STACK_REGS_FPR);\n   frv_frame_access_multi (&accessor, info, STACK_REGS_LCR);\n-}  \n+}\n \n \n /* Called after register allocation to add any instructions needed for the\n@@ -6933,7 +6933,7 @@ frv_ifcvt_modify_multiple_tests (ce_info, bb, p_true, p_false)\n \n   if (GET_CODE (cr) != REG)\n     goto fail;\n-      \n+\n   if (mode == CCmode || mode == CC_UNSmode)\n     {\n       cr_class = ICR_REGS;\n@@ -7794,15 +7794,17 @@ frv_adjust_field_align (field, computed)\n      tree field;\n      int computed;\n {\n-  /* C++ provides a null DECL_CONTEXT if the bit field is wider than its\n-     type.  */\n-  if (DECL_BIT_FIELD (field) && DECL_CONTEXT (field))\n+\n+  tree type = TREE_TYPE (field);\n+\n+  /* Make sure that the bitfield is not wider than the type.  */\n+  if (DECL_BIT_FIELD (field)\n+      && tree_int_cst_compare (DECL_SIZE (field), TYPE_SIZE (type)) <= 0)\n     {\n       tree parent = DECL_CONTEXT (field);\n       tree prev = NULL_TREE;\n       tree cur;\n \n-      /* Loop finding the previous field to the current one */\n       for (cur = TYPE_FIELDS (parent); cur && cur != field; cur = TREE_CHAIN (cur))\n \t{\n \t  if (TREE_CODE (cur) != FIELD_DECL)\n@@ -7925,8 +7927,8 @@ frv_hard_regno_mode_ok (regno, mode)\n \t}\n       else\n \t{\n-\t  /* The other registers store one word.  */\n-\t  if (GPR_P (regno))\n+\t   /* The other registers store one word.  */\n+\t  if (GPR_P (regno) || regno == AP_FIRST)\n \t    base = GPR_FIRST;\n \n \t  else if (FPR_P (regno))\n@@ -7935,6 +7937,10 @@ frv_hard_regno_mode_ok (regno, mode)\n \t  else if (ACC_P (regno))\n \t    base = ACC_FIRST;\n \n+\t  else if (SPR_P (regno))\n+\t    return mode == SImode;\n+\n+\t  /* Fill in the table. */\n \t  else\n \t    return 0;\n \n@@ -9075,7 +9081,7 @@ frv_init_builtins ()\n   def_builtin (\"__MPACKH\", uw1_ftype_uh_uh, FRV_BUILTIN_MPACKH);\n   def_builtin (\"__MUNPACKH\", uw2_ftype_uw1, FRV_BUILTIN_MUNPACKH);\n   def_builtin (\"__MDPACKH\", uw2_ftype_uw2_uw2, FRV_BUILTIN_MDPACKH);\n-  def_builtin (\"__MDUNPACKH\", void_ftype_uw4_uw2, FRV_BUILTIN_MDUNPACKH); \n+  def_builtin (\"__MDUNPACKH\", void_ftype_uw4_uw2, FRV_BUILTIN_MDUNPACKH);\n   def_builtin (\"__MBTOH\", uw2_ftype_uw1, FRV_BUILTIN_MBTOH);\n   def_builtin (\"__MHTOB\", uw1_ftype_uw2, FRV_BUILTIN_MHTOB);\n   def_builtin (\"__MBTOHE\", void_ftype_uw4_uw1, FRV_BUILTIN_MBTOHE);"}, {"sha": "2f958da582b83ce893bdac2160fa2dd501af2ca0", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b16c143519a832de3aba9e35b214514e38619f8f/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b16c143519a832de3aba9e35b214514e38619f8f/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=b16c143519a832de3aba9e35b214514e38619f8f", "patch": "@@ -2076,7 +2076,7 @@ struct machine_function GTY(())\n    This declaration must be present, but it can be an abort if profiling is\n    not implemented.  */\n \n-#define FUNCTION_PROFILER(FILE, LABELNO) abort ()\n+#define FUNCTION_PROFILER(FILE, LABELNO)\n \n \f\n /* Implementing the Varargs Macros.  */\n@@ -2522,7 +2522,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n \n /* Short Data Support */\n #define SDATA_SECTION_ASM_OP\t\"\\t.section .sdata,\\\"aw\\\"\"\n-#define SBSS_SECTION_ASM_OP\t\"\\t.section .sbss,\\\"aw\\\"\"\n \n /* On svr4, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n@@ -2553,7 +2552,7 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n    `in_text' and `in_data'.  You need not define this macro\n    on a system with no other sections (that GCC needs to use).  */\n #undef  EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_sdata, in_sbss, in_const, in_fixup\n+#define EXTRA_SECTIONS in_sdata, in_const, in_fixup\n \n /* One or more functions to be defined in \"varasm.c\".  These\n    functions should do jobs analogous to those of `text_section' and\n@@ -2562,7 +2561,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n #undef  EXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS                                         \\\n \tSDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n-\tSBSS_SECTION_FUNCTION\t\t\t\t\t\t\\\n \tFIXUP_SECTION_FUNCTION\n \n #define SDATA_SECTION_FUNCTION\t\t\t\t\t\t\\\n@@ -2576,17 +2574,6 @@ sdata_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define SBSS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-sbss_section ()\t\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_sbss)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", SBSS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_sbss;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n #define FIXUP_SECTION_FUNCTION\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n fixup_section ()\t\t\t\t\t\t\t\\\n@@ -2682,7 +2669,7 @@ extern int size_directive_output;\n #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(STREAM, DECL, NAME, SIZE, ALIGN)\t\\\n do {                                                                   \t\\\n   if ((SIZE) > 0 && (SIZE) <= g_switch_value)\t\t\t\t\\\n-    sbss_section ();                                                 \t\\\n+    named_section (0, \".sbss\", 0);                                    \t\\\n   else                                                                 \t\\\n     bss_section ();                                                  \t\\\n   ASM_OUTPUT_ALIGN (STREAM, floor_log2 ((ALIGN) / BITS_PER_UNIT));     \t\\"}]}