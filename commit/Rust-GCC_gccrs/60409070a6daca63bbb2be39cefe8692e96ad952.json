{"sha": "60409070a6daca63bbb2be39cefe8692e96ad952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA0MDkwNzBhNmRhY2E2M2JiYjJiZTM5Y2VmZTg2OTJlOTZhZDk1Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-01-19T11:55:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-19T11:55:37Z"}, "message": "calls.c (expand_call): Strip a TARGET_EXPR if we're passing by invisible reference.\n\n\t* calls.c (expand_call): Strip a TARGET_EXPR if we're passing by\n\tinvisible reference.\n\nFrom-SVN: r24763", "tree": {"sha": "e91ca19634322bc4574280c639a5bc44de7f104c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e91ca19634322bc4574280c639a5bc44de7f104c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60409070a6daca63bbb2be39cefe8692e96ad952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60409070a6daca63bbb2be39cefe8692e96ad952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60409070a6daca63bbb2be39cefe8692e96ad952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60409070a6daca63bbb2be39cefe8692e96ad952/comments", "author": null, "committer": null, "parents": [{"sha": "97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f6e72f229d19e8871a53fd9f553d1a2ccd8e9f"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "b9ca3b78a8028076a60ac3c931fc82a469d6f249", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60409070a6daca63bbb2be39cefe8692e96ad952/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60409070a6daca63bbb2be39cefe8692e96ad952/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60409070a6daca63bbb2be39cefe8692e96ad952", "patch": "@@ -1,3 +1,8 @@\n+Tue Jan 19 11:54:04 1999  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* calls.c (expand_call): Strip a TARGET_EXPR if we're passing by\n+\tinvisible reference.\n+\n Tue Jan 19 14:51:36 1999  David Edelsohn  <edelsohn@mhpcc.edu>\n \n \t* rs6000.c (offsettable_addr_operand): Delete."}, {"sha": "8ce140aeebcf32203ec66a9696387b3e2f8159f6", "filename": "gcc/calls.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60409070a6daca63bbb2be39cefe8692e96ad952/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60409070a6daca63bbb2be39cefe8692e96ad952/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=60409070a6daca63bbb2be39cefe8692e96ad952", "patch": "@@ -1345,6 +1345,22 @@ expand_call (exp, target, ignore)\n #endif\n \t      )\n \t    {\n+\t      /* C++ uses a TARGET_EXPR to indicate that we want to make a\n+\t         new object from the argument.  If we are passing by\n+\t         invisible reference, the callee will do that for us, so we\n+\t         can strip off the TARGET_EXPR.  This is not always safe,\n+\t         but it is safe in the only case where this is a useful\n+\t         optimization; namely, when the argument is a plain object.\n+\t         In that case, the frontend is just asking the backend to\n+\t         make a bitwise copy of the argument. */\n+\t\t \n+\t      if (TREE_CODE (args[i].tree_value) == TARGET_EXPR\n+\t\t  && (TREE_CODE_CLASS (TREE_CODE (TREE_OPERAND\n+\t\t\t\t\t\t  (args[i].tree_value, 1)))\n+\t\t      == 'd')\n+\t\t  && ! REG_P (DECL_RTL (TREE_OPERAND (args[i].tree_value, 1))))\n+\t\targs[i].tree_value = TREE_OPERAND (args[i].tree_value, 1);\n+\n \t      args[i].tree_value = build1 (ADDR_EXPR,\n \t\t\t\t\t   build_pointer_type (type),\n \t\t\t\t\t   args[i].tree_value);"}]}