{"sha": "67f2d54f56cf4e978cf8e2d78330da7948f99591", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdmMmQ1NGY1NmNmNGU5NzhjZjhlMmQ3ODMzMGRhNzk0OGY5OTU5MQ==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-08-01T16:58:20Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-08-01T16:58:20Z"}, "message": "re PR tree-optimization/49926 (ice in process_use, at tree-vect-stmts.c:405)\n\n\n        PR tree-optimization/49926\n        * tree-vect-loop.c (vect_is_slp_reduction): Check that a\n        statement in a chain doesn't have uses both inside and\n        outside the loop.\n\nFrom-SVN: r177063", "tree": {"sha": "ee9c0562d8abcd98e8100161a75488131a8a66cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee9c0562d8abcd98e8100161a75488131a8a66cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67f2d54f56cf4e978cf8e2d78330da7948f99591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f2d54f56cf4e978cf8e2d78330da7948f99591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f2d54f56cf4e978cf8e2d78330da7948f99591", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f2d54f56cf4e978cf8e2d78330da7948f99591/comments", "author": null, "committer": null, "parents": [{"sha": "2933b16cf255cc606c6b29ee542d3eef6a063315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2933b16cf255cc606c6b29ee542d3eef6a063315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2933b16cf255cc606c6b29ee542d3eef6a063315"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "1b5e6de57cd9c84dfe6c051b463b3cb5b75244f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f2d54f56cf4e978cf8e2d78330da7948f99591/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f2d54f56cf4e978cf8e2d78330da7948f99591/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67f2d54f56cf4e978cf8e2d78330da7948f99591", "patch": "@@ -1,3 +1,9 @@\n+2011-08-01  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/49926\n+\t* tree-vect-loop.c (vect_is_slp_reduction): Check that a statement\n+\tin a chain doesn't have uses both inside and outside the loop.\n+\n 2011-08-01  Georg-Johann Lay  <avr@gjlay.de>\n \t\n \t* config/avr/avr.h (mcu_type_s): Add errata_skip field."}, {"sha": "b1a31221b78cdb268af1d73ace54c559a4335bef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f2d54f56cf4e978cf8e2d78330da7948f99591/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f2d54f56cf4e978cf8e2d78330da7948f99591/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67f2d54f56cf4e978cf8e2d78330da7948f99591", "patch": "@@ -1,3 +1,8 @@\n+2011-08-01  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/49926\n+\t* gcc.dg/vect/pr49926.c: New test.\n+\n 2011-08-01  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* gcc.target/i386/i386.exp (check_effective_target_lzcnt): New."}, {"sha": "6096817346906ac9029d51f0e92f1a52f6b7abf9", "filename": "gcc/testsuite/gcc.dg/vect/pr49926.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f2d54f56cf4e978cf8e2d78330da7948f99591/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr49926.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f2d54f56cf4e978cf8e2d78330da7948f99591/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr49926.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr49926.c?ref=67f2d54f56cf4e978cf8e2d78330da7948f99591", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+int a, b, c[10];\n+\n+void\n+foo (unsigned int x, int y, int z, int *w)\n+{\n+  do\n+    {\n+      *w = z;\n+      y = x;\n+      if (y)\n+        for (b = -4; b; b++)\n+          {\n+            z = y &= a &= 1;\n+            y &= c[b + 4];\n+          }\n+    }\n+  while (1);\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "505a41acb039862e81e170822693fe136be2185a", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f2d54f56cf4e978cf8e2d78330da7948f99591/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f2d54f56cf4e978cf8e2d78330da7948f99591/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=67f2d54f56cf4e978cf8e2d78330da7948f99591", "patch": "@@ -1730,7 +1730,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n   tree lhs;\n   imm_use_iterator imm_iter;\n   use_operand_p use_p;\n-  int nloop_uses, size = 0;\n+  int nloop_uses, size = 0, n_out_of_loop_uses;\n   bool found = false;\n \n   if (loop != vect_loop)\n@@ -1741,6 +1741,7 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n   while (1)\n     {\n       nloop_uses = 0;\n+      n_out_of_loop_uses = 0;\n       FOR_EACH_IMM_USE_FAST (use_p, imm_iter, lhs)\n         {\n \t  gimple use_stmt = USE_STMT (use_p);\n@@ -1757,16 +1758,22 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n               break;\n             }\n \n-          if (flow_bb_inside_loop_p (loop, gimple_bb (use_stmt))\n-              && vinfo_for_stmt (use_stmt)\n-\t      && !STMT_VINFO_IN_PATTERN_P (vinfo_for_stmt (use_stmt)))\n-\t    {\n-\t      loop_use_stmt = use_stmt;\n-\t      nloop_uses++;\n-\t    }\n+          if (flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n+            {\n+              if (vinfo_for_stmt (use_stmt)\n+                  && !STMT_VINFO_IN_PATTERN_P (vinfo_for_stmt (use_stmt)))\n+                {\n+                  loop_use_stmt = use_stmt;\n+                  nloop_uses++;\n+                }\n+            }\n+           else\n+             n_out_of_loop_uses++;\n \n-          if (nloop_uses > 1)\n-            return false;\n+           /* There are can be either a single use in the loop or two uses in\n+              phi nodes.  */\n+           if (nloop_uses > 1 || (n_out_of_loop_uses && nloop_uses))\n+             return false;\n         }\n \n       if (found)"}]}