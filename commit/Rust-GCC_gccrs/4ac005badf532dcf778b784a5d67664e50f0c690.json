{"sha": "4ac005badf532dcf778b784a5d67664e50f0c690", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFjMDA1YmFkZjUzMmRjZjc3OGI3ODRhNWQ2NzY2NGU1MGYwYzY5MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-01-16T08:23:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-01-16T08:23:33Z"}, "message": "i386.c (ix86_hard_regno_mode_ok): Use VALID_AVX256_REG_OR_OI_MODE.\n\n\t* config/i386/i386.c (ix86_hard_regno_mode_ok): Use\n\tVALID_AVX256_REG_OR_OI_MODE.\n\nFrom-SVN: r206658", "tree": {"sha": "cac7857525f6200fb927daa637a9b5b0445a0f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cac7857525f6200fb927daa637a9b5b0445a0f7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ac005badf532dcf778b784a5d67664e50f0c690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac005badf532dcf778b784a5d67664e50f0c690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac005badf532dcf778b784a5d67664e50f0c690", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac005badf532dcf778b784a5d67664e50f0c690/comments", "author": null, "committer": null, "parents": [{"sha": "c4ef5952f6d19bcdfc8dd8f3f5a2a09c8f079115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ef5952f6d19bcdfc8dd8f3f5a2a09c8f079115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ef5952f6d19bcdfc8dd8f3f5a2a09c8f079115"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "255597fe53943e8c23938b51afe8d9517ccbc9ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac005badf532dcf778b784a5d67664e50f0c690/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac005badf532dcf778b784a5d67664e50f0c690/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ac005badf532dcf778b784a5d67664e50f0c690", "patch": "@@ -1,3 +1,8 @@\n+2014-01-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_hard_regno_mode_ok): Use\n+\tVALID_AVX256_REG_OR_OI_MODE.\n+\n 2014-01-15  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_output_function_prologue): Check if\n@@ -142,9 +147,8 @@\n \n \tPR target/59794\n \t* config/i386/i386.c (type_natural_mode): Add a bool parameter\n-\tto indicate if type is used for function return value.  Warn\n-\tABI change if the vector mode isn't available for function\n-\treturn value.\n+\tto indicate if type is used for function return value.  Warn ABI\n+\tchange if the vector mode isn't available for function return value.\n \t(ix86_function_arg_advance): Pass false to type_natural_mode.\n \t(ix86_function_arg): Likewise.\n \t(ix86_gimplify_va_arg): Likewise.\n@@ -201,8 +205,10 @@\n \t(<sse4_1_avx2>_movntdqa): Extend to 512 bits.\n \t(avx512er_exp2<mode><mask_name><round_saeonly_name>):\n \tFix rounding: make it SAE only.\n-\t(<mask_codefor>avx512er_rcp28<mode><mask_name><round_saeonly_name>): Ditto.\n-\t(<mask_codefor>avx512er_rsqrt28<mode><mask_name><round_saeonly_name>): Ditto.\n+\t(<mask_codefor>avx512er_rcp28<mode><mask_name><round_saeonly_name>):\n+\tDitto.\n+\t(<mask_codefor>avx512er_rsqrt28<mode><mask_name><round_saeonly_name>):\n+\tDitto.\n \t(avx512er_vmrcp28<mode><round_saeonly_name>): Ditto.\n \t(avx512er_vmrsqrt28<mode><round_saeonly_name>): Ditto.\n \t(avx512f_getmant<mode><mask_name><round_saeonly_name>): Ditto.\n@@ -316,8 +322,8 @@\n 2014-01-10  Jan Hubicka  <jh@suse.cz>\n \n \tPR ipa/58585\n-\t* ipa-devirt.c (build_type_inheritance_graph): Also add types of vtables\n-\tinto the type inheritance graph.\n+\t* ipa-devirt.c (build_type_inheritance_graph): Also add types of\n+\tvtables into the type inheritance graph.\n \n 2014-01-10  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -475,17 +481,17 @@\n \n 2014-01-09  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n \n-\t* cfgexpand.c (expand_stack_vars): Optionally disable \n+\t* cfgexpand.c (expand_stack_vars): Optionally disable\n \tasan stack protection.\n \t(expand_used_vars): Likewise.\n \t(partition_stack_vars): Likewise.\n-\t* asan.c (asan_emit_stack_protection): Optionally disable \n+\t* asan.c (asan_emit_stack_protection): Optionally disable\n \tafter return stack usage.\n-\t(instrument_derefs): Optionally disable memory \n+\t(instrument_derefs): Optionally disable memory\n \taccess instrumentation.\n \t(instrument_builtin_call): Likewise.\n \t(instrument_strlen_call): Likewise.\n-\t(asan_protect_global): Optionally disable \n+\t(asan_protect_global): Optionally disable\n \tglobal variables protection.\n \t* doc/invoke.texi: Added doc for new options.\n \t* params.def: Added new options.\n@@ -512,7 +518,8 @@\n \n 2014-01-08  Catherine Moore  <clm@codesourcery.com>\n \n-\t* config/mips/mips.md (simple_return): Attempt to use JRC for microMIPS.\n+\t* config/mips/mips.md (simple_return): Attempt to use JRC\n+\tfor microMIPS.\n \t* config/mips/mips.h (MIPS_CALL): Attempt to use JALS for microMIPS.\n \n 2014-01-08  Richard Sandiford  <rdsandiford@googlemail.com>\n@@ -557,7 +564,7 @@\n \t(store_expr): Adjust.\n \t* cfgexpand.c (expand_call_stmt): Adjust.\n \n-2014-01-08  Rong Xu  <xur@google.com> \n+2014-01-08  Rong Xu  <xur@google.com>\n \n \t* gcov-io.c (gcov_var): Move from gcov-io.h.\n \t(gcov_position): Ditto.\n@@ -610,12 +617,10 @@\n \tPR middle-end/53623\n \t* ree.c (combine_set_extension): Handle case where source\n \tand destination registers in an extension insn are different.\n-\t(combine_reaching_defs): Allow source and destination\n-\tregisters in extension to be different under limited\n-\tcircumstances.\n+\t(combine_reaching_defs): Allow source and destination registers\n+\tin extension to be different under limited circumstances.\n \t(add_removable_extension): Remove restriction that the\n-\tsource and destination registers in the extension are the\n-\tsame.\n+\tsource and destination registers in the extension are the same.\n \t(find_and_remove_re): Emit a copy from the extension's\n \tdestination to its source after the defining insn if\n \tthe source and destination registers are different.\n@@ -640,8 +645,7 @@\n \n \tPR 57386/target\n \t* config/rs6000/rs6000.c (rs6000_legitimate_offset_address_p):\n-\tOnly check TFmode for SPE constants.  Don't check TImode or\n-\tTDmode.\n+\tOnly check TFmode for SPE constants.  Don't check TImode or TDmode.\n \n 2014-01-07  James Greenhalgh  <james.greenhalgh@arm.com>\n "}, {"sha": "73c5a86543c24c1016993d2ad853809b8fd62c83", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac005badf532dcf778b784a5d67664e50f0c690/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac005badf532dcf778b784a5d67664e50f0c690/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4ac005badf532dcf778b784a5d67664e50f0c690", "patch": "@@ -37473,9 +37473,9 @@ ix86_hard_regno_mode_ok (int regno, enum machine_mode mode)\n       if (EXT_REX_SSE_REGNO_P (regno))\n \treturn false;\n \n-      /* OImode move is available only when AVX is enabled.  */\n-      return ((TARGET_AVX && mode == OImode)\n-\t      || (TARGET_AVX && VALID_AVX256_REG_MODE (mode))\n+      /* OImode and AVX modes are available only when AVX is enabled.  */\n+      return ((TARGET_AVX\n+\t       && VALID_AVX256_REG_OR_OI_MODE (mode))\n \t      || VALID_SSE_REG_MODE (mode)\n \t      || VALID_SSE2_REG_MODE (mode)\n \t      || VALID_MMX_REG_MODE (mode)"}, {"sha": "3199b41292dd306e314bade67c35f7942d088efc", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ac005badf532dcf778b784a5d67664e50f0c690/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ac005badf532dcf778b784a5d67664e50f0c690/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4ac005badf532dcf778b784a5d67664e50f0c690", "patch": "@@ -1047,7 +1047,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == V4DImode || (MODE) == V2TImode || (MODE) == V8SFmode\t\\\n    || (MODE) == V4DFmode)\n \n-#define VALID_AVX256_REG_OR_OI_MODE(MODE)\t\t\t\t\t\\\n+#define VALID_AVX256_REG_OR_OI_MODE(MODE)\t\t\\\n   (VALID_AVX256_REG_MODE (MODE) || (MODE) == OImode)\n \n #define VALID_AVX512F_SCALAR_MODE(MODE)\t\t\t\t\t\\"}]}