{"sha": "bfc48cd85f90b6d000d2c2c81eb4a6175817f9df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZjNDhjZDg1ZjkwYjZkMDAwZDJjMmM4MWViNGE2MTc1ODE3ZjlkZg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-09T14:30:39Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-09T14:30:39Z"}, "message": "call.c (add_builtin_candidates): Use VECs for local variable `types'.\n\n\t* call.c (add_builtin_candidates): Use VECs for local variable\n\t`types'.  Adjust remainder of function accordingly.\n\nFrom-SVN: r163035", "tree": {"sha": "519c83e03d3f123cfe8c2b2076337e08204cef67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/519c83e03d3f123cfe8c2b2076337e08204cef67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfc48cd85f90b6d000d2c2c81eb4a6175817f9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc48cd85f90b6d000d2c2c81eb4a6175817f9df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfc48cd85f90b6d000d2c2c81eb4a6175817f9df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc48cd85f90b6d000d2c2c81eb4a6175817f9df/comments", "author": null, "committer": null, "parents": [{"sha": "d4ccba6615b947c4a59daa9be2006c42640e2477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4ccba6615b947c4a59daa9be2006c42640e2477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4ccba6615b947c4a59daa9be2006c42640e2477"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "6355215f580c5cefe975470bdb3c8d0f582053ef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc48cd85f90b6d000d2c2c81eb4a6175817f9df/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc48cd85f90b6d000d2c2c81eb4a6175817f9df/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bfc48cd85f90b6d000d2c2c81eb4a6175817f9df", "patch": "@@ -1,3 +1,8 @@\n+2010-08-09  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* call.c (add_builtin_candidates): Use VECs for local variable\n+\t`types'.  Adjust remainder of function accordingly.\n+\n 2010-08-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* name-lookup.c (is_associated_namespace): Convert local variables"}, {"sha": "71297ec630ae404f4eb7591a167a0f344db31a00", "filename": "gcc/cp/call.c", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc48cd85f90b6d000d2c2c81eb4a6175817f9df/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc48cd85f90b6d000d2c2c81eb4a6175817f9df/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=bfc48cd85f90b6d000d2c2c81eb4a6175817f9df", "patch": "@@ -2328,12 +2328,11 @@ add_builtin_candidates (struct z_candidate **candidates, enum tree_code code,\n {\n   int ref1, i;\n   int enum_p = 0;\n-  tree type, argtypes[3];\n+  tree type, argtypes[3], t;\n   /* TYPES[i] is the set of possible builtin-operator parameter types\n-     we will consider for the Ith argument.  These are represented as\n-     a TREE_LIST; the TREE_VALUE of each node is the potential\n-     parameter type.  */\n-  tree types[2];\n+     we will consider for the Ith argument.  */\n+  VEC(tree,gc) *types[2];\n+  unsigned ix;\n \n   for (i = 0; i < 3; ++i)\n     {\n@@ -2395,7 +2394,8 @@ add_builtin_candidates (struct z_candidate **candidates, enum tree_code code,\n       ref1 = 0;\n     }\n \n-  types[0] = types[1] = NULL_TREE;\n+  types[0] = make_tree_vector ();\n+  types[1] = make_tree_vector ();\n \n   for (i = 0; i < 2; ++i)\n     {\n@@ -2414,11 +2414,11 @@ add_builtin_candidates (struct z_candidate **candidates, enum tree_code code,\n \t  if (code == COND_EXPR)\n \t    {\n \t      if (real_lvalue_p (args[i]))\n-\t\ttypes[i] = tree_cons\n-\t\t  (NULL_TREE, build_reference_type (argtypes[i]), types[i]);\n+\t\tVEC_safe_push (tree, gc, types[i],\n+\t\t\t       build_reference_type (argtypes[i]));\n \n-\t      types[i] = tree_cons\n-\t\t(NULL_TREE, TYPE_MAIN_VARIANT (argtypes[i]), types[i]);\n+\t      VEC_safe_push (tree, gc, types[i],\n+\t\t\t     TYPE_MAIN_VARIANT (argtypes[i]));\n \t    }\n \n \t  else if (! convs)\n@@ -2434,54 +2434,60 @@ add_builtin_candidates (struct z_candidate **candidates, enum tree_code code,\n \t\tcontinue;\n \n \t      if (code == COND_EXPR && TREE_CODE (type) == REFERENCE_TYPE)\n-\t\ttypes[i] = tree_cons (NULL_TREE, type, types[i]);\n+\t\tVEC_safe_push (tree, gc, types[i], type);\n \n \t      type = non_reference (type);\n \t      if (i != 0 || ! ref1)\n \t\t{\n \t\t  type = TYPE_MAIN_VARIANT (type_decays_to (type));\n \t\t  if (enum_p && TREE_CODE (type) == ENUMERAL_TYPE)\n-\t\t    types[i] = tree_cons (NULL_TREE, type, types[i]);\n+\t\t    VEC_safe_push (tree, gc, types[i], type);\n \t\t  if (INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (type))\n \t\t    type = type_promotes_to (type);\n \t\t}\n \n-\t      if (! value_member (type, types[i]))\n-\t\ttypes[i] = tree_cons (NULL_TREE, type, types[i]);\n+\t      if (! vec_member (type, types[i]))\n+\t\tVEC_safe_push (tree, gc, types[i], type);\n \t    }\n \t}\n       else\n \t{\n \t  if (code == COND_EXPR && real_lvalue_p (args[i]))\n-\t    types[i] = tree_cons\n-\t      (NULL_TREE, build_reference_type (argtypes[i]), types[i]);\n+\t    VEC_safe_push (tree, gc, types[i],\n+\t\t\t   build_reference_type (argtypes[i]));\n \t  type = non_reference (argtypes[i]);\n \t  if (i != 0 || ! ref1)\n \t    {\n \t      type = TYPE_MAIN_VARIANT (type_decays_to (type));\n \t      if (enum_p && UNSCOPED_ENUM_P (type))\n-\t\ttypes[i] = tree_cons (NULL_TREE, type, types[i]);\n+\t\tVEC_safe_push (tree, gc, types[i], type);\n \t      if (INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (type))\n \t\ttype = type_promotes_to (type);\n \t    }\n-\t  types[i] = tree_cons (NULL_TREE, type, types[i]);\n+\t  VEC_safe_push (tree, gc, types[i], type);\n \t}\n     }\n \n   /* Run through the possible parameter types of both arguments,\n      creating candidates with those parameter types.  */\n-  for (; types[0]; types[0] = TREE_CHAIN (types[0]))\n+  FOR_EACH_VEC_ELT_REVERSE (tree, types[0], ix, t)\n     {\n-      if (types[1])\n-\tfor (type = types[1]; type; type = TREE_CHAIN (type))\n+      unsigned jx;\n+      tree u;\n+\n+      if (!VEC_empty (tree, types[1]))\n+\tFOR_EACH_VEC_ELT_REVERSE (tree, types[1], jx, u)\n \t  add_builtin_candidate\n-\t    (candidates, code, code2, fnname, TREE_VALUE (types[0]),\n-\t     TREE_VALUE (type), args, argtypes, flags);\n+\t    (candidates, code, code2, fnname, t,\n+\t     u, args, argtypes, flags);\n       else\n \tadd_builtin_candidate\n-\t  (candidates, code, code2, fnname, TREE_VALUE (types[0]),\n+\t  (candidates, code, code2, fnname, t,\n \t   NULL_TREE, args, argtypes, flags);\n     }\n+\n+  release_tree_vector (types[0]);\n+  release_tree_vector (types[1]);\n }\n \n "}]}