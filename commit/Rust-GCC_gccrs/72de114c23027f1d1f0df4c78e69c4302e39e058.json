{"sha": "72de114c23027f1d1f0df4c78e69c4302e39e058", "node_id": "C_kwDOANBUbNoAKDcyZGUxMTRjMjMwMjdmMWQxZjBkZjRjNzhlNjljNDMwMmUzOWUwNTg", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2022-04-06T00:20:10Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-18T08:41:06Z"}, "message": "[Ada] Improve error messages for occurrence of GNAT extensions without -gnatX\n\nThe error message issued for use of GNAT extension features without\nspecifying -gnatX (or pragma Extensions_Allowed) was confusing in the\npresence of a pragma specifying a language version (such as \"pragma\nAda_2022;\"), because the pragma supersedes the switch.  The message is\nimproved by testing for use of such a pragma, plus use of pragma\nExtensions_Allowed is now suggested, and several cases are changed to\ncall the common error procedure for flagging uses of extension features.\n\ngcc/ada/\n\n\t* errout.ads (Error_Msg_GNAT_Extension): Add formal Loc and\n\trevise comment.\n\t* errout.adb (Error_Msg_GNAT_Extension): Condition message on\n\tthe flag Ada_Version_Pragma, and add suggestion to use of pragma\n\tExtensions_Allowed in messages.\n\t* par-ch3.adb, par-ch5.adb, par-ch6.adb, par-ch11.adb,\n\tpar-ch12.adb: Add actual Token_Ptr on calls to\n\tError_Msg_GNAT_Extension.\n\t* par-ch4.adb: Change Error_Msg to Error_Msg_GNAT_Extension for\n\terror calls related to use of extension features.\n\t* sem_ch13.adb: Likewise.", "tree": {"sha": "c5c1ffd439a5e669ba8b3f8b1ec1f54d3618e501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c1ffd439a5e669ba8b3f8b1ec1f54d3618e501"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72de114c23027f1d1f0df4c78e69c4302e39e058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72de114c23027f1d1f0df4c78e69c4302e39e058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72de114c23027f1d1f0df4c78e69c4302e39e058", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72de114c23027f1d1f0df4c78e69c4302e39e058/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b271095d5076f837391b2726c1265ae2e91fafa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b271095d5076f837391b2726c1265ae2e91fafa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b271095d5076f837391b2726c1265ae2e91fafa8"}], "stats": {"total": 68, "additions": 32, "deletions": 36}, "files": [{"sha": "101aed435e6ad967b991026a557c399a561911d7", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=72de114c23027f1d1f0df4c78e69c4302e39e058", "patch": "@@ -896,12 +896,19 @@ package body Errout is\n    -- Error_Msg_GNAT_Extension --\n    ------------------------------\n \n-   procedure Error_Msg_GNAT_Extension (Extension : String) is\n-      Loc : constant Source_Ptr := Token_Ptr;\n+   procedure Error_Msg_GNAT_Extension (Extension : String; Loc : Source_Ptr) is\n    begin\n       if not Extensions_Allowed then\n-         Error_Msg (Extension & \" is a 'G'N'A'T specific extension\", Loc);\n-         Error_Msg (\"\\unit must be compiled with -gnatX switch\", Loc);\n+         Error_Msg (Extension & \" is a 'G'N'A'T-specific extension\", Loc);\n+\n+         if No (Ada_Version_Pragma) then\n+            Error_Msg (\"\\unit must be compiled with -gnatX \"\n+                       & \"or use pragma Extensions_Allowed (On)\", Loc);\n+         else\n+            Error_Msg_Sloc := Sloc (Ada_Version_Pragma);\n+            Error_Msg (\"\\incompatible with Ada version set#\", Loc);\n+            Error_Msg (\"\\must use pragma Extensions_Allowed (On)\", Loc);\n+         end if;\n       end if;\n    end Error_Msg_GNAT_Extension;\n "}, {"sha": "c115a1ba5332548cf722a6f4d66c11c7eb267c18", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=72de114c23027f1d1f0df4c78e69c4302e39e058", "patch": "@@ -943,10 +943,11 @@ package Errout is\n    procedure Error_Msg_Ada_2022_Feature (Feature : String; Loc : Source_Ptr);\n    --  Analogous to Error_Msg_Ada_2012_Feature, for Ada 2022\n \n-   procedure Error_Msg_GNAT_Extension (Extension : String);\n+   procedure Error_Msg_GNAT_Extension (Extension : String; Loc : Source_Ptr);\n    --  If not operating with extensions allowed, posts errors complaining\n-   --  that Extension is only supported when the -gnatX switch is enabled,\n-   --  with appropriate suggestions to fix it.\n+   --  that Extension is only supported when the -gnatX switch is enabled\n+   --  or pragma Extensions_Allowed (On) is used. Loc indicates the source\n+   --  location of the extension construct.\n \n    procedure dmsg (Id : Error_Msg_Id) renames Erroutc.dmsg;\n    --  Debugging routine to dump an error message"}, {"sha": "158050abc2cc86d8ffa88ae4d10f637825ab7481", "filename": "gcc/ada/par-ch11.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch11.adb?ref=72de114c23027f1d1f0df4c78e69c4302e39e058", "patch": "@@ -234,7 +234,7 @@ package body Ch11 is\n       end if;\n \n       if Token = Tok_When then\n-         Error_Msg_GNAT_Extension (\"raise when statement\");\n+         Error_Msg_GNAT_Extension (\"raise when statement\", Token_Ptr);\n \n          Mutate_Nkind (Raise_Node, N_Raise_When_Statement);\n "}, {"sha": "fc76ad4dc704c978ecda30ac94ccb8672138e7b4", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=72de114c23027f1d1f0df4c78e69c4302e39e058", "patch": "@@ -1225,7 +1225,7 @@ package body Ch12 is\n \n          elsif Token = Tok_Left_Paren then\n             Error_Msg_GNAT_Extension\n-              (\"expression default for formal subprograms\");\n+              (\"expression default for formal subprograms\", Token_Ptr);\n \n             if Nkind (Spec_Node) = N_Function_Specification then\n                Scan;  --  past \"(\""}, {"sha": "2359b8cd64a818cb3e5181c2f0cb1de1280e01b0", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=72de114c23027f1d1f0df4c78e69c4302e39e058", "patch": "@@ -2788,7 +2788,7 @@ package body Ch3 is\n             else\n                P_Index_Subtype_Def_With_Fixed_Lower_Bound (Subtype_Mark_Node);\n \n-               Error_Msg_GNAT_Extension (\"fixed-lower-bound array\");\n+               Error_Msg_GNAT_Extension (\"fixed-lower-bound array\", Token_Ptr);\n             end if;\n \n             exit when Token = Tok_Right_Paren or else Token = Tok_Of;\n@@ -2857,7 +2857,8 @@ package body Ch3 is\n                      P_Index_Subtype_Def_With_Fixed_Lower_Bound\n                        (Subtype_Mark_Node);\n \n-                     Error_Msg_GNAT_Extension (\"fixed-lower-bound array\");\n+                     Error_Msg_GNAT_Extension\n+                       (\"fixed-lower-bound array\", Token_Ptr);\n                   end if;\n \n                   exit when Token = Tok_Right_Paren or else Token = Tok_Of;\n@@ -3359,7 +3360,7 @@ package body Ch3 is\n             --  later during analysis), and scan to the next token.\n \n             if Token = Tok_Box then\n-               Error_Msg_GNAT_Extension (\"fixed-lower-bound array\");\n+               Error_Msg_GNAT_Extension (\"fixed-lower-bound array\", Token_Ptr);\n \n                Expr_Node := Empty;\n                Scan;"}, {"sha": "e0f3ca934f15c3696f0382006b284f12643f60a0", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=72de114c23027f1d1f0df4c78e69c4302e39e058", "patch": "@@ -1783,9 +1783,8 @@ package body Ch4 is\n                      Box_With_Identifier_Present := True;\n                      Scan; -- past \">\"\n                   else\n-                     Error_Msg\n-                       (\"Identifier within box only supported under -gnatX\",\n-                        Token_Ptr);\n+                     Error_Msg_GNAT_Extension\n+                       (\"identifier within box\", Token_Ptr);\n                      Box_Present := True;\n                      --  Avoid cascading errors by ignoring the identifier\n                   end if;\n@@ -1816,10 +1815,8 @@ package body Ch4 is\n                Id := P_Defining_Identifier;\n \n                if not Extensions_Allowed then\n-                  Error_Msg\n-                    (\"IS following component association\"\n-                       & \" only supported under -gnatX\",\n-                     Token_Ptr);\n+                  Error_Msg_GNAT_Extension\n+                    (\"IS following component association\", Token_Ptr);\n                elsif Box_With_Identifier_Present then\n                   Error_Msg\n                     (\"Both identifier-in-box and trailing identifier\""}, {"sha": "0421bd5d2ef8aa37ff7237b12641b1b50720e43b", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=72de114c23027f1d1f0df4c78e69c4302e39e058", "patch": "@@ -1975,7 +1975,7 @@ package body Ch5 is\n       Append_Elmt (Goto_Node, Goto_List);\n \n       if Token = Tok_When then\n-         Error_Msg_GNAT_Extension (\"goto when statement\");\n+         Error_Msg_GNAT_Extension (\"goto when statement\", Token_Ptr);\n \n          Scan; -- past WHEN\n          Mutate_Nkind (Goto_Node, N_Goto_When_Statement);"}, {"sha": "2832fd4a82e633ea822d7ffc31fd7ce4921752a2", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=72de114c23027f1d1f0df4c78e69c4302e39e058", "patch": "@@ -1999,7 +1999,7 @@ package body Ch6 is\n             --  at a Return_when_statement\n \n             if Token = Tok_When and then not Missing_Semicolon_On_When then\n-               Error_Msg_GNAT_Extension (\"return when statement\");\n+               Error_Msg_GNAT_Extension (\"return when statement\", Token_Ptr);\n                Mutate_Nkind (Ret_Node, N_Return_When_Statement);\n \n                Scan; -- past WHEN\n@@ -2008,7 +2008,7 @@ package body Ch6 is\n             --  Allow IF instead of WHEN, giving error message\n \n             elsif Token = Tok_If then\n-               Error_Msg_GNAT_Extension (\"return when statement\");\n+               Error_Msg_GNAT_Extension (\"return when statement\", Token_Ptr);\n                Mutate_Nkind (Ret_Node, N_Return_When_Statement);\n \n                T_When;"}, {"sha": "8bd0c866fd4ef11a14dd959e48285ea4a6832f4c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de114c23027f1d1f0df4c78e69c4302e39e058/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=72de114c23027f1d1f0df4c78e69c4302e39e058", "patch": "@@ -2601,10 +2601,8 @@ package body Sem_Ch13 is\n                         Aspect);\n \n                   elsif Is_Imported_Intrinsic then\n-                     Error_Msg_N\n-                       (\"aspect % on intrinsic function is an extension: \" &\n-                        \"use -gnatX\",\n-                        Aspect);\n+                     Error_Msg_GNAT_Extension\n+                       (\"aspect % on intrinsic function\", Sloc (Aspect));\n \n                   else\n                      Error_Msg_N\n@@ -4411,11 +4409,7 @@ package body Sem_Ch13 is\n \n                when Aspect_Designated_Storage_Model =>\n                   if not Extensions_Allowed then\n-                     Error_Msg_N\n-                       (\"aspect only allowed if extensions enabled\",\n-                        Aspect);\n-                     Error_Msg_N\n-                       (\"\\unit must be compiled with -gnatX switch\", Aspect);\n+                     Error_Msg_GNAT_Extension (\"aspect %\", Sloc (Aspect));\n \n                   elsif not Is_Type (E)\n                     or else Ekind (E) /= E_Access_Type\n@@ -4430,11 +4424,7 @@ package body Sem_Ch13 is\n \n                when Aspect_Storage_Model_Type =>\n                   if not Extensions_Allowed then\n-                     Error_Msg_N\n-                       (\"aspect only allowed if extensions enabled\",\n-                        Aspect);\n-                     Error_Msg_N\n-                       (\"\\unit must be compiled with -gnatX switch\", Aspect);\n+                     Error_Msg_GNAT_Extension (\"aspect %\", Sloc (Aspect));\n \n                   elsif not Is_Type (E)\n                     or else not Is_Immutably_Limited_Type (E)"}]}