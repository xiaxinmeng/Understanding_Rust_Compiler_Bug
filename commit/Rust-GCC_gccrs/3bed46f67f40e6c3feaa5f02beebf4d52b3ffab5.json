{"sha": "3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JlZDQ2ZjY3ZjQwZTZjM2ZlYWE1ZjAyYmVlYmY0ZDUyYjNmZmFiNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-08-05T19:12:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-08-05T19:12:01Z"}, "message": "* pt.c (unify) [TEMPLATE_TYPE_PARM]: Allow VLA for C++0x 'auto'.\n\nFrom-SVN: r177476", "tree": {"sha": "46fecfa7f77fb6b434fdcad8acc5003d1655968b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46fecfa7f77fb6b434fdcad8acc5003d1655968b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c331232e9ae426fc338928650355ecfab176290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c331232e9ae426fc338928650355ecfab176290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c331232e9ae426fc338928650355ecfab176290"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "3d9b3b6f71eeb2fc034fdedfb9095b88be37f616", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5", "patch": "@@ -1,3 +1,7 @@\n+2011-08-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (unify) [TEMPLATE_TYPE_PARM]: Allow VLA for C++0x 'auto'.\n+\n 2011-08-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/49905"}, {"sha": "10fdceda4624d97329988f41bc244bee44563885", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5", "patch": "@@ -15932,10 +15932,11 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \t     that were talking about variable-sized arrays (like\n \t     `int[n]'), rather than arrays of unknown size (like\n \t     `int[]').)  We'll get very confused by such a type since\n-\t     the bound of the array will not be computable in an\n-\t     instantiation.  Besides, such types are not allowed in\n-\t     ISO C++, so we can do as we please here.  */\n-\t  if (variably_modified_type_p (arg, NULL_TREE))\n+\t     the bound of the array is not constant, and therefore\n+\t     not mangleable.  Besides, such types are not allowed in\n+\t     ISO C++, so we can do as we please here.  We do allow\n+\t     them for 'auto' deduction, since that isn't ABI-exposed.  */\n+\t  if (!is_auto (parm) && variably_modified_type_p (arg, NULL_TREE))\n \t    return unify_vla_arg (explain_p, arg);\n \n \t  /* Strip typedefs as in convert_template_argument.  */"}, {"sha": "24e145c09e97584a4c16bd0554f225633d8c664c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5", "patch": "@@ -1,3 +1,7 @@\n+2011-08-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/ext/vla11.C: New.\n+\n 2011-08-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/49984"}, {"sha": "8f3be9e56c29e210c26673bc89ce70ff424456e8", "filename": "gcc/testsuite/g++.dg/ext/vla11.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla11.C?ref=3bed46f67f40e6c3feaa5f02beebf4d52b3ffab5", "patch": "@@ -0,0 +1,8 @@\n+// Test that auto works with VLAs.\n+// { dg-options -std=c++0x }\n+\n+void bar(int n)\n+{\n+  float loc2[n];\n+  auto&& range = loc2;\n+}"}]}