{"sha": "45d51d7e37ac54da97e497a0946f675be40fe230", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkNTFkN2UzN2FjNTRkYTk3ZTQ5N2EwOTQ2ZjY3NWJlNDBmZTIzMA==", "commit": {"author": {"name": "Guilhem Lavaux", "email": "guilhem@kaffe.org", "date": "2003-12-26T22:10:19Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-26T22:10:19Z"}, "message": "BufferedReader.java (BufferedReader): Throw IllegalArgumentException when size <= 0.\n\n2003-12-26  Guilhem Lavaux  <guilhem@kaffe.org>\n\t    Mark Wielaard  <mark@klomp.org>\n\n\t* java/io/BufferedReader.java (BufferedReader):\n\tThrow IllegalArgumentException when size <= 0.\n\t(mark): Document and better exception message for negative\n\treadLimit IllegalArgumentException.\n\t(read(char[],int,int)): Throw IndexOutOfBoundsException\n\tif offset and count are not valid regarding buf.\n\t(skip): Throw IllegalArgumentException when count is negative.\n\nCo-Authored-By: Mark Wielaard <mark@klomp.org>\n\nFrom-SVN: r75041", "tree": {"sha": "1e52f93d624ad6571a1879b5a0fd35a4d2bc89bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e52f93d624ad6571a1879b5a0fd35a4d2bc89bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45d51d7e37ac54da97e497a0946f675be40fe230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d51d7e37ac54da97e497a0946f675be40fe230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45d51d7e37ac54da97e497a0946f675be40fe230", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45d51d7e37ac54da97e497a0946f675be40fe230/comments", "author": null, "committer": null, "parents": [{"sha": "3364872d40a49c4c42e29cf7874bd44c8d5583c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3364872d40a49c4c42e29cf7874bd44c8d5583c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3364872d40a49c4c42e29cf7874bd44c8d5583c6"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "2a01dceeecf2409926b2f6bee571e6f8da102d07", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d51d7e37ac54da97e497a0946f675be40fe230/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d51d7e37ac54da97e497a0946f675be40fe230/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=45d51d7e37ac54da97e497a0946f675be40fe230", "patch": "@@ -1,3 +1,14 @@\n+2003-12-26  Guilhem Lavaux  <guilhem@kaffe.org>\n+\t    Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/io/BufferedReader.java (BufferedReader):\n+\tThrow IllegalArgumentException when size <= 0.\n+\t(mark): Document and better exception message for negative\n+\treadLimit IllegalArgumentException.\n+\t(read(char[],int,int)): Throw IndexOutOfBoundsException\n+\tif offset and count are not valid regarding buf.\n+\t(skip): Throw IllegalArgumentException when count is negative.\n+\n 2003-12-26  Guilhem Lavaux  <guilhem@kaffe.org>\n \n \t* java/io/FileInputStream.java"}, {"sha": "73fb47c5d347b8ca891611ff43cc9b5138039330", "filename": "libjava/java/io/BufferedReader.java", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45d51d7e37ac54da97e497a0946f675be40fe230/libjava%2Fjava%2Fio%2FBufferedReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45d51d7e37ac54da97e497a0946f675be40fe230/libjava%2Fjava%2Fio%2FBufferedReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedReader.java?ref=45d51d7e37ac54da97e497a0946f675be40fe230", "patch": "@@ -106,10 +106,14 @@ public BufferedReader(Reader in)\n    *\n    * @param in The subordinate stream to read from\n    * @param size The buffer size to use\n+   *\n+   * @exception IllegalArgumentException if size &lt;&eq; 0\n    */\n   public BufferedReader(Reader in, int size)\n   {\n     super(in.lock);\n+    if (size <= 0)\n+      throw new IllegalArgumentException(\"Illegal buffer size: \" + size);\n     this.in = in;\n     buffer = new char[size];\n   }\n@@ -161,11 +165,12 @@ public boolean markSupported()\n    *        becomes invalid\n    *\n    * @exception IOException If an error occurs\n+   * @exception IllegalArgumentException if readLimit is negative.\n    */\n   public void mark(int readLimit) throws IOException\n   {\n     if (readLimit < 0)\n-      throw new IllegalArgumentException();\n+      throw new IllegalArgumentException(\"Read-ahead limit is negative\");\n \n     synchronized (lock)\n       {\n@@ -280,9 +285,14 @@ public boolean ready() throws IOException\n    * @return The actual number of chars read, or -1 if end of stream.\n    *\n    * @exception IOException If an error occurs.\n+   * @exception IndexOutOfBoundsException If offset and count are not\n+   * valid regarding buf.\n    */\n   public int read(char[] buf, int offset, int count) throws IOException\n   {\n+    if (offset < 0 || offset + count > buf.length || count < 0)\n+      throw new IndexOutOfBoundsException();\n+\n     synchronized (lock)\n       {\n \tcheckStatus();\n@@ -487,14 +497,17 @@ public String readLine() throws IOException\n    *\n    * @return The actual number of chars skipped.\n    *\n-   * @exception IOException If an error occurs\n+   * @exception IOException If an error occurs.\n+   * @exception IllegalArgumentException If count is negative.\n    */\n   public long skip(long count) throws IOException\n   {\n     synchronized (lock)\n       {\n \tcheckStatus();\n-\tif (count <= 0)\n+\tif (count < 0)\n+\t  throw new IllegalArgumentException(\"skip value is negative\");\n+\tif (count == 0)\n \t  return 0;\n \t// Yet again, we need to handle the special case of a readLine\n \t// that has a '\\r' at the end of the buffer.  In this case, we need"}]}