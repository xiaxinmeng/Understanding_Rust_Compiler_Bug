{"sha": "37416b699f362c378a0351c3b2b2e32754a1cc76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc0MTZiNjk5ZjM2MmMzNzhhMDM1MWMzYjJiMmUzMjc1NGExY2M3Ng==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-06-23T18:25:10Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-06-23T18:25:10Z"}, "message": "re PR target/80510 (Optimize Power7/power8 Altivec load/stores)\n\n[gcc]\n2017-06-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/80510\n\t* config/rs6000/rs6000.md (ALTIVEC_DFORM): Do not allow DImode in\n\t32-bit, since indexed is not valid for DImode.\n\t(mov<mode>_hardfloat32): Reorder ISA 2.07 load/stores before ISA\n\t3.0 d-form load/stores to be the same as mov<mode>_hardfloat64.\n\t(define_peephole2 for Altivec d-form load): Add 32-bit support.\n\t(define_peephole2 for Altivec d-form store): Likewise.\n\n[gcc/testsuite]\n2017-06-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/80510\n\t* gcc.target/powerpc/pr80510-1.c: Allow test to run on 32-bit.\n\t* gcc.target/powerpc/pr80510-2.c: Likewise.\n\nFrom-SVN: r249607", "tree": {"sha": "b9083af0fb1d5b5136518063b3cb24bc25110a57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9083af0fb1d5b5136518063b3cb24bc25110a57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37416b699f362c378a0351c3b2b2e32754a1cc76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37416b699f362c378a0351c3b2b2e32754a1cc76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37416b699f362c378a0351c3b2b2e32754a1cc76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37416b699f362c378a0351c3b2b2e32754a1cc76/comments", "author": null, "committer": null, "parents": [{"sha": "9761349c768b0ea3fc12d2b36bb04ceb2d3aff8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9761349c768b0ea3fc12d2b36bb04ceb2d3aff8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9761349c768b0ea3fc12d2b36bb04ceb2d3aff8b"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "5019018802d0283991fd7d897f48c736c06cdc28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37416b699f362c378a0351c3b2b2e32754a1cc76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37416b699f362c378a0351c3b2b2e32754a1cc76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37416b699f362c378a0351c3b2b2e32754a1cc76", "patch": "@@ -1,5 +1,13 @@\n 2017-06-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n+\tPR target/80510\n+\t* config/rs6000/rs6000.md (ALTIVEC_DFORM): Do not allow DImode in\n+\t32-bit, since indexed is not valid for DImode.\n+\t(mov<mode>_hardfloat32): Reorder ISA 2.07 load/stores before ISA\n+\t3.0 d-form load/stores to be the same as mov<mode>_hardfloat64.\n+\t(define_peephole2 for Altivec d-form load): Add 32-bit support.\n+\t(define_peephole2 for Altivec d-form store): Likewise.\n+\n \tPR ipa/81185\n \t* multiple_target.c (create_dispatcher_calls): Only create the\n \tdispatcher call if the function is the default clone of a"}, {"sha": "f78dbf913ecf1f604782ad370b653e811ba523b6", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37416b699f362c378a0351c3b2b2e32754a1cc76/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37416b699f362c378a0351c3b2b2e32754a1cc76/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=37416b699f362c378a0351c3b2b2e32754a1cc76", "patch": "@@ -690,7 +690,9 @@\n ;; Iterator to optimize the following cases:\n ;;\tD-form load to FPR register & move to Altivec register\n ;;\tMove Altivec register to FPR register and store\n-(define_mode_iterator ALTIVEC_DFORM [DI DF SF])\n+(define_mode_iterator ALTIVEC_DFORM [DF\n+\t\t\t\t     SF\n+\t\t\t\t     (DI \"TARGET_POWERPC64\")])\n \n \f\n ;; Start with fixed-point load and store insns.  Here we put only the more\n@@ -7391,19 +7393,19 @@\n ;; except for 0.0 which can be created on VSX with an xor instruction.\n \n (define_insn \"*mov<mode>_hardfloat32\"\n-  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=m,d,d,<f64_av>,Z,<f64_p9>,wY,<f64_vsx>,<f64_vsx>,!r,Y,r,!r\")\n-\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,Z,<f64_av>,wY,<f64_p9>,<f64_vsx>,<zero_fp>,<zero_fp>,r,Y,r\"))]\n+  [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=m,d,d,<f64_p9>,wY,<f64_av>,Z,<f64_vsx>,<f64_vsx>,!r,Y,r,!r\")\n+\t(match_operand:FMOVE64 1 \"input_operand\" \"d,m,d,wY,<f64_p9>,Z,<f64_av>,<f64_vsx>,<zero_fp>,<zero_fp>,r,Y,r\"))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT \n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n   \"@\n    stfd%U0%X0 %1,%0\n    lfd%U1%X1 %0,%1\n    fmr %0,%1\n-   lxsd%U1x %x0,%y1\n-   stxsd%U0x %x1,%y0\n    lxsd %0,%1\n    stxsd %1,%0\n+   lxsd%U1x %x0,%y1\n+   stxsd%U0x %x1,%y0\n    xxlor %x0,%x1,%x1\n    xxlxor %x0,%x0,%x0\n    #\n@@ -13967,13 +13969,13 @@\n ;;\tLXSDX 32,3,9\n \n (define_peephole2\n-  [(match_scratch:DI 0 \"b\")\n+  [(match_scratch:P 0 \"b\")\n    (set (match_operand:ALTIVEC_DFORM 1 \"fpr_reg_operand\")\n \t(match_operand:ALTIVEC_DFORM 2 \"simple_offsettable_mem_operand\"))\n    (set (match_operand:ALTIVEC_DFORM 3 \"altivec_register_operand\")\n \t(match_dup 1))]\n-  \"TARGET_VSX && TARGET_POWERPC64 && TARGET_UPPER_REGS_<MODE>\n-   && !TARGET_P9_DFORM_SCALAR && peep2_reg_dead_p (2, operands[1])\"\n+  \"TARGET_VSX && TARGET_UPPER_REGS_<MODE> && !TARGET_P9_DFORM_SCALAR\n+   && peep2_reg_dead_p (2, operands[1])\"\n   [(set (match_dup 0)\n \t(match_dup 4))\n    (set (match_dup 3)\n@@ -13988,7 +13990,7 @@\n   add_op0 = XEXP (addr, 0);\n   add_op1 = XEXP (addr, 1);\n   gcc_assert (REG_P (add_op0));\n-  new_addr = gen_rtx_PLUS (DImode, add_op0, tmp_reg);\n+  new_addr = gen_rtx_PLUS (Pmode, add_op0, tmp_reg);\n \n   operands[4] = add_op1;\n   operands[5] = change_address (mem, <MODE>mode, new_addr);\n@@ -14004,13 +14006,13 @@\n ;;\tSTXSDX 32,3,9\n \n (define_peephole2\n-  [(match_scratch:DI 0 \"b\")\n+  [(match_scratch:P 0 \"b\")\n    (set (match_operand:ALTIVEC_DFORM 1 \"fpr_reg_operand\")\n \t(match_operand:ALTIVEC_DFORM 2 \"altivec_register_operand\"))\n    (set (match_operand:ALTIVEC_DFORM 3 \"simple_offsettable_mem_operand\")\n \t(match_dup 1))]\n-  \"TARGET_VSX && TARGET_POWERPC64 && TARGET_UPPER_REGS_<MODE>\n-   && !TARGET_P9_DFORM_SCALAR && peep2_reg_dead_p (2, operands[1])\"\n+  \"TARGET_VSX && TARGET_UPPER_REGS_<MODE> && !TARGET_P9_DFORM_SCALAR\n+   && peep2_reg_dead_p (2, operands[1])\"\n   [(set (match_dup 0)\n \t(match_dup 4))\n    (set (match_dup 5)\n@@ -14025,7 +14027,7 @@\n   add_op0 = XEXP (addr, 0);\n   add_op1 = XEXP (addr, 1);\n   gcc_assert (REG_P (add_op0));\n-  new_addr = gen_rtx_PLUS (DImode, add_op0, tmp_reg);\n+  new_addr = gen_rtx_PLUS (Pmode, add_op0, tmp_reg);\n \n   operands[4] = add_op1;\n   operands[5] = change_address (mem, <MODE>mode, new_addr);"}, {"sha": "a2694780368b07cb8f245009720ebf637154e058", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37416b699f362c378a0351c3b2b2e32754a1cc76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37416b699f362c378a0351c3b2b2e32754a1cc76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37416b699f362c378a0351c3b2b2e32754a1cc76", "patch": "@@ -1,3 +1,9 @@\n+2017-06-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/80510\n+\t* gcc.target/powerpc/pr80510-1.c: Allow test to run on 32-bit.\n+\t* gcc.target/powerpc/pr80510-2.c: Likewise.\n+\n 2017-06-22  Jeff Law  <law@redhat.com>\n \n \t* gcc.c-torture/compile/stack-check-1.c: Require \"untyped_assembly\"."}, {"sha": "deb51ac9916686ec5c20ad88bdbe93e524048e7c", "filename": "gcc/testsuite/gcc.target/powerpc/pr80510-1.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37416b699f362c378a0351c3b2b2e32754a1cc76/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80510-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37416b699f362c378a0351c3b2b2e32754a1cc76/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80510-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80510-1.c?ref=37416b699f362c378a0351c3b2b2e32754a1cc76", "patch": "@@ -1,14 +1,12 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_vsx_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n /* { dg-options \"-mcpu=power7 -O2\" } */\n \n /* Make sure that STXSDX is generated for double scalars in Altivec registers\n    on power7 instead of moving the value to a FPR register and doing a X-FORM\n-   store.\n-\n-   32-bit currently does not have support for STXSDX in the mov{df,dd} patterns.  */\n+   store.  */\n \n #ifndef TYPE\n #define TYPE double"}, {"sha": "b4d2491551bfa2af758cf560fa817e7b79dce0c2", "filename": "gcc/testsuite/gcc.target/powerpc/pr80510-2.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37416b699f362c378a0351c3b2b2e32754a1cc76/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80510-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37416b699f362c378a0351c3b2b2e32754a1cc76/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80510-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80510-2.c?ref=37416b699f362c378a0351c3b2b2e32754a1cc76", "patch": "@@ -1,14 +1,12 @@\n-/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n /* { dg-require-effective-target powerpc_p8vector_ok } */\n /* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n /* { dg-options \"-mcpu=power8 -O2\" } */\n \n /* Make sure that STXSSPX is generated for float scalars in Altivec registers\n    on power7 instead of moving the value to a FPR register and doing a X-FORM\n-   store.\n-\n-   32-bit currently does not have support for STXSSPX in the mov{sf,sd} patterns.  */\n+   store.  */\n \n #ifndef TYPE\n #define TYPE float"}]}