{"sha": "05c13c439903eb78f109bcab62fd9a74f03a3c9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVjMTNjNDM5OTAzZWI3OGYxMDliY2FiNjJmZDlhNzRmMDNhM2M5Yg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-03-25T15:39:50Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-03-25T15:39:50Z"}, "message": "PR tree-optimization/94131 - ICE on printf with a VLA string and -fno-tree-ccp\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/94131\n\t* gcc.dg/pr94131.c: New test.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/94131\n\t* gimple-fold.c (get_range_strlen_tree): Fail for variable-length\n\ttypes and decls.\n\t* tree-ssa-strlen.c (get_range_strlen_dynamic): Avoid assuming\n\ttypes have constant sizes.", "tree": {"sha": "96a1286aa6c51248a3e3c702fbaa3bba67522500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96a1286aa6c51248a3e3c702fbaa3bba67522500"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05c13c439903eb78f109bcab62fd9a74f03a3c9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c13c439903eb78f109bcab62fd9a74f03a3c9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05c13c439903eb78f109bcab62fd9a74f03a3c9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05c13c439903eb78f109bcab62fd9a74f03a3c9b/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fca105f8ca95747fad3d3315e642ea9dc6936e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fca105f8ca95747fad3d3315e642ea9dc6936e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fca105f8ca95747fad3d3315e642ea9dc6936e0"}], "stats": {"total": 68, "additions": 61, "deletions": 7}, "files": [{"sha": "b75ac74e73a37b380cd85701c22a6ce4084b0e39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c13c439903eb78f109bcab62fd9a74f03a3c9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c13c439903eb78f109bcab62fd9a74f03a3c9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05c13c439903eb78f109bcab62fd9a74f03a3c9b", "patch": "@@ -1,3 +1,11 @@\n+2020-03-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/94131\n+\t* gimple-fold.c (get_range_strlen_tree): Fail for variable-length\n+\ttypes and decls.\n+\t* tree-ssa-strlen.c (get_range_strlen_dynamic): Avoid assuming\n+\ttypes have constant sizes.\n+\n 2020-03-25  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/94259"}, {"sha": "55b78fa284f101df3f5e9a1b59e887f5a5fdc323", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c13c439903eb78f109bcab62fd9a74f03a3c9b/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c13c439903eb78f109bcab62fd9a74f03a3c9b/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=05c13c439903eb78f109bcab62fd9a74f03a3c9b", "patch": "@@ -1378,7 +1378,9 @@ get_range_strlen_tree (tree arg, bitmap *visited, strlen_range_kind rkind,\n \n \t  /* Fail when the array bound is unknown or zero.  */\n \t  val = TYPE_SIZE_UNIT (optype);\n-\t  if (!val || integer_zerop (val))\n+\t  if (!val\n+\t      || TREE_CODE (val) != INTEGER_CST\n+\t      || integer_zerop (val))\n \t    return false;\n \n \t  val = fold_build2 (MINUS_EXPR, TREE_TYPE (val), val,\n@@ -1412,7 +1414,9 @@ get_range_strlen_tree (tree arg, bitmap *visited, strlen_range_kind rkind,\n \n \t  /* Fail when the array bound is unknown or zero.  */\n \t  val = TYPE_SIZE_UNIT (optype);\n-\t  if (!val || integer_zerop (val))\n+\t  if (!val\n+\t      || TREE_CODE (val) != INTEGER_CST\n+\t      || integer_zerop (val))\n \t    return false;\n \t  val = fold_build2 (MINUS_EXPR, TREE_TYPE (val), val,\n \t\t\t     integer_one_node);\n@@ -1448,7 +1452,9 @@ get_range_strlen_tree (tree arg, bitmap *visited, strlen_range_kind rkind,\n \t      /* Fail if the offset is out of bounds.  Such accesses\n \t\t should be diagnosed at some point.  */\n \t      val = DECL_SIZE_UNIT (ref);\n-\t      if (!val || integer_zerop (val))\n+\t      if (!val\n+\t\t  || TREE_CODE (val) != INTEGER_CST\n+\t\t  || integer_zerop (val))\n \t\treturn false;\n \n \t      poly_offset_int psiz = wi::to_offset (val);"}, {"sha": "7f2d590871378050ca97a3e33f198657a472e5dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c13c439903eb78f109bcab62fd9a74f03a3c9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c13c439903eb78f109bcab62fd9a74f03a3c9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05c13c439903eb78f109bcab62fd9a74f03a3c9b", "patch": "@@ -1,3 +1,8 @@\n+2020-03-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/94131\n+\t* gcc.dg/pr94131.c: New test.\n+\n 2020-03-25  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* gcc.dg/pr92301.c (main): Allow argc to be 0 to support"}, {"sha": "0ba96516fe31b6be330f6009b3da1fec5436dec8", "filename": "gcc/testsuite/gcc.dg/pr84131.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c13c439903eb78f109bcab62fd9a74f03a3c9b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84131.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c13c439903eb78f109bcab62fd9a74f03a3c9b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84131.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84131.c?ref=05c13c439903eb78f109bcab62fd9a74f03a3c9b", "patch": "@@ -0,0 +1,29 @@\n+/* PR 94131 - ICE on printf with a VLA string and -fno-tree-ccp\n+   -fno-tree-forwprop\n+   { dg-do compile }\n+   { dg-options \"-O1 -fno-tree-ccp -fno-tree-forwprop\" } */\n+\n+void rv1 (int n)\n+{\n+  char a[n];\n+  __INTPTR_TYPE__ i = (__INTPTR_TYPE__ )&a[0];\n+  i &= 3;\n+\n+  __builtin_memset (a, '\\0', sizeof a);\n+  __builtin_printf (\"%s\", i ? &a[0] : \"\");\n+}\n+\n+\n+void sink (void*);\n+\n+void rv2 (int n)\n+{\n+  char a[n];\n+  __INTPTR_TYPE__ i = (__INTPTR_TYPE__)&a[0];\n+  i &= 3;\n+\n+  __builtin_memset (a, '\\0', sizeof a);\n+  __builtin_printf (\"%s\", i ? &a[0] : \"\");\n+\n+  sink (a);\n+}"}, {"sha": "93d095e18961e9c7f377a3e95ddbf0e66dea50a5", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05c13c439903eb78f109bcab62fd9a74f03a3c9b/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05c13c439903eb78f109bcab62fd9a74f03a3c9b/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=05c13c439903eb78f109bcab62fd9a74f03a3c9b", "patch": "@@ -1140,10 +1140,16 @@ get_range_strlen_dynamic (tree src, c_strlen_data *pdata, bitmap *visited,\n \t    {\n \t      tree basetype = TREE_TYPE (base);\n \t      tree size = TYPE_SIZE_UNIT (basetype);\n-\t      ++off;   /* Increment for the terminating nul.  */\n-\t      pdata->maxlen = fold_build2 (MINUS_EXPR, size_type_node, size,\n-\t\t\t\t\t   build_int_cst (size_type_node, off));\n-\t      pdata->maxbound = pdata->maxlen;\n+\t      if (TREE_CODE (size) == INTEGER_CST)\n+\t\t{\n+\t\t  ++off;   /* Increment for the terminating nul.  */\n+\t\t  tree toffset = build_int_cst (size_type_node, off);\n+\t\t  pdata->maxlen = fold_build2 (MINUS_EXPR, size_type_node, size,\n+\t\t\t\t\t       toffset);\n+\t\t  pdata->maxbound = pdata->maxlen;\n+\t\t}\n+\t      else\t\n+\t\tpdata->maxlen = build_all_ones_cst (size_type_node);\n \t    }\n \t  else\n \t    pdata->maxlen = build_all_ones_cst (size_type_node);"}]}