{"sha": "278c3214b344ac7c5daf974196fbebc531bff058", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4YzMyMTRiMzQ0YWM3YzVkYWY5NzQxOTZmYmViYzUzMWJmZjA1OA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-01-03T18:06:15Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-01-28T14:00:29Z"}, "message": "Don't allow mixed component and non-component accesses for OpenACC/Fortran\n\n\tgcc/fortran/\n\t* gfortran.h (gfc_symbol): Add comp_mark bitfield.\n\t* openmp.c (resolve_omp_clauses): Disallow mixed component and\n\tfull-derived-type accesses to the same variable within a single\n\tdirective.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/deep-copy-2.f90: Remove test from here.\n\t* testsuite/libgomp.oacc-fortran/deep-copy-3.f90: Don't use mixed\n\tcomponent/non-component variable refs in a single directive.\n\t* testsuite/libgomp.oacc-fortran/classtypes-1.f95: Likewise.\n\n\tgcc/testsuite/\n\t* gfortran.dg/goacc/deep-copy-2.f90: Move test here (from libgomp\n\ttestsuite). Make a compilation test, and expect rejection of mixed\n\tcomponent/non-component accesses.\n\t* gfortran.dg/goacc/mapping-tests-1.f90: New test.", "tree": {"sha": "5fb64b46ceb10ceee9647519ec7b68320c82abc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fb64b46ceb10ceee9647519ec7b68320c82abc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/278c3214b344ac7c5daf974196fbebc531bff058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278c3214b344ac7c5daf974196fbebc531bff058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/278c3214b344ac7c5daf974196fbebc531bff058", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278c3214b344ac7c5daf974196fbebc531bff058/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99b9f5b4067a8c5c5a706694b9a23516126984de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b9f5b4067a8c5c5a706694b9a23516126984de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b9f5b4067a8c5c5a706694b9a23516126984de"}], "stats": {"total": 93, "additions": 71, "deletions": 22}, "files": [{"sha": "c51dab2636f6a64c951e7d4d7ee0ecb9b4d59121", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=278c3214b344ac7c5daf974196fbebc531bff058", "patch": "@@ -1,3 +1,10 @@\n+2020-01-28  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gfortran.h (gfc_symbol): Add comp_mark bitfield.\n+\t* openmp.c (resolve_omp_clauses): Disallow mixed component and\n+\tfull-derived-type accesses to the same variable within a single\n+\tdirective.\n+\n 2020-01-28  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/93464"}, {"sha": "dbf03fbfd4551c86782a7b12ef2079d368013bd7", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=278c3214b344ac7c5daf974196fbebc531bff058", "patch": "@@ -1592,9 +1592,11 @@ typedef struct gfc_symbol\n      current statement have the mark member nonzero.  Of these symbols,\n      symbols with old_symbol equal to NULL are symbols created within\n      the current statement.  Otherwise, old_symbol points to a copy of\n-     the old symbol. gfc_new is used in symbol.c to flag new symbols.  */\n+     the old symbol. gfc_new is used in symbol.c to flag new symbols.\n+     comp_mark is used to indicate variables which have component accesses\n+     in OpenMP/OpenACC directive clauses.  */\n   struct gfc_symbol *old_symbol;\n-  unsigned mark:1, gfc_new:1;\n+  unsigned mark:1, comp_mark:1, gfc_new:1;\n \n   /* The tlink field is used in the front end to carry the module\n      declaration of separate module procedures so that the characteristics"}, {"sha": "444fdcc4751e6436ae05f9e8a1a70cc885656d6a", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=278c3214b344ac7c5daf974196fbebc531bff058", "patch": "@@ -4248,6 +4248,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n     for (n = omp_clauses->lists[list]; n; n = n->next)\n       {\n \tn->sym->mark = 0;\n+\tn->sym->comp_mark = 0;\n \tif (n->sym->attr.flavor == FL_VARIABLE\n \t    || n->sym->attr.proc_pointer\n \t    || (!code && (!n->sym->attr.dummy || n->sym->ns != ns)))\n@@ -4313,23 +4314,25 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \t&& (list != OMP_LIST_REDUCTION || !openacc))\n       for (n = omp_clauses->lists[list]; n; n = n->next)\n \t{\n-\t  bool array_only_p = true;\n-\t  /* Disallow duplicate bare variable references and multiple\n-\t     subarrays of the same array here, but allow multiple components of\n-\t     the same (e.g. derived-type) variable.  For the latter, duplicate\n-\t     components are detected elsewhere.  */\n-\t  if (openacc && n->expr && n->expr->expr_type == EXPR_VARIABLE)\n+\t  bool component_ref_p = false;\n+\n+\t  /* Allow multiple components of the same (e.g. derived-type)\n+\t     variable here.  Duplicate components are detected elsewhere.  */\n+\t  if (n->expr && n->expr->expr_type == EXPR_VARIABLE)\n \t    for (gfc_ref *ref = n->expr->ref; ref; ref = ref->next)\n-\t      if (ref->type != REF_ARRAY)\n-\t\t{\n-\t\t  array_only_p = false;\n-\t\t  break;\n-\t\t}\n-\t  if (array_only_p)\n+\t      if (ref->type == REF_COMPONENT)\n+\t\tcomponent_ref_p = true;\n+\t  if ((!component_ref_p && n->sym->comp_mark)\n+\t      || (component_ref_p && n->sym->mark))\n+\t    gfc_error (\"Symbol %qs has mixed component and non-component \"\n+\t\t       \"accesses at %L\", n->sym->name, &n->where);\n+\t  else if (n->sym->mark)\n+\t    gfc_error (\"Symbol %qs present on multiple clauses at %L\",\n+\t\t       n->sym->name, &n->where);\n+\t  else\n \t    {\n-\t      if (n->sym->mark)\n-\t\tgfc_error (\"Symbol %qs present on multiple clauses at %L\",\n-\t\t\t   n->sym->name, &n->where);\n+\t      if (component_ref_p)\n+\t\tn->sym->comp_mark = 1;\n \t      else\n \t\tn->sym->mark = 1;\n \t    }"}, {"sha": "a3623672cffff33bf848f17e86227989f86b5e97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=278c3214b344ac7c5daf974196fbebc531bff058", "patch": "@@ -1,3 +1,10 @@\n+2020-01-28  Julian Brown  <julian@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/deep-copy-2.f90: Move test here (from libgomp\n+\ttestsuite). Make a compilation test, and expect rejection of mixed\n+\tcomponent/non-component accesses.\n+\t* gfortran.dg/goacc/mapping-tests-1.f90: New test.\n+\n 2020-01-28  Tobias Burnus  <tobias@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n "}, {"sha": "1e556b16b47a7ca6ce547d1e2aeb1644aaf4e799", "filename": "gcc/testsuite/gfortran.dg/goacc/deep-copy-2.f90", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdeep-copy-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdeep-copy-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdeep-copy-2.f90?ref=278c3214b344ac7c5daf974196fbebc531bff058", "patch": "@@ -1,4 +1,4 @@\n-! { dg-do run }\n+! { dg-do compile }\n \n ! Test of attach/detach with \"acc data\", two clauses at once.\n \n@@ -14,14 +14,18 @@ program dtype\n \n   allocate(var%a(1:n))\n \n-!$acc data copy(var) copy(var%a)\n+!$acc data copy(var) copy(var%a) ! { dg-error \"Symbol .var. has mixed component and non-component accesses\" }\n+\n+!$acc data copy(var%a) copy(var) ! { dg-error \"Symbol .var. has mixed component and non-component accesses\" }\n \n !$acc parallel loop\n   do i = 1,n\n     var%a(i) = i\n   end do\n !$acc end parallel loop\n \n+!$acc end data\n+\n !$acc end data\n \n   do i = 1,n", "previous_filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-2.f90"}, {"sha": "c1bfe5868429acef13d640c5775d67db1afc204c", "filename": "gcc/testsuite/gfortran.dg/goacc/mapping-tests-1.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmapping-tests-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278c3214b344ac7c5daf974196fbebc531bff058/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmapping-tests-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fmapping-tests-1.f90?ref=278c3214b344ac7c5daf974196fbebc531bff058", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+\n+subroutine foo\n+  type t\n+    integer :: i, j\n+  end type t\n+\n+  type(t) x\n+\n+  ! We should reject the duplicate reference here.\n+!$acc enter data copyin(x%i, x%i)\n+! { dg-error \".x.i. appears more than once in map clauses\" \"\" { target \"*-*-*\" } 11 }\n+\n+\n+end"}, {"sha": "9fa6bd1a5e469aefd7f90ef6b0a9321e70f3b96d", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278c3214b344ac7c5daf974196fbebc531bff058/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278c3214b344ac7c5daf974196fbebc531bff058/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=278c3214b344ac7c5daf974196fbebc531bff058", "patch": "@@ -1,3 +1,10 @@\n+2020-01-28  Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-2.f90: Remove test from here.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-3.f90: Don't use mixed\n+\tcomponent/non-component variable refs in a single directive.\n+\t* testsuite/libgomp.oacc-fortran/classtypes-1.f95: Likewise.\n+\n 2020-01-24  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* configure.ac: Handle `--with-toolexeclibdir='."}, {"sha": "c5f0ffffb02cb53fc89d9fa15f62fbbe0d0224b3", "filename": "libgomp/testsuite/libgomp.oacc-fortran/classtypes-1.f95", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278c3214b344ac7c5daf974196fbebc531bff058/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclasstypes-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278c3214b344ac7c5daf974196fbebc531bff058/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclasstypes-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fclasstypes-1.f95?ref=278c3214b344ac7c5daf974196fbebc531bff058", "patch": "@@ -31,15 +31,17 @@ program main\n     myvar%p%p(i) = -1.0\n   end do\n \n-!$acc enter data copyin(myvar, myvar%p) create(myvar%p%p)\n+!$acc enter data copyin(myvar)\n+!$acc enter data copyin(myvar%p) create(myvar%p%p)\n \n !$acc parallel loop present(myvar%p%p)\n   do i=1,100\n     myvar%p%p(i) = i * 2\n   end do\n !$acc end parallel loop\n \n-!$acc exit data copyout(myvar%p%p) delete(myvar, myvar%p)\n+!$acc exit data copyout(myvar%p%p) delete(myvar%p)\n+!$acc exit data delete(myvar)\n \n   do i=1,100\n     if (myvar%p%p(i) .ne. i * 2) stop 1"}, {"sha": "edb6b8d61a40ea7b47139f8a32a673191401a412", "filename": "libgomp/testsuite/libgomp.oacc-fortran/deep-copy-3.f90", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278c3214b344ac7c5daf974196fbebc531bff058/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278c3214b344ac7c5daf974196fbebc531bff058/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeep-copy-3.f90?ref=278c3214b344ac7c5daf974196fbebc531bff058", "patch": "@@ -16,12 +16,14 @@ program dtype\n   allocate(var%a(1:n))\n   allocate(var%b(1:n))\n \n-!$acc parallel loop copy(var) copy(var%a(1:n)) copy(var%b(1:n))\n+!$acc data copy(var)\n+!$acc parallel loop copy(var%a(1:n)) copy(var%b(1:n))\n   do i = 1,n\n     var%a(i) = i\n     var%b(i) = i\n   end do\n !$acc end parallel loop\n+!$acc end data\n \n   do i = 1,n\n     if (i .ne. var%a(i)) stop 1"}]}