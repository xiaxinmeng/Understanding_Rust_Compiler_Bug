{"sha": "280db205772451c9025357ba24359ff18b56de70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgwZGIyMDU3NzI0NTFjOTAyNTM1N2JhMjQzNTlmZjE4YjU2ZGU3MA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "2000-08-22T00:36:44Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-08-22T00:36:44Z"}, "message": "Fix x86-x-ia64 cross compiler build failure.\n\n\t* real.c (ereal_from_int, ereal_from_uint, significand_size): Handle\n\tINTEL_EXTENDED_IEEE_FORMAT.\n\t(toe64): Delete INTEL_EXTENDED_IEEE_FORMAT support.  Unconditionally\n\tclear last two bytes of output FP value.\n\nFrom-SVN: r35861", "tree": {"sha": "10a314d9ea9934ac7fdde1c9392d0e4fb5da17b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10a314d9ea9934ac7fdde1c9392d0e4fb5da17b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/280db205772451c9025357ba24359ff18b56de70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280db205772451c9025357ba24359ff18b56de70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280db205772451c9025357ba24359ff18b56de70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280db205772451c9025357ba24359ff18b56de70/comments", "author": null, "committer": null, "parents": [{"sha": "94c21c17374d919e22f8ecce203e12744f5595e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c21c17374d919e22f8ecce203e12744f5595e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c21c17374d919e22f8ecce203e12744f5595e3"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "384fb53063d22feb67be5cb36cda407b422c7373", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280db205772451c9025357ba24359ff18b56de70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280db205772451c9025357ba24359ff18b56de70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=280db205772451c9025357ba24359ff18b56de70", "patch": "@@ -1,3 +1,10 @@\n+2000-08-21  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* real.c (ereal_from_int, ereal_from_uint, significand_size): Handle\n+\tINTEL_EXTENDED_IEEE_FORMAT.\n+\t(toe64): Delete INTEL_EXTENDED_IEEE_FORMAT support.  Unconditionally\n+\tclear last two bytes of output FP value.\n+\n 2000-08-21  Graham Stott  <grahams@cygnus.co.uk>\n \n \t* config/ia64/ia64.h (REDO_SECTION_INFO_P): Change decl to DECL."}, {"sha": "eb8736c72cdd40431d310e20b36ee7ff8a274bda", "filename": "gcc/real.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280db205772451c9025357ba24359ff18b56de70/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280db205772451c9025357ba24359ff18b56de70/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=280db205772451c9025357ba24359ff18b56de70", "patch": "@@ -882,8 +882,13 @@ ereal_from_int (d, i, j, mode)\n       break;\n \n     case 128:\n+#ifndef INTEL_EXTENDED_IEEE_FORMAT\n       etoe113 (dg, df);\n       e113toe (df, dg);\n+#else\n+      etoe64 (dg, df);\n+      e64toe (df, dg);\n+#endif\n       break;\n \n     default:\n@@ -936,8 +941,13 @@ ereal_from_uint (d, i, j, mode)\n       break;\n \n     case 128:\n+#ifndef INTEL_EXTENDED_IEEE_FORMAT\n       etoe113 (dg, df);\n       e113toe (df, dg);\n+#else\n+      etoe64 (dg, df);\n+      e64toe (df, dg);\n+#endif\n       break;\n \n     default:\n@@ -3666,22 +3676,11 @@ toe64 (a, b)\n   else\n     {\n       q = b + 4;\t\t\t/* point to output exponent */\n-      /* The purpose of this conditional is to avoid scribbling beyond\n-         the end of a long double, in case the type is only 80 bits wide.  */\n-      if (LONG_DOUBLE_TYPE_SIZE == 96)\n-\t{\n-\t  /* Clear the last two bytes of 12-byte Intel format */\n-\t  *(q+1) = 0;\n-\t}\n-#ifdef INTEL_EXTENDED_IEEE_FORMAT\n-      if (LONG_DOUBLE_TYPE_SIZE == 128)\n-\t{\n-\t  /* Clear the last 6 bytes of 16-byte Intel format.  */\n-\t  q[1] = 0;\n-\t  q[2] = 0;\n-\t  q[3] = 0;\n-\t}\n-#endif\n+      /* Clear the last two bytes of 12-byte Intel format.  q is pointing\n+\t into an array of size 6 (e.g. x[NE]), so the last two bytes are\n+\t always there, and there are never more bytes, even when we are using\n+\t INTEL_EXTENDED_IEEE_FORMAT.  */\n+      *(q+1) = 0;\n     }\n #endif\n \n@@ -6917,8 +6916,13 @@ switch (GET_MODE_BITSIZE (mode))\n \n   case 96:\n     return 64;\n+\n   case 128:\n+#ifndef INTEL_EXTENDED_IEEE_FORMAT\n     return 113;\n+#else\n+    return 64;\n+#endif\n \n   default:\n     abort ();"}]}