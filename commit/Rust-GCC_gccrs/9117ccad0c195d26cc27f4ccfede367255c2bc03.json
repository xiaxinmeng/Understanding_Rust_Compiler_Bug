{"sha": "9117ccad0c195d26cc27f4ccfede367255c2bc03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTExN2NjYWQwYzE5NWQyNmNjMjdmNGNjZmVkZTM2NzI1NWMyYmMwMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-30T19:53:14Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-30T19:53:14Z"}, "message": "init.c (build_new_1): Fill in TYPE_DOMAIN, TYPE_SIZE and TYPE_SIZE_UNIT of full_type.\n\n        * init.c (build_new_1): Fill in TYPE_DOMAIN, TYPE_SIZE and\n        TYPE_SIZE_UNIT of full_type.\n\nFrom-SVN: r83927", "tree": {"sha": "ebf4f6b068a982ecc5323251c4b1f9871624c6fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebf4f6b068a982ecc5323251c4b1f9871624c6fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9117ccad0c195d26cc27f4ccfede367255c2bc03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9117ccad0c195d26cc27f4ccfede367255c2bc03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9117ccad0c195d26cc27f4ccfede367255c2bc03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9117ccad0c195d26cc27f4ccfede367255c2bc03/comments", "author": null, "committer": null, "parents": [{"sha": "aff982b1118d95c976ec712fad9249511e1e8d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff982b1118d95c976ec712fad9249511e1e8d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff982b1118d95c976ec712fad9249511e1e8d5d"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "1c138dae2b2c8cf6659bb9d4b8a2e7dcad4776e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9117ccad0c195d26cc27f4ccfede367255c2bc03/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9117ccad0c195d26cc27f4ccfede367255c2bc03/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9117ccad0c195d26cc27f4ccfede367255c2bc03", "patch": "@@ -1,3 +1,8 @@\n+2004-06-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* init.c (build_new_1): Fill in TYPE_DOMAIN, TYPE_SIZE and\n+\tTYPE_SIZE_UNIT of full_type.\n+\n 2004-06-30  Per Bothner  <per@bothner.com>\n \n \tConditionally compile support for --enable-mapped_location."}, {"sha": "1be01180426cb1305a39339cb0fcc25b9a9c7314", "filename": "gcc/cp/init.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9117ccad0c195d26cc27f4ccfede367255c2bc03/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9117ccad0c195d26cc27f4ccfede367255c2bc03/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9117ccad0c195d26cc27f4ccfede367255c2bc03", "patch": "@@ -1815,10 +1815,20 @@ build_new_1 (tree exp)\n \n   if (nelts)\n     {\n+      tree index;\n+\n       has_array = 1;\n       outer_nelts = nelts;\n-      /* Use an incomplete array type to avoid VLA headaches.  */\n+\n+      /* ??? The middle-end will error on us for building a VLA outside a \n+\t function context.  Methinks that's not it's purvey.  So we'll do\n+\t our own VLA layout later.  */\n+\n       full_type = build_cplus_array_type (type, NULL_TREE);\n+\n+      index = convert (sizetype, nelts);\n+      index = size_binop (MINUS_EXPR, index, size_one_node);\n+      TYPE_DOMAIN (full_type) = build_index_type (index);\n     }\n   else\n     full_type = type;\n@@ -1857,7 +1867,20 @@ build_new_1 (tree exp)\n \n   size = size_in_bytes (true_type);\n   if (has_array)\n-    size = size_binop (MULT_EXPR, size, convert (sizetype, nelts));\n+    {\n+      tree n, bitsize;\n+\n+      /* Do our own VLA layout.  Setting TYPE_SIZE/_UNIT is necessary in\n+\t order for the <INIT_EXPR <*foo> <CONSTRUCTOR ...>> to be valid.  */\n+\n+      n = convert (sizetype, nelts);\n+      size = size_binop (MULT_EXPR, size, n);\n+      TYPE_SIZE_UNIT (full_type) = size;\n+\n+      n = convert (bitsizetype, nelts);\n+      bitsize = size_binop (MULT_EXPR, TYPE_SIZE (true_type), n);\n+      TYPE_SIZE (full_type) = bitsize;\n+    }\n \n   /* Allocate the object.  */\n   if (! placement && TYPE_FOR_JAVA (true_type))"}]}