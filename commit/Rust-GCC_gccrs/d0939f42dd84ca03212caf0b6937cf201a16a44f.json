{"sha": "d0939f42dd84ca03212caf0b6937cf201a16a44f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5MzlmNDJkZDg0Y2EwMzIxMmNhZjBiNjkzN2NmMjAxYTE2YTQ0Zg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2020-08-31T00:52:03Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2020-08-31T00:52:03Z"}, "message": "testsuite: Update some vect cases for partial vectors\n\nThis patch is to adjust some existing vectorization test cases\nto work well with the newly introduced partial vector usages.\n\nBootstrapped/regtested on aarch64-linux-gnu and powerpc64le-linux-gnu\nP9 (with explicit param vect-partial-vector-usage=1 and enablement on\ncheck_effective_target_vect_partial_vectors_usage_1 check).\n\ngcc/ChangeLog:\n\n\t* doc/sourcebuild.texi (vect_len_load_store,\n\tvect_partial_vectors_usage_1, vect_partial_vectors_usage_2,\n\tvect_partial_vectors): Document.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/vect/bb-slp-pr69907.c: Adjust for partial vector usages.\n\t* gcc.dg/vect/slp-3.c: Likewise.\n\t* gcc.dg/vect/slp-multitypes-11.c: Likewise.\n\t* gcc.dg/vect/slp-perm-1.c: Likewise.\n\t* gcc.dg/vect/slp-perm-5.c: Likewise.\n\t* gcc.dg/vect/slp-perm-6.c: Likewise.\n\t* gcc.dg/vect/slp-perm-7.c: Likewise.\n\t* gcc.dg/vect/slp-perm-8.c: Likewise.\n\t* gcc.dg/vect/slp-perm-9.c: Likewise.\n\t* gcc.dg/vect/vect-version-2.c: Likewise.\n\t* lib/target-supports.exp (check_vect_partial_vector_usage): New\n\tfunction.\n\t(check_effective_target_vect_len_load_store): Likewise.\n\t(check_effective_target_vect_partial_vectors_usage_1): Likewise.\n\t(check_effective_target_vect_partial_vectors_usage_2): Likewise.\n\t(check_effective_target_vect_partial_vectors): Likewise.", "tree": {"sha": "32a706da7a34d83eb954351930336d08d9782371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32a706da7a34d83eb954351930336d08d9782371"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0939f42dd84ca03212caf0b6937cf201a16a44f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0939f42dd84ca03212caf0b6937cf201a16a44f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0939f42dd84ca03212caf0b6937cf201a16a44f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0939f42dd84ca03212caf0b6937cf201a16a44f/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf2bc8617aead56c7fef9904565dc4b4c70d4365", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf2bc8617aead56c7fef9904565dc4b4c70d4365", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf2bc8617aead56c7fef9904565dc4b4c70d4365"}], "stats": {"total": 122, "additions": 109, "deletions": 13}, "files": [{"sha": "f7c69362f91bd661d91b96919e58196e1bb2194f", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -1711,6 +1711,21 @@ Target supports AND, IOR and XOR reduction on vectors.\n \n @item vect_fold_extract_last\n Target supports the @code{fold_extract_last} optab.\n+\n+@item vect_len_load_store\n+Target supports the @code{len_load} and @code{len_store} optabs.\n+\n+@item vect_partial_vectors_usage_1\n+Target supports loop vectorization with partial vectors and\n+@code{vect-partial-vector-usage} is set to 1.\n+\n+@item vect_partial_vectors_usage_2\n+Target supports loop vectorization with partial vectors and\n+@code{vect-partial-vector-usage} is set to 2.\n+\n+@item vect_partial_vectors\n+Target supports loop vectorization with partial vectors and\n+@code{vect-partial-vector-usage} is nonzero.\n @end table\n \n @subsubsection Thread Local Storage attributes"}, {"sha": "b348526b62f03d06abb42da264a7e74fca2b0b83", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr69907.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr69907.c?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-additional-options \"-O3\" } */\n+/* Disable for vectorization using partial vectors since it would have only\n+   one iteration left, consequently BB vectorization won't happen.  */\n+/* { dg-additional-options \"-O3 --param=vect-partial-vector-usage=0\" } */\n /* { dg-require-effective-target vect_unpack } */\n \n #include \"tree-vect.h\""}, {"sha": "46ab584419aac4dfd1fd5da0920c67e040f7dc60", "filename": "gcc/testsuite/gcc.dg/vect/slp-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -141,8 +141,8 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { target { ! vect_fully_masked } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" { target vect_fully_masked } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" { target { ! vect_fully_masked } } } }*/\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { target vect_fully_masked } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" { target { ! vect_partial_vectors } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" { target vect_partial_vectors } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" { target { ! vect_partial_vectors } } } }*/\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { target vect_partial_vectors } } } */\n   "}, {"sha": "96218861cd61272d24cfc76772139d42172bb757", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-11.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11.c?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -49,5 +49,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_unpack } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target vect_unpack xfail { vect_variable_length && vect_load_lanes } } } } */\n+/* The epilogues are vectorized using partial vectors.  */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\"  { target { vect_unpack && {! vect_partial_vectors_usage_1 } } xfail { vect_variable_length && vect_load_lanes } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  { target { vect_unpack && vect_partial_vectors_usage_1 } xfail { vect_variable_length && vect_load_lanes } } } } */\n   "}, {"sha": "4128cca024cd36b01f385d6f9db39eec3a65c67d", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-1.c?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -80,7 +80,9 @@ int main (int argc, const char* argv[])\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_perm } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_perm3_int && {! vect_load_lanes } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_perm3_int && { {! vect_load_lanes } && {! vect_partial_vectors_usage_1 } } } } } } */\n+/* The epilogues are vectorized using partial vectors.  */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_perm3_int && { {! vect_load_lanes } && vect_partial_vectors_usage_1 } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target vect_load_lanes } } } */\n /* { dg-final { scan-tree-dump \"Built SLP cancelled: can use load/store-lanes\" \"vect\" { target { vect_perm3_int && vect_load_lanes } } } } */\n /* { dg-final { scan-tree-dump \"LOAD_LANES\" \"vect\" { target vect_load_lanes } } } */"}, {"sha": "b137821ec3904f6d53ec935eb6f462ba79b62db2", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-5.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-5.c?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -104,7 +104,9 @@ int main (int argc, const char* argv[])\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_perm } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_perm3_int && { ! vect_load_lanes } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_perm3_int && { {! vect_load_lanes } && {! vect_partial_vectors_usage_1 } } } } } } */\n+/* The epilogues are vectorized using partial vectors.  */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { target { vect_perm3_int && { {! vect_load_lanes } && vect_partial_vectors_usage_1 } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target vect_load_lanes } } } */\n /* { dg-final { scan-tree-dump \"Built SLP cancelled: can use load/store-lanes\" \"vect\" { target { vect_perm3_int && vect_load_lanes } } } } */\n /* { dg-final { scan-tree-dump \"LOAD_LANES\" \"vect\" { target vect_load_lanes } } } */"}, {"sha": "38489291a2659c989121d44c9e9e7bdfaa12f868", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-6.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-6.c?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -103,7 +103,9 @@ int main (int argc, const char* argv[])\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_perm } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_perm3_int && { ! vect_load_lanes } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_perm3_int && { {! vect_load_lanes } && {! vect_partial_vectors_usage_1 } } } } } } */\n+/* The epilogues are vectorized using partial vectors.  */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { target { vect_perm3_int && { {! vect_load_lanes } && vect_partial_vectors_usage_1 } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_load_lanes } } } */\n /* { dg-final { scan-tree-dump \"Built SLP cancelled: can use load/store-lanes\" \"vect\" { target { vect_perm3_int && vect_load_lanes } } } } */\n /* { dg-final { scan-tree-dump \"LOAD_LANES\" \"vect\" { target vect_load_lanes } } } */"}, {"sha": "498999ac56ed34da857e2cfad8c4405639e40330", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-7.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-7.c?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -96,7 +96,9 @@ int main (int argc, const char* argv[])\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { target vect_perm } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_perm3_int && { ! vect_load_lanes } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_perm3_int && { {! vect_load_lanes } && {! vect_partial_vectors_usage_1 } } } } } } */\n+/* The epilogues are vectorized using partial vectors.  */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_perm3_int && { {! vect_load_lanes } && vect_partial_vectors_usage_1 } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target vect_load_lanes } } } */\n /* { dg-final { scan-tree-dump \"Built SLP cancelled: can use load/store-lanes\" \"vect\" { target { vect_perm3_int && vect_load_lanes } } } } */\n /* { dg-final { scan-tree-dump \"LOAD_LANES\" \"vect\" { target vect_load_lanes } } } */"}, {"sha": "9e59832fb8b7417069943a74d28ffcd3e15e2215", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-8.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-8.c?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -60,7 +60,9 @@ int main (int argc, const char* argv[])\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_perm_byte } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_perm3_byte && { ! vect_load_lanes } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_perm3_byte && { { ! vect_load_lanes } && {! vect_partial_vectors_usage_1 } } } } } } */\n+/* The epilogues are vectorized using partial vectors.  */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_perm3_byte && { { ! vect_load_lanes } && vect_partial_vectors_usage_1 } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target vect_load_lanes } } } */\n /* { dg-final { scan-tree-dump \"Built SLP cancelled: can use load/store-lanes\" \"vect\" { target { vect_perm3_byte && vect_load_lanes } } } } */\n /* { dg-final { scan-tree-dump \"LOAD_LANES\" \"vect\" { target vect_load_lanes } } } */"}, {"sha": "ab75f44eb756b60cd61f321ff72925a31e0acdaa", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-9.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-9.c?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -61,7 +61,9 @@ int main (int argc, const char* argv[])\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_perm_short || vect_load_lanes } } } } */\n /* We don't try permutes with a group size of 3 for variable-length\n    vectors.  */\n-/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 1 \"vect\" { target { vect_perm_short && { ! vect_perm3_short } } xfail vect_variable_length } } } */\n+/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 1 \"vect\" { target { vect_perm_short && { { ! vect_perm3_short } && { ! vect_partial_vectors_usage_1 } } } xfail vect_variable_length } } } */\n+/* Try to vectorize the epilogue using partial vectors.  */\n+/* { dg-final { scan-tree-dump-times \"permutation requires at least three vectors\" 2 \"vect\" { target { vect_perm_short && { { ! vect_perm3_short } && vect_partial_vectors_usage_1 } } xfail vect_variable_length } } } */\n /* { dg-final { scan-tree-dump-not \"permutation requires at least three vectors\" \"vect\" { target vect_perm3_short } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target { { ! vect_perm3_short } || vect_load_lanes } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target { vect_perm3_short && { ! vect_load_lanes } } } } } */"}, {"sha": "7d3fb722f477c9a55d78f8b6e34b4adafb3617ff", "filename": "gcc/testsuite/gcc.dg/vect/vect-version-2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-version-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-version-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-version-2.c?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -17,4 +17,8 @@ void foo (double *x, double *y, int m, int n, int o, int p)\n \t  }\n }\n \n-/* { dg-final { scan-tree-dump \"reusing loop version created by if conversion\" \"vect\" } } */\n+/* Vectorization using partial vectors has zero versioning_threshold with\n+   either usage 1 or usage 2, the cond_expr replies on the computation in\n+   outer loop, so it doesn't need to reuse the loop version created by if\n+   conversion.  */\n+/* { dg-final { scan-tree-dump \"reusing loop version created by if conversion\" \"vect\" {target {! vect_partial_vectors } } } } */"}, {"sha": "46e8cddbcca3960bc349a5978a901ced270bbd11", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0939f42dd84ca03212caf0b6937cf201a16a44f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d0939f42dd84ca03212caf0b6937cf201a16a44f", "patch": "@@ -7081,6 +7081,67 @@ proc check_effective_target_vect_fully_masked { } {\n \t           || [istarget amdgcn*-*-*] }]\n }\n \n+# Return true if the target supports the @code{len_load} and\n+# @code{len_store} optabs.\n+\n+proc check_effective_target_vect_len_load_store { } {\n+    return 0\n+}\n+\n+# Return the value of parameter vect-partial-vector-usage specified for\n+# target by checking the output of \"-Q --help=params\".  Return zero if\n+# the desirable pattern isn't found.\n+\n+proc check_vect_partial_vector_usage { } {\n+    global tool\n+\n+    return [check_cached_effective_target vect_partial_vector_usage {\n+      set result [check_compile vect_partial_vector_usage assembly {\n+\t  int i;\n+      } \"-Q --help=params\" ]\n+\n+      # Get compiler emitted messages and delete generated file.\n+      set lines [lindex $result 0]\n+      set output [lindex $result 1]\n+      remote_file build delete $output\n+\n+      set pattern {=vect-partial-vector-usage=<0,2>\\s+([0-2])}\n+      # Capture the usage value to val, set it to zero if not found.\n+      if { ![regexp $pattern $lines whole val] } then {\n+\t  set val 0\n+      }\n+\n+      return $val\n+    }]\n+}\n+\n+# Return true if the target supports loop vectorization with partial vectors\n+# and @code{vect-partial-vector-usage} is set to 1.\n+\n+proc check_effective_target_vect_partial_vectors_usage_1 { } {\n+    return [expr { ([check_effective_target_vect_fully_masked]\n+\t\t    || [check_effective_target_vect_len_load_store])\n+\t\t   && [check_vect_partial_vector_usage] == 1 }]\n+}\n+\n+# Return true if the target supports loop vectorization with partial vectors\n+# and @code{vect-partial-vector-usage} is set to 2.\n+\n+proc check_effective_target_vect_partial_vectors_usage_2 { } {\n+    return [expr { ([check_effective_target_vect_fully_masked]\n+\t\t    || [check_effective_target_vect_len_load_store])\n+\t\t   && [check_vect_partial_vector_usage] == 2 }]\n+}\n+\n+# Return true if the target supports loop vectorization with partial vectors\n+# and @code{vect-partial-vector-usage} is nonzero.\n+\n+proc check_effective_target_vect_partial_vectors { } {\n+    return [expr { ([check_effective_target_vect_fully_masked]\n+\t\t    || [check_effective_target_vect_len_load_store])\n+\t\t   && [check_vect_partial_vector_usage] != 0 }]\n+}\n+\n # Return 1 if the target doesn't prefer any alignment beyond element\n # alignment during vectorization.\n "}]}