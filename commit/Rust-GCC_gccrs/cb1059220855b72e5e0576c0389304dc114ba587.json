{"sha": "cb1059220855b72e5e0576c0389304dc114ba587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IxMDU5MjIwODU1YjcyZTVlMDU3NmMwMzg5MzA0ZGMxMTRiYTU4Nw==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2014-05-30T18:00:11Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2014-05-30T18:00:11Z"}, "message": "re PR target/60104 (load not folded into indirect branch on x86-64)\n\n\tPR target/60104\n\t* config/i386/i386.c (x86_output_mi_thunk): Add memory case\n\tfor sibling-tail-calls.\n\t* config/i386/i386.md (sibcall_insn_operand): Add memory-constrain\n\tto its use.\n\t* config/i386/predicates.md (sibcall_memory_operand): New predicate.\n\t(sibcall_insn_operand): Add check for sibcall_memory_operand.\n\n\tPR target/60104\n\t* gcc.target/i386/sibcall-1.c: New test.\n\t* gcc.target/i386/sibcall-2.c: New test.\n\t* gcc.target/i386/sibcall-3.c: New test.\n\t* gcc.target/i386/sibcall-4.c: New test.\n\nFrom-SVN: r211089", "tree": {"sha": "8ad0314a3b818c2c80c4c2f059499561fe4e852b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ad0314a3b818c2c80c4c2f059499561fe4e852b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb1059220855b72e5e0576c0389304dc114ba587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1059220855b72e5e0576c0389304dc114ba587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1059220855b72e5e0576c0389304dc114ba587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1059220855b72e5e0576c0389304dc114ba587/comments", "author": null, "committer": null, "parents": [{"sha": "1007a55ca4577e09c121f5b9bebb07a3da608171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1007a55ca4577e09c121f5b9bebb07a3da608171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1007a55ca4577e09c121f5b9bebb07a3da608171"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "3653520446f913f444aa6c24c0228ed781e46adf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb1059220855b72e5e0576c0389304dc114ba587", "patch": "@@ -1,3 +1,13 @@\n+2014-05-30  Kai Tietz  <ktietz@redhat.com>\n+\n+\tPR target/60104\n+\t* config/i386/i386.c (x86_output_mi_thunk): Add memory case\n+\tfor sibling-tail-calls.\n+\t* config/i386/i386.md (sibcall_insn_operand): Add memory-constrain\n+\tto its use.\n+\t* config/i386/predicates.md (sibcall_memory_operand): New predicate.\n+\t(sibcall_insn_operand): Add check for sibcall_memory_operand.\n+\n 2014-05-30  Pitchumani Sivanupandi <pitchumani.s@atmel.com>\n \n \t* config/avr/avr-mcus.def: Change ATA6289 ISA to AVR4"}, {"sha": "f48adfd39ee32ccec0231c93aeb06fc4b036ab6f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cb1059220855b72e5e0576c0389304dc114ba587", "patch": "@@ -38893,7 +38893,16 @@ x86_output_mi_thunk (FILE *file,\n      For our purposes here, we can get away with (ab)using a jump pattern,\n      because we're going to do no optimization.  */\n   if (MEM_P (fnaddr))\n-    emit_jump_insn (gen_indirect_jump (fnaddr));\n+    {\n+      if (sibcall_insn_operand (fnaddr, word_mode))\n+\t{\n+\t  tmp = gen_rtx_CALL (VOIDmode, fnaddr, const0_rtx);\n+          tmp = emit_call_insn (tmp);\n+          SIBLING_CALL_P (tmp) = 1;\n+\t}\n+      else\n+\temit_jump_insn (gen_indirect_jump (fnaddr));\n+    }\n   else\n     {\n       if (ix86_cmodel == CM_LARGE_PIC && SYMBOLIC_CONST (fnaddr))"}, {"sha": "8d363bda0b3e27930311e79e39da319aa898b83a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cb1059220855b72e5e0576c0389304dc114ba587", "patch": "@@ -11376,7 +11376,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*sibcall\"\n-  [(call (mem:QI (match_operand:W 0 \"sibcall_insn_operand\" \"Uz\"))\n+  [(call (mem:QI (match_operand:W 0 \"sibcall_insn_operand\" \"Uzm\"))\n \t (match_operand 1))]\n   \"SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n@@ -11406,7 +11406,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*sibcall_pop\"\n-  [(call (mem:QI (match_operand:SI 0 \"sibcall_insn_operand\" \"Uz\"))\n+  [(call (mem:QI (match_operand:SI 0 \"sibcall_insn_operand\" \"Uzm\"))\n \t (match_operand 1))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n@@ -11451,7 +11451,7 @@\n \n (define_insn \"*sibcall_value\"\n   [(set (match_operand 0)\n-\t(call (mem:QI (match_operand:W 1 \"sibcall_insn_operand\" \"Uz\"))\n+\t(call (mem:QI (match_operand:W 1 \"sibcall_insn_operand\" \"Uzm\"))\n \t      (match_operand 2)))]\n   \"SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n@@ -11494,7 +11494,7 @@\n \n (define_insn \"*sibcall_value_pop\"\n   [(set (match_operand 0)\n-\t(call (mem:QI (match_operand:SI 1 \"sibcall_insn_operand\" \"Uz\"))\n+\t(call (mem:QI (match_operand:SI 1 \"sibcall_insn_operand\" \"Uzm\"))\n \t      (match_operand 2)))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)"}, {"sha": "efc3a090d08a9d5f087d7c0d72140234d92ddefb", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=cb1059220855b72e5e0576c0389304dc114ba587", "patch": "@@ -71,6 +71,12 @@\n   return ANY_QI_REG_P (op);\n })\n \n+(define_predicate \"sibcall_memory_operand\"\n+  (match_operand 0 \"memory_operand\")\n+{\n+  return CONSTANT_P (XEXP (op, 0));\n+})\n+\n ;; Match an SI or HImode register for a zero_extract.\n (define_special_predicate \"ext_register_operand\"\n   (match_operand 0 \"register_operand\")\n@@ -600,7 +606,9 @@\n (define_special_predicate \"sibcall_insn_operand\"\n   (ior (match_test \"constant_call_address_operand\n \t\t     (op, mode == VOIDmode ? mode : Pmode)\")\n-       (match_operand 0 \"register_no_elim_operand\")))\n+       (match_operand 0 \"register_no_elim_operand\")\n+       (and (not (match_test \"TARGET_X32\"))\n+\t    (match_operand 0 \"sibcall_memory_operand\"))))\n \n ;; Return true if OP is a call from MS ABI to SYSV ABI function.\n (define_predicate \"call_rex64_ms_sysv_operation\""}, {"sha": "5a9ff475a1e660962f39c6230a1d126d656bf663", "filename": "gcc/testsuite/gcc.target/i386/sibcall-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-1.c?ref=cb1059220855b72e5e0576c0389304dc114ba587", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-O2\" } */\n+\n+extern int (*foo)(int);\n+\n+int boo (int a)\n+{\n+  return (*foo) (a);\n+}\n+\n+/* { dg-final { scan-assembler-not \"mov\" } } */"}, {"sha": "f42e83c2bf6a523213b0bee852e0f3717e32ee98", "filename": "gcc/testsuite/gcc.target/i386/sibcall-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-2.c?ref=cb1059220855b72e5e0576c0389304dc114ba587", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { xfail { *-*-* } } } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-O2\" } */\n+\n+extern int doo1 (int);\n+extern int doo2 (int);\n+extern void bar (char *);\n+\n+int foo (int a)\n+{\n+  char s[256];\n+  bar (s);\n+  return (a < 0 ? doo1 : doo2) (a);\n+}\n+\n+/* { dg-final { scan-assembler-not \"call[ \\t]*.%eax\" } } */"}, {"sha": "439b422482d9d3c3f20a4283303562910c97cc6e", "filename": "gcc/testsuite/gcc.target/i386/sibcall-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-3.c?ref=cb1059220855b72e5e0576c0389304dc114ba587", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-O2\" } */\n+\n+extern \n+#ifdef _WIN32\n+ __declspec (dllimport)\n+#endif\n+ void foo (int a);\n+\n+void bar (int a)\n+{\n+  return foo (a);\n+}\n+\n+/* { dg-final { scan-assembler-not \"jmp[ \\t]*.%eax\" } } */"}, {"sha": "e157338e52f2ac6612fe3b71a7dc04497f6a4576", "filename": "gcc/testsuite/gcc.target/i386/sibcall-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1059220855b72e5e0576c0389304dc114ba587/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsibcall-4.c?ref=cb1059220855b72e5e0576c0389304dc114ba587", "patch": "@@ -0,0 +1,15 @@\n+/* Testcase for PR target/46219.  */\n+/* { dg-do compile { xfail { *-*-* } } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef void (*dispatch_t)(long offset);\n+\n+dispatch_t dispatch[256];\n+\n+void male_indirect_jump (long offset)\n+{\n+  dispatch[offset](offset);\n+}\n+\n+/* { dg-final { scan-assembler-not \"jmp[ \\t]*.%eax\" } } */"}]}