{"sha": "9a0e77ba1327661271053585fcc696cbc8215133", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEwZTc3YmExMzI3NjYxMjcxMDUzNTg1ZmNjNjk2Y2JjODIxNTEzMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@deneb.cygnus.com", "date": "1994-07-06T00:28:23Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-07-06T00:28:23Z"}, "message": "43rd Cygnus<->FSF merge\n\nFrom-SVN: r7660", "tree": {"sha": "bd7165a6c91d1f1f1c26adbbfb5cb1e0e21d6853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd7165a6c91d1f1f1c26adbbfb5cb1e0e21d6853"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a0e77ba1327661271053585fcc696cbc8215133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0e77ba1327661271053585fcc696cbc8215133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0e77ba1327661271053585fcc696cbc8215133", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0e77ba1327661271053585fcc696cbc8215133/comments", "author": null, "committer": null, "parents": [{"sha": "2c33b8c2d121e6c447ef587308a91875b1045727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c33b8c2d121e6c447ef587308a91875b1045727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c33b8c2d121e6c447ef587308a91875b1045727"}], "stats": {"total": 195, "additions": 137, "deletions": 58}, "files": [{"sha": "78aef9fb59c0812e604bcf93044acaabf62c5224", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9a0e77ba1327661271053585fcc696cbc8215133", "patch": "@@ -1,3 +1,30 @@\n+Fri Jul  1 09:35:51 1994  Jason Merrill  (jason@deneb.cygnus.com)\n+\n+\t* parse.y (init): ANSI C++ does not forbid { }.\n+\n+Thu Jun 30 00:35:22 1994  Jason Merrill  (jason@deneb.cygnus.com)\n+\n+\t* decl2.c (lang_decode_option): Set warn_nonvdtor along with -Wall.\n+\twarn_nonvdtor defaults to off.\n+\n+\t* class.c (instantiate_type): Use comptypes rather than relying on \n+\ttypes to satisfy ==.\n+\n+\t* decl.c (start_function): Set DECL_DEFER_OUTPUT on all inlines that\n+\tmight be static.\n+\n+\t* tree.c (build_cplus_new): Never build WITH_CLEANUP_EXPRs.\n+\n+\t* decl.c (grok_reference_init): Deal with ADDR_EXPRs of TARGET_EXPRs.\n+\n+\t* cvt.c (cp_convert): Pass 0 to with_cleanup_p arg of\n+\tbuild_cplus_new.\n+\n+Wed Jun 29 22:31:09 1994  Jason Merrill  (jason@deneb.cygnus.com)\n+\n+\t* decl2.c (finish_file): Maybe consider static inlines multiple\n+\ttimes, in case they reference each other.\n+\n Tue Jun 28 11:58:38 1994  Gerald Baumgartner  (gb@cs.purdue.edu)\n \n \t* class.c (finish_struct): Don't `cons_up_default_function's"}, {"sha": "ec28fa37d2202e05df6b6e1b03364991e86356f7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=9a0e77ba1327661271053585fcc696cbc8215133", "patch": "@@ -1779,7 +1779,7 @@ build_method_call (instance, name, parms, basetype_path, flags)\n \t  if ((IS_SIGNATURE (basetype)\n \t       && (instance_ptr = build_optr_ref (instance)))\n \t      || (lvalue_p (instance)\n-\t       && (instance_ptr = build_unary_op (ADDR_EXPR, instance, 0)))\n+\t\t  && (instance_ptr = build_unary_op (ADDR_EXPR, instance, 0)))\n \t      || (instance_ptr = unary_complex_lvalue (ADDR_EXPR, instance)))\n \t    {\n \t      if (instance_ptr == error_mark_node)"}, {"sha": "e324834f4c50990668813f4cb4f2d0701ac2e354", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9a0e77ba1327661271053585fcc696cbc8215133", "patch": "@@ -4706,10 +4706,10 @@ instantiate_type (lhstype, rhs, complain)\n \t  {\n \t    elem = TREE_VALUE (baselink);\n \t    while (elem)\n-\t      if (TREE_TYPE (elem) != lhstype)\n-\t\telem = TREE_CHAIN (elem);\n-\t      else\n+\t      if (comptypes (lhstype, TREE_TYPE (elem), 1))\n \t\treturn elem;\n+\t      else\n+\t\telem = TREE_CHAIN (elem);\n \t  }\n \n \t/* No exact match found, look for a compatible method.  */"}, {"sha": "cb8d96832ffe90eed470020bf4a68c3791f4c32f", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=9a0e77ba1327661271053585fcc696cbc8215133", "patch": "@@ -1395,7 +1395,9 @@ cp_convert (type, expr, convtype, flags)\n \t      cp_error (\"in conversion to type `%T'\", type);\n \t      return error_mark_node;\n \t    }\n-\t  rval = build_cplus_new (type, init, 1);\n+\t  /* We can't pass 1 to the with_cleanup_p arg here, because that\n+             screws up passing classes by value.  */\n+\t  rval = build_cplus_new (type, init, 0);\n \t  return rval;\n \t}\n     }"}, {"sha": "82d852dcde4cface530791bc9d901ff8aa750c10", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9a0e77ba1327661271053585fcc696cbc8215133", "patch": "@@ -5593,14 +5593,31 @@ grok_reference_init (decl, type, init, cleanupp)\n     goto fail;\n   else if (tmp != NULL_TREE)\n     {\n+      tree subtype = TREE_TYPE (type);\n       init = tmp;\n \n-      if (TREE_CODE (init) == WITH_CLEANUP_EXPR)\n+      /* Associate the cleanup with the reference so that we\n+\t don't get burned by \"aggressive\" cleanup policy.  */\n+      if (TYPE_NEEDS_DESTRUCTOR (subtype))\n \t{\n-\t  /* Associate the cleanup with the reference so that we\n-\t     don't get burned by \"aggressive\" cleanup policy.  */\n-\t  *cleanupp = TREE_OPERAND (init, 2);\n-\t  TREE_OPERAND (init, 2) = error_mark_node;\n+\t  if (TREE_CODE (init) == WITH_CLEANUP_EXPR)\n+\t    {\n+\t      *cleanupp = TREE_OPERAND (init, 2);\n+\t      TREE_OPERAND (init, 2) = error_mark_node;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (TREE_CODE (tmp) == ADDR_EXPR)\n+\t\ttmp = TREE_OPERAND (tmp, 0);\n+\t      if (TREE_CODE (tmp) == TARGET_EXPR)\n+\t\t{\n+\t\t  *cleanupp = build_delete\n+\t\t    (TYPE_POINTER_TO (subtype),\n+\t\t     build_unary_op (ADDR_EXPR, TREE_OPERAND (tmp, 0), 0),\n+\t\t     integer_two_node, LOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 0);\n+\t\t  TREE_OPERAND (tmp, 2) = error_mark_node;\n+\t\t}\n+\t    }\n \t}\n \n       if (TREE_SIDE_EFFECTS (init))\n@@ -10708,9 +10725,7 @@ start_function (declspecs, declarator, raises, pre_parsed_p)\n \t defining how to inline.  So set DECL_EXTERNAL in that case.  */\n       DECL_EXTERNAL (decl1) = current_extern_inline;\n \n-      DECL_DEFER_OUTPUT (decl1)\n-\t= (DECL_INLINE (decl1) && (DECL_IMPLICIT_INSTANTIATION (decl1)\n-\t\t\t\t   || DECL_FUNCTION_MEMBER_P (decl1)));\n+      DECL_DEFER_OUTPUT (decl1) = DECL_INLINE (decl1);\n     }\n \n   if (ctype != NULL_TREE && DECL_STATIC_FUNCTION_P (decl1))"}, {"sha": "d04cf51a0e84676eb5af347a7b1e948cffee8962", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 77, "deletions": 39, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9a0e77ba1327661271053585fcc696cbc8215133", "patch": "@@ -202,7 +202,7 @@ int warn_overloaded_virtual;\n \n /* Non-zero means warn when declaring a class that has a non virtual\n    destructor, when it really ought to have a virtual one. */\n-int warn_nonvdtor = 1;\n+int warn_nonvdtor;\n \n /* Non-zero means warn when a function is declared extern and later inline.  */\n int warn_extern_inline;\n@@ -530,6 +530,7 @@ lang_decode_option (p)\n \t  warn_format = setting;\n \t  warn_missing_braces = setting;\n \t  warn_extern_inline = setting;\n+\t  warn_nonvdtor = setting;\n \t  /* We save the value of warn_uninitialized, since if they put\n \t     -Wuninitialized on the command line, we need to generate a\n \t     warning about not using it without also specifying -O.  */\n@@ -2760,44 +2761,81 @@ finish_file ()\n \temit_thunk (vars);\n     }\n \n-  /* Now write out inline functions which had their addresses taken\n-     and which were not declared virtual and which were not declared\n-     `extern inline'.  */\n-  while (saved_inlines)\n-    {\n-      tree decl = TREE_VALUE (saved_inlines);\n-      saved_inlines = TREE_CHAIN (saved_inlines);\n-      /* Redefinition of a member function can cause DECL_SAVED_INSNS to be\n-         0; don't crash.  */\n-      if (TREE_ASM_WRITTEN (decl) || DECL_SAVED_INSNS (decl) == 0)\n-\tcontinue;\n-      if (DECL_FUNCTION_MEMBER_P (decl) && !TREE_PUBLIC (decl))\n-\t{\n-\t  tree ctype = DECL_CLASS_CONTEXT (decl);\n-\t  if (CLASSTYPE_INTERFACE_KNOWN (ctype))\n-\t    {\n-\t      TREE_PUBLIC (decl) = 1;\n-\t      DECL_EXTERNAL (decl)\n-\t\t= (CLASSTYPE_INTERFACE_ONLY (ctype)\n-\t\t   || (DECL_INLINE (decl) && ! flag_implement_inlines));\n-\t    }\n-\t}\n-      if (TREE_PUBLIC (decl)\n-\t  || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n-\t  || flag_keep_inline_functions)\n-\t{\n-\t  if (DECL_EXTERNAL (decl)\n-\t      || (DECL_IMPLICIT_INSTANTIATION (decl)\n-\t\t  && ! flag_implicit_templates))\n-\t    assemble_external (decl);\n-\t  else\n-\t    {\t\n-\t      temporary_allocation ();\n-\t      output_inline_function (decl);\n-\t      permanent_allocation (1);\n-\t    }\n-\t}\n-    }\n+  {\n+    int reconsider = 0;\t\t/* More may be referenced; check again */\n+    tree delayed = NULL_TREE;\t/* These might be referenced later */\n+\n+    /* Now write out inline functions which had their addresses taken and\n+       which were not declared virtual and which were not declared `extern\n+       inline'.  */\n+    while (saved_inlines)\n+      {\n+\ttree decl = TREE_VALUE (saved_inlines);\n+\tsaved_inlines = TREE_CHAIN (saved_inlines);\n+\t/* Redefinition of a member function can cause DECL_SAVED_INSNS to be\n+\t   0; don't crash.  */\n+\tif (TREE_ASM_WRITTEN (decl) || DECL_SAVED_INSNS (decl) == 0)\n+\t  continue;\n+\tif (DECL_FUNCTION_MEMBER_P (decl) && !TREE_PUBLIC (decl))\n+\t  {\n+\t    tree ctype = DECL_CLASS_CONTEXT (decl);\n+\t    if (CLASSTYPE_INTERFACE_KNOWN (ctype))\n+\t      {\n+\t\tTREE_PUBLIC (decl) = 1;\n+\t\tDECL_EXTERNAL (decl)\n+\t\t  = (CLASSTYPE_INTERFACE_ONLY (ctype)\n+\t\t     || (DECL_INLINE (decl) && ! flag_implement_inlines));\n+\t      }\n+\t  }\n+\tif (TREE_PUBLIC (decl)\n+\t    || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n+\t    || flag_keep_inline_functions)\n+\t  {\n+\t    if (DECL_EXTERNAL (decl)\n+\t\t|| (DECL_IMPLICIT_INSTANTIATION (decl)\n+\t\t    && ! flag_implicit_templates))\n+\t      assemble_external (decl);\n+\t    else\n+\t      {\n+\t\treconsider = 1;\n+\t\ttemporary_allocation ();\n+\t\toutput_inline_function (decl);\n+\t\tpermanent_allocation (1);\n+\t      }\n+\t  }\n+\telse if (TREE_USED (decl)\n+\t\t || TREE_USED (DECL_ASSEMBLER_NAME (decl)))\n+\t  delayed = tree_cons (NULL_TREE, decl, delayed);\n+      }\n+\n+    if (reconsider && delayed)\n+      {\n+\twhile (reconsider)\n+\t  {\n+\t    tree place;\n+\t    reconsider = 0;\n+\t    for (place = delayed; place; place = TREE_CHAIN (place))\n+\t      {\n+\t\ttree decl = TREE_VALUE (place);\n+\t\tif (TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))\n+\t\t    && ! TREE_ASM_WRITTEN (decl))\n+\t\t  {\n+\t\t    if (DECL_EXTERNAL (decl)\n+\t\t\t|| (DECL_IMPLICIT_INSTANTIATION (decl)\n+\t\t\t    && ! flag_implicit_templates))\n+\t\t      assemble_external (decl);\n+\t\t    else\n+\t\t      {\n+\t\t\treconsider = 1;\n+\t\t\ttemporary_allocation ();\n+\t\t\toutput_inline_function (decl);\n+\t\t\tpermanent_allocation (1);\n+\t\t      }\n+\t\t  }\n+\t      }\n+\t  }\n+      }\n+  }\n \n   if (write_virtuals == 2)\n     {"}, {"sha": "44ea9ea0affd54b3a77b787712cd840ba16d4826", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=9a0e77ba1327661271053585fcc696cbc8215133", "patch": "@@ -2021,9 +2021,7 @@ init:\n \t  expr_no_commas %prec '='\n \t| '{' '}'\n \t\t{ $$ = build_nt (CONSTRUCTOR, NULL_TREE, NULL_TREE);\n-\t\t  TREE_HAS_CONSTRUCTOR ($$) = 1;\n-\t\t  if (pedantic)\n-\t\t    pedwarn (\"ANSI C++ forbids empty initializer braces\"); }\n+\t\t  TREE_HAS_CONSTRUCTOR ($$) = 1; }\n \t| '{' initlist '}'\n \t\t{ $$ = build_nt (CONSTRUCTOR, NULL_TREE, nreverse ($2));\n \t\t  TREE_HAS_CONSTRUCTOR ($$) = 1; }"}, {"sha": "02519716de400edea64d6b3042b5c4c35f6c2eba", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0e77ba1327661271053585fcc696cbc8215133/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=9a0e77ba1327661271053585fcc696cbc8215133", "patch": "@@ -138,6 +138,7 @@ build_cplus_new (type, init, with_cleanup_p)\n   TREE_SIDE_EFFECTS (rval) = 1;\n   TREE_ADDRESSABLE (rval) = 1;\n \n+#if 0\n   if (with_cleanup_p && TYPE_NEEDS_DESTRUCTOR (type))\n     {\n       TREE_OPERAND (rval, 2) = error_mark_node;\n@@ -149,6 +150,7 @@ build_cplus_new (type, init, with_cleanup_p)\n       TREE_SIDE_EFFECTS (rval) = 1;\n       TREE_ADDRESSABLE (rval) = 1;\n     }\n+#endif\n   return rval;\n }\n \n@@ -335,9 +337,6 @@ build_cplus_staticfn_type (basetype, rettype, argtypes)\n   TYPE_METHOD_BASETYPE (t) = TYPE_MAIN_VARIANT (basetype);\n   TREE_TYPE (t) = rettype;\n \n-  /* The actual arglist for this function includes a \"hidden\" argument\n-     which is \"this\".  Put it into the list of argument types.  */\n-\n   TYPE_ARG_TYPES (t) = argtypes;\n \n   /* If we already have such a type, use the old one and free this one."}]}