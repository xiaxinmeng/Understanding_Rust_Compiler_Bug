{"sha": "2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNkYzg4YjY0ZDU0MGNkM2FiMWM1ZDFiODlkZDgyOGFiZjM3MzA2OA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-10-19T09:45:27Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-10-19T09:45:27Z"}, "message": "re PR libfortran/24432 (Missing symbols)\n\n\tPR libfortran/24432\n\t* c99_protos.h: Define preprocessor HAVE_ macros with value 1\n\tinstead of empty value.\n\t* intrinsics/c99_functions.c: Likewise.\n\t* intrinsics/getXid.c: Define HAVE_GETPID with value 1 instead of\n\tempty value.\n\t* intrinsics/sleep.c: Define HAVE_SLEEP with value 1 instead of\n\tempty value.\n\nFrom-SVN: r105603", "tree": {"sha": "db3ce510720abd6a2feeefd9d3500296ed78ca1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db3ce510720abd6a2feeefd9d3500296ed78ca1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c5923aea764c5220e5ebdfad370ddfd71d2e4ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c5923aea764c5220e5ebdfad370ddfd71d2e4ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c5923aea764c5220e5ebdfad370ddfd71d2e4ab"}], "stats": {"total": 296, "additions": 153, "deletions": 143}, "files": [{"sha": "4c5dc9b548094afa0385f37ae4aad7417a1c6410", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "patch": "@@ -1,4 +1,14 @@\n-2005-10-18  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+2005-10-19  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* c99_protos.h: Define preprocessor HAVE_ macros with value 1\n+\tinstead of empty value.\n+\t* intrinsics/c99_functions.c: Likewise.\n+\t* intrinsics/getXid.c: Define HAVE_GETPID with value 1 instead of\n+\tempty value.\n+\t* intrinsics/sleep.c: Define HAVE_SLEEP with value 1 instead of\n+\tempty value.\n+\n+2005-10-19  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/24432\n \t* c99_protos.h: Define HAVE_ macros for all provided functions."}, {"sha": "96f99150666d6410b5c48f4d35d23cee3ec9f64c", "filename": "libgfortran/c99_protos.h", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/libgfortran%2Fc99_protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/libgfortran%2Fc99_protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fc99_protos.h?ref=2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "patch": "@@ -27,378 +27,378 @@ Boston, MA 02110-1301, USA.  */\n \n \n #ifndef C99_PROTOS_H\n-#define C99_PROTOS_H\n+#define C99_PROTOS_H 1\n \n /* float variants of libm functions */\n #ifndef HAVE_ACOSF\n-#define HAVE_ACOSF\n+#define HAVE_ACOSF 1\n extern float acosf(float);\n #endif\n \n #ifndef HAVE_ACOSHF\n-#define HAVE_ACOSHF\n+#define HAVE_ACOSHF 1\n extern float acoshf(float);\n #endif\n \n #ifndef HAVE_ASINF\n-#define HAVE_ASINF\n+#define HAVE_ASINF 1\n extern float asinf(float);\n #endif\n \n #ifndef HAVE_ASINHF\n-#define HAVE_ASINHF\n+#define HAVE_ASINHF 1\n extern float asinhf(float);\n #endif\n \n #ifndef HAVE_ATAN2F\n-#define HAVE_ATAN2F\n+#define HAVE_ATAN2F 1\n extern float atan2f(float, float);\n #endif\n \n #ifndef HAVE_ATANF\n-#define HAVE_ATANF\n+#define HAVE_ATANF 1\n extern float atanf(float);\n #endif\n \n #ifndef HAVE_ATANHF\n-#define HAVE_ATANHF\n+#define HAVE_ATANHF 1\n extern float atanhf(float);\n #endif\n \n #ifndef HAVE_CEILF\n-#define HAVE_CEILF\n+#define HAVE_CEILF 1\n extern float ceilf(float);\n #endif\n \n #ifndef HAVE_COPYSIGNF\n-#define HAVE_COPYSIGNF\n+#define HAVE_COPYSIGNF 1\n extern float copysignf(float, float);\n #endif\n \n #ifndef HAVE_COSF\n-#define HAVE_COSF\n+#define HAVE_COSF 1\n extern float cosf(float);\n #endif\n \n #ifndef HAVE_COSHF\n-#define HAVE_COSHF\n+#define HAVE_COSHF 1\n extern float coshf(float);\n #endif\n \n #ifndef HAVE_EXPF\n-#define HAVE_EXPF\n+#define HAVE_EXPF 1\n extern float expf(float);\n #endif\n \n #ifndef HAVE_FABSF\n-#define HAVE_FABSF\n+#define HAVE_FABSF 1\n extern float fabsf(float);\n #endif\n \n #ifndef HAVE_FLOORF\n-#define HAVE_FLOORF\n+#define HAVE_FLOORF 1\n extern float floorf(float);\n #endif\n \n #ifndef HAVE_FREXPF\n-#define HAVE_FREXPF\n+#define HAVE_FREXPF 1\n extern float frexpf(float, int *);\n #endif\n \n #ifndef HAVE_HYPOTF\n-#define HAVE_HYPOTF\n+#define HAVE_HYPOTF 1\n extern float hypotf(float, float);\n #endif\n \n #ifndef HAVE_LOGF\n-#define HAVE_LOGF\n+#define HAVE_LOGF 1\n extern float logf(float);\n #endif\n \n #ifndef HAVE_LOG10F\n-#define HAVE_LOG10F\n+#define HAVE_LOG10F 1\n extern float log10f(float);\n #endif\n \n #ifndef HAVE_SCALBN\n-#define HAVE_SCALBN\n+#define HAVE_SCALBN 1\n extern double scalbn(double, int);\n #endif\n \n #ifndef HAVE_SCALBNF\n-#define HAVE_SCALBNF\n+#define HAVE_SCALBNF 1\n extern float scalbnf(float, int);\n #endif\n \n #ifndef HAVE_SINF\n-#define HAVE_SINF\n+#define HAVE_SINF 1\n extern float sinf(float);\n #endif\n \n #ifndef HAVE_SINHF\n-#define HAVE_SINHF\n+#define HAVE_SINHF 1\n extern float sinhf(float);\n #endif\n \n #ifndef HAVE_SQRTF\n-#define HAVE_SQRTF\n+#define HAVE_SQRTF 1\n extern float sqrtf(float);\n #endif\n \n #ifndef HAVE_TANF\n-#define HAVE_TANF\n+#define HAVE_TANF 1\n extern float tanf(float);\n #endif\n \n #ifndef HAVE_TANHF\n-#define HAVE_TANHF\n+#define HAVE_TANHF 1\n extern float tanhf(float);\n #endif\n \n #ifndef HAVE_TRUNC\n-#define HAVE_TRUNC\n+#define HAVE_TRUNC 1\n extern double trunc(double);\n #endif\n \n #ifndef HAVE_TRUNCF\n-#define HAVE_TRUNCF\n+#define HAVE_TRUNCF 1\n extern float truncf(float);\n #endif\n \n #ifndef HAVE_NEXTAFTERF\n-#define HAVE_NEXTAFTERF\n+#define HAVE_NEXTAFTERF 1\n extern float nextafterf(float, float);\n #endif\n \n #ifndef HAVE_POWF\n-#define HAVE_POWF\n+#define HAVE_POWF 1\n extern float powf(float, float);\n #endif\n \n #ifndef HAVE_ROUND\n-#define HAVE_ROUND\n+#define HAVE_ROUND 1\n extern double round(double);\n #endif\n \n #ifndef HAVE_ROUNDF\n-#define HAVE_ROUNDF\n+#define HAVE_ROUNDF 1\n extern float roundf(float);\n #endif\n \n \n /* log10l is needed on all platforms for decimal I/O */\n #ifndef HAVE_LOG10L\n-#define HAVE_LOG10L\n+#define HAVE_LOG10L 1\n extern long double log10l(long double);\n #endif\n \n \n /* complex math functions */\n \n #if !defined(HAVE_CABSF)\n-#define HAVE_CABSF\n+#define HAVE_CABSF 1\n extern float cabsf (float complex);\n #endif\n \n #if !defined(HAVE_CABS)\n-#define HAVE_CABS\n+#define HAVE_CABS 1\n extern double cabs (double complex);\n #endif\n \n #if !defined(HAVE_CABSL) && defined(HAVE_HYPOTL)\n-#define HAVE_CABSL\n+#define HAVE_CABSL 1\n extern long double cabsl (long double complex);\n #endif\n \n \n #if !defined(HAVE_CARGF)\n-#define HAVE_CARGF\n+#define HAVE_CARGF 1\n extern float cargf (float complex);\n #endif\n \n #if !defined(HAVE_CARG)\n-#define HAVE_CARG\n+#define HAVE_CARG 1\n extern double carg (double complex);\n #endif\n \n #if !defined(HAVE_CARGL) && defined(HAVE_ATAN2L)\n-#define HAVE_CARGL\n+#define HAVE_CARGL 1\n extern long double cargl (long double complex);\n #endif\n \n \n #if !defined(HAVE_CEXPF)\n-#define HAVE_CEXPF\n+#define HAVE_CEXPF 1\n extern float complex cexpf (float complex);\n #endif\n \n #if !defined(HAVE_CEXP)\n-#define HAVE_CEXP\n+#define HAVE_CEXP 1\n extern double complex cexp (double complex);\n #endif\n \n #if !defined(HAVE_CEXPL) && defined(HAVE_COSL) && defined(HAVE_SINL) && defined(EXPL)\n-#define HAVE_CEXPL\n+#define HAVE_CEXPL 1\n extern long double complex cexpl (long double complex);\n #endif\n \n \n #if !defined(HAVE_CLOGF)\n-#define HAVE_CLOGF\n+#define HAVE_CLOGF 1\n extern float complex clogf (float complex);\n #endif\n \n #if !defined(HAVE_CLOG)\n-#define HAVE_CLOG\n+#define HAVE_CLOG 1\n extern double complex clog (double complex);\n #endif\n \n #if !defined(HAVE_CLOGL) && defined(HAVE_LOGL) && defined(HAVE_CABSL) && defined(HAVE_CARGL)\n-#define HAVE_CLOGL\n+#define HAVE_CLOGL 1\n extern long double complex clogl (long double complex);\n #endif\n \n \n #if !defined(HAVE_CLOG10F)\n-#define HAVE_CLOG10F\n+#define HAVE_CLOG10F 1\n extern float complex clog10f (float complex);\n #endif\n \n #if !defined(HAVE_CLOG10)\n-#define HAVE_CLOG10\n+#define HAVE_CLOG10 1\n extern double complex clog10 (double complex);\n #endif\n \n #if !defined(HAVE_CLOG10L) && defined(HAVE_LOG10L) && defined(HAVE_CABSL) && defined(HAVE_CARGL)\n-#define HAVE_CLOG10L\n+#define HAVE_CLOG10L 1\n extern long double complex clog10l (long double complex);\n #endif\n \n \n #if !defined(HAVE_CPOWF)\n-#define HAVE_CPOWF\n+#define HAVE_CPOWF 1\n extern float complex cpowf (float complex, float complex);\n #endif\n \n #if !defined(HAVE_CPOW)\n-#define HAVE_CPOW\n+#define HAVE_CPOW 1\n extern double complex cpow (double complex, double complex);\n #endif\n \n #if !defined(HAVE_CPOWL) && defined(HAVE_CEXPL) && defined(HAVE_CLOGL)\n-#define HAVE_CPOWL\n+#define HAVE_CPOWL 1\n extern long double complex cpowl (long double complex, long double complex);\n #endif\n \n \n #if !defined(HAVE_CSQRTF)\n-#define HAVE_CSQRTF\n+#define HAVE_CSQRTF 1 \n extern float complex csqrtf (float complex);\n #endif\n \n #if !defined(HAVE_CSQRT)\n-#define HAVE_CSQRT\n+#define HAVE_CSQRT 1\n extern double complex csqrt (double complex);\n #endif\n \n #if !defined(HAVE_CSQRTL) && defined(HAVE_COPYSIGNL) && defined(HAVE_SQRTL) && defined(HAVE_FABSL) && defined(HAVE_HYPOTL)\n-#define HAVE_CSQRTL\n+#define HAVE_CSQRTL 1\n extern long double complex csqrtl (long double complex);\n #endif\n \n \n #if !defined(HAVE_CSINHF)\n-#define HAVE_CSINHF\n+#define HAVE_CSINHF 1\n extern float complex csinhf (float complex);\n #endif\n \n #if !defined(HAVE_CSINH)\n-#define HAVE_CSINH\n+#define HAVE_CSINH 1\n extern double complex csinh (double complex);\n #endif\n \n #if !defined(HAVE_CSINHL) && defined(HAVE_COSL) && defined(HAVE_COSHL) && defined(HAVE_SINL) && defined(HAVE_SINHL)\n-#define HAVE_CSINHL\n+#define HAVE_CSINHL 1\n extern long double complex csinhl (long double complex);\n #endif\n \n \n #if !defined(HAVE_CCOSHF)\n-#define HAVE_CCOSHF\n+#define HAVE_CCOSHF 1\n extern float complex ccoshf (float complex);\n #endif\n \n #if !defined(HAVE_CCOSH)\n-#define HAVE_CCOSH\n+#define HAVE_CCOSH 1\n extern double complex ccosh (double complex);\n #endif\n \n #if !defined(HAVE_CCOSHL) && defined(HAVE_COSL) && defined(HAVE_COSHL) && defined(HAVE_SINL) && defined(HAVE_SINHL)\n-#define HAVE_CCOSHL\n+#define HAVE_CCOSHL 1\n extern long double complex ccoshl (long double complex);\n #endif\n \n \n #if !defined(HAVE_CTANHF)\n-#define HAVE_CTANHF\n+#define HAVE_CTANHF 1\n extern float complex ctanhf (float complex);\n #endif\n \n #if !defined(HAVE_CTANH)\n-#define HAVE_CTANH\n+#define HAVE_CTANH 1\n extern double complex ctanh (double complex);\n #endif\n \n #if !defined(HAVE_CTANHL) && defined(HAVE_TANL) && defined(HAVE_TANHL)\n-#define HAVE_CTANHL\n+#define HAVE_CTANHL 1\n extern long double complex ctanhl (long double complex);\n #endif\n \n \n #if !defined(HAVE_CSINF)\n-#define HAVE_CSINF\n+#define HAVE_CSINF 1\n extern float complex csinf (float complex);\n #endif\n \n #if !defined(HAVE_CSIN)\n-#define HAVE_CSIN\n+#define HAVE_CSIN 1\n extern double complex csin (double complex);\n #endif\n \n #if !defined(HAVE_CSINL) && defined(HAVE_COSL) && defined(HAVE_COSHL) && defined(HAVE_SINL) && defined(HAVE_SINHL)\n-#define HAVE_CSINL\n+#define HAVE_CSINL 1\n extern long double complex csinl (long double complex);\n #endif\n \n \n #if !defined(HAVE_CCOSF)\n-#define HAVE_CCOSF\n+#define HAVE_CCOSF 1\n extern float complex ccosf (float complex);\n #endif\n \n #if !defined(HAVE_CCOS)\n-#define HAVE_CCOS\n+#define HAVE_CCOS 1\n extern double complex ccos (double complex);\n #endif\n \n #if !defined(HAVE_CCOSL) && defined(HAVE_COSL) && defined(HAVE_COSHL) && defined(HAVE_SINL) && defined(HAVE_SINHL)\n-#define HAVE_CCOSL\n+#define HAVE_CCOSL 1\n extern long double complex ccosl (long double complex);\n #endif\n \n \n #if !defined(HAVE_CTANF)\n-#define HAVE_CTANF\n+#define HAVE_CTANF 1\n extern float complex ctanf (float complex);\n #endif\n \n #if !defined(HAVE_CTAN)\n-#define HAVE_CTAN\n+#define HAVE_CTAN 1\n extern double complex ctan (double complex);\n #endif\n \n #if !defined(HAVE_CTANL) && defined(HAVE_TANL) && defined(HAVE_TANHL)\n-#define HAVE_CTANL\n+#define HAVE_CTANL 1\n extern long double complex ctanl (long double complex);\n #endif\n "}, {"sha": "5e93e4279b276593eafb8ff496ef2eeb96271f91", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "patch": "@@ -37,7 +37,7 @@ Boston, MA 02110-1301, USA.  */\n \n \n #ifndef HAVE_ACOSF\n-#define HAVE_ACOSF\n+#define HAVE_ACOSF 1\n float\n acosf(float x)\n {\n@@ -46,7 +46,7 @@ acosf(float x)\n #endif\n \n #ifndef HAVE_ASINF\n-#define HAVE_ASINF\n+#define HAVE_ASINF 1\n float\n asinf(float x)\n {\n@@ -55,7 +55,7 @@ asinf(float x)\n #endif\n \n #ifndef HAVE_ATAN2F\n-#define HAVE_ATAN2F\n+#define HAVE_ATAN2F 1\n float\n atan2f(float y, float x)\n {\n@@ -64,7 +64,7 @@ atan2f(float y, float x)\n #endif\n \n #ifndef HAVE_ATANF\n-#define HAVE_ATANF\n+#define HAVE_ATANF 1\n float\n atanf(float x)\n {\n@@ -73,7 +73,7 @@ atanf(float x)\n #endif\n \n #ifndef HAVE_CEILF\n-#define HAVE_CEILF\n+#define HAVE_CEILF 1\n float\n ceilf(float x)\n {\n@@ -82,7 +82,7 @@ ceilf(float x)\n #endif\n \n #ifndef HAVE_COPYSIGNF\n-#define HAVE_COPYSIGNF\n+#define HAVE_COPYSIGNF 1\n float\n copysignf(float x, float y)\n {\n@@ -91,7 +91,7 @@ copysignf(float x, float y)\n #endif\n \n #ifndef HAVE_COSF\n-#define HAVE_COSF\n+#define HAVE_COSF 1\n float\n cosf(float x)\n {\n@@ -100,7 +100,7 @@ cosf(float x)\n #endif\n \n #ifndef HAVE_COSHF\n-#define HAVE_COSHF\n+#define HAVE_COSHF 1\n float\n coshf(float x)\n {\n@@ -109,7 +109,7 @@ coshf(float x)\n #endif\n \n #ifndef HAVE_EXPF\n-#define HAVE_EXPF\n+#define HAVE_EXPF 1\n float\n expf(float x)\n {\n@@ -118,7 +118,7 @@ expf(float x)\n #endif\n \n #ifndef HAVE_FABSF\n-#define HAVE_FABSF\n+#define HAVE_FABSF 1\n float\n fabsf(float x)\n {\n@@ -127,7 +127,7 @@ fabsf(float x)\n #endif\n \n #ifndef HAVE_FLOORF\n-#define HAVE_FLOORF\n+#define HAVE_FLOORF 1\n float\n floorf(float x)\n {\n@@ -136,7 +136,7 @@ floorf(float x)\n #endif\n \n #ifndef HAVE_FREXPF\n-#define HAVE_FREXPF\n+#define HAVE_FREXPF 1\n float\n frexpf(float x, int *exp)\n {\n@@ -145,7 +145,7 @@ frexpf(float x, int *exp)\n #endif\n \n #ifndef HAVE_HYPOTF\n-#define HAVE_HYPOTF\n+#define HAVE_HYPOTF 1\n float\n hypotf(float x, float y)\n {\n@@ -154,7 +154,7 @@ hypotf(float x, float y)\n #endif\n \n #ifndef HAVE_LOGF\n-#define HAVE_LOGF\n+#define HAVE_LOGF 1\n float\n logf(float x)\n {\n@@ -163,7 +163,7 @@ logf(float x)\n #endif\n \n #ifndef HAVE_LOG10F\n-#define HAVE_LOG10F\n+#define HAVE_LOG10F 1\n float\n log10f(float x)\n {\n@@ -172,7 +172,7 @@ log10f(float x)\n #endif\n \n #ifndef HAVE_SCALBN\n-#define HAVE_SCALBN\n+#define HAVE_SCALBN 1\n double\n scalbn(double x, int y)\n {\n@@ -181,7 +181,7 @@ scalbn(double x, int y)\n #endif\n \n #ifndef HAVE_SCALBNF\n-#define HAVE_SCALBNF\n+#define HAVE_SCALBNF 1\n float\n scalbnf(float x, int y)\n {\n@@ -190,7 +190,7 @@ scalbnf(float x, int y)\n #endif\n \n #ifndef HAVE_SINF\n-#define HAVE_SINF\n+#define HAVE_SINF 1\n float\n sinf(float x)\n {\n@@ -199,7 +199,7 @@ sinf(float x)\n #endif\n \n #ifndef HAVE_SINHF\n-#define HAVE_SINHF\n+#define HAVE_SINHF 1\n float\n sinhf(float x)\n {\n@@ -208,7 +208,7 @@ sinhf(float x)\n #endif\n \n #ifndef HAVE_SQRTF\n-#define HAVE_SQRTF\n+#define HAVE_SQRTF 1\n float\n sqrtf(float x)\n {\n@@ -217,7 +217,7 @@ sqrtf(float x)\n #endif\n \n #ifndef HAVE_TANF\n-#define HAVE_TANF\n+#define HAVE_TANF 1\n float\n tanf(float x)\n {\n@@ -226,7 +226,7 @@ tanf(float x)\n #endif\n \n #ifndef HAVE_TANHF\n-#define HAVE_TANHF\n+#define HAVE_TANHF 1\n float\n tanhf(float x)\n {\n@@ -235,7 +235,7 @@ tanhf(float x)\n #endif\n \n #ifndef HAVE_TRUNC\n-#define HAVE_TRUNC\n+#define HAVE_TRUNC 1\n double\n trunc(double x)\n {\n@@ -250,7 +250,7 @@ trunc(double x)\n #endif\n \n #ifndef HAVE_TRUNCF\n-#define HAVE_TRUNCF\n+#define HAVE_TRUNCF 1\n float\n truncf(float x)\n {\n@@ -259,7 +259,7 @@ truncf(float x)\n #endif\n \n #ifndef HAVE_NEXTAFTERF\n-#define HAVE_NEXTAFTERF\n+#define HAVE_NEXTAFTERF 1\n /* This is a portable implementation of nextafterf that is intended to be\n    independent of the floating point format or its in memory representation.\n    This implementation works correctly with denormalized values.  */\n@@ -323,7 +323,7 @@ nextafterf(float x, float y)\n \n \n #ifndef HAVE_POWF\n-#define HAVE_POWF\n+#define HAVE_POWF 1\n float\n powf(float x, float y)\n {\n@@ -336,7 +336,7 @@ powf(float x, float y)\n /* Algorithm by Steven G. Kargl.  */\n \n #ifndef HAVE_ROUND\n-#define HAVE_ROUND\n+#define HAVE_ROUND 1\n /* Round to nearest integral value.  If the argument is halfway between two\n    integral values then round away from zero.  */\n \n@@ -365,7 +365,7 @@ round(double x)\n #endif\n \n #ifndef HAVE_ROUNDF\n-#define HAVE_ROUNDF\n+#define HAVE_ROUNDF 1\n /* Round to nearest integral value.  If the argument is halfway between two\n    integral values then round away from zero.  */\n \n@@ -394,7 +394,7 @@ roundf(float x)\n #endif\n \n #ifndef HAVE_LOG10L\n-#define HAVE_LOG10L\n+#define HAVE_LOG10L 1\n /* log10 function for long double variables. The version provided here\n    reduces the argument until it fits into a double, then use log10.  */\n long double\n@@ -434,7 +434,7 @@ log10l(long double x)\n \n \n #if !defined(HAVE_CABSF)\n-#define HAVE_CABSF\n+#define HAVE_CABSF 1\n float\n cabsf (float complex z)\n {\n@@ -443,7 +443,7 @@ cabsf (float complex z)\n #endif\n \n #if !defined(HAVE_CABS)\n-#define HAVE_CABS\n+#define HAVE_CABS 1\n double\n cabs (double complex z)\n {\n@@ -452,7 +452,7 @@ cabs (double complex z)\n #endif\n \n #if !defined(HAVE_CABSL) && defined(HAVE_HYPOTL)\n-#define HAVE_CABSL\n+#define HAVE_CABSL 1\n long double\n cabsl (long double complex z)\n {\n@@ -462,7 +462,7 @@ cabsl (long double complex z)\n \n \n #if !defined(HAVE_CARGF)\n-#define HAVE_CARGF\n+#define HAVE_CARGF 1\n float\n cargf (float complex z)\n {\n@@ -471,7 +471,7 @@ cargf (float complex z)\n #endif\n \n #if !defined(HAVE_CARG)\n-#define HAVE_CARG\n+#define HAVE_CARG 1\n double\n carg (double complex z)\n {\n@@ -480,7 +480,7 @@ carg (double complex z)\n #endif\n \n #if !defined(HAVE_CARGL) && defined(HAVE_ATAN2L)\n-#define HAVE_CARGL\n+#define HAVE_CARGL 1\n long double\n cargl (long double complex z)\n {\n@@ -491,7 +491,7 @@ cargl (long double complex z)\n \n /* exp(z) = exp(a)*(cos(b) + i sin(b))  */\n #if !defined(HAVE_CEXPF)\n-#define HAVE_CEXPF\n+#define HAVE_CEXPF 1\n float complex\n cexpf (float complex z)\n {\n@@ -506,7 +506,7 @@ cexpf (float complex z)\n #endif\n \n #if !defined(HAVE_CEXP)\n-#define HAVE_CEXP\n+#define HAVE_CEXP 1\n double complex\n cexp (double complex z)\n {\n@@ -521,7 +521,7 @@ cexp (double complex z)\n #endif\n \n #if !defined(HAVE_CEXPL) && defined(HAVE_COSL) && defined(HAVE_SINL) && defined(EXPL)\n-#define HAVE_CEXPL\n+#define HAVE_CEXPL 1\n long double complex\n cexpl (long double complex z)\n {\n@@ -538,7 +538,7 @@ cexpl (long double complex z)\n \n /* log(z) = log (cabs(z)) + i*carg(z)  */\n #if !defined(HAVE_CLOGF)\n-#define HAVE_CLOGF\n+#define HAVE_CLOGF 1\n float complex\n clogf (float complex z)\n {\n@@ -550,7 +550,7 @@ clogf (float complex z)\n #endif\n \n #if !defined(HAVE_CLOG)\n-#define HAVE_CLOG\n+#define HAVE_CLOG 1\n double complex\n clog (double complex z)\n {\n@@ -562,7 +562,7 @@ clog (double complex z)\n #endif\n \n #if !defined(HAVE_CLOGL) && defined(HAVE_LOGL) && defined(HAVE_CABSL) && defined(HAVE_CARGL)\n-#define HAVE_CLOGL\n+#define HAVE_CLOGL 1\n long double complex\n clogl (long double complex z)\n {\n@@ -576,7 +576,7 @@ clogl (long double complex z)\n \n /* log10(z) = log10 (cabs(z)) + i*carg(z)  */\n #if !defined(HAVE_CLOG10F)\n-#define HAVE_CLOG10F\n+#define HAVE_CLOG10F 1\n float complex\n clog10f (float complex z)\n {\n@@ -588,7 +588,7 @@ clog10f (float complex z)\n #endif\n \n #if !defined(HAVE_CLOG10)\n-#define HAVE_CLOG10\n+#define HAVE_CLOG10 1\n double complex\n clog10 (double complex z)\n {\n@@ -600,7 +600,7 @@ clog10 (double complex z)\n #endif\n \n #if !defined(HAVE_CLOG10L) && defined(HAVE_LOG10L) && defined(HAVE_CABSL) && defined(HAVE_CARGL)\n-#define HAVE_CLOG10L\n+#define HAVE_CLOG10L 1\n long double complex\n clog10l (long double complex z)\n {\n@@ -614,7 +614,7 @@ clog10l (long double complex z)\n \n /* pow(base, power) = cexp (power * clog (base))  */\n #if !defined(HAVE_CPOWF)\n-#define HAVE_CPOWF\n+#define HAVE_CPOWF 1\n float complex\n cpowf (float complex base, float complex power)\n {\n@@ -623,7 +623,7 @@ cpowf (float complex base, float complex power)\n #endif\n \n #if !defined(HAVE_CPOW)\n-#define HAVE_CPOW\n+#define HAVE_CPOW 1\n double complex\n cpow (double complex base, double complex power)\n {\n@@ -632,7 +632,7 @@ cpow (double complex base, double complex power)\n #endif\n \n #if !defined(HAVE_CPOWL) && defined(HAVE_CEXPL) && defined(HAVE_CLOGL)\n-#define HAVE_CPOWL\n+#define HAVE_CPOWL 1\n long double complex\n cpowl (long double complex base, long double complex power)\n {\n@@ -643,7 +643,7 @@ cpowl (long double complex base, long double complex power)\n \n /* sqrt(z).  Algorithm pulled from glibc.  */\n #if !defined(HAVE_CSQRTF)\n-#define HAVE_CSQRTF\n+#define HAVE_CSQRTF 1\n float complex\n csqrtf (float complex z)\n {\n@@ -696,7 +696,7 @@ csqrtf (float complex z)\n #endif\n \n #if !defined(HAVE_CSQRT)\n-#define HAVE_CSQRT\n+#define HAVE_CSQRT 1\n double complex\n csqrt (double complex z)\n {\n@@ -749,7 +749,7 @@ csqrt (double complex z)\n #endif\n \n #if !defined(HAVE_CSQRTL) && defined(HAVE_COPYSIGNL) && defined(HAVE_SQRTL) && defined(HAVE_FABSL) && defined(HAVE_HYPOTL)\n-#define HAVE_CSQRTL\n+#define HAVE_CSQRTL 1\n long double complex\n csqrtl (long double complex z)\n {\n@@ -804,7 +804,7 @@ csqrtl (long double complex z)\n \n /* sinh(a + i b) = sinh(a) cos(b) + i cosh(a) sin(b)  */\n #if !defined(HAVE_CSINHF)\n-#define HAVE_CSINHF\n+#define HAVE_CSINHF 1\n float complex\n csinhf (float complex a)\n {\n@@ -819,7 +819,7 @@ csinhf (float complex a)\n #endif\n \n #if !defined(HAVE_CSINH)\n-#define HAVE_CSINH\n+#define HAVE_CSINH 1\n double complex\n csinh (double complex a)\n {\n@@ -834,7 +834,7 @@ csinh (double complex a)\n #endif\n \n #if !defined(HAVE_CSINHL) && defined(HAVE_COSL) && defined(HAVE_COSHL) && defined(HAVE_SINL) && defined(HAVE_SINHL)\n-#define HAVE_CSINHL\n+#define HAVE_CSINHL 1\n long double complex\n csinhl (long double complex a)\n {\n@@ -851,7 +851,7 @@ csinhl (long double complex a)\n \n /* cosh(a + i b) = cosh(a) cos(b) - i sinh(a) sin(b)  */\n #if !defined(HAVE_CCOSHF)\n-#define HAVE_CCOSHF\n+#define HAVE_CCOSHF 1\n float complex\n ccoshf (float complex a)\n {\n@@ -866,7 +866,7 @@ ccoshf (float complex a)\n #endif\n \n #if !defined(HAVE_CCOSH)\n-#define HAVE_CCOSH\n+#define HAVE_CCOSH 1\n double complex\n ccosh (double complex a)\n {\n@@ -881,7 +881,7 @@ ccosh (double complex a)\n #endif\n \n #if !defined(HAVE_CCOSHL) && defined(HAVE_COSL) && defined(HAVE_COSHL) && defined(HAVE_SINL) && defined(HAVE_SINHL)\n-#define HAVE_CCOSHL\n+#define HAVE_CCOSHL 1\n long double complex\n ccoshl (long double complex a)\n {\n@@ -898,7 +898,7 @@ ccoshl (long double complex a)\n \n /* tanh(a + i b) = (tanh(a) + i tan(b)) / (1 - i tanh(a) tan(b))  */\n #if !defined(HAVE_CTANHF)\n-#define HAVE_CTANHF\n+#define HAVE_CTANHF 1\n float complex\n ctanhf (float complex a)\n {\n@@ -915,7 +915,7 @@ ctanhf (float complex a)\n #endif\n \n #if !defined(HAVE_CTANH)\n-#define HAVE_CTANH\n+#define HAVE_CTANH 1\n double complex\n ctanh (double complex a)\n {\n@@ -932,7 +932,7 @@ ctanh (double complex a)\n #endif\n \n #if !defined(HAVE_CTANHL) && defined(HAVE_TANL) && defined(HAVE_TANHL)\n-#define HAVE_CTANHL\n+#define HAVE_CTANHL 1\n long double complex\n ctanhl (long double complex a)\n {\n@@ -951,7 +951,7 @@ ctanhl (long double complex a)\n \n /* sin(a + i b) = sin(a) cosh(b) + i cos(a) sinh(b)  */\n #if !defined(HAVE_CSINF)\n-#define HAVE_CSINF\n+#define HAVE_CSINF 1\n float complex\n csinf (float complex a)\n {\n@@ -966,7 +966,7 @@ csinf (float complex a)\n #endif\n \n #if !defined(HAVE_CSIN)\n-#define HAVE_CSIN\n+#define HAVE_CSIN 1\n double complex\n csin (double complex a)\n {\n@@ -981,7 +981,7 @@ csin (double complex a)\n #endif\n \n #if !defined(HAVE_CSINL) && defined(HAVE_COSL) && defined(HAVE_COSHL) && defined(HAVE_SINL) && defined(HAVE_SINHL)\n-#define HAVE_CSINL\n+#define HAVE_CSINL 1\n long double complex\n csinl (long double complex a)\n {\n@@ -998,7 +998,7 @@ csinl (long double complex a)\n \n /* cos(a + i b) = cos(a) cosh(b) - i sin(a) sinh(b)  */\n #if !defined(HAVE_CCOSF)\n-#define HAVE_CCOSF\n+#define HAVE_CCOSF 1\n float complex\n ccosf (float complex a)\n {\n@@ -1013,7 +1013,7 @@ ccosf (float complex a)\n #endif\n \n #if !defined(HAVE_CCOS)\n-#define HAVE_CCOS\n+#define HAVE_CCOS 1\n double complex\n ccos (double complex a)\n {\n@@ -1028,7 +1028,7 @@ ccos (double complex a)\n #endif\n \n #if !defined(HAVE_CCOSL) && defined(HAVE_COSL) && defined(HAVE_COSHL) && defined(HAVE_SINL) && defined(HAVE_SINHL)\n-#define HAVE_CCOSL\n+#define HAVE_CCOSL 1\n long double complex\n ccosl (long double complex a)\n {\n@@ -1045,7 +1045,7 @@ ccosl (long double complex a)\n \n /* tan(a + i b) = (tan(a) + i tanh(b)) / (1 - i tan(a) tanh(b))  */\n #if !defined(HAVE_CTANF)\n-#define HAVE_CTANF\n+#define HAVE_CTANF 1\n float complex\n ctanf (float complex a)\n {\n@@ -1062,7 +1062,7 @@ ctanf (float complex a)\n #endif\n \n #if !defined(HAVE_CTAN)\n-#define HAVE_CTAN\n+#define HAVE_CTAN 1\n double complex\n ctan (double complex a)\n {\n@@ -1079,7 +1079,7 @@ ctan (double complex a)\n #endif\n \n #if !defined(HAVE_CTANL) && defined(HAVE_TANL) && defined(HAVE_TANHL)\n-#define HAVE_CTANL\n+#define HAVE_CTANL 1\n long double complex\n ctanl (long double complex a)\n {"}, {"sha": "595ca12a7de94b1f56ba77ec2f4c6298c5bdca4a", "filename": "libgfortran/intrinsics/getXid.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/libgfortran%2Fintrinsics%2FgetXid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/libgfortran%2Fintrinsics%2FgetXid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2FgetXid.c?ref=2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "patch": "@@ -39,7 +39,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"libgfortran.h\"\n \n #ifdef __MINGW32__\n-#define HAVE_GETPID\n+#define HAVE_GETPID 1\n #include <process.h>\n #endif\n "}, {"sha": "3a482fa2f1c6a92b96c269720e4a9159644a61d7", "filename": "libgfortran/intrinsics/sleep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/libgfortran%2Fintrinsics%2Fsleep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cdc88b64d540cd3ab1c5d1b89dd828abf373068/libgfortran%2Fintrinsics%2Fsleep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsleep.c?ref=2cdc88b64d540cd3ab1c5d1b89dd828abf373068", "patch": "@@ -43,7 +43,7 @@ Boston, MA 02110-1301, USA.  */\n # include <windows.h>\n # undef sleep\n # define sleep(x) Sleep(1000*(x))\n-# define HAVE_SLEEP\n+# define HAVE_SLEEP 1\n #endif\n \n /* SUBROUTINE SLEEP(SECONDS)"}]}