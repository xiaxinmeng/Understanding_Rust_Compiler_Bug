{"sha": "0b470bae0c63add191f3a66c2538a9d16c0f52e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0NzBiYWUwYzYzYWRkMTkxZjNhNjZjMjUzOGE5ZDE2YzBmNTJlMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-01T12:51:12Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-01T12:51:12Z"}, "message": "Change use to type-based pool allocator in ira-build.c.\n\n\t* ira-build.c (initiate_allocnos): Use new type-based pool allocator.\n\t(ira_create_object): Likewise.\n\t(ira_create_allocno): Likewise.\n\t(ira_create_live_range): Likewise.\n\t(copy_live_range): Likewise.\n\t(ira_finish_live_range): Likewise.\n\t(ira_free_allocno_costs): Likewise.\n\t(finish_allocno): Likewise.\n\t(finish_allocnos): Likewise.\n\t(initiate_prefs): Likewise.\n\t(ira_create_pref): Likewise.\n\t(finish_pref): Likewise.\n\t(finish_prefs): Likewise.\n\t(initiate_copies): Likewise.\n\t(ira_create_copy): Likewise.\n\t(finish_copy): Likewise.\n\t(finish_copies): Likewise.\n\t(finish_prefs): Likewise.\n\nFrom-SVN: r223972", "tree": {"sha": "837551e7ee7bf020b381efbfd309f4004847aa2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/837551e7ee7bf020b381efbfd309f4004847aa2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b470bae0c63add191f3a66c2538a9d16c0f52e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b470bae0c63add191f3a66c2538a9d16c0f52e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b470bae0c63add191f3a66c2538a9d16c0f52e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b470bae0c63add191f3a66c2538a9d16c0f52e0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2651e637cee3e4acbeb8070cc91166d68fd767e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2651e637cee3e4acbeb8070cc91166d68fd767e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2651e637cee3e4acbeb8070cc91166d68fd767e8"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "0196e263f53b11b3ba444b4661ffc5ccebf82cac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b470bae0c63add191f3a66c2538a9d16c0f52e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b470bae0c63add191f3a66c2538a9d16c0f52e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b470bae0c63add191f3a66c2538a9d16c0f52e0", "patch": "@@ -1,3 +1,24 @@\n+2015-06-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* ira-build.c (initiate_allocnos): Use new type-based pool allocator.\n+\t(ira_create_object): Likewise.\n+\t(ira_create_allocno): Likewise.\n+\t(ira_create_live_range): Likewise.\n+\t(copy_live_range): Likewise.\n+\t(ira_finish_live_range): Likewise.\n+\t(ira_free_allocno_costs): Likewise.\n+\t(finish_allocno): Likewise.\n+\t(finish_allocnos): Likewise.\n+\t(initiate_prefs): Likewise.\n+\t(ira_create_pref): Likewise.\n+\t(finish_pref): Likewise.\n+\t(finish_prefs): Likewise.\n+\t(initiate_copies): Likewise.\n+\t(ira_create_copy): Likewise.\n+\t(finish_copy): Likewise.\n+\t(finish_copies): Likewise.\n+\t(finish_prefs): Likewise.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-cp.c (ipcp_value::add_source): Use new type-based pool allocator."}, {"sha": "534d0bc257e8167b8c3c2d3b6146a0f85f6c00e3", "filename": "gcc/ira-build.c", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b470bae0c63add191f3a66c2538a9d16c0f52e0/gcc%2Fira-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b470bae0c63add191f3a66c2538a9d16c0f52e0/gcc%2Fira-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-build.c?ref=0b470bae0c63add191f3a66c2538a9d16c0f52e0", "patch": "@@ -428,7 +428,9 @@ rebuild_regno_allocno_maps (void)\n \f\n \n /* Pools for allocnos, allocno live ranges and objects.  */\n-static alloc_pool allocno_pool, live_range_pool, object_pool;\n+static pool_allocator<live_range> live_range_pool (\"live ranges\", 100);\n+static pool_allocator<ira_allocno> allocno_pool (\"allocnos\", 100);\n+static pool_allocator<ira_object> object_pool (\"objects\", 100);\n \n /* Vec containing references to all created allocnos.  It is a\n    container of array allocnos.  */\n@@ -442,13 +444,6 @@ static vec<ira_object_t> ira_object_id_map_vec;\n static void\n initiate_allocnos (void)\n {\n-  live_range_pool\n-    = create_alloc_pool (\"live ranges\",\n-\t\t\t sizeof (struct live_range), 100);\n-  allocno_pool\n-    = create_alloc_pool (\"allocnos\", sizeof (struct ira_allocno), 100);\n-  object_pool\n-    = create_alloc_pool (\"objects\", sizeof (struct ira_object), 100);\n   allocno_vec.create (max_reg_num () * 2);\n   ira_allocnos = NULL;\n   ira_allocnos_num = 0;\n@@ -466,7 +461,7 @@ static ira_object_t\n ira_create_object (ira_allocno_t a, int subword)\n {\n   enum reg_class aclass = ALLOCNO_CLASS (a);\n-  ira_object_t obj = (ira_object_t) pool_alloc (object_pool);\n+  ira_object_t obj = object_pool.allocate ();\n \n   OBJECT_ALLOCNO (obj) = a;\n   OBJECT_SUBWORD (obj) = subword;\n@@ -501,7 +496,7 @@ ira_create_allocno (int regno, bool cap_p,\n {\n   ira_allocno_t a;\n \n-  a = (ira_allocno_t) pool_alloc (allocno_pool);\n+  a = allocno_pool.allocate ();\n   ALLOCNO_REGNO (a) = regno;\n   ALLOCNO_LOOP_TREE_NODE (a) = loop_tree_node;\n   if (! cap_p)\n@@ -943,7 +938,7 @@ ira_create_live_range (ira_object_t obj, int start, int finish,\n {\n   live_range_t p;\n \n-  p = (live_range_t) pool_alloc (live_range_pool);\n+  p = live_range_pool.allocate ();\n   p->object = obj;\n   p->start = start;\n   p->finish = finish;\n@@ -968,7 +963,7 @@ copy_live_range (live_range_t r)\n {\n   live_range_t p;\n \n-  p = (live_range_t) pool_alloc (live_range_pool);\n+  p = live_range_pool.allocate ();\n   *p = *r;\n   return p;\n }\n@@ -1089,7 +1084,7 @@ ira_live_ranges_intersect_p (live_range_t r1, live_range_t r2)\n void\n ira_finish_live_range (live_range_t r)\n {\n-  pool_free (live_range_pool, r);\n+  live_range_pool.remove (r);\n }\n \n /* Free list of allocno live ranges starting with R.  */\n@@ -1136,7 +1131,7 @@ ira_free_allocno_costs (ira_allocno_t a)\n       ira_object_id_map[OBJECT_CONFLICT_ID (obj)] = NULL;\n       if (OBJECT_CONFLICT_ARRAY (obj) != NULL)\n \tira_free (OBJECT_CONFLICT_ARRAY (obj));\n-      pool_free (object_pool, obj);\n+      object_pool.remove (obj);\n     }\n \n   ira_allocnos[ALLOCNO_NUM (a)] = NULL;\n@@ -1160,7 +1155,7 @@ static void\n finish_allocno (ira_allocno_t a)\n {\n   ira_free_allocno_costs (a);\n-  pool_free (allocno_pool, a);\n+  allocno_pool.remove (a);\n }\n \n /* Free the memory allocated for all allocnos.  */\n@@ -1175,15 +1170,15 @@ finish_allocnos (void)\n   ira_free (ira_regno_allocno_map);\n   ira_object_id_map_vec.release ();\n   allocno_vec.release ();\n-  free_alloc_pool (allocno_pool);\n-  free_alloc_pool (object_pool);\n-  free_alloc_pool (live_range_pool);\n+  allocno_pool.release ();\n+  object_pool.release ();\n+  live_range_pool.release ();\n }\n \n \f\n \n /* Pools for allocno preferences.  */\n-static alloc_pool pref_pool;\n+static pool_allocator <ira_allocno_pref> pref_pool (\"prefs\", 100);\n \n /* Vec containing references to all created preferences.  It is a\n    container of array ira_prefs.  */\n@@ -1193,8 +1188,6 @@ static vec<ira_pref_t> pref_vec;\n static void\n initiate_prefs (void)\n {\n-  pref_pool\n-    = create_alloc_pool (\"prefs\", sizeof (struct ira_allocno_pref), 100);\n   pref_vec.create (get_max_uid ());\n   ira_prefs = NULL;\n   ira_prefs_num = 0;\n@@ -1218,7 +1211,7 @@ ira_create_pref (ira_allocno_t a, int hard_regno, int freq)\n {\n   ira_pref_t pref;\n \n-  pref = (ira_pref_t) pool_alloc (pref_pool);\n+  pref = pref_pool.allocate ();\n   pref->num = ira_prefs_num;\n   pref->allocno = a;\n   pref->hard_regno = hard_regno;\n@@ -1316,7 +1309,7 @@ static void\n finish_pref (ira_pref_t pref)\n {\n   ira_prefs[pref->num] = NULL;\n-  pool_free (pref_pool, pref);\n+  pref_pool.remove (pref);\n }\n \n /* Remove PREF from the list of allocno prefs and free memory for\n@@ -1366,13 +1359,13 @@ finish_prefs (void)\n   FOR_EACH_PREF (pref, pi)\n     finish_pref (pref);\n   pref_vec.release ();\n-  free_alloc_pool (pref_pool);\n+  pref_pool.release ();\n }\n \n \f\n \n /* Pools for copies.  */\n-static alloc_pool copy_pool;\n+static pool_allocator<ira_allocno_copy> copy_pool (\"copies\", 100);\n \n /* Vec containing references to all created copies.  It is a\n    container of array ira_copies.  */\n@@ -1382,8 +1375,6 @@ static vec<ira_copy_t> copy_vec;\n static void\n initiate_copies (void)\n {\n-  copy_pool\n-    = create_alloc_pool (\"copies\", sizeof (struct ira_allocno_copy), 100);\n   copy_vec.create (get_max_uid ());\n   ira_copies = NULL;\n   ira_copies_num = 0;\n@@ -1428,7 +1419,7 @@ ira_create_copy (ira_allocno_t first, ira_allocno_t second, int freq,\n {\n   ira_copy_t cp;\n \n-  cp = (ira_copy_t) pool_alloc (copy_pool);\n+  cp = copy_pool.allocate ();\n   cp->num = ira_copies_num;\n   cp->first = first;\n   cp->second = second;\n@@ -1613,7 +1604,7 @@ ira_debug_allocno_copies (ira_allocno_t a)\n static void\n finish_copy (ira_copy_t cp)\n {\n-  pool_free (copy_pool, cp);\n+  copy_pool.remove (cp);\n }\n \n \n@@ -1627,7 +1618,7 @@ finish_copies (void)\n   FOR_EACH_COPY (cp, ci)\n     finish_copy (cp);\n   copy_vec.release ();\n-  free_alloc_pool (copy_pool);\n+  copy_pool.release ();\n }\n \n \f"}]}