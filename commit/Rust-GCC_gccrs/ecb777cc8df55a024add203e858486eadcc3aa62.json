{"sha": "ecb777cc8df55a024add203e858486eadcc3aa62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNiNzc3Y2M4ZGY1NWEwMjRhZGQyMDNlODU4NDg2ZWFkY2MzYWE2Mg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-15T19:47:03Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-17T14:46:42Z"}, "message": "Add building blocks for Dynamic object types\n\nThis is the stub implementation for dynamic object types within the type\nsystem. More work is needed to actually support dynamic trait objects.\n\nThe next change requires us to support type coercions in for arguments\nto functions such as a fat-reference to a type being coerced into this\ndynamic trait object for dynamic dispatch.\n\nAddresses: #197", "tree": {"sha": "950da3dd68add54317bea943cbea44e7f7e5a768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/950da3dd68add54317bea943cbea44e7f7e5a768"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecb777cc8df55a024add203e858486eadcc3aa62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb777cc8df55a024add203e858486eadcc3aa62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecb777cc8df55a024add203e858486eadcc3aa62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb777cc8df55a024add203e858486eadcc3aa62/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "384cc64dab40edca1f59f369e162df89aa1e91f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/384cc64dab40edca1f59f369e162df89aa1e91f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/384cc64dab40edca1f59f369e162df89aa1e91f8"}], "stats": {"total": 429, "additions": 394, "deletions": 35}, "files": [{"sha": "7d2f32de0ca0d7334a383f6367efd6439a53e6fb", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -610,6 +610,8 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     translated = ctx->get_backend ()->unit_type ();\n   }\n \n+  void visit (TyTy::DynamicObjectType &) override { gcc_unreachable (); }\n+\n private:\n   TyTyResolveCompile (Context *ctx) : ctx (ctx), translated (nullptr) {}\n "}, {"sha": "40b297c59f994a7cfbbc07ab2a3d715cb2b2c305", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -237,6 +237,8 @@ class TyTyCompile : public TyTy::TyVisitor\n     translated = backend->unit_type ();\n   }\n \n+  void visit (TyTy::DynamicObjectType &) override { gcc_unreachable (); }\n+\n private:\n   TyTyCompile (::Backend *backend)\n     : backend (backend), translated (nullptr),"}, {"sha": "14664340d2b57c297ab1b734dd3dcefc80856140", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -191,6 +191,8 @@ class ConstFoldType : public TyTy::TyVisitor\n \n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n \n+  void visit (TyTy::DynamicObjectType &) override { gcc_unreachable (); }\n+\n private:\n   ConstFoldType (::Backend *backend)\n     : backend (backend), translated (backend->error_type ())"}, {"sha": "c6605218bfa7f538e9b25856253657873e59b464", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -221,5 +221,21 @@ TypeCheckType::resolve_segments (\n   gcc_unreachable ();\n }\n \n+void\n+TypeCheckType::visit (HIR::TraitObjectTypeOneBound &type)\n+{\n+  std::vector<TyTy::TypeBoundPredicate> specified_bounds;\n+\n+  HIR::TraitBound &trait_bound = type.get_trait_bound ();\n+  TraitReference *trait = resolve_trait_path (trait_bound.get_path ());\n+  TyTy::TypeBoundPredicate predicate (trait->get_mappings ().get_defid (),\n+\t\t\t\t      trait_bound.get_locus ());\n+\n+  specified_bounds.push_back (std::move (predicate));\n+\n+  translated = new TyTy::DynamicObjectType (type.get_mappings ().get_hirid (),\n+\t\t\t\t\t    std::move (specified_bounds));\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "1f97a4ec8725643f0354bf211e18f6de1b41dcc0", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -146,6 +146,8 @@ class TypeCheckType : public TypeCheckBase\n \t\t\t\t      TyTy::InferType::InferTypeKind::GENERAL);\n   }\n \n+  void visit (HIR::TraitObjectTypeOneBound &type) override;\n+\n private:\n   TypeCheckType (std::vector<TyTy::SubstitutionParamMapping> *subst_mappings)\n     : TypeCheckBase (), subst_mappings (subst_mappings), translated (nullptr)"}, {"sha": "13496ff22b832249f756959b3df24ab3d5bafa64", "filename": "gcc/rust/typecheck/rust-substitution-mapper.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-substitution-mapper.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -137,6 +137,7 @@ class SubstMapper : public TyTy::TyVisitor\n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n+  void visit (TyTy::DynamicObjectType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapper (HirId ref, HIR::GenericArgs *generics, Location locus)\n@@ -230,6 +231,7 @@ class SubstMapperInternal : public TyTy::TyVisitor\n   void visit (TyTy::CharType &) override { gcc_unreachable (); }\n   void visit (TyTy::StrType &) override { gcc_unreachable (); }\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n+  void visit (TyTy::DynamicObjectType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapperInternal (HirId ref, TyTy::SubstitutionArgumentMappings &mappings)\n@@ -288,6 +290,7 @@ class SubstMapperFromExisting : public TyTy::TyVisitor\n   void visit (TyTy::NeverType &) override { gcc_unreachable (); }\n   void visit (TyTy::PlaceholderType &) override { gcc_unreachable (); }\n   void visit (TyTy::ProjectionType &) override { gcc_unreachable (); }\n+  void visit (TyTy::DynamicObjectType &) override { gcc_unreachable (); }\n \n private:\n   SubstMapperFromExisting (TyTy::BaseType *concrete, TyTy::BaseType *receiver)\n@@ -339,6 +342,7 @@ class GetUsedSubstArgs : public TyTy::TyVisitor\n   void visit (TyTy::NeverType &) override {}\n   void visit (TyTy::PlaceholderType &) override {}\n   void visit (TyTy::ProjectionType &) override {}\n+  void visit (TyTy::DynamicObjectType &) override {}\n \n private:\n   GetUsedSubstArgs () : args (TyTy::SubstitutionArgumentMappings::error ()) {}"}, {"sha": "906110ad89540d48834a5e7a59e3a0e31d9a3a48", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -39,24 +39,25 @@ class TypeCheckCallExpr : private TyVisitor\n     return checker.resolved;\n   }\n \n-  void visit (InferType &type) override { gcc_unreachable (); }\n-  void visit (TupleType &type) override { gcc_unreachable (); }\n-  void visit (ArrayType &type) override { gcc_unreachable (); }\n-  void visit (BoolType &type) override { gcc_unreachable (); }\n-  void visit (IntType &type) override { gcc_unreachable (); }\n-  void visit (UintType &type) override { gcc_unreachable (); }\n-  void visit (FloatType &type) override { gcc_unreachable (); }\n-  void visit (USizeType &type) override { gcc_unreachable (); }\n-  void visit (ISizeType &type) override { gcc_unreachable (); }\n-  void visit (ErrorType &type) override { gcc_unreachable (); }\n-  void visit (CharType &type) override { gcc_unreachable (); }\n-  void visit (ReferenceType &type) override { gcc_unreachable (); }\n-  void visit (PointerType &type) override { gcc_unreachable (); }\n+  void visit (InferType &) override { gcc_unreachable (); }\n+  void visit (TupleType &) override { gcc_unreachable (); }\n+  void visit (ArrayType &) override { gcc_unreachable (); }\n+  void visit (BoolType &) override { gcc_unreachable (); }\n+  void visit (IntType &) override { gcc_unreachable (); }\n+  void visit (UintType &) override { gcc_unreachable (); }\n+  void visit (FloatType &) override { gcc_unreachable (); }\n+  void visit (USizeType &) override { gcc_unreachable (); }\n+  void visit (ISizeType &) override { gcc_unreachable (); }\n+  void visit (ErrorType &) override { gcc_unreachable (); }\n+  void visit (CharType &) override { gcc_unreachable (); }\n+  void visit (ReferenceType &) override { gcc_unreachable (); }\n+  void visit (PointerType &) override { gcc_unreachable (); }\n   void visit (ParamType &) override { gcc_unreachable (); }\n   void visit (StrType &) override { gcc_unreachable (); }\n   void visit (NeverType &) override { gcc_unreachable (); }\n   void visit (PlaceholderType &) override { gcc_unreachable (); }\n   void visit (ProjectionType &) override { gcc_unreachable (); }\n+  void visit (DynamicObjectType &) override { gcc_unreachable (); }\n \n   // tuple-structs\n   void visit (ADTType &type) override;\n@@ -89,25 +90,26 @@ class TypeCheckMethodCallExpr : private TyVisitor\n     return checker.resolved;\n   }\n \n-  void visit (InferType &type) override { gcc_unreachable (); }\n-  void visit (TupleType &type) override { gcc_unreachable (); }\n-  void visit (ArrayType &type) override { gcc_unreachable (); }\n-  void visit (BoolType &type) override { gcc_unreachable (); }\n-  void visit (IntType &type) override { gcc_unreachable (); }\n-  void visit (UintType &type) override { gcc_unreachable (); }\n-  void visit (FloatType &type) override { gcc_unreachable (); }\n-  void visit (USizeType &type) override { gcc_unreachable (); }\n-  void visit (ISizeType &type) override { gcc_unreachable (); }\n-  void visit (ErrorType &type) override { gcc_unreachable (); }\n-  void visit (ADTType &type) override { gcc_unreachable (); };\n-  void visit (CharType &type) override { gcc_unreachable (); }\n-  void visit (ReferenceType &type) override { gcc_unreachable (); }\n-  void visit (PointerType &type) override { gcc_unreachable (); }\n+  void visit (InferType &) override { gcc_unreachable (); }\n+  void visit (TupleType &) override { gcc_unreachable (); }\n+  void visit (ArrayType &) override { gcc_unreachable (); }\n+  void visit (BoolType &) override { gcc_unreachable (); }\n+  void visit (IntType &) override { gcc_unreachable (); }\n+  void visit (UintType &) override { gcc_unreachable (); }\n+  void visit (FloatType &) override { gcc_unreachable (); }\n+  void visit (USizeType &) override { gcc_unreachable (); }\n+  void visit (ISizeType &) override { gcc_unreachable (); }\n+  void visit (ErrorType &) override { gcc_unreachable (); }\n+  void visit (ADTType &) override { gcc_unreachable (); };\n+  void visit (CharType &) override { gcc_unreachable (); }\n+  void visit (ReferenceType &) override { gcc_unreachable (); }\n+  void visit (PointerType &) override { gcc_unreachable (); }\n   void visit (ParamType &) override { gcc_unreachable (); }\n   void visit (StrType &) override { gcc_unreachable (); }\n   void visit (NeverType &) override { gcc_unreachable (); }\n   void visit (PlaceholderType &) override { gcc_unreachable (); }\n   void visit (ProjectionType &) override { gcc_unreachable (); }\n+  void visit (DynamicObjectType &) override { gcc_unreachable (); }\n \n   // FIXME\n   void visit (FnPtr &type) override { gcc_unreachable (); }"}, {"sha": "fa50992ab9c7b75c9c807a0987bfc03a26217a7c", "filename": "gcc/rust/typecheck/rust-tyty-cast.h", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cast.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -318,6 +318,17 @@ class BaseCastRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (DynamicObjectType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"invalid cast [%s] to [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseCastRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -566,6 +577,19 @@ class InferCastRules : public BaseCastRules\n     BaseCastRules::visit (type);\n   }\n \n+  void visit (DynamicObjectType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseCastRules::visit (type);\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1273,6 +1297,20 @@ class PlaceholderCastRules : public BaseCastRules\n   PlaceholderType *base;\n };\n \n+class DynamicCastRules : public BaseCastRules\n+{\n+  using Rust::TyTy::BaseCastRules::visit;\n+\n+public:\n+  DynamicCastRules (DynamicObjectType *base) : BaseCastRules (base), base (base)\n+  {}\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  DynamicObjectType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "030f702e05f816ea282a96cd75840ce8f07d8923", "filename": "gcc/rust/typecheck/rust-tyty-cmp.h", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-cmp.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -375,6 +375,22 @@ class BaseCmp : public TyConstVisitor\n     ok = true;\n   }\n \n+  virtual void visit (const DynamicObjectType &type) override\n+  {\n+    ok = false;\n+    if (emit_error_flag)\n+      {\n+\tLocation ref_locus = mappings->lookup_location (type.get_ref ());\n+\tLocation base_locus\n+\t  = mappings->lookup_location (get_base ()->get_ref ());\n+\tRichLocation r (ref_locus);\n+\tr.add_range (base_locus);\n+\trust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t       get_base ()->as_string ().c_str (),\n+\t\t       type.as_string ().c_str ());\n+      }\n+  }\n+\n protected:\n   BaseCmp (const BaseType *base, bool emit_errors)\n     : mappings (Analysis::Mappings::get ()),\n@@ -622,6 +638,19 @@ class InferCmp : public BaseCmp\n     BaseCmp::visit (type);\n   }\n \n+  void visit (const DynamicObjectType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tok = true;\n+\treturn;\n+      }\n+\n+    BaseCmp::visit (type);\n+  }\n+\n private:\n   const BaseType *get_base () const override { return base; }\n   const InferType *base;\n@@ -1231,6 +1260,33 @@ class PlaceholderCmp : public BaseCmp\n   const PlaceholderType *base;\n };\n \n+class DynamicCmp : public BaseCmp\n+{\n+  using Rust::TyTy::BaseCmp::visit;\n+\n+public:\n+  DynamicCmp (const DynamicObjectType *base, bool emit_errors)\n+    : BaseCmp (base, emit_errors), base (base)\n+  {}\n+\n+  void visit (const DynamicObjectType &type) override\n+  {\n+    if (base->num_specified_bounds () != type.num_specified_bounds ())\n+      {\n+\tBaseCmp::visit (type);\n+\treturn;\n+      }\n+\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    ok = base->bounds_compatible (type, ref_locus, false);\n+  }\n+\n+private:\n+  const BaseType *get_base () const override { return base; }\n+\n+  const DynamicObjectType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "2d59e8874bd48ff28b5876d9235e3d65636980f2", "filename": "gcc/rust/typecheck/rust-tyty-coercion.h", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-coercion.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -331,6 +331,17 @@ class BaseCoercionRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (DynamicObjectType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseCoercionRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -580,6 +591,19 @@ class InferCoercionRules : public BaseCoercionRules\n     BaseCoercionRules::visit (type);\n   }\n \n+  void visit (DynamicObjectType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseCoercionRules::visit (type);\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1308,6 +1332,39 @@ class PlaceholderCoercionRules : public BaseCoercionRules\n   PlaceholderType *base;\n };\n \n+class DynamicCoercionRules : public BaseCoercionRules\n+{\n+  using Rust::TyTy::BaseCoercionRules::visit;\n+\n+public:\n+  DynamicCoercionRules (DynamicObjectType *base)\n+    : BaseCoercionRules (base), base (base)\n+  {}\n+\n+  void visit (DynamicObjectType &type) override\n+  {\n+    if (base->num_specified_bounds () != type.num_specified_bounds ())\n+      {\n+\tBaseCoercionRules::visit (type);\n+\treturn;\n+      }\n+\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    if (!base->bounds_compatible (type, ref_locus, true))\n+      {\n+\tBaseCoercionRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+  }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  DynamicObjectType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "62689cf180106ed7e9992d1cb64f4e5c9b9e9d3c", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -353,6 +353,17 @@ class BaseRules : public TyVisitor\n \t\t   type.as_string ().c_str ());\n   }\n \n+  virtual void visit (DynamicObjectType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    Location base_locus = mappings->lookup_location (get_base ()->get_ref ());\n+    RichLocation r (ref_locus);\n+    r.add_range (base_locus);\n+    rust_error_at (r, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -601,6 +612,19 @@ class InferRules : public BaseRules\n     BaseRules::visit (type);\n   }\n \n+  void visit (DynamicObjectType &type) override\n+  {\n+    bool is_valid\n+      = (base->get_infer_kind () == TyTy::InferType::InferTypeKind::GENERAL);\n+    if (is_valid)\n+      {\n+\tresolved = type.clone ();\n+\treturn;\n+      }\n+\n+    BaseRules::visit (type);\n+  }\n+\n private:\n   BaseType *get_base () override { return base; }\n \n@@ -1314,6 +1338,48 @@ class PlaceholderRules : public BaseRules\n   PlaceholderType *base;\n };\n \n+class DynamicRules : public BaseRules\n+{\n+  using Rust::TyTy::BaseRules::visit;\n+\n+public:\n+  DynamicRules (DynamicObjectType *base) : BaseRules (base), base (base) {}\n+\n+  void visit (InferType &type) override\n+  {\n+    if (type.get_infer_kind () != InferType::InferTypeKind::GENERAL)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+  }\n+\n+  void visit (DynamicObjectType &type) override\n+  {\n+    if (base->num_specified_bounds () != type.num_specified_bounds ())\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    if (!base->bounds_compatible (type, ref_locus, true))\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n+    resolved = base->clone ();\n+  }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  DynamicObjectType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "a51edf49cf9486c432058c0bc4ab254c852ddad4", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -48,6 +48,7 @@ class TyVisitor\n   virtual void visit (NeverType &type) = 0;\n   virtual void visit (PlaceholderType &type) = 0;\n   virtual void visit (ProjectionType &type) = 0;\n+  virtual void visit (DynamicObjectType &type) = 0;\n };\n \n class TyConstVisitor\n@@ -74,6 +75,7 @@ class TyConstVisitor\n   virtual void visit (const NeverType &type) = 0;\n   virtual void visit (const PlaceholderType &type) = 0;\n   virtual void visit (const ProjectionType &type) = 0;\n+  virtual void visit (const DynamicObjectType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "69fb8c4005abfdfa61048e39a760f6a00933a7e2", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -63,7 +63,8 @@ BaseType::satisfies_bound (const TypeBoundPredicate &predicate) const\n }\n \n bool\n-BaseType::bounds_compatible (const BaseType &other, Location locus) const\n+BaseType::bounds_compatible (const BaseType &other, Location locus,\n+\t\t\t     bool emit_error) const\n {\n   std::vector<std::reference_wrapper<const TypeBoundPredicate>>\n     unsatisfied_bounds;\n@@ -89,8 +90,9 @@ BaseType::bounds_compatible (const BaseType &other, Location locus) const\n \t    missing_preds += \", \";\n \t}\n \n-      rust_error_at (r, \"bounds not satisfied for %s %<%s%> is not satisfied\",\n-\t\t     other.get_name ().c_str (), missing_preds.c_str ());\n+      if (emit_error)\n+\trust_error_at (r, \"bounds not satisfied for %s %<%s%> is not satisfied\",\n+\t\t       other.get_name ().c_str (), missing_preds.c_str ());\n     }\n \n   return unsatisfied_bounds.size () == 0;\n@@ -2257,6 +2259,71 @@ ProjectionType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n   return projection;\n }\n \n+void\n+DynamicObjectType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+void\n+DynamicObjectType::accept_vis (TyConstVisitor &vis) const\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+DynamicObjectType::as_string () const\n+{\n+  return \"dyn [\" + raw_bounds_as_string () + \"]\";\n+}\n+\n+BaseType *\n+DynamicObjectType::unify (BaseType *other)\n+{\n+  DynamicRules r (this);\n+  return r.unify (other);\n+}\n+\n+bool\n+DynamicObjectType::can_eq (const BaseType *other, bool emit_errors) const\n+{\n+  DynamicCmp r (this, emit_errors);\n+  return r.can_eq (other);\n+}\n+\n+BaseType *\n+DynamicObjectType::coerce (BaseType *other)\n+{\n+  DynamicCoercionRules r (this);\n+  return r.coerce (other);\n+}\n+\n+BaseType *\n+DynamicObjectType::cast (BaseType *other)\n+{\n+  DynamicCastRules r (this);\n+  return r.cast (other);\n+}\n+\n+BaseType *\n+DynamicObjectType::clone () const\n+{\n+  return new DynamicObjectType (get_ref (), get_ty_ref (), specified_bounds,\n+\t\t\t\tget_combined_refs ());\n+}\n+\n+bool\n+DynamicObjectType::is_equal (const BaseType &other) const\n+{\n+  if (get_kind () != other.get_kind ())\n+    return false;\n+\n+  if (num_specified_bounds () != other.num_specified_bounds ())\n+    return false;\n+\n+  return bounds_compatible (other, Location (), false);\n+}\n+\n // rust-tyty-call.h\n \n void"}, {"sha": "90057de14051ebeadba47ebb6fcbde9d46bcc077", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecb777cc8df55a024add203e858486eadcc3aa62/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=ecb777cc8df55a024add203e858486eadcc3aa62", "patch": "@@ -57,6 +57,7 @@ enum TypeKind\n   NEVER,\n   PLACEHOLDER,\n   PROJECTION,\n+  DYNAMIC,\n   // there are more to add...\n   ERROR\n };\n@@ -128,6 +129,9 @@ class TypeKindFormat\n       case TypeKind::PROJECTION:\n \treturn \"Projection\";\n \n+      case TypeKind::DYNAMIC:\n+\treturn \"Dynamic\";\n+\n       case TypeKind::ERROR:\n \treturn \"ERROR\";\n       }\n@@ -173,13 +177,20 @@ class TypeBoundsMappings\n     return specified_bounds;\n   }\n \n-  std::string bounds_as_string () const\n+  size_t num_specified_bounds () const { return specified_bounds.size (); }\n+\n+  std::string raw_bounds_as_string () const\n   {\n     std::string buf;\n     for (auto &b : specified_bounds)\n-      buf += b.as_string () + \", \";\n+      buf += b.as_string () + \" + \";\n+\n+    return buf;\n+  }\n \n-    return \"bounds:[\" + buf + \"]\";\n+  std::string bounds_as_string () const\n+  {\n+    return \"bounds:[\" + raw_bounds_as_string () + \"]\";\n   }\n \n protected:\n@@ -253,7 +264,8 @@ class BaseType : public TypeBoundsMappings\n \n   bool satisfies_bound (const TypeBoundPredicate &predicate) const;\n \n-  bool bounds_compatible (const BaseType &other, Location locus) const;\n+  bool bounds_compatible (const BaseType &other, Location locus,\n+\t\t\t  bool emit_error) const;\n \n   void inherit_bounds (const BaseType &other);\n \n@@ -608,7 +620,7 @@ class SubstitutionParamMapping\n       }\n     else\n       {\n-\tif (!param->bounds_compatible (*type, locus))\n+\tif (!param->bounds_compatible (*type, locus, true))\n \t  return;\n       }\n \n@@ -1813,6 +1825,37 @@ class ProjectionType : public BaseType, public SubstitutionRef\n   DefId item;\n };\n \n+class DynamicObjectType : public BaseType\n+{\n+public:\n+  DynamicObjectType (HirId ref,\n+\t\t     std::vector<TypeBoundPredicate> specified_bounds,\n+\t\t     std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::DYNAMIC, specified_bounds, refs)\n+  {}\n+\n+  DynamicObjectType (HirId ref, HirId ty_ref,\n+\t\t     std::vector<TypeBoundPredicate> specified_bounds,\n+\t\t     std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::DYNAMIC, specified_bounds, refs)\n+  {}\n+\n+  void accept_vis (TyVisitor &vis) override;\n+  void accept_vis (TyConstVisitor &vis) const override;\n+\n+  std::string as_string () const override;\n+\n+  BaseType *unify (BaseType *other) override;\n+  bool can_eq (const BaseType *other, bool emit_errors) const override final;\n+  BaseType *coerce (BaseType *other) override;\n+  BaseType *cast (BaseType *other) override;\n+  bool is_equal (const BaseType &other) const override;\n+\n+  BaseType *clone () const final override;\n+\n+  std::string get_name () const override final { return as_string (); }\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}]}