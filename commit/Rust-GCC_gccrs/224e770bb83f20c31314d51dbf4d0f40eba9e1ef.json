{"sha": "224e770bb83f20c31314d51dbf4d0f40eba9e1ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI0ZTc3MGJiODNmMjBjMzEzMTRkNTFkYmY0ZDBmNDBlYmE5ZTFlZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-22T00:45:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-22T00:45:54Z"}, "message": "cfgexpand.c (expand_gimple_tailcall): Fix case where we need to create a new basic block.\n\n        * cfgexpand.c (expand_gimple_tailcall): Fix case where we need\n        to create a new basic block.\n\nFrom-SVN: r85029", "tree": {"sha": "f76180b06069421f5fd323fe2b9f515a1a0e8b83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f76180b06069421f5fd323fe2b9f515a1a0e8b83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/224e770bb83f20c31314d51dbf4d0f40eba9e1ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224e770bb83f20c31314d51dbf4d0f40eba9e1ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/224e770bb83f20c31314d51dbf4d0f40eba9e1ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224e770bb83f20c31314d51dbf4d0f40eba9e1ef/comments", "author": null, "committer": null, "parents": [{"sha": "7761cda3b43db109445811366799e8e269cd80df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7761cda3b43db109445811366799e8e269cd80df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7761cda3b43db109445811366799e8e269cd80df"}], "stats": {"total": 133, "additions": 78, "deletions": 55}, "files": [{"sha": "4065d959f61161416a2a775abb5cc35082573bc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224e770bb83f20c31314d51dbf4d0f40eba9e1ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224e770bb83f20c31314d51dbf4d0f40eba9e1ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=224e770bb83f20c31314d51dbf4d0f40eba9e1ef", "patch": "@@ -1,3 +1,8 @@\n+2004-07-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* cfgexpand.c (expand_gimple_tailcall): Fix case where we need\n+\tto create a new basic block.\n+\n 2004-07-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \tPR c/15052"}, {"sha": "f4fe86075b288d4f37e8bed8ee4082f7d26f6083", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 73, "deletions": 55, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224e770bb83f20c31314d51dbf4d0f40eba9e1ef/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224e770bb83f20c31314d51dbf4d0f40eba9e1ef/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=224e770bb83f20c31314d51dbf4d0f40eba9e1ef", "patch": "@@ -111,77 +111,95 @@ expand_gimple_cond_expr (basic_block bb, tree stmt)\n }\n \n /* A subroutine of expand_gimple_basic_block.  Expand one CALL_EXPR\n-   that has CALL_EXPR_TAILCALL set.  Returns a new basic block if we've\n-   terminated the current basic block and created a new one.  */\n+   that has CALL_EXPR_TAILCALL set.  Returns non-null if we actually\n+   generated a tail call (something that might be denied by the ABI\n+   rules governing the call; see calls.c).  */\n \n static basic_block\n expand_gimple_tailcall (basic_block bb, tree stmt)\n {\n   rtx last = get_last_insn ();\n+  edge e;\n+  int probability;\n+  gcov_type count;\n \n   expand_expr_stmt (stmt);\n \n   for (last = NEXT_INSN (last); last; last = NEXT_INSN (last))\n-    {\n-      if (CALL_P (last) && SIBLING_CALL_P (last))\n-\t{\n-\t  edge e;\n-\t  int probability = 0;\n-\t  gcov_type count = 0;\n+    if (CALL_P (last) && SIBLING_CALL_P (last))\n+      goto found;\n \n-\t  do_pending_stack_adjust ();\n-\t  e = bb->succ;\n-\t  while (e)\n-\t    {\n-\t      edge next = e->succ_next;\n-\n-\t      if (!(e->flags & (EDGE_ABNORMAL | EDGE_EH)))\n-\t\t{\n-\t\t  if (e->dest != EXIT_BLOCK_PTR)\n-\t\t    {\n-\t\t      e->dest->count -= e->count;\n-\t\t      e->dest->frequency -= EDGE_FREQUENCY (e);\n-\t\t      if (e->dest->count < 0)\n-\t\t        e->dest->count = 0;\n-\t\t      if (e->dest->frequency < 0)\n-\t\t        e->dest->frequency = 0;\n-\t\t    }\n-\t\t  count += e->count;\n-\t\t  probability += e->probability;\n-\t\t  remove_edge (e);\n-\t\t}\n-\n-\t      e = next;\n-\t    }\n+  return NULL;\n+\n+ found:\n+  /* ??? Wouldn't it be better to just reset any pending stack adjust?\n+     Any instructions emitted here are about to be deleted.  */\n+  do_pending_stack_adjust ();\n \n-\t  /* This is somewhat ugly: the call_expr expander often emits\n-\t     instructions after the sibcall (to perform the function\n-\t     return).  These confuse the find_sub_basic_blocks code,\n-\t     so we need to get rid of these.  */\n-\t  last = NEXT_INSN (last);\n-\t  if (!BARRIER_P (last))\n-\t    abort ();\n-\t  while (NEXT_INSN (last))\n+  /* Remove any non-eh, non-abnormal edges that don't go to exit.  */\n+  /* ??? I.e. the fallthrough edge.  HOWEVER!  If there were to be\n+     EH or abnormal edges, we shouldn't have created a tail call in\n+     the first place.  So it seems to me we should just be removing\n+     all edges here, or redirecting the existing fallthru edge to\n+     the exit block.  */\n+\n+  e = bb->succ;\n+  probability = 0;\n+  count = 0;\n+  while (e)\n+    {\n+      edge next = e->succ_next;\n+\n+      if (!(e->flags & (EDGE_ABNORMAL | EDGE_EH)))\n+\t{\n+\t  if (e->dest != EXIT_BLOCK_PTR)\n \t    {\n-\t      /* For instance an sqrt builtin expander expands if with\n-\t\t sibcall in the then and label for `else`.  */\n-\t      if (LABEL_P (NEXT_INSN (last)))\n-\t\tbreak;\n-\t      delete_insn (NEXT_INSN (last));\n+\t      e->dest->count -= e->count;\n+\t      e->dest->frequency -= EDGE_FREQUENCY (e);\n+\t      if (e->dest->count < 0)\n+\t        e->dest->count = 0;\n+\t      if (e->dest->frequency < 0)\n+\t        e->dest->frequency = 0;\n \t    }\n-\t  e = make_edge (bb, EXIT_BLOCK_PTR, EDGE_ABNORMAL | EDGE_SIBCALL);\n-\t  e->probability += probability;\n-\t  e->count += count;\n-\t  BB_END (bb) = last;\n-\t  update_bb_for_insn (bb);\n-\t  if (NEXT_INSN (last))\n-\t    bb = create_basic_block (NEXT_INSN (last), get_last_insn (), bb);\n-\t  else\n-\t    return bb;\n+\t  count += e->count;\n+\t  probability += e->probability;\n+\t  remove_edge (e);\n \t}\n+\n+      e = next;\n     }\n \n-  return NULL;\n+  /* This is somewhat ugly: the call_expr expander often emits instructions\n+     after the sibcall (to perform the function return).  These confuse the\n+     find_sub_basic_blocks code, so we need to get rid of these.  */\n+  last = NEXT_INSN (last);\n+  if (!BARRIER_P (last))\n+    abort ();\n+  while (NEXT_INSN (last))\n+    {\n+      /* For instance an sqrt builtin expander expands if with\n+\t sibcall in the then and label for `else`.  */\n+      if (LABEL_P (NEXT_INSN (last)))\n+\tbreak;\n+      delete_insn (NEXT_INSN (last));\n+    }\n+\n+  e = make_edge (bb, EXIT_BLOCK_PTR, EDGE_ABNORMAL | EDGE_SIBCALL);\n+  e->probability += probability;\n+  e->count += count;\n+  BB_END (bb) = last;\n+  update_bb_for_insn (bb);\n+\n+  if (NEXT_INSN (last))\n+    {\n+      bb = create_basic_block (NEXT_INSN (last), get_last_insn (), bb);\n+\n+      last = BB_END (bb);\n+      if (BARRIER_P (last))\n+\tBB_END (bb) = PREV_INSN (last);\n+    }\n+\n+  return bb;\n }\n \n /* Expand basic block BB from GIMPLE trees to RTL.  */"}]}