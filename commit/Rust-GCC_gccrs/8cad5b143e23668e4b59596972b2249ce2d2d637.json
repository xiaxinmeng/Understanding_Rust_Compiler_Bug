{"sha": "8cad5b143e23668e4b59596972b2249ce2d2d637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhZDViMTQzZTIzNjY4ZTRiNTk1OTY5NzJiMjI0OWNlMmQyZDYzNw==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2018-01-10T23:00:38Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2018-01-10T23:00:38Z"}, "message": "RISC-V: Add naked function support.\n\n\t2018-01-10  Kito Cheng  <kito.cheng@gmail.com>\n\n\tgcc/\n\t* config/riscv/riscv-protos.h (riscv_output_return): New.\n\t* config/riscv/riscv.c (struct machine_function): New naked_p field.\n\t(riscv_attribute_table, riscv_output_return),\n\t(riscv_handle_fndecl_attribute, riscv_naked_function_p),\n\t(riscv_allocate_stack_slots_for_args, riscv_warn_func_return): New.\n\t(riscv_compute_frame_info): Only compute frame->mask if not a naked\n\tfunction.\n\t(riscv_expand_prologue): Add early return for naked function.\n\t(riscv_expand_epilogue): Likewise.\n\t(riscv_function_ok_for_sibcall): Return false for naked function.\n\t(riscv_set_current_function): New.\n\t(TARGET_SET_CURRENT_FUNCTION, TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS),\n\t(TARGET_ATTRIBUTE_TABLE, TARGET_WARN_FUNC_RETURN): New.\n\t* config/riscv/riscv.md (simple_return): Call riscv_output_return.\n\t* doc/extend.texi (RISC-V Function Attributes): New.\n\nCo-Authored-By: Jim Wilson <jimw@sifive.com>\n\nFrom-SVN: r256462", "tree": {"sha": "25f9cc56191853d6733003431c1a581d6d5f80fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f9cc56191853d6733003431c1a581d6d5f80fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cad5b143e23668e4b59596972b2249ce2d2d637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cad5b143e23668e4b59596972b2249ce2d2d637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cad5b143e23668e4b59596972b2249ce2d2d637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cad5b143e23668e4b59596972b2249ce2d2d637/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ec62f54062b50d0c9e0ed55f4d83147df56fc92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec62f54062b50d0c9e0ed55f4d83147df56fc92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec62f54062b50d0c9e0ed55f4d83147df56fc92"}], "stats": {"total": 200, "additions": 182, "deletions": 18}, "files": [{"sha": "3662659fee064b15a26dceb45338836a77de86fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cad5b143e23668e4b59596972b2249ce2d2d637/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cad5b143e23668e4b59596972b2249ce2d2d637/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cad5b143e23668e4b59596972b2249ce2d2d637", "patch": "@@ -1,3 +1,22 @@\n+2018-01-10  Kito Cheng  <kito.cheng@gmail.com>\n+\t    Jim Wilson  <jimw@sifive.com>\n+\n+\t* config/riscv/riscv-protos.h (riscv_output_return): New.\n+\t* config/riscv/riscv.c (struct machine_function): New naked_p field.\n+\t(riscv_attribute_table, riscv_output_return),\n+\t(riscv_handle_fndecl_attribute, riscv_naked_function_p),\n+\t(riscv_allocate_stack_slots_for_args, riscv_warn_func_return): New.\n+\t(riscv_compute_frame_info): Only compute frame->mask if not a naked\n+\tfunction.\n+\t(riscv_expand_prologue): Add early return for naked function.\n+\t(riscv_expand_epilogue): Likewise.\n+\t(riscv_function_ok_for_sibcall): Return false for naked function.\n+\t(riscv_set_current_function): New.\n+\t(TARGET_SET_CURRENT_FUNCTION, TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS),\n+\t(TARGET_ATTRIBUTE_TABLE, TARGET_WARN_FUNC_RETURN): New.\n+\t* config/riscv/riscv.md (simple_return): Call riscv_output_return.\n+\t* doc/extend.texi (RISC-V Function Attributes): New.\n+\n 2018-01-10  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (is_complex_IBM_long_double): Explicitly"}, {"sha": "0538ede77e48e4bffe8f250fda4b656946b96fc8", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cad5b143e23668e4b59596972b2249ce2d2d637/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cad5b143e23668e4b59596972b2249ce2d2d637/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=8cad5b143e23668e4b59596972b2249ce2d2d637", "patch": "@@ -54,6 +54,7 @@ extern bool riscv_split_64bit_move_p (rtx, rtx);\n extern void riscv_split_doubleword_move (rtx, rtx);\n extern const char *riscv_output_move (rtx, rtx);\n extern const char *riscv_output_gpr_save (unsigned);\n+extern const char *riscv_output_return ();\n #ifdef RTX_CODE\n extern void riscv_expand_int_scc (rtx, enum rtx_code, rtx, rtx);\n extern void riscv_expand_float_scc (rtx, enum rtx_code, rtx, rtx);"}, {"sha": "d260c0ebae148d4caaeca2c14c0251f073c4443f", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 140, "deletions": 17, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cad5b143e23668e4b59596972b2249ce2d2d637/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cad5b143e23668e4b59596972b2249ce2d2d637/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=8cad5b143e23668e4b59596972b2249ce2d2d637", "patch": "@@ -127,6 +127,9 @@ struct GTY(())  machine_function {\n      This area is allocated by the callee at the very top of the frame.  */\n   int varargs_size;\n \n+  /* True if current function is a naked function.  */\n+  bool naked_p;\n+\n   /* The current frame information, calculated by riscv_compute_frame_info.  */\n   struct riscv_frame_info frame;\n };\n@@ -269,6 +272,23 @@ static const struct riscv_tune_info optimize_size_tune_info = {\n   false,\t\t\t\t\t/* slow_unaligned_access */\n };\n \n+static tree riscv_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n+\n+/* Defining target-specific uses of __attribute__.  */\n+static const struct attribute_spec riscv_attribute_table[] =\n+{\n+  /* Syntax: { name, min_len, max_len, decl_required, type_required,\n+\t       function_type_required, affects_type_identity, handler,\n+\t       exclude } */\n+\n+  /* The attribute telling no prologue/epilogue.  */\n+  { \"naked\",\t0,  0, true, false, false, false,\n+    riscv_handle_fndecl_attribute, NULL },\n+\n+  /* The last attribute spec is set to be NULL.  */\n+  { NULL,\t0,  0, false, false, false, false, NULL, NULL }\n+};\n+\n /* A table describing all the processors GCC knows about.  */\n static const struct riscv_cpu_info riscv_cpu_info_table[] = {\n   { \"rocket\", &rocket_tune_info },\n@@ -1827,6 +1847,16 @@ riscv_output_move (rtx dest, rtx src)\n     }\n   gcc_unreachable ();\n }\n+\n+const char *\n+riscv_output_return ()\n+{\n+  if (cfun->machine->naked_p)\n+    return \"\";\n+\n+  return \"ret\";\n+}\n+\n \f\n /* Return true if CMP1 is a suitable second operand for integer ordering\n    test CODE.  See also the *sCC patterns in riscv.md.  */\n@@ -2647,6 +2677,50 @@ riscv_setup_incoming_varargs (cumulative_args_t cum, machine_mode mode,\n     cfun->machine->varargs_size = gp_saved * UNITS_PER_WORD;\n }\n \n+/* Handle an attribute requiring a FUNCTION_DECL;\n+   arguments as in struct attribute_spec.handler.  */\n+static tree\n+riscv_handle_fndecl_attribute (tree *node, tree name,\n+\t\t\t       tree args ATTRIBUTE_UNUSED,\n+\t\t\t       int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only applies to functions\",\n+\t       name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Return true if func is a naked function.  */\n+static bool\n+riscv_naked_function_p (tree func)\n+{\n+  tree func_decl = func;\n+  if (func == NULL_TREE)\n+    func_decl = current_function_decl;\n+  return NULL_TREE != lookup_attribute (\"naked\", DECL_ATTRIBUTES (func_decl));\n+}\n+\n+/* Implement TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS.  */\n+static bool\n+riscv_allocate_stack_slots_for_args ()\n+{\n+  /* Naked functions should not allocate stack slots for arguments.  */\n+  return !riscv_naked_function_p (current_function_decl);\n+}\n+\n+/* Implement TARGET_WARN_FUNC_RETURN.  */\n+static bool\n+riscv_warn_func_return (tree decl)\n+{\n+  /* Naked functions are implemented entirely in assembly, including the\n+     return sequence, so suppress warnings about this.  */\n+  return !riscv_naked_function_p (decl);\n+}\n+\n /* Implement TARGET_EXPAND_BUILTIN_VA_START.  */\n \n static void\n@@ -3202,23 +3276,26 @@ riscv_compute_frame_info (void)\n   frame = &cfun->machine->frame;\n   memset (frame, 0, sizeof (*frame));\n \n-  /* Find out which GPRs we need to save.  */\n-  for (regno = GP_REG_FIRST; regno <= GP_REG_LAST; regno++)\n-    if (riscv_save_reg_p (regno))\n-      frame->mask |= 1 << (regno - GP_REG_FIRST), num_x_saved++;\n-\n-  /* If this function calls eh_return, we must also save and restore the\n-     EH data registers.  */\n-  if (crtl->calls_eh_return)\n-    for (i = 0; (regno = EH_RETURN_DATA_REGNO (i)) != INVALID_REGNUM; i++)\n-      frame->mask |= 1 << (regno - GP_REG_FIRST), num_x_saved++;\n-\n-  /* Find out which FPRs we need to save.  This loop must iterate over\n-     the same space as its companion in riscv_for_each_saved_reg.  */\n-  if (TARGET_HARD_FLOAT)\n-    for (regno = FP_REG_FIRST; regno <= FP_REG_LAST; regno++)\n-      if (riscv_save_reg_p (regno))\n-\tframe->fmask |= 1 << (regno - FP_REG_FIRST), num_f_saved++;\n+  if (!cfun->machine->naked_p)\n+    {\n+      /* Find out which GPRs we need to save.  */\n+      for (regno = GP_REG_FIRST; regno <= GP_REG_LAST; regno++)\n+\tif (riscv_save_reg_p (regno))\n+\t  frame->mask |= 1 << (regno - GP_REG_FIRST), num_x_saved++;\n+\n+      /* If this function calls eh_return, we must also save and restore the\n+\t EH data registers.  */\n+      if (crtl->calls_eh_return)\n+\tfor (i = 0; (regno = EH_RETURN_DATA_REGNO (i)) != INVALID_REGNUM; i++)\n+\t  frame->mask |= 1 << (regno - GP_REG_FIRST), num_x_saved++;\n+\n+      /* Find out which FPRs we need to save.  This loop must iterate over\n+\t the same space as its companion in riscv_for_each_saved_reg.  */\n+      if (TARGET_HARD_FLOAT)\n+\tfor (regno = FP_REG_FIRST; regno <= FP_REG_LAST; regno++)\n+\t  if (riscv_save_reg_p (regno))\n+\t    frame->fmask |= 1 << (regno - FP_REG_FIRST), num_f_saved++;\n+    }\n \n   /* At the bottom of the frame are any outgoing stack arguments. */\n   offset = crtl->outgoing_args_size;\n@@ -3488,6 +3565,14 @@ riscv_expand_prologue (void)\n   unsigned mask = frame->mask;\n   rtx insn;\n \n+  if (cfun->machine->naked_p)\n+    {\n+      if (flag_stack_usage_info)\n+\tcurrent_function_static_stack_size = 0;\n+\n+      return;\n+    }\n+\n   if (flag_stack_usage_info)\n     current_function_static_stack_size = size;\n \n@@ -3600,6 +3685,15 @@ riscv_expand_epilogue (bool sibcall_p)\n   bool need_barrier_p = (get_frame_size ()\n \t\t\t + cfun->machine->frame.arg_pointer_offset) != 0;\n \n+  if (cfun->machine->naked_p)\n+    {\n+      gcc_assert (!sibcall_p);\n+\n+      emit_jump_insn (gen_return ());\n+\n+      return;\n+    }\n+\n   if (!sibcall_p && riscv_can_use_return_insn ())\n     {\n       emit_jump_insn (gen_return ());\n@@ -4183,9 +4277,27 @@ riscv_function_ok_for_sibcall (tree decl ATTRIBUTE_UNUSED,\n   if (TARGET_SAVE_RESTORE)\n     return false;\n \n+  /* Don't use sibcall for naked function.  */\n+  if (cfun->machine->naked_p)\n+    return false;\n+\n   return true;\n }\n \n+/* Implement `TARGET_SET_CURRENT_FUNCTION'.  */\n+/* Sanity cheching for above function attributes.  */\n+static void\n+riscv_set_current_function (tree decl)\n+{\n+  if (decl == NULL_TREE\n+      || current_function_decl == NULL_TREE\n+      || current_function_decl == error_mark_node\n+      || !cfun->machine)\n+    return;\n+\n+  cfun->machine->naked_p = riscv_naked_function_p (decl);\n+}\n+\n /* Implement TARGET_CANNOT_COPY_INSN_P.  */\n \n static bool\n@@ -4241,6 +4353,9 @@ riscv_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL riscv_function_ok_for_sibcall\n \n+#undef  TARGET_SET_CURRENT_FUNCTION\n+#define TARGET_SET_CURRENT_FUNCTION riscv_set_current_function\n+\n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST riscv_register_move_cost\n #undef TARGET_MEMORY_MOVE_COST\n@@ -4276,6 +4391,8 @@ riscv_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n \n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS riscv_setup_incoming_varargs\n+#undef TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS\n+#define TARGET_ALLOCATE_STACK_SLOTS_FOR_ARGS riscv_allocate_stack_slots_for_args\n #undef TARGET_STRICT_ARGUMENT_NAMING\n #define TARGET_STRICT_ARGUMENT_NAMING hook_bool_CUMULATIVE_ARGS_true\n #undef TARGET_MUST_PASS_IN_STACK\n@@ -4377,6 +4494,12 @@ riscv_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT riscv_constant_alignment\n \n+#undef TARGET_ATTRIBUTE_TABLE\n+#define TARGET_ATTRIBUTE_TABLE riscv_attribute_table\n+\n+#undef TARGET_WARN_FUNC_RETURN\n+#define TARGET_WARN_FUNC_RETURN riscv_warn_func_return\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-riscv.h\""}, {"sha": "bffe78dd837f62da2e2ec17f3aa79697753f0e3f", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cad5b143e23668e4b59596972b2249ce2d2d637/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cad5b143e23668e4b59596972b2249ce2d2d637/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=8cad5b143e23668e4b59596972b2249ce2d2d637", "patch": "@@ -1927,7 +1927,9 @@\n (define_insn \"simple_return\"\n   [(simple_return)]\n   \"\"\n-  \"ret\"\n+{\n+  return riscv_output_return ();\n+}\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")])\n "}, {"sha": "84640f4fde6431fcbda6580dbc86646d6f2dc6c2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cad5b143e23668e4b59596972b2249ce2d2d637/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cad5b143e23668e4b59596972b2249ce2d2d637/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8cad5b143e23668e4b59596972b2249ce2d2d637", "patch": "@@ -2319,6 +2319,7 @@ GCC plugins may provide their own attributes.\n * Nios II Function Attributes::\n * Nvidia PTX Function Attributes::\n * PowerPC Function Attributes::\n+* RISC-V Function Attributes::\n * RL78 Function Attributes::\n * RX Function Attributes::\n * S/390 Function Attributes::\n@@ -5093,6 +5094,24 @@ function that has different target options than the caller, unless the\n callee has a subset of the target options of the caller.\n @end table\n \n+@node RISC-V Function Attributes\n+@subsection RISC-V Function Attributes\n+\n+These function attributes are supported by the RISC-V back end:\n+\n+@table @code\n+@item naked\n+@cindex @code{naked} function attribute, RISC-V\n+This attribute allows the compiler to construct the\n+requisite function declaration, while allowing the body of the\n+function to be assembly code. The specified function will not have\n+prologue/epilogue sequences generated by the compiler. Only basic\n+@code{asm} statements can safely be included in naked functions\n+(@pxref{Basic Asm}). While using extended @code{asm} or a mixture of\n+basic @code{asm} and C code may appear to work, they cannot be\n+depended upon to work reliably and are not supported.\n+@end table\n+\n @node RL78 Function Attributes\n @subsection RL78 Function Attributes\n "}]}