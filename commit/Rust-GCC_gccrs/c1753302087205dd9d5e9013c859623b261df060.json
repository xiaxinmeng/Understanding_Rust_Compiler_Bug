{"sha": "c1753302087205dd9d5e9013c859623b261df060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE3NTMzMDIwODcyMDVkZDlkNWU5MDEzYzg1OTYyM2IyNjFkZjA2MA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-02-23T01:19:38Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-02-23T01:19:38Z"}, "message": "Capture source location of dtors (PR c++/89390)\n\ngcc/cp/ChangeLog:\n\tPR c++/89390\n\t* parser.c (cp_parser_unqualified_id): Capture and use locations\n\tfor destructors.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/89390\n\t* g++.dg/diagnostic/pr89390.C: Update expected location of error,\n\trenaming to a multicharacter name, so that start != finish.  Add\n\ttests for dtor locations.\n\nFrom-SVN: r269145", "tree": {"sha": "a30ed4bf67b3c1071a65fbddd0096cd95d161cf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a30ed4bf67b3c1071a65fbddd0096cd95d161cf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1753302087205dd9d5e9013c859623b261df060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1753302087205dd9d5e9013c859623b261df060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1753302087205dd9d5e9013c859623b261df060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1753302087205dd9d5e9013c859623b261df060/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "986e0e33f6e2349741ca5dafdeb167d215b28195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986e0e33f6e2349741ca5dafdeb167d215b28195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/986e0e33f6e2349741ca5dafdeb167d215b28195"}], "stats": {"total": 81, "additions": 71, "deletions": 10}, "files": [{"sha": "2a5056ad4af00049f8a3df96334940bdd1dbe489", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1753302087205dd9d5e9013c859623b261df060/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1753302087205dd9d5e9013c859623b261df060/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1753302087205dd9d5e9013c859623b261df060", "patch": "@@ -1,3 +1,9 @@\n+2019-02-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/89390\n+\t* parser.c (cp_parser_unqualified_id): Capture and use locations\n+\tfor destructors.\n+\n 2019-02-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89420 - ICE with CAST_EXPR in explicit-specifier."}, {"sha": "e976008e94dd4e269168636e9b446f00e5cec1d5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1753302087205dd9d5e9013c859623b261df060/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1753302087205dd9d5e9013c859623b261df060/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c1753302087205dd9d5e9013c859623b261df060", "patch": "@@ -5976,6 +5976,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \ttree object_scope;\n \ttree scope;\n \tbool done;\n+\tlocation_t tilde_loc = token->location;\n \n \t/* Consume the `~' token.  */\n \tcp_lexer_consume_token (parser->lexer);\n@@ -6038,9 +6039,18 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t  }\n \tgcc_assert (!scope || TYPE_P (scope));\n \n+\ttoken = cp_lexer_peek_token (parser->lexer);\n+\n+\t/* Create a location with caret == start at the tilde,\n+\t   finishing at the end of the peeked token, e.g:\n+\t   ~token\n+\t   ^~~~~~.  */\n+\tlocation_t loc\n+\t  = make_location (tilde_loc, tilde_loc, token->location);\n+\n \t/* If the name is of the form \"X::~X\" it's OK even if X is a\n \t   typedef.  */\n-\ttoken = cp_lexer_peek_token (parser->lexer);\n+\n \tif (scope\n \t    && token->type == CPP_NAME\n \t    && (cp_lexer_peek_nth_token (parser->lexer, 2)->type\n@@ -6050,18 +6060,18 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t\t    && constructor_name_p (token->u.value, scope))))\n \t  {\n \t    cp_lexer_consume_token (parser->lexer);\n-\t    return build_nt (BIT_NOT_EXPR, scope);\n+\t    return cp_expr (build_nt (BIT_NOT_EXPR, scope), loc);\n \t  }\n \n \t/* ~auto means the destructor of whatever the object is.  */\n \tif (cp_parser_is_keyword (token, RID_AUTO))\n \t  {\n \t    if (cxx_dialect < cxx14)\n-\t      pedwarn (input_location, 0,\n+\t      pedwarn (loc, 0,\n \t\t       \"%<~auto%> only available with \"\n \t\t       \"-std=c++14 or -std=gnu++14\");\n \t    cp_lexer_consume_token (parser->lexer);\n-\t    return build_nt (BIT_NOT_EXPR, make_auto ());\n+\t    return cp_expr (build_nt (BIT_NOT_EXPR, make_auto (), loc));\n \t  }\n \n \t/* If there was an explicit qualification (S::~T), first look\n@@ -6152,7 +6162,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t\ttype_decl = cp_parser_identifier (parser);\n \t\tif (type_decl != error_mark_node)\n \t\t  type_decl = build_nt (BIT_NOT_EXPR, type_decl);\n-\t\treturn type_decl;\n+\t\treturn cp_expr (type_decl, loc);\n \t      }\n \t  }\n \t/* If an error occurred, assume that the name of the\n@@ -6168,7 +6178,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \tif (declarator_p && scope && !check_dtor_name (scope, type_decl))\n \t  {\n \t    if (!cp_parser_uncommitted_to_tentative_parse_p (parser))\n-\t      error_at (token->location,\n+\t      error_at (loc,\n \t\t\t\"declaration of %<~%T%> as member of %qT\",\n \t\t\ttype_decl, scope);\n \t    cp_parser_simulate_error (parser);\n@@ -6183,11 +6193,11 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t    && !DECL_IMPLICIT_TYPEDEF_P (type_decl)\n \t    && !DECL_SELF_REFERENCE_P (type_decl)\n \t    && !cp_parser_uncommitted_to_tentative_parse_p (parser))\n-\t  error_at (token->location,\n+\t  error_at (loc,\n \t\t    \"typedef-name %qD used as destructor declarator\",\n \t\t    type_decl);\n \n-\treturn build_nt (BIT_NOT_EXPR, TREE_TYPE (type_decl));\n+\treturn cp_expr (build_nt (BIT_NOT_EXPR, TREE_TYPE (type_decl), loc));\n       }\n \n     case CPP_KEYWORD:"}, {"sha": "4751104d1062d9a5a699b5b5bfc002ac7e8cb4af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1753302087205dd9d5e9013c859623b261df060/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1753302087205dd9d5e9013c859623b261df060/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1753302087205dd9d5e9013c859623b261df060", "patch": "@@ -1,3 +1,10 @@\n+2019-02-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/89390\n+\t* g++.dg/diagnostic/pr89390.C: Update expected location of error,\n+\trenaming to a multicharacter name, so that start != finish.  Add\n+\ttests for dtor locations.\n+\n 2019-02-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84676"}, {"sha": "2e8c95a4d16c414bebba55e5e213b70b7d477e62", "filename": "gcc/testsuite/g++.dg/diagnostic/pr89390.C", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1753302087205dd9d5e9013c859623b261df060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr89390.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1753302087205dd9d5e9013c859623b261df060/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr89390.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fpr89390.C?ref=c1753302087205dd9d5e9013c859623b261df060", "patch": "@@ -1,10 +1,48 @@\n // PR c++/89390\n // { dg-do compile { target c++11 } }\n+// { dg-options \"-fdiagnostics-show-caret\" }\n \n-enum class A { B, C };\n+enum class bar { A, B, C };\n \n void\n foo ()\n {\n-  A::~A ();\t// { dg-error \"'~A' is not a member of 'A'\" \"\" { target *-*-* } 0 }\n+  bar::~bar ();    // { dg-error \"8: '~bar' is not a member of 'bar'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   bar::~bar ();\n+        ^~~~\n+     { dg-end-multiline-output \"\" } */\n }\n+\n+namespace ns { enum class baz { P, Q, R }; }\n+\n+void\n+test_2 ()\n+{\n+  ns::baz::~baz ();    // { dg-error \"12: '~ns::baz' is not a member of 'ns::baz'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   ns::baz::~baz ();\n+            ^~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+struct first;\n+struct second;\n+second::~first() {} // { dg-error \"9: declaration of '~first' as member of 'second'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+ second::~first() {}\n+         ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+\n+struct test { ~test(); };\n+typedef test test_t;\n+~test_t();  // { dg-error \"typedef-name 'test_t' used as destructor declarator\" }\n+// { dg-error \"expected\" \"\" { target *-*-* } .-1 }\n+  /* { dg-begin-multiline-output \"\" }\n+ ~test_t();\n+ ^~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+ ~test_t();\n+          ^\n+     { dg-end-multiline-output \"\" } */"}]}