{"sha": "3b585938f70818069ec9ea8feace67eeece74cfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1ODU5MzhmNzA4MTgwNjllYzllYThmZWFjZTY3ZWVlY2U3NGNmYQ==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2012-12-20T19:13:21Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2012-12-20T19:13:21Z"}, "message": "Make zero_extends explicit for common AArch64 SI mode patterns\n\nFrom-SVN: r194649", "tree": {"sha": "0205a5bafb99073c36675fdb85375c392fd1f26c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0205a5bafb99073c36675fdb85375c392fd1f26c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b585938f70818069ec9ea8feace67eeece74cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b585938f70818069ec9ea8feace67eeece74cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b585938f70818069ec9ea8feace67eeece74cfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b585938f70818069ec9ea8feace67eeece74cfa/comments", "author": null, "committer": null, "parents": [{"sha": "f0f67c96c3906c09d9a9e00cbdbbb959c9c6e539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0f67c96c3906c09d9a9e00cbdbbb959c9c6e539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0f67c96c3906c09d9a9e00cbdbbb959c9c6e539"}], "stats": {"total": 440, "additions": 440, "deletions": 0}, "files": [{"sha": "29cab0369db87e9e2df8ce893b4d673ebfa467ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b585938f70818069ec9ea8feace67eeece74cfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b585938f70818069ec9ea8feace67eeece74cfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b585938f70818069ec9ea8feace67eeece74cfa", "patch": "@@ -1,3 +1,36 @@\n+2012-12-20  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc/config/aarch64/aarch64.md\n+\t(*addsi3_aarch64_uxtw): New pattern.\n+\t(*addsi3_compare0_uxtw): New pattern.\n+\t(*add_<shift>_si_uxtw): New pattern.\n+\t(*add_<optab><SHORT:mode>_si_uxtw): New pattern.\n+\t(*add_<optab><SHORT:mode>_shft_si_uxtw): New pattern.\n+\t(*add_<optab><SHORT:mode>_mult_si_uxtw): New pattern.\n+\t(*add_<optab>si_multp2_uxtw): New pattern.\n+\t(*addsi3_carryin_uxtw): New pattern.\n+\t(*addsi3_carryin_alt1_uxtw): New pattern.\n+\t(*addsi3_carryin_alt2_uxtw): New pattern.\n+\t(*addsi3_carryin_alt3_uxtw): New pattern.\n+\t(*add_uxtsi_multp2_uxtw): New pattern.\n+\t(*subsi3_uxtw): New pattern.\n+\t(*subsi3_compare0_uxtw): New pattern.\n+\t(*sub_<shift>_si_uxtw): New pattern.\n+\t(*sub_mul_imm_si_uxtw): New pattern.\n+\t(*sub_<optab><SHORT:mode>_si_uxtw): New pattern.\n+\t(*sub_<optab><SHORT:mode>_shft_si_uxtw): New pattern.\n+\t(*sub_<optab>si_multp2_uxtw): New pattern.\n+\t(*sub_uxtsi_multp2_uxtw): New pattern.\n+\t(*negsi2_uxtw): New pattern.\n+\t(*negsi2_compare0_uxtw): New pattern.\n+\t(*neg_<shift>_si2_uxtw): New pattern.\n+\t(*neg_mul_imm_si2_uxtw): New pattern.\n+\t(*mulsi3_uxtw): New pattern.\n+\t(*maddsi_uxtw): New pattern.\n+\t(*msubsi_uxtw): New pattern.\n+\t(*mulsi_neg_uxtw): New pattern.\n+\t(*<su_optab>divsi3_uxtw): New pattern.\n+\n 2012-12-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/55750"}, {"sha": "ec65b3c2a11e65e8caffd4225961e1666153d8f6", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 407, "deletions": 0, "changes": 407, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b585938f70818069ec9ea8feace67eeece74cfa/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b585938f70818069ec9ea8feace67eeece74cfa/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=3b585938f70818069ec9ea8feace67eeece74cfa", "patch": "@@ -1215,6 +1215,22 @@\n    (set_attr \"mode\" \"SI\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*addsi3_aarch64_uxtw\"\n+  [(set\n+    (match_operand:DI 0 \"register_operand\" \"=rk,rk,rk\")\n+    (zero_extend:DI\n+     (plus:SI (match_operand:SI 1 \"register_operand\" \"%rk,rk,rk\")\n+              (match_operand:SI 2 \"aarch64_plus_operand\" \"I,r,J\"))))]\n+  \"\"\n+  \"@\n+  add\\\\t%w0, %w1, %2\n+  add\\\\t%w0, %w1, %w2\n+  sub\\\\t%w0, %w1, #%n2\"\n+  [(set_attr \"v8type\" \"alu\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*adddi3_aarch64\"\n   [(set\n     (match_operand:DI 0 \"register_operand\" \"=rk,rk,rk,!w\")\n@@ -1248,6 +1264,23 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*addsi3_compare0_uxtw\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ\n+\t (plus:SI (match_operand:SI 1 \"register_operand\" \"%r,r\")\n+\t\t  (match_operand:SI 2 \"aarch64_plus_operand\" \"rI,J\"))\n+\t (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:DI (plus:SI (match_dup 1) (match_dup 2))))]\n+  \"\"\n+  \"@\n+  adds\\\\t%w0, %w1, %w2\n+  subs\\\\t%w0, %w1, #%n2\"\n+  [(set_attr \"v8type\" \"alus\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*add<mode>3nr_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n@@ -1284,6 +1317,19 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*add_<shift>_si_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+\t (plus:SI (ASHIFT:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t             (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\"))\n+\t          (match_operand:SI 3 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"add\\\\t%w0, %w3, %w1, <shift> %2\"\n+  [(set_attr \"v8type\" \"alu_shift\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*add_mul_imm_<mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(plus:GPI (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n@@ -1305,6 +1351,18 @@\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*add_<optab><SHORT:mode>_si_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+         (plus:SI (ANY_EXTEND:SI (match_operand:SHORT 1 \"register_operand\" \"r\"))\n+\t\t  (match_operand:GPI 2 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"add\\\\t%w0, %w2, %w1, <su>xt<SHORT:size>\"\n+  [(set_attr \"v8type\" \"alu_ext\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*add_<optab><ALLX:mode>_shft_<GPI:mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(plus:GPI (ashift:GPI (ANY_EXTEND:GPI\n@@ -1317,6 +1375,20 @@\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*add_<optab><SHORT:mode>_shft_si_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+\t (plus:SI (ashift:SI (ANY_EXTEND:SI\n+\t\t\t      (match_operand:SHORT 1 \"register_operand\" \"r\"))\n+\t\t\t     (match_operand 2 \"aarch64_imm3\" \"Ui3\"))\n+\t\t  (match_operand:SI 3 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"add\\\\t%w0, %w3, %w1, <su>xt<SHORT:size> %2\"\n+  [(set_attr \"v8type\" \"alu_ext\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*add_<optab><ALLX:mode>_mult_<GPI:mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(plus:GPI (mult:GPI (ANY_EXTEND:GPI\n@@ -1329,6 +1401,19 @@\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*add_<optab><SHORT:mode>_mult_si_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI (plus:SI (mult:SI (ANY_EXTEND:SI\n+\t\t\t     (match_operand:SHORT 1 \"register_operand\" \"r\"))\n+\t\t\t    (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n+\t\t  (match_operand:SI 3 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"add\\\\t%w0, %w3, %w1, <su>xt<SHORT:size> %p2\"\n+  [(set_attr \"v8type\" \"alu_ext\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*add_<optab><mode>_multp2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(plus:GPI (ANY_EXTRACT:GPI\n@@ -1343,6 +1428,22 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*add_<optab>si_multp2_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+         (plus:SI (ANY_EXTRACT:SI\n+\t\t   (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n+\t\t   (match_operand 3 \"const_int_operand\" \"n\")\n+                   (const_int 0))\n+\t\t  (match_operand:SI 4 \"register_operand\" \"r\"))))]\n+  \"aarch64_is_extend_from_extract (SImode, operands[2], operands[3])\"\n+  \"add\\\\t%w0, %w4, %w1, <su>xt%e3 %p2\"\n+  [(set_attr \"v8type\" \"alu_ext\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*add<mode>3_carryin\"\n   [(set\n     (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -1356,6 +1457,21 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*addsi3_carryin_uxtw\"\n+  [(set\n+    (match_operand:DI 0 \"register_operand\" \"=r\")\n+    (zero_extend:DI\n+     (plus:SI (geu:SI (reg:CC CC_REGNUM) (const_int 0))\n+\t      (plus:SI\n+\t       (match_operand:SI 1 \"register_operand\" \"r\")\n+\t       (match_operand:SI 2 \"register_operand\" \"r\")))))]\n+   \"\"\n+   \"adc\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"adc\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*add<mode>3_carryin_alt1\"\n   [(set\n     (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -1369,6 +1485,21 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*addsi3_carryin_alt1_uxtw\"\n+  [(set\n+    (match_operand:DI 0 \"register_operand\" \"=r\")\n+    (zero_extend:DI\n+     (plus:SI (plus:SI\n+\t       (match_operand:SI 1 \"register_operand\" \"r\")\n+\t       (match_operand:SI 2 \"register_operand\" \"r\"))\n+              (geu:SI (reg:CC CC_REGNUM) (const_int 0)))))]\n+   \"\"\n+   \"adc\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"adc\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*add<mode>3_carryin_alt2\"\n   [(set\n     (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -1382,6 +1513,21 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*addsi3_carryin_alt2_uxtw\"\n+  [(set\n+    (match_operand:DI 0 \"register_operand\" \"=r\")\n+    (zero_extend:DI\n+     (plus:SI (plus:SI\n+               (geu:SI (reg:CC CC_REGNUM) (const_int 0))\n+\t       (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t      (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+   \"\"\n+   \"adc\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"adc\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*add<mode>3_carryin_alt3\"\n   [(set\n     (match_operand:GPI 0 \"register_operand\" \"=r\")\n@@ -1395,6 +1541,21 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*addsi3_carryin_alt3_uxtw\"\n+  [(set\n+    (match_operand:DI 0 \"register_operand\" \"=r\")\n+    (zero_extend:DI\n+     (plus:SI (plus:SI\n+               (geu:SI (reg:CC CC_REGNUM) (const_int 0))\n+\t       (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t      (match_operand:SI 1 \"register_operand\" \"r\"))))]\n+   \"\"\n+   \"adc\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"adc\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*add_uxt<mode>_multp2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(plus:GPI (and:GPI\n@@ -1411,6 +1572,24 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*add_uxtsi_multp2_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+         (plus:SI (and:SI\n+\t\t   (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n+\t\t   (match_operand 3 \"const_int_operand\" \"n\"))\n+\t\t  (match_operand:SI 4 \"register_operand\" \"r\"))))]\n+  \"aarch64_uxt_size (exact_log2 (INTVAL (operands[2])), INTVAL (operands[3])) != 0\"\n+  \"*\n+  operands[3] = GEN_INT (aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),\n+\t\t\t\t\t   INTVAL (operands[3])));\n+  return \\\"add\\t%w0, %w4, %w1, uxt%e3 %p2\\\";\"\n+  [(set_attr \"v8type\" \"alu_ext\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=rk\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n@@ -1421,6 +1600,18 @@\n    (set_attr \"mode\" \"SI\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*subsi3_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+         (minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"sub\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"alu\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"subdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=rk,!w\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r,!w\")\n@@ -1448,6 +1639,20 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*subsi3_compare0_uxtw\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t       (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (minus:SI (match_dup 1) (match_dup 2))))]\n+  \"\"\n+  \"subs\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"alus\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*sub_<shift>_<mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(minus:GPI (match_operand:GPI 3 \"register_operand\" \"r\")\n@@ -1460,6 +1665,20 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*sub_<shift>_si_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+         (minus:SI (match_operand:SI 3 \"register_operand\" \"r\")\n+\t\t   (ASHIFT:SI\n+\t\t    (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\")))))]\n+  \"\"\n+  \"sub\\\\t%w0, %w3, %w1, <shift> %2\"\n+  [(set_attr \"v8type\" \"alu_shift\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*sub_mul_imm_<mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(minus:GPI (match_operand:GPI 3 \"register_operand\" \"r\")\n@@ -1472,6 +1691,20 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*sub_mul_imm_si_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+         (minus:SI (match_operand:SI 3 \"register_operand\" \"r\")\n+\t\t   (mult:SI\n+\t\t    (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t    (match_operand:QI 2 \"aarch64_pwr_2_si\" \"n\")))))]\n+  \"\"\n+  \"sub\\\\t%w0, %w3, %w1, lsl %p2\"\n+  [(set_attr \"v8type\" \"alu_shift\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*sub_<optab><ALLX:mode>_<GPI:mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n@@ -1483,6 +1716,19 @@\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*sub_<optab><SHORT:mode>_si_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+         (minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t   (ANY_EXTEND:SI\n+\t\t    (match_operand:SHORT 2 \"register_operand\" \"r\")))))]\n+  \"\"\n+  \"sub\\\\t%w0, %w1, %w2, <su>xt<SHORT:size>\"\n+  [(set_attr \"v8type\" \"alu_ext\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*sub_<optab><ALLX:mode>_shft_<GPI:mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n@@ -1495,6 +1741,20 @@\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*sub_<optab><SHORT:mode>_shft_si_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+         (minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t   (ashift:SI (ANY_EXTEND:SI\n+\t\t\t       (match_operand:SHORT 2 \"register_operand\" \"r\"))\n+\t\t\t      (match_operand 3 \"aarch64_imm3\" \"Ui3\")))))]\n+  \"\"\n+  \"sub\\\\t%w0, %w1, %w2, <su>xt<SHORT:size> %3\"\n+  [(set_attr \"v8type\" \"alu_ext\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*sub_<optab><mode>_multp2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(minus:GPI (match_operand:GPI 4 \"register_operand\" \"r\")\n@@ -1509,6 +1769,22 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*sub_<optab>si_multp2_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+         (minus:SI (match_operand:SI 4 \"register_operand\" \"r\")\n+\t\t   (ANY_EXTRACT:SI\n+\t\t    (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t     (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n+\t\t    (match_operand 3 \"const_int_operand\" \"n\")\n+\t\t    (const_int 0)))))]\n+  \"aarch64_is_extend_from_extract (SImode, operands[2], operands[3])\"\n+  \"sub\\\\t%w0, %w4, %w1, <su>xt%e3 %p2\"\n+  [(set_attr \"v8type\" \"alu_ext\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*sub_uxt<mode>_multp2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=rk\")\n \t(minus:GPI (match_operand:GPI 4 \"register_operand\" \"r\")\n@@ -1525,6 +1801,24 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*sub_uxtsi_multp2_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=rk\")\n+\t(zero_extend:DI\n+         (minus:SI (match_operand:SI 4 \"register_operand\" \"r\")\n+\t\t   (and:SI\n+\t\t    (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t     (match_operand 2 \"aarch64_pwr_imm3\" \"Up3\"))\n+\t\t    (match_operand 3 \"const_int_operand\" \"n\")))))]\n+  \"aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),INTVAL (operands[3])) != 0\"\n+  \"*\n+  operands[3] = GEN_INT (aarch64_uxt_size (exact_log2 (INTVAL (operands[2])),\n+\t\t\t\t\t   INTVAL (operands[3])));\n+  return \\\"sub\\t%w0, %w4, %w1, uxt%e3 %p2\\\";\"\n+  [(set_attr \"v8type\" \"alu_ext\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"neg<mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(neg:GPI (match_operand:GPI 1 \"register_operand\" \"r\")))]\n@@ -1534,6 +1828,16 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*negsi2_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (neg:SI (match_operand:SI 1 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"neg\\\\t%w0, %w1\"\n+  [(set_attr \"v8type\" \"alu\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*neg<mode>2_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ (neg:GPI (match_operand:GPI 1 \"register_operand\" \"r\"))\n@@ -1546,6 +1850,19 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*negsi2_compare0_uxtw\"\n+  [(set (reg:CC_NZ CC_REGNUM)\n+\t(compare:CC_NZ (neg:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t       (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI (neg:SI (match_dup 1))))]\n+  \"\"\n+  \"negs\\\\t%w0, %w1\"\n+  [(set_attr \"v8type\" \"alus\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*neg_<shift>_<mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(neg:GPI (ASHIFT:GPI\n@@ -1557,6 +1874,19 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*neg_<shift>_si2_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+         (neg:SI (ASHIFT:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t  (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\")))))]\n+  \"\"\n+  \"neg\\\\t%w0, %w1, <shift> %2\"\n+  [(set_attr \"v8type\" \"alu_shift\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*neg_mul_imm_<mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(neg:GPI (mult:GPI\n@@ -1568,6 +1898,19 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*neg_mul_imm_si2_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+         (neg:SI (mult:SI\n+\t\t  (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t  (match_operand:QI 2 \"aarch64_pwr_2_si\" \"n\")))))]\n+  \"\"\n+  \"neg\\\\t%w0, %w1, lsl %p2\"\n+  [(set_attr \"v8type\" \"alu_shift\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"mul<mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n@@ -1578,6 +1921,18 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*mulsi3_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+         (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t  (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"mul\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"mult\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*madd<mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(plus:GPI (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n@@ -1589,6 +1944,19 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*maddsi_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+         (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t  (match_operand:SI 3 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"madd\\\\t%w0, %w1, %w2, %w3\"\n+  [(set_attr \"v8type\" \"madd\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*msub<mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(minus:GPI (match_operand:GPI 3 \"register_operand\" \"r\")\n@@ -1601,6 +1969,20 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*msubsi_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+         (minus:SI (match_operand:SI 3 \"register_operand\" \"r\")\n+\t\t   (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (match_operand:SI 2 \"register_operand\" \"r\")))))]\n+\n+  \"\"\n+  \"msub\\\\t%w0, %w1, %w2, %w3\"\n+  [(set_attr \"v8type\" \"madd\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"*mul<mode>_neg\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(mult:GPI (neg:GPI (match_operand:GPI 1 \"register_operand\" \"r\"))\n@@ -1612,6 +1994,19 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*mulsi_neg_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+         (mult:SI (neg:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t  (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+\n+  \"\"\n+  \"mneg\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"mult\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n (define_insn \"<su_optab>mulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (ANY_EXTEND:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n@@ -1682,6 +2077,18 @@\n    (set_attr \"mode\" \"<MODE>\")]\n )\n \n+;; zero_extend version of above\n+(define_insn \"*<su_optab>divsi3_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+         (ANY_DIV:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"<su>div\\\\t%w0, %w1, %w2\"\n+  [(set_attr \"v8type\" \"<su>div\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Comparison insns\n ;; -------------------------------------------------------------------"}]}