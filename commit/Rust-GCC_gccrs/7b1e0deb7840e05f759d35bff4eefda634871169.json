{"sha": "7b1e0deb7840e05f759d35bff4eefda634871169", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IxZTBkZWI3ODQwZTA1Zjc1OWQzNWJmZjRlZWZkYTYzNDg3MTE2OQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-11-17T13:42:05Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-11-17T13:42:05Z"}, "message": "avr.c (avr_print_operand_address): Use CONST_INT_P if appropriate.\n\n\t* config/avr/avr.c (avr_print_operand_address): Use CONST_INT_P if\n\tappropriate.\n\t(ashlqi3_out, ashlsi3_out, ashrqi3_out, ashrhi3_out): Same.\n\t(ashrsi3_out, lshrqi3_out, lshrhi3_out, lshrsi3_out): Same.\n\t(avr_rtx_costs_1, extra_constraint_Q): Same.\n\t(avr_address_cost): Use SUBREG_P if possible.\n\nFrom-SVN: r242544", "tree": {"sha": "978405013f1abfaea951005264663a7eff88f2f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978405013f1abfaea951005264663a7eff88f2f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b1e0deb7840e05f759d35bff4eefda634871169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1e0deb7840e05f759d35bff4eefda634871169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1e0deb7840e05f759d35bff4eefda634871169", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1e0deb7840e05f759d35bff4eefda634871169/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b05c3fd684219cde701d995c88277ced21dbc3b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b05c3fd684219cde701d995c88277ced21dbc3b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b05c3fd684219cde701d995c88277ced21dbc3b5"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "0efea0beb7ba973e630e1c11414e48a4214a28d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1e0deb7840e05f759d35bff4eefda634871169/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1e0deb7840e05f759d35bff4eefda634871169/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b1e0deb7840e05f759d35bff4eefda634871169", "patch": "@@ -1,3 +1,12 @@\n+2016-11-17  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.c (avr_print_operand_address): Use CONST_INT_P if\n+\tappropriate.\n+\t(ashlqi3_out, ashlsi3_out, ashrqi3_out, ashrhi3_out): Same.\n+\t(ashrsi3_out, lshrqi3_out, lshrhi3_out, lshrsi3_out): Same.\n+\t(avr_rtx_costs_1, extra_constraint_Q): Same.\n+\t(avr_address_cost): Use SUBREG_P if possible.\n+\n 2016-11-17  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/78383"}, {"sha": "caa9af05faed80f0365c273d52501c0cedd25165", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1e0deb7840e05f759d35bff4eefda634871169/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1e0deb7840e05f759d35bff4eefda634871169/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=7b1e0deb7840e05f759d35bff4eefda634871169", "patch": "@@ -2544,7 +2544,7 @@ avr_print_operand_address (FILE *file, machine_mode /*mode*/, rtx addr)\n           rtx x = addr;\n           if (GET_CODE (x) == CONST)\n             x = XEXP (x, 0);\n-          if (GET_CODE (x) == PLUS && GET_CODE (XEXP (x,1)) == CONST_INT)\n+          if (GET_CODE (x) == PLUS && CONST_INT_P (XEXP (x,1)))\n             {\n               /* Assembler gs() will implant word address.  Make offset\n                  a byte offset inside gs() for assembler.  This is\n@@ -6083,7 +6083,7 @@ out_shift_with_cnt (const char *templ, rtx_insn *insn, rtx operands[],\n const char *\n ashlqi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     {\n       int k;\n \n@@ -6180,7 +6180,7 @@ ashlqi3_out (rtx_insn *insn, rtx operands[], int *len)\n const char *\n ashlhi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     {\n       int scratch = (GET_CODE (PATTERN (insn)) == PARALLEL);\n       int ldi_ok = test_hard_reg_class (LD_REGS, operands[0]);\n@@ -6500,7 +6500,7 @@ avr_out_ashlpsi3 (rtx_insn *insn, rtx *op, int *plen)\n const char *\n ashlsi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     {\n       int k;\n       int *t = len;\n@@ -6589,7 +6589,7 @@ ashlsi3_out (rtx_insn *insn, rtx operands[], int *len)\n const char *\n ashrqi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     {\n       int k;\n \n@@ -6661,7 +6661,7 @@ ashrqi3_out (rtx_insn *insn, rtx operands[], int *len)\n const char *\n ashrhi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     {\n       int scratch = (GET_CODE (PATTERN (insn)) == PARALLEL);\n       int ldi_ok = test_hard_reg_class (LD_REGS, operands[0]);\n@@ -6883,7 +6883,7 @@ avr_out_ashrpsi3 (rtx_insn *insn, rtx *op, int *plen)\n const char *\n ashrsi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     {\n       int k;\n       int *t = len;\n@@ -6980,7 +6980,7 @@ ashrsi3_out (rtx_insn *insn, rtx operands[], int *len)\n const char *\n lshrqi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     {\n       int k;\n \n@@ -7075,7 +7075,7 @@ lshrqi3_out (rtx_insn *insn, rtx operands[], int *len)\n const char *\n lshrhi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     {\n       int scratch = (GET_CODE (PATTERN (insn)) == PARALLEL);\n       int ldi_ok = test_hard_reg_class (LD_REGS, operands[0]);\n@@ -7386,7 +7386,7 @@ avr_out_lshrpsi3 (rtx_insn *insn, rtx *op, int *plen)\n const char *\n lshrsi3_out (rtx_insn *insn, rtx operands[], int *len)\n {\n-  if (GET_CODE (operands[2]) == CONST_INT)\n+  if (CONST_INT_P (operands[2]))\n     {\n       int k;\n       int *t = len;\n@@ -10549,7 +10549,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n               return true;\n             }\n \t  *total = COSTS_N_INSNS (1);\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n \t  break;\n \n@@ -10568,7 +10568,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n                 *total = COSTS_N_INSNS (1) + *total;\n               return true;\n             }\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (2);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -10594,7 +10594,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n           break;\n \n \tcase SImode:\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (4);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -10645,7 +10645,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n     case IOR:\n       *total = COSTS_N_INSNS (GET_MODE_SIZE (mode));\n       *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n-      if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+      if (!CONST_INT_P (XEXP (x, 1)))\n \t*total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n       return true;\n \n@@ -10813,7 +10813,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n       switch (mode)\n \t{\n \tcase QImode:\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 4 : 17);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -10850,7 +10850,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n               return true;\n             }\n \n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 5 : 41);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -10922,7 +10922,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n           break;\n \n \tcase SImode:\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 7 : 113);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -10965,7 +10965,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n       switch (mode)\n \t{\n \tcase QImode:\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 4 : 17);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -10986,7 +10986,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n \t  break;\n \n \tcase HImode:\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 5 : 41);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -11059,7 +11059,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n           break;\n \n \tcase SImode:\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 7 : 113);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -11102,7 +11102,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n       switch (mode)\n \t{\n \tcase QImode:\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 4 : 17);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -11121,7 +11121,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n \t  break;\n \n \tcase HImode:\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 5 : 41);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -11195,7 +11195,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n           break;\n \n \tcase SImode:\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      *total = COSTS_N_INSNS (!speed ? 7 : 113);\n \t      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1,\n@@ -11239,14 +11239,14 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n \t{\n \tcase QImode:\n \t  *total = COSTS_N_INSNS (1);\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n \t    *total += avr_operand_rtx_cost (XEXP (x, 1), QImode, code,\n \t\t\t\t\t    1, speed);\n \t  break;\n \n         case HImode:\n \t  *total = COSTS_N_INSNS (2);\n-\t  if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+\t  if (!CONST_INT_P (XEXP (x, 1)))\n             *total += avr_operand_rtx_cost (XEXP (x, 1), HImode, code,\n \t\t\t\t\t    1, speed);\n \t  else if (INTVAL (XEXP (x, 1)) != 0)\n@@ -11261,7 +11261,7 @@ avr_rtx_costs_1 (rtx x, machine_mode mode, int outer_code ATTRIBUTE_UNUSED,\n \n         case SImode:\n           *total = COSTS_N_INSNS (4);\n-          if (GET_CODE (XEXP (x, 1)) != CONST_INT)\n+          if (!CONST_INT_P (XEXP (x, 1)))\n             *total += avr_operand_rtx_cost (XEXP (x, 1), SImode, code,\n \t\t\t\t\t    1, speed);\n \t  else if (INTVAL (XEXP (x, 1)) != 0)\n@@ -11327,7 +11327,7 @@ avr_address_cost (rtx x, machine_mode mode ATTRIBUTE_UNUSED,\n   if (GET_CODE (x) == PLUS\n       && CONST_INT_P (XEXP (x, 1))\n       && (REG_P (XEXP (x, 0))\n-          || GET_CODE (XEXP (x, 0)) == SUBREG))\n+          || SUBREG_P (XEXP (x, 0))))\n     {\n       if (INTVAL (XEXP (x, 1)) > MAX_LD_OFFSET(mode))\n         cost = 18;\n@@ -11356,14 +11356,15 @@ int\n extra_constraint_Q (rtx x)\n {\n   int ok = 0;\n+  rtx plus = XEXP (x, 0);\n \n-  if (GET_CODE (XEXP (x,0)) == PLUS\n-      && REG_P (XEXP (XEXP (x,0), 0))\n-      && GET_CODE (XEXP (XEXP (x,0), 1)) == CONST_INT\n-      && (INTVAL (XEXP (XEXP (x,0), 1))\n+  if (GET_CODE (plus) == PLUS\n+      && REG_P (XEXP (plus, 0))\n+      && CONST_INT_P (XEXP (plus, 1))\n+      && (INTVAL (XEXP (plus, 1))\n \t  <= MAX_LD_OFFSET (GET_MODE (x))))\n     {\n-      rtx xx = XEXP (XEXP (x,0), 0);\n+      rtx xx = XEXP (plus, 0);\n       int regno = REGNO (xx);\n \n       ok = (/* allocate pseudos */"}]}