{"sha": "865f3b05ad3085e7fe1545fdffb9b5fca3db6412", "node_id": "C_kwDOANBUbNoAKDg2NWYzYjA1YWQzMDg1ZTdmZTE1NDVmZGZmYjliNWZjYTNkYjY0MTI", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-04-03T09:03:37Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-05T08:20:48Z"}, "message": "expand: Add builtin attribute identification\n\nAdd a function to identify builtin attributes and skip those on proc\nmacro expansion phase.\n\ngcc/rust/ChangeLog:\n\n\t* expand/rust-expand-visitor.cc (ExpandVisitor::visit_outer_attrs):\n\tChange condition order.\n\t(ExpandVisitor::visit_inner_using_attrs): Likewise.\n\t(ExpandVisitor::visit_attrs_with_derive): Likewise.\n\t(ExpandVisitor::is_builtin): Add builtin identification\n\tfunction.\n\t* expand/rust-expand-visitor.h: Add function prototype.\n\t* util/rust-attributes.cc: Add missing rustc_builtin_macro\n\tattribute.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "691dc76406ee0a51b7d962abe05c84bb9c1b558c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/691dc76406ee0a51b7d962abe05c84bb9c1b558c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/865f3b05ad3085e7fe1545fdffb9b5fca3db6412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865f3b05ad3085e7fe1545fdffb9b5fca3db6412", "html_url": "https://github.com/Rust-GCC/gccrs/commit/865f3b05ad3085e7fe1545fdffb9b5fca3db6412", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865f3b05ad3085e7fe1545fdffb9b5fca3db6412/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7302b77e3915c55ac043401696c84fcdbb96336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7302b77e3915c55ac043401696c84fcdbb96336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7302b77e3915c55ac043401696c84fcdbb96336"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "dac19481a7e738d4bf3136f6d924ffdb7bb51a1d", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865f3b05ad3085e7fe1545fdffb9b5fca3db6412/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865f3b05ad3085e7fe1545fdffb9b5fca3db6412/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=865f3b05ad3085e7fe1545fdffb9b5fca3db6412", "patch": "@@ -17,6 +17,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-expand-visitor.h\"\n+#include \"rust-attributes.h\"\n \n namespace Rust {\n \n@@ -1400,8 +1401,15 @@ ExpandVisitor::visit_outer_attrs (T &item, std::vector<AST::Attribute> &attrs)\n     {\n       auto current = *it;\n \n-      it = attrs.erase (it);\n-      expand_outer_attribute (item, current.get_path ());\n+      if (!is_builtin (current) && !is_derive (current))\n+\t{\n+\t  it = attrs.erase (it);\n+\t  expand_outer_attribute (item, current.get_path ());\n+\t}\n+      else\n+\t{\n+\t  it++;\n+\t}\n     }\n }\n \n@@ -1429,8 +1437,15 @@ ExpandVisitor::visit_inner_using_attrs (T &item,\n     {\n       auto current = *it;\n \n-      it = attrs.erase (it);\n-      expand_inner_attribute (item, current.get_path ());\n+      if (!is_builtin (current) && !is_derive (current))\n+\t{\n+\t  it = attrs.erase (it);\n+\t  expand_inner_attribute (item, current.get_path ());\n+\t}\n+      else\n+\t{\n+\t  it++;\n+\t}\n     }\n }\n \n@@ -1476,7 +1491,7 @@ ExpandVisitor::visit_attrs_with_derive (T &item)\n     {\n       auto current = *it;\n \n-      if (is_derive (current))\n+      if (!is_builtin (current) && is_derive (current))\n \t{\n \t  it = attrs.erase (it);\n \t  // Downcasting checked in is_derive\n@@ -1500,4 +1515,14 @@ ExpandVisitor::is_derive (AST::Attribute &attr)\n \t && !segments.empty () && \"derive\" == segments[0].get_segment_name ();\n }\n \n+bool\n+ExpandVisitor::is_builtin (AST::Attribute &attr)\n+{\n+  auto &segments = attr.get_path ().get_segments ();\n+  return !segments.empty ()\n+\t && !Analysis::BuiltinAttributeMappings::get ()\n+\t       ->lookup_builtin (segments[0].get_segment_name ())\n+\t       .is_error ();\n+}\n+\n } // namespace Rust"}, {"sha": "c2b3e781808faef852f0bc6eb8b706024b848964", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865f3b05ad3085e7fe1545fdffb9b5fca3db6412/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865f3b05ad3085e7fe1545fdffb9b5fca3db6412/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=865f3b05ad3085e7fe1545fdffb9b5fca3db6412", "patch": "@@ -339,6 +339,8 @@ class ExpandVisitor : public AST::ASTVisitor\n \n   template <typename T> void visit_attrs_with_derive (T &item);\n \n+  bool is_builtin (AST::Attribute &attr);\n+\n private:\n   MacroExpander &expander;\n };"}, {"sha": "e727fbcdfb87af25f26feb23ed02a15cbb51a292", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865f3b05ad3085e7fe1545fdffb9b5fca3db6412/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865f3b05ad3085e7fe1545fdffb9b5fca3db6412/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=865f3b05ad3085e7fe1545fdffb9b5fca3db6412", "patch": "@@ -39,6 +39,7 @@ static const BuiltinAttrDefinition __definitions[]\n      {\"link_section\", CODE_GENERATION},\n      {\"no_mangle\", CODE_GENERATION},\n      {\"repr\", CODE_GENERATION},\n+     {\"rustc_builtin_macro\", EXPANSION},\n      {\"path\", EXPANSION},\n      {\"macro_use\", NAME_RESOLUTION},\n      // FIXME: This is not implemented yet, see"}]}