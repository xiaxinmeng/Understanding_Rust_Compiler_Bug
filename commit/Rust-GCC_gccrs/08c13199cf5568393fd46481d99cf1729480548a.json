{"sha": "08c13199cf5568393fd46481d99cf1729480548a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjMTMxOTljZjU1NjgzOTNmZDQ2NDgxZDk5Y2YxNzI5NDgwNTQ4YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-09-05T09:17:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-09-05T09:17:49Z"}, "message": "cfgloop.c (mark_loop_for_removal): New function.\n\n2014-09-05  Richard Biener  <rguenther@suse.de>\n\n\t* cfgloop.c (mark_loop_for_removal): New function.\n\t* cfgloop.h (mark_loop_for_removal): Declare.\n\t* cfghooks.c (delete_basic_block): Use mark_loop_for_removal.\n\t(merge_blocks): Likewise.\n\t(duplicate_block): Likewise.\n\t* except.c (sjlj_emit_dispatch_table): Likewise.\n\t* tree-eh.c (cleanup_empty_eh_merge_phis): Likewise.\n\t* tree-ssa-threadupdate.c (ssa_redirect_edges): Likewise.\n\t(thread_through_loop_header): Likewise.\n\nFrom-SVN: r214942", "tree": {"sha": "498eb05797e1926e45952564278499d1d7db531b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/498eb05797e1926e45952564278499d1d7db531b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08c13199cf5568393fd46481d99cf1729480548a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c13199cf5568393fd46481d99cf1729480548a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c13199cf5568393fd46481d99cf1729480548a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c13199cf5568393fd46481d99cf1729480548a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f65586dcd19846071fd94fed4fb1bf91843887d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65586dcd19846071fd94fed4fb1bf91843887d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65586dcd19846071fd94fed4fb1bf91843887d1"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "9c329a9189ee4d246059fadbe3ce628a55a3c1db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c13199cf5568393fd46481d99cf1729480548a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c13199cf5568393fd46481d99cf1729480548a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08c13199cf5568393fd46481d99cf1729480548a", "patch": "@@ -1,3 +1,15 @@\n+2014-09-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgloop.c (mark_loop_for_removal): New function.\n+\t* cfgloop.h (mark_loop_for_removal): Declare.\n+\t* cfghooks.c (delete_basic_block): Use mark_loop_for_removal.\n+\t(merge_blocks): Likewise.\n+\t(duplicate_block): Likewise.\n+\t* except.c (sjlj_emit_dispatch_table): Likewise.\n+\t* tree-eh.c (cleanup_empty_eh_merge_phis): Likewise.\n+\t* tree-ssa-threadupdate.c (ssa_redirect_edges): Likewise.\n+\t(thread_through_loop_header): Likewise.\n+\n 2014-09-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/63148"}, {"sha": "fa18214e1ff4a6a9fbd3f29aaf28271c9d599c6f", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=08c13199cf5568393fd46481d99cf1729480548a", "patch": "@@ -569,14 +569,10 @@ delete_basic_block (basic_block bb)\n       struct loop *loop = bb->loop_father;\n \n       /* If we remove the header or the latch of a loop, mark the loop for\n-\t removal by setting its header and latch to NULL.  */\n+\t removal.  */\n       if (loop->latch == bb\n \t  || loop->header == bb)\n-\t{\n-\t  loop->header = NULL;\n-\t  loop->latch = NULL;\n-\t  loops_state_set (LOOPS_NEED_FIXUP);\n-\t}\n+\tmark_loop_for_removal (loop);\n \n       remove_bb_from_loops (bb);\n     }\n@@ -760,11 +756,7 @@ merge_blocks (basic_block a, basic_block b)\n \t  /* ... we merge two loop headers, in which case we kill\n \t     the inner loop.  */\n \t  if (b->loop_father->header == b)\n-\t    {\n-\t      b->loop_father->header = NULL;\n-\t      b->loop_father->latch = NULL;\n-\t      loops_state_set (LOOPS_NEED_FIXUP);\n-\t    }\n+\t    mark_loop_for_removal (b->loop_father);\n \t}\n       /* If we merge a loop header into its predecessor, update the loop\n \t structure.  */\n@@ -1099,9 +1091,7 @@ duplicate_block (basic_block bb, edge e, basic_block after)\n \t  && cloop->header == bb)\n \t{\n \t  add_bb_to_loop (new_bb, loop_outer (cloop));\n-\t  cloop->header = NULL;\n-\t  cloop->latch = NULL;\n-\t  loops_state_set (LOOPS_NEED_FIXUP);\n+\t  mark_loop_for_removal (cloop);\n \t}\n       else\n \t{"}, {"sha": "789c45a8f0348fcfefd833d3e8d09e8e131662b2", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=08c13199cf5568393fd46481d99cf1729480548a", "patch": "@@ -1921,3 +1921,13 @@ bb_loop_depth (const_basic_block bb)\n {\n   return bb->loop_father ? loop_depth (bb->loop_father) : 0;\n }\n+\n+/* Marks LOOP for removal and sets LOOPS_NEED_FIXUP.  */\n+\n+void\n+mark_loop_for_removal (loop_p loop)\n+{\n+  loop->header = NULL;\n+  loop->latch = NULL;\n+  loops_state_set (LOOPS_NEED_FIXUP);\n+}"}, {"sha": "e868f5d4ba1490b99216672b6352b6e78afe68df", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=08c13199cf5568393fd46481d99cf1729480548a", "patch": "@@ -336,6 +336,8 @@ struct loop * loop_version (struct loop *, void *,\n extern bool remove_path (edge);\n extern void unloop (struct loop *, bool *, bitmap);\n extern void scale_loop_frequencies (struct loop *, int, int);\n+void mark_loop_for_removal (loop_p);\n+\n \n /* Induction variable analysis.  */\n "}, {"sha": "78518ea808be6847131ecf40c14b6cce362f74f7", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=08c13199cf5568393fd46481d99cf1729480548a", "patch": "@@ -1375,10 +1375,7 @@ sjlj_emit_dispatch_table (rtx_code_label *dispatch_label, int num_dispatch)\n \t      {\n \t\tfor (loop = bb->loop_father;\n \t\t     loop_outer (loop); loop = loop_outer (loop))\n-\t\t  {\n-\t\t    loop->header = NULL;\n-\t\t    loop->latch = NULL;\n-\t\t  }\n+\t\t  mark_loop_for_removal (loop);\n \t      }\n \t  }\n "}, {"sha": "d8032538c0ab1fae0a8080c588518ca051e035af", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=08c13199cf5568393fd46481d99cf1729480548a", "patch": "@@ -4171,10 +4171,9 @@ cleanup_empty_eh_merge_phis (basic_block new_bb, basic_block old_bb,\n \t   and mark the other loop as possibly having multiple latches.  */\n \tif (e->dest == e->dest->loop_father->header)\n \t  {\n-\t    e->dest->loop_father->header = NULL;\n-\t    e->dest->loop_father->latch = NULL;\n+\t    mark_loop_for_removal (e->dest->loop_father);\n \t    new_bb->loop_father->latch = NULL;\n-\t    loops_state_set (LOOPS_NEED_FIXUP|LOOPS_MAY_HAVE_MULTIPLE_LATCHES);\n+\t    loops_state_set (LOOPS_MAY_HAVE_MULTIPLE_LATCHES);\n \t  }\n \tredirect_eh_edge_1 (e, new_bb, change_region);\n \tredirect_edge_succ (e, new_bb);"}, {"sha": "ae1e7bacb5a5bd8e5ba6df791d61d8a971b5f266", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c13199cf5568393fd46481d99cf1729480548a/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=08c13199cf5568393fd46481d99cf1729480548a", "patch": "@@ -766,11 +766,7 @@ ssa_redirect_edges (struct redirection_data **slot,\n \n \t  /* If we redirect a loop latch edge cancel its loop.  */\n \t  if (e->src == e->src->loop_father->latch)\n-\t    {\n-\t      e->src->loop_father->header = NULL;\n-\t      e->src->loop_father->latch = NULL;\n-\t      loops_state_set (LOOPS_NEED_FIXUP);\n-\t    }\n+\t    mark_loop_for_removal (e->src->loop_father);\n \n \t  /* Redirect the incoming edge (possibly to the joiner block) to the\n \t     appropriate duplicate block.  */\n@@ -1304,9 +1300,7 @@ thread_through_loop_header (struct loop *loop, bool may_peel_loop_headers)\n     {\n       /* If the loop ceased to exist, mark it as such, and thread through its\n \t original header.  */\n-      loop->header = NULL;\n-      loop->latch = NULL;\n-      loops_state_set (LOOPS_NEED_FIXUP);\n+      mark_loop_for_removal (loop);\n       return thread_block (header, false);\n     }\n "}]}