{"sha": "657a9735339f6e5b0723bc24f74ad55d78daae8e", "node_id": "C_kwDOANBUbNoAKDY1N2E5NzM1MzM5ZjZlNWIwNzIzYmMyNGY3NGFkNTVkNzhkYWFlOGU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-28T09:57:37Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-10-28T09:57:37Z"}, "message": "Add support for constants within blocks\n\nBlockExpr's can contain constants these are Items which can exist within\nthe BlockExpr Stmt list. Items like structs, functions and constants all\ninherit from Item so there is some duplication of code but we still\ndo not support the forward declared Items within a stmt list so the\nduplication will need to be fixed as part of that bug.\n\nFixes #711", "tree": {"sha": "9a459c90843a7b2ac8bb33517dd95756b991571b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a459c90843a7b2ac8bb33517dd95756b991571b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/657a9735339f6e5b0723bc24f74ad55d78daae8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657a9735339f6e5b0723bc24f74ad55d78daae8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/657a9735339f6e5b0723bc24f74ad55d78daae8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/657a9735339f6e5b0723bc24f74ad55d78daae8e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "161a690d21044f5211ad2b55ae6b06f91bbd9106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/161a690d21044f5211ad2b55ae6b06f91bbd9106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/161a690d21044f5211ad2b55ae6b06f91bbd9106"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "21e581478a030d1130cca87441086f37c72247d9", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657a9735339f6e5b0723bc24f74ad55d78daae8e/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657a9735339f6e5b0723bc24f74ad55d78daae8e/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=657a9735339f6e5b0723bc24f74ad55d78daae8e", "patch": "@@ -48,6 +48,33 @@ class CompileStmt : public HIRCompileBase\n     translated = CompileExpr::Compile (stmt.get_expr (), ctx);\n   }\n \n+  void visit (HIR::ConstantItem &constant) override\n+  {\n+    TyTy::BaseType *resolved_type = nullptr;\n+    bool ok\n+      = ctx->get_tyctx ()->lookup_type (constant.get_mappings ().get_hirid (),\n+\t\t\t\t\t&resolved_type);\n+    rust_assert (ok);\n+\n+    ::Btype *type = TyTyResolveCompile::compile (ctx, resolved_type);\n+    Bexpression *value = CompileExpr::Compile (constant.get_expr (), ctx);\n+\n+    const Resolver::CanonicalPath *canonical_path = nullptr;\n+    rust_assert (ctx->get_mappings ()->lookup_canonical_path (\n+      constant.get_mappings ().get_crate_num (),\n+      constant.get_mappings ().get_nodeid (), &canonical_path));\n+\n+    std::string ident = canonical_path->get ();\n+    Bexpression *const_expr\n+      = ctx->get_backend ()->named_constant_expression (type, ident, value,\n+\t\t\t\t\t\t\tconstant.get_locus ());\n+\n+    ctx->push_const (const_expr);\n+    ctx->insert_const_decl (constant.get_mappings ().get_hirid (), const_expr);\n+\n+    translated = const_expr;\n+  }\n+\n   void visit (HIR::LetStmt &stmt) override\n   {\n     // nothing to do"}, {"sha": "eab0922ca7d3cae3b5b4845189ff6806f581aa63", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657a9735339f6e5b0723bc24f74ad55d78daae8e/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657a9735339f6e5b0723bc24f74ad55d78daae8e/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=657a9735339f6e5b0723bc24f74ad55d78daae8e", "patch": "@@ -83,6 +83,34 @@ class ASTLoweringStmt : public ASTLoweringBase\n     mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);\n   }\n \n+  void visit (AST::ConstantItem &constant) override\n+  {\n+    HIR::Visibility vis = HIR::Visibility::create_public ();\n+\n+    HIR::Type *type = ASTLoweringType::translate (constant.get_type ().get ());\n+    HIR::Expr *expr = ASTLoweringExpr::translate (constant.get_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, constant.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n+\n+    HIR::ConstantItem *constant_item\n+      = new HIR::ConstantItem (mapping, constant.get_identifier (), vis,\n+\t\t\t       std::unique_ptr<HIR::Type> (type),\n+\t\t\t       std::unique_ptr<HIR::Expr> (expr),\n+\t\t\t       constant.get_outer_attrs (),\n+\t\t\t       constant.get_locus ());\n+    translated = constant_item;\n+\n+    mappings->insert_hir_item (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       constant_item);\n+    mappings->insert_hir_stmt (mapping.get_crate_num (), mapping.get_hirid (),\n+\t\t\t       constant_item);\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       constant.get_locus ());\n+  }\n+\n   void visit (AST::LetStmt &stmt) override\n   {\n     HIR::Pattern *variables"}, {"sha": "98fcaf2eda5baa2e400946bdcc20a174fe2a6676", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657a9735339f6e5b0723bc24f74ad55d78daae8e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657a9735339f6e5b0723bc24f74ad55d78daae8e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=657a9735339f6e5b0723bc24f74ad55d78daae8e", "patch": "@@ -51,6 +51,30 @@ class ResolveStmt : public ResolverBase\n     ResolveExpr::go (stmt.get_expr ().get (), stmt.get_node_id ());\n   }\n \n+  void visit (AST::ConstantItem &constant) override\n+  {\n+    auto path = ResolveConstantItemToCanonicalPath::resolve (constant);\n+    resolver->get_name_scope ().insert (\n+      path, constant.get_node_id (), constant.get_locus (), false,\n+      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n+\tRichLocation r (constant.get_locus ());\n+\tr.add_range (locus);\n+\trust_error_at (r, \"redefined multiple times\");\n+      });\n+    resolver->insert_new_definition (constant.get_node_id (),\n+\t\t\t\t     Definition{constant.get_node_id (),\n+\t\t\t\t\t\tconstant.get_node_id ()});\n+\n+    ResolveType::go (constant.get_type ().get (), constant.get_node_id ());\n+    ResolveExpr::go (constant.get_expr ().get (), constant.get_node_id ());\n+\n+    // the mutability checker needs to verify for immutable decls the number\n+    // of assignments are <1. This marks an implicit assignment\n+    resolver->mark_decl_mutability (constant.get_node_id (), false);\n+    resolver->mark_assignment_to_decl (constant.get_node_id (),\n+\t\t\t\t       constant.get_node_id ());\n+  }\n+\n   void visit (AST::LetStmt &stmt) override\n   {\n     if (stmt.has_init_expr ())"}, {"sha": "74bc0374cd8b6a2aaf87f4b4e3a80c070d297549", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657a9735339f6e5b0723bc24f74ad55d78daae8e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657a9735339f6e5b0723bc24f74ad55d78daae8e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=657a9735339f6e5b0723bc24f74ad55d78daae8e", "patch": "@@ -55,6 +55,19 @@ class TypeCheckStmt : public TypeCheckBase\n       = TyTy::TupleType::get_unit_type (stmt.get_mappings ().get_hirid ());\n   }\n \n+  void visit (HIR::ConstantItem &constant) override\n+  {\n+    TyTy::BaseType *type = TypeCheckType::Resolve (constant.get_type ());\n+    TyTy::BaseType *expr_type\n+      = TypeCheckExpr::Resolve (constant.get_expr (), false);\n+\n+    infered = type->unify (expr_type);\n+    context->insert_type (constant.get_mappings (), infered);\n+\n+    // notify the constant folder of this\n+    ConstFold::ConstFoldItem::fold (constant);\n+  }\n+\n   void visit (HIR::LetStmt &stmt) override\n   {\n     infered = new TyTy::TupleType (stmt.get_mappings ().get_hirid ());"}, {"sha": "d06324e8e65445e542693483311c2ba5bf864184", "filename": "gcc/testsuite/rust/compile/torture/constant2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/657a9735339f6e5b0723bc24f74ad55d78daae8e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/657a9735339f6e5b0723bc24f74ad55d78daae8e/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant2.rs?ref=657a9735339f6e5b0723bc24f74ad55d78daae8e", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    const C: usize = 42;\n+\n+    let _a = C;\n+    let _b: [i32; C] = [0; C];\n+}"}]}