{"sha": "fafe9318b735a4b3276b39a73c42aef7a69249d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmZTkzMThiNzM1YTRiMzI3NmIzOWE3M2M0MmFlZjdhNjkyNDlkMQ==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2016-06-29T10:16:43Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-06-29T10:16:43Z"}, "message": "re PR tree-optimization/70729 (Loop marked with omp simd pragma is not vectorized)\n\ngcc/\n\n2016-06-29  Yuri Rumyantsev  <ysrumyan@gmail.com>\n\n\tPR tree-optimization/70729\n\t* tree-ssa-loop-im.c (ref_indep_loop_p_1): Consider memory reference as\n\tindependent in loops having positive safelen value.\n\t* tree-vect-loop.c (vect_transform_loop): Clear-up safelen value since\n\tit may be not valid after vectorization.\n\ngcc/testsuite/\n\n2016-06-29  Yuri Rumyantsev  <ysrumyan@gmail.com>\n\n\tPR tree-optimization/70729\n\t* g++.dg/vect/pr70729.cc: New test.\n\nFrom-SVN: r237844", "tree": {"sha": "539485ffd799c2f0f5e94bdb32f89232d1dc070d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/539485ffd799c2f0f5e94bdb32f89232d1dc070d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fafe9318b735a4b3276b39a73c42aef7a69249d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafe9318b735a4b3276b39a73c42aef7a69249d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fafe9318b735a4b3276b39a73c42aef7a69249d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafe9318b735a4b3276b39a73c42aef7a69249d1/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54d19c3b7fb38097973a57b6e822e15cbcbd031d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d19c3b7fb38097973a57b6e822e15cbcbd031d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d19c3b7fb38097973a57b6e822e15cbcbd031d"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "a086524676949c56077e275058a43173aeddb52b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe9318b735a4b3276b39a73c42aef7a69249d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe9318b735a4b3276b39a73c42aef7a69249d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fafe9318b735a4b3276b39a73c42aef7a69249d1", "patch": "@@ -1,3 +1,11 @@\n+2016-06-29  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\tPR tree-optimization/70729\n+\t* tree-ssa-loop-im.c (ref_indep_loop_p_1): Consider memory reference as\n+\tindependent in loops having positive safelen value.\n+\t* tree-vect-loop.c (vect_transform_loop): Clear-up safelen value since\n+\tit may be not valid after vectorization.\n+\n 2016-06-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/71625"}, {"sha": "471e39a24e4f5489110013eefd8932f970341e0b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe9318b735a4b3276b39a73c42aef7a69249d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe9318b735a4b3276b39a73c42aef7a69249d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fafe9318b735a4b3276b39a73c42aef7a69249d1", "patch": "@@ -1,3 +1,8 @@\n+2016-06-29  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\tPR tree-optimization/70729\n+\t* g++.dg/vect/pr70729.cc: New test.\n+\n 2016-06-29  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-c++-common/gomp/cancel-1.c: Extend."}, {"sha": "0d5d353faebfe6a701b88c2cd20add3895e5d0ac", "filename": "gcc/testsuite/g++.dg/vect/pr70729.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe9318b735a4b3276b39a73c42aef7a69249d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe9318b735a4b3276b39a73c42aef7a69249d1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729.cc?ref=fafe9318b735a4b3276b39a73c42aef7a69249d1", "patch": "@@ -0,0 +1,78 @@\n+// { dg-do compile }\n+// { dg-require-effective-target vect_simd_clones }\n+// { dg-additional-options \"-Ofast\" }\n+// { dg-additional-options \"-mavx2 -fopenmp-simd\" { target x86_64-*-* i?86-*-* } }\n+\n+\n+#include <string.h>\n+#include <xmmintrin.h>\n+\n+inline void* my_alloc(size_t bytes) {return _mm_malloc(bytes, 128);}\n+inline void my_free(void* memory) {_mm_free(memory);}\n+\n+template <typename T>\n+class Vec\n+{\n+  const int isize;\n+\tT* data;\n+\n+public:\n+\n+  Vec (int n) : isize(n) {data = (T*)my_alloc(isize*sizeof(T));}\n+  ~Vec () {my_free(data);}\n+\n+  Vec& operator = (const Vec& other)\t\n+    {\n+      if (this != &other)\n+\tmemcpy(data, other.data, isize*sizeof(T));\n+      return *this;\n+    }\n+\n+  T& operator [] (int i) {return data[i];}\n+  const T& operator [] (int i) const {return data[i];}\n+  T& at (int i)  {return data[i];}\n+  const T& at (int i) const {return data[i];}\n+\n+  operator T* ()  {return data;}\n+  int size () const {return isize;}\n+};\n+\n+template <typename T>                                  \n+class Cl\n+{\n+public:\n+\n+  Cl (int n, int m);\n+  const int N, M;\n+  Vec<T> v_x, v_y;\n+  Vec<int> v_i;\n+  Vec<float> v_z;\n+};\n+\n+struct Ss\n+{\n+    const int S_n, S_m;\n+    Cl<float> v1;\n+    float* C1;\n+    float* C2;\n+    Ss (int n1, int n2): S_n(n1), S_m(n2), v1(n1, n2)\n+      {\n+\tC1 = new float[n1 * 3];\n+\tC2 = new float[n2 * 4]; \n+      }\n+\n+    ~Ss () { delete C1; delete C2;}\n+   void foo (float *in, float w);\n+};\n+void Ss::foo (float *in, float w)\n+{\n+#pragma omp simd\n+  for (int i=0; i<S_n; i++)\n+    {\n+      float w1 = C2[S_n + i] * w;\n+      v1.v_i[i] += (int)w1;\n+      C1[S_n + i] += w1;\n+    }\n+}\n+ \n+// { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" } }"}, {"sha": "ee048263ca2863f56f48a87cd35a5d16a5dc3e69", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe9318b735a4b3276b39a73c42aef7a69249d1/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe9318b735a4b3276b39a73c42aef7a69249d1/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=fafe9318b735a4b3276b39a73c42aef7a69249d1", "patch": "@@ -2128,6 +2128,17 @@ ref_indep_loop_p_1 (struct loop *loop, im_mem_ref *ref, bool stored_p)\n   if (bitmap_bit_p (refs_to_check, UNANALYZABLE_MEM_ID))\n     return false;\n \n+  if (loop->safelen > 0)\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf(dump_file,\"Consider REF independent in loop#%d\\n\", loop->num);\n+\t  print_generic_expr(dump_file, ref->mem.ref, TDF_SLIM);\n+\t  fprintf(dump_file, \"\\n\");\n+\t}\n+      return true;\n+    }\n+\n   EXECUTE_IF_SET_IN_BITMAP (refs_to_check, 0, i, bi)\n     {\n       aref = memory_accesses.refs_list[i];"}, {"sha": "5e4007642b7045e8b65710ed52c30a4eee504e8e", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe9318b735a4b3276b39a73c42aef7a69249d1/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe9318b735a4b3276b39a73c42aef7a69249d1/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=fafe9318b735a4b3276b39a73c42aef7a69249d1", "patch": "@@ -6968,6 +6968,9 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n   FOR_EACH_VEC_ELT (LOOP_VINFO_SLP_INSTANCES (loop_vinfo), i, instance)\n     vect_free_slp_instance (instance);\n   LOOP_VINFO_SLP_INSTANCES (loop_vinfo).release ();\n+  /* Clear-up safelen field since its value is invalid after vectorization\n+     since vectorized loop can have loop-carried dependencies.  */\n+  loop->safelen = 0;\n }\n \n /* The code below is trying to perform simple optimization - revert"}]}