{"sha": "c1a2a0b833fb3e9db7258fe991579012d3872386", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFhMmEwYjgzM2ZiM2U5ZGI3MjU4ZmU5OTE1NzkwMTJkMzg3MjM4Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-05-02T15:00:47Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-05-02T15:00:47Z"}, "message": "Remove LTO_STREAMER_DEBUG (PR lto/79489).\n\n2017-05-02  Martin Liska  <mliska@suse.cz>\n\n\tPR lto/79489.\n\t* lto-streamer-in.c (lto_read_tree_1): Remove\n\tLTO_STREAMER_DEBUG.\n\t* lto-streamer.c (struct tree_hash_entry): Likewise.\n\t(struct tree_entry_hasher): Likewise.\n\t(tree_entry_hasher::hash): Likewise.\n\t(tree_entry_hasher::equal): Likewise.\n\t(lto_streamer_init): Likewise.\n\t(lto_orig_address_map): Likewise.\n\t(lto_orig_address_get): Likewise.\n\t(lto_orig_address_remove): Likewise.\n\t* lto-streamer.h: Likewise.\n\t* tree-streamer-in.c (streamer_alloc_tree): Likewise.\n\t* tree-streamer-out.c (streamer_write_tree_header): Likewise.\n\nFrom-SVN: r247501", "tree": {"sha": "7d1334a9a9a0f813147025b8dcc517fb0a253c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d1334a9a9a0f813147025b8dcc517fb0a253c18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1a2a0b833fb3e9db7258fe991579012d3872386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a2a0b833fb3e9db7258fe991579012d3872386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1a2a0b833fb3e9db7258fe991579012d3872386", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1a2a0b833fb3e9db7258fe991579012d3872386/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1853f5c77f124d60d60fcc0859b742d22cd4d5c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1853f5c77f124d60d60fcc0859b742d22cd4d5c0"}], "stats": {"total": 158, "additions": 17, "deletions": 141}, "files": [{"sha": "a24887e2e2fa6caaa2bd8a69036d2b66d25c6647", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1a2a0b833fb3e9db7258fe991579012d3872386", "patch": "@@ -1,3 +1,20 @@\n+2017-05-02  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/79489.\n+\t* lto-streamer-in.c (lto_read_tree_1): Remove\n+\tLTO_STREAMER_DEBUG.\n+\t* lto-streamer.c (struct tree_hash_entry): Likewise.\n+\t(struct tree_entry_hasher): Likewise.\n+\t(tree_entry_hasher::hash): Likewise.\n+\t(tree_entry_hasher::equal): Likewise.\n+\t(lto_streamer_init): Likewise.\n+\t(lto_orig_address_map): Likewise.\n+\t(lto_orig_address_get): Likewise.\n+\t(lto_orig_address_remove): Likewise.\n+\t* lto-streamer.h: Likewise.\n+\t* tree-streamer-in.c (streamer_alloc_tree): Likewise.\n+\t* tree-streamer-out.c (streamer_write_tree_header): Likewise.\n+\n 2017-05-02  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* config/i386/avx512fintrin.h (_mm_mask_add_round_sd)"}, {"sha": "6da217d558986d20381fa9a10678b2bf1ac08670", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=c1a2a0b833fb3e9db7258fe991579012d3872386", "patch": "@@ -1337,12 +1337,6 @@ lto_read_tree_1 (struct lto_input_block *ib, struct data_in *data_in, tree expr)\n       && TREE_CODE (expr) != FUNCTION_DECL\n       && TREE_CODE (expr) != TRANSLATION_UNIT_DECL)\n     DECL_INITIAL (expr) = stream_read_tree (ib, data_in);\n-\n-#ifdef LTO_STREAMER_DEBUG\n-  /* Remove the mapping to RESULT's original address set by\n-     streamer_alloc_tree.  */\n-  lto_orig_address_remove (expr);\n-#endif\n }\n \n /* Read the physical representation of a tree node with tag TAG from"}, {"sha": "74fe0e259bfd4bc26df31d2ed29ad5fc44d5a0c6", "filename": "gcc/lto-streamer.c", "status": "modified", "additions": 0, "deletions": 92, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2Flto-streamer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2Flto-streamer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.c?ref=c1a2a0b833fb3e9db7258fe991579012d3872386", "patch": "@@ -257,35 +257,6 @@ print_lto_report (const char *s)\n \t     lto_section_name[i], lto_stats.section_size[i]);\n }\n \n-\n-#ifdef LTO_STREAMER_DEBUG\n-struct tree_hash_entry\n-{\n-  tree key;\n-  intptr_t value;\n-};\n-\n-struct tree_entry_hasher : nofree_ptr_hash <tree_hash_entry>\n-{\n-  static inline hashval_t hash (const tree_hash_entry *);\n-  static inline bool equal (const tree_hash_entry *, const tree_hash_entry *);\n-};\n-\n-inline hashval_t\n-tree_entry_hasher::hash (const tree_hash_entry *e)\n-{\n-  return htab_hash_pointer (e->key);\n-}\n-\n-inline bool\n-tree_entry_hasher::equal (const tree_hash_entry *e1, const tree_hash_entry *e2)\n-{\n-  return (e1->key == e2->key);\n-}\n-\n-static hash_table<tree_entry_hasher> *tree_htab;\n-#endif\n-\n /* Initialization common to the LTO reader and writer.  */\n \n void\n@@ -297,10 +268,6 @@ lto_streamer_init (void)\n      handle it.  */\n   if (flag_checking)\n     streamer_check_handled_ts_structures ();\n-\n-#ifdef LTO_STREAMER_DEBUG\n-  tree_htab = new hash_table<tree_entry_hasher> (31);\n-#endif\n }\n \n \n@@ -314,65 +281,6 @@ gate_lto_out (void)\n \t  && !seen_error ());\n }\n \n-\n-#ifdef LTO_STREAMER_DEBUG\n-/* Add a mapping between T and ORIG_T, which is the numeric value of\n-   the original address of T as it was seen by the LTO writer.  This\n-   mapping is useful when debugging streaming problems.  A debugging\n-   session can be started on both reader and writer using ORIG_T\n-   as a breakpoint value in both sessions.\n-\n-   Note that this mapping is transient and only valid while T is\n-   being reconstructed.  Once T is fully built, the mapping is\n-   removed.  */\n-\n-void\n-lto_orig_address_map (tree t, intptr_t orig_t)\n-{\n-  struct tree_hash_entry ent;\n-  struct tree_hash_entry **slot;\n-\n-  ent.key = t;\n-  ent.value = orig_t;\n-  slot = tree_htab->find_slot (&ent, INSERT);\n-  gcc_assert (!*slot);\n-  *slot = XNEW (struct tree_hash_entry);\n-  **slot = ent;\n-}\n-\n-\n-/* Get the original address of T as it was seen by the writer.  This\n-   is only valid while T is being reconstructed.  */\n-\n-intptr_t\n-lto_orig_address_get (tree t)\n-{\n-  struct tree_hash_entry ent;\n-  struct tree_hash_entry **slot;\n-\n-  ent.key = t;\n-  slot = tree_htab->find_slot (&ent, NO_INSERT);\n-  return (slot ? (*slot)->value : 0);\n-}\n-\n-\n-/* Clear the mapping of T to its original address.  */\n-\n-void\n-lto_orig_address_remove (tree t)\n-{\n-  struct tree_hash_entry ent;\n-  struct tree_hash_entry **slot;\n-\n-  ent.key = t;\n-  slot = tree_htab->find_slot (&ent, NO_INSERT);\n-  gcc_assert (slot);\n-  free (*slot);\n-  tree_htab->clear_slot (slot);\n-}\n-#endif\n-\n-\n /* Check that the version MAJOR.MINOR is the correct version number.  */\n \n void"}, {"sha": "9ab3007a9dfc1b01d13dec8488bc1b929dc72302", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=c1a2a0b833fb3e9db7258fe991579012d3872386", "patch": "@@ -27,14 +27,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gcov-io.h\"\n #include \"diagnostic.h\"\n \n-/* Define when debugging the LTO streamer.  This causes the writer\n-   to output the numeric value for the memory address of the tree node\n-   being emitted.  When debugging a problem in the reader, check the\n-   original address that the writer was emitting using lto_orig_address_get.\n-   With this value, set a breakpoint in the writer (e.g., lto_output_tree)\n-   to trace how the faulty node is being emitted.  */\n-/* #define LTO_STREAMER_DEBUG\t1  */\n-\n /* The encoding for a function consists of the following sections:\n \n    1)    The header.\n@@ -836,11 +828,6 @@ extern char *lto_get_section_name (int, const char *, struct lto_file_decl_data\n extern void print_lto_report (const char *);\n extern void lto_streamer_init (void);\n extern bool gate_lto_out (void);\n-#ifdef LTO_STREAMER_DEBUG\n-extern void lto_orig_address_map (tree, intptr_t);\n-extern intptr_t lto_orig_address_get (tree);\n-extern void lto_orig_address_remove (tree);\n-#endif\n extern void lto_check_version (int, int, const char *);\n extern void lto_streamer_hooks_init (void);\n "}, {"sha": "7f7ea7f90ab2b3e11f3f00fe1f83b8f9f00ab9aa", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=c1a2a0b833fb3e9db7258fe991579012d3872386", "patch": "@@ -566,20 +566,9 @@ streamer_alloc_tree (struct lto_input_block *ib, struct data_in *data_in,\n {\n   enum tree_code code;\n   tree result;\n-#ifdef LTO_STREAMER_DEBUG\n-  HOST_WIDE_INT orig_address_in_writer;\n-#endif\n \n   result = NULL_TREE;\n \n-#ifdef LTO_STREAMER_DEBUG\n-  /* Read the word representing the memory address for the tree\n-     as it was written by the writer.  This is useful when\n-     debugging differences between the writer and reader.  */\n-  orig_address_in_writer = streamer_read_hwi (ib);\n-  gcc_assert ((intptr_t) orig_address_in_writer == orig_address_in_writer);\n-#endif\n-\n   code = lto_tag_to_tree_code (tag);\n \n   /* We should never see an SSA_NAME tree.  Only the version numbers of\n@@ -630,15 +619,6 @@ streamer_alloc_tree (struct lto_input_block *ib, struct data_in *data_in,\n       result = make_node (code);\n     }\n \n-#ifdef LTO_STREAMER_DEBUG\n-  /* Store the original address of the tree as seen by the writer\n-     in RESULT's aux field.  This is useful when debugging streaming\n-     problems.  This way, a debugging session can be started on\n-     both writer and reader with a breakpoint using this address\n-     value in both.  */\n-  lto_orig_address_map (result, (intptr_t) orig_address_in_writer);\n-#endif\n-\n   return result;\n }\n "}, {"sha": "05239fb7c25ac16364652443624b3c070a6604ce", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1a2a0b833fb3e9db7258fe991579012d3872386/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=c1a2a0b833fb3e9db7258fe991579012d3872386", "patch": "@@ -952,16 +952,6 @@ streamer_write_tree_header (struct output_block *ob, tree expr)\n   tag = lto_tree_code_to_tag (code);\n   streamer_write_record_start (ob, tag);\n \n-  /* The following will cause bootstrap miscomparisons.  Enable with care.  */\n-#ifdef LTO_STREAMER_DEBUG\n-  /* This is used mainly for debugging purposes.  When the reader\n-     and the writer do not agree on a streamed node, the pointer\n-     value for EXPR can be used to track down the differences in\n-     the debugger.  */\n-  gcc_assert ((HOST_WIDE_INT) (intptr_t) expr == (intptr_t) expr);\n-  streamer_write_hwi (ob, (HOST_WIDE_INT) (intptr_t) expr);\n-#endif\n-\n   /* The text in strings and identifiers are completely emitted in\n      the header.  */\n   if (CODE_CONTAINS_STRUCT (code, TS_STRING))"}]}