{"sha": "047f1cec7fe69c13ed55fcdd005ace93397f0a95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ3ZjFjZWM3ZmU2OWMxM2VkNTVmY2RkMDA1YWNlOTMzOTdmMGE5NQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-05-02T16:01:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-05-02T16:01:30Z"}, "message": "re PR libstdc++/59476 (gdb pretty-printer cannot print C++11 _Rb_tree_iterator)\n\n\tPR libstdc++/59476\n\t* python/libstdcxx/v6/printers.py (get_value_from_Rb_tree_node): New\n\tfunction to handle both C++03 and C++11 _Rb_tree_node implementations.\n\t(StdRbtreeIteratorPrinter, StdMapPrinter, StdSetPrinter): Use it.\n\t* testsuite/libstdc++-prettyprinters/simple.cc: Update comment to\n\trefer to...\n\t* testsuite/libstdc++-prettyprinters/simple11.cc: New.\n\nFrom-SVN: r210008", "tree": {"sha": "58fd11f14c1d56ddb2194ca1ae6b3aad93daf788", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58fd11f14c1d56ddb2194ca1ae6b3aad93daf788"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/047f1cec7fe69c13ed55fcdd005ace93397f0a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047f1cec7fe69c13ed55fcdd005ace93397f0a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/047f1cec7fe69c13ed55fcdd005ace93397f0a95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/047f1cec7fe69c13ed55fcdd005ace93397f0a95/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e13b3dfdeea77ac62a65c4afc710190ef413c9f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e13b3dfdeea77ac62a65c4afc710190ef413c9f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e13b3dfdeea77ac62a65c4afc710190ef413c9f8"}], "stats": {"total": 129, "additions": 125, "deletions": 4}, "files": [{"sha": "754530ceaa13fb3c8940d446ecf2dbe3c77c4c82", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047f1cec7fe69c13ed55fcdd005ace93397f0a95/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047f1cec7fe69c13ed55fcdd005ace93397f0a95/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=047f1cec7fe69c13ed55fcdd005ace93397f0a95", "patch": "@@ -1,3 +1,13 @@\n+2014-05-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/59476\n+\t* python/libstdcxx/v6/printers.py (get_value_from_Rb_tree_node): New\n+\tfunction to handle both C++03 and C++11 _Rb_tree_node implementations.\n+\t(StdRbtreeIteratorPrinter, StdMapPrinter, StdSetPrinter): Use it.\n+\t* testsuite/libstdc++-prettyprinters/simple.cc: Update comment to\n+\trefer to...\n+\t* testsuite/libstdc++-prettyprinters/simple11.cc: New.\n+\n 2014-04-27  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex_automaton.h (_NFA<>::_M_insert_repeat):"}, {"sha": "1f1f860a5b075e892bb1ed6c18e8e4ef047228fc", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047f1cec7fe69c13ed55fcdd005ace93397f0a95/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047f1cec7fe69c13ed55fcdd005ace93397f0a95/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=047f1cec7fe69c13ed55fcdd005ace93397f0a95", "patch": "@@ -375,6 +375,22 @@ def next(self):\n             self.node = node\n         return result\n \n+def get_value_from_Rb_tree_node(node):\n+    \"\"\"Returns the value held in an _Rb_tree_node<_Val>\"\"\"\n+    try:\n+        member = node.type.fields()[1].name\n+        if member == '_M_value_field':\n+            # C++03 implementation, node contains the value as a member\n+            return node['_M_value_field']\n+        elif member == '_M_storage':\n+            # C++11 implementation, node stores value in __aligned_buffer\n+            p = node['_M_storage']['_M_storage'].address\n+            p = p.cast(node.type.template_argument(0).pointer())\n+            return p.dereference()\n+    except:\n+        pass\n+    raise ValueError, \"Unsupported implementation for %s\" % str(node.type)\n+\n # This is a pretty printer for std::_Rb_tree_iterator (which is\n # std::map::iterator), and has nothing to do with the RbtreeIterator\n # class above.\n@@ -387,7 +403,8 @@ def __init__ (self, typename, val):\n     def to_string (self):\n         typename = str(self.val.type.strip_typedefs()) + '::_Link_type'\n         nodetype = gdb.lookup_type(typename).strip_typedefs()\n-        return self.val.cast(nodetype).dereference()['_M_value_field']\n+        node = self.val.cast(nodetype).dereference()\n+        return get_value_from_Rb_tree_node(node)\n \n class StdDebugIteratorPrinter:\n     \"Print a debug enabled version of an iterator\"\n@@ -417,7 +434,8 @@ def __iter__(self):\n         def next(self):\n             if self.count % 2 == 0:\n                 n = self.rbiter.next()\n-                n = n.cast(self.type).dereference()['_M_value_field']\n+                n = n.cast(self.type).dereference()\n+                n = get_value_from_Rb_tree_node(n)\n                 self.pair = n\n                 item = n['first']\n             else:\n@@ -458,7 +476,8 @@ def __iter__(self):\n \n         def next(self):\n             item = self.rbiter.next()\n-            item = item.cast(self.type).dereference()['_M_value_field']\n+            item = item.cast(self.type).dereference()\n+            item = get_value_from_Rb_tree_node(item)\n             # FIXME: this is weird ... what to do?\n             # Maybe a 'set' display hint?\n             result = ('[%d]' % self.count, item)"}, {"sha": "030207aa67c66cedc2cb8d60424caee352a342c4", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047f1cec7fe69c13ed55fcdd005ace93397f0a95/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047f1cec7fe69c13ed55fcdd005ace93397f0a95/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple.cc?ref=047f1cec7fe69c13ed55fcdd005ace93397f0a95", "patch": "@@ -1,4 +1,4 @@\n-// If you modify this, please update debug.cc as well.\n+// If you modify this, please update simple11.cc and debug.cc as well.\n \n // { dg-do run }\n // { dg-options \"-g -O0\" }"}, {"sha": "e94bea6ec848c105e581fb50c7c21bd697bc104d", "filename": "libstdc++-v3/testsuite/libstdc++-prettyprinters/simple11.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/047f1cec7fe69c13ed55fcdd005ace93397f0a95/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/047f1cec7fe69c13ed55fcdd005ace93397f0a95/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flibstdc%2B%2B-prettyprinters%2Fsimple11.cc?ref=047f1cec7fe69c13ed55fcdd005ace93397f0a95", "patch": "@@ -0,0 +1,92 @@\n+// If you modify this, please update simple.cc and debug.cc as well.\n+\n+// { dg-do run }\n+// { dg-options \"-g -O0 -std=gnu++11\" }\n+\n+// Copyright (C) 2011-2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <deque>\n+#include <bitset>\n+#include <iostream>\n+#include <list>\n+#include <map>\n+#include <set>\n+#include <ext/slist>\n+\n+int\n+main()\n+{\n+  std::string tem;\n+  std::string str = \"zardoz\";\n+// { dg-final { note-test str \"\\\"zardoz\\\"\" } }\n+\n+  std::bitset<10> bs;\n+  bs[0] = 1;\n+  bs[5] = 1;\n+  bs[7] = 1;\n+// { dg-final { note-test bs {std::bitset = {[0] = 1, [5] = 1, [7] = 1}} } }\n+\n+  std::deque<std::string> deq;\n+  deq.push_back(\"one\");\n+  deq.push_back(\"two\");\n+// { dg-final { note-test deq {std::deque with 2 elements = {\"one\", \"two\"}} } }\n+\n+  std::deque<std::string>::iterator deqiter = deq.begin();\n+// { dg-final { note-test deqiter {\"one\"} } }\n+\n+  std::list<std::string> lst;\n+  lst.push_back(\"one\");\n+  lst.push_back(\"two\");\n+// { dg-final { note-test lst {std::list = {[0] = \"one\", [1] = \"two\"}} } }\n+\n+  std::list<std::string>::iterator lstiter = lst.begin();\n+  tem = *lstiter;\n+// { dg-final { note-test lstiter {\"one\"}} }\n+\n+  std::list<std::string>::const_iterator lstciter = lst.begin();\n+  tem = *lstciter;\n+// { dg-final { note-test lstciter {\"one\"}} }\n+\n+  std::map<std::string, int> mp;\n+  mp[\"zardoz\"] = 23;\n+// { dg-final { note-test mp {std::map with 1 elements = {[\"zardoz\"] = 23}} } }\n+\n+  std::map<std::string, int>::iterator mpiter = mp.begin();\n+// { dg-final { note-test mpiter {{first = \"zardoz\", second = 23}} } }\n+\n+  std::set<std::string> sp;\n+  sp.insert(\"clownfish\");\n+  sp.insert(\"barrel\");\n+// { dg-final { note-test sp {std::set with 2 elements = {[0] = \"barrel\", [1] = \"clownfish\"}} } }\n+\n+  std::set<std::string>::const_iterator spciter = sp.begin();\n+// { dg-final { note-test spciter {\"barrel\"} } }\n+\n+  __gnu_cxx::slist<int> sll;\n+  sll.push_front(23);\n+  sll.push_front(47);\n+// { dg-final { note-test sll {__gnu_cxx::slist = {[0] = 47, [1] = 23}} } }\n+\n+  __gnu_cxx::slist<int>::iterator slliter = sll.begin();\n+// { dg-final { note-test slliter {47} } }\n+\n+  return 0;\t\t\t// Mark SPOT\n+}\n+\n+// { dg-final { gdb-test SPOT } }"}]}