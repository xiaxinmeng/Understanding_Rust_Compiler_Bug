{"sha": "0514cb33749fefd2542e7294a35d0ef0ccae30b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUxNGNiMzM3NDlmZWZkMjU0MmU3Mjk0YTM1ZDBlZjBjY2FlMzBiMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-21T22:00:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-21T22:00:57Z"}, "message": "compiler: open code some type assertions\n    \n    Now that type equality is just simple pointer equality, we can\n    open code some type assertions instead of making runtime calls.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/182977\n\nFrom-SVN: r272577", "tree": {"sha": "7c947df211513d9ca430a41d1980e1b9e624177d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c947df211513d9ca430a41d1980e1b9e624177d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0514cb33749fefd2542e7294a35d0ef0ccae30b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0514cb33749fefd2542e7294a35d0ef0ccae30b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0514cb33749fefd2542e7294a35d0ef0ccae30b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0514cb33749fefd2542e7294a35d0ef0ccae30b3/comments", "author": null, "committer": null, "parents": [{"sha": "fd4e7255b60901581961b62e364ce85baf52d631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4e7255b60901581961b62e364ce85baf52d631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd4e7255b60901581961b62e364ce85baf52d631"}], "stats": {"total": 116, "additions": 45, "deletions": 71}, "files": [{"sha": "252e9b1bc52565c424e27e55cc12ee269359a32a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=0514cb33749fefd2542e7294a35d0ef0ccae30b3", "patch": "@@ -1,4 +1,4 @@\n-593f94f008c24f5abfe7f917a717cf2b0a2585e2\n+5bca69ab3b41df535193474baecc3a8a4c0b3dbe\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "b9cf0f3b1e00aa98985a15bed50d7fd72e1288d4", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=0514cb33749fefd2542e7294a35d0ef0ccae30b3", "patch": "@@ -486,9 +486,11 @@ Expression::convert_interface_to_type(Type *lhs_type, Expression* rhs,\n   // We are going to evaluate RHS multiple times.\n   go_assert(rhs->is_variable());\n \n-  // Call a function to check that the type is valid.  The function\n-  // will panic with an appropriate runtime type error if the type is\n-  // not valid.\n+  // Build an expression to check that the type is valid.  It will\n+  // panic with an appropriate runtime type error if the type is not\n+  // valid.\n+  // (lhs_type != rhs_type ? panicdottype(lhs_type, rhs_type, inter_type) :\n+  //    nil /*dummy*/)\n   Expression* lhs_type_expr = Expression::make_type_descriptor(lhs_type,\n                                                                 location);\n   Expression* rhs_descriptor =\n@@ -498,11 +500,18 @@ Expression::convert_interface_to_type(Type *lhs_type, Expression* rhs,\n   Expression* rhs_inter_expr = Expression::make_type_descriptor(rhs_type,\n                                                                 location);\n \n-  Expression* check_iface = Runtime::make_call(Runtime::ASSERTI2T,\n-                                               location, 3, lhs_type_expr,\n-                                               rhs_descriptor, rhs_inter_expr);\n+  Expression* cond = Expression::make_binary(OPERATOR_NOTEQ, lhs_type_expr,\n+                                             rhs_descriptor, location);\n+  rhs_descriptor = Expression::get_interface_type_descriptor(rhs);\n+  Expression* panic = Runtime::make_call(Runtime::PANICDOTTYPE, location,\n+                                         3, lhs_type_expr->copy(),\n+                                         rhs_descriptor,\n+                                         rhs_inter_expr);\n+  Expression* nil = Expression::make_nil(location);\n+  Expression* check = Expression::make_conditional(cond, panic, nil,\n+                                                   location);\n \n-  // If the call succeeds, pull out the value.\n+  // If the conversion succeeds, pull out the value.\n   Expression* obj = Expression::make_interface_info(rhs, INTERFACE_INFO_OBJECT,\n                                                     location);\n \n@@ -517,7 +526,7 @@ Expression::convert_interface_to_type(Type *lhs_type, Expression* rhs,\n       obj = Expression::make_dereference(obj, NIL_CHECK_NOT_NEEDED,\n                                          location);\n     }\n-  return Expression::make_compound(check_iface, obj, location);\n+  return Expression::make_compound(check, obj, location);\n }\n \n // Convert an expression to its backend representation.  This is implemented by"}, {"sha": "2c6a08094d102e51eed6098ed32dee992750d946", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=0514cb33749fefd2542e7294a35d0ef0ccae30b3", "patch": "@@ -1074,6 +1074,11 @@ class Expression\n   static Expression*\n   unpack_direct_iface(Expression*, Location);\n \n+  // Return an expression representing the type descriptor field of an\n+  // interface.\n+  static Expression*\n+  get_interface_type_descriptor(Expression*);\n+\n   // Look through the expression of a Slice_value_expression's valmem to\n   // find an call to makeslice.\n   static std::pair<Call_expression*, Temporary_statement*>\n@@ -1256,9 +1261,6 @@ class Expression\n \t    : NULL);\n   }\n \n-  static Expression*\n-  get_interface_type_descriptor(Expression*);\n-\n   static Expression*\n   convert_interface_to_type(Type*, Expression*, Location);\n "}, {"sha": "b135a699e13ac1cb587f14fae8d4e20c34b68f96", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=0514cb33749fefd2542e7294a35d0ef0ccae30b3", "patch": "@@ -6243,7 +6243,8 @@ Function_declaration::get_or_make_decl(Gogo* gogo, Named_object* no)\n \t    }\n \n \t  if (this->asm_name_ == \"runtime.gopanic\"\n-\t      || this->asm_name_ == \"__go_runtime_error\")\n+\t      || this->asm_name_ == \"__go_runtime_error\"\n+              || this->asm_name_ == \"runtime.panicdottype\")\n \t    flags |= Backend::function_does_not_return;\n \t}\n "}, {"sha": "a966cd422ec00683e39e033330917516b4b67f0a", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=0514cb33749fefd2542e7294a35d0ef0ccae30b3", "patch": "@@ -320,23 +320,13 @@ DEF_GO_RUNTIME(ASSERTITAB, \"runtime.assertitab\", P2(TYPE, TYPE), R1(POINTER))\n DEF_GO_RUNTIME(REQUIREITAB, \"runtime.requireitab\", P2(TYPE, TYPE),\n \t       R1(POINTER))\n \n-// Check whether an interface type may be converted to a\n-// non-interface type.\n-DEF_GO_RUNTIME(ASSERTI2T, \"runtime.assertI2T\", P3(TYPE, TYPE, TYPE), R0())\n+// Panic when an interface type to non-interface type conversion fails.\n+DEF_GO_RUNTIME(PANICDOTTYPE, \"runtime.panicdottype\", P3(TYPE, TYPE, TYPE),\n+               R0())\n \n // Return whether we can convert a type to an interface type.\n DEF_GO_RUNTIME(IFACET2IP, \"runtime.ifaceT2Ip\", P2(TYPE, TYPE), R1(BOOL))\n \n-// Get the type descriptor of an empty interface.\n-DEF_GO_RUNTIME(EFACETYPE, \"runtime.efacetype\", P1(EFACE), R1(TYPE))\n-\n-// Get the type descriptor of a non-empty interface.\n-DEF_GO_RUNTIME(IFACETYPE, \"runtime.ifacetype\", P1(IFACE), R1(TYPE))\n-\n-\n-// Compare two type descriptors for equality.\n-DEF_GO_RUNTIME(IFACETYPEEQ, \"runtime.ifacetypeeq\", P2(TYPE, TYPE), R1(BOOL))\n-\n // Compare two empty interface values.\n DEF_GO_RUNTIME(EFACEEQ, \"runtime.efaceeq\", P2(EFACE, EFACE), R1(BOOL))\n "}, {"sha": "ad4a353fb4aad3eb69db9ccf3052c674f37c07b0", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0514cb33749fefd2542e7294a35d0ef0ccae30b3/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=0514cb33749fefd2542e7294a35d0ef0ccae30b3", "patch": "@@ -4614,11 +4614,12 @@ Type_case_clauses::Type_case_clause::lower(Type* switch_val_type,\n \tcond = Expression::make_binary(OPERATOR_EQEQ, ref,\n \t\t\t\t       Expression::make_nil(loc),\n \t\t\t\t       loc);\n+      else if (type->interface_type() == NULL)\n+        cond = Expression::make_binary(OPERATOR_EQEQ, ref,\n+                                       Expression::make_type_descriptor(type, loc),\n+                                       loc);\n       else\n-\tcond = Runtime::make_call((type->interface_type() == NULL\n-\t\t\t\t   ? Runtime::IFACETYPEEQ\n-\t\t\t\t   : Runtime::IFACET2IP),\n-\t\t\t\t  loc, 2,\n+\tcond = Runtime::make_call(Runtime::IFACET2IP, loc, 2,\n \t\t\t\t  Expression::make_type_descriptor(type, loc),\n \t\t\t\t  ref);\n \n@@ -4871,23 +4872,23 @@ Type_switch_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n       return Statement::make_error_statement(loc);\n     }\n \n+  Temporary_statement* val_temp =\n+    Statement::make_temporary(NULL, this->expr_, loc);\n+  b->add_statement(val_temp);\n+\n   // var descriptor_temp DESCRIPTOR_TYPE\n   Type* descriptor_type = Type::make_type_descriptor_ptr_type();\n   Temporary_statement* descriptor_temp =\n     Statement::make_temporary(descriptor_type, NULL, loc);\n   b->add_statement(descriptor_temp);\n \n-  // descriptor_temp = ifacetype(val_temp) FIXME: This should be\n-  // inlined.\n-  bool is_empty = val_type->interface_type()->is_empty();\n-  Expression* call = Runtime::make_call((is_empty\n-\t\t\t\t\t ? Runtime::EFACETYPE\n-\t\t\t\t\t : Runtime::IFACETYPE),\n-\t\t\t\t\tloc, 1, this->expr_);\n+  // descriptor_temp = ifacetype(val_temp)\n+  Expression* ref = Expression::make_temporary_reference(val_temp, loc);\n+  Expression* td = Expression::get_interface_type_descriptor(ref);\n   Temporary_reference_expression* lhs =\n     Expression::make_temporary_reference(descriptor_temp, loc);\n   lhs->set_is_lvalue();\n-  Statement* s = Statement::make_assignment(lhs, call, loc);\n+  Statement* s = Statement::make_assignment(lhs, td, loc);\n   b->add_statement(s);\n \n   if (this->clauses_ != NULL)"}, {"sha": "6def7388df7948a58f655aaee1eab77f87de8acf", "filename": "libgo/go/runtime/iface.go", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0514cb33749fefd2542e7294a35d0ef0ccae30b3/libgo%2Fgo%2Fruntime%2Fiface.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0514cb33749fefd2542e7294a35d0ef0ccae30b3/libgo%2Fgo%2Fruntime%2Fiface.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fiface.go?ref=0514cb33749fefd2542e7294a35d0ef0ccae30b3", "patch": "@@ -15,10 +15,7 @@ import (\n //\n //go:linkname requireitab runtime.requireitab\n //go:linkname assertitab runtime.assertitab\n-//go:linkname assertI2T runtime.assertI2T\n-//go:linkname ifacetypeeq runtime.ifacetypeeq\n-//go:linkname efacetype runtime.efacetype\n-//go:linkname ifacetype runtime.ifacetype\n+//go:linkname panicdottype runtime.panicdottype\n //go:linkname ifaceE2E2 runtime.ifaceE2E2\n //go:linkname ifaceI2E2 runtime.ifaceI2E2\n //go:linkname ifaceE2I2 runtime.ifaceE2I2\n@@ -356,35 +353,9 @@ func assertitab(lhs, rhs *_type) unsafe.Pointer {\n \treturn getitab(lhs, rhs, false)\n }\n \n-// Check whether an interface type may be converted to a non-interface\n-// type, panicing if not.\n-func assertI2T(lhs, rhs, inter *_type) {\n-\tif rhs == nil {\n-\t\tpanic(&TypeAssertionError{nil, nil, lhs, \"\"})\n-\t}\n-\tif !eqtype(lhs, rhs) {\n-\t\tpanic(&TypeAssertionError{inter, rhs, lhs, \"\"})\n-\t}\n-}\n-\n-// Compare two type descriptors for equality.\n-func ifacetypeeq(a, b *_type) bool {\n-\treturn eqtype(a, b)\n-}\n-\n-// Return the type descriptor of an empty interface.\n-// FIXME: This should be inlined by the compiler.\n-func efacetype(e eface) *_type {\n-\treturn e._type\n-}\n-\n-// Return the type descriptor of a non-empty interface.\n-// FIXME: This should be inlined by the compiler.\n-func ifacetype(i iface) *_type {\n-\tif i.tab == nil {\n-\t\treturn nil\n-\t}\n-\treturn *(**_type)(i.tab)\n+// panicdottype is called when doing an i.(T) conversion and the conversion fails.\n+func panicdottype(lhs, rhs, inter *_type) {\n+\tpanic(&TypeAssertionError{inter, rhs, lhs, \"\"})\n }\n \n // Convert an empty interface to an empty interface, for a comma-ok"}]}