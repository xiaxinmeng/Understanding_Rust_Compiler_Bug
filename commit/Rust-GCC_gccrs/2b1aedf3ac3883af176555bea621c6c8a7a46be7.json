{"sha": "2b1aedf3ac3883af176555bea621c6c8a7a46be7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIxYWVkZjNhYzM4ODNhZjE3NjU1NWJlYTYyMWM2YzhhN2E0NmJlNw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-08-14T19:11:20Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-08-14T19:11:20Z"}, "message": "PR tree-optimization/86650 - -Warray-bounds missing inlining context\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/86650\n\t* tree-vrp.c (vrp_prop::check_array_ref): Print an inform message.\n\t(vrp_prop::check_mem_ref): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/86650\n\t* gcc.dg/Warray-bounds-34.c: New test.\n\nFrom-SVN: r263541", "tree": {"sha": "c0394d1e170361e50d43c73a21c80a2a7eacfcc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0394d1e170361e50d43c73a21c80a2a7eacfcc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b1aedf3ac3883af176555bea621c6c8a7a46be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1aedf3ac3883af176555bea621c6c8a7a46be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1aedf3ac3883af176555bea621c6c8a7a46be7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1aedf3ac3883af176555bea621c6c8a7a46be7/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ce0e6e865f65b34fd20e8ae912ff7307fb5b832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ce0e6e865f65b34fd20e8ae912ff7307fb5b832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ce0e6e865f65b34fd20e8ae912ff7307fb5b832"}], "stats": {"total": 199, "additions": 124, "deletions": 75}, "files": [{"sha": "97ea6bcdaa05884abfc4fa746233d1bfae12c8c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1aedf3ac3883af176555bea621c6c8a7a46be7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1aedf3ac3883af176555bea621c6c8a7a46be7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b1aedf3ac3883af176555bea621c6c8a7a46be7", "patch": "@@ -1,3 +1,9 @@\n+2018-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86650\n+\t* tree-vrp.c (vrp_prop::check_array_ref): Print an inform message.\n+\t(vrp_prop::check_mem_ref): Same.\n+\n 2018-08-13  Liu Hao <lh_mouse@126.com>\n \n \t* pretty-print.c (eat_esc_sequence): Swap the foreground and"}, {"sha": "b456781c6f96bdd5baf965ba6646ea0044bba192", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1aedf3ac3883af176555bea621c6c8a7a46be7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1aedf3ac3883af176555bea621c6c8a7a46be7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b1aedf3ac3883af176555bea621c6c8a7a46be7", "patch": "@@ -1,3 +1,8 @@\n+2018-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/86650\n+\t* gcc.dg/Warray-bounds-34.c: New test.\n+\n 2018-08-14  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/86116"}, {"sha": "cea7c4b32a220a60b6a8d6c59a17cc7bee2395ae", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-34.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1aedf3ac3883af176555bea621c6c8a7a46be7/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1aedf3ac3883af176555bea621c6c8a7a46be7/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-34.c?ref=2b1aedf3ac3883af176555bea621c6c8a7a46be7", "patch": "@@ -0,0 +1,18 @@\n+/* PR tree-optimization/86650 - -Warray-bounds missing inlining context\n+   { dg-do compile }\n+   { dg-options \"-O2 -Warray-bounds\" } */\n+\n+int a[3];           /* { dg-message \"while referencing .a.\" } */\n+int x;\n+\n+inline void foo (int i)\n+{\n+  a[i + 1] = 123;   /* { dg-warning \"\\\\\\[-Warray-bounds]\" } */\n+}\n+\n+int bar (void)\n+{\n+  foo (3);\n+\n+  return x;\n+}"}, {"sha": "d553a254878a1b2b40d47cc8a79a8f171155b197", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 95, "deletions": 75, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b1aedf3ac3883af176555bea621c6c8a7a46be7/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b1aedf3ac3883af176555bea621c6c8a7a46be7/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=2b1aedf3ac3883af176555bea621c6c8a7a46be7", "patch": "@@ -4445,14 +4445,13 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \n   tree artype = TREE_TYPE (TREE_OPERAND (ref, 0));\n \n+  bool warned = false;\n+\n   /* Empty array.  */\n   if (up_bound && tree_int_cst_equal (low_bound, up_bound_p1))\n-    {\n-      warning_at (location, OPT_Warray_bounds,\n-\t\t  \"array subscript %E is above array bounds of %qT\",\n-\t\t  low_bound, artype);\n-      TREE_NO_WARNING (ref) = 1;\n-    }\n+    warned = warning_at (location, OPT_Warray_bounds,\n+\t\t\t \"array subscript %E is above array bounds of %qT\",\n+\t\t\t low_bound, artype);\n \n   if (TREE_CODE (low_sub) == SSA_NAME)\n     {\n@@ -4473,12 +4472,10 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \t      : tree_int_cst_le (up_bound, up_sub))\n           && TREE_CODE (low_sub) == INTEGER_CST\n           && tree_int_cst_le (low_sub, low_bound))\n-        {\n-          warning_at (location, OPT_Warray_bounds,\n-\t\t      \"array subscript [%E, %E] is outside array bounds of %qT\",\n-\t\t      low_sub, up_sub, artype);\n-          TREE_NO_WARNING (ref) = 1;\n-        }\n+\twarned = warning_at (location, OPT_Warray_bounds,\n+\t\t\t     \"array subscript [%E, %E] is outside \"\n+\t\t\t     \"array bounds of %qT\",\n+\t\t\t     low_sub, up_sub, artype);\n     }\n   else if (up_bound\n \t   && TREE_CODE (up_sub) == INTEGER_CST\n@@ -4492,10 +4489,9 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \t  dump_generic_expr (MSG_NOTE, TDF_SLIM, ref);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n-      warning_at (location, OPT_Warray_bounds,\n-\t\t  \"array subscript %E is above array bounds of %qT\",\n-\t\t  up_sub, artype);\n-      TREE_NO_WARNING (ref) = 1;\n+      warned = warning_at (location, OPT_Warray_bounds,\n+\t\t\t   \"array subscript %E is above array bounds of %qT\",\n+\t\t\t   up_sub, artype);\n     }\n   else if (TREE_CODE (low_sub) == INTEGER_CST\n            && tree_int_cst_lt (low_sub, low_bound))\n@@ -4506,9 +4502,18 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n \t  dump_generic_expr (MSG_NOTE, TDF_SLIM, ref);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n-      warning_at (location, OPT_Warray_bounds,\n-\t\t  \"array subscript %E is below array bounds of %qT\",\n-\t\t  low_sub, artype);\n+      warned = warning_at (location, OPT_Warray_bounds,\n+\t\t\t   \"array subscript %E is below array bounds of %qT\",\n+\t\t\t   low_sub, artype);\n+    }\n+\n+  if (warned)\n+    {\n+      ref = TREE_OPERAND (ref, 0);\n+\n+      if (DECL_P (ref))\n+\tinform (DECL_SOURCE_LOCATION (ref), \"while referencing %qD\", ref);\n+\n       TREE_NO_WARNING (ref) = 1;\n     }\n }\n@@ -4523,7 +4528,8 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n    the address of the just-past-the-end element of an array).  */\n \n void\n-vrp_prop::check_mem_ref (location_t location, tree ref, bool ignore_off_by_one)\n+vrp_prop::check_mem_ref (location_t location, tree ref,\n+\t\t\t bool ignore_off_by_one)\n {\n   if (TREE_NO_WARNING (ref))\n     return;\n@@ -4744,16 +4750,21 @@ vrp_prop::check_mem_ref (location_t location, tree ref, bool ignore_off_by_one)\n \t  offrange[1] = offrange[1] / eltsize;\n \t}\n \n+      bool warned;\n       if (offrange[0] == offrange[1])\n-\twarning_at (location, OPT_Warray_bounds,\n-\t\t    \"array subscript %wi is outside array bounds \"\n-\t\t    \"of %qT\",\n-\t\t    offrange[0].to_shwi (), reftype);\n+\twarned = warning_at (location, OPT_Warray_bounds,\n+\t\t\t     \"array subscript %wi is outside array bounds \"\n+\t\t\t     \"of %qT\",\n+\t\t\t     offrange[0].to_shwi (), reftype);\n       else\n-\twarning_at (location, OPT_Warray_bounds,\n-\t\t    \"array subscript [%wi, %wi] is outside array bounds \"\n-\t\t    \"of %qT\",\n-\t\t    offrange[0].to_shwi (), offrange[1].to_shwi (), reftype);\n+\twarned = warning_at (location, OPT_Warray_bounds,\n+\t\t\t     \"array subscript [%wi, %wi] is outside \"\n+\t\t\t     \"array bounds of %qT\",\n+\t\t\t     offrange[0].to_shwi (),\n+\t\t\t     offrange[1].to_shwi (), reftype);\n+      if (warned && DECL_P (arg))\n+\tinform (DECL_SOURCE_LOCATION (arg), \"while referencing %qD\", arg);\n+\n       TREE_NO_WARNING (ref) = 1;\n       return;\n     }\n@@ -4793,60 +4804,69 @@ vrp_prop::search_for_addr_array (tree t, location_t location)\n     }\n   while (handled_component_p (t) || TREE_CODE (t) == MEM_REF);\n \n-  if (TREE_CODE (t) == MEM_REF\n-      && TREE_CODE (TREE_OPERAND (t, 0)) == ADDR_EXPR\n-      && !TREE_NO_WARNING (t))\n-    {\n-      tree tem = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n-      tree low_bound, up_bound, el_sz;\n-      offset_int idx;\n-      if (TREE_CODE (TREE_TYPE (tem)) != ARRAY_TYPE\n-\t  || TREE_CODE (TREE_TYPE (TREE_TYPE (tem))) == ARRAY_TYPE\n-\t  || !TYPE_DOMAIN (TREE_TYPE (tem)))\n-\treturn;\n+  if (TREE_CODE (t) != MEM_REF\n+      || TREE_CODE (TREE_OPERAND (t, 0)) != ADDR_EXPR\n+      || TREE_NO_WARNING (t))\n+    return;\n \n-      low_bound = TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (tem)));\n-      up_bound = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (tem)));\n-      el_sz = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (tem)));\n-      if (!low_bound\n-\t  || TREE_CODE (low_bound) != INTEGER_CST\n-\t  || !up_bound\n-\t  || TREE_CODE (up_bound) != INTEGER_CST\n-\t  || !el_sz\n-\t  || TREE_CODE (el_sz) != INTEGER_CST)\n-\treturn;\n+  tree tem = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n+  tree low_bound, up_bound, el_sz;\n+  if (TREE_CODE (TREE_TYPE (tem)) != ARRAY_TYPE\n+      || TREE_CODE (TREE_TYPE (TREE_TYPE (tem))) == ARRAY_TYPE\n+      || !TYPE_DOMAIN (TREE_TYPE (tem)))\n+    return;\n \n-      if (!mem_ref_offset (t).is_constant (&idx))\n-\treturn;\n+  low_bound = TYPE_MIN_VALUE (TYPE_DOMAIN (TREE_TYPE (tem)));\n+  up_bound = TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (tem)));\n+  el_sz = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (tem)));\n+  if (!low_bound\n+      || TREE_CODE (low_bound) != INTEGER_CST\n+      || !up_bound\n+      || TREE_CODE (up_bound) != INTEGER_CST\n+      || !el_sz\n+      || TREE_CODE (el_sz) != INTEGER_CST)\n+    return;\n \n-      idx = wi::sdiv_trunc (idx, wi::to_offset (el_sz));\n-      if (idx < 0)\n+  offset_int idx;\n+  if (!mem_ref_offset (t).is_constant (&idx))\n+    return;\n+\n+  bool warned = false;\n+  idx = wi::sdiv_trunc (idx, wi::to_offset (el_sz));\n+  if (idx < 0)\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    {\n-\t      fprintf (dump_file, \"Array bound warning for \");\n-\t      dump_generic_expr (MSG_NOTE, TDF_SLIM, t);\n-\t      fprintf (dump_file, \"\\n\");\n-\t    }\n-\t  warning_at (location, OPT_Warray_bounds,\n-\t\t      \"array subscript %wi is below array bounds of %qT\",\n-\t\t      idx.to_shwi (), TREE_TYPE (tem));\n-\t  TREE_NO_WARNING (t) = 1;\n+\t  fprintf (dump_file, \"Array bound warning for \");\n+\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, t);\n+\t  fprintf (dump_file, \"\\n\");\n \t}\n-      else if (idx > (wi::to_offset (up_bound)\n-\t\t      - wi::to_offset (low_bound) + 1))\n+      warned = warning_at (location, OPT_Warray_bounds,\n+\t\t\t   \"array subscript %wi is below \"\n+\t\t\t   \"array bounds of %qT\",\n+\t\t\t   idx.to_shwi (), TREE_TYPE (tem));\n+    }\n+  else if (idx > (wi::to_offset (up_bound)\n+\t\t  - wi::to_offset (low_bound) + 1))\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    {\n-\t      fprintf (dump_file, \"Array bound warning for \");\n-\t      dump_generic_expr (MSG_NOTE, TDF_SLIM, t);\n-\t      fprintf (dump_file, \"\\n\");\n-\t    }\n-\t  warning_at (location, OPT_Warray_bounds,\n-\t\t      \"array subscript %wu is above array bounds of %qT\",\n-\t\t      idx.to_uhwi (), TREE_TYPE (tem));\n-\t  TREE_NO_WARNING (t) = 1;\n+\t  fprintf (dump_file, \"Array bound warning for \");\n+\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, t);\n+\t  fprintf (dump_file, \"\\n\");\n \t}\n+      warned = warning_at (location, OPT_Warray_bounds,\n+\t\t\t   \"array subscript %wu is above \"\n+\t\t\t   \"array bounds of %qT\",\n+\t\t\t   idx.to_uhwi (), TREE_TYPE (tem));\n+    }\n+\n+  if (warned)\n+    {\n+      if (DECL_P (t))\n+\tinform (DECL_SOURCE_LOCATION (t), \"while referencing %qD\", t);\n+\n+      TREE_NO_WARNING (t) = 1;\n     }\n }\n "}]}