{"sha": "b162e1e749b8c7cb567e5f38bbc461d77c9f8439", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2MmUxZTc0OWI4YzdjYjU2N2U1ZjM4YmJjNDYxZDc3YzlmODQzOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-03-05T09:14:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-03-05T09:14:01Z"}, "message": "re PR tree-optimization/65310 (vectorizer uses wrong alignment)\n\n2015-03-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/65310\n\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment):\n\tProperly preserve alignment of the base of the access.\n\n\t* gcc.dg/vect/pr65310.c: New testcase.\n\nFrom-SVN: r221206", "tree": {"sha": "e5dfb81be4531429f97f92096b41772275a9c87e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5dfb81be4531429f97f92096b41772275a9c87e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b162e1e749b8c7cb567e5f38bbc461d77c9f8439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b162e1e749b8c7cb567e5f38bbc461d77c9f8439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b162e1e749b8c7cb567e5f38bbc461d77c9f8439", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b162e1e749b8c7cb567e5f38bbc461d77c9f8439/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "637e43b8e1b2d18f51f6d18714cb794717ced3c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637e43b8e1b2d18f51f6d18714cb794717ced3c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637e43b8e1b2d18f51f6d18714cb794717ced3c4"}], "stats": {"total": 85, "additions": 58, "deletions": 27}, "files": [{"sha": "2d5e2457a4ec3981bd8a8310b4a9c98bbae38293", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b162e1e749b8c7cb567e5f38bbc461d77c9f8439/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b162e1e749b8c7cb567e5f38bbc461d77c9f8439/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b162e1e749b8c7cb567e5f38bbc461d77c9f8439", "patch": "@@ -1,3 +1,9 @@\n+2015-03-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65310\n+\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment):\n+\tProperly preserve alignment of the base of the access.\n+\n 2015-03-05  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/65270"}, {"sha": "77da7e936fb5fd0585dc3f16dfb22bff199b9be0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b162e1e749b8c7cb567e5f38bbc461d77c9f8439/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b162e1e749b8c7cb567e5f38bbc461d77c9f8439/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b162e1e749b8c7cb567e5f38bbc461d77c9f8439", "patch": "@@ -1,3 +1,8 @@\n+2015-03-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/65310\n+\t* gcc.dg/vect/pr65310.c: New testcase.\n+\n 2015-03-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/64834"}, {"sha": "2fd51b4d23bc98a2820e70808b795647ea33e6ed", "filename": "gcc/testsuite/gcc.dg/vect/pr65310.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b162e1e749b8c7cb567e5f38bbc461d77c9f8439/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65310.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b162e1e749b8c7cb567e5f38bbc461d77c9f8439/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65310.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr65310.c?ref=b162e1e749b8c7cb567e5f38bbc461d77c9f8439", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+\n+struct a \n+{\n+  int a[100];\n+};\n+typedef struct a b __attribute__ ((aligned (32)));\n+typedef struct a c __attribute__ ((aligned (8)));\n+\n+int t(b *a)\n+{\n+  int i;\n+  c *ptr = a;\n+  for (i=0;i<100;i++)\n+    ptr->a[i]++;\n+}\n+\n+/* The memory access is through a pointer of type c which means\n+   *ptr is not aligned.  */\n+\n+/* { dg-final { scan-tree-dump \"can't force alignment\" \"vect\" } } */\n+/* { dg-final { scan-tree-dump-not \"misalign = 0\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ffe83e2b2f33d353e1a5abf97381da4c72f95b27", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b162e1e749b8c7cb567e5f38bbc461d77c9f8439/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b162e1e749b8c7cb567e5f38bbc461d77c9f8439/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=b162e1e749b8c7cb567e5f38bbc461d77c9f8439", "patch": "@@ -650,7 +650,8 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n   tree base, base_addr;\n   bool base_aligned;\n   tree misalign;\n-  tree aligned_to, alignment;\n+  tree aligned_to;\n+  unsigned HOST_WIDE_INT alignment;\n \n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location,\n@@ -720,36 +721,43 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n \t}\n     }\n \n-  base = build_fold_indirect_ref (base_addr);\n-  alignment = ssize_int (TYPE_ALIGN (vectype)/BITS_PER_UNIT);\n+  alignment = TYPE_ALIGN_UNIT (vectype);\n \n-  if ((aligned_to && tree_int_cst_compare (aligned_to, alignment) < 0)\n+  if ((compare_tree_int (aligned_to, alignment) < 0)\n       || !misalign)\n     {\n       if (dump_enabled_p ())\n \t{\n \t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t                   \"Unknown alignment for access: \");\n-\t  dump_generic_expr (MSG_MISSED_OPTIMIZATION, TDF_SLIM, base);\n+\t  dump_generic_expr (MSG_MISSED_OPTIMIZATION, TDF_SLIM, ref);\n \t  dump_printf (MSG_MISSED_OPTIMIZATION, \"\\n\");\n \t}\n       return true;\n     }\n \n-  if ((DECL_P (base)\n-       && tree_int_cst_compare (ssize_int (DECL_ALIGN_UNIT (base)),\n-\t\t\t\talignment) >= 0)\n-      || (TREE_CODE (base_addr) == SSA_NAME\n-\t  && tree_int_cst_compare (ssize_int (TYPE_ALIGN_UNIT (TREE_TYPE (\n-\t\t\t\t\t\t      TREE_TYPE (base_addr)))),\n-\t\t\t\t   alignment) >= 0)\n-      || (get_pointer_alignment (base_addr) >= TYPE_ALIGN (vectype)))\n+  /* To look at alignment of the base we have to preserve an inner MEM_REF\n+     as that carries alignment information of the actual access.  */\n+  base = ref;\n+  while (handled_component_p (base))\n+    base = TREE_OPERAND (base, 0);\n+  if (TREE_CODE (base) == MEM_REF)\n+    base = build2 (MEM_REF, TREE_TYPE (base), base_addr,\n+\t\t   build_int_cst (TREE_TYPE (TREE_OPERAND (base, 1)), 0));\n+\n+  if (get_object_alignment (base) >= TYPE_ALIGN (vectype))\n     base_aligned = true;\n   else\n     base_aligned = false;\n \n   if (!base_aligned)\n     {\n+      /* Strip an inner MEM_REF to a bare decl if possible.  */\n+      if (TREE_CODE (base) == MEM_REF\n+\t  && integer_zerop (TREE_OPERAND (base, 1))\n+\t  && TREE_CODE (TREE_OPERAND (base, 0)) == ADDR_EXPR)\n+\tbase = TREE_OPERAND (TREE_OPERAND (base, 0), 0);\n+\n       /* Do not change the alignment of global variables here if\n \t flag_section_anchors is enabled as we already generated\n \t RTL for other functions.  Most global variables should\n@@ -784,7 +792,7 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n   /* If this is a backward running DR then first access in the larger\n      vectype actually is N-1 elements before the address in the DR.\n      Adjust misalign accordingly.  */\n-  if (tree_int_cst_compare (DR_STEP (dr), size_zero_node) < 0)\n+  if (tree_int_cst_sgn (DR_STEP (dr)) < 0)\n     {\n       tree offset = ssize_int (TYPE_VECTOR_SUBPARTS (vectype) - 1);\n       /* DR_STEP(dr) is the same as -TYPE_SIZE of the scalar type,\n@@ -794,19 +802,8 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n       misalign = size_binop (PLUS_EXPR, misalign, offset);\n     }\n \n-  /* Modulo alignment.  */\n-  misalign = size_binop (FLOOR_MOD_EXPR, misalign, alignment);\n-\n-  if (!tree_fits_uhwi_p (misalign))\n-    {\n-      /* Negative or overflowed misalignment value.  */\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t                 \"unexpected misalign value\\n\");\n-      return false;\n-    }\n-\n-  SET_DR_MISALIGNMENT (dr, tree_to_uhwi (misalign));\n+  SET_DR_MISALIGNMENT (dr,\n+\t\t       wi::mod_floor (misalign, alignment, SIGNED).to_uhwi ());\n \n   if (dump_enabled_p ())\n     {"}]}