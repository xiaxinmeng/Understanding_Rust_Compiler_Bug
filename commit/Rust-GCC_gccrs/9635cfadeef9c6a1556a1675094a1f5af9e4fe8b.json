{"sha": "9635cfadeef9c6a1556a1675094a1f5af9e4fe8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYzNWNmYWRlZWY5YzZhMTU1NmExNjc1MDk0YTFmNWFmOWU0ZmU4Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-01-07T22:14:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-01-07T22:14:43Z"}, "message": "cselib.c (cselib_current_insn_in_libcall): New static variable.\n\n\t* cselib.c (cselib_current_insn_in_libcall): New static variable.\n\t(new_elt_loc_list, cselib_process_insn, cselib_init): Keep track on whether\n\twe are inside libcall.\n\t* cselib.h (elt_loc_list): Add in_libcall.\n\t* gcse.c (do_local_cprop): Do not copy propagate using insns\n\tin libcalls.\n\nFrom-SVN: r61023", "tree": {"sha": "b69303dec14643feb1ed9f6714049e127cdb3831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b69303dec14643feb1ed9f6714049e127cdb3831"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b/comments", "author": null, "committer": null, "parents": [{"sha": "b5038cfb822f8f3881fab43d0149dd205d4ca001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5038cfb822f8f3881fab43d0149dd205d4ca001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5038cfb822f8f3881fab43d0149dd205d4ca001"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "beaa6ea309e226a9d190d5ba239447007dd23a2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9635cfadeef9c6a1556a1675094a1f5af9e4fe8b", "patch": "@@ -1,3 +1,12 @@\n+Tue Jan  7 22:29:56 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cselib.c (cselib_current_insn_in_libcall): New static variable.\n+\t(new_elt_loc_list, cselib_process_insn, cselib_init): Keep track on whether\n+\twe are inside libcall.\n+\t* cselib.h (elt_loc_list): Add in_libcall.\n+\t* gcse.c (do_local_cprop): Do not copy propagate using insns\n+\tin libcalls.\n+\n 2003-01-07  David Edelsohn  <edelsohn@gnu.org>\n \n \t* doc/tm.texi (TARGET_SCHED_VARIABLE_ISSUE): CLOBBER and USE do"}, {"sha": "63fab2233a9a080c158258b828ed3539d85fe620", "filename": "gcc/cselib.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=9635cfadeef9c6a1556a1675094a1f5af9e4fe8b", "patch": "@@ -85,6 +85,7 @@ static GTY((param_is (cselib_val))) htab_t hash_table;\n /* This is a global so we don't have to pass this through every function.\n    It is used in new_elt_loc_list to set SETTING_INSN.  */\n static rtx cselib_current_insn;\n+static bool cselib_current_insn_in_libcall;\n \n /* Every new unknown value gets a unique number.  */\n static unsigned int next_unknown_value;\n@@ -165,6 +166,7 @@ new_elt_loc_list (next, loc)\n   el->next = next;\n   el->loc = loc;\n   el->setting_insn = cselib_current_insn;\n+  el->in_libcall = cselib_current_insn_in_libcall;\n   return el;\n }\n \n@@ -1310,6 +1312,10 @@ cselib_process_insn (insn)\n   int i;\n   rtx x;\n \n+  if (find_reg_note (insn, REG_LIBCALL, NULL))\n+    cselib_current_insn_in_libcall = true;\n+  if (find_reg_note (insn, REG_RETVAL, NULL))\n+    cselib_current_insn_in_libcall = false;\n   cselib_current_insn = insn;\n \n   /* Forget everything at a CODE_LABEL, a volatile asm, or a setjmp.  */\n@@ -1409,6 +1415,7 @@ cselib_init ()\n   hash_table = htab_create_ggc (31, get_value_hash, entry_and_rtx_equal_p, \n \t\t\t\tNULL);\n   clear_table (1);\n+  cselib_current_insn_in_libcall = false;\n }\n \n /* Called when the current user is done with cselib.  */"}, {"sha": "f29ee8de04e8be6b09d7ec4c2569158d3e6e3457", "filename": "gcc/cselib.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b/gcc%2Fcselib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b/gcc%2Fcselib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.h?ref=9635cfadeef9c6a1556a1675094a1f5af9e4fe8b", "patch": "@@ -49,6 +49,8 @@ struct elt_loc_list GTY(())\n   rtx loc;\n   /* The insn that made the equivalence.  */\n   rtx setting_insn;\n+  /* True when setting insn is inside libcall.  */\n+  bool in_libcall;\n };\n \n /* A list of cselib_val structures.  */"}, {"sha": "ae0a1ba5752cccb06f857d893a9f3ac8ceff7e56", "filename": "gcc/gcse.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9635cfadeef9c6a1556a1675094a1f5af9e4fe8b/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=9635cfadeef9c6a1556a1675094a1f5af9e4fe8b", "patch": "@@ -4274,6 +4274,9 @@ do_local_cprop (x, insn, alter_jumps, libcall_sp)\n \t  rtx this_rtx = l->loc;\n \t  rtx note;\n \n+\t  if (l->in_libcall)\n+\t    continue;\n+\n \t  if (CONSTANT_P (this_rtx))\n \t    newcnst = this_rtx;\n \t  if (REG_P (this_rtx) && REGNO (this_rtx) >= FIRST_PSEUDO_REGISTER"}]}