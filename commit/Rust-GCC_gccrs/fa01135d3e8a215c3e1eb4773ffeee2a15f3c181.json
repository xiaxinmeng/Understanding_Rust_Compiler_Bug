{"sha": "fa01135d3e8a215c3e1eb4773ffeee2a15f3c181", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEwMTEzNWQzZThhMjE1YzNlMWViNDc3M2ZmZWVlMmExNWYzYzE4MQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2009-07-15T10:12:22Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2009-07-15T10:12:22Z"}, "message": "arm.md (ior_xor): New code iterator.\n\n\t* arm.md (ior_xor): New code iterator.\n\t(split for ior/xor with shift and zero-extend): New split pattern.\n\t* arm/predicates.md (subreg_lowpart_operator): New special predicate.\n\nFrom-SVN: r149673", "tree": {"sha": "d553384857d12a6b186d25060e36c9afc8893241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d553384857d12a6b186d25060e36c9afc8893241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181/comments", "author": null, "committer": null, "parents": [{"sha": "faf387e135006d0409b250c8a8b8d2f370400156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faf387e135006d0409b250c8a8b8d2f370400156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faf387e135006d0409b250c8a8b8d2f370400156"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "8ae44d8bdb6cc33641ba0e2b154116315d3b5a5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa01135d3e8a215c3e1eb4773ffeee2a15f3c181", "patch": "@@ -1,3 +1,9 @@\n+2009-07-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (ior_xor): New code iterator.\n+\t(split for ior/xor with shift and zero-extend): New split pattern.\n+\t* arm/predicates.md (subreg_lowpart_operator): New special predicate.\n+\n 2009-07-15  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (make_constraint_from_heapvar): Initialize"}, {"sha": "809f2c49b97e1e205548aac74a79abf120e5ee4d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=fa01135d3e8a215c3e1eb4773ffeee2a15f3c181", "patch": "@@ -4207,6 +4207,28 @@\n   \"\"\n )\n \n+(define_code_iterator ior_xor [ior xor])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+\t(ior_xor:SI (and:SI (ashift:SI\n+\t\t\t     (match_operand:SI 1 \"s_register_operand\" \"\")\n+\t\t\t     (match_operand:SI 2 \"const_int_operand\" \"\"))\n+\t\t\t    (match_operand:SI 3 \"const_int_operand\" \"\"))\n+\t\t    (zero_extend:SI\n+\t\t     (match_operator 5 \"subreg_lowpart_operator\"\n+\t\t      [(match_operand:SI 4 \"s_register_operand\" \"\")]))))]\n+  \"TARGET_32BIT\n+   && (INTVAL (operands[3])\n+       == (GET_MODE_MASK (GET_MODE (operands[5]))\n+           & (GET_MODE_MASK (GET_MODE (operands[5]))\n+\t      << (INTVAL (operands[2])))))\"\n+  [(set (match_dup 0) (ior_xor:SI (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t  (match_dup 4)))\n+   (set (match_dup 0) (zero_extend:SI (match_dup 5)))]\n+  \"operands[5] = gen_lowpart (GET_MODE (operands[5]), operands[0]);\"\n+)\n+\n (define_insn \"*compareqi_eq0\"\n   [(set (reg:CC_Z CC_REGNUM)\n \t(compare:CC_Z (match_operand:QI 0 \"s_register_operand\" \"r\")"}, {"sha": "d351f443851defd929b60fcd8024fb3b96a774c6", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa01135d3e8a215c3e1eb4773ffeee2a15f3c181/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=fa01135d3e8a215c3e1eb4773ffeee2a15f3c181", "patch": "@@ -73,6 +73,10 @@\n \t      || REGNO_REG_CLASS (REGNO (op)) == FPA_REGS));\n })\n \n+(define_special_predicate \"subreg_lowpart_operator\"\n+  (and (match_code \"subreg\")\n+       (match_test \"subreg_lowpart_p (op)\")))\n+\n ;; Reg, subreg(reg) or const_int.\n (define_predicate \"reg_or_int_operand\"\n   (ior (match_code \"const_int\")"}]}