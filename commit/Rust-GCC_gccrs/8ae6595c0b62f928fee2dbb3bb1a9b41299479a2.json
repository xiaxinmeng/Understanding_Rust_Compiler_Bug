{"sha": "8ae6595c0b62f928fee2dbb3bb1a9b41299479a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFlNjU5NWMwYjYyZjkyOGZlZTJkYmIzYmIxYTliNDEyOTk0NzlhMg==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@hotmail.com", "date": "2004-05-06T17:43:48Z"}, "committer": {"name": "Ranjit Mathew", "email": "rmathew@gcc.gnu.org", "date": "2004-05-06T17:43:48Z"}, "message": "Fixes PR java/9685, PR java/15073\n\n\tFixes PR java/9685, PR java/15073\n\t* parse.y (accessibility_string): New method.\n\t(not_accessible_field_error): Use accessibility_string()\n\tinstead of java_accstring_lookup().\n\t(resolve_qualified_expression_name): Check with\n\tcheck_pkg_class_access() before allowing access using\n\tqualified names.\n\tFix comment typo.\n\tUse check_pkg_class_access() instead of not_accessible_p()\n\tfor unqualified types.\n\t(not_accessible_p): Use DECL_CONTEXT (member) instead of\n\tREFERENCE for package-private access checking.\n\t(patch_method_invocation): Use accessibility_string() instead\n\tof java_accstring_lookup().\n\nFrom-SVN: r81573", "tree": {"sha": "3ad5f9c549f4bba0912d27911ceac310bdbafb41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ad5f9c549f4bba0912d27911ceac310bdbafb41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ae6595c0b62f928fee2dbb3bb1a9b41299479a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae6595c0b62f928fee2dbb3bb1a9b41299479a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ae6595c0b62f928fee2dbb3bb1a9b41299479a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ae6595c0b62f928fee2dbb3bb1a9b41299479a2/comments", "author": null, "committer": null, "parents": [{"sha": "db643b91abd4de5095cdcad17a5093cdaf146f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db643b91abd4de5095cdcad17a5093cdaf146f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db643b91abd4de5095cdcad17a5093cdaf146f86"}], "stats": {"total": 66, "additions": 45, "deletions": 21}, "files": [{"sha": "13f3540192bf162e59ee2f460450c8bad499d6c6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae6595c0b62f928fee2dbb3bb1a9b41299479a2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae6595c0b62f928fee2dbb3bb1a9b41299479a2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8ae6595c0b62f928fee2dbb3bb1a9b41299479a2", "patch": "@@ -1,3 +1,20 @@\n+2004-05-06  Ranjit Mathew  <rmathew@hotmail.com>\n+\n+\tFixes PR java/9685, PR java/15073\n+\t* parse.y (accessibility_string): New method.\n+\t(not_accessible_field_error): Use accessibility_string()\n+\tinstead of java_accstring_lookup().\n+\t(resolve_qualified_expression_name): Check with\n+\tcheck_pkg_class_access() before allowing access using\n+\tqualified names.\n+\tFix comment typo.\n+\tUse check_pkg_class_access() instead of not_accessible_p()\n+\tfor unqualified types.\n+\t(not_accessible_p): Use DECL_CONTEXT (member) instead of \n+\tREFERENCE for package-private access checking.\n+\t(patch_method_invocation): Use accessibility_string() instead\n+\tof java_accstring_lookup().\n+\n 2004-04-30  Ranjit Mathew  <rmathew@hotmail.com>\n \n \tFixes PR java/15133"}, {"sha": "20b874e8abffc686bc2e7a921ddc22c897245c5a", "filename": "gcc/java/parse.y", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ae6595c0b62f928fee2dbb3bb1a9b41299479a2/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ae6595c0b62f928fee2dbb3bb1a9b41299479a2/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=8ae6595c0b62f928fee2dbb3bb1a9b41299479a2", "patch": "@@ -76,6 +76,7 @@ definitions and other extensions.  */\n \n /* Local function prototypes */\n static char *java_accstring_lookup (int);\n+static const char *accessibility_string (int);\n static void  classitf_redefinition_error (const char *,tree, tree, tree);\n static void  variable_redefinition_error (tree, tree, tree, int);\n static tree  create_class (int, tree, tree, tree);\n@@ -3182,7 +3183,7 @@ not_accessible_field_error (tree wfl, tree decl)\n {\n   parse_error_context \n     (wfl, \"Can't access %s field `%s.%s' from `%s'\",\n-     java_accstring_lookup (get_access_flags_from_decl (decl)),\n+     accessibility_string (get_access_flags_from_decl (decl)),\n      GET_TYPE_NAME (DECL_CONTEXT (decl)),\n      IDENTIFIER_POINTER (DECL_NAME (decl)),\n      IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (current_class))));\n@@ -3228,6 +3229,22 @@ java_accstring_lookup (int flags)\n #undef COPY_RETURN\n }\n \n+/* Returns a string denoting the accessibility of a class or a member as\n+   indicated by FLAGS.  We need a separate function from\n+   java_accstring_lookup, as the latter can return spurious \"static\", etc.\n+   if package-private access is defined (in which case none of the\n+   relevant access control bits in FLAGS is set).  */\n+\n+static const char *\n+accessibility_string (int flags)\n+{\n+  if (flags & ACC_PRIVATE) return \"private\";\n+  if (flags & ACC_PROTECTED) return \"protected\";\n+  if (flags & ACC_PUBLIC) return \"public\";\n+\n+  return \"package-private\";\n+}\n+\n /* Issuing error messages upon redefinition of classes, interfaces or\n    variables. */\n \n@@ -9819,6 +9836,8 @@ resolve_qualified_expression_name (tree wfl, tree *found_decl,\n \t      tree list;\n \t      *where_found = decl;\n \n+\t      check_pkg_class_access (DECL_NAME (decl), qual_wfl, true);\n+\n \t      /* We want to be absolutely sure that the class is laid\n                  out. We're going to search something inside it. */\n \t      *type_found = type = TREE_TYPE (decl);\n@@ -9859,8 +9878,8 @@ resolve_qualified_expression_name (tree wfl, tree *found_decl,\n \t  decl = QUAL_RESOLUTION (q);\n \n \t  /* Sneak preview. If next we see a `new', we're facing a\n-\t     qualification with resulted in a type being selected\n-\t     instead of a field.  Report the error */\n+\t     qualification which resulted in a type being selected\n+\t     instead of a field.  Report the error.  */\n \t  if(TREE_CHAIN (q)\n \t     && TREE_CODE (TREE_PURPOSE (TREE_CHAIN (q))) == NEW_CLASS_EXPR)\n \t    {\n@@ -9869,15 +9888,8 @@ resolve_qualified_expression_name (tree wfl, tree *found_decl,\n \t      return 1;\n \t    }\n \n-\t  if (not_accessible_p (TREE_TYPE (decl), decl, type, 0))\n-\t    {\n-\t      parse_error_context\n-\t\t(qual_wfl, \"Can't access %s class '%s' from '%s'\",\n-\t\t java_accstring_lookup (get_access_flags_from_decl (decl)),\n-\t\t IDENTIFIER_POINTER (DECL_NAME (decl)),\n-\t\t IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (current_class))));\n-\t      return 1;\n-\t    }\n+\t  check_pkg_class_access (DECL_NAME (decl), qual_wfl, true);\n+          \n \t  check_deprecation (qual_wfl, decl);\n \n \t  type = TREE_TYPE (decl);\n@@ -10140,14 +10152,9 @@ not_accessible_p (tree reference, tree member, tree where, int from_super)\n       return 1;\n     }\n \n-  /* Default access are permitted only when occurring within the\n-     package in which the type (REFERENCE) is declared. In other words,\n-     REFERENCE is defined in the current package */\n-  if (ctxp->package)\n-    return !class_in_current_package (reference);\n-\n-  /* Otherwise, access is granted */\n-  return 0;\n+  /* Default access is permitted only when occurring from within the\n+     package in which the context (MEMBER) is declared.  */\n+  return !class_in_current_package (DECL_CONTEXT (member));\n }\n \n /* Test deprecated decl access.  */\n@@ -10540,7 +10547,7 @@ patch_method_invocation (tree patch, tree primary, tree where, int from_super,\n     {\n       const char *const fct_name = IDENTIFIER_POINTER (DECL_NAME (list));\n       const char *const access =\n-\tjava_accstring_lookup (get_access_flags_from_decl (list));\n+\taccessibility_string (get_access_flags_from_decl (list));\n       const char *const klass =\n \tIDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (DECL_CONTEXT (list))));\n       const char *const refklass ="}]}