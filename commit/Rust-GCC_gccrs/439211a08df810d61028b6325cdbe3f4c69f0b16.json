{"sha": "439211a08df810d61028b6325cdbe3f4c69f0b16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM5MjExYTA4ZGY4MTBkNjEwMjhiNjMyNWNkYmUzZjRjNjlmMGIxNg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-06-03T04:38:52Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2007-06-03T04:38:52Z"}, "message": "re PR target/32163 (Compiling with stack protector causes reigster spill failure)\n\n\tPR target/32163\n\t* config/sh/sh.md (symGOT_load): Don't schedule insns when\n\tthe symbol is generated with the stack protector.\n\nFrom-SVN: r125292", "tree": {"sha": "970266bbd98f540f4cf9c254578f7d68633ae244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/970266bbd98f540f4cf9c254578f7d68633ae244"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/439211a08df810d61028b6325cdbe3f4c69f0b16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439211a08df810d61028b6325cdbe3f4c69f0b16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439211a08df810d61028b6325cdbe3f4c69f0b16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439211a08df810d61028b6325cdbe3f4c69f0b16/comments", "author": null, "committer": null, "parents": [{"sha": "2bccb817ce335a130252ceabd55524ce1b5ffa93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bccb817ce335a130252ceabd55524ce1b5ffa93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bccb817ce335a130252ceabd55524ce1b5ffa93"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "c1b2d93c518ffa8f83bb580b87b264205c5a825d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439211a08df810d61028b6325cdbe3f4c69f0b16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439211a08df810d61028b6325cdbe3f4c69f0b16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=439211a08df810d61028b6325cdbe3f4c69f0b16", "patch": "@@ -1,3 +1,9 @@\n+2007-06-03  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/32163\n+\t* config/sh/sh.md (symGOT_load): Don't schedule insns when\n+\tthe symbol is generated with the stack protector.\n+\n 2007-06-03  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* config/m68k/m68k.c (m68k_attribute_table): Add \"interrupt\"."}, {"sha": "9cc42b4f6fbeec972fd6d93c68569fd17a4298ac", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439211a08df810d61028b6325cdbe3f4c69f0b16/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439211a08df810d61028b6325cdbe3f4c69f0b16/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=439211a08df810d61028b6325cdbe3f4c69f0b16", "patch": "@@ -8502,6 +8502,20 @@ label:\n \t\t\t\t\t     operands[2],\n \t\t\t\t\t     gen_rtx_REG (Pmode, PIC_REG)));\n \n+  /* When stack protector inserts codes after the result is set to\n+     R0, @(rX, r12) will cause a spill failure for R0.  Don't schedule\n+     insns to avoid combining (set A (plus rX r12)) and (set op0 (mem A))\n+     when rX is a GOT address for the guard symbol.  Ugly but doesn't\n+     matter because this is a rare situation.  */\n+  if (!TARGET_SHMEDIA\n+      && flag_stack_protect\n+      && GET_CODE (operands[1]) == CONST\n+      && GET_CODE (XEXP (operands[1], 0)) == UNSPEC\n+      && GET_CODE (XVECEXP (XEXP (operands[1], 0), 0, 0)) == SYMBOL_REF\n+      && strcmp (XSTR (XVECEXP (XEXP (operands[1], 0), 0, 0), 0),\n+\t\t \\\"__stack_chk_guard\\\") == 0)\n+    emit_insn (gen_blockage ());\n+\n   /* N.B. This is not constant for a GOTPLT relocation.  */\n   mem = gen_rtx_MEM (Pmode, operands[3]);\n   MEM_NOTRAP_P (mem) = 1;"}]}