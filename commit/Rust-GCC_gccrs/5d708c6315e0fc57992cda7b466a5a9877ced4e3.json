{"sha": "5d708c6315e0fc57992cda7b466a5a9877ced4e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ3MDhjNjMxNWUwZmM1Nzk5MmNkYTdiNDY2YTVhOTg3N2NlZDRlMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-09T08:19:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-09T09:28:15Z"}, "message": "tree-optimization/97347 - fix another SLP constant insertion issue\n\nJust use edge insertion which will appropriately handle the situation\nfrom botan.\n\n2020-10-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97347\n\t* tree-vect-slp.c (vect_create_constant_vectors): Use\n\tedge insertion when inserting on the fallthru edge,\n\tappropriately insert at the start of BBs when inserting\n\tafter PHIs.\n\n\t* g++.dg/vect/pr97347.cc: New testcase.", "tree": {"sha": "540e36e6e80f588bc3eacd551c24129cbc552d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/540e36e6e80f588bc3eacd551c24129cbc552d30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d708c6315e0fc57992cda7b466a5a9877ced4e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d708c6315e0fc57992cda7b466a5a9877ced4e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d708c6315e0fc57992cda7b466a5a9877ced4e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d708c6315e0fc57992cda7b466a5a9877ced4e3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cde5d85bec20877bed063fc0046b9885231a0ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cde5d85bec20877bed063fc0046b9885231a0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cde5d85bec20877bed063fc0046b9885231a0ae"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "6a9116c412ae1ef94bf27812c2e580f22ec1a904", "filename": "gcc/testsuite/g++.dg/vect/pr97347.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d708c6315e0fc57992cda7b466a5a9877ced4e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr97347.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d708c6315e0fc57992cda7b466a5a9877ced4e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr97347.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr97347.cc?ref=5d708c6315e0fc57992cda7b466a5a9877ced4e3", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+\n+inline namespace __cxx11 {}\n+typedef int size_t;\n+class MessageAuthenticationCode;\n+class __uniq_ptr_impl {\n+  struct _Ptr {\n+    using type = MessageAuthenticationCode *;\n+  };\n+public:\n+  using pointer = _Ptr::type;\n+};\n+class unique_ptr {\n+public:\n+  using pointer = __uniq_ptr_impl::pointer;\n+  unique_ptr(pointer);\n+};\n+namespace __cxx11 {\n+class basic_string {\n+public:\n+  basic_string(char *);\n+  ~basic_string();\n+};\n+} // namespace __cxx11\n+class MessageAuthenticationCode {};\n+class SCAN_Name {\n+public:\n+  SCAN_Name(basic_string);\n+  size_t arg_as_integer();\n+};\n+class SipHash : public MessageAuthenticationCode {\n+public:\n+  SipHash(size_t c, size_t d) : m_C(c), m_D(d) {}\n+  size_t m_C, m_D;\n+};\n+void create(basic_string algo_spec, char *s) {\n+  basic_string provider = s;\n+  SCAN_Name req(algo_spec);\n+  unique_ptr(new SipHash(req.arg_as_integer(), req.arg_as_integer()));\n+}"}, {"sha": "479c3eeaec7c926d99f7fe89d32eecab108ecf58", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d708c6315e0fc57992cda7b466a5a9877ced4e3/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d708c6315e0fc57992cda7b466a5a9877ced4e3/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=5d708c6315e0fc57992cda7b466a5a9877ced4e3", "patch": "@@ -4145,21 +4145,28 @@ vect_create_constant_vectors (vec_info *vinfo, slp_tree op_node)\n \t\t    {\n \t\t      gimple_stmt_iterator gsi;\n \t\t      if (gimple_code (insert_after->stmt) == GIMPLE_PHI)\n-\t\t\tgsi = gsi_after_labels (gimple_bb (insert_after->stmt));\n+\t\t\t{\n+\t\t\t  gsi = gsi_after_labels (gimple_bb (insert_after->stmt));\n+\t\t\t  gsi_insert_seq_before (&gsi, ctor_seq,\n+\t\t\t\t\t\t GSI_CONTINUE_LINKING);\n+\t\t\t}\n \t\t      else if (!stmt_ends_bb_p (insert_after->stmt))\n-\t\t\tgsi = gsi_for_stmt (insert_after->stmt);\n+\t\t\t{\n+\t\t\t  gsi = gsi_for_stmt (insert_after->stmt);\n+\t\t\t  gsi_insert_seq_after (&gsi, ctor_seq,\n+\t\t\t\t\t\tGSI_CONTINUE_LINKING);\n+\t\t\t}\n \t\t      else\n \t\t\t{\n \t\t\t  /* When we want to insert after a def where the\n \t\t\t     defining stmt throws then insert on the fallthru\n \t\t\t     edge.  */\n \t\t\t  edge e = find_fallthru_edge\n \t\t\t\t     (gimple_bb (insert_after->stmt)->succs);\n-\t\t\t  gcc_assert (single_pred_p (e->dest));\n-\t\t\t  gsi = gsi_after_labels (e->dest);\n+\t\t\t  basic_block new_bb\n+\t\t\t    = gsi_insert_seq_on_edge_immediate (e, ctor_seq);\n+\t\t\t  gcc_assert (!new_bb);\n \t\t\t}\n-\t\t      gsi_insert_seq_after (&gsi, ctor_seq,\n-\t\t\t\t\t    GSI_CONTINUE_LINKING);\n \t\t    }\n \t\t  else\n \t\t    vinfo->insert_seq_on_entry (NULL, ctor_seq);"}]}