{"sha": "89a862b40a387ef42618176addf192b33c556f7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlhODYyYjQwYTM4N2VmNDI2MTgxNzZhZGRmMTkyYjMzYzU1NmY3ZA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2014-06-08T05:43:29Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2014-06-08T05:43:29Z"}, "message": "PR 56981 Flush buffer at record boundary if possible.\n\n2014-06-08  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR libfortran/56981\n\t* io/unix.h (struct stream_vtable): Add new member function,\n\tmarkeor.\n\t(smarkeor): New inline function.\n\t(flush_if_unbuffered): Remove prototype.\n\t* io/unix.c (raw_markeor): New function.\n\t(raw_vtable): Initialize markeor member.\n\t(buf_markeor): New function.\n\t(buf_vtable): Initialize markeor member.\n\t(mem_vtable): Likewise.\n\t(mem4_vtable): Likewise.\n\t(flush_if_unbuffered): Remove function.\n\t* io/transfer.c (next_record): Call smarkeor instead of\n\tflush_if_unbuffered.\n\nFrom-SVN: r211353", "tree": {"sha": "ce7c2693e80de90ba4a312ca3616c556a673856e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce7c2693e80de90ba4a312ca3616c556a673856e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89a862b40a387ef42618176addf192b33c556f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a862b40a387ef42618176addf192b33c556f7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a862b40a387ef42618176addf192b33c556f7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a862b40a387ef42618176addf192b33c556f7d/comments", "author": null, "committer": null, "parents": [{"sha": "136a5f4548a68455967a2f4b9eab4b3f78fff6d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/136a5f4548a68455967a2f4b9eab4b3f78fff6d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/136a5f4548a68455967a2f4b9eab4b3f78fff6d3"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "9d75329644526bb13b2990c57c17ea896bf93ae6", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a862b40a387ef42618176addf192b33c556f7d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a862b40a387ef42618176addf192b33c556f7d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=89a862b40a387ef42618176addf192b33c556f7d", "patch": "@@ -1,3 +1,20 @@\n+2014-06-08  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR libfortran/56981\n+\t* io/unix.h (struct stream_vtable): Add new member function,\n+\tmarkeor.\n+\t(smarkeor): New inline function.\n+\t(flush_if_unbuffered): Remove prototype.\n+\t* io/unix.c (raw_markeor): New function.\n+\t(raw_vtable): Initialize markeor member.\n+\t(buf_markeor): New function.\n+\t(buf_vtable): Initialize markeor member.\n+\t(mem_vtable): Likewise.\n+\t(mem4_vtable): Likewise.\n+\t(flush_if_unbuffered): Remove function.\n+\t* io/transfer.c (next_record): Call smarkeor instead of\n+\tflush_if_unbuffered.\n+\n 2014-05-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* intrinsics/getcwd.c: Include stdlib.h."}, {"sha": "cc0132c80f77258b51c5ba0a9dff8b24ef58d75f", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a862b40a387ef42618176addf192b33c556f7d/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a862b40a387ef42618176addf192b33c556f7d/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=89a862b40a387ef42618176addf192b33c556f7d", "patch": "@@ -3512,7 +3512,7 @@ next_record (st_parameter_dt *dtp, int done)\n     pre_position (dtp);\n \n   fbuf_flush (dtp->u.p.current_unit, dtp->u.p.mode);\n-  flush_if_unbuffered (dtp->u.p.current_unit->s);\n+  smarkeor (dtp->u.p.current_unit->s);\n }\n \n "}, {"sha": "c9866d3495a6092e07e7f5aba62ac2cdf0510073", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a862b40a387ef42618176addf192b33c556f7d/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a862b40a387ef42618176addf192b33c556f7d/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=89a862b40a387ef42618176addf192b33c556f7d", "patch": "@@ -421,6 +421,12 @@ raw_close (unix_stream * s)\n   return retval;\n }\n \n+static int\n+raw_markeor (unix_stream * s __attribute__ ((unused)))\n+{\n+  return 0;\n+}\n+\n static const struct stream_vtable raw_vtable = {\n   .read = (void *) raw_read,\n   .write = (void *) raw_write,\n@@ -429,7 +435,8 @@ static const struct stream_vtable raw_vtable = {\n   .size = (void *) raw_size,\n   .trunc = (void *) raw_truncate,\n   .close = (void *) raw_close,\n-  .flush = (void *) raw_flush \n+  .flush = (void *) raw_flush,\n+  .markeor = (void *) raw_markeor\n };\n \n static int\n@@ -584,6 +591,23 @@ buf_write (unix_stream * s, const void * buf, ssize_t nbyte)\n   return nbyte;\n }\n \n+\n+/* \"Unbuffered\" really means I/O statement buffering. For formatted\n+   I/O, the fbuf manages this, and then uses raw I/O. For unformatted\n+   I/O, buffered I/O is used, and the buffer is flushed at the end of\n+   each I/O statement, where this function is called.  Alternatively,\n+   the buffer is flushed at the end of the record if the buffer is\n+   more than half full; this prevents needless seeking back and forth\n+   when writing sequential unformatted.  */\n+\n+static int\n+buf_markeor (unix_stream * s)\n+{\n+  if (s->unbuffered || s->ndirty >= BUFFER_SIZE / 2)\n+    return buf_flush (s);\n+  return 0;\n+}\n+\n static gfc_offset\n buf_seek (unix_stream * s, gfc_offset offset, int whence)\n {\n@@ -651,7 +675,8 @@ static const struct stream_vtable buf_vtable = {\n   .size = (void *) buf_size,\n   .trunc = (void *) buf_truncate,\n   .close = (void *) buf_close,\n-  .flush = (void *) buf_flush \n+  .flush = (void *) buf_flush,\n+  .markeor = (void *) buf_markeor\n };\n \n static int\n@@ -910,7 +935,8 @@ static const struct stream_vtable mem_vtable = {\n   .size = (void *) buf_size,\n   .trunc = (void *) mem_truncate,\n   .close = (void *) mem_close,\n-  .flush = (void *) mem_flush \n+  .flush = (void *) mem_flush,\n+  .markeor = (void *) raw_markeor\n };\n \n static const struct stream_vtable mem4_vtable = {\n@@ -923,7 +949,8 @@ static const struct stream_vtable mem4_vtable = {\n   .size = (void *) buf_size,\n   .trunc = (void *) mem_truncate,\n   .close = (void *) mem_close,\n-  .flush = (void *) mem_flush \n+  .flush = (void *) mem_flush,\n+  .markeor = (void *) raw_markeor\n };\n \n /*********************************************************************\n@@ -972,21 +999,6 @@ open_internal4 (char *base, int length, gfc_offset offset)\n }\n \n \n-/* \"Unbuffered\" really means I/O statement buffering. For formatted\n-   I/O, the fbuf manages this, and then uses raw I/O. For unformatted\n-   I/O, buffered I/O is used, and the buffer is flushed at the end of\n-   each I/O statement, where this function is called.  */\n-\n-int\n-flush_if_unbuffered (stream* s)\n-{\n-  unix_stream* us = (unix_stream*) s;\n-  if (us->unbuffered)\n-    return sflush (s);\n-  return 0;\n-}\n-\n-\n /* fd_to_stream()-- Given an open file descriptor, build a stream\n  * around it. */\n "}, {"sha": "0f696df5dac59a88454b7ef4733aea3b1eac7962", "filename": "libgfortran/io/unix.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89a862b40a387ef42618176addf192b33c556f7d/libgfortran%2Fio%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89a862b40a387ef42618176addf192b33c556f7d/libgfortran%2Fio%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.h?ref=89a862b40a387ef42618176addf192b33c556f7d", "patch": "@@ -38,6 +38,7 @@ struct stream_vtable\n   int (* const trunc) (struct stream *, gfc_offset);\n   int (* const flush) (struct stream *);\n   int (* const close) (struct stream *);\n+  int (* const markeor) (struct stream *);\n };\n \n struct stream\n@@ -94,6 +95,12 @@ sclose (stream * s)\n   return s->vptr->close (s);\n }\n \n+static inline int\n+smarkeor (stream * s)\n+{\n+  return s->vptr->markeor (s);\n+}\n+\n \n extern int compare_files (stream *, stream *);\n internal_proto(compare_files);\n@@ -167,9 +174,6 @@ internal_proto(inquire_readwrite);\n extern void flush_if_preconnected (stream *);\n internal_proto(flush_if_preconnected);\n \n-extern int flush_if_unbuffered (stream*);\n-internal_proto(flush_if_unbuffered);\n-\n extern int stream_isatty (stream *);\n internal_proto(stream_isatty);\n "}]}