{"sha": "ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U1MmUwZmZiNGYxZWE3YmQ0ZmI5OWFlYTVkZGE3NWQyNjBlNDM4Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-31T07:53:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-31T07:53:11Z"}, "message": "re PR tree-optimization/91257 (Compile-time and memory-hog hog)\n\n2019-07-31  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91257\n\t* tree-vrp.c (union_ranges): Unify equality and less tests\n\tby using compare_values.  Re-order cheap tests first.\n\nFrom-SVN: r273923", "tree": {"sha": "fa5e90e2b49ba23ce8378101ebe58e0816ce0334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa5e90e2b49ba23ce8378101ebe58e0816ce0334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3ac76aa4078e84d8ca0daf6dab7bc9738f3aa33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ac76aa4078e84d8ca0daf6dab7bc9738f3aa33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3ac76aa4078e84d8ca0daf6dab7bc9738f3aa33"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "6c3fb2ca9e8fce42a1997d323a652af63c2f944e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f", "patch": "@@ -1,3 +1,9 @@\n+2019-07-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91257\n+\t* tree-vrp.c (union_ranges): Unify equality and less tests\n+\tby using compare_values.  Re-order cheap tests first.\n+\n 2019-07-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/91301"}, {"sha": "e2850682da2072e0561846ee80103801884bcdfb", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ce52e0ffb4f1ea7bd4fb99aea5dda75d260e438f", "patch": "@@ -5420,8 +5420,10 @@ union_ranges (enum value_range_kind *vr0type,\n \t      enum value_range_kind vr1type,\n \t      tree vr1min, tree vr1max)\n {\n-  bool mineq = vrp_operand_equal_p (*vr0min, vr1min);\n-  bool maxeq = vrp_operand_equal_p (*vr0max, vr1max);\n+  int cmpmin = compare_values (*vr0min, vr1min);\n+  int cmpmax = compare_values (*vr0max, vr1max);\n+  bool mineq = cmpmin == 0;\n+  bool maxeq = cmpmax == 0;\n \n   /* [] is vr0, () is vr1 in the following classification comments.  */\n   if (mineq && maxeq)\n@@ -5521,8 +5523,8 @@ union_ranges (enum value_range_kind *vr0type,\n       else\n \tgcc_unreachable ();\n     }\n-  else if ((maxeq || operand_less_p (vr1max, *vr0max) == 1)\n-\t   && (mineq || operand_less_p (*vr0min, vr1min) == 1))\n+  else if ((maxeq || cmpmax == 1)\n+\t   && (mineq || cmpmin == -1))\n     {\n       /* [ (  ) ] or [(  ) ] or [ (  )] */\n       if (*vr0type == VR_RANGE\n@@ -5555,8 +5557,8 @@ union_ranges (enum value_range_kind *vr0type,\n       else\n \tgcc_unreachable ();\n     }\n-  else if ((maxeq || operand_less_p (*vr0max, vr1max) == 1)\n-\t   && (mineq || operand_less_p (vr1min, *vr0min) == 1))\n+  else if ((maxeq || cmpmax == -1)\n+\t   && (mineq || cmpmin == 1))\n     {\n       /* ( [  ] ) or ([  ] ) or ( [  ]) */\n       if (*vr0type == VR_RANGE\n@@ -5595,10 +5597,10 @@ union_ranges (enum value_range_kind *vr0type,\n       else\n \tgcc_unreachable ();\n     }\n-  else if ((operand_less_p (vr1min, *vr0max) == 1\n-\t    || operand_equal_p (vr1min, *vr0max, 0))\n-\t   && operand_less_p (*vr0min, vr1min) == 1\n-\t   && operand_less_p (*vr0max, vr1max) == 1)\n+  else if (cmpmin == -1\n+\t   && cmpmax == -1\n+\t   && (operand_less_p (vr1min, *vr0max) == 1\n+\t       || operand_equal_p (vr1min, *vr0max, 0)))\n     {\n       /* [  (  ]  ) or [   ](   ) */\n       if (*vr0type == VR_RANGE\n@@ -5632,10 +5634,10 @@ union_ranges (enum value_range_kind *vr0type,\n       else\n \tgcc_unreachable ();\n     }\n-  else if ((operand_less_p (*vr0min, vr1max) == 1\n-\t    || operand_equal_p (*vr0min, vr1max, 0))\n-\t   && operand_less_p (vr1min, *vr0min) == 1\n-\t   && operand_less_p (vr1max, *vr0max) == 1)\n+  else if (cmpmin == 1\n+\t   && cmpmax == 1\n+\t   && (operand_less_p (*vr0min, vr1max) == 1\n+\t       || operand_equal_p (*vr0min, vr1max, 0)))\n     {\n       /* (  [  )  ] or (   )[   ] */\n       if (*vr0type == VR_RANGE"}]}