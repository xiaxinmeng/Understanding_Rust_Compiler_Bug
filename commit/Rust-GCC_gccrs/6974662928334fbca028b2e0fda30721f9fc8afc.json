{"sha": "6974662928334fbca028b2e0fda30721f9fc8afc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3NDY2MjkyODMzNGZiY2EwMjhiMmUwZmRhMzA3MjFmOWZjOGFmYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-08-31T14:00:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-31T14:00:16Z"}, "message": "re PR tree-optimization/67381 (genmatch does not honor the order of patterns)\n\n2015-08-31  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/67381\n\t* genmatch.c (dt_node::gen_kids): Also treat matches as barrier.\n\nFrom-SVN: r227344", "tree": {"sha": "5e0a0c373f112bbcce9d10d7ca9acfe3be1705fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e0a0c373f112bbcce9d10d7ca9acfe3be1705fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6974662928334fbca028b2e0fda30721f9fc8afc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6974662928334fbca028b2e0fda30721f9fc8afc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6974662928334fbca028b2e0fda30721f9fc8afc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6974662928334fbca028b2e0fda30721f9fc8afc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77c028c5229627905a5ae17726868561bdd65da8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c028c5229627905a5ae17726868561bdd65da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c028c5229627905a5ae17726868561bdd65da8"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "adc85fe964af83ce4a8978cca291faeb60dc013e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6974662928334fbca028b2e0fda30721f9fc8afc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6974662928334fbca028b2e0fda30721f9fc8afc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6974662928334fbca028b2e0fda30721f9fc8afc", "patch": "@@ -1,3 +1,8 @@\n+2015-08-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/67381\n+\t* genmatch.c (dt_node::gen_kids): Also treat matches as barrier.\n+\n 2015-08-31  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* match.pd (SIN, COS, TAN, COSH): Reorder for consistency."}, {"sha": "72666373740c9d68bfd2bedddba6d3427279cf5c", "filename": "gcc/genmatch.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6974662928334fbca028b2e0fda30721f9fc8afc/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6974662928334fbca028b2e0fda30721f9fc8afc/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=6974662928334fbca028b2e0fda30721f9fc8afc", "patch": "@@ -2529,12 +2529,15 @@ dt_node::gen_kids (FILE *f, int indent, bool gimple)\n \t  else\n \t    gcc_unreachable ();\n \t}\n-      else if (kids[i]->type == dt_node::DT_MATCH\n-\t       || kids[i]->type == dt_node::DT_SIMPLIFY)\n+      else if (kids[i]->type == dt_node::DT_SIMPLIFY)\n \tothers.safe_push (kids[i]);\n-      else if (kids[i]->type == dt_node::DT_TRUE)\n+      else if (kids[i]->type == dt_node::DT_MATCH\n+\t       || kids[i]->type == dt_node::DT_TRUE)\n \t{\n \t  /* A DT_TRUE operand serves as a barrier - generate code now\n+\t     for what we have collected sofar.\n+\t     Like DT_TRUE, DT_MATCH serves as a barrier as it can cause\n+\t     dependent matches to get out-of-order.  Generate code now\n \t     for what we have collected sofar.  */\n \t  gen_kids_1 (f, indent, gimple, gimple_exprs, generic_exprs,\n \t\t      fns, generic_fns, preds, others);"}]}