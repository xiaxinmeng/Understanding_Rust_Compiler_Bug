{"sha": "76416d899cb6d26088a9cd22da5a23914fec2ce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY0MTZkODk5Y2I2ZDI2MDg4YTljZDIyZGE1YTIzOTE0ZmVjMmNlNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-12T16:20:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-12T16:20:21Z"}, "message": "re PR rtl-optimization/89965 (wrong code with -O -mtune=nano-x2 -fcaller-saves -fexpensive-optimizations -fno-tree-dce -fno-tree-ter)\n\n\tPR rtl-optimization/89965\n\t* dce.c: Include rtl-iter.h.\n\t(struct check_argument_load_data): New type.\n\t(check_argument_load): New function.\n\t(find_call_stack_args): Check for loads from stack slots still tracked\n\tin sp_bytes and punt if any is found.\n\n\t* gcc.target/i386/pr89965.c: New test.\n\nFrom-SVN: r270323", "tree": {"sha": "ec74ffabc483a16790bb4ff7ba1f5782a5fcdad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec74ffabc483a16790bb4ff7ba1f5782a5fcdad0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76416d899cb6d26088a9cd22da5a23914fec2ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76416d899cb6d26088a9cd22da5a23914fec2ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76416d899cb6d26088a9cd22da5a23914fec2ce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76416d899cb6d26088a9cd22da5a23914fec2ce6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2e77a37a2c4b8165c542c93966c4a3874fde817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2e77a37a2c4b8165c542c93966c4a3874fde817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2e77a37a2c4b8165c542c93966c4a3874fde817"}], "stats": {"total": 104, "additions": 102, "deletions": 2}, "files": [{"sha": "02d3d07d0e4cb88ee93fbd7d096bab90a8f895b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76416d899cb6d26088a9cd22da5a23914fec2ce6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76416d899cb6d26088a9cd22da5a23914fec2ce6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76416d899cb6d26088a9cd22da5a23914fec2ce6", "patch": "@@ -1,4 +1,11 @@\n 2019-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\t\n+\tPR rtl-optimization/89965\n+\t* dce.c: Include rtl-iter.h.\n+\t(struct check_argument_load_data): New type.\n+\t(check_argument_load): New function.\n+\t(find_call_stack_args): Check for loads from stack slots still tracked\n+\tin sp_bytes and punt if any is found.\n \n \t* config/mips/loongson-mmiintrin.h: Fix up #error message.\n "}, {"sha": "e6822fed7911f4938282db32d2ec2cf1b3495014", "filename": "gcc/dce.c", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76416d899cb6d26088a9cd22da5a23914fec2ce6/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76416d899cb6d26088a9cd22da5a23914fec2ce6/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=76416d899cb6d26088a9cd22da5a23914fec2ce6", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"valtrack.h\"\n #include \"tree-pass.h\"\n #include \"dbgcnt.h\"\n+#include \"rtl-iter.h\"\n \n \n /* -------------------------------------------------------------------------\n@@ -325,6 +326,48 @@ sp_based_mem_offset (rtx_call_insn *call_insn, const_rtx mem, bool fast)\n   return off;\n }\n \n+/* Data for check_argument_load called via note_uses.  */\n+struct check_argument_load_data {\n+  bitmap sp_bytes;\n+  HOST_WIDE_INT min_sp_off, max_sp_off;\n+  rtx_call_insn *call_insn;\n+  bool fast;\n+  bool load_found;\n+};\n+\n+/* Helper function for find_call_stack_args.  Check if there are\n+   any loads from the argument slots in between the const/pure call\n+   and store to the argument slot, set LOAD_FOUND if any is found.  */\n+\n+static void\n+check_argument_load (rtx *loc, void *data)\n+{\n+  struct check_argument_load_data *d\n+    = (struct check_argument_load_data *) data;\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, *loc, NONCONST)\n+    {\n+      const_rtx mem = *iter;\n+      HOST_WIDE_INT size;\n+      if (MEM_P (mem)\n+\t  && MEM_SIZE_KNOWN_P (mem)\n+\t  && MEM_SIZE (mem).is_constant (&size))\n+\t{\n+\t  HOST_WIDE_INT off = sp_based_mem_offset (d->call_insn, mem, d->fast);\n+\t  if (off != INTTYPE_MINIMUM (HOST_WIDE_INT)\n+\t      && off < d->max_sp_off\n+\t      && off + size > d->min_sp_off)\n+\t    for (HOST_WIDE_INT byte = MAX (off, d->min_sp_off);\n+\t\t byte < MIN (off + size, d->max_sp_off); byte++)\n+\t      if (bitmap_bit_p (d->sp_bytes, byte - d->min_sp_off))\n+\t\t{\n+\t\t  d->load_found = true;\n+\t\t  return;\n+\t\t}\n+\t}\n+    }\n+}\n+\n /* Try to find all stack stores of CALL_INSN arguments if\n    ACCUMULATE_OUTGOING_ARGS.  If all stack stores have been found\n    and it is therefore safe to eliminate the call, return true,\n@@ -394,8 +437,10 @@ find_call_stack_args (rtx_call_insn *call_insn, bool do_mark, bool fast,\n       }\n \n   /* Walk backwards, looking for argument stores.  The search stops\n-     when seeing another call, sp adjustment or memory store other than\n-     argument store.  */\n+     when seeing another call, sp adjustment, memory store other than\n+     argument store or a read from an argument stack slot.  */\n+  struct check_argument_load_data data\n+    = { sp_bytes, min_sp_off, max_sp_off, call_insn, fast, false };\n   ret = false;\n   for (insn = PREV_INSN (call_insn); insn; insn = prev_insn)\n     {\n@@ -414,6 +459,10 @@ find_call_stack_args (rtx_call_insn *call_insn, bool do_mark, bool fast,\n       if (!set || SET_DEST (set) == stack_pointer_rtx)\n \tbreak;\n \n+      note_uses (&PATTERN (insn), check_argument_load, &data);\n+      if (data.load_found)\n+\tbreak;\n+\n       if (!MEM_P (SET_DEST (set)))\n \tcontinue;\n "}, {"sha": "e3f1bf12049a379e1398eecd6310064deffab6cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76416d899cb6d26088a9cd22da5a23914fec2ce6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76416d899cb6d26088a9cd22da5a23914fec2ce6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76416d899cb6d26088a9cd22da5a23914fec2ce6", "patch": "@@ -1,3 +1,8 @@\n+2019-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\t\n+\tPR rtl-optimization/89965\n+\t* gcc.target/i386/pr89965.c: New test.\n+\n 2019-04-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87603 - constexpr functions are no longer noexcept."}, {"sha": "db6382cbf803a52c443fd96387ea90581eab9a89", "filename": "gcc/testsuite/gcc.target/i386/pr89965.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76416d899cb6d26088a9cd22da5a23914fec2ce6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89965.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76416d899cb6d26088a9cd22da5a23914fec2ce6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89965.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr89965.c?ref=76416d899cb6d26088a9cd22da5a23914fec2ce6", "patch": "@@ -0,0 +1,39 @@\n+/* PR rtl-optimization/89965 */\n+/* { dg-do run } */\n+/* { dg-options \"-O -mtune=nano-x2 -fcaller-saves -fexpensive-optimizations -fno-tree-dce -fno-tree-ter\" } */\n+/* { dg-additional-options \"-march=i386\" { target ia32 } } */\n+\n+int a;\n+\n+__attribute__ ((noipa)) unsigned long long\n+foo (unsigned char c, unsigned d, unsigned e, unsigned long long f,\n+     unsigned char g, unsigned h, unsigned long long i)\n+{\n+  (void) d;\n+  unsigned short j = __builtin_mul_overflow_p (~0, h, c);\n+  e <<= e;\n+  i >>= 7;\n+  c *= i;\n+  i /= 12;\n+  a = __builtin_popcount (c);\n+  __builtin_add_overflow (e, a, &f);\n+  return c + f + g + j + h;\n+}\n+\n+__attribute__ ((noipa)) void\n+bar (void)\n+{\n+  char buf[64];\n+  __builtin_memset (buf, 0x55, sizeof buf);\n+  asm volatile (\"\" : : \"r\" (&buf[0]) : \"memory\");\n+}\n+\n+int\n+main (void)\n+{\n+  bar ();\n+  unsigned long long x = foo (2, 0, 0, 0, 0, 0, 0);\n+  if (x != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}