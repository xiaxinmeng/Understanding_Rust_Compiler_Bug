{"sha": "46d3a87396f1e5be05d7ef5709cdb0cc968b10cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZkM2E4NzM5NmYxZTViZTA1ZDdlZjU3MDljZGIwY2M5NjhiMTBjZg==", "commit": {"author": {"name": "Chandrakala Chavva", "email": "cchavva@redhat.com", "date": "2000-07-10T20:10:15Z"}, "committer": {"name": "Chandra Chavva", "email": "cchavva@gcc.gnu.org", "date": "2000-07-10T20:10:15Z"}, "message": "flags.h: Add new variable flag_single_precision_constant.\n\n        * flags.h : Add new variable flag_single_precision_constant.\n        * toplev.c (display_help) : Add -fsingle-precision-constant option.\n        (flag_single_precision_constant): New.\n        * c-lex.c (yylex): Convert floating point constant to single\n        precision constant.\n        * invoke.texi : Add documentation for this new option.\n\nFrom-SVN: r34946", "tree": {"sha": "a1b03704b1ab4a43af71f698bb714888ddcdaad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1b03704b1ab4a43af71f698bb714888ddcdaad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/comments", "author": null, "committer": null, "parents": [{"sha": "92c26242fab0e2558697221a2597101821b17346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c26242fab0e2558697221a2597101821b17346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92c26242fab0e2558697221a2597101821b17346"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "074b8da44dfd3085ae5d839f0632810e61f0d1b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46d3a87396f1e5be05d7ef5709cdb0cc968b10cf", "patch": "@@ -1,3 +1,12 @@\n+2000-07-10  Chandrakala Chavva  <cchavva@redhat.com>\n+\n+\t* flags.h : Add new variable flag_single_precision_constant.\n+\t* toplev.c (display_help) : Add -fsingle-precision-constant option.\n+\t(flag_single_precision_constant): New.\n+\t* c-lex.c (yylex): Convert floating point constant to single\n+\tprecision constant.\n+\t* invoke.texi : Add documentation for this new option.\n+\n 2000-07-10  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* diagnostic.c (output_octal): Second parameter is unsigned."}, {"sha": "e38b8070ed6a8e883e987a51880783d6debfaeb3", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=46d3a87396f1e5be05d7ef5709cdb0cc968b10cf", "patch": "@@ -1176,6 +1176,8 @@ parse_float (data)\n   else\n     {\n       errno = 0;\n+      if (flag_single_precision_constant)\n+        args->type = float_type_node;\n       if (args->base == 16)\n \targs->value = REAL_VALUE_HTOF (copy, TYPE_MODE (args->type));\n       else"}, {"sha": "3dc5c7ec788e46bf91e50610e526a14be474140e", "filename": "gcc/flags.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=46d3a87396f1e5be05d7ef5709cdb0cc968b10cf", "patch": "@@ -379,6 +379,11 @@ extern int flag_schedule_speculative_load_dangerous;\n    by a cheaper branch, on a count register. */\n extern int flag_branch_on_count_reg;\n \n+/* This option is set to 1 on -fsingle-precision-constant option which is\n+   used to convert the floating point constants to single precision \n+   constants. */\n+\n+extern int flag_single_precision_constant;\n \n /* Nonzero means put things in delayed-branch slots if supported. */\n "}, {"sha": "e1f2503b9cecd906b82a2cff183a22e7eac8ee5b", "filename": "gcc/invoke.texi", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=46d3a87396f1e5be05d7ef5709cdb0cc968b10cf", "patch": "@@ -99,7 +99,7 @@ in the following sections.\n -ansi -fstd  -fallow-single-precision  -fcond-mismatch  -fno-asm\n -fno-builtin  -ffreestanding  -fhosted  -fsigned-bitfields  -fsigned-char\n -funsigned-bitfields  -funsigned-char  -fwritable-strings\n--traditional  -traditional-cpp  -trigraphs\n+-traditional  -traditional-cpp  -trigraphs -fsingle-precision-constant\n @end smallexample\n \n @item C++ Language Options\n@@ -178,7 +178,7 @@ in the following sections.\n -fregmove -frerun-cse-after-loop  -frerun-loop-opt  -freduce-all-givs\n -fschedule-insns  -fschedule-insns2  -fssa -fstrength-reduce\n -fstrict-aliasing  -fthread-jumps  -funroll-all-loops\n--funroll-loops\n+-funroll-loops \n -O  -O0  -O1  -O2  -O3 -Os\n @end smallexample\n \n@@ -2897,6 +2897,10 @@ the flow graph is translated back from SSA form.  (Currently, no\n SSA-based optimizations are implemented, but converting into and out of\n SSA form is not an invariant operation, and generated code may differ.)\n \n+@item -fsingle-precision-constant\n+Treat floating point constant as single precision constant instead of\n+implicitly converting it to double precision constant.\n+\n @end table\n \n @node Preprocessor Options"}, {"sha": "098a2ec3991b562f4750471d15b17cbec1e18b3e", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46d3a87396f1e5be05d7ef5709cdb0cc968b10cf/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=46d3a87396f1e5be05d7ef5709cdb0cc968b10cf", "patch": "@@ -744,6 +744,8 @@ int flag_schedule_speculative = 1;\n int flag_schedule_speculative_load = 0;\n int flag_schedule_speculative_load_dangerous = 0;\n \n+int flag_single_precision_constant;\n+\n /* flag_on_branch_count_reg means try to replace add-1,compare,branch tupple\n    by a cheaper branch, on a count register. */\n int flag_branch_on_count_reg;\n@@ -1103,7 +1105,9 @@ lang_independent_options f_options[] =\n   {\"bounded-pointers\", &flag_bounded_pointers, 1,\n    \"Compile pointers as triples: value, base & end\" },\n   {\"bounds-check\", &flag_bounds_check, 1,\n-   \"Generate code to check bounds before dereferencing pointers and arrays\" }\n+   \"Generate code to check bounds before dereferencing pointers and arrays\" },\n+  {\"single-precision-constant\", &flag_single_precision_constant, 1,\n+  \"Convert floating point constant to single precision constant\"}\n };\n \n #define NUM_ELEM(a)  (sizeof (a) / sizeof ((a)[0]))"}]}