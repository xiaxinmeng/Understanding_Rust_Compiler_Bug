{"sha": "74d14778e73dfda365b0ac71478efafd9ad91c2a", "node_id": "C_kwDOANBUbNoAKDc0ZDE0Nzc4ZTczZGZkYTM2NWIwYWM3MTQ3OGVmYWZkOWFkOTFjMmE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-26T23:25:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-01T15:00:33Z"}, "message": "libstdc++: Define std::__is_constant_evaluated() for internal use\n\nThis adds std::__is_constant_evaluated() as a C++11 wrapper for\n__builtin_is_constant_evaluated, but just returning false if the\nbuilt-in isn't supported by the compiler. This allows us to use it\nthroughout the library without checking __has_builtin every time.\n\nSome uses in std::vector and std::string can only be constexpr when the\nstd::is_constant_evaluated() function actually works, so we might as\nwell guard them with a relevant macro and call that function directly,\nrather than the built-in or std::__is_constant_evaluated().\n\nThe remaining checks of the __cpp_lib_is_constant_evaluated macro could\nnow be replaced by checking __cplusplus >= 202002 instead, but there's\nno practical difference. We still need some kind of preprocessor check\nthere anyway.\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/doxygen/user.cfg.in (PREDEFINED): Change macro name.\n\t* include/bits/allocator.h (allocate, deallocate): Use\n\tstd::__is_constant_evaluated() unconditionally, instead of\n\tchecking whether std::is_constant_evaluated() (or the built-in)\n\tcan be used.\n\t* include/bits/basic_string.h: Check new macro. call\n\tstd::is_constant_evaluated() directly in C++20-only code that is\n\tguarded by a suitable macro.\n\t* include/bits/basic_string.tcc: Likewise.\n\t* include/bits/c++config (__is_constant_evaluated): Define.\n\t(_GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED): Replace with ...\n\t(_GLIBCXX_HAVE_IS_CONSTANT_EVALUATED): New macro.\n\t* include/bits/char_traits.h (char_traits): Replace conditional\n\tcalls to std::is_constant_evaluated with unconditional calls to\n\tstd::__is_constant_evaluated.\n\t* include/bits/cow_string.h: Use new macro.\n\t* include/bits/ranges_algobase.h (__copy_or_move): Replace\n\tconditional calls to std::is_constant_evaluated with unconditional\n\tcalls to std::__is_constant_evaluated.\n\t(__copy_or_move_backward, __fill_n_fn): Likewise.\n\t* include/bits/ranges_cmp.h (ranges::less): Likewise.\n\t* include/bits/stl_algobase.h (lexicographical_compare_three_way):\n\tLikewise.\n\t* include/bits/stl_bvector.h: Call std::is_constant_evaluated\n\tdirectly in C++20-only code that is guarded by a suitable macro.\n\t* include/bits/stl_construct.h (_Construct, _Destroy, _Destroy_n):\n\tReplace is_constant_evaluated with __is_constant_evaluated.\n\t* include/bits/stl_function.h (greater, less, greater_equal)\n\t(less_equal): Replace __builtin_is_constant_evaluated and\n\t__builtin_constant_p with __is_constant_evaluated.\n\t* include/bits/stl_vector.h: Call std::is_constant_evaluated()\n\tin C++20-only code.\n\t* include/debug/helper_functions.h (__check_singular): Use\n\t__is_constant_evaluated instead of built-in, or remove check\n\tentirely.\n\t* include/std/array (operator<=>): Use __is_constant_evaluated\n\tunconditionally.\n\t* include/std/bit (__bit_ceil): Likewise.\n\t* include/std/type_traits (is_constant_evaluated): Define using\n\t'if consteval' if possible.\n\t* include/std/version: Use new macro.\n\t* libsupc++/compare: Use __is_constant_evaluated instead of\n\t__builtin_is_constant_evaluated.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc:\n\tAdjust dg-error lines.", "tree": {"sha": "7835169edb6d42b1bb324ffb23345a339e154578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7835169edb6d42b1bb324ffb23345a339e154578"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74d14778e73dfda365b0ac71478efafd9ad91c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d14778e73dfda365b0ac71478efafd9ad91c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d14778e73dfda365b0ac71478efafd9ad91c2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d14778e73dfda365b0ac71478efafd9ad91c2a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b83bc6097fd138b2dc81f3c8f1786c9079dcd67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b83bc6097fd138b2dc81f3c8f1786c9079dcd67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b83bc6097fd138b2dc81f3c8f1786c9079dcd67"}], "stats": {"total": 299, "additions": 142, "deletions": 157}, "files": [{"sha": "2f15f2c1b8238d4bb197a53758412d4c8984c820", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -2399,7 +2399,7 @@ PREDEFINED             = __cplusplus=202002L \\\n                          \"__has_builtin(x)=1\" \\\n                          _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP \\\n                          _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE \\\n-                         _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED \\\n+                         _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED \\\n                          _GLIBCXX_HAVE_BUILTIN_LAUNDER \\\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this"}, {"sha": "1c099514e18f85a4a8c795507944b0b13025cd40", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -178,24 +178,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr _Tp*\n       allocate(size_t __n)\n       {\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+\tif (std::__is_constant_evaluated())\n \t  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));\n-#endif\n \treturn __allocator_base<_Tp>::allocate(__n, 0);\n       }\n \n       [[__gnu__::__always_inline__]]\n       constexpr void\n       deallocate(_Tp* __p, size_t __n)\n       {\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+\tif (std::__is_constant_evaluated())\n \t  {\n \t    ::operator delete(__p);\n \t    return;\n \t  }\n-#endif\n \t__allocator_base<_Tp>::deallocate(__p, __n);\n       }\n #endif // C++20"}, {"sha": "4007a8d2d7c0888772d28dd7d2b85a3650a9481b", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -59,7 +59,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #ifdef __cpp_lib_is_constant_evaluated\n // Support P0980R1 in C++20.\n # define __cpp_lib_constexpr_string 201907L\n-#elif __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+#elif __cplusplus >= 201703L && _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED\n // Support P0426R1 changes to char_traits in C++17.\n # define __cpp_lib_constexpr_string 201611L\n #endif\n@@ -101,7 +101,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  allocate(_Char_alloc_type& __a, typename _Base::size_type __n)\n \t  {\n \t    pointer __p = _Base::allocate(__a, __n);\n-\t    if (__builtin_is_constant_evaluated())\n+\t    if (std::is_constant_evaluated())\n \t      // Begin the lifetime of characters in allocated storage.\n \t      for (size_type __i = 0; __i < __n; ++__i)\n \t\tstd::construct_at(__builtin_addressof(__p[__i]));\n@@ -352,7 +352,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_use_local_data() _GLIBCXX_NOEXCEPT\n       {\n #if __cpp_lib_is_constant_evaluated\n-\tif (__builtin_is_constant_evaluated())\n+\tif (std::is_constant_evaluated())\n \t  _M_local_buf[0] = _CharT();\n #endif\n \treturn _M_local_data();"}, {"sha": "4a2d48c48e82cf71d159088edf37a7cc736914b4", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -488,7 +488,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t  const size_type __how_much = __old_size - __pos - __len1;\n #if __cpp_lib_is_constant_evaluated\n-\t  if (__builtin_is_constant_evaluated())\n+\t  if (std::is_constant_evaluated())\n \t    {\n \t      auto __newp = _Alloc_traits::allocate(_M_get_allocator(),\n \t\t\t\t\t\t    __new_size);\n@@ -571,7 +571,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __p = _M_create(__n, __capacity);\n \t  this->_S_copy(__p, _M_data(), length()); // exclude trailing null\n #if __cpp_lib_is_constant_evaluated\n-\t  if (__builtin_is_constant_evaluated())\n+\t  if (std::is_constant_evaluated())\n \t    traits_type::assign(__p + length(), __n - length(), _CharT());\n #endif\n \t  _M_dispose();"}, {"sha": "90513ccae3875fe25add5bbddd26c2072e3c8a6e", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -495,6 +495,27 @@ namespace std\n \n #endif // _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT && IEEE128\n \n+namespace std\n+{\n+  // Internal version of std::is_constant_evaluated().\n+  // This can be used without checking if the compiler supports the feature.\n+  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if\n+  // the compiler support is present to make this function work as expected.\n+  _GLIBCXX_CONSTEXPR inline bool\n+  __is_constant_evaluated() _GLIBCXX_NOEXCEPT\n+  {\n+#if __cpp_if_consteval >= 202106L\n+# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1\n+    if consteval { return true; } else { return false; }\n+#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)\n+# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1\n+    return __builtin_is_constant_evaluated();\n+#else\n+    return false;\n+#endif\n+  }\n+}\n+\n // Debug Mode implies checking assertions.\n #if defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_ASSERTIONS)\n # define _GLIBCXX_ASSERTIONS 1\n@@ -507,9 +528,9 @@ namespace std\n #endif\n \n \n-#if __has_builtin(__builtin_is_constant_evaluated)\n+#if _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED\n # define __glibcxx_constexpr_assert(cond) \\\n-  if (__builtin_is_constant_evaluated() && !bool(cond))\t\\\n+  if (std::__is_constant_evaluated() && !bool(cond))\t\\\n     __builtin_unreachable() /* precondition violation detected! */\n #else\n # define __glibcxx_constexpr_assert(unevaluated)\n@@ -762,10 +783,6 @@ namespace std\n # define _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE 1\n #endif\n \n-#if _GLIBCXX_HAS_BUILTIN(__builtin_is_constant_evaluated)\n-#  define _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED 1\n-#endif\n-\n #if _GLIBCXX_HAS_BUILTIN(__is_same)\n #  define _GLIBCXX_HAVE_BUILTIN_IS_SAME 1\n #endif\n@@ -776,7 +793,6 @@ namespace std\n \n #undef _GLIBCXX_HAS_BUILTIN\n \n-\n // PSTL configuration\n \n #if __cplusplus >= 201703L"}, {"sha": "da3e0ffffaa0452b51cb07b8bba49a6d22143994", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 66, "deletions": 63, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -38,6 +38,9 @@\n \n #include <bits/postypes.h>      // For streampos\n #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.\n+#if __cplusplus >= 201103L\n+# include <type_traits>\n+#endif\n #if __cplusplus >= 202002L\n # include <compare>\n # include <bits/stl_construct.h>\n@@ -101,8 +104,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX14_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2)\n       {\n-#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cpp_constexpr_dynamic_alloc\n+\tif (std::__is_constant_evaluated())\n \t  std::construct_at(__builtin_addressof(__c1), __c2);\n \telse\n #endif\n@@ -199,8 +202,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       if (__n == 0)\n \treturn __s1;\n-#if __cpp_lib_is_constant_evaluated\n-      if (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+      if (std::__is_constant_evaluated())\n \t{\n \t  if (__s1 == __s2) // unlikely, but saves a lot of work\n \t    return __s1;\n@@ -247,8 +250,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     char_traits<_CharT>::\n     copy(char_type* __s1, const char_type* __s2, std::size_t __n)\n     {\n-#if __cpp_lib_is_constant_evaluated\n-      if (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+      if (std::__is_constant_evaluated())\n \t{\n \t  for (std::size_t __i = 0; __i < __n; ++__i)\n \t    std::construct_at(__s1 + __i, __s2[__i]);\n@@ -266,8 +269,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     char_traits<_CharT>::\n     assign(char_type* __s, std::size_t __n, char_type __a)\n     {\n-#if __cpp_lib_is_constant_evaluated\n-      if (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+      if (std::__is_constant_evaluated())\n \t{\n \t  for (std::size_t __i = 0; __i < __n; ++__i)\n \t    std::construct_at(__s + __i, __a);\n@@ -299,7 +302,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef __cpp_lib_is_constant_evaluated\n // Unofficial macro indicating P1032R1 support in C++20\n # define __cpp_lib_constexpr_char_traits 201811L\n-#elif __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+#elif __cplusplus >= 201703L && _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED\n // Unofficial macro indicating P0426R1 support in C++17\n # define __cpp_lib_constexpr_char_traits 201611L\n #endif\n@@ -338,8 +341,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       {\n-#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cpp_constexpr_dynamic_alloc\n+\tif (std::__is_constant_evaluated())\n \t  std::construct_at(__builtin_addressof(__c1), __c2);\n \telse\n #endif\n@@ -363,8 +366,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n+#if __cplusplus >= 201703L\n+\tif (std::__is_constant_evaluated())\n \t  {\n \t    for (size_t __i = 0; __i < __n; ++__i)\n \t      if (lt(__s1[__i], __s2[__i]))\n@@ -380,8 +383,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR size_t\n       length(const char_type* __s)\n       {\n-#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n+#if __cplusplus >= 201703L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::length(__s);\n #endif\n \treturn __builtin_strlen(__s);\n@@ -392,8 +395,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n+#if __cplusplus >= 201703L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n #endif\n \treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\n@@ -404,8 +407,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);\n #endif\n \treturn static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));\n@@ -416,8 +419,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);\n #endif\n \treturn static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));\n@@ -428,8 +431,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);\n #endif\n \treturn static_cast<char_type*>(__builtin_memset(__s, __a, __n));\n@@ -476,8 +479,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       {\n-#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cpp_constexpr_dynamic_alloc\n+\tif (std::__is_constant_evaluated())\n \t  std::construct_at(__builtin_addressof(__c1), __c2);\n \telse\n #endif\n@@ -497,8 +500,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n+#if __cplusplus >= 201703L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\n #endif\n \treturn wmemcmp(__s1, __s2, __n);\n@@ -507,8 +510,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR size_t\n       length(const char_type* __s)\n       {\n-#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n+#if __cplusplus >= 201703L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::length(__s);\n #endif\n \treturn wcslen(__s);\n@@ -519,8 +522,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n+#if __cplusplus >= 201703L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n #endif\n \treturn wmemchr(__s, __a, __n);\n@@ -531,8 +534,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);\n #endif\n \treturn wmemmove(__s1, __s2, __n);\n@@ -543,8 +546,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);\n #endif\n \treturn wmemcpy(__s1, __s2, __n);\n@@ -555,8 +558,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);\n #endif\n \treturn wmemset(__s, __a, __n);\n@@ -604,8 +607,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT\n       {\n-#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cpp_constexpr_dynamic_alloc\n+\tif (std::__is_constant_evaluated())\n \t  std::construct_at(__builtin_addressof(__c1), __c2);\n \telse\n #endif\n@@ -625,8 +628,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n+#if __cplusplus >= 201703L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);\n #endif\n \treturn __builtin_memcmp(__s1, __s2, __n);\n@@ -635,8 +638,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR size_t\n       length(const char_type* __s)\n       {\n-#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n+#if __cplusplus >= 201703L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::length(__s);\n #endif\n \tsize_t __i = 0;\n@@ -650,8 +653,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return 0;\n-#if __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n+#if __cplusplus >= 201703L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);\n #endif\n \treturn static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));\n@@ -662,8 +665,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);\n #endif\n \treturn static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));\n@@ -674,8 +677,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);\n #endif\n \treturn static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));\n@@ -686,8 +689,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::assign(__s, __n, __a);\n #endif\n \treturn static_cast<char_type*>(__builtin_memset(__s, __a, __n));\n@@ -747,8 +750,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) noexcept\n       {\n-#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cpp_constexpr_dynamic_alloc\n+\tif (std::__is_constant_evaluated())\n \t  std::construct_at(__builtin_addressof(__c1), __c2);\n \telse\n #endif\n@@ -797,8 +800,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);\n #endif\n \treturn (static_cast<char_type*>\n@@ -810,8 +813,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);\n #endif\n \treturn (static_cast<char_type*>\n@@ -868,8 +871,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static _GLIBCXX17_CONSTEXPR void\n       assign(char_type& __c1, const char_type& __c2) noexcept\n       {\n-#if __cpp_constexpr_dynamic_alloc && __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cpp_constexpr_dynamic_alloc\n+\tif (std::__is_constant_evaluated())\n \t  std::construct_at(__builtin_addressof(__c1), __c2);\n \telse\n #endif\n@@ -918,8 +921,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \tif (__n == 0)\n \t  return __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);\n #endif\n \treturn (static_cast<char_type*>\n@@ -931,8 +934,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { \n \tif (__n == 0)\n \t  return __s1;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\tif (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+\tif (std::__is_constant_evaluated())\n \t  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);\n #endif\n \treturn (static_cast<char_type*>"}, {"sha": "d6ddf3489d1aca5efefb7dec728c6f80653956ae", "filename": "libstdc++-v3/include/bits/cow_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -37,7 +37,7 @@\n #ifdef __cpp_lib_is_constant_evaluated\n // Support P1032R1 in C++20 (but not P0980R1 for COW strings).\n # define __cpp_lib_constexpr_string 201811L\n-#elif __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+#elif __cplusplus >= 201703L && _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED\n // Support P0426R1 changes to char_traits in C++17.\n # define __cpp_lib_constexpr_string 201611L\n #endif"}, {"sha": "74b8e9c4d59922b083e1f328bb1c2784314b3aae", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -251,9 +251,7 @@ namespace ranges\n \t}\n       else if constexpr (sized_sentinel_for<_Sent, _Iter>)\n \t{\n-#ifdef __cpp_lib_is_constant_evaluated\n-\t  if (!std::is_constant_evaluated())\n-#endif\n+\t  if (!std::__is_constant_evaluated())\n \t    {\n \t      if constexpr (__memcpyable<_Iter, _Out>::__value)\n \t\t{\n@@ -388,9 +386,7 @@ namespace ranges\n \t}\n       else if constexpr (sized_sentinel_for<_Sent, _Iter>)\n \t{\n-#ifdef __cpp_lib_is_constant_evaluated\n-\t  if (!std::is_constant_evaluated())\n-#endif\n+\t  if (!std::__is_constant_evaluated())\n \t    {\n \t      if constexpr (__memcpyable<_Out, _Iter>::__value)\n \t\t{\n@@ -535,9 +531,7 @@ namespace ranges\n \t\t\t  && __is_byte<remove_pointer_t<_Out>>::__value\n \t\t\t  && integral<_Tp>)\n \t      {\n-#ifdef __cpp_lib_is_constant_evaluated\n-\t\tif (!std::is_constant_evaluated())\n-#endif\n+\t\tif (!std::__is_constant_evaluated())\n \t\t  {\n \t\t    __builtin_memset(__first,\n \t\t\t\t     static_cast<unsigned char>(__value),"}, {"sha": "098022e63a2fa1d7dea5e34946392b9cfae5143b", "filename": "libstdc++-v3/include/bits/ranges_cmp.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_cmp.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -119,10 +119,9 @@ namespace ranges\n       {\n \tif constexpr (__detail::__less_builtin_ptr_cmp<_Tp, _Up>)\n \t  {\n-#ifdef __cpp_lib_is_constant_evaluated\n-\t    if (std::is_constant_evaluated())\n+\t    if (std::__is_constant_evaluated())\n \t      return __t < __u;\n-#endif\n+\n \t    auto __x = reinterpret_cast<__UINTPTR_TYPE__>(\n \t      static_cast<const volatile void*>(std::forward<_Tp>(__t)));\n \t    auto __y = reinterpret_cast<__UINTPTR_TYPE__>("}, {"sha": "984a5bf94b93e9b97a4210d1d77606ea28a8e955", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -1826,11 +1826,10 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n       __glibcxx_requires_valid_range(__first1, __last1);\n       __glibcxx_requires_valid_range(__first2, __last2);\n \n-#if __cpp_lib_is_constant_evaluated\n       using _Cat = decltype(__comp(*__first1, *__first2));\n       static_assert(same_as<common_comparison_category_t<_Cat>, _Cat>);\n \n-      if (!std::is_constant_evaluated())\n+      if (!std::__is_constant_evaluated())\n \tif constexpr (same_as<_Comp, __detail::_Synth3way>\n \t\t      || same_as<_Comp, compare_three_way>)\n \t  if constexpr (__is_byte_iter<_InputIter1>)\n@@ -1847,7 +1846,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t\t  }\n \t\treturn __lencmp;\n \t      }\n-#endif // is_constant_evaluated\n+\n       while (__first1 != __last1)\n \t{\n \t  if (__first2 == __last2)"}, {"sha": "7d93084fe3757cb158c7d14bad72d0d48c0cb4b6", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -625,8 +625,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _M_allocate(size_t __n)\n       {\n \t_Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));\n-#if __has_builtin(__builtin_is_constant_evaluated)\n-\tif (__builtin_is_constant_evaluated())\n+#if __cpp_lib_is_constant_evaluated\n+\tif (std::is_constant_evaluated())\n \t{\n \t  __n = _S_nword(__n);\n \t  for (size_t __i = 0; __i < __n; ++__i)\n@@ -1524,8 +1524,8 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n   inline void\n   __fill_bvector_n(_Bit_type* __p, size_t __n, bool __x) _GLIBCXX_NOEXCEPT\n   {\n-#if __has_builtin(__builtin_is_constant_evaluated)\n-    if (__builtin_is_constant_evaluated())\n+#if __cpp_lib_is_constant_evaluated\n+    if (std::is_constant_evaluated())\n     {\n       for (size_t __i = 0; __i < __n; ++__i)\n \t__p[__i] = __x ? ~0ul : 0ul;"}, {"sha": "dd621f24bc2beb16fce6e5fa3afd42bf664e908f", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -108,8 +108,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline void\n     _Construct(_Tp* __p, _Args&&... __args)\n     {\n-#if __cplusplus >= 202002L && __has_builtin(__builtin_is_constant_evaluated)\n-      if (__builtin_is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+      if (std::__is_constant_evaluated())\n \t{\n \t  // Allow std::_Construct to be used in constant expressions.\n \t  std::construct_at(__p, std::forward<_Args>(__args)...);\n@@ -188,8 +188,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(is_destructible<_Value_type>::value,\n \t\t    \"value type is destructible\");\n #endif\n-#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated\n-      if (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+      if (std::__is_constant_evaluated())\n \treturn _Destroy_aux<false>::__destroy(__first, __last);\n #endif\n       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::\n@@ -237,8 +237,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(is_destructible<_Value_type>::value,\n \t\t    \"value type is destructible\");\n #endif\n-#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated\n-      if (std::is_constant_evaluated())\n+#if __cplusplus >= 202002L\n+      if (std::__is_constant_evaluated())\n \treturn _Destroy_n_aux<false>::__destroy_n(__first, __count);\n #endif\n       return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::"}, {"sha": "92e9dc75a80e4e8fb7e218cf680acff4c6df4ed3", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -428,11 +428,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW\n       {\n #if __cplusplus >= 201402L\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n-#else\n-\tif (__builtin_constant_p(__x > __y))\n-#endif\n+\tif (std::__is_constant_evaluated())\n \t  return __x > __y;\n #endif\n \treturn (__UINTPTR_TYPE__)__x > (__UINTPTR_TYPE__)__y;\n@@ -447,11 +443,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW\n       {\n #if __cplusplus >= 201402L\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n-#else\n-\tif (__builtin_constant_p(__x < __y))\n-#endif\n+\tif (std::__is_constant_evaluated())\n \t  return __x < __y;\n #endif\n \treturn (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;\n@@ -466,11 +458,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW\n       {\n #if __cplusplus >= 201402L\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n-#else\n-\tif (__builtin_constant_p(__x >= __y))\n-#endif\n+\tif (std::__is_constant_evaluated())\n \t  return __x >= __y;\n #endif\n \treturn (__UINTPTR_TYPE__)__x >= (__UINTPTR_TYPE__)__y;\n@@ -485,11 +473,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW\n       {\n #if __cplusplus >= 201402L\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\tif (__builtin_is_constant_evaluated())\n-#else\n-\tif (__builtin_constant_p(__x <= __y))\n-#endif\n+\tif (std::__is_constant_evaluated())\n \t  return __x <= __y;\n #endif\n \treturn (__UINTPTR_TYPE__)__x <= (__UINTPTR_TYPE__)__y;"}, {"sha": "7c37d85c8fa7e642fc833ae221f2191c45c532fd", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -195,8 +195,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    static _GLIBCXX20_CONSTEXPR void\n \t    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)\n \t    {\n-#if __has_builtin(__builtin_is_constant_evaluated)\n-\t      if (!__builtin_is_constant_evaluated())\n+#if __cpp_lib_is_constant_evaluated\n+\t      if (std::is_constant_evaluated())\n+\t\treturn;\n #endif\n \t      __sanitizer_annotate_contiguous_container(__impl._M_start,\n \t\t  __impl._M_end_of_storage, __prev, __curr);"}, {"sha": "1547154bca149be9e088df193842f58d6283ae74", "filename": "libstdc++-v3/include/debug/helper_functions.h", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhelper_functions.h?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -124,25 +124,16 @@ namespace __gnu_debug\n     inline bool\n     __check_singular(_Iterator const& __x)\n     {\n-      return\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\t__builtin_is_constant_evaluated() ? false :\n-#endif\n-\t__check_singular_aux(std::__addressof(__x));\n+      return ! std::__is_constant_evaluated()\n+\t       && __check_singular_aux(std::__addressof(__x));\n     }\n \n   /** Non-NULL pointers are nonsingular. */\n   template<typename _Tp>\n     _GLIBCXX_CONSTEXPR\n     inline bool\n     __check_singular(_Tp* const& __ptr)\n-    {\n-      return\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\t__builtin_is_constant_evaluated() ? false :\n-#endif\n-\t__ptr == 0;\n-    }\n+    { return __ptr == 0; }\n \n   /** We say that integral types for a valid range, and defer to other\n    *  routines to realize what to do with integral types instead of"}, {"sha": "e632de15aff528d700c307822fc5c0085390035d", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -310,14 +310,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     constexpr __detail::__synth3way_t<_Tp>\n     operator<=>(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n     {\n-#ifdef __cpp_lib_is_constant_evaluated\n       if constexpr (_Nm && __is_memcmp_ordered<_Tp>::__value)\n-\tif (!std::is_constant_evaluated())\n+\tif (!std::__is_constant_evaluated())\n \t  {\n \t    constexpr size_t __n = _Nm * sizeof(_Tp);\n \t    return __builtin_memcmp(__a.data(), __b.data(), __n) <=> 0;\n \t  }\n-#endif\n \n       for (size_t __i = 0; __i < _Nm; ++__i)\n \t{"}, {"sha": "454f9fce40913d36e783edf055c893d4a8f8e000", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -315,12 +315,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // representable as a value of _Tp, and so the result is undefined.\n       // Want that undefined behaviour to be detected in constant expressions,\n       // by UBSan, and by debug assertions.\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-      if (!__builtin_is_constant_evaluated())\n+      if (!std::__is_constant_evaluated())\n \t{\n \t  __glibcxx_assert( __shift_exponent != __int_traits<_Tp>::__digits );\n \t}\n-#endif\n+\n       using __promoted_type = decltype(__x << 1);\n       if _GLIBCXX17_CONSTEXPR (!is_same<__promoted_type, _Tp>::value)\n \t{"}, {"sha": "4df7e627edb63e58b3d51ebe0b4c083bfdc04c1a", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -3510,15 +3510,20 @@ template<typename _Ret, typename _Fn, typename... _Args>\n \n #endif // C++23\n \n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n-\n+#if _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED\n #define __cpp_lib_is_constant_evaluated 201811L\n \n   /// Returns true only when called during constant evaluation.\n   /// @since C++20\n   constexpr inline bool\n   is_constant_evaluated() noexcept\n-  { return __builtin_is_constant_evaluated(); }\n+  {\n+#if __cpp_if_consteval >= 202106L\n+    if consteval { return true; } else { return false; }\n+#else\n+    return __builtin_is_constant_evaluated();\n+#endif\n+  }\n #endif\n \n   /// @cond undocumented"}, {"sha": "eb612f57c73cbbb50804b48b4e7c6a5ccab4bd14", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -130,7 +130,7 @@\n #define __cpp_lib_chrono 201611\n #define __cpp_lib_clamp 201603\n #if __cplusplus == 201703L // N.B. updated value in C++20\n-# if _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+# if _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED\n #  define __cpp_lib_constexpr_char_traits 201611L\n #  define __cpp_lib_constexpr_string 201611L\n # endif\n@@ -195,7 +195,7 @@\n #endif\n #define __cpp_lib_endian 201907L\n #define __cpp_lib_int_pow2 202002L\n-#ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n+#ifdef _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED\n # define __cpp_lib_is_constant_evaluated 201811L\n #endif\n #define __cpp_lib_is_nothrow_convertible 201806L"}, {"sha": "f095de7935fdb525af6c12936c0976ee0e22efd2", "filename": "libstdc++-v3/libsupc++/compare", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcompare?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -555,7 +555,7 @@ namespace std\n \t  {\n \t    auto __pt = static_cast<const volatile void*>(__t);\n \t    auto __pu = static_cast<const volatile void*>(__u);\n-\t    if (__builtin_is_constant_evaluated())\n+\t    if (std::__is_constant_evaluated())\n \t      return __pt <=> __pu;\n \t    auto __it = reinterpret_cast<__UINTPTR_TYPE__>(__pt);\n \t    auto __iu = reinterpret_cast<__UINTPTR_TYPE__>(__pu);"}, {"sha": "776ff5f771f81031d1817d1262cccda4b12906d3", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74d14778e73dfda365b0ac71478efafd9ad91c2a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=74d14778e73dfda365b0ac71478efafd9ad91c2a", "patch": "@@ -26,6 +26,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 398 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 407 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 416 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 396 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 405 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 414 }"}]}