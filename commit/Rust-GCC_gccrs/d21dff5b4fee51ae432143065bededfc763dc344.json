{"sha": "d21dff5b4fee51ae432143065bededfc763dc344", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxZGZmNWI0ZmVlNTFhZTQzMjE0MzA2NWJlZGVkZmM3NjNkYzM0NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-03-26T07:33:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-03-26T07:36:42Z"}, "message": "widening_mul: restrict ops to be defined in the same basic-block when convert plusminus to widen\n\nIn the testcase for PR94269, widening_mul moves two multiply\ninstructions from outside the loop to inside\nthe loop, merging with two add instructions separately.  This\nincreases the cost of the loop.  Like FMA detection\nin the same pass, simply restrict ops to be defined in the same\nbasic-block to avoid possibly moving multiply\nto a different block with a higher execution frequency.\n\n2020-03-26  Felix Yang  <felix.yang@huawei.com>\n\n\tPR tree-optimization/94269\n\t* tree-ssa-math-opts.c (convert_plusminus_to_widen): Restrict\n\tthis\n\toperation to single basic block.\n\n\t* gcc.dg/pr94269.c: New test.", "tree": {"sha": "4ac6f918374acf8f3992052f73439fabfb5d8254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ac6f918374acf8f3992052f73439fabfb5d8254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d21dff5b4fee51ae432143065bededfc763dc344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21dff5b4fee51ae432143065bededfc763dc344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21dff5b4fee51ae432143065bededfc763dc344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21dff5b4fee51ae432143065bededfc763dc344/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27f8c8c4c9232c16e24030ae056822152fda409d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f8c8c4c9232c16e24030ae056822152fda409d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f8c8c4c9232c16e24030ae056822152fda409d"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "9f7927d748f203cdc0bccac44926e33b2e5a5609", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21dff5b4fee51ae432143065bededfc763dc344/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21dff5b4fee51ae432143065bededfc763dc344/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d21dff5b4fee51ae432143065bededfc763dc344", "patch": "@@ -1,3 +1,10 @@\n+2020-03-26  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR tree-optimization/94269\n+\t* tree-ssa-math-opts.c (convert_plusminus_to_widen): Restrict\n+\tthis\n+\toperation to single basic block.\n+\n 2020-03-25  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/90275"}, {"sha": "f8512d3fb3277623accfdbd059a2a5b2ef102a92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21dff5b4fee51ae432143065bededfc763dc344/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21dff5b4fee51ae432143065bededfc763dc344/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d21dff5b4fee51ae432143065bededfc763dc344", "patch": "@@ -1,3 +1,8 @@\n+2020-03-26  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR tree-optimization/94269\n+\t* gcc.dg/pr94269.c: New test.\n+\n 2020-03-25  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* gcc.dg/vect/bb-slp-pr69907.c: Disable the dump scan for amdgcn."}, {"sha": "49d57044f787ef98382dc3d6bb1a95d58c86ea51", "filename": "gcc/testsuite/gcc.dg/pr94269.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21dff5b4fee51ae432143065bededfc763dc344/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94269.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21dff5b4fee51ae432143065bededfc763dc344/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94269.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94269.c?ref=d21dff5b4fee51ae432143065bededfc763dc344", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target aarch64*-*-* } } */\n+/* { dg-options \"-O2 -ftree-loop-vectorize -funsafe-math-optimizations -march=armv8.2-a+sve -msve-vector-bits=256\" } */\n+\n+float\n+foo(long n, float *x, int inc_x,\n+            float *y, int inc_y)\n+{\n+  float dot = 0.0;\n+  int ix = 0, iy = 0;\n+\n+  if (n < 0) {\n+    return dot;\n+  }\n+\n+  int i = 0;\n+  while (i < n) {\n+    dot += y[iy] * x[ix];\n+    ix  += inc_x;\n+    iy  += inc_y;\n+    i++;\n+  }\n+\n+  return dot;\n+}\n+\n+/* { dg-final { scan-assembler-not \"smaddl\" { target aarch64*-*-* } } } */"}, {"sha": "969c1a6b6c6d788342cca54f1a401b6b20813f3a", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21dff5b4fee51ae432143065bededfc763dc344/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21dff5b4fee51ae432143065bededfc763dc344/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=d21dff5b4fee51ae432143065bededfc763dc344", "patch": "@@ -2715,11 +2715,14 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple *stmt,\n      multiply-and-accumulate instructions.\n \n      If the widened-multiplication result has more than one uses, it is\n-     probably wiser not to do the conversion.  */\n+     probably wiser not to do the conversion.  Also restrict this operation\n+     to single basic block to avoid moving the multiply to a different block\n+     with a higher execution frequency.  */\n   if (code == PLUS_EXPR\n       && (rhs1_code == MULT_EXPR || rhs1_code == WIDEN_MULT_EXPR))\n     {\n       if (!has_single_use (rhs1)\n+\t  || gimple_bb (rhs1_stmt) != gimple_bb (stmt)\n \t  || !is_widening_mult_p (rhs1_stmt, &type1, &mult_rhs1,\n \t\t\t\t  &type2, &mult_rhs2))\n \treturn false;\n@@ -2729,6 +2732,7 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple *stmt,\n   else if (rhs2_code == MULT_EXPR || rhs2_code == WIDEN_MULT_EXPR)\n     {\n       if (!has_single_use (rhs2)\n+\t  || gimple_bb (rhs2_stmt) != gimple_bb (stmt)\n \t  || !is_widening_mult_p (rhs2_stmt, &type1, &mult_rhs1,\n \t\t\t\t  &type2, &mult_rhs2))\n \treturn false;"}]}