{"sha": "6c331f73fb06def451c8a60f2409681fe89939c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMzMzFmNzNmYjA2ZGVmNDUxYzhhNjBmMjQwOTY4MWZlODk5MzljNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-09-21T13:39:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-09-21T13:39:38Z"}, "message": "sso_string_base.h (__sso_string_base<>::_M_max_size(), [...]): Use _M_get_allocator.\n\n2006-09-21  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_max_size(),\n\t_M_destroy, _M_create): Use _M_get_allocator.\n\nFrom-SVN: r117111", "tree": {"sha": "f5bfe11da2ad163850c2f96d24fb0b36ccea0ea2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5bfe11da2ad163850c2f96d24fb0b36ccea0ea2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c331f73fb06def451c8a60f2409681fe89939c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c331f73fb06def451c8a60f2409681fe89939c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c331f73fb06def451c8a60f2409681fe89939c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c331f73fb06def451c8a60f2409681fe89939c6/comments", "author": null, "committer": null, "parents": [{"sha": "552afe9e94581878157fb20732c11ee1c0efa666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/552afe9e94581878157fb20732c11ee1c0efa666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/552afe9e94581878157fb20732c11ee1c0efa666"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "ca26e47959bc3a75d8a14c64e0760e756e9f8d51", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c331f73fb06def451c8a60f2409681fe89939c6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c331f73fb06def451c8a60f2409681fe89939c6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6c331f73fb06def451c8a60f2409681fe89939c6", "patch": "@@ -1,3 +1,8 @@\n+2006-09-21  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/sso_string_base.h (__sso_string_base<>::_M_max_size(),\n+\t_M_destroy, _M_create): Use _M_get_allocator.\n+\n 2006-09-21  Ben Elliston  <bje@au.ibm.com>\n \n \t* crossconfig.m4 (GLIBCXX_CROSSCONFIG): Remove invocations of"}, {"sha": "7f7e2b544c65b8016dc41af9d3d2b24da08f7bcb", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c331f73fb06def451c8a60f2409681fe89939c6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c331f73fb06def451c8a60f2409681fe89939c6/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=6c331f73fb06def451c8a60f2409681fe89939c6", "patch": "@@ -137,7 +137,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     public:\n       size_type\n       _M_max_size() const\n-      { return (_M_dataplus._CharT_alloc_type::max_size() - 1) / 2; }\n+      { return (_M_get_allocator().max_size() - 1) / 2; }\n \n       _CharT*\n       _M_data() const\n@@ -225,7 +225,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     void\n     __sso_string_base<_CharT, _Traits, _Alloc>::\n     _M_destroy(size_type __size) throw()\n-    { _M_dataplus._CharT_alloc_type::deallocate(_M_data(), __size + 1); }\n+    { _M_get_allocator().deallocate(_M_data(), __size + 1); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     void\n@@ -324,7 +324,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n       // NB: Need an array of char_type[__capacity], plus a terminating\n       // null char_type() element.\n-      return _M_dataplus._CharT_alloc_type::allocate(__capacity + 1);\n+      return _M_get_allocator().allocate(__capacity + 1);\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>"}]}