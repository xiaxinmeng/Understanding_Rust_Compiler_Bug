{"sha": "870118b7f139a2477cd16de9d8539946959c5633", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcwMTE4YjdmMTM5YTI0NzdjZDE2ZGU5ZDg1Mzk5NDY5NTljNTYzMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-15T14:37:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-15T14:37:28Z"}, "message": "Turn FUNCTION_ARG_OFFSET into a hook\n\n2017-09-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* target.def (function_arg_offset): New hook.\n\t* targhooks.h (default_function_arg_offset): Declare.\n\t* targhooks.c (default_function_arg_offset): New function.\n\t* function.c (locate_and_pad_parm): Use\n\ttargetm.calls.function_arg_offset instead of FUNCTION_ARG_OFFSET.\n\t* doc/tm.texi.in (FUNCTION_ARG_OFFSET): Replace with...\n\t(TARGET_FUNCTION_ARG_OFFSET): ...this.\n\t* doc/tm.texi: Regenerate.\n\t* config/spu/spu.h (FUNCTION_ARG_OFFSET): Delete.\n\t* config/spu/spu.c (spu_function_arg_offset): New function.\n\t(TARGET_FUNCTION_ARG_OFFSET): Redefine.\n\t* system.h (FUNCTION_ARG_OFFSET): Poison.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r252821", "tree": {"sha": "0f38ba28fa9b8476ec879058ccc6a40b6b2d5bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f38ba28fa9b8476ec879058ccc6a40b6b2d5bc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/870118b7f139a2477cd16de9d8539946959c5633", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870118b7f139a2477cd16de9d8539946959c5633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/870118b7f139a2477cd16de9d8539946959c5633", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/870118b7f139a2477cd16de9d8539946959c5633/comments", "author": null, "committer": null, "parents": [{"sha": "bb149ca2e912038dce733f95ab1c24ff0d1af280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb149ca2e912038dce733f95ab1c24ff0d1af280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb149ca2e912038dce733f95ab1c24ff0d1af280"}], "stats": {"total": 87, "additions": 62, "deletions": 25}, "files": [{"sha": "509742ac0cca09e3564a93f2d2a62d4799434205", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870118b7f139a2477cd16de9d8539946959c5633/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870118b7f139a2477cd16de9d8539946959c5633/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=870118b7f139a2477cd16de9d8539946959c5633", "patch": "@@ -1,3 +1,20 @@\n+2017-09-15  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target.def (function_arg_offset): New hook.\n+\t* targhooks.h (default_function_arg_offset): Declare.\n+\t* targhooks.c (default_function_arg_offset): New function.\n+\t* function.c (locate_and_pad_parm): Use\n+\ttargetm.calls.function_arg_offset instead of FUNCTION_ARG_OFFSET.\n+\t* doc/tm.texi.in (FUNCTION_ARG_OFFSET): Replace with...\n+\t(TARGET_FUNCTION_ARG_OFFSET): ...this.\n+\t* doc/tm.texi: Regenerate.\n+\t* config/spu/spu.h (FUNCTION_ARG_OFFSET): Delete.\n+\t* config/spu/spu.c (spu_function_arg_offset): New function.\n+\t(TARGET_FUNCTION_ARG_OFFSET): Redefine.\n+\t* system.h (FUNCTION_ARG_OFFSET): Poison.\n+\n 2017-09-15  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayard  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "a35f0b8636b0743156bf8fd897eca32540b7e9da", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=870118b7f139a2477cd16de9d8539946959c5633", "patch": "@@ -3881,6 +3881,18 @@ spu_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,\n \t   : spu_hard_regno_nregs (FIRST_ARG_REGNUM, mode));\n }\n \n+/* Implement TARGET_FUNCTION_ARG_OFFSET.  The SPU ABI wants 32/64-bit\n+   types at offset 0 in the quad-word on the stack.  8/16-bit types\n+   should be at offsets 3/2 respectively.  */\n+\n+static HOST_WIDE_INT\n+spu_function_arg_offset (machine_mode mode, const_tree type)\n+{\n+  if (type && INTEGRAL_TYPE_P (type) && GET_MODE_SIZE (mode) < 4)\n+    return 4 - GET_MODE_SIZE (mode);\n+  return 0;\n+}\n+\n /* Implement TARGET_FUNCTION_ARG_PADDING.  */\n \n static pad_direction\n@@ -7300,6 +7312,9 @@ static const struct attribute_spec spu_attribute_table[] =\n #undef TARGET_FUNCTION_ARG_ADVANCE\n #define TARGET_FUNCTION_ARG_ADVANCE spu_function_arg_advance\n \n+#undef TARGET_FUNCTION_ARG_OFFSET\n+#define TARGET_FUNCTION_ARG_OFFSET spu_function_arg_offset\n+\n #undef TARGET_FUNCTION_ARG_PADDING\n #define TARGET_FUNCTION_ARG_PADDING spu_function_arg_padding\n "}, {"sha": "4cf426b7c5b82c3b1c98c91071830d37518752b7", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=870118b7f139a2477cd16de9d8539946959c5633", "patch": "@@ -309,13 +309,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n #define INIT_CUMULATIVE_ARGS(CUM,FNTYPE,LIBNAME,FNDECL,N_NAMED_ARGS) \\\n \t\t((CUM) = 0)\n \n-/* The SPU ABI wants 32/64-bit types at offset 0 in the quad-word on the\n-   stack.  8/16-bit types should be at offsets 3/2 respectively.  */\n-#define FUNCTION_ARG_OFFSET(MODE, TYPE)\t\t\t\t\t\\\n-(((TYPE) && INTEGRAL_TYPE_P (TYPE) && GET_MODE_SIZE (MODE) < 4)\t\t\\\n- ? (4 - GET_MODE_SIZE (MODE))\t\t\t\t\t\t\\\n- : 0)\n-\n #define PAD_VARARGS_DOWN 0\n \n #define FUNCTION_ARG_REGNO_P(N) ((N) >= (FIRST_ARG_REGNUM) && (N) <= (LAST_ARG_REGNUM))"}, {"sha": "ae65e4f5edf9b4c8336f8b8a5bc0b313a1cd9a25", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=870118b7f139a2477cd16de9d8539946959c5633", "patch": "@@ -4079,13 +4079,13 @@ on the stack.  The compiler knows how to track the amount of stack space\n used for arguments without any special help.\n @end deftypefn\n \n-@defmac FUNCTION_ARG_OFFSET (@var{mode}, @var{type})\n-If defined, a C expression that is the number of bytes to add to the\n-offset of the argument passed in memory.  This is needed for the SPU,\n-which passes @code{char} and @code{short} arguments in the preferred\n-slot that is in the middle of the quad word instead of starting at the\n-top.\n-@end defmac\n+@deftypefn {Target Hook} HOST_WIDE_INT TARGET_FUNCTION_ARG_OFFSET (machine_mode @var{mode}, const_tree @var{type})\n+This hook returns the number of bytes to add to the offset of an\n+argument of type @var{type} and mode @var{mode} when passed in memory.\n+This is needed for the SPU, which passes @code{char} and @code{short}\n+arguments in the preferred slot that is in the middle of the quad word\n+instead of starting at the top.  The default implementation returns 0.\n+@end deftypefn\n \n @deftypefn {Target Hook} pad_direction TARGET_FUNCTION_ARG_PADDING (machine_mode @var{mode}, const_tree @var{type})\n This hook determines whether, and in which direction, to pad out"}, {"sha": "733466dbb84985eb7fbfb455bc11be659f3b8f61", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=870118b7f139a2477cd16de9d8539946959c5633", "patch": "@@ -3281,13 +3281,7 @@ argument @var{libname} exists for symmetry with\n \n @hook TARGET_FUNCTION_ARG_ADVANCE\n \n-@defmac FUNCTION_ARG_OFFSET (@var{mode}, @var{type})\n-If defined, a C expression that is the number of bytes to add to the\n-offset of the argument passed in memory.  This is needed for the SPU,\n-which passes @code{char} and @code{short} arguments in the preferred\n-slot that is in the middle of the quad word instead of starting at the\n-top.\n-@end defmac\n+@hook TARGET_FUNCTION_ARG_OFFSET\n \n @hook TARGET_FUNCTION_ARG_PADDING\n "}, {"sha": "3ae5a3afc0b4d2825d5992fdcf40ef87cddb07e0", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=870118b7f139a2477cd16de9d8539946959c5633", "patch": "@@ -4249,9 +4249,8 @@ locate_and_pad_parm (machine_mode passed_mode, tree type, int in_regs,\n       locate->size.constant -= part_size_in_regs;\n     }\n \n-#ifdef FUNCTION_ARG_OFFSET\n-  locate->offset.constant += FUNCTION_ARG_OFFSET (passed_mode, type);\n-#endif\n+  locate->offset.constant\n+    += targetm.calls.function_arg_offset (passed_mode, type);\n }\n \n /* Round the stack offset in *OFFSET_PTR up to a multiple of BOUNDARY."}, {"sha": "c514cd8b3824966a2c9ce4215f3a6bf7e9a7f42a", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=870118b7f139a2477cd16de9d8539946959c5633", "patch": "@@ -915,7 +915,7 @@ extern void fancy_abort (const char *, int, const char *)\n \tMODES_TIEABLE_P FUNCTION_ARG_PADDING SLOW_UNALIGNED_ACCESS\t\\\n \tHARD_REGNO_NREGS SECONDARY_MEMORY_NEEDED_MODE\t\t\t\\\n \tSECONDARY_MEMORY_NEEDED CANNOT_CHANGE_MODE_CLASS\t\t\\\n-\tTRULY_NOOP_TRUNCATION\n+\tTRULY_NOOP_TRUNCATION FUNCTION_ARG_OFFSET\n \n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */"}, {"sha": "f4c35763686ae52c141ac1c6706d18ea6873a3c8", "filename": "gcc/target.def", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=870118b7f139a2477cd16de9d8539946959c5633", "patch": "@@ -4572,6 +4572,16 @@ used for arguments without any special help.\",\n  (cumulative_args_t ca, machine_mode mode, const_tree type, bool named),\n  default_function_arg_advance)\n \n+DEFHOOK\n+(function_arg_offset,\n+ \"This hook returns the number of bytes to add to the offset of an\\n\\\n+argument of type @var{type} and mode @var{mode} when passed in memory.\\n\\\n+This is needed for the SPU, which passes @code{char} and @code{short}\\n\\\n+arguments in the preferred slot that is in the middle of the quad word\\n\\\n+instead of starting at the top.  The default implementation returns 0.\",\n+ HOST_WIDE_INT, (machine_mode mode, const_tree type),\n+ default_function_arg_offset)\n+\n DEFHOOK\n (function_arg_padding,\n  \"This hook determines whether, and in which direction, to pad out\\n\\"}, {"sha": "4bd4833dfdd50876523333e71d5b19d0fbb68d42", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=870118b7f139a2477cd16de9d8539946959c5633", "patch": "@@ -734,6 +734,14 @@ default_function_arg_advance (cumulative_args_t ca ATTRIBUTE_UNUSED,\n   gcc_unreachable ();\n }\n \n+/* Default implementation of TARGET_FUNCTION_ARG_OFFSET.  */\n+\n+HOST_WIDE_INT\n+default_function_arg_offset (machine_mode, const_tree)\n+{\n+  return 0;\n+}\n+\n /* Default implementation of TARGET_FUNCTION_ARG_PADDING: usually pad\n    upward, but pad short args downward on big-endian machines.  */\n "}, {"sha": "6d78508c8a2b0905c5cc640a691f65e15e2ef117", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/870118b7f139a2477cd16de9d8539946959c5633/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=870118b7f139a2477cd16de9d8539946959c5633", "patch": "@@ -132,6 +132,7 @@ extern const char *hook_invalid_arg_for_unprototyped_fn\n   (const_tree, const_tree, const_tree);\n extern void default_function_arg_advance\n   (cumulative_args_t, machine_mode, const_tree, bool);\n+extern HOST_WIDE_INT default_function_arg_offset (machine_mode, const_tree);\n extern pad_direction default_function_arg_padding (machine_mode, const_tree);\n extern rtx default_function_arg\n   (cumulative_args_t, machine_mode, const_tree, bool);"}]}