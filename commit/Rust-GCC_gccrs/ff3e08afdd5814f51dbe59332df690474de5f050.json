{"sha": "ff3e08afdd5814f51dbe59332df690474de5f050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzZTA4YWZkZDU4MTRmNTFkYmU1OTMzMmRmNjkwNDc0ZGU1ZjA1MA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-07-06T13:36:16Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-07-06T13:36:16Z"}, "message": "simplify-rtx.c (simplify_const_binary_operation): Use the shift_truncation_mask hook instead of performing modulo by width.\n\n\t* simplify-rtx.c (simplify_const_binary_operation): Use the\n\tshift_truncation_mask hook instead of performing modulo by\n\twidth.  Compare against mode precision, not bitsize.\n\t* combine.c (combine_simplify_rtx, simplify_shift_const_1):\n\tUse shift_truncation_mask instead of constructing the value\n\tmanually.\n\nFrom-SVN: r175913", "tree": {"sha": "dac9f2b9f9f4e057938eba339861f1b99af29cc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dac9f2b9f9f4e057938eba339861f1b99af29cc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff3e08afdd5814f51dbe59332df690474de5f050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3e08afdd5814f51dbe59332df690474de5f050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff3e08afdd5814f51dbe59332df690474de5f050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3e08afdd5814f51dbe59332df690474de5f050/comments", "author": null, "committer": null, "parents": [{"sha": "a369b6399c43d766cd7690753dbac32c4221354d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a369b6399c43d766cd7690753dbac32c4221354d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a369b6399c43d766cd7690753dbac32c4221354d"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "a853addff0157eadc3f518b0ca2055bfd6663fe7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3e08afdd5814f51dbe59332df690474de5f050/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3e08afdd5814f51dbe59332df690474de5f050/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff3e08afdd5814f51dbe59332df690474de5f050", "patch": "@@ -1,3 +1,12 @@\n+2011-07-06  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* simplify-rtx.c (simplify_const_binary_operation): Use the\n+\tshift_truncation_mask hook instead of performing modulo by\n+\twidth.  Compare against mode precision, not bitsize.\n+\t* combine.c (combine_simplify_rtx, simplify_shift_const_1):\n+\tUse shift_truncation_mask instead of constructing the value\n+\tmanually.\n+\n 2011-07-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/47383"}, {"sha": "737f300b0633d50e0367d97dd6a5355647137a13", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3e08afdd5814f51dbe59332df690474de5f050/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3e08afdd5814f51dbe59332df690474de5f050/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ff3e08afdd5814f51dbe59332df690474de5f050", "patch": "@@ -5946,9 +5946,7 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int in_dest,\n       else if (SHIFT_COUNT_TRUNCATED && !REG_P (XEXP (x, 1)))\n \tSUBST (XEXP (x, 1),\n \t       force_to_mode (XEXP (x, 1), GET_MODE (XEXP (x, 1)),\n-\t\t\t      ((unsigned HOST_WIDE_INT) 1\n-\t\t\t       << exact_log2 (GET_MODE_BITSIZE (GET_MODE (x))))\n-\t\t\t      - 1,\n+\t\t\t      targetm.shift_truncation_mask (GET_MODE (x)),\n \t\t\t      0));\n       break;\n \n@@ -9901,7 +9899,7 @@ simplify_shift_const_1 (enum rtx_code code, enum machine_mode result_mode,\n      want to do this inside the loop as it makes it more difficult to\n      combine shifts.  */\n   if (SHIFT_COUNT_TRUNCATED)\n-    orig_count &= GET_MODE_BITSIZE (mode) - 1;\n+    orig_count &= targetm.shift_truncation_mask (mode);\n \n   /* If we were given an invalid count, don't do anything except exactly\n      what was requested.  */"}, {"sha": "f7669b1ebc912f429eb07b3342582fc0beee72cc", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3e08afdd5814f51dbe59332df690474de5f050/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3e08afdd5814f51dbe59332df690474de5f050/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=ff3e08afdd5814f51dbe59332df690474de5f050", "patch": "@@ -3726,8 +3726,8 @@ simplify_const_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t     shift_truncation_mask, since the shift might not be part of an\n \t     ashlM3, lshrM3 or ashrM3 instruction.  */\n \t  if (SHIFT_COUNT_TRUNCATED)\n-\t    arg1 = (unsigned HOST_WIDE_INT) arg1 % width;\n-\t  else if (arg1 < 0 || arg1 >= GET_MODE_BITSIZE (mode))\n+\t    arg1 &= targetm.shift_truncation_mask (mode);\n+\t  else if (arg1 < 0 || arg1 >= GET_MODE_PRECISION (mode))\n \t    return 0;\n \n \t  val = (code == ASHIFT"}]}