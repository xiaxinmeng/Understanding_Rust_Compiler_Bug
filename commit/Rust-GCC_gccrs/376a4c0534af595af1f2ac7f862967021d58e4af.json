{"sha": "376a4c0534af595af1f2ac7f862967021d58e4af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc2YTRjMDUzNGFmNTk1YWYxZjJhYzdmODYyOTY3MDIxZDU4ZTRhZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-05-19T23:27:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-05-19T23:27:48Z"}, "message": "re PR target/31585 (gcc.target/i386/sse-vect-types.c FAILs (also sse-13.c and sse-14.c))\n\n        PR target/31585\n        * config/i386/pmmintrin.h: Do not include xmmintrin.h\n        * config/i386/xmmintrin.h (_mm_extract_pi16): Implement as always\n        inlined function, not as a macro.\n        (_mm_prefetch): Ditto.\n        (_m_pextrw): Ditto.\n        (_mm_insert_pi16): Ditto.\n        (_m_pinsrw): Ditto.\n        (_mm_shuffle_pi16): Ditto.  Add const to __N argument.\n        (_m_pshufw): Ditto. Add const to __N argument.\n        (_mm_shufle_ps): Ditto.  Add const to __mask argument.\n        * config/i386/emmintrin.h (_mm_slli_epi16): Add const to __B argument.\n        (_mm_slli_epi32): Ditto.\n        (_mm_srli_si128): Implement as always inlined function, not as a macro.\n        Add __inline to function declaration.\n        (_mm_slli_si128): Ditto.\n\ntestsuite/ChangeLog:\n\n        PR target/31585\n        * gcc.target/i386/sse-13.c: Use -mssse3 and -msse4a compile options.\n        (__builtin_ia32_psllwi128): Redefine to test with immediate operand.\n        (__builtin_ia32_psrlqi128): Ditto.\n        (__builtin_ia32_psrlwi128): Ditto.\n        (__builtin_ia32_psrldi128): Ditto.\n        (__builtin_ia32_psrldqi128): Ditto.\n        (__builtin_ia32_pslldqi128): Ditto.\n        (__builtin_ia32_psrawi128): Ditto.\n        (__builtin_ia32_psradi128): Ditto.\n        (__builtin_ia32_psllqi128): Ditto.\n        (__builtin_ia32_pslldi128): Ditto.\n        (__builtin_prefetch): Ditto.\n        (__builtin_ia32_pshufw): Ditto.\n        (__builtin_ia32_vec_set_v4hi): Ditto.\n        (__builtin_ia32_vec_ext_v4hi): Ditto.\n        (__builtin_ia32_shufps): Ditto.\n        * gcc.target/i386/sse-14.c: Same changes as sse-13.c.\n\nFrom-SVN: r124861", "tree": {"sha": "a29219692e016070f64d880d86e5979aab82e17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a29219692e016070f64d880d86e5979aab82e17c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/376a4c0534af595af1f2ac7f862967021d58e4af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376a4c0534af595af1f2ac7f862967021d58e4af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/376a4c0534af595af1f2ac7f862967021d58e4af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376a4c0534af595af1f2ac7f862967021d58e4af/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbca09c29d08d561ed9f08f1a1f6cfec86700ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbca09c29d08d561ed9f08f1a1f6cfec86700ef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbca09c29d08d561ed9f08f1a1f6cfec86700ef4"}], "stats": {"total": 147, "additions": 99, "deletions": 48}, "files": [{"sha": "01a9a6373622217c3ef05cc48740a706dd68d56e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=376a4c0534af595af1f2ac7f862967021d58e4af", "patch": "@@ -1,3 +1,22 @@\n+2006-05-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/31585\n+\t* config/i386/pmmintrin.h: Do not include xmmintrin.h\n+\t* config/i386/xmmintrin.h (_mm_extract_pi16): Implement as always\n+\tinlined function, not as a macro.\n+\t(_mm_prefetch): Ditto.\n+\t(_m_pextrw): Ditto.\n+\t(_mm_insert_pi16): Ditto.\n+\t(_m_pinsrw): Ditto.\n+\t(_mm_shuffle_pi16): Ditto.  Add const to __N argument.\n+\t(_m_pshufw): Ditto. Add const to __N argument.\n+\t(_mm_shufle_ps): Ditto.  Add const to __mask argument.\n+\t* config/i386/emmintrin.h (_mm_slli_epi16): Add const to __B argument.\n+\t(_mm_slli_epi32): Ditto.\n+\t(_mm_srli_si128): Implement as always inlined function, not as a macro.\n+\tAdd __inline to function declaration.\n+\t(_mm_slli_si128): Ditto.\n+\n 2007-05-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/sfp-machine.h (FP_EX_INVALID, FP_EX_DENORM,"}, {"sha": "e8ef024c6e8950803129e724b621cee8f658d6c6", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=376a4c0534af595af1f2ac7f862967021d58e4af", "patch": "@@ -1105,13 +1105,13 @@ _mm_mul_epu32 (__m128i __A, __m128i __B)\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n-_mm_slli_epi16 (__m128i __A, int __B)\n+_mm_slli_epi16 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_psllwi128 ((__v8hi)__A, __B);\n }\n \n static __inline __m128i __attribute__((__always_inline__))\n-_mm_slli_epi32 (__m128i __A, int __B)\n+_mm_slli_epi32 (__m128i __A, const int __B)\n {\n   return (__m128i)__builtin_ia32_pslldi128 ((__v4si)__A, __B);\n }\n@@ -1134,24 +1134,17 @@ _mm_srai_epi32 (__m128i __A, const int __B)\n   return (__m128i)__builtin_ia32_psradi128 ((__v4si)__A, __B);\n }\n \n-#if 0\n-static __m128i __attribute__((__always_inline__))\n+static __inline __m128i __attribute__((__always_inline__))\n _mm_srli_si128 (__m128i __A, const int __B)\n {\n   return ((__m128i)__builtin_ia32_psrldqi128 (__A, __B * 8));\n }\n \n-static __m128i __attribute__((__always_inline__))\n-_mm_srli_si128 (__m128i __A, const int __B)\n+static __inline __m128i __attribute__((__always_inline__))\n+_mm_slli_si128 (__m128i __A, const int __B)\n {\n   return ((__m128i)__builtin_ia32_pslldqi128 (__A, __B * 8));\n }\n-#else\n-#define _mm_srli_si128(__A, __B) \\\n-  ((__m128i)__builtin_ia32_psrldqi128 (__A, (__B) * 8))\n-#define _mm_slli_si128(__A, __B) \\\n-  ((__m128i)__builtin_ia32_pslldqi128 (__A, (__B) * 8))\n-#endif\n \n static __inline __m128i __attribute__((__always_inline__))\n _mm_srli_epi16 (__m128i __A, const int __B)"}, {"sha": "09df8107da2d76894bfbd0e858b01b83886d7217", "filename": "gcc/config/i386/pmmintrin.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Fconfig%2Fi386%2Fpmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Fconfig%2Fi386%2Fpmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpmmintrin.h?ref=376a4c0534af595af1f2ac7f862967021d58e4af", "patch": "@@ -35,7 +35,6 @@\n #else\n \n /* We need definitions from the SSE2 and SSE header files*/\n-#include <xmmintrin.h>\n #include <emmintrin.h>\n \n /* Additional bits in the MXCSR.  */"}, {"sha": "ac3a59af7746d428cfeeff39b1850cd5b8509efe", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=376a4c0534af595af1f2ac7f862967021d58e4af", "patch": "@@ -716,17 +716,11 @@ _mm_cvtps_pi8(__m128 __A)\n }\n \n /* Selects four specific SPFP values from A and B based on MASK.  */\n-#if 0\n static __inline __m128 __attribute__((__always_inline__))\n-_mm_shuffle_ps (__m128 __A, __m128 __B, int __mask)\n+_mm_shuffle_ps (__m128 __A, __m128 __B, int const __mask)\n {\n   return (__m128) __builtin_ia32_shufps ((__v4sf)__A, (__v4sf)__B, __mask);\n }\n-#else\n-#define _mm_shuffle_ps(A, B, MASK) \\\n- ((__m128) __builtin_ia32_shufps ((__v4sf)(A), (__v4sf)(B), (MASK)))\n-#endif\n-\n \n /* Selects and interleaves the upper two SPFP values from A and B.  */\n static __inline __m128 __attribute__((__always_inline__))\n@@ -992,7 +986,6 @@ _mm_move_ss (__m128 __A, __m128 __B)\n }\n \n /* Extracts one of the four words of A.  The selector N must be immediate.  */\n-#if 0\n static __inline int __attribute__((__always_inline__))\n _mm_extract_pi16 (__m64 const __A, int const __N)\n {\n@@ -1004,14 +997,9 @@ _m_pextrw (__m64 const __A, int const __N)\n {\n   return _mm_extract_pi16 (__A, __N);\n }\n-#else\n-#define _mm_extract_pi16(A, N)\t__builtin_ia32_vec_ext_v4hi ((__v4hi)(A), (N))\n-#define _m_pextrw(A, N)\t\t_mm_extract_pi16((A), (N))\n-#endif\n \n /* Inserts word D into one of four words of A.  The selector N must be\n    immediate.  */\n-#if 0\n static __inline __m64 __attribute__((__always_inline__))\n _mm_insert_pi16 (__m64 const __A, int const __D, int const __N)\n {\n@@ -1023,11 +1011,6 @@ _m_pinsrw (__m64 const __A, int const __D, int const __N)\n {\n   return _mm_insert_pi16 (__A, __D, __N);\n }\n-#else\n-#define _mm_insert_pi16(A, D, N) \\\n-  ((__m64) __builtin_ia32_vec_set_v4hi ((__v4hi)(A), (D), (N)))\n-#define _m_pinsrw(A, D, N)\t _mm_insert_pi16((A), (D), (N))\n-#endif\n \n /* Compute the element-wise maximum of signed 16-bit values.  */\n static __inline __m64 __attribute__((__always_inline__))\n@@ -1110,23 +1093,17 @@ _m_pmulhuw (__m64 __A, __m64 __B)\n \n /* Return a combination of the four 16-bit values in A.  The selector\n    must be an immediate.  */\n-#if 0\n static __inline __m64 __attribute__((__always_inline__))\n-_mm_shuffle_pi16 (__m64 __A, int __N)\n+_mm_shuffle_pi16 (__m64 __A, int const __N)\n {\n   return (__m64) __builtin_ia32_pshufw ((__v4hi)__A, __N);\n }\n \n static __inline __m64 __attribute__((__always_inline__))\n-_m_pshufw (__m64 __A, int __N)\n+_m_pshufw (__m64 __A, int const __N)\n {\n   return _mm_shuffle_pi16 (__A, __N);\n }\n-#else\n-#define _mm_shuffle_pi16(A, N) \\\n-  ((__m64) __builtin_ia32_pshufw ((__v4hi)(A), (N)))\n-#define _m_pshufw(A, N)\t\t_mm_shuffle_pi16 ((A), (N))\n-#endif\n \n /* Conditionally store byte elements of A into P.  The high bit of each\n    byte in the selector N determines whether the corresponding byte from\n@@ -1186,16 +1163,11 @@ _m_psadbw (__m64 __A, __m64 __B)\n \n /* Loads one cache line from address P to a location \"closer\" to the\n    processor.  The selector I specifies the type of prefetch operation.  */\n-#if 0\n static __inline void __attribute__((__always_inline__))\n _mm_prefetch (void *__P, enum _mm_hint __I)\n {\n   __builtin_prefetch (__P, 0, __I);\n }\n-#else\n-#define _mm_prefetch(P, I) \\\n-  __builtin_prefetch ((P), 0, (I))\n-#endif\n \n /* Stores the data in A to the address P without polluting the caches.  */\n static __inline void __attribute__((__always_inline__))"}, {"sha": "42f0c6934bf6da0d0dcf7f50a4f7b3ce0cd3f6f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=376a4c0534af595af1f2ac7f862967021d58e4af", "patch": "@@ -1,3 +1,24 @@\n+2006-05-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/31585\n+\t* gcc.target/i386/sse-13.c: Use \"-mssse3 -msse4a\" compile options.\n+\t(__builtin_ia32_psllwi128): Redefine to test with immediate operand.\n+\t(__builtin_ia32_psrlqi128): Ditto.\n+\t(__builtin_ia32_psrlwi128): Ditto.\n+\t(__builtin_ia32_psrldi128): Ditto.\n+\t(__builtin_ia32_psrldqi128): Ditto.\n+\t(__builtin_ia32_pslldqi128): Ditto.\n+\t(__builtin_ia32_psrawi128): Ditto.\n+\t(__builtin_ia32_psradi128): Ditto.\n+\t(__builtin_ia32_psllqi128): Ditto.\n+\t(__builtin_ia32_pslldi128): Ditto.\n+\t(__builtin_prefetch): Ditto.\n+\t(__builtin_ia32_pshufw): Ditto.\n+\t(__builtin_ia32_vec_set_v4hi): Ditto.\n+\t(__builtin_ia32_vec_ext_v4hi): Ditto.\n+\t(__builtin_ia32_shufps): Ditto.\n+\t* gcc.target/i386/sse-14.c: Same changes as sse-13.c.\n+\n 2007-05-19  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31974"}, {"sha": "6bba000e868f07a5ceb948b0eac799d63880196c", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=376a4c0534af595af1f2ac7f862967021d58e4af", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O2 -msse\" } */\n+/* { dg-options \"-O2 -mssse3 -msse4a\" } */\n \n /* Test that the intrinsics compile with optimization.  All of them are\n    defined as inline functions in mmintrin.h that reference the proper\n@@ -9,4 +9,27 @@\n #define static\n #define __inline\n \n-#include <xmmintrin.h>\n+/* Following intrinsics require immediate arguments. */\n+\n+/* emmintrin.h */\n+#define __builtin_ia32_psllwi128(A, B) __builtin_ia32_psllwi128(A, 1)\n+#define __builtin_ia32_psrlqi128(A, B) __builtin_ia32_psrlqi128(A, 1)\n+#define __builtin_ia32_psrlwi128(A, B) __builtin_ia32_psrlwi128(A, 1)\n+#define __builtin_ia32_psrldi128(A, B) __builtin_ia32_psrldi128(A, 1)\n+#define __builtin_ia32_psrldqi128(A, B) __builtin_ia32_psrldqi128(A, 8)\n+#define __builtin_ia32_pslldqi128(A, B) __builtin_ia32_pslldqi128(A, 8)\n+#define __builtin_ia32_psrawi128(A, B) __builtin_ia32_psrawi128(A, 1)\n+#define __builtin_ia32_psradi128(A, B) __builtin_ia32_psradi128(A, 1)\n+#define __builtin_ia32_psllqi128(A, B) __builtin_ia32_psllqi128(A, 1)\n+#define __builtin_ia32_pslldi128(A, B) __builtin_ia32_pslldi128(A, 1)\n+\n+/* xmmintrin.h */\n+#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, A, _MM_HINT_NTA)\n+#define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n+#define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n+  __builtin_ia32_vec_set_v4hi(A, D, 0)\n+#define __builtin_ia32_vec_ext_v4hi(A, N) __builtin_ia32_vec_ext_v4hi(A, 0)\n+#define __builtin_ia32_shufps(A, B, C) __builtin_ia32_shufps(A, B, 0)\n+\n+#include <ammintrin.h>\n+#include <tmmintrin.h>"}, {"sha": "d99938084b9a5c6c4982610aa3c6c10edc403db4", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376a4c0534af595af1f2ac7f862967021d58e4af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=376a4c0534af595af1f2ac7f862967021d58e4af", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O0 -msse\" } */\n+/* { dg-options \"-O0 -mssse3 -msse4a\" } */\n \n /* Test that the intrinsics compile without optimization.  All of them are\n    defined as inline functions in mmintrin.h that reference the proper\n@@ -9,4 +9,28 @@\n #define static\n #define __inline\n \n-#include <xmmintrin.h>\n+/* Following intrinsics require immediate arguments. */\n+\n+/* emmintrin.h */\n+#define __builtin_ia32_psllwi128(A, B) __builtin_ia32_psllwi128(A, 1)\n+#define __builtin_ia32_psrlqi128(A, B) __builtin_ia32_psrlqi128(A, 1)\n+#define __builtin_ia32_psrlwi128(A, B) __builtin_ia32_psrlwi128(A, 1)\n+#define __builtin_ia32_psrldi128(A, B) __builtin_ia32_psrldi128(A, 1)\n+#define __builtin_ia32_psrldqi128(A, B) __builtin_ia32_psrldqi128(A, 8)\n+#define __builtin_ia32_pslldqi128(A, B) __builtin_ia32_pslldqi128(A, 8)\n+#define __builtin_ia32_psrawi128(A, B) __builtin_ia32_psrawi128(A, 1)\n+#define __builtin_ia32_psradi128(A, B) __builtin_ia32_psradi128(A, 1)\n+#define __builtin_ia32_psllqi128(A, B) __builtin_ia32_psllqi128(A, 1)\n+#define __builtin_ia32_pslldi128(A, B) __builtin_ia32_pslldi128(A, 1)\n+\n+/* xmmintrin.h */\n+#define __builtin_prefetch(P, A, I) __builtin_prefetch(P, A, _MM_HINT_NTA)\n+#define __builtin_ia32_pshufw(A, N) __builtin_ia32_pshufw(A, 0)\n+#define __builtin_ia32_vec_set_v4hi(A, D, N) \\\n+  __builtin_ia32_vec_set_v4hi(A, D, 0)\n+#define __builtin_ia32_vec_ext_v4hi(A, N) __builtin_ia32_vec_ext_v4hi(A, 0)\n+#define __builtin_ia32_shufps(A, B, C) __builtin_ia32_shufps(A, B, 0)\n+\n+#include <ammintrin.h>\n+#include <tmmintrin.h>\n+"}]}