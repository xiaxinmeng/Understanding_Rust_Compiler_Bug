{"sha": "608508a67719de05d2144200325662bda7204adc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA4NTA4YTY3NzE5ZGUwNWQyMTQ0MjAwMzI1NjYyYmRhNzIwNGFkYw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2014-06-26T09:16:19Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2014-06-26T09:16:19Z"}, "message": "Small cleanups before making collect2 use collect-utils.\n\n\t* collect-utils.c (save_temps): New variable.\n\t(do_wait): Use it instead of debug.  Use fatal_error.\n\t* collect-utils.h (save_temps): Declare.\n\t* collect2.c (verbose): Rename from vflag.  All uses changed.\n\t(tool_cleanup): New function, copied from collect_atexit.\n\t(collect_atexit, handler): Just call it.\n\t* collect2.h (verbose): Declaration renamed from vflag.\n\t* lto-wrapper.c (maybe_unlink, run_gcc): Use save_temps instead of\n\tdebug.\n\nFrom-SVN: r212019", "tree": {"sha": "f0d0a3f3ffbbb64530f9c1a1a860983cd9984b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0d0a3f3ffbbb64530f9c1a1a860983cd9984b28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/608508a67719de05d2144200325662bda7204adc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608508a67719de05d2144200325662bda7204adc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608508a67719de05d2144200325662bda7204adc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608508a67719de05d2144200325662bda7204adc/comments", "author": null, "committer": null, "parents": [{"sha": "a185856a06e7b26a06229563b2b01b92e6a4589b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a185856a06e7b26a06229563b2b01b92e6a4589b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a185856a06e7b26a06229563b2b01b92e6a4589b"}], "stats": {"total": 101, "additions": 46, "deletions": 55}, "files": [{"sha": "edcc34179c7c26a55a5cd58ba7ae755d0dac1b81", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608508a67719de05d2144200325662bda7204adc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608508a67719de05d2144200325662bda7204adc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=608508a67719de05d2144200325662bda7204adc", "patch": "@@ -1,5 +1,15 @@\n 2014-06-26  Bernd Schmidt  <bernds@codesourcery.com>\n \n+    \t* collect-utils.c (save_temps): New variable.\n+    \t(do_wait): Use it instead of debug.  Use fatal_error.\n+    \t* collect-utils.h (save_temps): Declare.\n+    \t* collect2.c (verbose): Rename from vflag.  All uses changed.\n+    \t(tool_cleanup): New function, copied from collect_atexit.\n+    \t(collect_atexit, handler): Just call it.\n+    \t* collect2.h (verbose): Declaration renamed from vflag.\n+    \t* lto-wrapper.c (maybe_unlink, run_gcc): Use save_temps instead of\n+    \tdebug.\n+\n         * Makefile.in (ALL_HOST_BACKEND_OBJS): Add collect-utils.o.\n         (lto-wrapper$(exeext)): Link with collect-utils.o.\n         * collect-utils.c: New file."}, {"sha": "e92513c18a32e2ffb387d53307d445c13f014d6f", "filename": "gcc/collect-utils.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608508a67719de05d2144200325662bda7204adc/gcc%2Fcollect-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608508a67719de05d2144200325662bda7204adc/gcc%2Fcollect-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.c?ref=608508a67719de05d2144200325662bda7204adc", "patch": "@@ -33,6 +33,7 @@ static char *response_file;\n \n bool debug;\n bool verbose;\n+bool save_temps;\n \n /* Delete tempfiles.  */\n \n@@ -159,12 +160,9 @@ do_wait (const char *prog, struct pex_obj *pex)\n {\n   int ret = collect_wait (prog, pex);\n   if (ret != 0)\n-    {\n-      error (\"%s returned %d exit status\", prog, ret);\n-      exit (ret);\n-    }\n+    fatal_error (\"%s returned %d exit status\", prog, ret);\n \n-  if (response_file && !debug)\n+  if (response_file && !save_temps)\n     {\n       unlink (response_file);\n       response_file = NULL;"}, {"sha": "46c116001c957077aa39b7802bc5aea134f7edf6", "filename": "gcc/collect-utils.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608508a67719de05d2144200325662bda7204adc/gcc%2Fcollect-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608508a67719de05d2144200325662bda7204adc/gcc%2Fcollect-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect-utils.h?ref=608508a67719de05d2144200325662bda7204adc", "patch": "@@ -30,6 +30,7 @@ extern void utils_cleanup (void);\n \n extern bool debug;\n extern bool verbose;\n+extern bool save_temps;\n \n /* Provided by the tool itself.  */\n "}, {"sha": "5de1bb38fd3659532e1b1539c16f42425cc1ff3c", "filename": "gcc/collect2.c", "status": "modified", "additions": 26, "deletions": 44, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608508a67719de05d2144200325662bda7204adc/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608508a67719de05d2144200325662bda7204adc/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=608508a67719de05d2144200325662bda7204adc", "patch": "@@ -175,7 +175,7 @@ struct head\n   int number;\n };\n \n-bool vflag;\t\t\t\t/* true if -v or --version */ \n+bool verbose;\t\t\t\t/* true if -v or --version */ \n static int rflag;\t\t\t/* true if -r */\n static int strip_flag;\t\t\t/* true if -s */\n #ifdef COLLECT_EXPORT_LIST\n@@ -383,7 +383,7 @@ static void scan_prog_file (const char *, scanpass, scanfilter);\n /* Delete tempfiles and exit function.  */\n \n static void\n-collect_atexit (void)\n+tool_cleanup (bool from_signal)\n {\n   if (c_file != 0 && c_file[0])\n     maybe_unlink (c_file);\n@@ -401,20 +401,33 @@ collect_atexit (void)\n \n   if (ldout != 0 && ldout[0])\n     {\n-      dump_ld_file (ldout, stdout);\n+      if (!from_signal)\n+\tdump_ld_file (ldout, stdout);\n       maybe_unlink (ldout);\n     }\n \n   if (lderrout != 0 && lderrout[0])\n     {\n-      dump_ld_file (lderrout, stderr);\n+      if (!from_signal)\n+\tdump_ld_file (lderrout, stderr);\n       maybe_unlink (lderrout);\n     }\n+}\n \n-  if (response_file)\n-    maybe_unlink (response_file);\n+static void\n+collect_atexit (void)\n+{\n+  tool_cleanup (false);\n }\n \n+static void\n+handler (int signo)\n+{\n+  tool_cleanup (true);\n+\n+  signal (signo, SIG_DFL);\n+  raise (signo);\n+}\n \f\n /* Notify user of a non-error.  */\n void\n@@ -437,37 +450,6 @@ notice_translated (const char *cmsgid, ...)\n   vfprintf (stderr, cmsgid, ap);\n   va_end (ap);\n }\n-\f\n-static void\n-handler (int signo)\n-{\n-  if (c_file != 0 && c_file[0])\n-    maybe_unlink (c_file);\n-\n-  if (o_file != 0 && o_file[0])\n-    maybe_unlink (o_file);\n-\n-  if (ldout != 0 && ldout[0])\n-    maybe_unlink (ldout);\n-\n-  if (lderrout != 0 && lderrout[0])\n-    maybe_unlink (lderrout);\n-\n-#ifdef COLLECT_EXPORT_LIST\n-  if (export_file != 0 && export_file[0])\n-    maybe_unlink (export_file);\n-#endif\n-\n-  if (lto_o_files)\n-    maybe_unlink_list (lto_o_files);\n-\n-  if (response_file)\n-    maybe_unlink (response_file);\n-\n-  signal (signo, SIG_DFL);\n-  raise (signo);\n-}\n-\n \f\n int\n file_exists (const char *name)\n@@ -1056,7 +1038,7 @@ main (int argc, char **argv)\n \t    aixlazy_flag = 1;\n #endif\n       }\n-    vflag = debug;\n+    verbose = debug;\n     find_file_set_debug (debug);\n     if (use_plugin)\n       lto_mode = LTO_MODE_NONE;\n@@ -1451,7 +1433,7 @@ main (int argc, char **argv)\n \n \t    case 'v':\n \t      if (arg[2] == '\\0')\n-\t\tvflag = true;\n+\t\tverbose = true;\n \t      break;\n \n \t    case '-':\n@@ -1483,7 +1465,7 @@ main (int argc, char **argv)\n \t      else if (strncmp (arg, \"--sysroot=\", 10) == 0)\n \t\ttarget_system_root = arg + 10;\n \t      else if (strcmp (arg, \"--version\") == 0)\n-\t\tvflag = true;\n+\t\tverbose = true;\n \t      else if (strcmp (arg, \"--help\") == 0)\n \t\thelpflag = true;\n \t      break;\n@@ -1578,7 +1560,7 @@ main (int argc, char **argv)\n   *c_ptr++ = c_file;\n   *c_ptr = *ld1 = *object = (char *) 0;\n \n-  if (vflag)\n+  if (verbose)\n     notice (\"collect2 version %s\\n\", version_string);\n \n   if (helpflag)\n@@ -1947,7 +1929,7 @@ collect_execute (const char *prog, char **argv, const char *outname,\n       argv = response_argv;\n     }\n \n-  if (vflag || debug)\n+  if (verbose || debug)\n     {\n       char **p_argv;\n       const char *str;\n@@ -2509,7 +2491,7 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n   nm_argv[argc++] = (char *) 0;\n \n   /* Trace if needed.  */\n-  if (vflag)\n+  if (verbose)\n     {\n       const char **p_argv;\n       const char *str;\n@@ -2706,7 +2688,7 @@ scan_libraries (const char *prog_name)\n   ldd_argv[argc++] = (char *) 0;\n \n   /* Trace if needed.  */\n-  if (vflag)\n+  if (verbose)\n     {\n       const char **p_argv;\n       const char *str;"}, {"sha": "344ad86376f9430660be86ad07306e652eaeccb9", "filename": "gcc/collect2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608508a67719de05d2144200325662bda7204adc/gcc%2Fcollect2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608508a67719de05d2144200325662bda7204adc/gcc%2Fcollect2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.h?ref=608508a67719de05d2144200325662bda7204adc", "patch": "@@ -36,7 +36,7 @@ extern const char *lderrout;\n extern const char *c_file_name;\n extern struct obstack temporary_obstack;\n extern char *temporary_firstobj;\n-extern bool vflag, debug;\n+extern bool verbose, debug;\n extern bool may_unlink_output_file;\n \n extern void notice_translated (const char *, ...) ATTRIBUTE_PRINTF_1;"}, {"sha": "49f08952d48f70169ea74dfa9801a790ee2fc9a6", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608508a67719de05d2144200325662bda7204adc/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608508a67719de05d2144200325662bda7204adc/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=608508a67719de05d2144200325662bda7204adc", "patch": "@@ -99,7 +99,7 @@ lto_wrapper_cleanup (void)\n void\n maybe_unlink (const char *file)\n {\n-  if (! debug)\n+  if (!save_temps)\n     {\n       if (unlink_if_ordinary (file)\n \t  && errno != ENOENT)\n@@ -540,7 +540,7 @@ run_gcc (unsigned argc, char *argv[])\n \t  continue;\n \n \tcase OPT_save_temps:\n-\t  debug = 1;\n+\t  save_temps = 1;\n \t  break;\n \n \tcase OPT_v:\n@@ -647,7 +647,7 @@ run_gcc (unsigned argc, char *argv[])\n \t  obstack_ptr_grow (&argv_obstack, dumpbase);\n \t}\n \n-      if (linker_output && debug)\n+      if (linker_output && save_temps)\n \t{\n \t  ltrans_output_file = (char *) xmalloc (strlen (linker_output)\n \t\t\t\t\t\t + sizeof (\".ltrans.out\") + 1);\n@@ -785,7 +785,7 @@ run_gcc (unsigned argc, char *argv[])\n \t      /* If we are not preserving the ltrans input files then\n \t         truncate them as soon as we have processed it.  This\n \t\t reduces temporary disk-space usage.  */\n-\t      if (! debug)\n+\t      if (! save_temps)\n \t\tfprintf (mstream, \"\\t@-touch -r %s %s.tem > /dev/null 2>&1 \"\n \t\t\t \"&& mv %s.tem %s\\n\",\n \t\t\t input_name, input_name, input_name, input_name); "}, {"sha": "addea61fdb4f96b5ab22dc3f1327d809c1017f88", "filename": "gcc/tlink.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608508a67719de05d2144200325662bda7204adc/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608508a67719de05d2144200325662bda7204adc/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=608508a67719de05d2144200325662bda7204adc", "patch": "@@ -275,7 +275,7 @@ tlink_init (void)\n   else\n     {\n       tlink_verbose = 1;\n-      if (vflag)\n+      if (verbose)\n \ttlink_verbose = 2;\n       if (debug)\n \ttlink_verbose = 3;"}]}