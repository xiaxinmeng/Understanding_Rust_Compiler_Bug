{"sha": "28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg4MzliNzBkMGZhODcwMzMxMWQzOWNhMmNlMWY4YTE3YjhkMjBkNg==", "commit": {"author": {"name": "Casey Marshall", "email": "csm@gnu.org", "date": "2004-08-30T10:25:38Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-08-30T10:25:38Z"}, "message": "DummyKeyPairGenerator.java (clone): Removed useless instanceof check.\n\n2004-08-30  Casey Marshall  <csm@gnu.org>\n\n        * java/security/DummyKeyPairGenerator.java (clone): Removed\n        useless instanceof check.\n        * java/security/DummyMessageDigest.java (clone): Likewise.\n        * java/security/DummySignature.java (clone): Likewise.\n        * java/security/MessageDigest.java (clone): Remove useless\n        instanceof check.\n        * java/security/MessageDigestSpi.java (clone): Likewise.\n        * java/security/Signature.java (clone): Provide meaningful\n        implementation.\n        * java/security/SignatureSpi.java (clone): Likewise.\n\nFrom-SVN: r86755", "tree": {"sha": "d5939b84cb5fa05f18e3b26411d09f41525bcafd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5939b84cb5fa05f18e3b26411d09f41525bcafd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/comments", "author": null, "committer": null, "parents": [{"sha": "ce521a9c85bfb120a9904293897a256e83477eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce521a9c85bfb120a9904293897a256e83477eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce521a9c85bfb120a9904293897a256e83477eca"}], "stats": {"total": 106, "additions": 52, "deletions": 54}, "files": [{"sha": "cee3e61aef395d957c766beda094725bbc0999a8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "patch": "@@ -1,3 +1,16 @@\n+2004-08-30  Casey Marshall  <csm@gnu.org>\n+\n+\t* java/security/DummyKeyPairGenerator.java (clone): Removed\n+\tuseless instanceof check.\n+\t* java/security/DummyMessageDigest.java (clone): Likewise.\n+\t* java/security/DummySignature.java (clone): Likewise.\n+\t* java/security/MessageDigest.java (clone): Remove useless\n+\tinstanceof check.\n+\t* java/security/MessageDigestSpi.java (clone): Likewise.\n+\t* java/security/Signature.java (clone): Provide meaningful\n+\timplementation.\n+\t* java/security/SignatureSpi.java (clone): Likewise.\n+\n 2004-08-29  Mark Wielaard  <mark@klomp.org>\n \n \t* java/util/Arrays.java"}, {"sha": "5d3d914cdcd2db2f0558676ca0a62684b320a48a", "filename": "libjava/java/security/DummyKeyPairGenerator.java", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FDummyKeyPairGenerator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FDummyKeyPairGenerator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDummyKeyPairGenerator.java?ref=28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "patch": "@@ -51,11 +51,8 @@ public DummyKeyPairGenerator(KeyPairGeneratorSpi kpgSpi, String algorithm)\n \n   public Object clone() throws CloneNotSupportedException\n   {\n-    if (!(kpgSpi instanceof Cloneable))\n-      throw new CloneNotSupportedException();\n-\n     KeyPairGenerator result = new DummyKeyPairGenerator\n-\t    ((KeyPairGeneratorSpi) kpgSpi.clone(), this.getAlgorithm());\n+            ((KeyPairGeneratorSpi) kpgSpi.clone(), this.getAlgorithm());\n     result.provider = this.getProvider();\n     return result;\n   }"}, {"sha": "703884f4b5555a78663ffefda0415915f78a30aa", "filename": "libjava/java/security/DummyMessageDigest.java", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FDummyMessageDigest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FDummyMessageDigest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDummyMessageDigest.java?ref=28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "patch": "@@ -49,11 +49,8 @@ public DummyMessageDigest(MessageDigestSpi mdSpi, String algorithm)\n \n   public Object clone() throws CloneNotSupportedException\n   {\n-    if (!(mdSpi instanceof Cloneable))\n-      throw new CloneNotSupportedException();\n-\n     MessageDigest result = new DummyMessageDigest\n-\t((MessageDigestSpi) mdSpi.clone(), this.getAlgorithm());\n+        ((MessageDigestSpi) mdSpi.clone(), this.getAlgorithm());\n     result.provider = this.getProvider();\n     return result;\n   }"}, {"sha": "2f21cd5897fde824ab9853cc74ef7421058df008", "filename": "libjava/java/security/DummySignature.java", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FDummySignature.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FDummySignature.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FDummySignature.java?ref=28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "patch": "@@ -49,11 +49,8 @@ public DummySignature(SignatureSpi sigSpi, String algorithm)\n \n   public Object clone() throws CloneNotSupportedException\n   {\n-    if (!(sigSpi instanceof Cloneable))\n-      throw new CloneNotSupportedException();\n-\n     Signature result = new DummySignature\n-\t    ((SignatureSpi) sigSpi.clone(), this.getAlgorithm());\n+            ((SignatureSpi) sigSpi.clone(), this.getAlgorithm());\n     result.provider = this.getProvider();\n     return result;\n   }"}, {"sha": "8e4dfecb5eb9ada51999bb893d12959ff8db21ce", "filename": "libjava/java/security/MessageDigest.java", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FMessageDigest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FMessageDigest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FMessageDigest.java?ref=28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "patch": "@@ -102,9 +102,9 @@ public abstract class MessageDigest extends MessageDigestSpi\n   /**\n    * Creates a message digest with the specified algorithm name.\n    *\n-   * @param algorithm the standard name of the digest algorithm. \n-   * See Appendix A in the Java Cryptography Architecture API \n-   * Specification &amp; Reference for information about standard \n+   * @param algorithm the standard name of the digest algorithm.\n+   * See Appendix A in the Java Cryptography Architecture API\n+   * Specification &amp; Reference for information about standard\n    * algorithm names.\n    */\n   protected MessageDigest(String algorithm)\n@@ -134,11 +134,11 @@ public static MessageDigest getInstance(String algorithm)\n     Provider[] p = Security.getProviders();\n     for (int i = 0; i < p.length; i++)\n       {\n-\ttry\n-\t  {\n-\t    return getInstance(algorithm, p[i]);\n-\t  }\n-\tcatch (NoSuchAlgorithmException ignored) {}\n+        try\n+          {\n+            return getInstance(algorithm, p[i]);\n+          }\n+        catch (NoSuchAlgorithmException ignored) {}\n       }\n \n     throw new NoSuchAlgorithmException(algorithm);\n@@ -206,17 +206,17 @@ public static MessageDigest getInstance(String algorithm, Provider provider)\n       }\n     catch (java.lang.reflect.InvocationTargetException ite)\n       {\n-\tthrow new NoSuchAlgorithmException(algorithm);\n+        throw new NoSuchAlgorithmException(algorithm);\n       }\n-     \n+\n     if (o instanceof MessageDigestSpi)\n       {\n-\tresult = new DummyMessageDigest((MessageDigestSpi) o, algorithm);\n+        result = new DummyMessageDigest((MessageDigestSpi) o, algorithm);\n       }\n     else if (o instanceof MessageDigest)\n       {\n-\tresult = (MessageDigest) o;\n-\tresult.algorithm = algorithm;\n+        result = (MessageDigest) o;\n+        result.algorithm = algorithm;\n       }\n     else\n       {\n@@ -335,7 +335,7 @@ public static boolean isEqual(byte[] digesta, byte[] digestb)\n \n     for (int i = digesta.length - 1; i >= 0; --i)\n       if (digesta[i] != digestb[i])\n-\treturn false;\n+        return false;\n \n     return true;\n   }\n@@ -383,10 +383,7 @@ public final int getDigestLength()\n    */\n   public Object clone() throws CloneNotSupportedException\n   {\n-    if (this instanceof Cloneable)\n-      return super.clone();\n-    else\n-      throw new CloneNotSupportedException();\n+    return super.clone();\n   }\n \n   private String digestToString()\n@@ -400,12 +397,12 @@ private String digestToString()\n     int len = digest.length;\n     for (int i = 0; i < len; ++i)\n       {\n-\tbyte b = digest[i];\n-\tbyte high = (byte) ((b & 0xff) >>> 4);\n-\tbyte low = (byte) (b & 0xf);\n+        byte b = digest[i];\n+        byte high = (byte) ((b & 0xff) >>> 4);\n+        byte low = (byte) (b & 0xf);\n \n-\tbuf.append(high > 9 ? ('a' - 10) + high : '0' + high);\n-\tbuf.append(low > 9 ? ('a' - 10) + low : '0' + low);\n+        buf.append(high > 9 ? ('a' - 10) + high : '0' + high);\n+        buf.append(low > 9 ? ('a' - 10) + low : '0' + low);\n       }\n \n     return buf.toString();"}, {"sha": "509666c6cfdbd1e96e19de03736e33e4d4764147", "filename": "libjava/java/security/MessageDigestSpi.java", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FMessageDigestSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FMessageDigestSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FMessageDigestSpi.java?ref=28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "patch": "@@ -40,15 +40,15 @@\n /**\n    This is the Service Provider Interface (SPI) for MessageDigest\n    class in java.security. It provides the back end functionality\n-   for the MessageDigest class so that it can compute message \n+   for the MessageDigest class so that it can compute message\n    hashes. The default hashes are SHA-1 and MD5. A message hash\n    takes data of arbitrary length and produces a unique number\n-   representing it. \n+   representing it.\n \n    Cryptography service providers who want to implement their\n    own message digest hashes need only to subclass this class.\n \n-   The implementation of a Cloneable interface is left to up to \n+   The implementation of a Cloneable interface is left to up to\n    the programmer of a subclass.\n \n    @version 0.0\n@@ -135,7 +135,7 @@ protected int engineDigest(byte[]buf, int offset, int len)\n   }\n \n   /**\n-     Resets the digest engine. Reinitializes internal variables \n+     Resets the digest engine. Reinitializes internal variables\n      and clears sensitive data.\n    */\n   protected abstract void engineReset();\n@@ -150,9 +150,6 @@ implementation has to overload this class in order to be\n    */\n   public Object clone() throws CloneNotSupportedException\n   {\n-    if (this instanceof Cloneable)\n-      return super.clone();\n-    else\n-      throw new CloneNotSupportedException();\n+    return super.clone();\n   }\n }"}, {"sha": "39c41263888541ce63b82a520bace00e6e4462f3", "filename": "libjava/java/security/Signature.java", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FSignature.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FSignature.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignature.java?ref=28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "patch": "@@ -206,7 +206,7 @@ public static Signature getInstance(String algorithm, String provider)\n   {\n     if (provider == null || provider.length() == 0)\n       throw new IllegalArgumentException(\"Illegal provider\");\n-    \n+\n     Provider p = Security.getProvider(provider);\n     if (p == null)\n       throw new NoSuchProviderException(provider);\n@@ -251,16 +251,16 @@ public static Signature getInstance(String algorithm, Provider provider)\n \n     if (o instanceof SignatureSpi)\n       {\n-\tresult = new DummySignature((SignatureSpi) o, algorithm);\n+        result = new DummySignature((SignatureSpi) o, algorithm);\n       }\n     else if (o instanceof Signature)\n       {\n-\tresult = (Signature) o;\n-\tresult.algorithm = algorithm;\n+        result = (Signature) o;\n+        result.algorithm = algorithm;\n       }\n     else\n       {\n-\tthrow new NoSuchAlgorithmException(algorithm);\n+        throw new NoSuchAlgorithmException(algorithm);\n       }\n     result.provider = provider;\n     return result;\n@@ -313,9 +313,9 @@ public final void initVerify(Certificate certificate)\n     if (certificate.getType().equals(\"X509\"))\n       {\n         X509Certificate cert = (X509Certificate) certificate;\n-\tboolean[]array = cert.getKeyUsage();\n-\tif (array != null && array[0] == false)\n-\t  throw new InvalidKeyException(\n+        boolean[]array = cert.getKeyUsage();\n+        if (array != null && array[0] == false)\n+          throw new InvalidKeyException(\n               \"KeyUsage of this Certificate indicates it cannot be used for digital signing\");\n       }\n     this.initVerify(certificate.getPublicKey());\n@@ -627,6 +627,6 @@ public final Object getParameter(String param)\n    */\n   public Object clone() throws CloneNotSupportedException\n   {\n-    throw new CloneNotSupportedException();\n+    return super.clone();\n   }\n }"}, {"sha": "0f95e526e4fb77ffb33986e118422c69164cf088", "filename": "libjava/java/security/SignatureSpi.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FSignatureSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28839b70d0fa8703311d39ca2ce1f8a17b8d20d6/libjava%2Fjava%2Fsecurity%2FSignatureSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSignatureSpi.java?ref=28839b70d0fa8703311d39ca2ce1f8a17b8d20d6", "patch": "@@ -263,7 +263,7 @@ protected void engineSetParameter(AlgorithmParameterSpec params)\n    */\n   protected AlgorithmParameters engineGetParameters()\n   {\n-    throw new UnsupportedOperationException();    \n+    throw new UnsupportedOperationException();\n   }\n \n   /**\n@@ -297,6 +297,6 @@ protected abstract Object engineGetParameter(String param)\n    */\n   public Object clone() throws CloneNotSupportedException\n   {\n-    throw new CloneNotSupportedException();\n+    return super.clone();\n   }\n }"}]}