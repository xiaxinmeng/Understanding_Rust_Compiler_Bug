{"sha": "183ae52b226898cc34aa51d4153cf0c006212a8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgzYWU1MmIyMjY4OThjYzM0YWE1MWQ0MTUzY2YwYzAwNjIxMmE4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-22T01:00:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-23T18:12:39Z"}, "message": "libstdc++: make atomic waiting depend on gthreads or futexes\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/atomic_wait.h: Do not define anything unless\n\tgthreads or futexes are available.\n\t* include/bits/atomic_timed_wait.h: Likewise.\n\t* include/bits/semaphore_base.h: Likewise.\n\t* include/std/semaphore: Likewise.\n\t* include/bits/atomic_base.h (atomic_flag::wait)\n\t(atomic_flag::notify_one, atomic_flag::notify_all)\n\t(__atomic_base<I>::wait, __atomic_base<I>::notify_one)\n\t(__atomic_base<I>::notify_all, __atomic_base<P*>::wait)\n\t(__atomic_base<P*>::notify_one, __atomic_base<P*>::notify_all)\n\t(__atomic_impl::wait, __atomic_impl::notify_one)\n\t(__atomic_impl::notify_all, __atomic_float::wait)\n\t(__atomic_float::notify_one, __atomic_float::notify_all)\n\t(__atomic_ref::wait, __atomic_ref::notify_one)\n\t(__atomic_ref::notify_all): Only define if gthreads or futexes\n\tare available.\n\t* include/std/atomic (atomic::wait, atomic::notify_one)\n\t(atomic::notify_all): Likewise.\n\t* include/std/version (__cpp_lib_semaphore): Define\n\tconditionally.", "tree": {"sha": "c2702c608997a70f46583569f878e08fc7d2a85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2702c608997a70f46583569f878e08fc7d2a85a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/183ae52b226898cc34aa51d4153cf0c006212a8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183ae52b226898cc34aa51d4153cf0c006212a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/183ae52b226898cc34aa51d4153cf0c006212a8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183ae52b226898cc34aa51d4153cf0c006212a8a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcbde431aa4366da18ac1687afb0bef6e4072d49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbde431aa4366da18ac1687afb0bef6e4072d49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcbde431aa4366da18ac1687afb0bef6e4072d49"}], "stats": {"total": 185, "additions": 111, "deletions": 74}, "files": [{"sha": "d7db8612889e65b4b00d7672a357af026ecedaa8", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=183ae52b226898cc34aa51d4153cf0c006212a8a", "patch": "@@ -230,6 +230,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __v == __GCC_ATOMIC_TEST_AND_SET_TRUEVAL;\n     }\n \n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n     _GLIBCXX_ALWAYS_INLINE void\n     wait(bool __old,\n \tmemory_order __m = memory_order_seq_cst) const noexcept\n@@ -252,6 +253,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { std::__atomic_notify(&_M_i, true); }\n \n     // TODO add const volatile overload\n+#endif // GTHREADS || LINUX_FUTEX\n #endif // C++20\n \n     _GLIBCXX_ALWAYS_INLINE void\n@@ -603,6 +605,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n #if __cplusplus > 201703L\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(__int_type __old,\n \t  memory_order __m = memory_order_seq_cst) const noexcept\n@@ -625,6 +628,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::__atomic_notify(&_M_i, true); }\n \n       // TODO add const volatile overload\n+#endif // GTHREADS || LINUX_FUTEX\n #endif // C++2a\n \n       _GLIBCXX_ALWAYS_INLINE __int_type\n@@ -897,6 +901,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n #if __cplusplus > 201703L\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(__pointer_type __old,\n \t   memory_order __m = memory_order_seq_cst) noexcept\n@@ -919,6 +924,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::__atomic_notify(&_M_p, true); }\n \n       // TODO add const volatile overload\n+#endif // GTHREADS || LINUX_FUTEX\n #endif // C++2a\n \n       _GLIBCXX_ALWAYS_INLINE __pointer_type\n@@ -1010,6 +1016,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n #if __cplusplus > 201703L\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n     template<typename _Tp>\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(const _Tp* __ptr, _Val<_Tp> __old,\n@@ -1034,6 +1041,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { std::__atomic_notify(__ptr, true); }\n \n       // TODO add const volatile overload\n+#endif // GTHREADS || LINUX_FUTEX\n #endif // C++2a\n \n     template<typename _Tp>\n@@ -1289,6 +1297,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Fp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(&_M_fp, __old, __m); }\n@@ -1306,6 +1315,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(&_M_fp); }\n \n       // TODO add const volatile overload\n+#endif // GTHREADS || LINUX_FUTEX\n \n       value_type\n       fetch_add(value_type __i,\n@@ -1444,6 +1454,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1461,6 +1472,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n+#endif // GTHREADS || LINUX_FUTEX\n \n     private:\n       _Tp* _M_ptr;\n@@ -1557,6 +1569,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1574,6 +1587,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n+#endif // GTHREADS || LINUX_FUTEX\n \n       value_type\n       fetch_add(value_type __i,\n@@ -1730,6 +1744,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Fp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1747,6 +1762,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n+#endif // GTHREADS || LINUX_FUTEX\n \n       value_type\n       fetch_add(value_type __i,\n@@ -1857,6 +1873,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t       __cmpexch_failure_order(__order));\n       }\n \n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n       _GLIBCXX_ALWAYS_INLINE void\n       wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n       { __atomic_impl::wait(_M_ptr, __old, __m); }\n@@ -1874,6 +1891,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { __atomic_impl::notify_all(_M_ptr); }\n \n       // TODO add const volatile overload\n+#endif // GTHREADS || LINUX_FUTEX\n \n       _GLIBCXX_ALWAYS_INLINE value_type\n       fetch_add(difference_type __d,"}, {"sha": "b13f8aa1286198355cffe4b66f30ce26e1707f9a", "filename": "libstdc++-v3/include/bits/atomic_timed_wait.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_timed_wait.h?ref=183ae52b226898cc34aa51d4153cf0c006212a8a", "patch": "@@ -33,6 +33,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n #include <bits/functional_hash.h>\n #include <bits/atomic_wait.h>\n \n@@ -286,4 +287,5 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-#endif\n+#endif // GTHREADS || LINUX_FUTEX\n+#endif // _GLIBCXX_ATOMIC_TIMED_WAIT_H"}, {"sha": "a40cff124d7d4365d1f2f7c6263160e19c764a74", "filename": "libstdc++-v3/include/bits/atomic_wait.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_wait.h?ref=183ae52b226898cc34aa51d4153cf0c006212a8a", "patch": "@@ -33,6 +33,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n #include <bits/functional_hash.h>\n #include <bits/gthr.h>\n #include <bits/std_mutex.h>\n@@ -106,7 +107,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n-      template<typename _Tp>\n+    template<typename _Tp>\n       void\n       __platform_notify(const _Tp* __addr, bool __all) noexcept\n       {\n@@ -175,11 +176,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       bool\n       _M_waiting() const noexcept\n-\t{\n-\t  __platform_wait_t __res;\n-\t  __atomic_load(&_M_wait, &__res, __ATOMIC_ACQUIRE);\n-\t  return __res;\n-\t}\n+      {\n+\t__platform_wait_t __res;\n+\t__atomic_load(&_M_wait, &__res, __ATOMIC_ACQUIRE);\n+\treturn __res;\n+      }\n \n       void\n       _M_notify(bool __all) noexcept\n@@ -305,4 +306,5 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n-#endif\n+#endif // GTHREADS || LINUX_FUTEX\n+#endif // _GLIBCXX_ATOMIC_WAIT_H"}, {"sha": "5e29d3783fe1f89172d10d89a60dee8222685673", "filename": "libstdc++-v3/include/bits/semaphore_base.h", "status": "modified", "additions": 64, "deletions": 62, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsemaphore_base.h?ref=183ae52b226898cc34aa51d4153cf0c006212a8a", "patch": "@@ -33,6 +33,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n #include <bits/atomic_base.h>\n #include <bits/atomic_timed_wait.h>\n \n@@ -161,30 +162,68 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tnoexcept\n       { return _M_try_acquire_until(__clock_t::now() + __rtime); }\n \n-    private:\n-      sem_t _M_semaphore;\n-    };\n+  private:\n+    sem_t _M_semaphore;\n+  };\n #endif // _GLIBCXX_HAVE_POSIX_SEMAPHORE\n \n-    template<typename _Tp>\n-      struct __atomic_semaphore\n+  template<typename _Tp>\n+    struct __atomic_semaphore\n+    {\n+      static_assert(std::is_integral_v<_Tp>);\n+      static_assert(__gnu_cxx::__int_traits<_Tp>::__max\n+\t\t      <= __gnu_cxx::__int_traits<ptrdiff_t>::__max);\n+      static constexpr ptrdiff_t _S_max = __gnu_cxx::__int_traits<_Tp>::__max;\n+\n+      explicit __atomic_semaphore(_Tp __count) noexcept\n+\t: _M_counter(__count)\n       {\n-\tstatic_assert(std::is_integral_v<_Tp>);\n-\tstatic_assert(__gnu_cxx::__int_traits<_Tp>::__max\n-\t\t\t<= __gnu_cxx::__int_traits<ptrdiff_t>::__max);\n-\tstatic constexpr ptrdiff_t _S_max = __gnu_cxx::__int_traits<_Tp>::__max;\n+\t__glibcxx_assert(__count >= 0 && __count <= _S_max);\n+      }\n \n-\texplicit __atomic_semaphore(_Tp __count) noexcept\n-\t  : _M_counter(__count)\n-\t{\n-\t  __glibcxx_assert(__count >= 0 && __count <= _S_max);\n-\t}\n+      __atomic_semaphore(const __atomic_semaphore&) = delete;\n+      __atomic_semaphore& operator=(const __atomic_semaphore&) = delete;\n \n-\t__atomic_semaphore(const __atomic_semaphore&) = delete;\n-\t__atomic_semaphore& operator=(const __atomic_semaphore&) = delete;\n+      _GLIBCXX_ALWAYS_INLINE void\n+      _M_acquire() noexcept\n+      {\n+\tauto const __pred = [this]\n+\t  {\n+\t    auto __old = __atomic_impl::load(&this->_M_counter,\n+\t\t\t    memory_order::acquire);\n+\t    if (__old == 0)\n+\t      return false;\n+\t    return __atomic_impl::compare_exchange_strong(&this->_M_counter,\n+\t\t      __old, __old - 1,\n+\t\t      memory_order::acquire,\n+\t\t      memory_order::release);\n+\t  };\n+\tauto __old = __atomic_impl::load(&_M_counter, memory_order_relaxed);\n+\tstd::__atomic_wait(&_M_counter, __old, __pred);\n+      }\n+\n+      bool\n+      _M_try_acquire() noexcept\n+      {\n+\tauto __old = __atomic_impl::load(&_M_counter, memory_order::acquire);\n+\tauto const __pred = [this, __old]\n+\t  {\n+\t    if (__old == 0)\n+\t      return false;\n+\n+\t    auto __prev = __old;\n+\t    return __atomic_impl::compare_exchange_weak(&this->_M_counter,\n+\t\t      __prev, __prev - 1,\n+\t\t      memory_order::acquire,\n+\t\t      memory_order::release);\n+\t  };\n+\treturn std::__atomic_spin(__pred);\n+      }\n \n-\t_GLIBCXX_ALWAYS_INLINE void\n-\t_M_acquire() noexcept\n+      template<typename _Clock, typename _Duration>\n+\t_GLIBCXX_ALWAYS_INLINE bool\n+\t_M_try_acquire_until(const chrono::time_point<_Clock,\n+\t\t\t     _Duration>& __atime) noexcept\n \t{\n \t  auto const __pred = [this]\n \t    {\n@@ -193,51 +232,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      if (__old == 0)\n \t\treturn false;\n \t      return __atomic_impl::compare_exchange_strong(&this->_M_counter,\n-\t\t\t__old, __old - 1,\n-\t\t\tmemory_order::acquire,\n-\t\t\tmemory_order::release);\n-\t    };\n-\t  auto __old = __atomic_impl::load(&_M_counter, memory_order_relaxed);\n-\t  std::__atomic_wait(&_M_counter, __old, __pred);\n-\t}\n-\n-\tbool\n-\t_M_try_acquire() noexcept\n-\t{\n-\t  auto __old = __atomic_impl::load(&_M_counter, memory_order::acquire);\n-\t  auto const __pred = [this, __old]\n-\t    {\n-\t      if (__old == 0)\n-\t\treturn false;\n-\n-\t      auto __prev = __old;\n-\t      return __atomic_impl::compare_exchange_weak(&this->_M_counter,\n-\t\t\t__prev, __prev - 1,\n-\t\t\tmemory_order::acquire,\n-\t\t\tmemory_order::release);\n+\t\t\t      __old, __old - 1,\n+\t\t\t      memory_order::acquire,\n+\t\t\t      memory_order::release);\n \t    };\n-\t  return std::__atomic_spin(__pred);\n-\t}\n \n-\ttemplate<typename _Clock, typename _Duration>\n-\t  _GLIBCXX_ALWAYS_INLINE bool\n-\t  _M_try_acquire_until(const chrono::time_point<_Clock,\n-\t\t\t       _Duration>& __atime) noexcept\n-\t  {\n-\t    auto const __pred = [this]\n-\t      {\n-\t\tauto __old = __atomic_impl::load(&this->_M_counter,\n-\t\t\t\tmemory_order::acquire);\n-\t\tif (__old == 0)\n-\t\t  return false;\n-\t\treturn __atomic_impl::compare_exchange_strong(&this->_M_counter,\n-\t\t\t\t__old, __old - 1,\n-\t\t\t\tmemory_order::acquire,\n-\t\t\t\tmemory_order::release);\n-\t      };\n-\n-\t    auto __old = __atomic_impl::load(&_M_counter, memory_order_relaxed);\n-\t    return __atomic_wait_until(&_M_counter, __old, __pred, __atime);\n+\t  auto __old = __atomic_impl::load(&_M_counter, memory_order_relaxed);\n+\t  return __atomic_wait_until(&_M_counter, __old, __pred, __atime);\n \t}\n \n       template<typename _Rep, typename _Period>\n@@ -299,4 +300,5 @@ template<ptrdiff_t __least_max_value>\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n \n-#endif\n+#endif // GTHREADS || LINUX_FUTEX\n+#endif // _GLIBCXX_SEMAPHORE_BASE_H"}, {"sha": "fe4de244f8587885e1b2cb846cdabff002ffb838", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=183ae52b226898cc34aa51d4153cf0c006212a8a", "patch": "@@ -165,6 +165,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return _M_base.compare_exchange_strong(__i1, __i2, __m); }\n \n #if __cplusplus > 201703L\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n     void wait(bool __old, memory_order __m = memory_order_seq_cst) const\n       noexcept\n     { _M_base.wait(__old, __m); }\n@@ -176,6 +177,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     void notify_all() const noexcept\n     { _M_base.notify_all(); }\n+#endif // GTHREADS || LINUX_FUTEX\n #endif\n   };\n \n@@ -379,6 +381,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                                        __cmpexch_failure_order(__m)); }\n \n #if __cplusplus > 201703L\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n     void wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept\n     {\n       std::__atomic_wait(&_M_i, __old,\n@@ -399,7 +402,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     void notify_all() const noexcept\n     { std::__atomic_notify(&_M_i, true); }\n-#endif\n+#endif // GTHREADS || LINUX_FUTEX\n+#endif // C++20\n \n     };\n #undef _GLIBCXX20_INIT\n@@ -640,6 +644,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n #if __cplusplus > 201703L\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n     void wait(__pointer_type __old,\n \t      memory_order __m = memory_order_seq_cst) noexcept\n     { _M_b.wait(__old, __m); }\n@@ -651,6 +656,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     void notify_all() const noexcept\n     { _M_b.notify_all(); }\n+#endif // GTHREADS || LINUX_FUTEX\n #endif\n       __pointer_type\n       fetch_add(ptrdiff_t __d,\n@@ -1406,6 +1412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \n #if __cplusplus > 201703L\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n   template<typename _Tp>\n     inline void\n     atomic_wait(const atomic<_Tp>* __a,\n@@ -1429,6 +1436,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     atomic_notify_all(atomic<_Tp>* __a) noexcept\n     { __a->notify_all(); }\n \n+#endif // GTHREADS || LINUX_FUTEX\n #endif // C++2a\n \n   // Function templates for atomic_integral and atomic_pointer operations only."}, {"sha": "f4b83ab6ae3f3abc99d9b46ac4c97d2fda073bfb", "filename": "libstdc++-v3/include/std/semaphore", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsemaphore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsemaphore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsemaphore?ref=183ae52b226898cc34aa51d4153cf0c006212a8a", "patch": "@@ -32,14 +32,16 @@\n #pragma GCC system_header\n \n #if __cplusplus > 201703L\n-#define __cpp_lib_semaphore 201907L\n #include <bits/semaphore_base.h>\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n #include <ext/numeric_traits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#define __cpp_lib_semaphore 201907L\n+\n   template<ptrdiff_t __least_max_value =\n \t\t\t__gnu_cxx::__int_traits<ptrdiff_t>::__max>\n     class counting_semaphore\n@@ -88,5 +90,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n  using binary_semaphore = std::counting_semaphore<1>;\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n-#endif // __cplusplus > 201703L\n+#endif // GTHREADS || LINUX_FUTEX\n+#endif // C++20\n #endif // _GLIBCXX_SEMAPHORE"}, {"sha": "cf0454dbaf84feba56068cc07162f897234518d8", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183ae52b226898cc34aa51d4153cf0c006212a8a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=183ae52b226898cc34aa51d4153cf0c006212a8a", "patch": "@@ -226,7 +226,9 @@\n #if __cpp_lib_concepts\n # define __cpp_lib_ranges 201911L\n #endif\n-#define __cpp_lib_semaphore 201907L\n+#if defined _GLIBCXX_HAS_GTHREADS || _GLIBCXX_HAVE_LINUX_FUTEX\n+# define __cpp_lib_semaphore 201907L\n+#endif\n #define __cpp_lib_shift 201806L\n #if __cpp_lib_concepts\n # define __cpp_lib_span 202002L"}]}