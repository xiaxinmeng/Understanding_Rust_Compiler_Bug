{"sha": "c43cb355f25dd22133d15819bd6ec03d3d3939fd", "node_id": "C_kwDOANBUbNoAKGM0M2NiMzU1ZjI1ZGQyMjEzM2QxNTgxOWJkNmVjMDNkM2QzOTM5ZmQ", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-16T13:19:41Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-17T07:51:32Z"}, "message": "Enhance further testcases to verify Openacc 'kernels' decomposition\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc-gomp/nesting-1.c: Enhance.\n\t* c-c++-common/goacc/kernels-loop-g.c: Likewise.\n\t* c-c++-common/goacc/nesting-1.c: Likewise.\n\t* gcc.dg/goacc/nested-function-1.c: Likewise.\n\t* gfortran.dg/goacc/common-block-3.f90: Likewise.\n\t* gfortran.dg/goacc/nested-function-1.f90: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c:\n\tEnhance.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-loop-g.c: Likewise.\n\t* testsuite/libgomp.oacc-fortran/if-1.f90: Likewise.", "tree": {"sha": "05f793c6dfcf87707d0b4f59e80d14ae43f6c2c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05f793c6dfcf87707d0b4f59e80d14ae43f6c2c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c43cb355f25dd22133d15819bd6ec03d3d3939fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43cb355f25dd22133d15819bd6ec03d3d3939fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c43cb355f25dd22133d15819bd6ec03d3d3939fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c43cb355f25dd22133d15819bd6ec03d3d3939fd/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "004fc4f2fc686d3366c9e1a2d8b9183796073866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004fc4f2fc686d3366c9e1a2d8b9183796073866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004fc4f2fc686d3366c9e1a2d8b9183796073866"}], "stats": {"total": 151, "additions": 134, "deletions": 17}, "files": [{"sha": "51c5e359f29801006dcd5d7235d2d9b2762d59c0", "filename": "gcc/testsuite/c-c++-common/goacc-gomp/nesting-1.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc-gomp%2Fnesting-1.c?ref=c43cb355f25dd22133d15819bd6ec03d3d3939fd", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"--param=openacc-kernels=decompose\" }\n+\n /* { dg-additional-options \"-fopt-info-omp-note\" } */\n \n /* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n@@ -21,10 +23,11 @@ void\n f_acc_kernels (void)\n {\n #pragma acc kernels\n-  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-1 }\n-     { dg-note {variable 'i' ought to be adjusted for OpenACC privatization level: 'gang'} \"\" { target *-*-* } .-2 } */\n+  /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} \"\" { target *-*-* } .-1 } */\n   {\n     int i;\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} \"\" { target c } .+3 }\n+       { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} \"\" { target c++ } .+1 } */\n #pragma omp atomic write\n     i = 0;\n   }"}, {"sha": "5bdaa40b02c09c8429704d924ab6a67f2368b59c", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-g.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-g.c?ref=c43cb355f25dd22133d15819bd6ec03d3d3939fd", "patch": "@@ -1,5 +1,8 @@\n+/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-O2\" } */\n /* { dg-additional-options \"-g\" } */\n+/*TODO PR100400 { dg-additional-options -fcompare-debug } */\n /* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n /* { dg-additional-options \"-fdump-tree-optimized\" } */\n "}, {"sha": "8c3d1adc785d1e1ff3ae53263ec7977bd3ef5572", "filename": "gcc/testsuite/c-c++-common/goacc/nesting-1.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnesting-1.c?ref=c43cb355f25dd22133d15819bd6ec03d3d3939fd", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-fopt-info-all-omp\" } */\n \n /* { dg-additional-options \"--param=openacc-privatization=noisy\" } */\n@@ -32,11 +34,13 @@ void\n f_acc_kernels (void)\n {\n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {variable 'i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n   {\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n     /* { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n     /* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_i$c_loop_i } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n     for (i = 0; i < 2; ++i)\n       ;\n   }\n@@ -63,15 +67,17 @@ f_acc_data (void)\n     }\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } l_compute$c_compute } */\n     ;\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n     {\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n       /* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_i$c_loop_i } */\n+      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n       for (i = 0; i < 2; ++i)\n \t;\n     }\n@@ -102,15 +108,17 @@ f_acc_data (void)\n       }\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+      /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } l_compute$c_compute } */\n       ;\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+      /* { dg-note {variable 'i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n       {\n #pragma acc loop /* { dg-line l_loop_i[incr c_loop_i] } */\n+\t/* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_loop_i$c_loop_i } */\n \t/* { dg-note {variable 'i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_i$c_loop_i } */\n \t/* { dg-note {variable 'i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_i$c_loop_i } */\n+\t/* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_i$c_loop_i } */\n \tfor (i = 0; i < 2; ++i)\n \t  ;\n       }"}, {"sha": "2e48410b39dfb4e7c5eaa365074a125a4a823792", "filename": "gcc/testsuite/gcc.dg/goacc/nested-function-1.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-1.c?ref=c43cb355f25dd22133d15819bd6ec03d3d3939fd", "patch": "@@ -2,6 +2,8 @@\n /* See gcc/testsuite/gfortran.dg/goacc/nested-function-1.f90 for the Fortran\n    version.  */\n \n+/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-fopt-info-all-omp\" } */\n \n /* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n@@ -42,6 +44,11 @@ int main ()\n #pragma acc kernels loop /* { dg-line l_compute_loop[incr c_compute_loop] } */ \\\n   gang(num:local_arg) worker(local_arg) vector(local_arg) \\\n   wait async(local_arg)\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'local_arg' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+       { dg-note {variable 'local_arg' made addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {variable 'local_arg\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {variable 'local_i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     /* { dg-note {variable 'local_i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     for (local_i = 0; local_i < N; ++local_i)\n@@ -61,6 +68,11 @@ int main ()\n #pragma acc kernels loop /* { dg-line l_compute_loop[incr c_compute_loop] } */ \\\n   gang(static:local_arg) worker(local_arg) vector(local_arg) \\\n   wait(local_arg, local_arg + 1, local_arg + 2) async\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'local_arg' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+       { dg-note {variable 'local_arg' already made addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {variable 'local_arg\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {variable 'local_i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     /* { dg-note {variable 'local_i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     for (local_i = 0; local_i < N; ++local_i)\n@@ -87,6 +99,11 @@ int main ()\n #pragma acc kernels loop /* { dg-line l_compute_loop[incr c_compute_loop] } */ \\\n   gang(num:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) \\\n   wait async(nonlocal_arg)\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'nonlocal_arg' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+       { dg-note {variable 'nonlocal_arg' made addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {variable 'nonlocal_arg\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {variable 'nonlocal_i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     /* { dg-note {variable 'nonlocal_i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     for (nonlocal_i = 0; nonlocal_i < N; ++nonlocal_i)\n@@ -106,6 +123,11 @@ int main ()\n #pragma acc kernels loop /* { dg-line l_compute_loop[incr c_compute_loop] } */ \\\n   gang(static:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) \\\n   wait(nonlocal_arg, nonlocal_arg + 1, nonlocal_arg + 2) async\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'nonlocal_arg' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+       { dg-note {variable 'nonlocal_arg' already made addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {variable 'nonlocal_arg\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n+    /* { dg-note {variable 'nonlocal_i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     /* { dg-note {variable 'nonlocal_i' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute_loop$c_compute_loop } */\n     for (nonlocal_i = 0; nonlocal_i < N; ++nonlocal_i)"}, {"sha": "6f08d7eb8d5b60ae29bba0b4a39d9164596b132d", "filename": "gcc/testsuite/gfortran.dg/goacc/common-block-3.f90", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-3.f90?ref=c43cb355f25dd22133d15819bd6ec03d3d3939fd", "patch": "@@ -1,5 +1,7 @@\n ! { dg-options \"-fopenacc -fdump-tree-omplower\" }\n \n+! { dg-additional-options \"--param=openacc-kernels=decompose\" }\n+\n ! { dg-additional-options \"-fopt-info-omp-all\" }\n \n ! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n@@ -28,7 +30,11 @@ program main\n      a(i) = b(i) + c\n   end do\n   !$acc kernels ! { dg-line l2 }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l2 }\n+  !   { dg-note {variable 'i' made addressable} {} { target *-*-* } l2 }\n+  ! { dg-note {variable 'c\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l2 }\n   ! { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l2 }\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 }\n   do i = 1, n\n      x(i) = y(i) + c\n   end do\n@@ -39,10 +45,14 @@ end program main\n ! { dg-final { scan-tree-dump-times \"omp target oacc_parallel .*map\\\\(tofrom:b \\\\\\[len: 400\\\\\\]\\\\\\)\" 1 \"omplower\" } }\n ! { dg-final { scan-tree-dump-times \"omp target oacc_parallel .*map\\\\(tofrom:c \\\\\\[len: 4\\\\\\]\\\\)\" 1 \"omplower\" } }\n \n-! { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(force_tofrom:i \\\\\\[len: 4\\\\\\]\\\\)\" 1 \"omplower\" } }\n-! { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(tofrom:x \\\\\\[len: 400\\\\\\]\\\\)\" 1 \"omplower\" } }\n-! { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(tofrom:y \\\\\\[len: 400\\\\\\]\\\\\\)\" 1 \"omplower\" } }\n-! { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(force_tofrom:c \\\\\\[len: 4\\\\\\]\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"omp target oacc_data_kernels .*map\\\\(force_tofrom:i \\\\\\[len: 4\\\\\\]\\\\)\" 1 \"omplower\" } }\n+!   { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(force_present:i \\\\\\[len: 4\\\\\\]\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"omp target oacc_data_kernels .*map\\\\(tofrom:x \\\\\\[len: 400\\\\\\]\\\\)\" 1 \"omplower\" } }\n+!   { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(force_present:x \\\\\\[len: 400\\\\\\]\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"omp target oacc_data_kernels .*map\\\\(tofrom:y \\\\\\[len: 400\\\\\\]\\\\\\)\" 1 \"omplower\" } }\n+!   { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(force_present:y \\\\\\[len: 400\\\\\\]\\\\\\)\" 1 \"omplower\" } }\n+! { dg-final { scan-tree-dump-times \"omp target oacc_data_kernels .*map\\\\(force_tofrom:c \\\\\\[len: 4\\\\\\]\\\\)\" 1 \"omplower\" } }\n+!   { dg-final { scan-tree-dump-times \"omp target oacc_kernels .*map\\\\(force_present:c \\\\\\[len: 4\\\\\\]\\\\)\" 1 \"omplower\" } }\n \n ! Expecting no mapping of un-referenced common-blocks variables\n "}, {"sha": "c631f90b27f70eddd64010ac1b68760061282c1c", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-function-1.f90", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-function-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43cb355f25dd22133d15819bd6ec03d3d3939fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-function-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-function-1.f90?ref=c43cb355f25dd22133d15819bd6ec03d3d3939fd", "patch": "@@ -1,6 +1,8 @@\n ! Exercise nested function decomposition, gcc/tree-nested.c.\n ! See gcc/testsuite/gcc.dg/goacc/nested-function-1.c for the C version.\n \n+! { dg-additional-options \"--param=openacc-kernels=decompose\" }\n+\n ! { dg-additional-options \"-fopt-info-all-omp\" }\n \n ! { dg-additional-options \"--param=openacc-privatization=noisy\" }\n@@ -44,6 +46,8 @@ subroutine local ()\n     !$acc kernels loop &\n     !$acc gang(num:local_arg) worker(local_arg) vector(local_arg) &\n     !$acc wait async(local_arg) ! { dg-line l_compute_loop[incr c_compute_loop] }\n+    ! { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'local_i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'local_i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'local_i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n@@ -65,6 +69,8 @@ subroutine local ()\n     !$acc kernels loop &\n     !$acc gang(static:local_arg) worker(local_arg) vector(local_arg) &\n     !$acc wait(local_arg, local_arg + 1, local_arg + 2) async ! { dg-line l_compute_loop[incr c_compute_loop] }\n+    ! { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'local_i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'local_i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'local_i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n@@ -95,6 +101,8 @@ subroutine nonlocal ()\n     !$acc kernels loop &\n     !$acc gang(num:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) &\n     !$acc wait async(nonlocal_arg) ! { dg-line l_compute_loop[incr c_compute_loop] }\n+    ! { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'nonlocal_i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'nonlocal_i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'nonlocal_i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n@@ -116,6 +124,8 @@ subroutine nonlocal ()\n     !$acc kernels loop &\n     !$acc gang(static:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) &\n     !$acc wait(nonlocal_arg, nonlocal_arg + 1, nonlocal_arg + 2) async ! { dg-line l_compute_loop[incr c_compute_loop] }\n+    ! { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } l_compute_loop$c_compute_loop }\n+    ! { dg-note {variable 'nonlocal_i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'nonlocal_i' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'nonlocal_i\\.[0-9]+' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }\n     ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute_loop$c_compute_loop }"}, {"sha": "2c8539714740ed7d1bba0504d23cc96b74730e67", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/acc_prof-kernels-1.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43cb355f25dd22133d15819bd6ec03d3d3939fd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43cb355f25dd22133d15819bd6ec03d3d3939fd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Facc_prof-kernels-1.c?ref=c43cb355f25dd22133d15819bd6ec03d3d3939fd", "patch": "@@ -1,5 +1,7 @@\n /* Test dispatch of events to callbacks.  */\n \n+/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-fopt-info-omp-all\" }\n    { dg-additional-options \"-foffload=-fopt-info-omp-all\" } */\n \n@@ -74,7 +76,7 @@ static void cb_enqueue_launch_start (acc_prof_info *prof_info, acc_event_info *e\n   assert (prof_info->device_type == acc_device_type);\n   assert (prof_info->device_number == acc_device_num);\n   assert (prof_info->thread_id == -1);\n-  assert (prof_info->async == acc_async_sync);\n+  assert (prof_info->async == acc_async_noval);\n   assert (prof_info->async_queue == prof_info->async);\n   assert (prof_info->src_file == NULL);\n   assert (prof_info->func_name == NULL);\n@@ -181,10 +183,13 @@ int main()\n #define N 100\n     int x[N];\n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n        { dg-optimized {assigned OpenACC gang loop parallelism} {} { target __OPTIMIZE__ } l_compute$c_compute } */\n     {\n+      /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n       for (int i = 0; i < N; ++i)\n \tx[i] = i * i;\n     }\n@@ -208,11 +213,14 @@ int main()\n     int x[N];\n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */ \\\n   num_gangs (30) num_workers (3) vector_length (5)\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n     /* { dg-warning {using 'vector_length \\(32\\)', ignoring 5} {} { target { __OPTIMIZE__ && openacc_nvidia_accel_selected } } l_compute$c_compute } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n        { dg-optimized {assigned OpenACC gang loop parallelism} {} { target __OPTIMIZE__ } l_compute$c_compute } */\n     {\n+      /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n       for (int i = 0; i < N; ++i)\n \tx[i] = i * i;\n     }\n@@ -236,11 +244,14 @@ int main()\n     int x[N];\n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */ \\\n   num_gangs (num_gangs) num_workers (num_workers) vector_length (vector_length)\n-    /* { dg-note {variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n     /* { dg-warning {using 'vector_length \\(32\\)', ignoring runtime setting} {} { target { __OPTIMIZE__ && openacc_nvidia_accel_selected } } l_compute$c_compute } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n        { dg-optimized {assigned OpenACC gang loop parallelism} {} { target __OPTIMIZE__ } l_compute$c_compute } */\n     {\n+      /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n       for (int i = 0; i < N; ++i)\n \tx[i] = i * i;\n     }"}, {"sha": "e513946ea718041ef1e17a2ee858a672df3bb5c7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-loop-g.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43cb355f25dd22133d15819bd6ec03d3d3939fd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43cb355f25dd22133d15819bd6ec03d3d3939fd/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-loop-g.c?ref=c43cb355f25dd22133d15819bd6ec03d3d3939fd", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-g\" } */\n+/*TODO PR100400 { dg-additional-options -fcompare-debug } */\n \n #include \"kernels-loop.c\""}, {"sha": "c6d67647d4a4f8ae49d1c4a3113e12a8cd730867", "filename": "libgomp/testsuite/libgomp.oacc-fortran/if-1.f90", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c43cb355f25dd22133d15819bd6ec03d3d3939fd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c43cb355f25dd22133d15819bd6ec03d3d3939fd/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fif-1.f90?ref=c43cb355f25dd22133d15819bd6ec03d3d3939fd", "patch": "@@ -1,6 +1,8 @@\n ! { dg-do run }\n ! { dg-additional-options \"-cpp\" }\n \n+! { dg-additional-options \"--param=openacc-kernels=decompose\" }\n+\n ! { dg-additional-options \"-fopt-info-note-omp\" }\n ! { dg-additional-options \"-foffload=-fopt-info-note-omp\" }\n \n@@ -490,6 +492,9 @@ program main\n   a(:) = 4.0\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (1 == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n      do i = 1, N\n         ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n         if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -513,6 +518,9 @@ program main\n   a(:) = 16.0\n \n   !$acc kernels if (0 == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n      do i = 1, N\n         ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n        if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -530,6 +538,9 @@ program main\n   a(:) = 8.0\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (one == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -553,6 +564,9 @@ program main\n   a(:) = 22.0\n \n   !$acc kernels if (zero == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -570,6 +584,9 @@ program main\n   a(:) = 16.0\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (.TRUE.) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -593,6 +610,9 @@ program main\n   a(:) = 76.0\n \n   !$acc kernels if (.FALSE.) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -612,6 +632,9 @@ program main\n   nn = 1\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (nn == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -637,6 +660,9 @@ program main\n   nn = 0\n \n   !$acc kernels if (nn == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -656,6 +682,9 @@ program main\n   nn = 1\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -681,6 +710,9 @@ program main\n   nn = 0;\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if ((nn + nn) > 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -698,6 +730,9 @@ program main\n   a(:) = 91.0\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (-2 > 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -715,6 +750,9 @@ program main\n   a(:) = 43.0\n \n   !$acc kernels copyin (a(1:N)) copyout (b(1:N)) if (one == 1) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n        ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -738,6 +776,9 @@ program main\n   a(:) = 87.0\n \n   !$acc kernels if (one == 0) ! { dg-line l_compute[incr c_compute] }\n+  ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+  !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n     do i = 1, N\n       ! { dg-note {variable 'C\\.[0-9]+' declared in block potentially has improper OpenACC privatization level: 'const_decl'} \"TODO\" { target *-*-* } l_compute$c_compute }\n       if (acc_on_device (acc_device_host) .eqv. .TRUE.) then\n@@ -818,7 +859,10 @@ program main\n   !$acc data copyin (a(1:N)) copyout (b(1:N)) if (1 == 1)\n   ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n \n-    !$acc kernels present (a(1:N))\n+    !$acc kernels present (a(1:N)) ! { dg-line l_compute[incr c_compute] }\n+    ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+    !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n        do i = 1, N\n            b(i) = a(i)\n        end do\n@@ -862,7 +906,10 @@ program main\n         !$acc data copyout (b(1:N)) if (1 == 1)\n         ! { dg-note {variable 'parm\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} \"\" { target *-*-* } .-1 }\n \n-        !$acc kernels present (a(1:N)) present (b(1:N))\n+        !$acc kernels present (a(1:N)) present (b(1:N)) ! { dg-line l_compute[incr c_compute] }\n+        ! { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+        !   { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+        ! { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} \"\" { target *-*-* } .+1 }\n           do i = 1, N\n             b(i) = a(i)\n           end do"}]}