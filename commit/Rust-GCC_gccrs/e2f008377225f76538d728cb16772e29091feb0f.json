{"sha": "e2f008377225f76538d728cb16772e29091feb0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJmMDA4Mzc3MjI1Zjc2NTM4ZDcyOGNiMTY3NzJlMjkwOTFmZWIwZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-08-23T15:51:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-08-23T15:51:45Z"}, "message": "re PR middle-end/50161 (wrong code with -fno-tree-ter and __builtin_popcountl)\n\n\tPR middle-end/50161\n\t* simplify-rtx.c (simplify_const_unary_operation): If\n\top is CONST_INT, don't look at op_mode, but use instead\n\tmode.\n\t* optabs.c (add_equal_note): For FFS, CLZ, CTZ,\n\tCLRSB, POPCOUNT, PARITY and BSWAP use operand mode for\n\toperation and TRUNCATE/ZERO_EXTEND if needed.\n\t* doc/rtl.texi (ffs, clrsb, clz, ctz, popcount, parity, bswap):\n\tDocument that operand mode must be same as operation mode,\n\tor VOIDmode.\n\t* config/avr/avr.md (paritysi2, *parityqihi2.libgcc,\n\t*paritysihi2.libgcc, popcountsi2, *popcountsi2.libgcc,\n\t*popcountqihi2.libgcc, clzsi2, *clzsihi2.libgcc, ctzsi2,\n\t*ctzsihi2.libgcc, ffssi2, *ffssihi2.libgcc): For unary ops\n\tuse the mode of operand for the operation and add truncate\n\tor zero_extend around if needed.\n\t* config/c6x/c6x.md (ctzdi2): Likewise.\n\t* config/bfin/bfin.md (clrsbsi2, signbitssi2): Likewise.\n\n\t* gcc.dg/pr50161.c: New test.\n\nFrom-SVN: r177991", "tree": {"sha": "62fb2f1d429ec029087fc74ce2fd3609e593cd39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62fb2f1d429ec029087fc74ce2fd3609e593cd39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2f008377225f76538d728cb16772e29091feb0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f008377225f76538d728cb16772e29091feb0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2f008377225f76538d728cb16772e29091feb0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2f008377225f76538d728cb16772e29091feb0f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e70e0b60724694c40064580368e5b93aae951842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70e0b60724694c40064580368e5b93aae951842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e70e0b60724694c40064580368e5b93aae951842"}], "stats": {"total": 157, "additions": 114, "deletions": 43}, "files": [{"sha": "6007136d81e4c2f1a16aaaf7f615f6da759f6f65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f008377225f76538d728cb16772e29091feb0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f008377225f76538d728cb16772e29091feb0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2f008377225f76538d728cb16772e29091feb0f", "patch": "@@ -1,3 +1,24 @@\n+2011-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/50161\n+\t* simplify-rtx.c (simplify_const_unary_operation): If\n+\top is CONST_INT, don't look at op_mode, but use instead\n+\tmode.\n+\t* optabs.c (add_equal_note): For FFS, CLZ, CTZ,\n+\tCLRSB, POPCOUNT, PARITY and BSWAP use operand mode for\n+\toperation and TRUNCATE/ZERO_EXTEND if needed.\n+\t* doc/rtl.texi (ffs, clrsb, clz, ctz, popcount, parity, bswap):\n+\tDocument that operand mode must be same as operation mode,\n+\tor VOIDmode.\n+\t* config/avr/avr.md (paritysi2, *parityqihi2.libgcc,\n+\t*paritysihi2.libgcc, popcountsi2, *popcountsi2.libgcc,\n+\t*popcountqihi2.libgcc, clzsi2, *clzsihi2.libgcc, ctzsi2,\n+\t*ctzsihi2.libgcc, ffssi2, *ffssihi2.libgcc): For unary ops\n+\tuse the mode of operand for the operation and add truncate\n+\tor zero_extend around if needed.\n+\t* config/c6x/c6x.md (ctzdi2): Likewise.\n+\t* config/bfin/bfin.md (clrsbsi2, signbitssi2): Likewise.\n+\n 2011-08-12  Michael Matz  <matz@suse.de>\n \n \t* cfgexpand.c (expand_one_register_var): Use get_pointer_alignment."}, {"sha": "35414539ea2079dbd29787d8b84c0388db8f671e", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=e2f008377225f76538d728cb16772e29091feb0f", "patch": "@@ -1,7 +1,7 @@\n ;;   Machine description for GNU compiler,\n ;;   for ATMEL AVR micro controllers.\n ;;   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008,\n-;;   2009, 2010 Free Software Foundation, Inc.\n+;;   2009, 2010, 2011 Free Software Foundation, Inc.\n ;;   Contributed by Denis Chertykov (chertykov@gmail.com)\n \n ;; This file is part of GCC.\n@@ -4124,7 +4124,7 @@\n   [(set (reg:SI 22)\n         (match_operand:SI 1 \"register_operand\" \"\"))\n    (set (reg:HI 24)\n-        (parity:HI (reg:SI 22)))\n+\t(truncate:HI (parity:SI (reg:SI 22))))\n    (set (match_dup 2)\n         (reg:HI 24))\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -4144,15 +4144,15 @@\n \n (define_insn \"*parityqihi2.libgcc\"\n   [(set (reg:HI 24)\n-        (parity:HI (reg:QI 24)))]\n+\t(zero_extend:HI (parity:QI (reg:QI 24))))]\n   \"\"\n   \"%~call __parityqi2\"\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"*paritysihi2.libgcc\"\n   [(set (reg:HI 24)\n-        (parity:HI (reg:SI 22)))]\n+\t(truncate:HI (parity:SI (reg:SI 22))))]\n   \"\"\n   \"%~call __paritysi2\"\n   [(set_attr \"type\" \"xcall\")\n@@ -4175,7 +4175,7 @@\n   [(set (reg:SI 22)\n         (match_operand:SI 1 \"register_operand\" \"\"))\n    (set (reg:HI 24)\n-        (popcount:HI (reg:SI 22)))\n+\t(truncate:HI (popcount:SI (reg:SI 22))))\n    (set (match_dup 2)\n         (reg:HI 24))\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -4195,7 +4195,7 @@\n \n (define_insn \"*popcountsi2.libgcc\"\n   [(set (reg:HI 24)\n-        (popcount:HI (reg:SI 22)))]\n+\t(truncate:HI (popcount:SI (reg:SI 22))))]\n   \"\"\n   \"%~call __popcountsi2\"\n   [(set_attr \"type\" \"xcall\")\n@@ -4211,7 +4211,7 @@\n \n (define_insn_and_split \"*popcountqihi2.libgcc\"\n   [(set (reg:HI 24)\n-        (popcount:HI (reg:QI 24)))]\n+\t(zero_extend:HI (popcount:QI (reg:QI 24))))]\n   \"\"\n   \"#\"\n   \"\"\n@@ -4238,7 +4238,7 @@\n   [(set (reg:SI 22)\n         (match_operand:SI 1 \"register_operand\" \"\"))\n    (parallel [(set (reg:HI 24)\n-                   (clz:HI (reg:SI 22)))\n+\t\t   (truncate:HI (clz:SI (reg:SI 22))))\n               (clobber (reg:QI 26))])\n    (set (match_dup 2)\n         (reg:HI 24))\n@@ -4260,7 +4260,7 @@\n \n (define_insn \"*clzsihi2.libgcc\"\n   [(set (reg:HI 24)\n-        (clz:HI (reg:SI 22)))\n+\t(truncate:HI (clz:SI (reg:SI 22))))\n    (clobber (reg:QI 26))]\n   \"\"\n   \"%~call __clzsi2\"\n@@ -4284,7 +4284,7 @@\n   [(set (reg:SI 22)\n         (match_operand:SI 1 \"register_operand\" \"\"))\n    (parallel [(set (reg:HI 24)\n-                   (ctz:HI (reg:SI 22)))\n+\t\t   (truncate:HI (ctz:SI (reg:SI 22))))\n               (clobber (reg:QI 22))\n               (clobber (reg:QI 26))])\n    (set (match_dup 2)\n@@ -4307,7 +4307,7 @@\n \n (define_insn \"*ctzsihi2.libgcc\"\n   [(set (reg:HI 24)\n-        (ctz:HI (reg:SI 22)))\n+\t(truncate:HI (ctz:SI (reg:SI 22))))\n    (clobber (reg:QI 22))\n    (clobber (reg:QI 26))]\n   \"\"\n@@ -4332,7 +4332,7 @@\n   [(set (reg:SI 22)\n         (match_operand:SI 1 \"register_operand\" \"\"))\n    (parallel [(set (reg:HI 24)\n-                   (ffs:HI (reg:SI 22)))\n+\t\t   (truncate:HI (ffs:SI (reg:SI 22))))\n               (clobber (reg:QI 22))\n               (clobber (reg:QI 26))])\n    (set (match_dup 2)\n@@ -4355,7 +4355,7 @@\n \n (define_insn \"*ffssihi2.libgcc\"\n   [(set (reg:HI 24)\n-        (ffs:HI (reg:SI 22)))\n+\t(truncate:HI (ffs:SI (reg:SI 22))))\n    (clobber (reg:QI 22))\n    (clobber (reg:QI 26))]\n   \"\""}, {"sha": "9c8d4c26d3e88b743db11d29999ea90ea77bc9d2", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=e2f008377225f76538d728cb16772e29091feb0f", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for Blackfin for GNU compiler\n-;;  Copyright 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+;;  Copyright 2005, 2006, 2007, 2008, 2011 Free Software Foundation, Inc.\n ;;  Contributed by Analog Devices.\n \n ;; This file is part of GCC.\n@@ -1463,7 +1463,7 @@\n \n (define_expand \"clrsbsi2\"\n   [(set (match_dup 2)\n-\t(clrsb:HI (match_operand:SI 1 \"register_operand\" \"d\")))\n+\t(truncate:HI (clrsb:SI (match_operand:SI 1 \"register_operand\" \"d\"))))\n    (set (match_operand:SI 0 \"register_operand\")\n \t(zero_extend:SI (match_dup 2)))]\n   \"\"\n@@ -1473,7 +1473,7 @@\n \n (define_insn \"signbitssi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(clrsb:HI (match_operand:SI 1 \"register_operand\" \"d\")))]\n+\t(truncate:HI (clrsb:SI (match_operand:SI 1 \"register_operand\" \"d\"))))]\n   \"\"\n   \"%h0 = signbits %1%!\"\n   [(set_attr \"type\" \"dsp32\")])"}, {"sha": "4554cd081303e891e747071d9999045700ac9535", "filename": "gcc/config/c6x/c6x.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Fconfig%2Fc6x%2Fc6x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Fconfig%2Fc6x%2Fc6x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.md?ref=e2f008377225f76538d728cb16772e29091feb0f", "patch": "@@ -2014,7 +2014,7 @@\n \n (define_expand \"ctzdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(ctz:SI (match_operand:DI 1 \"register_operand\" \"\")))]\n+\t(ctz:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n   \"TARGET_INSNS_64\"\n {\n   rtx tmpreg = gen_reg_rtx (DImode);"}, {"sha": "b5cb285110d7949f1d79580d3dc300641ff0c16a", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=e2f008377225f76538d728cb16772e29091feb0f", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1994, 1997, 1998, 1999, 2000, 2001, 2002,\n-@c 2003, 2004, 2005, 2006, 2007, 2008, 2010\n+@c 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011\n @c Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n@@ -2408,17 +2408,16 @@ Most often @var{m} will be a floating point mode.\n @item (ffs:@var{m} @var{x})\n Represents one plus the index of the least significant 1-bit in\n @var{x}, represented as an integer of mode @var{m}.  (The value is\n-zero if @var{x} is zero.)  The mode of @var{x} need not be @var{m};\n-depending on the target machine, various mode combinations may be\n-valid.\n+zero if @var{x} is zero.)  The mode of @var{x} must be @var{m}\n+or @code{VOIDmode}.\n \n @findex clrsb\n @item (clrsb:@var{m} @var{x})\n Represents the number of redundant leading sign bits in @var{x},\n represented as an integer of mode @var{m}, starting at the most\n significant bit position.  This is one less than the number of leading\n sign bits (either 0 or 1), with no special cases.  The mode of @var{x}\n-will usually be an integer mode and may differ from @var{m}.\n+must be @var{m} or @code{VOIDmode}.\n \n @findex clz\n @item (clz:@var{m} @var{x})\n@@ -2427,7 +2426,7 @@ integer of mode @var{m}, starting at the most significant bit position.\n If @var{x} is zero, the value is determined by\n @code{CLZ_DEFINED_VALUE_AT_ZERO} (@pxref{Misc}).  Note that this is one of\n the few expressions that is not invariant under widening.  The mode of\n-@var{x} will usually be an integer mode.\n+@var{x} must be @var{m} or @code{VOIDmode}.\n \n @findex ctz\n @item (ctz:@var{m} @var{x})\n@@ -2436,23 +2435,24 @@ integer of mode @var{m}, starting at the least significant bit position.\n If @var{x} is zero, the value is determined by\n @code{CTZ_DEFINED_VALUE_AT_ZERO} (@pxref{Misc}).  Except for this case,\n @code{ctz(x)} is equivalent to @code{ffs(@var{x}) - 1}.  The mode of\n-@var{x} will usually be an integer mode.\n+@var{x} must be @var{m} or @code{VOIDmode}.\n \n @findex popcount\n @item (popcount:@var{m} @var{x})\n Represents the number of 1-bits in @var{x}, represented as an integer of\n-mode @var{m}.  The mode of @var{x} will usually be an integer mode.\n+mode @var{m}.  The mode of @var{x} must be @var{m} or @code{VOIDmode}.\n \n @findex parity\n @item (parity:@var{m} @var{x})\n Represents the number of 1-bits modulo 2 in @var{x}, represented as an\n-integer of mode @var{m}.  The mode of @var{x} will usually be an integer\n-mode.\n+integer of mode @var{m}.  The mode of @var{x} must be @var{m} or\n+@code{VOIDmode}.\n \n @findex bswap\n @item (bswap:@var{m} @var{x})\n Represents the value @var{x} with the order of bytes reversed, carried out\n in mode @var{m}, which must be a fixed-point machine mode.\n+The mode of @var{x} must be @var{m} or @code{VOIDmode}.\n @end table\n \n @node Comparisons"}, {"sha": "886b259ce3472c94e0f9efb4ef2386eefcceb135", "filename": "gcc/optabs.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=e2f008377225f76538d728cb16772e29091feb0f", "patch": "@@ -216,7 +216,32 @@ add_equal_note (rtx insns, rtx target, enum rtx_code code, rtx op0, rtx op1)\n     }\n \n   if (GET_RTX_CLASS (code) == RTX_UNARY)\n-    note = gen_rtx_fmt_e (code, GET_MODE (target), copy_rtx (op0));\n+    switch (code)\n+      {\n+      case FFS:\n+      case CLZ:\n+      case CTZ:\n+      case CLRSB:\n+      case POPCOUNT:\n+      case PARITY:\n+      case BSWAP:\n+\tif (GET_MODE (op0) != VOIDmode && GET_MODE (target) != GET_MODE (op0))\n+\t  {\n+\t    note = gen_rtx_fmt_e (code, GET_MODE (op0), copy_rtx (op0));\n+\t    if (GET_MODE_SIZE (GET_MODE (op0))\n+\t\t> GET_MODE_SIZE (GET_MODE (target)))\n+\t      note = simplify_gen_unary (TRUNCATE, GET_MODE (target),\n+\t\t\t\t\t note, GET_MODE (op0));\n+\t    else\n+\t      note = simplify_gen_unary (ZERO_EXTEND, GET_MODE (target),\n+\t\t\t\t\t note, GET_MODE (op0));\n+\t    break;\n+\t  }\n+\t/* FALLTHRU */\n+      default:\n+\tnote = gen_rtx_fmt_e (code, GET_MODE (target), copy_rtx (op0));\n+\tbreak;\n+      }\n   else\n     note = gen_rtx_fmt_ee (code, GET_MODE (target), copy_rtx (op0), copy_rtx (op1));\n "}, {"sha": "ef5ea1aac33f45850aa0e6e9c77a9b26d3f0ed85", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=e2f008377225f76538d728cb16772e29091feb0f", "patch": "@@ -1373,8 +1373,7 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n     }\n \n   if (CONST_INT_P (op)\n-      && width <= HOST_BITS_PER_WIDE_INT\n-      && op_width <= HOST_BITS_PER_WIDE_INT && op_width > 0)\n+      && width <= HOST_BITS_PER_WIDE_INT && width > 0)\n     {\n       HOST_WIDE_INT arg0 = INTVAL (op);\n       HOST_WIDE_INT val;\n@@ -1394,50 +1393,50 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n \t  break;\n \n \tcase FFS:\n-\t  arg0 &= GET_MODE_MASK (op_mode);\n+\t  arg0 &= GET_MODE_MASK (mode);\n \t  val = ffs_hwi (arg0);\n \t  break;\n \n \tcase CLZ:\n-\t  arg0 &= GET_MODE_MASK (op_mode);\n-\t  if (arg0 == 0 && CLZ_DEFINED_VALUE_AT_ZERO (op_mode, val))\n+\t  arg0 &= GET_MODE_MASK (mode);\n+\t  if (arg0 == 0 && CLZ_DEFINED_VALUE_AT_ZERO (mode, val))\n \t    ;\n \t  else\n-\t    val = GET_MODE_PRECISION (op_mode) - floor_log2 (arg0) - 1;\n+\t    val = GET_MODE_PRECISION (mode) - floor_log2 (arg0) - 1;\n \t  break;\n \n \tcase CLRSB:\n-\t  arg0 &= GET_MODE_MASK (op_mode);\n+\t  arg0 &= GET_MODE_MASK (mode);\n \t  if (arg0 == 0)\n-\t    val = GET_MODE_PRECISION (op_mode) - 1;\n+\t    val = GET_MODE_PRECISION (mode) - 1;\n \t  else if (arg0 >= 0)\n-\t    val = GET_MODE_PRECISION (op_mode) - floor_log2 (arg0) - 2;\n+\t    val = GET_MODE_PRECISION (mode) - floor_log2 (arg0) - 2;\n \t  else if (arg0 < 0)\n-\t    val = GET_MODE_PRECISION (op_mode) - floor_log2 (~arg0) - 2;\n+\t    val = GET_MODE_PRECISION (mode) - floor_log2 (~arg0) - 2;\n \t  break;\n \n \tcase CTZ:\n-\t  arg0 &= GET_MODE_MASK (op_mode);\n+\t  arg0 &= GET_MODE_MASK (mode);\n \t  if (arg0 == 0)\n \t    {\n \t      /* Even if the value at zero is undefined, we have to come\n \t\t up with some replacement.  Seems good enough.  */\n-\t      if (! CTZ_DEFINED_VALUE_AT_ZERO (op_mode, val))\n-\t\tval = GET_MODE_PRECISION (op_mode);\n+\t      if (! CTZ_DEFINED_VALUE_AT_ZERO (mode, val))\n+\t\tval = GET_MODE_PRECISION (mode);\n \t    }\n \t  else\n \t    val = ctz_hwi (arg0);\n \t  break;\n \n \tcase POPCOUNT:\n-\t  arg0 &= GET_MODE_MASK (op_mode);\n+\t  arg0 &= GET_MODE_MASK (mode);\n \t  val = 0;\n \t  while (arg0)\n \t    val++, arg0 &= arg0 - 1;\n \t  break;\n \n \tcase PARITY:\n-\t  arg0 &= GET_MODE_MASK (op_mode);\n+\t  arg0 &= GET_MODE_MASK (mode);\n \t  val = 0;\n \t  while (arg0)\n \t    val++, arg0 &= arg0 - 1;"}, {"sha": "5eb38dec77a8a9f743ce1024b3afaf31ce2c0171", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2f008377225f76538d728cb16772e29091feb0f", "patch": "@@ -1,3 +1,8 @@\n+2011-08-23  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/50161\n+\t* gcc.dg/pr50161.c: New test.\n+\n 2011-08-23  Siddhesh Poyarekar  <siddhesh.poyarekar@gmail.com>\n \n \tPR c++/50055"}, {"sha": "b76ff9a0c72f8a77e7a385fbd57654cedc4936a7", "filename": "gcc/testsuite/gcc.dg/pr50161.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50161.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2f008377225f76538d728cb16772e29091feb0f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50161.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50161.c?ref=e2f008377225f76538d728cb16772e29091feb0f", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/50161 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-tree-ter -funroll-loops\" } */\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+  unsigned i;\n+  unsigned long a[16];\n+\n+  for (i = 0; i < 16; i++)\n+    a[i] = ~0UL;\n+\n+  for (i = 0; i < 16; i++)\n+    if (__builtin_popcountl (a[i]) != sizeof (a[i]) * 8)\n+      abort ();\n+\n+  return 0;\n+}"}]}