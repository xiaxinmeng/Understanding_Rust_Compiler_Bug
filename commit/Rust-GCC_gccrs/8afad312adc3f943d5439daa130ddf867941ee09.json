{"sha": "8afad312adc3f943d5439daa130ddf867941ee09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFmYWQzMTJhZGMzZjk0M2Q1NDM5ZGFhMTMwZGRmODY3OTQxZWUwOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-07-06T18:20:43Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-07-06T18:20:43Z"}, "message": "(struct nesting): Add new field alt_end_label.\n\n(expand_start_loop): Initialize it to zero.\n(expand_end_loop): Reorder loop if find either a jump to end_label\nor a jump to alt_end_label.\n(expand_exit_loop_if_false): Set alt_end_label.\n\nFrom-SVN: r7664", "tree": {"sha": "9c4ee0a811733c81ca4e8176fd7d421cd170e692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c4ee0a811733c81ca4e8176fd7d421cd170e692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8afad312adc3f943d5439daa130ddf867941ee09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afad312adc3f943d5439daa130ddf867941ee09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8afad312adc3f943d5439daa130ddf867941ee09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afad312adc3f943d5439daa130ddf867941ee09/comments", "author": null, "committer": null, "parents": [{"sha": "6a04a63408e4ae8b8747efff8ce2572b6b439a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a04a63408e4ae8b8747efff8ce2572b6b439a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a04a63408e4ae8b8747efff8ce2572b6b439a53"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "c93c9badc8041c6756658e930b657b682fb91266", "filename": "gcc/stmt.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afad312adc3f943d5439daa130ddf867941ee09/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afad312adc3f943d5439daa130ddf867941ee09/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=8afad312adc3f943d5439daa130ddf867941ee09", "patch": "@@ -231,6 +231,9 @@ struct nesting\n \t  rtx start_label;\n \t  /* Label at the end of the whole construct.  */\n \t  rtx end_label;\n+\t  /* Label before a jump that branches to the end of the whole\n+\t     construct.  This is where destructors go if any.  */\n+\t  rtx alt_end_label;\n \t  /* Label for `continue' statement to jump to;\n \t     this is in front of the stepper of the loop.  */\n \t  rtx continue_label;\n@@ -2026,6 +2029,7 @@ expand_start_loop (exit_flag)\n   thisloop->depth = ++nesting_depth;\n   thisloop->data.loop.start_label = gen_label_rtx ();\n   thisloop->data.loop.end_label = gen_label_rtx ();\n+  thisloop->data.loop.alt_end_label = 0;\n   thisloop->data.loop.continue_label = thisloop->data.loop.start_label;\n   thisloop->exit_label = exit_flag ? thisloop->data.loop.end_label : 0;\n   loop_stack = thisloop;\n@@ -2162,19 +2166,25 @@ expand_end_loop ()\n \t      && SET_DEST (PATTERN (insn)) == pc_rtx\n \t      && GET_CODE (SET_SRC (PATTERN (insn))) == IF_THEN_ELSE\n \t      && ((GET_CODE (XEXP (SET_SRC (PATTERN (insn)), 1)) == LABEL_REF\n-\t\t   && (XEXP (XEXP (SET_SRC (PATTERN (insn)), 1), 0)\n-\t\t       == loop_stack->data.loop.end_label))\n+\t\t   && ((XEXP (XEXP (SET_SRC (PATTERN (insn)), 1), 0)\n+\t\t\t== loop_stack->data.loop.end_label)\n+\t\t       || (XEXP (XEXP (SET_SRC (PATTERN (insn)), 1), 0)\n+\t\t\t   == loop_stack->data.loop.alt_end_label)))\n \t\t  || (GET_CODE (XEXP (SET_SRC (PATTERN (insn)), 2)) == LABEL_REF\n-\t\t      && (XEXP (XEXP (SET_SRC (PATTERN (insn)), 2), 0)\n-\t\t\t  == loop_stack->data.loop.end_label))))\n+\t\t      && ((XEXP (XEXP (SET_SRC (PATTERN (insn)), 2), 0)\n+\t\t\t   == loop_stack->data.loop.end_label)\n+\t\t\t  || (XEXP (XEXP (SET_SRC (PATTERN (insn)), 2), 0)\n+\t\t\t      == loop_stack->data.loop.alt_end_label)))))\n \t    last_test_insn = insn;\n \n \t  if (last_test_insn == 0 && GET_CODE (insn) == JUMP_INSN\n \t      && GET_CODE (PATTERN (insn)) == SET\n \t      && SET_DEST (PATTERN (insn)) == pc_rtx\n \t      && GET_CODE (SET_SRC (PATTERN (insn))) == LABEL_REF\n-\t      && (XEXP (SET_SRC (PATTERN (insn)), 0)\n-\t\t  == loop_stack->data.loop.end_label))\n+\t      && ((XEXP (SET_SRC (PATTERN (insn)), 0)\n+\t\t   == loop_stack->data.loop.end_label)\n+\t\t  || (XEXP (SET_SRC (PATTERN (insn)), 0)\n+\t\t      == loop_stack->data.loop.alt_end_label)))\n \t    /* Include BARRIER.  */\n \t    last_test_insn = NEXT_INSN (insn);\n \t}\n@@ -2275,7 +2285,12 @@ expand_exit_loop_if_false (whichloop, cond)\n \t necessary, they go before the unconditional branch.  */\n \n       rtx label = gen_label_rtx ();\n+      rtx last_insn;\n+\n       do_jump (cond, NULL_RTX, label);\n+      last_insn = get_last_insn ();\n+      if (GET_CODE (last_insn) == CODE_LABEL)\n+\twhichloop->data.loop.alt_end_label = last_insn;\n       expand_goto_internal (NULL_TREE, whichloop->data.loop.end_label,\n \t\t\t    NULL_RTX);\n       emit_label (label);"}]}