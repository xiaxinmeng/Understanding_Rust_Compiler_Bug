{"sha": "776ff053800ad989564b0b3c2904fb072abaf422", "node_id": "C_kwDOANBUbNoAKDc3NmZmMDUzODAwYWQ5ODk1NjRiMGIzYzI5MDRmYjA3MmFiYWY0MjI", "commit": {"author": {"name": "Prajwal S N", "email": "prajwalnadig21@gmail.com", "date": "2022-12-31T07:19:02Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:16Z"}, "message": "gccrs: unsafe: check use of `target_feature` attribute\n\nThe `target_feature` attribute is for conditional compilation and may or\nmay not compile on all platforms. Using it requires an unsafe function\nor block.\n\ngcc/rust/ChangeLog:\n\n\t* checks/errors/rust-unsafe-checker.cc (check_target_attr): New function.\n\t(UnsafeChecker::check_function_attr): Call into `check_target_attr`.\n\t(UnsafeChecker::visit): Check for target_feature attributes.\n\t* checks/errors/rust-unsafe-checker.h: Add declarations.\n\t* util/rust-attributes.cc: Add attribute.\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/unsafe11.rs: New test.\n\nSigned-off-by: Prajwal S N <prajwalnadig21@gmail.com>", "tree": {"sha": "3d0a62e12dbe4ee8cb086f0693e5ff5434b80cf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d0a62e12dbe4ee8cb086f0693e5ff5434b80cf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/776ff053800ad989564b0b3c2904fb072abaf422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776ff053800ad989564b0b3c2904fb072abaf422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/776ff053800ad989564b0b3c2904fb072abaf422", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/776ff053800ad989564b0b3c2904fb072abaf422/comments", "author": {"login": "snprajwal", "id": 71701859, "node_id": "MDQ6VXNlcjcxNzAxODU5", "avatar_url": "https://avatars.githubusercontent.com/u/71701859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/snprajwal", "html_url": "https://github.com/snprajwal", "followers_url": "https://api.github.com/users/snprajwal/followers", "following_url": "https://api.github.com/users/snprajwal/following{/other_user}", "gists_url": "https://api.github.com/users/snprajwal/gists{/gist_id}", "starred_url": "https://api.github.com/users/snprajwal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/snprajwal/subscriptions", "organizations_url": "https://api.github.com/users/snprajwal/orgs", "repos_url": "https://api.github.com/users/snprajwal/repos", "events_url": "https://api.github.com/users/snprajwal/events{/privacy}", "received_events_url": "https://api.github.com/users/snprajwal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f66b135d0b55fda15dfce927b14ab9c89b9fb6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66b135d0b55fda15dfce927b14ab9c89b9fb6a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66b135d0b55fda15dfce927b14ab9c89b9fb6a7"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "3c369a2a81acc081214cba956b8fde4ab6448624", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776ff053800ad989564b0b3c2904fb072abaf422/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776ff053800ad989564b0b3c2904fb072abaf422/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=776ff053800ad989564b0b3c2904fb072abaf422", "patch": "@@ -179,6 +179,31 @@ UnsafeChecker::check_function_call (HirId node_id, Location locus)\n \t\t       locus);\n }\n \n+static void\n+check_target_attr (HIR::Function *fn, Location locus)\n+{\n+  if (std::any_of (fn->get_outer_attrs ().begin (),\n+\t\t   fn->get_outer_attrs ().end (),\n+\t\t   [] (const AST::Attribute &attr) {\n+\t\t     return attr.get_path ().as_string () == \"target_feature\";\n+\t\t   }))\n+    rust_error_at (locus,\n+\t\t   \"call to function with %<#[target_feature]%> requires \"\n+\t\t   \"unsafe function or block\");\n+}\n+\n+void\n+UnsafeChecker::check_function_attr (HirId node_id, Location locus)\n+{\n+  if (unsafe_context.is_in_context ())\n+    return;\n+\n+  auto maybe_fn = mappings.lookup_hir_item (node_id);\n+\n+  if (maybe_fn && maybe_fn->get_item_kind () == Item::ItemKind::Function)\n+    check_target_attr (static_cast<Function *> (maybe_fn), locus);\n+}\n+\n void\n UnsafeChecker::visit (Lifetime &)\n {}\n@@ -398,11 +423,13 @@ UnsafeChecker::visit (CallExpr &expr)\n \n   rust_assert (mappings.lookup_node_to_hir (ref_node_id, &definition_id));\n \n-  // At this point we have the function's HIR Id. There are two checks we\n+  // At this point we have the function's HIR Id. There are three checks we\n   // must perform:\n   //     1. The function is an unsafe one\n   //     2. The function is an extern one\n+  //     3. The function is marked with a target_feature attribute\n   check_function_call (definition_id, expr.get_locus ());\n+  check_function_attr (definition_id, expr.get_locus ());\n \n   if (expr.has_params ())\n     for (auto &arg : expr.get_arguments ())"}, {"sha": "2abd3a62351c7be64530b309f99f57af868ec68c", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776ff053800ad989564b0b3c2904fb072abaf422/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776ff053800ad989564b0b3c2904fb072abaf422/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=776ff053800ad989564b0b3c2904fb072abaf422", "patch": "@@ -46,6 +46,11 @@ class UnsafeChecker : public HIRFullVisitor\n    */\n   void check_function_call (HirId node_id, Location locus);\n \n+  /**\n+   * Check if any unsafe attributes are present on a function\n+   */\n+  void check_function_attr (HirId node_id, Location locus);\n+\n   StackedContexts<HirId> unsafe_context;\n \n   Resolver::TypeCheckContext &context;"}, {"sha": "0458f6902b7e7cecceddcb897a4c9fda2b5bbc5b", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776ff053800ad989564b0b3c2904fb072abaf422/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776ff053800ad989564b0b3c2904fb072abaf422/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=776ff053800ad989564b0b3c2904fb072abaf422", "patch": "@@ -41,6 +41,9 @@ static const BuiltinAttrDefinition __definitions[]\n      {\"repr\", CODE_GENERATION},\n      {\"path\", EXPANSION},\n      {\"macro_use\", NAME_RESOLUTION},\n+     // FIXME: This is not implemented yet, see\n+     // https://github.com/Rust-GCC/gccrs/issues/1475\n+     {\"target_feature\", CODE_GENERATION},\n      // From now on, these are reserved by the compiler and gated through\n      // #![feature(rustc_attrs)]\n      {\"rustc_inherit_overflow_checks\", CODE_GENERATION}};"}, {"sha": "c87902fcd5f169e2d23881cd72a8030671a830dd", "filename": "gcc/testsuite/rust/compile/unsafe11.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/776ff053800ad989564b0b3c2904fb072abaf422/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/776ff053800ad989564b0b3c2904fb072abaf422/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe11.rs?ref=776ff053800ad989564b0b3c2904fb072abaf422", "patch": "@@ -0,0 +1,8 @@\n+#[target_feature(sse)]\n+fn foo() {\n+    let a: usize = 0;\n+}\n+\n+fn main() {\n+    foo() // { dg-error \"requires unsafe function or block\" }\n+}"}]}