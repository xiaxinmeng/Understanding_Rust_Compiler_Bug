{"sha": "586fea26ac1f35bcbf4b501f7881635105241a8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg2ZmVhMjZhYzFmMzViY2JmNGI1MDFmNzg4MTYzNTEwNTI0MWE4Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-11-03T00:15:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-11-03T00:15:51Z"}, "message": "gigi.h (add_stmt_force): Declare.\n\n\t* gcc-interface/gigi.h (add_stmt_force): Declare.\n\t(add_stmt_with_node_force): Likewise.\n\t* gcc-interface/trans.c (Attribute_to_gnu): Don't set TREE_SIDE_EFFECTS\n\ton the SAVE_EXPR built for cached expressions of parameter attributes.\n\t(Subprogram_Body_to_gnu): Force evaluation of the SAVE_EXPR built for\n\tcached expressions of parameter attributes.\n\t(add_stmt_force): New function.\n\t(add_stmt_with_node_force): Likewise.\n\nFrom-SVN: r166222", "tree": {"sha": "93e79a0d561245e820722a4a6887170c7a25ca92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93e79a0d561245e820722a4a6887170c7a25ca92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/586fea26ac1f35bcbf4b501f7881635105241a8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586fea26ac1f35bcbf4b501f7881635105241a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586fea26ac1f35bcbf4b501f7881635105241a8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586fea26ac1f35bcbf4b501f7881635105241a8c/comments", "author": null, "committer": null, "parents": [{"sha": "04ae82aa4e3d2bdbcb2fc604604db6bf9884ba82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ae82aa4e3d2bdbcb2fc604604db6bf9884ba82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ae82aa4e3d2bdbcb2fc604604db6bf9884ba82"}], "stats": {"total": 90, "additions": 79, "deletions": 11}, "files": [{"sha": "ff25a9f6a7e3b983a562797d313d3a602d279bdf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586fea26ac1f35bcbf4b501f7881635105241a8c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586fea26ac1f35bcbf4b501f7881635105241a8c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=586fea26ac1f35bcbf4b501f7881635105241a8c", "patch": "@@ -1,3 +1,14 @@\n+2010-11-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (add_stmt_force): Declare.\n+\t(add_stmt_with_node_force): Likewise.\n+\t* gcc-interface/trans.c (Attribute_to_gnu): Don't set TREE_SIDE_EFFECTS\n+\ton the SAVE_EXPR built for cached expressions of parameter attributes.\n+\t(Subprogram_Body_to_gnu): Force evaluation of the SAVE_EXPR built for\n+\tcached expressions of parameter attributes.\n+\t(add_stmt_force): New function.\n+\t(add_stmt_with_node_force): Likewise.\n+\n 2010-10-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gigi): Fix formatting issues."}, {"sha": "67a7a472abd251a11871c1e7d033fba5c47a17fc", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586fea26ac1f35bcbf4b501f7881635105241a8c/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586fea26ac1f35bcbf4b501f7881635105241a8c/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=586fea26ac1f35bcbf4b501f7881635105241a8c", "patch": "@@ -57,12 +57,19 @@ extern void rest_of_type_decl_compilation (tree t);\n /* Start a new statement group chained to the previous group.  */\n extern void start_stmt_group (void);\n \n-/* Add GNU_STMT to the current BLOCK_STMT node.  */\n+/* Add GNU_STMT to the current statement group.  If it is an expression with\n+   no effects, it is ignored.  */\n extern void add_stmt (tree gnu_stmt);\n \n-/* Similar, but set the location of GNU_STMT to that of GNAT_NODE.  */\n+/* Similar, but the statement is always added, regardless of side-effects.  */\n+extern void add_stmt_force (tree gnu_stmt);\n+\n+/* Like add_stmt, but set the location of GNU_STMT to that of GNAT_NODE.  */\n extern void add_stmt_with_node (tree gnu_stmt, Node_Id gnat_node);\n \n+/* Similar, but the statement is always added, regardless of side-effects.  */\n+extern void add_stmt_with_node_force (tree gnu_stmt, Node_Id gnat_node);\n+\n /* Return code corresponding to the current code group.  It is normally\n    a STATEMENT_LIST, but may also be a BIND_EXPR or TRY_FINALLY_EXPR if\n    BLOCK or cleanups were set.  */"}, {"sha": "e0d17934d7bec3d553ac305c9f2a0cb7df29b9ef", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586fea26ac1f35bcbf4b501f7881635105241a8c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586fea26ac1f35bcbf4b501f7881635105241a8c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=586fea26ac1f35bcbf4b501f7881635105241a8c", "patch": "@@ -1739,12 +1739,13 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \n \t/* Cache the expression we have just computed.  Since we want to do it\n \t   at run time, we force the use of a SAVE_EXPR and let the gimplifier\n-\t   create the temporary.  */\n+\t   create the temporary in the outermost binding level.  We will make\n+\t   sure in Subprogram_Body_to_gnu that it is evaluated on all possible\n+\t   paths by forcing its evaluation on entry of the function.  */\n \tif (pa)\n \t  {\n \t    gnu_result\n \t      = build1 (SAVE_EXPR, TREE_TYPE (gnu_result), gnu_result);\n-\t    TREE_SIDE_EFFECTS (gnu_result) = 1;\n \t    if (attribute == Attr_First)\n \t      pa->first = gnu_result;\n \t    else if (attribute == Attr_Last)\n@@ -2634,8 +2635,9 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n \n   VEC_pop (tree, gnu_return_label_stack);\n \n-  /* If we populated the parameter attributes cache, we need to make sure\n-     that the cached expressions are evaluated on all possible paths.  */\n+  /* If we populated the parameter attributes cache, we need to make sure that\n+     the cached expressions are evaluated on all the possible paths leading to\n+     their uses.  So we force their evaluation on entry of the function.  */\n   cache = DECL_STRUCT_FUNCTION (gnu_subprog_decl)->language->parm_attr_cache;\n   if (cache)\n     {\n@@ -2647,11 +2649,11 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n       FOR_EACH_VEC_ELT (parm_attr, cache, i, pa)\n \t{\n \t  if (pa->first)\n-\t    add_stmt_with_node (pa->first, gnat_node);\n+\t    add_stmt_with_node_force (pa->first, gnat_node);\n \t  if (pa->last)\n-\t    add_stmt_with_node (pa->last, gnat_node);\n+\t    add_stmt_with_node_force (pa->last, gnat_node);\n \t  if (pa->length)\n-\t    add_stmt_with_node (pa->length, gnat_node);\n+\t    add_stmt_with_node_force (pa->length, gnat_node);\n \t}\n \n       add_stmt (gnu_result);\n@@ -5969,15 +5971,24 @@ start_stmt_group (void)\n   current_stmt_group = group;\n }\n \n-/* Add GNU_STMT to the current statement group.  */\n+/* Add GNU_STMT to the current statement group.  If it is an expression with\n+   no effects, it is ignored.  */\n \n void\n add_stmt (tree gnu_stmt)\n {\n   append_to_statement_list (gnu_stmt, &current_stmt_group->stmt_list);\n }\n \n-/* Similar, but set the location of GNU_STMT to that of GNAT_NODE.  */\n+/* Similar, but the statement is always added, regardless of side-effects.  */\n+\n+void\n+add_stmt_force (tree gnu_stmt)\n+{\n+  append_to_statement_list_force (gnu_stmt, &current_stmt_group->stmt_list);\n+}\n+\n+/* Like add_stmt, but set the location of GNU_STMT to that of GNAT_NODE.  */\n \n void\n add_stmt_with_node (tree gnu_stmt, Node_Id gnat_node)\n@@ -5987,6 +5998,16 @@ add_stmt_with_node (tree gnu_stmt, Node_Id gnat_node)\n   add_stmt (gnu_stmt);\n }\n \n+/* Similar, but the statement is always added, regardless of side-effects.  */\n+\n+void\n+add_stmt_with_node_force (tree gnu_stmt, Node_Id gnat_node)\n+{\n+  if (Present (gnat_node))\n+    set_expr_location_from_node (gnu_stmt, gnat_node);\n+  add_stmt_force (gnu_stmt);\n+}\n+\n /* Add a declaration statement for GNU_DECL to the current statement group.\n    Get SLOC from Entity_Id.  */\n "}, {"sha": "87da982a36d81304d32329f8cc22e1966e3e96ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586fea26ac1f35bcbf4b501f7881635105241a8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586fea26ac1f35bcbf4b501f7881635105241a8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=586fea26ac1f35bcbf4b501f7881635105241a8c", "patch": "@@ -1,3 +1,7 @@\n+2010-11-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/sizetype4.adb: New test.\n+\n 2010-11-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/avx-vzeroupper-15.c: New."}, {"sha": "b3ff6431961f9194243780b4a916254414e6acb3", "filename": "gcc/testsuite/gnat.dg/sizetype4.adb", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/586fea26ac1f35bcbf4b501f7881635105241a8c/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/586fea26ac1f35bcbf4b501f7881635105241a8c/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fsizetype4.adb?ref=586fea26ac1f35bcbf4b501f7881635105241a8c", "patch": "@@ -0,0 +1,25 @@\n+-- { dg-do run }\n+\n+procedure Sizetype4 is\n+\n+   type Float_Array is array (Integer range <>) of Float;\n+   NoFloats : Float_Array (1 .. 0);\n+\n+   procedure Q (Results : Float_Array := NoFloats) is\n+\n+      type Reply_Msg is\n+         record\n+            Request_Id : Integer;\n+            Status     : Integer;\n+            Data       : Float_Array (Results'Range);\n+         end record;\n+\n+   begin\n+      if Reply_Msg'Size /= 64 then\n+        raise Program_Error;\n+      end if;\n+   end;\n+\n+begin\n+   Q;\n+end;"}]}