{"sha": "7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NkYjZlNGM2OGE2ZGFjZWUyMzA4ZTZlOWE4NTMzYTAxMDQ0NzFkNw==", "commit": {"author": {"name": "Andrew Senkevich", "email": "andrew.senkevich@intel.com", "date": "2016-12-15T22:39:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-12-15T22:39:33Z"}, "message": "avx512bwintrin.h: Add new k-mask intrinsics.\n\n\t* config/i386/avx512bwintrin.h: Add new k-mask intrinsics.\n\t* config/i386/avx512dqintrin.h: Ditto.\n\t* config/i386/avx512fintrin.h: Ditto.\n\t* config/i386/i386-builtin.def (__builtin_ia32_kmovb,\n\t__builtin_ia32_kmovd, __builtin_ia32_kmovq): New.\n\t(__builtin_ia32_kmov16): Rename to __builtin_ia32_kmovw.\n\t* config/i386/sse.md (kmov<mskmodesuffix>): New.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512bw-kmovd-1.c: New test.\n\t* gcc.target/i386/avx512bw-kmovd-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-kmovd-3.c: Ditto.\n\t* gcc.target/i386/avx512bw-kmovd-4.c: Ditto.\n\t* gcc.target/i386/avx512bw-kmovq-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kmovq-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-kmovq-3.c: Ditto.\n\t* gcc.target/i386/avx512bw-kmovq-4.c: Ditto.\n\t* gcc.target/i386/avx512dq-kmovb-2.c: Ditto.\n\t* gcc.target/i386/avx512dq-kmovb-3.c: Ditto.\n\t* gcc.target/i386/avx512dq-kmovb-4.c: Ditto.\n\t* gcc.target/i386/avx512dq-kmovb-5.c: Ditto.\n\t* gcc.target/i386/avx512f-kmovw-2.c: Ditto.\n\t* gcc.target/i386/avx512f-kmovw-3.c: Ditto.\n\t* gcc.target/i386/avx512f-kmovw-4.c: Ditto.\n\t* gcc.target/i386/avx512f-kmovw-5.c: Ditto.\n\nFrom-SVN: r243728", "tree": {"sha": "206704d6b83ddf9eccc5fd067578d6d3b258c457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206704d6b83ddf9eccc5fd067578d6d3b258c457"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/comments", "author": null, "committer": null, "parents": [{"sha": "bdb5177687ae4ef0b34d855261af6690dee4bc64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb5177687ae4ef0b34d855261af6690dee4bc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb5177687ae4ef0b34d855261af6690dee4bc64"}], "stats": {"total": 406, "additions": 401, "deletions": 5}, "files": [{"sha": "fcb9410ce0344aa3b29a0d064a4072fe0c0cd160", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -1,3 +1,13 @@\n+2016-12-15  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* config/i386/avx512bwintrin.h: Add new k-mask intrinsics.\n+\t* config/i386/avx512dqintrin.h: Ditto.\n+\t* config/i386/avx512fintrin.h: Ditto.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_kmovb,\n+\t__builtin_ia32_kmovd, __builtin_ia32_kmovq): New.\n+\t(__builtin_ia32_kmov16): Rename to __builtin_ia32_kmovw.\n+\t* config/i386/sse.md (kmov<mskmodesuffix>): New.\n+\n 2016-12-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (ffs<mode>2): Generate CCCmode flags register"}, {"sha": "b35ae2b909df3262ba186de583fcf8d3b3d0ac35", "filename": "gcc/config/i386/avx512bwintrin.h", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -40,6 +40,62 @@ typedef char __v64qi __attribute__ ((__vector_size__ (64)));\n \n typedef unsigned long long __mmask64;\n \n+extern __inline unsigned int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtmask32_u32 (__mmask32 __A)\n+{\n+  return (unsigned int) __builtin_ia32_kmovd ((__mmask32) __A);\n+}\n+\n+extern __inline unsigned long long\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtmask64_u64 (__mmask64 __A)\n+{\n+  return (unsigned long long) __builtin_ia32_kmovq ((__mmask64) __A);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtu32_mask32 (unsigned int __A)\n+{\n+  return (__mmask32) __builtin_ia32_kmovd ((__mmask32) __A);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtu64_mask64 (unsigned long long __A)\n+{\n+  return (__mmask64) __builtin_ia32_kmovq ((__mmask64) __A);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_load_mask32 (__mmask32 *__A)\n+{\n+  return (__mmask32) __builtin_ia32_kmovd (*__A);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_load_mask64 (__mmask64 *__A)\n+{\n+  return (__mmask64) __builtin_ia32_kmovq (*(__mmask64 *) __A);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_store_mask32 (__mmask32 *__A, __mmask32 __B)\n+{\n+  *(__mmask32 *) __A = __builtin_ia32_kmovd (__B);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_store_mask64 (__mmask64 *__A, __mmask64 __B)\n+{\n+  *(__mmask64 *) __A = __builtin_ia32_kmovq (__B);\n+}\n+\n extern __inline __mmask32\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _knot_mask32 (__mmask32 __A)"}, {"sha": "4db44e4091721dff131f640c1ed30ff1ab15bc06", "filename": "gcc/config/i386/avx512dqintrin.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -34,6 +34,34 @@\n #define __DISABLE_AVX512DQ__\n #endif /* __AVX512DQ__ */\n \n+extern __inline unsigned int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtmask8_u32 (__mmask8 __A)\n+{\n+  return (unsigned int) __builtin_ia32_kmovb ((__mmask8 ) __A);\n+}\n+\t\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtu32_mask8 (unsigned int __A)\n+{\n+  return (__mmask8) __builtin_ia32_kmovb ((__mmask8) __A);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_load_mask8 (__mmask8 *__A)\n+{\n+  return (__mmask8) __builtin_ia32_kmovb (*(__mmask8 *) __A);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_store_mask8 (__mmask8 *__A, __mmask8 __B)\n+{\n+  *(__mmask8 *) __A = __builtin_ia32_kmovb (__B);\n+}\n+\n extern __inline __mmask8\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _knot_mask8 (__mmask8 __A)"}, {"sha": "a889c838046c5bd3d3f7d7d0fc2b40f7a15db822", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -9984,6 +9984,34 @@ _mm512_maskz_expandloadu_epi32 (__mmask16 __U, void const *__P)\n #define _kxnor_mask16 _mm512_kxnor\n #define _kxor_mask16 _mm512_kxor\n \n+extern __inline unsigned int\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtmask16_u32 (__mmask16 __A)\n+{\n+  return (unsigned int) __builtin_ia32_kmovw ((__mmask16 ) __A);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_cvtu32_mask16 (unsigned int __A)\n+{\n+  return (__mmask16) __builtin_ia32_kmovw ((__mmask16 ) __A);\n+}\n+\n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_load_mask16 (__mmask16 *__A)\n+{\n+  return (__mmask16) __builtin_ia32_kmovw (*(__mmask16 *) __A);\n+}\n+\n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_store_mask16 (__mmask16 *__A, __mmask16 __B)\n+{\n+  *(__mmask16 *) __A = __builtin_ia32_kmovw (__B);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_kand (__mmask16 __A, __mmask16 __B)\n@@ -12948,7 +12976,7 @@ extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_kmov (__mmask16 __A)\n {\n-  return __builtin_ia32_kmov16 (__A);\n+  return __builtin_ia32_kmovw (__A);\n }\n \n extern __inline __m512"}, {"sha": "7628278d0712f54c5e9542f978f47deb43c6a309", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -1467,7 +1467,10 @@ BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kxorqi, \"__builtin_ia32_kxorqi\", IX86_\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kxorhi, \"__builtin_ia32_kxorhi\", IX86_BUILTIN_KXOR16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kxorsi, \"__builtin_ia32_kxorsi\", IX86_BUILTIN_KXOR32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kxordi, \"__builtin_ia32_kxordi\", IX86_BUILTIN_KXOR64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n-BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kmovw, \"__builtin_ia32_kmov16\", IX86_BUILTIN_KMOV16, UNKNOWN, (int) UHI_FTYPE_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kmovb, \"__builtin_ia32_kmovb\", IX86_BUILTIN_KMOV8, UNKNOWN, (int) UQI_FTYPE_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kmovw, \"__builtin_ia32_kmovw\", IX86_BUILTIN_KMOV16, UNKNOWN, (int) UHI_FTYPE_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kmovd, \"__builtin_ia32_kmovd\", IX86_BUILTIN_KMOV32, UNKNOWN, (int) USI_FTYPE_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kmovq, \"__builtin_ia32_kmovq\", IX86_BUILTIN_KMOV64, UNKNOWN, (int) UDI_FTYPE_UDI)\n \n /* SHA */\n BDESC (OPTION_MASK_ISA_SSE2, CODE_FOR_sha1msg1, 0, IX86_BUILTIN_SHA1MSG1, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI)"}, {"sha": "6dc57aaf5ecca652d8b99184c0d7f458b90e831e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -1309,9 +1309,9 @@\n ;; Mask variant shift mnemonics\n (define_code_attr mshift [(ashift \"shiftl\") (lshiftrt \"shiftr\")])\n \n-(define_expand \"kmovw\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\")\n-\t(match_operand:HI 1 \"nonimmediate_operand\"))]\n+(define_expand \"kmov<mskmodesuffix>\"\n+  [(set (match_operand:SWI1248_AVX512BWDQ 0 \"nonimmediate_operand\")\n+\t(match_operand:SWI1248_AVX512BWDQ 1 \"nonimmediate_operand\"))]\n   \"TARGET_AVX512F\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\")\n "}, {"sha": "e4eca521e8d6f093648a026dc9189ed80a3c3e2e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -1,3 +1,22 @@\n+2016-12-15  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-kmovd-1.c: New test.\n+\t* gcc.target/i386/avx512bw-kmovd-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kmovd-3.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kmovd-4.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kmovq-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kmovq-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kmovq-3.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kmovq-4.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kmovb-2.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kmovb-3.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kmovb-4.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kmovb-5.c: Ditto.\n+\t* gcc.target/i386/avx512f-kmovw-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-kmovw-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-kmovw-4.c: Ditto.\n+\t* gcc.target/i386/avx512f-kmovw-5.c: Ditto.\n+\n 2016-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tP0490R0 GB 20: decomposition declaration should commit to tuple"}, {"sha": "2fbdafd985c65923b7e8d690f32a62db50239a0b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kmovd-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-1.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask32 k1;\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k = _cvtu32_mask32 (11);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k1 = k;\n+}"}, {"sha": "581affe27b67b67d8a9a42935e4b767e2b407e4f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kmovd-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-2.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask32 k1;\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k0 = 11; \n+  __mmask32 k = _load_mask32 (&k0);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k1 = k;\n+}"}, {"sha": "4cf22fe18277ad8690e1a41acf219110b358f21f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kmovd-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-3.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask32 k1 = 11;\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k0, k;\n+ \n+  _store_mask32 (&k, k1);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k0 = k;\n+}"}, {"sha": "2d512d4eb26d84d19e439d670785547a7ce6b416", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kmovd-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovd-4.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile unsigned int i;\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k = 11;\n+  \n+  asm volatile (\"\" : \"+k\" (k));\n+  i = _cvtmask32_u32 (k);\n+}"}, {"sha": "20586b8816e3fcc05c2b50cf13aa35d20722bfec", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kmovq-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-1.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask64 k1;\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k = _cvtu64_mask64 (11);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k1 = k;\n+}"}, {"sha": "1a5f94c388eaa5f77d6d18b07bf189040c8d8258", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kmovq-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-2.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask64 k1;\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k0 = 11; \n+  __mmask64 k = _load_mask64 (&k0);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k1 = k;\n+}"}, {"sha": "53c6a1730d83b8758c81b7c8cbfbe9498a0b8ad2", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kmovq-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-3.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask64 k1 = 11;\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k0, k;\n+ \n+  _store_mask64 (&k, k1);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k0 = k;\n+}"}, {"sha": "ddde970d548d9c0c41e23f92c40308f596fb5319", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kmovq-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kmovq-4.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile unsigned long long i;\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k = 11;\n+  \n+  asm volatile (\"\" : \"+k\" (k));\n+  i = _cvtmask64_u64 (k);\n+}"}, {"sha": "162ce38d5f645bea1acf5c3deef946e10390f809", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kmovb-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-2.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask8 k1;\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k = _cvtu32_mask8 (11);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k1 = k;\n+}"}, {"sha": "c10dd1e56bf16121c0b0c59fc3d14dd944e55d3a", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kmovb-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-3.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask8 k1;\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k0 = 11; \n+  __mmask8 k = _load_mask8 (&k0);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k1 = k;\n+}"}, {"sha": "b3120dda33fea6decef7379792176a466a90ae0e", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kmovb-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-4.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask8 k1 = 11;\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask8 k0, k;\n+ \n+  _store_mask8 (&k, k1);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k0 = k;\n+}"}, {"sha": "49817097e268b0a2de2f7bb4f107b1699ef8fea0", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kmovb-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kmovb-5.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile unsigned int i;\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k = 11;\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  i = _cvtmask8_u32 (k);\n+}"}, {"sha": "95d203b090d2a9324241837769b01594be6c29ad", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kmovw-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-2.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask16 k1;\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k = _cvtu32_mask16 (11);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k1 = k;\n+}"}, {"sha": "82d1b30ff3b0fdaa7a048f3fcf961a3907a50b27", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kmovw-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-3.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask16 k1;\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k0 = 11; \n+  __mmask16 k = _load_mask16 (&k0);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k1 = k;\n+}"}, {"sha": "c1221e0a5636e4217ff40a12a6a287d42148c91c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kmovw-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-4.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile __mmask16 k1 = 11;\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k0, k;\n+ \n+  _store_mask16 (&k, k1);\n+\n+  asm volatile (\"\" : \"+k\" (k));\n+  k0 = k;\n+}"}, {"sha": "7bb34d34d8d259c8889b3dd36557bc22cbc36129", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kmovw-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cdb6e4c68a6dacee2308e6e9a8533a0104471d7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kmovw-5.c?ref=7cdb6e4c68a6dacee2308e6e9a8533a0104471d7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kmovw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+volatile unsigned int i;\n+\n+void\n+avx512f_test ()\n+{\n+  __mmask16 k = 11;\n+  \n+  asm volatile (\"\" : \"+k\" (k));\n+  i = _cvtmask16_u32 (k);\n+}"}]}