{"sha": "60593797295652db1541766f03223e9e6127c9a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1OTM3OTcyOTU2NTJkYjE1NDE3NjZmMDMyMjNlOWU2MTI3YzlhNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-01-27T05:11:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-01-27T05:11:41Z"}, "message": "alpha.c (output_epilog [!VMS]): Don't tag global functions if compiling with -fpic -- we want to be able to...\n\n* alpha.c (output_epilog [!VMS]): Don't tag global functions if\ncompiling with -fpic -- we want to be able to override symbols\nproperly.\n(alpha_expand_block_move): Fix thinko in last change.\n* alpha.h (ASM_OUTPUT_MI_THUNK): New define.\n* config/alpha/win-nt.h (ASM_OUTPUT_MI_THUNK): New define.\n* config/alpha/vms.h (ASM_OUTPUT_MI_THUNK): New undef.\n\nFrom-SVN: r17503", "tree": {"sha": "10b58ce8301ff6e74f6881ae49c4356b80433b50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10b58ce8301ff6e74f6881ae49c4356b80433b50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60593797295652db1541766f03223e9e6127c9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60593797295652db1541766f03223e9e6127c9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60593797295652db1541766f03223e9e6127c9a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60593797295652db1541766f03223e9e6127c9a5/comments", "author": null, "committer": null, "parents": [{"sha": "5e4aab9798b3d7cc4cbf80fa4ebc171a712704ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e4aab9798b3d7cc4cbf80fa4ebc171a712704ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e4aab9798b3d7cc4cbf80fa4ebc171a712704ad"}], "stats": {"total": 110, "additions": 106, "deletions": 4}, "files": [{"sha": "ba970d5f15c3c132098ee81b2fd6eac872227f45", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60593797295652db1541766f03223e9e6127c9a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60593797295652db1541766f03223e9e6127c9a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60593797295652db1541766f03223e9e6127c9a5", "patch": "@@ -1,3 +1,14 @@\n+Tue Jan 27 05:05:26 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (output_epilog [!VMS]): Don't tag global functions if\n+\tcompiling with -fpic -- we want to be able to override symbols\n+\tproperly.\n+\t(alpha_expand_block_move): Fix thinko in last change.\n+\n+\t* alpha.h (ASM_OUTPUT_MI_THUNK): New define.\n+\t* config/alpha/win-nt.h (ASM_OUTPUT_MI_THUNK): New define.\n+\t* config/alpha/vms.h (ASM_OUTPUT_MI_THUNK): New undef.\n+\t\n Tue Jan 27 03:21:23 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.md (abssf, absdf): Revert last change."}, {"sha": "c5d132590a721ec991a0bc370b75017d40074cf3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60593797295652db1541766f03223e9e6127c9a5/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60593797295652db1541766f03223e9e6127c9a5/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=60593797295652db1541766f03223e9e6127c9a5", "patch": "@@ -1616,9 +1616,11 @@ alpha_expand_block_move (operands)\n \n   /* Ideally we would do nice things when noticing the addressof.  */\n   if (GET_CODE (XEXP (orig_src, 0)) == ADDRESSOF)\n-    orig_src = copy_addr_to_reg (XEXP (orig_src, 0));\n+    orig_src = change_address (orig_src, GET_MODE (orig_src),\n+\t\t\t       copy_addr_to_reg (XEXP (orig_src, 0)));\n   if (GET_CODE (XEXP (orig_dst, 0)) == ADDRESSOF)\n-    orig_dst = copy_addr_to_reg (XEXP (orig_dst, 0));\n+    orig_dst = change_address (orig_dst, GET_MODE (orig_dst),\n+\t\t\t       copy_addr_to_reg (XEXP (orig_dst, 0)));\n \n   /* Handle a block of contiguous words first.  */\n \n@@ -3400,8 +3402,15 @@ output_epilog (file, size)\n     }\n   inside_function = FALSE;\n \n-  /* Show that we know this function if it is called again.  */\n-  SYMBOL_REF_FLAG (XEXP (DECL_RTL (current_function_decl), 0)) = 1;\n+  /* Show that we know this function if it is called again. \n+\n+     Don't do this for global functions in object files destined for a\n+     shared library because the function may be overridden by the application\n+     or other libraries.\n+     ??? Is this just ELF?  */\n+\n+  if (!flag_pic || !TREE_PUBLIC (current_function_decl))\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (current_function_decl), 0)) = 1;\n }\n #endif /* !OPEN_VMS */\n \f"}, {"sha": "75b1f1e9610e7f4bc39232ca9f4a9aee4e79f8da", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60593797295652db1541766f03223e9e6127c9a5/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60593797295652db1541766f03223e9e6127c9a5/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=60593797295652db1541766f03223e9e6127c9a5", "patch": "@@ -2030,6 +2030,48 @@ literal_section ()\t\t\t\t\t\t\\\n #define ASM_OPEN_PAREN \"(\"\n #define ASM_CLOSE_PAREN \")\"\n \n+/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n+   Used for C++ multiple inheritance.  */\n+\n+#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  char *fn_name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION));\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\t.ent \");\t\t\t\t\t\t\\\n+  assemble_name (FILE, alpha_function_name);\t\t\t\t\\\n+  fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+  ASM_OUTPUT_LABEL (FILE, alpha_function_name);\t\t\t\t\\\n+  fprintf (FILE, \"\\tldgp $29,0($27)\\n\");\t\t\t\t\\\n+  fputc ('$', FILE);\t\t\t\t\t\t\t\\\n+  assemble_name (FILE, alpha_function_name);\t\t\t\t\\\n+  fprintf (FILE, \"..ng:\\n\");\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\t.frame $30,0,$26,0\\n\");\t\t\t\t\\\n+  fprintf (FILE, \"\\t.prologue 1\\n\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Rely on the assembler to macro expand a large delta.  */\t\t\\\n+  fprintf (FILE, \"\\tlda $16,%ld($16)\\n\", (long)(DELTA));\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (current_file_function_operand (XEXP (DECL_RTL (FUNCTION), 0)))\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tbr $31,$\");\t\t\t\t\t\\\n+      assemble_name (FILE, fn_name);\t\t\t\t\t\\\n+      fprintf (FILE, \"..ng\\n\");\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tlda $27,\");\t\t\t\t\t\\\n+      assemble_name (FILE, fn_name);\t\t\t\t\t\\\n+      fprintf (FILE, \"\\n\\tjmp $31,($27),\");\t\t\t\t\\\n+      assemble_name (FILE, fn_name);\t\t\t\t\t\\\n+      fputc ('\\n', FILE);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\t.end \");\t\t\t\t\t\t\\\n+  assemble_name (FILE, alpha_function_name);\t\t\t\t\\\n+  fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+} while (0)\n+\n+\f\n /* Define results of standard character escape sequences.  */\n #define TARGET_BELL 007\n #define TARGET_BS 010"}, {"sha": "e0bc3349afca3af2635cd6cfe7dc19b4be58b7a3", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60593797295652db1541766f03223e9e6127c9a5/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60593797295652db1541766f03223e9e6127c9a5/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=60593797295652db1541766f03223e9e6127c9a5", "patch": "@@ -455,6 +455,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 12),\t\\\n   sprintf ((OUTPUT), \"%s___%d\", (NAME), (LABELNO)))\n \n+/* ??? VMS uses different linkage.  */\n+#undef ASM_OUTPUT_MI_THUNK\n+\n #undef ASM_SPEC\n #undef ASM_FINAL_SPEC\n #undef LINK_SPEC"}, {"sha": "cd21c30a45ca9ec31c4280adccaeacb2003961f8", "filename": "gcc/config/alpha/win-nt.h", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60593797295652db1541766f03223e9e6127c9a5/gcc%2Fconfig%2Falpha%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60593797295652db1541766f03223e9e6127c9a5/gcc%2Fconfig%2Falpha%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fwin-nt.h?ref=60593797295652db1541766f03223e9e6127c9a5", "patch": "@@ -129,3 +129,40 @@ Boston, MA 02111-1307, USA.  */\n   emit_insn (gen_rtx (UNSPEC_VOLATILE, VOIDmode,\t\t\t\\\n                       gen_rtvec (1, const0_rtx), 0));\t\t\t\\\n }\n+\n+/* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n+   Used for C++ multiple inheritance.  */\n+\n+#undef ASM_OUTPUT_MI_THUNK\n+#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  char *fn_name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (FUNCTION));\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\t.ent \");\t\t\t\t\t\t\\\n+  assemble_name (FILE, alpha_function_name);\t\t\t\t\\\n+  fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+  ASM_OUTPUT_LABEL (FILE, alpha_function_name);\t\t\t\t\\\n+  fprintf (FILE, \"\\t.frame $30,0,$26,0\\n\");\t\t\t\t\\\n+  fprintf (FILE, \"\\t.prologue 1\\n\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Rely on the assembler to macro expand a large delta.  */\t\t\\\n+  fprintf (FILE, \"\\tlda $16,%ld($16)\\n\", (long)(DELTA));\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (current_file_function_operand (XEXP (DECL_RTL (FUNCTION), 0)))\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tbr $31,\");\t\t\t\t\t\\\n+      assemble_name (FILE, fn_name);\t\t\t\t\t\\\n+      fputc ('\\n', FILE);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tjmp $31,\");\t\t\t\t\t\\\n+      assemble_name (FILE, fn_name);\t\t\t\t\t\\\n+      fputc ('\\n', FILE);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\t.end \");\t\t\t\t\t\t\\\n+  assemble_name (FILE, alpha_function_name);\t\t\t\t\\\n+  fputc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+} while (0)\n+"}]}