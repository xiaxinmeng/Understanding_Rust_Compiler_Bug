{"sha": "fa9544ab4df0e88946488fb82f4b994bf36a97ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE5NTQ0YWI0ZGYwZTg4OTQ2NDg4ZmI4MmY0Yjk5NGJmMzZhOTdmZg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-01-03T14:53:39Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-01-03T14:53:39Z"}, "message": "Clean-up EH after strlen transformation (PR tree-optimization/83593).\n\n2018-01-03  Martin Liska  <mliska@suse.cz>\n\n\tPR tree-optimization/83593\n\t* tree-ssa-strlen.c: Include tree-cfg.h.\n\t(strlen_check_and_optimize_stmt): Add new argument cleanup_eh.\n\t(strlen_dom_walker): Add new member variable m_cleanup_cfg.\n\t(strlen_dom_walker::strlen_dom_walker): Initialize m_cleanup_cfg\n\tto false.\n\t(strlen_dom_walker::before_dom_children): Call\n\tgimple_purge_dead_eh_edges. Dump tranformation with details\n\tdump flags.\n\t(strlen_dom_walker::before_dom_children): Update call by adding\n\tnew argument cleanup_eh.\n\t(pass_strlen::execute): Return TODO_cleanup_cfg if needed.\n2018-01-03  Martin Liska  <mliska@suse.cz>\n\n\tPR tree-optimization/83593\n\t* gcc.dg/pr83593.c: New test.\n\nFrom-SVN: r256178", "tree": {"sha": "492c3269956564477d25ff7f41e7c18a26b09745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/492c3269956564477d25ff7f41e7c18a26b09745"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa9544ab4df0e88946488fb82f4b994bf36a97ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9544ab4df0e88946488fb82f4b994bf36a97ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9544ab4df0e88946488fb82f4b994bf36a97ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9544ab4df0e88946488fb82f4b994bf36a97ff/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca04a532f3fcf91939ec03da628aa94207eaa067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca04a532f3fcf91939ec03da628aa94207eaa067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca04a532f3fcf91939ec03da628aa94207eaa067"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "95b5ed2468da9f42a4b9ec930a5865f4b63fc95e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9544ab4df0e88946488fb82f4b994bf36a97ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9544ab4df0e88946488fb82f4b994bf36a97ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa9544ab4df0e88946488fb82f4b994bf36a97ff", "patch": "@@ -1,3 +1,18 @@\n+2018-01-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/83593\n+\t* tree-ssa-strlen.c: Include tree-cfg.h.\n+\t(strlen_check_and_optimize_stmt): Add new argument cleanup_eh.\n+\t(strlen_dom_walker): Add new member variable m_cleanup_cfg.\n+\t(strlen_dom_walker::strlen_dom_walker): Initialize m_cleanup_cfg\n+\tto false.\n+\t(strlen_dom_walker::before_dom_children): Call\n+\tgimple_purge_dead_eh_edges. Dump tranformation with details\n+\tdump flags.\n+\t(strlen_dom_walker::before_dom_children): Update call by adding\n+\tnew argument cleanup_eh.\n+\t(pass_strlen::execute): Return TODO_cleanup_cfg if needed.\n+\n 2018-01-03  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/83549"}, {"sha": "f389dea6971ae233663241a18c7baee987f1096f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9544ab4df0e88946488fb82f4b994bf36a97ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9544ab4df0e88946488fb82f4b994bf36a97ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa9544ab4df0e88946488fb82f4b994bf36a97ff", "patch": "@@ -1,3 +1,8 @@\n+2018-01-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/83593\n+\t* gcc.dg/pr83593.c: New test.\n+\n 2018-01-03  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/83549"}, {"sha": "eddecc0606aa9530349397534f21cdcab8c726c0", "filename": "gcc/testsuite/gcc.dg/pr83593.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9544ab4df0e88946488fb82f4b994bf36a97ff/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83593.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9544ab4df0e88946488fb82f4b994bf36a97ff/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83593.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83593.c?ref=fa9544ab4df0e88946488fb82f4b994bf36a97ff", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/83593 */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fnon-call-exceptions -fno-tree-pre -fexceptions -fno-code-hoisting -fno-tree-fre\" } */\n+\n+void\n+hr (int *ed, signed char *ju)\n+{\n+  int kc;\n+    {\n+      int xj;\n+      int *q2 = (*ed == 0) ? &xj : &kc;\n+\n+      *ju = 0;\n+      kc = *ju;\n+    }\n+}"}, {"sha": "8f7020c14b3fb4723a1ae45528fe4dc48b024f46", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9544ab4df0e88946488fb82f4b994bf36a97ff/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9544ab4df0e88946488fb82f4b994bf36a97ff/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=fa9544ab4df0e88946488fb82f4b994bf36a97ff", "patch": "@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-iterator.h\"\n #include \"gimplify-me.h\"\n #include \"expr.h\"\n+#include \"tree-cfg.h\"\n #include \"tree-dfa.h\"\n #include \"domwalk.h\"\n #include \"tree-ssa-alias.h\"\n@@ -3051,10 +3052,12 @@ fold_strstr_to_strncmp (tree rhs1, tree rhs2, gimple *stmt)\n }\n \n /* Attempt to check for validity of the performed access a single statement\n-   at *GSI using string length knowledge, and to optimize it.  */\n+   at *GSI using string length knowledge, and to optimize it.\n+   If the given basic block needs clean-up of EH, CLEANUP_EH is set to\n+   true.  */\n \n static bool\n-strlen_check_and_optimize_stmt (gimple_stmt_iterator *gsi)\n+strlen_check_and_optimize_stmt (gimple_stmt_iterator *gsi, bool *cleanup_eh)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n \n@@ -3201,11 +3204,27 @@ strlen_check_and_optimize_stmt (gimple_stmt_iterator *gsi)\n \t\t    if (w1 == w2\n \t\t\t&& si->full_string_p)\n \t\t      {\n+\t\t\tif (dump_file && (dump_flags & TDF_DETAILS) != 0)\n+\t\t\t  {\n+\t\t\t    fprintf (dump_file, \"Optimizing: \");\n+\t\t\t    print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+\t\t\t  }\n+\n \t\t\t/* Reading the final '\\0' character.  */\n \t\t\ttree zero = build_int_cst (TREE_TYPE (lhs), 0);\n \t\t\tgimple_set_vuse (stmt, NULL_TREE);\n \t\t\tgimple_assign_set_rhs_from_tree (gsi, zero);\n-\t\t\tupdate_stmt (gsi_stmt (*gsi));\n+\t\t\t*cleanup_eh\n+\t\t\t  |= maybe_clean_or_replace_eh_stmt (stmt,\n+\t\t\t\t\t\t\t     gsi_stmt (*gsi));\n+\t\t\tstmt = gsi_stmt (*gsi);\n+\t\t\tupdate_stmt (stmt);\n+\n+\t\t\tif (dump_file && (dump_flags & TDF_DETAILS) != 0)\n+\t\t\t  {\n+\t\t\t    fprintf (dump_file, \"into: \");\n+\t\t\t    print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+\t\t\t  }\n \t\t      }\n \t\t    else if (w1 > w2)\n \t\t      {\n@@ -3318,10 +3337,16 @@ do_invalidate (basic_block dombb, gimple *phi, bitmap visited, int *count)\n class strlen_dom_walker : public dom_walker\n {\n public:\n-  strlen_dom_walker (cdi_direction direction) : dom_walker (direction) {}\n+  strlen_dom_walker (cdi_direction direction)\n+    : dom_walker (direction), m_cleanup_cfg (false)\n+  {}\n \n   virtual edge before_dom_children (basic_block);\n   virtual void after_dom_children (basic_block);\n+\n+  /* Flag that will trigger TODO_cleanup_cfg to be returned in strlen\n+     execute function.  */\n+  bool m_cleanup_cfg;\n };\n \n /* Callback for walk_dominator_tree.  Attempt to optimize various\n@@ -3399,11 +3424,16 @@ strlen_dom_walker::before_dom_children (basic_block bb)\n \t}\n     }\n \n+  bool cleanup_eh = false;\n+\n   /* Attempt to optimize individual statements.  */\n   for (gimple_stmt_iterator gsi = gsi_start_bb (bb); !gsi_end_p (gsi); )\n-    if (strlen_check_and_optimize_stmt (&gsi))\n+    if (strlen_check_and_optimize_stmt (&gsi, &cleanup_eh))\n       gsi_next (&gsi);\n \n+  if (cleanup_eh && gimple_purge_dead_eh_edges (bb))\n+      m_cleanup_cfg = true;\n+\n   bb->aux = stridx_to_strinfo;\n   if (vec_safe_length (stridx_to_strinfo) && !strinfo_shared ())\n     (*stridx_to_strinfo)[0] = (strinfo *) bb;\n@@ -3477,7 +3507,8 @@ pass_strlen::execute (function *fun)\n \n   /* String length optimization is implemented as a walk of the dominator\n      tree and a forward walk of statements within each block.  */\n-  strlen_dom_walker (CDI_DOMINATORS).walk (fun->cfg->x_entry_block_ptr);\n+  strlen_dom_walker walker (CDI_DOMINATORS);\n+  walker.walk (fun->cfg->x_entry_block_ptr);\n \n   ssa_ver_to_stridx.release ();\n   strinfo_pool.release ();\n@@ -3498,7 +3529,7 @@ pass_strlen::execute (function *fun)\n       strlen_to_stridx = NULL;\n     }\n \n-  return 0;\n+  return walker.m_cleanup_cfg ? TODO_cleanup_cfg : 0;\n }\n \n } // anon namespace"}]}