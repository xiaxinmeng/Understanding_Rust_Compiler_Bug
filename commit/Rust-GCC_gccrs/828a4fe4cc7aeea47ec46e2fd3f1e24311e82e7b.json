{"sha": "828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4YTRmZTRjYzdhZWVhNDdlYzQ2ZTJmZDNmMWUyNDMxMWU4MmU3Yg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2004-08-21T06:49:16Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2004-08-21T06:49:16Z"}, "message": "darwin.c (machopic_indirect_data_reference): Mark stubs as defined.\n\n\t* config/darwin.c (machopic_indirect_data_reference): Mark\n\tstubs as defined.\n\t* config/386/386.c (darwin_local_data_pic): Add.\n\t(legitimate_constant_p): Reorder so that PLUS handling runs\n\tbefore darwin_local_data_pic to match the ordering in\n\tlegitimate_pic_address_disp_p and so that MINUS runs after\n\tdarwin_local_data_pic as otherwise the darwin_local_data_pic\n\tlogic can be skipped, which would be very bad.\n\t(legitimate_pic_address_disp_p): Move from from here to\n\tdarwin_local_data_pic so it can be reused.\n\nFrom-SVN: r86355", "tree": {"sha": "5b9f618d9d0e30a5bb0b28e8547795314514cf27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b9f618d9d0e30a5bb0b28e8547795314514cf27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b/comments", "author": null, "committer": null, "parents": [{"sha": "85b776dff75bd79d649d4125d116fa89bfd10b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b776dff75bd79d649d4125d116fa89bfd10b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b776dff75bd79d649d4125d116fa89bfd10b9e"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "90413bd4b67c38e6eba6d5bf06767ea3024f29a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b", "patch": "@@ -1,3 +1,16 @@\n+2004-08-20  Mike Stump  <mrs@apple.com>\n+\n+\t* config/darwin.c (machopic_indirect_data_reference): Mark\n+\tstubs as defined.\n+\t* config/386/386.c (darwin_local_data_pic): Add.\n+\t(legitimate_constant_p): Reorder so that PLUS handling runs\n+\tbefore darwin_local_data_pic to match the ordering in\n+\tlegitimate_pic_address_disp_p and so that MINUS runs after\n+\tdarwin_local_data_pic as otherwise the darwin_local_data_pic\n+\tlogic can be skipped, which would be very bad.\n+\t(legitimate_pic_address_disp_p): Move from from here to\n+\tdarwin_local_data_pic so it can be reused.\n+\n 2004-08-21  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/linux64.h (DOT_SYMBOLS): Define."}, {"sha": "44c8539f9b70346674103f4f59df678d3b45e1d9", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b", "patch": "@@ -455,13 +455,14 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t  return orig;\n \t}\n \n-      ptr_ref = (gen_rtx_SYMBOL_REF \n+      ptr_ref = (gen_rtx_SYMBOL_REF\n \t\t (Pmode, \n \t\t  machopic_indirection_name (orig, /*stub_p=*/false)));\n \n       SYMBOL_REF_DECL (ptr_ref) = SYMBOL_REF_DECL (orig);\n \n       ptr_ref = gen_const_mem (Pmode, ptr_ref);\n+      machopic_define_symbol (ptr_ref);\n \n       return ptr_ref;\n     }"}, {"sha": "0213239303efbb4f11eff6bde93df37b9dd8ce41", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=828a4fe4cc7aeea47ec46e2fd3f1e24311e82e7b", "patch": "@@ -4791,6 +4791,28 @@ ix86_find_base_term (rtx x)\n \n   return term;\n }\n+\n+/* Allow {LABEL | SYMBOL}_REF - SYMBOL_REF-FOR-PICBASE for Mach-O as\n+   this is used for to form addresses to local data when -fPIC is in\n+   use.  */\n+\n+static bool\n+darwin_local_data_pic (rtx disp)\n+{\n+  if (GET_CODE (disp) == MINUS)\n+    {\n+      if (GET_CODE (XEXP (disp, 0)) == LABEL_REF\n+          || GET_CODE (XEXP (disp, 0)) == SYMBOL_REF)\n+        if (GET_CODE (XEXP (disp, 1)) == SYMBOL_REF)\n+          {\n+            const char *sym_name = XSTR (XEXP (disp, 1), 0);\n+            if (! strcmp (sym_name, \"<pic base>\"))\n+              return true;\n+          }\n+    }\n+\n+  return false;\n+}\n \f\n /* Determine if a given RTX is a valid constant.  We already know this\n    satisfies CONSTANT_P.  */\n@@ -4817,8 +4839,17 @@ legitimate_constant_p (rtx x)\n \t  && tls_symbolic_operand (XEXP (inner, 0), Pmode))\n \treturn false;\n \n-      if (GET_CODE (inner) == PLUS\n-\t  || GET_CODE (inner) == MINUS)\n+      if (GET_CODE (inner) == PLUS)\n+\t{\n+\t  if (GET_CODE (XEXP (inner, 1)) != CONST_INT)\n+\t    return false;\n+\t  inner = XEXP (inner, 0);\n+\t}\n+\n+      if (TARGET_MACHO && darwin_local_data_pic (inner))\n+\treturn true;\n+\n+      if (GET_CODE (inner) == MINUS)\n \t{\n \t  if (GET_CODE (XEXP (inner, 1)) != CONST_INT)\n \t    return false;\n@@ -4966,18 +4997,8 @@ legitimate_pic_address_disp_p (rtx disp)\n       saw_plus = true;\n     }\n \n-  /* Allow {LABEL | SYMBOL}_REF - SYMBOL_REF-FOR-PICBASE for Mach-O.  */\n-  if (TARGET_MACHO && GET_CODE (disp) == MINUS)\n-    {\n-      if (GET_CODE (XEXP (disp, 0)) == LABEL_REF\n-          || GET_CODE (XEXP (disp, 0)) == SYMBOL_REF)\n-        if (GET_CODE (XEXP (disp, 1)) == SYMBOL_REF)\n-          {\n-            const char *sym_name = XSTR (XEXP (disp, 1), 0);\n-            if (! strcmp (sym_name, \"<pic base>\"))\n-              return 1;\n-          }\n-    }\n+  if (TARGET_MACHO && darwin_local_data_pic (disp))\n+    return 1;\n \n   if (GET_CODE (disp) != UNSPEC)\n     return 0;"}]}