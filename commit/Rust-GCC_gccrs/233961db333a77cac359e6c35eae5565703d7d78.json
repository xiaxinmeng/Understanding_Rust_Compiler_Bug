{"sha": "233961db333a77cac359e6c35eae5565703d7d78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMzOTYxZGIzMzNhNzdjYWMzNTllNmMzNWVhZTU1NjU3MDNkN2Q3OA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-05-17T08:25:06Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-05-17T08:25:06Z"}, "message": "re PR fortran/44044 ([OOP] SELECT TYPE with class-valued function)\n\n2010-05-17  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44044\n\t* resolve.c (resolve_fl_var_and_proc): Move error messages here from ...\n\t(resolve_fl_variable_derived): ... this place.\n\t(resolve_symbol): Make sure function symbols (and their result\n\tvariables) are not resolved twice.\n\n\n2010-05-17  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/44044\n\t* gfortran.dg/class_20.f03: New.\n\nFrom-SVN: r159476", "tree": {"sha": "cc125ce7c9d586b49292aa69c4db298e3ae2b543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc125ce7c9d586b49292aa69c4db298e3ae2b543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/233961db333a77cac359e6c35eae5565703d7d78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233961db333a77cac359e6c35eae5565703d7d78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/233961db333a77cac359e6c35eae5565703d7d78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233961db333a77cac359e6c35eae5565703d7d78/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff71b48db05886b0e676598173eb133ac7ba07f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff71b48db05886b0e676598173eb133ac7ba07f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff71b48db05886b0e676598173eb133ac7ba07f1"}], "stats": {"total": 101, "additions": 80, "deletions": 21}, "files": [{"sha": "2bf6b659b65d796c38fae32c58d8ab66f94acafc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233961db333a77cac359e6c35eae5565703d7d78/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233961db333a77cac359e6c35eae5565703d7d78/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=233961db333a77cac359e6c35eae5565703d7d78", "patch": "@@ -1,3 +1,11 @@\n+2010-05-17  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44044\n+\t* resolve.c (resolve_fl_var_and_proc): Move error messages here from ...\n+\t(resolve_fl_variable_derived): ... this place.\n+\t(resolve_symbol): Make sure function symbols (and their result\n+\tvariables) are not resolved twice.\n+\n 2010-05-16  Daniel Franke  <franke.daniel@gmail.com>\n \n         PR fortran/35779"}, {"sha": "d165bd661623bc280d2cc974b05f01c427b6373e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233961db333a77cac359e6c35eae5565703d7d78/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233961db333a77cac359e6c35eae5565703d7d78/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=233961db333a77cac359e6c35eae5565703d7d78", "patch": "@@ -9143,6 +9143,29 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n \t  return FAILURE;\n \t }\n     }\n+\n+  /* Constraints on polymorphic variables.  */\n+  if (sym->ts.type == BT_CLASS && !(sym->result && sym->result != sym))\n+    {\n+      /* F03:C502.  */\n+      if (!gfc_type_is_extensible (sym->ts.u.derived->components->ts.u.derived))\n+\t{\n+\t  gfc_error (\"Type '%s' of CLASS variable '%s' at %L is not extensible\",\n+\t\t     sym->ts.u.derived->components->ts.u.derived->name,\n+\t\t     sym->name, &sym->declared_at);\n+\t  return FAILURE;\n+\t}\n+\n+      /* F03:C509.  */\n+      /* Assume that use associated symbols were checked in the module ns.  */ \n+      if (!sym->attr.class_ok && !sym->attr.use_assoc)\n+\t{\n+\t  gfc_error (\"CLASS variable '%s' at %L must be dummy, allocatable \"\n+\t\t     \"or pointer\", sym->name, &sym->declared_at);\n+\t  return FAILURE;\n+\t}\n+    }\n+    \n   return SUCCESS;\n }\n \n@@ -9194,27 +9217,6 @@ resolve_fl_variable_derived (gfc_symbol *sym, int no_init_flag)\n \t\t\t &sym->declared_at) == FAILURE)\n     return FAILURE;\n \n-  if (sym->ts.type == BT_CLASS)\n-    {\n-      /* C502.  */\n-      if (!gfc_type_is_extensible (sym->ts.u.derived->components->ts.u.derived))\n-\t{\n-\t  gfc_error (\"Type '%s' of CLASS variable '%s' at %L is not extensible\",\n-\t\t     sym->ts.u.derived->components->ts.u.derived->name,\n-\t\t     sym->name, &sym->declared_at);\n-\t  return FAILURE;\n-\t}\n-\n-      /* C509.  */\n-      /* Assume that use associated symbols were checked in the module ns.  */ \n-      if (!sym->attr.class_ok && !sym->attr.use_assoc)\n-\t{\n-\t  gfc_error (\"CLASS variable '%s' at %L must be dummy, allocatable \"\n-\t\t     \"or pointer\", sym->name, &sym->declared_at);\n-\t  return FAILURE;\n-\t}\n-    }\n-\n   /* Assign default initializer.  */\n   if (!(sym->value || sym->attr.pointer || sym->attr.allocatable)\n       && (!no_init_flag || sym->attr.intent == INTENT_OUT))\n@@ -11130,6 +11132,10 @@ resolve_symbol (gfc_symbol *sym)\n   gfc_namespace *ns;\n   gfc_component *c;\n \n+  /* Avoid double resolution of function result symbols.  */\n+  if ((sym->result || sym->attr.result) && (sym->ns != gfc_current_ns))\n+    return;\n+  \n   if (sym->attr.flavor == FL_UNKNOWN)\n     {\n "}, {"sha": "b4d89e027b7d265afbdf59a17b521ff63cb5db93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233961db333a77cac359e6c35eae5565703d7d78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233961db333a77cac359e6c35eae5565703d7d78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=233961db333a77cac359e6c35eae5565703d7d78", "patch": "@@ -1,3 +1,8 @@\n+2010-05-17  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/44044\n+\t* gfortran.dg/class_20.f03: New.\n+\n 2010-05-17  Christian Borntraeger  <borntraeger@de.ibm.com>\n \n         PR 44078"}, {"sha": "1428102e9ffc1b16a39d2f825ca365317b1d8623", "filename": "gcc/testsuite/gfortran.dg/class_20.f03", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233961db333a77cac359e6c35eae5565703d7d78/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_20.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233961db333a77cac359e6c35eae5565703d7d78/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_20.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_20.f03?ref=233961db333a77cac359e6c35eae5565703d7d78", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do compile }\n+!\n+! PR 44044: [OOP] SELECT TYPE with class-valued function\n+! comment #1\n+!\n+! Note: All three error messages are being checked for double occurrence,\n+!       using the trick from PR 30612.\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+\n+implicit none\n+\n+type :: t\n+end type\n+\n+type :: s\n+  sequence\n+end type\n+\n+contains\n+\n+  function fun()  ! { dg-bogus \"must be dummy, allocatable or pointer.*must be dummy, allocatable or pointer\" }\n+    class(t) :: fun\n+  end function\n+ \n+  function fun2()  ! { dg-bogus \"cannot have a deferred shape.*cannot have a deferred shape\" }\n+    integer,dimension(:) :: fun2\n+  end function\n+ \n+  function fun3() result(res)  ! { dg-bogus \"is not extensible.*is not extensible\" }\n+    class(s),pointer :: res\n+  end function\n+\n+end\n+\n+\n+! { dg-error \"must be dummy, allocatable or pointer\" \"\" { target *-*-* } 23 }\n+! { dg-error \"cannot have a deferred shape\"          \"\" { target *-*-* } 27 }\n+! { dg-error \"is not extensible\"                     \"\" { target *-*-* } 31 }"}]}