{"sha": "3e66255c25bd1d3071b93491c3063b8c6cdb109e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U2NjI1NWMyNWJkMWQzMDcxYjkzNDkxYzMwNjNiOGM2Y2RiMTA5ZQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-08-05T13:30:14Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-08-05T13:30:14Z"}, "message": "ipa-cp.c (ipcp_discover_new_direct_edges): New function.\n\n2010-08-05  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-cp.c (ipcp_discover_new_direct_edges): New function.\n\t(ipcp_insert_stage): Redirect only edges not flagged with\n\tindirect_inlining_edge.  Call ipcp_discover_new_direct_edges for all\n\tdiscovered constants.\n\n\t* testsuite/gcc.dg/ipa/ipcp-ii-1.c: New test.\n\t* testsuite/g++.dg/ipa/ipcp-ivi-1.C: Likewise.\n\nFrom-SVN: r162912", "tree": {"sha": "b694bc6d8a03291fbab5555550a69012ef1c2498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b694bc6d8a03291fbab5555550a69012ef1c2498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e66255c25bd1d3071b93491c3063b8c6cdb109e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e66255c25bd1d3071b93491c3063b8c6cdb109e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e66255c25bd1d3071b93491c3063b8c6cdb109e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e66255c25bd1d3071b93491c3063b8c6cdb109e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3949c4a710360edb924d4c88a8974ed0bbfa9f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3949c4a710360edb924d4c88a8974ed0bbfa9f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3949c4a710360edb924d4c88a8974ed0bbfa9f20"}], "stats": {"total": 165, "additions": 163, "deletions": 2}, "files": [{"sha": "1b5c8ad4b24a54f287815ad57320d9844be5d92f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e66255c25bd1d3071b93491c3063b8c6cdb109e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e66255c25bd1d3071b93491c3063b8c6cdb109e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e66255c25bd1d3071b93491c3063b8c6cdb109e", "patch": "@@ -1,3 +1,10 @@\n+2010-08-05  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-cp.c (ipcp_discover_new_direct_edges): New function.\n+\t(ipcp_insert_stage): Redirect only edges not flagged with\n+\tindirect_inlining_edge.  Call ipcp_discover_new_direct_edges for all\n+\tdiscovered constants.\n+\n 2010-08-05  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-prop.h (enum ipa_lattice_type): Changed comments."}, {"sha": "e6c67d62653e8a78f51d8575168e190a8325a07f", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e66255c25bd1d3071b93491c3063b8c6cdb109e/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e66255c25bd1d3071b93491c3063b8c6cdb109e/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=3e66255c25bd1d3071b93491c3063b8c6cdb109e", "patch": "@@ -1269,6 +1269,49 @@ ipcp_const_param_count (struct cgraph_node *node)\n   return const_param;\n }\n \n+/* Given that a formal parameter of NODE given by INDEX is known to be constant\n+   CST, try to find any indirect edges that can be made direct and make them\n+   so.  Note that INDEX is the number the parameter at the time of analyzing\n+   parameter uses and parameter removals should not be considered for it.  (In\n+   fact, the parameter itself has just been removed.)  */\n+\n+static void\n+ipcp_discover_new_direct_edges (struct cgraph_node *node, int index, tree cst)\n+{\n+  struct cgraph_edge *ie, *next_ie;\n+\n+  for (ie = node->indirect_calls; ie; ie = next_ie)\n+    {\n+      struct cgraph_indirect_call_info *ici = ie->indirect_info;\n+\n+      next_ie = ie->next_callee;\n+      if (ici->param_index != index)\n+\tcontinue;\n+\n+      if (ici->polymorphic)\n+\t{\n+\t  tree binfo;\n+\t  HOST_WIDE_INT token;\n+\n+\t  if (TREE_CODE (cst) != ADDR_EXPR)\n+\t    continue;\n+\n+\t  binfo = gimple_get_relevant_ref_binfo (TREE_OPERAND (cst, 0),\n+\t\t\t\t\t\t NULL_TREE);\n+\t  if (!binfo)\n+\t    continue;\n+\t  gcc_assert (ie->indirect_info->anc_offset == 0);\n+\t  token = ie->indirect_info->otr_token;\n+\t  cst = gimple_fold_obj_type_ref_known_binfo (token, binfo);\n+\t  if (!cst)\n+\t    continue;\n+\t}\n+\n+      ipa_make_edge_direct_to_target (ie, cst);\n+    }\n+}\n+\n+\n /* Propagate the constant parameters found by ipcp_iterate_stage()\n    to the function's code.  */\n static void\n@@ -1390,7 +1433,8 @@ ipcp_insert_stage (void)\n \tnode_callers++;\n       redirect_callers = VEC_alloc (cgraph_edge_p, heap, node_callers);\n       for (cs = node->callers; cs != NULL; cs = cs->next_caller)\n-\tVEC_quick_push (cgraph_edge_p, redirect_callers, cs);\n+\tif (!cs->indirect_inlining_edge)\n+\t  VEC_quick_push (cgraph_edge_p, redirect_callers, cs);\n \n       /* Redirecting all the callers of the node to the\n          new versioned node.  */\n@@ -1410,7 +1454,13 @@ ipcp_insert_stage (void)\n \t\t cgraph_node_name (node), (int)growth, (int)new_size);\n       ipcp_init_cloned_node (node, node1);\n \n-      /* TODO: We can use indirect inlning info to produce new calls.  */\n+      info = IPA_NODE_REF (node);\n+      for (i = 0; i < count; i++)\n+\t{\n+\t  struct ipcp_lattice *lat = ipcp_get_lattice (info, i);\n+\t  if (lat->type == IPA_CONST_VALUE)\n+\t    ipcp_discover_new_direct_edges (node1, i, lat->constant);\n+        }\n \n       if (dump_file)\n \tdump_function_to_file (node1->decl, dump_file, dump_flags);"}, {"sha": "47bcfc9f53643a1ff2dfb3a2c1bdf8dd1f9d9087", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e66255c25bd1d3071b93491c3063b8c6cdb109e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e66255c25bd1d3071b93491c3063b8c6cdb109e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e66255c25bd1d3071b93491c3063b8c6cdb109e", "patch": "@@ -1,3 +1,8 @@\n+2010-08-05  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/ipcp-ii-1.c: New test.\n+\t* g++.dg/ipa/ipcp-ivi-1.C: Likewise.\n+\n 2010-08-05  Martin Jambor  <mjambor@suse.cz>\n \n \t* g++.dg/ipa/devirt-1.C: New test."}, {"sha": "5b12a15c086931826e6bfea5529eea3ec0642056", "filename": "gcc/testsuite/g++.dg/ipa/ipcp-ivi-1.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e66255c25bd1d3071b93491c3063b8c6cdb109e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipcp-ivi-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e66255c25bd1d3071b93491c3063b8c6cdb109e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipcp-ivi-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fipcp-ivi-1.C?ref=3e66255c25bd1d3071b93491c3063b8c6cdb109e", "patch": "@@ -0,0 +1,65 @@\n+/* Verify that simple virtual calls are inlined even without early\n+   inlining.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining\"  } */\n+\n+extern \"C\" void abort (void);\n+\n+class A\n+{\n+public:\n+  int data;\n+  virtual int foo (int i);\n+};\n+\n+class B : public A\n+{\n+public:\n+  virtual int foo (int i);\n+};\n+\n+class C : public A\n+{\n+public:\n+  virtual int foo (int i);\n+};\n+\n+int A::foo (int i)\n+{\n+  return i + 1;\n+}\n+\n+int B::foo (int i)\n+{\n+  return i + 2;\n+}\n+\n+int C::foo (int i)\n+{\n+  return i + 3;\n+}\n+\n+int __attribute__ ((noinline)) middleman (class A *obj, int i)\n+{\n+  return obj->foo (i);\n+}\n+\n+int __attribute__ ((noinline,noclone)) get_input(void)\n+{\n+  return 1;\n+}\n+\n+class B b;\n+\n+int main (int argc, char *argv[])\n+{\n+  int i;\n+\n+  for (i = 0; i < get_input (); i++)\n+    if (middleman (&b, get_input ()) != 3)\n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"B::foo\\[^\\\\n\\]*inline copy in int.*middleman\"  \"inline\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"inline\" } } */"}, {"sha": "9caa54beb792984b0e96b5ae87dad8e9f2a50714", "filename": "gcc/testsuite/gcc.dg/ipa/ipcp-ii-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e66255c25bd1d3071b93491c3063b8c6cdb109e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-ii-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e66255c25bd1d3071b93491c3063b8c6cdb109e/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-ii-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipcp-ii-1.c?ref=3e66255c25bd1d3071b93491c3063b8c6cdb109e", "patch": "@@ -0,0 +1,34 @@\n+/* Verify that simple indirect calls are inlined even without early\n+   inlining..  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -c -fdump-ipa-inline -fno-early-inlining\"  } */\n+\n+extern void non_existent(int);\n+extern void non_existent(int);\n+\n+static void hooray ()\n+{\n+  non_existent (1);\n+}\n+\n+static void  __attribute__ ((noinline)) hiphip (void (*f)())\n+{\n+  f ();\n+}\n+\n+int __attribute__ ((noinline,noclone)) get_input(void)\n+{\n+  return 1;\n+}\n+\n+int main (int argc, int *argv[])\n+{\n+  int i;\n+\n+  for (i = 0; i < get_input (); i++)\n+    hiphip (hooray);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"hooray\\[^\\\\n\\]*inline copy in hiphip.constprop\"  \"inline\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"inline\" } } */"}]}