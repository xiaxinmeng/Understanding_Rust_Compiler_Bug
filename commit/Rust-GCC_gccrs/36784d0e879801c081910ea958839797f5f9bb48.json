{"sha": "36784d0e879801c081910ea958839797f5f9bb48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY3ODRkMGU4Nzk4MDFjMDgxOTEwZWE5NTg4Mzk3OTdmNWY5YmI0OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-10-19T15:36:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-10-19T15:36:05Z"}, "message": "re PR middle-end/33816 (gimplification before build_array_type re-set alias set of arrays to zero)\n\n2007-10-19  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/33816\n\tPR middle-end/32921\n\t* stor-layout.c (layout_type): Assert that aggregates do not\n\thave their alias sets set.\n\t* alias.c (get_alias_set): Return alias set zero for incomplete\n\ttypes, return the alias set of the element for incomplete array\n\ttypes, but do not remember these.\n\n\t* gfortran.dg/pr32921.f: New testcase.\n\nFrom-SVN: r129491", "tree": {"sha": "9af82af05ff6db994ce02d04b87bc63d05a986ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9af82af05ff6db994ce02d04b87bc63d05a986ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36784d0e879801c081910ea958839797f5f9bb48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36784d0e879801c081910ea958839797f5f9bb48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36784d0e879801c081910ea958839797f5f9bb48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36784d0e879801c081910ea958839797f5f9bb48/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77aadb572826ca8b23ea61ab6ce186f9af1cbe08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77aadb572826ca8b23ea61ab6ce186f9af1cbe08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77aadb572826ca8b23ea61ab6ce186f9af1cbe08"}], "stats": {"total": 88, "additions": 81, "deletions": 7}, "files": [{"sha": "f55390257bfc70b61de6eb397dd7ddb2674dfb5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36784d0e879801c081910ea958839797f5f9bb48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36784d0e879801c081910ea958839797f5f9bb48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36784d0e879801c081910ea958839797f5f9bb48", "patch": "@@ -1,3 +1,13 @@\n+2007-10-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/33816\n+\tPR middle-end/32921\n+\t* stor-layout.c (layout_type): Assert that aggregates do not\n+\thave their alias sets set.\n+\t* alias.c (get_alias_set): Return alias set zero for incomplete\n+\ttypes, return the alias set of the element for incomplete array\n+\ttypes, but do not remember these.\n+\n 2007-10-19  Richard Guenther  <rguenther@suse.de>\n \n \tRevert"}, {"sha": "6bf67f3574ff332066c1cb1b505feb725c3e4680", "filename": "gcc/alias.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36784d0e879801c081910ea958839797f5f9bb48/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36784d0e879801c081910ea958839797f5f9bb48/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=36784d0e879801c081910ea958839797f5f9bb48", "patch": "@@ -611,6 +611,18 @@ get_alias_set (tree t)\n   if (TYPE_ALIAS_SET_KNOWN_P (t))\n     return TYPE_ALIAS_SET (t);\n \n+  /* We don't want to set TYPE_ALIAS_SET for incomplete types.  */\n+  if (!COMPLETE_TYPE_P (t))\n+    {\n+      /* For arrays with unknown size the conservative answer is the\n+\t alias set of the element type.  */\n+      if (TREE_CODE (t) == ARRAY_TYPE)\n+\treturn get_alias_set (TREE_TYPE (t));\n+\n+      /* But return zero as a conservative answer for incomplete types.  */\n+      return 0;\n+    }\n+\n   /* See if the language has special handling for this type.  */\n   set = lang_hooks.get_alias_set (t);\n   if (set != -1)"}, {"sha": "23e0cf5549e146c1539859e47340f40521c20f68", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36784d0e879801c081910ea958839797f5f9bb48/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36784d0e879801c081910ea958839797f5f9bb48/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=36784d0e879801c081910ea958839797f5f9bb48", "patch": "@@ -1886,13 +1886,10 @@ layout_type (tree type)\n       && TREE_CODE (type) != QUAL_UNION_TYPE)\n     finalize_type_size (type);\n \n-  /* If an alias set has been set for this aggregate when it was incomplete,\n-     force it into alias set 0.\n-     This is too conservative, but we cannot call record_component_aliases\n-     here because some frontends still change the aggregates after\n-     layout_type.  */\n-  if (AGGREGATE_TYPE_P (type) && TYPE_ALIAS_SET_KNOWN_P (type))\n-    TYPE_ALIAS_SET (type) = 0;\n+  /* We should never see alias sets on incomplete aggregates.  And we\n+     should not call layout_type on not incomplete aggregates.  */\n+  if (AGGREGATE_TYPE_P (type))\n+    gcc_assert (!TYPE_ALIAS_SET_KNOWN_P (type));\n }\n \f\n /* Create and return a type for signed integers of PRECISION bits.  */"}, {"sha": "0c8d4cadd9f79ae1edd1a616b40a331e0f24f0f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36784d0e879801c081910ea958839797f5f9bb48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36784d0e879801c081910ea958839797f5f9bb48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36784d0e879801c081910ea958839797f5f9bb48", "patch": "@@ -1,3 +1,9 @@\n+2007-10-19  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/33816\n+\tPR middle-end/32921\n+\t* gfortran.dg/pr32921.f: New testcase.\n+\n 2007-10-19  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/33544"}, {"sha": "d11030125bfabe2080b5651e129db2130db58b09", "filename": "gcc/testsuite/gfortran.dg/pr32921.f", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36784d0e879801c081910ea958839797f5f9bb48/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32921.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36784d0e879801c081910ea958839797f5f9bb48/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32921.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32921.f?ref=36784d0e879801c081910ea958839797f5f9bb48", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+! { dg-options \"-O2 -fdump-tree-lim\" }\n+! gfortran -c -m32 -O2 -S junk.f\n+!\n+      MODULE LES3D_DATA\n+\n+      IMPLICIT REAL*8 (A-H,O-Z)\n+\n+      PARAMETER ( NSPECI = 1, ND = 7 + NSPECI )\n+\n+      INTEGER IMAX\n+\n+      DOUBLE PRECISION,ALLOCATABLE,DIMENSION(:,:,:) ::\n+     >         UAV,QAV\n+\n+\n+      END MODULE LES3D_DATA\n+!---------------------------------------------------------------------\n+!------------------------------------------------------------------------\n+      SUBROUTINE FLUXI()\n+\n+      USE LES3D_DATA\n+      IMPLICIT REAL*8(A-H,O-Z)\n+\n+      ALLOCATABLE QS(:)\n+\n+      ALLOCATE( QS(0:IMAX))\n+      QS=0D0\n+\n+      RETURN\n+      END\n+!------------------------------------------------------------------------\n+!------------------------------------------------------------------------\n+      SUBROUTINE EXTRAPI()\n+\n+      USE LES3D_DATA\n+      IMPLICIT REAL*8(A-H,O-Z)\n+\n+      I1 = 0\n+      I2 = IMAX - 1\n+\n+            DO I = I1, I2\n+               UAV(I,1,2) = QAV(I,1,2)\n+            END DO\n+\n+      RETURN\n+      END\n+! { dg-final { scan-tree-dump-times \"stride\" 6 \"lim\" } }\n+! { dg-final { cleanup-tree-dump \"lim\" } }"}]}