{"sha": "2b9d17c73c1b69e3e61a010ce31723338713a02d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI5ZDE3YzczYzFiNjllM2U2MWEwMTBjZTMxNzIzMzM4NzEzYTAyZA==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cambridge.redhat.com", "date": "2001-07-24T15:25:51Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2001-07-24T15:25:51Z"}, "message": "sh.c (barrier_align): Check that an operand really is an insn before extracting its INSN_CODE.\n\n2001-07-18  Andrew Haley  <aph@cambridge.redhat.com>\n\n        * config/sh/sh.c (barrier_align): Check that an operand really is\n        an insn before extracting its INSN_CODE.\n\nFrom-SVN: r44303", "tree": {"sha": "12a74f32067a0a22ece4d83fc4ae3a800b22a6d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12a74f32067a0a22ece4d83fc4ae3a800b22a6d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b9d17c73c1b69e3e61a010ce31723338713a02d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9d17c73c1b69e3e61a010ce31723338713a02d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b9d17c73c1b69e3e61a010ce31723338713a02d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b9d17c73c1b69e3e61a010ce31723338713a02d/comments", "author": null, "committer": null, "parents": [{"sha": "41971242ccca8d431b01c3aadf36ab3867f86ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41971242ccca8d431b01c3aadf36ab3867f86ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41971242ccca8d431b01c3aadf36ab3867f86ab7"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "bea9ac4eb83d8ad2a8ededa9c78d6ba6770bae21", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9d17c73c1b69e3e61a010ce31723338713a02d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9d17c73c1b69e3e61a010ce31723338713a02d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b9d17c73c1b69e3e61a010ce31723338713a02d", "patch": "@@ -1,3 +1,8 @@\n+2001-07-18  Andrew Haley  <aph@cambridge.redhat.com>\n+\n+        * config/sh/sh.c (barrier_align): Check that an operand really is\n+        an insn before extracting its INSN_CODE.\n+\n 2001-07-24  Andrew Haley  <aph@cambridge.redhat.com>\n \n \t* config/sh/sh.h (OVERRIDE_OPTIONS): Add braces to get rid of"}, {"sha": "a9813697501d78e8827c135429e97ec1f624f247", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b9d17c73c1b69e3e61a010ce31723338713a02d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b9d17c73c1b69e3e61a010ce31723338713a02d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=2b9d17c73c1b69e3e61a010ce31723338713a02d", "patch": "@@ -2956,28 +2956,32 @@ barrier_align (barrier_or_label)\n \t}\n       if (prev\n \t  && GET_CODE (prev) == JUMP_INSN\n-\t  && JUMP_LABEL (prev)\n-\t  && (jump_to_next || next_real_insn (JUMP_LABEL (prev)) == next\n+\t  && JUMP_LABEL (prev))\n+\t{\n+\t  rtx x;\n+\t  if (jump_to_next \n+\t      || next_real_insn (JUMP_LABEL (prev)) == next\n \t      /* If relax_delay_slots() decides NEXT was redundant\n \t\t with some previous instruction, it will have\n \t\t redirected PREV's jump to the following insn.  */\n \t      || JUMP_LABEL (prev) == next_nonnote_insn (next)\n \t      /* There is no upper bound on redundant instructions that\n-\t\t might have been skipped, but we must not put an alignment\n-\t\t where none had been before.  */\n-\t      || (INSN_CODE (NEXT_INSN (NEXT_INSN (PREV_INSN (prev))))\n-\t\t  == CODE_FOR_block_branch_redirect)\n-\t      || (INSN_CODE (NEXT_INSN (NEXT_INSN (PREV_INSN (prev))))\n-\t\t  == CODE_FOR_indirect_jump_scratch)))\n-\t{\n-\t  rtx pat = PATTERN (prev);\n-\t  if (GET_CODE (pat) == PARALLEL)\n-\t    pat = XVECEXP (pat, 0, 0);\n-\t  if (credit - slot >= (GET_CODE (SET_SRC (pat)) == PC ? 2 : 0))\n-\t    return 0;\n-\t}\n+\t\t might have been skipped, but we must not put an\n+\t\t alignment where none had been before.  */\n+\t      || (x = (NEXT_INSN (NEXT_INSN (PREV_INSN (prev)))),\t    \n+\t\t  (INSN_P (x) \n+\t\t   && (INSN_CODE (x) == CODE_FOR_block_branch_redirect\n+\t\t       || INSN_CODE (x) == CODE_FOR_indirect_jump_scratch))))\n+\t    {\n+\t      rtx pat = PATTERN (prev);\n+\t      if (GET_CODE (pat) == PARALLEL)\n+\t      pat = XVECEXP (pat, 0, 0);\n+\t      if (credit - slot >= (GET_CODE (SET_SRC (pat)) == PC ? 2 : 0))\n+\t\treturn 0;\n+\t    }\n+\t}     \n     }\n-\n+  \n   return CACHE_LOG;\n }\n "}]}