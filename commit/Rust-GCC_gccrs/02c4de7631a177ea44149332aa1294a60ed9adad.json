{"sha": "02c4de7631a177ea44149332aa1294a60ed9adad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJjNGRlNzYzMWExNzdlYTQ0MTQ5MzMyYWExMjk0YTYwZWQ5YWRhZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-10-28T23:46:09Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-10-28T23:46:09Z"}, "message": "PR tree-optimization/92226 - live nul char store to array eliminated\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/92226\n\t* gcc.dg/strlenopt-88.c: New test.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/92226\n\t* tree-ssa-strlen.c (compare_nonzero_chars): Return -1 also when\n\tthe offset is in the open range outlined by SI's length.\n\nFrom-SVN: r277545", "tree": {"sha": "42ae1d041a7a04aa7f3c1fe8003efd45ff7da865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42ae1d041a7a04aa7f3c1fe8003efd45ff7da865"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02c4de7631a177ea44149332aa1294a60ed9adad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02c4de7631a177ea44149332aa1294a60ed9adad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02c4de7631a177ea44149332aa1294a60ed9adad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02c4de7631a177ea44149332aa1294a60ed9adad/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad1539d5555a161cf6851de8995641d6dfe792d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1539d5555a161cf6851de8995641d6dfe792d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1539d5555a161cf6851de8995641d6dfe792d9"}], "stats": {"total": 226, "additions": 221, "deletions": 5}, "files": [{"sha": "3f4f2dc356bcae49b3735003db4c388d225db402", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c4de7631a177ea44149332aa1294a60ed9adad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c4de7631a177ea44149332aa1294a60ed9adad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02c4de7631a177ea44149332aa1294a60ed9adad", "patch": "@@ -1,3 +1,9 @@\n+2019-10-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/92226\n+\t* tree-ssa-strlen.c (compare_nonzero_chars): Return -1 also when\n+\tthe offset is in the open range outlined by SI's length.\n+\n 2019-10-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/66970"}, {"sha": "8f9859f6b2230106afecd809faa461dbd0dd2a12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c4de7631a177ea44149332aa1294a60ed9adad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c4de7631a177ea44149332aa1294a60ed9adad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02c4de7631a177ea44149332aa1294a60ed9adad", "patch": "@@ -1,3 +1,8 @@\n+2019-10-28  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/92226\n+\t* gcc.dg/strlenopt-88.c: New test.\n+\n 2019-10-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/66970"}, {"sha": "cadd0defa7cd3679af3941a5227f54cd168aa944", "filename": "gcc/testsuite/gcc.dg/strlenopt-88.c", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c4de7631a177ea44149332aa1294a60ed9adad/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-88.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c4de7631a177ea44149332aa1294a60ed9adad/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-88.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-88.c?ref=02c4de7631a177ea44149332aa1294a60ed9adad", "patch": "@@ -0,0 +1,196 @@\n+/* PR tree-optimization/92226 - live nul char store to array eliminated\n+   { dg-do run }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#include \"strlenopt.h\"\n+\n+#define NOIPA __attribute__ ((noipa))\n+\n+unsigned nfails;\n+\n+char a[8];\n+\n+void test (int line, const char *func, size_t expect)\n+{\n+  size_t len = strlen (a);\n+  if (len == expect)\n+    return;\n+\n+  ++nfails;\n+\n+  __builtin_printf (\"assertion failed in %s on line %i: \"\n+\t\t    \"strlen (\\\"%s\\\") == %zu, got %zu\\n\",\n+\t\t    func, line, a, expect, len);\n+}\n+\n+NOIPA const char* str (size_t n)\n+{\n+  return \"9876543210\" + 10 - n;\n+}\n+\n+#define T(name, CMPEXP, LEN, IDX, EXPECT)\t\\\n+  NOIPA static void name (void)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    const char *s = str (LEN);\t\t\t\\\n+    if (strlen (s) CMPEXP)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tstrcpy (a, s);\t\t\t\t\\\n+\ta[IDX] = 0;\t\t\t\t\\\n+\ttest (__LINE__, #name, EXPECT);\t\t\\\n+      }\t\t\t\t\t\t\\\n+  } typedef void dummy_type\n+\n+\n+T (len_eq_1_store_nul_0, == 1, 1, 0, 0);\n+T (len_eq_1_store_nul_1, == 1, 1, 1, 1);\n+T (len_eq_1_store_nul_2, == 1, 1, 2, 1);\n+T (len_eq_1_store_nul_3, == 1, 1, 3, 1);\n+T (len_eq_1_store_nul_4, == 1, 1, 4, 1);\n+\n+T (len_eq_2_store_nul_0, == 2, 2, 0, 0);\n+T (len_eq_2_store_nul_1, == 2, 2, 1, 1);\n+T (len_eq_2_store_nul_2, == 2, 2, 2, 2);\n+T (len_eq_2_store_nul_3, == 2, 2, 3, 2);\n+T (len_eq_2_store_nul_4, == 2, 2, 4, 2);\n+\n+T (len_eq_3_store_nul_0, == 3, 3, 0, 0);\n+T (len_eq_3_store_nul_1, == 3, 3, 1, 1);\n+T (len_eq_3_store_nul_2, == 3, 3, 2, 2);\n+T (len_eq_3_store_nul_3, == 3, 3, 3, 3);\n+T (len_eq_3_store_nul_4, == 3, 3, 4, 3);\n+\n+\n+T (len_gt_1_store_nul_0, > 2, 2, 0, 0);\n+T (len_gt_1_store_nul_1, > 2, 2, 1, 1);\n+T (len_gt_1_store_nul_2, > 2, 2, 2, 2);\n+T (len_gt_1_store_nul_3, > 2, 2, 3, 2);\n+T (len_gt_1_store_nul_4, > 2, 2, 4, 2);\n+\n+T (len_gt_2_store_nul_0, > 2, 3, 0, 0);\n+T (len_gt_2_store_nul_1, > 2, 3, 1, 1);\n+T (len_gt_2_store_nul_2, > 2, 3, 2, 2);\n+T (len_gt_2_store_nul_3, > 2, 3, 3, 3);\n+T (len_gt_2_store_nul_4, > 2, 3, 4, 3);\n+\n+T (len_gt_3_store_nul_0, > 2, 4, 0, 0);\n+T (len_gt_3_store_nul_1, > 2, 4, 1, 1);\n+T (len_gt_3_store_nul_2, > 2, 4, 2, 2);\n+T (len_gt_3_store_nul_3, > 2, 4, 3, 3);\n+T (len_gt_3_store_nul_4, > 2, 4, 4, 4);\n+\n+\n+T (len_1_lt_4_store_nul_0, < 4, 1, 0, 0);\n+T (len_1_lt_4_store_nul_1, < 4, 1, 1, 1);\n+T (len_1_lt_4_store_nul_2, < 4, 1, 2, 1);\n+T (len_1_lt_4_store_nul_3, < 4, 1, 3, 1);\n+T (len_1_lt_4_store_nul_4, < 4, 1, 4, 1);\n+T (len_1_lt_4_store_nul_5, < 4, 1, 5, 1);\n+T (len_1_lt_4_store_nul_6, < 4, 1, 6, 1);\n+T (len_1_lt_4_store_nul_7, < 4, 1, 7, 1);\n+\n+T (len_2_lt_4_store_nul_0, < 4, 2, 0, 0);\n+T (len_2_lt_4_store_nul_1, < 4, 2, 1, 1);\n+T (len_2_lt_4_store_nul_2, < 4, 2, 2, 2);\n+T (len_2_lt_4_store_nul_3, < 4, 2, 3, 2);\n+T (len_2_lt_4_store_nul_4, < 4, 2, 4, 2);\n+T (len_2_lt_4_store_nul_5, < 4, 2, 5, 2);\n+T (len_2_lt_4_store_nul_6, < 4, 2, 6, 2);\n+T (len_2_lt_4_store_nul_7, < 4, 2, 7, 2);\n+\n+T (len_3_lt_4_store_nul_0, < 4, 3, 0, 0);\n+T (len_3_lt_4_store_nul_1, < 4, 3, 1, 1);\n+T (len_3_lt_4_store_nul_2, < 4, 3, 2, 2);\n+T (len_3_lt_4_store_nul_3, < 4, 3, 3, 3);\n+T (len_3_lt_4_store_nul_4, < 4, 3, 4, 3);\n+T (len_3_lt_4_store_nul_5, < 4, 3, 5, 3);\n+T (len_3_lt_4_store_nul_6, < 4, 3, 6, 3);\n+T (len_3_lt_4_store_nul_7, < 4, 3, 7, 3);\n+\n+T (len_7_lt_8_store_nul_0, < 8, 7, 0, 0);\n+T (len_7_lt_8_store_nul_1, < 8, 7, 1, 1);\n+T (len_7_lt_8_store_nul_2, < 8, 7, 2, 2);\n+T (len_7_lt_8_store_nul_3, < 8, 7, 3, 3);\n+T (len_7_lt_8_store_nul_4, < 8, 7, 4, 4);\n+T (len_7_lt_8_store_nul_5, < 8, 7, 5, 5);\n+T (len_7_lt_8_store_nul_6, < 8, 7, 6, 6);\n+T (len_7_lt_8_store_nul_7, < 8, 7, 7, 7);\n+\n+\n+int main (void)\n+{\n+  len_eq_1_store_nul_0 ();\n+  len_eq_1_store_nul_1 ();\n+  len_eq_1_store_nul_2 ();\n+  len_eq_1_store_nul_3 ();\n+  len_eq_1_store_nul_4 ();\n+\n+  len_eq_2_store_nul_0 ();\n+  len_eq_2_store_nul_1 ();\n+  len_eq_2_store_nul_2 ();\n+  len_eq_2_store_nul_3 ();\n+  len_eq_2_store_nul_4 ();\n+\n+  len_eq_3_store_nul_0 ();\n+  len_eq_3_store_nul_1 ();\n+  len_eq_3_store_nul_2 ();\n+  len_eq_3_store_nul_3 ();\n+  len_eq_3_store_nul_4 ();\n+\n+\n+  len_gt_1_store_nul_0 ();\n+  len_gt_1_store_nul_1 ();\n+  len_gt_1_store_nul_2 ();\n+  len_gt_1_store_nul_3 ();\n+  len_gt_1_store_nul_4 ();\n+\n+  len_gt_2_store_nul_0 ();\n+  len_gt_2_store_nul_1 ();\n+  len_gt_2_store_nul_2 ();\n+  len_gt_2_store_nul_3 ();\n+  len_gt_2_store_nul_4 ();\n+\n+  len_gt_3_store_nul_0 ();\n+  len_gt_3_store_nul_1 ();\n+  len_gt_3_store_nul_2 ();\n+  len_gt_3_store_nul_3 ();\n+  len_gt_3_store_nul_4 ();\n+\n+  len_1_lt_4_store_nul_0 ();\n+  len_1_lt_4_store_nul_1 ();\n+  len_1_lt_4_store_nul_2 ();\n+  len_1_lt_4_store_nul_3 ();\n+  len_1_lt_4_store_nul_4 ();\n+  len_1_lt_4_store_nul_5 ();\n+  len_1_lt_4_store_nul_6 ();\n+  len_1_lt_4_store_nul_7 ();\n+\n+  len_2_lt_4_store_nul_0 ();\n+  len_2_lt_4_store_nul_1 ();\n+  len_2_lt_4_store_nul_2 ();\n+  len_2_lt_4_store_nul_3 ();\n+  len_2_lt_4_store_nul_4 ();\n+  len_2_lt_4_store_nul_5 ();\n+  len_2_lt_4_store_nul_6 ();\n+  len_2_lt_4_store_nul_7 ();\n+\n+  len_3_lt_4_store_nul_0 ();\n+  len_3_lt_4_store_nul_1 ();\n+  len_3_lt_4_store_nul_2 ();\n+  len_3_lt_4_store_nul_3 ();\n+  len_3_lt_4_store_nul_4 ();\n+  len_3_lt_4_store_nul_5 ();\n+  len_3_lt_4_store_nul_6 ();\n+  len_3_lt_4_store_nul_7 ();\n+\n+  len_7_lt_8_store_nul_0 ();\n+  len_7_lt_8_store_nul_1 ();\n+  len_7_lt_8_store_nul_2 ();\n+  len_7_lt_8_store_nul_3 ();\n+  len_7_lt_8_store_nul_4 ();\n+  len_7_lt_8_store_nul_5 ();\n+  len_7_lt_8_store_nul_6 ();\n+  len_7_lt_8_store_nul_7 ();\n+\n+  if (nfails)\n+    abort ();\n+}"}, {"sha": "476bcf662366f8984ec602013d83e323e3edf91e", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02c4de7631a177ea44149332aa1294a60ed9adad/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02c4de7631a177ea44149332aa1294a60ed9adad/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=02c4de7631a177ea44149332aa1294a60ed9adad", "patch": "@@ -193,10 +193,11 @@ static void handle_builtin_stxncpy (built_in_function, gimple_stmt_iterator *);\n \n    *  +1  if SI is known to start with more than OFF nonzero characters.\n \n-   *   0  if SI is known to start with OFF nonzero characters,\n-\t  but is not known to start with more.\n+   *   0  if SI is known to start with exactly OFF nonzero characters.\n \n-   *  -1  if SI might not start with OFF nonzero characters.  */\n+   *  -1  if SI either does not start with OFF nonzero characters\n+\t  or the relationship between the number of leading nonzero\n+\t  characters in SI and OFF is unknown.  */\n \n static inline int\n compare_nonzero_chars (strinfo *si, unsigned HOST_WIDE_INT off)\n@@ -221,7 +222,7 @@ compare_nonzero_chars (strinfo *si, unsigned HOST_WIDE_INT off,\n   if (TREE_CODE (si->nonzero_chars) == INTEGER_CST)\n     return compare_tree_int (si->nonzero_chars, off);\n \n-  if (TREE_CODE (si->nonzero_chars) != SSA_NAME)\n+  if (!rvals || TREE_CODE (si->nonzero_chars) != SSA_NAME)\n     return -1;\n \n   const value_range *vr\n@@ -232,7 +233,15 @@ compare_nonzero_chars (strinfo *si, unsigned HOST_WIDE_INT off,\n   if (rng != VR_RANGE || !range_int_cst_p (vr))\n     return -1;\n \n-  return compare_tree_int (vr->min (), off);\n+  /* If the offset is less than the minimum length or if the bounds\n+     of the length range are equal return the result of the comparison\n+     same as in the constant case.  Otherwise return a conservative\n+     result.  */\n+  int cmpmin = compare_tree_int (vr->min (), off);\n+  if (cmpmin > 0 || tree_int_cst_equal (vr->min (), vr->max ()))\n+    return cmpmin;\n+\n+  return -1;\n }\n \n /* Return true if SI is known to be a zero-length string.  */"}]}