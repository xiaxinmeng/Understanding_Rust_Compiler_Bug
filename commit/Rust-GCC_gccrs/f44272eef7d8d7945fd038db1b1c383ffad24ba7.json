{"sha": "f44272eef7d8d7945fd038db1b1c383ffad24ba7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ0MjcyZWVmN2Q4ZDc5NDVmZDAzOGRiMWIxYzM4M2ZmYWQyNGJhNw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-06-17T02:46:43Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-06-17T02:46:43Z"}, "message": "tree-ssa-pre.c (compute_avail): Value number uses as well.\n\n2004-06-16  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-pre.c (compute_avail): Value number uses as well.\n\tStrip useless type conversions.\n\tCasts have to be treated slightly different than normal unaries.\n\nFrom-SVN: r83283", "tree": {"sha": "fa84e161bef2c2a8adeb31d65e9134b4edb13980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa84e161bef2c2a8adeb31d65e9134b4edb13980"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f44272eef7d8d7945fd038db1b1c383ffad24ba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44272eef7d8d7945fd038db1b1c383ffad24ba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f44272eef7d8d7945fd038db1b1c383ffad24ba7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f44272eef7d8d7945fd038db1b1c383ffad24ba7/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5882f0f31a400e94182c921c39fb4ddd9781517e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5882f0f31a400e94182c921c39fb4ddd9781517e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5882f0f31a400e94182c921c39fb4ddd9781517e"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "444496772a5831a89677a223c16c3ca5b4ed0bbb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44272eef7d8d7945fd038db1b1c383ffad24ba7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44272eef7d8d7945fd038db1b1c383ffad24ba7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f44272eef7d8d7945fd038db1b1c383ffad24ba7", "patch": "@@ -1,3 +1,9 @@\n+2004-06-16  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-pre.c (compute_avail): Value number uses as well.\n+\tStrip useless type conversions.\n+\tCasts have to be treated slightly different than normal unaries.\n+\n 2004-06-16  Richard Henderson  <rth@redhat.com>\n \n \t* c-common.def (COMPOUND_STMT): Remove."}, {"sha": "fe7738c185da8b2ee734a941405bde7b6c403340", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f44272eef7d8d7945fd038db1b1c383ffad24ba7/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f44272eef7d8d7945fd038db1b1c383ffad24ba7/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=f44272eef7d8d7945fd038db1b1c383ffad24ba7", "patch": "@@ -1637,6 +1637,16 @@ compute_avail (basic_block block)\n \t\t  insert_into_set (TMP_GEN (block), def);\n \t\t  value_insert_into_set (AVAIL_OUT (block), def);\n \t\t}\n+\t      for (j = 0; j < NUM_USES (STMT_USE_OPS (stmt)); j++)\n+\t\t{\n+\t\t  tree use = USE_OP (STMT_USE_OPS (stmt), j);\n+\t\t  if (TREE_CODE (use) == SSA_NAME)\n+\t\t    {\n+\t\t      lookup_or_add (value_table, use);\n+\t\t      insert_into_set (TMP_GEN (block), use);\n+\t\t      value_insert_into_set (AVAIL_OUT (block), use);\n+\t\t    }\n+\t\t}\n \t      continue;\n \t    }\n \t  else if (TREE_CODE (stmt) == RETURN_EXPR\n@@ -1652,6 +1662,7 @@ compute_avail (basic_block block)\n \t      if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (op0))\n \t\tcontinue;\n \t      op1 = TREE_OPERAND (stmt, 1);\n+\t      STRIP_USELESS_TYPE_CONVERSION (op1);\n \t      if (TREE_CODE_CLASS (TREE_CODE (op1)) == 'c')\n \t\t{\n \t\t  add (value_table, op0, lookup_or_add (value_table, op1));\n@@ -1682,7 +1693,8 @@ compute_avail (basic_block block)\n \t\t  insert_into_set (TMP_GEN (block), op0);\n \t\t  value_insert_into_set (AVAIL_OUT (block), op0);  \n \t\t}\n-\t      else if (TREE_CODE_CLASS (TREE_CODE (op1)) == '1')\n+\t      else if (TREE_CODE_CLASS (TREE_CODE (op1)) == '1'\n+\t\t       && !is_gimple_cast (op1))\n \t\t{\n \t\t  tree uop;\n \t\t  tree val, val1;\n@@ -1718,7 +1730,18 @@ compute_avail (basic_block block)\n \t\t      lookup_or_add (value_table, def);\n \t\t      insert_into_set (TMP_GEN (block), def);\n \t\t      value_insert_into_set (AVAIL_OUT (block), def);\n-\t\t      value_insert_into_set (AVAIL_OUT (block), op0);\n+\t\t      if (def != op0)\n+\t\t\tabort ();\n+\t\t    }\n+\t\t  for (j = 0; j < NUM_USES (STMT_USE_OPS (stmt)); j++)\n+\t\t    {\n+\t\t      tree use = USE_OP (STMT_USE_OPS (stmt), j);\n+\t\t      if (TREE_CODE (use) == SSA_NAME)\n+\t\t\t{\n+\t\t\t  lookup_or_add (value_table, use);\n+\t\t\t  insert_into_set (TMP_GEN (block), use);\n+\t\t\t  value_insert_into_set (AVAIL_OUT (block), use);\n+\t\t\t}\n \t\t    }\n \t\t}\n \t    }\n@@ -1732,6 +1755,16 @@ compute_avail (basic_block block)\n \t\t  insert_into_set (TMP_GEN (block), def);\n \t\t  value_insert_into_set (AVAIL_OUT (block), def);\n \t\t}\n+\t      for (j = 0; j < NUM_USES (STMT_USE_OPS (stmt)); j++)\n+\t\t{\n+\t\t  tree use = USE_OP (STMT_USE_OPS (stmt), j);\n+\t\t  if (TREE_CODE (use) == SSA_NAME)\n+\t\t    {\n+\t\t      lookup_or_add (value_table, use);\n+\t\t      insert_into_set (TMP_GEN (block), use);\n+\t\t      value_insert_into_set (AVAIL_OUT (block), use);\n+\t\t    }\n+\t\t}\n \t    }\n \t}\n     }"}]}