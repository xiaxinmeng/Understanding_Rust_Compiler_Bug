{"sha": "52af5e483d2aab891a364929dedc221771ac1a52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJhZjVlNDgzZDJhYWI4OTFhMzY0OTI5ZGVkYzIyMTc3MWFjMWE1Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-12-09T09:21:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-09T09:21:36Z"}, "message": "re PR middle-end/78726 (Incorrect unsigned arithmetic optimization)\n\n\tPR tree-optimization/78726\n\t* tree-ssa-reassoc.c (make_new_ssa_for_def): Add OPCODE and OP\n\targument.  For lhs uses in debug stmts, don't replace lhs with\n\tnew_lhs, but with a debug temp set to new_lhs opcode op.\n\t(make_new_ssa_for_all_defs): Add OPCODE argument, pass OPCODE and\n\tOP down to make_new_ssa_for_def.\n\t(zero_one_operation): Call make_new_ssa_for_all_defs even when\n\tstmts_to_fix is empty, if *def has not changed yet.  Pass\n\tOPCODE to make_new_ssa_for_all_defs.\n\n\t* gcc.c-torture/execute/pr78726.c: New test.\n\t* gcc.dg/guality/pr78726.c: New test.\n\nFrom-SVN: r243476", "tree": {"sha": "456609100605a6588f82180961e320be454aaa3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/456609100605a6588f82180961e320be454aaa3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52af5e483d2aab891a364929dedc221771ac1a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52af5e483d2aab891a364929dedc221771ac1a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52af5e483d2aab891a364929dedc221771ac1a52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52af5e483d2aab891a364929dedc221771ac1a52/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a059c435890d5dc0baa3563e123f52ecb4bd943b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a059c435890d5dc0baa3563e123f52ecb4bd943b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a059c435890d5dc0baa3563e123f52ecb4bd943b"}], "stats": {"total": 108, "additions": 100, "deletions": 8}, "files": [{"sha": "2ccc00fccae294b367ea92db719d57daeb945d7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52af5e483d2aab891a364929dedc221771ac1a52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52af5e483d2aab891a364929dedc221771ac1a52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52af5e483d2aab891a364929dedc221771ac1a52", "patch": "@@ -1,3 +1,15 @@\n+2016-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/78726\n+\t* tree-ssa-reassoc.c (make_new_ssa_for_def): Add OPCODE and OP\n+\targument.  For lhs uses in debug stmts, don't replace lhs with\n+\tnew_lhs, but with a debug temp set to new_lhs opcode op.\n+\t(make_new_ssa_for_all_defs): Add OPCODE argument, pass OPCODE and\n+\tOP down to make_new_ssa_for_def.\n+\t(zero_one_operation): Call make_new_ssa_for_all_defs even when\n+\tstmts_to_fix is empty, if *def has not changed yet.  Pass\n+\tOPCODE to make_new_ssa_for_all_defs.\n+\n 2016-12-08  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/78284"}, {"sha": "3ea10f27886de39ba35e1de080a8f41b1a390149", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52af5e483d2aab891a364929dedc221771ac1a52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52af5e483d2aab891a364929dedc221771ac1a52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52af5e483d2aab891a364929dedc221771ac1a52", "patch": "@@ -1,3 +1,9 @@\n+2016-12-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/78726\n+\t* gcc.c-torture/execute/pr78726.c: New test.\n+\t* gcc.dg/guality/pr78726.c: New test.\n+\n 2016-12-08  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/78284"}, {"sha": "9c29234b7c7f727eb81992680878306490a765a0", "filename": "gcc/testsuite/gcc.c-torture/execute/pr78726.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52af5e483d2aab891a364929dedc221771ac1a52/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78726.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52af5e483d2aab891a364929dedc221771ac1a52/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78726.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr78726.c?ref=52af5e483d2aab891a364929dedc221771ac1a52", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/78726 */\n+\n+unsigned char b = 36, c = 173;\n+unsigned int d;\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  unsigned a = ~b;\n+  d = a * c * c + 1023094746U * a;\n+}\n+\n+int\n+main ()\n+{\n+  if (__SIZEOF_INT__ != 4 || __CHAR_BIT__ != 8)\n+    return 0;\n+  asm volatile (\"\" : : \"g\" (&b), \"g\" (&c) : \"memory\");\n+  foo ();\n+  if (d != 799092689U)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "dc6b386be1de318733977d7b77902b21d5504bba", "filename": "gcc/testsuite/gcc.dg/guality/pr78726.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52af5e483d2aab891a364929dedc221771ac1a52/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr78726.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52af5e483d2aab891a364929dedc221771ac1a52/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr78726.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr78726.c?ref=52af5e483d2aab891a364929dedc221771ac1a52", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/78726 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+#include \"../nop.h\"\n+\n+unsigned char b = 36, c = 173;\n+unsigned int d;\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  unsigned a = ~b;\n+  unsigned d1 = a * c;\t\t/* { dg-final { gdb-test 21 \"d1\" \"~36U * 173\" } } */\n+  unsigned d2 = d1 * c;\t\t/* { dg-final { gdb-test 21 \"d2\" \"~36U * 173 * 173\" } } */\n+  unsigned d3 = 1023094746 * a;\t/* { dg-final { gdb-test 21 \"d3\" \"~36U * 1023094746\" } } */\n+  d = d2 + d3;\n+  unsigned d4 = d1 * 2;     \t/* { dg-final { gdb-test 21 \"d4\" \"~36U * 173 * 2\" } } */\n+  unsigned d5 = d2 * 2;\t\t/* { dg-final { gdb-test 21 \"d5\" \"~36U * 173 * 173 * 2\" } } */\n+  unsigned d6 = d3 * 2;\t\t/* { dg-final { gdb-test 21 \"d6\" \"~36U * 1023094746 * 2\" } } */\n+  asm (NOP : : : \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  asm volatile (\"\" : : \"g\" (&b), \"g\" (&c) : \"memory\");\n+  foo ();\n+  return 0;\n+}"}, {"sha": "b0158368931529ef775c870bd268ff720ba21bc1", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52af5e483d2aab891a364929dedc221771ac1a52/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52af5e483d2aab891a364929dedc221771ac1a52/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=52af5e483d2aab891a364929dedc221771ac1a52", "patch": "@@ -1153,12 +1153,12 @@ decrement_power (gimple *stmt)\n    SSA.  Also return the new SSA.  */\n \n static tree\n-make_new_ssa_for_def (gimple *stmt)\n+make_new_ssa_for_def (gimple *stmt, enum tree_code opcode, tree op)\n {\n   gimple *use_stmt;\n   use_operand_p use;\n   imm_use_iterator iter;\n-  tree new_lhs;\n+  tree new_lhs, new_debug_lhs = NULL_TREE;\n   tree lhs = gimple_get_lhs (stmt);\n \n   new_lhs = make_ssa_name (TREE_TYPE (lhs));\n@@ -1167,8 +1167,28 @@ make_new_ssa_for_def (gimple *stmt)\n   /* Also need to update GIMPLE_DEBUGs.  */\n   FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n     {\n+      tree repl = new_lhs;\n+      if (is_gimple_debug (use_stmt))\n+\t{\n+\t  if (new_debug_lhs == NULL_TREE)\n+\t    {\n+\t      new_debug_lhs = make_node (DEBUG_EXPR_DECL);\n+\t      gdebug *def_temp\n+\t\t= gimple_build_debug_bind (new_debug_lhs,\n+\t\t\t\t\t   build2 (opcode, TREE_TYPE (lhs),\n+\t\t\t\t\t\t   new_lhs, op),\n+\t\t\t\t\t   stmt);\n+\t      DECL_ARTIFICIAL (new_debug_lhs) = 1;\n+\t      TREE_TYPE (new_debug_lhs) = TREE_TYPE (lhs);\n+\t      SET_DECL_MODE (new_debug_lhs, TYPE_MODE (TREE_TYPE (lhs)));\n+\t      gimple_set_uid (def_temp, gimple_uid (stmt));\n+\t      gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+\t      gsi_insert_after (&gsi, def_temp, GSI_SAME_STMT);\n+\t    }\n+\t  repl = new_debug_lhs;\n+\t}\n       FOR_EACH_IMM_USE_ON_STMT (use, iter)\n-\tSET_USE (use, new_lhs);\n+\tSET_USE (use, repl);\n       update_stmt (use_stmt);\n     }\n   return new_lhs;\n@@ -1179,7 +1199,7 @@ make_new_ssa_for_def (gimple *stmt)\n    if *DEF is not OP.  */\n \n static void\n-make_new_ssa_for_all_defs (tree *def, tree op,\n+make_new_ssa_for_all_defs (tree *def, enum tree_code opcode, tree op,\n \t\t\t   vec<gimple *> &stmts_to_fix)\n {\n   unsigned i;\n@@ -1189,10 +1209,10 @@ make_new_ssa_for_all_defs (tree *def, tree op,\n       && TREE_CODE (*def) == SSA_NAME\n       && (stmt = SSA_NAME_DEF_STMT (*def))\n       && gimple_code (stmt) != GIMPLE_NOP)\n-    *def = make_new_ssa_for_def (stmt);\n+    *def = make_new_ssa_for_def (stmt, opcode, op);\n \n   FOR_EACH_VEC_ELT (stmts_to_fix, i, stmt)\n-    make_new_ssa_for_def (stmt);\n+    make_new_ssa_for_def (stmt, opcode, op);\n }\n \n /* Find the single immediate use of STMT's LHS, and replace it\n@@ -1232,6 +1252,7 @@ propagate_op_to_single_use (tree op, gimple *stmt, tree *def)\n static void\n zero_one_operation (tree *def, enum tree_code opcode, tree op)\n {\n+  tree orig_def = *def;\n   gimple *stmt = SSA_NAME_DEF_STMT (*def);\n   /* PR72835 - Record the stmt chain that has to be updated such that\n      we dont use the same LHS when the values computed are different.  */\n@@ -1335,8 +1356,8 @@ zero_one_operation (tree *def, enum tree_code opcode, tree op)\n     }\n   while (1);\n \n-  if (stmts_to_fix.length () > 0)\n-    make_new_ssa_for_all_defs (def, op, stmts_to_fix);\n+  if (stmts_to_fix.length () > 0 || *def == orig_def)\n+    make_new_ssa_for_all_defs (def, opcode, op, stmts_to_fix);\n }\n \n /* Returns true if statement S1 dominates statement S2.  Like"}]}