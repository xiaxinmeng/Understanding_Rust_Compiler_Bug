{"sha": "60e3179b7a33a62f36a143f9168ba2f777e37864", "node_id": "C_kwDOANBUbNoAKDYwZTMxNzliN2EzM2E2MmYzNmExNDNmOTE2OGJhMmY3NzdlMzc4NjQ", "commit": {"author": {"name": "konglin1", "email": "lingling.kong@intel.com", "date": "2021-11-01T02:43:34Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-11-10T06:36:59Z"}, "message": "i386: Optimization for mm512_set1_pch.\n\nThis patch is to support fold _mm512_fmadd_pch (a, _mm512_set1_pch(*(b)), c)\nto 1 instruction vfmaddcph (%rsp){1to16}, %zmm1, %zmm2;\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (fma_<complexpairopname>_<mode>_pair):\n\tAdd new define_insn.\n\t(fma_<mode>_fmaddc_bcst): Add new define_insn_and_split.\n\t(fma_<mode>_fcmaddc_bcst): Likewise\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16vl-complex-broadcast-1.c: New test.", "tree": {"sha": "0a370fc584d01d91d36a3676cab25d67916c3465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a370fc584d01d91d36a3676cab25d67916c3465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60e3179b7a33a62f36a143f9168ba2f777e37864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e3179b7a33a62f36a143f9168ba2f777e37864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e3179b7a33a62f36a143f9168ba2f777e37864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e3179b7a33a62f36a143f9168ba2f777e37864/comments", "author": {"login": "konglingling7", "id": 86399175, "node_id": "MDQ6VXNlcjg2Mzk5MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/86399175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/konglingling7", "html_url": "https://github.com/konglingling7", "followers_url": "https://api.github.com/users/konglingling7/followers", "following_url": "https://api.github.com/users/konglingling7/following{/other_user}", "gists_url": "https://api.github.com/users/konglingling7/gists{/gist_id}", "starred_url": "https://api.github.com/users/konglingling7/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/konglingling7/subscriptions", "organizations_url": "https://api.github.com/users/konglingling7/orgs", "repos_url": "https://api.github.com/users/konglingling7/repos", "events_url": "https://api.github.com/users/konglingling7/events{/privacy}", "received_events_url": "https://api.github.com/users/konglingling7/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b879d40a17ec0409f1a2cd9ab6134bb28f53eea8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b879d40a17ec0409f1a2cd9ab6134bb28f53eea8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b879d40a17ec0409f1a2cd9ab6134bb28f53eea8"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "a58d8e82a6aa8045516fdf8db09a9134e4601704", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e3179b7a33a62f36a143f9168ba2f777e37864/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e3179b7a33a62f36a143f9168ba2f777e37864/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=60e3179b7a33a62f36a143f9168ba2f777e37864", "patch": "@@ -193,7 +193,9 @@\n \n   ;; For AVX512FP16 suppport\n   UNSPEC_COMPLEX_FMA\n+  UNSPEC_COMPLEX_FMA_PAIR\n   UNSPEC_COMPLEX_FCMA\n+  UNSPEC_COMPLEX_FCMA_PAIR\n   UNSPEC_COMPLEX_FMUL\n   UNSPEC_COMPLEX_FCMUL\n   UNSPEC_COMPLEX_MASK\n@@ -5920,6 +5922,9 @@\n (define_int_iterator UNSPEC_COMPLEX_F_C_MA\n \t[UNSPEC_COMPLEX_FMA UNSPEC_COMPLEX_FCMA])\n \n+(define_int_iterator UNSPEC_COMPLEX_F_C_MA_PAIR\n+\t[UNSPEC_COMPLEX_FMA_PAIR UNSPEC_COMPLEX_FCMA_PAIR])\n+\n (define_int_iterator UNSPEC_COMPLEX_F_C_MUL\n \t[UNSPEC_COMPLEX_FMUL UNSPEC_COMPLEX_FCMUL])\n \n@@ -5929,6 +5934,10 @@\n \t (UNSPEC_COMPLEX_FMUL \"fmulc\")\n \t (UNSPEC_COMPLEX_FCMUL \"fcmulc\")])\n \n+(define_int_attr complexpairopname\n+\t[(UNSPEC_COMPLEX_FMA_PAIR \"fmaddc\")\n+\t (UNSPEC_COMPLEX_FCMA_PAIR \"fcmaddc\")])\n+\n (define_mode_attr complexmove\n   [(V32HF \"avx512f_loadv16sf\")\n    (V16HF \"avx512vl_loadv8sf\")\n@@ -6074,6 +6083,59 @@\n \t  [(match_dup 1) (match_dup 2) (match_dup 4)]\n \t   UNSPEC_COMPLEX_F_C_MA))])\n \n+(define_insn \"fma_<complexpairopname>_<mode>_pair\"\n+ [(set (match_operand:VF1_AVX512VL 0 \"register_operand\" \"=&v\")\n+       (unspec:VF1_AVX512VL\n+\t [(match_operand:VF1_AVX512VL 1 \"vector_operand\" \"%v\")\n+\t  (match_operand:VF1_AVX512VL 2 \"bcst_vector_operand\" \"vmBr\")\n+\t  (match_operand:VF1_AVX512VL 3 \"vector_operand\" \"0\")]\n+\t  UNSPEC_COMPLEX_F_C_MA_PAIR))]\n+ \"TARGET_AVX512FP16\"\n+ \"v<complexpairopname>ph\\t{%2, %1, %0|%0, %1, %2}\"\n+ [(set_attr \"type\" \"ssemuladd\")])\n+\n+(define_insn_and_split \"fma_<mode>_fmaddc_bcst\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+\t(unspec:VF_AVX512FP16VL\n+\t  [(match_operand:VF_AVX512FP16VL 1 \"vector_operand\")\n+\t   (subreg:VF_AVX512FP16VL\n+\t     (match_operand:<ssePSmode> 2 \"bcst_vector_operand\") 0)\n+\t   (match_operand:VF_AVX512FP16VL 3 \"vector_operand\")]\n+\t   UNSPEC_COMPLEX_FMA))]\n+  \"TARGET_AVX512FP16\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<ssePSmode>\n+\t  [(match_dup 1) (match_dup 2) (match_dup 3)]\n+\t   UNSPEC_COMPLEX_FMA_PAIR))]\n+  {\n+    operands[0] = lowpart_subreg (<ssePSmode>mode, operands[0], <MODE>mode);\n+    operands[1] = lowpart_subreg (<ssePSmode>mode, operands[1], <MODE>mode);\n+    operands[3] = lowpart_subreg (<ssePSmode>mode, operands[3], <MODE>mode);\n+  })\n+\n+(define_insn_and_split \"fma_<mode>_fcmaddc_bcst\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+\t(unspec:VF_AVX512FP16VL\n+\t  [(match_operand:VF_AVX512FP16VL 1 \"vector_operand\")\n+\t   (subreg:VF_AVX512FP16VL\n+\t     (match_operand:<ssePSmode> 2 \"bcst_vector_operand\") 0)\n+\t   (match_operand:VF_AVX512FP16VL 3 \"vector_operand\")]\n+\t   UNSPEC_COMPLEX_FCMA))]\n+  \"TARGET_AVX512FP16\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<ssePSmode>\n+\t  [(match_dup 1) (match_dup 2) (match_dup 3)]\n+\t   UNSPEC_COMPLEX_FCMA_PAIR))]\n+  {\n+    operands[0] = lowpart_subreg (<ssePSmode>mode, operands[0], <MODE>mode);\n+    operands[1] = lowpart_subreg (<ssePSmode>mode, operands[1], <MODE>mode);\n+    operands[3] = lowpart_subreg (<ssePSmode>mode, operands[3], <MODE>mode);\n+  })\n+\n (define_insn \"<avx512>_<complexopname>_<mode>_mask<round_name>\"\n   [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\" \"=&v\")\n \t(vec_merge:VF_AVX512FP16VL"}, {"sha": "3c8e84230f36a0a8db758b9e125c4f1c0a442b7f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16vl-complex-broadcast-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e3179b7a33a62f36a143f9168ba2f777e37864/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-complex-broadcast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e3179b7a33a62f36a143f9168ba2f777e37864/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-complex-broadcast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16vl-complex-broadcast-1.c?ref=60e3179b7a33a62f36a143f9168ba2f777e37864", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl\" } */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to4\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to8\\\\\\}\" 2 } }  */\n+/* { dg-final { scan-assembler-times \"\\[^\\n\\]*\\\\\\{1to16\\\\\\}\" 2 } }  */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h res0, a0, c0;\n+volatile __m256h res1, a1, c1;\n+volatile __m128h res2, a2, c2;\n+volatile _Float16 *b;\n+\n+void extern\n+avx_test(void)\n+{\n+  res0 = _mm512_fmadd_pch (a0, _mm512_set1_pch(*(b + 2 * 6)), c0);\n+  res0 = _mm512_fcmadd_pch (a0, _mm512_set1_pch(*(b + 2 * 6)), c0);\n+\n+  res1 = _mm256_fmadd_pch (a1, _mm256_set1_pch(*(b + 2 * 6)), c1);\n+  res1 = _mm256_fcmadd_pch (a1, _mm256_set1_pch(*(b + 2 * 6)), c1);\n+\n+  res2 =  _mm_fmadd_pch (a2, _mm_set1_pch(*(b + 2 * 6)), c2);\n+  res2 =  _mm_fcmadd_pch (a2, _mm_set1_pch(*(b + 2 * 6)), c2);\n+}"}]}