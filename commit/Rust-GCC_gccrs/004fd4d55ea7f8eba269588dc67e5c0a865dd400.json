{"sha": "004fd4d55ea7f8eba269588dc67e5c0a865dd400", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA0ZmQ0ZDU1ZWE3ZjhlYmEyNjk1ODhkYzY3ZTVjMGE4NjVkZDQwMA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-12T19:24:40Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-12T19:24:40Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r459", "tree": {"sha": "31b7f6aedf94a30228c6b4e6afb6fc151a7fb32b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31b7f6aedf94a30228c6b4e6afb6fc151a7fb32b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/004fd4d55ea7f8eba269588dc67e5c0a865dd400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004fd4d55ea7f8eba269588dc67e5c0a865dd400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004fd4d55ea7f8eba269588dc67e5c0a865dd400", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004fd4d55ea7f8eba269588dc67e5c0a865dd400/comments", "author": null, "committer": null, "parents": [{"sha": "90ca31be0392b626536c5b5a65711cb1f41107e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ca31be0392b626536c5b5a65711cb1f41107e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ca31be0392b626536c5b5a65711cb1f41107e5"}], "stats": {"total": 118, "additions": 79, "deletions": 39}, "files": [{"sha": "433c67826de484675479b9406346ca138bee91c8", "filename": "gcc/gcc.c", "status": "modified", "additions": 79, "deletions": 39, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004fd4d55ea7f8eba269588dc67e5c0a865dd400/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004fd4d55ea7f8eba269588dc67e5c0a865dd400/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=004fd4d55ea7f8eba269588dc67e5c0a865dd400", "patch": "@@ -111,6 +111,15 @@ static char *spec_version;\n \n static char *spec_machine = DEFAULT_TARGET_MACHINE;\n \n+/* Nonzero if cross-compiling.\n+   When -b is used, the value comes from the `specs' file.  */\n+\n+#ifdef CROSS_COMPILE\n+static int cross_compile = 1;\n+#else\n+static int cross_compile = 0;\n+#endif\n+\n /* This is the obstack which we use to allocate many strings.  */\n \n static struct obstack obstack;\n@@ -385,8 +394,8 @@ static struct compiler default_compilers[] =\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.cpp}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\\\n-    %{!M:%{!MM:%{!E:cc1 %{!pipe:%g.cpp} %1 \\\n+        %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\\\n+    %{!M:%{!MM:%{!E:cc1 %{!pipe:%g.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a}\\\n \t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n \t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n@@ -416,8 +425,8 @@ static struct compiler default_compilers[] =\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.cpp}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\\\n-    %{!M:%{!MM:%{!E:cc1obj %{!pipe:%g.cpp} %1 \\\n+        %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\\\n+    %{!M:%{!MM:%{!E:cc1obj %{!pipe:%g.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a}\\\n \t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n \t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*} \\\n@@ -451,8 +460,8 @@ static struct compiler default_compilers[] =\n         %c %{O*:-D__OPTIMIZE__} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional} %{trigraphs}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.cpp}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\\\n-    %{!M:%{!MM:%{!E:cc1plus %{!pipe:%g.cpp} %1 %2\\\n+        %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\\\n+    %{!M:%{!MM:%{!E:cc1plus %{!pipe:%g.i} %1 %2\\\n \t\t   %{!Q:-quiet} -dumpbase %b.cc %{d*} %{m*} %{a}\\\n \t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} %{traditional}\\\n \t\t   %{v:-version} %{pg:-p} %{p} %{f*}\\\n@@ -479,7 +488,7 @@ static struct compiler default_compilers[] =\n \t    %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n        %{!S:as %{R} %{j} %{J} %{h} %{d2} %a \\\n \t       %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%b.o}\\\n-\t       %{!pipe:%g.s} %A\\n }}}}\"},\n+\t       %{!pipe:%g.s} %A\\n }\"},\n   {\".s\", \"@assembler\"},\n   {\"@assembler\",\n    \"%{!S:as %{R} %{j} %{J} %{h} %{d2} %a \\\n@@ -508,11 +517,21 @@ static int n_default_compilers\n \n /* Here is the spec for running the linker, after compiling all files.  */\n \n+#ifdef LINK_LIBGCC_SPECIAL\n+/* Have gcc do the search.  */\n static char *link_command_spec = \"\\\n %{!c:%{!M:%{!MM:%{!E:%{!S:ld %X %l %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n-\t\t\t%{r} %{T*} %{t} %{x} %{z}\\\n+\t\t\t%{r} %{s} %{T*} %{t} %{x} %{z}\\\n \t\t\t%{!A:%{!nostdlib:%S}} \\\n \t\t\t%{L*} %D %o %{!nostdlib:libgcc.a%s %L libgcc.a%s %{!A:%E}}\\n }}}}}\";\n+#else\n+/* Use -l and have the linker do the search.  */\n+static char *link_command_spec = \"\\\n+%{!c:%{!M:%{!MM:%{!E:%{!S:ld %X %l %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n+\t\t\t%{r} %{T*} %{t} %{x} %{z}\\\n+\t\t\t%{!A:%{!nostdlib:%S}} \\\n+\t\t\t%{L*} %D %o %{!nostdlib:-lgcc %L -lgcc %{!A:%E}}\\n }}}}}\";\n+#endif\n \n /* A vector of options to give to the linker.\n    These options are accumlated by %x\n@@ -729,7 +748,8 @@ set_spec (name, spec)\n     startfile_spec = sl->spec;\n   else if (! strcmp (name, \"switches_need_spaces\"))\n     switches_need_spaces = sl->spec;\n-\n+  else if (! strcmp (name, \"cross_compile\"))\n+    cross_compile = atoi (sl->spec);\n   /* Free the old spec */\n   if (old_spec)\n     free (old_spec);\n@@ -790,10 +810,6 @@ static struct path_prefix library_prefix = { 0, 0, \"libraryfile\" };\n \n static char *machine_suffix = 0;\n \n-/* Nonzero means don't bypass the machine_suffix.  */\n-\n-static int machine_explicit;\n-\n /* Default prefixes to attach to command names.  */\n \n #ifdef CROSS_COMPILE  /* Don't use these prefixes for a cross compiler.  */\n@@ -802,7 +818,7 @@ static int machine_explicit;\n #endif\n \n #ifndef STANDARD_EXEC_PREFIX\n-#define STANDARD_EXEC_PREFIX \"/usr/local/lib/gcc/\"\n+#define STANDARD_EXEC_PREFIX \"/usr/local/lib/gcc-lib/\"\n #endif /* !defined STANDARD_EXEC_PREFIX */\n \n static char *standard_exec_prefix = STANDARD_EXEC_PREFIX;\n@@ -1041,7 +1057,7 @@ find_a_file (pprefix, name, mode)\n      int mode;\n {\n   char *temp;\n-  char *file_suffix = (mode & X_OK != 0 ? EXECUTABLE_SUFFIX : \"\");\n+  char *file_suffix = ((mode & X_OK) != 0 ? EXECUTABLE_SUFFIX : \"\");\n   struct prefix_list *pl;\n   int len = pprefix->max_len + strlen (name) + strlen (file_suffix) + 1;\n \n@@ -1089,7 +1105,7 @@ find_a_file (pprefix, name, mode)\n \t  }\n \t/* Certain prefixes can't be used without the machine suffix\n \t   when the machine or version is explicitly specified.  */\n-\tif (!machine_explicit || !pl->require_machine_suffix)\n+\tif (!pl->require_machine_suffix)\n \t  {\n \t    strcpy (temp, pl->prefix);\n \t    strcat (temp, name);\n@@ -1411,7 +1427,7 @@ execute ()\n \n   /* If -v, print what we are about to do, and maybe query.  */\n \n-  if (verbose_flag)\n+  if (verbose_flag || save_temps_flag)\n     {\n       /* Print each piped command as a separate line.  */\n       for (i = 0; i < n_commands ; i++)\n@@ -1683,6 +1699,7 @@ process_command (argc, argv)\n \t  printf (\"*switches_need_spaces:\\n%s\\n\\n\", switches_need_spaces);\n \t  printf (\"*signed_char:\\n%s\\n\\n\", signed_char_spec);\n \t  printf (\"*predefines:\\n%s\\n\\n\", cpp_predefines);\n+\t  printf (\"*cross_compile:\\n%d\\n\\n\", cross_compile);\n \n \t  exit (0);\n \t}\n@@ -1783,25 +1800,9 @@ process_command (argc, argv)\n   add_prefix (&startfile_prefix, standard_exec_prefix, 0, 1, 0);\n   add_prefix (&startfile_prefix, standard_exec_prefix_1, 0, 1, 0);\n \n-  /* Use the md prefixes only if not cross-compiling.  */\n-  if (!strcmp (spec_machine, DEFAULT_TARGET_MACHINE))\n-    {\n-#ifdef MD_EXEC_PREFIX\n-      add_prefix (&exec_prefix, md_exec_prefix, 0, 1, 0);\n-      add_prefix (&startfile_prefix, md_exec_prefix, 0, 1, 0);\n-#endif\n-\n-#ifdef MD_STARTFILE_PREFIX\n-      add_prefix (&startfile_prefix, md_startfile_prefix, 0, 1, 0);\n-#endif\n-    }\n+  /* More prefixes are enabled in main, after we read the specs file\n+     and determine whether this is cross-compilation or not.  */\n \n-  add_prefix (&startfile_prefix, standard_startfile_prefix, 0, 0, 0);\n-  add_prefix (&startfile_prefix, standard_startfile_prefix_1, 0, 0, 0);\n-  add_prefix (&startfile_prefix, standard_startfile_prefix_2, 0, 0, 0);\n-#if 0 /* Can cause surprises, and one can use -B./ instead.  */\n-  add_prefix (&startfile_prefix, \"./\", 0, 1, 0);\n-#endif\n \n   /* Then create the space for the vectors and scan again.  */\n \n@@ -2092,30 +2093,46 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    break;\n \n \t  /* Dump out the directories specified with LIBRARY_PATH,\n-\t     followed by the directories that we search for startfiles.  */\n+\t     followed by the absolute directories\n+\t     that we search for startfiles.  */\n \t  case 'D':\n \t    for (i = 0; i < 2; i++)\n \t      {\n \t\tstruct prefix_list *pl\n \t\t  = (i == 0 ? library_prefix.plist : startfile_prefix.plist);\n \t\tfor (; pl; pl = pl->next)\n \t\t  {\n+#ifdef RELATIVE_PREFIX_NOT_LINKDIR\n+\t\t    /* Used on systems which record the specified -L dirs\n+\t\t       and use them to search for dynamic linking.  */\n+\t\t    /* Relative directories always come from -B,\n+\t\t       and it is better not to use them for searching\n+\t\t       at run time.  In particular, stage1 loses  */\n+\t\t    if (pl->prefix[0] != '/')\n+\t\t      continue;\n+#endif\n \t\t    if (machine_suffix)\n \t\t      {\n \t\t\tif (is_linker_dir (pl->prefix, machine_suffix))\n \t\t\t  {\n \t\t\t    do_spec_1 (\"-L\", 0, 0);\n+#ifdef SPACE_AFTER_L_OPTION\n+\t\t\t    do_spec_1 (\" \", 0, 0);\n+#endif\n \t\t\t    do_spec_1 (pl->prefix, 1, 0);\n \t\t\t    do_spec_1 (machine_suffix, 1, 0);\n \t\t\t    /* Make this a separate argument.  */\n \t\t\t    do_spec_1 (\" \", 0, 0);\n \t\t\t  }\n \t\t      }\n-\t\t    if (!machine_explicit || !pl->require_machine_suffix)\n+\t\t    if (!pl->require_machine_suffix)\n \t\t      {\n \t\t\tif (is_linker_dir (pl->prefix, \"\"))\n \t\t\t  {\n \t\t\t    do_spec_1 (\"-L\", 0, 0);\n+#ifdef SPACE_AFTER_L_OPTION\n+\t\t\t    do_spec_1 (\" \", 0, 0);\n+#endif\n \t\t\t    do_spec_1 (pl->prefix, 1, 0);\n \t\t\t    /* Make this a separate argument.  */\n \t\t\t    do_spec_1 (\" \", 0, 0);\n@@ -2569,6 +2586,7 @@ handle_braces (p)\n   if (suffix)\n     {\n       int found = (input_suffix != 0\n+\t\t   && strlen (input_suffix) == p - filter\n \t\t   && strncmp (input_suffix, filter, p - filter) == 0);\n \n       if (p[0] == '}')\n@@ -2765,7 +2783,6 @@ is_linker_dir (path1, path2)\n \n   return (stat (path, &st) >= 0 && S_ISDIR (st.st_mode));\n }\n-\t\n \f\n /* On fatal signals, delete all the temporary files.  */\n \n@@ -2837,6 +2854,29 @@ main (argc, argv)\n   if (specs_file != 0 && strcmp (specs_file, \"specs\"))\n     read_specs (specs_file);\n \n+  /* If not cross-compiling, look for startfiles in the standard places.  */\n+  /* The fact that these are done here, after reading the specs file,\n+     means that it cannot be found in these directories.\n+     But that's okay.  It should never be there anyway.  */\n+  if (!cross_compile)\n+    {\n+#ifdef MD_EXEC_PREFIX\n+      add_prefix (&exec_prefix, md_exec_prefix, 0, 0, 0);\n+      add_prefix (&startfile_prefix, md_exec_prefix, 0, 0, 0);\n+#endif\n+\n+#ifdef MD_STARTFILE_PREFIX\n+      add_prefix (&startfile_prefix, md_startfile_prefix, 0, 0, 0);\n+#endif\n+\n+      add_prefix (&startfile_prefix, standard_startfile_prefix, 0, 0, 0);\n+      add_prefix (&startfile_prefix, standard_startfile_prefix_1, 0, 0, 0);\n+      add_prefix (&startfile_prefix, standard_startfile_prefix_2, 0, 0, 0);\n+#if 0 /* Can cause surprises, and one can use -B./ instead.  */\n+      add_prefix (&startfile_prefix, \"./\", 0, 1, 0);\n+#endif\n+    }\n+\n   /* Now we have the specs.\n      Set the `valid' bits for switches that match anything in any spec.  */\n \n@@ -2974,7 +3014,7 @@ main (argc, argv)\n }\n \n /* Find the proper compilation spec for the file name NAME,\n-   whose length is LENGTH.  LANGUAGE is the specified langauge,\n+   whose length is LENGTH.  LANGUAGE is the specified language,\n    or 0 if none specified.  */\n \n static struct compiler *"}]}