{"sha": "6ead0238de25faf67f38a61ac5cacde8125d9fa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhZDAyMzhkZTI1ZmFmNjdmMzhhNjFhYzVjYWNkZTgxMjVkOWZhMg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-12T07:38:47Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-12T07:38:47Z"}, "message": "AVX-512. Extend vpternlog, valign, vrotate insns.\n\ngcc/\n\t* config/i386/sse.md\n\t(define_mode_iterator VI48_AVX512VL): New.\n\t(define_expand \"<avx512>_vternlog<mode>_maskz\"): Rename from\n\t\"avx512f_vternlog<mode>_maskz\" and update mode iterator.\n\t(define_insn \"<avx512>_vternlog<mode><sd_maskz_name>\"): Rename\n\tfrom \"avx512f_vternlog<mode><sd_maskz_name>\" and update mode iterator.\n\t(define_insn \"<avx512>_vternlog<mode>_mask\"): Rename from\n\t\"avx512f_vternlog<mode>_mask\" and update mode iterator.\n\t(define_insn \"<mask_codefor><avx512>_align<mode><mask_name>\"): Rename\n\tfrom \"<mask_codefor>avx512f_align<mode><mask_name>\" and update mode\n\titerator.\n\t(define_insn \"<avx512>_<rotate>v<mode><mask_name>\"): Rename from\n\t\"avx512f_<rotate>v<mode><mask_name>\" and update mode iterator.\n\t(define_insn \"<avx512>_<rotate><mode><mask_name>\"): Rename from\n\t\"avx512f_<rotate><mode><mask_name>\" and update mode iterator.\n\t(define_insn \"clz<mode>2<mask_name>\"): Use VI48_AVX512VL mode iterator.\n\t(define_insn \"<mask_codefor>conflict<mode><mask_name>\"): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215203", "tree": {"sha": "2a0c167dda3dda9a04fd8a9c8d6e6442a76486d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a0c167dda3dda9a04fd8a9c8d6e6442a76486d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ead0238de25faf67f38a61ac5cacde8125d9fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ead0238de25faf67f38a61ac5cacde8125d9fa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ead0238de25faf67f38a61ac5cacde8125d9fa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ead0238de25faf67f38a61ac5cacde8125d9fa2/comments", "author": null, "committer": null, "parents": [{"sha": "575d952c5d634cc02760c73f94b8769cbb09f1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575d952c5d634cc02760c73f94b8769cbb09f1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/575d952c5d634cc02760c73f94b8769cbb09f1b3"}], "stats": {"total": 107, "additions": 67, "deletions": 40}, "files": [{"sha": "4b70dd5e01f1d145575a1b12e72c34ef676e99a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ead0238de25faf67f38a61ac5cacde8125d9fa2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ead0238de25faf67f38a61ac5cacde8125d9fa2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ead0238de25faf67f38a61ac5cacde8125d9fa2", "patch": "@@ -1,3 +1,30 @@\n+2014-09-12  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(define_mode_iterator VI48_AVX512VL): New.\n+\t(define_expand \"<avx512>_vternlog<mode>_maskz\"): Rename from\n+\t\"avx512f_vternlog<mode>_maskz\" and update mode iterator.\n+\t(define_insn \"<avx512>_vternlog<mode><sd_maskz_name>\"): Rename\n+\tfrom \"avx512f_vternlog<mode><sd_maskz_name>\" and update mode iterator.\n+\t(define_insn \"<avx512>_vternlog<mode>_mask\"): Rename from\n+\t\"avx512f_vternlog<mode>_mask\" and update mode iterator.\n+\t(define_insn \"<mask_codefor><avx512>_align<mode><mask_name>\"): Rename\n+\tfrom \"<mask_codefor>avx512f_align<mode><mask_name>\" and update mode\n+\titerator.\n+\t(define_insn \"<avx512>_<rotate>v<mode><mask_name>\"): Rename from\n+\t\"avx512f_<rotate>v<mode><mask_name>\" and update mode iterator.\n+\t(define_insn \"<avx512>_<rotate><mode><mask_name>\"): Rename from\n+\t\"avx512f_<rotate><mode><mask_name>\" and update mode iterator.\n+\t(define_insn \"clz<mode>2<mask_name>\"): Use VI48_AVX512VL mode iterator.\n+\t(define_insn \"<mask_codefor>conflict<mode><mask_name>\"): Ditto.\n+\n 2014-09-12  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "73bdd224a67abf2dc2aeb15f23c6cf52daaf4147", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ead0238de25faf67f38a61ac5cacde8125d9fa2/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ead0238de25faf67f38a61ac5cacde8125d9fa2/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6ead0238de25faf67f38a61ac5cacde8125d9fa2", "patch": "@@ -7158,27 +7158,27 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\"  \"<MODE>\")])\n \n-(define_expand \"avx512f_vternlog<mode>_maskz\"\n-  [(match_operand:VI48_512 0 \"register_operand\")\n-   (match_operand:VI48_512 1 \"register_operand\")\n-   (match_operand:VI48_512 2 \"register_operand\")\n-   (match_operand:VI48_512 3 \"nonimmediate_operand\")\n+(define_expand \"<avx512>_vternlog<mode>_maskz\"\n+  [(match_operand:VI48_AVX512VL 0 \"register_operand\")\n+   (match_operand:VI48_AVX512VL 1 \"register_operand\")\n+   (match_operand:VI48_AVX512VL 2 \"register_operand\")\n+   (match_operand:VI48_AVX512VL 3 \"nonimmediate_operand\")\n    (match_operand:SI 4 \"const_0_to_255_operand\")\n    (match_operand:<avx512fmaskmode> 5 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n-  emit_insn (gen_avx512f_vternlog<mode>_maskz_1 (\n+  emit_insn (gen_<avx512>_vternlog<mode>_maskz_1 (\n     operands[0], operands[1], operands[2], operands[3],\n     operands[4], CONST0_RTX (<MODE>mode), operands[5]));\n   DONE;\n })\n \n-(define_insn \"avx512f_vternlog<mode><sd_maskz_name>\"\n-  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n-\t(unspec:VI48_512\n-\t  [(match_operand:VI48_512 1 \"register_operand\" \"0\")\n-\t   (match_operand:VI48_512 2 \"register_operand\" \"v\")\n-\t   (match_operand:VI48_512 3 \"nonimmediate_operand\" \"vm\")\n+(define_insn \"<avx512>_vternlog<mode><sd_maskz_name>\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI48_AVX512VL\n+\t  [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"0\")\n+\t   (match_operand:VI48_AVX512VL 2 \"register_operand\" \"v\")\n+\t   (match_operand:VI48_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n \t   (match_operand:SI 4 \"const_0_to_255_operand\")]\n \t  UNSPEC_VTERNLOG))]\n   \"TARGET_AVX512F\"\n@@ -7187,13 +7187,13 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_vternlog<mode>_mask\"\n-  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VI48_512\n-\t  (unspec:VI48_512\n-\t    [(match_operand:VI48_512 1 \"register_operand\" \"0\")\n-\t     (match_operand:VI48_512 2 \"register_operand\" \"v\")\n-\t     (match_operand:VI48_512 3 \"nonimmediate_operand\" \"vm\")\n+(define_insn \"<avx512>_vternlog<mode>_mask\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VI48_AVX512VL\n+\t  (unspec:VI48_AVX512VL\n+\t    [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"0\")\n+\t     (match_operand:VI48_AVX512VL 2 \"register_operand\" \"v\")\n+\t     (match_operand:VI48_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n \t     (match_operand:SI 4 \"const_0_to_255_operand\")]\n \t    UNSPEC_VTERNLOG)\n \t  (match_dup 1)\n@@ -7227,12 +7227,12 @@\n     [(set_attr \"prefix\" \"evex\")\n      (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_insn \"<mask_codefor>avx512f_align<mode><mask_name>\"\n-  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n-        (unspec:VI48_512 [(match_operand:VI48_512 1 \"register_operand\" \"v\")\n-\t\t\t  (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")\n-\t\t\t  (match_operand:SI 3 \"const_0_to_255_operand\")]\n-\t\t\t UNSPEC_ALIGN))]\n+(define_insn \"<mask_codefor><avx512>_align<mode><mask_name>\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+        (unspec:VI48_AVX512VL [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n+\t\t\t       (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")\n+\t\t\t       (match_operand:SI 3 \"const_0_to_255_operand\")]\n+\t\t\t      UNSPEC_ALIGN))]\n   \"TARGET_AVX512F\"\n   \"valign<ssemodesuffix>\\t{%3, %2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2, %3}\";\n   [(set_attr \"prefix\" \"evex\")\n@@ -9430,20 +9430,20 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_<rotate>v<mode><mask_name>\"\n-  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n-\t(any_rotate:VI48_512\n-\t  (match_operand:VI48_512 1 \"register_operand\" \"v\")\n-\t  (match_operand:VI48_512 2 \"nonimmediate_operand\" \"vm\")))]\n+(define_insn \"<avx512>_<rotate>v<mode><mask_name>\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(any_rotate:VI48_AVX512VL\n+\t  (match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n+\t  (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512F\"\n   \"vp<rotate>v<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx512f_<rotate><mode><mask_name>\"\n-  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n-\t(any_rotate:VI48_512\n-\t  (match_operand:VI48_512 1 \"nonimmediate_operand\" \"vm\")\n+(define_insn \"<avx512>_<rotate><mode><mask_name>\"\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(any_rotate:VI48_AVX512VL\n+\t  (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\" \"vm\")\n \t  (match_operand:SI 2 \"const_0_to_255_operand\")))]\n   \"TARGET_AVX512F\"\n   \"vp<rotate><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -17011,19 +17011,19 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"clz<mode>2<mask_name>\"\n-  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n-\t(clz:VI48_512\n-\t  (match_operand:VI48_512 1 \"nonimmediate_operand\" \"vm\")))]\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(clz:VI48_AVX512VL\n+\t  (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512CD\"\n   \"vplzcnt<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<mask_codefor>conflict<mode><mask_name>\"\n-  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n-\t(unspec:VI48_512\n-\t  [(match_operand:VI48_512 1 \"nonimmediate_operand\" \"vm\")]\n+  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI48_AVX512VL\n+\t  [(match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\" \"vm\")]\n \t  UNSPEC_CONFLICT))]\n   \"TARGET_AVX512CD\"\n   \"vpconflict<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\""}]}