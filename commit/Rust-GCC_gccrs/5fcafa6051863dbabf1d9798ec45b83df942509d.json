{"sha": "5fcafa6051863dbabf1d9798ec45b83df942509d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZjYWZhNjA1MTg2M2RiYWJmMWQ5Nzk4ZWM0NWI4M2RmOTQyNTA5ZA==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2011-08-01T13:47:31Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-01T13:47:31Z"}, "message": "Add -mlzcnt.\n\ngcc/\n\n2011-08-01  Kirill Yukhin  <kirill.yukhin@intel.com>\n\n\tPR target/49547\n\t* config.gcc (i[34567]86-*-*): Replace abmintrin.h with\n\tlzcntintrin.h.\n\t(x86_64-*-*): Likewise.\n\t* config/i386/i386.opt (mlzcnt): New.\n\t* config/i386/abmintrin.h: File removed.\n\t(__lzcnt_u16, __lzcnt, __lzcnt_u64): Moved to ...\n\t* config/i386/lzcntintrin.h: ... here. New file.\n\t(__lzcnt): Rename to ...\n\t(__lzcnt32): ... this.\n\t* config/i386/bmiintrin.h (head): Update copyright year.\n\t(__lzcnt_u16): Removed.\n\t(__lzcnt_u32): Likewise.\n\t(__lzcnt_u64): Likewise.\n\t* config/i386/x86intrin.h: Include lzcntintrin.h when __LZCNT__\n\tis defined, remove abmintrin.h.\n\t* config/i386/cpuid.h (bit_LZCNT): New.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n\tLZCNT feature.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__LZCNT__ if needed.\n\t* config/i386/i386.c (ix86_target_string): New option -mlzcnt.\n\t(ix86_option_override_internal): Handle LZCNT option.\n\t(ix86_valid_target_attribute_inner_p): Likewise.\n\t(struct builtin_description bdesc_args) <IX86_BUILTIN_CLZS>: Update.\n\t* config/i386/i386.h (TARGET_LZCNT): New.\n\t(CLZ_DEFINED_VALUE_AT_ZERO): Update.\n\t* config/i386/i386.md (clz<mode>2): Update insn constraint.\n\t(clz<mode>2_lzcnt): Likewise.\n\t* doc/invoke.texi: Mention -mlzcnt option.\n\t* doc/extend.texi: Likewise.\n\ngcc/testsuite/\n\n2011-08-01  Kirill Yukhin  <kirill.yukhin@intel.com>\n\n\t* gcc.target/i386/i386.exp (check_effective_target_lzcnt): New.\n\t* gcc.target/i386/lzcnt-1.c: New test.\n\t* gcc.target/i386/lzcnt-2.c: Likewise.\n\t* gcc.target/i386/lzcnt-2a.c: Likewise.\n\t* gcc.target/i386/lzcnt-3.c: Likewise.\n\t* gcc.target/i386/lzcnt-4.c: Likewise.\n\t* gcc.target/i386/lzcnt-4a.c: Likewise.\n\t* gcc.target/i386/lzcnt-5.c: Likewise.\n\t* gcc.target/i386/lzcnt-6.c: Likewise.\n\t* gcc.target/i386/lzcnt-6a.c: Likewise.\n\t* gcc.target/i386/lzcnt-check.h: Likewise.\n\n\t* gcc.target/i386/sse-12.c (dg-compile): Add -mlzcnt.\n\t* gcc.target/i386/sse-13.c: Likewise.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\t* g++.dg/other/i386-2.C: Likewise.\n\t* g++.dg/other/i386-3.C: Likewise.\n\nFrom-SVN: r177034", "tree": {"sha": "35f575996429f663452714abea2458a0099073e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35f575996429f663452714abea2458a0099073e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fcafa6051863dbabf1d9798ec45b83df942509d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcafa6051863dbabf1d9798ec45b83df942509d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fcafa6051863dbabf1d9798ec45b83df942509d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fcafa6051863dbabf1d9798ec45b83df942509d/comments", "author": null, "committer": null, "parents": [{"sha": "4561baf7b73070dd11b2df4bff5480e61ee545be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4561baf7b73070dd11b2df4bff5480e61ee545be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4561baf7b73070dd11b2df4bff5480e61ee545be"}], "stats": {"total": 366, "additions": 316, "deletions": 50}, "files": [{"sha": "b516175b5674368b985352d594391fca11b5ee54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -1,3 +1,37 @@\n+2011-08-01  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\tPR target/49547\n+\t* config.gcc (i[34567]86-*-*): Replace abmintrin.h with\n+\tlzcntintrin.h.\n+\t(x86_64-*-*): Likewise.\n+\t* config/i386/i386.opt (mlzcnt): New.\n+\t* config/i386/abmintrin.h: File removed.\n+\t(__lzcnt_u16, __lzcnt, __lzcnt_u64): Moved to ...\n+\t* config/i386/lzcntintrin.h: ... here. New file.\n+\t(__lzcnt): Rename to ...\n+\t(__lzcnt32): ... this.\n+\t* config/i386/bmiintrin.h (head): Update copyright year.\n+\t(__lzcnt_u16): Removed.\n+\t(__lzcnt_u32): Likewise.\n+\t(__lzcnt_u64): Likewise.\n+\t* config/i386/x86intrin.h: Include lzcntintrin.h when __LZCNT__\n+\tis defined, remove abmintrin.h.\n+\t* config/i386/cpuid.h (bit_LZCNT): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\tLZCNT feature.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__LZCNT__ if needed.\n+\t* config/i386/i386.c (ix86_target_string): New option -mlzcnt.\n+\t(ix86_option_override_internal): Handle LZCNT option.\n+\t(ix86_valid_target_attribute_inner_p): Likewise.\n+\t(struct builtin_description bdesc_args) <IX86_BUILTIN_CLZS>: Update.\n+\t* config/i386/i386.h (TARGET_LZCNT): New.\n+\t(CLZ_DEFINED_VALUE_AT_ZERO): Update.\n+\t* config/i386/i386.md (clz<mode>2): Update insn constraint.\n+\t(clz<mode>2_lzcnt): Likewise.\n+\t* doc/invoke.texi: Mention -mlzcnt option.\n+\t* doc/extend.texi: Likewise.\n+\n 2011-08-01  Julian Brown  <julian@codesourcery.com>\n \n \t* configure.ac (fixed-point): Add ARM support."}, {"sha": "94f15d8706d946fdeacfff8db13c3592a4b362f0", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -352,7 +352,7 @@ i[34567]86-*-*)\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n-\t\t       abmintrin.h bmiintrin.h tbmintrin.h\"\n+\t\t       lzcntintrin.h bmiintrin.h tbmintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -364,7 +364,7 @@ x86_64-*-*)\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n-\t\t       abmintrin.h bmiintrin.h tbmintrin.h\"\n+\t\t       lzcntintrin.h bmiintrin.h tbmintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "1699c61d24e7c818cc6b265758a1867528911ae6", "filename": "gcc/config/i386/bmiintrin.h", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmiintrin.h?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2010 Free Software Foundation, Inc.\n+/* Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -32,12 +32,6 @@\n #ifndef _BMIINTRIN_H_INCLUDED\n #define _BMIINTRIN_H_INCLUDED\n \n-extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lzcnt_u16 (unsigned short __X)\n-{\n-  return __builtin_clzs (__X);\n-}\n-\n extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __tzcnt_u16 (unsigned short __X)\n {\n@@ -79,12 +73,6 @@ __blsr_u32 (unsigned int __X)\n   return tmp;\n }\n \n-extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lzcnt_u32 (unsigned int __X)\n-{\n-  return __builtin_clz (__X);\n-}\n-\n \n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __tzcnt_u32 (unsigned int __X)\n@@ -128,12 +116,6 @@ __blsr_u64 (unsigned long long __X)\n   return tmp;\n }\n \n-extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lzcnt_u64 (unsigned long long __X)\n-{\n-  return __builtin_clzll (__X);\n-}\n-\n extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __tzcnt_u64 (unsigned long long __X)\n {"}, {"sha": "8826c2829ff7908153a27c05c8b6c81e1477ae3f", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -24,6 +24,7 @@\n /* %ecx */\n #define bit_SSE3\t(1 << 0)\n #define bit_PCLMUL\t(1 << 1)\n+#define bit_LZCNT\t(1 << 5)\n #define bit_SSSE3\t(1 << 9)\n #define bit_FMA\t\t(1 << 12)\n #define bit_CMPXCHG16B\t(1 << 13)"}, {"sha": "5823987863f8534ca33435ceb8ab5a18bf4c6060", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -396,7 +396,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_popcnt = 0, has_aes = 0, has_avx = 0;\n   unsigned int has_pclmul = 0, has_abm = 0, has_lwp = 0;\n   unsigned int has_fma = 0, has_fma4 = 0, has_xop = 0;\n-  unsigned int has_bmi = 0, has_tbm = 0;\n+  unsigned int has_bmi = 0, has_tbm = 0, has_lzcnt = 0;\n \n   bool arch;\n \n@@ -465,6 +465,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_fma4 = ecx & bit_FMA4;\n       has_xop = ecx & bit_XOP;\n       has_tbm = ecx & bit_TBM;\n+      has_lzcnt = ecx & bit_LZCNT;\n \n       has_longmode = edx & bit_LM;\n       has_3dnowp = edx & bit_3DNOWP;\n@@ -717,10 +718,11 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx = has_avx ? \" -mavx\" : \" -mno-avx\";\n       const char *sse4_2 = has_sse4_2 ? \" -msse4.2\" : \" -mno-sse4.2\";\n       const char *sse4_1 = has_sse4_1 ? \" -msse4.1\" : \" -mno-sse4.1\";\n+      const char *lzcnt = has_lzcnt ? \" -mlzcnt\" : \" -mnolzcnt\";\n \n       options = concat (options, cx16, sahf, movbe, ase, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, tbm,\n-\t\t\tavx, sse4_2, sse4_1, NULL);\n+\t\t\tavx, sse4_2, sse4_1, lzcnt, NULL);\n     }\n \n done:"}, {"sha": "1fc333c7e17157a63243dcea2761902e66f858dc", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -271,6 +271,8 @@ ix86_target_macros_internal (int isa_flag,\n     def_or_undef (parse_in, \"__ABM__\");\n   if (isa_flag & OPTION_MASK_ISA_BMI)\n     def_or_undef (parse_in, \"__BMI__\");\n+  if (isa_flag & OPTION_MASK_ISA_LZCNT)\n+    def_or_undef (parse_in, \"__LZCNT__\");\n   if (isa_flag & OPTION_MASK_ISA_TBM)\n     def_or_undef (parse_in, \"__TBM__\");\n   if (isa_flag & OPTION_MASK_ISA_POPCNT)"}, {"sha": "c8ea48f7cd807041d9411daa92094a25462065c0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -2663,6 +2663,7 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-mmmx\",\t\tOPTION_MASK_ISA_MMX },\n     { \"-mabm\",\t\tOPTION_MASK_ISA_ABM },\n     { \"-mbmi\",\t\tOPTION_MASK_ISA_BMI },\n+    { \"-mlzcnt\",\tOPTION_MASK_ISA_LZCNT },\n     { \"-mtbm\",\t\tOPTION_MASK_ISA_TBM },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n@@ -2917,7 +2918,8 @@ ix86_option_override_internal (bool main_args_p)\n       PTA_RDRND = 1 << 25,\n       PTA_F16C = 1 << 26,\n       PTA_BMI = 1 << 27,\n-      PTA_TBM = 1 << 28\n+      PTA_TBM = 1 << 28,\n+      PTA_LZCNT = 1 << 29\n       /* if this reaches 32, need to widen struct pta flags below */\n     };\n \n@@ -3278,6 +3280,9 @@ ix86_option_override_internal (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_BMI\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_BMI))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_BMI;\n+\tif (processor_alias_table[i].flags & (PTA_LZCNT | PTA_ABM)\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_LZCNT))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_LZCNT;\n \tif (processor_alias_table[i].flags & PTA_TBM\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_TBM))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_TBM;\n@@ -3525,6 +3530,10 @@ ix86_option_override_internal (bool main_args_p)\n   if (TARGET_SSE4_2 || TARGET_ABM)\n     ix86_isa_flags |= OPTION_MASK_ISA_POPCNT & ~ix86_isa_flags_explicit;\n \n+  /* Turn on lzcnt instruction for -mabm.  */\n+  if (TARGET_ABM)\n+    ix86_isa_flags |= OPTION_MASK_ISA_LZCNT & ~ix86_isa_flags_explicit;\n+\n   /* Validate -mpreferred-stack-boundary= value or default it to\n      PREFERRED_STACK_BOUNDARY_DEFAULT.  */\n   ix86_preferred_stack_boundary = PREFERRED_STACK_BOUNDARY_DEFAULT;\n@@ -4030,6 +4039,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"3dnow\",\tOPT_m3dnow),\n     IX86_ATTR_ISA (\"abm\",\tOPT_mabm),\n     IX86_ATTR_ISA (\"bmi\",\tOPT_mbmi),\n+    IX86_ATTR_ISA (\"lzcnt\",\tOPT_mlzcnt),\n     IX86_ATTR_ISA (\"tbm\",\tOPT_mtbm),\n     IX86_ATTR_ISA (\"aes\",\tOPT_maes),\n     IX86_ATTR_ISA (\"avx\",\tOPT_mavx),\n@@ -24935,7 +24945,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_copysignv8sf3,  \"__builtin_ia32_copysignps256\", IX86_BUILTIN_CPYSGNPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_copysignv4df3,  \"__builtin_ia32_copysignpd256\", IX86_BUILTIN_CPYSGNPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n \n-  { OPTION_MASK_ISA_ABM, CODE_FOR_clzhi2_abm,   \"__builtin_clzs\",   IX86_BUILTIN_CLZS,    UNKNOWN,     (int) UINT16_FTYPE_UINT16 },\n+  { OPTION_MASK_ISA_LZCNT, CODE_FOR_clzhi2_lzcnt,   \"__builtin_clzs\",   IX86_BUILTIN_CLZS,    UNKNOWN,     (int) UINT16_FTYPE_UINT16 },\n \n   /* BMI */\n   { OPTION_MASK_ISA_BMI, CODE_FOR_bmi_bextr_si, \"__builtin_ia32_bextr_u32\", IX86_BUILTIN_BEXTR32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT },"}, {"sha": "f43586d012b246a8fbcb4d45a0450d1b3d812c8d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -61,6 +61,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_ROUND\tOPTION_ISA_ROUND\n #define TARGET_ABM\tOPTION_ISA_ABM\n #define TARGET_BMI\tOPTION_ISA_BMI\n+#define TARGET_LZCNT\tOPTION_ISA_LZCNT\n #define TARGET_TBM\tOPTION_ISA_TBM\n #define TARGET_POPCNT\tOPTION_ISA_POPCNT\n #define TARGET_SAHF\tOPTION_ISA_SAHF\n@@ -2288,7 +2289,7 @@ extern void debug_dispatch_window (int);\n #define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n \t((VALUE) = GET_MODE_BITSIZE (MODE), TARGET_BMI)\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n-\t((VALUE) = GET_MODE_BITSIZE (MODE), TARGET_BMI)\n+\t((VALUE) = GET_MODE_BITSIZE (MODE), TARGET_LZCNT)\n \n \n /* Flags returned by ix86_get_callcvt ().  */"}, {"sha": "0c78f92ef3a2301f5ccc3a8edb977ec69ca80f41", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -11801,19 +11801,19 @@\n       (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n {\n-  if (TARGET_ABM)\n+  if (TARGET_LZCNT)\n     {\n-      emit_insn (gen_clz<mode>2_abm (operands[0], operands[1]));\n+      emit_insn (gen_clz<mode>2_lzcnt (operands[0], operands[1]));\n       DONE;\n     }\n   operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)-1);\n })\n \n-(define_insn \"clz<mode>2_abm\"\n+(define_insn \"clz<mode>2_lzcnt\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n \t(clz:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_ABM || TARGET_BMI\"\n+  \"TARGET_LZCNT\"\n   \"lzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"prefix_rep\" \"1\")\n    (set_attr \"type\" \"bitmanip\")"}, {"sha": "f197dd8506f8dd7e067552fc8ab84fb6372134ab", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -489,6 +489,10 @@ mbmi\n Target Report Mask(ISA_BMI) Var(ix86_isa_flags) Save\n Support BMI built-in functions and code generation\n \n+mlzcnt\n+Target Report Mask(ISA_LZCNT) Var(ix86_isa_flags) Save\n+Support LZCNT built-in function and code generation\n+\n mtbm\n Target Report Mask(ISA_TBM) Var(ix86_isa_flags) Save\n Support TBM built-in functions and code generation"}, {"sha": "43008111576238ec8255e598c2b403405fde40a8", "filename": "gcc/config/i386/lzcntintrin.h", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Flzcntintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Flzcntintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flzcntintrin.h?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -22,15 +22,15 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #ifndef _X86INTRIN_H_INCLUDED\n-# error \"Never use <abmintrin.h> directly; include <x86intrin.h> instead.\"\n+# error \"Never use <lzcntintrin.h> directly; include <x86intrin.h> instead.\"\n #endif\n \n-#ifndef __ABM__\n-# error \"ABM instruction set not enabled\"\n-#endif /* __ABM__ */\n+#ifndef __LZCNT__\n+# error \"LZCNT instruction is not enabled\"\n+#endif /* __LZCNT__ */\n \n-#ifndef _ABMINTRIN_H_INCLUDED\n-#define _ABMINTRIN_H_INCLUDED\n+#ifndef _LZCNTINTRIN_H_INCLUDED\n+#define _LZCNTINTRIN_H_INCLUDED\n \n extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n __lzcnt16 (unsigned short __X)\n@@ -39,7 +39,7 @@ __lzcnt16 (unsigned short __X)\n }\n \n extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-__lzcnt (unsigned int __X)\n+__lzcnt32 (unsigned int __X)\n {\n   return __builtin_clz (__X);\n }\n@@ -52,4 +52,4 @@ __lzcnt64 (unsigned long __X)\n }\n #endif\n \n-#endif /* _ABMINTRIN_H_INCLUDED */\n+#endif /* _LZCNTINTRIN_H_INCLUDED */", "previous_filename": "gcc/config/i386/abmintrin.h"}, {"sha": "88456f9e9ef9e03eb857caeb2808f9cc7dda4f07", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -77,10 +77,6 @@\n #include <lwpintrin.h>\n #endif\n \n-#ifdef __ABM__\n-#include <abmintrin.h>\n-#endif\n-\n #ifdef __BMI__\n #include <bmiintrin.h>\n #endif\n@@ -89,6 +85,10 @@\n #include <tbmintrin.h>\n #endif\n \n+#ifdef __LZCNT__\n+#include <lzcntintrin.h>\n+#endif\n+\n #ifdef __POPCNT__\n #include <popcntintrin.h>\n #endif"}, {"sha": "480a8b0288ea6903706c2b21429f42dfa633a98d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -9676,6 +9676,11 @@ All of them generate the machine instruction that is part of the name.\n @smallexample\n unsigned int __builtin_ia32_bextr_u32(unsigned int, unsigned int);\n unsigned long long __builtin_ia32_bextr_u64 (unsigned long long, unsigned long long);\n+@end smallexample\n+\n+The following built-in functions are available when @option{-mlzcnt} is used.\n+All of them generate the machine instruction that is part of the name.\n+@smallexample\n unsigned short __builtin_ia32_lzcnt_16(unsigned short);\n unsigned int __builtin_ia32_lzcnt_u32(unsigned int);\n unsigned long long __builtin_ia32_lzcnt_u64 (unsigned long long);"}, {"sha": "264d1b0f3504370e8b320c2db4afca0b3d350ebb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -606,8 +606,8 @@ Objective-C and Objective-C++ Dialects}.\n -mcld -mcx16 -msahf -mmovbe -mcrc32 -mrecip -mvzeroupper @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfma @gol\n--msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlwp @gol\n--mthreads  -mno-align-stringops  -minline-all-stringops @gol\n+-msse4a -m3dnow -mpopcnt -mabm -mbmi -mtbm -mfma4 -mxop -mlzcnt @gol\n+-mlwp -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n@@ -12692,6 +12692,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-abm\n @itemx -mbmi\n @itemx -mno-bmi\n+@itemx -mlzcnt\n+@itemx -mno-lzcnt\n @itemx -mtbm\n @itemx -mno-tbm\n @opindex mmmx\n@@ -12702,7 +12704,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA,\n-SSE4A, FMA4, XOP, LWP, ABM, BMI, or 3DNow!@: extended instruction sets.\n+SSE4A, FMA4, XOP, LWP, ABM, BMI, LZCNT or 3DNow!@: extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and\n disabled by these switches."}, {"sha": "480eea6ac1c3b17f51e2f1cce4d629ab194f524a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -1,3 +1,23 @@\n+2011-08-01  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* gcc.target/i386/i386.exp (check_effective_target_lzcnt): New.\n+\t* gcc.target/i386/lzcnt-1.c: New test.\n+\t* gcc.target/i386/lzcnt-2.c: Likewise.\n+\t* gcc.target/i386/lzcnt-2a.c: Likewise.\n+\t* gcc.target/i386/lzcnt-3.c: Likewise.\n+\t* gcc.target/i386/lzcnt-4.c: Likewise.\n+\t* gcc.target/i386/lzcnt-4a.c: Likewise.\n+\t* gcc.target/i386/lzcnt-5.c: Likewise.\n+\t* gcc.target/i386/lzcnt-6.c: Likewise.\n+\t* gcc.target/i386/lzcnt-6a.c: Likewise.\n+\t* gcc.target/i386/lzcnt-check.h: Likewise.\n+\n+\t* gcc.target/i386/sse-12.c (dg-compile): Add -mlzcnt.\n+\t* gcc.target/i386/sse-13.c: Likewise.\n+\t* gcc.target/i386/sse-14.c: Likewise.\n+\t* g++.dg/other/i386-2.C: Likewise.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\n 2011-08-01  Julian Brown  <julian@codesourcery.com>\n \n \t* gcc.target/arm/fixed-point-exec.c: New test."}, {"sha": "ed183c7633d562ff4256cc14faf22dc56e990f09", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "626f972463a4513d144a84ea60a5adb0c9cd4fa0", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "167b79b5d2aa857fc9a664eefee7aa1a0bc52a6f", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -186,6 +186,16 @@ proc check_effective_target_xop { } {\n     } \"-O2 -mxop\" ]\n }\n \n+# Return 1 if lzcnt instruction can be compiled.\n+proc check_effective_target_lzcnt { } {\n+    return [check_no_compiler_messages lzcnt object {\n+\tunsigned short _lzcnt (unsigned short __X)\n+\t{\n+\t   return __builtin_clzs (__X);\n+\t}\n+    } \"-mlzcnt\" ]\n+}\n+\n # Return 1 if bmi instructions can be compiled.\n proc check_effective_target_bmi { } {\n     return [check_no_compiler_messages bmi object {"}, {"sha": "f6240d1ba787cc9cc2e7ba41424bfb1b4e367a79", "filename": "gcc/testsuite/gcc.target/i386/lzcnt-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-1.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlzcnt \" } */\n+/* { dg-final { scan-assembler \"lzcntw\\[^\\\\n]*(%|)ax\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned int\n+func_lzcnt16 (unsigned int X)\n+{\n+  return __lzcnt16(X);\n+}"}, {"sha": "329a11f9753a98721f7b198e53176c28ac3fc0c4", "filename": "gcc/testsuite/gcc.target/i386/lzcnt-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-2.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target { lzcnt } } } */\n+/* { dg-options \"-O2 -mlzcnt -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"lzcnt-check.h\"\n+\n+short calc_lzcnt_u16 (short src)\n+{\n+  int i;\n+  short res = 0;\n+\n+  while ((res < 16) && (((src >> (15 - res)) & 1) == 0))\n+    ++res;\n+\n+  return res;\n+}\n+\n+static void\n+lzcnt_test ()\n+{\n+  unsigned i;\n+  short src = 0x7ace;\n+  short res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = src >> i;\n+\n+    res_ref = calc_lzcnt_u16 (src);\n+    res = __lzcnt16 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "fe1069feea4cd983a73991f734c7e0cebfd2679c", "filename": "gcc/testsuite/gcc.target/i386/lzcnt-2a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-2a.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlzcnt\" } */\n+\n+#include \"lzcnt-2.c\"\n+\n+/* { dg-final { scan-assembler \"lzcntw\" } } */"}, {"sha": "1477951174aa3c16830dff4adeca8d5d0c2ffc50", "filename": "gcc/testsuite/gcc.target/i386/lzcnt-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-3.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -mlzcnt \" } */\n+/* { dg-final { scan-assembler \"lzcntl\\[^\\\\n]*(%|)eax\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned int\n+func_lzcnt32 (unsigned int X)\n+{\n+  return __lzcnt32(X);\n+}"}, {"sha": "20653265bf46f669882e90a811450a93a0974e8a", "filename": "gcc/testsuite/gcc.target/i386/lzcnt-4.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-4.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target { lzcnt } } } */\n+/* { dg-options \"-O2 -mlzcnt -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"lzcnt-check.h\"\n+\n+int calc_lzcnt_u32 (int src)\n+{\n+  int i;\n+  int res = 0;\n+\n+  while ((res < 32) && (((src >> (31 - res)) & 1) == 0))\n+    ++res;\n+\n+  return res;\n+}\n+\n+static void\n+lzcnt_test ()\n+{\n+  unsigned i;\n+  int src = 0xce7ace0;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = src >> i;\n+\n+    res_ref = calc_lzcnt_u32 (src);\n+    res = __lzcnt32 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "6bba6a97df3e576c8dcd061347a34a362d180891", "filename": "gcc/testsuite/gcc.target/i386/lzcnt-4a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-4a.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlzcnt\" } */\n+\n+#include \"lzcnt-4.c\"\n+\n+/* { dg-final { scan-assembler \"lzcntl\" } } */"}, {"sha": "a4b9aafcd3d4bcfd32ed3aeced2e7c5d9d0086dc", "filename": "gcc/testsuite/gcc.target/i386/lzcnt-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-5.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mlzcnt\" } */\n+/* { dg-final { scan-assembler \"lzcntq\\[^\\\\n]*(%|)rax\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned int\n+func_lzcnt64 (unsigned long long X)\n+{\n+  return __lzcnt64(X);\n+}"}, {"sha": "f0bf5dab04420fedb926eb0792a576c40e3a989b", "filename": "gcc/testsuite/gcc.target/i386/lzcnt-6.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-6.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run { target { lzcnt && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mlzcnt -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"lzcnt-check.h\"\n+\n+long long calc_lzcnt_u64 (long long src)\n+{\n+  int i;\n+  int res = 0;\n+\n+  while ((res < 64) && (((src >> (63 - res)) & 1) == 0))\n+    ++res;\n+\n+  return res;\n+}\n+\n+static void\n+lzcnt_test ()\n+{\n+  unsigned i;\n+  long long src = 0xce7ace0ce7ace0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = src >> i;\n+\n+    res_ref = calc_lzcnt_u64 (src);\n+    res = __lzcnt64 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "209009344b3e82f3545f2edd6fac8de9e7028fca", "filename": "gcc/testsuite/gcc.target/i386/lzcnt-6a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-6a.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mlzcnt\" } */\n+\n+#include \"lzcnt-6.c\"\n+\n+/* { dg-final { scan-assembler \"lzcntq\" } } */"}, {"sha": "8aad834d6af44a281da395372221627b551a0ccd", "filename": "gcc/testsuite/gcc.target/i386/lzcnt-check.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Flzcnt-check.h?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -0,0 +1,37 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"cpuid.h\"\n+\n+static void lzcnt_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  lzcnt_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (0x80000001, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  /* Run LZCNT test only if host has LZCNT support.  */\n+  if (ecx & bit_LZCNT)\n+    {\n+      do_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "59e659ebec16068fa2b27d614292ce5b404e71cb", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "836272d7e6215848baa6807f1aa6e53dd95bf72e", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <mm_malloc.h>\n "}, {"sha": "af42781e2a2b6e17542ae87780200403bfd79263", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fcafa6051863dbabf1d9798ec45b83df942509d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=5fcafa6051863dbabf1d9798ec45b83df942509d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <mm_malloc.h>\n "}]}