{"sha": "5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZjODliZmRkNzQ2ODkyN2UwYjNkNWFhYmQ1YjczYWY2MGQ5Y2ViZQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2006-06-23T21:17:53Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2006-06-23T21:17:53Z"}, "message": "tree.h (DECIMAL_FLOAT_TYPE_P): New.\n\n\t* tree.h (DECIMAL_FLOAT_TYPE_P): New.\n\t* c-typeck.c (c_common_type): Disallow operations on decimal float\n\ttypes and other float types.\n\t* convert.c (convert_to_real): Don't ignore conversions involving\n\tdecimal float types.\n\ntestsuite:\n\t* gcc.dg/dfp/usual-arith-conv-bad.c: New test.\n\nFrom-SVN: r114951", "tree": {"sha": "37c4db6e4704c909e6788fed55acb58ba4c4c1a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37c4db6e4704c909e6788fed55acb58ba4c4c1a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/comments", "author": null, "committer": null, "parents": [{"sha": "17bbca74807b33cbebdea7761536468e147cf197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17bbca74807b33cbebdea7761536468e147cf197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17bbca74807b33cbebdea7761536468e147cf197"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "e6b2d20cea05c53b61b6f49707e12937dc4df540", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe", "patch": "@@ -1,3 +1,11 @@\n+2006-06-23  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* tree.h (DECIMAL_FLOAT_TYPE_P): New.\n+\t* c-typeck.c (c_common_type): Disallow operations on decimal float\n+\ttypes and other float types.\n+\t* convert.c (convert_to_real): Don't ignore conversions involving\n+\tdecimal float types.\n+\n 2006-06-23  Olivier Hainque  <hainque@adacore.com>\n \n \t* tree.c (max_int_size_in_bytes): New function, inspired from"}, {"sha": "c32ce95b99f2b649049e5d1935385cc84cd7ecff", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe", "patch": "@@ -596,6 +596,29 @@ c_common_type (tree t1, tree t2)\n   gcc_assert (code2 == VECTOR_TYPE || code2 == COMPLEX_TYPE\n \t      || code2 == REAL_TYPE || code2 == INTEGER_TYPE);\n \n+  /* When one operand is a decimal float type, the other operand cannot be\n+     a generic float type or a complex type.  We also disallow vector types\n+     here.  */\n+  if ((DECIMAL_FLOAT_TYPE_P (t1) || DECIMAL_FLOAT_TYPE_P (t2))\n+      && !(DECIMAL_FLOAT_TYPE_P (t1) && DECIMAL_FLOAT_TYPE_P (t2)))\n+    {\n+      if (code1 == VECTOR_TYPE || code2 == VECTOR_TYPE)\n+\t{\n+\t  error (\"can%'t mix operands of decimal float and vector types\");\n+\t  return error_mark_node;\n+\t}\n+      if (code1 == COMPLEX_TYPE || code2 == COMPLEX_TYPE)\n+\t{\n+\t  error (\"can%'t mix operands of decimal float and complex types\");\n+\t  return error_mark_node;\n+\t}\n+      if (code1 == REAL_TYPE && code2 == REAL_TYPE)\n+\t{\n+\t  error (\"can%'t mix operands of decimal float and other float types\");\n+\t  return error_mark_node;\n+\t}\n+    }\n+\n   /* If one type is a vector type, return that type.  (How the usual\n      arithmetic conversions apply to the vector types extension is not\n      precisely specified.)  */"}, {"sha": "ab780d8ebd37cc61ea49849b5980c3aa5618d19c", "filename": "gcc/convert.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe", "patch": "@@ -315,8 +315,12 @@ convert_to_real (tree type, tree expr)\n   switch (TREE_CODE (TREE_TYPE (expr)))\n     {\n     case REAL_TYPE:\n-      return build1 (flag_float_store ? CONVERT_EXPR : NOP_EXPR,\n-\t\t     type, expr);\n+      /* Ignore the conversion if we don't need to store intermediate\n+\t results and neither type is a decimal float.  */\n+      return build1 ((flag_float_store\n+\t\t     || DECIMAL_FLOAT_TYPE_P (type)\n+\t\t     || DECIMAL_FLOAT_TYPE_P (itype))\n+\t\t     ? CONVERT_EXPR : NOP_EXPR, type, expr);\n \n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:"}, {"sha": "615ef9d92b9901d611548796b67e9a0455bdc4df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe", "patch": "@@ -1,3 +1,7 @@\n+2006-06-23  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* gcc.dg/dfp/usual-arith-conv-bad.c: New test.\n+\n 2006-06-23  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/27981"}, {"sha": "e4033ca50f451aae71592a2ca5e3632b9558bc3b", "filename": "gcc/testsuite/gcc.dg/dfp/usual-arith-conv-bad.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-bad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-bad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-bad.c?ref=5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+/* N1150 5.4: Usual arithmetic conversions.\n+   C99 6.3.1.8[1] (New).\n+\n+   Test arithmetic operators between decimal float types and generic\n+   float types, which are not allowed.  */\n+\n+extern _Decimal32 d32a, d32b;\n+extern _Decimal64 d64a, d64b;\n+extern _Decimal128 d128a, d128b;\n+extern float f;\n+extern double d;\n+extern long double ld;\n+\n+extern signed int __attribute__ ((vector_size (16))) vi;\n+\n+extern _Complex float cf;\n+extern _Complex double cd;\n+extern _Complex long double cld;\n+extern _Complex int ci;\n+\n+void\n+foo (void)\n+{\n+  /* Mixed operations with decimal and generic float operands.  */\n+  d32a = d32b + f;\t/* { dg-error \"\" \"error.*mix operands of decimal float\" } */\n+  d32a = f * d32b;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d32a *= f;\t\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  f += d32b;\t\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d64a = d32a + d;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d64a = d * d128a;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d64a -= d;\t\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d128a = ld * d128b;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d128a = d64b + d;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d128a *= f;\t\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+\n+  /* Mixed operations with decimal float and a vector type.  */\n+  d64a = d64b + vi;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d32a *= vi;\t\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d128a = vi - d128b;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+\n+  /* Mixed operations with decimal float and Complex types.  */\n+  d32a += ci;\t\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d64a = ci * d32a;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  cd = d64a * cd;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d128b = cld * d128b;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+  d32a = cf * d32b;\t/* { dg-error \"\" \"error.* mix operands of decimal float\" } */\n+}"}, {"sha": "06e6a96b1f958818c40ee8ba6a6d50cb86ae46c3", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=5fc89bfdd7468927e0b3d5aabd5b73af60d9cebe", "patch": "@@ -966,6 +966,11 @@ extern void omp_clause_range_check_failed (const tree, const char *, int,\n         || TREE_CODE (TYPE) == VECTOR_TYPE)\t\\\n        && SCALAR_FLOAT_TYPE_P (TREE_TYPE (TYPE))))\n \n+/* Nonzero if TYPE represents a decimal floating-point type.  */\n+#define DECIMAL_FLOAT_TYPE_P(TYPE)\t\t\\\n+  (SCALAR_FLOAT_TYPE_P (TYPE)\t\t\t\\\n+   && DECIMAL_FLOAT_MODE_P (TYPE_MODE (TYPE)))\n+\n /* Nonzero if TYPE represents an aggregate (multi-component) type.\n    Keep these checks in ascending code order.  */\n "}]}