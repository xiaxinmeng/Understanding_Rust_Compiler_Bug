{"sha": "1bcec8dfa3d11438ec654df7879ad76bd19e07c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJjZWM4ZGZhM2QxMTQzOGVjNjU0ZGY3ODc5YWQ3NmJkMTllMDdjNg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-08-20T05:32:49Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-08-20T05:32:49Z"}, "message": "re PR middle-end/89544 (Argument marshalling incorrectly assumes stack slots are naturally aligned.)\n\n2019-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR middle-end/89544\n        * function.c (assign_parm_find_stack_rtl): Use larger alignment\n        when possible.\n\ntestsuite:\n2019-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR middle-end/89544\n        * gcc.target/arm/unaligned-argument-1.c: New test.\n        * gcc.target/arm/unaligned-argument-2.c: New test.\n\nFrom-SVN: r274691", "tree": {"sha": "2d069013d7f5071eb1bc59d0c51569206499b556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d069013d7f5071eb1bc59d0c51569206499b556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bcec8dfa3d11438ec654df7879ad76bd19e07c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bcec8dfa3d11438ec654df7879ad76bd19e07c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bcec8dfa3d11438ec654df7879ad76bd19e07c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "876013aa4107cedcb47533e52be8e757a6ff6495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876013aa4107cedcb47533e52be8e757a6ff6495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/876013aa4107cedcb47533e52be8e757a6ff6495"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "e22140ff3ca4e3eaeb2ac5ba1b5f5460f94eef94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bcec8dfa3d11438ec654df7879ad76bd19e07c6", "patch": "@@ -1,3 +1,9 @@\n+2019-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/89544\n+\t* function.c (assign_parm_find_stack_rtl): Use larger alignment\n+\twhen possible.\n+\n 2019-08-19  Joel Hutton  <Joel.Hutton@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_fpconst_pow2_recip): New prototype"}, {"sha": "f8019513928f855725d329f08be7727849baec43", "filename": "gcc/function.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1bcec8dfa3d11438ec654df7879ad76bd19e07c6", "patch": "@@ -2697,8 +2697,23 @@ assign_parm_find_stack_rtl (tree parm, struct assign_parm_data_one *data)\n      intentionally forcing upward padding.  Otherwise we have to come\n      up with a guess at the alignment based on OFFSET_RTX.  */\n   poly_int64 offset;\n-  if (data->locate.where_pad != PAD_DOWNWARD || data->entry_parm)\n+  if (data->locate.where_pad == PAD_NONE || data->entry_parm)\n     align = boundary;\n+  else if (data->locate.where_pad == PAD_UPWARD)\n+    {\n+      align = boundary;\n+      /* If the argument offset is actually more aligned than the nominal\n+\t stack slot boundary, take advantage of that excess alignment.\n+\t Don't make any assumptions if STACK_POINTER_OFFSET is in use.  */\n+      if (poly_int_rtx_p (offset_rtx, &offset)\n+\t  && STACK_POINTER_OFFSET == 0)\n+\t{\n+\t  unsigned int offset_align = known_alignment (offset) * BITS_PER_UNIT;\n+\t  if (offset_align == 0 || offset_align > STACK_BOUNDARY)\n+\t    offset_align = STACK_BOUNDARY;\n+\t  align = MAX (align, offset_align);\n+\t}\n+    }\n   else if (poly_int_rtx_p (offset_rtx, &offset))\n     {\n       align = least_bit_hwi (boundary);"}, {"sha": "1aeccfd64b053bf717f422f621d68ee16ead13fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1bcec8dfa3d11438ec654df7879ad76bd19e07c6", "patch": "@@ -1,3 +1,9 @@\n+2019-08-20  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR middle-end/89544\n+\t* gcc.target/arm/unaligned-argument-1.c: New test.\n+\t* gcc.target/arm/unaligned-argument-2.c: New test.\n+\n 2019-08-19  Joel Hutton  <Joel.Hutton@arm.com>\n \n \t* gcc.target/aarch64/fmul_scvtf_1.c: New test."}, {"sha": "805a3a7f80de3e2afa7453fad9175277abb94326", "filename": "gcc/testsuite/gcc.target/arm/unaligned-argument-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funaligned-argument-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funaligned-argument-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funaligned-argument-1.c?ref=1bcec8dfa3d11438ec654df7879ad76bd19e07c6", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arm_ok } */\n+/* { dg-require-effective-target arm_ldrd_strd_ok } */\n+/* { dg-options \"-marm -mno-unaligned-access -O3\" } */\n+\n+struct s {\n+  int a, b;\n+} __attribute__((aligned(8)));\n+\n+struct s f0;\n+\n+void f(int a, int b, int c, int d, struct s f)\n+{\n+  f0 = f;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldrd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"strd\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stm\" 0 } } */"}, {"sha": "a35ce3a6d4b9eb2de1dd7ed1a728cce1df4911f3", "filename": "gcc/testsuite/gcc.target/arm/unaligned-argument-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funaligned-argument-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bcec8dfa3d11438ec654df7879ad76bd19e07c6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funaligned-argument-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funaligned-argument-2.c?ref=1bcec8dfa3d11438ec654df7879ad76bd19e07c6", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arm_ok } */\n+/* { dg-require-effective-target arm_ldrd_strd_ok } */\n+/* { dg-options \"-marm -mno-unaligned-access -O3\" } */\n+\n+struct s {\n+  int a, b;\n+} __attribute__((aligned(8)));\n+\n+struct s f0;\n+\n+void f(int a, int b, int c, int d, int e, struct s f)\n+{\n+  f0 = f;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ldrd\" 0 } } */\n+/* { dg-final { scan-assembler-times \"strd\" 0 } } */\n+/* { dg-final { scan-assembler-times \"stm\" 1 } } */"}]}