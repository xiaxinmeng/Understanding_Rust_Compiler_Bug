{"sha": "40fd269ab128d1f5fa7688d7d5e7298744c08cdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmZDI2OWFiMTI4ZDFmNWZhNzY4OGQ3ZDVlNzI5ODc0NGMwOGNkZA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2016-11-20T15:32:37Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2016-11-20T15:32:37Z"}, "message": "Simplify X /[ex] 8 == 0\n\n2016-11-20  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* fold-const.c (fold_comparison): Ignore EXACT_DIV_EXPR.\n\t* match.pd (A /[ex] B CMP C): New simplifications.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/cmpexactdiv.c: New file.\n\nFrom-SVN: r242638", "tree": {"sha": "24fa579ac055b2df237950de895300575de9cbe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24fa579ac055b2df237950de895300575de9cbe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40fd269ab128d1f5fa7688d7d5e7298744c08cdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fd269ab128d1f5fa7688d7d5e7298744c08cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fd269ab128d1f5fa7688d7d5e7298744c08cdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8294f55513cd9f15b6ac729265c45a7a6837898f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8294f55513cd9f15b6ac729265c45a7a6837898f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8294f55513cd9f15b6ac729265c45a7a6837898f"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "d02d6e5b536751cf53553ac3f66a68b69a3ac990", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40fd269ab128d1f5fa7688d7d5e7298744c08cdd", "patch": "@@ -1,3 +1,8 @@\n+2016-11-20  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* fold-const.c (fold_comparison): Ignore EXACT_DIV_EXPR.\n+\t* match.pd (A /[ex] B CMP C): New simplifications.\n+\n 2016-11-20  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* match.pd (0 / X, X / X, X % X): New simplifications."}, {"sha": "3c5a77ee6548b530160f84a8542f795bc7ce017a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=40fd269ab128d1f5fa7688d7d5e7298744c08cdd", "patch": "@@ -8700,8 +8700,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \n   /* We can fold X/C1 op C2 where C1 and C2 are integer constants\n      into a single range test.  */\n-  if ((TREE_CODE (arg0) == TRUNC_DIV_EXPR\n-       || TREE_CODE (arg0) == EXACT_DIV_EXPR)\n+  if (TREE_CODE (arg0) == TRUNC_DIV_EXPR\n       && TREE_CODE (arg1) == INTEGER_CST\n       && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n       && !integer_zerop (TREE_OPERAND (arg0, 1))"}, {"sha": "36270d0b1080ce5cc9212a28d25751f5062e262c", "filename": "gcc/match.pd", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=40fd269ab128d1f5fa7688d7d5e7298744c08cdd", "patch": "@@ -2351,6 +2351,36 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t   (ge @0 { build_real (TREE_TYPE (@0), dconst0); })\n \t   (cmp @0 { build_real (TREE_TYPE (@0), c2); }))))))))))))\n \n+/* Fold A /[ex] B CMP C to A CMP B * C.  */\n+(for cmp (eq ne)\n+ (simplify\n+  (cmp (exact_div @0 @1) INTEGER_CST@2)\n+  (if (!integer_zerop (@1))\n+   (if (wi::eq_p (@2, 0))\n+    (cmp @0 @2)\n+    (if (TREE_CODE (@1) == INTEGER_CST)\n+     (with\n+      {\n+\tbool ovf;\n+\twide_int prod = wi::mul (@2, @1, TYPE_SIGN (TREE_TYPE (@1)), &ovf);\n+      }\n+      (if (ovf)\n+       { constant_boolean_node (cmp == NE_EXPR, type); }\n+       (cmp @0 { wide_int_to_tree (TREE_TYPE (@0), prod); }))))))))\n+(for cmp (lt le gt ge)\n+ (simplify\n+  (cmp (exact_div @0 INTEGER_CST@1) INTEGER_CST@2)\n+  (if (wi::gt_p (@1, 0, TYPE_SIGN (TREE_TYPE (@1))))\n+   (with\n+    {\n+      bool ovf;\n+      wide_int prod = wi::mul (@2, @1, TYPE_SIGN (TREE_TYPE (@1)), &ovf);\n+    }\n+    (if (ovf)\n+     { constant_boolean_node (wi::lt_p (@2, 0, TYPE_SIGN (TREE_TYPE (@2)))\n+\t\t\t      != (cmp == LT_EXPR || cmp == LE_EXPR), type); }\n+     (cmp @0 { wide_int_to_tree (TREE_TYPE (@0), prod); }))))))\n+\n /* Unordered tests if either argument is a NaN.  */\n (simplify\n  (bit_ior (unordered @0 @0) (unordered @1 @1))"}, {"sha": "2c81bf439ad5f7299d19c84a3a0105be3d2dee6c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40fd269ab128d1f5fa7688d7d5e7298744c08cdd", "patch": "@@ -1,3 +1,7 @@\n+2016-11-20  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/cmpexactdiv.c: New file.\n+\n 2016-11-20  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/78395"}, {"sha": "48e5cda344259d3f4144ede8ed8106dcee2e3813", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cmpexactdiv.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcmpexactdiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40fd269ab128d1f5fa7688d7d5e7298744c08cdd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcmpexactdiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcmpexactdiv.c?ref=40fd269ab128d1f5fa7688d7d5e7298744c08cdd", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int f(int *p, int *q){\n+  __SIZE_TYPE__ n = q - p;\n+  return n == 0;\n+}\n+\n+int g(int *p, int *q){\n+  __PTRDIFF_TYPE__ n = q - p;\n+  return n <= 2;\n+}\n+\n+int h(long *p, long *q){\n+  __SIZE_TYPE__ n = q - p;\n+  return n == (__SIZE_TYPE__)(-1)/2;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"== 0\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"<= 8\" \"optimized\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump \"return 0\" \"optimized\" } } */"}]}