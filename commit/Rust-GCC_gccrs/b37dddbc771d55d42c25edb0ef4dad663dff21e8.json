{"sha": "b37dddbc771d55d42c25edb0ef4dad663dff21e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3ZGRkYmM3NzFkNTVkNDJjMjVlZGIwZWY0ZGFkNjYzZGZmMjFlOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-05-13T16:59:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-05-13T16:59:20Z"}, "message": "re PR middle-end/66133 (Wrong-code with noreturn #pragma omp task body)\n\n\tPR middle-end/66133\n\t* omp-low.c (expand_omp_taskreg): For GIMPLE_OMP_TASK expansion,\n\tmake sure it is never noreturn, even when the task body does not\n\treturn.\n\t(lower_omp_taskreg): For GIMPLE_OMP_TASK, emit GIMPLE_OMP_CONTINUE\n\tright before GIMPLE_OMP_RETURN.\n\t(make_gimple_omp_edges): Accept GIMPLE_OMP_CONTINUE as ->cont\n\tfor GIMPLE_OMP_TASK.  For GIMPLE_OMP_RETURN corresponding to\n\tGIMPLE_OMP_TASK add an EDGE_ABNORMAL edge from entry to exit.\n\n\t* testsuite/libgomp.c/pr66133.c: New test.\n\nFrom-SVN: r223171", "tree": {"sha": "a98a3f2c207b53f57c6310b769a54c75b47423f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a98a3f2c207b53f57c6310b769a54c75b47423f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b37dddbc771d55d42c25edb0ef4dad663dff21e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37dddbc771d55d42c25edb0ef4dad663dff21e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37dddbc771d55d42c25edb0ef4dad663dff21e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37dddbc771d55d42c25edb0ef4dad663dff21e8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "098aac94ef8927e4bd24fc59919e9163057688fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098aac94ef8927e4bd24fc59919e9163057688fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098aac94ef8927e4bd24fc59919e9163057688fa"}], "stats": {"total": 101, "additions": 96, "deletions": 5}, "files": [{"sha": "dc25116f57ed8521575ed2aae95b2295e415aa36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37dddbc771d55d42c25edb0ef4dad663dff21e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37dddbc771d55d42c25edb0ef4dad663dff21e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b37dddbc771d55d42c25edb0ef4dad663dff21e8", "patch": "@@ -1,3 +1,15 @@\n+2015-05-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/66133\n+\t* omp-low.c (expand_omp_taskreg): For GIMPLE_OMP_TASK expansion,\n+\tmake sure it is never noreturn, even when the task body does not\n+\treturn.\n+\t(lower_omp_taskreg): For GIMPLE_OMP_TASK, emit GIMPLE_OMP_CONTINUE\n+\tright before GIMPLE_OMP_RETURN.\n+\t(make_gimple_omp_edges): Accept GIMPLE_OMP_CONTINUE as ->cont\n+\tfor GIMPLE_OMP_TASK.  For GIMPLE_OMP_RETURN corresponding to\n+\tGIMPLE_OMP_TASK add an EDGE_ABNORMAL edge from entry to exit.\n+\n 2015-05-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* params.def (PARAM_MAX_POW_SQRT_DEPTH): New param."}, {"sha": "d352801c0cee173feab4a8594164b8d6e4277a2d", "filename": "gcc/omp-low.c", "status": "modified", "additions": 44, "deletions": 5, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37dddbc771d55d42c25edb0ef4dad663dff21e8/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37dddbc771d55d42c25edb0ef4dad663dff21e8/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=b37dddbc771d55d42c25edb0ef4dad663dff21e8", "patch": "@@ -5377,7 +5377,10 @@ expand_omp_taskreg (struct omp_region *region)\n   child_cfun = DECL_STRUCT_FUNCTION (child_fn);\n \n   entry_bb = region->entry;\n-  exit_bb = region->exit;\n+  if (gimple_code (entry_stmt) == GIMPLE_OMP_TASK)\n+    exit_bb = region->cont;\n+  else\n+    exit_bb = region->exit;\n \n   bool is_cilk_for\n     = (flag_cilkplus\n@@ -5436,7 +5439,9 @@ expand_omp_taskreg (struct omp_region *region)\n \t variable.  In which case, we need to keep the assignment.  */\n       if (gimple_omp_taskreg_data_arg (entry_stmt))\n \t{\n-\t  basic_block entry_succ_bb = single_succ (entry_bb);\n+\t  basic_block entry_succ_bb\n+\t    = single_succ_p (entry_bb) ? single_succ (entry_bb)\n+\t\t\t\t       : FALLTHRU_EDGE (entry_bb)->dest;\n \t  tree arg, narg;\n \t  gimple parcopy_stmt = NULL;\n \n@@ -5524,14 +5529,28 @@ expand_omp_taskreg (struct omp_region *region)\n       e = split_block (entry_bb, stmt);\n       gsi_remove (&gsi, true);\n       entry_bb = e->dest;\n-      single_succ_edge (entry_bb)->flags = EDGE_FALLTHRU;\n+      edge e2 = NULL;\n+      if (gimple_code (entry_stmt) == GIMPLE_OMP_PARALLEL)\n+\tsingle_succ_edge (entry_bb)->flags = EDGE_FALLTHRU;\n+      else\n+\t{\n+\t  e2 = make_edge (e->src, BRANCH_EDGE (entry_bb)->dest, EDGE_ABNORMAL);\n+\t  gcc_assert (e2->dest == region->exit);\n+\t  remove_edge (BRANCH_EDGE (entry_bb));\n+\t  set_immediate_dominator (CDI_DOMINATORS, e2->dest, e->src);\n+\t  gsi = gsi_last_bb (region->exit);\n+\t  gcc_assert (!gsi_end_p (gsi)\n+\t\t      && gimple_code (gsi_stmt (gsi)) == GIMPLE_OMP_RETURN);\n+\t  gsi_remove (&gsi, true);\n+\t}\n \n-      /* Convert GIMPLE_OMP_RETURN into a RETURN_EXPR.  */\n+      /* Convert GIMPLE_OMP_{RETURN,CONTINUE} into a RETURN_EXPR.  */\n       if (exit_bb)\n \t{\n \t  gsi = gsi_last_bb (exit_bb);\n \t  gcc_assert (!gsi_end_p (gsi)\n-\t\t      && gimple_code (gsi_stmt (gsi)) == GIMPLE_OMP_RETURN);\n+\t\t      && (gimple_code (gsi_stmt (gsi))\n+\t\t\t  == (e2 ? GIMPLE_OMP_CONTINUE : GIMPLE_OMP_RETURN)));\n \t  stmt = gimple_build_return (NULL);\n \t  gsi_insert_after (&gsi, stmt, GSI_SAME_STMT);\n \t  gsi_remove (&gsi, true);\n@@ -5552,6 +5571,14 @@ expand_omp_taskreg (struct omp_region *region)\n       new_bb = move_sese_region_to_fn (child_cfun, entry_bb, exit_bb, block);\n       if (exit_bb)\n \tsingle_succ_edge (new_bb)->flags = EDGE_FALLTHRU;\n+      if (e2)\n+\t{\n+\t  basic_block dest_bb = e2->dest;\n+\t  if (!exit_bb)\n+\t    make_edge (new_bb, dest_bb, EDGE_FALLTHRU);\n+\t  remove_edge (e2);\n+\t  set_immediate_dominator (CDI_DOMINATORS, dest_bb, new_bb);\n+\t}\n       /* When the OMP expansion process cannot guarantee an up-to-date\n          loop tree arrange for the child function to fixup loops.  */\n       if (loops_state_satisfies_p (LOOPS_NEED_FIXUP))\n@@ -11158,6 +11185,10 @@ lower_omp_taskreg (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n     gimple_seq_add_stmt (&new_body, gimple_build_label (ctx->cancel_label));\n   gimple_seq_add_seq (&new_body, par_olist);\n   new_body = maybe_catch_exception (new_body);\n+  if (gimple_code (stmt) == GIMPLE_OMP_TASK)\n+    gimple_seq_add_stmt (&new_body,\n+\t\t\t gimple_build_omp_continue (integer_zero_node,\n+\t\t\t\t\t\t    integer_zero_node));\n   gimple_seq_add_stmt (&new_body, gimple_build_omp_return (false));\n   gimple_omp_set_body (stmt, new_body);\n \n@@ -12272,6 +12303,10 @@ make_gimple_omp_edges (basic_block bb, struct omp_region **region,\n \t somewhere other than the next block.  This will be\n \t created later.  */\n       cur_region->exit = bb;\n+      if (cur_region->type == GIMPLE_OMP_TASK)\n+\t/* Add an edge corresponding to not scheduling the task\n+\t   immediately.  */\n+\tmake_edge (cur_region->entry, bb, EDGE_ABNORMAL);\n       fallthru = cur_region->type != GIMPLE_OMP_SECTION;\n       cur_region = cur_region->outer;\n       break;\n@@ -12320,6 +12355,10 @@ make_gimple_omp_edges (basic_block bb, struct omp_region **region,\n \t  }\n \t  break;\n \n+\tcase GIMPLE_OMP_TASK:\n+\t  fallthru = true;\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "33ea5fbf2a2aa518ed4db98d58b70d4d81474184", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37dddbc771d55d42c25edb0ef4dad663dff21e8/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37dddbc771d55d42c25edb0ef4dad663dff21e8/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b37dddbc771d55d42c25edb0ef4dad663dff21e8", "patch": "@@ -1,3 +1,8 @@\n+2015-05-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/66133\n+\t* testsuite/libgomp.c/pr66133.c: New test.\n+\n 2015-05-13  Michael Haubenwallner  <michael.haubenwallner@ssi-schaefer.com>\n \n \t* Makefile.in: Regenerated with automake-1.11.6."}, {"sha": "e98e5aac4129d025a38269c3a5c1bcc8ccfe0444", "filename": "libgomp/testsuite/libgomp.c/pr66133.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37dddbc771d55d42c25edb0ef4dad663dff21e8/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr66133.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37dddbc771d55d42c25edb0ef4dad663dff21e8/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr66133.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr66133.c?ref=b37dddbc771d55d42c25edb0ef4dad663dff21e8", "patch": "@@ -0,0 +1,35 @@\n+/* PR middle-end/66133 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fopenmp\" } */\n+\n+#include <stdlib.h>\n+#include <unistd.h>\n+\n+volatile int x;\n+\n+__attribute__((noinline)) void\n+foo (void)\n+{\n+  if (x == 0)\n+    {\n+      #pragma omp task\n+\t{\n+\t  usleep (2000);\n+\t  exit (0);\n+\t}\n+    }\n+  else\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  #pragma omp parallel num_threads (2)\n+    {\n+      #pragma omp barrier\n+      #pragma omp single\n+\tfoo ();\n+    }\n+  exit (0);\n+}"}]}