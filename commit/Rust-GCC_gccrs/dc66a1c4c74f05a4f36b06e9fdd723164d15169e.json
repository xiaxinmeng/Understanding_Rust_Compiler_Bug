{"sha": "dc66a1c4c74f05a4f36b06e9fdd723164d15169e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM2NmExYzRjNzRmMDVhNGYzNmIwNmU5ZmRkNzIzMTY0ZDE1MTY5ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-04-17T07:16:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-04-17T07:16:15Z"}, "message": "h8300.c (SYMBOL_FLAG_FUNCVEC_FUNCTION): New.\n\n        * config/h8300/h8300.c (SYMBOL_FLAG_FUNCVEC_FUNCTION): New.\n        (small_call_insn_operand): Use it.\n        (SYMBOL_FLAG_EIGHTBIT_DATA): New.\n        (h8300_eightbit_constant_address_p): Use it.\n        (SYMBOL_FLAG_TINY_DATA): New.\n        (h8300_tiny_constant_address_p): Use it.\n        (h8300_encode_label, h8300_strip_name_encoding): Remove.\n        (h8300_encode_section_info): Set SYMBOL_REF_FLAGS.\n        * config/h8300/h8300.h (TINY_DATA_NAME_P): Remove.\n        (ASM_OUTPUT_LABELREF): Remove.\n\nFrom-SVN: r65726", "tree": {"sha": "6546484e8f4993848fb119f2a39ff354c253a619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6546484e8f4993848fb119f2a39ff354c253a619"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc66a1c4c74f05a4f36b06e9fdd723164d15169e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc66a1c4c74f05a4f36b06e9fdd723164d15169e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc66a1c4c74f05a4f36b06e9fdd723164d15169e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc66a1c4c74f05a4f36b06e9fdd723164d15169e/comments", "author": null, "committer": null, "parents": [{"sha": "0f6e5d4593c863b3a180f496c45cbd9268a2eef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6e5d4593c863b3a180f496c45cbd9268a2eef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6e5d4593c863b3a180f496c45cbd9268a2eef6"}], "stats": {"total": 79, "additions": 34, "deletions": 45}, "files": [{"sha": "b61ff71810e58d5d175bbc14ccba4441706ce390", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc66a1c4c74f05a4f36b06e9fdd723164d15169e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc66a1c4c74f05a4f36b06e9fdd723164d15169e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc66a1c4c74f05a4f36b06e9fdd723164d15169e", "patch": "@@ -1,3 +1,16 @@\n+2003-04-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/h8300/h8300.c (SYMBOL_FLAG_FUNCVEC_FUNCTION): New.\n+\t(small_call_insn_operand): Use it.\n+\t(SYMBOL_FLAG_EIGHTBIT_DATA): New.\n+\t(h8300_eightbit_constant_address_p): Use it.\n+\t(SYMBOL_FLAG_TINY_DATA): New.\n+\t(h8300_tiny_constant_address_p): Use it.\n+\t(h8300_encode_label, h8300_strip_name_encoding): Remove.\n+\t(h8300_encode_section_info): Set SYMBOL_REF_FLAGS.\n+\t* config/h8300/h8300.h (TINY_DATA_NAME_P): Remove.\n+\t(ASM_OUTPUT_LABELREF): Remove.\n+\n 2003-04-16  Richard Henderson  <rth@redhat.com>\n \n \t* config/frv/frv.c (symbol_ref_small_data_p): Remove.  Replace"}, {"sha": "b4e7a33e9bc0ef983f8738083d29d50b42d1cd4d", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 21, "deletions": 40, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc66a1c4c74f05a4f36b06e9fdd723164d15169e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc66a1c4c74f05a4f36b06e9fdd723164d15169e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=dc66a1c4c74f05a4f36b06e9fdd723164d15169e", "patch": "@@ -66,9 +66,7 @@ static void h8300_insert_attributes PARAMS ((tree, tree *));\n #ifndef OBJECT_FORMAT_ELF\n static void h8300_asm_named_section PARAMS ((const char *, unsigned int));\n #endif\n-static void h8300_encode_label PARAMS ((tree));\n static void h8300_encode_section_info PARAMS ((tree, int));\n-static const char *h8300_strip_name_encoding PARAMS ((const char *));\n static int const_costs PARAMS ((rtx, enum rtx_code, enum rtx_code));\n static int h8300_and_costs PARAMS ((rtx));\n static int h8300_shift_costs PARAMS ((rtx));\n@@ -99,6 +97,11 @@ const char * const *h8_reg_names;\n /* Various operations needed by the following, indexed by CPU_TYPE.  */\n \n const char *h8_push_op, *h8_pop_op, *h8_mov_op;\n+\n+/* Machine-specific symbol_ref flags.  */\n+#define SYMBOL_FLAG_FUNCVEC_FUNCTION\t(SYMBOL_FLAG_MACH_DEP << 0)\n+#define SYMBOL_FLAG_EIGHTBIT_DATA\t(SYMBOL_FLAG_MACH_DEP << 1)\n+#define SYMBOL_FLAG_TINY_DATA\t\t(SYMBOL_FLAG_MACH_DEP << 2)\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -111,8 +114,6 @@ const char *h8_push_op, *h8_pop_op, *h8_mov_op;\n #define TARGET_ASM_FUNCTION_EPILOGUE h8300_output_function_epilogue\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO h8300_encode_section_info\n-#undef TARGET_STRIP_NAME_ENCODING\n-#define TARGET_STRIP_NAME_ENCODING h8300_strip_name_encoding\n \n #undef TARGET_INSERT_ATTRIBUTES\n #define TARGET_INSERT_ATTRIBUTES h8300_insert_attributes\n@@ -913,10 +914,9 @@ small_call_insn_operand (op, mode)\n       if (register_operand (inside, Pmode))\n \treturn 1;\n \n-      /* A call through the function vector is a small\n-\t call too.  */\n+      /* A call through the function vector is a small call too.  */\n       if (GET_CODE (inside) == SYMBOL_REF\n-\t  && SYMBOL_REF_FLAG (inside))\n+\t  && (SYMBOL_REF_FLAGS (inside) & SYMBOL_FLAG_FUNCVEC_FUNCTION))\n \treturn 1;\n     }\n   /* Otherwise it's a large call.  */\n@@ -4168,50 +4168,31 @@ h8300_handle_tiny_data_attribute (node, name, args, flags, no_add_attrs)\n   return NULL_TREE;\n }\n \n-static void\n-h8300_encode_label (decl)\n-     tree decl;\n-{\n-  const char *str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n-  const int len = strlen (str);\n-  char *newstr = alloca (len + 2);\n-\n-  newstr[0] = '&';\n-  strcpy (&newstr[1], str);\n-\n-  XSTR (XEXP (DECL_RTL (decl), 0), 0) =\n-    ggc_alloc_string (newstr, len + 1);\n-}\n-\n-/* If we are referencing a function that is supposed to be called\n-   through the function vector, the SYMBOL_REF_FLAG in the rtl\n-   so the call patterns can generate the correct code.  */\n+/* Mark function vectors, and various small data objects.  */\n \n static void\n h8300_encode_section_info (decl, first)\n      tree decl;\n      int first;\n {\n+  int extra_flags = 0;\n+\n+  default_encode_section_info (decl, first);\n+\n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && h8300_funcvec_function_p (decl))\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+    extra_flags = SYMBOL_FLAG_FUNCVEC_FUNCTION;\n   else if (TREE_CODE (decl) == VAR_DECL\n \t   && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n     {\n       if (h8300_eightbit_data_p (decl))\n-\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+\textra_flags = SYMBOL_FLAG_EIGHTBIT_DATA;\n       else if (first && h8300_tiny_data_p (decl))\n-\th8300_encode_label (decl);\n+\textra_flags = SYMBOL_FLAG_TINY_DATA;\n     }\n-}\n-\n-/* Undo the effects of the above.  */\n \n-static const char *\n-h8300_strip_name_encoding (str)\n-     const char *str;\n-{\n-  return str + (*str == '*' || *str == '@' || *str == '&');\n+  if (extra_flags)\n+    SYMBOL_REF_FLAGS (XEXP (DECL_RTL (decl), 0)) |= extra_flags;\n }\n \n const char *\n@@ -4460,8 +4441,8 @@ h8300_eightbit_constant_address_p (x)\n   unsigned HOST_WIDE_INT addr;\n \n   /* We accept symbols declared with eightbit_data.  */\n-  if (GET_CODE (x) == SYMBOL_REF && SYMBOL_REF_FLAG (x))\n-    return 1;\n+  if (GET_CODE (x) == SYMBOL_REF)\n+    return (SYMBOL_REF_FLAGS (x) & SYMBOL_FLAG_EIGHTBIT_DATA) != 0;\n \n   if (GET_CODE (x) != CONST_INT)\n     return 0;\n@@ -4494,8 +4475,8 @@ h8300_tiny_constant_address_p (x)\n   unsigned HOST_WIDE_INT addr;\n \n   /* We accept symbols declared with tiny_data.  */\n-  if (GET_CODE (x) == SYMBOL_REF && TINY_DATA_NAME_P (XSTR (x, 0)))\n-    return 1;\n+  if (GET_CODE (x) == SYMBOL_REF)\n+    return (SYMBOL_REF_FLAGS (x) & SYMBOL_FLAG_TINY_DATA) != 0;\n \n   if (GET_CODE (x) != CONST_INT)\n     return 0;"}, {"sha": "9552aeed9e089a2fe754e6e56bf78c57f028f5c0", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc66a1c4c74f05a4f36b06e9fdd723164d15169e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc66a1c4c74f05a4f36b06e9fdd723164d15169e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=dc66a1c4c74f05a4f36b06e9fdd723164d15169e", "patch": "@@ -1090,8 +1090,6 @@ struct cum_arg\n     }\t\t\t\t\t\t\\\n }\n \n-#define TINY_DATA_NAME_P(NAME) (*(NAME) == '&')\n-\n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n \n@@ -1122,9 +1120,6 @@ struct cum_arg\n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION h8300_asm_named_section\n \n-#define ASM_OUTPUT_LABELREF(FILE, NAME)  \\\n-  asm_fprintf ((FILE), \"%U%s\", (NAME) + (TINY_DATA_NAME_P (NAME) ? 1 : 0))\n-\n #define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\n \n /* Globalizing directive for a label.  */"}]}