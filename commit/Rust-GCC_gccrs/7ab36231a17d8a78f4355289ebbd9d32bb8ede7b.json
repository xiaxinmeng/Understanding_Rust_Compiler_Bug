{"sha": "7ab36231a17d8a78f4355289ebbd9d32bb8ede7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FiMzYyMzFhMTdkOGE3OGY0MzU1Mjg5ZWJiZDlkMzJiYjhlZGU3Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-17T17:58:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-17T18:15:41Z"}, "message": "libstdc++: P1970R2 Consistency for size() functions: Add ranges::ssize\n\nThis defines ranges::ssize as approved in Prague. It's unclear what is\nsupposed to happen for types for which range_difference_t is not a valid\ntype. I've assumed they are not meant to be usable with ranges::ssize,\ndespite being usable with ranges::size.\n\n\t* include/bits/range_access.h (_SSize, ssize): Define for C++20.\n\t* testsuite/std/ranges/access/ssize.cc: New test.", "tree": {"sha": "1c419defbfddea3d2ff7785a335518b88ef130c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c419defbfddea3d2ff7785a335518b88ef130c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9866abe31ec47f493ff40f525ad970bb60906c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9866abe31ec47f493ff40f525ad970bb60906c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9866abe31ec47f493ff40f525ad970bb60906c4b"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "547337dda90f5b9b4c4ec3abb4b7bbcb3521174a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7ab36231a17d8a78f4355289ebbd9d32bb8ede7b", "patch": "@@ -1,5 +1,9 @@\n 2020-02-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tP1970R2 Consistency for size() functions: Add ranges::ssize\n+\t* include/bits/range_access.h (_SSize, ssize): Define for C++20.\n+\t* testsuite/std/ranges/access/ssize.cc: New test.\n+\n \tP1956R1 On the names of low-level bit manipulation functions\n \t* include/bits/hashtable_policy.h: Update comment.\n \t* include/std/bit (__ispow2, __ceil2, __floor2, __log2p1): Rename."}, {"sha": "8bac0efc6ed1267e686eea2a3c46ea4df6488dcb", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=7ab36231a17d8a78f4355289ebbd9d32bb8ede7b", "patch": "@@ -35,6 +35,7 @@\n #if __cplusplus >= 201103L\n #include <initializer_list>\n #include <bits/iterator_concepts.h>\n+#include <bits/int_limits.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -723,6 +724,32 @@ namespace ranges\n \t}\n     };\n \n+    struct _SSize\n+    {\n+      template<typename _Tp>\n+\trequires requires (_Tp&& __e)\n+\t  {\n+\t    _Begin{}(std::forward<_Tp>(__e));\n+\t    _Size{}(std::forward<_Tp>(__e));\n+\t  }\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_Size{}(std::forward<_Tp>(__e))))\n+\t{\n+\t  using __iter_type = decltype(_Begin{}(std::forward<_Tp>(__e)));\n+\t  using __diff_type = iter_difference_t<__iter_type>;\n+\t  using std::__detail::__int_limits;\n+\t  auto __size = _Size{}(std::forward<_Tp>(__e));\n+\t  if constexpr (integral<__diff_type>)\n+\t    {\n+\t      if constexpr (__int_limits<__diff_type>::digits\n+\t\t\t    < __int_limits<ptrdiff_t>::digits)\n+\t\treturn static_cast<ptrdiff_t>(__size);\n+\t    }\n+\t  return static_cast<__diff_type>(__size);\n+\t}\n+    };\n+\n     template<typename _Tp>\n       concept __member_empty = requires(_Tp&& __t)\n \t{ bool(std::forward<_Tp>(__t).empty()); };\n@@ -834,6 +861,7 @@ namespace ranges\n     inline constexpr __cust_access::_CRBegin crbegin{};\n     inline constexpr __cust_access::_CREnd crend{};\n     inline constexpr __cust_access::_Size size{};\n+    inline constexpr __cust_access::_SSize ssize{};\n     inline constexpr __cust_access::_Empty empty{};\n     inline constexpr __cust_access::_Data data{};\n     inline constexpr __cust_access::_CData cdata{};"}, {"sha": "5aa05be8f20c4782ed762b4dea1045ba289f7063", "filename": "libstdc++-v3/testsuite/std/ranges/access/ssize.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ab36231a17d8a78f4355289ebbd9d32bb8ede7b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc?ref=7ab36231a17d8a78f4355289ebbd9d32bb8ede7b", "patch": "@@ -0,0 +1,98 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <ranges>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using std::ptrdiff_t;\n+\n+void\n+test01()\n+{\n+  constexpr int a[10] = { };\n+  static_assert( std::same_as<decltype(std::ranges::ssize(a)), ptrdiff_t> );\n+  static_assert( std::ranges::ssize(a) == 10 );\n+  static_assert( noexcept(std::ranges::ssize(a)) );\n+\n+  int a2[2];\n+  static_assert( std::same_as<decltype(std::ranges::ssize(a2)), ptrdiff_t> );\n+  VERIFY( std::ranges::ssize(a2) == 2);\n+  static_assert( noexcept(std::ranges::ssize(a2)) );\n+\n+  struct Incomplete;\n+  using A = Incomplete[2]; // bounded array of incomplete type\n+  extern A& f();\n+  static_assert( std::same_as<decltype(std::ranges::ssize(f())), ptrdiff_t> );\n+}\n+\n+void\n+test02()\n+{\n+  int a[3] = { };\n+  __gnu_test::test_sized_range<int, __gnu_test::input_iterator_wrapper> ri(a);\n+  VERIFY( std::ranges::ssize(ri) == 3 );\n+  static_assert( noexcept(std::ranges::ssize(ri)) );\n+}\n+\n+void\n+test04()\n+{\n+  int a[] = { 0, 1 };\n+  __gnu_test::test_range<int, __gnu_test::random_access_iterator_wrapper> r(a);\n+  VERIFY( std::ranges::ssize(r) == std::ranges::end(r) - std::ranges::begin(r) );\n+}\n+\n+struct R5\n+{\n+  int size() const noexcept { return 0; }\n+  R5* begin() { return this; }\n+  R5* end() { return this + 1; }\n+};\n+\n+template<>\n+constexpr bool std::ranges::disable_sized_range<R5> = true;\n+\n+void\n+test05()\n+{\n+  R5 r;\n+  VERIFY( std::ranges::ssize(r) == 1 );\n+}\n+\n+void\n+test06()\n+{\n+  auto i = std::views::iota(1ull, 5);\n+  auto s = std::ranges::ssize(i);\n+  using R = std::ranges::range_difference_t<decltype(i)>;\n+  static_assert( std::same_as<decltype(s), R> );\n+  VERIFY( s == 4 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test04();\n+  test05();\n+  test06();\n+}"}]}