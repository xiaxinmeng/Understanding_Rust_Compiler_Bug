{"sha": "3e19841a04bd4758706e7a387cf0c3ca311c9fb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UxOTg0MWEwNGJkNDc1ODcwNmU3YTM4N2NmMGMzY2EzMTFjOWZiMg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-02-09T16:44:18Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-02-09T16:44:18Z"}, "message": "configure.ac: Sync with src.\n\n2007-02-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* configure.ac: Sync with src.\n\t* configure: Regenerate.\n\nFrom-SVN: r121762", "tree": {"sha": "539e58f2ef336fda5b91d09e61d8dbb030a36cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/539e58f2ef336fda5b91d09e61d8dbb030a36cbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e19841a04bd4758706e7a387cf0c3ca311c9fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e19841a04bd4758706e7a387cf0c3ca311c9fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e19841a04bd4758706e7a387cf0c3ca311c9fb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e19841a04bd4758706e7a387cf0c3ca311c9fb2/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74a487625ab75d9c3c08c3d20f4d2ba206cc5aab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a487625ab75d9c3c08c3d20f4d2ba206cc5aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a487625ab75d9c3c08c3d20f4d2ba206cc5aab"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "0178ee57d998b0097866e7d1cf606b08a2567f91", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e19841a04bd4758706e7a387cf0c3ca311c9fb2/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e19841a04bd4758706e7a387cf0c3ca311c9fb2/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=3e19841a04bd4758706e7a387cf0c3ca311c9fb2", "patch": "@@ -1,3 +1,8 @@\n+2007-02-09  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* configure.ac: Sync with src.\n+\t* configure: Regenerate.\n+\n 2007-02-09  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* Makefile.in: Regenerate."}, {"sha": "d127a9b448c4ef8ef4013a38d88ec949ea0eb512", "filename": "configure", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e19841a04bd4758706e7a387cf0c3ca311c9fb2/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e19841a04bd4758706e7a387cf0c3ca311c9fb2/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=3e19841a04bd4758706e7a387cf0c3ca311c9fb2", "patch": "@@ -4654,6 +4654,9 @@ extra_nmflags_for_target=\n extra_ranlibflags_for_target=\n target_makefile_frag=/dev/null\n case \"${target}\" in\n+  mep*-*-*)\n+    target_makefile_frag=\"config/mt-mep\"\n+    ;;\n   spu-*-*)\n     target_makefile_frag=\"config/mt-spu\"\n     ;;\n@@ -5241,6 +5244,9 @@ case \"${target}\" in\n       FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/libgloss/libnosys'\n     fi\n     ;;\n+  mep*)\n+    FLAGS_FOR_TARGET=\"$FLAGS_FOR_TARGET -mlibrary\"\n+    ;;\n esac\n \n # Makefile fragments.\n@@ -7245,7 +7251,7 @@ echo \"${ECHO_T}no\" >&6\n     ac_cv_path_AR_FOR_TARGET=$AR_FOR_TARGET\n   fi\n fi\n-if test -z \"$ac_cv_path_AR_FOR_TARGET\" ; then\n+if test -z \"$ac_cv_path_AR_FOR_TARGET\" && test -n \"$gcc_cv_tool_dirs\"; then\n   # Extract the first word of \"ar\", so it can be a program name with args.\n set dummy ar; ac_word=$2\n echo \"$as_me:$LINENO: checking for $ac_word\" >&5\n@@ -7418,7 +7424,7 @@ echo \"${ECHO_T}no\" >&6\n     ac_cv_path_AS_FOR_TARGET=$AS_FOR_TARGET\n   fi\n fi\n-if test -z \"$ac_cv_path_AS_FOR_TARGET\" ; then\n+if test -z \"$ac_cv_path_AS_FOR_TARGET\" && test -n \"$gcc_cv_tool_dirs\"; then\n   # Extract the first word of \"as\", so it can be a program name with args.\n set dummy as; ac_word=$2\n echo \"$as_me:$LINENO: checking for $ac_word\" >&5\n@@ -7591,7 +7597,7 @@ echo \"${ECHO_T}no\" >&6\n     ac_cv_path_DLLTOOL_FOR_TARGET=$DLLTOOL_FOR_TARGET\n   fi\n fi\n-if test -z \"$ac_cv_path_DLLTOOL_FOR_TARGET\" ; then\n+if test -z \"$ac_cv_path_DLLTOOL_FOR_TARGET\" && test -n \"$gcc_cv_tool_dirs\"; then\n   # Extract the first word of \"dlltool\", so it can be a program name with args.\n set dummy dlltool; ac_word=$2\n echo \"$as_me:$LINENO: checking for $ac_word\" >&5\n@@ -7764,7 +7770,7 @@ echo \"${ECHO_T}no\" >&6\n     ac_cv_path_LD_FOR_TARGET=$LD_FOR_TARGET\n   fi\n fi\n-if test -z \"$ac_cv_path_LD_FOR_TARGET\" ; then\n+if test -z \"$ac_cv_path_LD_FOR_TARGET\" && test -n \"$gcc_cv_tool_dirs\"; then\n   # Extract the first word of \"ld\", so it can be a program name with args.\n set dummy ld; ac_word=$2\n echo \"$as_me:$LINENO: checking for $ac_word\" >&5\n@@ -7937,7 +7943,7 @@ echo \"${ECHO_T}no\" >&6\n     ac_cv_path_LIPO_FOR_TARGET=$LIPO_FOR_TARGET\n   fi\n fi\n-if test -z \"$ac_cv_path_LIPO_FOR_TARGET\" ; then\n+if test -z \"$ac_cv_path_LIPO_FOR_TARGET\" && test -n \"$gcc_cv_tool_dirs\"; then\n   # Extract the first word of \"lipo\", so it can be a program name with args.\n set dummy lipo; ac_word=$2\n echo \"$as_me:$LINENO: checking for $ac_word\" >&5\n@@ -8110,7 +8116,7 @@ echo \"${ECHO_T}no\" >&6\n     ac_cv_path_NM_FOR_TARGET=$NM_FOR_TARGET\n   fi\n fi\n-if test -z \"$ac_cv_path_NM_FOR_TARGET\" ; then\n+if test -z \"$ac_cv_path_NM_FOR_TARGET\" && test -n \"$gcc_cv_tool_dirs\"; then\n   # Extract the first word of \"nm\", so it can be a program name with args.\n set dummy nm; ac_word=$2\n echo \"$as_me:$LINENO: checking for $ac_word\" >&5\n@@ -8283,7 +8289,7 @@ echo \"${ECHO_T}no\" >&6\n     ac_cv_path_OBJDUMP_FOR_TARGET=$OBJDUMP_FOR_TARGET\n   fi\n fi\n-if test -z \"$ac_cv_path_OBJDUMP_FOR_TARGET\" ; then\n+if test -z \"$ac_cv_path_OBJDUMP_FOR_TARGET\" && test -n \"$gcc_cv_tool_dirs\"; then\n   # Extract the first word of \"objdump\", so it can be a program name with args.\n set dummy objdump; ac_word=$2\n echo \"$as_me:$LINENO: checking for $ac_word\" >&5\n@@ -8456,7 +8462,7 @@ echo \"${ECHO_T}no\" >&6\n     ac_cv_path_RANLIB_FOR_TARGET=$RANLIB_FOR_TARGET\n   fi\n fi\n-if test -z \"$ac_cv_path_RANLIB_FOR_TARGET\" ; then\n+if test -z \"$ac_cv_path_RANLIB_FOR_TARGET\" && test -n \"$gcc_cv_tool_dirs\"; then\n   # Extract the first word of \"ranlib\", so it can be a program name with args.\n set dummy ranlib; ac_word=$2\n echo \"$as_me:$LINENO: checking for $ac_word\" >&5\n@@ -8629,7 +8635,7 @@ echo \"${ECHO_T}no\" >&6\n     ac_cv_path_STRIP_FOR_TARGET=$STRIP_FOR_TARGET\n   fi\n fi\n-if test -z \"$ac_cv_path_STRIP_FOR_TARGET\" ; then\n+if test -z \"$ac_cv_path_STRIP_FOR_TARGET\" && test -n \"$gcc_cv_tool_dirs\"; then\n   # Extract the first word of \"strip\", so it can be a program name with args.\n set dummy strip; ac_word=$2\n echo \"$as_me:$LINENO: checking for $ac_word\" >&5\n@@ -8802,7 +8808,7 @@ echo \"${ECHO_T}no\" >&6\n     ac_cv_path_WINDRES_FOR_TARGET=$WINDRES_FOR_TARGET\n   fi\n fi\n-if test -z \"$ac_cv_path_WINDRES_FOR_TARGET\" ; then\n+if test -z \"$ac_cv_path_WINDRES_FOR_TARGET\" && test -n \"$gcc_cv_tool_dirs\"; then\n   # Extract the first word of \"windres\", so it can be a program name with args.\n set dummy windres; ac_word=$2\n echo \"$as_me:$LINENO: checking for $ac_word\" >&5"}, {"sha": "61cc70077f2821b45d636c7ee6465dea625ee6ad", "filename": "configure.ac", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e19841a04bd4758706e7a387cf0c3ca311c9fb2/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e19841a04bd4758706e7a387cf0c3ca311c9fb2/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=3e19841a04bd4758706e7a387cf0c3ca311c9fb2", "patch": "@@ -1744,6 +1744,9 @@ extra_nmflags_for_target=\n extra_ranlibflags_for_target=\n target_makefile_frag=/dev/null\n case \"${target}\" in\n+  mep*-*-*)\n+    target_makefile_frag=\"config/mt-mep\"\n+    ;;\n   spu-*-*)\n     target_makefile_frag=\"config/mt-spu\"\n     ;;\n@@ -2322,6 +2325,9 @@ case \"${target}\" in\n       FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/libgloss/libnosys'\n     fi\n     ;;\n+  mep*)\n+    FLAGS_FOR_TARGET=\"$FLAGS_FOR_TARGET -mlibrary\"\n+    ;;\n esac\n \n # Makefile fragments."}]}