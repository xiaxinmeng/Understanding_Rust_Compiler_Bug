{"sha": "ce600bc4643fd046301bd0b6f959546ae459875b", "node_id": "C_kwDOANBUbNoAKGNlNjAwYmM0NjQzZmQwNDYzMDFiZDBiNmY5NTk1NDZhZTQ1OTg3NWI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-30T00:16:46Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-30T00:16:46Z"}, "message": "Daily bump.", "tree": {"sha": "071f0ea5165f9d31afdbfecc9446d20f86144dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/071f0ea5165f9d31afdbfecc9446d20f86144dd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce600bc4643fd046301bd0b6f959546ae459875b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce600bc4643fd046301bd0b6f959546ae459875b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce600bc4643fd046301bd0b6f959546ae459875b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce600bc4643fd046301bd0b6f959546ae459875b/comments", "author": null, "committer": null, "parents": [{"sha": "e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a5c77388ae3791afed4f4286ec7e41e5b9f7c3"}], "stats": {"total": 191, "additions": 190, "deletions": 1}, "files": [{"sha": "cff91891957282f4034abc01e035e97f55633979", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce600bc4643fd046301bd0b6f959546ae459875b", "patch": "@@ -1,3 +1,35 @@\n+2022-06-29  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR c++/106102\n+\t* system.h: Introduce INCLUDE_PTHREAD_H macros to include <pthread.h>.\n+\n+2022-06-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/nios2/nios2.cc (nios2_load_pic_address): Use gen_rtx_MEM\n+\tnot gen_const_mem for UNSPEC_PIC_CALL_SYM.\n+\n+2022-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/106082\n+\t* combine.cc (distribute_notes): Preserve notes when\n+\tthey indicate a call doesn't perform a non-local goto.\n+\n+2022-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106112\n+\t* tree-ssa-sccvn.cc (valueized_wider_op): Properly extend\n+\ta constant operand according to its type.\n+\n+2022-06-29  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/invoke.texi: Remove removed evrp-mode.\n+\n+2022-06-29  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\tPR target/106097\n+\t* config/loongarch/loongarch.cc (loongarch_build_integer):\n+\tRemove undefined behavior from code.\n+\n 2022-06-28  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* doc/sourcebuild.texi: Document new no_alignment_constraints"}, {"sha": "b03df3b8b857e61d8b31ca785cf6303cd93e3a6c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ce600bc4643fd046301bd0b6f959546ae459875b", "patch": "@@ -1 +1 @@\n-20220629\n+20220630"}, {"sha": "5d68cc633086b2ad90a0cb96b4834b8ef7585c0b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ce600bc4643fd046301bd0b6f959546ae459875b", "patch": "@@ -1,3 +1,12 @@\n+2022-06-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc (macro_info, macro_traits, macro_table,\n+\tmacro_remap): Rename to ...\n+\t(macro_loc_info, macro_loc_traits, macro_loc_table,\n+\tmacro_loc_remap): ... these.  Update all uses.\n+\t(module_state::write_prepare_maps): Remove unneeded macro checking.\n+\t(module_state::write_begin): Free macro_loc_remap.\n+\n 2022-06-27  Sergei Trofimovich  <siarheit@google.com>\n \n \tPR c++/106102"}, {"sha": "81531a4e3584d891c5dd177f80c94043194e8c2b", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=ce600bc4643fd046301bd0b6f959546ae459875b", "patch": "@@ -1,3 +1,50 @@\n+2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106139\n+\t* d-convert.cc (convert_expr): Handle casting from array to vector.\n+\t(convert_for_rvalue): Rewrite vector to array casts of the same\n+\telement type into a constructor.\n+\t(convert_for_assignment): Return calling convert_for_rvalue.\n+\t* expr.cc (ExprVisitor::visit (VectorExp *)): Handle generating a\n+\tvector expression from a static array.\n+\t* toir.cc (IRVisitor::visit (ReturnStatement *)): Call\n+\tconvert_for_rvalue on return value.\n+\n+2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* intrinsics.cc (build_shuffle_mask_type): Use to_constant when\n+\tgetting the number of subparts from a vector type.\n+\t(expand_intrinsic_vec_shufflevector): Likewise.\n+\n+2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* intrinsics.cc: Include diagnostic.h, langhooks.h,\n+\tvec-perm-indices.h.\n+\t(maybe_set_intrinsic): Add cases for new simd intrinsics.\n+\t(warn_mismatched_return_type): New function.\n+\t(warn_mismatched_argument): New function.\n+\t(build_shuffle_mask_type): New function.\n+\t(maybe_warn_intrinsic_mismatch): New function.\n+\t(expand_intrinsic_vec_cond): New function.\n+\t(expand_intrinsic_vec_convert): New function.\n+\t(expand_intrinsic_vec_blend): New function.\n+\t(expand_intrinsic_vec_shuffle): New function.\n+\t(expand_intrinsic_vec_shufflevector): New function.\n+\t(expand_intrinsic_vec_load_unaligned): New function.\n+\t(expand_intrinsic_vec_store_unaligned): New function.\n+\t(maybe_expand_intrinsic): Check signature of intrinsic before handing\n+\toff to front-end lowering.  Add cases for new simd intrinsics.\n+\t* intrinsics.def (INTRINSIC_LOADUNALIGNED): Define intrinsic.\n+\t(INTRINSIC_STOREUNALIGNED): Define intrinsic.\n+\t(INTRINSIC_SHUFFLE): Define intrinsic.\n+\t(INTRINSIC_SHUFFLEVECTOR): Define intrinsic.\n+\t(INTRINSIC_CONVERTVECTOR): Define intrinsic.\n+\t(INTRINSIC_BLENDVECTOR): Define intrinsic.\n+\t(INTRINSIC_EQUALMASK): Define intrinsic.\n+\t(INTRINSIC_NOTEQUALMASK): Define intrinsic.\n+\t(INTRINSIC_GREATERMASK): Define intrinsic.\n+\t(INTRINSIC_GREATEREQUALMASK): Define intrinsic.\n+\n 2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-codegen.cc: Include gimple-expr.h."}, {"sha": "f349c858acabe9bb3252f9327a5752f3a697f0ef", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ce600bc4643fd046301bd0b6f959546ae459875b", "patch": "@@ -1,3 +1,11 @@\n+2022-06-29  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/106121\n+\t* simplify.cc (gfc_simplify_extends_type_of): Do not attempt to\n+\tsimplify when one of the arguments is a CLASS variable that was\n+\tnot properly declared.\n+\n 2022-06-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gfortran.h (gfc_real_info): Add use_iec_60559 bitfield."}, {"sha": "d16b5735197ac16fc9c112948f008a51fc409801", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=ce600bc4643fd046301bd0b6f959546ae459875b", "patch": "@@ -1,3 +1,17 @@\n+2022-06-29  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/105812\n+\t* jit-playback.cc: Use the correct return type when folding in\n+\tas_truth_value.\n+\n+2022-06-29  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR c++/106102\n+\t* jit-playback.cc: Include <pthread.h> via \"system.h\" to avoid calloc()\n+\tpoisoning.\n+\t* jit-recording.cc: Ditto.\n+\t* libgccjit.cc: Ditto.\n+\n 2022-06-10  Antoni Boucher  <bouanto@zoho.com>\n \n \tPR jit/105829"}, {"sha": "f7aa13b5d1774f2573e18d15f1db0267b75cacd1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce600bc4643fd046301bd0b6f959546ae459875b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce600bc4643fd046301bd0b6f959546ae459875b", "patch": "@@ -1,3 +1,52 @@\n+2022-06-29  Antoni Boucher  <bouanto@zoho.com>\n+\n+\tPR jit/105812\n+\t* jit.dg/test-asm.cc: Add include missing to make the test pass.\n+\t* jit.dg/test-pr105812-bool-operations.c: New test.\n+\n+2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/106139\n+\t* gdc.dg/pr106139a.d: New test.\n+\t* gdc.dg/pr106139b.d: New test.\n+\t* gdc.dg/pr106139c.d: New test.\n+\t* gdc.dg/pr106139d.d: New test.\n+\n+2022-06-29  Harald Anlauf  <anlauf@gmx.de>\n+\t    Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/106121\n+\t* gfortran.dg/extends_type_of_4.f90: New test.\n+\n+2022-06-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106112\n+\t* gcc.dg/torture/pr106112.c: New testcase.\n+\n+2022-06-29  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* gcc.target/i386/avx512fp16-reduce-op-2.c: Force SSE2 for i?86.\n+\t* gcc.target/i386/pr99464.c: Likewise.\n+\n+2022-06-29  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* c-c++-common/torture/builtin-shufflevector-2.c: Prune ix86 MMX\n+\tABI warning.\n+\n+2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/Wbuiltin_declaration_mismatch.d: Rename to...\n+\t* gdc.dg/Wbuiltin_declaration_mismatch1.d: ...this.\n+\t* gdc.dg/Wbuiltin_declaration_mismatch2.d: New test.\n+\t* gdc.dg/torture/simd_blendvector.d: New test.\n+\t* gdc.dg/torture/simd_cond.d: New test.\n+\t* gdc.dg/torture/simd_convertvector.d: New test.\n+\t* gdc.dg/torture/simd_load.d: New test.\n+\t* gdc.dg/torture/simd_logical.d: New test.\n+\t* gdc.dg/torture/simd_shuffle.d: New test.\n+\t* gdc.dg/torture/simd_shufflevector.d: New test.\n+\t* gdc.dg/torture/simd_store.d: New test.\n+\n 2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* gdc.dg/attr_simd1.d: New test."}, {"sha": "d1b2b2c98445eea5d94475b196e4a5809bc4c0e6", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce600bc4643fd046301bd0b6f959546ae459875b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce600bc4643fd046301bd0b6f959546ae459875b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=ce600bc4643fd046301bd0b6f959546ae459875b", "patch": "@@ -1,3 +1,27 @@\n+2022-06-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* mk-kinds-h.sh: Change __float128 to _Float128 in a comment.\n+\t* acinclude.m4 (LIBGFOR_CHECK_MATH_IEEE128): Use _Float128 instead of\n+\t__float128.\n+\t* libgfortran.h (isnan): Change __float128 to _Float128 in a comment.\n+\t(__acoshieee128, __acosieee128, __asinhieee128, __asinieee128,\n+\t__atan2ieee128, __atanhieee128, __atanieee128, __copysignieee128,\n+\t__coshieee128, __cosieee128, __erfcieee128, __erfieee128,\n+\t__expieee128, __fabsieee128, __fmaieee128, __fmodieee128, __jnieee128,\n+\t__log10ieee128, __logieee128, __powieee128, __sinhieee128,\n+\t__sinieee128, __sqrtieee128, __tanhieee128, __tanieee128,\n+\t__ynieee128, __strtoieee128): Use _Float128 instead of __float128.\n+\t* configure: Regenerated.\n+\n+2022-06-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR bootstrap/106137\n+\t* acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Adjust comment.\n+\tAlso test for __float128.\n+\t(HAVE_FLOAT128): Adjust description.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\n 2022-06-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.ac: Check for strtof128 and strfromf128."}, {"sha": "8b2cc4b5041873bf1b9173b7d7a212a7a9ee286c", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce600bc4643fd046301bd0b6f959546ae459875b/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce600bc4643fd046301bd0b6f959546ae459875b/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=ce600bc4643fd046301bd0b6f959546ae459875b", "patch": "@@ -1,3 +1,9 @@\n+2022-06-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES): Add gcc/simd.d.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* libdruntime/gcc/simd.d: New file.\n+\n 2022-06-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/gcc/attributes.d (simd): Define."}]}