{"sha": "03c259ad42466912d13fef9a33e841e434233435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNjMjU5YWQ0MjQ2NjkxMmQxM2ZlZjlhMzNlODQxZTQzNDIzMzQzNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2006-10-24T22:55:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2006-10-24T22:55:36Z"}, "message": "i386.h (FIRST_PSEUDO_REGISTER): Define to 54.\n\n        * config/i386/i386.h (FIRST_PSEUDO_REGISTER): Define to 54.\n        (FIXED_REGISTERS, CALL_USED_REGISTERS): Add fpcr register.\n        (REG_ALLOC_ORDER): Add one element to allocate fpcr register.\n        (FRAME_POINTER_REGNUM): Update register number to 21.\n        (REG_CLASS_CONTENTS): Update contents for added fpcr register.\n        (HI_REGISTER_NAMES): Add \"fpcr\" for fpcr register.\n\n        * config/i386/i386.c (regclass_map): Add fpcr entry.\n        (dbx_register_map, dbx64_register_map, svr4_dbx_register_map):\n        Add fpcr entry.\n        (print_reg): Assert REGNO (x) != FPCR_REG.\n\n        * config/i386/i386.md (FPCR_REG, R11_REG): New constants.\n        (DIRFLAG_REG): Renumber.\n        (x86_fnstcw_1, x86_fldcw_1): Use FPCR_REG instead of FPSR_REG.\n        (*sibcall_1_rex64_v, *sibcall_value_1_rex64_v): Use R11_REG.\n        (sse_prologue_save, *sse_prologue_save_insn): Renumber\n        hardcoded SSE register numbers.\n\n        * config/i386/mmx.md (mmx_emms, mmx_femms): Renumber\n        hardcoded MMX register numbers.\n\nFrom-SVN: r118014", "tree": {"sha": "213c22b46f83c678c9748aad2abf8bd2d44e09f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/213c22b46f83c678c9748aad2abf8bd2d44e09f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03c259ad42466912d13fef9a33e841e434233435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c259ad42466912d13fef9a33e841e434233435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03c259ad42466912d13fef9a33e841e434233435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c259ad42466912d13fef9a33e841e434233435/comments", "author": null, "committer": null, "parents": [{"sha": "e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ef58afd46558f1e82c2d965c9bcdeb1ee47edb"}], "stats": {"total": 119, "additions": 73, "deletions": 46}, "files": [{"sha": "65be7f113e88ed00b1fdb28f2bfd73b2a88e31ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c259ad42466912d13fef9a33e841e434233435/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c259ad42466912d13fef9a33e841e434233435/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03c259ad42466912d13fef9a33e841e434233435", "patch": "@@ -1,3 +1,27 @@\n+2006-10-24  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* config/i386/i386.h (FIRST_PSEUDO_REGISTER): Define to 54.\n+\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Add fpcr register.\n+\t(REG_ALLOC_ORDER): Add one element to allocate fpcr register.\n+\t(FRAME_POINTER_REGNUM): Update register number to 21.\n+\t(REG_CLASS_CONTENTS): Update contents for added fpcr register.\n+\t(HI_REGISTER_NAMES): Add \"fpcr\" for fpcr register.\n+\n+\t* config/i386/i386.c (regclass_map): Add fpcr entry.\n+\t(dbx_register_map, dbx64_register_map, svr4_dbx_register_map):\n+\tAdd fpcr entry.\n+\t(print_reg): Assert REGNO (x) != FPCR_REG.\n+\n+\t* config/i386/i386.md (FPCR_REG, R11_REG): New constants.\n+\t(DIRFLAG_REG): Renumber.\n+\t(x86_fnstcw_1, x86_fldcw_1): Use FPCR_REG instead of FPSR_REG.\n+\t(*sibcall_1_rex64_v, *sibcall_value_1_rex64_v): Use R11_REG.\n+\t(sse_prologue_save, *sse_prologue_save_insn): Renumber\n+\thardcoded SSE register numbers.\n+\n+\t* config/i386/mmx.md (mmx_emms, mmx_femms): Renumber\n+\thardcoded MMX register numbers.\n+\n 2006-10-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR middle-end/29335"}, {"sha": "07381693c3dd328a7e2a88e8a4fb90804c0a2033", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c259ad42466912d13fef9a33e841e434233435/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c259ad42466912d13fef9a33e841e434233435/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=03c259ad42466912d13fef9a33e841e434233435", "patch": "@@ -855,8 +855,8 @@ enum reg_class const regclass_map[FIRST_PSEUDO_REGISTER] =\n   FLOAT_REGS, FLOAT_REGS, FLOAT_REGS, FLOAT_REGS,\n   /* arg pointer */\n   NON_Q_REGS,\n-  /* flags, fpsr, dirflag, frame */\n-  NO_REGS, NO_REGS, NO_REGS, NON_Q_REGS,\n+  /* flags, fpsr, fpcr, dirflag, frame */\n+  NO_REGS, NO_REGS, NO_REGS, NO_REGS, NON_Q_REGS,\n   SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS, SSE_REGS,\n   SSE_REGS, SSE_REGS,\n   MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS, MMX_REGS,\n@@ -873,7 +873,7 @@ int const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   0, 2, 1, 3, 6, 7, 4, 5,\t\t/* general regs */\n   12, 13, 14, 15, 16, 17, 18, 19,\t/* fp regs */\n-  -1, -1, -1, -1, -1,\t\t\t/* arg, flags, fpsr, dir, frame */\n+  -1, -1, -1, -1, -1, -1,\t\t/* arg, flags, fpsr, fpcr, dir, frame */\n   21, 22, 23, 24, 25, 26, 27, 28,\t/* SSE */\n   29, 30, 31, 32, 33, 34, 35, 36,       /* MMX */\n   -1, -1, -1, -1, -1, -1, -1, -1,\t/* extended integer registers */\n@@ -896,7 +896,7 @@ int const dbx64_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   0, 1, 2, 3, 4, 5, 6, 7,\t\t/* general regs */\n   33, 34, 35, 36, 37, 38, 39, 40,\t/* fp regs */\n-  -1, -1, -1, -1, -1,\t\t\t/* arg, flags, fpsr, dir, frame */\n+  -1, -1, -1, -1, -1, -1,\t\t/* arg, flags, fpsr, fpcr, dir, frame */\n   17, 18, 19, 20, 21, 22, 23, 24,\t/* SSE */\n   41, 42, 43, 44, 45, 46, 47, 48,       /* MMX */\n   8,9,10,11,12,13,14,15,\t\t/* extended integer registers */\n@@ -961,7 +961,7 @@ int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER] =\n {\n   0, 2, 1, 3, 6, 7, 5, 4,\t\t/* general regs */\n   11, 12, 13, 14, 15, 16, 17, 18,\t/* fp regs */\n-  -1, 9, -1, -1, -1,\t\t\t/* arg, flags, fpsr, dir, frame */\n+  -1, 9, -1, -1, -1, -1,\t\t/* arg, flags, fpsr, fpcr, dir, frame */\n   21, 22, 23, 24, 25, 26, 27, 28,\t/* SSE registers */\n   29, 30, 31, 32, 33, 34, 35, 36,\t/* MMX registers */\n   -1, -1, -1, -1, -1, -1, -1, -1,\t/* extended integer registers */\n@@ -7443,7 +7443,8 @@ print_reg (rtx x, int code, FILE *file)\n   gcc_assert (REGNO (x) != ARG_POINTER_REGNUM\n \t      && REGNO (x) != FRAME_POINTER_REGNUM\n \t      && REGNO (x) != FLAGS_REG\n-\t      && REGNO (x) != FPSR_REG);\n+\t      && REGNO (x) != FPSR_REG\n+\t      && REGNO (x) != FPCR_REG);\n \n   if (ASSEMBLER_DIALECT == ASM_ATT || USER_LABEL_PREFIX[0] == 0)\n     putc ('%', file);"}, {"sha": "8df94ac7843495e69c9056582796de74af5bcebc", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c259ad42466912d13fef9a33e841e434233435/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c259ad42466912d13fef9a33e841e434233435/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=03c259ad42466912d13fef9a33e841e434233435", "patch": "@@ -711,7 +711,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    eliminated during reloading in favor of either the stack or frame\n    pointer.  */\n \n-#define FIRST_PSEUDO_REGISTER 53\n+#define FIRST_PSEUDO_REGISTER 54\n \n /* Number of hardware registers that go into the DWARF-2 unwind info.\n    If not defined, equals FIRST_PSEUDO_REGISTER.  */\n@@ -731,8 +731,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define FIXED_REGISTERS\t\t\t\t\t\t\\\n /*ax,dx,cx,bx,si,di,bp,sp,st,st1,st2,st3,st4,st5,st6,st7*/\t\\\n {  0, 0, 0, 0, 0, 0, 0, 1, 0,  0,  0,  0,  0,  0,  0,  0,\t\\\n-/*arg,flags,fpsr,dir,frame*/\t\t\t\t\t\\\n-    1,    1,   1,  1,    1,\t\t\t\t\t\\\n+/*arg,flags,fpsr,fpcr,dir,frame*/\t\t\t\t\\\n+    1,    1,   1,   1,  1,    1,\t\t\t\t\\\n /*xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7*/\t\t\t\\\n      0,   0,   0,   0,   0,   0,   0,   0,\t\t\t\\\n /*mmx0,mmx1,mmx2,mmx3,mmx4,mmx5,mmx6,mmx7*/\t\t\t\\\n@@ -759,10 +759,10 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define CALL_USED_REGISTERS\t\t\t\t\t\\\n /*ax,dx,cx,bx,si,di,bp,sp,st,st1,st2,st3,st4,st5,st6,st7*/\t\\\n {  1, 1, 1, 0, 3, 3, 0, 1, 1,  1,  1,  1,  1,  1,  1,  1,\t\\\n-/*arg,flags,fpsr,dir,frame*/\t\t\t\t\t\\\n-     1,   1,   1,  1,    1,\t\t\t\t\t\\\n+/*arg,flags,fpsr,fpcr,dir,frame*/\t\t\t\t\\\n+    1,   1,    1,   1,  1,    1,\t\t\t\t\\\n /*xmm0,xmm1,xmm2,xmm3,xmm4,xmm5,xmm6,xmm7*/\t\t\t\\\n-     1,   1,   1,   1,   1,  1,    1,   1,\t\t\t\\\n+     1,   1,   1,   1,   1,   1,   1,   1,\t\t\t\\\n /*mmx0,mmx1,mmx2,mmx3,mmx4,mmx5,mmx6,mmx7*/\t\t\t\\\n      1,   1,   1,   1,   1,   1,   1,   1,\t\t\t\\\n /*  r8,  r9, r10, r11, r12, r13, r14, r15*/\t\t\t\\\n@@ -783,11 +783,11 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n {  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\\\n    18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\t\\\n    33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,  \\\n-   48, 49, 50, 51, 52 }\n+   48, 49, 50, 51, 52, 53 }\n \n /* ORDER_REGS_FOR_LOCAL_ALLOC is a macro which permits reg_alloc_order\n    to be rearranged based on a particular function.  When using sse math,\n-   we want to allocate SSE before x87 registers and vice vera.  */\n+   we want to allocate SSE before x87 registers and vice versa.  */\n \n #define ORDER_REGS_FOR_LOCAL_ALLOC x86_order_regs_for_local_alloc ()\n \n@@ -940,7 +940,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define HARD_FRAME_POINTER_REGNUM 6\n \n /* Base register for access to local variables of the function.  */\n-#define FRAME_POINTER_REGNUM 20\n+#define FRAME_POINTER_REGNUM 21\n \n /* First floating point reg */\n #define FIRST_FLOAT_REG 8\n@@ -1053,7 +1053,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    opcode needs reg %ebx.  But some systems pass args to the OS in ebx,\n    and the \"b\" register constraint is useful in asms for syscalls.\n \n-   The flags and fpsr registers are in no class.  */\n+   The flags, fpsr and fpcr registers are in no class.  */\n \n enum reg_class\n {\n@@ -1134,21 +1134,21 @@ enum reg_class\n       { 0x10,     0x0 }, { 0x20, 0x0 },\t/* SIREG, DIREG */\t\t\\\n       { 0x03,     0x0 },\t\t/* AD_REGS */\t\t\t\\\n       { 0x0f,     0x0 },\t\t/* Q_REGS */\t\t\t\\\n-  { 0x1100f0,  0x1fe0 },\t\t/* NON_Q_REGS */\t\t\\\n-      { 0x7f,  0x1fe0 },\t\t/* INDEX_REGS */\t\t\\\n-  { 0x1100ff,  0x0 },\t\t\t/* LEGACY_REGS */\t\t\\\n-  { 0x1100ff,  0x1fe0 },\t\t/* GENERAL_REGS */\t\t\\\n+  { 0x2100f0,  0x3fc0 },\t\t/* NON_Q_REGS */\t\t\\\n+      { 0x7f,  0x3fc0 },\t\t/* INDEX_REGS */\t\t\\\n+  { 0x2100ff,     0x0 },\t\t/* LEGACY_REGS */\t\t\\\n+  { 0x2100ff,  0x3fc0 },\t\t/* GENERAL_REGS */\t\t\\\n      { 0x100,     0x0 }, { 0x0200, 0x0 },/* FP_TOP_REG, FP_SECOND_REG */\\\n     { 0xff00,     0x0 },\t\t/* FLOAT_REGS */\t\t\\\n-{ 0x1fe00000,0x1fe000 },\t\t/* SSE_REGS */\t\t\t\\\n-{ 0xe0000000,    0x1f },\t\t/* MMX_REGS */\t\t\t\\\n-{ 0x1fe00100,0x1fe000 },\t\t/* FP_TOP_SSE_REG */\t\t\\\n-{ 0x1fe00200,0x1fe000 },\t\t/* FP_SECOND_SSE_REG */\t\t\\\n-{ 0x1fe0ff00,0x1fe000 },\t\t/* FLOAT_SSE_REGS */\t\t\\\n-   { 0x1ffff,  0x1fe0 },\t\t/* FLOAT_INT_REGS */\t\t\\\n-{ 0x1fe100ff,0x1fffe0 },\t\t/* INT_SSE_REGS */\t\t\\\n-{ 0x1fe1ffff,0x1fffe0 },\t\t/* FLOAT_INT_SSE_REGS */\t\\\n-{ 0xffffffff,0x1fffff }\t\t\t\t\t\t\t\\\n+{ 0x3fc00000,0x3fc000 },\t\t/* SSE_REGS */\t\t\t\\\n+{ 0xc0000000,    0x3f },\t\t/* MMX_REGS */\t\t\t\\\n+{ 0x3fc00100,0x3fc000 },\t\t/* FP_TOP_SSE_REG */\t\t\\\n+{ 0x3fc00200,0x3fc000 },\t\t/* FP_SECOND_SSE_REG */\t\t\\\n+{ 0x3fc0ff00,0x3fc000 },\t\t/* FLOAT_SSE_REGS */\t\t\\\n+   { 0x1ffff,  0x3fc0 },\t\t/* FLOAT_INT_REGS */\t\t\\\n+{ 0x3fc100ff,0x3fffc0 },\t\t/* INT_SSE_REGS */\t\t\\\n+{ 0x3fc1ffff,0x3fffc0 },\t\t/* FLOAT_INT_SSE_REGS */\t\\\n+{ 0xffffffff,0x3fffff }\t\t\t\t\t\t\t\\\n }\n \n /* The same information, inverted:\n@@ -1908,9 +1908,9 @@ do {\t\t\t\t\t\t\t\\\n #define HI_REGISTER_NAMES\t\t\t\t\t\t\\\n {\"ax\",\"dx\",\"cx\",\"bx\",\"si\",\"di\",\"bp\",\"sp\",\t\t\t\t\\\n  \"st\",\"st(1)\",\"st(2)\",\"st(3)\",\"st(4)\",\"st(5)\",\"st(6)\",\"st(7)\",\t\t\\\n- \"argp\", \"flags\", \"fpsr\", \"dirflag\", \"frame\",\t\t\t\t\\\n+ \"argp\", \"flags\", \"fpsr\", \"fpcr\", \"dirflag\", \"frame\",\t\t\t\\\n  \"xmm0\",\"xmm1\",\"xmm2\",\"xmm3\",\"xmm4\",\"xmm5\",\"xmm6\",\"xmm7\",\t\t\\\n- \"mm0\", \"mm1\", \"mm2\", \"mm3\", \"mm4\", \"mm5\", \"mm6\", \"mm7\"\t,\t\t\\\n+ \"mm0\", \"mm1\", \"mm2\", \"mm3\", \"mm4\", \"mm5\", \"mm6\", \"mm7\",\t\t\\\n  \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\",\t\t\t\\\n  \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\", \"xmm12\", \"xmm13\", \"xmm14\", \"xmm15\"}\n "}, {"sha": "ac26aabd0f9136aa27686bf0735af121b4b52983", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c259ad42466912d13fef9a33e841e434233435/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c259ad42466912d13fef9a33e841e434233435/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=03c259ad42466912d13fef9a33e841e434233435", "patch": "@@ -178,7 +178,9 @@\n    (SP_REG\t\t\t 7)\n    (FLAGS_REG\t\t\t17)\n    (FPSR_REG\t\t\t18)\n-   (DIRFLAG_REG\t\t\t19)\n+   (FPCR_REG\t\t\t19)\n+   (DIRFLAG_REG\t\t\t20)\n+   (R11_REG\t\t\t41)\n   ])\n \n ;; Insns whose names begin with \"x86_\" are emitted by gen_FOO calls\n@@ -4429,15 +4431,15 @@\n \n (define_insn \"x86_fnstcw_1\"\n   [(set (match_operand:HI 0 \"memory_operand\" \"=m\")\n-\t(unspec:HI [(reg:HI FPSR_REG)] UNSPEC_FSTCW))]\n+\t(unspec:HI [(reg:HI FPCR_REG)] UNSPEC_FSTCW))]\n   \"TARGET_80387\"\n   \"fnstcw\\t%0\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"mode\" \"HI\")\n    (set_attr \"unit\" \"i387\")])\n \n (define_insn \"x86_fldcw_1\"\n-  [(set (reg:HI FPSR_REG)\n+  [(set (reg:HI FPCR_REG)\n \t(unspec:HI [(match_operand:HI 0 \"memory_operand\" \"m\")] UNSPEC_FLDCW))]\n   \"TARGET_80387\"\n   \"fldcw\\t%0\"\n@@ -14162,7 +14164,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*sibcall_1_rex64_v\"\n-  [(call (mem:QI (reg:DI 40))\n+  [(call (mem:QI (reg:DI R11_REG))\n \t (match_operand 0 \"\" \"\"))]\n   \"SIBLING_CALL_P (insn) && TARGET_64BIT\"\n   \"jmp\\t*%%r11\"\n@@ -20652,7 +20654,7 @@\n \n (define_insn \"*sibcall_value_1_rex64_v\"\n   [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:QI (reg:DI 40))\n+\t(call (mem:QI (reg:DI R11_REG))\n \t      (match_operand:DI 1 \"\" \"\")))]\n   \"SIBLING_CALL_P (insn) && TARGET_64BIT\"\n   \"jmp\\t*%%r11\"\n@@ -20671,14 +20673,14 @@\n \n (define_expand \"sse_prologue_save\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n-\t\t   (unspec:BLK [(reg:DI 21)\n-\t\t\t\t(reg:DI 22)\n+\t\t   (unspec:BLK [(reg:DI 22)\n \t\t\t\t(reg:DI 23)\n \t\t\t\t(reg:DI 24)\n \t\t\t\t(reg:DI 25)\n \t\t\t\t(reg:DI 26)\n \t\t\t\t(reg:DI 27)\n-\t\t\t\t(reg:DI 28)] UNSPEC_SSE_PROLOGUE_SAVE))\n+\t\t\t\t(reg:DI 28)\n+\t\t\t\t(reg:DI 29)] UNSPEC_SSE_PROLOGUE_SAVE))\n \t      (use (match_operand:DI 1 \"register_operand\" \"\"))\n \t      (use (match_operand:DI 2 \"immediate_operand\" \"\"))\n \t      (use (label_ref:DI (match_operand 3 \"\" \"\")))])]\n@@ -20688,14 +20690,14 @@\n (define_insn \"*sse_prologue_save_insn\"\n   [(set (mem:BLK (plus:DI (match_operand:DI 0 \"register_operand\" \"R\")\n \t\t\t  (match_operand:DI 4 \"const_int_operand\" \"n\")))\n-\t(unspec:BLK [(reg:DI 21)\n-\t\t     (reg:DI 22)\n+\t(unspec:BLK [(reg:DI 22)\n \t\t     (reg:DI 23)\n \t\t     (reg:DI 24)\n \t\t     (reg:DI 25)\n \t\t     (reg:DI 26)\n \t\t     (reg:DI 27)\n-\t\t     (reg:DI 28)] UNSPEC_SSE_PROLOGUE_SAVE))\n+\t\t     (reg:DI 28)\n+\t\t     (reg:DI 29)] UNSPEC_SSE_PROLOGUE_SAVE))\n    (use (match_operand:DI 1 \"register_operand\" \"r\"))\n    (use (match_operand:DI 2 \"const_int_operand\" \"i\"))\n    (use (label_ref:DI (match_operand 3 \"\" \"X\")))]"}, {"sha": "6fc9da4acc5d9e12474a4a916ac6f764a4a4de53", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03c259ad42466912d13fef9a33e841e434233435/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03c259ad42466912d13fef9a33e841e434233435/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=03c259ad42466912d13fef9a33e841e434233435", "patch": "@@ -1396,14 +1396,14 @@\n    (clobber (reg:XF 13))\n    (clobber (reg:XF 14))\n    (clobber (reg:XF 15))\n-   (clobber (reg:DI 29))\n    (clobber (reg:DI 30))\n    (clobber (reg:DI 31))\n    (clobber (reg:DI 32))\n    (clobber (reg:DI 33))\n    (clobber (reg:DI 34))\n    (clobber (reg:DI 35))\n-   (clobber (reg:DI 36))]\n+   (clobber (reg:DI 36))\n+   (clobber (reg:DI 37))]\n   \"TARGET_MMX\"\n   \"emms\"\n   [(set_attr \"type\" \"mmx\")\n@@ -1419,14 +1419,14 @@\n    (clobber (reg:XF 13))\n    (clobber (reg:XF 14))\n    (clobber (reg:XF 15))\n-   (clobber (reg:DI 29))\n    (clobber (reg:DI 30))\n    (clobber (reg:DI 31))\n    (clobber (reg:DI 32))\n    (clobber (reg:DI 33))\n    (clobber (reg:DI 34))\n    (clobber (reg:DI 35))\n-   (clobber (reg:DI 36))]\n+   (clobber (reg:DI 36))\n+   (clobber (reg:DI 37))]\n   \"TARGET_3DNOW\"\n   \"femms\"\n   [(set_attr \"type\" \"mmx\")"}]}