{"sha": "7a54c8507f0e6e1d8930f1e499146cf9fde358c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E1NGM4NTA3ZjBlNmUxZDg5MzBmMWU0OTkxNDZjZjlmZGUzNThjNw==", "commit": {"author": {"name": "Andreas Tobler", "email": "a.tobler@schweiz.ch", "date": "2003-10-01T17:11:02Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2003-10-01T17:11:02Z"}, "message": "libffi-dg.exp: Set LD_LIBRARY_PATH_64 for SPARC64.\n\n2003-10-01  Andreas Tobler  <a.tobler@schweiz.ch>\n\n\t* testsuite/lib/libffi-dg.exp: Set LD_LIBRARY_PATH_64 for\n\tSPARC64. Cleanup whitespaces.\n\nFrom-SVN: r71982", "tree": {"sha": "579a8a53b78354962379e36619da298c8622da65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/579a8a53b78354962379e36619da298c8622da65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a54c8507f0e6e1d8930f1e499146cf9fde358c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a54c8507f0e6e1d8930f1e499146cf9fde358c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a54c8507f0e6e1d8930f1e499146cf9fde358c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a54c8507f0e6e1d8930f1e499146cf9fde358c7/comments", "author": null, "committer": null, "parents": [{"sha": "e39dd1ce5252a84b61c3ddf3164046d63cba1da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e39dd1ce5252a84b61c3ddf3164046d63cba1da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e39dd1ce5252a84b61c3ddf3164046d63cba1da6"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "29f4ec68f5804cf50d2f7b11e3bb517a8a5e768b", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a54c8507f0e6e1d8930f1e499146cf9fde358c7/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a54c8507f0e6e1d8930f1e499146cf9fde358c7/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=7a54c8507f0e6e1d8930f1e499146cf9fde358c7", "patch": "@@ -1,3 +1,8 @@\n+2003-10-01  Andreas Tobler  <a.tobler@schweiz.ch>\n+\n+\t* testsuite/lib/libffi-dg.exp: Set LD_LIBRARY_PATH_64 for\n+\tSPARC64. Cleanup whitespaces.\n+\n 2003-09-19  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* testsuite/libffi.call/closure_fn0.c: Xfail mips, arm,"}, {"sha": "f8a36242a0cc5a9e294db8df51316c2677bcacde", "filename": "libffi/testsuite/lib/libffi-dg.exp", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a54c8507f0e6e1d8930f1e499146cf9fde358c7/libffi%2Ftestsuite%2Flib%2Flibffi-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a54c8507f0e6e1d8930f1e499146cf9fde358c7/libffi%2Ftestsuite%2Flib%2Flibffi-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flib%2Flibffi-dg.exp?ref=7a54c8507f0e6e1d8930f1e499146cf9fde358c7", "patch": "@@ -4,15 +4,15 @@\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation; either version 2 of the License, or\n # (at your option) any later version.\n-# \n+#\n # This program is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n # GNU General Public License for more details.\n-# \n+#\n # You should have received a copy of the GNU General Public License\n # along with this program; if not, write to the Free Software\n-# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n load_lib dg.exp\n load_lib libgloss.exp\n@@ -73,7 +73,7 @@ proc libffi-init { args } {\n     global TOOL_OPTIONS\n     global ld_library_path\n     global libffi_include\n-    global libffi_link_flags \n+    global libffi_link_flags\n     global tool_root_dir\n \n     set blddirffi [lookfor_file [get_multilibs] libffi]\n@@ -83,7 +83,7 @@ proc libffi-init { args } {\n \n     set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n     if {$gccdir != \"\"} {\n-        set gccdir [file dirname $gccdir]\n+\tset gccdir [file dirname $gccdir]\n     }\n     verbose \"gccdir $gccdir\"\n \n@@ -106,33 +106,34 @@ proc libffi-init { args } {\n     }\n     # add the library path for libffi.\n     append ld_library_path \":${blddirffi}/.libs\"\n-    # add the library path for libstdc++ as well. \n+    # add the library path for libstdc++ as well.\n     append ld_library_path \":${blddircxx}/src/.libs\"\n \n     verbose \"ld_library_path: $ld_library_path\"\n \n     # Point to the Libffi headers in libffi.\n     set libffi_include \"${blddirffi}/include\"\n     verbose \"libffi_include $libffi_include\"\n-    \n+\n     set libffi_dir  \"${blddirffi}/.libs\"\n     verbose \"libffi_dir $libffi_dir\"\n     if { $libffi_dir != \"\" } {\n \tset libffi_dir [file dirname ${libffi_dir}]\n \tset libffi_link_flags \"-L${libffi_dir}/.libs\"\n \tlappend libffi_link_flags \"-L${blddircxx}/src/.libs\"\n     }\n-   \n+\n     # On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n     # called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n     # (for the 64-bit ABI).  The right way to do this would be to modify\n     # unix.exp -- but that's not an option since it's part of DejaGNU\n-    # proper, so we do it here.  We really only need to do \n+    # proper, so we do it here.  We really only need to do\n     # this on IRIX, but it shouldn't hurt to do it anywhere else.\n     setenv  LD_LIBRARY_PATH     $ld_library_path\n     setenv  SHLIB_PATH          $ld_library_path\n     setenv  LD_LIBRARYN32_PATH  $ld_library_path\n     setenv  LD_LIBRARY64_PATH   $ld_library_path\n+    setenv  LD_LIBRARY_PATH_64  $ld_library_path\n }\n \n proc libffi_target_compile { source dest type options } {\n@@ -143,7 +144,7 @@ proc libffi_target_compile { source dest type options } {\n     global ld_library_path\n     global libffi_link_flags\n     global libffi_include\n-    \n+\n \n     if { [target_info needs_status_wrapper]!=\"\" && [info exists gluefile] } {\n \tlappend options \"libs=${gluefile}\"\n@@ -187,11 +188,11 @@ proc libffi-dg-runtest { testcases default-extra-flags } {\n     global runtests\n \n     foreach test $testcases {\n-\t# If we're only testing specific files and this isn't one of \n+\t# If we're only testing specific files and this isn't one of\n \t# them, skip it.\n \tif ![runtest_file_p $runtests $test] {\n \t    continue\n-        }\n+\t}\n \n \t# Look for a loop within the source code - if we don't find one,\n \t# don't pass -funroll[-all]-loops.\n@@ -228,7 +229,7 @@ proc dg-xfail-if { args } {\n # are both cleared out after every test.  It is not enough to clear\n # them out *before* the next test run because gcc-target-compile gets\n # run directly from some .exp files (outside of any test).  (Those\n-# uses should eventually be eliminated.) \n+# uses should eventually be eliminated.)\n \n # Because the DG framework doesn't provide a hook that is run at the\n # end of a test, we must replace dg-test with a wrapper."}]}