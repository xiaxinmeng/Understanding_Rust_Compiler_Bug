{"sha": "078c7498908d9b74caff34d12099b5c85470e277", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc4Yzc0OTg5MDhkOWI3NGNhZmYzNGQxMjA5OWI1Yzg1NDcwZTI3Nw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-10T02:14:24Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-11T14:55:58Z"}, "message": "x86: Update user interrupt handler stack frame\n\nUser interrupt handler stack frame is similar to exception interrupt\nhandler stack frame.  Instead of error code, the second argument is\nuser interrupt request register vector.\n\ngcc/\n\n\tPR target/98219\n\t* config/i386/uintrintrin.h (__uintr_frame): Remove uirrv.\n\ngcc/testsuite/\n\n\tPR target/98219\n\t* gcc.dg/guality/pr98219-1.c: New test.\n\t* gcc.dg/guality/pr98219-2.c: Likewise.\n\t* gcc.dg/torture/pr98219-1.c: Likewise.\n\t* gcc.dg/torture/pr98219-2.c: Likewise.\n\t* gcc.target/i386/uintr-2.c: Scan \"add[lq] $8, %[er]sp\".\n\t(uword_t): New.\n\t(foo): Add a uword_t argument.\n\t(UINTR_hanlder): Likewise.\n\t* gcc.target/i386/uintr-3.c: Scan \"add[lq] $8, %[er]sp\".\n\t(uword_t): New.\n\t(UINTR_hanlder): Add a uword_t argument.\n\t* gcc.target/i386/uintr-4.c (uword_t): New.\n\t(UINTR_hanlder): Add a uword_t argument.\n\t* gcc.target/i386/uintr-5.c (uword_t): New.\n\t(UINTR_hanlder): Add a uword_t argument.", "tree": {"sha": "24f3776c19e7439923f79d071624cf1ead4c1a72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24f3776c19e7439923f79d071624cf1ead4c1a72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/078c7498908d9b74caff34d12099b5c85470e277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078c7498908d9b74caff34d12099b5c85470e277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/078c7498908d9b74caff34d12099b5c85470e277", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078c7498908d9b74caff34d12099b5c85470e277/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b56dece74138398977ea53368a025ed231b35c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b56dece74138398977ea53368a025ed231b35c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b56dece74138398977ea53368a025ed231b35c"}], "stats": {"total": 242, "additions": 233, "deletions": 9}, "files": [{"sha": "4606caf8582d17773032fa3348d4e65ec398efab", "filename": "gcc/config/i386/uintrintrin.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Fconfig%2Fi386%2Fuintrintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Fconfig%2Fi386%2Fuintrintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fuintrintrin.h?ref=078c7498908d9b74caff34d12099b5c85470e277", "patch": "@@ -38,9 +38,6 @@\n \n struct __uintr_frame\n {\n-  /* The position of the most significant bit set in user-interrupt\n-     request register.  */\n-  unsigned long long uirrv;\n   /* RIP of the interrupted user process.  */\n   unsigned long long rip;\n   /* RFLAGS of the interrupted user process.  */"}, {"sha": "c9cb8a51b3449a507baa755c5ff493e2528af169", "filename": "gcc/testsuite/gcc.dg/guality/pr98219-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr98219-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr98219-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr98219-1.c?ref=078c7498908d9b74caff34d12099b5c85470e277", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! ia32 } } } } */\n+/* { dg-options \"-g -muintr -mgeneral-regs-only\" } */\n+\n+#include <x86gprintrin.h>\n+\n+extern void exit (int);\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+#define UIRRV\t\t0x12345670\n+#define RIP\t\t0x12345671\n+#define RFLAGS\t\t0x12345672\n+#define RSP\t\t0x12345673\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+void\n+__attribute__((interrupt, used))\n+fn (struct __uintr_frame *frame, uword_t uirrv)\n+{\n+  if (UIRRV != uirrv)\t\t/* BREAK */\n+    __builtin_abort ();\n+  if (RIP != frame->rip)\n+    __builtin_abort ();\n+  if (RFLAGS != frame->rflags)\n+    __builtin_abort ();\n+  if (RSP != frame->rsp)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (RSP) \";\t\t\\\n+\tpush\t$\" STRING (RFLAGS) \";\t\t\\\n+\tpush\t$\" STRING (RIP) \";\t\t\\\n+\tpush\t$\" STRING (UIRRV) \";\t\t\\\n+\tjmp\t\" ASMNAME (\"fn\"));\n+  return 0;\n+}\n+\n+/* { dg-final { gdb-test 22 \"uirrv\" \"0x12345670\" } } */\n+/* { dg-final { gdb-test 22 \"frame->rip\" \"0x12345671\" } } */\n+/* { dg-final { gdb-test 22 \"frame->rflags\" \"0x12345672\" } } */\n+/* { dg-final { gdb-test 22 \"frame->rsp\" \"0x12345673\" } } */"}, {"sha": "1f74eb3a82c87a8e3c5f57bd13abf51fadf8161f", "filename": "gcc/testsuite/gcc.dg/guality/pr98219-2.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr98219-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr98219-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr98219-2.c?ref=078c7498908d9b74caff34d12099b5c85470e277", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! ia32 } } } } */\n+/* { dg-options \"-g -muintr -mgeneral-regs-only\" } */\n+\n+#include <x86gprintrin.h>\n+\n+extern void exit (int);\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+typedef int aligned __attribute__((aligned(64)));\n+\n+#define UIRRV\t\t0x12345670\n+#define RIP\t\t0x12345671\n+#define RFLAGS\t\t0x12345672\n+#define RSP\t\t0x12345673\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+int\n+check_int (int *i, int align)\n+{\n+  *i = 20;\n+  if ((((ptrdiff_t) i) & (align - 1)) != 0)\n+    __builtin_abort ();\n+  return *i;\n+}\n+\n+void\n+__attribute__((interrupt, used))\n+fn (struct __uintr_frame *frame, uword_t uirrv)\n+{\n+  aligned i;\n+  if (check_int (&i, __alignof__(i)) != i)\n+    __builtin_abort ();\n+\n+  if (UIRRV != uirrv)\t\t/* BREAK */\n+    __builtin_abort ();\n+  if (RIP != frame->rip)\n+    __builtin_abort ();\n+  if (RFLAGS != frame->rflags)\n+    __builtin_abort ();\n+  if (RSP != frame->rsp)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (RSP) \";\t\t\\\n+\tpush\t$\" STRING (RFLAGS) \";\t\t\\\n+\tpush\t$\" STRING (RIP) \";\t\t\\\n+\tpush\t$\" STRING (UIRRV) \";\t\t\\\n+\tjmp\t\" ASMNAME (\"fn\"));\n+  return 0;\n+}\n+\n+/* { dg-final { gdb-test 34 \"uirrv\" \"0x12345670\" } } */\n+/* { dg-final { gdb-test 34 \"frame->rip\" \"0x12345671\" } } */\n+/* { dg-final { gdb-test 34 \"frame->rflags\" \"0x12345672\" } } */\n+/* { dg-final { gdb-test 34 \"frame->rsp\" \"0x12345673\" } } */"}, {"sha": "89b5aa3b9cbaf1dd15432237647c6abc9f6e890f", "filename": "gcc/testsuite/gcc.dg/torture/pr98219-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98219-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98219-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98219-1.c?ref=078c7498908d9b74caff34d12099b5c85470e277", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! ia32 } } } } */\n+/* { dg-skip-if \"PR81210 sp not aligned to 16 bytes\" { *-*-darwin* } } */\n+/* { dg-options \"-muintr -mgeneral-regs-only\" } */\n+\n+#include <x86gprintrin.h>\n+\n+extern void exit (int);\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+#define UIRRV\t\t0x12345670\n+#define RIP\t\t0x12345671\n+#define RFLAGS\t\t0x12345672\n+#define RSP\t\t0x12345673\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+void\n+__attribute__((interrupt, used))\n+fn (struct __uintr_frame *frame, uword_t uirrv)\n+{\n+  if (UIRRV != uirrv)\n+    __builtin_abort ();\n+  if (RIP != frame->rip)\n+    __builtin_abort ();\n+  if (RFLAGS != frame->rflags)\n+    __builtin_abort ();\n+  if (RSP != frame->rsp)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (RSP) \";\t\t\\\n+\tpush\t$\" STRING (RFLAGS) \";\t\t\\\n+\tpush\t$\" STRING (RIP) \";\t\t\\\n+\tpush\t$\" STRING (UIRRV) \";\t\t\\\n+\tjmp\t\" ASMNAME (\"fn\"));\n+  return 0;\n+}"}, {"sha": "c2f33f84f3e09371a6379e79fbabda9d3d667990", "filename": "gcc/testsuite/gcc.dg/torture/pr98219-2.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98219-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98219-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98219-2.c?ref=078c7498908d9b74caff34d12099b5c85470e277", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! ia32 } } } } */\n+/* { dg-skip-if \"PR81210 sp not aligned to 16 bytes\" { *-*-darwin* } } */\n+/* { dg-options \"-muintr -mgeneral-regs-only\" } */\n+\n+#include <x86gprintrin.h>\n+\n+extern void exit (int);\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+typedef int aligned __attribute__((aligned(64)));\n+\n+#define UIRRV\t\t0x12345670\n+#define RIP\t\t0x12345671\n+#define RFLAGS\t\t0x12345672\n+#define RSP\t\t0x12345673\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+int\n+check_int (int *i, int align)\n+{\n+  *i = 20;\n+  if ((((ptrdiff_t) i) & (align - 1)) != 0)\n+    __builtin_abort ();\n+  return *i;\n+}\n+\n+void\n+__attribute__((interrupt, used))\n+fn (struct __uintr_frame *frame, uword_t uirrv)\n+{\n+  aligned i;\n+  if (check_int (&i, __alignof__(i)) != i)\n+    __builtin_abort ();\n+\n+  if (UIRRV != uirrv)\n+    __builtin_abort ();\n+  if (RIP != frame->rip)\n+    __builtin_abort ();\n+  if (RFLAGS != frame->rflags)\n+    __builtin_abort ();\n+  if (RSP != frame->rsp)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (RSP) \";\t\t\\\n+\tpush\t$\" STRING (RFLAGS) \";\t\t\\\n+\tpush\t$\" STRING (RIP) \";\t\t\\\n+\tpush\t$\" STRING (UIRRV) \";\t\t\\\n+\tjmp\t\" ASMNAME (\"fn\"));\n+  return 0;\n+}"}, {"sha": "0a83c662b949535b187469646afb1597e94188c4", "filename": "gcc/testsuite/gcc.target/i386/uintr-2.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-2.c?ref=078c7498908d9b74caff34d12099b5c85470e277", "patch": "@@ -1,17 +1,20 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -muintr -mgeneral-regs-only\" } */\n /* { dg-final { scan-assembler-times \"uiret\" \"2\" } } */\n+/* { dg-final { scan-assembler-times \"add\\[lq]\\[ \\t]\\+\\\\\\$8, %\\[er\\]sp\" \"2\" } } */\n \n #include <x86gprintrin.h>\n \n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n void\n __attribute__((interrupt))\n-foo (void *frame)\n+foo (void *frame, uword_t uirrv)\n {\n }\n \n void\n __attribute__((interrupt))\n-UINTR_hanlder (struct __uintr_frame *frame)\n+UINTR_hanlder (struct __uintr_frame *frame, uword_t uirrv)\n {\n }"}, {"sha": "92476cfa45c12d0857aa083bffa0c9ddbc699fbe", "filename": "gcc/testsuite/gcc.target/i386/uintr-3.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-3.c?ref=078c7498908d9b74caff34d12099b5c85470e277", "patch": "@@ -1,9 +1,13 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -muintr\" } */\n /* { dg-final { scan-assembler \"uiret\" } } */\n+/* { dg-final { scan-assembler \"add\\[lq]\\[ \\t]\\+\\\\\\$8, %\\[er\\]sp\" } } */\n+\n #include <x86gprintrin.h>\n \n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n void __attribute__ ((target(\"general-regs-only\"), interrupt))\n-UINTR_handler (struct __uintr_frame *p)\n+UINTR_handler (struct __uintr_frame *p, uword_t uirrv)\n {\n }"}, {"sha": "4d0ec34dfa0f18c12fa84a05e048d47f94ee5ebe", "filename": "gcc/testsuite/gcc.target/i386/uintr-4.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-4.c?ref=078c7498908d9b74caff34d12099b5c85470e277", "patch": "@@ -3,7 +3,9 @@\n \n #include <x86gprintrin.h>\n \n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n void __attribute__ ((interrupt))\n-UINTR_handler (struct __uintr_frame *p)\n-{ /* { dg-message \"SSE instructions aren't allowed in an interrupt service routine\" }  */\n+UINTR_handler (struct __uintr_frame *p, uword_t uirrv)\n+{ /* { dg-message \"SSE instructions aren't allowed in an exception service routine\" }  */\n }"}, {"sha": "49cb2ec8097cc335158f880e1728679a310ea2f6", "filename": "gcc/testsuite/gcc.target/i386/uintr-5.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078c7498908d9b74caff34d12099b5c85470e277/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fuintr-5.c?ref=078c7498908d9b74caff34d12099b5c85470e277", "patch": "@@ -4,7 +4,9 @@\n \n #include <x86gprintrin.h>\n \n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n void\n-UINTR_hanlder (struct __uintr_frame *frame)\n+UINTR_hanlder (struct __uintr_frame *frame, uword_t uirrv)\n {\n }"}]}