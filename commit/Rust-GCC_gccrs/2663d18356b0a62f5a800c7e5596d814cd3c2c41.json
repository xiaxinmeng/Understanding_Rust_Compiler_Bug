{"sha": "2663d18356b0a62f5a800c7e5596d814cd3c2c41", "node_id": "C_kwDOANBUbNoAKDI2NjNkMTgzNTZiMGE2MmY1YTgwMGM3ZTU1OTZkODE0Y2QzYzJjNDE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-19T07:40:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-19T07:40:47Z"}, "message": "c-family: Fix up ICE during pretty-printing of PMF related expression [PR101515]\n\nThe intent of r11-6729 is that it prints something that helps user to figure\nout what exactly is being accessed.\nWhen we find a unique non-static data member that is being accessed, even\nwhen we can't fold it nicely, IMNSHO it is better to print\n  ((sometype *)&var)->field\nor\n  (*(sometype *)&var).field\ninstead of\n  *(fieldtype *)((char *)&var + 56)\nbecause the user doesn't know what is at offset 56, we shouldn't ask user\nto decipher structure layout etc.\n\nOne question is if we could return something better for the TYPE_PTRMEMFUNC_FLAG\nRECORD_TYPE members here (something that would print it more naturally/readably\nin a C++ way), though the fact that the routine is in c-family makes it\nharder.\n\nAnother one is whether we shouldn't punt for FIELD_DECLs that don't have\nnicely printable name of its containing scope, something like:\n                if (tree scope = get_containing_scope (field))\n                  if (TYPE_P (scope) && TYPE_NAME (scope) == NULL_TREE)\n                    break;\n                return cop;\nor so.  This patch implements that.\n\nNote the returned cop is a COMPONENT_REF where the first argument has a\nnicely printable type name (x with type sp), but sp's TYPE_MAIN_VARIANT\nis the unnamed TYPE_PTRMEMFUNC_FLAG.  So another possibility would be if\nwe see such a problem for the FIELD_DECL's scope, check if TYPE_MAIN_VARIANT\nof the first COMPONENT_REF's argument is equal to that scope and in that\ncase use TREE_TYPE of the first COMPONENT_REF's argument as the scope\ninstead.\n\n2022-03-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/101515\n\t* c-pretty-print.cc (c_fold_indirect_ref_for_warn): For C++ don't\n\treturn COMPONENT_REFs with FIELD_DECLs whose containing scope can't\n\tbe printed.\n\n\t* g++.dg/warn/pr101515.C: New test.", "tree": {"sha": "2299ef80f9ef85afcbbd0f515e6162457bb4d889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2299ef80f9ef85afcbbd0f515e6162457bb4d889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2663d18356b0a62f5a800c7e5596d814cd3c2c41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2663d18356b0a62f5a800c7e5596d814cd3c2c41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2663d18356b0a62f5a800c7e5596d814cd3c2c41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2663d18356b0a62f5a800c7e5596d814cd3c2c41/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca61ad148ffedaae1914741c78dfd13962aab92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca61ad148ffedaae1914741c78dfd13962aab92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca61ad148ffedaae1914741c78dfd13962aab92"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "71a0cb51093f9a0fc232dedb36d26725c9279882", "filename": "gcc/c-family/c-pretty-print.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2663d18356b0a62f5a800c7e5596d814cd3c2c41/gcc%2Fc-family%2Fc-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2663d18356b0a62f5a800c7e5596d814cd3c2c41/gcc%2Fc-family%2Fc-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.cc?ref=2663d18356b0a62f5a800c7e5596d814cd3c2c41", "patch": "@@ -1889,6 +1889,12 @@ c_fold_indirect_ref_for_warn (location_t loc, tree type, tree op,\n \t      = wi::to_offset (TYPE_SIZE_UNIT (TREE_TYPE (field)));\n \t    if (upos <= off && off < upos + el_sz)\n \t      {\n+\t\t/* The C++ pretty printers print scope of the FIELD_DECLs,\n+\t\t   so punt if it is something that can't be printed.  */\n+\t\tif (c_dialect_cxx ())\n+\t\t  if (tree scope = get_containing_scope (field))\n+\t\t    if (TYPE_P (scope) && TYPE_NAME (scope) == NULL_TREE)\n+\t\t      break;\n \t\ttree cop = build3_loc (loc, COMPONENT_REF, TREE_TYPE (field),\n \t\t\t\t       op, field, NULL_TREE);\n \t\toff = off - upos;"}, {"sha": "f3c58b89094d2ee6e49e69d72068304db984c805", "filename": "gcc/testsuite/g++.dg/warn/pr101515.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2663d18356b0a62f5a800c7e5596d814cd3c2c41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr101515.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2663d18356b0a62f5a800c7e5596d814cd3c2c41/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr101515.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr101515.C?ref=2663d18356b0a62f5a800c7e5596d814cd3c2c41", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/101515\n+// { dg-do compile }\n+// { dg-options \"-O1 -Wuninitialized\" }\n+\n+struct S { int j; };\n+struct T : public S { virtual void h () {} };\n+struct U { void (*ptr) (); };\n+typedef void (S::*sp) ();\n+\n+int\n+main ()\n+{\n+  T t;\n+  sp x;\n+  U *xp = (U *) &x;\n+  if (xp->ptr != ((void (*) ()) (sizeof (void *))))\t// { dg-warning \"is used uninitialized\" }\n+    return 1;\n+}"}]}