{"sha": "99b68476de7635380de3480b83e852a38fe36f64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliNjg0NzZkZTc2MzUzODBkZTM0ODBiODNlODUyYTM4ZmUzNmY2NA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-05-04T07:55:11Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-05-04T07:55:11Z"}, "message": "Replace absolute line numbers in g++.dg/warn\n\n2017-05-04  Tom de Vries  <tom@codesourcery.com>\n\n\tPR testsuite/80557\n\t* g++.dg/warn/Wstrict-aliasing-float-ref-int-obj.C: Replace absolute\n\tline numbers.\n\t* g++.dg/warn/miss-format-1.C: Same.\n\t* g++.dg/warn/overflow-warn-1.C: Same.\n\t* g++.dg/warn/overflow-warn-3.C: Same.\n\t* g++.dg/warn/overflow-warn-4.C: Same.\n\nFrom-SVN: r247580", "tree": {"sha": "a85c5832ec6df35ca4f00514e2329ce9eec3a107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a85c5832ec6df35ca4f00514e2329ce9eec3a107"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99b68476de7635380de3480b83e852a38fe36f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b68476de7635380de3480b83e852a38fe36f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b68476de7635380de3480b83e852a38fe36f64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b68476de7635380de3480b83e852a38fe36f64/comments", "author": null, "committer": null, "parents": [{"sha": "09177a4b3c97ed5864a631cfeba7b63cc5dc013f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09177a4b3c97ed5864a631cfeba7b63cc5dc013f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09177a4b3c97ed5864a631cfeba7b63cc5dc013f"}], "stats": {"total": 95, "additions": 59, "deletions": 36}, "files": [{"sha": "ffce94dba676a9ba112c30b9d1f78f107eb05401", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99b68476de7635380de3480b83e852a38fe36f64", "patch": "@@ -1,3 +1,13 @@\n+2017-05-04  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR testsuite/80557\n+\t* g++.dg/warn/Wstrict-aliasing-float-ref-int-obj.C: Replace absolute\n+\tline numbers.\n+\t* g++.dg/warn/miss-format-1.C: Same.\n+\t* g++.dg/warn/overflow-warn-1.C: Same.\n+\t* g++.dg/warn/overflow-warn-3.C: Same.\n+\t* g++.dg/warn/overflow-warn-4.C: Same.\n+\n 2017-05-04  Tom de Vries  <tom@codesourcery.com>\n \n \tPR testsuite/80557"}, {"sha": "9bc80c35585345627d81c57e301201bf78c0a1c2", "filename": "gcc/testsuite/g++.dg/warn/Wstrict-aliasing-float-ref-int-obj.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-float-ref-int-obj.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-float-ref-int-obj.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstrict-aliasing-float-ref-int-obj.C?ref=99b68476de7635380de3480b83e852a38fe36f64", "patch": "@@ -4,9 +4,9 @@\n \n int foo() {\n   int x;\n-  float& q = reinterpret_cast<float&> (x);  /* { dg-message \"dereferencing type-punned\" \"deref\" } */\n+  float& q = reinterpret_cast<float&> (x); /* { dg-message \"dereferencing type-punned\" \"deref\" } */\n+  /* { dg-message \"initialized\" \"note\" { xfail *-*-* } .-1 } */\n+  \n   q = 1.0; /* { dg-warning \"does break strict-aliasing\" \"strict-aliasing\" { xfail *-*-* } } */\n   return x;\n }\n-\n-/* { dg-message \"initialized\" \"note\" { xfail *-*-* } 7 } */"}, {"sha": "65a34282ad784faededd1d6d17cf24352c8f7822", "filename": "gcc/testsuite/g++.dg/warn/miss-format-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fmiss-format-1.C?ref=99b68476de7635380de3480b83e852a38fe36f64", "patch": "@@ -3,8 +3,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wmissing-format-attribute\" } */\n /* { dg-options \"-Wmissing-format-attribute -Wno-abi\" { target arm_eabi } } */\n-/* VxWorks does not provide vscanf, either in kernel or RTP mode.  */\n-/* { dg-error \"not declared\" \"\" { target *-*-vxworks* } 26 } */\n \n #include <stdio.h>\n #include <stdarg.h>\n@@ -24,6 +22,8 @@ bar (const char *fmt, ...)\n   va_list ap;\n   va_start (ap, fmt);\n   vscanf (fmt, ap); /* { dg-warning \"candidate\" \"scanf attribute warning\" { xfail *-*-vxworks* } } */\n+  /* VxWorks does not provide vscanf, either in kernel or RTP mode.  */\n+  /* { dg-error \"not declared\" \"\" { target *-*-vxworks* } .-2 } */\n   va_end (ap);\n }\n "}, {"sha": "314e35182704ccb9a494d38bf6def458e478e83f", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-1.C", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-1.C?ref=99b68476de7635380de3480b83e852a38fe36f64", "patch": "@@ -18,6 +18,7 @@ enum e {\n      whole expression violates the constraints.  */\n   E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n   /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { target c++ } .-1 } */\n+  /* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } .-2 } */\n   E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n   /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* Again, overflow in evaluated subexpression.  */\n@@ -30,6 +31,9 @@ enum e {\n struct s {\n   int a;\n   int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+/* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } .-1 } */\n+/* { dg-error \"width not an integer constant\" \"bit.field\" { target c++ } .-2 } */\n+/* { dg-error \"is not a constant expression\" \"division\" { target c++ } .-3 } */\n   int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n   /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n };\n@@ -53,16 +57,25 @@ void *n = 0;\n    subexpression, so is a null pointer constant.  */\n void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n /* { dg-warning \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } .-1 } */\n-void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n-/* { dg-error \"invalid conversion from 'int' to 'void*'\" \"null\" { xfail *-*-* } .-1 } */\n-void *r = (1 ? 0 : INT_MAX+1); /* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } } */\n+\n+void *q = 0 * (1 / 0);\n+/* { dg-warning \"division by zero\" \"\" { target *-*-* } .-1 } */\n+/* { dg-error \"invalid conversion from 'int' to 'void*'\" \"null\" { xfail *-*-* } .-2 } */\n+/* { dg-warning \"invalid conversion from\" \"convert\" { target *-*-* } .-3 } */\n+\n+void *r = (1 ? 0 : INT_MAX+1);\n+/* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } .-1 } */\n+/* { dg-warning \"invalid conversion from\" \"convert\" { target c++11 } .-2 } */\n \n void\n g (int i)\n {\n   switch (i)\n     {\n-    case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n+    case 0 * (1/0):\n+      /* { dg-warning \"division by zero\" \"\" { target *-*-* } .-1 } */\n+      /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } .-2 } */\n+      /* { dg-error \"is not a constant expression\" \"const\" { target *-*-* } .-3 } */\n       ;\n     case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n       /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n@@ -126,11 +139,3 @@ h2i (int x)\n   ui = INT_MIN;\n   ui = x ? INT_MIN : 1U;\n }\n-/* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 19 } */\n-/* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 32 } */\n-/* { dg-warning \"invalid conversion from\" \"convert\" { target *-*-* } 56 } */\n-/* { dg-warning \"invalid conversion from\" \"convert\" { target c++11 } 58 } */\n-/* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } 65 } */\n-/* { dg-error \"is not a constant expression\" \"const\" { target *-*-* } 65 } */\n-/* { dg-error \"width not an integer constant\" \"bit.field\" { target c++ } 32 } */\n-/* { dg-error \"is not a constant expression\" \"division\" { target c++ } 32 } */"}, {"sha": "b319660f68fa333e3f420037f31b52598d43cd91", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-3.C", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-3.C?ref=99b68476de7635380de3480b83e852a38fe36f64", "patch": "@@ -18,6 +18,7 @@ enum e {\n      whole expression violates the constraints.  */\n   E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n   /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { target c++ } .-1 } */\n+  /* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } .-2 } */\n   E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n   /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* Again, overflow in evaluated subexpression.  */\n@@ -29,7 +30,11 @@ enum e {\n \n struct s {\n   int a;\n-  int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+  int : 0 * (1 / 0);\n+  /* { dg-warning \"division by zero\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } .-2 } */\n+  /* { dg-error \"width not an integer constant\" \"bit.field\" { target c++ } .-3 } */\n+  /* { dg-error \"is not a constant expression\" \"division\" { target c++ } .-4 } */\n   int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n   /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n };\n@@ -57,15 +62,20 @@ void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" }\n \n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n /* { dg-warning \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } .-1 } */\n-void *r = (1 ? 0 : INT_MAX+1); /* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } } */\n+void *r = (1 ? 0 : INT_MAX+1);\n+/* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } .-1 } */\n+/* { dg-warning \"invalid conversion from\" \"convert\" { target c++11 } .-2 } */\n \n void\n g (int i)\n {\n   switch (i)\n     {\n-    case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n-      ;  /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } .-1 }  */\n+    case 0 * (1/0):\n+      /* { dg-warning \"division by zero\" \"\" { target *-*-* } .-1 } */\n+      /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } .-2 }  */\n+      /* { dg-error \"not a constant expression\" \"constant\" { target *-*-* } .-3 } */\n+      ;\n     case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n       /* { dg-warning \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n       ;\n@@ -128,9 +138,3 @@ h2i (int x)\n   ui = INT_MIN;\n   ui = x ? INT_MIN : 1U;\n }\n-/* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 19 } */\n-/* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 32 } */\n-/* { dg-warning \"invalid conversion from\" \"convert\" { target c++11 } 60 } */\n-/* { dg-error \"not a constant expression\" \"constant\" { target *-*-* } 67 } */\n-/* { dg-error \"width not an integer constant\" \"bit.field\" { target c++ } 32 } */\n-/* { dg-error \"is not a constant expression\" \"division\" { target c++ } 32 } */"}, {"sha": "dfe87411507cd59a5f639e0c6cd217197077a35d", "filename": "gcc/testsuite/g++.dg/warn/overflow-warn-4.C", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99b68476de7635380de3480b83e852a38fe36f64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Foverflow-warn-4.C?ref=99b68476de7635380de3480b83e852a38fe36f64", "patch": "@@ -18,6 +18,7 @@ enum e {\n      whole expression violates the constraints.  */\n   E4 = 0 * (1 / 0), /* { dg-warning \"division by zero\" } */\n   /* { dg-error \"enumerator value for 'E4' is not an integer constant\" \"enum error\" { target c++ } .-1 } */\n+  /* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } .-2 } */\n   E5 = INT_MAX + 1, /* { dg-warning \"integer overflow in expression\" } */\n   /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* { dg-error \"enumerator value for 'E5' is not an integer constant\" \"enum error\" { target *-*-* } .-2 } */\n@@ -32,6 +33,9 @@ enum e {\n struct s {\n   int a;\n   int : 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n+  /* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } .-1 } */\n+  /* { dg-error \"width not an integer constant\" \"bit.field\" { target c++ } .-2 } */\n+  /* { dg-error \"is not a constant expression\" \"division\" { target c++ } .-3 } */\n   int : 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" } */\n   /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n   /* { dg-error \"bit-field .* width not an integer constant\" \"\" { target *-*-* } .-2 } */\n@@ -60,15 +64,21 @@ void *p = 0 * (INT_MAX + 1); /* { dg-warning \"integer overflow in expression\" }\n \n void *q = 0 * (1 / 0); /* { dg-warning \"division by zero\" } */\n /* { dg-error \"invalid conversion from 'int' to 'void\" \"null\" { target *-*-* } .-1 } */\n-void *r = (1 ? 0 : INT_MAX+1); /* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } } */\n+\n+void *r = (1 ? 0 : INT_MAX+1);\n+/* { dg-bogus \"integer overflow in expression\" \"\" { xfail *-*-* } .-1 } */\n+/* { dg-error \"invalid conversion from\" \"convert\" { target c++11 } .-2 } */\n \n void\n g (int i)\n {\n   switch (i)\n     {\n-    case 0 * (1/0): /* { dg-warning \"division by zero\" } */\n-      ;  /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } .-1 } */\n+    case 0 * (1/0):\n+      /* { dg-warning \"division by zero\" \"\" { target *-*-* } .-1 } */\n+      /* { dg-error \"division by zero is not a constant expression\" \"division\" { target c++11 } .-2 } */\n+      /* { dg-error \"is not a constant expression\" \"const\" { target *-*-* } .-3 } */\n+      ;\n     case 1 + 0 * (INT_MAX + 1): /* { dg-warning \"integer overflow in expression\" } */\n       /* { dg-error \"overflow in constant expression\" \"constant\" { target *-*-* } .-1 } */\n       ;\n@@ -131,9 +141,3 @@ h2i (int x)\n   ui = INT_MIN;\n   ui = x ? INT_MIN : 1U;\n }\n-/* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 19 } */\n-/* { dg-error \"invalid conversion from\" \"convert\" { target c++11 } 63 } */\n-/* { dg-error \"division by zero is not a constant.expression\" \"division\" { target c++11 } 34 } */\n-/* { dg-error \"is not a constant expression\" \"const\" { target *-*-* } 70 } */\n-/* { dg-error \"width not an integer constant\" \"bit.field\" { target c++ } 34 } */\n-/* { dg-error \"is not a constant expression\" \"division\" { target c++ } 34 } */"}]}