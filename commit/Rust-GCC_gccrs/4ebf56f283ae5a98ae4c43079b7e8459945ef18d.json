{"sha": "4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "node_id": "C_kwDOANBUbNoAKDRlYmY1NmYyODNhZTVhOThhZTRjNDMwNzliN2U4NDU5OTQ1ZWYxOGQ", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:55Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:55Z"}, "message": "aarch64: Simplify generation of .arch strings\n\naarch64-common.cc has two arrays, one maintaining the original\ndefinition order and one sorted by population count.  Sorting\nby population count was a way of ensuring topological ordering,\ntaking advantage of the fact that the entries are partially\nordered by the subset relation.  However, the sorting is not\nneeded now that the .def file is forced to have topological\norder from the outset.\n\nOther changes are:\n\n(1) The population count used:\n\n      uint64_t total_flags_a = opt_a->flag_canonical & opt_a->flags_on;\n      uint64_t total_flags_b = opt_b->flag_canonical & opt_b->flags_on;\n      int popcnt_a = popcount_hwi ((HOST_WIDE_INT)total_flags_a);\n      int popcnt_b = popcount_hwi ((HOST_WIDE_INT)total_flags_b);\n\n    where I think the & was supposed to be |.  This meant that the\n    counts would always be 1 in practice, since flag_canonical is\n    a single bit.  This led us to printing +nofp+nosimd even though\n    GCC \"knows\" (and GAS agrees) that +nofp disables simd.\n\n(2) The .arch output code converts +aes+sha2 to +crypto.  I think\n    the main reason for doing this is to support assemblers that\n    predate the individual per-feature crypto flags.  It therefore\n    seems more natural to treat it as a special case, rather than\n    as an instance of a general pattern.  Hopefully we won't do\n    something similar in future!\n\n    (There is already special handling of CRC, for different reasons.)\n\n(3) Previously, if the /proc/cpuinfo code saw a feature like sve,\n    it would assume the presence of all the features that sve\n    depends on.  It would be possible to keep that behaviour\n    if necessary, but it was simpler to assume the presence of\n    fp16 (say) only when fphp is present.  There's an argument\n    that that's more conservatively correct too.\n\ngcc/\n\t* common/config/aarch64/aarch64-common.cc\n\t(TARGET_OPTION_INIT_STRUCT): Delete.\n\t(aarch64_option_extension): Remove is_synthetic_flag.\n\t(all_extensions): Update accordingly.\n\t(all_extensions_by_on, opt_ext, opt_ext_cmp): Delete.\n\t(aarch64_option_init_struct, aarch64_contains_opt): Delete.\n\t(aarch64_get_extension_string_for_isa_flags): Rewrite to use\n\tall_extensions instead of all_extensions_on.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/cpunative/info_8: Add all dependencies of sve.\n\t* gcc.target/aarch64/cpunative/info_9: Likewise svesm4.\n\t* gcc.target/aarch64/cpunative/info_15: Likewise.\n\t* gcc.target/aarch64/cpunative/info_16: Likewise sve2.\n\t* gcc.target/aarch64/cpunative/info_17: Likewise.\n\t* gcc.target/aarch64/cpunative/native_cpu_2.c: Expect just +nofp\n\trather than +nofp+nosimd.\n\t* gcc.target/aarch64/cpunative/native_cpu_10.c: Likewise.\n\t* gcc.target/aarch64/target_attr_15.c: Likewise.", "tree": {"sha": "f859f0da1fdc27e85e6a87af5c21fde7b29d549a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f859f0da1fdc27e85e6a87af5c21fde7b29d549a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a113d501ff64fa4843e28d0a21b3f4e9d0d3de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a113d501ff64fa4843e28d0a21b3f4e9d0d3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a113d501ff64fa4843e28d0a21b3f4e9d0d3de"}], "stats": {"total": 259, "additions": 55, "deletions": 204}, "files": [{"sha": "85fb5f26d99050e95dbdd46cdc6545182da39547", "filename": "gcc/common/config/aarch64/aarch64-common.cc", "status": "modified", "additions": 47, "deletions": 196, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc?ref=4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "patch": "@@ -42,8 +42,6 @@\n \n #undef\tTARGET_OPTION_OPTIMIZATION_TABLE\n #define TARGET_OPTION_OPTIMIZATION_TABLE aarch_option_optimization_table\n-#undef TARGET_OPTION_INIT_STRUCT\n-#define TARGET_OPTION_INIT_STRUCT aarch64_option_init_struct\n \n /* Set default optimization options.  */\n static const struct default_options aarch_option_optimization_table[] =\n@@ -133,7 +131,6 @@ struct aarch64_option_extension\n   const uint64_t flag_canonical;\n   const uint64_t flags_on;\n   const uint64_t flags_off;\n-  const bool is_synthetic;\n };\n \n /* ISA extensions in AArch64.  */\n@@ -143,24 +140,9 @@ static const struct aarch64_option_extension all_extensions[] =\n   {NAME, AARCH64_FL_##IDENT, \\\n    feature_deps::IDENT ().explicit_on & ~AARCH64_FL_##IDENT, \\\n    feature_deps::get_flags_off (feature_deps::root_off_##IDENT) \\\n-   & ~AARCH64_FL_##IDENT, \\\n-   AARCH64_FL_##IDENT == AARCH64_FL_CRYPTO},\n+   & ~AARCH64_FL_##IDENT},\n #include \"config/aarch64/aarch64-option-extensions.def\"\n-  {NULL, 0, 0, 0, false}\n-};\n-\n-/* A copy of the ISA extensions list for AArch64 sorted by the popcount of\n-   bits and extension turned on.  Cached for efficiency.  */\n-static struct aarch64_option_extension all_extensions_by_on[] =\n-{\n-#define AARCH64_OPT_EXTENSION(NAME, IDENT, C, D, E, F) \\\n-  {NAME, AARCH64_FL_##IDENT, \\\n-   feature_deps::IDENT ().explicit_on & ~AARCH64_FL_##IDENT, \\\n-   feature_deps::get_flags_off (feature_deps::root_off_##IDENT) \\\n-   & ~AARCH64_FL_##IDENT, \\\n-   AARCH64_FL_##IDENT == AARCH64_FL_CRYPTO},\n-#include \"config/aarch64/aarch64-option-extensions.def\"\n-  {NULL, 0, 0, 0, false}\n+  {NULL, 0, 0, 0}\n };\n \n struct processor_name_to_arch\n@@ -277,78 +259,6 @@ aarch64_get_all_extension_candidates (auto_vec<const char *> *candidates)\n     candidates->safe_push (opt->name);\n }\n \n-/* Comparer to sort aarch64's feature extensions by population count. Largest\n-   first.  */\n-\n-typedef const struct aarch64_option_extension opt_ext;\n-\n-int opt_ext_cmp (const void* a, const void* b)\n-{\n-  opt_ext *opt_a = (opt_ext *)a;\n-  opt_ext *opt_b = (opt_ext *)b;\n-\n-  /* We consider the total set of bits an options turns on to be the union of\n-     the singleton set containing the option itself and the set of options it\n-     turns on as a dependency.  As an example +dotprod turns on FL_DOTPROD and\n-     FL_SIMD.  As such the set of bits represented by this option is\n-     {FL_DOTPROD, FL_SIMD}. */\n-  uint64_t total_flags_a = opt_a->flag_canonical & opt_a->flags_on;\n-  uint64_t total_flags_b = opt_b->flag_canonical & opt_b->flags_on;\n-  int popcnt_a = popcount_hwi ((HOST_WIDE_INT)total_flags_a);\n-  int popcnt_b = popcount_hwi ((HOST_WIDE_INT)total_flags_b);\n-  int order = popcnt_b - popcnt_a;\n-\n-  /* If they have the same amount of bits set, give it a more\n-     deterministic ordering by using the value of the bits themselves.  */\n-  if (order != 0)\n-    return order;\n-\n-  if (total_flags_a != total_flags_b)\n-    return total_flags_a < total_flags_b ? 1 : -1;\n-\n-  return 0;\n-}\n-\n-/* Implement TARGET_OPTION_INIT_STRUCT.  */\n-\n-static void\n-aarch64_option_init_struct (struct gcc_options *opts ATTRIBUTE_UNUSED)\n-{\n-    /* Sort the extensions based on how many bits they set, order the larger\n-       counts first.  We sort the list because this makes processing the\n-       feature bits O(n) instead of O(n^2).  While n is small, the function\n-       to calculate the feature strings is called on every options push,\n-       pop and attribute change (arm_neon headers, lto etc all cause this to\n-       happen quite frequently).  It is a trade-off between time and space and\n-       so time won.  */\n-    int n_extensions = ARRAY_SIZE (all_extensions);\n-    qsort (&all_extensions_by_on, n_extensions,\n-\t   sizeof (struct aarch64_option_extension), opt_ext_cmp);\n-}\n-\n-/* Checks to see if enough bits from the option OPT are enabled in\n-   ISA_FLAG_BITS to be able to replace the individual options with the\n-   canonicalized version of the option.  This is done based on two rules:\n-\n-   1) Synthetic groups, such as +crypto we only care about the bits that are\n-      turned on. e.g. +aes+sha2 can be replaced with +crypto.\n-\n-   2) Options that themselves have a bit, such as +rdma, in this case, all the\n-      feature bits they turn on must be available and the bit for the option\n-      itself must be.  In this case it's effectively a reduction rather than a\n-      grouping. e.g. +fp+simd is not enough to turn on +rdma, for that you would\n-      need +rdma+fp+simd which is reduced down to +rdma.\n-*/\n-\n-static bool\n-aarch64_contains_opt (uint64_t isa_flag_bits, opt_ext *opt)\n-{\n-  uint64_t flags_check\n-    = opt->is_synthetic ? opt->flags_on : opt->flag_canonical;\n-\n-  return (isa_flag_bits & flags_check) == flags_check;\n-}\n-\n /* Return a string representation of ISA_FLAGS.  DEFAULT_ARCH_FLAGS\n    gives the default set of flags which are implied by whatever -march\n    we'd put out.  Our job is to figure out the minimal set of \"+\" and\n@@ -359,118 +269,59 @@ std::string\n aarch64_get_extension_string_for_isa_flags (uint64_t isa_flags,\n \t\t\t\t\t    uint64_t default_arch_flags)\n {\n-  const struct aarch64_option_extension *opt = NULL;\n   std::string outstr = \"\";\n \n-  uint64_t isa_flag_bits = isa_flags;\n-\n-  /* Pass one: Minimize the search space by reducing the set of options\n-     to the smallest set that still turns on the same features as before in\n-     conjunction with the bits that are turned on by default for the selected\n-     architecture.  */\n-  for (opt = all_extensions_by_on; opt->name != NULL; opt++)\n+  aarch64_feature_flags current_flags = default_arch_flags;\n+\n+  /* As a special case, do not assume that the assembler will enable CRC\n+     even if it is the default for the architecture.  This is required\n+     because some CPUs had an incorrect specification in older assemblers:\n+     even though CRC should be the default for these cases the -mcpu\n+     values would not turn it on.\n+\n+     However, assemblers with Armv8-R AArch64 support should not have this\n+     issue, so we don't need this fix when targeting Armv8-R.  */\n+  auto explicit_flags = (!(current_flags & AARCH64_FL_V8R)\n+\t\t\t ? AARCH64_FL_CRC : 0);\n+\n+  /* Add the features in isa_flags & ~current_flags using the smallest\n+     possible number of extensions.  We can do this by iterating over the\n+     array in reverse order, since the array is sorted topologically.\n+     But in order to make the output more readable, it seems better\n+     to add the strings in definition order.  */\n+  aarch64_feature_flags added = 0;\n+  for (unsigned int i = ARRAY_SIZE (all_extensions); i-- > 0; )\n     {\n-      /* If the bit is on by default, then all the options it turns on are also\n-\t on by default due to the transitive dependencies.\n-\n-         If the option is enabled explicitly in the set then we need to emit\n-\t an option for it.  Since this list is sorted by extensions setting the\n-\t largest number of featers first, we can be sure that nothing else will\n-\t ever need to set the bits we already set.  Consider the following\n-\t situation:\n-\n-\t  Feat1 = A + B + C\n-\t  Feat2 = A + B\n-\t  Feat3 = A + D\n-\t  Feat4 = B + C\n-\t  Feat5 = C\n-\n-\tThe following results are expected:\n-\n-\t  A + C = A + Feat5\n-\t  B + C = Feat4\n-\t  Feat4 + A = Feat1\n-\t  Feat2 + Feat5 = Feat1\n-\t  Feat1 + C = Feat1\n-          Feat3 + Feat4 = Feat1 + D\n-\n-\tThis search assumes that all invidual feature bits are use visible,\n-\tin other words the user must be able to do +A, +B, +C and +D.  */\n-      if (aarch64_contains_opt (isa_flag_bits | default_arch_flags, opt))\n-      {\n-\t/* We remove all the dependent bits, to prevent them from being turned\n-\t   on twice.  This only works because we assume that all there are\n-\t   individual options to set all bits standalone.  */\n-\n-\t/* PR target/94396.\n-\n-\t   For flags which would already imply a bit that's on by default (e.g\n-\t   fp16fml which implies +fp,+fp16) we must emit the flags that are not\n-\t   on by default.  i.e. in Armv8.4-a +fp16fml is default if +fp16.  So\n-\t   if a user passes armv8.4-a+fp16 (or +fp16fml) then we need to emit\n-\t   +fp16.  But if +fp16fml is used in an architecture where it is\n-\t   completely optional we only have to emit the canonical flag.  */\n-\tuint64_t toggle_bits = opt->flags_on & default_arch_flags;\n-\t/* Now check to see if the canonical flag is on by default.  If it\n-\t   is not then enabling it will enable all bits in flags_on.  */\n-\tif ((opt->flag_canonical & default_arch_flags) == 0)\n-\t  toggle_bits = opt->flags_on;\n-\n-\tisa_flag_bits &= ~toggle_bits;\n-\tisa_flag_bits |= opt->flag_canonical;\n-      }\n-    }\n+      auto &opt = all_extensions[i];\n \n-   /* By toggling bits on and off, we may have set bits on that are already\n-      enabled by default.  So we mask the default set out so we don't emit an\n-      option for them.  Instead of checking for this each time during Pass One\n-      we just mask all default bits away at the end.  */\n-   isa_flag_bits &= ~default_arch_flags;\n-\n-   /* We now have the smallest set of features we need to process.  A subsequent\n-      linear scan of the bits in isa_flag_bits will allow us to print the ext\n-      names.  However as a special case if CRC was enabled before, always print\n-      it.  This is required because some CPUs have an incorrect specification\n-      in older assemblers.  Even though CRC should be the default for these\n-      cases the -mcpu values won't turn it on.\n-\n-      Note that assemblers with Armv8-R AArch64 support should not have this\n-      issue, so we don't need this fix when targeting Armv8-R.  */\n-  if ((isa_flags & AARCH64_ISA_CRC) && !AARCH64_ISA_V8R)\n-    isa_flag_bits |= AARCH64_ISA_CRC;\n-\n-  /* Pass Two:\n-     Print the option names that we're sure we must turn on.  These are only\n-     optional extension names.  Mandatory ones have already been removed and\n-     ones we explicitly want off have been too.  */\n-  for (opt = all_extensions_by_on; opt->name != NULL; opt++)\n-    {\n-      if (isa_flag_bits & opt->flag_canonical)\n-\t{\n-\t  outstr += \"+\";\n-\t  outstr += opt->name;\n-\t}\n-    }\n+      /* As a special case, emit +crypto rather than +aes+sha2,\n+\t in order to support assemblers that predate the separate\n+\t per-feature crypto flags.  */\n+      auto flags = opt.flag_canonical;\n+      if (flags == AARCH64_FL_CRYPTO)\n+\tflags = AARCH64_FL_AES | AARCH64_FL_SHA2;\n \n-  /* Pass Three:\n-     Print out a +no for any mandatory extension that we are\n-     turning off.  By this point aarch64_parse_extension would have ensured\n-     that any optional extensions are turned off.  The only things left are\n-     things that can't be turned off usually, e.g. something that is on by\n-     default because it's mandatory and we want it off.  For turning off bits\n-     we don't guarantee the smallest set of flags, but instead just emit all\n-     options the user has specified.\n-\n-     The assembler requires all +<opts> to be printed before +no<opts>.  */\n-  for (opt = all_extensions_by_on; opt->name != NULL; opt++)\n-    {\n-      if ((~isa_flags) & opt->flag_canonical\n-\t\t&& !((~default_arch_flags) & opt->flag_canonical))\n+      if ((flags & isa_flags & (explicit_flags | ~current_flags)) == flags)\n \t{\n-\t  outstr += \"+no\";\n-\t  outstr += opt->name;\n+\t  current_flags |= opt.flag_canonical | opt.flags_on;\n+\t  added |= opt.flag_canonical;\n \t}\n     }\n+  for (auto &opt : all_extensions)\n+    if (added & opt.flag_canonical)\n+      {\n+\toutstr += \"+\";\n+\toutstr += opt.name;\n+      }\n+\n+  /* Remove the features in current_flags & ~isa_flags.  */\n+  for (auto &opt : all_extensions)\n+    if (opt.flag_canonical & current_flags & ~isa_flags)\n+      {\n+\tcurrent_flags &= ~(opt.flag_canonical | opt.flags_off);\n+\toutstr += \"+no\";\n+\toutstr += opt.name;\n+      }\n \n   return outstr;\n }"}, {"sha": "6b425ea201351247c7273718d9e1e52cae62b342", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_15", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_15", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_15", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_15?ref=4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "patch": "@@ -1,6 +1,6 @@\n processor\t: 0\n BogoMIPS\t: 100.00\n-Features\t: Lorem ipsum dolor sit ametd rebum expetendis per at Dolor lucilius referrentur ei mei virtute eruditi eum ne Iisque verter svesm4 asimd fp\n+Features\t: Lorem ipsum dolor sit ametd rebum expetendis per at Dolor lucilius referrentur ei mei virtute eruditi eum ne Iisque verter svesm4 asimd fp sve sve2 fphp asimdhp sm3 sm4\n CPU implementer\t: 0x41\n CPU architecture: 8\n CPU variant\t: 0x0"}, {"sha": "26f01c4962489ab116450dd55717e4db345fdaee", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_16", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_16", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_16", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_16?ref=4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "patch": "@@ -1,6 +1,6 @@\n processor\t: 0\n BogoMIPS\t: 100.00\n-Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 asimddp sve sve2\n+Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 asimddp sve sve2 fphp asimdhp\n CPU implementer\t: 0xfe\n CPU architecture: 8\n CPU variant\t: 0x0"}, {"sha": "26f01c4962489ab116450dd55717e4db345fdaee", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_17", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_17", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_17", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_17?ref=4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "patch": "@@ -1,6 +1,6 @@\n processor\t: 0\n BogoMIPS\t: 100.00\n-Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 asimddp sve sve2\n+Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 asimddp sve sve2 fphp asimdhp\n CPU implementer\t: 0xfe\n CPU architecture: 8\n CPU variant\t: 0x0"}, {"sha": "76da16c57b545c0cf72bf96e8a56f502ecc55073", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_8", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_8", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_8", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_8?ref=4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "patch": "@@ -1,6 +1,6 @@\n processor\t: 0\n BogoMIPS\t: 100.00\n-Features\t: asimd sve fp\n+Features\t: asimd sve fp fphp asimdhp\n CPU implementer\t: 0x41\n CPU architecture: 8\n CPU variant\t: 0x0"}, {"sha": "14703dd1d0bf0c6543484d34950dc91778483b67", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_9", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_9", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_9", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_9?ref=4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "patch": "@@ -1,6 +1,6 @@\n processor\t: 0\n BogoMIPS\t: 100.00\n-Features\t: asimd fp svesm4\n+Features\t: asimd fp svesm4 sve sve2 fphp asimdhp sm3 sm4\n CPU implementer\t: 0x41\n CPU architecture: 8\n CPU variant\t: 0x0"}, {"sha": "ddb06b8227576807fe068b76dabed91a0223e4fa", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_10.c?ref=4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "patch": "@@ -7,6 +7,6 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-assembler {\\.arch armv8-a\\+nofp\\+nosimd} } } */\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+nofp} } } */\n \n /* Test one with no entry in feature list.  */"}, {"sha": "edbdb56268ea7e18c7eab7a0dd74658fc626527c", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_2.c?ref=4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "patch": "@@ -7,6 +7,6 @@ int main()\n   return 0;\n }\n \n-/* { dg-final { scan-assembler {\\.arch armv8-a\\+nofp\\+nosimd} } } */\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+nofp} } } */\n \n /* Test one where asimd is provided byt no fp.  */"}, {"sha": "069a0010865334324a100bab358bb53369f122fb", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebf56f283ae5a98ae4c43079b7e8459945ef18d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_15.c?ref=4ebf56f283ae5a98ae4c43079b7e8459945ef18d", "patch": "@@ -10,4 +10,4 @@ foo (int a)\n   return a + 1;\n }\n \n-/* { dg-final { scan-assembler-times \"\\\\.arch armv8-a\\\\+nofp\\\\+nosimd\\n\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\.arch armv8-a\\\\+nofp\\n\" 1 } } */"}]}