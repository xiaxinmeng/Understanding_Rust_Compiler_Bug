{"sha": "d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDExZWM2ZjBkOWZhZTc1MjQwOTBiM2U1ZWE1MmUwMzFlNjE3ZjkwZg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-29T19:33:52Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-29T19:33:52Z"}, "message": "hashtab.c, [...]: Include string.h if HAVE_STRING_H.\n\n\t* hashtab.c, partition.c, sort.c, xmemdup.c: Include string.h\n\tif HAVE_STRING_H.\n\t* pexecute.c, xexit.c: Include stdlib.h if HAVE_STDLIB_H.\n\t* objalloc.c: Include config.h.  Include stdlib.h and don't\n\tdeclare malloc or free if HAVE_STDLIB_H.\n\t* strerror.c, strsignal.c: Include stdlib.h if HAVE_STDLIB_H,\n\telse declare malloc without prototype.  Include string.h if\n\tHAVE_STRING_H, else declare memset without prototype.  Don't\n\tinclude stddef.h.\n\nFrom-SVN: r34254", "tree": {"sha": "0c1fceddd218b3497d0fd2f87e6d228a281215ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c1fceddd218b3497d0fd2f87e6d228a281215ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/comments", "author": null, "committer": null, "parents": [{"sha": "ea4a453b8909eb0f3612bbf98fe2e6a2a8ee4114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4a453b8909eb0f3612bbf98fe2e6a2a8ee4114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4a453b8909eb0f3612bbf98fe2e6a2a8ee4114"}], "stats": {"total": 77, "additions": 61, "deletions": 16}, "files": [{"sha": "adeb3c26ec2f68bbdea1416e746b143b411c50e6", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "patch": "@@ -1,3 +1,15 @@\n+2000-05-29  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* hashtab.c, partition.c, sort.c, xmemdup.c: Include string.h\n+\tif HAVE_STRING_H.\n+\t* pexecute.c, xexit.c: Include stdlib.h if HAVE_STDLIB_H.\n+\t* objalloc.c: Include config.h.  Include stdlib.h and don't\n+\tdeclare malloc or free if HAVE_STDLIB_H.\n+\t* strerror.c, strsignal.c: Include stdlib.h if HAVE_STDLIB_H,\n+\telse declare malloc without prototype.  Include string.h if\n+\tHAVE_STRING_H, else declare memset without prototype.  Don't\n+\tinclude stddef.h.\n+\n 2000-05-23  Mike Stump  <mrs@wrs.com>\n \n \t* Makefile.in (xmalloc.o): Add dependency for config.h, fixes make"}, {"sha": "57b40417c9595ddc9436540403357d09baaf5ad3", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "patch": "@@ -41,6 +41,10 @@ Boston, MA 02111-1307, USA.  */\n #include <stdlib.h>\n #endif\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n #include <stdio.h>\n \n #include \"libiberty.h\""}, {"sha": "50995691e330acb244d72f8eabb8849a97d80eec", "filename": "libiberty/objalloc.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fobjalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fobjalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fobjalloc.c?ref=d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "patch": "@@ -18,6 +18,8 @@ Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"ansidecl.h\"\n+#include \"config.h\"\n+\n #include \"objalloc.h\"\n \n /* Get a definition for NULL.  */\n@@ -33,11 +35,16 @@ Boston, MA 02111-1307, USA.  */\n #include <stddef.h>\n #endif\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#else\n /* For systems with larger pointers than ints, this must be declared.  */\n extern PTR malloc PARAMS ((size_t));\n extern void free PARAMS ((PTR));\n #endif\n \n+#endif\n+\n /* These routines allocate space for an object.  Freeing allocated\n    space may or may not free all more recently allocated space.\n "}, {"sha": "52fb128d7bfe9ea887fd9a91af1eaf7a1b5a48e6", "filename": "libiberty/partition.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fpartition.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fpartition.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpartition.c?ref=d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "patch": "@@ -27,6 +27,10 @@\n #include <stdlib.h>\n #endif\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n+\n #include \"libiberty.h\"\n #include \"partition.h\"\n "}, {"sha": "f1aea9db7f0eb625c64a38358ecfea3243dbf5f9", "filename": "libiberty/pexecute.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fpexecute.c?ref=d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "patch": "@@ -35,6 +35,9 @@ Boston, MA 02111-1307, USA.  */\n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n #endif\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #define ISSPACE (x) isspace(x)\n #ifdef HAVE_SYS_WAIT_H\n #include <sys/wait.h>"}, {"sha": "da2d660b6f5d743655dc1876a442af38bae46cd9", "filename": "libiberty/sort.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fsort.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fsort.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fsort.c?ref=d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "patch": "@@ -28,6 +28,9 @@ Boston, MA 02111-1307, USA.  */\n #ifdef HAVE_STDLIB_H\n #include <stdlib.h>\n #endif\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n \n #ifndef UCHAR_MAX\n #define UCHAR_MAX ((unsigned char)(-1))"}, {"sha": "0dd2220cd73d88840b7e8f003a6484768f10e55e", "filename": "libiberty/strerror.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fstrerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fstrerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrerror.c?ref=d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "patch": "@@ -25,14 +25,17 @@\n \n /*  Routines imported from standard C runtime libraries. */\n \n-#ifdef __STDC__\n-#include <stddef.h>\n-extern void *malloc (size_t size);\t\t\t\t/* 4.10.3.3 */\n-extern void *memset (void *s, int c, size_t n);\t\t\t/* 4.11.6.1 */\n-#else\t/* !__STDC__ */\n-extern char *malloc ();\t\t/* Standard memory allocater */\n-extern char *memset ();\n-#endif\t/* __STDC__ */\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#else\n+extern PTR malloc ();\n+#endif\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+extern PTR memset ();\n+#endif\n \n #ifndef MAX\n #  define MAX(a,b) ((a) > (b) ? (a) : (b))"}, {"sha": "5625323b71b30ed699849eab41dc9b46b9d82280", "filename": "libiberty/strsignal.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fstrsignal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fstrsignal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrsignal.c?ref=d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "patch": "@@ -23,14 +23,17 @@\n \n /*  Routines imported from standard C runtime libraries. */\n \n-#ifdef __STDC__\n-#include <stddef.h>\n-extern void *malloc (size_t size);\t\t\t\t/* 4.10.3.3 */\n-extern void *memset (void *s, int c, size_t n);\t\t\t/* 4.11.6.1 */\n-#else\t/* !__STDC__ */\n-extern char *malloc ();\t\t/* Standard memory allocater */\n-extern char *memset ();\n-#endif\t/* __STDC__ */\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#else\n+extern PTR malloc ();\n+#endif\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+extern PTR memset ();\n+#endif\n \n /* Undefine the macro we used to hide the definition of sys_siglist\n    found in the system header files.  */"}, {"sha": "7aa52ac7599caec0d633116806bb0c0e8a87c2bf", "filename": "libiberty/xexit.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fxexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fxexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxexit.c?ref=d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "patch": "@@ -21,6 +21,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"libiberty.h\"\n \n #include <stdio.h>\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n \n /* This variable is set by xatexit if it is called.  This way, xmalloc\n    doesn't drag xatexit into the link.  */"}, {"sha": "fdb17a547f3a9b1ceeb803f5517c578f15fa71bd", "filename": "libiberty/xmemdup.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fxmemdup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d11ec6f0d9fae7524090b3e5ea52e031e617f90f/libiberty%2Fxmemdup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxmemdup.c?ref=d11ec6f0d9fae7524090b3e5ea52e031e617f90f", "patch": "@@ -9,6 +9,9 @@\n #include \"libiberty.h\"\n \n #include <sys/types.h> /* For size_t. */\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n \n PTR\n xmemdup (input, copy_size, alloc_size)"}]}