{"sha": "17b53c33a29e8a50032a3d7b915cf1a7c0519670", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdiNTNjMzNhMjllOGE1MDAzMmEzZDdiOTE1Y2YxYTdjMDUxOTY3MA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-07-09T06:10:09Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-09T06:10:09Z"}, "message": "final.c (output_addr_const): Use target opening and closing parentheses.\n\n\t* final.c (output_addr_const): Use target opening and\n\tclosing parentheses.\n\t* target-def.h: Define TARGET_ASM_OPEN_PAREN, TARGET_ASM_CLOSE_PAREN\n\tdefaults, add to TARGET_ASM_OUT.\n\t* target.h (struct gcc_target): Add open_paren and close_paren.\n\t* doc/md.texi: Update.\n\t* doc/tm.texi: Document TARGET_ASM_FUNCTION_END_PROLOGUE,\n\tTARGET_ASM_FUNCTION_BEGIN_EPILOGUE, TARGET_ASM_OPEN_PAREN and\n\tTARGET_ASM_CLOSE_PAREN.\nconfig:\n\t* i386/i386.c (TARGET_ASM_OPEN_PAREN, TARGET_ASM_CLOSE_PAREN):\n\tOverride.\n\t* pdp11/pdp11.c (TARGET_ASM_OPEN_PAREN, TARGET_ASM_CLOSE_PAREN):\n\tOverride.\n\t* 1750a/1750a.h (ASM_OPEN_PAREN, ASM_CLOSE_PAREN): Remove.\n\t* a29k/a29k.h: Similarly.\n\t* alpha/alpha.h: Similarly.\n\t* arc/arc.h: Similarly.\n\t* arm/aof.h: Similarly.\n\t* arm/aout.h: Similarly.\n\t* avr/avr.h: Similarly.\n\t* c4x/c4x.h: Similarly.\n\t* clipper/clipper.h: Similarly.\n\t* convex/convex.h: Similarly.\n\t* d30v/d30v.h: Similarly.\n\t* dsp16xx/dsp16xx.h: Similarly.\n\t* elxsi/elxsi.h: Similarly.\n\t* fr30/fr30.h: Similarly.\n\t* h8300/h8300.h: Similarly.\n\t* i370/i370.h: Similarly.\n\t* i386/i386.h: Similarly.\n\t* i860/i860.h: Similarly.\n\t* i960/i960.h: Similarly.\n\t* ia64/ia64.h: Similarly.\n\t* m32r/m32r.h: Similarly.\n\t* m68hc11/m68hc11.h: Similarly.\n\t* m68k/m68k.h: Similarly.\n\t* m88k/m88k.h: Similarly.\n\t* mcore/mcore.h: Similarly.\n\t* mips/mips.h: Similarly.\n\t* mn10200/mn10200.h: Similarly.\n\t* mn10300/mn10300.h: Similarly.\n\t* ns32k/ns32k.h: Similarly.\n\t* pa/pa.h: Similarly.\n\t* pdp11/pdp11.h: Similarly.\n\t* pj/pj.h: Similarly.\n\t* romp/romp.h: Similarly.\n\t* rs6000/rs6000.h: Similarly.\n\t* sh/sh.h: Similarly.\n\t* sparc/sparc.h: Similarly.\n\t* v850/v850.h: Similarly.\n\t* vax/vax.h: Similarly.\n\t* we32k/we32k.h: Similarly.\n\nFrom-SVN: r43856", "tree": {"sha": "051781609cfb357e6e76424bb7bc1e771707544b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/051781609cfb357e6e76424bb7bc1e771707544b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17b53c33a29e8a50032a3d7b915cf1a7c0519670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b53c33a29e8a50032a3d7b915cf1a7c0519670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b53c33a29e8a50032a3d7b915cf1a7c0519670", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b53c33a29e8a50032a3d7b915cf1a7c0519670/comments", "author": null, "committer": null, "parents": [{"sha": "b41df7f63cca6fda7f1c50780025018282a08504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41df7f63cca6fda7f1c50780025018282a08504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41df7f63cca6fda7f1c50780025018282a08504"}], "stats": {"total": 362, "additions": 109, "deletions": 253}, "files": [{"sha": "bd392efa6392f6d70aaccdfb7ae37978ed276081", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1,3 +1,59 @@\n+2001-07-09  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* final.c (output_addr_const): Use target opening and\n+\tclosing parentheses.\n+\t* target-def.h: Define TARGET_ASM_OPEN_PAREN, TARGET_ASM_CLOSE_PAREN\n+\tdefaults, add to TARGET_ASM_OUT.\n+\t* target.h (struct gcc_target): Add open_paren and close_paren.\n+\t* doc/md.texi: Update.\n+\t* doc/tm.texi: Document TARGET_ASM_FUNCTION_END_PROLOGUE,\n+\tTARGET_ASM_FUNCTION_BEGIN_EPILOGUE, TARGET_ASM_OPEN_PAREN and\n+\tTARGET_ASM_CLOSE_PAREN.\n+config:\n+\t* i386/i386.c (TARGET_ASM_OPEN_PAREN, TARGET_ASM_CLOSE_PAREN):\n+\tOverride.\n+\t* pdp11/pdp11.c (TARGET_ASM_OPEN_PAREN, TARGET_ASM_CLOSE_PAREN):\n+\tOverride.\n+\t* 1750a/1750a.h (ASM_OPEN_PAREN, ASM_CLOSE_PAREN): Remove.\n+\t* a29k/a29k.h: Similarly.\n+\t* alpha/alpha.h: Similarly.\n+\t* arc/arc.h: Similarly.\n+\t* arm/aof.h: Similarly.\n+\t* arm/aout.h: Similarly.\n+\t* avr/avr.h: Similarly.\n+\t* c4x/c4x.h: Similarly.\n+\t* clipper/clipper.h: Similarly.\n+\t* convex/convex.h: Similarly.\n+\t* d30v/d30v.h: Similarly.\n+\t* dsp16xx/dsp16xx.h: Similarly.\n+\t* elxsi/elxsi.h: Similarly.\n+\t* fr30/fr30.h: Similarly.\n+\t* h8300/h8300.h: Similarly.\n+\t* i370/i370.h: Similarly.\n+\t* i386/i386.h: Similarly.\n+\t* i860/i860.h: Similarly.\n+\t* i960/i960.h: Similarly.\n+\t* ia64/ia64.h: Similarly.\n+\t* m32r/m32r.h: Similarly.\n+\t* m68hc11/m68hc11.h: Similarly.\n+\t* m68k/m68k.h: Similarly.\n+\t* m88k/m88k.h: Similarly.\n+\t* mcore/mcore.h: Similarly.\n+\t* mips/mips.h: Similarly.\n+\t* mn10200/mn10200.h: Similarly.\n+\t* mn10300/mn10300.h: Similarly.\n+\t* ns32k/ns32k.h: Similarly.\n+\t* pa/pa.h: Similarly.\n+\t* pdp11/pdp11.h: Similarly.\n+\t* pj/pj.h: Similarly.\n+\t* romp/romp.h: Similarly.\n+\t* rs6000/rs6000.h: Similarly.\n+\t* sh/sh.h: Similarly.\n+\t* sparc/sparc.h: Similarly.\n+\t* v850/v850.h: Similarly.\n+\t* vax/vax.h: Similarly.\n+\t* we32k/we32k.h: Similarly.\n+\n 2001-07-09  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/c-tree.texi: Document representation of attributes."}, {"sha": "72ee543a11cd60e6c50a08479b84d415442868a9", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1228,12 +1228,6 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \tfprintf(FILE, \"\\tinit\\n\\t\"); assemble_name(FILE, NAME); \\\n         fprintf(FILE,\"  ;destructor\\n\"); } while (0)\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null."}, {"sha": "96d19ac6df402f86954bab64186ee65dd10a8695", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1567,12 +1567,6 @@ extern int a29k_debug_reg_map[];\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */"}, {"sha": "b04be3586b372d38cf9238f6d343f3c6e15fad79", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -2187,12 +2187,6 @@ literal_section ()\t\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Output code to add DELTA to the first argument, and then jump to FUNCTION.\n    Used for C++ multiple inheritance.  */\n /* ??? This is only used with the v2 ABI, and alpha.c makes assumptions"}, {"sha": "9a7b270b5c27d98f40817bd2bb295ddfdab85195", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1297,10 +1297,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_BYTE(FILE, VALUE)  \\\n   fprintf (FILE, \"%s0x%x\\n\", ASM_BYTE_OP, (VALUE))\n \n-/* The assembler's parentheses characters.  */\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n #define ASM_OUTPUT_LABEL(FILE, NAME) \\"}, {"sha": "3b0baf57ac583bded43c358721ee894e70d0bab9", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -282,9 +282,6 @@ do {\t\t\t\t\t\t\t\\\n \n #define IS_ASM_LOGICAL_LINE_SEPARATOR(C) ((C) == '\\n')\n \n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Output of Uninitialized Variables */\n \n #define ASM_OUTPUT_COMMON(STREAM,NAME,SIZE,ROUNDED)\t\t\\"}, {"sha": "1acb8b480d0d0033fe5b41a870fe1e99258f3e2e", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -323,10 +323,6 @@ Boston, MA 02111-1307, USA.  */\n   asm_fprintf (STREAM, \"%@ - - - ident %s\\n\", STRING)\n #endif\n      \n-/* The assembler's parentheses characters.  */\n-#define ASM_OPEN_PAREN \t\t\"(\"\n-#define ASM_CLOSE_PAREN \t\")\"\n-\n #ifndef ASM_COMMENT_START\n #define ASM_COMMENT_START \t\"@\"\n #endif"}, {"sha": "6ebb93ce70fe7d77e2d92c5b27efa9482c650154", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -2111,16 +2111,7 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    If you do not define this macro, the default is that only the\n    character `;' is treated as a logical line separator.  */\n \n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-/* These macros are defined as C string constant, describing the\n-   syntax in the assembler for grouping arithmetic expressions.  The\n-   following definitions are correct for most assemblers:\n-\n-   #define ASM_OPEN_PAREN \"(\"\n-   #define ASM_CLOSE_PAREN \")\"\n-\n-   These macros are provided by `real.h' for writing the definitions of\n+/* These macros are provided by `real.h' for writing the definitions of\n    `ASM_OUTPUT_DOUBLE' and the like:  */\n \n #define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED)\t\t\t   \\"}, {"sha": "c515337aa3d9df4c808bdee05f38317b3daccb88", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -2253,10 +2253,6 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_ASCII(FILE, PTR, LEN) c4x_output_ascii (FILE, PTR, LEN)\n \n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n-\n /* Output and Generation of Labels.  */\n \n #define NO_DOT_IN_LABEL\t\t/* Only required for TI format.  */"}, {"sha": "ca67ee8009aa335bded23cc336278e7af2c81298", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1056,12 +1056,6 @@ do\t\t\t\t\t\t\t\t\t      \\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'."}, {"sha": "88bb2b115caaeb7259f4a0ea4f39e88bd2d9393a", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1417,12 +1417,6 @@ enum reg_class {\n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n   asm_declare_function_name (FILE, NAME, DECL)\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'. */"}, {"sha": "6126feafb66eeec9a75cac0466eac470d7c723ed", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -4091,15 +4091,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n    is treated as a logical line separator.  */\n /* #define IS_ASM_LOGICAL_LINE_SEPARATOR(C) */\n \n-/* These macros are defined as C string constant, describing the syntax in the\n-   assembler for grouping arithmetic expressions.  The following definitions\n-   are correct for most assemblers:\n-\n-        #define ASM_OPEN_PAREN \"(\"\n-        #define ASM_CLOSE_PAREN \")\"  */\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* These macros are provided by `real.h' for writing the definitions of\n    `ASM_OUTPUT_DOUBLE' and the like: */\n "}, {"sha": "1910e1db6aef09331cf3f894080d19fc06e7878a", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1683,10 +1683,6 @@ const_section ()                                                   \\\n     (OUTPUT) = (char *) alloca (strlen (NAME) + 11);\t\t\t\\\n     ASM_GENERATE_INTERNAL_LABEL (OUTPUT, temp, LABELNO);\t\t\\\n   } while (0)\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n \f\n /* OUTPUT OF UNINITIALIZED VARIABLES */\n "}, {"sha": "dacefd4c1d1e33da39aa05d4bceb76efc7e656c2", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -855,12 +855,6 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'.  */"}, {"sha": "833a2cf08d7997cb408eeed2f592025dd1af2bcb", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1504,15 +1504,6 @@ do\t\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_BYTE(STREAM, VALUE) \\\n   fprintf (STREAM, \"%s0x%x\\n\", ASM_BYTE_OP, (VALUE))\n \n-/* These macros are defined as C string constant, describing the syntax in the\n-   assembler for grouping arithmetic expressions.  The following definitions\n-   are correct for most assemblers:\n-\n-        #define ASM_OPEN_PAREN \"(\"\n-        #define ASM_CLOSE_PAREN \")\"  */\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /*}}}*/ \f\n /*{{{  Output and Generation of Labels.  */ \n "}, {"sha": "ec3a1cbed930a148734f0bcebbdef0a43aa42200", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1387,12 +1387,6 @@ readonly_data ()\t\t\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s___%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print an instruction operand X on file FILE.\n    Look in h8300.c for details.  */\n "}, {"sha": "ca106331c697e0f541b81327ea079f969901d290", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1036,12 +1036,6 @@ enum reg_class\n /* ------------------------------------------ */\n /* Control the assembler format that we output.  */\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Define standard character escape sequences for non-ASCII targets\n    only.  */\n "}, {"sha": "8f9f7be584c7fcf6729cce50c6f3e3445b65f46c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -631,6 +631,11 @@ static int ix86_comp_type_attributes PARAMS ((tree, tree));\n #  define TARGET_ASM_FUNCTION_PROLOGUE ix86_osf_output_function_prologue\n #endif\n \n+#undef TARGET_ASM_OPEN_PAREN\n+#define TARGET_ASM_OPEN_PAREN \"\"\n+#undef TARGET_ASM_CLOSE_PAREN\n+#define TARGET_ASM_CLOSE_PAREN \"\"\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make"}, {"sha": "ee5b615e59e72ec4ee3946d587e2c6707ecba738", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -2922,12 +2922,6 @@ do { long l;\t\t\t\t\t\t\\\n \n #define ASM_SIMPLIFY_DWARF_ADDR(X) \\\n   i386_simplify_dwarf_addr(X)\n-\n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"\"\n-#define ASM_CLOSE_PAREN \"\"\n \f\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified."}, {"sha": "60485f807c20e3841f08a0d5ea61eb0227752611", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1180,12 +1180,6 @@ do { ASM_OUTPUT_ALIGN ((FILE), 2);\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null."}, {"sha": "17808bf250f2ac7642f5739ac228f3605f83cddf", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1508,12 +1508,6 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n #define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO)\t\\\n \t( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n \t  sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n-\n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n \f\n /* Output assembler code to FILE to initialize this source file's\n    basic block profiling info, if that has not already been done.  */"}, {"sha": "e22aff3006aff99d66788dae9f766837e8315d38", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -2122,12 +2122,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_BYTE(STREAM, VALUE) \\\n   fprintf (STREAM, \"%s0x%x\\n\", ASM_BYTE_OP, (int)(VALUE) & 0xff)\n \n-/* These macros are defined as C string constant, describing the syntax in the\n-   assembler for grouping arithmetic expressions.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n \f\n /* Output of Uninitialized Variables.  */\n "}, {"sha": "e72f61f9ad9ce085b410ac0d805d526c32f6e98a", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1779,10 +1779,6 @@ do {\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_BYTE(FILE, VALUE)\t\t\t\t\\\n   fprintf (FILE, \"%s0x%x\\n\", ASM_BYTE_OP, (VALUE))\n \n-/* The assembler's parentheses characters.  */\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n /* On the M32R we need to ensure the next instruction starts on a 32 bit"}, {"sha": "3ce23b8ce56bc90fccfb28f9bcd3864dda51ac4c", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1646,13 +1646,6 @@ do { long l;\t\t\t\t\t\t\\\n #define ASM_OUTPUT_BYTE(FILE,VALUE)\t\t\t\\\n   fprintf ((FILE), \"%s0x%x\\n\", ASM_BYTE_OP, (VALUE))\n \n-\n-/* Define the parentheses used to group arithmetic operations in assembler\n- * code.  \n- */\n-#define ASM_OPEN_PAREN\t\t\"(\"\n-#define ASM_CLOSE_PAREN\t\t\")\"\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n "}, {"sha": "b56b7a4ba172f3503f064e96ca9ee24221544ed8", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -2027,12 +2027,6 @@ do { long l;\t\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Output a float value (represented as a C double) as an immediate operand.\n    This macro is a 68k-specific macro.  */\n "}, {"sha": "2be34328f14508a266c854c7172150ae5a2eaea6", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -2221,11 +2221,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n \n /* Length in instructions of the code output by ASM_OUTPUT_REG_POP.  */\n #define REG_POP_LENGTH 2\n-\n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n \f\n /* Macros to deal with OCS debug information */\n "}, {"sha": "fecb9d8b4cf034c6d11d4ecefdb8b1e58b70407c", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1394,10 +1394,6 @@ extern long mcore_current_compilation_timestamp;\n #undef  ENCODE_SECTION_INFO\n #define ENCODE_SECTION_INFO(DECL) mcore_encode_section_info (DECL)\n \n-/* The assembler's parentheses characters.  */\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */"}, {"sha": "b4a912942e555982f95c0b4b1272f5de5575f2b1", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -4520,12 +4520,6 @@ do\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* How to start an assembler comment.\n    The leading space is important (the mips native assembler requires it).  */\n #ifndef ASM_COMMENT_START"}, {"sha": "997f1aabcc172802d58448f0e1789d77d5877fec", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -858,12 +858,6 @@ do { char dstr[30];\t\t\t\t\t\\\n #define ASM_OUTPUT_BYTE(FILE, VALUE)  \\\n   fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* This says how to output the assembler to define a global\n    uninitialized but not common symbol.\n    Try to use asm_output_bss to implement this macro.  */"}, {"sha": "143f3bf771c5cb481fe1431a653cab21251dd73a", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -940,12 +940,6 @@ do { char dstr[30];\t\t\t\t\t\\\n #define ASM_OUTPUT_BYTE(FILE, VALUE)  \\\n   fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* This says how to output the assembler to define a global\n    uninitialized but not common symbol.\n    Try to use asm_output_bss to implement this macro.  */"}, {"sha": "58937d1fd917795b8b2134b123c8a75accf87e48", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1425,12 +1425,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'. */"}, {"sha": "28b496d885a3770a1bdeb04a38b2dc906e0423be", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1879,12 +1879,6 @@ while (0)\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 12),\t\\\n   sprintf ((OUTPUT), \"%s___%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* All HP assemblers use \"!\" to separate logical lines.  */\n #define IS_ASM_LOGICAL_LINE_SEPARATOR(C) ((C) == '!')\n "}, {"sha": "9bf51ceda0bd4594901fd84fcde6fe9bf23b2337", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -61,6 +61,11 @@ static void pdp11_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE pdp11_output_function_epilogue\n \n+#undef TARGET_ASM_OPEN_PAREN\n+#define TARGET_ASM_OPEN_PAREN \"[\"\n+#undef TARGET_ASM_CLOSE_PAREN\n+#define TARGET_ASM_CLOSE_PAREN \"]\"\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Nonzero if OP is a valid second operand for an arithmetic insn.  */\n@@ -1555,9 +1560,9 @@ output_addr_const_pdp11 (file, x)\n       if (GET_CODE (XEXP (x, 1)) == CONST_INT\n \t  && INTVAL (XEXP (x, 1)) < 0)\n \t{\n-\t  fprintf (file, ASM_OPEN_PAREN);\n+\t  fprintf (file, targetm.asm_out.open_paren);\n \t  output_addr_const_pdp11 (file, XEXP (x, 1));\n-\t  fprintf (file, ASM_CLOSE_PAREN);\n+\t  fprintf (file, targetm.asm_out.close_paren);\n \t}\n       else\n \toutput_addr_const_pdp11 (file, XEXP (x, 1));"}, {"sha": "75e0cd6bb1ca9c2fb6bd36acc64bf1f8236d6443", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1183,12 +1183,6 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"[\"\n-#define ASM_CLOSE_PAREN \"]\"\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.\n@@ -1372,4 +1366,3 @@ JMP\tFUNCTION\t0x0058  0x0000 <- FUNCTION\n \n \n #define COMPARE_FLAG_MODE HImode\n-"}, {"sha": "83c9b3e66d50d125f3551cacf8386d1d9986500e", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1239,10 +1239,6 @@ do { char dstr[30];                                     \\\n   assemble_name ((FILE), (NAME)),                       \\\n   fprintf ((FILE), \",%d\\n\", (SIZE)))\n \n-/* The assembler's parentheses characters.  */\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* We don't want the default switch handling.  */\n #undef ASM_OUTPUT_BEFORE_CASE_LABEL\n #undef ASM_OUTPUT_CASE_LABEL"}, {"sha": "4f920cc574d8552e413a33624a639fc7379b755a", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1519,12 +1519,6 @@ struct rt_cargs {int gregs, fregs; };\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */"}, {"sha": "6464aa2c36efed284e410a7eddaa5cb06efa15d8", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -2571,12 +2571,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Pick up the return address upon entry to a procedure. Used for\n    dwarf2 unwind information.  This also enables the table driven\n    mechanism.  */"}, {"sha": "f72c07c9fbe47f0cb578604ed724012c42b913a4", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -2161,10 +2161,6 @@ do { char dstr[30];\t\t\t\t\t\\\n ( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n   fprintf ((FILE), \",%d\\n\", (SIZE)))\n-\n-/* The assembler's parentheses characters.  */\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n \f\n /* A C statement to be executed just prior to the output of\n    assembler code for INSN, to modify the extracted operands so"}, {"sha": "b107236706b21d1f1c230ac338c02e25ddc9662d", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -3221,12 +3221,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   fprintf (FILE, \"\\t or\\t%%g1, %%g0, %%o7\\n\");\t\t\t\t\\\n } while (0)\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n #define PRINT_OPERAND_PUNCT_VALID_P(CHAR) \\\n   ((CHAR) == '#' || (CHAR) == '*' || (CHAR) == '^' || (CHAR) == '(' || (CHAR) == '_')\n "}, {"sha": "604a7686ce3ca333d29ac5c8a12a9a77c8fe7890", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1290,12 +1290,6 @@ do { char dstr[30];\t\t\t\t\t\\\n #define ASM_OUTPUT_BYTE(FILE, VALUE)  \\\n   fprintf (FILE, \"\\t.byte 0x%x\\n\", (VALUE))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* This says how to output the assembler to define a global\n    uninitialized but not common symbol.  */\n "}, {"sha": "286822eb06b514e088709d4a46ed792f28f23858", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -1228,12 +1228,6 @@ do {\t\t\t\t\t\t\\\n   fprintf (FILE, \"+2\\n\");\t\t\t\\\n } while (0)\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;\n    if `%z3' was used to print operand 3, then CODE is 'z'."}, {"sha": "66f01f9b9b75077413824aada4252a9c00756e24", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -919,12 +919,6 @@ do {\t\t\t\t\t\t\t\\\n \n #define ASM_OUTPUT_IDENT(FILE, NAME) fprintf (FILE, \"\\t.ident \\\"%s\\\"\\n\", NAME)\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null. */"}, {"sha": "f1073aa5db384eba8a8a955eaac3aa2645216ce8", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -2900,25 +2900,27 @@ is to be used, and simple moves to @code{EH_RETURN_STACKADJ_RTX} and\n @code{EH_RETURN_HANDLER_RTX} are not sufficient.\n \n @cindex @code{prologue} instruction pattern\n+@anchor{prologue instruction pattern}\n @item @samp{prologue}\n This pattern, if defined, emits RTL for entry to a function.  The function\n entry is responsible for setting up the stack frame, initializing the frame\n pointer register, saving callee saved registers, etc.\n \n Using a prologue pattern is generally preferred over defining\n-@code{FUNCTION_PROLOGUE} to emit assembly code for the prologue.\n+@code{TARGET_ASM_FUNCTION_PROLOGUE} to emit assembly code for the prologue.\n \n The @code{prologue} pattern is particularly useful for targets which perform\n instruction scheduling.\n \n @cindex @code{epilogue} instruction pattern\n+@anchor{epilogue instruction pattern}\n @item @samp{epilogue}\n This pattern, if defined, emits RTL for exit from a function.  The function\n exit is responsible for deallocating the stack frame, restoring callee saved\n registers and emitting the return instruction.\n \n Using an epilogue pattern is generally preferred over defining\n-@code{FUNCTION_EPILOGUE} to emit assembly code for the prologue.\n+@code{TARGET_ASM_FUNCTION_EPILOGUE} to emit assembly code for the epilogue.\n \n The @code{epilogue} pattern is particularly useful for targets which perform\n instruction scheduling or which have delay slots for their return instruction."}, {"sha": "1677ffd7b985a6d429a184a3f93b42f1f34c0fd0", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -3766,6 +3766,20 @@ or by a debugger, there is no reason why the stack layout used by GCC\n need agree with that used by other compilers for a machine.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_ASM_FUNCTION_END_PROLOGUE (FILE *@var{file})\n+If defined, a function that outputs assembler code at the end of a\n+prologue.  This should be used when the function prologue is being\n+emitted as RTL, and you have some extra assembler that needs to be\n+emitted.  @xref{prologue instruction pattern}.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} void TARGET_ASM_FUNCTION_BEGIN_EPILOGUE (FILE *@var{file})\n+If defined, a function that outputs assembler code at the start of an\n+epilogue.  This should be used when the function epilogue is being\n+emitted as RTL, and you have some extra assembler that needs to be\n+emitted.  @xref{epilogue instruction pattern}.\n+@end deftypefn\n+\n @deftypefn {Target Hook} void TARGET_ASM_FUNCTION_EPILOGUE (FILE *@var{file}, HOST_WIDE_INT @var{size})\n If defined, a function that outputs the assembler code for exit from a\n function.  The epilogue is responsible for restoring the saved\n@@ -5965,22 +5979,14 @@ used as a logical line separator by the assembler.\n \n If you do not define this macro, the default is that only\n the character @samp{;} is treated as a logical line separator.\n-\n-\n-@findex ASM_OPEN_PAREN\n-@findex ASM_CLOSE_PAREN\n-@item ASM_OPEN_PAREN\n-@itemx ASM_CLOSE_PAREN\n-These macros are defined as C string constants, describing the syntax\n-in the assembler for grouping arithmetic expressions.  The following\n-definitions are correct for most assemblers:\n-\n-@example\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-@end example\n @end table\n \n+@deftypevar {Target Hook} {const char *} TARGET_ASM_OPEN_PAREN\n+@deftypevar {Target Hook} {const char *} TARGET_ASM_CLOSE_PAREN\n+These target hooks are C string constants, describing the syntax in the\n+assembler for grouping arithmetic expressions.  If not overridden, they\n+default to normal parentheses, which is correct for most assemblers.\n+\n   These macros are provided by @file{real.h} for writing the definitions\n of @code{ASM_OUTPUT_DOUBLE} and the like:\n "}, {"sha": "4efbfcbef23f55672b98314e052b6aef57f7bedd", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -3664,9 +3664,9 @@ output_addr_const (file, x)\n \t   && INTVAL (XEXP (x, 1)) < 0)\n \t  || GET_CODE (XEXP (x, 1)) != CONST_INT)\n \t{\n-\t  fprintf (file, \"%s\", ASM_OPEN_PAREN);\n+\t  fputs (targetm.asm_out.open_paren, file);\n \t  output_addr_const (file, XEXP (x, 1));\n-\t  fprintf (file, \"%s\", ASM_CLOSE_PAREN);\n+\t  fputs (targetm.asm_out.close_paren, file);\n \t}\n       else\n \toutput_addr_const (file, XEXP (x, 1));"}, {"sha": "ca24c5f8753c58c8265fd60deff7f4f8037f3d8f", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -26,12 +26,16 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    even if they do nothing.  */\n \n /* Assembler output.  */\n+#define TARGET_ASM_OPEN_PAREN \"(\"\n+#define TARGET_ASM_CLOSE_PAREN \")\"\n #define TARGET_ASM_FUNCTION_PROLOGUE default_function_pro_epilogue\n #define TARGET_ASM_FUNCTION_EPILOGUE default_function_pro_epilogue\n #define TARGET_ASM_FUNCTION_END_PROLOGUE no_asm_to_stream\n #define TARGET_ASM_FUNCTION_BEGIN_EPILOGUE no_asm_to_stream\n \n-#define TARGET_ASM_OUT {TARGET_ASM_FUNCTION_PROLOGUE,\t\t\\\n+#define TARGET_ASM_OUT {TARGET_ASM_OPEN_PAREN,\t\t\t\\\n+\t\t\tTARGET_ASM_CLOSE_PAREN,\t\t\t\\\n+\t\t\tTARGET_ASM_FUNCTION_PROLOGUE,\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_END_PROLOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_BEGIN_EPILOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_EPILOGUE}"}, {"sha": "126147d46b1448f68f2815e5fb97ecbbda45d2fd", "filename": "gcc/target.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b53c33a29e8a50032a3d7b915cf1a7c0519670/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=17b53c33a29e8a50032a3d7b915cf1a7c0519670", "patch": "@@ -20,7 +20,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n  what you give them.   Help stamp out software-hoarding!  */\n \n /* This file contains a data structure that describes a GCC target.\n-   At present, it is incomplete, but in future it should grow to\n+   At present it is incomplete, but in future it should grow to\n    contain most or all target machine and target O/S specific\n    information.\n \n@@ -38,17 +38,20 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    struct gcc_target targetm = TARGET_INITIALIZER;\n \n    Doing things this way allows us to bring together everything that\n-   defines a target to GCC.  By supplying a default that is\n-   appropriate to most targets, we can easily add new items without\n-   needing to edit dozens of target configuration files.  It should\n-   also allow us to gradually reduce the amount of conditional\n-   compilation that is scattered throughout GCC.  */\n+   defines a GCC target.  By supplying a default that is appropriate\n+   to most targets, we can easily add new items without needing to\n+   edit dozens of target configuration files.  It should also allow us\n+   to gradually reduce the amount of conditional compilation that is\n+   scattered throughout GCC.  */\n \n struct gcc_target\n {\n   /* Functions that output assembler for the target.  */\n   struct asm_out\n   {\n+    /* Opening and closing parentheses for asm expression grouping.  */\n+    const char *open_paren, *close_paren;\n+\n     /* Output the assembler code for entry to a function.  */\n     void (* function_prologue) PARAMS ((FILE *, HOST_WIDE_INT));\n "}]}