{"sha": "6b958ee0fd0e1b2a2b22784ffbe531ed74358a22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI5NThlZTBmZDBlMWIyYTJiMjI3ODRmZmJlNTMxZWQ3NDM1OGEyMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-08-21T20:23:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-08-25T02:43:39Z"}, "message": "c++: Emit as-base 'tor symbols for final class.  [PR95428]\n\nFor PR70462 I stopped emitting the as-base constructor and destructor\nvariants for final classes, because they can never be called.  Except that\nit turns out that clang calls base variants from complete variants, even for\nclasses with virtual bases, and in some cases inlines them such that the\ncalls to the base variant are exposed.  So we need to continue to emit the\nas-base symbols, even though they're unreachable by G++-compiled code.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95428\n\t* optimize.c (populate_clone_array): Revert PR70462 change.\n\t(maybe_clone_body): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/other/final8.C: Adjust expected output.", "tree": {"sha": "5a5489ac95c1e2eaa04e9c2ef06dc58a01cbead8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a5489ac95c1e2eaa04e9c2ef06dc58a01cbead8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b958ee0fd0e1b2a2b22784ffbe531ed74358a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b958ee0fd0e1b2a2b22784ffbe531ed74358a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b958ee0fd0e1b2a2b22784ffbe531ed74358a22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b958ee0fd0e1b2a2b22784ffbe531ed74358a22/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b24d30bbf7496986fee3a7f201b69ba973d3b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b24d30bbf7496986fee3a7f201b69ba973d3b0"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "00621d636bf535df62a21030d2cda98c6d61a0dd", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b958ee0fd0e1b2a2b22784ffbe531ed74358a22/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b958ee0fd0e1b2a2b22784ffbe531ed74358a22/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=6b958ee0fd0e1b2a2b22784ffbe531ed74358a22", "patch": "@@ -244,19 +244,13 @@ populate_clone_array (tree fn, tree *fns)\n   fns[1] = NULL_TREE;\n   fns[2] = NULL_TREE;\n \n-  tree ctx = DECL_CONTEXT (fn);\n-\n   FOR_EACH_CLONE (clone, fn)\n     if (DECL_NAME (clone) == complete_dtor_identifier\n \t|| DECL_NAME (clone) == complete_ctor_identifier)\n       fns[1] = clone;\n     else if (DECL_NAME (clone) == base_dtor_identifier\n \t     || DECL_NAME (clone) == base_ctor_identifier)\n-      {\n-\t/* We don't need to define the base variants for a final class.  */\n-\tif (!CLASSTYPE_FINAL (ctx))\n-\t  fns[0] = clone;\n-      }\n+      fns[0] = clone;\n     else if (DECL_NAME (clone) == deleting_dtor_identifier)\n       fns[2] = clone;\n     else\n@@ -481,7 +475,7 @@ maybe_clone_body (tree fn)\n \n   /* Remember if we can't have multiple clones for some reason.  We need to\n      check this before we remap local static initializers in clone_body.  */\n-  if (!tree_versionable_function_p (fn) && fns[0] && fns[1])\n+  if (!tree_versionable_function_p (fn))\n     need_alias = true;\n \n   /* We know that any clones immediately follow FN in the TYPE_FIELDS"}, {"sha": "67c8711235372ecf36881fd23a13966fb183768f", "filename": "gcc/testsuite/g++.dg/other/final8.C", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b958ee0fd0e1b2a2b22784ffbe531ed74358a22/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b958ee0fd0e1b2a2b22784ffbe531ed74358a22/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffinal8.C?ref=6b958ee0fd0e1b2a2b22784ffbe531ed74358a22", "patch": "@@ -1,6 +1,10 @@\n+// PR c++/70462\n+// PR c++/95428\n // { dg-do compile { target c++11 } }\n-// { dg-final { scan-assembler-not \"_ZN1BC2Ev\" } }\n-// { dg-final { scan-assembler-not \"_ZN1BD2Ev\" } }\n+// { dg-final { scan-assembler \"_ZN1BC1Ev\" } }\n+// { dg-final { scan-assembler \"_ZN1BC2Ev\" } }\n+// { dg-final { scan-assembler \"_ZN1BD2Ev\" } }\n+// { dg-final { scan-assembler \"_ZN1BD1Ev\" } }\n \n struct A { int i; A(); virtual ~A() = 0; };\n struct B final: public virtual A { int j; B(); ~B(); };"}]}