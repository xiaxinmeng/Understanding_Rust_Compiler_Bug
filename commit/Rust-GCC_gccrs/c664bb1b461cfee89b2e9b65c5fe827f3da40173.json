{"sha": "c664bb1b461cfee89b2e9b65c5fe827f3da40173", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY2NGJiMWI0NjFjZmVlODliMmU5YjY1YzVmZTgyN2YzZGE0MDE3Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-09-07T09:34:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-09-07T09:34:36Z"}, "message": "fpu-387.h: Include cpuid.h.\n\n\t* config/fpu-387.h: Include cpuid.h.\n\t(set_fpu): Use __get_cpuid to check for SSE.\n\nFrom-SVN: r128234", "tree": {"sha": "c3dbe04692829d5d6c7aa612624f074c72b9b5ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3dbe04692829d5d6c7aa612624f074c72b9b5ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c664bb1b461cfee89b2e9b65c5fe827f3da40173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c664bb1b461cfee89b2e9b65c5fe827f3da40173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c664bb1b461cfee89b2e9b65c5fe827f3da40173", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c664bb1b461cfee89b2e9b65c5fe827f3da40173/comments", "author": null, "committer": null, "parents": [{"sha": "7ab6a03bf54b50672cd941d781cfa087e305845e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ab6a03bf54b50672cd941d781cfa087e305845e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ab6a03bf54b50672cd941d781cfa087e305845e"}], "stats": {"total": 123, "additions": 60, "deletions": 63}, "files": [{"sha": "3042685c76a251d1efb128e69ae8270a5b73beee", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c664bb1b461cfee89b2e9b65c5fe827f3da40173/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c664bb1b461cfee89b2e9b65c5fe827f3da40173/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c664bb1b461cfee89b2e9b65c5fe827f3da40173", "patch": "@@ -1,3 +1,8 @@\n+2007-09-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/fpu-387.h: Include cpuid.h.\n+\t(set_fpu): Use __get_cpuid to check for SSE.\n+\n 2007-09-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/33298\n@@ -15,9 +20,9 @@\n 2007-09-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/33253\n-\t* io/write.c (nml_write_obj): Set the delimiter correctly before calling\n-\twrite_character. (namelist_write): Clean up the code a little and add\n-\tcomments to clarify what its doing.\n+\t* io/write.c (nml_write_obj): Set the delimiter correctly before\n+\tcalling write_character. (namelist_write): Clean up the code a little\n+\tand add comments to clarify what its doing.\n \n 2007-09-04  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n@@ -29,8 +34,8 @@\n \t(output_float): Delete. (write_float): Delete.\n \t* io/write_float.def (calculate_sign): Added.\n \t(output_float): Refactored to be independent of kind and added to this\n-\tfile for inclusion. (write_infnan): New function to write \"Infinite\" or\n-\t\"NaN\" depending on flags passed, independent of kind.\n+\tfile for inclusion. (write_infnan): New function to write \"Infinite\"\n+\tor \"NaN\" depending on flags passed, independent of kind.\n \t(CALCULATE_EXP): New macro to build kind specific functions. Use it.\n \t(OUTPUT_FLOAT_FMT_G): New macro, likewise. Use it.\n \t(DTOA, DTOAL): Macros to implement \"decimal to ascii\".\n@@ -41,8 +46,8 @@\n 2007-09-03  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/33253\n-\t* io/list_read.c (read_character): Use DELIM_APOSTROPHE and DELIM_QUOTE\n-\tin check of first character in string. \n+\t* io/list_read.c (read_character): Use DELIM_APOSTROPHE and\n+\tDELIM_QUOTE in check of first character in string. \n \n 2007-09-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n@@ -503,8 +508,8 @@\n \t(output_float): Delete. (write_float): Delete.\n \t* io/write_float.def (calculate_sign): Added.\n \t(output_float): Refactored to be independent of kind and added to this\n-\tfile for inclusion. (write_infnan): New function to write \"Infinite\" or\n-\t\"NaN\" depending on flags passed, independent of kind.\n+\tfile for inclusion. (write_infnan): New function to write \"Infinite\"\n+\tor \"NaN\" depending on flags passed, independent of kind.\n \t(CALCULATE_EXP): New macro to build kind specific functions. Use it.\n \t(OUTPUT_FLOAT_FMT_G): New macro, likewise. Use it.\n \t(DTOA, DTOAL): Macros to implement \"decimal to ascii\".\n@@ -934,7 +939,8 @@\n 2007-07-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/32752\n-\t* io/unix.c (unix_stream): Move buffer pointer adjacent to small_buffer.\n+\t* io/unix.c (unix_stream): Move buffer pointer adjacent to\n+\tsmall_buffer.\n \t* io/transfer.c (formatted_transfer_scalar): If stream I/O, set\n \tbytes_used to zero. Fix off by one error in calculation of pos and\n \tskips. Eliminate duplicate pending_spaces check.\n@@ -950,8 +956,8 @@\n \tPR libgfortran/32702\n \t* io/unix.c (unix_stream): Restore buffer pointer and small_buffer.\n \t(fd_alloc): If the number of bytes needed is greater than the default\n-\tBUFFER_SIZE, allocate a new buffer large enough.  Free the old buffer if\n-\tnecessary. (fd_sfree): Restore use of buffer pointer.\n+\tBUFFER_SIZE, allocate a new buffer large enough.  Free the old buffer\n+\tif necessary. (fd_sfree): Restore use of buffer pointer.\n \t(fd_close): Likewise. (fd_open): Likewise.\n \t(init_error_stream): Likewise.\n \t\n@@ -973,8 +979,8 @@\n 2007-07-08  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/32678\n-\t* io/transfer.c (formatted_transfer_scalar): Don't allow pending_spaces\n-\tto go negative.\n+\t* io/transfer.c (formatted_transfer_scalar): Don't allow\n+\tpending_spaces to go negative.\n \n 2007-07-08  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n@@ -1149,8 +1155,9 @@\n \t\n 2007-05-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n-\t* io/transfer.c (unformatted_read): Use size from front end eliminating\n-\tuse of size_from_real_kind. (unformatted_write): Ditto.\n+\t* io/transfer.c (unformatted_read): Use size from front end\n+\teliminating use of size_from_real_kind.\n+\t(unformatted_write): Ditto.\n \n 2007-05-23  Steve Ellcey  <sje@cup.hp.com>\n \n@@ -1227,8 +1234,8 @@\n \t_gfortran_runtime_error_at.\n \t* libgfortran.h: Add comment to reference error codes in front end.\n \t(library_start): Locate prototype with library_end macro and add\n-\ta new comment.  Add prototype for runtime_error_at. Export prototype for\n-\tgenerate_error.\n+\ta new comment.  Add prototype for runtime_error_at. Export prototype\n+\tfor generate_error.\n \t* io/lock.c (library_start): Fix check for error condition.\n \t* io/transfer.c (data_transfer_init): Add library check.\n \n@@ -1569,15 +1576,16 @@\n 2007-03-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/31052\n-\t* io/transfer.c (next_record_r): Do not call test_endfile if in namelist\n-\tmode.\n+\t* io/transfer.c (next_record_r): Do not call test_endfile if in\n+\tnamelist mode.\n \n 2007-03-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/31199\n \t* io/io.h: Add saved_pos to gfc_unit structure.\n \t* io/open.c (new_unit): Initialize saved_pos.\n-\t* io/transfer.c (data_transfer_init): Set max_pos to value in saved_pos.\n+\t* io/transfer.c (data_transfer_init): Set max_pos to value in\n+\tsaved_pos.\n \t(next_record_w): Fix whitespace.\n \t(finalze_transfer): Calculate max_pos for ADVANCE=\"no\" and save it for\n \tlater use.  If not ADVANCE=\"no\" set saved_pos to zero.\n@@ -1592,8 +1600,8 @@\n \n \tPR libfortran/31052\n \t* file_pos.c: Update Copyright year.\n-\t* io/open.c (test_endfile): Restore test_endfile to fix SPEC regression.\n-\tUpdate Copyright year.\n+\t* io/open.c (test_endfile): Restore test_endfile to fix SPEC\n+\tregression.  Update Copyright year.\n \t* io/io.h: Same.\n \t* io/unix.c (is_special): Add missing type for this function.\n \tUpdate Copyright year.\n@@ -1649,8 +1657,8 @@\n 2007-03-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/31051\n-\t* io/transfer.c (formatted_transfer_scalar): Adjust position for pending\n-\tspaces when in writing mode.  Clean up some formatting.\n+\t* io/transfer.c (formatted_transfer_scalar): Adjust position for\n+\tpending spaces when in writing mode.  Clean up some formatting.\n \n 2007-03-14  Thomas Koenig  <Thomas.Koenig@online.de>\n \n@@ -2126,8 +2134,8 @@\n \ts->file_length == -1.\n \t(fd_alloc_w_at): Do not adjust file_length if file is not seekable.\n \t(fd_seek): If not seekable, just return success.\n-\t(fd_truncate): If not seekable, no need to truncate.  Return failure if\n-\tseek fails and the stream is not a pipe.\n+\t(fd_truncate): If not seekable, no need to truncate.  Return failure\n+\tif seek fails and the stream is not a pipe.\n \t(fd_to_stream): Make test for non-seekable file more robust.\n \n 2007-01-01  Steven G. Kargl  <kargls@comcast.net>"}, {"sha": "f96f7156619c4ffdb123bf47b364709ce47793de", "filename": "libgfortran/config/fpu-387.h", "status": "modified", "additions": 25, "deletions": 36, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c664bb1b461cfee89b2e9b65c5fe827f3da40173/libgfortran%2Fconfig%2Ffpu-387.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c664bb1b461cfee89b2e9b65c5fe827f3da40173/libgfortran%2Fconfig%2Ffpu-387.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-387.h?ref=c664bb1b461cfee89b2e9b65c5fe827f3da40173", "patch": "@@ -28,79 +28,68 @@ License along with libgfortran; see the file COPYING.  If not,\n write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n Boston, MA 02110-1301, USA.  */\n \n-#define SSE\t(1 << 25)\n+#ifndef __x86_64__\n+#include \"cpuid.h\"\n+#endif\n \n static int\n has_sse (void)\n {\n-#ifdef __x86_64__\n-  return 1;\n-#else\n+#ifndef __x86_64__\n   unsigned int eax, ebx, ecx, edx;\n \n-  /* See if we can use cpuid.  */\n-  asm volatile (\"pushfl; pushfl; popl %0; movl %0,%1; xorl %2,%0;\"\n-\t\t\"pushl %0; popfl; pushfl; popl %0; popfl\"\n-\t\t: \"=&r\" (eax), \"=&r\" (ebx)\n-\t\t: \"i\" (0x00200000));\n-\n-  if (((eax ^ ebx) & 0x00200000) == 0)\n-    return 0;\n-\n-  /* Check the highest input value for eax.  */\n-  asm volatile (\"xchgl %%ebx, %1; cpuid; xchgl %%ebx, %1\"\n-\t\t: \"=a\" (eax), \"=r\" (ebx), \"=c\" (ecx), \"=d\" (edx)\n-\t\t: \"0\" (0));\n-\n-  if (eax == 0)\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n     return 0;\n \n-  asm volatile (\"xchgl %%ebx, %1; cpuid; xchgl %%ebx, %1\"\n-\t\t: \"=a\" (eax), \"=r\" (ebx), \"=c\" (ecx), \"=d\" (edx)\n-\t\t: \"0\" (1));\n-\n-  if (edx & SSE)\n-    return 1;\n-\n-  return 0;\n+  return edx & bit_SSE;\n+#else\n+  return 1;\n #endif\n }\n \n-void set_fpu (void)\n-{\n-  unsigned short cw;\n-  unsigned int cw_sse;\n-\n-  /* i387 -- see linux <fpu_control.h> header file for details.  */\n+/* i387 -- see linux <fpu_control.h> header file for details.  */\n #define _FPU_MASK_IM  0x01\n #define _FPU_MASK_DM  0x02\n #define _FPU_MASK_ZM  0x04\n #define _FPU_MASK_OM  0x08\n #define _FPU_MASK_UM  0x10\n #define _FPU_MASK_PM  0x20\n+\n+void set_fpu (void)\n+{\n+  unsigned short cw;\n+\n   asm volatile (\"fnstcw %0\" : \"=m\" (cw));\n-  cw |= _FPU_MASK_IM | _FPU_MASK_DM | _FPU_MASK_ZM | _FPU_MASK_OM | _FPU_MASK_UM | _FPU_MASK_PM;\n+\n+  cw |= (_FPU_MASK_IM | _FPU_MASK_DM | _FPU_MASK_ZM | _FPU_MASK_OM\n+\t | _FPU_MASK_UM | _FPU_MASK_PM);\n+\n   if (options.fpe & GFC_FPE_INVALID) cw &= ~_FPU_MASK_IM;\n   if (options.fpe & GFC_FPE_DENORMAL) cw &= ~_FPU_MASK_DM;\n   if (options.fpe & GFC_FPE_ZERO) cw &= ~_FPU_MASK_ZM;\n   if (options.fpe & GFC_FPE_OVERFLOW) cw &= ~_FPU_MASK_OM;\n   if (options.fpe & GFC_FPE_UNDERFLOW) cw &= ~_FPU_MASK_UM;\n   if (options.fpe & GFC_FPE_PRECISION) cw &= ~_FPU_MASK_PM;\n+\n   asm volatile (\"fldcw %0\" : : \"m\" (cw));\n \n   if (has_sse())\n     {\n-      /* SSE */\n+      unsigned int cw_sse;\n+\n       asm volatile (\"stmxcsr %0\" : \"=m\" (cw_sse));\n-      cw_sse &= 0xFFFF0000;\n+\n+      cw_sse &= 0xffff0000;\n       cw_sse |= (_FPU_MASK_IM | _FPU_MASK_DM | _FPU_MASK_ZM | _FPU_MASK_OM\n \t\t | _FPU_MASK_UM | _FPU_MASK_PM ) << 7;\n+\n       if (options.fpe & GFC_FPE_INVALID) cw_sse &= ~(_FPU_MASK_IM << 7);\n       if (options.fpe & GFC_FPE_DENORMAL) cw_sse &= ~(_FPU_MASK_DM << 7);\n       if (options.fpe & GFC_FPE_ZERO) cw_sse &= ~(_FPU_MASK_ZM << 7);\n       if (options.fpe & GFC_FPE_OVERFLOW) cw_sse &= ~(_FPU_MASK_OM << 7);\n       if (options.fpe & GFC_FPE_UNDERFLOW) cw_sse &= ~(_FPU_MASK_UM << 7);\n       if (options.fpe & GFC_FPE_PRECISION) cw_sse &= ~(_FPU_MASK_PM << 7);\n+\n       asm volatile (\"ldmxcsr %0\" : : \"m\" (cw_sse));\n     }\n }"}]}