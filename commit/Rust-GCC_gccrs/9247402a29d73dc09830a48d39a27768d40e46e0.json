{"sha": "9247402a29d73dc09830a48d39a27768d40e46e0", "node_id": "C_kwDOANBUbNoAKDkyNDc0MDJhMjlkNzNkYzA5ODMwYTQ4ZDM5YTI3NzY4ZDQwZTQ2ZTA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-22T00:57:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-22T23:34:26Z"}, "message": "libstdc++: Add helper function in <format>\n\nAdd a new __format::__write_padded_as_spec helper to remove duplicated\ncode in formatter specializations.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/format (__format::__write_padded_as_spec): New\n\tfunction.\n\t(__format::__formatter_str, __format::__formatter_int::format)\n\t(formatter<const void*, charT>): Use it.", "tree": {"sha": "62c1dc309ca6e27bd95eace124ea54276a347805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62c1dc309ca6e27bd95eace124ea54276a347805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9247402a29d73dc09830a48d39a27768d40e46e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9247402a29d73dc09830a48d39a27768d40e46e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9247402a29d73dc09830a48d39a27768d40e46e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9247402a29d73dc09830a48d39a27768d40e46e0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d33a250f708e88c6cb447b6d0a202590fbc0b4b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33a250f708e88c6cb447b6d0a202590fbc0b4b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33a250f708e88c6cb447b6d0a202590fbc0b4b6"}], "stats": {"total": 75, "additions": 34, "deletions": 41}, "files": [{"sha": "98421e8c123e4808f7eb52241a87e12aa5b177bd", "filename": "libstdc++-v3/include/std/format", "status": "modified", "additions": 34, "deletions": 41, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9247402a29d73dc09830a48d39a27768d40e46e0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9247402a29d73dc09830a48d39a27768d40e46e0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fformat?ref=9247402a29d73dc09830a48d39a27768d40e46e0", "patch": "@@ -597,6 +597,7 @@ namespace __format\n       return __dest;\n     }\n \n+  // Write STR to OUT (and do so efficiently if OUT is a _Sink_iter).\n   template<typename _Out, typename _CharT>\n     requires output_iterator<_Out, const _CharT&>\n     inline _Out\n@@ -668,6 +669,30 @@ namespace __format\n       return __out;\n     }\n \n+  // Write STR to OUT, with alignment and padding as determined by SPEC.\n+  // pre: __spec._M_align != _Align_default || __align != _Align_default\n+  template<typename _CharT, typename _Out>\n+    _Out\n+    __write_padded_as_spec(basic_string_view<type_identity_t<_CharT>> __str,\n+\t\t\t   size_t __estimated_width,\n+\t\t\t   basic_format_context<_Out, _CharT>& __fc,\n+\t\t\t   const _Spec<_CharT>& __spec,\n+\t\t\t   _Align __align = _Align_left)\n+    {\n+      size_t __width = __spec._M_get_width(__fc);\n+\n+      if (__width <= __estimated_width)\n+\treturn __format::__write(__fc.out(), __str);\n+\n+      const size_t __nfill = __width - __estimated_width;\n+\n+      if (__spec._M_align)\n+\t__align = __spec._M_align;\n+\n+      return __format::__write_padded(__fc.out(), __str, __align, __nfill,\n+\t\t\t\t      __spec._M_fill);\n+    }\n+\n   // A lightweight optional<locale>.\n   struct _Optional_locale\n   {\n@@ -799,7 +824,7 @@ namespace __format\n       }\n \n       template<typename _Out>\n-\ttypename basic_format_context<_Out, _CharT>::iterator\n+\t_Out\n \tformat(basic_string_view<_CharT> __s,\n \t       basic_format_context<_Out, _CharT>& __fc) const\n \t{\n@@ -824,16 +849,8 @@ namespace __format\n \t\t}\n \t    }\n \n-\t  size_t __width = _M_spec._M_get_width(__fc);\n-\n-\t  if (__width <= __estimated_width)\n-\t    return __format::__write(__fc.out(), __s);\n-\n-\t  const size_t __nfill = __width - __estimated_width;\n-\t  _Align __align = _M_spec._M_align ? _M_spec._M_align : _Align_left;\n-\n-\t  return __format::__write_padded(__fc.out(), __s,\n-\t\t\t\t\t  __align, __nfill, _M_spec._M_fill);\n+\t  return __format::__write_padded_as_spec(__s, __estimated_width,\n+\t\t\t\t\t\t  __fc, _M_spec);\n \t}\n \n #if __cpp_lib_format_ranges\n@@ -1089,32 +1106,16 @@ namespace __format\n \t      __est_width = __s.size();\n \t    }\n \n-\t  return _M_format_str(__s, __est_width, __fc);\n+\t  return __format::__write_padded_as_spec(__s, __est_width, __fc,\n+\t\t\t\t\t\t  _M_spec);\n \t}\n \n       template<typename _Out>\n \ttypename basic_format_context<_Out, _CharT>::iterator\n \t_M_format_character(_CharT __c,\n \t\t      basic_format_context<_Out, _CharT>& __fc) const\n-\t{ return _M_format_str({&__c, 1u}, 1, __fc); }\n-\n-      template<typename _Out>\n-\ttypename basic_format_context<_Out, _CharT>::iterator\n-\t_M_format_str(basic_string_view<_CharT> __str, size_t __est_width,\n-\t\t      basic_format_context<_Out, _CharT>& __fc) const\n \t{\n-\t  // TODO: this is identical to last part of __formatter_str::format\n-\t  // so refactor to reuse the same code.\n-\n-\t  size_t __width = _M_spec._M_get_width(__fc);\n-\n-\t  if (__width <= __est_width)\n-\t    return __format::__write(__fc.out(), __str);\n-\n-\t  size_t __nfill = __width - __est_width;\n-\t  _Align __align = _M_spec._M_align ? _M_spec._M_align : _Align_left;\n-\t  return __format::__write_padded(__fc.out(), __str,\n-\t\t\t\t\t  __align, __nfill, _M_spec._M_fill);\n+\t  return __format::__write_padded_as_spec({&__c, 1u}, 1, __fc, _M_spec);\n \t}\n \n       template<typename _Int>\n@@ -2135,20 +2136,12 @@ namespace __format\n \t      __str = wstring_view(__p, __n);\n \t    }\n \n-\t  size_t __width = _M_spec._M_get_width(__fc);\n-\n-\t  if (__width <= (size_t)__n)\n-\t    return __format::__write(__fc.out(), __str);\n-\n-\t  size_t __nfill = __width - __n;\n-\t  __format::_Align __align\n-\t    = _M_spec._M_align ? _M_spec._M_align : __format::_Align_right;\n-\t  return __format::__write_padded(__fc.out(), __str,\n-\t\t\t\t\t  __align, __nfill, _M_spec._M_fill);\n+\t  return __format::__write_padded_as_spec(__str, __n, __fc, _M_spec,\n+\t\t\t\t\t\t  __format::_Align_right);\n \t}\n \n     private:\n-      __format::_Spec<_CharT> _M_spec{}; // XXX don't need full spec?\n+      __format::_Spec<_CharT> _M_spec{};\n     };\n \n   template<__format::__char _CharT>"}]}