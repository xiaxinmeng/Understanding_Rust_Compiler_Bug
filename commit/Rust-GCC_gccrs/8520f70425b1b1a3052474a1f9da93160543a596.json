{"sha": "8520f70425b1b1a3052474a1f9da93160543a596", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyMGY3MDQyNWIxYjFhMzA1MjQ3NGExZjlkYTkzMTYwNTQzYTU5Ng==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2003-04-18T02:03:52Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2003-04-18T02:03:52Z"}, "message": "testsuite_flags.in (PCHFLAGS): Find PCH in new home.\n\n\t* testsuite_flags.in (PCHFLAGS): Find PCH in new home.\n\t* include/Makefile.am (pch_input): Find in ${target_builddir}.\n\t(pch_output): Rename to...\n\t(pch_output_builddir): ..this.  Find in ${target_builddir}.\n\t(pch_source): Tweak.\n\t(pch_build): Key off a built file.\n\t(pch_output rule): Rename to...\n\t(pch_input rule): ...this.  Produce ${pch_output_builddir}\n\tinstead of ${pch_output}.\n\t(install-pch rule): Install ${pch_output_builddir}.\n\t* include/Makefile.in: Regenerated.\n\nFrom-SVN: r65767", "tree": {"sha": "e511076a338cfcc0df51898e73a5969f6a5e0781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e511076a338cfcc0df51898e73a5969f6a5e0781"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8520f70425b1b1a3052474a1f9da93160543a596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8520f70425b1b1a3052474a1f9da93160543a596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8520f70425b1b1a3052474a1f9da93160543a596", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8520f70425b1b1a3052474a1f9da93160543a596/comments", "author": null, "committer": null, "parents": [{"sha": "4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3eb89ac4bc25e9333d6be594f9e30fcd70b08f"}], "stats": {"total": 357, "additions": 65, "deletions": 292}, "files": [{"sha": "4f039bb08905b54edd499ca3f942664226058bc6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8520f70425b1b1a3052474a1f9da93160543a596/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8520f70425b1b1a3052474a1f9da93160543a596/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8520f70425b1b1a3052474a1f9da93160543a596", "patch": "@@ -1,3 +1,17 @@\n+2003-04-17  Loren J. Rittle  <ljrittle@acm.org>\n+\n+\t* testsuite_flags.in (PCHFLAGS): Find PCH in new home.\n+\t* include/Makefile.am (pch_input): Find in ${target_builddir}.\n+\t(pch_output): Rename to...\n+\t(pch_output_builddir): ..this.  Find in ${target_builddir}.\n+\t(pch_source): Tweak.\n+\t(pch_build): Key off a built file.\n+\t(pch_output rule): Rename to...\n+\t(pch_input rule): ...this.  Produce ${pch_output_builddir}\n+\tinstead of ${pch_output}.\n+\t(install-pch rule): Install ${pch_output_builddir}.\n+\t* include/Makefile.in: Regenerated.\n+\n 2003-04-17  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* include/std/std_streambuf.h (setp): _M_out_lim, being"}, {"sha": "78a233c04b4ffd3c7b676c636577de729826651e", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8520f70425b1b1a3052474a1f9da93160543a596/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8520f70425b1b1a3052474a1f9da93160543a596/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=8520f70425b1b1a3052474a1f9da93160543a596", "patch": "@@ -340,12 +340,12 @@ thread_target_headers = \\\n \t${target_builddir}/gthr-posix.h \\\n \t${target_builddir}/gthr-default.h\n \n-pch_input = stdc++.h\n-pch_output = stdc++.h.gch\n-pch_source = ${glibcpp_srcdir}/include/${pch_input}\n+pch_input = ${target_builddir}/stdc++.h\n+pch_output_builddir = ${target_builddir}/stdc++.h.gch\n+pch_source = ${glibcpp_srcdir}/include/stdc++.h\n PCHFLAGS=-Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n if GLIBCPP_BUILD_PCH\n-pch_build = ${pch_output}\n+pch_build = ${pch_input}\n pch_install = install-pch\n else\n pch_build = \n@@ -500,9 +500,13 @@ ${target_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n \t    < ${toplevel_srcdir}/gcc/${glibcpp_thread_h} > $@\n \n # Build a precompiled C++ include, stdc++.h.gch.\n-${pch_output}: ${allstamped} ${target_builddir}/c++config.h ${pch_source}\n+${pch_input}: ${allstamped} ${target_builddir}/c++config.h ${pch_source}\n \ttouch ${pch_input}; \\\n-\t$(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -o ${pch_output}; \n+\tif [ ! -d \"${pch_output_builddir}\" ]; then \\\n+\t  mkdir -p ${pch_output_builddir}; \\\n+\tfi; \\\n+\t$(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -O0 -g -o ${pch_output_builddir}/O0g; \\\n+\t$(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -O2 -g -o ${pch_output_builddir}/O2g;\n \n # For robustness sake (in light of junk files or in-source\n # configuration), copy from the build or source tree to the install\n@@ -545,7 +549,9 @@ install-headers:\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${target_builddir}; done\n \n install-pch:\n-\t$(INSTALL_DATA) ${std_builddir}/${pch_output} $(DESTDIR)${gxx_include_dir}/${std_builddir}\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${pch_output_builddir}\n+\tfor file in ${pch_output_builddir}/*; do \\\n+\t  $(INSTALL_DATA) $$file $(DESTDIR)${gxx_include_dir}/${pch_output_builddir}; done\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.gch "}, {"sha": "243c22ca721ff805a29137803cb4e4bd999b0eb0", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 37, "deletions": 284, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8520f70425b1b1a3052474a1f9da93160543a596/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8520f70425b1b1a3052474a1f9da93160543a596/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=8520f70425b1b1a3052474a1f9da93160543a596", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -154,331 +154,78 @@ INCLUDES = -nostdinc++ $(GLIBCPP_INCLUDES) $(LIBSUPCXX_INCLUDES)\n # Standard C++ includes.\n std_srcdir = ${glibcpp_srcdir}/include/std\n std_builddir = .\n-std_headers = \\\n-\t${std_srcdir}/std_algorithm.h \\\n-\t${std_srcdir}/std_bitset.h \\\n-\t${std_srcdir}/std_complex.h \\\n-\t${std_srcdir}/std_deque.h \\\n-\t${std_srcdir}/std_fstream.h \\\n-\t${std_srcdir}/std_functional.h \\\n-\t${std_srcdir}/std_iomanip.h \\\n-\t${std_srcdir}/std_ios.h \\\n-\t${std_srcdir}/std_iosfwd.h \\\n-\t${std_srcdir}/std_iostream.h \\\n-\t${std_srcdir}/std_istream.h \\\n-\t${std_srcdir}/std_iterator.h \\\n-\t${std_srcdir}/std_limits.h \\\n-\t${std_srcdir}/std_list.h \\\n-\t${std_srcdir}/std_locale.h \\\n-\t${std_srcdir}/std_map.h \\\n-\t${std_srcdir}/std_memory.h \\\n-\t${std_srcdir}/std_numeric.h \\\n-\t${std_srcdir}/std_ostream.h \\\n-\t${std_srcdir}/std_queue.h \\\n-\t${std_srcdir}/std_set.h \\\n-\t${std_srcdir}/std_sstream.h \\\n-\t${std_srcdir}/std_stack.h \\\n-\t${std_srcdir}/std_stdexcept.h \\\n-\t${std_srcdir}/std_streambuf.h \\\n-\t${std_srcdir}/std_string.h \\\n-\t${std_srcdir}/std_utility.h \\\n-\t${std_srcdir}/std_valarray.h \\\n-\t${std_srcdir}/std_vector.h\n+std_headers =  \t${std_srcdir}/std_algorithm.h \t${std_srcdir}/std_bitset.h \t${std_srcdir}/std_complex.h \t${std_srcdir}/std_deque.h \t${std_srcdir}/std_fstream.h \t${std_srcdir}/std_functional.h \t${std_srcdir}/std_iomanip.h \t${std_srcdir}/std_ios.h \t${std_srcdir}/std_iosfwd.h \t${std_srcdir}/std_iostream.h \t${std_srcdir}/std_istream.h \t${std_srcdir}/std_iterator.h \t${std_srcdir}/std_limits.h \t${std_srcdir}/std_list.h \t${std_srcdir}/std_locale.h \t${std_srcdir}/std_map.h \t${std_srcdir}/std_memory.h \t${std_srcdir}/std_numeric.h \t${std_srcdir}/std_ostream.h \t${std_srcdir}/std_queue.h \t${std_srcdir}/std_set.h \t${std_srcdir}/std_sstream.h \t${std_srcdir}/std_stack.h \t${std_srcdir}/std_stdexcept.h \t${std_srcdir}/std_streambuf.h \t${std_srcdir}/std_string.h \t${std_srcdir}/std_utility.h \t${std_srcdir}/std_valarray.h \t${std_srcdir}/std_vector.h\n \n # Renamed at build time. \n-std_headers_rename = \\\n-\talgorithm \\\n-\tbitset \\\n-\tcomplex \\\n-\tdeque \\\n-\tfstream \\\n-\tfunctional \\\n-\tiomanip \\\n-\tios \\\n-\tiosfwd \\\n-\tiostream \\\n-\tistream \\\n-\titerator \\\n-\tlimits \\\n-\tlist \\\n-\tlocale \\\n-\tmap \\\n-\tmemory \\\n-\tnumeric \\\n-\tostream \\\n-\tqueue \\\n-\tset \\\n-\tsstream \\\n-\tstack \\\n-\tstdexcept \\\n-\tstreambuf \\\n-\tstring \\\n-\tutility \\\n-\tvalarray \\\n-\tvector\n+std_headers_rename =  \talgorithm \tbitset \tcomplex \tdeque \tfstream \tfunctional \tiomanip \tios \tiosfwd \tiostream \tistream \titerator \tlimits \tlist \tlocale \tmap \tmemory \tnumeric \tostream \tqueue \tset \tsstream \tstack \tstdexcept \tstreambuf \tstring \tutility \tvalarray \tvector\n \n \n bits_srcdir = ${glibcpp_srcdir}/include/bits\n bits_builddir = ./bits\n-bits_headers = \\\n-\t${bits_srcdir}/basic_ios.h \\\n-\t${bits_srcdir}/basic_ios.tcc \\\n-\t${bits_srcdir}/basic_string.h \\\n-\t${bits_srcdir}/basic_string.tcc \\\n-\t${bits_srcdir}/boost_concept_check.h \\\n-\t${bits_srcdir}/char_traits.h \\\n-\t${bits_srcdir}/codecvt.h \\\n-\t${bits_srcdir}/concept_check.h \\\n-\t${bits_srcdir}/cpp_type_traits.h \\\n-\t${bits_srcdir}/demangle.h \\\n-\t${bits_srcdir}/deque.tcc \\\n-\t${bits_srcdir}/fpos.h \\\n-\t${bits_srcdir}/fstream.tcc \\\n-\t${bits_srcdir}/functexcept.h \\\n-\t${bits_srcdir}/gslice.h \\\n-\t${bits_srcdir}/gslice_array.h \\\n-\t${bits_srcdir}/indirect_array.h \\\n-\t${bits_srcdir}/ios_base.h \\\n-\t${bits_srcdir}/istream.tcc \\\n-\t${bits_srcdir}/list.tcc \\\n-\t${bits_srcdir}/locale_classes.h \\\n-\t${bits_srcdir}/locale_facets.h \\\n-\t${bits_srcdir}/locale_facets.tcc \\\n-\t${bits_srcdir}/localefwd.h \\\n-\t${bits_srcdir}/mask_array.h \\\n-\t${bits_srcdir}/ostream.tcc \\\n-\t${bits_srcdir}/pthread_allocimpl.h \\\n-\t${bits_srcdir}/stream_iterator.h \\\n-\t${bits_srcdir}/streambuf_iterator.h \\\n-\t${bits_srcdir}/slice_array.h \\\n-\t${bits_srcdir}/sstream.tcc \\\n-\t${bits_srcdir}/stl_algo.h \\\n-\t${bits_srcdir}/stl_algobase.h \\\n-\t${bits_srcdir}/stl_alloc.h \\\n-\t${bits_srcdir}/stl_bvector.h \\\n-\t${bits_srcdir}/stl_construct.h \\\n-\t${bits_srcdir}/stl_deque.h \\\n-\t${bits_srcdir}/stl_function.h \\\n-\t${bits_srcdir}/stl_heap.h \\\n-\t${bits_srcdir}/stl_iterator.h \\\n-\t${bits_srcdir}/stl_iterator_base_funcs.h \\\n-\t${bits_srcdir}/stl_iterator_base_types.h \\\n-\t${bits_srcdir}/stl_list.h \\\n-\t${bits_srcdir}/stl_map.h \\\n-\t${bits_srcdir}/stl_multimap.h \\\n-\t${bits_srcdir}/stl_multiset.h \\\n-\t${bits_srcdir}/stl_numeric.h \\\n-\t${bits_srcdir}/stl_pair.h \\\n-\t${bits_srcdir}/stl_pthread_alloc.h \\\n-\t${bits_srcdir}/stl_queue.h \\\n-\t${bits_srcdir}/stl_raw_storage_iter.h \\\n-\t${bits_srcdir}/stl_relops.h \\\n-\t${bits_srcdir}/stl_set.h \\\n-\t${bits_srcdir}/stl_stack.h \\\n-\t${bits_srcdir}/stl_tempbuf.h \\\n-\t${bits_srcdir}/stl_threads.h \\\n-\t${bits_srcdir}/stl_tree.h \\\n-\t${bits_srcdir}/stl_uninitialized.h \\\n-\t${bits_srcdir}/stl_vector.h \\\n-\t${bits_srcdir}/streambuf.tcc \\\n-\t${bits_srcdir}/stringfwd.h \\\n-\t${bits_srcdir}/type_traits.h \\\n-\t${bits_srcdir}/valarray_array.h \\\n-\t${bits_srcdir}/valarray_array.tcc \\\n-\t${bits_srcdir}/valarray_before.h \\\n-\t${bits_srcdir}/valarray_after.h \\\n-\t${bits_srcdir}/vector.tcc\n+bits_headers =  \t${bits_srcdir}/basic_ios.h \t${bits_srcdir}/basic_ios.tcc \t${bits_srcdir}/basic_string.h \t${bits_srcdir}/basic_string.tcc \t${bits_srcdir}/boost_concept_check.h \t${bits_srcdir}/char_traits.h \t${bits_srcdir}/codecvt.h \t${bits_srcdir}/concept_check.h \t${bits_srcdir}/cpp_type_traits.h \t${bits_srcdir}/demangle.h \t${bits_srcdir}/deque.tcc \t${bits_srcdir}/fpos.h \t${bits_srcdir}/fstream.tcc \t${bits_srcdir}/functexcept.h \t${bits_srcdir}/gslice.h \t${bits_srcdir}/gslice_array.h \t${bits_srcdir}/indirect_array.h \t${bits_srcdir}/ios_base.h \t${bits_srcdir}/istream.tcc \t${bits_srcdir}/list.tcc \t${bits_srcdir}/locale_classes.h \t${bits_srcdir}/locale_facets.h \t${bits_srcdir}/locale_facets.tcc \t${bits_srcdir}/localefwd.h \t${bits_srcdir}/mask_array.h \t${bits_srcdir}/ostream.tcc \t${bits_srcdir}/pthread_allocimpl.h \t${bits_srcdir}/stream_iterator.h \t${bits_srcdir}/streambuf_iterator.h \t${bits_srcdir}/slice_array.h \t${bits_srcdir}/sstream.tcc \t${bits_srcdir}/stl_algo.h \t${bits_srcdir}/stl_algobase.h \t${bits_srcdir}/stl_alloc.h \t${bits_srcdir}/stl_bvector.h \t${bits_srcdir}/stl_construct.h \t${bits_srcdir}/stl_deque.h \t${bits_srcdir}/stl_function.h \t${bits_srcdir}/stl_heap.h \t${bits_srcdir}/stl_iterator.h \t${bits_srcdir}/stl_iterator_base_funcs.h \t${bits_srcdir}/stl_iterator_base_types.h \t${bits_srcdir}/stl_list.h \t${bits_srcdir}/stl_map.h \t${bits_srcdir}/stl_multimap.h \t${bits_srcdir}/stl_multiset.h \t${bits_srcdir}/stl_numeric.h \t${bits_srcdir}/stl_pair.h \t${bits_srcdir}/stl_pthread_alloc.h \t${bits_srcdir}/stl_queue.h \t${bits_srcdir}/stl_raw_storage_iter.h \t${bits_srcdir}/stl_relops.h \t${bits_srcdir}/stl_set.h \t${bits_srcdir}/stl_stack.h \t${bits_srcdir}/stl_tempbuf.h \t${bits_srcdir}/stl_threads.h \t${bits_srcdir}/stl_tree.h \t${bits_srcdir}/stl_uninitialized.h \t${bits_srcdir}/stl_vector.h \t${bits_srcdir}/streambuf.tcc \t${bits_srcdir}/stringfwd.h \t${bits_srcdir}/type_traits.h \t${bits_srcdir}/valarray_array.h \t${bits_srcdir}/valarray_array.tcc \t${bits_srcdir}/valarray_before.h \t${bits_srcdir}/valarray_after.h \t${bits_srcdir}/vector.tcc\n \n \n backward_srcdir = ${glibcpp_srcdir}/include/backward\n backward_builddir = ./backward\n-backward_headers = \\\n-\t${backward_srcdir}/complex.h \\\n-\t${backward_srcdir}/iomanip.h \\\n-\t${backward_srcdir}/istream.h \\\n-\t${backward_srcdir}/ostream.h \\\n-\t${backward_srcdir}/stream.h \\\n-\t${backward_srcdir}/streambuf.h \\\n-\t${backward_srcdir}/algo.h \\\n-\t${backward_srcdir}/algobase.h \\\n-\t${backward_srcdir}/alloc.h \\\n-\t${backward_srcdir}/bvector.h \\\n-\t${backward_srcdir}/defalloc.h \\\n-\t${backward_srcdir}/deque.h \\\n-\t${backward_srcdir}/function.h \\\n-\t${backward_srcdir}/hash_map.h \\\n-\t${backward_srcdir}/hash_set.h \\\n-\t${backward_srcdir}/hashtable.h \\\n-\t${backward_srcdir}/heap.h \\\n-\t${backward_srcdir}/iostream.h \\\n-\t${backward_srcdir}/iterator.h \\\n-\t${backward_srcdir}/list.h \\\n-\t${backward_srcdir}/map.h \\\n-\t${backward_srcdir}/multimap.h \\\n-\t${backward_srcdir}/new.h \\\n-\t${backward_srcdir}/multiset.h \\\n-\t${backward_srcdir}/pair.h \\\n-\t${backward_srcdir}/queue.h \\\n-\t${backward_srcdir}/rope.h \\\n-\t${backward_srcdir}/set.h \\\n-\t${backward_srcdir}/slist.h \\\n-\t${backward_srcdir}/stack.h \\\n-\t${backward_srcdir}/tempbuf.h \\\n-\t${backward_srcdir}/tree.h \\\n-\t${backward_srcdir}/vector.h \\\n-\t${backward_srcdir}/fstream.h \\\n-\t${backward_srcdir}/strstream \\\n-\t${backward_srcdir}/backward_warning.h\n+backward_headers =  \t${backward_srcdir}/complex.h \t${backward_srcdir}/iomanip.h \t${backward_srcdir}/istream.h \t${backward_srcdir}/ostream.h \t${backward_srcdir}/stream.h \t${backward_srcdir}/streambuf.h \t${backward_srcdir}/algo.h \t${backward_srcdir}/algobase.h \t${backward_srcdir}/alloc.h \t${backward_srcdir}/bvector.h \t${backward_srcdir}/defalloc.h \t${backward_srcdir}/deque.h \t${backward_srcdir}/function.h \t${backward_srcdir}/hash_map.h \t${backward_srcdir}/hash_set.h \t${backward_srcdir}/hashtable.h \t${backward_srcdir}/heap.h \t${backward_srcdir}/iostream.h \t${backward_srcdir}/iterator.h \t${backward_srcdir}/list.h \t${backward_srcdir}/map.h \t${backward_srcdir}/multimap.h \t${backward_srcdir}/new.h \t${backward_srcdir}/multiset.h \t${backward_srcdir}/pair.h \t${backward_srcdir}/queue.h \t${backward_srcdir}/rope.h \t${backward_srcdir}/set.h \t${backward_srcdir}/slist.h \t${backward_srcdir}/stack.h \t${backward_srcdir}/tempbuf.h \t${backward_srcdir}/tree.h \t${backward_srcdir}/vector.h \t${backward_srcdir}/fstream.h \t${backward_srcdir}/strstream \t${backward_srcdir}/backward_warning.h\n \n \n ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n-ext_headers = \\\n-\t${ext_srcdir}/algorithm \\\n-\t${ext_srcdir}/enc_filebuf.h \\\n-\t${ext_srcdir}/stdio_filebuf.h \\\n-\t${ext_srcdir}/functional \\\n-\t${ext_srcdir}/hash_map \\\n-\t${ext_srcdir}/hash_set \\\n-\t${ext_srcdir}/iterator \\\n-\t${ext_srcdir}/memory \\\n-\t${ext_srcdir}/numeric \\\n-\t${ext_srcdir}/rb_tree \\\n-\t${ext_srcdir}/rope \\\n-\t${ext_srcdir}/ropeimpl.h \\\n-\t${ext_srcdir}/slist \\\n-\t${ext_srcdir}/stl_hash_fun.h \\\n-\t${ext_srcdir}/stl_hashtable.h \\\n-\t${ext_srcdir}/stl_rope.h\n+ext_headers =  \t${ext_srcdir}/algorithm \t${ext_srcdir}/enc_filebuf.h \t${ext_srcdir}/stdio_filebuf.h \t${ext_srcdir}/functional \t${ext_srcdir}/hash_map \t${ext_srcdir}/hash_set \t${ext_srcdir}/iterator \t${ext_srcdir}/memory \t${ext_srcdir}/numeric \t${ext_srcdir}/rb_tree \t${ext_srcdir}/rope \t${ext_srcdir}/ropeimpl.h \t${ext_srcdir}/slist \t${ext_srcdir}/stl_hash_fun.h \t${ext_srcdir}/stl_hashtable.h \t${ext_srcdir}/stl_rope.h\n \n \n # This is the common subset of files that all three \"C\" header models use.\n c_base_srcdir = @C_INCLUDE_DIR@\n c_base_builddir = .\n-c_base_headers = \\\n-\t${c_base_srcdir}/std_cassert.h \\\n-\t${c_base_srcdir}/std_cctype.h \\\n-\t${c_base_srcdir}/std_cerrno.h \\\n-\t${c_base_srcdir}/std_cfloat.h \\\n-\t${c_base_srcdir}/std_ciso646.h \\\n-\t${c_base_srcdir}/std_climits.h \\\n-\t${c_base_srcdir}/std_clocale.h \\\n-\t${c_base_srcdir}/std_cmath.h \\\n-\t${c_base_srcdir}/std_csetjmp.h \\\n-\t${c_base_srcdir}/std_csignal.h \\\n-\t${c_base_srcdir}/std_cstdarg.h \\\n-\t${c_base_srcdir}/std_cstddef.h \\\n-\t${c_base_srcdir}/std_cstdio.h \\\n-\t${c_base_srcdir}/std_cstdlib.h \\\n-\t${c_base_srcdir}/std_cstring.h \\\n-\t${c_base_srcdir}/std_ctime.h \\\n-\t${c_base_srcdir}/std_cwchar.h \\\n-\t${c_base_srcdir}/std_cwctype.h \n-\n-c_base_headers_rename = \\\n-\tcassert \\\n-\tcctype \\\n-\tcerrno \\\n-\tcfloat \\\n-\tciso646 \\\n-\tclimits \\\n-\tclocale \\\n-\tcmath \\\n-\tcsetjmp \\\n-\tcsignal \\\n-\tcstdarg \\\n-\tcstddef \\\n-\tcstdio \\\n-\tcstdlib \\\n-\tcstring \\\n-\tctime \\\n-\tcwchar \\\n-\tcwctype \n+c_base_headers =  \t${c_base_srcdir}/std_cassert.h \t${c_base_srcdir}/std_cctype.h \t${c_base_srcdir}/std_cerrno.h \t${c_base_srcdir}/std_cfloat.h \t${c_base_srcdir}/std_ciso646.h \t${c_base_srcdir}/std_climits.h \t${c_base_srcdir}/std_clocale.h \t${c_base_srcdir}/std_cmath.h \t${c_base_srcdir}/std_csetjmp.h \t${c_base_srcdir}/std_csignal.h \t${c_base_srcdir}/std_cstdarg.h \t${c_base_srcdir}/std_cstddef.h \t${c_base_srcdir}/std_cstdio.h \t${c_base_srcdir}/std_cstdlib.h \t${c_base_srcdir}/std_cstring.h \t${c_base_srcdir}/std_ctime.h \t${c_base_srcdir}/std_cwchar.h \t${c_base_srcdir}/std_cwctype.h \n+\n+c_base_headers_rename =  \tcassert \tcctype \tcerrno \tcfloat \tciso646 \tclimits \tclocale \tcmath \tcsetjmp \tcsignal \tcstdarg \tcstddef \tcstdio \tcstdlib \tcstring \tctime \tcwchar \tcwctype \n \n \n # \"C\" compatibility headers.\n c_compatibility_srcdir = ${glibcpp_srcdir}/include/c_compatibility\n c_compatibility_builddir = .\n-c_compatibility_headers = \\\n-\t${c_compatibility_srcdir}/assert.h \\\n-\t${c_compatibility_srcdir}/ctype.h \\\n-\t${c_compatibility_srcdir}/errno.h \\\n-\t${c_compatibility_srcdir}/float.h \\\n-\t${c_compatibility_srcdir}/iso646.h \\\n-\t${c_compatibility_srcdir}/limits.h \\\n-\t${c_compatibility_srcdir}/locale.h \\\n-\t${c_compatibility_srcdir}/math.h \\\n-\t${c_compatibility_srcdir}/setjmp.h \\\n-\t${c_compatibility_srcdir}/signal.h \\\n-\t${c_compatibility_srcdir}/stdarg.h \\\n-\t${c_compatibility_srcdir}/stddef.h \\\n-\t${c_compatibility_srcdir}/stdio.h \\\n-\t${c_compatibility_srcdir}/stdlib.h \\\n-\t${c_compatibility_srcdir}/string.h \\\n-\t${c_compatibility_srcdir}/time.h \\\n-\t${c_compatibility_srcdir}/wchar.h \\\n-\t${c_compatibility_srcdir}/wctype.h \n-\n-@GLIBCPP_C_HEADERS_C_STD_TRUE@c_base_headers_extra = @GLIBCPP_C_HEADERS_C_STD_TRUE@${c_base_srcdir}/cmath.tcc \n+c_compatibility_headers =  \t${c_compatibility_srcdir}/assert.h \t${c_compatibility_srcdir}/ctype.h \t${c_compatibility_srcdir}/errno.h \t${c_compatibility_srcdir}/float.h \t${c_compatibility_srcdir}/iso646.h \t${c_compatibility_srcdir}/limits.h \t${c_compatibility_srcdir}/locale.h \t${c_compatibility_srcdir}/math.h \t${c_compatibility_srcdir}/setjmp.h \t${c_compatibility_srcdir}/signal.h \t${c_compatibility_srcdir}/stdarg.h \t${c_compatibility_srcdir}/stddef.h \t${c_compatibility_srcdir}/stdio.h \t${c_compatibility_srcdir}/stdlib.h \t${c_compatibility_srcdir}/string.h \t${c_compatibility_srcdir}/time.h \t${c_compatibility_srcdir}/wchar.h \t${c_compatibility_srcdir}/wctype.h \n+\n+@GLIBCPP_C_HEADERS_C_STD_TRUE@c_base_headers_extra = ${c_base_srcdir}/cmath.tcc \n @GLIBCPP_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n-@GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = @GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@${c_compatibility_headers}\n+@GLIBCPP_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = ${c_compatibility_headers}\n @GLIBCPP_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n target_srcdir = ${glibcpp_srcdir}/@OS_INC_SRCDIR@\n target_builddir = ./${target_alias}/bits\n-target_headers = \\\n-\t${target_srcdir}/ctype_base.h \\\n-\t${target_srcdir}/ctype_inline.h \\\n-\t${target_srcdir}/ctype_noninline.h \\\n-\t${target_srcdir}/os_defines.h \\\n-\t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \n+target_headers =  \t${target_srcdir}/ctype_base.h \t${target_srcdir}/ctype_inline.h \t${target_srcdir}/ctype_noninline.h \t${target_srcdir}/os_defines.h \t${glibcpp_srcdir}/@ATOMICITY_INC_SRCDIR@/atomicity.h \n \n \n # Non-installed target_header files.\n-target_headers_noinst = \\\n-\t${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@\n+target_headers_noinst =  \t${glibcpp_srcdir}/@CLOCALE_INTERNAL_H@\n \n \n # These target_headers_extra files are all built with ad hoc naming rules.\n-target_headers_extra = \\\n-\t${target_builddir}/basic_file.h \\\n-\t${target_builddir}/c++config.h \\\n-\t${target_builddir}/c++io.h \\\n-\t${target_builddir}/c++locale.h \\\n-\t${target_builddir}/messages_members.h \\\n-\t${target_builddir}/time_members.h \\\n-\t${target_builddir}/codecvt_specializations.h\n-\n-\n-thread_target_headers = \\\n-\t${target_builddir}/gthr.h \\\n-\t${target_builddir}/gthr-single.h \\\n-\t${target_builddir}/gthr-posix.h \\\n-\t${target_builddir}/gthr-default.h\n-\n-\n-pch_input = stdc++.h\n-pch_output = stdc++.h.gch\n-pch_source = ${glibcpp_srcdir}/include/${pch_input}\n+target_headers_extra =  \t${target_builddir}/basic_file.h \t${target_builddir}/c++config.h \t${target_builddir}/c++io.h \t${target_builddir}/c++locale.h \t${target_builddir}/messages_members.h \t${target_builddir}/time_members.h \t${target_builddir}/codecvt_specializations.h\n+\n+\n+thread_target_headers =  \t${target_builddir}/gthr.h \t${target_builddir}/gthr-single.h \t${target_builddir}/gthr-posix.h \t${target_builddir}/gthr-default.h\n+\n+\n+pch_input = ${target_builddir}/stdc++.h\n+pch_output_builddir = ${target_builddir}/stdc++.h.gch\n+pch_source = ${glibcpp_srcdir}/include/stdc++.h\n PCHFLAGS = -Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n-@GLIBCPP_BUILD_PCH_TRUE@pch_build = @GLIBCPP_BUILD_PCH_TRUE@${pch_output}\n+@GLIBCPP_BUILD_PCH_TRUE@pch_build = ${pch_input}\n @GLIBCPP_BUILD_PCH_FALSE@pch_build = \n-@GLIBCPP_BUILD_PCH_TRUE@pch_install = @GLIBCPP_BUILD_PCH_TRUE@install-pch\n+@GLIBCPP_BUILD_PCH_TRUE@pch_install = install-pch\n @GLIBCPP_BUILD_PCH_FALSE@pch_install = \n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n-allstamped = \\\n-\tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \\\n-\tstamp-backward stamp-ext stamp-target \n+allstamped =  \tstamp-std stamp-bits stamp-c_base stamp-c_compatibility \tstamp-backward stamp-ext stamp-target \n \n \n # List of all files that are created by explicit building, editing, or\n # catenation.\n-allcreated = \\\n-\t${target_builddir}/c++config.h \\\n-\t${thread_target_headers} \\\n-\t${pch_build}\n+allcreated =  \t${target_builddir}/c++config.h \t${thread_target_headers} \t${pch_build}\n \n \n # Target includes for threads\n@@ -731,9 +478,13 @@ ${target_builddir}/gthr-default.h: ${toplevel_srcdir}/gcc/${glibcpp_thread_h} \\\n \t    < ${toplevel_srcdir}/gcc/${glibcpp_thread_h} > $@\n \n # Build a precompiled C++ include, stdc++.h.gch.\n-${pch_output}: ${allstamped} ${target_builddir}/c++config.h ${pch_source}\n+${pch_input}: ${allstamped} ${target_builddir}/c++config.h ${pch_source}\n \ttouch ${pch_input}; \\\n-\t$(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -o ${pch_output}; \n+\tif [ ! -d \"${pch_output_builddir}\" ]; then \\\n+\t  mkdir -p ${pch_output_builddir}; \\\n+\tfi; \\\n+\t$(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -O0 -g -o ${pch_output_builddir}/O0g; \\\n+\t$(CXX) $(PCHFLAGS) $(INCLUDES) ${pch_source} -O2 -g -o ${pch_output_builddir}/O2g;\n \n install-data-local: install-headers ${pch_install}\n \n@@ -766,7 +517,9 @@ install-headers:\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${gxx_include_dir}/${target_builddir}; done\n \n install-pch:\n-\t$(INSTALL_DATA) ${std_builddir}/${pch_output} $(DESTDIR)${gxx_include_dir}/${std_builddir}\n+\t$(mkinstalldirs) $(DESTDIR)${gxx_include_dir}/${pch_output_builddir}\n+\tfor file in ${pch_output_builddir}/*; do \\\n+\t  $(INSTALL_DATA) $$file $(DESTDIR)${gxx_include_dir}/${pch_output_builddir}; done\n \n # Stop implicit '.o' make rules from ever stomping on extensionless\n # headers, in the improbable case where some foolish, crack-addled"}, {"sha": "4694be8cd029b40b96307186e5f56f1dd9240f0a", "filename": "libstdc++-v3/testsuite_flags.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8520f70425b1b1a3052474a1f9da93160543a596/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8520f70425b1b1a3052474a1f9da93160543a596/libstdc%2B%2B-v3%2Ftestsuite_flags.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite_flags.in?ref=8520f70425b1b1a3052474a1f9da93160543a596", "patch": "@@ -43,7 +43,7 @@ case ${query} in\n       echo ${CXX}\n       ;;\n     --build-cxx)\n-      PCHFLAGS=\"-include ${BUILD_DIR}/include/stdc++.h\"\n+      PCHFLAGS=\"-include bits/stdc++.h\"\n       CC_build=\"@glibcpp_CXX@ ${PCHFLAGS}\"\n       CXX=`echo $CC_build | sed 's/xgcc/g++/g'`\n       echo ${CXX}"}]}