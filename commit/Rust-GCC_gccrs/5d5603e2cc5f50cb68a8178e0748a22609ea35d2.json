{"sha": "5d5603e2cc5f50cb68a8178e0748a22609ea35d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1NjAzZTJjYzVmNTBjYjY4YTgxNzhlMDc0OGEyMjYwOWVhMzVkMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2002-03-18T10:20:29Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2002-03-18T10:20:29Z"}, "message": "Fix big-endian code generation\n\nFrom-SVN: r50952", "tree": {"sha": "adf2ba902b552d44d0a688405c88435f3a4a1ad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adf2ba902b552d44d0a688405c88435f3a4a1ad8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5603e2cc5f50cb68a8178e0748a22609ea35d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5603e2cc5f50cb68a8178e0748a22609ea35d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5603e2cc5f50cb68a8178e0748a22609ea35d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5603e2cc5f50cb68a8178e0748a22609ea35d2/comments", "author": null, "committer": null, "parents": [{"sha": "6d62edc7f9255b1bcc755e6d7e4d6efc007a93a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d62edc7f9255b1bcc755e6d7e4d6efc007a93a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d62edc7f9255b1bcc755e6d7e4d6efc007a93a2"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "db0b67eb7c1f0bee5f0eacb12fc9a8315019ba4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5603e2cc5f50cb68a8178e0748a22609ea35d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5603e2cc5f50cb68a8178e0748a22609ea35d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d5603e2cc5f50cb68a8178e0748a22609ea35d2", "patch": "@@ -1,3 +1,18 @@\n+2002-03-18  Bernd Schmidt  <bernds@redhat.com>\n+\n+\t* config/arm/arm.c (arm_gen_movstrqi): Use gen_lowpart instead\n+\tof gen_rtx_SUBREG.\n+\t(arm_reload_out_hi): Use gen_lowpart instead of\n+\tgen_rtx_SUBREG to access QImode components.\n+\t* config/arm/arm.md: Disable zero_extend split for QImode\n+\tsubregs in BIG_ENDIAN mode.\n+\t(storehi_bigend): Match use of least significant byte.\n+\t(storeinthi): Remove extraneous SUBREG.\n+\tAdd missing sonstruction of operands[2].\n+\t(movhi): Use gen_lowpart in place of gen_rtx_SUBREG.\n+\t(movqi): Use gen_lowpart in place of gen_rtx_SUBREG.\n+\tReplace gen_rtx (SUBREG) with gen_rtx_SUBREG.\n+\n 2002-03-18  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/rs6000.h (PREDICATE_CODES): Add PARALLEL to\n@@ -4459,7 +4474,7 @@ Mon Feb\t 4 19:23:19 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* config/arm/arm.c (arm_hard_regno_mode_ok): Allow any value in\n \tany geenral register.\n \n-2001-02-04  Bernd Schmidt  <bernds@redhat.com>\n+2001-02-04  Bernd Schmidt  <bernds@redhat.com>s\n \n \t* cfgrtl.c (force_nonfallthru_and_redirect): Don't try to redirect\n \tthe entry block."}, {"sha": "4b1775810b1069de485bbcba78118ce9b21645fc", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5603e2cc5f50cb68a8178e0748a22609ea35d2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5603e2cc5f50cb68a8178e0748a22609ea35d2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5d5603e2cc5f50cb68a8178e0748a22609ea35d2", "patch": "@@ -4544,8 +4544,8 @@ arm_gen_movstrqi (operands)\n \t  RTX_UNCHANGING_P (mem) = dst_unchanging_p;\n \t  MEM_IN_STRUCT_P (mem) = dst_in_struct_p;\n \t  MEM_SCALAR_P (mem) = dst_scalar_p;\n-\t  emit_move_insn (mem, gen_rtx_SUBREG (QImode, part_bytes_reg, 0));\n-\t  \n+\t  emit_move_insn (mem, gen_lowpart (QImode, part_bytes_reg));\n+\n \t  if (--last_bytes)\n \t    {\n \t      tmp = gen_reg_rtx (SImode);\n@@ -4563,7 +4563,7 @@ arm_gen_movstrqi (operands)\n \t  RTX_UNCHANGING_P (mem) = dst_unchanging_p;\n \t  MEM_IN_STRUCT_P (mem) = dst_in_struct_p;\n \t  MEM_SCALAR_P (mem) = dst_scalar_p;\n-\t  emit_move_insn (mem, gen_rtx_SUBREG (HImode, part_bytes_reg, 0));\n+\t  emit_move_insn (mem, gen_lowpart (HImode, part_bytes_reg));\n \t  last_bytes -= 2;\n \t  if (last_bytes)\n \t    {\n@@ -4581,7 +4581,7 @@ arm_gen_movstrqi (operands)\n \t  RTX_UNCHANGING_P (mem) = dst_unchanging_p;\n \t  MEM_IN_STRUCT_P (mem) = dst_in_struct_p;\n \t  MEM_SCALAR_P (mem) = dst_scalar_p;\n-\t  emit_move_insn (mem, gen_rtx_SUBREG (QImode, part_bytes_reg, 0));\t  \n+\t  emit_move_insn (mem, gen_lowpart (QImode, part_bytes_reg));\n \t}\n     }\n \n@@ -5119,23 +5119,23 @@ arm_reload_out_hi (operands)\n     {\n       emit_insn (gen_movqi (gen_rtx_MEM (QImode, \n \t\t\t\t\t plus_constant (base, offset + 1)),\n-\t\t\t    gen_rtx_SUBREG (QImode, outval, 0)));\n+\t\t\t    gen_lowpart (QImode, outval)));\n       emit_insn (gen_lshrsi3 (scratch,\n \t\t\t      gen_rtx_SUBREG (SImode, outval, 0),\n \t\t\t      GEN_INT (8)));\n       emit_insn (gen_movqi (gen_rtx_MEM (QImode, plus_constant (base, offset)),\n-\t\t\t    gen_rtx_SUBREG (QImode, scratch, 0)));\n+\t\t\t    gen_lowpart (QImode, scratch)));\n     }\n   else\n     {\n       emit_insn (gen_movqi (gen_rtx_MEM (QImode, plus_constant (base, offset)),\n-\t\t\t    gen_rtx_SUBREG (QImode, outval, 0)));\n+\t\t\t    gen_lowpart (QImode, outval)));\n       emit_insn (gen_lshrsi3 (scratch,\n \t\t\t      gen_rtx_SUBREG (SImode, outval, 0),\n \t\t\t      GEN_INT (8)));\n       emit_insn (gen_movqi (gen_rtx_MEM (QImode,\n \t\t\t\t\t plus_constant (base, offset + 1)),\n-\t\t\t    gen_rtx_SUBREG (QImode, scratch, 0)));\n+\t\t\t    gen_lowpart (QImode, scratch)));\n     }\n }\n \f"}, {"sha": "af0c9ecf1cfb1f23283735282a65843d628c96cb", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5603e2cc5f50cb68a8178e0748a22609ea35d2/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5603e2cc5f50cb68a8178e0748a22609ea35d2/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=5d5603e2cc5f50cb68a8178e0748a22609ea35d2", "patch": "@@ -3386,7 +3386,7 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n \t(zero_extend:SI (subreg:QI (match_operand:SI 1 \"\" \"\") 0)))\n    (clobber (match_operand:SI 2 \"s_register_operand\" \"\"))]\n-  \"TARGET_ARM && (GET_CODE (operands[1]) != MEM)\"\n+  \"TARGET_ARM && (GET_CODE (operands[1]) != MEM) && ! BYTES_BIG_ENDIAN\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (and:SI (match_dup 2) (const_int 255)))]\n   \"\"\n@@ -4285,7 +4285,7 @@\n   [(set (match_dup 4) (match_dup 3))\n    (set (match_dup 2)\n \t(ashiftrt:SI (match_operand 0 \"\" \"\") (const_int 8)))\n-   (set (match_operand 1 \"\" \"\")\t(subreg:QI (match_dup 2) 0))]\n+   (set (match_operand 1 \"\" \"\")\t(subreg:QI (match_dup 2) 3))]\n   \"TARGET_ARM\"\n   \"\n   {\n@@ -4309,7 +4309,7 @@\n (define_expand \"storeinthi\"\n   [(set (match_operand 0 \"\" \"\")\n \t(subreg:QI (match_operand 1 \"\" \"\") 0))\n-   (set (match_dup 3) (subreg:QI (match_dup 2) 0))]\n+   (set (match_dup 3) (match_dup 2))]\n   \"TARGET_ARM\"\n   \"\n   {\n@@ -4348,6 +4348,7 @@\n \n     operands[3] = adjust_address (op0, QImode, 1);\n     operands[0] = adjust_address (operands[0], QImode, 0);\n+    operands[2] = gen_lowpart (QImode, operands[2]);\n   }\"\n )\n \n@@ -4410,7 +4411,7 @@\n \t        }\n \n \t      emit_insn (gen_movsi (reg, GEN_INT (val)));\n-\t      operands[1] = gen_rtx_SUBREG (HImode, reg, 0);\n+\t      operands[1] = gen_lowpart (HImode, reg);\n \t    }\n           else if (!arm_arch4)\n \t    {\n@@ -4807,7 +4808,7 @@\n \t      rtx reg = gen_reg_rtx (SImode);\n \n \t      emit_insn (gen_movsi (reg, operands[1]));\n-\t      operands[1] = gen_rtx_SUBREG (QImode, reg, 0);\n+\t      operands[1] = gen_lowpart (QImode, reg);\n \t    }\n          if (GET_CODE (operands[0]) == MEM)\n \t   operands[1] = force_reg (QImode, operands[1]);\n@@ -4850,7 +4851,7 @@\n           if (GET_CODE (operands[0]) != REG)\n \t    abort ();\n \n-          operands[0] = gen_rtx (SUBREG, SImode, operands[0], 0);\n+          operands[0] = gen_rtx_SUBREG (SImode, operands[0], 0);\n           emit_insn (gen_movsi (operands[0], operands[1]));\n           DONE;\n        }"}]}