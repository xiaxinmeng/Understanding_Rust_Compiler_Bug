{"sha": "4e7a92c0ff3871d955ca8fb133f869b216d7224d", "node_id": "C_kwDOANBUbNoAKDRlN2E5MmMwZmYzODcxZDk1NWNhOGZiMTMzZjg2OWIyMTZkNzIyNGQ", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-09-21T10:14:46Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-09-21T10:20:37Z"}, "message": "arm: pass architecture extensions to assembler if supported\n\nWhen I originally added the new extended architecture features support\nto GCC, the assembler was unable to parse the new feature lists on the\ncommand-line and would throw an error.  This has now been fixed in GAS\nand the behaviour is the same as GCC.\n\nSo this patch adds a configure-time test for the assembler in use to\ndetect that it is recent enough to support this behaviour and then\nenables passing the architecture extensions to the assembler when this\nis the case.\n\nAlthough the assembly output generated by GCC does not rely on this,\nthis should ease some issues when using GCC as a driver for compiling\nsource written directly in assembly language when the programmer was\nexpecting the appropriate options to be passed on the command line.\n\ngcc/ChangeLog:\n\n\t* configure.ac: Detect when the assembler supports new-style\n\tarchitecture extensions.\n\t* common/config/arm/arm-common.c (arm_rewrite_mcpu): Return\n\tthe full CPU string if the assembler can grok it.\n\t(arm_rewrite_march): Likewise but for the architecture.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.", "tree": {"sha": "ac7903abe5b4ca3934ecbd4f8c9059ca990afb6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac7903abe5b4ca3934ecbd4f8c9059ca990afb6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e7a92c0ff3871d955ca8fb133f869b216d7224d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7a92c0ff3871d955ca8fb133f869b216d7224d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7a92c0ff3871d955ca8fb133f869b216d7224d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7a92c0ff3871d955ca8fb133f869b216d7224d/comments", "author": null, "committer": null, "parents": [{"sha": "55b989de7679a486ad674fb154408de26ac96467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b989de7679a486ad674fb154408de26ac96467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55b989de7679a486ad674fb154408de26ac96467"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "de898a74165db4d7250aa0097dfab682beb0f99c", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a92c0ff3871d955ca8fb133f869b216d7224d/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a92c0ff3871d955ca8fb133f869b216d7224d/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=4e7a92c0ff3871d955ca8fb133f869b216d7224d", "patch": "@@ -115,7 +115,12 @@ const char *\n arm_rewrite_mcpu (int argc, const char **argv)\n {\n   gcc_assert (argc);\n+\n+#ifdef HAVE_GAS_ARM_EXTENDED_ARCH\n+  return argv[argc - 1];\n+#else\n   return arm_rewrite_selected_cpu (argv[argc - 1]);\n+#endif\n }\n \n /* Comparator for arm_rewrite_selected_arch.  Compare the two arch extension\n@@ -223,7 +228,12 @@ const char *\n arm_rewrite_march (int argc, const char **argv)\n {\n   gcc_assert (argc);\n+\n+#ifdef HAVE_GAS_ARM_EXTENDED_ARCH\n+  return argv[argc - 1];\n+#else\n   return arm_rewrite_selected_arch (argv[argc - 1]);\n+#endif\n }\n \n #include \"arm-cpu-cdata.h\""}, {"sha": "61cafe4f6c0ff0603a6bb728e8c47dfbd9bdeb85", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a92c0ff3871d955ca8fb133f869b216d7224d/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a92c0ff3871d955ca8fb133f869b216d7224d/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=4e7a92c0ff3871d955ca8fb133f869b216d7224d", "patch": "@@ -1331,6 +1331,13 @@\n #endif\n \n \n+/* Define if your Arm assembler permits context-specific feature extensions.\n+   */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GAS_ARM_EXTENDED_ARCH\n+#endif\n+\n+\n /* Define if your assembler supports .balign and .p2align. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_GAS_BALIGN_AND_P2ALIGN"}, {"sha": "b3de17009b803b000d8f22dd5efcc13f324ac385", "filename": "gcc/configure", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a92c0ff3871d955ca8fb133f869b216d7224d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a92c0ff3871d955ca8fb133f869b216d7224d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=4e7a92c0ff3871d955ca8fb133f869b216d7224d", "patch": "@@ -28881,6 +28881,41 @@ $as_echo \"#define HAVE_GCN_SRAM_ECC_GFX908 1\" >>confdefs.h\n fi\n \n     ;;\n+  arm*)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for assembler for arm accepts context-specific architecture extensions\" >&5\n+$as_echo_n \"checking assembler for assembler for arm accepts context-specific architecture extensions... \" >&6; }\n+if ${gcc_cv_as_arm_option_extensions+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_arm_option_extensions=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.text\n+\t.thumb\n+\t.syntax unified\n+\tvmov.f32 s0, s1' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags -march=armv8.1-m.main+mve -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_arm_option_extensions=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_arm_option_extensions\" >&5\n+$as_echo \"$gcc_cv_as_arm_option_extensions\" >&6; }\n+if test $gcc_cv_as_arm_option_extensions = yes; then\n+\n+$as_echo \"#define HAVE_GAS_ARM_EXTENDED_ARCH 1\" >>confdefs.h\n+\n+fi\n+\n esac\n \n # ??? Not all targets support dwarf2 debug_line, even within a version"}, {"sha": "7d3aab470306359035a1ba02aa8e10f526f8b48b", "filename": "gcc/configure.ac", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e7a92c0ff3871d955ca8fb133f869b216d7224d/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e7a92c0ff3871d955ca8fb133f869b216d7224d/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=4e7a92c0ff3871d955ca8fb133f869b216d7224d", "patch": "@@ -5357,6 +5357,16 @@ case \"$target\" in\n       [AC_DEFINE(HAVE_GCN_SRAM_ECC_GFX908, 1,\n        [Define if your assembler allows -mattr=+sram-ecc for gfx908.])])\n     ;;\n+  arm*)\n+    gcc_GAS_CHECK_FEATURE([assembler for arm accepts context-specific architecture extensions],\n+      gcc_cv_as_arm_option_extensions,\n+      [-march=armv8.1-m.main+mve],\n+      [.text\n+\t.thumb\n+\t.syntax unified\n+\tvmov.f32 s0, s1],,\n+      [AC_DEFINE(HAVE_GAS_ARM_EXTENDED_ARCH, 1,\n+       [Define if your Arm assembler permits context-specific feature extensions.])])\n esac\n \n # ??? Not all targets support dwarf2 debug_line, even within a version"}]}