{"sha": "094fe02336be4ba0bf630ab056d34c0333ff0852", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk0ZmUwMjMzNmJlNGJhMGJmNjMwYWIwNTZkMzRjMDMzM2ZmMDg1Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-10T08:20:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-10T08:20:15Z"}, "message": "tree-if-conv.c (if_convertible_gimple_assign_stmt_p): Use ifcvt_could_trap_p also when not flag_tree_loop_if_convert_stores.\n\n2015-07-10  Richard Biener  <rguenther@suse.de>\n\n\t* tree-if-conv.c (if_convertible_gimple_assign_stmt_p):\n\tUse ifcvt_could_trap_p also when not flag_tree_loop_if_convert_stores.\n\t(if_convertible_loop_p_1): For this always compute bb predicates.\n\t(if_convertible_loop_p): And free them.\n\nFrom-SVN: r225654", "tree": {"sha": "246ffd9153c7a70f2fd167eac4ef9b12a1ffc7a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/246ffd9153c7a70f2fd167eac4ef9b12a1ffc7a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/094fe02336be4ba0bf630ab056d34c0333ff0852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094fe02336be4ba0bf630ab056d34c0333ff0852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/094fe02336be4ba0bf630ab056d34c0333ff0852", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094fe02336be4ba0bf630ab056d34c0333ff0852/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2374c427a8b9fe9b6bcb20f2178256549e5b582e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2374c427a8b9fe9b6bcb20f2178256549e5b582e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2374c427a8b9fe9b6bcb20f2178256549e5b582e"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "20a130168518fc06478e46310e0bc9cca3e1e82f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094fe02336be4ba0bf630ab056d34c0333ff0852/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094fe02336be4ba0bf630ab056d34c0333ff0852/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=094fe02336be4ba0bf630ab056d34c0333ff0852", "patch": "@@ -1,3 +1,10 @@\n+2015-07-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-if-conv.c (if_convertible_gimple_assign_stmt_p):\n+\tUse ifcvt_could_trap_p also when not flag_tree_loop_if_convert_stores.\n+\t(if_convertible_loop_p_1): For this always compute bb predicates.\n+\t(if_convertible_loop_p): And free them.\n+\n 2015-07-10  Bernhard Reutner-Fischer  <aldot@gcc.gnu.org>\n \n \t* ipa-icf.c (sem_item_optimizer::do_congruence_step): Fix typo"}, {"sha": "a1a584bdf8d08436848f299727fb6f542e6ba53a", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/094fe02336be4ba0bf630ab056d34c0333ff0852/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/094fe02336be4ba0bf630ab056d34c0333ff0852/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=094fe02336be4ba0bf630ab056d34c0333ff0852", "patch": "@@ -874,7 +874,7 @@ if_convertible_gimple_assign_stmt_p (gimple stmt,\n       return true;\n     }\n \n-  if (gimple_assign_rhs_could_trap_p (stmt))\n+  if (ifcvt_could_trap_p (stmt, refs))\n     {\n       if (ifcvt_can_use_mask_load_store (stmt))\n \t{\n@@ -1297,18 +1297,15 @@ if_convertible_loop_p_1 (struct loop *loop,\n \t  }\n     }\n \n-  if (flag_tree_loop_if_convert_stores)\n-    {\n-      data_reference_p dr;\n+  data_reference_p dr;\n \n-      for (i = 0; refs->iterate (i, &dr); i++)\n-\t{\n-\t  dr->aux = XNEW (struct ifc_dr);\n-\t  DR_WRITTEN_AT_LEAST_ONCE (dr) = -1;\n-\t  DR_RW_UNCONDITIONALLY (dr) = -1;\n-\t}\n-      predicate_bbs (loop);\n+  for (i = 0; refs->iterate (i, &dr); i++)\n+    {\n+      dr->aux = XNEW (struct ifc_dr);\n+      DR_WRITTEN_AT_LEAST_ONCE (dr) = -1;\n+      DR_RW_UNCONDITIONALLY (dr) = -1;\n     }\n+  predicate_bbs (loop);\n \n   for (i = 0; i < loop->num_nodes; i++)\n     {\n@@ -1323,9 +1320,8 @@ if_convertible_loop_p_1 (struct loop *loop,\n \t    return false;\n     }\n \n-  if (flag_tree_loop_if_convert_stores)\n-    for (i = 0; i < loop->num_nodes; i++)\n-      free_bb_predicate (ifc_bbs[i]);\n+  for (i = 0; i < loop->num_nodes; i++)\n+    free_bb_predicate (ifc_bbs[i]);\n \n   /* Checking PHIs needs to be done after stmts, as the fact whether there\n      are any masked loads or stores affects the tests.  */\n@@ -1399,14 +1395,10 @@ if_convertible_loop_p (struct loop *loop, bool *any_mask_load_store)\n   res = if_convertible_loop_p_1 (loop, &loop_nest, &refs, &ddrs,\n \t\t\t\t any_mask_load_store);\n \n-  if (flag_tree_loop_if_convert_stores)\n-    {\n-      data_reference_p dr;\n-      unsigned int i;\n-\n-      for (i = 0; refs.iterate (i, &dr); i++)\n-\tfree (dr->aux);\n-    }\n+  data_reference_p dr;\n+  unsigned int i;\n+  for (i = 0; refs.iterate (i, &dr); i++)\n+    free (dr->aux);\n \n   free_data_refs (refs);\n   free_dependence_relations (ddrs);"}]}