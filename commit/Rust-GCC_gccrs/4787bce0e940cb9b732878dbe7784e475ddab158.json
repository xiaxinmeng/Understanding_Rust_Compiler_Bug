{"sha": "4787bce0e940cb9b732878dbe7784e475ddab158", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc4N2JjZTBlOTQwY2I5YjczMjg3OGRiZTc3ODRlNDc1ZGRhYjE1OA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-10-04T19:56:02Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-10-04T19:56:02Z"}, "message": "(sfunc_uses_reg): New function.\n\n(noncall_uses_reg, machine_dependent_reorg, final_prescan_insn):\nHandle special functions like function calls for purposes of relaxing.\n(noncall_uses_reg): Added some missing cases of registers\nbeing used in non-call instructions.\n\nFrom-SVN: r12901", "tree": {"sha": "3b9477c194c4b153f777c14c9034b59687afc818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b9477c194c4b153f777c14c9034b59687afc818"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4787bce0e940cb9b732878dbe7784e475ddab158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4787bce0e940cb9b732878dbe7784e475ddab158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4787bce0e940cb9b732878dbe7784e475ddab158", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4787bce0e940cb9b732878dbe7784e475ddab158/comments", "author": null, "committer": null, "parents": [{"sha": "227665e760b1e42a16c8c6cbe884dee48182515b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/227665e760b1e42a16c8c6cbe884dee48182515b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/227665e760b1e42a16c8c6cbe884dee48182515b"}], "stats": {"total": 107, "additions": 90, "deletions": 17}, "files": [{"sha": "9b236c882731357baf4dffc73b22fa48a1bc5165", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 90, "deletions": 17, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4787bce0e940cb9b732878dbe7784e475ddab158/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4787bce0e940cb9b732878dbe7784e475ddab158/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4787bce0e940cb9b732878dbe7784e475ddab158", "patch": "@@ -1925,6 +1925,45 @@ find_barrier (from)\n   return found_barrier;\n }\n \n+/* If the instruction INSN is implemented by a special function, and we can\n+   positively find the register that is used to call the sfunc, and this\n+   register is not used anywhere else in this instruction - except as the\n+   destination of a set, return this register; else, return 0.  */\n+static rtx\n+sfunc_uses_reg (insn)\n+     rtx insn;\n+{\n+  int i;\n+  rtx pattern, part, reg_part, reg;\n+\n+  if (GET_CODE (insn) != INSN)\n+    return 0;\n+  pattern = PATTERN (insn);\n+  if (GET_CODE (pattern) != PARALLEL || get_attr_type (insn) != TYPE_SFUNC)\n+    return 0;\n+\n+  for (reg_part = 0, i = XVECLEN (pattern, 0) - 1; i >= 1; i--)\n+    {\n+      part = XVECEXP (pattern, 0, i);\n+      if (GET_CODE (part) == USE)\n+\treg_part = part;\n+    }\n+  if (! reg_part)\n+    return 0;\n+  reg = XEXP (reg_part, 0);\n+  for (i = XVECLEN (pattern, 0) - 1; i >= 0; i--)\n+    {\n+      part = XVECEXP (pattern, 0, i);\n+      if (part == reg_part)\n+\tcontinue;\n+      if (reg_mentioned_p (reg, ((GET_CODE (part) == SET\n+\t\t\t\t  && GET_CODE (SET_DEST (part)) == REG)\n+\t\t\t\t ? SET_SRC (part) : part)))\n+\treturn 0;\n+    }\n+  return reg;\n+}\n+\n /* See if the only way in which INSN uses REG is by calling it, or by\n    setting it while calling it.  Set *SET to a SET rtx if the register\n    is set by INSN.  */\n@@ -1935,10 +1974,20 @@ noncall_uses_reg (reg, insn, set)\n      rtx insn;\n      rtx *set;\n {\n-  rtx pattern;\n+  rtx pattern, reg2;\n \n   *set = NULL_RTX;\n \n+  reg2 = sfunc_uses_reg (insn);\n+  if (reg2 && REGNO (reg2) == REGNO (reg))\n+    {\n+      pattern = single_set (insn);\n+      if (pattern\n+\t  && GET_CODE (SET_DEST (pattern)) == REG\n+\t  && REGNO (reg) == REGNO (SET_DEST (pattern)))\n+\t*set = pattern;\n+      return 0;\n+    }\n   if (GET_CODE (insn) != CALL_INSN)\n     {\n       /* We don't use rtx_equal_p because we don't care if the mode is\n@@ -1948,8 +1997,19 @@ noncall_uses_reg (reg, insn, set)\n \t  && GET_CODE (SET_DEST (pattern)) == REG\n \t  && REGNO (reg) == REGNO (SET_DEST (pattern)))\n \t{\n+\t  rtx par, part;\n+\t  int i;\n+\n \t  *set = pattern;\n-\t  return 0;\n+\t  par = PATTERN (insn);\n+\t  if (GET_CODE (par) == PARALLEL)\n+\t    for (i = XVECLEN (par, 0) - 1; i >= 0; i--)\n+\t      {\n+\t\tpart = XVECEXP (par, 0, i);\n+\t\tif (GET_CODE (part) != SET && reg_mentioned_p (reg, part))\n+\t\t  return 1;\n+\t      }\n+\t  return reg_mentioned_p (reg, SET_SRC (pattern));\n \t}\n \n       return 1;\n@@ -2032,21 +2092,28 @@ machine_dependent_reorg (first)\n \t  rtx pattern, reg, link, set, scan, dies, label;\n \t  int rescan = 0, foundinsn = 0;\n \n-\t  if (GET_CODE (insn) != CALL_INSN)\n-\t    continue;\n+\t  if (GET_CODE (insn) == CALL_INSN)\n+\t    {\n+\t      pattern = PATTERN (insn);\n \n-\t  pattern = PATTERN (insn);\n+\t      if (GET_CODE (pattern) == PARALLEL)\n+\t\tpattern = XVECEXP (pattern, 0, 0);\n+\t      if (GET_CODE (pattern) == SET)\n+\t\tpattern = SET_SRC (pattern);\n \n-\t  if (GET_CODE (pattern) == PARALLEL)\n-\t    pattern = XVECEXP (pattern, 0, 0);\n-\t  if (GET_CODE (pattern) == SET)\n-\t    pattern = SET_SRC (pattern);\n+\t      if (GET_CODE (pattern) != CALL\n+\t\t  || GET_CODE (XEXP (pattern, 0)) != MEM)\n+\t\tcontinue;\n \n-\t  if (GET_CODE (pattern) != CALL\n-\t      || GET_CODE (XEXP (pattern, 0)) != MEM)\n-\t    continue;\n+\t      reg = XEXP (XEXP (pattern, 0), 0);\n+\t    }\n+\t  else\n+\t    {\n+\t      reg = sfunc_uses_reg (insn);\n+\t      if (! reg)\n+\t\tcontinue;\n+\t    }\n \n-\t  reg = XEXP (XEXP (pattern, 0), 0);\n \t  if (GET_CODE (reg) != REG)\n \t    continue;\n \n@@ -2148,7 +2215,8 @@ machine_dependent_reorg (first)\n \t      if (scan == insn)\n \t\tfoundinsn = 1;\n \n-\t      if (scan != insn && GET_CODE (scan) == CALL_INSN)\n+\t      if (scan != insn\n+\t\t  && (GET_CODE (scan) == CALL_INSN || sfunc_uses_reg (scan)))\n \t\t{\n \t\t  /* There is a function call to this register other\n                      than the one we are checking.  If we optimize\n@@ -2205,10 +2273,14 @@ machine_dependent_reorg (first)\n \t      scan = link;\n \t      do\n \t\t{\n+\t\t  rtx reg2;\n+\n \t\t  scan = NEXT_INSN (scan);\n \t\t  if (scan != insn\n-\t\t      && GET_CODE (scan) == CALL_INSN\n-\t\t      && reg_mentioned_p (reg, scan))\n+\t\t      && ((GET_CODE (scan) == CALL_INSN\n+\t\t\t   && reg_mentioned_p (reg, scan))\n+\t\t\t  || ((reg2 = sfunc_uses_reg (scan))\n+\t\t\t      && REGNO (reg2) == REGNO (reg))))\n \t\t    REG_NOTES (scan) = gen_rtx (EXPR_LIST, REG_LABEL,\n \t\t\t\t\t\tlabel, REG_NOTES (scan));\n \t\t}\n@@ -2319,7 +2391,8 @@ final_prescan_insn (insn, opvec, noperands)\n \t    pattern = XVECEXP (pattern, 0, 0);\n \t  if (GET_CODE (pattern) == CALL\n \t      || (GET_CODE (pattern) == SET\n-\t\t  && GET_CODE (SET_SRC (pattern)) == CALL))\n+\t\t  && (GET_CODE (SET_SRC (pattern)) == CALL\n+\t\t      || get_attr_type (insn) == TYPE_SFUNC)))\n \t    fprintf (asm_out_file, \"\\t.uses L%d\\n\",\n \t\t     CODE_LABEL_NUMBER (XEXP (note, 0)));\n \t  else if (GET_CODE (pattern) == SET)"}]}