{"sha": "4b86508194463b601000bfa779bce0834247c66c", "node_id": "C_kwDOANBUbNoAKDRiODY1MDgxOTQ0NjNiNjAxMDAwYmZhNzc5YmNlMDgzNDI0N2M2NmM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-10T07:45:16Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-10T10:27:08Z"}, "message": "Replace PTR with 'void *' in compiler.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/decl.cc (compare_field_bitpos): Use void *\n\tinstead PTR.\n\t* gcc-interface/utils2.cc (compare_elmt_bitpos): Likewise.\n\ngcc/ChangeLog:\n\n\t* basic-block.h (struct basic_block_d): Use void *\n\tinstead PTR.\n\t* cfgloop.h: Likewise.\n\t* cgraph.h: Likewise.\n\t* gengtype-state.cc (state_ident_by_name): Likewise.\n\t(record_type): Likewise.\n\t(read_state_already_seen_type): Likewise.\n\t* gengtype.cc (dump_type): Likewise.\n\t(input_file_by_name): Likewise.\n\t(main): Likewise.\n\t* ggc-common.cc (ggc_cleared_alloc_ptr_array_two_args): Likewise.\n\t* ipa-utils.h (struct ipa_dfs_info): Likewise.\n\t* plugin.cc (htab_hash_plugin): Likewise.", "tree": {"sha": "e4ab7b94d2a7522c9b22eaa999d6af3f4cedb390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4ab7b94d2a7522c9b22eaa999d6af3f4cedb390"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b86508194463b601000bfa779bce0834247c66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b86508194463b601000bfa779bce0834247c66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b86508194463b601000bfa779bce0834247c66c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b86508194463b601000bfa779bce0834247c66c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4694846102a9589558dd509ef70b7960063935d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4694846102a9589558dd509ef70b7960063935d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4694846102a9589558dd509ef70b7960063935d"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "d52c4fb362332c0b402fb512d8495cf205e5bf38", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=4b86508194463b601000bfa779bce0834247c66c", "patch": "@@ -224,7 +224,7 @@ static bool constructor_address_p (tree);\n static bool allocatable_size_p (tree, bool);\n static bool initial_value_needs_conversion (tree, tree);\n static tree update_n_elem (tree, tree, tree);\n-static int compare_field_bitpos (const PTR, const PTR);\n+static int compare_field_bitpos (const void *, const void *);\n static bool components_to_record (Node_Id, Entity_Id, tree, tree, int, bool,\n \t\t\t\t  bool, bool, bool, bool, bool, bool, tree,\n \t\t\t\t  tree *);\n@@ -7712,7 +7712,7 @@ field_has_variable_size (tree field)\n /* qsort comparer for the bit positions of two record components.  */\n \n static int\n-compare_field_bitpos (const PTR rt1, const PTR rt2)\n+compare_field_bitpos (const void *rt1, const void *rt2)\n {\n   const_tree const field1 = * (const_tree const *) rt1;\n   const_tree const field2 = * (const_tree const *) rt2;"}, {"sha": "76622da808101f0a67e07fe6994e334e167dfffb", "filename": "gcc/ada/gcc-interface/utils2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fada%2Fgcc-interface%2Futils2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fada%2Fgcc-interface%2Futils2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.cc?ref=4b86508194463b601000bfa779bce0834247c66c", "patch": "@@ -1936,7 +1936,7 @@ build_call_raise_range (int msg, Node_Id gnat_node, char kind,\n    for record components.  */\n \n static int\n-compare_elmt_bitpos (const PTR rt1, const PTR rt2)\n+compare_elmt_bitpos (const void *rt1, const void *rt2)\n {\n   const constructor_elt * const elmt1 = (const constructor_elt *) rt1;\n   const constructor_elt * const elmt2 = (const constructor_elt *) rt2;"}, {"sha": "c9d1fc91bbbc84c1e937567cdef802cc99ae8a05", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=4b86508194463b601000bfa779bce0834247c66c", "patch": "@@ -36,7 +36,7 @@ class GTY((user)) edge_def {\n   } insns;\n \n   /* Auxiliary info specific to a pass.  */\n-  PTR aux;\n+  void *aux;\n \n   /* Location of any goto implicit in the edge.  */\n   location_t goto_locus;\n@@ -120,7 +120,7 @@ struct GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\"))) basic_block_d\n   vec<edge, va_gc> *succs;\n \n   /* Auxiliary info specific to a pass.  */\n-  PTR GTY ((skip (\"\"))) aux;\n+  void *GTY ((skip (\"\"))) aux;\n \n   /* Innermost loop containing the block.  */\n   class loop *loop_father;"}, {"sha": "528b1219bc37ad8f114d5cf381c0cff899db31ee", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=4b86508194463b601000bfa779bce0834247c66c", "patch": "@@ -148,7 +148,7 @@ class GTY ((chain_next (\"%h.next\"))) loop {\n   class loop *next;\n \n   /* Auxiliary info specific to a pass.  */\n-  PTR GTY ((skip (\"\"))) aux;\n+  void *GTY ((skip (\"\"))) aux;\n \n   /* The number of times the latch of the loop is executed.  This can be an\n      INTEGER_CST, or a symbolic expression representing the number of"}, {"sha": "4be67e3cea906927a67be00689a027d939cd948e", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=4b86508194463b601000bfa779bce0834247c66c", "patch": "@@ -628,7 +628,7 @@ struct GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n   /* File stream where this node is being written to.  */\n   struct lto_file_decl_data * lto_file_data;\n \n-  PTR GTY ((skip)) aux;\n+  void *GTY ((skip)) aux;\n \n   /* Comdat group the symbol is in.  Can be private if GGC allowed that.  */\n   tree x_comdat_group;\n@@ -1895,7 +1895,7 @@ class GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"),\n   /* Additional information about an indirect call.  Not cleared when an edge\n      becomes direct.  */\n   cgraph_indirect_call_info *indirect_info;\n-  PTR GTY ((skip (\"\"))) aux;\n+  void *GTY ((skip (\"\"))) aux;\n   /* When equal to CIF_OK, inline this call.  Otherwise, points to the\n      explanation why function was not inlined.  */\n   enum cgraph_inline_failed_t inline_failed;"}, {"sha": "2c7f642cd3d48a7826afb0b515229baa14799ee8", "filename": "gcc/gengtype-state.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fgengtype-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fgengtype-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-state.cc?ref=4b86508194463b601000bfa779bce0834247c66c", "patch": "@@ -313,7 +313,7 @@ fatal_reading_state (struct state_token_st* tok, const char*msg)\n static struct state_ident_st *\n state_ident_by_name (const char *name, enum insert_option optins)\n {\n-  PTR *slot = NULL;\n+  void **slot = NULL;\n   int namlen = 0;\n   struct state_ident_st *stid = NULL;\n \n@@ -1435,7 +1435,7 @@ static void read_state_common_type_content (type_p current);\n static void\n record_type (type_p type)\n {\n-  PTR *slot;\n+  void **slot;\n \n   slot = htab_find_slot (state_seen_types, type, INSERT);\n   gcc_assert (slot);\n@@ -1451,7 +1451,7 @@ read_state_already_seen_type (type_p *type)\n \n   if (state_token_kind (t0) == STOK_INTEGER)\n     {\n-      PTR *slot = NULL;\n+      void **slot = NULL;\n       struct type loctype = { TYPE_SCALAR, 0, 0, 0, GC_UNUSED, {0} };\n \n       loctype.state_number = t0->stok_un.stok_num;"}, {"sha": "e11da9e46d0ce96c088dae7eb6ec4160b5c22368", "filename": "gcc/gengtype.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fgengtype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fgengtype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.cc?ref=4b86508194463b601000bfa779bce0834247c66c", "patch": "@@ -4869,7 +4869,7 @@ static htab_t seen_types;\n static void\n dump_type (int indent, type_p t)\n {\n-  PTR *slot;\n+  void **slot;\n \n   printf (\"%*cType at %p: \", indent, ' ', (void *) t);\n   if (t->kind == TYPE_UNDEFINED)\n@@ -5118,7 +5118,7 @@ static htab_t input_file_htab;\n input_file*\n input_file_by_name (const char* name)\n {\n-  PTR* slot;\n+  void ** slot;\n   input_file* f = NULL;\n   int namlen = 0;\n   if (!name)\n@@ -5227,7 +5227,7 @@ main (int argc, char **argv)\n       POS_HERE (do_scalar_typedef (\"machine_mode\", &pos));\n       POS_HERE (do_scalar_typedef (\"fixed_size_mode\", &pos));\n       POS_HERE (do_scalar_typedef (\"CONSTEXPR\", &pos));\n-      POS_HERE (do_typedef (\"PTR\", \n+      POS_HERE (do_typedef (\"void *\",\n \t\t\t    create_pointer (resolve_typedef (\"void\", &pos)),\n \t\t\t    &pos));\n #undef POS_HERE"}, {"sha": "8b3389e8760e9c32ed4032e623b03a9fec85c376", "filename": "gcc/ggc-common.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fggc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fggc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.cc?ref=4b86508194463b601000bfa779bce0834247c66c", "patch": "@@ -175,8 +175,8 @@ ggc_cleared_alloc_htab_ignore_args (size_t c ATTRIBUTE_UNUSED,\n void *\n ggc_cleared_alloc_ptr_array_two_args (size_t c, size_t n)\n {\n-  gcc_assert (sizeof (PTR *) == n);\n-  return ggc_cleared_vec_alloc<PTR *> (c);\n+  gcc_assert (sizeof (void **) == n);\n+  return ggc_cleared_vec_alloc<void **> (c);\n }\n \n /* These are for splay_tree_new_ggc.  */"}, {"sha": "3ca058c0b56083d60a73ab6e81a58a2d0484f7cc", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=4b86508194463b601000bfa779bce0834247c66c", "patch": "@@ -30,7 +30,7 @@ struct ipa_dfs_info {\n   bool new_node;\n   bool on_stack;\n   struct cgraph_node* next_cycle;\n-  PTR aux;\n+  void *aux;\n };\n \n "}, {"sha": "17b33e463a93156890e44052af8f77cb45505946", "filename": "gcc/plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fplugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b86508194463b601000bfa779bce0834247c66c/gcc%2Fplugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.cc?ref=4b86508194463b601000bfa779bce0834247c66c", "patch": "@@ -128,7 +128,7 @@ static const char *str_license = \"plugin_is_GPL_compatible\";\n    structure to be inserted into the hash table.  */\n \n static hashval_t\n-htab_hash_plugin (const PTR p)\n+htab_hash_plugin (const void *p)\n {\n   const struct plugin_name_args *plugin = (const struct plugin_name_args *) p;\n   return htab_hash_string (plugin->base_name);"}]}