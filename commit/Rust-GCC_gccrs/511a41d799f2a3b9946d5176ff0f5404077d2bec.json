{"sha": "511a41d799f2a3b9946d5176ff0f5404077d2bec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExYTQxZDc5OWYyYTNiOTk0NmQ1MTc2ZmYwZjU0MDQwNzdkMmJlYw==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2015-01-13T05:59:03Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2015-01-13T05:59:03Z"}, "message": "[NDS32] Implement TARGET_ENCODE_SECTION_INFO to store specific flag in symbol_ref rtx.\n\ngcc/\n\t* config/nds32/nds32.h (NDS32_SYMBOL_FLAG_RODATA): Define our own\n\ttarget-specific symbol_ref flag.\n\t(NDS32_SYMBOL_REF_RODATA_P): Define it to check if the symbol_ref\n\tresides in rodata section.\n\t* config/nds32/nds32.c (TARGET_ENCODE_SECTION_INFO): Define.\n\t(nds32_encode_section_info): New function.\n\nFrom-SVN: r219514", "tree": {"sha": "87e98cb1caaaa6089af45c21d8c509ed6d016192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87e98cb1caaaa6089af45c21d8c509ed6d016192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/511a41d799f2a3b9946d5176ff0f5404077d2bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511a41d799f2a3b9946d5176ff0f5404077d2bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/511a41d799f2a3b9946d5176ff0f5404077d2bec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511a41d799f2a3b9946d5176ff0f5404077d2bec/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da0675433410f073bb5dc199e6ef4e83e036e2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da0675433410f073bb5dc199e6ef4e83e036e2c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da0675433410f073bb5dc199e6ef4e83e036e2c9"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "6166c08c43d2f7079d8fe53b6649824a806bbb6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511a41d799f2a3b9946d5176ff0f5404077d2bec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511a41d799f2a3b9946d5176ff0f5404077d2bec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=511a41d799f2a3b9946d5176ff0f5404077d2bec", "patch": "@@ -1,3 +1,12 @@\n+2015-01-13  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.h (NDS32_SYMBOL_FLAG_RODATA): Define our own\n+\ttarget-specific symbol_ref flag.\n+\t(NDS32_SYMBOL_REF_RODATA_P): Define it to check if the symbol_ref\n+\tresides in rodata section.\n+\t* config/nds32/nds32.c (TARGET_ENCODE_SECTION_INFO): Define.\n+\t(nds32_encode_section_info): New function.\n+\n 2015-01-13  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.md (call): Use pseudo instruction bal which"}, {"sha": "5128bfadb1a3203951a868cae4c9040431aa1867", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511a41d799f2a3b9946d5176ff0f5404077d2bec/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511a41d799f2a3b9946d5176ff0f5404077d2bec/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=511a41d799f2a3b9946d5176ff0f5404077d2bec", "patch": "@@ -2106,6 +2106,45 @@ nds32_address_cost (rtx address,\n   return nds32_address_cost_impl (address, mode, as, speed);\n }\n \n+\f\n+/* Dividing the Output into Sections (Texts, Data, . . . ).  */\n+\n+/* If references to a symbol or a constant must be treated differently\n+   depending on something about the variable or function named by the symbol\n+   (such as what section it is in), we use this hook to store flags\n+   in symbol_ref rtx.  */\n+static void\n+nds32_encode_section_info (tree decl, rtx rtl, int new_decl_p)\n+{\n+  default_encode_section_info (decl, rtl, new_decl_p);\n+\n+  /* For the memory rtx, if it references to rodata section, we can store\n+     NDS32_SYMBOL_FLAG_RODATA flag into symbol_ref rtx so that the\n+     nds32_legitimate_address_p() can determine how to treat such symbol_ref\n+     based on -mcmodel=X and this information.  */\n+  if (MEM_P (rtl) && MEM_READONLY_P (rtl))\n+    {\n+      rtx addr = XEXP (rtl, 0);\n+\n+      if (GET_CODE (addr) == SYMBOL_REF)\n+\t{\n+\t  /* For (mem (symbol_ref X)) case.  */\n+\t  SYMBOL_REF_FLAGS (addr) |= NDS32_SYMBOL_FLAG_RODATA;\n+\t}\n+      else if (GET_CODE (addr) == CONST\n+\t       && GET_CODE (XEXP (addr, 0)) == PLUS)\n+\t{\n+\t  /* For (mem (const (plus (symbol_ref X) (const_int N)))) case.  */\n+\t  rtx plus_op = XEXP (addr, 0);\n+\t  rtx op0 = XEXP (plus_op, 0);\n+\t  rtx op1 = XEXP (plus_op, 1);\n+\n+\t  if (GET_CODE (op0) == SYMBOL_REF && CONST_INT_P (op1))\n+\t    SYMBOL_REF_FLAGS (op0) |= NDS32_SYMBOL_FLAG_RODATA;\n+\t}\n+    }\n+}\n+\n \f\n /* Defining the Output Assembler Language.  */\n \n@@ -3669,6 +3708,9 @@ nds32_target_alignment (rtx label)\n \f\n /* Dividing the Output into Sections (Texts, Data, . . . ).  */\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO nds32_encode_section_info\n+\n \f\n /* Position Independent Code.  */\n "}, {"sha": "e3362b67251e4876475c34a98bccc9ede0cbf478", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511a41d799f2a3b9946d5176ff0f5404077d2bec/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511a41d799f2a3b9946d5176ff0f5404077d2bec/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=511a41d799f2a3b9946d5176ff0f5404077d2bec", "patch": "@@ -24,6 +24,14 @@\n /* The following are auxiliary macros or structure declarations\n    that are used all over the nds32.c and nds32.h.  */\n \n+/* Use SYMBOL_FLAG_MACH_DEP to define our own symbol_ref flag.\n+   It is used in nds32_encode_section_info() to store flag in symbol_ref\n+   in case the symbol should be placed in .rodata section.\n+   So that we can check it in nds32_legitimate_address_p().  */\n+#define NDS32_SYMBOL_FLAG_RODATA \\\n+  (SYMBOL_FLAG_MACH_DEP << 0)\n+#define NDS32_SYMBOL_REF_RODATA_P(x) \\\n+  ((SYMBOL_REF_FLAGS (x) & NDS32_SYMBOL_FLAG_RODATA) != 0)\n \n /* Computing the Length of an Insn.  */\n #define ADJUST_INSN_LENGTH(INSN, LENGTH) \\"}]}