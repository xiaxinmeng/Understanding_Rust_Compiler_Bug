{"sha": "9f635bd13fe9e85872e441b6f3618947f989909a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2MzViZDEzZmU5ZTg1ODcyZTQ0MWI2ZjM2MTg5NDdmOTg5OTA5YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-21T12:57:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-21T12:57:13Z"}, "message": "Avoid adding impossible copies in ira-conflicts.c:process_reg_shuffles\n\nIf an insn requires two operands to be tied, and the input operand dies\nin the insn, IRA acts as though there were a copy from the input to the\noutput with the same execution frequency as the insn.  Allocating the\nsame register to the input and the output then saves the cost of a move.\n\nIf there is no such tie, but an input operand nevertheless dies\nin the insn, IRA creates a similar move, but with an eighth of the\nfrequency.  This helps to ensure that chains of instructions reuse\nregisters in a natural way, rather than using arbitrarily different\nregisters for no reason.\n\nThis heuristic seems to work well in the vast majority of cases.\nHowever, for SVE, the handling of untied operands ends up creating\ncopies between dying predicate registers and vector outputs, even though\nvector and predicate registers are distinct classes and can never be\ntied.  This is a particular problem because the dying predicate tends\nto be the loop control predicate, which is used by most instructions\nin a vector loop and so (rightly) has a very high allocation priority.\nAny copies involving the loop predicate therefore tend to get processed\nbefore copies involving only vector registers.  The end result is that\nwe tend to allocate the output of the last vector instruction in a loop\nahead of its natural place in the allocation order and don't benefit\nfrom chains created between vector registers.\n\nThis patch tries to avoid the problem by not adding register shuffle\ncopies if there appears to be no chance that the two operands could be\nallocated to the same register.\n\n2019-09-21  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* ira-conflicts.c (can_use_same_reg_p): New function.\n\t(process_reg_shuffles): Take an insn parameter.  Ignore cases\n\tin which input operand op_num could seemingly never be allocated\n\tto the same register as the destination.\n\t(add_insn_allocno_copies): Update call to process_reg_shuffles.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_convert_1.c: Remove XFAILs.\n\t* gcc.target/aarch64/sve/cond_convert_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_unary_2.c: Likewise.\n\nFrom-SVN: r276018", "tree": {"sha": "4c25d566ffbf6990b154193195df12886966f327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c25d566ffbf6990b154193195df12886966f327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f635bd13fe9e85872e441b6f3618947f989909a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f635bd13fe9e85872e441b6f3618947f989909a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f635bd13fe9e85872e441b6f3618947f989909a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f635bd13fe9e85872e441b6f3618947f989909a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "681fc0fa40cc4f018cb691d796aa819a24257774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681fc0fa40cc4f018cb691d796aa819a24257774", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681fc0fa40cc4f018cb691d796aa819a24257774"}], "stats": {"total": 67, "additions": 54, "deletions": 13}, "files": [{"sha": "f22714ede983160dd6c4bdae8647c0f6e7fc04f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f635bd13fe9e85872e441b6f3618947f989909a", "patch": "@@ -1,3 +1,11 @@\n+2019-09-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* ira-conflicts.c (can_use_same_reg_p): New function.\n+\t(process_reg_shuffles): Take an insn parameter.  Ignore cases\n+\tin which input operand op_num could seemingly never be allocated\n+\tto the same register as the destination.\n+\t(add_insn_allocno_copies): Update call to process_reg_shuffles.\n+\n 2019-09-21  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* simplify-rtx.c (neg_const_int): Replace with..."}, {"sha": "c199309e7a61c174fd477b3449440fc81852b88c", "filename": "gcc/ira-conflicts.c", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2Fira-conflicts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2Fira-conflicts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-conflicts.c?ref=9f635bd13fe9e85872e441b6f3618947f989909a", "patch": "@@ -325,12 +325,37 @@ process_regs_for_copy (rtx reg1, rtx reg2, bool constraint_p,\n   return true;\n }\n \n-/* Process all of the output registers of the current insn which are\n-   not bound (BOUND_P) and the input register REG (its operand number\n+/* Return true if output operand OUTPUT and input operand INPUT of\n+   INSN can use the same register class for at least one alternative.\n+   INSN is already described in recog_data and recog_op_alt.  */\n+static bool\n+can_use_same_reg_p (rtx_insn *insn, int output, int input)\n+{\n+  alternative_mask preferred = get_preferred_alternatives (insn);\n+  for (int nalt = 0; nalt < recog_data.n_alternatives; nalt++)\n+    {\n+      if (!TEST_BIT (preferred, nalt))\n+\tcontinue;\n+\n+      const operand_alternative *op_alt\n+\t= &recog_op_alt[nalt * recog_data.n_operands];\n+      if (op_alt[input].matches == output)\n+\treturn true;\n+\n+      if (ira_reg_class_intersect[op_alt[input].cl][op_alt[output].cl]\n+\t  != NO_REGS)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n+/* Process all of the output registers of the current insn (INSN) which\n+   are not bound (BOUND_P) and the input register REG (its operand number\n    OP_NUM) which dies in the insn as if there were a move insn between\n    them with frequency FREQ.  */\n static void\n-process_reg_shuffles (rtx reg, int op_num, int freq, bool *bound_p)\n+process_reg_shuffles (rtx_insn *insn, rtx reg, int op_num, int freq,\n+\t\t      bool *bound_p)\n {\n   int i;\n   rtx another_reg;\n@@ -342,7 +367,13 @@ process_reg_shuffles (rtx reg, int op_num, int freq, bool *bound_p)\n \n       if (!REG_SUBREG_P (another_reg) || op_num == i\n \t  || recog_data.operand_type[i] != OP_OUT\n-\t  || bound_p[i])\n+\t  || bound_p[i]\n+\t  || (!can_use_same_reg_p (insn, i, op_num)\n+\t      && (recog_data.constraints[op_num][0] != '%'\n+\t\t  || !can_use_same_reg_p (insn, i, op_num + 1))\n+\t      && (op_num == 0\n+\t\t  || recog_data.constraints[op_num - 1][0] != '%'\n+\t\t  || !can_use_same_reg_p (insn, i, op_num - 1))))\n \tcontinue;\n \n       process_regs_for_copy (reg, another_reg, false, NULL, freq);\n@@ -412,7 +443,8 @@ add_insn_allocno_copies (rtx_insn *insn)\n \t   the corresponding allocno copies.  The cost will not\n \t   correspond to a real move insn cost, so make the frequency\n \t   smaller.  */\n-\tprocess_reg_shuffles (operand, i, freq < 8 ? 1 : freq / 8, bound_p);\n+\tprocess_reg_shuffles (insn, operand, i, freq < 8 ? 1 : freq / 8,\n+\t\t\t      bound_p);\n     }\n }\n "}, {"sha": "d0c01e3138b3797beb2bc374f72684d9409ba7f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f635bd13fe9e85872e441b6f3618947f989909a", "patch": "@@ -1,3 +1,9 @@\n+2019-09-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cond_convert_1.c: Remove XFAILs.\n+\t* gcc.target/aarch64/sve/cond_convert_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_unary_2.c: Likewise.\n+\n 2019-09-20  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* gcc.target/i386/naked-1.c: Alter options to use non-"}, {"sha": "dcc30768f88ef33e456c69634add41174d4dc24b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_1.c?ref=9f635bd13fe9e85872e441b6f3618947f989909a", "patch": "@@ -32,6 +32,5 @@ TEST_ALL (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tucvtf\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n /* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n-/* At the moment we don't manage to avoid using MOVPRFX.  */\n-/* { dg-final { scan-assembler-not {\\tmovprfx\\t} { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n /* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "7e5f2a73ed96a43bf5ca1c5a725f6f979fafac9d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_convert_4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_convert_4.c?ref=9f635bd13fe9e85872e441b6f3618947f989909a", "patch": "@@ -32,6 +32,5 @@ TEST_ALL (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tfcvtzu\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n /* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n-/* At the moment we don't manage to avoid using MOVPRFX.  */\n-/* { dg-final { scan-assembler-not {\\tmovprfx\\t} { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n /* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "991ccf016d1e2233f3d12988d095404d8e9cabbf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_unary_2.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f635bd13fe9e85872e441b6f3618947f989909a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_unary_2.c?ref=9f635bd13fe9e85872e441b6f3618947f989909a", "patch": "@@ -54,8 +54,5 @@ TEST_ALL (DEF_LOOP)\n /* { dg-final { scan-assembler-times {\\tfneg\\tz[0-9]+\\.d, p[0-7]/m,} 1 } } */\n \n /* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n-/* At the moment we don't manage to avoid using MOVPRFX for the\n-   floating-point functions.  */\n-/* { dg-final { scan-assembler-not {\\tmovprfx\\t} { xfail *-*-* } } } */\n-/* { dg-final { scan-assembler-times {\\tmovprfx\\t} 6 } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n /* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}]}