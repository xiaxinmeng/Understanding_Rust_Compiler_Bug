{"sha": "4cbc9d8b346b932f34828a51e8822881413951b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNiYzlkOGIzNDZiOTMyZjM0ODI4YTUxZTg4MjI4ODE0MTM5NTFiNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-07T20:43:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-07T20:43:49Z"}, "message": "libstdc++: Make relational operators work with const guarded iterators (PR 92472)\n\nThis is a correct fix for the incorrect cppcheck suggestion to make\nthese parameters const. In order to that, the dereference operators need\nto be const. The conversions to the underlying iterator can be const\ntoo.\n\n\tPR c/92472\n\t* include/parallel/multiway_merge.h (_GuardedIterator::operator*)\n\t(_GuardedIterator::operator _RAIter, _UnguardedIterator::operator*)\n\t(_UnguardedIterator::operator _RAIter): Add const qualifier.\n\t(operator<(_GuardedIterator&, _GuardedIterator&)\n\t(operator<=(_GuardedIterator&, _GuardedIterator&)\n\t(operator<(_UnguardedIterator&, _UnguardedIterator&)\n\t(operator<=(_UnguardedIterator&, _UnguardedIterator&): Change\n\tparameters to const references.", "tree": {"sha": "934e9347ab3a49342663d746ea67ba1524faa3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/934e9347ab3a49342663d746ea67ba1524faa3d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cbc9d8b346b932f34828a51e8822881413951b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbc9d8b346b932f34828a51e8822881413951b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cbc9d8b346b932f34828a51e8822881413951b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbc9d8b346b932f34828a51e8822881413951b7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7100843831147a034fe37d231c54ac53ceace45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7100843831147a034fe37d231c54ac53ceace45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7100843831147a034fe37d231c54ac53ceace45"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "d0751909dd2dc74fa350581a9fd69354208bc334", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbc9d8b346b932f34828a51e8822881413951b7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbc9d8b346b932f34828a51e8822881413951b7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4cbc9d8b346b932f34828a51e8822881413951b7", "patch": "@@ -27,6 +27,18 @@\n \t* config/abi/post/sparc-solaris/sparcv9/baseline_symbols.txt:\n \tLikewise.\n \n+2020-05-07  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c/92472\n+\t* include/parallel/multiway_merge.h (_GuardedIterator::operator*)\n+\t(_GuardedIterator::operator _RAIter, _UnguardedIterator::operator*)\n+\t(_UnguardedIterator::operator _RAIter): Add const qualifier.\n+\t(operator<(_GuardedIterator&, _GuardedIterator&)\n+\t(operator<=(_GuardedIterator&, _GuardedIterator&)\n+\t(operator<(_UnguardedIterator&, _UnguardedIterator&)\n+\t(operator<=(_UnguardedIterator&, _UnguardedIterator&): Change\n+\tparameters to const references.\n+\n 2020-05-06  Martin Liska  <mliska@suse.cz>\n \n \tRevert:"}, {"sha": "52a8b2ca9e766fe6266988a5ae652e625b6e5a1e", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbc9d8b346b932f34828a51e8822881413951b7/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbc9d8b346b932f34828a51e8822881413951b7/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=4cbc9d8b346b932f34828a51e8822881413951b7", "patch": "@@ -104,21 +104,21 @@ namespace __gnu_parallel\n       /** @brief Dereference operator.\n       *  @return Referenced element. */\n       typename std::iterator_traits<_RAIter>::value_type&\n-      operator*()\n+      operator*() const\n       { return *_M_current; }\n \n       /** @brief Convert to wrapped iterator.\n       *  @return Wrapped iterator. */\n-      operator _RAIter()\n+      operator _RAIter() const\n       { return _M_current; }\n \n       /** @brief Compare two elements referenced by guarded iterators.\n        *  @param __bi1 First iterator.\n        *  @param __bi2 Second iterator.\n        *  @return @c true if less. */\n       friend bool\n-      operator<(_GuardedIterator<_RAIter, _Compare>& __bi1,\n-\t\t_GuardedIterator<_RAIter, _Compare>& __bi2)\n+      operator<(const _GuardedIterator<_RAIter, _Compare>& __bi1,\n+\t\tconst _GuardedIterator<_RAIter, _Compare>& __bi2)\n       {\n \tif (__bi1._M_current == __bi1._M_end)       // __bi1 is sup\n \t  return __bi2._M_current == __bi2._M_end;  // __bi2 is not sup\n@@ -132,8 +132,8 @@ namespace __gnu_parallel\n        *  @param __bi2 Second iterator.\n        *  @return @c True if less equal. */\n       friend bool\n-      operator<=(_GuardedIterator<_RAIter, _Compare>& __bi1,\n-\t\t _GuardedIterator<_RAIter, _Compare>& __bi2)\n+      operator<=(const _GuardedIterator<_RAIter, _Compare>& __bi1,\n+\t\t const _GuardedIterator<_RAIter, _Compare>& __bi2)\n       {\n \tif (__bi2._M_current == __bi2._M_end)       // __bi1 is sup\n \t  return __bi1._M_current != __bi1._M_end;  // __bi2 is not sup\n@@ -174,21 +174,21 @@ namespace __gnu_parallel\n       /** @brief Dereference operator.\n       *  @return Referenced element. */\n       typename std::iterator_traits<_RAIter>::value_type&\n-      operator*()\n+      operator*() const\n       { return *_M_current; }\n \n       /** @brief Convert to wrapped iterator.\n       *  @return Wrapped iterator. */\n-      operator _RAIter()\n+      operator _RAIter() const\n       { return _M_current; }\n \n       /** @brief Compare two elements referenced by unguarded iterators.\n        *  @param __bi1 First iterator.\n        *  @param __bi2 Second iterator.\n        *  @return @c true if less. */\n       friend bool\n-      operator<(_UnguardedIterator<_RAIter, _Compare>& __bi1,\n-\t\t_UnguardedIterator<_RAIter, _Compare>& __bi2)\n+      operator<(const _UnguardedIterator<_RAIter, _Compare>& __bi1,\n+\t\tconst _UnguardedIterator<_RAIter, _Compare>& __bi2)\n       {\n \t// Normal compare.\n \treturn (__bi1.__comp)(*__bi1, *__bi2);\n@@ -199,8 +199,8 @@ namespace __gnu_parallel\n        *  @param __bi2 Second iterator.\n        *  @return @c True if less equal. */\n       friend bool\n-      operator<=(_UnguardedIterator<_RAIter, _Compare>& __bi1,\n-\t\t _UnguardedIterator<_RAIter, _Compare>& __bi2)\n+      operator<=(const _UnguardedIterator<_RAIter, _Compare>& __bi1,\n+\t\t const _UnguardedIterator<_RAIter, _Compare>& __bi2)\n       {\n \t// Normal compare.\n \treturn !(__bi1.__comp)(*__bi2, *__bi1);"}]}