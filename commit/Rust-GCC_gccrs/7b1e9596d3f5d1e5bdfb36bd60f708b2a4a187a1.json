{"sha": "7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IxZTk1OTZkM2Y1ZDFlNWJkZmIzNmJkNjBmNzA4YjJhNGExODdhMQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2011-07-21T22:56:50Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2011-07-21T22:56:50Z"}, "message": "Record the loop level that defines a clast_name.\n\n2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-clast-to-gimple.c (struct clast_name_index): Add level.\n\t(new_clast_name_index): Add level parameter.\n\t(clast_name_to_level): New.\n\t(save_clast_name_index): Add level parameter.\n\t(newivs_to_depth_to_newiv): Removed.\n\t(clast_name_to_gcc): Inlined newivs_to_depth_to_newiv.\n\t(graphite_create_new_loop): Add level parameter.  Pass level to\n\tsave_clast_name_index.\n\t(translate_clast_for_loop): Pass level to graphite_create_new_loop.\n\t(create_params_index): Pass level to save_clast_name_index.\n\nFrom-SVN: r176598", "tree": {"sha": "94afacdb40de700aa3fbccc78d4e59cdea8dc563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94afacdb40de700aa3fbccc78d4e59cdea8dc563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e6568dbf5230328f4c758638e7664e2ffbcc8bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6568dbf5230328f4c758638e7664e2ffbcc8bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e6568dbf5230328f4c758638e7664e2ffbcc8bb"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "9877462d5fe600b42433858d2f935eda0c848b0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1", "patch": "@@ -1,3 +1,16 @@\n+2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-clast-to-gimple.c (struct clast_name_index): Add level.\n+\t(new_clast_name_index): Add level parameter.\n+\t(clast_name_to_level): New.\n+\t(save_clast_name_index): Add level parameter.\n+\t(newivs_to_depth_to_newiv): Removed.\n+\t(clast_name_to_gcc): Inlined newivs_to_depth_to_newiv.\n+\t(graphite_create_new_loop): Add level parameter.  Pass level to\n+\tsave_clast_name_index.\n+\t(translate_clast_for_loop): Pass level to graphite_create_new_loop.\n+\t(create_params_index): Pass level to save_clast_name_index.\n+\n 2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-clast-to-gimple.c (graphite_create_new_loop): Do not"}, {"sha": "c442f1eb3d673e53fdaf88f1025a6513990c27bb", "filename": "gcc/graphite-clast-to-gimple.c", "status": "modified", "additions": 41, "deletions": 20, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1/gcc%2Fgraphite-clast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1/gcc%2Fgraphite-clast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-clast-to-gimple.c?ref=7b1e9596d3f5d1e5bdfb36bd60f708b2a4a187a1", "patch": "@@ -56,26 +56,55 @@ graphite_verify (void)\n #endif\n }\n \n-/* Stores the INDEX in a vector for a given clast NAME.  */\n+/* Stores the INDEX in a vector and the loop nesting LEVEL for a given\n+   clast NAME.  */\n \n typedef struct clast_name_index {\n   int index;\n+  int level;\n   const char *name;\n } *clast_name_index_p;\n \n /* Returns a pointer to a new element of type clast_name_index_p built\n-   from NAME and INDEX.  */\n+   from NAME, LEVEL, and INDEX.  */\n \n static inline clast_name_index_p\n-new_clast_name_index (const char *name, int index)\n+new_clast_name_index (const char *name, int index, int level)\n {\n   clast_name_index_p res = XNEW (struct clast_name_index);\n \n   res->name = name;\n+  res->level = level;\n   res->index = index;\n   return res;\n }\n \n+/* For a given clast NAME, returns -1 if NAME is not in the\n+   INDEX_TABLE, otherwise returns the loop level for the induction\n+   variable NAME, or if it is a parameter, the parameter number in the\n+   vector of parameters.  */\n+\n+static inline int\n+clast_name_to_level (clast_name_p name, htab_t index_table)\n+{\n+  struct clast_name_index tmp;\n+  PTR *slot;\n+\n+#ifdef CLOOG_ORG\n+  gcc_assert (name->type == clast_expr_name);\n+  tmp.name = ((const struct clast_name *) name)->name;\n+#else\n+  tmp.name = name;\n+#endif\n+\n+  slot = htab_find_slot (index_table, &tmp, NO_INSERT);\n+\n+  if (slot && *slot)\n+    return ((struct clast_name_index *) *slot)->level;\n+\n+  return -1;\n+}\n+\n /* For a given clast NAME, returns -1 if it does not correspond to any\n    parameter, or otherwise, returns the index in the PARAMS or\n    SCATTERING_DIMENSIONS vector.  */\n@@ -101,10 +130,11 @@ clast_name_to_index (clast_name_p name, htab_t index_table)\n   return -1;\n }\n \n-/* Records in INDEX_TABLE the INDEX for NAME.  */\n+/* Records in INDEX_TABLE the INDEX and LEVEL for NAME.  */\n \n static inline void\n-save_clast_name_index (htab_t index_table, const char *name, int index)\n+save_clast_name_index (htab_t index_table, const char *name,\n+\t\t       int index, int level)\n {\n   struct clast_name_index tmp;\n   PTR *slot;\n@@ -116,7 +146,7 @@ save_clast_name_index (htab_t index_table, const char *name, int index)\n     {\n       free (*slot);\n \n-      *slot = new_clast_name_index (name, index);\n+      *slot = new_clast_name_index (name, index, level);\n     }\n }\n \n@@ -139,15 +169,6 @@ eq_clast_name_indexes (const void *e1, const void *e2)\n   return (elt1->name == elt2->name);\n }\n \n-/* For a given scattering dimension, return the new induction variable\n-   associated to it.  */\n-\n-static inline tree\n-newivs_to_depth_to_newiv (VEC (tree, heap) *newivs, int depth)\n-{\n-  return VEC_index (tree, newivs, depth);\n-}\n-\n \f\n \n /* Returns the tree variable from the name NAME that was given in\n@@ -172,7 +193,7 @@ clast_name_to_gcc (clast_name_p name, sese region, VEC (tree, heap) *newivs,\n   index = clast_name_to_index (name, newivs_index);\n   gcc_assert (index >= 0);\n \n-  return newivs_to_depth_to_newiv (newivs, index);\n+  return VEC_index (tree, newivs, index);\n }\n \n /* Returns the signed maximal precision type for expressions TYPE1 and TYPE2.  */\n@@ -703,7 +724,7 @@ graphite_create_new_loop (edge entry_edge,\n \t\t\t  struct clast_for *stmt,\n \t\t\t  loop_p outer, VEC (tree, heap) **newivs,\n \t\t\t  htab_t newivs_index,\n-\t\t\t  tree type, tree lb, tree ub)\n+\t\t\t  tree type, tree lb, tree ub, int level)\n {\n   tree stride = gmp_cst_to_tree (type, stmt->stride);\n   tree ivvar = create_tmp_var (type, \"graphite_IV\");\n@@ -715,7 +736,7 @@ graphite_create_new_loop (edge entry_edge,\n   add_referenced_var (ivvar);\n \n   save_clast_name_index (newivs_index, stmt->iterator,\n-\t\t\t VEC_length (tree, *newivs));\n+\t\t\t VEC_length (tree, *newivs), level);\n   VEC_safe_push (tree, heap, *newivs, iv);\n   return loop;\n }\n@@ -942,7 +963,7 @@ translate_clast_for_loop (sese region, loop_p context_loop,\n   struct loop *loop = graphite_create_new_loop (next_e, stmt,\n  \t\t\t\t\t\tcontext_loop, newivs,\n \t\t\t\t\t\tnewivs_index,\n-\t\t\t\t\t\ttype, lb, ub);\n+\t\t\t\t\t\ttype, lb, ub, level);\n   edge last_e = single_exit (loop);\n   edge to_body = single_succ_edge (loop->header);\n   basic_block after = to_body->dest;\n@@ -1423,7 +1444,7 @@ create_params_index (htab_t index_table, CloogProgram *prog) {\n   int i;\n \n   for (i = 0; i < nb_parameters; i++)\n-    save_clast_name_index (index_table, parameters[i], i);\n+    save_clast_name_index (index_table, parameters[i], i, i);\n }\n \n /* GIMPLE Loop Generator: generates loops from STMT in GIMPLE form for"}]}