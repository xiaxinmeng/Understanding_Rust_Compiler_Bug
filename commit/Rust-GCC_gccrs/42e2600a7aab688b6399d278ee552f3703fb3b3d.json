{"sha": "42e2600a7aab688b6399d278ee552f3703fb3b3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJlMjYwMGE3YWFiNjg4YjYzOTlkMjc4ZWU1NTJmMzcwM2ZiM2IzZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-19T11:39:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-19T11:39:55Z"}, "message": "[multiple changes]\n\n2017-01-19  Steve Baird  <baird@adacore.com>\n\n\t* sem_util.ads: Add new Use_Full_View Boolean parameter to\n\tGet_Index_Bounds.\n\t* sem_util.adb (Get_Index_Bounds): replace calls to Scalar_Range with\n\tcalls to a newly-defined Scalar_Range_Of_Right_View function.\n\n2017-01-19  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb: minor fix of unbalanced parens in comment\n\t* lib-xref.ads (Traverse_Compilation_Unit): declaration moved\n\tto visible part of the package to allow re-use in GNATprove.\n\t* lib-xref-spark_specific.adb (Traverse_Stub): routine refactored\n\tfrom repeated code of Traverse_Compilation_Unit.\n\t(Traverse_Declaration_Or_Statement): fixed detection of\n\tgeneric subprograms and packages; also, iteration over case\n\tstatement alternatives rewritten to avoid testing if the first\n\talternative is present (since it must be present due to Ada\n\tsyntax restrictions).\n\nFrom-SVN: r244617", "tree": {"sha": "ef3fb10955bcea424140c926f3c34f05f911ddb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef3fb10955bcea424140c926f3c34f05f911ddb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42e2600a7aab688b6399d278ee552f3703fb3b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e2600a7aab688b6399d278ee552f3703fb3b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42e2600a7aab688b6399d278ee552f3703fb3b3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42e2600a7aab688b6399d278ee552f3703fb3b3d/comments", "author": null, "committer": null, "parents": [{"sha": "d6e1090ae6b767f5ce0f0237a9763bed24545dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e1090ae6b767f5ce0f0237a9763bed24545dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e1090ae6b767f5ce0f0237a9763bed24545dd1"}], "stats": {"total": 170, "additions": 115, "deletions": 55}, "files": [{"sha": "55f5b1f2d1dcd0648df7a243c38779ee68ac6188", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=42e2600a7aab688b6399d278ee552f3703fb3b3d", "patch": "@@ -1,3 +1,23 @@\n+2017-01-19  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.ads: Add new Use_Full_View Boolean parameter to\n+\tGet_Index_Bounds.\n+\t* sem_util.adb (Get_Index_Bounds): replace calls to Scalar_Range with\n+\tcalls to a newly-defined Scalar_Range_Of_Right_View function.\n+\n+2017-01-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb: minor fix of unbalanced parens in comment\n+\t* lib-xref.ads (Traverse_Compilation_Unit): declaration moved\n+\tto visible part of the package to allow re-use in GNATprove.\n+\t* lib-xref-spark_specific.adb (Traverse_Stub): routine refactored\n+\tfrom repeated code of Traverse_Compilation_Unit.\n+\t(Traverse_Declaration_Or_Statement): fixed detection of\n+\tgeneric subprograms and packages; also, iteration over case\n+\tstatement alternatives rewritten to avoid testing if the first\n+\talternative is present (since it must be present due to Ada\n+\tsyntax restrictions).\n+\n 2017-01-19  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch6.adb (Expand_N_Subprogram_Body): Mark the spec as"}, {"sha": "057dc9e2a6bc30145e17baa9fbf5c53447e38daf", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=42e2600a7aab688b6399d278ee552f3703fb3b3d", "patch": "@@ -1439,7 +1439,7 @@ begin\n       --  are delayed till now, since it is perfectly possible for gigi to\n       --  generate errors, modify the tree (in particular by setting flags\n       --  indicating that elaboration is required, and also to back annotate\n-      --  representation information for List_Rep_Info.\n+      --  representation information for List_Rep_Info).\n \n       Errout.Finalize (Last_Call => True);\n       Errout.Output_Messages;"}, {"sha": "e7239ecd1044bfda9ad66fb1059a099830aa33f3", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 51, "deletions": 47, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=42e2600a7aab688b6399d278ee552f3703fb3b3d", "patch": "@@ -99,13 +99,6 @@ package body SPARK_Specific is\n    function Entity_Hash (E : Entity_Id) return Entity_Hashed_Range;\n    --  Hash function for hash table\n \n-   generic\n-      with procedure Process (N : Node_Id) is <>;\n-   procedure Traverse_Compilation_Unit (CU : Node_Id; Inside_Stubs : Boolean);\n-   --  Call Process on all declarations within compilation unit CU. If flag\n-   --  Inside_Stubs is True, then the body of stubs is also traversed. Generic\n-   --  declarations are ignored.\n-\n    --------------------\n    -- Add_SPARK_File --\n    --------------------\n@@ -1269,63 +1262,54 @@ package body SPARK_Specific is\n       ---------------------------------------\n \n       procedure Traverse_Declaration_Or_Statement (N : Node_Id) is\n+         function Traverse_Stub (N : Node_Id) return Boolean;\n+         --  Returns True iff stub N should be traversed\n+\n+         function Traverse_Stub (N : Node_Id) return Boolean is\n+         begin\n+            pragma Assert (Nkind_In (N, N_Package_Body_Stub,\n+                                        N_Protected_Body_Stub,\n+                                        N_Subprogram_Body_Stub,\n+                                        N_Task_Body_Stub));\n+\n+            return Inside_Stubs and then Present (Library_Unit (N));\n+         end Traverse_Stub;\n+\n+      --  Start of processing for Traverse_Declaration_Or_Statement\n+\n       begin\n          case Nkind (N) is\n             when N_Package_Declaration =>\n                Traverse_Visible_And_Private_Parts (Specification (N));\n \n             when N_Package_Body =>\n-               if Ekind (Defining_Entity (N)) /= E_Generic_Package then\n-                  Traverse_Package_Body (N);\n-               end if;\n+               Traverse_Package_Body (N);\n \n             when N_Package_Body_Stub =>\n-               if Present (Library_Unit (N)) then\n-                  declare\n-                     Body_N : constant Node_Id := Get_Body_From_Stub (N);\n-                  begin\n-                     if Inside_Stubs\n-                       and then Ekind (Defining_Entity (Body_N)) /=\n-                                  E_Generic_Package\n-                     then\n-                        Traverse_Package_Body (Body_N);\n-                     end if;\n-                  end;\n+               if Traverse_Stub (N) then\n+                  Traverse_Package_Body (Get_Body_From_Stub (N));\n                end if;\n \n             when N_Subprogram_Body =>\n-               if not Is_Generic_Subprogram (Defining_Entity (N)) then\n-                  Traverse_Subprogram_Body (N);\n-               end if;\n+               Traverse_Subprogram_Body (N);\n \n             when N_Entry_Body =>\n                Traverse_Subprogram_Body (N);\n \n             when N_Subprogram_Body_Stub =>\n-               if Present (Library_Unit (N)) then\n-                  declare\n-                     Body_N : constant Node_Id := Get_Body_From_Stub (N);\n-                  begin\n-                     if Inside_Stubs\n-                       and then\n-                         not Is_Generic_Subprogram (Defining_Entity (Body_N))\n-                     then\n-                        Traverse_Subprogram_Body (Body_N);\n-                     end if;\n-                  end;\n+               if Traverse_Stub (N) then\n+                  Traverse_Subprogram_Body (Get_Body_From_Stub (N));\n                end if;\n \n             when N_Protected_Body =>\n                Traverse_Protected_Body (N);\n \n             when N_Protected_Body_Stub =>\n-               if Present (Library_Unit (N)) and then Inside_Stubs then\n+               if Traverse_Stub (N) then\n                   Traverse_Protected_Body (Get_Body_From_Stub (N));\n                end if;\n \n-            when N_Protected_Type_Declaration\n-               | N_Single_Protected_Declaration\n-            =>\n+            when N_Protected_Type_Declaration =>\n                Traverse_Visible_And_Private_Parts (Protected_Definition (N));\n \n             when N_Task_Definition =>\n@@ -1335,7 +1319,7 @@ package body SPARK_Specific is\n                Traverse_Task_Body (N);\n \n             when N_Task_Body_Stub =>\n-               if Present (Library_Unit (N)) and then Inside_Stubs then\n+               if Traverse_Stub (N) then\n                   Traverse_Task_Body (Get_Body_From_Stub (N));\n                end if;\n \n@@ -1372,12 +1356,12 @@ package body SPARK_Specific is\n                --  Process case branches\n \n                declare\n-                  Alt : Node_Id;\n+                  Alt : Node_Id := First (Alternatives (N));\n                begin\n-                  Alt := First (Alternatives (N));\n-                  while Present (Alt) loop\n+                  loop\n                      Traverse_Declarations_Or_Statements (Statements (Alt));\n                      Next (Alt);\n+                     exit when No (Alt);\n                   end loop;\n                end;\n \n@@ -1458,8 +1442,18 @@ package body SPARK_Specific is\n       -- Traverse_Package_Body --\n       ---------------------------\n \n-      procedure Traverse_Package_Body (N : Node_Id) renames\n-        Traverse_Declarations_And_HSS;\n+      procedure Traverse_Package_Body (N : Node_Id) is\n+         Spec_E : constant Entity_Id := Unique_Defining_Entity (N);\n+      begin\n+         case Ekind (Spec_E) is\n+            when E_Package =>\n+               Traverse_Declarations_And_HSS (N);\n+            when E_Generic_Package =>\n+               null;\n+            when others =>\n+               raise Program_Error;\n+         end case;\n+      end Traverse_Package_Body;\n \n       -----------------------------\n       -- Traverse_Protected_Body --\n@@ -1474,8 +1468,18 @@ package body SPARK_Specific is\n       -- Traverse_Subprogram_Body --\n       ------------------------------\n \n-      procedure Traverse_Subprogram_Body (N : Node_Id) renames\n-        Traverse_Declarations_And_HSS;\n+      procedure Traverse_Subprogram_Body (N : Node_Id) is\n+         Spec_E : constant Entity_Id := Unique_Defining_Entity (N);\n+      begin\n+         case Ekind (Spec_E) is\n+            when E_Function | E_Procedure | Entry_Kind =>\n+               Traverse_Declarations_And_HSS (N);\n+            when Generic_Subprogram_Kind =>\n+               null;\n+            when others =>\n+               raise Program_Error;\n+         end case;\n+      end Traverse_Subprogram_Body;\n \n       ------------------------\n       -- Traverse_Task_Body --"}, {"sha": "3713bdbbffdf81b9e4d62aea421caf80b2943db1", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=42e2600a7aab688b6399d278ee552f3703fb3b3d", "patch": "@@ -651,6 +651,14 @@ package Lib.Xref is\n       --  the information collected in the tables in library package called\n       --  SPARK_Xrefs, and using routines in Lib.Util.\n \n+      generic\n+         with procedure Process (N : Node_Id) is <>;\n+      procedure Traverse_Compilation_Unit (CU           : Node_Id;\n+                                           Inside_Stubs : Boolean);\n+      --  Call Process on all declarations within compilation unit CU. If\n+      --  Inside_Stubs is True, then the body of stubs is also traversed.\n+      --  Generic declarations are ignored.\n+\n    end SPARK_Specific;\n \n    -----------------"}, {"sha": "56171e27e3a11cc4fa20dc06125a137d2a1fc36a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=42e2600a7aab688b6399d278ee552f3703fb3b3d", "patch": "@@ -8037,10 +8037,31 @@ package body Sem_Util is\n    -- Get_Index_Bounds --\n    ----------------------\n \n-   procedure Get_Index_Bounds (N : Node_Id; L, H : out Node_Id) is\n+   procedure Get_Index_Bounds\n+     (N : Node_Id;\n+      L, H : out Node_Id;\n+      Use_Full_View : Boolean := False)\n+   is\n       Kind : constant Node_Kind := Nkind (N);\n       R    : Node_Id;\n \n+      function Scalar_Range_Of_Right_View return Node_Id;\n+      --  Call Scalar_Range with argument determined by Use_Full_View\n+      --  parameter.\n+\n+      --------------------------------\n+      -- Scalar_Range_Of_Right_View --\n+      --------------------------------\n+\n+      function Scalar_Range_Of_Right_View return Node_Id is\n+         E : Entity_Id := Entity (N);\n+      begin\n+         if Use_Full_View and then Present (Full_View (E)) then\n+            E := Full_View (E);\n+         end if;\n+         return Scalar_Range (E);\n+      end Scalar_Range_Of_Right_View;\n+\n    begin\n       if Kind = N_Range then\n          L := Low_Bound (N);\n@@ -8060,16 +8081,16 @@ package body Sem_Util is\n          end if;\n \n       elsif Is_Entity_Name (N) and then Is_Type (Entity (N)) then\n-         if Error_Posted (Scalar_Range (Entity (N))) then\n+         if Error_Posted (Scalar_Range_Of_Right_View) then\n             L := Error;\n             H := Error;\n \n-         elsif Nkind (Scalar_Range (Entity (N))) = N_Subtype_Indication then\n-            Get_Index_Bounds (Scalar_Range (Entity (N)), L, H);\n+         elsif Nkind (Scalar_Range_Of_Right_View) = N_Subtype_Indication then\n+            Get_Index_Bounds (Scalar_Range_Of_Right_View, L, H);\n \n          else\n-            L := Low_Bound  (Scalar_Range (Entity (N)));\n-            H := High_Bound (Scalar_Range (Entity (N)));\n+            L := Low_Bound  (Scalar_Range_Of_Right_View);\n+            H := High_Bound (Scalar_Range_Of_Right_View);\n          end if;\n \n       else"}, {"sha": "5b661c97e8bdac6acfe00b6a7d9675a6b3d59921", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42e2600a7aab688b6399d278ee552f3703fb3b3d/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=42e2600a7aab688b6399d278ee552f3703fb3b3d", "patch": "@@ -891,11 +891,18 @@ package Sem_Util is\n    --  ancestor declared in a parent unit, even if there is an intermediate\n    --  derivation that does not see the full view of that ancestor.\n \n-   procedure Get_Index_Bounds (N : Node_Id; L, H : out Node_Id);\n+   procedure Get_Index_Bounds\n+     (N : Node_Id;\n+      L, H : out Node_Id;\n+      Use_Full_View : Boolean := False);\n    --  This procedure assigns to L and H respectively the values of the low and\n    --  high bounds of node N, which must be a range, subtype indication, or the\n    --  name of a scalar subtype. The result in L, H may be set to Error if\n    --  there was an earlier error in the range.\n+   --  Use_Full_View is intended for use by clients other than the compiler\n+   --  (specifically, gnat2scil) to indicate that we want the full view if\n+   --  the index type turns out to be a partial view; this case should\n+   --  not arise during normal compilation of semantically correct programs.\n \n    function Get_Enum_Lit_From_Pos\n      (T   : Entity_Id;"}]}