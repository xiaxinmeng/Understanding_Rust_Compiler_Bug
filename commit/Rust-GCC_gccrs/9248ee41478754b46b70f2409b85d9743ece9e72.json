{"sha": "9248ee41478754b46b70f2409b85d9743ece9e72", "node_id": "C_kwDOANBUbNoAKDkyNDhlZTQxNDc4NzU0YjQ2YjcwZjI0MDliODVkOTc0M2VjZTllNzI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-16T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-16T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "9f8b18d184d3c9ad1a384e00db82fe8ba2912af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f8b18d184d3c9ad1a384e00db82fe8ba2912af5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9248ee41478754b46b70f2409b85d9743ece9e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9248ee41478754b46b70f2409b85d9743ece9e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9248ee41478754b46b70f2409b85d9743ece9e72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9248ee41478754b46b70f2409b85d9743ece9e72/comments", "author": null, "committer": null, "parents": [{"sha": "9d6a0f388eb048f8d87f47af78f07b5ce513bfe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6a0f388eb048f8d87f47af78f07b5ce513bfe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d6a0f388eb048f8d87f47af78f07b5ce513bfe6"}], "stats": {"total": 175, "additions": 174, "deletions": 1}, "files": [{"sha": "7f75ecacf18e06936e83fddd44b1fd7cd28098c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9248ee41478754b46b70f2409b85d9743ece9e72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9248ee41478754b46b70f2409b85d9743ece9e72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9248ee41478754b46b70f2409b85d9743ece9e72", "patch": "@@ -1,3 +1,71 @@\n+2022-01-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/63272\n+\t* diagnostic-spec.c (nowarn_spec_t::nowarn_spec_t): Handle\n+\t-Wdangling-pointer.\n+\t* doc/invoke.texi (-Wdangling-pointer): Document new option.\n+\t* gimple-ssa-warn-access.cc (pass_waccess::clone): Set new member.\n+\t(pass_waccess::check_pointer_uses): New function.\n+\t(pass_waccess::gimple_call_return_arg): New function.\n+\t(pass_waccess::gimple_call_return_arg_ref): New function.\n+\t(pass_waccess::check_call_dangling): New function.\n+\t(pass_waccess::check_dangling_uses): New function overloads.\n+\t(pass_waccess::check_dangling_stores): New function.\n+\t(pass_waccess::check_dangling_stores): New function.\n+\t(pass_waccess::m_clobbers): New data member.\n+\t(pass_waccess::m_func): New data member.\n+\t(pass_waccess::m_run_number): New data member.\n+\t(pass_waccess::m_check_dangling_p): New data member.\n+\t(pass_waccess::check_alloca): Check m_early_checks_p.\n+\t(pass_waccess::check_alloc_size_call): Same.\n+\t(pass_waccess::check_strcat): Same.\n+\t(pass_waccess::check_strncat): Same.\n+\t(pass_waccess::check_stxcpy): Same.\n+\t(pass_waccess::check_stxncpy): Same.\n+\t(pass_waccess::check_strncmp): Same.\n+\t(pass_waccess::check_memop_access): Same.\n+\t(pass_waccess::check_read_access): Same.\n+\t(pass_waccess::check_builtin): Call check_pointer_uses.\n+\t(pass_waccess::warn_invalid_pointer): Add arguments.\n+\t(is_auto_decl): New function.\n+\t(pass_waccess::check_stmt): New function.\n+\t(pass_waccess::check_block): Call check_stmt.\n+\t(pass_waccess::execute): Call check_dangling_uses,\n+\tcheck_dangling_stores.  Empty m_clobbers.\n+\t* passes.def (pass_warn_access): Invoke pass two more times.\n+\n+2022-01-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/80532\n+\t* common.opt (-Wuse-after-free): New options.\n+\t* diagnostic-spec.c (nowarn_spec_t::nowarn_spec_t): Handle\n+\tOPT_Wreturn_local_addr and OPT_Wuse_after_free_.\n+\t* diagnostic-spec.h (NW_DANGLING): New enumerator.\n+\t* doc/invoke.texi (-Wuse-after-free): Document new option.\n+\t* gimple-ssa-warn-access.cc (pass_waccess::check_call): Rename...\n+\t(pass_waccess::check_call_access): ...to this.\n+\t(pass_waccess::check): Rename...\n+\t(pass_waccess::check_block): ...to this.\n+\t(pass_waccess::check_pointer_uses): New function.\n+\t(pass_waccess::gimple_call_return_arg): New function.\n+\t(pass_waccess::warn_invalid_pointer): New function.\n+\t(pass_waccess::check_builtin): Handle free and realloc.\n+\t(gimple_use_after_inval_p): New function.\n+\t(get_realloc_lhs): New function.\n+\t(maybe_warn_mismatched_realloc): New function.\n+\t(pointers_related_p): New function.\n+\t(pass_waccess::check_call): Call check_pointer_uses.\n+\t(pass_waccess::execute): Compute and free dominance info.\n+\n+2022-01-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-expand.c (ix86_expand_sse_movcc): Use\n+\texpand_simple_unop and expand_simple_binop instead of manually\n+\tconstructing NOT, AND and IOR RTXes.  Use vector_all_ones_operand\n+\tconsistently.  Eliminate common subexpressions and simplify code.\n+\t* config/i386/sse.md (<any_logic:code><MODEF:mode>3): New expander.\n+\t(<any_logic:code><MODEF:mode>3): Make public.\n+\n 2022-01-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* ipa-param-manipulation.c (ipa_dump_adjusted_parameters): Dump"}, {"sha": "20764d6add79af5e6a0d4a35fe0740178fa0fde7", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9248ee41478754b46b70f2409b85d9743ece9e72/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9248ee41478754b46b70f2409b85d9743ece9e72/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9248ee41478754b46b70f2409b85d9743ece9e72", "patch": "@@ -1 +1 @@\n-20220115\n+20220116"}, {"sha": "487be7b499b18d9bdc1f4b82f0dd7546f810a167", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9248ee41478754b46b70f2409b85d9743ece9e72/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9248ee41478754b46b70f2409b85d9743ece9e72/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9248ee41478754b46b70f2409b85d9743ece9e72", "patch": "@@ -1,3 +1,13 @@\n+2022-01-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/63272\n+\t* c.opt (-Wdangling-pointer): New option.\n+\n+2022-01-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/80532\n+\t* c.opt (-Wuse-after-free): New options.\n+\n 2022-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-attribs.c (c_common_attribute_table): Add \"tainted_args\"."}, {"sha": "a2585f9b0d331e0e74f8ed78a64ea3dacc9546e5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9248ee41478754b46b70f2409b85d9743ece9e72/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9248ee41478754b46b70f2409b85d9743ece9e72/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9248ee41478754b46b70f2409b85d9743ece9e72", "patch": "@@ -1,3 +1,12 @@\n+2022-01-15  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/83079\n+\t* target-memory.c (gfc_interpret_character): Result length is\n+\tin bytes and thus depends on the character kind.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_transfer): Compute correct\n+\tstring length for the result of the TRANSFER intrinsic and for\n+\ttemporaries for the different character kinds.\n+\n 2022-01-14  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/99256"}, {"sha": "e04131bf909f9f21f5241ce38a82578089835637", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9248ee41478754b46b70f2409b85d9743ece9e72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9248ee41478754b46b70f2409b85d9743ece9e72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9248ee41478754b46b70f2409b85d9743ece9e72", "patch": "@@ -1,3 +1,44 @@\n+2022-01-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/63272\n+\t* g++.dg/warn/Wfree-nonheap-object-6.C: Disable valid warnings.\n+\t* g++.dg/warn/ref-temp1.C: Prune expected warning.\n+\t* gcc.dg/uninit-pr50476.c: Expect a new warning.\n+\t* c-c++-common/Wdangling-pointer-2.c: New test.\n+\t* c-c++-common/Wdangling-pointer-3.c: New test.\n+\t* c-c++-common/Wdangling-pointer-4.c: New test.\n+\t* c-c++-common/Wdangling-pointer-5.c: New test.\n+\t* c-c++-common/Wdangling-pointer-6.c: New test.\n+\t* c-c++-common/Wdangling-pointer.c: New test.\n+\t* g++.dg/warn/Wdangling-pointer-2.C: New test.\n+\t* g++.dg/warn/Wdangling-pointer.C: New test.\n+\t* gcc.dg/Wdangling-pointer-2.c: New test.\n+\t* gcc.dg/Wdangling-pointer.c: New test.\n+\n+2022-01-15  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/80532\n+\t* gcc.dg/Wmismatched-dealloc-2.c: Avoid -Wuse-after-free.\n+\t* gcc.dg/Wmismatched-dealloc-3.c: Same.\n+\t* gcc.dg/analyzer/file-1.c: Prune expected warning.\n+\t* gcc.dg/analyzer/file-2.c: Same.\n+\t* gcc.dg/attr-alloc_size-6.c: Disable -Wuse-after-free.\n+\t* gcc.dg/attr-alloc_size-7.c: Same.\n+\t* c-c++-common/Wuse-after-free-2.c: New test.\n+\t* c-c++-common/Wuse-after-free-3.c: New test.\n+\t* c-c++-common/Wuse-after-free-4.c: New test.\n+\t* c-c++-common/Wuse-after-free-5.c: New test.\n+\t* c-c++-common/Wuse-after-free-6.c: New test.\n+\t* c-c++-common/Wuse-after-free-7.c: New test.\n+\t* c-c++-common/Wuse-after-free.c: New test.\n+\t* g++.dg/warn/Wmismatched-dealloc-3.C: New test.\n+\t* g++.dg/warn/Wuse-after-free.C: New test.\n+\n+2022-01-15  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/83079\n+\t* gfortran.dg/transfer_char_kind4.f90: New test.\n+\n 2022-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/taint-merger.c: New test."}, {"sha": "cc50245a4893838df3212b20c7bd34b34a4a52f2", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9248ee41478754b46b70f2409b85d9743ece9e72/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9248ee41478754b46b70f2409b85d9743ece9e72/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=9248ee41478754b46b70f2409b85d9743ece9e72", "patch": "@@ -1,3 +1,8 @@\n+2022-01-15  Martin Sebor  <msebor@redhat.com>\n+\n+\t* files.c (_cpp_find_file): Substitute a valid pointer for\n+\tan invalid one to avoid -Wuse-after-free.\n+\n 2022-01-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n \n \t* configure.ac: Check sizeof ino_t and dev_t."}, {"sha": "e6a2856056d165e3753af0bcd3fb87749f02c9b7", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9248ee41478754b46b70f2409b85d9743ece9e72/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9248ee41478754b46b70f2409b85d9743ece9e72/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9248ee41478754b46b70f2409b85d9743ece9e72", "patch": "@@ -1,3 +1,10 @@\n+2022-01-15  David  <gccbugzilla@limegreensocks.com>\n+\n+\t* config/i386/gthr-win32.c (__gthr_i486_lock_cmp_xchg):\n+\tRemove inlined version, Windows 95 is no longer relevant.\n+\t* config/i386/gthr-win32.h\n+\t(__GTHREAD_I486_INLINE_LOCK_PRIMITIVES): unset.\n+\n 2022-01-14  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/linux-unwind.h (arc_fallback_frame_state): Use"}, {"sha": "3e6810009aec0abeb893ea605a35a00e4c636a51", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9248ee41478754b46b70f2409b85d9743ece9e72/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9248ee41478754b46b70f2409b85d9743ece9e72/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=9248ee41478754b46b70f2409b85d9743ece9e72", "patch": "@@ -1,3 +1,7 @@\n+2022-01-15  Martin Sebor  <msebor@redhat.com>\n+\n+\t* regex.c: Suppress -Wuse-after-free.\n+\n 2021-12-30  Lancelot SIX  <lsix@lancelotsix.com>\n \n \t* cp-demangle.c (d_clone_suffix): Support digits in clone tag"}, {"sha": "28adf812082db4a37033128b94ab15b1a2377db9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9248ee41478754b46b70f2409b85d9743ece9e72/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9248ee41478754b46b70f2409b85d9743ece9e72/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9248ee41478754b46b70f2409b85d9743ece9e72", "patch": "@@ -1,3 +1,32 @@\n+2022-01-15  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd.h: Move feature detection bools\n+\tand add __have_avx512bitalg, __have_avx512vbmi2,\n+\t__have_avx512vbmi, __have_avx512ifma, __have_avx512cd,\n+\t__have_avx512vnni, __have_avx512vpopcntdq.\n+\t(__detail::__machine_flags): New function which returns a unique\n+\tuint64 depending on relevant -m and -f flags.\n+\t(__detail::__odr_helper): New type alias for either an anonymous\n+\ttype or a type specialized with the __machine_flags number.\n+\t(_SimdIntOperators): Change template parameters from _Impl to\n+\t_Tp, _Abi because _Impl now has an __odr_helper parameter which\n+\tmay be _OdrEnforcer from the anonymous namespace, which makes\n+\tfor a bad base class.\n+\t(many): Either add __odr_helper template parameter or mark as\n+\talways_inline.\n+\t* include/experimental/bits/simd_detail.h: Add defines for\n+\tAVX512BITALG, AVX512VBMI2, AVX512VBMI, AVX512IFMA, AVX512CD,\n+\tAVX512VNNI, AVX512VPOPCNTDQ, and AVX512VP2INTERSECT.\n+\t* include/experimental/bits/simd_builtin.h: Add __odr_helper\n+\ttemplate parameter or mark as always_inline.\n+\t* include/experimental/bits/simd_fixed_size.h: Ditto.\n+\t* include/experimental/bits/simd_math.h: Ditto.\n+\t* include/experimental/bits/simd_scalar.h: Ditto.\n+\t* include/experimental/bits/simd_neon.h: Add __odr_helper\n+\ttemplate parameter.\n+\t* include/experimental/bits/simd_ppc.h: Ditto.\n+\t* include/experimental/bits/simd_x86.h: Ditto.\n+\n 2022-01-14  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* testsuite/22_locale/numpunct/members/char/3.cc:"}]}