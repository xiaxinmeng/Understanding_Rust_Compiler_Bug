{"sha": "40016fa77fa2d0e814f9cd851c8863628c677c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAwMTZmYTc3ZmEyZDBlODE0ZjljZDg1MWM4ODYzNjI4YzY3N2M1Mg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-23T10:21:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-23T10:21:42Z"}, "message": "[Ada] Initialize_Scalars optimization causes spurious runtime check failure\n\nThis patch suppresses the optimization of scalar arrays when pragma\nInitialize_Scalars is in effect if the component type is subject to\npredicates. Since the scalar array is initialized with invalid values,\nthese values may violate the predicate or a validity check within the\npredicate.\n\n------------\n-- Source --\n------------\n\n--  gnat.adc\n\npragma Initialize_Scalars;\n\n--  types.ads\n\nwith System; use System;\n\npackage Types is\n   type Byte is mod System.Storage_Unit;\n\n   subtype Inter_Byte is Byte;\n\n   function Always_OK (B : Inter_Byte) return Boolean is (True);\n   function Is_OK     (B : Inter_Byte) return Boolean is (Always_OK (B));\n\n   subtype Final_Byte is Byte with Predicate => Is_OK (Final_Byte);\n\n   type Bytes is array (1 .. 5) of Final_Byte;\n\n   Obj : Bytes;\nend Types;\n\n--  main.adb\n\nwith Types; use Types;\n\nprocedure Main is begin null; end Main;\n\n-----------------\n-- Compilation --\n-----------------\n\n$ gnatmake -q -gnata -gnatVa main.adb\n$ ./main\n\n2018-05-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch3.adb (Default_Initialize_Object): Do not optimize scalar array\n\tinitialization when the component type has predicates.\n\t* exp_ch4.adb (Expand_N_Allocator): Do not optimize scalar array\n\tallocation when the component type has predicates.\n\nFrom-SVN: r260572", "tree": {"sha": "8571747bcd27a480cae762f32d87764fb32c348e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8571747bcd27a480cae762f32d87764fb32c348e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40016fa77fa2d0e814f9cd851c8863628c677c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40016fa77fa2d0e814f9cd851c8863628c677c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40016fa77fa2d0e814f9cd851c8863628c677c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40016fa77fa2d0e814f9cd851c8863628c677c52/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d581777692c6e9a03c380daf2c86a64f226850d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d581777692c6e9a03c380daf2c86a64f226850d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d581777692c6e9a03c380daf2c86a64f226850d"}], "stats": {"total": 93, "additions": 64, "deletions": 29}, "files": [{"sha": "5feb05b664b5472222915d8261f07fc50dfa11f7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40016fa77fa2d0e814f9cd851c8863628c677c52/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40016fa77fa2d0e814f9cd851c8863628c677c52/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=40016fa77fa2d0e814f9cd851c8863628c677c52", "patch": "@@ -1,3 +1,10 @@\n+2018-05-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch3.adb (Default_Initialize_Object): Do not optimize scalar array\n+\tinitialization when the component type has predicates.\n+\t* exp_ch4.adb (Expand_N_Allocator): Do not optimize scalar array\n+\tallocation when the component type has predicates.\n+\n 2018-05-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.adb, exp_disp.adb, sem_ch3.adb, sem_ch6.adb, sem_prag.adb:"}, {"sha": "f4d2117b67d0475b370c9014b8c81d15c9b8269a", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40016fa77fa2d0e814f9cd851c8863628c677c52/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40016fa77fa2d0e814f9cd851c8863628c677c52/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=40016fa77fa2d0e814f9cd851c8863628c677c52", "patch": "@@ -6069,29 +6069,43 @@ package body Exp_Ch3 is\n                   null;\n \n                --  Optimize the default initialization of an array object when\n-               --  the following conditions are met:\n-               --\n-               --    * Pragma Initialize_Scalars or Normalize_Scalars is in\n-               --      effect.\n-               --\n-               --    * The bounds of the array type are static and lack empty\n-               --      ranges.\n-               --\n-               --    * The array type does not contain atomic components or is\n-               --      treated as packed.\n-               --\n-               --    * The component is of a scalar type which requires simple\n-               --      initialization.\n-               --\n+               --  pragma Initialize_Scalars or Normalize_Scalars is in effect.\n                --  Construct an in-place initialization aggregate which may be\n                --  convert into a fast memset by the backend.\n \n                elsif Init_Or_Norm_Scalars\n                  and then Is_Array_Type (Typ)\n+\n+                 --  The array must lack atomic components because they are\n+                 --  treated as non-static, and as a result the backend will\n+                 --  not initialize the memory in one go.\n+\n                  and then not Has_Atomic_Components (Typ)\n+\n+                 --  The array must not be packed because the invalid values\n+                 --  in System.Scalar_Values are multiples of Storage_Unit.\n+\n                  and then not Is_Packed (Typ)\n+\n+                 --  The array must have static non-empty ranges, otherwise\n+                 --  the backend cannot initialize the memory in one go.\n+\n                  and then Has_Static_Non_Empty_Array_Bounds (Typ)\n+\n+                 --  The optimization is only relevant for arrays of scalar\n+                 --  types.\n+\n                  and then Is_Scalar_Type (Component_Type (Typ))\n+\n+                 --  Similar to regular array initialization using a type\n+                 --  init proc, predicate checks are not performed because the\n+                 --  initialization values are intentionally invalid, and may\n+                 --  violate the predicate.\n+\n+                 and then not Has_Predicates (Component_Type (Typ))\n+\n+                 --  The component type must have a single initialization value\n+\n                  and then Simple_Initialization_OK (Component_Type (Typ))\n                then\n                   Set_No_Initialization (N, False);"}, {"sha": "3378580740edb662538285504038cc7b0b567da6", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40016fa77fa2d0e814f9cd851c8863628c677c52/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40016fa77fa2d0e814f9cd851c8863628c677c52/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=40016fa77fa2d0e814f9cd851c8863628c677c52", "patch": "@@ -4618,28 +4618,42 @@ package body Exp_Ch4 is\n                   Is_Allocate => True);\n             end if;\n \n-         --  Optimize the default allocation of an array object when the\n-         --  following conditions are met:\n-         --\n-         --    * Pragma Initialize_Scalars or Normalize_Scalars is in effect\n-         --\n-         --    * The bounds of the array type are static and lack empty ranges\n-         --\n-         --    * The array type does not contain atomic components or is\n-         --      treated as packed.\n-         --\n-         --    * The component is of a scalar type which requires simple\n-         --      initialization.\n-         --\n-         --  Construct an in-place initialization aggregate which may be\n-         --  convert into a fast memset by the backend.\n+         --  Optimize the default allocation of an array object when pragma\n+         --  Initialize_Scalars or Normalize_Scalars is in effect. Construct an\n+         --  in-place initialization aggregate which may be convert into a fast\n+         --  memset by the backend.\n \n          elsif Init_Or_Norm_Scalars\n            and then Is_Array_Type (T)\n+\n+           --  The array must lack atomic components because they are treated\n+           --  as non-static, and as a result the backend will not initialize\n+           --  the memory in one go.\n+\n            and then not Has_Atomic_Components (T)\n+\n+           --  The array must not be packed because the invalid values in\n+           --  System.Scalar_Values are multiples of Storage_Unit.\n+\n            and then not Is_Packed (T)\n+\n+           --  The array must have static non-empty ranges, otherwise the\n+           --  backend cannot initialize the memory in one go.\n+\n            and then Has_Static_Non_Empty_Array_Bounds (T)\n+\n+           --  The optimization is only relevant for arrays of scalar types\n+\n            and then Is_Scalar_Type (Component_Type (T))\n+\n+           --  Similar to regular array initialization using a type init proc,\n+           --  predicate checks are not performed because the initialization\n+           --  values are intentionally invalid, and may violate the predicate.\n+\n+           and then not Has_Predicates (Component_Type (T))\n+\n+           --  The component type must have a single initialization value\n+\n            and then Needs_Simple_Initialization\n                       (Typ         => Component_Type (T),\n                        Consider_IS => True)"}]}