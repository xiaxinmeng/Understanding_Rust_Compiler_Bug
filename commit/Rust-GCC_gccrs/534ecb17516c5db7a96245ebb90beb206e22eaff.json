{"sha": "534ecb17516c5db7a96245ebb90beb206e22eaff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM0ZWNiMTc1MTZjNWRiN2E5NjI0NWViYjkwYmViMjA2ZTIyZWFmZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-10-26T18:10:53Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-10-26T18:10:53Z"}, "message": "tree.c (build_vec_init_expr): Split out from...\n\n\t* tree.c (build_vec_init_expr): Split out from...\n\t(build_array_copy): ...here.\n\t* init.c (perform_member_init): Use it.\n\t* cp-tree.h: Declare it.\n\t* cp-gimplify.c (cp_gimplify_init_expr): Don't gimplify the slot for\n\tVEC_INIT_EXPR and AGGR_INIT_EXPR here.  Drop pre/post parameters.\n\t(cp_gimplify_expr): Handle array default-initialization via\n\tVEC_INIT_EXPR.\n\nFrom-SVN: r165976", "tree": {"sha": "0f1b677728d44296d9537a0c12aa3f3f1615257d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f1b677728d44296d9537a0c12aa3f3f1615257d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/534ecb17516c5db7a96245ebb90beb206e22eaff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/534ecb17516c5db7a96245ebb90beb206e22eaff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/534ecb17516c5db7a96245ebb90beb206e22eaff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/534ecb17516c5db7a96245ebb90beb206e22eaff/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73c982bc87c8eb33a37ba3242f8d82bc512e4189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c982bc87c8eb33a37ba3242f8d82bc512e4189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c982bc87c8eb33a37ba3242f8d82bc512e4189"}], "stats": {"total": 92, "additions": 72, "deletions": 20}, "files": [{"sha": "c0da1faf693d4c96528cd54766cda02a84f86a44", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=534ecb17516c5db7a96245ebb90beb206e22eaff", "patch": "@@ -1,5 +1,14 @@\n 2010-10-26  Jason Merrill  <jason@redhat.com>\n \n+\t* tree.c (build_vec_init_expr): Split out from...\n+\t(build_array_copy): ...here.\n+\t* init.c (perform_member_init): Use it.\n+\t* cp-tree.h: Declare it.\n+\t* cp-gimplify.c (cp_gimplify_init_expr): Don't gimplify the slot for\n+\tVEC_INIT_EXPR and AGGR_INIT_EXPR here.  Drop pre/post parameters.\n+\t(cp_gimplify_expr): Handle array default-initialization via\n+\tVEC_INIT_EXPR.\n+\n \t* pt.c (lookup_template_class): push_tinst_level around call to\n \tcoerce_template_parms.\n "}, {"sha": "dd879c63b15b6f6bd286ca4d0d84c60efb5ab0b1", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=534ecb17516c5db7a96245ebb90beb206e22eaff", "patch": "@@ -424,7 +424,7 @@ gimplify_expr_stmt (tree *stmt_p)\n /* Gimplify initialization from an AGGR_INIT_EXPR.  */\n \n static void\n-cp_gimplify_init_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n+cp_gimplify_init_expr (tree *expr_p)\n {\n   tree from = TREE_OPERAND (*expr_p, 1);\n   tree to = TREE_OPERAND (*expr_p, 0);\n@@ -451,7 +451,6 @@ cp_gimplify_init_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       if (TREE_CODE (sub) == AGGR_INIT_EXPR\n \t  || TREE_CODE (sub) == VEC_INIT_EXPR)\n \t{\n-\t  gimplify_expr (&to, pre_p, post_p, is_gimple_lvalue, fb_lvalue);\n \t  if (TREE_CODE (sub) == AGGR_INIT_EXPR)\n \t    AGGR_INIT_EXPR_SLOT (sub) = to;\n \t  else\n@@ -531,10 +530,13 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n     case VEC_INIT_EXPR:\n       {\n \tlocation_t loc = input_location;\n+\ttree init = VEC_INIT_EXPR_INIT (*expr_p);\n+\tint from_array = (init && TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE);\n \tgcc_assert (EXPR_HAS_LOCATION (*expr_p));\n \tinput_location = EXPR_LOCATION (*expr_p);\n \t*expr_p = build_vec_init (VEC_INIT_EXPR_SLOT (*expr_p), NULL_TREE,\n-\t\t\t\t  VEC_INIT_EXPR_INIT (*expr_p), false, 1,\n+\t\t\t\t  init, /*explicit_value_init_p*/false,\n+\t\t\t\t  from_array,\n \t\t\t\t  tf_warning_or_error);\n \tret = GS_OK;\n \tinput_location = loc;\n@@ -556,7 +558,7 @@ cp_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t LHS of an assignment might also be involved in the RHS, as in bug\n \t 25979.  */\n     case INIT_EXPR:\n-      cp_gimplify_init_expr (expr_p, pre_p, post_p);\n+      cp_gimplify_init_expr (expr_p);\n       if (TREE_CODE (*expr_p) != INIT_EXPR)\n \treturn GS_OK;\n       /* Otherwise fall through.  */"}, {"sha": "05282ba4a8606f1b432edb50adfc44bf277ceb5b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=534ecb17516c5db7a96245ebb90beb206e22eaff", "patch": "@@ -5377,6 +5377,7 @@ extern tree get_target_expr\t\t\t(tree);\n extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree build_array_of_n_type\t\t(tree, int);\n extern tree build_array_copy\t\t\t(tree);\n+extern tree build_vec_init_expr\t\t\t(tree, tree);\n extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n extern tree hash_tree_chain\t\t\t(tree, tree);\n extern tree build_qualified_name\t\t(tree, tree, tree, bool);"}, {"sha": "9c2afba2e113c8249a274db2507c360f28405751", "filename": "gcc/cp/init.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=534ecb17516c5db7a96245ebb90beb206e22eaff", "patch": "@@ -486,16 +486,23 @@ perform_member_init (tree member, tree init)\n     }\n   else if (TYPE_NEEDS_CONSTRUCTING (type))\n     {\n-      if (init != NULL_TREE\n-\t  && TREE_CODE (type) == ARRAY_TYPE\n-\t  && TREE_CHAIN (init) == NULL_TREE\n-\t  && TREE_CODE (TREE_TYPE (TREE_VALUE (init))) == ARRAY_TYPE)\n+      if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n-\t  /* Initialization of one array from another.  */\n-\t  finish_expr_stmt (build_vec_init (decl, NULL_TREE, TREE_VALUE (init),\n-\t\t\t\t\t    /*explicit_value_init_p=*/false,\n-\t\t\t\t\t    /* from_array=*/1,\n-                                            tf_warning_or_error));\n+\t  if (init)\n+\t    {\n+\t      gcc_assert (TREE_CHAIN (init) == NULL_TREE);\n+\t      init = TREE_VALUE (init);\n+\t    }\n+\t  if (init == NULL_TREE\n+\t      || same_type_ignoring_top_level_qualifiers_p (type,\n+\t\t\t\t\t\t\t    TREE_TYPE (init)))\n+\t    {\n+\t      init = build_vec_init_expr (type, init);\n+\t      init = build2 (INIT_EXPR, type, decl, init);\n+\t      finish_expr_stmt (init);\n+\t    }\n+\t  else\n+\t    error (\"invalid initializer for array member %q#D\", member);\n \t}\n       else\n \t{"}, {"sha": "31f5845c6583760aa0c9dfad92ac41d9456dcf0c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=534ecb17516c5db7a96245ebb90beb206e22eaff", "patch": "@@ -452,14 +452,41 @@ build_cplus_new (tree type, tree init)\n   return rval;\n }\n \n-/* Return a TARGET_EXPR which expresses the direct-initialization of one\n-   array from another.  */\n+/* Return a TARGET_EXPR which expresses the initialization of an array to\n+   be named later, either default-initialization or copy-initialization\n+   from another array of the same type.  */\n \n tree\n-build_array_copy (tree init)\n+build_vec_init_expr (tree type, tree init)\n {\n-  tree type = TREE_TYPE (init);\n-  tree slot = build_local_temp (type);\n+  tree slot;\n+  tree inner_type = strip_array_types (type);\n+\n+  gcc_assert (init == NULL_TREE\n+\t      || (same_type_ignoring_top_level_qualifiers_p\n+\t\t  (type, TREE_TYPE (init))));\n+\n+  /* Since we're deferring building the actual constructor calls until\n+     gimplification time, we need to build one now and throw it away so\n+     that the relevant constructor gets mark_used before cgraph decides\n+     what functions are needed.  Here we assume that init is either\n+     NULL_TREE or another array to copy.  */\n+  if (CLASS_TYPE_P (inner_type))\n+    {\n+      VEC(tree,gc) *argvec = make_tree_vector ();\n+      if (init)\n+\t{\n+\t  tree dummy = build_dummy_object (inner_type);\n+\t  if (!real_lvalue_p (init))\n+\t    dummy = move (dummy);\n+\t  VEC_quick_push (tree, argvec, dummy);\n+\t}\n+      build_special_member_call (NULL_TREE, complete_ctor_identifier,\n+\t\t\t\t &argvec, inner_type, LOOKUP_NORMAL,\n+\t\t\t\t tf_warning_or_error);\n+    }\n+\n+  slot = build_local_temp (type);\n   init = build2 (VEC_INIT_EXPR, type, slot, init);\n   SET_EXPR_LOCATION (init, input_location);\n   init = build_target_expr (slot, init);\n@@ -468,6 +495,12 @@ build_array_copy (tree init)\n   return init;\n }\n \n+tree\n+build_array_copy (tree init)\n+{\n+  return build_vec_init_expr (TREE_TYPE (init), init);\n+}\n+\n /* Build a TARGET_EXPR using INIT to initialize a new temporary of the\n    indicated TYPE.  */\n "}, {"sha": "90e3e45d68221f5bd25227970ab81ef2a0ef3dda", "filename": "gcc/testsuite/g++.old-deja/g++.law/init10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit10.C?ref=534ecb17516c5db7a96245ebb90beb206e22eaff", "patch": "@@ -20,7 +20,7 @@ public:\n         b();\n };\n \n-b::b() : three(this)  // { dg-error \"bad array initializer\" }\n+b::b() : three(this)  // { dg-error \"array\" }\n {\n }\n "}, {"sha": "f89090f1747b3c9c7d3c5738707076d9f3cc50db", "filename": "gcc/testsuite/g++.old-deja/g++.other/array3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Farray3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/534ecb17516c5db7a96245ebb90beb206e22eaff/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Farray3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Farray3.C?ref=534ecb17516c5db7a96245ebb90beb206e22eaff", "patch": "@@ -20,6 +20,6 @@ class B\n };\n \n B::B (const A a[])\n-  : ary(a)        // { dg-error \"bad array initializer\" }\n+  : ary(a)        // { dg-error \"array\" }\n {\n }"}]}