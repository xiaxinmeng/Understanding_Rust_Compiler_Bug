{"sha": "c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNmMWFlOGEzMGEzZDU1YThkMzhhZDhjNTcyNGVkYjdjYTE5NzYxYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-28T16:59:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-28T16:59:43Z"}, "message": "Prevent inconsistent profiles to be created in inlin_transform\n\n\t* ipa-inline-transform.c (inline_transform): Scale profile before\n\tredirecting.\n\nFrom-SVN: r278814", "tree": {"sha": "ad8b7b75e9094126bfac11196a144d55fe07511f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad8b7b75e9094126bfac11196a144d55fe07511f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b/comments", "author": null, "committer": null, "parents": [{"sha": "97dd1ee8de2ceb45b1572964bc2849d32cb2b322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97dd1ee8de2ceb45b1572964bc2849d32cb2b322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97dd1ee8de2ceb45b1572964bc2849d32cb2b322"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "87732c84850c54c2cc89c9971c18a7682d20f7de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b", "patch": "@@ -1,3 +1,8 @@\n+2019-11-28  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline-transform.c (inline_transform): Scale profile before\n+\tredirecting.\n+\n 2019-11-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* profile-count.h (profile_count::max): Work on profiles of different"}, {"sha": "6ec843a23b7666b048b0d6e38c4f2d7b30e03c2f", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=c3f1ae8a30a3d55a8d38ad8c5724edb7ca19761b", "patch": "@@ -681,6 +681,31 @@ inline_transform (struct cgraph_node *node)\n   if (preserve_function_body_p (node))\n     save_inline_function_body (node);\n \n+  profile_count num = node->count;\n+  profile_count den = ENTRY_BLOCK_PTR_FOR_FN (cfun)->count;\n+  bool scale = num.initialized_p () && !(num == den);\n+  if (scale)\n+    {\n+      profile_count::adjust_for_ipa_scaling (&num, &den);\n+      if (dump_file)\n+\t{\n+\t  fprintf (dump_file, \"Applying count scale \");\n+\t  num.dump (dump_file);\n+\t  fprintf (dump_file, \"/\");\n+\t  den.dump (dump_file);\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n+\n+      basic_block bb;\n+      cfun->cfg->count_max = profile_count::uninitialized ();\n+      FOR_ALL_BB_FN (bb, cfun)\n+\t{\n+\t  bb->count = bb->count.apply_scale (num, den);\n+\t  cfun->cfg->count_max = cfun->cfg->count_max.max (bb->count);\n+\t}\n+      ENTRY_BLOCK_PTR_FOR_FN (cfun)->count = node->count;\n+    }\n+\n   for (e = node->callees; e; e = next)\n     {\n       if (!e->inline_failed)\n@@ -693,32 +718,8 @@ inline_transform (struct cgraph_node *node)\n   timevar_push (TV_INTEGRATION);\n   if (node->callees && (opt_for_fn (node->decl, optimize) || has_inline))\n     {\n-      profile_count num = node->count;\n-      profile_count den = ENTRY_BLOCK_PTR_FOR_FN (cfun)->count;\n-      bool scale = num.initialized_p () && !(num == den);\n-      if (scale)\n-\t{\n-\t  profile_count::adjust_for_ipa_scaling (&num, &den);\n-\t  if (dump_file)\n-\t    {\n-\t      fprintf (dump_file, \"Applying count scale \");\n-\t      num.dump (dump_file);\n-\t      fprintf (dump_file, \"/\");\n-\t      den.dump (dump_file);\n-\t      fprintf (dump_file, \"\\n\");\n-\t    }\n-\n-\t  basic_block bb;\n-\t  cfun->cfg->count_max = profile_count::uninitialized ();\n-\t  FOR_ALL_BB_FN (bb, cfun)\n-\t    {\n-\t      bb->count = bb->count.apply_scale (num, den);\n-\t      cfun->cfg->count_max = cfun->cfg->count_max.max (bb->count);\n-\t    }\n-\t  ENTRY_BLOCK_PTR_FOR_FN (cfun)->count = node->count;\n-\t}\n       todo = optimize_inline_calls (current_function_decl);\n-   }\n+    }\n   timevar_pop (TV_INTEGRATION);\n \n   cfun->always_inline_functions_inlined = true;"}]}