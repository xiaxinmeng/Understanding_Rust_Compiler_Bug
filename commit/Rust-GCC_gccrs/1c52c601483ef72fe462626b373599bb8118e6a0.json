{"sha": "1c52c601483ef72fe462626b373599bb8118e6a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM1MmM2MDE0ODNlZjcyZmU0NjI2MjZiMzczNTk5YmI4MTE4ZTZhMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-10-02T13:59:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-10-02T13:59:28Z"}, "message": "ipa-inline-analysis.c (reset_inline_edge_summary): New function.\n\n\t* ipa-inline-analysis.c (reset_inline_edge_summary): New function.\n\t(reset_inline_summary): New function.\n\t(compute_inline_parameters, inline_node_removal_hook,\n\tinline_edge_removal_hook): Use it.\n\t(inline_free_summary): Reset holders correctly.\n\t(inline_generate_summary): Free summary before computing it.\n\nFrom-SVN: r179427", "tree": {"sha": "3499e792fbbbda9ce6fcb3f168248c06c843602c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3499e792fbbbda9ce6fcb3f168248c06c843602c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c52c601483ef72fe462626b373599bb8118e6a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c52c601483ef72fe462626b373599bb8118e6a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c52c601483ef72fe462626b373599bb8118e6a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c52c601483ef72fe462626b373599bb8118e6a0/comments", "author": null, "committer": null, "parents": [{"sha": "61e0e2f8af6f53727d6034235a49746e566c9649", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e0e2f8af6f53727d6034235a49746e566c9649", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e0e2f8af6f53727d6034235a49746e566c9649"}], "stats": {"total": 72, "additions": 58, "deletions": 14}, "files": [{"sha": "e556b12853056d0cfeec740c6156b76e91394d47", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c52c601483ef72fe462626b373599bb8118e6a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c52c601483ef72fe462626b373599bb8118e6a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c52c601483ef72fe462626b373599bb8118e6a0", "patch": "@@ -1,3 +1,12 @@\n+2011-10-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline-analysis.c (reset_inline_edge_summary): New function.\n+\t(reset_inline_summary): New function.\n+\t(compute_inline_parameters, inline_node_removal_hook,\n+\tinline_edge_removal_hook): Use it.\n+\t(inline_free_summary): Reset holders correctly.\n+\t(inline_generate_summary): Free summary before computing it.\n+\n 2011-10-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR preprocessor/36819"}, {"sha": "4e97943eb9c1e875d26236db727ecff2dc176899", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 49, "deletions": 14, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c52c601483ef72fe462626b373599bb8118e6a0/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c52c601483ef72fe462626b373599bb8118e6a0/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=1c52c601483ef72fe462626b373599bb8118e6a0", "patch": "@@ -789,6 +789,44 @@ inline_summary_alloc (void)\n \t\t\t\t\t     10);\n }\n \n+/* We are called multiple time for given function; clear\n+   data from previous run so they are not cumulated.  */\n+\n+static void\n+reset_inline_edge_summary (struct cgraph_edge *e)\n+{\n+  struct inline_edge_summary *es = inline_edge_summary (e);\n+\n+  es->call_stmt_size = es->call_stmt_time =0;\n+  if (es->predicate)\n+    pool_free (edge_predicate_pool, es->predicate);\n+  es->predicate = NULL;\n+  VEC_free (inline_param_summary_t, heap, es->param);\n+}\n+\n+/* We are called multiple time for given function; clear\n+   data from previous run so they are not cumulated.  */\n+\n+static void\n+reset_inline_summary (struct cgraph_node *node)\n+{\n+  struct inline_summary *info = inline_summary (node);\n+  struct cgraph_edge *e;\n+\n+  info->self_size = info->self_time = 0;\n+  info->estimated_stack_size = 0;\n+  info->estimated_self_stack_size = 0;\n+  info->stack_frame_offset = 0;\n+  info->size = 0;\n+  info->time = 0;\n+  VEC_free (condition, gc, info->conds);\n+  VEC_free (size_time_entry,gc, info->entry);\n+  for (e = node->callees; e; e = e->next_callee)\n+    reset_inline_edge_summary (e);\n+  for (e = node->indirect_calls; e; e = e->next_callee)\n+    reset_inline_edge_summary (e);\n+}\n+\n /* Hook that is called by cgraph.c when a node is removed.  */\n \n static void\n@@ -799,11 +837,7 @@ inline_node_removal_hook (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n       <= (unsigned)node->uid)\n     return;\n   info = inline_summary (node);\n-  reset_node_growth_cache (node);\n-  VEC_free (condition, gc, info->conds);\n-  VEC_free (size_time_entry, gc, info->entry);\n-  info->conds = NULL;\n-  info->entry = NULL;\n+  reset_inline_summary (node);\n   memset (info, 0, sizeof (inline_summary_t));\n }\n \n@@ -1012,13 +1046,7 @@ inline_edge_removal_hook (struct cgraph_edge *edge, void *data ATTRIBUTE_UNUSED)\n     reset_edge_growth_cache (edge);\n   if (edge->uid\n       < (int)VEC_length (inline_edge_summary_t, inline_edge_summary_vec))\n-    {\n-      edge_set_predicate (edge, NULL);\n-      VEC_free (inline_param_summary_t, heap,\n-\t        inline_edge_summary (edge)->param);\n-      memset (inline_edge_summary (edge), 0,\n-\t      sizeof (struct inline_edge_summary));\n-    }\n+    reset_inline_edge_summary (edge);\n }\n \n \n@@ -2041,6 +2069,7 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n   inline_summary_alloc ();\n \n   info = inline_summary (node);\n+  reset_inline_summary (node);\n \n   /* FIXME: Thunks are inlinable, but tree-inline don't know how to do that.\n      Once this happen, we will need to more curefully predict call\n@@ -2827,6 +2856,7 @@ inline_generate_summary (void)\n       cgraph_add_function_insertion_hook (&add_new_function, NULL);\n \n   ipa_register_cgraph_hooks ();\n+  inline_free_summary ();\n \n   FOR_EACH_DEFINED_FUNCTION (node)\n     if (!node->alias)\n@@ -3109,19 +3139,24 @@ inline_write_summary (cgraph_node_set set,\n void\n inline_free_summary (void)\n {\n+  struct cgraph_node *node;\n+  FOR_EACH_DEFINED_FUNCTION (node)\n+    reset_inline_summary (node);\n   if (function_insertion_hook_holder)\n     cgraph_remove_function_insertion_hook (function_insertion_hook_holder);\n   function_insertion_hook_holder = NULL;\n   if (node_removal_hook_holder)\n     cgraph_remove_node_removal_hook (node_removal_hook_holder);\n+  node_removal_hook_holder = NULL;\n   if (edge_removal_hook_holder)\n     cgraph_remove_edge_removal_hook (edge_removal_hook_holder);\n-  node_removal_hook_holder = NULL;\n+  edge_removal_hook_holder = NULL;\n   if (node_duplication_hook_holder)\n     cgraph_remove_node_duplication_hook (node_duplication_hook_holder);\n+  node_duplication_hook_holder = NULL;\n   if (edge_duplication_hook_holder)\n     cgraph_remove_edge_duplication_hook (edge_duplication_hook_holder);\n-  node_duplication_hook_holder = NULL;\n+  edge_duplication_hook_holder = NULL;\n   VEC_free (inline_summary_t, gc, inline_summary_vec);\n   inline_summary_vec = NULL;\n   VEC_free (inline_edge_summary_t, heap, inline_edge_summary_vec);"}]}