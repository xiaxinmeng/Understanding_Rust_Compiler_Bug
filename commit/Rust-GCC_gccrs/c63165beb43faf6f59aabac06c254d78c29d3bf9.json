{"sha": "c63165beb43faf6f59aabac06c254d78c29d3bf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYzMTY1YmViNDNmYWY2ZjU5YWFiYWMwNmMyNTRkNzhjMjlkM2JmOQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-02T18:41:52Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1994-06-02T18:41:52Z"}, "message": "(all output patterns): Use new capabilities of arm_print_operand to simplify output sequences.\n\n(all output patterns): Use new capabilities of arm_print_operand to\nsimplify output sequences.  Mark position of condition code with '%?'.\n\nFrom-SVN: r7425", "tree": {"sha": "6fedc7eae8d5d800642ffda3c44a01236384e819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fedc7eae8d5d800642ffda3c44a01236384e819"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c63165beb43faf6f59aabac06c254d78c29d3bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63165beb43faf6f59aabac06c254d78c29d3bf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c63165beb43faf6f59aabac06c254d78c29d3bf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c63165beb43faf6f59aabac06c254d78c29d3bf9/comments", "author": null, "committer": null, "parents": [{"sha": "ef65c0dcdf21f1eb7b8ff08e75c7de21f0946f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef65c0dcdf21f1eb7b8ff08e75c7de21f0946f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef65c0dcdf21f1eb7b8ff08e75c7de21f0946f38"}], "stats": {"total": 993, "additions": 338, "deletions": 655}, "files": [{"sha": "756d7bb8548b865df529f7bfcf07a4386d04c5ba", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 338, "deletions": 655, "changes": 993, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c63165beb43faf6f59aabac06c254d78c29d3bf9/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c63165beb43faf6f59aabac06c254d78c29d3bf9/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c63165beb43faf6f59aabac06c254d78c29d3bf9", "patch": "@@ -177,12 +177,8 @@\n   \"*\n   if (GET_CODE (operands[2]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[2])))\n-    {\n-      operands[2] = GEN_INT (-INTVAL (operands[2]));\n-      output_asm_insn (\\\"sub\\\\t%0, %1, %2\\\", operands);\n-      return \\\"\\\";\n-    }\n-  return \\\"add\\\\t%0, %1, %2\\\";\n+    return \\\"sub%?\\\\t%0, %1, #%n2\\\";\n+  return \\\"add%?\\\\t%0, %1, %2\\\";\n \")\n \n (define_insn \"\"\n@@ -196,12 +192,8 @@\n   \"*\n   if (GET_CODE (operands[2]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[2])))\n-    {\n-      operands[2] = GEN_INT (-INTVAL (operands[2]));\n-      output_asm_insn (\\\"subs\\\\t%0, %1, %2\\\", operands);\n-      return \\\"\\\";\n-    }\n-  return \\\"adds\\\\t%0, %1, %2\\\";\n+    return \\\"sub%?s\\\\t%0, %1, #%n2\\\";\n+  return \\\"add%?s\\\\t%0, %1, %2\\\";\n \"\n [(set_attr \"conds\" \"set\")])\n \n@@ -215,12 +207,8 @@\n   \"*\n   if (GET_CODE (operands[2]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[2])))\n-    {\n-      operands[2] = GEN_INT (-INTVAL (operands[2]));\n-      output_asm_insn (\\\"subs\\\\t%0, %1, %2\\\", operands);\n-      return \\\"\\\";\n-    }\n-  return \\\"adds\\\\t%0, %1, %2\\\";\n+    return \\\"sub%?s\\\\t%0, %1, #%n2\\\";\n+  return \\\"add%?s\\\\t%0, %1, %2\\\";\n \"\n [(set_attr \"conds\" \"set\")])\n \n@@ -306,12 +294,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"adfs\\\\t%0, %1, %2\\\";\n+      return \\\"adf%?s\\\\t%0, %1, %2\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[2] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[2]));\n-      output_asm_insn (\\\"sufs\\\\t%0, %1, %2\\\", operands);\n+      output_asm_insn (\\\"suf%?s\\\\t%0, %1, %2\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -330,12 +318,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"adfd\\\\t%0, %1, %2\\\";\n+      return \\\"adf%?d\\\\t%0, %1, %2\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[2] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[2]));\n-      output_asm_insn (\\\"sufd\\\\t%0, %1, %2\\\", operands);\n+      output_asm_insn (\\\"suf%?d\\\\t%0, %1, %2\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -355,12 +343,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"adfd\\\\t%0, %1, %2\\\";\n+      return \\\"adf%?d\\\\t%0, %1, %2\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[2] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[2]));\n-      output_asm_insn (\\\"sufd\\\\t%0, %1, %2\\\", operands);\n+      output_asm_insn (\\\"suf%?d\\\\t%0, %1, %2\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -373,7 +361,7 @@\n \t\t (float_extend:DF\n \t\t  (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"adfd\\\\t%0, %1, %2\"\n+  \"adf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -383,7 +371,7 @@\n \t\t (float_extend:DF\n \t\t  (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"adfd\\\\t%0, %1, %2\"\n+  \"adf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"addxf3\"\n@@ -398,12 +386,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"adfe\\\\t%0, %1, %2\\\";\n+      return \\\"adf%?e\\\\t%0, %1, %2\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[2]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[2] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[2]));\n-      output_asm_insn (\\\"sufe\\\\t%0, %1, %2\\\", operands);\n+      output_asm_insn (\\\"suf%?e\\\\t%0, %1, %2\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -482,8 +470,8 @@\n \t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI,r\")))]\n   \"\"\n   \"@\n-   sub\\\\t%0, %1, %2\n-   rsb\\\\t%0, %2, %1\")\n+   sub%?\\\\t%0, %1, %2\n+   rsb%?\\\\t%0, %2, %1\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -494,8 +482,8 @@\n \t(minus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"@\n-   subs\\\\t%0, %1, %2\n-   rsbs\\\\t%0, %2, %1\"\n+   sub%?s\\\\t%0, %1, %2\n+   rsb%?s\\\\t%0, %2, %1\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"decscc\"\n@@ -516,8 +504,8 @@\n \t\t  (match_operand:SF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n   \"\"\n   \"@\n-   sufs\\\\t%0, %1, %2\n-   rsfs\\\\t%0, %2, %1\"\n+   suf%?s\\\\t%0, %1, %2\n+   rsf%?s\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"subdf3\"\n@@ -526,8 +514,8 @@\n \t\t  (match_operand:DF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n   \"\"\n   \"@\n-   sufd\\\\t%0, %1, %2\n-   rsfd\\\\t%0, %2, %1\"\n+   suf%?d\\\\t%0, %1, %2\n+   rsf%?d\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -536,7 +524,7 @@\n \t\t   (match_operand:SF 1 \"s_register_operand\" \"f\"))\n \t\t  (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n-  \"sufd\\\\t%0, %1, %2\"\n+  \"suf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -546,8 +534,8 @@\n \t\t   (match_operand:SF 2 \"s_register_operand\" \"f,f\"))))]\n   \"\"\n   \"@\n-   sufd\\\\t%0, %1, %2\n-   rsfd\\\\t%0, %2, %1\"\n+   suf%?d\\\\t%0, %1, %2\n+   rsf%?d\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -557,7 +545,7 @@\n \t\t  (float_extend:DF\n \t\t   (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"sufd\\\\t%0, %1, %2\"\n+  \"suf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"subxf3\"\n@@ -566,8 +554,8 @@\n \t\t  (match_operand:XF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n   \"ENABLE_XF_PATTERNS\"\n   \"@\n-   sufe\\\\t%0, %1, %2\n-   rsfe\\\\t%0, %2, %1\"\n+   suf%?e\\\\t%0, %1, %2\n+   rsf%?e\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"float\")])\n \f\n ;; Multiplication insns\n@@ -578,7 +566,7 @@\n \t(mult:SI (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t\t (match_operand:SI 1 \"s_register_operand\" \"%?r,0\")))]\n   \"\"\n-  \"mul\\\\t%0, %2, %1\")\n+  \"mul%?\\\\t%0, %2, %1\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -589,7 +577,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r\")\n \t(mult:SI (match_dup 2) (match_dup 1)))]\n   \"\"\n-  \"muls\\\\t%0, %2, %1\"\n+  \"mul%?s\\\\t%0, %2, %1\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -600,7 +588,7 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=&r,&r\"))]\n   \"\"\n-  \"muls\\\\t%0, %2, %1\"\n+  \"mul%?s\\\\t%0, %2, %1\"\n [(set_attr \"conds\" \"set\")])\n \n ;; Unnamed templates to match MLA instruction.\n@@ -612,7 +600,7 @@\n \t\t   (match_operand:SI 1 \"s_register_operand\" \"%r,0,r,0\"))\n \t  (match_operand:SI 3 \"s_register_operand\" \"?r,r,0,0\")))]\n   \"\"\n-  \"mla\\\\t%0, %2, %1, %3\")\n+  \"mla%?\\\\t%0, %2, %1, %3\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -626,7 +614,7 @@\n \t(plus:SI (mult:SI (match_dup 2) (match_dup 1))\n \t\t (match_dup 3)))]\n   \"\"\n-  \"mlas\\\\t%0, %2, %1, %3\"\n+  \"mla%?s\\\\t%0, %2, %1, %3\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -639,23 +627,23 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=&r,&r,&r,&r\"))]\n   \"\"\n-  \"mlas\\\\t%0, %2, %1, %3\"\n+  \"mla%?s\\\\t%0, %2, %1, %3\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"mulsf3\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"s_register_operand\" \"f\")\n \t\t (match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n-  \"fmls\\\\t%0, %1, %2\"\n+  \"fml%?s\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"muldf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n \t\t (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n-  \"mufd\\\\t%0, %1, %2\"\n+  \"muf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -664,7 +652,7 @@\n \t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))\n \t\t (match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n-  \"mufd\\\\t%0, %1, %2\"\n+  \"muf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -673,7 +661,7 @@\n \t\t (float_extend:DF\n \t\t  (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"mufd\\\\t%0, %1, %2\"\n+  \"muf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -683,15 +671,15 @@\n \t\t (float_extend:DF\n \t\t  (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"mufd\\\\t%0, %1, %2\"\n+  \"muf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"mulxf3\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(mult:XF (match_operand:XF 1 \"s_register_operand\" \"f\")\n \t\t (match_operand:XF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"mufe\\\\t%0, %1, %2\"\n+  \"muf%?e\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \f\n ;; Division insns\n@@ -702,8 +690,8 @@\n \t\t(match_operand:SF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n   \"\"\n   \"@\n-   fdvs\\\\t%0, %1, %2\n-   frds\\\\t%0, %2, %1\"\n+   fdv%?s\\\\t%0, %1, %2\n+   frd%?s\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"divdf3\"\n@@ -712,8 +700,8 @@\n \t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n   \"\"\n   \"@\n-   dvfd\\\\t%0, %1, %2\n-   rdfd\\\\t%0, %2, %1\"\n+   dvf%?d\\\\t%0, %1, %2\n+   rdf%?d\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -722,7 +710,7 @@\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n \t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n-  \"dvfd\\\\t%0, %1, %2\"\n+  \"dvf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -731,7 +719,7 @@\n \t\t(float_extend:DF\n \t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"rdfd\\\\t%0, %2, %1\"\n+  \"rdf%?d\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -741,7 +729,7 @@\n \t\t(float_extend:DF\n \t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"dvfd\\\\t%0, %1, %2\"\n+  \"dvf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"divxf3\"\n@@ -750,8 +738,8 @@\n \t\t(match_operand:XF 2 \"fpu_rhs_operand\" \"fG,f\")))]\n   \"ENABLE_XF_PATTERNS\"\n   \"@\n-   dvfe\\\\t%0, %1, %2\n-   rdfe\\\\t%0, %2, %1\"\n+   dvf%?e\\\\t%0, %1, %2\n+   rdf%?e\\\\t%0, %2, %1\"\n [(set_attr \"type\" \"float\")])\n \f\n ;; Modulo insns\n@@ -761,15 +749,15 @@\n \t(mod:SF (match_operand:SF 1 \"s_register_operand\" \"f\")\n \t\t(match_operand:SF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n-  \"rmfs\\\\t%0, %1, %2\"\n+  \"rmf%?s\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"moddf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(mod:DF (match_operand:DF 1 \"s_register_operand\" \"f\")\n \t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n-  \"rmfd\\\\t%0, %1, %2\"\n+  \"rmf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -778,7 +766,7 @@\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))\n \t\t(match_operand:DF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"\"\n-  \"rmfd\\\\t%0, %1, %2\"\n+  \"rmf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -787,7 +775,7 @@\n \t\t(float_extend:DF\n \t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"rmfd\\\\t%0, %1, %2\"\n+  \"rmf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n@@ -797,15 +785,15 @@\n \t\t(float_extend:DF\n \t\t (match_operand:SF 2 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"rmfd\\\\t%0, %1, %2\"\n+  \"rmf%?d\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"modxf3\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(mod:XF (match_operand:XF 1 \"s_register_operand\" \"f\")\n \t\t(match_operand:XF 2 \"fpu_rhs_operand\" \"fG\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"rmfe\\\\t%0, %1, %2\"\n+  \"rmf%?e\\\\t%0, %1, %2\"\n [(set_attr \"type\" \"float\")])\n \f\n ;; Boolean and,ior,xor insns\n@@ -815,7 +803,7 @@\n \t(and:DI (match_operand:DI 1 \"s_register_operand\" \"%0,0\")\n \t\t(match_operand:DI 2 \"s_register_operand\" \"r,0\")))]\n   \"\"\n-  \"and\\\\t%0, %1, %2\\;and\\\\t%R0, %R1, %R2\"\n+  \"and%?\\\\t%0, %1, %2\\;and%?\\\\t%R0, %R1, %R2\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n@@ -824,7 +812,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"and\\\\t%0, %1, %2\\;mov\\\\t%R0, #0\"\n+  \"and%?\\\\t%0, %1, %2\\;mov%?\\\\t%R0, #0\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n@@ -833,7 +821,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"and\\\\t%0, %1, %2\\;and\\\\t%R0, %R1, %2, asr #31\"\n+  \"and%?\\\\t%0, %1, %2\\;and%?\\\\t%R0, %R1, %2, asr #31\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"andsi3\"\n@@ -846,10 +834,10 @@\n       && !const_ok_for_arm (INTVAL (operands[2])))\n     {\n       operands[2] = GEN_INT (~INTVAL (operands[2]));\n-      output_asm_insn (\\\"bic\\\\t%0, %1, %2\\\", operands);\n+      output_asm_insn (\\\"bic%?\\\\t%0, %1, %2\\\", operands);\n       return \\\"\\\";\n     }\n-  return \\\"and\\\\t%0, %1, %2\\\";\n+  return \\\"and%?\\\\t%0, %1, %2\\\";\n \")\n \n (define_insn \"\"\n@@ -865,10 +853,10 @@\n       && !const_ok_for_arm (INTVAL (operands[2])))\n     {\n       operands[2] = GEN_INT (~INTVAL (operands[2]));\n-      output_asm_insn (\\\"bics\\\\t%0, %1, %2\\\", operands);\n+      output_asm_insn (\\\"bic%?s\\\\t%0, %1, %2\\\", operands);\n       return \\\"\\\";\n     }\n-  return \\\"ands\\\\t%0, %1, %2\\\";\n+  return \\\"and%?s\\\\t%0, %1, %2\\\";\n \"\n [(set_attr \"conds\" \"set\")])\n \n@@ -878,7 +866,7 @@\n \t\t \t\t (match_operand:SI 1 \"arm_rhs_operand\" \"rI\"))\n \t\t\t (const_int 0)))]\n   \"\"\n-  \"tst\\\\t%0, %1\"\n+  \"tst%?\\\\t%0, %1\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -890,7 +878,7 @@\n   \"const_ok_for_arm (~INTVAL (operands[1]))\"\n   \"*\n   operands[1] = GEN_INT (~INTVAL (operands[1]));\n-  output_asm_insn (\\\"bics\\\\t%3, %0, %1\\\", operands);\n+  output_asm_insn (\\\"bic%?s\\\\t%3, %0, %1\\\", operands);\n   return \\\"\\\";\n \"\n [(set_attr \"conds\" \"set\")])\n@@ -914,7 +902,7 @@\n   while (cnt--)\n     mask = (mask << 1) | 1;\n   operands[1] = GEN_INT (mask << INTVAL (operands[2]));\n-  output_asm_insn (\\\"tst\\\\t%0, %1\\\", operands);\n+  output_asm_insn (\\\"tst%?\\\\t%0, %1\\\", operands);\n   return \\\"\\\";\n }\n \"\n@@ -938,8 +926,8 @@\n   while (cnt--)\n     mask = (mask << 1) | 1;\n   operands[1] = GEN_INT (mask << INTVAL (operands[2]));\n-  output_asm_insn (\\\"ldrb\\\\t%3, %0\\\", operands);\n-  output_asm_insn (\\\"tst\\\\t%3, %1\\\", operands);\n+  output_asm_insn (\\\"ldr%?b\\\\t%3, %0\\\", operands);\n+  output_asm_insn (\\\"tst%?\\\\t%3, %1\\\", operands);\n   return \\\"\\\";\n }\n \"\n@@ -952,7 +940,7 @@\n \t(and:DI (not:DI (match_operand:DI 2 \"s_register_operand\" \"r,0\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"0,r\")))]\n   \"\"\n-  \"bic\\\\t%0, %1, %2\\;bic\\\\t%R0, %R1, %R2\"\n+  \"bic%?\\\\t%0, %1, %2\\;bic%?\\\\t%R0, %R1, %R2\"\n [(set_attr \"length\" \"8\")])\n   \n (define_insn \"\"\n@@ -962,8 +950,8 @@\n \t\t(match_operand:DI 1 \"s_register_operand\" \"0,?r\")))]\n   \"\"\n   \"@\n-  bic\\\\t%0, %1, %2\n-  bic\\\\t%0, %1, %2\\;mov\\\\t%R0, %R1\"\n+   bic%?\\\\t%0, %1, %2\n+   bic%?\\\\t%0, %1, %2\\;mov%?\\\\t%R0, %R1\"\n [(set_attr \"length\" \"4,8\")])\n   \n (define_insn \"\"\n@@ -972,15 +960,15 @@\n \t\t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"bic\\\\t%0, %1, %2\\;bic\\\\t%R0, %R1, %2, asr #31\"\n+  \"bic%?\\\\t%0, %1, %2\\;bic%?\\\\t%R0, %R1, %2, asr #31\"\n [(set_attr \"length\" \"8\")])\n   \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(and:SI (not:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))\n \t\t(match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"\"\n-  \"bic\\\\t%0, %1, %2\")\n+  \"bic%?\\\\t%0, %1, %2\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -991,7 +979,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(and:SI (not:SI (match_dup 2)) (match_dup 1)))]\n   \"\"\n-  \"bics\\\\t%0, %1, %2\"\n+  \"bic%?s\\\\t%0, %1, %2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -1002,15 +990,15 @@\n \t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"bics\\\\t%0, %1, %2\"\n+  \"bic%?s\\\\t%0, %1, %2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"iordi3\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r\")\n \t(ior:DI (match_operand:DI 1 \"s_register_operand\" \"%0\")\n \t\t(match_operand:DI 2 \"s_register_operand\" \"r\")))]\n   \"\"\n-  \"orr\\\\t%0, %1, %2\\;orr\\\\t%R0, %R1, %R2\"\n+  \"orr%?\\\\t%0, %1, %2\\;orr%?\\\\t%R0, %R1, %R2\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n@@ -1020,8 +1008,8 @@\n \t\t(match_operand:DI 1 \"s_register_operand\" \"0,?r\")))]\n   \"\"\n   \"@\n-   orr\\\\t%0, %1, %2\n-   orr\\\\t%0, %1, %2\\;mov\\\\t%R0, %R1\"\n+   orr%?\\\\t%0, %1, %2\n+   orr%?\\\\t%0, %1, %2\\;mov%?\\\\t%R0, %R1\"\n [(set_attr \"length\" \"4,8\")])\n \n (define_insn \"\"\n@@ -1030,15 +1018,15 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"orr\\\\t%0, %1, %2\\;orr\\\\t%R0, %R1, %2, asr #31\"\n+  \"orr%?\\\\t%0, %1, %2\\;orr%?\\\\t%R0, %R1, %2, asr #31\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"iorsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t(match_operand:SI 2 \"arm_rhs_operand\" \"rI\")))]\n   \"\"\n-  \"orr\\\\t%0, %1, %2\")\n+  \"orr%?\\\\t%0, %1, %2\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -1048,7 +1036,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(ior:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"orrs\\\\t%0, %1, %2\"\n+  \"orr%?s\\\\t%0, %1, %2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -1058,15 +1046,15 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"orrs\\\\t%0, %1, %2\"\n+  \"orr%?s\\\\t%0, %1, %2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"xordi3\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(xor:DI (match_operand:DI 1 \"s_register_operand\" \"%0,0\")\n \t\t(match_operand:DI 2 \"s_register_operand\" \"r,0\")))]\n   \"\"\n-  \"eor\\\\t%0, %1, %2\\;eor\\\\t%R0, %R1, %R2\"\n+  \"eor%?\\\\t%0, %1, %2\\;eor%?\\\\t%R0, %R1, %R2\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n@@ -1076,8 +1064,8 @@\n \t\t(match_operand:DI 1 \"s_register_operand\" \"0,?r\")))]\n   \"\"\n   \"@\n-   eor\\\\t%0, %1, %2\n-   eor\\\\t%0, %1, %2\\;mov\\\\t%R0, %R1\"\n+   eor%?\\\\t%0, %1, %2\n+   eor%?\\\\t%0, %1, %2\\;mov%?\\\\t%R0, %R1\"\n [(set_attr \"length\" \"4,8\")])\n \n (define_insn \"\"\n@@ -1086,15 +1074,15 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t(match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"eor\\\\t%0, %1, %2\\;eor\\\\t%R0, %R1, %2, asr #31\"\n+  \"eor%?\\\\t%0, %1, %2\\;eor%?\\\\t%R0, %R1, %2, asr #31\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"xorsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(xor:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t(match_operand:SI 2 \"arm_rhs_operand\" \"rI\")))]\n   \"\"\n-  \"eor\\\\t%0, %1, %2\")\n+  \"eor%?\\\\t%0, %1, %2\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -1104,7 +1092,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(xor:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"eors\\\\t%0, %1, %2\"\n+  \"eor%?s\\\\t%0, %1, %2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -1113,7 +1101,7 @@\n \t\t\t\t (match_operand:SI 1 \"arm_rhs_operand\" \"rI\"))\n \t\t\t (const_int 0)))]\n   \"\"\n-  \"teq\\\\t%0, %1\"\n+  \"teq%?\\\\t%0, %1\"\n [(set_attr \"conds\" \"set\")])\n \n ;; by splitting (IOR (AND (NOT A) (NOT B)) C) as D = AND (IOR A B) (NOT C), \n@@ -1139,7 +1127,7 @@\n \t\t\t(match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\"))\n \t\t(not:SI (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI,rI\"))))]\n   \"\"\n-  \"orr\\\\t%0, %1, %2\\;bic\\\\t%0, %0, %3\"\n+  \"orr%?\\\\t%0, %1, %2\\;bic%?\\\\t%0, %0, %3\"\n [(set_attr \"length\" \"8\")])\n \n \f\n@@ -1228,21 +1216,15 @@\n   \"\"\n   \"*\n {\n-  char buf[100];\n   enum rtx_code code = GET_CODE (operands[4]);\n-  char *inst = arithmetic_instr (operands[4], TRUE);\n \n   operands[5] = gen_rtx (minmax_code (operands[5]), SImode, operands[2],\n \t\t\t operands[3]);\n   output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n-  sprintf (buf, \\\"%s%%d5\\\\t%%0, %%1, %%2\\\", inst);\n-  output_asm_insn (buf, operands);\n+  output_asm_insn (\\\"%i4%d5\\\\t%0, %1, %2\\\", operands);\n   if (which_alternative != 0 || operands[3] != const0_rtx\n       || (code != PLUS && code != MINUS && code != IOR && code != XOR))\n-  {\n-    sprintf (buf, \\\"%s%%D5\\\\t%%0, %%1, %%3\\\", inst);\n-    output_asm_insn (buf, operands);\n-  }\n+    output_asm_insn (\\\"%i4%D5\\\\t%0, %1, %3\\\", operands);\n   return \\\"\\\";\n }\n \"\n@@ -1257,27 +1239,21 @@\n \t(ashift:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rn\")))]\n   \"\"\n-  \"*\n-  return (output_shifted_move (ASHIFT, operands));\n-\")\n+  \"mov%?\\\\t%0, %1, asl %2\")\n \n (define_insn \"ashrsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(ashiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"rn\")))]\n   \"\"\n-  \"*\n-  return (output_shifted_move (ASHIFTRT, operands));\n-\")\n+  \"mov%?\\\\t%0, %1, asr %2\")\n \n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"rn\")))]\n   \"\"\n-  \"*\n-  return (output_shifted_move (LSHIFTRT, operands));\n-\")\n+  \"mov%?\\\\t%0, %1, lsr %2\")\n \n ;; rotlsi3 is not defined yet to see what happens\n \n@@ -1290,11 +1266,11 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"mov\\\\t%0, %1, ror %2\\\";\n+      return \\\"mov%?\\\\t%0, %1, ror %2\\\";\n     case 1:\n       if (INTVAL(operands[2]) > 31)\n \toperands[2] = GEN_INT (INTVAL (operands[2]) % 32);\n-      output_asm_insn (\\\"mov\\\\t%0, %1, ror %2\\\", operands);\n+      output_asm_insn (\\\"mov%?\\\\t%0, %1, ror %2\\\", operands);\n       return \\\"\\\";\n     }\n \")\n@@ -1308,16 +1284,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(match_op_dup 1 [(match_dup 2) (match_dup 3)]))]\n   \"\"\n-  \"*\n-{\n-  char buf[100];\n-\n-  sprintf (buf, \\\"movs\\\\t%%0, %%2, %s %%3\\\",\n-\t   shift_instr (GET_CODE (operands[1]), &operands[3]));\n-  output_asm_insn (buf, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"mov%?s\\\\t%0, %2, %S1\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -1328,16 +1295,7 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"*\n-{\n-  char buf[100];\n-\n-  sprintf (buf, \\\"movs\\\\t%%0, %%2, %s %%3\\\",\n-\t   shift_instr (GET_CODE (operands[1]), &operands[3]));\n-  output_asm_insn (buf, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"mov%?s\\\\t%0, %2, %S1\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -1346,15 +1304,7 @@\n \t\t [(match_operand:SI 2 \"s_register_operand\" \"r\")\n \t\t  (match_operand:SI 3 \"arm_rhs_operand\" \"rn\")])))]\n   \"\"\n-  \"*\n-{\n-  char buf[100];\n-  sprintf (buf, \\\"mvn\\\\t%%0, %%2, %s %%3\\\",\n-\t   shift_instr (GET_CODE (operands[1]), &operands[3]));\n-  output_asm_insn (buf, operands);\n-  return \\\"\\\";\n-}\n-\")\n+  \"mvn%?\\\\t%0, %2, %S1\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -1365,15 +1315,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_op_dup 1 [(match_dup 2) (match_dup 3)])))]\n   \"\"\n-  \"*\n-{\n-  char buf[100];\n-  sprintf (buf, \\\"mvns\\\\t%%0, %%2, %s %%3\\\",\n-\t   shift_instr (GET_CODE (operands[1]), &operands[3]));\n-  output_asm_insn (buf, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"mvn%?s\\\\t%0, %2, %S1\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -1384,15 +1326,7 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"*\n-{\n-  char buf[100];\n-  sprintf (buf, \\\"mvns\\\\t%%0, %%2, %s %%3\\\",\n-\t   shift_instr (GET_CODE (operands[1]), &operands[3]));\n-  output_asm_insn (buf, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"mvn%?s\\\\t%0, %2, %S1\"\n [(set_attr \"conds\" \"set\")])\n \n \f\n@@ -1410,35 +1344,35 @@\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(neg:SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"\"\n-  \"rsb\\\\t%0, %1, #0\")\n+  \"rsb%?\\\\t%0, %1, #0\")\n \n (define_insn \"negsf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(neg:SF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"\"\n-  \"mnfs\\\\t%0, %1\"\n+  \"mnf%?s\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"negdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"\"\n-  \"mnfd\\\\t%0, %1\"\n+  \"mnf%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(neg:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"mnfd\\\\t%0, %1\"\n+  \"mnf%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"negxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(neg:XF (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"mnfe\\\\t%0, %1\"\n+  \"mnf%?e\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n ;; abssi2 doesn't really clobber the condition codes if a different register\n@@ -1453,7 +1387,7 @@\n   \"\"\n   \"@\n    cmp\\\\t%0, #0\\;rsblt\\\\t%0, %0, #0\n-   eor\\\\t%0, %1, %1, asr #31\\;sub\\\\t%0, %0, %1, asr #31\"\n+   eor%?\\\\t%0, %1, %1, asr #31\\;sub%?\\\\t%0, %0, %1, asr #31\"\n [(set_attr \"conds\" \"clob,*\")\n  (set_attr \"length\" \"8\")])\n \n@@ -1464,138 +1398,138 @@\n   \"\"\n   \"@\n    cmp\\\\t%0, #0\\;rsbgt\\\\t%0, %0, #0\n-   eor\\\\t%0, %1, %1, asr #31\\;rsb\\\\t%0, %0, %1, asr #31\"\n+   eor%?\\\\t%0, %1, %1, asr #31\\;rsb%?\\\\t%0, %0, %1, asr #31\"\n [(set_attr \"conds\" \"clob,*\")\n  (set_attr \"length\" \"8\")])\n \n (define_insn \"abssf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t (abs:SF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"\"\n-  \"abss\\\\t%0, %1\"\n+  \"abs%?s\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"absdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(abs:DF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"\"\n-  \"absd\\\\t%0, %1\"\n+  \"abs%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(abs:DF (float_extend:DF\n \t\t (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"absd\\\\t%0, %1\"\n+  \"abs%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"absxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(abs:XF (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"abse\\\\t%0, %1\"\n+  \"abs%?e\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"\"\n-  \"sqts\\\\t%0, %1\"\n+  \"sqt%?s\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"\"\n-  \"sqtd\\\\t%0, %1\"\n+  \"sqt%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(sqrt:DF (float_extend:DF\n \t\t  (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"sqtd\\\\t%0, %1\"\n+  \"sqt%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"sqrtxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(sqrt:XF (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"sqte\\\\t%0, %1\"\n+  \"sqt%?e\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"sinsf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"s_register_operand\" \"f\")] 0))]\n   \"\"\n-  \"sins\\\\t%0, %1\"\n+  \"sin%?s\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"sindf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"s_register_operand\" \"f\")] 0))]\n   \"\"\n-  \"sind\\\\t%0, %1\"\n+  \"sin%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(unspec:DF [(float_extend:DF\n \t\t     (match_operand:SF 1 \"s_register_operand\" \"f\"))] 0))]\n   \"\"\n-  \"sind\\\\t%0, %1\"\n+  \"sin%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"sinxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"s_register_operand\" \"f\")] 0))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"sine\\\\t%0, %1\"\n+  \"sin%?e\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"cossf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"s_register_operand\" \"f\")] 1))]\n   \"\"\n-  \"coss\\\\t%0, %1\"\n+  \"cos%?s\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"cosdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 1 \"s_register_operand\" \"f\")] 1))]\n   \"\"\n-  \"cosd\\\\t%0, %1\"\n+  \"cos%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(unspec:DF [(float_extend:DF\n \t\t     (match_operand:SF 1 \"s_register_operand\" \"f\"))] 1))]\n   \"\"\n-  \"cosd\\\\t%0, %1\"\n+  \"cos%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"cosxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"s_register_operand\" \"f\")] 1))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"cose\\\\t%0, %1\"\n+  \"cos%?e\\\\t%0, %1\"\n [(set_attr \"type\" \"float_em\")])\n \n (define_insn \"one_cmpldi2\"\n   [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r\")\n \t(not:DI (match_operand:DI 1 \"s_register_operand\" \"?r,0\")))]\n   \"\"\n-  \"mvn\\\\t%0, %1\\;mvn\\\\t%R0, %R1\"\n+  \"mvn%?\\\\t%0, %1\\;mvn%?\\\\t%R0, %R1\"\n [(set_attr \"length\" \"8\")])\n \n (define_insn \"one_cmplsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"\"\n-  \"mvn\\\\t%0, %1\")\n+  \"mvn%?\\\\t%0, %1\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -1604,7 +1538,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_dup 1)))]\n   \"\"\n-  \"mvns\\\\t%0, %1\"\n+  \"mvn%?s\\\\t%0, %1\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -1613,7 +1547,7 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"mvns\\\\t%0, %1\"\n+  \"mvn%?s\\\\t%0, %1\"\n [(set_attr \"conds\" \"set\")])\n \f\n ;; Fixed <--> Floating conversion insns\n@@ -1622,42 +1556,42 @@\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(float:SF (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"\"\n-  \"flts\\\\t%0, %1\"\n+  \"flt%?s\\\\t%0, %1\"\n [(set_attr \"type\" \"r_2_f\")])\n \n (define_insn \"floatsidf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(float:DF (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"\"\n-  \"fltd\\\\t%0, %1\"\n+  \"flt%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"r_2_f\")])\n \n (define_insn \"floatsixf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(float:XF (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"flte\\\\t%0, %1\"\n+  \"flt%?e\\\\t%0, %1\"\n [(set_attr \"type\" \"r_2_f\")])\n \n (define_insn \"fix_truncsfsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(fix:SI (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"\"\n-  \"fixz\\\\t%0, %1\"\n+  \"fix%?z\\\\t%0, %1\"\n [(set_attr \"type\" \"f_2_r\")])\n \n (define_insn \"fix_truncdfsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(fix:SI (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"\"\n-  \"fixz\\\\t%0, %1\"\n+  \"fix%?z\\\\t%0, %1\"\n [(set_attr \"type\" \"f_2_r\")])\n \n (define_insn \"fix_truncxfsi2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(fix:SI (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"fixz\\\\t%0, %1\"\n+  \"fix%?z\\\\t%0, %1\"\n [(set_attr \"type\" \"f_2_r\")])\n \n ;; Truncation insns\n@@ -1667,23 +1601,23 @@\n \t(float_truncate:SF\n \t (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"\"\n-  \"mvfs\\\\t%0, %1\"\n+  \"mvf%?s\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"truncxfsf2\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"=f\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"mvfs\\\\t%0, %1\"\n+  \"mvf%?s\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"truncxfdf2\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(float_truncate:DF\n \t (match_operand:XF 1 \"s_register_operand\" \"f\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"mvfd\\\\t%0, %1\"\n+  \"mvf%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \f\n ;; Zero and sign extension instructions.\n@@ -1694,8 +1628,8 @@\n   \"\"\n   \"*\n   if (REGNO (operands[1]) != REGNO (operands[0]))\n-    output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n-  return \\\"mov\\\\t%R0, #0\\\";\n+    output_asm_insn (\\\"mov%?\\\\t%0, %1\\\", operands);\n+  return \\\"mov%?\\\\t%R0, #0\\\";\n \"\n [(set_attr \"length\" \"8\")])\n \n@@ -1704,8 +1638,8 @@\n \t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"\"\n   \"@\n-   and\\\\t%0, %1, #255\\;mov\\\\t%R0, #0\n-   ldrb\\\\t%0, %1\\;mov\\\\t%R0, #0\"\n+   and%?\\\\t%0, %1, #255\\;mov%?\\\\t%R0, #0\n+   ldr%?b\\\\t%0, %1\\;mov%?\\\\t%R0, #0\"\n [(set_attr \"length\" \"8\")\n  (set_attr \"type\" \"*,load\")])\n \n@@ -1715,8 +1649,8 @@\n   \"\"\n   \"*\n   if (REGNO (operands[1]) != REGNO (operands[0]))\n-    output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n-  return \\\"mov\\\\t%R0, %0, asr #31\\\";\n+    output_asm_insn (\\\"mov%?\\\\t%0, %1\\\", operands);\n+  return \\\"mov%?\\\\t%R0, %0, asr #31\\\";\n \"\n [(set_attr \"length\" \"8\")])\n \n@@ -1737,7 +1671,7 @@\n \t(zero_extend:HI\n \t (match_operand:QI 1 \"s_register_operand\" \"r\")))]\n   \"\"\n-  \"and\\\\t%0, %1, #255\\\\t@ zero_extendqihi2\")\n+  \"and%?\\\\t%0, %1, #255\\\\t%@ zero_extendqihi2\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -1746,15 +1680,15 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(zero_extend:HI (match_dup 1)))]\n   \"\"\n-  \"ands\\\\t%0, %1, #255\"\n+  \"and%?s\\\\t%0, %1, #255\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n \t(compare:CC_NOOV (match_operand:QI 0 \"s_register_operand\" \"r\")\n \t\t\t (const_int 0)))]\n   \"\"\n-  \"tst\\\\t%0, #255\"\n+  \"tst%?\\\\t%0, #255\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"zero_extendqisi2\"\n@@ -1763,8 +1697,8 @@\n \t (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n   \"\"\n   \"@\n-   and\\\\t%0, %1, #255\\\\t@ zero_extendqisi2\n-   ldrb\\\\t%0, %1\\\\t@ zero_extendqisi2\"\n+   and%?\\\\t%0, %1, #255\\\\t%@ zero_extendqisi2\n+   ldr%?b\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n [(set_attr \"type\" \"*,load\")])\n \n (define_insn \"\"\n@@ -1774,7 +1708,7 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(zero_extend:SI (match_dup 1)))]\n   \"\"\n-  \"ands\\\\t%0, %1, #255\"\n+  \"and%?s\\\\t%0, %1, #255\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -1784,7 +1718,7 @@\n    (set (match_operand:QI 0 \"s_register_operand\" \"=r\")\n \t(match_dup 1))]\n   \"\"\n-  \"ands\\\\t%0, %1, #255\"\n+  \"and%?s\\\\t%0, %1, #255\"\n [(set_attr \"conds\" \"set\")])\n \n (define_expand \"extendhisi2\"\n@@ -1828,20 +1762,20 @@\n   [(set (match_operand:DF 0 \"s_register_operand\" \"=f\")\n \t(float_extend:DF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"\"\n-  \"mvfd\\\\t%0, %1\"\n+  \"mvf%?d\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n (define_insn \"extendsfxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(float_extend:XF (match_operand:SF 1 \"s_register_operand\" \"f\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"mvfe\\\\t%0, %1\")\n+  \"mvf%?e\\\\t%0, %1\")\n \n (define_insn \"extenddfxf2\"\n   [(set (match_operand:XF 0 \"s_register_operand\" \"=f\")\n \t(float_extend:XF (match_operand:DF 1 \"s_register_operand\" \"f\")))]\n   \"ENABLE_XF_PATTERNS\"\n-  \"mvfe\\\\t%0, %1\"\n+  \"mvf%?e\\\\t%0, %1\"\n [(set_attr \"type\" \"float\")])\n \n \f\n@@ -2049,36 +1983,37 @@\n \t{\n \t  /* ... so modify the operands here.  */\n \t  operands[1] = XEXP (operands[1], 0);\n-\t  output_asm_insn (\\\"sub\\\\t%0, pc, #(8 + . - %a1) & ~4095\\\", operands);\n-\t  output_asm_insn (\\\"ldr\\\\t%0, [%0, #- ((4 + . - %a1) & 4095)]\\\",\n+\t  output_asm_insn (\\\"sub%?\\\\t%0, pc, #(8 + . - %a1) & ~4095\\\",\n+\t\t\t   operands);\n+\t  output_asm_insn (\\\"ldr%?\\\\t%0, [%0, #- ((4 + . - %a1) & 4095)]\\\",\n \t\t\t   operands);\n \t}\n       else\n \t{\n \t  /* ... and here.  */\n \t  operands[1] = XEXP (operands[1], 0);\n-\t  output_asm_insn (\\\"ldr\\\\t%0, [pc, %1 - . - 8]\\\", operands);\n+\t  output_asm_insn (\\\"ldr%?\\\\t%0, [pc, %1 - . - 8]\\\", operands);\n \t}\n       return \\\"\\\";\n \n     case 1:\n       if (GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF\n \t  &&  CONSTANT_POOL_ADDRESS_P (XEXP (operands[1], 0)))\n \tabort ();\n-      return \\\"ldr\\\\t%0, %1\\\";\n+      return \\\"ldr%?\\\\t%0, %1\\\";\n \n     case 3:\n-      return \\\"mov\\\\t%0, %1\\\";\n+      return \\\"mov%?\\\\t%0, %1\\\";\n     case 2:\n       if (!const_ok_for_arm (INTVAL (operands[1])))\n \t{\n \t  operands[1] = GEN_INT (~INTVAL (operands[1]));\n-\t  output_asm_insn (\\\"mvn\\\\t%0, %1\\\", operands);\n+\t  output_asm_insn (\\\"mvn%?\\\\t%0, %1\\\", operands);\n \t  return \\\"\\\";\n \t}\n-      return \\\"mov\\\\t%0, %1\\\";\n+      return \\\"mov%?\\\\t%0, %1\\\";\n     case 4:\n-      return \\\"str\\\\t%1, %0\\\";\n+      return \\\"str%?\\\\t%1, %0\\\";\n     case 5:\n       return output_load_symbol (insn, operands);\n     }\n@@ -2106,8 +2041,8 @@\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\") (match_dup 1))]\n   \"\"\n   \"@\n-   cmp\\\\t%0, #0\n-   subs\\\\t%0, %1, #0\"\n+   cmp%?\\\\t%0, #0\n+   sub%?s\\\\t%0, %1, #0\"\n [(set_attr \"conds\" \"set\")])\n \n ;; Subroutine to store a half word from a register into memory.\n@@ -2247,16 +2182,16 @@\n \tif (!const_ok_for_arm (INTVAL (operands[1])))\n \t  {\n \t    operands[1] = GEN_INT (~INTVAL (operands[1]));\n-\t    output_asm_insn (\\\"mvn\\\\t%0, %1\\\", operands);\n+\t    output_asm_insn (\\\"mvn%?\\\\t%0, %1\\\", operands);\n \t    return \\\"\\\";\n \t  }\n \t/* fall through */\n       case 0:\n-\treturn \\\"mov\\\\t%0, %1\\\\t@movhi\\\";\n+\treturn \\\"mov%?\\\\t%0, %1\\\\t%@ movhi\\\";\n       case 2:\n-\treturn \\\"ldr\\\\t%0, %1\\\\t@movhi\\\";\n+\treturn \\\"ldr%?\\\\t%0, %1\\\\t%@ movhi\\\";\n       case 3:\n-\treturn \\\"str\\\\t%1, %0\\\\t@movhi\\\";\n+\treturn \\\"str%?\\\\t%1, %0\\\\t%@ movhi\\\";\n     }\n \"\n [(set_attr \"type\" \"*,*,load,store1\")])\n@@ -2304,15 +2239,15 @@\n       if (INTVAL (operands[1]) < 0)\n \t{\n \t  operands[1] = GEN_INT (~INTVAL (operands[1]));\n-\t  output_asm_insn (\\\"mvn\\\\t%0, %1\\\", operands);\n+\t  output_asm_insn (\\\"mvn%?\\\\t%0, %1\\\", operands);\n \t  return \\\"\\\";\n \t}\n     case 0:\n-      return \\\"mov\\\\t%0, %1\\\";\n+      return \\\"mov%?\\\\t%0, %1\\\";\n     case 2:\n-      return \\\"ldrb\\\\t%0, %1\\\";\n+      return \\\"ldr%?b\\\\t%0, %1\\\";\n     case 3:\n-      return \\\"strb\\\\t%1, %0\\\";\n+      return \\\"str%?b\\\\t%1, %0\\\";\n     }\n \"\n [(set_attr \"type\" \"*,*,load,store1\")])\n@@ -2328,27 +2263,27 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"mvfs\\\\t%0, %1\\\";\n+      return \\\"mvf%?s\\\\t%0, %1\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"mnfs\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"mnf%?s\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n     case 2:\n-      return \\\"ldfs\\\\t%0, %1\\\";\n+      return \\\"ldf%?s\\\\t%0, %1\\\";\n     case 3:\n-      return \\\"stfs\\\\t%1, %0\\\";\n+      return \\\"stf%?s\\\\t%1, %0\\\";\n     case 4:\n-      return \\\"stmfd\\\\tsp!, {%1}\\;ldfs\\\\t%0, [sp],#4\\\";\n+      return \\\"str%?\\\\t%1, [sp, #-4]!\\;ldf%?s\\\\t%0, [sp], #4\\\";\n     case 5:\n-      return \\\"stfs\\\\t%1, [sp,#-4]!\\;ldmfd\\\\tsp!, {%0}\\\";\n+      return \\\"stf%?s\\\\t%1, [sp, #-4]!\\;ldr%?\\\\t%0, [sp], #4\\\";\n     case 6:\n-      return \\\"mov\\\\t%0, %1\\\";\n+      return \\\"mov%?\\\\t%0, %1\\\";\n     case 7:\n-      return \\\"ldr\\\\t%0, %1\\\\t@ float\\\";\n+      return \\\"ldr%?\\\\t%0, %1\\\\t%@ float\\\";\n     case 8:\n-      return \\\"str\\\\t%1, %0\\\\t@ float\\\";\n+      return \\\"str%?\\\\t%1, %0\\\\t%@ float\\\";\n   }\n }\n \"\n@@ -2388,50 +2323,44 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      operands[1] = XEXP (operands[1], 0);\n-      output_asm_insn (\\\"ldmia\\\\t%1, {%0, %R0}\\\\t@ double\\\",\n-\t\t       operands);\n-      return \\\"\\\";\n+      return \\\"ldm%?ia\\\\t%m1, {%0, %R0}\\\\t%@ double\\\";\n \n     case 1:\n-      operands[0] = XEXP (operands[0], 0);\n-      output_asm_insn (\\\"stmia\\\\t%0, {%1, %R1}\\\\t@ double\\\",\n-\t\t       operands);\n-      return \\\"\\\";\n+      return \\\"stm%?ia\\\\t%m0, {%1, %R1}\\\\t%@ double\\\";\n \n     case 2:\n       ops[0] = operands[0];\n       ops[1] = XEXP (XEXP (operands[1], 0), 0);\n       ops[2] = XEXP (XEXP (operands[1], 0), 1);\n       if (!INTVAL (ops[2]) || const_ok_for_arm (INTVAL (ops[2])))\n-\toutput_asm_insn (\\\"add\\\\t%0, %1, %2\\\", ops);\n+\toutput_asm_insn (\\\"add%?\\\\t%0, %1, %2\\\", ops);\n       else\n-\toutput_asm_insn (\\\"sub\\\\t%0, %1, #%n2\\\", ops);\n-      return \\\"ldmia\\\\t%0, {%0, %R0}\\\\t@ double\\\";\n+\toutput_asm_insn (\\\"sub%?\\\\t%0, %1, #%n2\\\", ops);\n+      return \\\"ldm%?ia\\\\t%0, {%0, %R0}\\\\t%@ double\\\";\n \n     case 3:\n       ops[0] = operands[2];\n       ops[1] = XEXP (XEXP (operands[0], 0), 0);\n       ops[2] = XEXP (XEXP (operands[0], 0), 1);\n       if (!INTVAL (ops[2]) || const_ok_for_arm (INTVAL (ops[2])))\n-\toutput_asm_insn (\\\"add\\\\t%0, %1, %2\\\", ops);\n+\toutput_asm_insn (\\\"add%?\\\\t%0, %1, %2\\\", ops);\n       else\n-\toutput_asm_insn (\\\"sub\\\\t%0, %1, #%n2\\\", ops);\n-      return \\\"stmia\\\\t%2, {%1, %R1}\\\\t@ double\\\";\n+\toutput_asm_insn (\\\"sub%?\\\\t%0, %1, #%n2\\\", ops);\n+      return \\\"stm%?ia\\\\t%2, {%1, %R1}\\\\t%@ double\\\";\n \n     case 4:\n     case 5:\n-      return \\\"mvfd\\\\t%0, %1\\\";\n+      return \\\"mvf%?d\\\\t%0, %1\\\";\n \n     case 6:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"mnfd\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"mnf%?d\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n \n-    case 7: return \\\"ldfd\\\\t%0, %1\\\";\n-    case 8: return \\\"stfd\\\\t%1, %0\\\";\n+    case 7: return \\\"ldf%?d\\\\t%0, %1\\\";\n+    case 8: return \\\"stf%?d\\\\t%1, %0\\\";\n     case 9: return output_mov_double_fpu_from_arm (operands);\n     case 10: return output_mov_double_arm_from_fpu (operands);\n     case 11: return output_move_double (operands);\n@@ -2452,16 +2381,16 @@\n \n   switch (which_alternative)\n     {\n-    case 0: return \\\"mvfe\\\\t%0, %1\\\";\n+    case 0: return \\\"mvf%?e\\\\t%0, %1\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"mnfe\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"mnf%?e\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n \n-    case 2: return \\\"ldfe\\\\t%0, %1\\\";\n-    case 3: return \\\"stfe\\\\t%1, %0\\\";\n+    case 2: return \\\"ldf%?e\\\\t%0, %1\\\";\n+    case 3: return \\\"stf%?e\\\\t%1, %0\\\";\n     case 4: return output_mov_long_double_fpu_from_arm (operands);\n     case 5: return output_mov_long_double_arm_from_fpu (operands);\n     case 6: return output_mov_long_double_arm_from_arm (operands);\n@@ -2517,7 +2446,7 @@\n   ops[1] = SET_DEST (XVECEXP (operands[0], 0, 1));\n   ops[2] = SET_DEST (XVECEXP (operands[0], 0, count - 2));\n \n-  output_asm_insn (\\\"ldmia\\\\t%0!, {%1-%2}\\\\t@ load multiple\\\", ops);\n+  output_asm_insn (\\\"ldm%?ia\\\\t%0!, {%1-%2}\\\\t%@ load multiple\\\", ops);\n   return \\\"\\\";\n }\n \"\n@@ -2539,7 +2468,7 @@\n   ops[1] = SET_DEST (XVECEXP (operands[0], 0, 0));\n   ops[2] = SET_DEST (XVECEXP (operands[0], 0, count - 1));\n \n-  output_asm_insn (\\\"ldmia\\\\t%0, {%1-%2}\\\\t@ load multiple\\\", ops);\n+  output_asm_insn (\\\"ldm%?ia\\\\t%0, {%1-%2}\\\\t%@ load multiple\\\", ops);\n   return \\\"\\\";\n }\n \"\n@@ -2586,7 +2515,7 @@\n   ops[1] = SET_SRC (XVECEXP (operands[0], 0, 1));\n   ops[2] = SET_SRC (XVECEXP (operands[0], 0, count - 2));\n \n-  output_asm_insn (\\\"stmia\\\\t%0!, {%1-%2}\\\\t@ str multiple\\\", ops);\n+  output_asm_insn (\\\"stm%?ia\\\\t%0!, {%1-%2}\\\\t%@ str multiple\\\", ops);\n   return \\\"\\\";\n }\n \"\n@@ -2613,7 +2542,7 @@\n   ops[1] = SET_SRC (XVECEXP (operands[0], 0, 0));\n   ops[2] = SET_SRC (XVECEXP (operands[0], 0, count - 1));\n \n-  output_asm_insn (\\\"stmia\\\\t%0, {%1-%2}\\\\t@ str multiple\\\", ops);\n+  output_asm_insn (\\\"stm%?ia\\\\t%0, {%1-%2}\\\\t%@ str multiple\\\", ops);\n   return \\\"\\\";\n }\n \"\n@@ -2784,8 +2713,8 @@\n   \"*\n   if (GET_CODE (operands[2]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[2])))\n-    return \\\"cmn\\\\t%1, #%n2\\\";\n-  return \\\"cmp\\\\t%1, %2\\\";\n+    return \\\"cmn%?\\\\t%1, #%n2\\\";\n+  return \\\"cmp%?\\\\t%1, %2\\\";\n \"\n [(set_attr \"conds\" \"set\")])\n \n@@ -2794,7 +2723,7 @@\n \t(compare (match_operand:SI 1 \"s_register_operand\" \"r\")\n \t\t (neg:SI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n   \"\"\n-  \"cmn\\\\t%1, %2\"\n+  \"cmn%?\\\\t%1, %2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -2804,9 +2733,7 @@\n \t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n \t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rn\")])))]\n   \"\"\n-  \"*\n-  return output_shift_compare (operands, FALSE);\n-\"\n+  \"cmp%?\\\\t%1, %3, %S2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -2816,9 +2743,7 @@\n \t\t\t  [(match_operand:SI 3 \"s_register_operand\" \"r\")\n \t\t\t   (match_operand:SI 4 \"arm_rhs_operand\" \"rn\")]))))]\n   \"\"\n-  \"*\n-  return output_shift_compare (operands, TRUE);\n-\"\n+  \"cmn%?\\\\t%1, %3, %S2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -2833,12 +2758,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"cmf\\\\t%0, %1\\\";\n+      return \\\"cmf%?\\\\t%0, %1\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"cnf%?\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -2858,12 +2783,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"cmf\\\\t%0, %1\\\";\n+      return \\\"cmf%?\\\\t%0, %1\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"cnf%?\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -2884,12 +2809,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"cmf\\\\t%0, %1\\\";\n+      return \\\"cmf%?\\\\t%0, %1\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"cnf%?\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -2903,7 +2828,7 @@\n \t\t      (float_extend:DF\n \t\t       (match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"cmf\\\\t%0, %1\"\n+  \"cmf%?\\\\t%0, %1\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n@@ -2919,12 +2844,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"cmf\\\\t%0, %1\\\";\n+      return \\\"cmf%?\\\\t%0, %1\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnf\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"cnf%?\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -2944,12 +2869,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"cmfe\\\\t%0, %1\\\";\n+      return \\\"cmf%?e\\\\t%0, %1\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnfe\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"cnf%?e\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -2969,12 +2894,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"cmfe\\\\t%0, %1\\\";\n+      return \\\"cmf%?e\\\\t%0, %1\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnfe\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"cnf%?e\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -2995,12 +2920,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"cmfe\\\\t%0, %1\\\";\n+      return \\\"cmf%?e\\\\t%0, %1\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnfe\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"cnf%?e\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -3014,7 +2939,7 @@\n \t\t       (float_extend:DF\n \t\t\t(match_operand:SF 1 \"s_register_operand\" \"f\"))))]\n   \"\"\n-  \"cmfe\\\\t%0, %1\"\n+  \"cmf%?e\\\\t%0, %1\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"type\" \"f_2_r\")])\n \n@@ -3030,12 +2955,12 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \\\"cmfe\\\\t%0, %1\\\";\n+      return \\\"cmf%?e\\\\t%0, %1\\\";\n     case 1:\n       REAL_VALUE_FROM_CONST_DOUBLE (r, operands[1]);\n       r = REAL_VALUE_NEGATE (r);\n       operands[1] = CONST_DOUBLE_FROM_REAL_VALUE (r, GET_MODE (operands[1]));\n-      output_asm_insn (\\\"cnfe\\\\t%0, %1\\\", operands);\n+      output_asm_insn (\\\"cnf%?e\\\\t%0, %1\\\", operands);\n       return \\\"\\\";\n     }\n }\n@@ -3052,7 +2977,7 @@\n (define_insn \"\"\n   [(set (match_operand 0 \"cc_register\" \"\") (match_dup 0))]\n   \"\"\n-  \"\\\\t@ deleted compare\"\n+  \"\\\\t%@ deleted compare\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"length\" \"0\")])\n \n@@ -3386,7 +3311,7 @@\n     arm_ccfsm_state += 2;\n     return \\\"\\\";\n   }\n-  return \\\"b\\\\t%l0\\\";\n+  return \\\"b%?\\\\t%l0\\\";\n }\")\n \n (define_expand \"call\"\n@@ -3475,7 +3400,7 @@\n \t (match_operand:SI 1 \"general_operand\" \"g\"))\n    (clobber (reg:SI 14))]\n   \"GET_CODE (operands[0]) == SYMBOL_REF\"\n-  \"bl\\\\t%a0\"\n+  \"bl%?\\\\t%a0\"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n \t\t    (const_string \"clob\")\n@@ -3488,7 +3413,7 @@\n \t(match_operand:SI 2 \"general_operand\" \"g\")))\n    (clobber (reg:SI 14))]\n   \"GET_CODE(operands[1]) == SYMBOL_REF\"\n-  \"bl\\\\t%a1\"\n+  \"bl%?\\\\t%a1\"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n \t\t    (const_string \"clob\")\n@@ -3602,35 +3527,35 @@\n \t(match_operand:SI 0 \"s_register_operand\" \"r\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n-  \"mov\\\\tpc, %0\\\\t@ table jump, label %l1\")\n+  \"mov%?\\\\tpc, %0\\\\t%@ table jump, label %l1\")\n \n (define_insn \"\"\n   [(set (pc)\n \t(match_operand:SI 0 \"memory_operand\" \"m\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n-  \"ldr\\\\tpc, %0\\\\t@ table jump, label %l1\"\n+  \"ldr%?\\\\tpc, %0\\\\t%@ table jump, label %l1\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"indirect_jump\"\n   [(set (pc)\n \t(match_operand:SI 0 \"s_register_operand\" \"r\"))]\n   \"\"\n-  \"mov\\\\tpc, %0\\\\t@ indirect jump\")\n+  \"mov%?\\\\tpc, %0\\\\t%@ indirect jump\")\n \n (define_insn \"\"\n   [(set (pc)\n \t(match_operand:SI 0 \"memory_operand\" \"m\"))]\n   \"\"\n-  \"ldr\\\\tpc, %0\\\\t@ indirect jump\"\n+  \"ldr%?\\\\tpc, %0\\\\t%@ indirect jump\"\n [(set_attr \"type\" \"load\")])\n \f\n ;; Misc insns\n \n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\"\n-  \"mov\\\\tr0, r0\\\\t@ nop\")\n+  \"mov%?\\\\tr0, r0\\\\t%@ nop\")\n \f\n ;; Patterns to allow combination of arithmetic, cond code and shifts\n \n@@ -3642,9 +3567,7 @@\n               (match_operand:SI 5 \"nonmemory_operand\" \"rI\")])\n            (match_operand:SI 2 \"s_register_operand\" \"r\")]))]\n   \"\"\n-  \"*\n-  return (output_arithmetic_with_shift (operands, TRUE, FALSE));\n-\")\n+  \"%i1%?\\\\t%0, %2, %4, %S3\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n@@ -3658,9 +3581,7 @@\n \t(match_op_dup 1 [(match_op_dup 3 [(match_dup 4) (match_dup 5)])\n \t\t\t (match_dup 2)]))]\n   \"\"\n-  \"*\n-  return (output_arithmetic_with_shift (operands, TRUE, TRUE));\n-\"\n+  \"%i1%?s\\\\t%0, %2, %4, %S3\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -3673,9 +3594,7 @@\n \t\t\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"*\n-  return (output_arithmetic_with_shift (operands, TRUE, TRUE));\n-\"\n+  \"%i1%?s\\\\t%0, %2, %4, %S3\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n@@ -3685,68 +3604,34 @@\n \t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n \t\t    (match_operand:SI 4 \"nonmemory_operand\" \"rn\")])))]\n   \"\"\n-  \"*\n-{\n-  rtx ops[6];\n-\n-  ops[0] = operands[0];\n-  ops[1] = gen_rtx (MINUS, SImode, operands[1], operands[2]);\n-  ops[2] = operands[1];\n-  ops[3] = operands[2];\n-  ops[4] = operands[3];\n-  ops[5] = operands[4];\n-  return output_arithmetic_with_shift (ops, FALSE, FALSE);\n-}\n-\")\n+  \"sub%?\\\\t%0, %1, %3, %S2\")\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t\t     (match_operand:SI 4 \"nonmemory_operand\" \"rn\")]))\n-\t\t\t (const_int 0)))\n+\t(compare:CC_NOOV\n+\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t   (match_operator:SI 2 \"shift_operator\"\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t     (match_operand:SI 4 \"nonmemory_operand\" \"rn\")]))\n+\t (const_int 0)))\n    (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(minus:SI (match_dup 1) (match_op_dup 2 [(match_dup 3)\n \t\t\t\t\t\t (match_dup 4)])))]\n   \"\"\n-  \"*\n-{\n-  rtx ops[6];\n-\n-  ops[0] = operands[0];\n-  ops[1] = gen_rtx (MINUS, SImode, operands[1], operands[2]);\n-  ops[2] = operands[1];\n-  ops[3] = operands[2];\n-  ops[4] = operands[3];\n-  ops[5] = operands[4];\n-  return output_arithmetic_with_shift (ops, FALSE, TRUE);\n-}\n-\"\n+  \"sub%?s\\\\t%0, %1, %3, %S2\"\n [(set_attr \"conds\" \"set\")])\n \n (define_insn \"\"\n   [(set (reg:CC_NOOV 24)\n-\t(compare:CC_NOOV (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t\t   (match_operator:SI 2 \"shift_operator\"\n-\t\t\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t\t\t     (match_operand:SI 4 \"nonmemory_operand\" \"rn\")]))\n-\t\t\t (const_int 0)))\n+\t(compare:CC_NOOV\n+\t (minus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t   (match_operator:SI 2 \"shift_operator\"\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t     (match_operand:SI 4 \"nonmemory_operand\" \"rn\")]))\n+\t (const_int 0)))\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"\"\n-  \"*\n-{\n-  rtx ops[6];\n-\n-  ops[0] = operands[0];\n-  ops[1] = gen_rtx (MINUS, SImode, operands[1], operands[2]);\n-  ops[2] = operands[1];\n-  ops[3] = operands[2];\n-  ops[4] = operands[3];\n-  ops[5] = operands[4];\n-  return output_arithmetic_with_shift (ops, FALSE, TRUE);\n-}\n-\"\n+  \"sub%?s\\\\t%0, %1, %3, %S2\"\n [(set_attr \"conds\" \"set\")])\n \n ;; These variants of the above insns can occur if the first operand is the\n@@ -3766,15 +3651,11 @@\n \t\t (match_operand:SI 1 \"const_int_operand\" \"n\")))]\n   \"reload_in_progress\"\n   \"*\n-{\n-  char instr[100];\n-  sprintf (instr, \\\"add\\\\t%%0, %%2, %%3, %s %%4\\\", \n-\t   shift_instr (GET_CODE (operands[5]), &operands[4]));\n-  output_asm_insn (instr, operands);\n+  output_asm_insn (\\\"add%?\\\\t%0, %2, %3, %S5\\\", operands);\n   operands[2] = operands[1];\n   operands[1] = operands[0];\n   return output_add_immediate (operands);\n-}\"\n+\"\n ; we have no idea how long the add_immediate is, it could be up to 4.\n [(set_attr \"length\" \"20\")])\n \n@@ -3794,14 +3675,9 @@\n \t\t (match_dup 2)))]\n   \"reload_in_progress\"\n   \"*\n-{\n-  char instr[100];\n-  sprintf (instr, \\\"adds\\\\t%%0, %%0, %%3, %s %%4\\\",\n-\t   shift_instr (GET_CODE (operands[5]), &operands[4]));\n   output_add_immediate (operands);\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\"\n+  return \\\"add%?s\\\\t%0, %0, %3, %S5\\\";\n+\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"length\" \"20\")])\n \n@@ -3818,14 +3694,9 @@\n    (clobber (match_scratch:SI 0 \"=&r\"))]\n   \"reload_in_progress\"\n   \"*\n-{\n-  char instr[100];\n-  sprintf (instr, \\\"adds\\\\t%%0, %%0, %%3, %s %%4\\\",\n-\t   shift_instr (GET_CODE (operands[5]), &operands[4]));\n   output_add_immediate (operands);\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\"\n+  return \\\"add%?s\\\\t%0, %0, %3, %S5\\\";\n+\"\n [(set_attr \"conds\" \"set\")\n  (set_attr \"length\" \"20\")])\n \n@@ -3840,7 +3711,7 @@\n \t\t (match_operand:SI 4 \"const_int_operand\" \"n,n\")))]\n   \"reload_in_progress\"\n   \"*\n-  output_asm_insn (\\\"mla\\\\t%0, %2, %1, %3\\\", operands);\n+  output_asm_insn (\\\"mla%?\\\\t%0, %2, %1, %3\\\", operands);\n   operands[2] = operands[4];\n   operands[1] = operands[0];\n   return output_add_immediate (operands);\n@@ -3861,7 +3732,7 @@\n   \"reload_in_progress\"\n   \"*\n   output_add_immediate (operands);\n-  output_asm_insn (\\\"mlas\\\\t%0, %3, %4, %0\\\", operands);\n+  output_asm_insn (\\\"mla%?s\\\\t%0, %3, %4, %0\\\", operands);\n   return \\\"\\\";\n \"\n [(set_attr \"length\" \"20\")\n@@ -3879,7 +3750,7 @@\n   \"reload_in_progress\"\n   \"*\n   output_add_immediate (operands);\n-  return \\\"mlas\\\\t%0, %3, %4, %0\\\";\n+  return \\\"mla%?s\\\\t%0, %3, %4, %0\\\";\n \"\n [(set_attr \"length\" \"20\")\n  (set_attr \"conds\" \"set\")])\n@@ -4139,25 +4010,15 @@\n    (clobber (reg 24))]\n   \"\"\n   \"*\n-{\n-  char *instr = arithmetic_instr (operands[5], TRUE);\n-  char pattern[100];\n-\n   if (GET_CODE (operands[4]) == LT && operands[3] == const0_rtx)\n-    {\n-      sprintf (pattern, \\\"%s\\\\t%%0, %%1, %%2, lsr #31\\\", instr);\n-      output_asm_insn (pattern, operands);\n-      return \\\"\\\";\n-    }\n+    return \\\"%i5\\\\t%0, %1, %2, lsr #31\\\";\n+\n   output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n   if (GET_CODE (operands[5]) == AND)\n     output_asm_insn (\\\"mov%D4\\\\t%0, #0\\\", operands);\n   else if (which_alternative != 0)\n     output_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n-  sprintf (pattern, \\\"%s%%d4\\\\t%%0, %%1, #1\\\", instr);\n-  output_asm_insn (pattern, operands);\n-  return \\\"\\\";\n-}\n+  return \\\"%i5%d4\\\\t%0, %1, #1\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n@@ -4413,22 +4274,12 @@\n    (clobber (reg 24))]\n   \"\"\n   \"*\n-{\n-  char pattern[100];\n-\n   if (GET_CODE (operands[6]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[6])))\n     output_asm_insn (\\\"cmn\\\\t%5, #%n6\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%5, %6\\\", operands);\n-  sprintf (pattern, \\\"%s%%d9\\\\t%%0, %%1, %%2\\\", arithmetic_instr (operands[8],\n-\t\t\t\t\t\t\t\t  FALSE));\n-  output_asm_insn (pattern, operands);\n-  sprintf (pattern, \\\"%s%%D9\\\\t%%0, %%3, %%4\\\", arithmetic_instr (operands[7],\n-\t\t\t\t\t\t\t\t  FALSE));\n-  output_asm_insn (pattern, operands);\n-  return \\\"\\\";\n-}\n+  return \\\"%I8%d9\\\\t%0, %1, %2\\;%I7%D9\\\\t%0, %3, %4\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n@@ -4445,9 +4296,6 @@\n    (clobber (reg 24))]\n   \"\"\n   \"*\n-{\n-  char pattern[100];\n-\n   /* If we have an operation where (op x 0) is the identity operation and\n      the condtional operator is LT or GE and we are comparing against zero and\n      everything is in registers then we can do this in two instructions */\n@@ -4459,39 +4307,24 @@\n       && REGNO (operands[4]) != REGNO (operands[0]))\n     {\n       if (GET_CODE (operands[6]) == LT)\n-\t{\n-\t  output_asm_insn (\\\"and\\\\t%0, %5, %2, asr #31\\\", operands);\n-\t  sprintf (pattern, \\\"%s\\\\t%%0, %%4, %%0\\\",\n-\t\t   arithmetic_instr (operands[7], FALSE));\n-\t  output_asm_insn (pattern, operands);\n-\t  return \\\"\\\";\n-        }\n+\treturn \\\"and\\\\t%0, %5, %2, asr #31\\;%I7\\\\t%0, %4, %0\\\";\n       else if (GET_CODE (operands[6]) == GE)\n-\t{\n-\t  output_asm_insn (\\\"bic\\\\t%0, %5, %2, asr #31\\\", operands);\n-\t  sprintf (pattern, \\\"%s\\\\t%%0, %%4, %%0\\\",\n-\t\t   arithmetic_instr (operands[7], FALSE));\n-\t  output_asm_insn (pattern, operands);\n-\t  return \\\"\\\";\n-        }\n+\treturn \\\"bic\\\\t%0, %5, %2, asr #31\\;%I7\\\\t%0, %4, %0\\\";\n     }\n   if (GET_CODE (operands[3]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[3])))\n     output_asm_insn (\\\"cmn\\\\t%2, #%n3\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n-  sprintf (pattern, \\\"%s%%d6\\\\t%%0, %%4, %%5\\\", arithmetic_instr (operands[7],\n-\t\t\t\t\t\t\t\t  FALSE));\n-  output_asm_insn (pattern, operands);\n+  output_asm_insn (\\\"%I7%d6\\\\t%0, %4, %5\\\", operands);\n   if (which_alternative != 0)\n     {\n       if (GET_CODE (operands[1]) == MEM)\n-\toutput_asm_insn (\\\"ldr%D6\\\\t%0, %1\\\", operands);\n+\treturn \\\"ldr%D6\\\\t%0, %1\\\";\n       else\n-\toutput_asm_insn (\\\"mov%D6\\\\t%0, %1\\\", operands);\n+\treturn \\\"mov%D6\\\\t%0, %1\\\";\n     }\n   return \\\"\\\";\n-}\n \"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n@@ -4508,9 +4341,6 @@\n    (clobber (reg 24))]\n   \"\"\n   \"*\n-{\n-  char pattern[100];\n-\n   /* If we have an operation where (op x 0) is the identity operation and\n      the condtional operator is LT or GE and we are comparing against zero and\n      everything is in registers then we can do this in two instructions */\n@@ -4522,39 +4352,25 @@\n       && REGNO (operands[2]) != REGNO (operands[0]))\n     {\n       if (GET_CODE (operands[6]) == GE)\n-\t{\n-\t  output_asm_insn (\\\"and\\\\t%0, %3, %4, asr #31\\\", operands);\n-\t  sprintf (pattern, \\\"%s\\\\t%%0, %%2, %%0\\\",\n-\t\t   arithmetic_instr (operands[7], FALSE));\n-\t  output_asm_insn (pattern, operands);\n-\t  return \\\"\\\";\n-        }\n+\treturn \\\"and\\\\t%0, %3, %4, asr #31\\;%I7\\\\t%0, %2, %0\\\";\n       else if (GET_CODE (operands[6]) == LT)\n-\t{\n-\t  output_asm_insn (\\\"bic\\\\t%0, %3, %4, asr #31\\\", operands);\n-\t  sprintf (pattern, \\\"%s\\\\t%%0, %%2, %%0\\\",\n-\t\t   arithmetic_instr (operands[7], FALSE));\n-\t  output_asm_insn (pattern, operands);\n-\t  return \\\"\\\";\n-        }\n+\treturn \\\"bic\\\\t%0, %3, %4, asr #31\\;%I7\\\\t%0, %2, %0\\\";\n     }\n+\n   if (GET_CODE (operands[5]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[5])))\n     output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n+\n   if (which_alternative != 0)\n     {\n       if (GET_CODE (operands[1]) == MEM)\n \toutput_asm_insn (\\\"ldr%d6\\\\t%0, %1\\\", operands);\n       else\n \toutput_asm_insn (\\\"mov%d6\\\\t%0, %1\\\", operands);\n     }\n-  sprintf (pattern, \\\"%s%%D6\\\\t%%0, %%2, %%3\\\", arithmetic_instr (operands[7],\n-\t\t\t\t\t\t\t\t  FALSE));\n-  output_asm_insn (pattern, operands);\n-  return \\\"\\\";\n-}\n+  return \\\"%I7%D6\\\\t%0, %2, %3\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n@@ -4685,21 +4501,14 @@\n    (clobber (reg 24))]\n   \"\"\n   \"*\n-{\n-  char pattern[100];\n-\n   if (GET_CODE (operands[5]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[5])))\n     output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n   if (which_alternative != 0)\n     output_asm_insn (\\\"mov%D6\\\\t%0, %1\\\", operands);\n-  sprintf (pattern, \\\"mov%%d6\\\\t%%0, %%2, %s %%3\\\", \n-\t   shift_instr (GET_CODE (operands[7]), &operands[3]));\n-  output_asm_insn (pattern, operands);\n-  return \\\"\\\";\n-}\n+  return \\\"mov%d6\\\\t%0, %2, %S7\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n@@ -4716,21 +4525,14 @@\n    (clobber (reg 24))]\n   \"\"\n   \"*\n-{\n-  char pattern[100];\n-\n   if (GET_CODE (operands[5]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[5])))\n     output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n   if (which_alternative != 0)\n     output_asm_insn (\\\"mov%d6\\\\t%0, %1\\\", operands);\n-  sprintf (pattern, \\\"mov%%D6\\\\t%%0, %%2, %s %%3\\\", \n-\t   shift_instr (GET_CODE (operands[7]), &operands[3]));\n-  output_asm_insn (pattern, operands);\n-  return \\\"\\\";\n-}\n+  return \\\"mov%D6\\\\t%0, %2, %S7\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"8,12\")])\n@@ -4749,22 +4551,12 @@\n    (clobber (reg 24))]\n   \"\"\n   \"*\n-{\n-  char pattern[100];\n-\n   if (GET_CODE (operands[6]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[6])))\n     output_asm_insn (\\\"cmn\\\\t%5, #%n6\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%5, %6\\\", operands);\n-  sprintf (pattern, \\\"mov%%d7\\\\t%%0, %%1, %s %%2\\\", \n-\t   shift_instr (GET_CODE (operands[8]), &operands[2]));\n-  output_asm_insn (pattern, operands);\n-  sprintf (pattern, \\\"mov%%D7\\\\t%%0, %%3, %s %%4\\\", \n-\t   shift_instr (GET_CODE (operands[9]), &operands[4]));\n-  output_asm_insn (pattern, operands);\n-  return \\\"\\\";\n-}\n+  return \\\"mov%d7\\\\t%0, %1, %S8\\;mov%D7\\\\t%0, %3, %S9\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n@@ -4781,20 +4573,12 @@\n    (clobber (reg 24))]\n   \"\"\n   \"*\n-{\n-  char pattern[100];\n-\n   if (GET_CODE (operands[5]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[5])))\n     output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n-  output_asm_insn (\\\"mvn%d6\\\\t%0, %1\\\", operands);\n-  sprintf (pattern, \\\"%s%%D6\\\\t%%0, %%2, %%3\\\", arithmetic_instr (operands[7],\n-\t\t\t\t\t\t\t\t  FALSE));\n-  output_asm_insn (pattern, operands);\n-  return \\\"\\\";\n-}\n+  return \\\"mvn%d6\\\\t%0, %1\\;%I7%D6\\\\t%0, %2, %3\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n@@ -4811,20 +4595,12 @@\n    (clobber (reg 24))]\n   \"\"\n   \"*\n-{\n-  char pattern[100];\n-\n   if (GET_CODE (operands[5]) == CONST_INT\n       && !const_ok_for_arm (INTVAL (operands[5])))\n     output_asm_insn (\\\"cmn\\\\t%4, #%n5\\\", operands);\n   else\n     output_asm_insn (\\\"cmp\\\\t%4, %5\\\", operands);\n-  output_asm_insn (\\\"mvn%D6\\\\t%0, %1\\\", operands);\n-  sprintf (pattern, \\\"%s%%d6\\\\t%%0, %%2, %%3\\\", arithmetic_instr (operands[7],\n-\t\t\t\t\t\t\t\t  FALSE));\n-  output_asm_insn (pattern, operands);\n-  return \\\"\\\";\n-}\n+  return \\\"mvn%D6\\\\t%0, %1\\;%I7%d6\\\\t%0, %2, %3\\\";\n \"\n [(set_attr \"conds\" \"clob\")\n  (set_attr \"length\" \"12\")])\n@@ -4886,11 +4662,8 @@\n {\n   rtx ldm[3];\n   rtx arith[3];\n-  char pattern[100];\n   int val1 = 0, val2 = 0;\n \n-  sprintf (pattern, \\\"%s\\\\t%%0, %%1, %%2\\\",\n-\t   arithmetic_instr (operands[1], FALSE));\n   if (REGNO (operands[0]) > REGNO (operands[4]))\n     {\n       ldm[1] = operands[4];\n@@ -4924,27 +4697,27 @@\n       ops[2] = XEXP (XEXP (operands[2], 0), 1);\n       output_add_immediate (ops);\n       if (val1 < val2)\n-\toutput_asm_insn (\\\"ldmia\\\\t%0, {%1, %2}\\\", ldm);\n+\toutput_asm_insn (\\\"ldm%?ia\\\\t%0, {%1, %2}\\\", ldm);\n       else\n-\toutput_asm_insn (\\\"ldmda\\\\t%0, {%1, %2}\\\", ldm);\n+\toutput_asm_insn (\\\"ldm%?da\\\\t%0, {%1, %2}\\\", ldm);\n     }\n   else if (val1)\n     {\n       ldm[0] = XEXP (operands[3], 0);\n       if (val1 < val2)\n-\toutput_asm_insn (\\\"ldmda\\\\t%0, {%1, %2}\\\", ldm);\n+\toutput_asm_insn (\\\"ldm%?da\\\\t%0, {%1, %2}\\\", ldm);\n       else\n-\toutput_asm_insn (\\\"ldmia\\\\t%0, {%1, %2}\\\", ldm);\n+\toutput_asm_insn (\\\"ldm%?ia\\\\t%0, {%1, %2}\\\", ldm);\n     }\n   else\n     {\n       ldm[0] = XEXP (operands[2], 0);\n       if (val1 < val2)\n-\toutput_asm_insn (\\\"ldmia\\\\t%0, {%1, %2}\\\", ldm);\n+\toutput_asm_insn (\\\"ldm%?ia\\\\t%0, {%1, %2}\\\", ldm);\n       else\n-\toutput_asm_insn (\\\"ldmda\\\\t%0, {%1, %2}\\\", ldm);\n+\toutput_asm_insn (\\\"ldm%?da\\\\t%0, {%1, %2}\\\", ldm);\n     }\n-  output_asm_insn (pattern, arith);\n+  output_asm_insn (\\\"%I1%?\\\\t%0, %1, %2\\\", arith);\n   return \\\"\\\";\n }\n \"\n@@ -4971,7 +4744,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"strb\\\\t%3, [%0, %2]!\"\n+  \"str%?b\\\\t%3, [%0, %2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -4984,7 +4757,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"strb\\\\t%3, [%0, -%2]!\"\n+  \"str%?b\\\\t%3, [%0, -%2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -4997,7 +4770,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"ldrb\\\\t%3, [%0, %2]!\"\n+  \"ldr%?b\\\\t%3, [%0, %2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5010,7 +4783,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"ldrb\\\\t%3, [%0, -%2]!\"\n+  \"ldr%?b\\\\t%3, [%0, -%2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5024,7 +4797,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"ldrb\\\\t%3, [%0, %2]!\\\\t@ z_extendqisi\"\n+  \"ldr%?b\\\\t%3, [%0, %2]!\\\\t%@ z_extendqisi\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5038,7 +4811,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"ldrb\\\\t%3, [%0, -%2]!\\\\t@ z_extendqisi\"\n+  \"ldr%?b\\\\t%3, [%0, -%2]!\\\\t%@ z_extendqisi\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5051,7 +4824,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"str\\\\t%3, [%0, %2]!\"\n+  \"str%?\\\\t%3, [%0, %2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -5064,7 +4837,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"str\\\\t%3, [%0, -%2]!\"\n+  \"str%?\\\\t%3, [%0, -%2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -5077,7 +4850,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"ldr\\\\t%3, [%0, %2]!\"\n+  \"ldr%?\\\\t%3, [%0, %2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5090,7 +4863,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"ldr\\\\t%3, [%0, -%2]!\"\n+  \"ldr%?\\\\t%3, [%0, -%2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5103,7 +4876,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"ldr\\\\t%3, [%0, %2]!\\\\t@ loadhi\"\n+  \"ldr%?\\\\t%3, [%0, %2]!\\\\t%@ loadhi\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5116,7 +4889,7 @@\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && (GET_CODE (operands[2]) != REG\n        || REGNO (operands[2]) != FRAME_POINTER_REGNUM)\"\n-  \"ldr\\\\t%3, [%0, -%2]!\\\\t@ loadhi\"\n+  \"ldr%?\\\\t%3, [%0, -%2]!\\\\t%@ loadhi\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5131,16 +4904,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"*\n-{\n-  char instr[100];\n-\n-  sprintf (instr, \\\"strb\\\\t%%5, [%%0, %%3, %s %%4]!\\\",\n-\t   shift_instr (GET_CODE (operands[2]), &operands[4]));\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"str%?b\\\\t%5, [%0, %3, %S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -5155,16 +4919,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"*\n-{\n-  char instr[100];\n-\n-  sprintf (instr, \\\"strb\\\\t%%5, [%%0, -%%3, %s %%4]!\\\",\n-\t   shift_instr (GET_CODE (operands[2]), &operands[4]));\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"str%?b\\\\t%5, [%0, -%3, %S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -5179,16 +4934,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"*\n-{\n-  char instr[100];\n-\n-  sprintf (instr, \\\"ldrb\\\\t%%5, [%%0, %%3, %s %%4]!\\\",\n-\t   shift_instr (GET_CODE (operands[2]), &operands[4]));\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"ldr%?b\\\\t%5, [%0, %3, %S2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5203,16 +4949,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"*\n-{\n-  char instr[100];\n-\n-  sprintf (instr, \\\"ldrb\\\\t%%5, [%%0, -%%3, %s %%4]!\\\",\n-\t   shift_instr (GET_CODE (operands[2]), &operands[4]));\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"ldr%?b\\\\t%5, [%0, -%3, %S2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5227,16 +4964,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"*\n-{\n-  char instr[100];\n-\n-  sprintf (instr, \\\"str\\\\t%%5, [%%0, %%3, %s %%4]!\\\",\n-\t   shift_instr (GET_CODE (operands[2]), &operands[4]));\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"str%?\\\\t%5, [%0, %3, %S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -5251,16 +4979,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"*\n-{\n-  char instr[100];\n-\n-  sprintf (instr, \\\"str\\\\t%%5, [%%0, -%%3, %s %%4]!\\\",\n-\t   shift_instr (GET_CODE (operands[2]), &operands[4]));\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"str%?\\\\t%5, [%0, -%3, %S2]!\"\n [(set_attr \"type\" \"store1\")])\n \n (define_insn \"\"\n@@ -5275,16 +4994,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"*\n-{\n-  char instr[100];\n-\n-  sprintf (instr, \\\"ldr\\\\t%%5, [%%0, %%3, %s %%4]!\\\",\n-\t   shift_instr (GET_CODE (operands[2]), &operands[4]));\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"ldr%?\\\\t%5, [%0, %3, %S2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5299,16 +5009,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"*\n-{\n-  char instr[100];\n-\n-  sprintf (instr, \\\"ldr\\\\t%%5, [%%0, -%%3, %s %%4]!\\\",\n-\t   shift_instr (GET_CODE (operands[2]), &operands[4]));\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"ldr%?\\\\t%5, [%0, -%3, %S2]!\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5323,16 +5024,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"*\n-{\n-  char instr[100];\n-\n-  sprintf (instr, \\\"ldr\\\\t%%5, [%%0, %%3, %s %%4]!\\\\t@ loadhi\\\",\n-\t   shift_instr (GET_CODE (operands[2]), &operands[4]));\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"ldr%?\\\\t%5, [%0, %3, %S2]!\\\\t%@ loadhi\"\n [(set_attr \"type\" \"load\")])\n \n (define_insn \"\"\n@@ -5347,16 +5039,7 @@\n   \"REGNO (operands[0]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[1]) != FRAME_POINTER_REGNUM\n    && REGNO (operands[3]) != FRAME_POINTER_REGNUM\"\n-  \"*\n-{\n-  char instr[100];\n-\n-  sprintf (instr, \\\"ldr\\\\t%%5, [%%0, -%%3, %s %%4]!\\\\t@ loadhi\\\",\n-\t   shift_instr (GET_CODE (operands[2]), &operands[4]));\n-  output_asm_insn (instr, operands);\n-  return \\\"\\\";\n-}\n-\"\n+  \"ldr%?\\\\t%5, [%0, -%3, %S2]!\\\\t%@ loadhi\"\n [(set_attr \"type\" \"load\")])\n \n ; It can also support extended post-inc expressions, but combine doesn't\n@@ -5383,15 +5066,15 @@\n   \"REGNO(operands[0]) != REGNO(operands[1])\n    && (GET_CODE (operands[2]) != REG\n        || REGNO(operands[0]) != REGNO (operands[2]))\"\n-  \"ldrb\\\\t%0, [%1], %2\")\n+  \"ldr%?b\\\\t%0, [%1], %2\")\n \n (define_peephole\n   [(set (mem:SI (match_operand:SI 0 \"s_register_operand\" \"+r\"))\n \t(match_operand:SI 2 \"s_register_operand\" \"r\"))\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0) (match_operand:SI 1 \"index_operand\" \"rJ\")))]\n   \"\"\n-  \"str\\\\t%2, [%0], %1\")\n+  \"str%?\\\\t%2, [%0], %1\")\n \n (define_peephole\n   [(set (match_operand:HI 0 \"s_register_operand\" \"=r\")\n@@ -5401,7 +5084,7 @@\n   \"REGNO(operands[0]) != REGNO(operands[1])\n    && (GET_CODE (operands[2]) != REG\n        || REGNO(operands[0]) != REGNO (operands[2]))\"\n-  \"ldr\\\\t%0, [%1], %2\\\\t@ loadhi\")\n+  \"ldr%?\\\\t%0, [%1], %2\\\\t%@ loadhi\")\n \n (define_peephole\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -5411,7 +5094,7 @@\n   \"REGNO(operands[0]) != REGNO(operands[1])\n    && (GET_CODE (operands[2]) != REG\n        || REGNO(operands[0]) != REGNO (operands[2]))\"\n-  \"ldr\\\\t%0, [%1], %2\")\n+  \"ldr%?\\\\t%0, [%1], %2\")\n \n ; This pattern is never tried by combine, so do it as a peephole\n \n@@ -5421,7 +5104,7 @@\n    (set (match_operand 2 \"cc_register\" \"\")\n \t(compare (match_dup 1) (const_int 0)))]\n   \"\"\n-  \"subs\\\\t%0, %1, #0\"\n+  \"sub%?s\\\\t%0, %1, #0\"\n [(set_attr \"conds\" \"set\")])\n \n ; Peepholes to spot possible load- and store-multiples, if the ordering is\n@@ -5451,7 +5134,7 @@\n    && !MEM_VOLATILE_P (SET_SRC (PATTERN (prev_nonnote_insn\n \t\t\t\t\t (prev_nonnote_insn \n \t\t\t\t\t  (prev_nonnote_insn (insn))))))\"\n-  \"ldmia\\\\t%1, {%4, %3, %2, %0}\\\\t@ phole ldm\")\n+  \"ldm%?ia\\\\t%1, {%4, %3, %2, %0}\\\\t%@ phole ldm\")\n \n (define_peephole\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -5470,7 +5153,7 @@\n    && !MEM_VOLATILE_P (SET_SRC (PATTERN (prev_nonnote_insn (insn))))\n    && !MEM_VOLATILE_P (SET_SRC (PATTERN (prev_nonnote_insn\n \t\t\t\t\t (prev_nonnote_insn (insn)))))\"\n-  \"ldmia\\\\t%1, {%3, %2, %0}\\\\t@ phole ldm\")\n+  \"ldm%?ia\\\\t%1, {%3, %2, %0}\\\\t%@ phole ldm\")\n \n (define_peephole\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n@@ -5483,7 +5166,7 @@\n        || REGNO (operands[1]) == REGNO (operands[2]))\n    && !MEM_VOLATILE_P (SET_SRC (PATTERN (insn)))\n    && !MEM_VOLATILE_P (SET_SRC (PATTERN (prev_nonnote_insn (insn))))\"\n-  \"ldmia\\\\t%1, {%2, %0}\\\\t@ phole ldm\")\n+  \"ldm%?ia\\\\t%1, {%2, %0}\\\\t%@ phole ldm\")\n \n (define_peephole\n   [(set (mem:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -5505,7 +5188,7 @@\n    && !MEM_VOLATILE_P (SET_DEST (PATTERN (prev_nonnote_insn\n \t\t\t\t\t  (prev_nonnote_insn \n \t\t\t\t\t   (prev_nonnote_insn (insn))))))\"\n-  \"stmia\\\\t%1, {%4, %3, %2, %0}\\\\t@ phole stm\")\n+  \"stm%?ia\\\\t%1, {%4, %3, %2, %0}\\\\t%@ phole stm\")\n \n (define_peephole\n   [(set (mem:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -5521,7 +5204,7 @@\n    && !MEM_VOLATILE_P (SET_DEST (PATTERN (prev_nonnote_insn (insn))))\n    && !MEM_VOLATILE_P (SET_DEST (PATTERN (prev_nonnote_insn\n \t\t\t\t\t  (prev_nonnote_insn (insn)))))\"\n-  \"stmia\\\\t%1, {%3, %2, %0}\\\\t@ phole stm\")\n+  \"stm%?ia\\\\t%1, {%3, %2, %0}\\\\t%@ phole stm\")\n \n (define_peephole\n   [(set (mem:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -5532,7 +5215,7 @@\n   \"REGNO (operands[0]) >  REGNO (operands[2])\n    && !MEM_VOLATILE_P (SET_DEST (PATTERN (insn)))\n    && !MEM_VOLATILE_P (SET_DEST (PATTERN (prev_nonnote_insn (insn))))\"\n-  \"stmia\\\\t%1, {%2, %0}\\\\t@ phole stm\")\n+  \"stm%?ia\\\\t%1, {%2, %0}\\\\t%@ phole stm\")\n \n ;; A call followed by return can be replaced by restoring the regs and\n ;; jumping to the subroutine, provided we aren't passing the address of\n@@ -5570,7 +5253,7 @@\n   }\n \n   output_return_instruction (NULL, FALSE);\n-  return \\\"b\\\\t%a0\\\";\n+  return \\\"b%?\\\\t%a0\\\";\n }\"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n@@ -5601,7 +5284,7 @@\n   }\n \n   output_return_instruction (NULL, FALSE);\n-  return \\\"b\\\\t%a1\\\";\n+  return \\\"b%?\\\\t%a1\\\";\n }\"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n@@ -5636,7 +5319,7 @@\n   }\n \n   output_return_instruction (NULL, FALSE);\n-  return \\\"b\\\\t%a1\\\";\n+  return \\\"b%?\\\\t%a1\\\";\n }\"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n@@ -5672,20 +5355,20 @@\n   if (TARGET_6)\n     {\n       if (backward)\n-\toutput_asm_insn (\\\"sub\\\\tlr, pc, #(8 + . -%l2)\\\", operands);\n+\toutput_asm_insn (\\\"sub%?\\\\tlr, pc, #(8 + . -%l2)\\\", operands);\n       else\n-\toutput_asm_insn (\\\"add\\\\tlr, pc, #(%l2 - . -8)\\\", operands);\n+\toutput_asm_insn (\\\"add%?\\\\tlr, pc, #(%l2 - . -8)\\\", operands);\n     }\n   else\n #endif\n     {\n-      output_asm_insn (\\\"mov\\\\tlr, pc\\\\t@ protect cc\\\", operands);\n+      output_asm_insn (\\\"mov%?\\\\tlr, pc\\\\t%@ protect cc\\\", operands);\n       if (backward)\n-\toutput_asm_insn (\\\"sub\\\\tlr, lr, #(4 + . -%l2)\\\", operands);\n+\toutput_asm_insn (\\\"sub%?\\\\tlr, lr, #(4 + . -%l2)\\\", operands);\n       else\n-\toutput_asm_insn (\\\"add\\\\tlr, lr, #(%l2 - . -4)\\\", operands);\n+\toutput_asm_insn (\\\"add%?\\\\tlr, lr, #(%l2 - . -4)\\\", operands);\n     }\n-  return \\\"b\\\\t%a0\\\";\n+  return \\\"b%?\\\\t%a0\\\";\n }\"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n@@ -5718,20 +5401,20 @@\n   if (TARGET_6)\n     {\n       if (backward)\n-\toutput_asm_insn (\\\"sub\\\\tlr, pc, #(8 + . -%l3)\\\", operands);\n+\toutput_asm_insn (\\\"sub%?\\\\tlr, pc, #(8 + . -%l3)\\\", operands);\n       else\n-\toutput_asm_insn (\\\"add\\\\tlr, pc, #(%l3 - . -8)\\\", operands);\n+\toutput_asm_insn (\\\"add%?\\\\tlr, pc, #(%l3 - . -8)\\\", operands);\n     }\n   else\n #endif\n     {\n-      output_asm_insn (\\\"mov\\\\tlr, pc\\\\t@ protect cc\\\", operands);\n+      output_asm_insn (\\\"mov%?\\\\tlr, pc\\\\t%@ protect cc\\\", operands);\n       if (backward)\n-\toutput_asm_insn (\\\"sub\\\\tlr, lr, #(4 + . -%l3)\\\", operands);\n+\toutput_asm_insn (\\\"sub%?\\\\tlr, lr, #(4 + . -%l3)\\\", operands);\n       else\n-\toutput_asm_insn (\\\"add\\\\tlr, lr, #(%l3 - . -4)\\\", operands);\n+\toutput_asm_insn (\\\"add%?\\\\tlr, lr, #(%l3 - . -4)\\\", operands);\n     }\n-  return \\\"b\\\\t%a1\\\";\n+  return \\\"b%?\\\\t%a1\\\";\n }\"\n [(set (attr \"conds\")\n       (if_then_else (eq_attr \"cpu\" \"arm6\")\n@@ -5795,8 +5478,8 @@\n    == (((unsigned long) INTVAL (operands[1])) >> 24) << 24\"\n   \"*\n   operands[1] = GEN_INT (((unsigned long) INTVAL (operands[1])) >> 24);\n-  output_asm_insn (\\\"ldrb\\\\t%2, %0\\\", operands);\n-  output_asm_insn (\\\"cmp\\\\t%2, %1\\\", operands);\n+  output_asm_insn (\\\"ldr%?b\\\\t%2, %0\\\", operands);\n+  output_asm_insn (\\\"cmp%?\\\\t%2, %1\\\", operands);\n   return \\\"\\\";\n \"\n [(set_attr \"conds\" \"set\")"}]}