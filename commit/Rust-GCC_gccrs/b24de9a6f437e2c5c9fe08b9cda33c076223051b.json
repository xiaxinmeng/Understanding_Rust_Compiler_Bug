{"sha": "b24de9a6f437e2c5c9fe08b9cda33c076223051b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI0ZGU5YTZmNDM3ZTJjNWM5ZmUwOGI5Y2RhMzNjMDc2MjIzMDUxYg==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2017-11-22T13:32:21Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2017-11-22T13:32:21Z"}, "message": "[ARM] Use bitmap to control cmse_nonsecure_call register clearing\n\nAs part of r253256, cmse_nonsecure_entry_clear_before_return has been\nrewritten to use auto_sbitmap instead of an integer bitfield to control\nwhich register needs to be cleared. This commit continues this work in\ncmse_nonsecure_call_clear_caller_saved.\n\n2017-11-22  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    * config/arm/arm.c (cmse_nonsecure_call_clear_caller_saved): Use\n    auto_sbitap instead of integer bitfield to control register needing\n    clearing.\n\nFrom-SVN: r255055", "tree": {"sha": "37d801f80bf2cd66ee4cc171114f0d222f8f88db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37d801f80bf2cd66ee4cc171114f0d222f8f88db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b24de9a6f437e2c5c9fe08b9cda33c076223051b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24de9a6f437e2c5c9fe08b9cda33c076223051b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b24de9a6f437e2c5c9fe08b9cda33c076223051b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b24de9a6f437e2c5c9fe08b9cda33c076223051b/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ff4790688bffc52c1a76aaf35c01fe92009a99ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4790688bffc52c1a76aaf35c01fe92009a99ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4790688bffc52c1a76aaf35c01fe92009a99ff"}], "stats": {"total": 52, "additions": 36, "deletions": 16}, "files": [{"sha": "8cefff5ad2e4fc3ecadae078c88d9b3311cdab90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24de9a6f437e2c5c9fe08b9cda33c076223051b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24de9a6f437e2c5c9fe08b9cda33c076223051b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b24de9a6f437e2c5c9fe08b9cda33c076223051b", "patch": "@@ -1,3 +1,9 @@\n+2017-11-22  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\t* config/arm/arm.c (cmse_nonsecure_call_clear_caller_saved): Use\n+\tauto_sbitap instead of integer bitfield to control register needing\n+\tclearing.\n+\n 2017-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83044"}, {"sha": "36f35573c88dba54e65caca0b8dfd4dba8ec7ee3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b24de9a6f437e2c5c9fe08b9cda33c076223051b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b24de9a6f437e2c5c9fe08b9cda33c076223051b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=b24de9a6f437e2c5c9fe08b9cda33c076223051b", "patch": "@@ -17008,10 +17008,11 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \n       FOR_BB_INSNS (bb, insn)\n \t{\n-\t  uint64_t to_clear_mask, float_mask;\n+\t  unsigned address_regnum, regno, maxregno =\n+\t    TARGET_HARD_FLOAT_ABI ? D7_VFP_REGNUM : NUM_ARG_REGS - 1;\n+\t  auto_sbitmap to_clear_bitmap (maxregno + 1);\n \t  rtx_insn *seq;\n \t  rtx pat, call, unspec, reg, cleared_reg, tmp;\n-\t  unsigned int regno, maxregno;\n \t  rtx address;\n \t  CUMULATIVE_ARGS args_so_far_v;\n \t  cumulative_args_t args_so_far;\n@@ -17042,26 +17043,31 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \t    continue;\n \n \t  /* Determine the caller-saved registers we need to clear.  */\n-\t  to_clear_mask = (1LL << (NUM_ARG_REGS)) - 1;\n-\t  maxregno = NUM_ARG_REGS - 1;\n+\t  bitmap_clear (to_clear_bitmap);\n+\t  bitmap_set_range (to_clear_bitmap, R0_REGNUM, NUM_ARG_REGS);\n+\n \t  /* Only look at the caller-saved floating point registers in case of\n \t     -mfloat-abi=hard.  For -mfloat-abi=softfp we will be using the\n \t     lazy store and loads which clear both caller- and callee-saved\n \t     registers.  */\n \t  if (TARGET_HARD_FLOAT_ABI)\n \t    {\n-\t      float_mask = (1LL << (D7_VFP_REGNUM + 1)) - 1;\n-\t      float_mask &= ~((1LL << FIRST_VFP_REGNUM) - 1);\n-\t      to_clear_mask |= float_mask;\n-\t      maxregno = D7_VFP_REGNUM;\n+\t      auto_sbitmap float_bitmap (maxregno + 1);\n+\n+\t      bitmap_clear (float_bitmap);\n+\t      bitmap_set_range (float_bitmap, FIRST_VFP_REGNUM,\n+\t\t\t\tD7_VFP_REGNUM - FIRST_VFP_REGNUM + 1);\n+\t      bitmap_ior (to_clear_bitmap, to_clear_bitmap, float_bitmap);\n \t    }\n \n \t  /* Make sure the register used to hold the function address is not\n \t     cleared.  */\n \t  address = RTVEC_ELT (XVEC (unspec, 0), 0);\n \t  gcc_assert (MEM_P (address));\n \t  gcc_assert (REG_P (XEXP (address, 0)));\n-\t  to_clear_mask &= ~(1LL << REGNO (XEXP (address, 0)));\n+\t  address_regnum = REGNO (XEXP (address, 0));\n+\t  if (address_regnum < R0_REGNUM + NUM_ARG_REGS)\n+\t    bitmap_clear_bit (to_clear_bitmap, address_regnum);\n \n \t  /* Set basic block of call insn so that df rescan is performed on\n \t     insns inserted here.  */\n@@ -17082,6 +17088,7 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \t  FOREACH_FUNCTION_ARGS (fntype, arg_type, args_iter)\n \t    {\n \t      rtx arg_rtx;\n+\t      uint64_t to_clear_args_mask;\n \t      machine_mode arg_mode = TYPE_MODE (arg_type);\n \n \t      if (VOID_TYPE_P (arg_type))\n@@ -17094,10 +17101,18 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \t      arg_rtx = arm_function_arg (args_so_far, arg_mode, arg_type,\n \t\t\t\t\t  true);\n \t      gcc_assert (REG_P (arg_rtx));\n-\t      to_clear_mask\n-\t\t&= ~compute_not_to_clear_mask (arg_type, arg_rtx,\n-\t\t\t\t\t       REGNO (arg_rtx),\n-\t\t\t\t\t       padding_bits_to_clear_ptr);\n+\t      to_clear_args_mask\n+\t\t= compute_not_to_clear_mask (arg_type, arg_rtx,\n+\t\t\t\t\t     REGNO (arg_rtx),\n+\t\t\t\t\t     padding_bits_to_clear_ptr);\n+\t      if (to_clear_args_mask)\n+\t\t{\n+\t\t  for (regno = R0_REGNUM; regno <= maxregno; regno++)\n+\t\t    {\n+\t\t      if (to_clear_args_mask & (1ULL << regno))\n+\t\t\tbitmap_clear_bit (to_clear_bitmap, regno);\n+\t\t    }\n+\t\t}\n \n \t      first_param = false;\n \t    }\n@@ -17156,7 +17171,7 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \t     call.  */\n \t  for (regno = R0_REGNUM; regno <= maxregno; regno++)\n \t    {\n-\t      if (!(to_clear_mask & (1LL << regno)))\n+\t      if (!bitmap_bit_p (to_clear_bitmap, regno))\n \t\tcontinue;\n \n \t      /* If regno is an even vfp register and its successor is also to\n@@ -17165,7 +17180,7 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \t\t{\n \t\t  if (TARGET_VFP_DOUBLE\n \t\t      && VFP_REGNO_OK_FOR_DOUBLE (regno)\n-\t\t      && to_clear_mask & (1LL << (regno + 1)))\n+\t\t      && bitmap_bit_p (to_clear_bitmap, (regno + 1)))\n \t\t    emit_move_insn (gen_rtx_REG (DFmode, regno++),\n \t\t\t\t    CONST0_RTX (DFmode));\n \t\t  else\n@@ -17179,7 +17194,6 @@ cmse_nonsecure_call_clear_caller_saved (void)\n \t  seq = get_insns ();\n \t  end_sequence ();\n \t  emit_insn_before (seq, insn);\n-\n \t}\n     }\n }"}]}