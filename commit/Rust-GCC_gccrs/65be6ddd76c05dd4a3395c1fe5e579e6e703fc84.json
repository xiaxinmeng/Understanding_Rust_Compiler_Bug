{"sha": "65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjViZTZkZGQ3NmMwNWRkNGEzMzk1YzFmZTVlNTc5ZTZlNzAzZmM4NA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-08-22T01:26:43Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-08-22T01:26:43Z"}, "message": "Makefile.am (install-data-local): Remove pch-install rules.\n\n2007-08-21  Benjamin Kosnik  <bkoz@montsouris.artheist.org>\n\n\t* include/Makefile.am (install-data-local): Remove pch-install rules.\n\t(host_headers): Add stdc++.h, stdtr1c++.h, extc++.h.\n\t* include/Makefile.in: Regenerate.\n\t* config.h.in: Same.\n\n\t* scripts/check_compile: Remove space between outputs.\t\n\t* include/ext/throw_allocator.h: Correct doxygen markup.\t\n\t* include/bits/char_traits.h: Correct spacing.\n\t* include/bits/stl_function.h: Same, for 80 column.\n\t* include/std/valarray: Same.\n\t* testsuite/util/testsuite_iterators.h: Same.\t\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Format.\n\nFrom-SVN: r127685", "tree": {"sha": "2d46f87853dba7f68018141c61d1fe5706452ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d46f87853dba7f68018141c61d1fe5706452ab5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/comments", "author": null, "committer": null, "parents": [{"sha": "7e501b00a4711fa4b34327f416dc4718da6a2eb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e501b00a4711fa4b34327f416dc4718da6a2eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e501b00a4711fa4b34327f416dc4718da6a2eb0"}], "stats": {"total": 974, "additions": 520, "deletions": 454}, "files": [{"sha": "144ac4792ad34b1a53fbc5334c46cce83ff3ea77", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -1,3 +1,18 @@\n+2007-08-21  Benjamin Kosnik  <bkoz@montsouris.artheist.org>\n+\n+\t* include/Makefile.am (install-data-local): Remove pch-install rules.\n+\t(host_headers): Add stdc++.h, stdtr1c++.h, extc++.h.\n+\t* include/Makefile.in: Regenerate.\n+\t* config.h.in: Same.\n+\n+\t* scripts/check_compile: Remove space between outputs.\t\n+\t* include/ext/throw_allocator.h: Correct doxygen markup.\t\n+\t* include/bits/char_traits.h: Correct spacing.\n+\t* include/bits/stl_function.h: Same, for 80 column.\n+\t* include/std/valarray: Same.\n+\t* testsuite/util/testsuite_iterators.h: Same.\t\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Format.\n+\t\n 2007-08-17  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \tPR testsuite/31884\n@@ -24,10 +39,14 @@\n \ttestsuite/ext/throw_allocator/check_deallocate_null.cc,\n \ttestsuite/ext/throw_allocator/check_new.cc,\n \ttestsuite/ext/throw_allocator/deallocate_local.cc,\n-\ttestsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/cons/gen1.cc,\n-\ttestsuite/tr1/5_numerical_facilities/random/subtract_with_carry/cons/gen1.cc,\n-\ttestsuite/tr1/5_numerical_facilities/random/linear_congruential/cons/gen1.cc,\n-\ttestsuite/tr1/5_numerical_facilities/random/mersenne_twister/cons/gen1.cc,\n+\ttestsuite/tr1/5_numerical_facilities/random/subtract_with_carry_01/\n+\tcons/gen1.cc,\n+\ttestsuite/tr1/5_numerical_facilities/random/subtract_with_carry/cons/\n+\tgen1.cc,\n+\ttestsuite/tr1/5_numerical_facilities/random/linear_congruential/cons/\n+\tgen1.cc,\n+\ttestsuite/tr1/5_numerical_facilities/random/mersenne_twister/cons/\n+\tgen1.cc,\n \ttestsuite/23_containers/list/modifiers/insert/25288.cc: Use\n \tdg-require-time.\n "}, {"sha": "30a03cc24d30ee3c83e272b42cb228fd42550b44", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -24,6 +24,9 @@\n /* Define to 1 if you have the `atanl' function. */\n #undef HAVE_ATANL\n \n+/* Define to 1 if the target assembler supports thread-local storage. */\n+#undef HAVE_CC_TLS\n+\n /* Define to 1 if you have the `ceilf' function. */\n #undef HAVE_CEILF\n "}, {"sha": "b7a2a96c2c454dfdf49c155c567b5a2124ddc9c9", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -754,7 +754,10 @@ host_headers = \\\n \t${host_srcdir}/os_defines.h \\\n \t${glibcxx_srcdir}/$(ATOMIC_WORD_SRCDIR)/atomic_word.h \\\n \t${glibcxx_srcdir}/$(ABI_TWEAKS_SRCDIR)/cxxabi_tweaks.h \\\n-\t${glibcxx_srcdir}/$(CPU_DEFINES_SRCDIR)/cpu_defines.h\t\n+\t${glibcxx_srcdir}/$(CPU_DEFINES_SRCDIR)/cpu_defines.h \\\n+\t${glibcxx_srcdir}/include/precompiled/stdc++.h \\\n+\t${glibcxx_srcdir}/include/precompiled/stdtr1c++.h \\\n+\t${glibcxx_srcdir}/include/precompiled/extc++.h \n \n # Non-installed host_header files.\n COMPATIBILITY_H = config/abi/compatibility.h\n@@ -809,10 +812,8 @@ pch_output_anchors = \\\n PCHFLAGS=-Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n if GLIBCXX_BUILD_PCH\n pch_build = ${pch_output}\n-pch_install = install-pch\n else\n pch_build =\n-pch_install =\n endif\n \n # List of all timestamp files.  By keeping only one copy of this list, both\n@@ -1129,7 +1130,7 @@ ${pch3_output}: ${pch3_source} ${pch2_output}\n # the rest are taken from the original source tree.\n \n if GLIBCXX_HOSTED\n-install-data-local: install-headers ${pch_install}\n+install-data-local: install-headers \n else\n install-data-local: install-freestanding-headers\n endif\n@@ -1219,16 +1220,6 @@ install-headers:\n \t ${thread_host_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${host_installdir}; done\n \n-install-pch:\n-\t$(mkinstalldirs) $(DESTDIR)${pch1_output_installdir}\n-\tfor file in ${pch1_output_builddir}/*; do \\\n-\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch1_output_installdir}; done\n-\t$(mkinstalldirs) $(DESTDIR)${pch2_output_installdir}\n-\tfor file in ${pch2_output_builddir}/*; do \\\n-\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch2_output_installdir}; done\n-\t$(INSTALL_DATA) ${pch1_output_anchor} $(DESTDIR)${host_installdir}\n-\t$(INSTALL_DATA) ${pch2_output_anchor} $(DESTDIR)${host_installdir}\n-\n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = ${pch_output} ${pch_output_anchors}\n "}, {"sha": "876563f57612acd232fdcd92372fe824118087da", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -981,7 +981,10 @@ host_headers = \\\n \t${host_srcdir}/os_defines.h \\\n \t${glibcxx_srcdir}/$(ATOMIC_WORD_SRCDIR)/atomic_word.h \\\n \t${glibcxx_srcdir}/$(ABI_TWEAKS_SRCDIR)/cxxabi_tweaks.h \\\n-\t${glibcxx_srcdir}/$(CPU_DEFINES_SRCDIR)/cpu_defines.h\t\n+\t${glibcxx_srcdir}/$(CPU_DEFINES_SRCDIR)/cpu_defines.h \\\n+\t${glibcxx_srcdir}/include/precompiled/stdc++.h \\\n+\t${glibcxx_srcdir}/include/precompiled/stdtr1c++.h \\\n+\t${glibcxx_srcdir}/include/precompiled/extc++.h \n \n \n # Non-installed host_header files.\n@@ -1035,8 +1038,6 @@ pch_output_anchors = \\\n PCHFLAGS = -Winvalid-pch -Wno-deprecated -x c++-header $(CXXFLAGS)\n @GLIBCXX_BUILD_PCH_FALSE@pch_build = \n @GLIBCXX_BUILD_PCH_TRUE@pch_build = ${pch_output}\n-@GLIBCXX_BUILD_PCH_FALSE@pch_install = \n-@GLIBCXX_BUILD_PCH_TRUE@pch_install = install-pch\n \n # List of all timestamp files.  By keeping only one copy of this list, both\n # CLEANFILES and all-local are kept up-to-date.\n@@ -1512,7 +1513,7 @@ ${pch3_output}: ${pch3_source} ${pch2_output}\n # host_headers_extra are taken out of the build tree staging area;\n # the rest are taken from the original source tree.\n \n-@GLIBCXX_HOSTED_TRUE@install-data-local: install-headers ${pch_install}\n+@GLIBCXX_HOSTED_TRUE@install-data-local: install-headers \n @GLIBCXX_HOSTED_FALSE@install-data-local: install-freestanding-headers\n \n # This is a subset of the full install-headers rule.  We only need <cstddef>,\n@@ -1600,16 +1601,6 @@ install-headers:\n \t ${thread_host_headers}; do \\\n \t  $(INSTALL_DATA) $${file} $(DESTDIR)${host_installdir}; done\n \n-install-pch:\n-\t$(mkinstalldirs) $(DESTDIR)${pch1_output_installdir}\n-\tfor file in ${pch1_output_builddir}/*; do \\\n-\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch1_output_installdir}; done\n-\t$(mkinstalldirs) $(DESTDIR)${pch2_output_installdir}\n-\tfor file in ${pch2_output_builddir}/*; do \\\n-\t  $(INSTALL_DATA) $$file $(DESTDIR)${pch2_output_installdir}; done\n-\t$(INSTALL_DATA) ${pch1_output_anchor} $(DESTDIR)${host_installdir}\n-\t$(INSTALL_DATA) ${pch2_output_anchor} $(DESTDIR)${host_installdir}\n-\n # To remove directories.\n clean-local:\n \trm -rf ${pch_output_dirs}"}, {"sha": "250faf59204b3fb48d98f94fcf99e91201ac8938", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -60,7 +60,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  types, but who don't need to change the definitions of any function\n    *  defined in char_traits, can specialize __gnu_cxx::_Char_types\n    *  while leaving __gnu_cxx::char_traits alone. */\n-  template <class _CharT>\n+  template<typename _CharT>\n     struct _Char_types\n     {\n       typedef unsigned long   int_type;"}, {"sha": "7dc5031d46f4a05791479cda5df91a17faadf626", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -124,9 +124,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // 20.3.2 arithmetic\n   /** @defgroup s20_3_2_arithmetic Arithmetic Classes\n-   *  Because basic math often needs to be done during an algorithm, the library\n-   *  provides functors for those operations.  See the documentation for\n-   *  @link s20_3_1_base the base classes@endlink for examples of their use.\n+\n+   *  Because basic math often needs to be done during an algorithm,\n+   *  the library provides functors for those operations.  See the\n+   *  documentation for @link s20_3_1_base the base classes@endlink\n+   *  for examples of their use.\n    *\n    *  @{\n    */\n@@ -249,7 +251,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // 20.3.4 logical operations\n   /** @defgroup s20_3_4_logical Boolean Operations Classes\n-   *  Here are wrapper functors for Boolean operations:  @c &&, @c ||, and @c !.\n+   *  Here are wrapper functors for Boolean operations: @c &&, @c ||,\n+   *  and @c !.\n    *\n    *  @{\n    */\n@@ -360,15 +363,14 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template <class _Predicate>\n     class binary_negate\n     : public binary_function<typename _Predicate::first_argument_type,\n-\t\t\t     typename _Predicate::second_argument_type,\n-\t\t\t     bool>\n+\t\t\t     typename _Predicate::second_argument_type, bool>\n     {\n     protected:\n       _Predicate _M_pred;\n+\n     public:\n       explicit\n-      binary_negate(const _Predicate& __x)\n-      : _M_pred(__x) { }\n+      binary_negate(const _Predicate& __x) : _M_pred(__x) { }\n \n       bool\n       operator()(const typename _Predicate::first_argument_type& __x,\n@@ -605,7 +607,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *\n    *  @{\n    */\n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n+  /// One of the @link s20_3_8_memadaptors adaptors for member\n+  /// pointers@endlink.\n   template <class _Ret, class _Tp>\n     class mem_fun_t : public unary_function<_Tp*, _Ret>\n     {\n@@ -621,7 +624,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Ret (_Tp::*_M_f)();\n     };\n \n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n+  /// One of the @link s20_3_8_memadaptors adaptors for member\n+  /// pointers@endlink.\n   template <class _Ret, class _Tp>\n     class const_mem_fun_t : public unary_function<const _Tp*, _Ret>\n     {\n@@ -637,7 +641,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Ret (_Tp::*_M_f)() const;\n     };\n \n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n+  /// One of the @link s20_3_8_memadaptors adaptors for member\n+  /// pointers@endlink.\n   template <class _Ret, class _Tp>\n     class mem_fun_ref_t : public unary_function<_Tp, _Ret>\n     {\n@@ -653,7 +658,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Ret (_Tp::*_M_f)();\n   };\n \n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n+  /// One of the @link s20_3_8_memadaptors adaptors for member\n+  /// pointers@endlink.\n   template <class _Ret, class _Tp>\n     class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>\n     {\n@@ -669,7 +675,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Ret (_Tp::*_M_f)() const;\n     };\n \n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n+  /// One of the @link s20_3_8_memadaptors adaptors for member\n+  /// pointers@endlink.\n   template <class _Ret, class _Tp, class _Arg>\n     class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>\n     {\n@@ -685,7 +692,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Ret (_Tp::*_M_f)(_Arg);\n     };\n \n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n+  /// One of the @link s20_3_8_memadaptors adaptors for member\n+  /// pointers@endlink.\n   template <class _Ret, class _Tp, class _Arg>\n     class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>\n     {\n@@ -701,7 +709,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Ret (_Tp::*_M_f)(_Arg) const;\n     };\n \n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n+  /// One of the @link s20_3_8_memadaptors adaptors for member\n+  /// pointers@endlink.\n   template <class _Ret, class _Tp, class _Arg>\n     class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>\n     {\n@@ -717,7 +726,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _Ret (_Tp::*_M_f)(_Arg);\n     };\n \n-  /// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n+  /// One of the @link s20_3_8_memadaptors adaptors for member\n+  /// pointers@endlink.\n   template <class _Ret, class _Tp, class _Arg>\n     class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>\n     {"}, {"sha": "78b78f138c000462b38212bff16bb041bcfc52e0", "filename": "libstdc++-v3/include/ext/throw_allocator.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fthrow_allocator.h?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -39,18 +39,14 @@\n // purpose. It is provided \"as is\" without express or implied\n // warranty.\n \n-/** @file ext/vstring.h\n+/** @file ext/throw_allocator.h\n  *  This file is a GNU extension to the Standard C++ Library.\n  *\n  *  Contains an exception-throwing allocator, useful for testing\n  *  exception safety. In addition, allocation addresses are stored and\n  *  sanity checked.\n  */\n \n-/**\n- * @file throw_allocator.h \n- */\n-\n #ifndef _THROW_ALLOCATOR_H\n #define _THROW_ALLOCATOR_H 1\n "}, {"sha": "31799c04cce20dc4554097fc6f586e965baf606f", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -881,15 +881,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     valarray<_Tp>::min() const\n     {\n       _GLIBCXX_DEBUG_ASSERT(_M_size > 0);\n-      return *std::min_element(_M_data, _M_data+_M_size);\n+      return *std::min_element(_M_data, _M_data + _M_size);\n     }\n \n   template<typename _Tp>\n     inline _Tp\n     valarray<_Tp>::max() const\n     {\n       _GLIBCXX_DEBUG_ASSERT(_M_size > 0);\n-      return *std::max_element(_M_data, _M_data+_M_size);\n+      return *std::max_element(_M_data, _M_data + _M_size);\n     }\n   \n   template<class _Tp>"}, {"sha": "76762e675ee13310ba5fe653c071fd3921181e71", "filename": "libstdc++-v3/scripts/check_compile", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Fscripts%2Fcheck_compile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Fscripts%2Fcheck_compile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Fcheck_compile?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -28,7 +28,7 @@ PCH_FLAGS=`$flags_script --cxxpchflags`\n FLAGS=`$flags_script --cxxflags`\n TEST_FLAGS=\"-S\"\n COMPILER=`$flags_script --build-cxx`\n-CXX=\"$COMPILER $INCLUDES $PCH_FLAGS $FLAGS $TEST_FLAGS\"\n+CXX=\"$COMPILER $INCLUDES $PCH_FLAGS $FLAGS -Wfatal-errors $TEST_FLAGS\"\n \n echo \"compile line is:\"\n echo $CXX\n@@ -49,7 +49,6 @@ do\n #\tmv $OUTPUT_NAME binaries\n \trm $OUTPUT_NAME\n     fi\n-    echo \"\"\n     let UNIQUE_ID+=1 \n   fi\n done"}, {"sha": "800de340433b675d904b80d75f4d0d2aa091bc10", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 433, "deletions": 376, "changes": 809, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -20,385 +20,442 @@\n \n #include <algorithm>\n \n-namespace std {\n+namespace std\n+ {\n   // 25.1, non-modifying sequence operations:\n-  template<class InputIterator, class Function>\n-    Function for_each(InputIterator first, InputIterator last, Function f);\n-  template<class InputIterator, class T>\n-    InputIterator find(InputIterator first, InputIterator last,\n-                               const T& value);\n-  template<class InputIterator, class Predicate>\n-    InputIterator find_if(InputIterator first, InputIterator last,\n-                                   Predicate pred);\n-  template<class ForwardIterator1, class ForwardIterator2>\n-    ForwardIterator1\n-       find_end(ForwardIterator1 first1, ForwardIterator1 last1,\n-                    ForwardIterator2 first2, ForwardIterator2 last2);\n-  template<class ForwardIterator1, class ForwardIterator2,\n-               class BinaryPredicate>\n-    ForwardIterator1\n-       find_end(ForwardIterator1 first1, ForwardIterator1 last1,\n-                    ForwardIterator2 first2, ForwardIterator2 last2,\n-                    BinaryPredicate pred);\n-  template<class ForwardIterator1, class ForwardIterator2>\n-    ForwardIterator1\n-       find_first_of(ForwardIterator1 first1, ForwardIterator1 last1,\n-                           ForwardIterator2 first2, ForwardIterator2 last2);\n-  template<class ForwardIterator1, class ForwardIterator2,\n-               class BinaryPredicate>\n-    ForwardIterator1\n-       find_first_of(ForwardIterator1 first1, ForwardIterator1 last1,\n-                    ForwardIterator2 first2, ForwardIterator2 last2,\n-                    BinaryPredicate pred);\n-\n-template<class ForwardIterator>\n-  ForwardIterator adjacent_find(ForwardIterator first,\n-                                ForwardIterator last);\n-\n-template<class ForwardIterator, class BinaryPredicate>\n-  ForwardIterator adjacent_find(ForwardIterator first,\n-      ForwardIterator last, BinaryPredicate pred);\n-\n-template<class InputIterator, class T>\n-  typename iterator_traits<InputIterator>::difference_type\n-    count(InputIterator first, InputIterator last, const T& value);\n-\n-template<class InputIterator, class Predicate>\n-  typename iterator_traits<InputIterator>::difference_type\n-    count_if(InputIterator first, InputIterator last, Predicate pred);\n-template<class InputIterator1, class InputIterator2>\n-  pair<InputIterator1, InputIterator2>\n-    mismatch(InputIterator1 first1, InputIterator1 last1,\n-             InputIterator2 first2);\n-template\n- <class InputIterator1, class InputIterator2, class BinaryPredicate>\n-  pair<InputIterator1, InputIterator2>\n-    mismatch(InputIterator1 first1, InputIterator1 last1,\n-      InputIterator2 first2, BinaryPredicate pred);\n-template<class InputIterator1, class InputIterator2>\n-  bool equal(InputIterator1 first1, InputIterator1 last1,\n-             InputIterator2 first2);\n-template\n- <class InputIterator1, class InputIterator2, class BinaryPredicate>\n-  bool equal(InputIterator1 first1, InputIterator1 last1,\n-             InputIterator2 first2, BinaryPredicate pred);\n-\n-template<class ForwardIterator1, class ForwardIterator2>\n-  ForwardIterator1 search\n-    (ForwardIterator1 first1, ForwardIterator1 last1,\n-     ForwardIterator2 first2, ForwardIterator2 last2);\n-\n-template<class ForwardIterator1, class ForwardIterator2,\n-         class BinaryPredicate>\n-  ForwardIterator1 search\n-    (ForwardIterator1 first1, ForwardIterator1 last1,\n-     ForwardIterator2 first2, ForwardIterator2 last2,\n-                          BinaryPredicate pred);\n-\n-template<class ForwardIterator, class Size, class T>\n-  ForwardIterator search_n(ForwardIterator first, ForwardIterator last,\n-                          Size count, const T& value);\n-\n-template <class ForwardIterator, class Size, class T, class BinaryPredicate>\n-  ForwardIterator search_n(ForwardIterator first, ForwardIterator last,\n-                          Size count, const T& value,\n-                          BinaryPredicate pred);\n-\n-// 25.2, modifying sequence operations:\n-// 25.2.1, copy:\n-template<class InputIterator, class OutputIterator>\n-  OutputIterator copy(InputIterator first, InputIterator last,\n-                               OutputIterator result);\n-template<class BidirectionalIterator1, class BidirectionalIterator2>\n-  BidirectionalIterator2\n-     copy_backward\n-         (BidirectionalIterator1 first, BidirectionalIterator1 last,\n-          BidirectionalIterator2 result);\n-// 25.2.2, swap:\n-template<class T> void swap(T& a, T& b);\n-template<class ForwardIterator1, class ForwardIterator2>\n-  ForwardIterator2 swap_ranges(ForwardIterator1 first1,\n-         ForwardIterator1 last1, ForwardIterator2 first2);\n-template<class ForwardIterator1, class ForwardIterator2>\n-  void iter_swap(ForwardIterator1 a, ForwardIterator2 b);\n-template<class InputIterator, class OutputIterator, class UnaryOperation>\n-  OutputIterator transform(InputIterator first, InputIterator last,\n-                                      OutputIterator result, UnaryOperation op);\n-template<class InputIterator1, class InputIterator2, class OutputIterator,\n-             class BinaryOperation>\n-  OutputIterator transform(InputIterator1 first1, InputIterator1 last1,\n-                                      InputIterator2 first2, OutputIterator result,\n-                                      BinaryOperation binary_op);\n-template<class ForwardIterator, class T>\n-  void replace(ForwardIterator first, ForwardIterator last,\n-                     const T& old_value, const T& new_value);\n-template<class ForwardIterator, class Predicate, class T>\n-  void replace_if(ForwardIterator first, ForwardIterator last,\n-                         Predicate pred, const T& new_value);\n-template<class InputIterator, class OutputIterator, class T>\n-  OutputIterator replace_copy(InputIterator first, InputIterator last,\n-                                         OutputIterator result,\n-                                         const T& old_value, const T& new_value);\n-template<class Iterator, class OutputIterator, class Predicate, class T>\n-  OutputIterator replace_copy_if(Iterator first, Iterator last,\n-                                            OutputIterator result,\n-                                            Predicate pred, const T& new_value);\n-template<class ForwardIterator, class T>\n-  void fill(ForwardIterator first, ForwardIterator last, const T& value);\n-template<class OutputIterator, class Size, class T>\n-  void fill_n(OutputIterator first, Size n, const T& value);\n-template<class ForwardIterator, class Generator>\n-  void generate(ForwardIterator first, ForwardIterator last,\n-                       Generator gen);\n-template<class OutputIterator, class Size, class Generator>\n-  void generate_n(OutputIterator first, Size n, Generator gen);\n-\n-template<class ForwardIterator, class T>\n-  ForwardIterator remove(ForwardIterator first, ForwardIterator last,\n-                                const T& value);\n-template<class ForwardIterator, class Predicate>\n-  ForwardIterator remove_if(ForwardIterator first, ForwardIterator last,\n-                                   Predicate pred);\n-template<class InputIterator, class OutputIterator, class T>\n-  OutputIterator remove_copy(InputIterator first, InputIterator last,\n-                                    OutputIterator result, const T& value);\n-template<class InputIterator, class OutputIterator, class Predicate>\n-  OutputIterator remove_copy_if(InputIterator first, InputIterator last,\n-                                       OutputIterator result, Predicate pred);\n-template<class ForwardIterator>\n-  ForwardIterator unique(ForwardIterator first, ForwardIterator last);\n-template<class ForwardIterator, class BinaryPredicate>\n-  ForwardIterator unique(ForwardIterator first, ForwardIterator last,\n-                                BinaryPredicate pred);\n-template<class InputIterator, class OutputIterator>\n-  OutputIterator unique_copy(InputIterator first, InputIterator last,\n-                                    OutputIterator result);\n-template<class InputIterator, class OutputIterator, class BinaryPredicate>\n-  OutputIterator unique_copy(InputIterator first, InputIterator last,\n-                                    OutputIterator result, BinaryPredicate pred);\n-template<class BidirectionalIterator>\n-  void reverse(BidirectionalIterator first, BidirectionalIterator last);\n-template<class BidirectionalIterator, class OutputIterator>\n-  OutputIterator reverse_copy(BidirectionalIterator first,\n-                                     BidirectionalIterator last,\n-                                     OutputIterator result);\n-template<class ForwardIterator>\n-  void rotate(ForwardIterator first, ForwardIterator middle,\n-                     ForwardIterator last);\n-template<class ForwardIterator, class OutputIterator>\n-  OutputIterator rotate_copy\n-     (ForwardIterator first, ForwardIterator middle,\n-       ForwardIterator last, OutputIterator result);\n-template<class RandomAccessIterator>\n-  void random_shuffle(RandomAccessIterator first,\n-                             RandomAccessIterator last);\n-template<class RandomAccessIterator, class RandomNumberGenerator>\n-  void random_shuffle(RandomAccessIterator first,\n-                             RandomAccessIterator last,\n-                             RandomNumberGenerator& rand);\n-// 25.2.12, partitions:\n-template<class BidirectionalIterator, class Predicate>\n-  BidirectionalIterator partition(BidirectionalIterator first,\n-                                         BidirectionalIterator last,\n-                                         Predicate pred);\n-template<class BidirectionalIterator, class Predicate>\n-  BidirectionalIterator stable_partition(BidirectionalIterator first,\n-                                                 BidirectionalIterator last,\n-                                                Predicate pred);\n-// 25.3, sorting and related operations:\n-// 25.3.1, sorting:\n-template<class RandomAccessIterator>\n-  void sort(RandomAccessIterator first, RandomAccessIterator last);\n-template<class RandomAccessIterator, class Compare>\n-  void sort(RandomAccessIterator first, RandomAccessIterator last,\n-                  Compare comp);\n-template<class RandomAccessIterator>\n-  void stable_sort(RandomAccessIterator first, RandomAccessIterator last);\n-template<class RandomAccessIterator, class Compare>\n-  void stable_sort(RandomAccessIterator first, RandomAccessIterator last,\n-                            Compare comp);\n-template<class RandomAccessIterator>\n-  void partial_sort(RandomAccessIterator first,\n-                              RandomAccessIterator middle,\n-                              RandomAccessIterator last);\n-template<class RandomAccessIterator, class Compare>\n-  void partial_sort(RandomAccessIterator first,\n-                              RandomAccessIterator middle,\n-                              RandomAccessIterator last, Compare comp);\n-template<class InputIterator, class RandomAccessIterator>\n-  RandomAccessIterator\n-     partial_sort_copy(InputIterator first, InputIterator last,\n-                                RandomAccessIterator result_first,\n-                                RandomAccessIterator result_last);\n-template<class InputIterator, class RandomAccessIterator, class Compare>\n-  RandomAccessIterator\n-     partial_sort_copy(InputIterator first, InputIterator last,\n-                                RandomAccessIterator result_first,\n-                                RandomAccessIterator result_last,\n-                                Compare comp);\n-template<class RandomAccessIterator>\n-  void nth_element(RandomAccessIterator first, RandomAccessIterator nth,\n-                            RandomAccessIterator last);\n-template<class RandomAccessIterator, class Compare>\n-  void nth_element(RandomAccessIterator first, RandomAccessIterator nth,\n-                            RandomAccessIterator last, Compare comp);\n-// 25.3.3, binary search:\n-template<class ForwardIterator, class T>\n-  ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last,\n-                                         const T& value);\n-template<class ForwardIterator, class T, class Compare>\n-  ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last,\n-                                         const T& value, Compare comp);\n-template<class ForwardIterator, class T>\n-  ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,\n-                                         const T& value);\n-template<class ForwardIterator, class T, class Compare>\n-  ForwardIterator upper_bound(ForwardIterator first, ForwardIterator last,\n-                                         const T& value, Compare comp);\n-template<class ForwardIterator, class T>\n-  pair<ForwardIterator, ForwardIterator>\n-     equal_range(ForwardIterator first, ForwardIterator last,\n-                        const T& value);\n-template<class ForwardIterator, class T, class Compare>\n-  pair<ForwardIterator, ForwardIterator>\n-     equal_range(ForwardIterator first, ForwardIterator last,\n-                        const T& value, Compare comp);\n-template<class ForwardIterator, class T>\n-  bool binary_search(ForwardIterator first, ForwardIterator last,\n-                             const T& value);\n-template<class ForwardIterator, class T, class Compare>\n-  bool binary_search(ForwardIterator first, ForwardIterator last,\n-                             const T& value, Compare comp);\n-// 25.3.4, merge:\n-template<class InputIterator1, class InputIterator2, class OutputIterator>\n-  OutputIterator merge(InputIterator1 first1, InputIterator1 last1,\n-                               InputIterator2 first2, InputIterator2 last2,\n-                               OutputIterator result);\n-template<class InputIterator1, class InputIterator2, class OutputIterator,\n-             class Compare>\n-  OutputIterator merge(InputIterator1 first1, InputIterator1 last1,\n-                               InputIterator2 first2, InputIterator2 last2,\n-                               OutputIterator result, Compare comp);\n-template<class BidirectionalIterator>\n-  void inplace_merge(BidirectionalIterator first,\n-                             BidirectionalIterator middle,\n-                             BidirectionalIterator last);\n-template<class BidirectionalIterator, class Compare>\n-  void inplace_merge(BidirectionalIterator first,\n-                             BidirectionalIterator middle,\n-                             BidirectionalIterator last, Compare comp);\n-// 25.3.5, set operations:\n-template<class InputIterator1, class InputIterator2>\n-  bool includes(InputIterator1 first1, InputIterator1 last1,\n-                        InputIterator2 first2, InputIterator2 last2);\n-template<class InputIterator1, class InputIterator2, class Compare>\n-  bool includes\n-     (InputIterator1 first1, InputIterator1 last1,\n-       InputIterator2 first2, InputIterator2 last2, Compare comp);\n-template<class InputIterator1, class InputIterator2, class OutputIterator>\n-  OutputIterator set_union(InputIterator1 first1, InputIterator1 last1,\n-                                   InputIterator2 first2, InputIterator2 last2,\n-                                   OutputIterator result);\n-template<class InputIterator1, class InputIterator2, class OutputIterator,\n-             class Compare>\n-  OutputIterator set_union(InputIterator1 first1, InputIterator1 last1,\n-                                   InputIterator2 first2, InputIterator2 last2,\n-                                   OutputIterator result, Compare comp);\n-template<class InputIterator1, class InputIterator2, class OutputIterator>\n-  OutputIterator set_intersection\n-        (InputIterator1 first1, InputIterator1 last1,\n-          InputIterator2 first2, InputIterator2 last2,\n-          OutputIterator result);\n-template<class InputIterator1, class InputIterator2, class OutputIterator,\n-             class Compare>\n-  OutputIterator set_intersection\n-        (InputIterator1 first1, InputIterator1 last1,\n-          InputIterator2 first2, InputIterator2 last2,\n-          OutputIterator result, Compare comp);\n-template<class InputIterator1, class InputIterator2, class OutputIterator>\n-  OutputIterator set_difference\n-        (InputIterator1 first1, InputIterator1 last1,\n-          InputIterator2 first2, InputIterator2 last2,\n-          OutputIterator result);\n-template<class InputIterator1, class InputIterator2, class OutputIterator,\n-             class Compare>\n-  OutputIterator set_difference\n-        (InputIterator1 first1, InputIterator1 last1,\n-          InputIterator2 first2, InputIterator2 last2,\n-          OutputIterator result, Compare comp);\n-template<class InputIterator1, class InputIterator2, class OutputIterator>\n-  OutputIterator\n-     set_symmetric_difference(InputIterator1 first1, InputIterator1 last1,\n-                                    InputIterator2 first2, InputIterator2 last2,\n-                                    OutputIterator result);\n-template<class InputIterator1, class InputIterator2, class OutputIterator,\n-              class Compare>\n-  OutputIterator\n-     set_symmetric_difference(InputIterator1 first1, InputIterator1 last1,\n-                                    InputIterator2 first2, InputIterator2 last2,\n-                                    OutputIterator result, Compare comp);\n-// 25.3.6, heap operations:\n-template<class RandomAccessIterator>\n-  void push_heap(RandomAccessIterator first, RandomAccessIterator last);\n-template<class RandomAccessIterator, class Compare>\n-  void push_heap(RandomAccessIterator first, RandomAccessIterator last,\n-                        Compare comp);\n-template<class RandomAccessIterator>\n-  void pop_heap(RandomAccessIterator first, RandomAccessIterator last);\n-template<class RandomAccessIterator, class Compare>\n-  void pop_heap(RandomAccessIterator first, RandomAccessIterator last,\n-                       Compare comp);\n-template<class RandomAccessIterator>\n-  void make_heap(RandomAccessIterator first, RandomAccessIterator last);\n-template<class RandomAccessIterator, class Compare>\n-  void make_heap(RandomAccessIterator first, RandomAccessIterator last,\n-                        Compare comp);\n-template<class RandomAccessIterator>\n-  void sort_heap(RandomAccessIterator first, RandomAccessIterator last);\n-template<class RandomAccessIterator, class Compare>\n-  void sort_heap(RandomAccessIterator first, RandomAccessIterator last,\n-                        Compare comp);\n+  template<typename _IIter, typename _Funct>\n+    _Funct \n+    for_each(_IIter, _IIter, _Funct);\n+\n+  template<typename _IIter, typename _Tp>\n+    _IIter \n+    find(_IIter, _IIter, const _Tp&);\n+\n+  template<typename _IIter, typename _Predicate>\n+    _IIter \n+    find_if(_IIter, _IIter, _Predicate);\n+\n+  template<typename _FIter1, typename _FIter2>\n+    _FIter1\n+    find_end(_FIter1, _FIter1, _FIter2, _FIter2);\n+\n+  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>\n+    _FIter1\n+    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n+\n+  template<typename _FIter1, typename _FIter2>\n+    _FIter1\n+    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);\n+\n+  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>\n+    _FIter1\n+    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n+\n+  template<typename _FIter>\n+    _FIter \n+    adjacent_find(_FIter, _FIter);\n+\n+  template<typename _FIter, typename _BinaryPredicate>\n+    _FIter \n+    adjacent_find(_FIter, _FIter, _BinaryPredicate);\n+\n+  template<typename _IIter, typename _Tp>\n+    typename iterator_traits<_IIter>::difference_type\n+    count(_IIter, _IIter, const _Tp&);\n+\n+  template<typename _IIter, typename _Predicate>\n+    typename iterator_traits<_IIter>::difference_type\n+    count_if(_IIter, _IIter, _Predicate);\n+\n+  template<typename _IIter1, typename _IIter2>\n+    pair<_IIter1, _IIter2>\n+    mismatch(_IIter1, _IIter1, _IIter2);\n+\n+  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n+    pair<_IIter1, _IIter2>\n+    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);\n+\n+  template<typename _IIter1, typename _IIter2>\n+    bool \n+    equal(_IIter1, _IIter1, _IIter2);\n+\n+  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>\n+    bool \n+    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);\n+\n+  template<typename _FIter1, typename _FIter2>\n+    _FIter1 \n+    search(_FIter1, _FIter1, _FIter2, _FIter2);\n+\n+  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>\n+    _FIter1 \n+    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);\n+\n+  template<typename _FIter, typename _Size, typename _Tp>\n+    _FIter \n+    search_n(_FIter, _FIter, _Size, const _Tp&);\n+\n+  template<typename _FIter, typename _Size, typename _Tp, \n+\t   typename _BinaryPredicate>\n+    _FIter \n+    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);\n+\n+  // 25.2, modifying sequence operations:\n+  // 25.2.1, copy:\n+  template<typename _IIter, typename _OIter>\n+    _OIter \n+    copy(_IIter, _IIter, _OIter);\n+\n+  template<typename _BIter1, typename _BIter2>\n+    _BIter2\n+    copy_backward (_BIter1, _BIter1, _BIter2);\n+\n+  // 25.2.2, swap:\n+  template<typename _Tp> \n+    void \n+    swap(_Tp&, _Tp& b);\n+\n+  template<typename _FIter1, typename _FIter2>\n+    _FIter2 \n+    swap_ranges(_FIter1 first1, _FIter1, _FIter2);\n+\n+  template<typename _FIter1, typename _FIter2>\n+    void \n+    iter_swap(_FIter1, _FIter2 b);\n+\n+  template<typename _IIter, typename _OIter, typename _UnaryOperation>\n+    _OIter \n+    transform(_IIter, _IIter, _OIter, _UnaryOperation op);\n+\n+  template<typename _IIter1, typename _IIter2, typename _OIter, \n+\t   typename _BinaryOperation>\n+    _OIter \n+    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);\n+\n+  template<typename _FIter, typename _Tp>\n+    void \n+    replace(_FIter, _FIter, const _Tp&, const _Tp&);\n+\n+  template<typename _FIter, typename _Predicate, typename _Tp>\n+    void \n+    replace_if(_FIter, _FIter, _Predicate, const _Tp&);\n+\n+  template<typename _IIter, typename _OIter, typename _Tp>\n+    _OIter \n+    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);\n+\n+  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>\n+    _OIter \n+    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);\n+\n+  template<typename _FIter, typename _Tp>\n+    void \n+    fill(_FIter, _FIter, const _Tp&);\n+\n+  template<typename _OIter, typename _Size, typename _Tp>\n+    void \n+    fill_n(_OIter, _Size n, const _Tp&);\n+\n+  template<typename _FIter, typename _Generator>\n+    void \n+    generate(_FIter, _FIter, _Generator);\n+\n+  template<typename _OIter, typename _Size, typename _Generator>\n+    void \n+    generate_n(_OIter, _Size, _Generator);\n+\n+  template<typename _FIter, typename _Tp>\n+    _FIter \n+    remove(_FIter, _FIter, const _Tp&);\n+\n+  template<typename _FIter, typename _Predicate>\n+    _FIter \n+    remove_if(_FIter, _FIter, _Predicate);\n+\n+  template<typename _IIter, typename _OIter, typename _Tp>\n+    _OIter \n+    remove_copy(_IIter, _IIter, _OIter, const _Tp&);\n+\n+  template<typename _IIter, typename _OIter, typename _Predicate>\n+    _OIter \n+    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);\n+\n+  template<typename _FIter>\n+    _FIter \n+    unique(_FIter, _FIter);\n+\n+  template<typename _FIter, typename _BinaryPredicate>\n+    _FIter \n+    unique(_FIter, _FIter, _BinaryPredicate);\n+\n+  template<typename _IIter, typename _OIter>\n+    _OIter \n+    unique_copy(_IIter, _IIter, _OIter);\n+\n+  template<typename _IIter, typename _OIter, typename _BinaryPredicate>\n+    _OIter \n+    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);\n+\n+  template<typename _BIter>\n+    void \n+    reverse(_BIter, _BIter);\n+\n+  template<typename _BIter, typename _OIter>\n+    _OIter \n+    reverse_copy(_BIter, _BIter, _OIter);\n+\n+  template<typename _FIter>\n+    void \n+    rotate(_FIter, _FIter, _FIter);\n+\n+  template<typename _FIter, typename _OIter>\n+    _OIter \n+    rotate_copy (_FIter, _FIter, _FIter, _OIter);\n+\n+  template<typename _RAIter>\n+    void \n+    random_shuffle(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Generator>\n+    void \n+    random_shuffle(_RAIter, _RAIter, _Generator&);\n+\n+  // 25.2.12, partitions:\n+  template<typename _BIter, typename _Predicate>\n+    _BIter \n+    partition(_BIter, _BIter, _Predicate);\n+\n+  template<typename _BIter, typename _Predicate>\n+    _BIter \n+    stable_partition(_BIter, _BIter, _Predicate);\n+\n+  // 25.3, sorting and related operations:\n+  // 25.3.1, sorting:\n+  template<typename _RAIter>\n+    void \n+    sort(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    void \n+    sort(_RAIter, _RAIter, _Compare);\n+\n+  template<typename _RAIter>\n+    void \n+    stable_sort(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    void \n+    stable_sort(_RAIter, _RAIter, _Compare);\n+\n+  template<typename _RAIter>\n+    void \n+    partial_sort(_RAIter, _RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    void \n+    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);\n+\n+  template<typename _IIter, typename _RAIter>\n+    _RAIter\n+    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);\n+\n+  template<typename _IIter, typename _RAIter, typename _Compare>\n+    _RAIter\n+    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);\n+\n+  template<typename _RAIter>\n+    void \n+    nth_element(_RAIter, _RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    void \n+    nth_element(_RAIter, _RAIter, _RAIter, _Compare);\n+\n+  // 25.3.3, binary search:\n+  template<typename _FIter, typename _Tp>\n+    _FIter \n+    lower_bound(_FIter, _FIter, const _Tp&);\n+\n+  template<typename _FIter, typename _Tp, typename _Compare>\n+    _FIter \n+    lower_bound(_FIter, _FIter, const _Tp&, _Compare);\n+\n+  template<typename _FIter, typename _Tp>\n+    _FIter \n+    upper_bound(_FIter, _FIter, const _Tp&);\n+\n+  template<typename _FIter, typename _Tp, typename _Compare>\n+    _FIter \n+    upper_bound(_FIter, _FIter, const _Tp&, _Compare);\n+\n+  template<typename _FIter, typename _Tp>\n+    pair<_FIter, _FIter>\n+    equal_range(_FIter, _FIter, const _Tp&);\n+\n+  template<typename _FIter, typename _Tp, typename _Compare>\n+    pair<_FIter, _FIter>\n+    equal_range(_FIter, _FIter, const _Tp&, _Compare);\n+\n+  template<typename _FIter, typename _Tp>\n+    bool \n+    binary_search(_FIter, _FIter, const _Tp&);\n+\n+  template<typename _FIter, typename _Tp, typename _Compare>\n+    bool \n+    binary_search(_FIter, _FIter, const _Tp&, _Compare);\n+\n+  // 25.3.4, merge:\n+  template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _OIter \n+    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n+\n+  template<typename _IIter1, typename _IIter2, typename _OIter, \n+\t   typename _Compare>\n+    _OIter \n+    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n+\n+  template<typename _BIter>\n+    void \n+    inplace_merge(_BIter, _BIter, _BIter);\n+\n+  template<typename _BIter, typename _Compare>\n+    void \n+    inplace_merge(_BIter, _BIter, _BIter, _Compare);\n+\n+  // 25.3.5, set operations:\n+  template<typename _IIter1, typename _IIter2>\n+    bool \n+    includes(_IIter1, _IIter1, _IIter2, _IIter2);\n+\n+  template<typename _IIter1, typename _IIter2, typename _Compare>\n+    bool \n+    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);\n+\n+  template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _OIter \n+    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n+\n+  template<typename _IIter1, typename _IIter2, typename _OIter,\n+\t   typename _Compare>\n+    _OIter \n+    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n+\n+  template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _OIter \n+    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n+\n+  template<typename _IIter1, typename _IIter2, typename _OIter,\n+\t   typename _Compare>\n+    _OIter \n+    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n+\n+  template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _OIter \n+    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n+\n+  template<typename _IIter1, typename _IIter2, typename _OIter, \n+\t   typename _Compare>\n+    _OIter \n+    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);\n+\n+  template<typename _IIter1, typename _IIter2, typename _OIter>\n+    _OIter\n+    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);\n+\n+  template<typename _IIter1, typename _IIter2, typename _OIter, \n+\t   typename _Compare>\n+    _OIter\n+    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, \n+\t\t\t     _OIter, _Compare);\n+\n+  // 25.3.6, heap operations:\n+  template<typename _RAIter>\n+    void \n+    push_heap(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    void \n+    push_heap(_RAIter, _RAIter, _Compare);\n+\n+  template<typename _RAIter>\n+    void \n+    pop_heap(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    void \n+    pop_heap(_RAIter, _RAIter, _Compare);\n+\n+  template<typename _RAIter>\n+    void \n+    make_heap(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    void \n+    make_heap(_RAIter, _RAIter, _Compare);\n+\n+  template<typename _RAIter>\n+    void \n+    sort_heap(_RAIter, _RAIter);\n+\n+  template<typename _RAIter, typename _Compare>\n+    void \n+    sort_heap(_RAIter, _RAIter, _Compare);\n \n   // 25.3.7, minimum and maximum:\n-  template<class T> const T& min(const T& a, const T& b);\n-  template<class T, class Compare>\n-    const T& min(const T& a, const T& b, Compare comp);\n-  template<class T> const T& max(const T& a, const T& b);\n-  template<class T, class Compare>\n-    const T& max(const T& a, const T& b, Compare comp);\n-  template<class ForwardIterator>\n-    ForwardIterator min_element\n-       (ForwardIterator first, ForwardIterator last);\n-  template<class ForwardIterator, class Compare>\n-    ForwardIterator min_element(ForwardIterator first, ForwardIterator last,\n-                                     Compare comp);\n-  template<class ForwardIterator>\n-    ForwardIterator max_element\n-       (ForwardIterator first, ForwardIterator last);\n-  template<class ForwardIterator, class Compare>\n-    ForwardIterator max_element(ForwardIterator first, ForwardIterator last,\n-                                     Compare comp);\n-  template<class InputIterator1, class InputIterator2>\n-    bool lexicographical_compare\n-          (InputIterator1 first1, InputIterator1 last1,\n-            InputIterator2 first2, InputIterator2 last2);\n-  template<class InputIterator1, class InputIterator2, class Compare>\n-    bool lexicographical_compare\n-          (InputIterator1 first1, InputIterator1 last1,\n-            InputIterator2 first2, InputIterator2 last2,\n-            Compare comp);\n+  template<typename _Tp> \n+    const _Tp& \n+    min(const _Tp&, const _Tp&);\n+\n+  template<typename _Tp, typename _Compare>\n+    const _Tp& \n+    min(const _Tp&, const _Tp&, _Compare);\n+\n+  template<typename _Tp> \n+    const _Tp& \n+    max(const _Tp&, const _Tp&);\n+\n+  template<typename _Tp, typename _Compare>\n+    const _Tp& \n+    max(const _Tp&, const _Tp&, _Compare);\n+\n+  template<typename _FIter>\n+    _FIter \n+    min_element(_FIter, _FIter);\n+\n+  template<typename _FIter, typename _Compare>\n+    _FIter \n+    min_element(_FIter, _FIter, _Compare);\n+\n+  template<typename _FIter>\n+    _FIter \n+    max_element(_FIter, _FIter);\n+\n+  template<typename _FIter, typename _Compare>\n+    _FIter \n+    max_element(_FIter, _FIter, _Compare);\n+\n+  template<typename _IIter1, typename _IIter2>\n+    bool \n+    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);\n+\n+  template<typename _IIter1, typename _IIter2, typename _Compare>\n+    bool \n+    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);\n \n   // 25.3.9, permutations\n-  template<class BidirectionalIterator>\n-    bool next_permutation(BidirectionalIterator first,\n-                                 BidirectionalIterator last);\n-  template<class BidirectionalIterator, class Compare>\n-    bool next_permutation(BidirectionalIterator first,\n-                                 BidirectionalIterator last, Compare comp);\n-  template<class BidirectionalIterator>\n-    bool prev_permutation(BidirectionalIterator first,\n-                                 BidirectionalIterator last);\n-  template<class BidirectionalIterator, class Compare>\n-    bool prev_permutation(BidirectionalIterator first,\n-                                 BidirectionalIterator last, Compare comp);\n+  template<typename _BIter>\n+    bool \n+    next_permutation(_BIter, _BIter);\n+\n+  template<typename _BIter, typename _Compare>\n+    bool \n+    next_permutation(_BIter, _BIter, _Compare);\n+\n+  template<typename _BIter>\n+    bool \n+    prev_permutation(_BIter, _BIter);\n+\n+  template<typename _BIter, typename _Compare>\n+    bool \n+    prev_permutation(_BIter, _BIter, _Compare);\n }"}, {"sha": "760086710e6fb3541836178b6d5d65ae07679bd6", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65be6ddd76c05dd4a3395c1fe5e579e6e703fc84/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=65be6ddd76c05dd4a3395c1fe5e579e6e703fc84", "patch": "@@ -61,8 +61,7 @@ namespace __gnu_test\n     {\n       T* first;\n       T* last;\n-      BoundsContainer(T* _first, T* _last)\n-\t: first(_first), last(_last)\n+      BoundsContainer(T* _first, T* _last) : first(_first), last(_last)\n       { }\n     };\n \n@@ -73,7 +72,7 @@ namespace __gnu_test\n       T* incrementedto;\n       bool* writtento;\n       OutputContainer(T* _first, T* _last)\n-\t: BoundsContainer<T>(_first, _last), incrementedto(_first)\n+      : BoundsContainer<T>(_first, _last), incrementedto(_first)\n       {\n \twrittento = new bool[this->last - this->first];\n \tfor(int i = 0; i < this->last - this->first; i++)\n@@ -114,21 +113,21 @@ namespace __gnu_test\n    * instansiated directly, but generated from a test_container\n    */\n   template<class T>\n-  struct output_iterator_wrapper: public std::iterator\n-  <std::output_iterator_tag, T, ptrdiff_t, T*, T&>\n+  struct output_iterator_wrapper\n+  : public std::iterator<std::output_iterator_tag, T, ptrdiff_t, T*, T&>\n   {\n     typedef OutputContainer<T> ContainerType;\n     T* ptr;\n     ContainerType* SharedInfo;\n \n     output_iterator_wrapper(T* _ptr, ContainerType* SharedInfo_in)\n-      :ptr(_ptr), SharedInfo(SharedInfo_in)\n+    : ptr(_ptr), SharedInfo(SharedInfo_in)\n     {\n       ITERATOR_VERIFY(ptr >= SharedInfo->first && ptr <= SharedInfo->last);\n     }\n     \n     output_iterator_wrapper(const output_iterator_wrapper& in)\n-      :ptr(in.ptr), SharedInfo(in.SharedInfo)\n+    : ptr(in.ptr), SharedInfo(in.SharedInfo)\n     { }\n \n     WritableObject<T>\n@@ -175,8 +174,8 @@ namespace __gnu_test\n    * instansiated directly, but generated from a test_container\n    */\n   template<class T>\n-  class input_iterator_wrapper:public std::iterator\n-  <std::input_iterator_tag, T, ptrdiff_t, T*, T&>\n+  class input_iterator_wrapper\n+  : public std::iterator<std::input_iterator_tag, T, ptrdiff_t, T*, T&>\n   {\n   protected:\n     input_iterator_wrapper()\n@@ -188,11 +187,11 @@ namespace __gnu_test\n     ContainerType* SharedInfo;\n \n     input_iterator_wrapper(T* _ptr, ContainerType* SharedInfo_in)\n-      : ptr(_ptr), SharedInfo(SharedInfo_in)\n+    : ptr(_ptr), SharedInfo(SharedInfo_in)\n     { ITERATOR_VERIFY(ptr >= SharedInfo->first && ptr <= SharedInfo->last); }\n     \n     input_iterator_wrapper(const input_iterator_wrapper& in)\n-      : ptr(in.ptr), SharedInfo(in.SharedInfo)\n+    : ptr(in.ptr), SharedInfo(in.SharedInfo)\n     { }\n \n     bool\n@@ -257,16 +256,16 @@ namespace __gnu_test\n    * instansiated directly, but generated from a test_container\n    */\n   template<class T>\n-  struct forward_iterator_wrapper:public input_iterator_wrapper<T>\n+  struct forward_iterator_wrapper : public input_iterator_wrapper<T>\n   {\n     typedef BoundsContainer<T> ContainerType;\n     typedef std::forward_iterator_tag iterator_category;\n     forward_iterator_wrapper(T* _ptr, ContainerType* SharedInfo_in)\n-      :input_iterator_wrapper<T>(_ptr, SharedInfo_in)\n+    : input_iterator_wrapper<T>(_ptr, SharedInfo_in)\n     { }\n     \n     forward_iterator_wrapper(const forward_iterator_wrapper& in)\n-      :input_iterator_wrapper<T>(in)\n+    : input_iterator_wrapper<T>(in)\n     { }\n \n     forward_iterator_wrapper()\n@@ -311,16 +310,16 @@ namespace __gnu_test\n    * instansiated directly, but generated from a test_container\n    */\n   template<class T>\n-  struct bidirectional_iterator_wrapper:public forward_iterator_wrapper<T>\n+  struct bidirectional_iterator_wrapper : public forward_iterator_wrapper<T>\n   {\n     typedef BoundsContainer<T> ContainerType;\n     typedef std::bidirectional_iterator_tag iterator_category;\n     bidirectional_iterator_wrapper(T* _ptr, ContainerType* SharedInfo_in)\n-      :forward_iterator_wrapper<T>(_ptr, SharedInfo_in)\n+    : forward_iterator_wrapper<T>(_ptr, SharedInfo_in)\n     { }\n \n     bidirectional_iterator_wrapper(const bidirectional_iterator_wrapper& in)\n-      :forward_iterator_wrapper<T>(in)\n+    : forward_iterator_wrapper<T>(in)\n     { }\n \n     bidirectional_iterator_wrapper(): forward_iterator_wrapper<T>()\n@@ -375,16 +374,17 @@ namespace __gnu_test\n    * instansiated directly, but generated from a test_container\n    */\n   template<class T>\n-  struct random_access_iterator_wrapper:public bidirectional_iterator_wrapper<T>\n+  struct random_access_iterator_wrapper \n+  : public bidirectional_iterator_wrapper<T>\n   {\n     typedef BoundsContainer<T> ContainerType;\n     typedef std::random_access_iterator_tag iterator_category;\n     random_access_iterator_wrapper(T* _ptr, ContainerType* SharedInfo_in)\n-      : bidirectional_iterator_wrapper<T>(_ptr, SharedInfo_in)\n+    : bidirectional_iterator_wrapper<T>(_ptr, SharedInfo_in)\n     { }\n \n     random_access_iterator_wrapper(const random_access_iterator_wrapper<T>& in)\n-      : bidirectional_iterator_wrapper<T>(in)\n+    : bidirectional_iterator_wrapper<T>(in)\n     { }\n \n     random_access_iterator_wrapper():bidirectional_iterator_wrapper<T>()"}]}