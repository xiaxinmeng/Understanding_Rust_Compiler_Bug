{"sha": "96f0b77287e97e6fbc82b880c441c34d6a31682b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZmMGI3NzI4N2U5N2U2ZmJjODJiODgwYzQ0MWMzNGQ2YTMxNjgyYg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-07-22T00:56:10Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-07-22T00:56:10Z"}, "message": "Convert to Pmode if needed and use force_reg after convert.\n\n2011-07-21  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_expand_move): Convert to Pmode if\n\tneeded and use force_reg after convert.\n\t(ix86_expand_call): Likewise.\n\t(ix86_expand_special_args_builtin): Likewise.\n\t(ix86_expand_builtin): Likewise.\n\nFrom-SVN: r176612", "tree": {"sha": "2dadf7b03850295a68970eeefc712a4b4c431576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dadf7b03850295a68970eeefc712a4b4c431576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96f0b77287e97e6fbc82b880c441c34d6a31682b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f0b77287e97e6fbc82b880c441c34d6a31682b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f0b77287e97e6fbc82b880c441c34d6a31682b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f0b77287e97e6fbc82b880c441c34d6a31682b/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9225c7ef386bd2f3bd912332fa5686b0cbff3850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9225c7ef386bd2f3bd912332fa5686b0cbff3850", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9225c7ef386bd2f3bd912332fa5686b0cbff3850"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "64560000d24386962d0d58019a074d20cd8a022d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f0b77287e97e6fbc82b880c441c34d6a31682b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f0b77287e97e6fbc82b880c441c34d6a31682b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96f0b77287e97e6fbc82b880c441c34d6a31682b", "patch": "@@ -1,3 +1,11 @@\n+2011-07-21  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_expand_move): Convert to Pmode if\n+\tneeded and use force_reg after convert.\n+\t(ix86_expand_call): Likewise.\n+\t(ix86_expand_special_args_builtin): Likewise.\n+\t(ix86_expand_builtin): Likewise.\n+\n 2011-07-21  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/47654"}, {"sha": "7137217d37ad4e9289a4f22077877559331d54e6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f0b77287e97e6fbc82b880c441c34d6a31682b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f0b77287e97e6fbc82b880c441c34d6a31682b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=96f0b77287e97e6fbc82b880c441c34d6a31682b", "patch": "@@ -14993,6 +14993,8 @@ ix86_expand_move (enum machine_mode mode, rtx operands[])\n \t  op1 = force_operand (op1, op0);\n \t  if (op1 == op0)\n \t    return;\n+\t  if (GET_MODE (op1) != mode)\n+\t    op1 = convert_to_mode (mode, op1, 1);\n \t}\n       else if (TARGET_DLLIMPORT_DECL_ATTRIBUTES\n \t       && SYMBOL_REF_DLLIMPORT_P (op1))\n@@ -21510,8 +21512,10 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n \t   ? !sibcall_insn_operand (XEXP (fnaddr, 0), Pmode)\n \t   : !call_insn_operand (XEXP (fnaddr, 0), Pmode))\n     {\n-      fnaddr = copy_to_mode_reg (Pmode, XEXP (fnaddr, 0));\n-      fnaddr = gen_rtx_MEM (QImode, fnaddr);\n+      fnaddr = XEXP (fnaddr, 0);\n+      if (GET_MODE (fnaddr) != Pmode)\n+\tfnaddr = convert_to_mode (Pmode, fnaddr, 1);\n+      fnaddr = gen_rtx_MEM (QImode, force_reg (Pmode, fnaddr));\n     }\n \n   call = gen_rtx_CALL (VOIDmode, fnaddr, callarg1);\n@@ -26735,7 +26739,11 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       op = expand_normal (arg);\n       gcc_assert (target == 0);\n       if (memory)\n-\ttarget = gen_rtx_MEM (tmode, copy_to_mode_reg (Pmode, op));\n+\t{\n+\t  if (GET_MODE (op) != Pmode)\n+\t    op = convert_to_mode (Pmode, op, 1);\n+\t  target = gen_rtx_MEM (tmode, force_reg (Pmode, op));\n+\t}\n       else\n \ttarget = force_reg (tmode, op);\n       arg_adjust = 1;\n@@ -26778,7 +26786,9 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t  if (i == memory)\n \t    {\n \t      /* This must be the memory operand.  */\n-\t      op = gen_rtx_MEM (mode, copy_to_mode_reg (Pmode, op));\n+\t      if (GET_MODE (op) != Pmode)\n+\t\top = convert_to_mode (Pmode, op, 1);\n+\t      op = gen_rtx_MEM (mode, force_reg (Pmode, op));\n \t      gcc_assert (GET_MODE (op) == mode\n \t\t\t  || GET_MODE (op) == VOIDmode);\n \t    }\n@@ -27004,8 +27014,9 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       mode1 = insn_data[icode].operand[1].mode;\n       mode2 = insn_data[icode].operand[2].mode;\n \n-      op0 = force_reg (Pmode, op0);\n-      op0 = gen_rtx_MEM (mode1, op0);\n+      if (GET_MODE (op0) != Pmode)\n+\top0 = convert_to_mode (Pmode, op0, 1);\n+      op0 = gen_rtx_MEM (mode1, force_reg (Pmode, op0));\n \n       if (!insn_data[icode].operand[0].predicate (op0, mode0))\n \top0 = copy_to_mode_reg (mode0, op0);\n@@ -27036,7 +27047,11 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \top0 = expand_normal (arg0);\n \ticode = CODE_FOR_sse2_clflush;\n \tif (!insn_data[icode].operand[0].predicate (op0, Pmode))\n-\t    op0 = copy_to_mode_reg (Pmode, op0);\n+\t  {\n+\t    if (GET_MODE (op0) != Pmode)\n+\t      op0 = convert_to_mode (Pmode, op0, 1);\n+\t    op0 = force_reg (Pmode, op0);\n+\t  }\n \n \temit_insn (gen_sse2_clflush (op0));\n \treturn 0;\n@@ -27049,7 +27064,11 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       op1 = expand_normal (arg1);\n       op2 = expand_normal (arg2);\n       if (!REG_P (op0))\n-\top0 = copy_to_mode_reg (Pmode, op0);\n+\t{\n+\t  if (GET_MODE (op0) != Pmode)\n+\t    op0 = convert_to_mode (Pmode, op0, 1);\n+\t  op0 = force_reg (Pmode, op0);\n+\t}\n       if (!REG_P (op1))\n \top1 = copy_to_mode_reg (SImode, op1);\n       if (!REG_P (op2))\n@@ -27129,7 +27148,11 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       op0 = expand_normal (arg0);\n       icode = CODE_FOR_lwp_llwpcb;\n       if (!insn_data[icode].operand[0].predicate (op0, Pmode))\n-\top0 = copy_to_mode_reg (Pmode, op0);\n+\t{\n+\t  if (GET_MODE (op0) != Pmode)\n+\t    op0 = convert_to_mode (Pmode, op0, 1);\n+\t  op0 = force_reg (Pmode, op0);\n+\t}\n       emit_insn (gen_lwp_llwpcb (op0));\n       return 0;\n \n@@ -27188,7 +27211,10 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       op1 = expand_normal (arg0);\n       if (!address_operand (op1, VOIDmode))\n-\top1 = copy_addr_to_reg (op1);\n+\t{\n+\t  op1 = convert_memory_address (Pmode, op1);\n+\t  op1 = copy_addr_to_reg (op1);\n+\t}\n       emit_move_insn (gen_rtx_MEM (mode0, op1), op0);\n \n       op1 = gen_reg_rtx (SImode);"}]}