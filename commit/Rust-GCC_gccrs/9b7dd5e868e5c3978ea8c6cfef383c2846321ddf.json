{"sha": "9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI3ZGQ1ZTg2OGU1YzM5NzhlYThjNmNmZWYzODNjMjg0NjMyMWRkZg==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2007-03-28T14:05:29Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2007-03-28T14:05:29Z"}, "message": "decl.c (redeclaration_error_message): Complain when redeclaring a friend function with default template arguments...\n\n2007-03-28  Douglas Gregor  <doug.gregor@gmail.com>\n\n\t* decl.c (redeclaration_error_message): Complain when redeclaring\n\ta friend function with default template arguments (C++0x mode only).\n\t* cp-tree.h (check_default_tmpl_args): Declare.\n\t* pt.c (check_default_tmpl_args): In C++0x mode, permit default\n\ttemplate arguments in function templates. Add support for checking\n\tthe default template arguments of friend templates.\n\t(push_template_decl_real): Fix call to check_default_tmpl_args.\n\t(type_unification_real): If a template parameter has not been\n\tdeduced but provides a default template argument, substitute into\n\tthat default template argument.\n\t* parser.c (cp_parser_init_declarator): When declaring (but not\n\tdefining!) a function template in C++0x mode, check for default\n\ttemplate arguments.\n\n2007-03-28  Douglas Gregor  <doug.gregor@gmail.com>\n\n\t* g++.dg/cpp0x/temp_default1.C: New.\n\t* g++.dg/cpp0x/temp_default3.C: New.\n\t* g++.dg/cpp0x/temp_default2.C: New.\n\t* g++.dg/cpp0x/temp_default4.C: New.\n\nFrom-SVN: r123300", "tree": {"sha": "c72b508351bff91028912e57668dee64204baa72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c72b508351bff91028912e57668dee64204baa72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e701c05c17884fb38917e613f42b000e57bacc57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e701c05c17884fb38917e613f42b000e57bacc57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e701c05c17884fb38917e613f42b000e57bacc57"}], "stats": {"total": 236, "additions": 200, "deletions": 36}, "files": [{"sha": "2a636294a68ccf4bf40a00dc119ca323cbc968c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "patch": "@@ -1,3 +1,19 @@\n+2007-03-28  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* decl.c (redeclaration_error_message): Complain when redeclaring\n+\ta friend function with default template arguments (C++0x mode only).\n+\t* cp-tree.h (check_default_tmpl_args): Declare.\n+\t* pt.c (check_default_tmpl_args): In C++0x mode, permit default\n+\ttemplate arguments in function templates. Add support for checking\n+\tthe default template arguments of friend templates.\n+\t(push_template_decl_real): Fix call to check_default_tmpl_args.\n+\t(type_unification_real): If a template parameter has not been\n+\tdeduced but provides a default template argument, substitute into\n+\tthat default template argument.\n+\t* parser.c (cp_parser_init_declarator): When declaring (but not\n+\tdefining!) a function template in C++0x mode, check for default\n+\ttemplate arguments.\n+\n 2007-03-28 Douglas Gregor <doug.gregor@gmail.com>\n \n \tPR c++/29993"}, {"sha": "95945b33837dd7acbf522fc617b6f0e532cfa837", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "patch": "@@ -4300,6 +4300,7 @@ extern tree check_explicit_specialization\t(tree, tree, int, int);\n extern tree process_template_parm\t\t(tree, tree, bool, bool);\n extern tree end_template_parm_list\t\t(tree);\n extern void end_template_decl\t\t\t(void);\n+extern bool check_default_tmpl_args             (tree, tree, int, int, int);\n extern tree push_template_decl\t\t\t(tree);\n extern tree push_template_decl_real\t\t(tree, bool);\n extern bool redeclare_class_template\t\t(tree, tree);"}, {"sha": "ce1c54f10cdc007a9e71e43d90d3a9c3cf91e1cb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "patch": "@@ -2148,6 +2148,19 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n       if (DECL_INITIAL (nt) && DECL_INITIAL (ot))\n \treturn \"redefinition of %q#D\";\n \n+      /* Core issue #226 (C++0x): \n+           \n+           If a friend function template declaration specifies a\n+           default template-argument, that declaration shall be a\n+           definition and shall be the only declaration of the\n+           function template in the translation unit.  */\n+      if (flag_cpp0x \n+          && TREE_CODE (ot) == FUNCTION_DECL && DECL_FRIEND_P (ot)\n+          && !check_default_tmpl_args (nt, DECL_TEMPLATE_PARMS (newdecl), \n+                                       /*is_primary=*/1, /*is_partial=*/0,\n+                                       /*is_friend_decl=*/2))\n+        return \"redeclaration of friend %q#D may not have default template arguments\";\n+\n       return NULL;\n     }\n   else if (TREE_CODE (newdecl) == VAR_DECL"}, {"sha": "da573cb91f75618bae32893a7b0afe0258257c94", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "patch": "@@ -11721,6 +11721,13 @@ cp_parser_init_declarator (cp_parser* parser,\n \t\t      ((is_parenthesized_init || !is_initialized)\n \t\t     ? 0 : LOOKUP_ONLYCONVERTING));\n     }\n+  else if (flag_cpp0x && friend_p && decl && TREE_CODE (decl) == FUNCTION_DECL)\n+    /* Core issue #226 (C++0x only): A default template-argument\n+       shall not be specified in a friend class template\n+       declaration. */\n+    check_default_tmpl_args (decl, current_template_parms, /*is_primary=*/1, \n+                             /*is_partial=*/0, /*is_friend_decl=*/1);\n+\n   if (!friend_p && pushed_scope)\n     pop_scope (pushed_scope);\n "}, {"sha": "1e6c04408e22416f5bec7cbb2c262a027059b32d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 85, "deletions": 36, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "patch": "@@ -152,7 +152,6 @@ static tree tsubst_function_type (tree, tree, tsubst_flags_t, tree);\n static bool check_specialization_scope (void);\n static tree process_partial_specialization (tree);\n static void set_current_access_from_decl (tree);\n-static void check_default_tmpl_args (tree, tree, int, int);\n static tree get_template_base (tree, tree, tree, tree);\n static tree try_class_unification (tree, tree, tree, tree);\n static int coerce_template_template_parms (tree, tree, tsubst_flags_t,\n@@ -3377,14 +3376,24 @@ process_partial_specialization (tree decl)\n /* Check that a template declaration's use of default arguments is not\n    invalid.  Here, PARMS are the template parameters.  IS_PRIMARY is\n    nonzero if DECL is the thing declared by a primary template.\n-   IS_PARTIAL is nonzero if DECL is a partial specialization.  */\n+   IS_PARTIAL is nonzero if DECL is a partial specialization.\n+   \n \n-static void\n-check_default_tmpl_args (tree decl, tree parms, int is_primary, int is_partial)\n+   IS_FRIEND_DECL is nonzero if DECL is a friend function template\n+   declaration (but not a definition); 1 indicates a declaration, 2\n+   indicates a redeclaration. When IS_FRIEND_DECL=2, no errors are\n+   emitted for extraneous default arguments.\n+\n+   Returns TRUE if there were no errors found, FALSE otherwise. */\n+\n+bool\n+check_default_tmpl_args (tree decl, tree parms, int is_primary, \n+                         int is_partial, int is_friend_decl)\n {\n   const char *msg;\n   int last_level_to_check;\n   tree parm_level;\n+  bool no_errors = true;\n \n   /* [temp.param]\n \n@@ -3397,7 +3406,7 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary, int is_partial)\n     /* You can't have a function template declaration in a local\n        scope, nor you can you define a member of a class template in a\n        local scope.  */\n-    return;\n+    return true;\n \n   if (current_class_type\n       && !TYPE_BEING_DEFINED (current_class_type)\n@@ -3417,40 +3426,49 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary, int is_partial)\n        declared, so there's no need to do it again now.  This function\n        was defined in class scope, but we're processing it's body now\n        that the class is complete.  */\n-    return;\n-\n-  /* [temp.param]\n+    return true;\n \n-     If a template-parameter has a default template-argument, all\n-     subsequent template-parameters shall have a default\n-     template-argument supplied.  */\n-  for (parm_level = parms; parm_level; parm_level = TREE_CHAIN (parm_level))\n+  /* Core issue 226 (C++0x only): the following only applies to class\n+     templates.  */\n+  if (!flag_cpp0x || TREE_CODE (decl) != FUNCTION_DECL)\n     {\n-      tree inner_parms = TREE_VALUE (parm_level);\n-      int ntparms = TREE_VEC_LENGTH (inner_parms);\n-      int seen_def_arg_p = 0;\n-      int i;\n+      /* [temp.param]\n \n-      for (i = 0; i < ntparms; ++i)\n-\t{\n-\t  tree parm = TREE_VEC_ELT (inner_parms, i);\n+         If a template-parameter has a default template-argument, all\n+         subsequent template-parameters shall have a default\n+         template-argument supplied.  */\n+      for (parm_level = parms; parm_level; parm_level = TREE_CHAIN (parm_level))\n+        {\n+          tree inner_parms = TREE_VALUE (parm_level);\n+          int ntparms = TREE_VEC_LENGTH (inner_parms);\n+          int seen_def_arg_p = 0;\n+          int i;\n \n-          if (parm == error_mark_node)\n-            continue;\n+          for (i = 0; i < ntparms; ++i)\n+            {\n+              tree parm = TREE_VEC_ELT (inner_parms, i);\n \n-\t  if (TREE_PURPOSE (parm))\n-\t    seen_def_arg_p = 1;\n-\t  else if (seen_def_arg_p)\n-\t    {\n-\t      error (\"no default argument for %qD\", TREE_VALUE (parm));\n-\t      /* For better subsequent error-recovery, we indicate that\n-\t\t there should have been a default argument.  */\n-\t      TREE_PURPOSE (parm) = error_mark_node;\n-\t    }\n-\t}\n+              if (parm == error_mark_node)\n+                continue;\n+\n+              if (TREE_PURPOSE (parm))\n+                seen_def_arg_p = 1;\n+              else if (seen_def_arg_p)\n+                {\n+                  error (\"no default argument for %qD\", TREE_VALUE (parm));\n+                  /* For better subsequent error-recovery, we indicate that\n+                     there should have been a default argument.  */\n+                  TREE_PURPOSE (parm) = error_mark_node;\n+                  no_errors = false;\n+                }\n+            }\n+        }\n     }\n \n-  if (TREE_CODE (decl) != TYPE_DECL || is_partial || !is_primary)\n+  if ((!flag_cpp0x && TREE_CODE (decl) != TYPE_DECL)\n+      || is_partial \n+      || !is_primary\n+      || is_friend_decl)\n     /* For an ordinary class template, default template arguments are\n        allowed at the innermost level, e.g.:\n \t template <class T = int>\n@@ -3461,8 +3479,8 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary, int is_partial)\n \t The template parameter list of a specialization shall not\n \t contain default template argument values.\n \n-       So, for a partial specialization, or for a function template,\n-       we look at all of them.  */\n+       So, for a partial specialization, or for a function template\n+       (in C++98/C++03), we look at all of them.  */\n     ;\n   else\n     /* But, for a primary class template that is not a partial\n@@ -3471,7 +3489,11 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary, int is_partial)\n     parms = TREE_CHAIN (parms);\n \n   /* Figure out what error message to issue.  */\n-  if (TREE_CODE (decl) == FUNCTION_DECL)\n+  if (is_friend_decl == 2)\n+    msg = \"default template arguments may not be used in function template friend re-declaration\";\n+  else if (is_friend_decl)\n+    msg = \"default template arguments may not be used in function template friend declarations\";\n+  else if (TREE_CODE (decl) == FUNCTION_DECL && !flag_cpp0x)\n     msg = \"default template arguments may not be used in function templates\";\n   else if (is_partial)\n     msg = \"default template arguments may not be used in partial specializations\";\n@@ -3510,6 +3532,10 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary, int is_partial)\n \t    {\n \t      if (msg)\n \t        {\n+                  no_errors = false;\n+                  if (is_friend_decl == 2)\n+                    return no_errors;\n+\n \t\t  error (msg, decl);\n \t\t  msg = 0;\n \t        }\n@@ -3525,6 +3551,8 @@ check_default_tmpl_args (tree decl, tree parms, int is_primary, int is_partial)\n       if (msg)\n \tmsg = \"default argument for template parameter for class enclosing %qD\";\n     }\n+\n+  return no_errors;\n }\n \n /* Worker for push_template_decl_real, called via\n@@ -3652,7 +3680,7 @@ push_template_decl_real (tree decl, bool is_friend)\n   /* Check to see that the rules regarding the use of default\n      arguments are not being violated.  */\n   check_default_tmpl_args (decl, current_template_parms,\n-\t\t\t   primary, is_partial);\n+\t\t\t   primary, is_partial, /*is_friend_decl=*/0);\n \n   /* Ensure that there are no parameter packs in the type of this\n      declaration that have not been expanded.  */\n@@ -11346,6 +11374,27 @@ type_unification_real (tree tparms,\n \t      && !saw_undeduced++)\n \t    goto again;\n \n+          /* Core issue #226 (C++0x) [temp.deduct]:\n+\n+               If a template argument has not been deduced, its\n+               default template argument, if any, is used. \n+\n+             When we are not in C++0x mode (i.e., !flag_cpp0x),\n+             TREE_PURPOSE will either be NULL_TREE or ERROR_MARK_NODE,\n+             so we do not need to explicitly check flag_cpp0x here.  */\n+          if (TREE_PURPOSE (TREE_VEC_ELT (tparms, i)))\n+            {\n+              tree arg = tsubst (TREE_PURPOSE (TREE_VEC_ELT (tparms, i)), \n+                                 targs, tf_none, NULL_TREE);\n+              if (arg == error_mark_node)\n+                return 1;\n+              else\n+                {\n+                  TREE_VEC_ELT (targs, i) = arg;\n+                  continue;\n+                }\n+            }\n+\n \t  return 2;\n \t}\n "}, {"sha": "b59cc0a009bb24085ba4814c8c54209b37811c00", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "patch": "@@ -1,5 +1,11 @@\n 2007-03-28  Douglas Gregor  <doug.gregor@gmail.com>\n \n+\t* g++.dg/cpp0x/temp_default1.C: New.\n+\t* g++.dg/cpp0x/temp_default3.C: New.\n+\t* g++.dg/cpp0x/temp_default2.C: New.\n+\t* g++.dg/cpp0x/temp_default4.C: New.\n+\n+2007-03-28  Douglas Gregor  <doug.gregor@gmail.com>\n \n \tPR c++/29993\n \t* g++.dg/other/cv_func2.C: New."}, {"sha": "dfa2cfb7bc7f5860551d72cb69a9b67c9b182ca4", "filename": "gcc/testsuite/g++.dg/cpp0x/temp_default1.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default1.C?ref=9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename T, typename U>\n+struct is_same\n+{\n+  static const bool value = false;\n+};\n+\n+template<typename T>\n+struct is_same<T, T> {\n+  static const bool value = true;\n+};\n+\n+template<typename T = int> void f()\n+{\n+  static_assert(is_same<T, int>::value, \n+                \"T can only be instantiated with an int\");\n+}\n+\n+template<typename T = int, typename U>\n+void f(U)\n+{\n+  static_assert(is_same<T, int>::value, \n+                \"T can only be instantiated with an int\");\n+}\n+\n+void g()\n+{\n+  float pi = 3.14159;\n+  f();\n+  f(pi);\n+}"}, {"sha": "f7f22284a6266efbf5648dfecdcfd086b9e4da16", "filename": "gcc/testsuite/g++.dg/cpp0x/temp_default2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default2.C?ref=9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+template <class T, class U = double> \n+void f(T t = 0, U u = 0); \n+\n+void g() \n+{ \n+  f(1, 'c'); // f<int,char>(1,'c') \n+  f(1); // f<int,double>(1,0) \n+  f(); // { dg-error \"no matching function\" }\n+  f<int>(); // f<int,double>(0,0) \n+  f<int,char>(); // f<int,char>(0,0) \n+} "}, {"sha": "f71fe0f435ad7587ff9eb2e7e4e6526032c025f7", "filename": "gcc/testsuite/g++.dg/cpp0x/temp_default3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default3.C?ref=9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+template<typename T, typename U = typename T::value_type>\n+void f(T);\n+\n+void f(...);\n+\n+struct X {\n+  typedef int value_type;\n+};\n+\n+void g()\n+{\n+  f(X()); // okay\n+  f(17); // okay?\n+}"}, {"sha": "f1e254c40a14c1387a4e38e3394f4e1224e3c7c0", "filename": "gcc/testsuite/g++.dg/cpp0x/temp_default4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b7dd5e868e5c3978ea8c6cfef383c2846321ddf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default4.C?ref=9b7dd5e868e5c3978ea8c6cfef383c2846321ddf", "patch": "@@ -0,0 +1,11 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+class X {\n+  template<typename T = int> friend void f(X) { }\n+  template<typename T> friend void g(X); // { dg-error \"previously declared here\" }\n+  template<typename T = int> friend void h(X); // { dg-error \"function template friend\" }\n+};\n+\n+template<typename T = int> void g(X) // { dg-error \"default template argument\" }\n+{\n+}"}]}