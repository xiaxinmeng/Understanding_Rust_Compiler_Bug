{"sha": "27232d288515c2f3c5fa15680463f1fb6593625f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyMzJkMjg4NTE1YzJmM2M1ZmExNTY4MDQ2M2YxZmI2NTkzNjI1Zg==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1997-01-29T23:15:10Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1997-01-29T23:15:10Z"}, "message": "sh.md (movsi_i, movsi_ie, movhi_i, movhi+1): Use type pcload for immediate operands where appropriate.\n\nsh.md (movsi_i, movsi_ie, movhi_i, movhi+1): Use type pcload for\nimmediate operands where appropriate.\n(movsf_ie+1): Fail when loading anything but a MEM into\na floating point reguister.\n\nFrom-SVN: r13566", "tree": {"sha": "c85d6931aff0e3451be7098cc3f0bb97549bb816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c85d6931aff0e3451be7098cc3f0bb97549bb816"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27232d288515c2f3c5fa15680463f1fb6593625f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27232d288515c2f3c5fa15680463f1fb6593625f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27232d288515c2f3c5fa15680463f1fb6593625f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27232d288515c2f3c5fa15680463f1fb6593625f/comments", "author": null, "committer": null, "parents": [{"sha": "f8aa1f6e5d235634794cf5b494b7251e0eb34fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8aa1f6e5d235634794cf5b494b7251e0eb34fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8aa1f6e5d235634794cf5b494b7251e0eb34fe1"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "c9ce22a654a21bc5a76bbfba10cd27449bd181ef", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27232d288515c2f3c5fa15680463f1fb6593625f/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27232d288515c2f3c5fa15680463f1fb6593625f/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=27232d288515c2f3c5fa15680463f1fb6593625f", "patch": "@@ -1504,7 +1504,7 @@\n \tlds\t%1,%0\n \tlds.l\t%1,%0\n \tfake\t%1,%0\"\n-  [(set_attr \"type\" \"move,pcload,move,load,move,store,store,move,load,move,move\")\n+  [(set_attr \"type\" \"move,pcload,move,load,move,store,store,move,load,move,pcload\")\n    (set_attr \"length\" \"8,*,*,*,*,*,*,*,*,*,*\")])\n \n ;; t/z is first, so that it will be preferred over r/r when reloading a move\n@@ -1531,7 +1531,7 @@\n \tfake\t%1,%0\n \tlds\t%1,%0\n \tsts\t%1,%0\"\n-  [(set_attr \"type\" \"move,pcload,move,load,move,store,store,move,load,move,move,move,move\")\n+  [(set_attr \"type\" \"move,pcload,move,load,move,store,store,move,load,move,pcload,move,move\")\n    (set_attr \"length\" \"8,*,*,*,*,*,*,*,*,*,*,*,*\")])\n \n (define_expand \"movsi\"\n@@ -1574,7 +1574,7 @@\n \tsts\t%1,%0\n \tlds\t%1,%0\n \tfake\t%1,%0\"\n-  [(set_attr \"type\" \"pcload,move,load,move,store,move,move,move\")])\n+  [(set_attr \"type\" \"pcload,move,load,move,store,move,move,pcload\")])\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"general_movdst_operand\" \"\")\n@@ -1585,13 +1585,13 @@\n ;; ??? This should be a define expand.\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,m,r,r\")\n-\t(match_operand:DI 1 \"general_movsrc_operand\" \"Q,r,m,r,i,x\"))]\n+  [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,m,r,r,r\")\n+\t(match_operand:DI 1 \"general_movsrc_operand\" \"Q,r,m,r,I,i,x\"))]\n   \"arith_reg_operand (operands[0], DImode)\n    || arith_reg_operand (operands[1], DImode)\"\n   \"* return output_movedouble (insn, operands, DImode);\"\n   [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"pcload,move,load,store,move,move\")])\n+   (set_attr \"type\" \"pcload,move,load,store,move,pcload,move\")])\n \n ;; If the output is a register and the input is memory or a register, we have\n ;; to be careful and see which word needs to be loaded first.  \n@@ -1819,6 +1819,8 @@\n {\n   if (REGNO (operands[0]) >= FIRST_FP_REG && REGNO (operands[0]) <= LAST_FP_REG)\n     {\n+      if (GET_CODE (operands[1]) != MEM)\n+\tFAIL;\n       emit_insn (gen_mova (XEXP (operands[1], 0)));\n       XEXP (operands[1], 0) = gen_rtx (REG, Pmode, 0);\n     }"}]}