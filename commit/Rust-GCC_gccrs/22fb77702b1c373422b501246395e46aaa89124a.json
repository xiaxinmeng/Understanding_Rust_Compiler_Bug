{"sha": "22fb77702b1c373422b501246395e46aaa89124a", "node_id": "C_kwDOANBUbNoAKDIyZmI3NzcwMmIxYzM3MzQyMmI1MDEyNDYzOTVlNDZhYWE4OTEyNGE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T23:26:25Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:46:25Z"}, "message": "RISC-V: Add vluxei8 C++ API intrinsic testcase\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vluxei8-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vluxei8_tumu-3.C: New test.", "tree": {"sha": "60491e8cb88978ba8067a3ac75bbd32afc8288a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60491e8cb88978ba8067a3ac75bbd32afc8288a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22fb77702b1c373422b501246395e46aaa89124a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fb77702b1c373422b501246395e46aaa89124a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22fb77702b1c373422b501246395e46aaa89124a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22fb77702b1c373422b501246395e46aaa89124a/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a4d238d81ece682ad76e041abeabbbe23979e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a4d238d81ece682ad76e041abeabbbe23979e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a4d238d81ece682ad76e041abeabbbe23979e4"}], "stats": {"total": 6210, "additions": 6210, "deletions": 0}, "files": [{"sha": "8056d19cee9035dd3931fa33de15fca84d6e8a45", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8-1.C", "status": "added", "additions": 686, "deletions": 0, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8-1.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,686 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8(const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8(const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8(const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8(const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8(const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8(const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8(const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8(const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8(const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8(const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8(const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8(const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8(const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8(const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8(const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8(const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8(const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8(const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8(const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8(const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8(const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8(const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8(const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8(const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8(const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8(const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8(const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8(const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8(const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8(const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8(const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8(const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8(const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8(const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8(const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8(const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8(const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8(const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8(const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8(const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8(const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8(const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8(const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8(const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8(const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8(const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8(const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8(const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8(const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8(const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8(const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8(const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8(const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vluxei8(vbool64_t mask,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8(vbool32_t mask,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8(vbool16_t mask,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8(vbool8_t mask,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8(vbool4_t mask,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8(vbool2_t mask,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8(vbool1_t mask,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8(vbool64_t mask,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8(vbool32_t mask,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8(vbool16_t mask,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8(vbool8_t mask,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8(vbool4_t mask,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8(vbool2_t mask,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8(vbool64_t mask,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8(vbool32_t mask,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8(vbool16_t mask,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8(vbool8_t mask,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8(vbool4_t mask,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8(vbool64_t mask,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8(vbool32_t mask,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8(vbool16_t mask,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8(vbool8_t mask,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8(vbool64_t mask,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8(vbool32_t mask,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8(vbool16_t mask,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8(vbool8_t mask,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8(vbool4_t mask,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8(vbool2_t mask,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8(vbool1_t mask,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8(vbool64_t mask,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8(vbool32_t mask,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8(vbool16_t mask,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8(vbool8_t mask,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8(vbool4_t mask,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8(vbool2_t mask,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8(vbool64_t mask,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8(vbool32_t mask,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8(vbool16_t mask,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8(vbool8_t mask,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8(vbool4_t mask,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8(vbool64_t mask,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8(vbool32_t mask,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8(vbool16_t mask,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8(vbool8_t mask,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8(vbool64_t mask,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8(vbool32_t mask,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8(vbool16_t mask,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8(vbool8_t mask,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8(vbool4_t mask,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8(vbool64_t mask,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8(vbool32_t mask,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8(vbool16_t mask,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8(vbool8_t mask,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "eef7eab475c6f3d1748f5bbeebc93d7ff79defed", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8-2.C", "status": "added", "additions": 686, "deletions": 0, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8-2.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,686 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8(const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8(const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8(const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8(const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8(const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8(const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8(const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8(const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8(const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8(const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8(const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8(const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8(const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8(const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8(const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8(const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8(const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8(const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8(const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8(const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8(const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8(const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8(const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8(const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8(const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8(const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8(const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8(const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8(const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8(const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8(const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8(const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8(const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8(const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8(const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8(const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8(const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8(const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8(const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8(const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8(const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8(const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8(const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8(const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8(const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8(const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8(const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8(const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8(const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8(const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8(const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8(const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8(const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vluxei8(vbool64_t mask,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8(vbool32_t mask,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8(vbool16_t mask,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8(vbool8_t mask,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8(vbool4_t mask,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8(vbool2_t mask,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8(vbool1_t mask,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8(vbool64_t mask,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8(vbool32_t mask,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8(vbool16_t mask,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8(vbool8_t mask,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8(vbool4_t mask,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8(vbool2_t mask,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8(vbool64_t mask,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8(vbool32_t mask,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8(vbool16_t mask,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8(vbool8_t mask,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8(vbool4_t mask,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8(vbool64_t mask,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8(vbool32_t mask,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8(vbool16_t mask,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8(vbool8_t mask,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8(vbool64_t mask,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8(vbool32_t mask,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8(vbool16_t mask,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8(vbool8_t mask,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8(vbool4_t mask,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8(vbool2_t mask,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8(vbool1_t mask,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8(vbool64_t mask,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8(vbool32_t mask,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8(vbool16_t mask,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8(vbool8_t mask,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8(vbool4_t mask,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8(vbool2_t mask,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8(vbool64_t mask,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8(vbool32_t mask,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8(vbool16_t mask,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8(vbool8_t mask,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8(vbool4_t mask,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8(vbool64_t mask,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8(vbool32_t mask,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8(vbool16_t mask,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8(vbool8_t mask,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8(vbool64_t mask,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8(vbool32_t mask,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8(vbool16_t mask,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8(vbool8_t mask,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8(vbool4_t mask,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8(vbool64_t mask,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8(vbool32_t mask,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8(vbool16_t mask,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8(vbool8_t mask,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "b159f56dc4c76fc906b2f9abab53a7bed5f64838", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8-3.C", "status": "added", "additions": 686, "deletions": 0, "changes": 686, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8-3.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,686 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8(const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8(const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8(const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8(const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8(const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8(const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8(const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8(const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8(const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8(const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8(const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8(const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8(const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8(const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8(const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8(const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8(const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8(const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8(const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8(const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8(const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8(const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8(const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8(const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8(const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8(const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8(const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8(const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8(const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8(const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8(const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8(const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8(const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8(const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8(const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8(const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8(const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8(const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8(const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8(const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8(const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8(const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8(const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8(const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8(const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8(const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8(const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8(const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8(const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8(const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8(const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8(const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8(const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(base,bindex,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vluxei8(vbool64_t mask,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8(vbool32_t mask,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8(vbool16_t mask,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8(vbool8_t mask,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8(vbool4_t mask,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8(vbool2_t mask,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8(vbool1_t mask,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8(vbool64_t mask,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8(vbool32_t mask,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8(vbool16_t mask,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8(vbool8_t mask,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8(vbool4_t mask,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8(vbool2_t mask,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8(vbool64_t mask,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8(vbool32_t mask,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8(vbool16_t mask,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8(vbool8_t mask,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8(vbool4_t mask,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8(vbool64_t mask,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8(vbool32_t mask,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8(vbool16_t mask,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8(vbool8_t mask,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8(vbool64_t mask,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8(vbool32_t mask,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8(vbool16_t mask,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8(vbool8_t mask,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8(vbool4_t mask,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8(vbool2_t mask,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8(vbool1_t mask,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8(vbool64_t mask,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8(vbool32_t mask,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8(vbool16_t mask,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8(vbool8_t mask,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8(vbool4_t mask,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8(vbool2_t mask,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8(vbool64_t mask,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8(vbool32_t mask,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8(vbool16_t mask,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8(vbool8_t mask,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8(vbool4_t mask,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8(vbool64_t mask,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8(vbool32_t mask,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8(vbool16_t mask,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8(vbool8_t mask,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8(vbool64_t mask,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8(vbool32_t mask,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8(vbool16_t mask,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8(vbool8_t mask,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8(vbool4_t mask,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8(vbool64_t mask,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8(vbool32_t mask,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8(vbool16_t mask,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8(vbool8_t mask,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8(mask,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "a8876d2900bb55e697a6c070faf088db66b6a797", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_mu-1.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_mu-1.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_mu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_mu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_mu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_mu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_mu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_mu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "3dc1fa7582195107d49fac28fd59496f68da7168", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_mu-2.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_mu-2.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_mu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_mu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_mu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_mu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_mu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_mu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "3a7327dc9946a5701a3f293e6ba0d56f1305d06f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_mu-3.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_mu-3.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_mu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_mu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_mu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_mu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_mu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_mu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "1b8e19cf5c7068d17b7170b3d2b01845bb9e93f7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_tu-1.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tu-1.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_tu(vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_tu(vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_tu(vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_tu(vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_tu(vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_tu(vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_tu(vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_tu(vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_tu(vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_tu(vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_tu(vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_tu(vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_tu(vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_tu(vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_tu(vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_tu(vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_tu(vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_tu(vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_tu(vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_tu(vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_tu(vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_tu(vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_tu(vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_tu(vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_tu(vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_tu(vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_tu(vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_tu(vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_tu(vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_tu(vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_tu(vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_tu(vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_tu(vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_tu(vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_tu(vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_tu(vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_tu(vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_tu(vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_tu(vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_tu(vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_tu(vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_tu(vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_tu(vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_tu(vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_tu(vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_tu(vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_tu(vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_tu(vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_tu(vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_tu(vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_tu(vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_tu(vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_tu(vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "aa82fc3d7fd0045028a4c3d75d2217e3ed1c448b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_tu-2.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tu-2.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_tu(vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_tu(vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_tu(vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_tu(vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_tu(vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_tu(vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_tu(vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_tu(vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_tu(vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_tu(vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_tu(vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_tu(vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_tu(vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_tu(vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_tu(vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_tu(vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_tu(vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_tu(vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_tu(vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_tu(vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_tu(vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_tu(vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_tu(vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_tu(vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_tu(vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_tu(vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_tu(vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_tu(vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_tu(vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_tu(vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_tu(vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_tu(vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_tu(vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_tu(vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_tu(vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_tu(vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_tu(vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_tu(vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_tu(vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_tu(vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_tu(vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_tu(vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_tu(vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_tu(vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_tu(vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_tu(vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_tu(vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_tu(vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_tu(vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_tu(vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_tu(vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_tu(vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_tu(vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "59ed378e391103fe6e6c49430871f899a79074ea", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_tu-3.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tu-3.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_tu(vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_tu(vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_tu(vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_tu(vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_tu(vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_tu(vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_tu(vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_tu(vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_tu(vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_tu(vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_tu(vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_tu(vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_tu(vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_tu(vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_tu(vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_tu(vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_tu(vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_tu(vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_tu(vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_tu(vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_tu(vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_tu(vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_tu(vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_tu(vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_tu(vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_tu(vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_tu(vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_tu(vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_tu(vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_tu(vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_tu(vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_tu(vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_tu(vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_tu(vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_tu(vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_tu(vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_tu(vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_tu(vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_tu(vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_tu(vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_tu(vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_tu(vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_tu(vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_tu(vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_tu(vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_tu(vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_tu(vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_tu(vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_tu(vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_tu(vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_tu(vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_tu(vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_tu(vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tu(merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "0c1fb63c2015936c10aad3dbb34d7c2d33fd08a2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_tum-1.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tum-1.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_tum(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_tum(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_tum(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_tum(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_tum(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_tum(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "a6c8865d6a4e1b115d36559cf51ec11e521c17e1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_tum-2.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tum-2.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_tum(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_tum(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_tum(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_tum(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_tum(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_tum(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "02923d7f0af354909ceac93fa358d4d0f093834e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_tum-3.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tum-3.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_tum(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_tum(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_tum(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_tum(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_tum(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_tum(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "ff717307e79b7ca054d0db9837cfbeacc28ceb77", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_tumu-1.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tumu-1.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_tumu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_tumu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_tumu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_tumu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_tumu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_tumu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "c90bc7e8f6421f12cb09f02c64d97ff17f2e38db", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_tumu-2.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tumu-2.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_tumu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_tumu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_tumu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_tumu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_tumu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_tumu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "7380f415140511021ebd2d1911af4586e0244e7a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vluxei8_tumu-3.C", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22fb77702b1c373422b501246395e46aaa89124a/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvluxei8_tumu-3.C?ref=22fb77702b1c373422b501246395e46aaa89124a", "patch": "@@ -0,0 +1,346 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vluxei8_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vluxei8_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vluxei8_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vluxei8_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vluxei8_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vluxei8_tumu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vluxei8_tumu(vbool1_t mask,vint8m8_t merge,const int8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vluxei8_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vluxei8_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vluxei8_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vluxei8_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vluxei8_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vluxei8_tumu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vluxei8_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vluxei8_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vluxei8_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vluxei8_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vluxei8_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vluxei8_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vluxei8_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vluxei8_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vluxei8_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vluxei8_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vluxei8_tumu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vluxei8_tumu(vbool1_t mask,vuint8m8_t merge,const uint8_t* base,vuint8m8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vluxei8_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vluxei8_tumu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint8m4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vluxei8_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vluxei8_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vluxei8_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vluxei8_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vluxei8_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vluxei8_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vluxei8_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vluxei8_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vluxei8_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vluxei8_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint8m2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vluxei8_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint8mf8_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vluxei8_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint8mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vluxei8_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint8mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vluxei8_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint8m1_t bindex,size_t vl)\n+{\n+    return __riscv_vluxei8_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vluxei8\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}]}