{"sha": "f76cad692a62d44ed32d010200bad74f36c73092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2Y2FkNjkyYTYyZDQ0ZWQzMmQwMTAyMDBiYWQ3NGYzNmM3MzA5Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-25T14:39:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-25T18:24:12Z"}, "message": "libstdc++: Fix testsuite helper functions [PR 97936]\n\nThis fixes a race condition in the util/atomic/wait_notify_util.h header\nused by several tests, which should make the tests work properly.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/97936\n\t* testsuite/29_atomics/atomic/wait_notify/bool.cc: Re-eneable\n\ttest.\n\t* testsuite/29_atomics/atomic/wait_notify/generic.cc: Likewise.\n\t* testsuite/29_atomics/atomic/wait_notify/pointers.cc: Likewise.\n\t* testsuite/29_atomics/atomic_flag/wait_notify/1.cc: Likewise.\n\t* testsuite/29_atomics/atomic_float/wait_notify.cc: Likewise.\n\t* testsuite/29_atomics/atomic_integral/wait_notify.cc: Likewise.\n\t* testsuite/util/atomic/wait_notify_util.h: Fix missed\n\tnotifications by making the new thread wait until the parent\n\tthread is waiting on the condition variable.", "tree": {"sha": "cf0518348b70483e8109c36632127e8a2c5d7edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf0518348b70483e8109c36632127e8a2c5d7edd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76cad692a62d44ed32d010200bad74f36c73092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76cad692a62d44ed32d010200bad74f36c73092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76cad692a62d44ed32d010200bad74f36c73092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76cad692a62d44ed32d010200bad74f36c73092/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec2d6849160f92cd45f97d6c3bdd8808ab01fa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aec2d6849160f92cd45f97d6c3bdd8808ab01fa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aec2d6849160f92cd45f97d6c3bdd8808ab01fa6"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "c14a2391d68bd9ce99252238a32bbea96b0dfc2b", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/bool.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fbool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fbool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fbool.cc?ref=f76cad692a62d44ed32d010200bad74f36c73092", "patch": "@@ -2,7 +2,6 @@\n // { dg-do run { target c++2a } }\n // { dg-require-gthreads \"\" }\n // { dg-additional-options \"-pthread\" { target pthread } }\n-// { dg-skip-if \"broken\" { ! *-*-*linux } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}, {"sha": "988fe7b334f3fe273e519affc4cf330f82c79406", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/generic.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fgeneric.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fgeneric.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fgeneric.cc?ref=f76cad692a62d44ed32d010200bad74f36c73092", "patch": "@@ -2,7 +2,6 @@\n // { dg-do run { target c++2a } }\n // { dg-require-gthreads \"\" }\n // { dg-additional-options \"-pthread\" { target pthread } }\n-// { dg-skip-if \"broken\" { ! *-*-*linux } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}, {"sha": "87830236e0ee6df2e7d117948e375f6a452e438e", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/wait_notify/pointers.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fpointers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fpointers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fwait_notify%2Fpointers.cc?ref=f76cad692a62d44ed32d010200bad74f36c73092", "patch": "@@ -2,7 +2,6 @@\n // { dg-do run { target c++2a } }\n // { dg-additional-options \"-pthread\" { target pthread } }\n // { dg-require-gthreads \"\" }\n-// { dg-skip-if \"broken\" { ! *-*-*linux } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}, {"sha": "991713fbcdee6f41cfe52a03b1f821b0cf9bf3d1", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/wait_notify/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fwait_notify%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fwait_notify%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fwait_notify%2F1.cc?ref=f76cad692a62d44ed32d010200bad74f36c73092", "patch": "@@ -2,7 +2,6 @@\n // { dg-do run { target c++2a } }\n // { dg-require-gthreads \"\" }\n // { dg-additional-options \"-pthread\" { target pthread } }\n-// { dg-skip-if \"broken\" { ! *-*-*linux } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}, {"sha": "134eff39e1b153ba083a072972a6b6e24108cf54", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_float/wait_notify.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Fwait_notify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Fwait_notify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_float%2Fwait_notify.cc?ref=f76cad692a62d44ed32d010200bad74f36c73092", "patch": "@@ -3,7 +3,6 @@\n // { dg-require-gthreads \"\" }\n // { dg-additional-options \"-pthread\" { target pthread } }\n // { dg-add-options libatomic }\n-// { dg-skip-if \"broken\" { ! *-*-*linux } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}, {"sha": "c65379cba619222703e79017da5687ef4dcf7e18", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/wait_notify.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fwait_notify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fwait_notify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fwait_notify.cc?ref=f76cad692a62d44ed32d010200bad74f36c73092", "patch": "@@ -3,7 +3,6 @@\n // { dg-require-gthreads \"\" }\n // { dg-add-options libatomic }\n // { dg-additional-options \"-pthread\" { target pthread } }\n-// { dg-skip-if \"broken\" { *-*-* } }\n \n // Copyright (C) 2020 Free Software Foundation, Inc.\n //"}, {"sha": "f5fff4af4e4936f26b03fa88d3a4e77e8e6bfae9", "filename": "libstdc++-v3/testsuite/util/atomic/wait_notify_util.h", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fatomic%2Fwait_notify_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76cad692a62d44ed32d010200bad74f36c73092/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fatomic%2Fwait_notify_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fatomic%2Fwait_notify_util.h?ref=f76cad692a62d44ed32d010200bad74f36c73092", "patch": "@@ -34,16 +34,20 @@ Tp check_wait_notify(Tp val1, Tp val2)\n \n   std::mutex m;\n   std::condition_variable cv;\n+  std::unique_lock<std::mutex> l(m);\n \n   std::atomic<Tp> a(val1);\n   std::thread t([&]\n \t\t{\n+\t\t  {\n+\t\t    // This ensures we block until cv.wait(l) starts.\n+\t\t    std::lock_guard<std::mutex> ll(m);\n+\t\t  }\n \t\t  cv.notify_one();\n \t\t  a.wait(val1);\n \t\t  if (a.load() != val2)\n \t\t    a = val1;\n \t\t});\n-  std::unique_lock<std::mutex> l(m);\n   cv.wait(l);\n   std::this_thread::sleep_for(100ms);\n   a.store(val2);\n@@ -59,18 +63,22 @@ Tp check_wait_notify(Tp val1, Tp val2)\n \n   std::mutex m;\n   std::condition_variable cv;\n+  std::unique_lock<std::mutex> l(m);\n \n   std::atomic<Tp> a(val1);\n   std::thread t([&]\n \t\t{\n+\t\t  {\n+\t\t    // This ensures we block until cv.wait(l) starts.\n+\t\t    std::lock_guard<std::mutex> ll(m);\n+\t\t  }\n \t\t  cv.notify_one();\n \t\t  a.wait(val1);\n \t\t  auto v = a.load();\n \t\t  // TODO this needs to zero padding bits when we can do that\n \t\t  if (__builtin_memcmp(&v, &val2, sizeof(Tp)) != 0)\n \t\t    a = val1;\n \t\t});\n-  std::unique_lock<std::mutex> l(m);\n   cv.wait(l);\n   std::this_thread::sleep_for(100ms);\n   a.store(val2);\n@@ -87,16 +95,20 @@ Tp check_atomic_wait_notify(Tp val1, Tp val2)\n \n   std::mutex m;\n   std::condition_variable cv;\n+  std::unique_lock<std::mutex> l(m);\n \n   std::atomic<Tp> a(val1);\n   std::thread t([&]\n \t\t{\n+\t\t  {\n+\t\t    // This ensures we block until cv.wait(l) starts.\n+\t\t    std::lock_guard<std::mutex> ll(m);\n+\t\t  }\n \t\t  cv.notify_one();\n \t\t  std::atomic_wait(&a, val1);\n \t\t  if (a.load() != val2)\n \t\t    a = val1;\n \t\t});\n-  std::unique_lock<std::mutex> l(m);\n   cv.wait(l);\n   std::this_thread::sleep_for(100ms);\n   a.store(val2);\n@@ -112,18 +124,22 @@ Tp check_atomic_wait_notify(Tp val1, Tp val2)\n \n   std::mutex m;\n   std::condition_variable cv;\n+  std::unique_lock<std::mutex> l(m);\n \n   std::atomic<Tp> a(val1);\n   std::thread t([&]\n \t\t{\n+\t\t  {\n+\t\t    // This ensures we block until cv.wait(l) starts.\n+\t\t    std::lock_guard<std::mutex> ll(m);\n+\t\t  }\n \t\t  cv.notify_one();\n \t\t  std::atomic_wait(&a, val1);\n \t\t  auto v = a.load();\n \t\t  // TODO this needs to zero padding bits when we can do that\n \t\t  if (__builtin_memcmp(&v, &val2, sizeof(Tp)) != 0)\n \t\t    a = val1;\n \t\t});\n-  std::unique_lock<std::mutex> l(m);\n   cv.wait(l);\n   std::this_thread::sleep_for(100ms);\n   a.store(val2);"}]}