{"sha": "824e760597226dcc98fae03ca99ff280ae887259", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI0ZTc2MDU5NzIyNmRjYzk4ZmFlMDNjYTk5ZmYyODBhZTg4NzI1OQ==", "commit": {"author": {"name": "Alan Modra", "email": "alan@linuxcare.com.au", "date": "2001-02-01T04:51:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-02-01T04:51:24Z"}, "message": "(hppa_init_pic_save): Emit the pic offset table reg save after last_parm_insn.\n\n        * (hppa_init_pic_save): Emit the pic offset table\n        reg save after last_parm_insn.\n        * pa.c (hppa_init_pic_save): New function.\n        * pa.h (hppa_init_pic_save): Declare.\n        * pa.md (call, call_value, sibcall, sibcall_value): Use\n        the above instead of duplicated code.\n\nFrom-SVN: r39386", "tree": {"sha": "ba0d0ad99eb2470d3829081115b1ba68dfc013a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba0d0ad99eb2470d3829081115b1ba68dfc013a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/824e760597226dcc98fae03ca99ff280ae887259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824e760597226dcc98fae03ca99ff280ae887259", "html_url": "https://github.com/Rust-GCC/gccrs/commit/824e760597226dcc98fae03ca99ff280ae887259", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824e760597226dcc98fae03ca99ff280ae887259/comments", "author": null, "committer": null, "parents": [{"sha": "10d17cb7bdfbdb3fe483e5825fc8d11223d6f11d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d17cb7bdfbdb3fe483e5825fc8d11223d6f11d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d17cb7bdfbdb3fe483e5825fc8d11223d6f11d"}], "stats": {"total": 75, "additions": 27, "deletions": 48}, "files": [{"sha": "0ec6c1a37f04e85bc776754f4c419e381e9efe7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e760597226dcc98fae03ca99ff280ae887259/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e760597226dcc98fae03ca99ff280ae887259/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=824e760597226dcc98fae03ca99ff280ae887259", "patch": "@@ -1,5 +1,12 @@\n 2001-01-31  Alan Modra <alan@linuxcare.com.au>\n \n+\t* (hppa_init_pic_save): Emit the pic offset table\n+\treg save after last_parm_insn.\n+\t* pa.c (hppa_init_pic_save): New function.\n+\t* pa.h (hppa_init_pic_save): Declare.\n+\t* pa.md (call, call_value, sibcall, sibcall_value): Use\n+\tthe above instead of duplicated code.\n+\n \t* pa.c (hppa_encode_label): Correct size of alloca buffer\n \tso we don't overrun it.  Correct leading `*' case.\n \t* pa.h (STRIP_NAME_ENCODING): Simplify now that we don't"}, {"sha": "a7a0b9ec002cfeb9ab711d135057413c7a82a67f", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e760597226dcc98fae03ca99ff280ae887259/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e760597226dcc98fae03ca99ff280ae887259/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=824e760597226dcc98fae03ca99ff280ae887259", "patch": "@@ -3371,6 +3371,21 @@ hppa_expand_epilogue ()\n \t\t    - actual_fsize);\n }\n \n+/* Set up a callee saved register for the pic offset table register.  */\n+void hppa_init_pic_save ()\n+{\n+  rtx insn, picreg;\n+\n+  picreg = gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM);\n+  PIC_OFFSET_TABLE_SAVE_RTX = gen_reg_rtx (Pmode);\n+  insn = gen_rtx_SET (VOIDmode, PIC_OFFSET_TABLE_SAVE_RTX, picreg);\n+\n+  /* Emit the insn at the beginning of the function after the prologue.  */\n+  push_topmost_sequence ();\n+  emit_insn_after (insn, last_parm_insn ? last_parm_insn : get_insns ());\n+  pop_topmost_sequence ();\n+}\n+\n /* Fetch the return address for the frame COUNT steps up from\n    the current frame, after the prologue.  FRAMEADDR is the\n    frame pointer of the COUNT frame."}, {"sha": "e20cffd729f5bbb970d464329c58bd4c44be2198", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e760597226dcc98fae03ca99ff280ae887259/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e760597226dcc98fae03ca99ff280ae887259/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=824e760597226dcc98fae03ca99ff280ae887259", "patch": "@@ -503,6 +503,7 @@ extern int target_flags;\n /* Register into which we save the PIC_OFFSET_TABLE_REGNUM so that it\n    can be restored across function calls.  */\n #define PIC_OFFSET_TABLE_SAVE_RTX (cfun->machine->pic_offset_table_save_rtx)\n+extern void hppa_init_pic_save PARAMS ((void));\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n "}, {"sha": "ac70bfdc75a12831c0c8664bd25917f3dcb481ce", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 4, "deletions": 48, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824e760597226dcc98fae03ca99ff280ae887259/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824e760597226dcc98fae03ca99ff280ae887259/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=824e760597226dcc98fae03ca99ff280ae887259", "patch": "@@ -5738,18 +5738,7 @@\n \t\t\t\t  GEN_INT (64)));\n \n   if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n-    {\n-      rtx insn;\n-\n-      PIC_OFFSET_TABLE_SAVE_RTX = gen_reg_rtx (Pmode);\n-      insn = gen_rtx_SET (VOIDmode, PIC_OFFSET_TABLE_SAVE_RTX,\n-\t\t\t  gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM));\n-\n-      /* Emit the insn at the beginning of the function after the prologue.  */\n-      push_topmost_sequence ();\n-      emit_insn_after (insn, get_insns ());\n-      pop_topmost_sequence ();\n-    }\n+    hppa_init_pic_save ();\n \n   /* Use two different patterns for calls to explicitly named functions\n      and calls through function pointers.  This is necessary as these two\n@@ -5922,18 +5911,7 @@\n \t\t\t\t  GEN_INT (64)));\n \n   if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n-    {\n-      rtx insn;\n-\n-      PIC_OFFSET_TABLE_SAVE_RTX = gen_reg_rtx (Pmode);\n-      insn = gen_rtx_SET (VOIDmode, PIC_OFFSET_TABLE_SAVE_RTX,\n-\t\t\t  gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM));\n-\n-      /* Emit the insn at the beginning of the function after the prologue.  */\n-      push_topmost_sequence ();\n-      emit_insn_after (insn, get_insns ());\n-      pop_topmost_sequence ();\n-    }\n+    hppa_init_pic_save ();\n \n   /* Use two different patterns for calls to explicitly named functions\n      and calls through function pointers.  This is necessary as these two\n@@ -6132,18 +6110,7 @@\n   op = XEXP (operands[0], 0);\n \n   if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n-    {\n-      rtx insn;\n-\n-      PIC_OFFSET_TABLE_SAVE_RTX = gen_reg_rtx (Pmode);\n-      insn = gen_rtx_SET (VOIDmode, PIC_OFFSET_TABLE_SAVE_RTX,\n-\t\t\t  gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM));\n-\n-      /* Emit the insn at the beginning of the function after the prologue.  */\n-      push_topmost_sequence ();\n-      emit_insn_after (insn, get_insns ());\n-      pop_topmost_sequence ();\n-    }\n+    hppa_init_pic_save ();\n \n   /* We do not allow indirect sibling calls.  */\n   call_insn = emit_call_insn (gen_sibcall_internal_symref (op, operands[1]));\n@@ -6201,18 +6168,7 @@\n   op = XEXP (operands[1], 0);\n \n   if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n-    {\n-      rtx insn;\n-\n-      PIC_OFFSET_TABLE_SAVE_RTX = gen_reg_rtx (Pmode);\n-      insn = gen_rtx_SET (VOIDmode, PIC_OFFSET_TABLE_SAVE_RTX,\n-\t\t\t  gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM));\n-\n-      /* Emit the insn at the beginning of the function after the prologue.  */\n-      push_topmost_sequence ();\n-      emit_insn_after (insn, get_insns ());\n-      pop_topmost_sequence ();\n-    }\n+    hppa_init_pic_save ();\n \n   /* We do not allow indirect sibling calls.  */\n   call_insn = emit_call_insn (gen_sibcall_value_internal_symref (operands[0],"}]}