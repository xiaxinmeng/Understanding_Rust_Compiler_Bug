{"sha": "c1120b0cd2fbaa17e69f8b37e5346c14b6b75449", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExMjBiMGNkMmZiYWExN2U2OWY4YjM3ZTUzNDZjMTRiNmI3NTQ0OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-03-28T16:14:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-28T16:14:02Z"}, "message": "Core 898\n\n\tCore 898\n\t* parser.c (cp_parser_compound_statement): Add function_body parm.\n\tComplain about non-body compound-stmt in constexpr fn.\n\t(cp_parser_primary_expression, cp_parser_statement): Adjust.\n\t(cp_parser_implicitly_scoped_statement): Adjust.\n\t(cp_parser_function_body, cp_parser_try_block): Adjust.\n\t(cp_parser_handler, cp_parser_objc_synchronized_statement): Adjust.\n\t(cp_parser_objc_try_catch_finally_statement): Adjust.\n\nFrom-SVN: r171612", "tree": {"sha": "10ce71ca1b9559747677c86cd6f65d0a95ec923b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10ce71ca1b9559747677c86cd6f65d0a95ec923b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62add5e145ffe3f87f93bb40e0d9ccbf20044420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62add5e145ffe3f87f93bb40e0d9ccbf20044420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62add5e145ffe3f87f93bb40e0d9ccbf20044420"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "062468b38fe318047180cf606273c45ca1d9df0a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c1120b0cd2fbaa17e69f8b37e5346c14b6b75449", "patch": "@@ -1,5 +1,14 @@\n 2011-03-28  Jason Merrill  <jason@redhat.com>\n \n+\tCore 898\n+\t* parser.c (cp_parser_compound_statement): Add function_body parm.\n+\tComplain about non-body compound-stmt in constexpr fn.\n+\t(cp_parser_primary_expression, cp_parser_statement): Adjust.\n+\t(cp_parser_implicitly_scoped_statement): Adjust.\n+\t(cp_parser_function_body, cp_parser_try_block): Adjust.\n+\t(cp_parser_handler, cp_parser_objc_synchronized_statement): Adjust.\n+\t(cp_parser_objc_try_catch_finally_statement): Adjust.\n+\n \tCore 898\n \t* semantics.c (constexpr_fn_retval): New.  Allow using-declaration\n \tand using-definition."}, {"sha": "3a60d0f81ea5d63143e66ed76aec6e128bfb47df", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c1120b0cd2fbaa17e69f8b37e5346c14b6b75449", "patch": "@@ -1590,7 +1590,7 @@ static void cp_parser_label_for_labeled_statement\n static tree cp_parser_expression_statement\n   (cp_parser *, tree);\n static tree cp_parser_compound_statement\n-  (cp_parser *, tree, bool);\n+  (cp_parser *, tree, bool, bool);\n static void cp_parser_statement_seq_opt\n   (cp_parser *, tree);\n static tree cp_parser_selection_statement\n@@ -3417,7 +3417,7 @@ cp_parser_primary_expression (cp_parser *parser,\n \t\t/* Start the statement-expression.  */\n \t\texpr = begin_stmt_expr ();\n \t\t/* Parse the compound-statement.  */\n-\t\tcp_parser_compound_statement (parser, expr, false);\n+\t\tcp_parser_compound_statement (parser, expr, false, false);\n \t\t/* Finish up.  */\n \t\texpr = finish_stmt_expr (expr, false);\n \t      }\n@@ -7873,7 +7873,7 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n     }\n   /* Anything that starts with a `{' must be a compound-statement.  */\n   else if (token->type == CPP_OPEN_BRACE)\n-    statement = cp_parser_compound_statement (parser, NULL, false);\n+    statement = cp_parser_compound_statement (parser, NULL, false, false);\n   /* CPP_PRAGMA is a #pragma inside a function body, which constitutes\n      a statement all its own.  */\n   else if (token->type == CPP_PRAGMA)\n@@ -8105,13 +8105,17 @@ cp_parser_expression_statement (cp_parser* parser, tree in_statement_expr)\n \n static tree\n cp_parser_compound_statement (cp_parser *parser, tree in_statement_expr,\n-\t\t\t      bool in_try)\n+\t\t\t      bool in_try, bool function_body)\n {\n   tree compound_stmt;\n \n   /* Consume the `{'.  */\n   if (!cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE))\n     return error_mark_node;\n+  if (DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n+      && !function_body)\n+    pedwarn (input_location, OPT_pedantic,\n+\t     \"compound-statement in constexpr function\");\n   /* Begin the compound-statement.  */\n   compound_stmt = begin_compound_stmt (in_try ? BCS_TRY_BLOCK : 0);\n   /* If the next keyword is `__label__' we have a label declaration.  */\n@@ -9022,7 +9026,7 @@ cp_parser_implicitly_scoped_statement (cp_parser* parser, bool *if_p)\n     }\n   /* if a compound is opened, we simply parse the statement directly.  */\n   else if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n-    statement = cp_parser_compound_statement (parser, NULL, false);\n+    statement = cp_parser_compound_statement (parser, NULL, false, false);\n   /* If the token is not a `{', then we must take special action.  */\n   else\n     {\n@@ -16157,7 +16161,7 @@ cp_parser_default_argument (cp_parser *parser, bool template_parm_p)\n static void\n cp_parser_function_body (cp_parser *parser)\n {\n-  cp_parser_compound_statement (parser, NULL, false);\n+  cp_parser_compound_statement (parser, NULL, false, true);\n }\n \n /* Parse a ctor-initializer-opt followed by a function-body.  Return\n@@ -18255,7 +18259,7 @@ cp_parser_try_block (cp_parser* parser)\n \n   cp_parser_require_keyword (parser, RID_TRY, RT_TRY);\n   try_block = begin_try_block ();\n-  cp_parser_compound_statement (parser, NULL, true);\n+  cp_parser_compound_statement (parser, NULL, true, false);\n   finish_try_block (try_block);\n   cp_parser_handler_seq (parser);\n   finish_handler_sequence (try_block);\n@@ -18332,7 +18336,7 @@ cp_parser_handler (cp_parser* parser)\n   declaration = cp_parser_exception_declaration (parser);\n   finish_handler_parms (declaration, handler);\n   cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n-  cp_parser_compound_statement (parser, NULL, false);\n+  cp_parser_compound_statement (parser, NULL, false, false);\n   finish_handler (handler);\n }\n \n@@ -22533,7 +22537,7 @@ cp_parser_objc_try_catch_finally_statement (cp_parser *parser)\n   /* NB: The @try block needs to be wrapped in its own STATEMENT_LIST\n      node, lest it get absorbed into the surrounding block.  */\n   stmt = push_stmt_list ();\n-  cp_parser_compound_statement (parser, NULL, false);\n+  cp_parser_compound_statement (parser, NULL, false, false);\n   objc_begin_try_stmt (location, pop_stmt_list (stmt));\n \n   while (cp_lexer_next_token_is_keyword (parser->lexer, RID_AT_CATCH))\n@@ -22589,7 +22593,7 @@ cp_parser_objc_try_catch_finally_statement (cp_parser *parser)\n \t     forget about the closing parenthesis and keep going.  */\n \t}\n       objc_begin_catch_clause (parameter_declaration);\n-      cp_parser_compound_statement (parser, NULL, false);\n+      cp_parser_compound_statement (parser, NULL, false, false);\n       objc_finish_catch_clause ();\n     }\n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_AT_FINALLY))\n@@ -22599,7 +22603,7 @@ cp_parser_objc_try_catch_finally_statement (cp_parser *parser)\n       /* NB: The @finally block needs to be wrapped in its own STATEMENT_LIST\n \t node, lest it get absorbed into the surrounding block.  */\n       stmt = push_stmt_list ();\n-      cp_parser_compound_statement (parser, NULL, false);\n+      cp_parser_compound_statement (parser, NULL, false, false);\n       objc_build_finally_clause (location, pop_stmt_list (stmt));\n     }\n \n@@ -22630,7 +22634,7 @@ cp_parser_objc_synchronized_statement (cp_parser *parser)\n   /* NB: The @synchronized block needs to be wrapped in its own STATEMENT_LIST\n      node, lest it get absorbed into the surrounding block.  */\n   stmt = push_stmt_list ();\n-  cp_parser_compound_statement (parser, NULL, false);\n+  cp_parser_compound_statement (parser, NULL, false, false);\n \n   return objc_build_synchronized (location, lock, pop_stmt_list (stmt));\n }"}, {"sha": "248bfccb1dc3c70a21bf7b677b60de23607de83f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c1120b0cd2fbaa17e69f8b37e5346c14b6b75449", "patch": "@@ -1,5 +1,7 @@\n 2011-03-28  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/constexpr-compound.C: New.\n+\n \t* g++.dg/cpp0x/constexpr-using.C: New.\n \n \t* g++.dg/cpp0x/constexpr-noexcept.C: New."}, {"sha": "81fcc54b3e68b56b60cd9d70f6ad89e5fa0b53ce", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-compound.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-compound.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1120b0cd2fbaa17e69f8b37e5346c14b6b75449/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-compound.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-compound.C?ref=c1120b0cd2fbaa17e69f8b37e5346c14b6b75449", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=c++0x -pedantic-errors\" }\n+\n+constexpr int f()\n+{\n+  {\t\t\t\t// { dg-error \"\" }\n+    return 1;\n+  }\n+  { }\t\t\t\t// { dg-error \"\" }\n+}"}]}