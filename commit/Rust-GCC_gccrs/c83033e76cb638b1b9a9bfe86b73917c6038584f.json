{"sha": "c83033e76cb638b1b9a9bfe86b73917c6038584f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzMDMzZTc2Y2I2MzhiMWI5YTliZmU4NmI3MzkxN2M2MDM4NTg0Zg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2005-10-01T14:01:10Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-10-01T14:01:10Z"}, "message": "tree-vrp.c (value_inside_range, [...]): Add FIXME note regarding quirky semantics.\n\n\n\t* tree-vrp.c (value_inside_range, range_includes_zero_p): Add\n\tFIXME note regarding quirky semantics.\n\nFrom-SVN: r104860", "tree": {"sha": "56d54960a5f3cb32009d25c70337006d490d27a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56d54960a5f3cb32009d25c70337006d490d27a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c83033e76cb638b1b9a9bfe86b73917c6038584f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83033e76cb638b1b9a9bfe86b73917c6038584f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83033e76cb638b1b9a9bfe86b73917c6038584f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83033e76cb638b1b9a9bfe86b73917c6038584f/comments", "author": null, "committer": null, "parents": [{"sha": "e82d7e604b1f422979641eae89fcc9a04280dd58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82d7e604b1f422979641eae89fcc9a04280dd58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e82d7e604b1f422979641eae89fcc9a04280dd58"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "b644aaa85eff2c786bcaeaa683888ee74d811736", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83033e76cb638b1b9a9bfe86b73917c6038584f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83033e76cb638b1b9a9bfe86b73917c6038584f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c83033e76cb638b1b9a9bfe86b73917c6038584f", "patch": "@@ -1,3 +1,8 @@\n+2005-10-01  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-vrp.c (value_inside_range, range_includes_zero_p): Add\n+\tFIXME note regarding quirky semantics.\n+\n 2005-10-01  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR 24141"}, {"sha": "de7a931cb1562b71372b3203e4fed6539a195998", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83033e76cb638b1b9a9bfe86b73917c6038584f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83033e76cb638b1b9a9bfe86b73917c6038584f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c83033e76cb638b1b9a9bfe86b73917c6038584f", "patch": "@@ -564,7 +564,23 @@ compare_values (tree val1, tree val2)\n \n /* Return 1 if VAL is inside value range VR (VR->MIN <= VAL <= VR->MAX),\n           0 if VAL is not inside VR,\n-\t -2 if we cannot tell either way.  */\n+\t -2 if we cannot tell either way.\n+\n+   FIXME, the current semantics of this functions are a bit quirky\n+\t  when taken in the context of VRP.  In here we do not care\n+\t  about VR's type.  If VR is the anti-range ~[3, 5] the call\n+\t  value_inside_range (4, VR) will return 1.\n+\n+\t  This is counter-intuitive in a strict sense, but the callers\n+\t  currently expect this.  They are calling the function\n+\t  merely to determine whether VR->MIN <= VAL <= VR->MAX.  The\n+\t  callers are applying the VR_RANGE/VR_ANTI_RANGE semantics\n+\t  themselves.\n+\n+\t  This also applies to value_ranges_intersect_p and\n+\t  range_includes_zero_p.  The semantics of VR_RANGE and\n+\t  VR_ANTI_RANGE should be encoded here, but that also means\n+\t  adapting the users of these functions to the new semantics.  */\n \n static inline int\n value_inside_range (tree val, value_range_t *vr)\n@@ -596,7 +612,11 @@ value_ranges_intersect_p (value_range_t *vr0, value_range_t *vr1)\n }\n \n \n-/* Return true if VR includes the value zero, false otherwise.  */\n+/* Return true if VR includes the value zero, false otherwise.  FIXME,\n+   currently this will return false for an anti-range like ~[-4, 3].\n+   This will be wrong when the semantics of value_inside_range are\n+   modified (currently the users of this function expect these\n+   semantics).  */\n \n static inline bool\n range_includes_zero_p (value_range_t *vr)"}]}