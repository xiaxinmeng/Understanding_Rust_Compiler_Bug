{"sha": "3fe98897323ab6672dcfb765272fbdb2bdab1015", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlOTg4OTczMjNhYjY2NzJkY2ZiNzY1MjcyZmJkYjJiZGFiMTAxNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-29T21:19:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-29T21:19:22Z"}, "message": "pt.c (tsubst_decl): In unevaluated operand, don't tsubst DECL_INITIAL unless our type use auto.\n\n\t* pt.c (tsubst_decl) [VAR_DECL]: In unevaluated operand,\n\tdon't tsubst DECL_INITIAL unless our type use auto.\n\nFrom-SVN: r175670", "tree": {"sha": "de9b852c9bb9dd444b2a9126987b7f662c2cf266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de9b852c9bb9dd444b2a9126987b7f662c2cf266"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fe98897323ab6672dcfb765272fbdb2bdab1015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe98897323ab6672dcfb765272fbdb2bdab1015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe98897323ab6672dcfb765272fbdb2bdab1015", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe98897323ab6672dcfb765272fbdb2bdab1015/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "f06c257796f5471e90d68228bb1c5bada825259c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe98897323ab6672dcfb765272fbdb2bdab1015/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe98897323ab6672dcfb765272fbdb2bdab1015/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3fe98897323ab6672dcfb765272fbdb2bdab1015", "patch": "@@ -1,5 +1,8 @@\n 2011-06-29  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (tsubst_decl) [VAR_DECL]: In unevaluated operand,\n+\tdon't tsubst DECL_INITIAL unless our type use auto.\n+\n \tPR c++/49520\n \t* semantics.c (constexpr_fn_retval): Handle CLEANUP_POINT_EXPR here.\n \t(massage_constexpr_body): Not here."}, {"sha": "dc6cd5086d53e4ec39c164e7280970fe3315ce31", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe98897323ab6672dcfb765272fbdb2bdab1015/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe98897323ab6672dcfb765272fbdb2bdab1015/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3fe98897323ab6672dcfb765272fbdb2bdab1015", "patch": "@@ -10138,12 +10138,11 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t       scope, such as for a lambda return type.  Don't add it to\n \t       local_specializations, do perform auto deduction.  */\n \t    tree auto_node = type_uses_auto (type);\n-\t    tree init\n-\t      = tsubst_expr (DECL_INITIAL (t), args, complain, in_decl,\n-\t\t\t     /*constant_expression_p=*/false);\n-\n-\t    if (auto_node && init)\n+\t    if (auto_node)\n \t      {\n+\t\ttree init\n+\t\t  = tsubst_expr (DECL_INITIAL (t), args, complain, in_decl,\n+\t\t\t\t /*constant_expression_p=*/false);\n \t\tinit = resolve_nondeduced_context (init);\n \t\tTREE_TYPE (r) = type\n \t\t  = do_auto_deduction (type, init, auto_node);"}]}