{"sha": "317c0092a691df6b3f3c48f37a1b3679826e13e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE3YzAwOTJhNjkxZGY2YjNmM2M0OGYzN2ExYjM2Nzk4MjZlMTNlNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-11-24T20:43:44Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-11-24T20:43:44Z"}, "message": "Fix indentation on line 3063.\n\nFrom-SVN: r91194", "tree": {"sha": "d7c65105062a24ac4a402f412c8da09ff8b050c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7c65105062a24ac4a402f412c8da09ff8b050c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/317c0092a691df6b3f3c48f37a1b3679826e13e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317c0092a691df6b3f3c48f37a1b3679826e13e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/317c0092a691df6b3f3c48f37a1b3679826e13e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/317c0092a691df6b3f3c48f37a1b3679826e13e5/comments", "author": null, "committer": null, "parents": [{"sha": "d4d3aad9fd519111ccd669816944b975d48f0735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d3aad9fd519111ccd669816944b975d48f0735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d3aad9fd519111ccd669816944b975d48f0735"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "c6256fa7ac7a2681c7d25c4f20ae6eb7eaca16e5", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/317c0092a691df6b3f3c48f37a1b3679826e13e5/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/317c0092a691df6b3f3c48f37a1b3679826e13e5/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=317c0092a691df6b3f3c48f37a1b3679826e13e5", "patch": "@@ -3061,7 +3061,7 @@ gimplify_addr_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t guarantees that the ADDR_EXPR and its operand will remain of the\n \t same type.  */\n       if (tree_ssa_useless_type_conversion (TREE_OPERAND (op0, 0)))\n-          op0 = TREE_OPERAND (op0, 0);\n+\top0 = TREE_OPERAND (op0, 0);\n \n       *expr_p = fold_convert (TREE_TYPE (expr),\n \t\t\t      build_fold_addr_expr (TREE_OPERAND (op0, 0)));"}]}