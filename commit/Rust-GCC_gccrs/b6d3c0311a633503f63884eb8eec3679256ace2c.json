{"sha": "b6d3c0311a633503f63884eb8eec3679256ace2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkM2MwMzExYTYzMzUwM2Y2Mzg4NGViOGVlYzM2NzkyNTZhY2UyYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-10-21T18:00:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-10-21T18:00:30Z"}, "message": "re PR middle-end/67966 (ICE in convert_move, at expr.c:282)\n\n\n\tPR middle-end/67966\n\t* tree.c (verify_type): Verify that TYPE_MODE match\n \tbetween TYPE_CANONICAL and type.\n \t* expr.c (store_expr_with_bounds): Revert my previous change.\n \t* expmed.c (store_bit_field_1): Revert prevoius change.\n \t* gimple-expr.c (useless_type_conversion_p): Require TYPE_MODE\n \tto match for all types.\n\nFrom-SVN: r229132", "tree": {"sha": "2bfe7b1e099bea665cddc4e5183b26a96c308ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bfe7b1e099bea665cddc4e5183b26a96c308ecc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d3c0311a633503f63884eb8eec3679256ace2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d3c0311a633503f63884eb8eec3679256ace2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d3c0311a633503f63884eb8eec3679256ace2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d3c0311a633503f63884eb8eec3679256ace2c/comments", "author": null, "committer": null, "parents": [{"sha": "e9122ef60858058cb474b3d3bb51507b7fd1d14c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9122ef60858058cb474b3d3bb51507b7fd1d14c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9122ef60858058cb474b3d3bb51507b7fd1d14c"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "266310252a54a9af000d99576232b9d856e7c99f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3c0311a633503f63884eb8eec3679256ace2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3c0311a633503f63884eb8eec3679256ace2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6d3c0311a633503f63884eb8eec3679256ace2c", "patch": "@@ -1,3 +1,13 @@\n+2015-10-11  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR middle-end/67966\n+\t* tree.c (verify_type): Verify that TYPE_MODE match\n+ \tbetween TYPE_CANONICAL and type.\n+ \t* expr.c (store_expr_with_bounds): Revert my previous change.\n+ \t* expmed.c (store_bit_field_1): Revert prevoius change.\n+ \t* gimple-expr.c (useless_type_conversion_p): Require TYPE_MODE\n+ \tto match for all types.\n+\n 2015-10-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* omp-low.c (check_omp_nesting_restrictions): Check OpenACC loop"}, {"sha": "93cf50822aeffd4983384929054f496a6d53d12d", "filename": "gcc/expmed.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3c0311a633503f63884eb8eec3679256ace2c/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3c0311a633503f63884eb8eec3679256ace2c/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b6d3c0311a633503f63884eb8eec3679256ace2c", "patch": "@@ -757,14 +757,6 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       }\n   }\n \n-  /* We allow move between structures of same size but different mode.\n-     If source is in memory and the mode differs, simply change the memory.  */\n-  if (GET_MODE (value) == BLKmode && GET_MODE (op0) != BLKmode)\n-    {\n-      gcc_assert (MEM_P (value));\n-      value = adjust_address_nv (value, GET_MODE (op0), 0);\n-    }\n-\n   /* Storing an lsb-aligned field in a register\n      can be done with a movstrict instruction.  */\n "}, {"sha": "adde00d078abca0611528e3be2da67ab19bc6f36", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3c0311a633503f63884eb8eec3679256ace2c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3c0311a633503f63884eb8eec3679256ace2c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b6d3c0311a633503f63884eb8eec3679256ace2c", "patch": "@@ -5425,14 +5425,6 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n     temp = convert_modes (GET_MODE (target), TYPE_MODE (TREE_TYPE (exp)),\n \t\t\t  temp, TYPE_UNSIGNED (TREE_TYPE (exp)));\n \n-  /* We allow move between structures of same size but different mode.\n-     If source is in memory and the mode differs, simply change the memory.  */\n-  if (GET_MODE (temp) == BLKmode && GET_MODE (target) != BLKmode)\n-    {\n-      gcc_assert (MEM_P (temp));\n-      temp = adjust_address_nv (temp, GET_MODE (target), 0);\n-    }\n-\n   /* If value was not generated in the target, store it there.\n      Convert the value to TARGET's type first if necessary and emit the\n      pending incrementations that have been queued when expanding EXP."}, {"sha": "c6dd2ebb0e93d4d63d845e6708edf8a260fa2863", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3c0311a633503f63884eb8eec3679256ace2c/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3c0311a633503f63884eb8eec3679256ace2c/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=b6d3c0311a633503f63884eb8eec3679256ace2c", "patch": "@@ -87,10 +87,8 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n   if (inner_type == outer_type)\n     return true;\n \n-  /* Changes in machine mode are never useless conversions unless we\n-     deal with aggregate types in which case we defer to later checks.  */\n-  if (TYPE_MODE (inner_type) != TYPE_MODE (outer_type)\n-      && !AGGREGATE_TYPE_P (inner_type))\n+  /* Changes in machine mode are never useless conversions unless.  */\n+  if (TYPE_MODE (inner_type) != TYPE_MODE (outer_type))\n     return false;\n \n   /* If both the inner and outer types are integral types, then the\n@@ -270,10 +268,9 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n      use the types in move operations.  */\n   else if (AGGREGATE_TYPE_P (inner_type)\n \t   && TREE_CODE (inner_type) == TREE_CODE (outer_type))\n-    return (!TYPE_SIZE (outer_type)\n-\t    || (TYPE_SIZE (inner_type)\n-\t\t&& operand_equal_p (TYPE_SIZE (inner_type),\n-\t\t\t\t    TYPE_SIZE (outer_type), 0)));\n+    return (TYPE_MODE (outer_type) != BLKmode\n+\t    || operand_equal_p (TYPE_SIZE (inner_type),\n+\t\t\t        TYPE_SIZE (outer_type), 0));\n \n   else if (TREE_CODE (inner_type) == OFFSET_TYPE\n \t   && TREE_CODE (outer_type) == OFFSET_TYPE)"}, {"sha": "adc874847ff9fdde1e4c92d6580f456464324daf", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d3c0311a633503f63884eb8eec3679256ace2c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d3c0311a633503f63884eb8eec3679256ace2c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b6d3c0311a633503f63884eb8eec3679256ace2c", "patch": "@@ -13408,6 +13408,14 @@ verify_type (const_tree t)\n       error_found = true;\n     }\n \n+  if (COMPLETE_TYPE_P (t) && TYPE_CANONICAL (t)\n+      && TYPE_MODE (t) != TYPE_MODE (TYPE_CANONICAL (t)))\n+    {\n+      error (\"TYPE_MODE of TYPE_CANONICAL is not compatible\");\n+      debug_tree (ct);\n+      error_found = true;\n+    }\n+\n \n   /* Check various uses of TYPE_MINVAL.  */\n   if (RECORD_OR_UNION_TYPE_P (t))"}]}