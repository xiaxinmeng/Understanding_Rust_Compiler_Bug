{"sha": "97705b4459b645770ffb6c01ff6177de6774ef3c", "node_id": "C_kwDOANBUbNoAKDk3NzA1YjQ0NTliNjQ1NzcwZmZiNmMwMWZmNjE3N2RlNjc3NGVmM2M", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-23T15:01:16Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-13T13:00:03Z"}, "message": "gccrs: Add general compilation test cases\n\nThis suite of tests has two sections: compile/*.rs and compile/torture/*.rs.\nThe first section is comprised entirely of dg-compile tests, containing a\nmixture of dg-warning and dg-error annotations and some with no annotations,\nensuring the creation of resulting asm output. The second section is the same,\nbut has tests which are ran with the full torture options, for coverage of test\ncases that may have an issue with a specific optimization level.\n\n\tgcc/testsuite/\n\t* rust/compile/abi-options1.rs: New.\n\t* rust/compile/array3.rs: New.\n\t* rust/compile/array_empty_list.rs: New.\n\t* rust/compile/arrays1.rs: New.\n\t* rust/compile/arrays2.rs: New.\n\t* rust/compile/attr-mismatch-crate-name.rs: New.\n\t* rust/compile/attr_cold.rs: New.\n\t* rust/compile/attr_deprecated.rs: New.\n\t* rust/compile/attr_deprecated_2.rs: New.\n\t* rust/compile/bad-crate-name.rs: New.\n\t* rust/compile/bad=file-name.rs: New.\n\t* rust/compile/bad_as_bool_char.rs: New.\n\t* rust/compile/bad_file_name.txt.rs: New.\n\t* rust/compile/bad_inner_doc.rs: New.\n\t* rust/compile/bad_pub_enumitems.rs: New.\n\t* rust/compile/bad_stmt_enums.rs: New.\n\t* rust/compile/bad_toplevel_enums.rs: New.\n\t* rust/compile/bad_tuple_index.rs: New.\n\t* rust/compile/bad_type1.rs: New.\n\t* rust/compile/bad_type2.rs: New.\n\t* rust/compile/break1.rs: New.\n\t* rust/compile/break2.rs: New.\n\t* rust/compile/builtin_macro_compile_error.rs: New.\n\t* rust/compile/builtin_macro_concat.rs: New.\n\t* rust/compile/builtin_macro_env.rs: New.\n\t* rust/compile/builtin_macro_include_bytes.rs: New.\n\t* rust/compile/builtin_macro_include_str.rs: New.\n\t* rust/compile/builtin_macro_not_found.rs: New.\n\t* rust/compile/bytecharstring.rs: New.\n\t* rust/compile/canonical_paths1.rs: New.\n\t* rust/compile/cast1.rs: New.\n\t* rust/compile/cfg1.rs: New.\n\t* rust/compile/cfg2.rs: New.\n\t* rust/compile/cfg3.rs: New.\n\t* rust/compile/cfg4.rs: New.\n\t* rust/compile/cfg5.rs: New.\n\t* rust/compile/compile.exp: New.\n\t* rust/compile/complex-path1.rs: New.\n\t* rust/compile/const-issue1440.rs: New.\n\t* rust/compile/const1.rs: New.\n\t* rust/compile/const2.rs: New.\n\t* rust/compile/const3.rs: New.\n\t* rust/compile/const_generics_1.rs: New.\n\t* rust/compile/const_generics_2.rs: New.\n\t* rust/compile/const_generics_3.rs: New.\n\t* rust/compile/const_generics_4.rs: New.\n\t* rust/compile/const_generics_5.rs: New.\n\t* rust/compile/const_generics_6.rs: New.\n\t* rust/compile/continue1.rs: New.\n\t* rust/compile/deadcode_err1.rs: New.\n\t* rust/compile/deadcode_err2.rs: New.\n\t* rust/compile/debug-diagnostics-default.rs: New.\n\t* rust/compile/debug-diagnostics-off.rs: New.\n\t* rust/compile/debug-diagnostics-on.rs: New.\n\t* rust/compile/doc_isolated_cr_block_comment.rs: New.\n\t* rust/compile/doc_isolated_cr_inner_block_comment.rs: New.\n\t* rust/compile/doc_isolated_cr_inner_line_comment.rs: New.\n\t* rust/compile/doc_isolated_cr_line_comment.rs: New.\n\t* rust/compile/dup_fields.rs: New.\n\t* rust/compile/empty_comment_before_match.rs: New.\n\t* rust/compile/expected_type_args2.rs: New.\n\t* rust/compile/expected_type_args3.rs: New.\n\t* rust/compile/func1.rs: New.\n\t* rust/compile/func2.rs: New.\n\t* rust/compile/func3.rs: New.\n\t* rust/compile/func4.rs: New.\n\t* rust/compile/func5.rs: New.\n\t* rust/compile/generic-default1.rs: New.\n\t* rust/compile/generics1.rs: New.\n\t* rust/compile/generics10.rs: New.\n\t* rust/compile/generics11.rs: New.\n\t* rust/compile/generics12.rs: New.\n\t* rust/compile/generics13.rs: New.\n\t* rust/compile/generics2.rs: New.\n\t* rust/compile/generics3.rs: New.\n\t* rust/compile/generics4.rs: New.\n\t* rust/compile/generics5.rs: New.\n\t* rust/compile/generics6.rs: New.\n\t* rust/compile/generics7.rs: New.\n\t* rust/compile/generics8.rs: New.\n\t* rust/compile/generics9.rs: New.\n\t* rust/compile/implicit_returns_err1.rs: New.\n\t* rust/compile/implicit_returns_err2.rs: New.\n\t* rust/compile/implicit_returns_err3.rs: New.\n\t* rust/compile/implicit_returns_err4.rs: New.\n\t* rust/compile/infer-crate-name.rs: New.\n\t* rust/compile/inline_1.rs: New.\n\t* rust/compile/inline_2.rs: New.\n\t* rust/compile/issue-1005.rs: New.\n\t* rust/compile/issue-1019.rs: New.\n\t* rust/compile/issue-1023.rs: New.\n\t* rust/compile/issue-1031.rs: New.\n\t* rust/compile/issue-1034.rs: New.\n\t* rust/compile/issue-1089.rs: New.\n\t* rust/compile/issue-1128.rs: New.\n\t* rust/compile/issue-1129-1.rs: New.\n\t* rust/compile/issue-1129-2.rs: New.\n\t* rust/compile/issue-1130.rs: New.\n\t* rust/compile/issue-1131.rs: New.\n\t* rust/compile/issue-1152.rs: New.\n\t* rust/compile/issue-1165.rs: New.\n\t* rust/compile/issue-1173.rs: New.\n\t* rust/compile/issue-1226.rs: New.\n\t* rust/compile/issue-1234.rs: New.\n\t* rust/compile/issue-1235.rs: New.\n\t* rust/compile/issue-1237.rs: New.\n\t* rust/compile/issue-1251.rs: New.\n\t* rust/compile/issue-1271.rs: New.\n\t* rust/compile/issue-1289.rs: New.\n\t* rust/compile/issue-1323-1.rs: New.\n\t* rust/compile/issue-1323-2.rs: New.\n\t* rust/compile/issue-1383.rs: New.\n\t* rust/compile/issue-1393.rs: New.\n\t* rust/compile/issue-1447.rs: New.\n\t* rust/compile/issue-407-2.rs: New.\n\t* rust/compile/issue-407.rs: New.\n\t* rust/compile/issue-557.rs: New.\n\t* rust/compile/issue-635-1.rs: New.\n\t* rust/compile/issue-635-2.rs: New.\n\t* rust/compile/lookup_err1.rs: New.\n\t* rust/compile/macro-issue1053-2.rs: New.\n\t* rust/compile/macro-issue1053.rs: New.\n\t* rust/compile/macro-issue1224.rs: New.\n\t* rust/compile/macro-issue1233.rs: New.\n\t* rust/compile/macro-issue1395-2.rs: New.\n\t* rust/compile/macro-issue1395.rs: New.\n\t* rust/compile/macro-issue1400-2.rs: New.\n\t* rust/compile/macro-issue1400.rs: New.\n\t* rust/compile/macro1.rs: New.\n\t* rust/compile/macro10.rs: New.\n\t* rust/compile/macro11.rs: New.\n\t* rust/compile/macro12.rs: New.\n\t* rust/compile/macro13.rs: New.\n\t* rust/compile/macro14.rs: New.\n\t* rust/compile/macro15.rs: New.\n\t* rust/compile/macro16.rs: New.\n\t* rust/compile/macro17.rs: New.\n\t* rust/compile/macro18.rs: New.\n\t* rust/compile/macro19.rs: New.\n\t* rust/compile/macro2.rs: New.\n\t* rust/compile/macro20.rs: New.\n\t* rust/compile/macro21.rs: New.\n\t* rust/compile/macro22.rs: New.\n\t* rust/compile/macro23.rs: New.\n\t* rust/compile/macro25.rs: New.\n\t* rust/compile/macro26.rs: New.\n\t* rust/compile/macro27.rs: New.\n\t* rust/compile/macro28.rs: New.\n\t* rust/compile/macro29.rs: New.\n\t* rust/compile/macro3.rs: New.\n\t* rust/compile/macro30.rs: New.\n\t* rust/compile/macro31.rs: New.\n\t* rust/compile/macro32.rs: New.\n\t* rust/compile/macro33.rs: New.\n\t* rust/compile/macro34.rs: New.\n\t* rust/compile/macro35.rs: New.\n\t* rust/compile/macro36.rs: New.\n\t* rust/compile/macro37.rs: New.\n\t* rust/compile/macro38.rs: New.\n\t* rust/compile/macro39.rs: New.\n\t* rust/compile/macro4.rs: New.\n\t* rust/compile/macro40.rs: New.\n\t* rust/compile/macro41.rs: New.\n\t* rust/compile/macro42.rs: New.\n\t* rust/compile/macro5.rs: New.\n\t* rust/compile/macro6.rs: New.\n\t* rust/compile/macro7.rs: New.\n\t* rust/compile/macro8.rs: New.\n\t* rust/compile/macro9.rs: New.\n\t* rust/compile/macro_return.rs: New.\n\t* rust/compile/match1.rs: New.\n\t* rust/compile/match2.rs: New.\n\t* rust/compile/match3.rs: New.\n\t* rust/compile/match4.rs: New.\n\t* rust/compile/match5.rs: New.\n\t* rust/compile/match6.rs: New.\n\t* rust/compile/match7.rs: New.\n\t* rust/compile/method1.rs: New.\n\t* rust/compile/method2.rs: New.\n\t* rust/compile/mismatch-crate-name.rs: New.\n\t* rust/compile/missing_middle/both_path.rs: New.\n\t* rust/compile/missing_middle/explicit.not.rs: New.\n\t* rust/compile/missing_middle/inner_path.rs: New.\n\t* rust/compile/missing_middle/other.rs: New.\n\t* rust/compile/missing_middle/outer_path.rs: New.\n\t* rust/compile/missing_middle/sub/mod.rs: New.\n\t* rust/compile/missing_return1.rs: New.\n\t* rust/compile/mod_missing_middle.rs: New.\n\t* rust/compile/never_type_err1.rs: New.\n\t* rust/compile/privacy1.rs: New.\n\t* rust/compile/privacy2.rs: New.\n\t* rust/compile/privacy3.rs: New.\n\t* rust/compile/privacy4.rs: New.\n\t* rust/compile/privacy5.rs: New.\n\t* rust/compile/privacy6.rs: New.\n\t* rust/compile/pub_restricted_1.rs: New.\n\t* rust/compile/pub_restricted_2.rs: New.\n\t* rust/compile/pub_restricted_3.rs: New.\n\t* rust/compile/raw_identifiers_bad_keywords.rs: New.\n\t* rust/compile/raw_identifiers_underscore.rs: New.\n\t* rust/compile/redef_error1.rs: New.\n\t* rust/compile/redef_error2.rs: New.\n\t* rust/compile/redef_error3.rs: New.\n\t* rust/compile/redef_error4.rs: New.\n\t* rust/compile/redef_error5.rs: New.\n\t* rust/compile/redef_error6.rs: New.\n\t* rust/compile/reference1.rs: New.\n\t* rust/compile/self-path1.rs: New.\n\t* rust/compile/self-path2.rs: New.\n\t* rust/compile/shadow1.rs: New.\n\t* rust/compile/specify-crate-name.rs: New.\n\t* rust/compile/static_var1.rs: New.\n\t* rust/compile/stmt_with_block_err1.rs: New.\n\t* rust/compile/struct_align1.rs: New.\n\t* rust/compile/struct_align2.rs: New.\n\t* rust/compile/struct_init1.rs: New.\n\t* rust/compile/struct_pack1.rs: New.\n\t* rust/compile/struct_pack2.rs: New.\n\t* rust/compile/syntax-only.rs: New.\n\t* rust/compile/test_mod.rs: New.\n\t* rust/compile/torture/all_doc_comment_line_blocks.rs: New.\n\t* rust/compile/torture/all_doc_comment_line_blocks_crlf.rs: New.\n\t* rust/compile/torture/arithmetic_expressions1.rs: New.\n\t* rust/compile/torture/array_const_fold_1.rs: New.\n\t* rust/compile/torture/array_const_fold_2.rs: New.\n\t* rust/compile/torture/array_function.rs: New.\n\t* rust/compile/torture/array_type_infer.rs: New.\n\t* rust/compile/torture/array_zero_length.rs: New.\n\t* rust/compile/torture/arrays1.rs: New.\n\t* rust/compile/torture/arrays2.rs: New.\n\t* rust/compile/torture/arrays3.rs: New.\n\t* rust/compile/torture/arrays4.rs: New.\n\t* rust/compile/torture/arrays5.rs: New.\n\t* rust/compile/torture/arrays6.rs: New.\n\t* rust/compile/torture/arrays_index1.rs: New.\n\t* rust/compile/torture/arrays_index2.rs: New.\n\t* rust/compile/torture/arrays_index3.rs: New.\n\t* rust/compile/torture/as_bool_char.rs: New.\n\t* rust/compile/torture/associated_types1.rs: New.\n\t* rust/compile/torture/autoderef1.rs: New.\n\t* rust/compile/torture/block_expr1.rs: New.\n\t* rust/compile/torture/block_expr2.rs: New.\n\t* rust/compile/torture/block_expr3.rs: New.\n\t* rust/compile/torture/block_expr4.rs: New.\n\t* rust/compile/torture/block_expr5.rs: New.\n\t* rust/compile/torture/block_expr_parser_bug.rs: New.\n\t* rust/compile/torture/bom.rs: New.\n\t* rust/compile/torture/bom_comment.rs: New.\n\t* rust/compile/torture/bom_shebang.rs: New.\n\t* rust/compile/torture/bom_whitespace.rs: New.\n\t* rust/compile/torture/bools_eq.rs: New.\n\t* rust/compile/torture/borrow1.rs: New.\n\t* rust/compile/torture/borrow_function.rs: New.\n\t* rust/compile/torture/break_function.rs: New.\n\t* rust/compile/torture/byte_char_str.rs: New.\n\t* rust/compile/torture/byte_str.rs: New.\n\t* rust/compile/torture/cast1.rs: New.\n\t* rust/compile/torture/cast2.rs: New.\n\t* rust/compile/torture/cast3.rs: New.\n\t* rust/compile/torture/cfg_attr.rs: New.\n\t* rust/compile/torture/char1.rs: New.\n\t* rust/compile/torture/check-doc-attr-string.rs: New.\n\t* rust/compile/torture/coercion1.rs: New.\n\t* rust/compile/torture/coercion2.rs: New.\n\t* rust/compile/torture/comparison_expr1.rs: New.\n\t* rust/compile/torture/compile.exp: New.\n\t* rust/compile/torture/compound_assignment_expr1.rs: New.\n\t* rust/compile/torture/conditional.rs: New.\n\t* rust/compile/torture/constant1.rs: New.\n\t* rust/compile/torture/constant2.rs: New.\n\t* rust/compile/torture/constant3.rs: New.\n\t* rust/compile/torture/deadcode1.rs: New.\n\t* rust/compile/torture/deadcode2.rs: New.\n\t* rust/compile/torture/deref1.rs: New.\n\t* rust/compile/torture/deref_function.rs: New.\n\t* rust/compile/torture/doc_comment.rs: New.\n\t* rust/compile/torture/enum1.rs: New.\n\t* rust/compile/torture/extern_mod1.rs: New.\n\t* rust/compile/torture/extern_mod2.rs: New.\n\t* rust/compile/torture/float1.rs: New.\n\t* rust/compile/torture/float_types.rs: New.\n\t* rust/compile/torture/forward_decl_1.rs: New.\n\t* rust/compile/torture/forward_decl_2.rs: New.\n\t* rust/compile/torture/forward_decl_3-unsafe.rs: New.\n\t* rust/compile/torture/forward_decl_3.rs: New.\n\t* rust/compile/torture/forward_decl_4.rs: New.\n\t* rust/compile/torture/forward_decl_5.rs: New.\n\t* rust/compile/torture/func1.rs: New.\n\t* rust/compile/torture/func2.rs: New.\n\t* rust/compile/torture/function_reference1.rs: New.\n\t* rust/compile/torture/function_reference2.rs: New.\n\t* rust/compile/torture/function_reference3.rs: New.\n\t* rust/compile/torture/function_reference4.rs: New.\n\t* rust/compile/torture/generics1.rs: New.\n\t* rust/compile/torture/generics10.rs: New.\n\t* rust/compile/torture/generics11.rs: New.\n\t* rust/compile/torture/generics12.rs: New.\n\t* rust/compile/torture/generics13.rs: New.\n\t* rust/compile/torture/generics14.rs: New.\n\t* rust/compile/torture/generics15.rs: New.\n\t* rust/compile/torture/generics16.rs: New.\n\t* rust/compile/torture/generics17.rs: New.\n\t* rust/compile/torture/generics18.rs: New.\n\t* rust/compile/torture/generics19.rs: New.\n\t* rust/compile/torture/generics2.rs: New.\n\t* rust/compile/torture/generics20.rs: New.\n\t* rust/compile/torture/generics21.rs: New.\n\t* rust/compile/torture/generics22.rs: New.\n\t* rust/compile/torture/generics23.rs: New.\n\t* rust/compile/torture/generics24.rs: New.\n\t* rust/compile/torture/generics25.rs: New.\n\t* rust/compile/torture/generics26.rs: New.\n\t* rust/compile/torture/generics27.rs: New.\n\t* rust/compile/torture/generics28.rs: New.\n\t* rust/compile/torture/generics29.rs: New.\n\t* rust/compile/torture/generics3.rs: New.\n\t* rust/compile/torture/generics30.rs: New.\n\t* rust/compile/torture/generics31.rs: New.\n\t* rust/compile/torture/generics32.rs: New.\n\t* rust/compile/torture/generics4.rs: New.\n\t* rust/compile/torture/generics5.rs: New.\n\t* rust/compile/torture/generics6.rs: New.\n\t* rust/compile/torture/generics7.rs: New.\n\t* rust/compile/torture/generics8.rs: New.\n\t* rust/compile/torture/generics9.rs: New.\n\t* rust/compile/torture/grouped_expr_function.rs: New.\n\t* rust/compile/torture/identifier-missing-impl-1.rs: New.\n\t* rust/compile/torture/if.rs: New.\n\t* rust/compile/torture/if_elif.rs: New.\n\t* rust/compile/torture/if_elif_else_expr1.rs: New.\n\t* rust/compile/torture/if_else.rs: New.\n\t* rust/compile/torture/ifunaryexpr.rs: New.\n\t* rust/compile/torture/impl_block1.rs: New.\n\t* rust/compile/torture/impl_block2.rs: New.\n\t* rust/compile/torture/impl_block3.rs: New.\n\t* rust/compile/torture/impl_block_unused.rs: New.\n\t* rust/compile/torture/implicit_returns1.rs: New.\n\t* rust/compile/torture/infer_type1.rs: New.\n\t* rust/compile/torture/inner_attributes.rs: New.\n\t* rust/compile/torture/integer_inference_var1.rs: New.\n\t* rust/compile/torture/integer_inference_var2.rs: New.\n\t* rust/compile/torture/integer_inference_var3.rs: New.\n\t* rust/compile/torture/integer_inference_var4.rs: New.\n\t* rust/compile/torture/integer_inference_var5.rs: New.\n\t* rust/compile/torture/integer_types.rs: New.\n\t* rust/compile/torture/intrinsics-1.rs: New.\n\t* rust/compile/torture/intrinsics-2.rs: New.\n\t* rust/compile/torture/isolated_cr_block_comment.rs: New.\n\t* rust/compile/torture/isolated_cr_line_comment.rs: New.\n\t* rust/compile/torture/issue-1024.rs: New.\n\t* rust/compile/torture/issue-1075.rs: New.\n\t* rust/compile/torture/issue-1432.rs: New.\n\t* rust/compile/torture/issue-1434.rs: New.\n\t* rust/compile/torture/issue-368.rs: New.\n\t* rust/compile/torture/issue-808.rs: New.\n\t* rust/compile/torture/issue-862.rs: New.\n\t* rust/compile/torture/issue-893-2.rs: New.\n\t* rust/compile/torture/issue-893.rs: New.\n\t* rust/compile/torture/lazybooleanexpr_function.rs: New.\n\t* rust/compile/torture/lifetime1.rs: New.\n\t* rust/compile/torture/literals1.rs: New.\n\t* rust/compile/torture/loop1.rs: New.\n\t* rust/compile/torture/loop2.rs: New.\n\t* rust/compile/torture/loop3.rs: New.\n\t* rust/compile/torture/loop4.rs: New.\n\t* rust/compile/torture/loop5.rs: New.\n\t* rust/compile/torture/loop6.rs: New.\n\t* rust/compile/torture/loop7.rs: New.\n\t* rust/compile/torture/macro-issue1403.rs: New.\n\t* rust/compile/torture/macro-issue1426.rs: New.\n\t* rust/compile/torture/macro_as_expr.rs: New.\n\t* rust/compile/torture/match1.rs: New.\n\t* rust/compile/torture/methods1.rs: New.\n\t* rust/compile/torture/methods2.rs: New.\n\t* rust/compile/torture/methods3.rs: New.\n\t* rust/compile/torture/mod-nameresolve.rs: New.\n\t* rust/compile/torture/mod1.rs: New.\n\t* rust/compile/torture/mod2.rs: New.\n\t* rust/compile/torture/mod3.rs: New.\n\t* rust/compile/torture/modules/mod.rs: New.\n\t* rust/compile/torture/modules/valid_path.rs: New.\n\t* rust/compile/torture/must_use1.rs: New.\n\t* rust/compile/torture/must_use2.rs: New.\n\t* rust/compile/torture/name_resolve1.rs: New.\n\t* rust/compile/torture/negation_function.rs: New.\n\t* rust/compile/torture/nested_fn1.rs: New.\n\t* rust/compile/torture/nested_fn2.rs: New.\n\t* rust/compile/torture/nested_struct1.rs: New.\n\t* rust/compile/torture/never_type1.rs: New.\n\t* rust/compile/torture/not_shebang.rs: New.\n\t* rust/compile/torture/not_shebang_block_comment.rs: New.\n\t* rust/compile/torture/not_shebang_comment.rs: New.\n\t* rust/compile/torture/not_shebang_multiline_comment.rs: New.\n\t* rust/compile/torture/not_shebang_spaces.rs: New.\n\t* rust/compile/torture/parameter_usage1.rs: New.\n\t* rust/compile/torture/parens1.rs: New.\n\t* rust/compile/torture/pointer1.rs: New.\n\t* rust/compile/torture/primconsts.rs: New.\n\t* rust/compile/torture/prims_struct_eq.rs: New.\n\t* rust/compile/torture/range-lang-item1.rs: New.\n\t* rust/compile/torture/raw_identifiers.rs: New.\n\t* rust/compile/torture/raw_identifiers_keywords.rs: New.\n\t* rust/compile/torture/recursive_fn1.rs: New.\n\t* rust/compile/torture/return_function.rs: New.\n\t* rust/compile/torture/scoping1.rs: New.\n\t* rust/compile/torture/self_type1.rs: New.\n\t* rust/compile/torture/shadow1.rs: New.\n\t* rust/compile/torture/shadow2.rs: New.\n\t* rust/compile/torture/shebang.rs: New.\n\t* rust/compile/torture/shebang_plus_attr.rs: New.\n\t* rust/compile/torture/shebang_plus_attr2.rs: New.\n\t* rust/compile/torture/static_function.rs: New.\n\t* rust/compile/torture/static_var1.rs: New.\n\t* rust/compile/torture/stmt_with_block1.rs: New.\n\t* rust/compile/torture/str1.rs: New.\n\t* rust/compile/torture/struct_access1.rs: New.\n\t* rust/compile/torture/struct_base_init_1.rs: New.\n\t* rust/compile/torture/struct_decl.rs: New.\n\t* rust/compile/torture/struct_init.rs: New.\n\t* rust/compile/torture/struct_init_10.rs: New.\n\t* rust/compile/torture/struct_init_11.rs: New.\n\t* rust/compile/torture/struct_init_2.rs: New.\n\t* rust/compile/torture/struct_init_3.rs: New.\n\t* rust/compile/torture/struct_init_4.rs: New.\n\t* rust/compile/torture/struct_init_5.rs: New.\n\t* rust/compile/torture/struct_init_6.rs: New.\n\t* rust/compile/torture/struct_init_7.rs: New.\n\t* rust/compile/torture/struct_init_8.rs: New.\n\t* rust/compile/torture/struct_init_9.rs: New.\n\t* rust/compile/torture/top_attr.rs: New.\n\t* rust/compile/torture/traits1.rs: New.\n\t* rust/compile/torture/traits10.rs: New.\n\t* rust/compile/torture/traits11.rs: New.\n\t* rust/compile/torture/traits12.rs: New.\n\t* rust/compile/torture/traits13.rs: New.\n\t* rust/compile/torture/traits14.rs: New.\n\t* rust/compile/torture/traits15.rs: New.\n\t* rust/compile/torture/traits16.rs: New.\n\t* rust/compile/torture/traits17.rs: New.\n\t* rust/compile/torture/traits18.rs: New.\n\t* rust/compile/torture/traits19.rs: New.\n\t* rust/compile/torture/traits2.rs: New.\n\t* rust/compile/torture/traits3.rs: New.\n\t* rust/compile/torture/traits4.rs: New.\n\t* rust/compile/torture/traits5.rs: New.\n\t* rust/compile/torture/traits6.rs: New.\n\t* rust/compile/torture/traits7.rs: New.\n\t* rust/compile/torture/traits8.rs: New.\n\t* rust/compile/torture/traits9.rs: New.\n\t* rust/compile/torture/transmute-size-check-1.rs: New.\n\t* rust/compile/torture/transmute1.rs: New.\n\t* rust/compile/torture/tuple1.rs: New.\n\t* rust/compile/torture/tuple2.rs: New.\n\t* rust/compile/torture/tuple3.rs: New.\n\t* rust/compile/torture/tuple_enum_variants.rs: New.\n\t* rust/compile/torture/tuple_field_access.rs: New.\n\t* rust/compile/torture/tuple_function.rs: New.\n\t* rust/compile/torture/tuple_index.rs: New.\n\t* rust/compile/torture/tuple_struct1.rs: New.\n\t* rust/compile/torture/tuple_struct2.rs: New.\n\t* rust/compile/torture/tuple_struct_unit.rs: New.\n\t* rust/compile/torture/tuple_struct_unused.rs: New.\n\t* rust/compile/torture/type-alias1.rs: New.\n\t* rust/compile/torture/type-alias2.rs: New.\n\t* rust/compile/torture/type_infer1.rs: New.\n\t* rust/compile/torture/type_infer2.rs: New.\n\t* rust/compile/torture/type_infer3.rs: New.\n\t* rust/compile/torture/type_infer4.rs: New.\n\t* rust/compile/torture/type_infer5.rs: New.\n\t* rust/compile/torture/type_infer6.rs: New.\n\t* rust/compile/torture/unary_operators.rs: New.\n\t* rust/compile/torture/undended-string-1.rs: New.\n\t* rust/compile/torture/undended-string-2.rs: New.\n\t* rust/compile/torture/underscore_id.rs: New.\n\t* rust/compile/torture/union.rs: New.\n\t* rust/compile/torture/union_union.rs: New.\n\t* rust/compile/torture/unit_type1.rs: New.\n\t* rust/compile/torture/unit_type2.rs: New.\n\t* rust/compile/torture/unit_type3.rs: New.\n\t* rust/compile/torture/unit_type4.rs: New.\n\t* rust/compile/torture/unit_type5.rs: New.\n\t* rust/compile/torture/unsafe1.rs: New.\n\t* rust/compile/torture/unsafe2.rs: New.\n\t* rust/compile/torture/unsafe3.rs: New.\n\t* rust/compile/torture/unsafe4.rs: New.\n\t* rust/compile/torture/unused.rs: New.\n\t* rust/compile/torture/unused1.rs: New.\n\t* rust/compile/torture/unused_struct.rs: New.\n\t* rust/compile/torture/unused_struct_field.rs: New.\n\t* rust/compile/torture/usize1.rs: New.\n\t* rust/compile/torture/very-broken-attr-string.rs: New.\n\t* rust/compile/torture/while_function.rs: New.\n\t* rust/compile/traits1.rs: New.\n\t* rust/compile/traits10.rs: New.\n\t* rust/compile/traits11.rs: New.\n\t* rust/compile/traits12.rs: New.\n\t* rust/compile/traits2.rs: New.\n\t* rust/compile/traits3.rs: New.\n\t* rust/compile/traits4.rs: New.\n\t* rust/compile/traits5.rs: New.\n\t* rust/compile/traits6.rs: New.\n\t* rust/compile/traits7.rs: New.\n\t* rust/compile/traits8.rs: New.\n\t* rust/compile/traits9.rs: New.\n\t* rust/compile/tuple1.rs: New.\n\t* rust/compile/tuple_struct1.rs: New.\n\t* rust/compile/tuple_struct2.rs: New.\n\t* rust/compile/tuple_struct3.rs: New.\n\t* rust/compile/type-alias1.rs: New.\n\t* rust/compile/type-bindings1.rs: New.\n\t* rust/compile/unary_negation.rs: New.\n\t* rust/compile/unary_not.rs: New.\n\t* rust/compile/unconstrained_type_param.rs: New.\n\t* rust/compile/unicode_escape.rs: New.\n\t* rust/compile/unsafe1.rs: New.\n\t* rust/compile/unsafe10.rs: New.\n\t* rust/compile/unsafe2.rs: New.\n\t* rust/compile/unsafe3.rs: New.\n\t* rust/compile/unsafe4.rs: New.\n\t* rust/compile/unsafe5.rs: New.\n\t* rust/compile/unsafe6.rs: New.\n\t* rust/compile/unsafe7.rs: New.\n\t* rust/compile/unsafe8.rs: New.\n\t* rust/compile/unsafe9.rs: New.\n\t* rust/compile/unterminated_c_comment.rs: New.\n\t* rust/compile/use_1.rs: New.\n\t* rust/compile/usize1.rs: New.\n\t* rust/compile/xfail/lifetime_param.rs: New.\n\t* rust/compile/xfail/struct_field_vis.rs: New.\n\t* rust/compile/xfail/xfail.exp: New.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\nCo-authored-by: Thomas Schwinge <thomas@codesourcery.com>\nCo-authored-by: Mark Wielaard <mark@klomp.org>\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "fc0ca4cbe0f9ad37336f61e1dd6ce78c145881eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc0ca4cbe0f9ad37336f61e1dd6ce78c145881eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97705b4459b645770ffb6c01ff6177de6774ef3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97705b4459b645770ffb6c01ff6177de6774ef3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97705b4459b645770ffb6c01ff6177de6774ef3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97705b4459b645770ffb6c01ff6177de6774ef3c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f60df7e6202300b25739b30b9e7430c0be22eb9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60df7e6202300b25739b30b9e7430c0be22eb9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f60df7e6202300b25739b30b9e7430c0be22eb9f"}], "stats": {"total": 7556, "additions": 7556, "deletions": 0}, "files": [{"sha": "a4b6241dc159c396577aaf904b762cf45501b504", "filename": "gcc/testsuite/rust/compile/abi-options1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fabi-options1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fabi-options1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fabi-options1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+extern \"foobar\" {\n+    // { dg-error \"unknown ABI option\" \"\" { target *-*-* } .-1 }\n+    fn printf(s: *const i8, ...);\n+}\n+\n+pub extern \"baz\" fn test() {}\n+// { dg-error \"unknown ABI option\" \"\" { target *-*-* } .-1 }"}, {"sha": "a56be9a0e8b6b33ffceb3a76e68952aa4f7aea6c", "filename": "gcc/testsuite/rust/compile/array3.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+fn foo(state: &mut [u32; 16], a: usize) {\n+    // { dg-warning \"function is never used: .foo.\" \"\" { target *-*-* } .-1 }\n+    state[a] = 1;\n+}"}, {"sha": "76e082a6d578862a6afe97a5b4e3583b87c4a8b4", "filename": "gcc/testsuite/rust/compile/array_empty_list.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray_empty_list.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray_empty_list.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray_empty_list.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let arr = [];\n+    // { dg-error \"type annotations needed\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "714a6be7afb55713d39105b393a7ed67dddc4ec8", "filename": "gcc/testsuite/rust/compile/arrays1.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Farrays1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Farrays1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Farrays1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let xs: [i32; 5] = [1, 2, 3, 4, 5];\n+    let a: bool = xs[0]; // { dg-error \"expected .bool. got .i32.\" }\n+}"}, {"sha": "c96f4f7d820895a2dd73683039ddf632ad36e980", "filename": "gcc/testsuite/rust/compile/arrays2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Farrays2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Farrays2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Farrays2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+// { dg-additional-options \"-w\" }\n+fn main() {\n+    let array: [i32; 5] = [1, 2, 3];\n+    // { dg-error \"expected an array with a fixed size of 5 elements, found one with 3 elements\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "1d406031fee8ea65375e230f8ac223bf35ec13de", "filename": "gcc/testsuite/rust/compile/attr-mismatch-crate-name.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr-mismatch-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr-mismatch-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr-mismatch-crate-name.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+#![crate_name = \"specified_name\"]\n+// { dg-final { scan-tree-dump-times {specified_name::main} 1 gimple } }\n+fn main() {}"}, {"sha": "f705ea9b2ff55998021f8e7e9ddd00f9d38a2602", "filename": "gcc/testsuite/rust/compile/attr_cold.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_cold.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_cold.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_cold.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+#[cold]\n+fn cold_function() -> i32 {\n+    42\n+}\n+\n+fn main() -> i32 {\n+    // { dg-final { scan-tree-dump-times {__attribute__\\(\\(cdecl, cold\\)\\)} 1 gimple } }\n+    cold_function();\n+\n+    0\n+}"}, {"sha": "01bc9c415022976eab2dad4ad698f5416563f4c6", "filename": "gcc/testsuite/rust/compile/attr_deprecated.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,14 @@\n+#[deprecated(since=\"1.0\", note=\"do not use this function\")]\n+fn test1() {}\n+\n+#[deprecated]\n+fn test() {}\n+\n+#[deprecated = \"a different message\"]\n+fn test2() {}\n+\n+fn main() {\n+    test(); // { dg-warning \".attr_deprecated::test. is deprecated\" }\n+    test1(); // { dg-warning \".attr_deprecated::test1. is deprecated: do not use this function\" }\n+    test2(); // { dg-warning \".attr_deprecated::test2. is deprecated: a different message\" }\n+}"}, {"sha": "66f4ce3b076b6c9a236f23e4bbcceb0b07c37282", "filename": "gcc/testsuite/rust/compile/attr_deprecated_2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fattr_deprecated_2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+#[deprecated(since=\"1.0\")]\n+fn test1() {}\n+\n+// { dg-excess-errors \"unknown meta item ....\" }\n+#[deprecated(invalid=\"invalid\")]\n+fn test2() {}\n+\n+fn main() {\n+    test1(); // { dg-warning \".attr_deprecated_2::test1. is deprecated\" }\n+    test2();\n+}"}, {"sha": "6c59c255cc2f278eb2b401754dc8de07f764441e", "filename": "gcc/testsuite/rust/compile/bad-crate-name.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad-crate-name.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-frust-crate=bad+name\" }\n+// { dg-excess-errors \"invalid crate name: ....\" }\n+// { dg-excess-errors \"unrecognized command-line option ....\" }\n+fn main() {}"}, {"sha": "cfbebb0698d4a256fda86f5142c66cd1ba8c4590", "filename": "gcc/testsuite/rust/compile/bad=file-name.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad%3Dfile-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad%3Dfile-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad%3Dfile-name.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-fdump-tree-gimple -frust-crate=good_name\" }\n+pub fn does_nothing() {}\n+fn main() {\n+    does_nothing()\n+}\n+// { dg-final { scan-tree-dump-times {good_name::does_nothing} 2 gimple } }\n+// { dg-final { scan-tree-dump-times {good_name::main} 1 gimple } }"}, {"sha": "91a28eebe008286538062996559bb54875e74b77", "filename": "gcc/testsuite/rust/compile/bad_as_bool_char.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,18 @@\n+pub fn main ()\n+{\n+  let t = true;\n+  let f = false;\n+  let fone = t as f32;   // { dg-error \"invalid cast\" }\n+  let fzero = f as f64;  // { dg-error \"invalid cast\" }\n+\n+  let nb = 0u8 as bool;  // { dg-error \"invalid cast\" }\n+  let nc = true as char; // { dg-error \"invalid cast\" }\n+\n+  let a = 'a';\n+  let b = 'b';\n+  let fa = a as f32;     // { dg-error \"invalid cast\" }\n+  let bb = b as bool;    // { dg-error \"invalid cast\" }\n+\n+  let t32: u32 = 33;\n+  let ab = t32 as char;  // { dg-error \"invalid cast\" }\n+}"}, {"sha": "56e2093b27c7ff880c0b14d91bfe5d6614a1df0d", "filename": "gcc/testsuite/rust/compile/bad_file_name.txt.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_file_name.txt.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_file_name.txt.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_file_name.txt.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+// { dg-excess-errors \"invalid crate name: ....\" }\n+// { dg-bogus \"unrecognized command-line option ....\" }\n+fn main() {}"}, {"sha": "cfd166ce3ec9d244892bdd6632bd2288e3b56404", "filename": "gcc/testsuite/rust/compile/bad_inner_doc.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_inner_doc.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_inner_doc.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_inner_doc.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,15 @@\n+pub fn main ()\n+{\n+  //! inner doc allowed\n+  let _x = 42;\n+  // { dg-error \"inner doc\" \"\" { target *-*-* } .+1 }\n+  //! inner doc disallowed\n+  mod module\n+  {\n+    /*! inner doc allowed */\n+    /// outer doc allowed\n+    // { dg-error \"inner doc\" \"\" { target *-*-* } .+1 }\n+    /*! but inner doc not here */\n+    mod x { }\n+  }\n+}"}, {"sha": "e7fd5edb9811c2acca873b4e7d3eb9f9083b4d6e", "filename": "gcc/testsuite/rust/compile/bad_pub_enumitems.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_pub_enumitems.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_pub_enumitems.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_pub_enumitems.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,47 @@\n+pub enum E\n+{\n+  pub A { a: i32 }, // { dg-error \"visibility qualifier\" }\n+  B (u8),\n+  pub C, // { dg-error \"visibility qualifier\" }\n+  D\n+}\n+\n+enum E1\n+{\n+  A,\n+  pub B = 42, // { dg-error \"visibility qualifier\" }\n+  C = 3,\n+  D,\n+  pub E // { dg-error \"visibility qualifier\" }\n+}\n+\n+enum E2\n+{\n+  pub A (u8, i32, u64), // { dg-error \"visibility qualifier\" }\n+  B { a: u8, a: u8 }  // { dg-error \"duplicate field\" }}\n+}\n+\n+fn main ()\n+{\n+  enum EE\n+    {\n+      Alpha { alpha: i32 },\n+      pub Beta (u8), // { dg-error \"visibility qualifier\" }\n+      pub Gamma, // { dg-error \"visibility qualifier\" }\n+      Delta { delta: u32 }\n+    }\n+\n+  enum EE1\n+    {\n+      pub Alpha, // { dg-error \"visibility qualifier\" }\n+      Beta = 41,\n+      pub Gamma = 3, // { dg-error \"visibility qualifier\" }\n+      Delta,\n+    }\n+\n+  enum E2\n+    {\n+      Alpha { a: u8, a: u8 },  // { dg-error \"duplicate field\" }}\n+      pub Beta (u8, i32, u64) // { dg-error \"visibility qualifier\" }\n+    }\n+}"}, {"sha": "7b09a94fd2745968f969df263570943b21625a48", "filename": "gcc/testsuite/rust/compile/bad_stmt_enums.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_stmt_enums.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_stmt_enums.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_stmt_enums.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,22 @@\n+fn main ()\n+{\n+  enum EE\n+    {\n+      Alpha { alpha: i32 },\n+      pub Beta (u8),\n+      pub Gamma,\n+      Gamma { gamma: u32 } // { dg-error \"redefined\" }\n+    }\n+\n+  struct EE2 { }\n+  enum EE2 { } // { dg-error \"redefined\" }\n+\n+  enum EE1\n+    {\n+      pub Alpha,\n+      Beta = 41,\n+      Beta = 42, // { dg-error \"redefined\" }\n+      pub Gamma = 3,\n+      D,\n+    }\n+}"}, {"sha": "b655e30a93da402b21c3397493189a264c3f1355", "filename": "gcc/testsuite/rust/compile/bad_toplevel_enums.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_toplevel_enums.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_toplevel_enums.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_toplevel_enums.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,19 @@\n+pub enum E\n+{\n+  pub A { a: i32 },\n+  B (u8),\n+  pub C,\n+  B // { dg-error \"redefined\" }\n+}\n+\n+enum E2 { }\n+struct E2 { } // { dg-error \"redefined\" }\n+\n+enum E1\n+{\n+  A,\n+  pub B = 42,\n+  C = 3,\n+  A { a: u8 }, // { dg-error \"redefined\" }\n+  pub D\n+}"}, {"sha": "c3bd1e91d108596339d0a80aeee71f62e8f6aca3", "filename": "gcc/testsuite/rust/compile/bad_tuple_index.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_tuple_index.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_tuple_index.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_tuple_index.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,66 @@\n+fn main()\n+{\n+  // tuples\n+  let z = ();\n+\n+  let o = (0,);\n+  /* Binary, Octal and Hex literals are invalid.  */\n+  let _fb = o.0b0; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fo = o.0o0; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fh = o.0x0; // { dg-error \"tuple index should be a pure decimal literal\" }\n+\n+  /* No underscores.  */\n+  let _fua = o.0_; // { dg-error \"tuple index should be a pure decimal literal\" }\n+\n+  /* Suffix is not allowed.  */\n+  let _fu8 = o.0u8; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fi8 = o.0i8; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fu16 = o.0u16; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fi16 = o.0i16; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fu32 = o.0u32; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fi32 = o.0i32; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fu64 = o.0u64; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fi64 = o.0i64; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fu128 = o.0u128; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fi128 = o.0i128; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fusize = o.0usize; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _fisize = o.0isize; // { dg-error \"tuple index should be a pure decimal literal\" }\n+\n+  let t = (0,1);\n+  /* No extra zero prefix.  */\n+  let _s = t.01; // { dg-error \"tuple index should be a pure decimal literal\" }\n+\n+  let m = (0,1,2,3,4,5,6,7,8,9,10);\n+  /* No extra zero prefix.  */\n+  let _l = m.010; // { dg-error \"tuple index should be a pure decimal literal\" }\n+\n+  /* No underscores.  */\n+  let _lu = m.1_0; // { dg-error \"tuple index should be a pure decimal literal\" }\n+\n+  // tuple structs\n+  struct E();\n+  let _e = E();\n+\n+  struct O(i32);\n+  let so = O(0);\n+  /* No leading zeros, no underscores.  */\n+  let _sf = so.0_0; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  /* Binary, Octal and Hex literals are invalid.  */\n+  let _sb = so.0b0; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _so = so.0o0; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _sh = so.0x0; // { dg-error \"tuple index should be a pure decimal literal\" }\n+\n+  struct T(i32,i32);\n+  let st = T(0,1);\n+  /* Suffix is not allowed.  */\n+  let _stfu32 = st.1u32; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _stfi32 = st.1i32; // { dg-error \"tuple index should be a pure decimal literal\" }\n+\n+  struct M(i32,i32,i32,i32,i32,i32,i32,i32,i32,i32,i32);\n+  let sm = M(0,1,2,3,4,5,6,7,8,9,10);\n+  /* No underscores. */\n+  let _sl2 = sm.1_0; // { dg-error \"tuple index should be a pure decimal literal\" }\n+  let _sl3 = sm.10_; // { dg-error \"tuple index should be a pure decimal literal\" }\n+\n+  z\n+}"}, {"sha": "93de439704fde9ecaeba299915fb34f32b67be16", "filename": "gcc/testsuite/rust/compile/bad_type1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_type1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_type1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_type1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    let logical: bool = 123; // { dg-error \"expected .bool. got .<integer>.\" }\n+}"}, {"sha": "e47b8aac0e7ca19e0bfac35c552304a194b342a4", "filename": "gcc/testsuite/rust/compile/bad_type2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_type2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_type2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_type2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,14 @@\n+fn test(x: i32) -> i32 {\n+    return x + 1;\n+}\n+\n+fn main() {\n+    let mut an_integer = 5;\n+    an_integer = test(1) + 3;\n+\n+    let mut x;\n+    x = 1;\n+    x = true; // { dg-error \"expected .<integer>. got .bool.\" }\n+\n+    let call_test = test(1);\n+}"}, {"sha": "91cabffa89439009b1e2a8804879e62e0b25ca31", "filename": "gcc/testsuite/rust/compile/break1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let a;\n+    a = 1;\n+    break a; // { dg-error \"cannot 'break' outside of a loop\" }\n+    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "5ac806aeb9ed00bd29f29190c31cd46028c80907", "filename": "gcc/testsuite/rust/compile/break2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbreak2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,15 @@\n+fn main() {\n+    let mut a = 1;\n+    let mut b = 1;\n+\n+    let mut c;\n+    while b > 10 {\n+        if (b == 2) {\n+            break b;  // { dg-error \"can only break with a value inside 'loop'\" }\n+            // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n+        }\n+        c = a + b;\n+        a = b;\n+        b = c;\n+    }\n+}"}, {"sha": "9d224406a3eab17034f1a9ef41f0fdf006a9897c", "filename": "gcc/testsuite/rust/compile/builtin_macro_compile_error.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_compile_error.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_compile_error.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_compile_error.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+#[rustc_builtin_macro]\n+macro_rules! compile_error {\n+  () => {{}};\n+}\n+\n+fn main () {\n+  let message = \"error message\";\n+  compile_error! (message); // { dg-error \"argument must be a string literal\" \"\" }\n+  compile_error! (); // { dg-error \"macro takes 1 argument\" \"\" }\n+  compile_error! (\"a\", \"b\"); // { dg-error \"macro takes 1 argument\" \"\" }\n+  compile_error! (\"expected error message\"); // { dg-error \"expected error message\" }\n+  compile_error! (\"expected error message\",); // { dg-error \"expected error message\" }\n+}"}, {"sha": "9b878af764db29a79fbde8134cd645c8cd32374d", "filename": "gcc/testsuite/rust/compile/builtin_macro_concat.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_concat.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_concat.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_concat.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,17 @@\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {{}};\n+}\n+\n+fn main() {\n+    let not_literal = \"identifier\";\n+    concat!();\n+    concat! (,); // { dg-error \"argument must be a constant literal\" }\n+    concat!(not_literal); // { dg-error \"argument must be a constant literal\" }\n+    concat!(\"message\");\n+    concat!(\"message\",);\n+    concat!(\"message\", 1, true, false, 1.0, 10usize, 2000u64);\n+    concat!(\"message\", 1, true, false, 1.0, 10usize, 2000u64,);\n+    concat! (\"m\", not_literal); // { dg-error \"argument must be a constant literal\" }\n+    concat!(not_literal invalid 'm' !!,); // { dg-error \"argument must be a constant literal\" }\n+}"}, {"sha": "289e6db2cf1bc162ee21955a165b2bc46d3f2504", "filename": "gcc/testsuite/rust/compile/builtin_macro_env.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_env.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_env.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_env.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,20 @@\n+#[rustc_builtin_macro]\n+macro_rules! env {\n+  () => {{}};\n+}\n+\n+fn main () {\n+  let message = \"error message\";\n+  env! (message); // { dg-error \"argument must be a string literal\" \"\" }\n+  env! (); // { dg-error \"env! takes 1 or 2 arguments\" \"\" }\n+  env! (,); // { dg-error \"argument must be a string literal\" \"\" }\n+  env! (1); // { dg-error \"argument must be a string literal\" \"\" }\n+  env! (\"NOT_DEFINED\"); // { dg-error \"environment variable 'NOT_DEFINED' not defined\" \"\" }\n+  env! (\"NOT_DEFINED\",); // { dg-error \"environment variable 'NOT_DEFINED' not defined\" \"\" }\n+  env! (\"NOT_DEFINED\", 1); // { dg-error \"argument must be a string literal\" \"\" }\n+  env! (\"NOT_DEFINED\", \"two\", \"three\"); // { dg-error \"env! takes 1 or 2 arguments\" \"\" }\n+  env! (\"NOT_DEFINED\" \"expected error message\"); // { dg-error \"expected token: ','\" \"\" }\n+  env! (\"NOT_DEFINED\", \"expected error message\"); // { dg-error \"expected error message\" \"\" }\n+  env! (\"NOT_DEFINED\", \"expected error message\",); // { dg-error \"expected error message\" \"\" }\n+  env! (1, \"two\"); // { dg-error \"argument must be a string literal\" \"\" }\n+}"}, {"sha": "38716d33bcd9ae78818391a4396682c9a8e54f73", "filename": "gcc/testsuite/rust/compile/builtin_macro_include_bytes.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_bytes.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_bytes.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_bytes.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+#[rustc_builtin_macro]\n+macro_rules! include_bytes {\n+  () => {{}};\n+}\n+\n+fn main () {\n+  let file = \"include.txt\";\n+  include_bytes! (file); // { dg-error \"argument must be a string literal\" \"\" }\n+  include_bytes! (); // { dg-error \"macro takes 1 argument\" \"\" }\n+  include_bytes! (\"foo.txt\", \"bar.txt\"); // { dg-error \"macro takes 1 argument\" \"\" }\n+  include_bytes! (\"builtin_macro_include_bytes.rs\"); // ok\n+  include_bytes! (\"builtin_macro_include_bytes.rs\",); // trailing comma ok\n+}"}, {"sha": "38f5e3b73349b57571ee1aa4c66dc9d4340f9ccf", "filename": "gcc/testsuite/rust/compile/builtin_macro_include_str.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_str.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_str.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_include_str.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+#[rustc_builtin_macro]\n+macro_rules! include_str {\n+  () => {{}};\n+}\n+\n+fn main () {\n+  let file = \"include.txt\";\n+  include_str! (file); // { dg-error \"argument must be a string literal\" \"\" }\n+  include_str! (); // { dg-error \"macro takes 1 argument\" \"\" }\n+  include_str! (\"foo.txt\", \"bar.txt\"); // { dg-error \"macro takes 1 argument\" \"\" }\n+  include_str! (\"builtin_macro_include_str.rs\"); // ok\n+  include_str! (\"builtin_macro_include_str.rs\",); // trailing comma ok\n+}"}, {"sha": "1a3228b92841424f98ad5b554848ed94b5a00a2a", "filename": "gcc/testsuite/rust/compile/builtin_macro_not_found.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_not_found.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_not_found.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_not_found.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+#[rustc_builtin_macro]\n+macro_rules! crabby_crab_carb { // { dg-error \"cannot find a built-in macro with name .crabby_crab_carb.\" }\n+    () => {{}};\n+}"}, {"sha": "9242e2c5a0bce2c3d2587505c440a33c5e916aac", "filename": "gcc/testsuite/rust/compile/bytecharstring.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbytecharstring.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbytecharstring.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbytecharstring.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+fn main ()\n+{\n+  let _bc = b'\\x80';\n+  let _bs = b\"foo\\x80bar\";\n+\n+  let _c = '\\xef';        // { dg-error \"out of range\" }\n+  let _s = \"Foo\\xEFBar\";  // { dg-error \"out of range\" }\n+}"}, {"sha": "193e7b5b6980fb69a9b3a32f2888cb4bced5842b", "filename": "gcc/testsuite/rust/compile/canonical_paths1.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcanonical_paths1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcanonical_paths1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcanonical_paths1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,25 @@\n+// { dg-additional-options \"-w -fdump-tree-gimple -frust-crate=example\" }\n+struct Foo(i32);\n+\n+trait TR {\n+    fn test(&self) -> i32;\n+}\n+\n+mod A {\n+    impl ::Foo {\n+        pub fn test(self) {}\n+        // { dg-final { scan-tree-dump-times {example::A::<impl example::Foo>::test} 2 gimple } }\n+    }\n+\n+    impl ::TR for ::Foo {\n+        fn test(&self) -> i32 {\n+            // { dg-final { scan-tree-dump-times {example::A::<impl example::Foo as example::TR>::test} 1 gimple } }\n+            self.0\n+        }\n+    }\n+}\n+\n+pub fn test() {\n+    let a = Foo(123);\n+    a.test();\n+}"}, {"sha": "74c4b1eaac4c773165abb95d7a63aa256814d686", "filename": "gcc/testsuite/rust/compile/cast1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcast1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcast1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcast1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a: i32 = 123;\n+    let b = a as char;\n+    // { dg-error \"invalid cast .i32. to .char.\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "6984f04d1b921f65494c5e538cc1237a7e420b0d", "filename": "gcc/testsuite/rust/compile/cfg1.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,31 @@\n+// { dg-additional-options \"-w\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[cfg(A)]\n+fn test() {\n+    unsafe {\n+        let a = \"test1\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+}\n+\n+#[cfg(B)]\n+fn test() {\n+    unsafe {\n+        let a = \"test2\\n\\0\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        printf(c);\n+    }\n+}\n+\n+fn main() {\n+    test();\n+    // { dg-error \"Cannot find path .test. in this scope\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "939384c5b7dab383d0da44d4e824d8571dc76d7d", "filename": "gcc/testsuite/rust/compile/cfg2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+struct Foo;\n+impl Foo {\n+    #[cfg(not(A))]\n+    fn test(&self) {}\n+}\n+\n+fn main() {\n+    let a = Foo;\n+    a.test();\n+    // { dg-error \"failed to resolve method for .test.\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "d6ffab6bfc6c23e18e4b1f1ce6d02fa0d264f20b", "filename": "gcc/testsuite/rust/compile/cfg3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-w -frust-cfg=A -frust-cfg=B\" }\n+struct Foo;\n+impl Foo {\n+    #[cfg(all(A, B))]\n+    fn test(&self) {}\n+}\n+\n+fn main() {\n+    let a = Foo;\n+    a.test();\n+}"}, {"sha": "2834c277ddfc6e2eb0943ceedeb403816b515c3e", "filename": "gcc/testsuite/rust/compile/cfg4.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+struct Foo;\n+impl Foo {\n+    #[cfg(any(A, B))]\n+    fn test(&self) {}\n+}\n+\n+fn main() {\n+    let a = Foo;\n+    a.test();\n+}"}, {"sha": "1852efaf8df9f462d2fb252725a4bd29f769d1d9", "filename": "gcc/testsuite/rust/compile/cfg5.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcfg5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-w -frust-cfg=A=\\\"B\\\"\" }\n+struct Foo;\n+impl Foo {\n+    #[cfg(A = \"B\")]\n+    fn test(&self) {}\n+}\n+\n+fn main() {\n+    let a = Foo;\n+    a.test();\n+}"}, {"sha": "13423d76c928a0b854778b6c9e5e39e08db417ad", "filename": "gcc/testsuite/rust/compile/compile.exp", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcompile.exp?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,35 @@\n+# Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Compile tests, no torture testing.\n+#\n+# These tests raise errors in the front end; torture testing doesn't apply.\n+\n+# Load support procs.\n+load_lib rust-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+set saved-dg-do-what-default ${dg-do-what-default}\n+\n+set dg-do-what-default \"compile\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.rs]] \"\" \"\"\n+set dg-do-what-default ${saved-dg-do-what-default}\n+\n+# All done.\n+dg-finish"}, {"sha": "54011bd697626769f4943eb69ff52edee2e0e5fc", "filename": "gcc/testsuite/rust/compile/complex-path1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcomplex-path1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcomplex-path1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcomplex-path1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,18 @@\n+// { dg-additional-options \"-w\" }\n+mod a {\n+    pub fn foo() {}\n+}\n+\n+mod b {\n+    pub fn foo() {\n+        super::a::foo();\n+    }\n+}\n+\n+mod foo {\n+    pub struct bar(pub i32);\n+}\n+\n+fn test() -> crate::foo::bar {\n+    foo::bar(123)\n+}"}, {"sha": "9b974b96bbbdbae77907bd03b8e77b7c550699d5", "filename": "gcc/testsuite/rust/compile/const-issue1440.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst-issue1440.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,76 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn wrapping_add<T>(a: T, b: T) -> T;\n+        pub fn rotate_left<T>(a: T, b: T) -> T;\n+        pub fn rotate_right<T>(a: T, b: T) -> T;\n+        pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\n+    }\n+}\n+\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_transmute\", since = \"1.46.0\")]\n+        pub fn transmute<T, U>(_: T) -> U;\n+        pub fn size_of<T>() -> usize;\n+    }\n+}\n+\n+macro_rules! impl_uint {\n+    ($($ty:ident = $lang:literal),*) => {\n+        $(\n+            impl $ty {\n+                pub fn wrapping_add(self, rhs: Self) -> Self {\n+                    // intrinsics::wrapping_add(self, rhs)\n+                    self + rhs\n+                }\n+\n+                pub fn rotate_left(self, n: u32) -> Self {\n+                    unsafe {\n+                        intrinsics::rotate_left(self, n as Self)\n+                    }\n+                }\n+\n+                pub fn rotate_right(self, n: u32) -> Self {\n+                    unsafe {\n+                        intrinsics::rotate_right(self, n as Self)\n+                    }\n+                }\n+\n+                pub fn to_le(self) -> Self {\n+                    #[cfg(target_endian = \"little\")]\n+                    {\n+                        self\n+                    }\n+                }\n+\n+                pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                    // { dg-error \"only functions marked as .const. are allowed to be called from constant contexts\" \"\" { target *-*-* } .-1 }\n+                    Self::from_le(Self::from_ne_bytes(bytes))\n+                }\n+\n+                pub const fn from_le(x: Self) -> Self {\n+                    #[cfg(target_endian = \"little\")]\n+                    {\n+                        x\n+                    }\n+                }\n+\n+                pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                    // { dg-error \"only functions marked as .const. are allowed to be called from constant contexts\" \"\" { target *-*-* } .-1 }\n+                    unsafe { mem::transmute(bytes) }\n+                }\n+            }\n+        )*\n+    }\n+}\n+\n+impl_uint!(\n+    u8 = \"u8\",\n+    u16 = \"u16\",\n+    u32 = \"u32\",\n+    u64 = \"u64\",\n+    u128 = \"u128\",\n+    usize = \"usize\"\n+);"}, {"sha": "5f19c674c947c5818205fb1de8b5f2a33028ed1c", "filename": "gcc/testsuite/rust/compile/const1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+fn bar() {}\n+\n+const fn foo() {\n+    bar(); // { dg-error \"only functions marked as .const. are allowed to be called from constant contexts\" }\n+}\n+"}, {"sha": "17b6de573dd29aa63548c72571eddb4484d61fc7", "filename": "gcc/testsuite/rust/compile/const2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-w\" }\n+\n+const fn foo() {\n+    const fn bar() {}\n+\n+    bar();\n+}"}, {"sha": "22dc3d356cacca470699724b7ee3bc17d72ba223", "filename": "gcc/testsuite/rust/compile/const3.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+fn size() -> usize {\n+    15\n+}\n+\n+fn main() {\n+    let a = [15; size()]; // { dg-error \"only functions marked as .const. are allowed to be called from constant contexts\" }\n+}"}, {"sha": "bcad8ee6a197cb08f399a0dfdb0574e5ce49e442", "filename": "gcc/testsuite/rust/compile/const_generics_1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,19 @@\n+// { dg-additional-options \"-w\" }\n+\n+// There are errors about unused generic parameters, but we can't handle that yet.\n+// Still, this code is invalid Rust.\n+\n+mod sain {\n+    struct Foo<const N: usize>;\n+    struct Bar<T, const N: usize>;\n+    struct Baz<'l, T, const N: usize>;\n+}\n+\n+mod doux {\n+    struct Foo<const N: usize = 15>;\n+    struct Bar<T, const N: usize = { 14 * 2 }>;\n+\n+    const N_DEFAULT: usize = 3;\n+\n+    struct Baz<'l, T, const N: usize = N_DEFAULT>;\n+}"}, {"sha": "98495cf404d4e118d5c71b7d357ceb297da1c220", "filename": "gcc/testsuite/rust/compile/const_generics_2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+struct Foo<const N>; // { dg-error \"expecting .:. but .>. found\" }\n+struct Bar<const N: >; // { dg-error \"unrecognised token .>. in type\" }\n+struct Baz<const N: usize = >; // { dg-error \"invalid token for start of default value for const generic parameter\" }\n+// { dg-error \"unrecognised token .>. in type\" \"\" { target *-*-* } .-1 }"}, {"sha": "6a3a0fe27bf3ccdaed81abf8198bd7e7c57b4b62", "filename": "gcc/testsuite/rust/compile/const_generics_3.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,26 @@\n+// { dg-additional-options \"-w\" }\n+\n+const M: usize = 4;\n+\n+struct Foo<T, const N: usize = 1> {\n+    // FIXME: This error is bogus. But having it means parsing is valid!\n+    value: [i32; N], // { dg-error \"failed to find name: N\" }\n+}\n+\n+fn main() {\n+    let foo = Foo::<i32> { value: [15] };\n+    let foo = Foo::<i32, 2> { value: [15, 13] };\n+    let foo: Foo<i32, 2> = Foo { value: [15, 13] };\n+    let foo: Foo<i32, 2> = Foo::<i32, 2> { value: [15, 13] };\n+    let foo: Foo<i32, { 1 + 1 }> = Foo { value: [15, 13] };\n+    let foo = Foo::<i32, { 1 + 1 }> { value: [15, 13] };\n+    let foo: Foo<i32, { 1 + 1 }> = Foo::<i32, { 1 + 1 }> { value: [15, 13] };\n+    let foo: Foo<i32, M> = Foo::<i32, 4> {\n+        value: [15, 13, 11, 9],\n+    };\n+\n+    // FIXME: Add proper const typecheck errors here\n+    let invalid_foo: Foo<i32, { 1 + 1 }> = Foo::<i32, 3> { value: [15, 13] };\n+    let invalid_foo: Foo<i32, { 1 + 1 }> = Foo::<i32, M> { value: [15, 13] };\n+    let invalid_foo: Foo<i32> = Foo::<i32, 2> { value: [15, 13] };\n+}"}, {"sha": "8a3754da433fe66105cc909db88783c5618df637", "filename": "gcc/testsuite/rust/compile/const_generics_4.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-w\" }\n+\n+const P: usize = 14;\n+\n+struct Foo<const N: usize = { M }>; // { dg-error \"failed to find name: M\" }\n+struct Bar<const N: usize = { P }>;\n+struct Baz<const N: NotAType = { P }>; // { dg-error \"failed to resolve TypePath: NotAType in this scope\" }"}, {"sha": "5344e31a140499aff5de49c2c0a2f3096fcbc8d1", "filename": "gcc/testsuite/rust/compile/const_generics_5.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+struct Foo<const N: usize = { 14 }>;\n+\n+const M: usize = 15;\n+type N = Foo<3>;\n+\n+fn main() {\n+    let _: Foo<15> = Foo;\n+    let _: Foo<{ M }> = Foo;\n+    let _: Foo<M> = Foo;\n+    // bogus error, but it means the above const generic gets disambiguated properly\n+    let _: Foo<N> = Foo; // { dg-error \"TypePath Foo<N> declares generic arguments but the type Foo{Foo {}} does not have any\" }\n+}"}, {"sha": "de261236d933188dcea0dccd51bb358c56583efb", "filename": "gcc/testsuite/rust/compile/const_generics_6.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_6.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,2 @@\n+struct Foo<const N: usize>;\n+struct Bar<const N: usize = { 15i32 }>; // { dg-error \"expected .usize. got .i32.\" }"}, {"sha": "994312b52cc6673f3e6461c873abc314c11b7f28", "filename": "gcc/testsuite/rust/compile/continue1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcontinue1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcontinue1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcontinue1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let mut a = 1;\n+    let mut b = 1;\n+\n+    let _fib = {\n+        continue; // { dg-error \"cannot 'continue' outside of a loop\" }\n+        // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n+        123\n+    };\n+}"}, {"sha": "1dbe95731e1d7ef1763dc6fef9a0d5fb34bb31ae", "filename": "gcc/testsuite/rust/compile/deadcode_err1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdeadcode_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdeadcode_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdeadcode_err1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+fn foo() -> i32 {\n+    return 1;\n+\n+    let mut a = 1; // { dg-warning \"unreachable statement\" }\n+    a = 1.1; // { dg-warning \"unreachable statement\" }\n+    // { dg-error \"expected .<integer>. got .<float>.\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "8c0eb4617a76b3d8451f2e1c99f157cd70e831fe", "filename": "gcc/testsuite/rust/compile/deadcode_err2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdeadcode_err2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdeadcode_err2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdeadcode_err2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+fn foo() -> i32 {\n+    return 1;\n+    return 1.5; // { dg-error \"expected .i32. got .<float>.\" }\n+    // { dg-warning \"unreachable statement\" \"\" { target *-*-* } .-1 } \n+}\n+\n+fn bar() -> i32 {\n+    return 1.5; // { dg-error \"expected .i32. got .<float>.\" }\n+    return 1;\n+    // { dg-warning \"unreachable statement\" \"\" { target *-*-* } .-1 } \n+}\n+\n+fn main() {\n+    foo();\n+    bar();\n+}"}, {"sha": "90b0e575b45f947e3989d1efb2c997de922e7c73", "filename": "gcc/testsuite/rust/compile/debug-diagnostics-default.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics-default.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics-default.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics-default.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+// Make sure we don't see any 'note's:\n+// { dg-bogus {note: } \"\" { target *-*-* } 0 }\n+\n+fn main() {\n+}"}, {"sha": "77b82b35e62561d64cd0f61adf9f53ba77999bab", "filename": "gcc/testsuite/rust/compile/debug-diagnostics-off.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics-off.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics-off.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics-off.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-fno-rust-debug\" }\n+\n+// Make sure we don't see any 'note's:\n+// { dg-bogus {note: } \"\" { target *-*-* } 0 }\n+\n+fn main() {\n+}"}, {"sha": "847fd24d7bd7b3cb8587ae2e038770e91b9f5e97", "filename": "gcc/testsuite/rust/compile/debug-diagnostics-on.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics-on.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics-on.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdebug-diagnostics-on.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-frust-debug\" }\n+\n+// Just scan for one of the Rust front end debug diagnostics:\n+// { dg-message {note: Attempting to parse file: .+/gcc/testsuite/rust/compile/debug-diagnostics-on\\.rs} \"\" { target *-*-* } 0 }\n+\n+fn main() {\n+}"}, {"sha": "0ada77f69cf76627b43ef274c6df7b59bf0c8ebd", "filename": "gcc/testsuite/rust/compile/doc_isolated_cr_block_comment.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_block_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_block_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_block_comment.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+// { dg-error \"Isolated CR\" \"\" { target *-*-* } .+1 }\n+/** doc cr\r comment */\n+pub fn main () { }"}, {"sha": "7db35341bee163327ceaffeb36578600ef097b80", "filename": "gcc/testsuite/rust/compile/doc_isolated_cr_inner_block_comment.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_inner_block_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_inner_block_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_inner_block_comment.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+pub fn main ()\n+{\n+// { dg-error \"Isolated CR\" \"\" { target *-*-* } .+1 }\n+  /*! doc cr\r comment */\n+}"}, {"sha": "d75da75e2189b0e1ebd255e9f849382fc53dd52d", "filename": "gcc/testsuite/rust/compile/doc_isolated_cr_inner_line_comment.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_inner_line_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_inner_line_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_inner_line_comment.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+pub fn main ()\n+{\n+// { dg-error \"Isolated CR\" \"\" { target *-*-* } .+1 }\n+  //! doc cr\r comment\n+}"}, {"sha": "7b6ef989c308ad9f658c19163d40d7f7dfce7867", "filename": "gcc/testsuite/rust/compile/doc_isolated_cr_line_comment.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_line_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_line_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdoc_isolated_cr_line_comment.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+// { dg-error \"Isolated CR\" \"\" { target *-*-* } .+1 }\n+/// doc cr\r comment\n+pub fn main () { }"}, {"sha": "ab39955eca05fd5b400f5505ead52f619b09f84e", "filename": "gcc/testsuite/rust/compile/dup_fields.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdup_fields.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdup_fields.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fdup_fields.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,23 @@\n+struct S { a: i32, b: i32, c: u8, a: i128 }\n+// { dg-error \"duplicate field\" \"\" { target *-*-* } .-1 }\n+\n+union U\n+  {\n+    a: i32,\n+    b: i32,\n+    c: u8,\n+    b: char // { dg-error \"duplicate field\" \"\" { target *-*-* } }\n+  }\n+\n+fn main ()\n+{\n+  struct SS { alpha: i32, beta: i32, gamma: u8, gamma: i128 }\n+  // { dg-error \"duplicate field\" \"\" { target *-*-* } .-1 }\n+\n+  union UU\n+    {\n+      alpha: i32, beta: i32,\n+      gamma: u8, beta: char\n+      // { dg-error \"duplicate field\" \"\" { target *-*-* } .-1 }\n+    }\n+}"}, {"sha": "3d344d3e7588ecb37aef05c2dd0ea01e467bb8d9", "filename": "gcc/testsuite/rust/compile/empty_comment_before_match.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fempty_comment_before_match.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fempty_comment_before_match.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fempty_comment_before_match.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+fn foo (x: i8) -> i32 { // { dg-warning \"function is never used\" }\n+    //\n+    match x {\n+        1 => { return 1; }\n+        _ => { return 0; }\n+    }\n+}"}, {"sha": "79454202aadf85fd9db5588626979349583794ea", "filename": "gcc/testsuite/rust/compile/expected_type_args2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fexpected_type_args2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fexpected_type_args2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fexpected_type_args2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+struct Foo<A>(A);\n+\n+fn main() {\n+    let a: Foo = Foo::<i32>(123);\n+    // { dg-error \"generic item takes at least 1 type arguments but 0 were supplied\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "ba07239207a6adfd10a6b8134e1f6973f8552f62", "filename": "gcc/testsuite/rust/compile/expected_type_args3.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fexpected_type_args3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fexpected_type_args3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fexpected_type_args3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+struct Foo<A>(A);\n+\n+impl Foo {\n+    // { dg-error \"generic item takes at least 1 type arguments but 0 were supplied\" \"\" { target *-*-* } .-1 }\n+    fn test() -> i32 {\n+        123\n+    }\n+}"}, {"sha": "6758a3898e308308d6c41306d8fa89952f8aed6a", "filename": "gcc/testsuite/rust/compile/func1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn test(x: i32) -> bool {\n+    return x + 1; // { dg-error \"expected .bool. got .i32.\" }\n+}\n+\n+fn main() {\n+    let an_integer = 5;\n+\n+    let call_test = test(1);\n+}"}, {"sha": "0b8d999fec172310a7b14eb6634b43d9348e419d", "filename": "gcc/testsuite/rust/compile/func2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+fn test(a: i32, b: i32) -> i32 {\n+    a + b\n+}\n+\n+fn main() {\n+    let a = test(1); // { dg-error \"unexpected number of arguments 1 expected 2\" }\n+}"}, {"sha": "2a329476118748293b6244330a2f5ce859cf3d8e", "filename": "gcc/testsuite/rust/compile/func3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn test(a: i32, b: i32) -> i32 {\n+    a + b\n+}\n+\n+fn main() {\n+    let a = test(1, true);\n+    // { dg-error \"expected .i32. got .bool.\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"Type Resolution failure on parameter\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "3b2d2b0d773a5080d67fb2bd5622e647964a704d", "filename": "gcc/testsuite/rust/compile/func4.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+fn func() -> i32 { // { dg-error \"expected .i32. got ....\" }\n+}\n+\n+fn main() {\n+    func();\n+}"}, {"sha": "05624f524e9416f857e7529c779d2e04a55e373a", "filename": "gcc/testsuite/rust/compile/func5.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ffunc5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+fn func() -> i32 {\n+    return; // { dg-error \"expected .i32. got ....\" }\n+}\n+\n+fn main() {\n+    func();\n+}"}, {"sha": "0a132bf5d6bf2c51314fbacd49419617b8642132", "filename": "gcc/testsuite/rust/compile/generic-default1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgeneric-default1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgeneric-default1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgeneric-default1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+struct Foo<A = i321>(A);\n+// { dg-error \"failed to resolve TypePath: i321\" \"\" { target *-*-* } .-1 }\n+\n+fn main() {\n+    let a;\n+    a = Foo(123);\n+}"}, {"sha": "de1bbf5dafb12a27c178ad7077418aa9dfc7e972", "filename": "gcc/testsuite/rust/compile/generics1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+// { dg-error \"expected .i32. got .i8.\" \"\" { target *-*-* } 0 }\n+\n+struct GenericStruct<T>(T, usize);\n+\n+fn main() {\n+    let a2: GenericStruct<i8>;\n+    a2 = GenericStruct::<_>(1, 456);\n+\n+    let b2: i32 = a2.0;\n+    let c2: usize = a2.1;\n+}"}, {"sha": "a734fa8a19786da45c9efff65116478441a5bd91", "filename": "gcc/testsuite/rust/compile/generics10.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics10.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+struct Foo<A, B>(A, B);\n+\n+impl<X = i32> Foo<X, f32> { // { dg-error \"defaults for type parameters are not allowed here\" }\n+    fn new(a: X, b: f32) -> Self {\n+        Self(a, b)\n+    }\n+}\n+\n+fn main() {\n+    let a;\n+    a = Foo::new(123, 456f32);\n+}"}, {"sha": "4d3b9e1777c1ea3c2ffb077d6bfce9243f4ee7c9", "filename": "gcc/testsuite/rust/compile/generics11.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics11.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+struct Foo<T>(T, bool);\n+\n+impl<T> Foo<T> {\n+    fn test() -> i32 {\n+        123\n+    }\n+}\n+\n+fn main() {\n+    let a = Foo::test();\n+    // { dg-error \"type annotations needed\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "f1ac8b0314b43bf4c2d6fb0ead5aab82a2ab55e3", "filename": "gcc/testsuite/rust/compile/generics12.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics12.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics12.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics12.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    bar();\n+    // { dg-error \"type annotations needed\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn bar<T>() {}"}, {"sha": "05c75c5f63d74764f461a26dcca3710806874126", "filename": "gcc/testsuite/rust/compile/generics13.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics13.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1 @@\n+struct Foo<A, 'a>; // { dg-error \"invalid order for generic parameters: lifetimes should always come before types\" }"}, {"sha": "5812b1330388420fb5855addca4c2441c394006b", "filename": "gcc/testsuite/rust/compile/generics2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+// { dg-error \"expected .i32. got .i8.\" \"\" { target *-*-* } 0 }\n+\n+struct GenericStruct<T>(T, usize);\n+\n+fn main() {\n+    let a2: GenericStruct<i8>;\n+    a2 = GenericStruct(1, 456);\n+\n+    let b2: i32 = a2.0;\n+    let c2: usize = a2.1;\n+}"}, {"sha": "2d4210588fb50dbaf35c9b85ca41c2c0d0b9f360", "filename": "gcc/testsuite/rust/compile/generics3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+// { dg-error \"expected .i32. got .i8.\" \"\" { target *-*-* } 0 }\n+struct GenericStruct<T>(T, usize);\n+\n+fn main() {\n+    let a2;\n+    a2 = GenericStruct::<i8>(1, 456);\n+\n+    let b2: i32 = a2.0;\n+    let c2: usize = a2.1;\n+}"}, {"sha": "8af13586a373ac9a6d7ef3df5e24850385dd2a65", "filename": "gcc/testsuite/rust/compile/generics4.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+struct GenericStruct<T>(T, usize);\n+\n+fn main() {\n+    let a2;\n+    a2 = GenericStruct::<i8, i32>(1, 456); // { dg-error \"generic item takes at most 1 type arguments but 2 were supplied\" }\n+                                           // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n+                                           // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-2 }\n+                                           // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-3 }\n+\n+    let b2: i32 = a2.0;\n+    // { dg-error {Expected Tuple or ADT got: T\\?} \"\" { target *-*-* } .-1 }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n+    let c2: usize = a2.1;\n+    // { dg-error {Expected Tuple or ADT got: T\\?} \"\" { target *-*-* } .-1 }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "6c847b5a29b5ed57cac2a2cfe1bfbbe19c863e6f", "filename": "gcc/testsuite/rust/compile/generics5.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+struct GenericStruct<T>(T, usize);\n+\n+fn main() {\n+    let a2;\n+    a2 = GenericStruct::<i8, T>(1, 456);\n+    // { dg-error \"failed to resolve TypePath: T\" \"\" { target *-*-* } .-1 }\n+\n+    let b2: i32 = a2.0;\n+    let c2: usize = a2.1;\n+}"}, {"sha": "3b81e1bbee1041c0a29aa4d960e70147dc7f6a90", "filename": "gcc/testsuite/rust/compile/generics6.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics6.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,31 @@\n+struct Foo<A> {\n+    a: A,\n+}\n+\n+impl Foo<isize> {\n+    fn test() -> i32 { // { dg-error \"possible candidate\" \"TODO\" { xfail *-*-* } }\n+        123\n+    }\n+\n+    fn bar(self) -> isize {\n+        self.a\n+    }\n+}\n+\n+impl Foo<f32> {\n+    fn test() -> i32 { // { dg-error \"possible candidate\" \"TODO\" { xfail *-*-* } }\n+        123\n+    }\n+\n+    fn bar(self) -> f32 {\n+        self.a\n+    }\n+}\n+\n+fn main() {\n+    let a: i32 = Foo::test(); // { dg-error \"multiple applicable items in scope for: test\" }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n+    // { dg-error {Failed to resolve expression of function call} \"\" { target *-*-* } .-2 }\n+    // { duplicate _dg-error {failed to type resolve expression} \"\" { target *-*-* } .-3 }\n+}\n+"}, {"sha": "2a41632e693a6df235170416087065c88c93765e", "filename": "gcc/testsuite/rust/compile/generics7.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics7.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,26 @@\n+struct Foo<A> {\n+    a: A,\n+}\n+\n+impl Foo<isize> {\n+    fn bar(self) -> isize { // { dg-error \"duplicate definitions with name bar\" }\n+        self.a\n+    }\n+}\n+\n+impl Foo<char> {\n+    fn bar(self) -> char { // { dg-error \"duplicate definitions with name bar\" }\n+        self.a\n+    }\n+}\n+\n+impl<T> Foo<T> {\n+    fn bar(self) -> T {\n+        self.a\n+    }\n+}\n+\n+fn main() {\n+    let a = Foo { a: 123 };\n+    a.bar();\n+}"}, {"sha": "ceefc5d2c6a3e51fdb8126746027cb201b8a6341", "filename": "gcc/testsuite/rust/compile/generics8.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics8.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,15 @@\n+struct Foo<A, B>(A, B);\n+\n+impl<T> Foo<i32, T> {\n+    fn test(a: T) -> T {\n+        a\n+    }\n+}\n+\n+impl Foo<i32, f32> {\n+    fn test() -> f32 { // { dg-error \"duplicate definitions with name test\" }\n+        123f32\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3766703431eca114b84bac2a8e5e80123202fdbb", "filename": "gcc/testsuite/rust/compile/generics9.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fgenerics9.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+struct Foo<A, B = (A, B)>(A, B);\n+// { dg-error \"failed to resolve TypePath: B\" \"\" { target *-*-* } .-1 }\n+\n+fn main() {\n+    let a: Foo<bool>;\n+    a = Foo::<bool>(true, (false, true));\n+\n+    let b: (bool, bool);\n+    b = a.1;\n+}"}, {"sha": "973ba80fb8662e01bf365668c4ea9b82c0985ed9", "filename": "gcc/testsuite/rust/compile/implicit_returns_err1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+fn test(x: i32) -> i32 {\n+    if x > 1 { // { dg-error \"expected .... got .<integer>.\" }\n+        1\n+    } else {\n+        2\n+    }\n+    3\n+}\n+\n+fn main() {\n+    let a = test(1);\n+}"}, {"sha": "fb90748871f56a6792b7abf8417ab50a55c4d056", "filename": "gcc/testsuite/rust/compile/implicit_returns_err2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+fn test(x: i32) -> i32 {\n+    // { dg-error \"expected .i32. got .bool.\" \"\" { target *-*-* } .-1 }\n+    return 1;\n+    // { dg-warning \"unreachable expression\" \"\" { target *-*-* } .+1 }\n+    true\n+}\n+\n+fn main() {\n+    let a = test(1);\n+}"}, {"sha": "37b1c62414c5d6753f87ed2f281889bdfa570f97", "filename": "gcc/testsuite/rust/compile/implicit_returns_err3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn test(x: i32) -> i32 { // { dg-error \"expected .i32. got ....\" }\n+    if x > 1 {\n+        1\n+    }\n+}\n+\n+fn main() {\n+    let a = test(9);\n+}"}, {"sha": "59c6a020d4c9cdda492ab8de573efd225d18e6e5", "filename": "gcc/testsuite/rust/compile/implicit_returns_err4.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fimplicit_returns_err4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+fn test(x: bool) -> bool {\n+    // { dg-error \"expected .bool. got ....\" \"\" { target *-*-*} .-1 }\n+    return x;\n+    // { dg-warning \"unreachable expression\" \"\" { target *-*-* } .+1 }\n+    ()\n+}\n+\n+fn main() {\n+    let a = test(true);\n+}"}, {"sha": "b0c0086c04c0e72bbca4b68e11c061004e657583", "filename": "gcc/testsuite/rust/compile/infer-crate-name.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Finfer-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Finfer-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Finfer-crate-name.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+pub fn does_nothing() {}\n+fn main() {\n+    does_nothing()\n+}\n+// { dg-final { scan-tree-dump-times {infer_crate_name::does_nothing} 2 gimple } }\n+// { dg-final { scan-tree-dump-times {infer_crate_name::main} 1 gimple } }"}, {"sha": "4b0f991765a3e72d47d2e3a7cba0f8bf9403ee57", "filename": "gcc/testsuite/rust/compile/inline_1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+#[inline]\n+fn test_a() {}\n+\n+// { dg-final { scan-tree-dump-times {always_inline} 1 gimple } }\n+#[inline(always)]\n+fn test_b() {}\n+\n+#[inline(never)]\n+fn test_c() {}\n+\n+fn main() {\n+    test_a();\n+    test_b();\n+    test_c();\n+}"}, {"sha": "3665fdac80452b87957624353003bae6a7d30552", "filename": "gcc/testsuite/rust/compile/inline_2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options \"-w\" }\n+#[inline(A)] // { dg-error \"unknown inline option\" }\n+fn test_a() {}\n+\n+#[inline(A, B)] // { dg-error \"invalid number of arguments\" }\n+fn test_b() {}"}, {"sha": "46c85eea91e8aba738f961e2e844ac67d099aee3", "filename": "gcc/testsuite/rust/compile/issue-1005.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1005.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1005.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1005.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-w\" }\n+impl<T> *const T {\n+    fn test(self) {}\n+}"}, {"sha": "aea86a821c773e25fe0ca657247322f8626dbba7", "filename": "gcc/testsuite/rust/compile/issue-1019.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1019.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1019.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1019.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,19 @@\n+trait A<T> {\n+    type Output;\n+\n+    fn test(self, a: &T) -> &Self::Output;\n+}\n+\n+struct Foo<T> {\n+    // { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+    start: T,\n+    end: T,\n+}\n+\n+impl<X> A<X> for Foo<usize> {\n+    type Output = X;\n+\n+    fn test(self, a: &X) -> &Self::Output {\n+        a\n+    }\n+}"}, {"sha": "5a0fe6cf5304b136d55a36602e7d5805725f5ff4", "filename": "gcc/testsuite/rust/compile/issue-1023.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1023.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1023.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1023.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-w\" }\n+fn foo(e: &str) -> &str {\n+    &\"\"\n+}"}, {"sha": "939f0f981e007dc5e5cecdde62636cdc33daaba6", "filename": "gcc/testsuite/rust/compile/issue-1031.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1031.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,17 @@\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+    pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<T> *const T {\n+    pub const unsafe fn offset(self, count: isize) -> *const T {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        unsafe { offset(self, count) }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        unsafe { self.offset(count as isize) }\n+    }\n+}"}, {"sha": "23d7700545244221232ed6560da7107fe82cba68", "filename": "gcc/testsuite/rust/compile/issue-1034.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1034.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1034.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1034.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+trait Foo<T> {\n+    type Output;\n+\n+    fn test(self, slice: &T) -> &Self::Output;\n+}\n+\n+struct Bar<T>(T);\n+// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+\n+impl<T> Foo<[T]> for Bar<usize> {\n+    type Output = [T];\n+\n+    fn test(self, slice: &[T]) -> &[T] {\n+        slice\n+    }\n+}"}, {"sha": "635af293dbb7aa6de83a5753cbdaa8f1f19b0bac", "filename": "gcc/testsuite/rust/compile/issue-1089.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1089.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1089.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1089.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options \"-w\" }\n+pub mod test_mod;\n+\n+fn main() {\n+    let a = test_mod::Test(123);\n+}"}, {"sha": "462426b679dad20c0ff5d33fb8d991bf209f60d3", "filename": "gcc/testsuite/rust/compile/issue-1128.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1128.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1128.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1128.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+pub trait Hasher {\n+    fn write(&mut self, bytes: &[u8]);\n+    fn write_u8(&mut self, i: u8) {\n+        self.write(&[i])\n+    }\n+}"}, {"sha": "a15903983f0489af01f0d427ebb5ad9b7bf3b8d8", "filename": "gcc/testsuite/rust/compile/issue-1129-1.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-w\" }\n+fn write_u8(i: u8) {\n+    let x: &[u8] = &[i];\n+}"}, {"sha": "25d30faf4aa9678e54752bceeb7ad6eb87f14dc3", "filename": "gcc/testsuite/rust/compile/issue-1129-2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1129-2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,22 @@\n+// { dg-additional-options \"-w\" }\n+pub trait Hasher {\n+    fn finish(&self) -> u64;\n+    fn write(&mut self, bytes: &[u8]);\n+    fn write_u8(&mut self, i: u8) {\n+        self.write(&[i])\n+    }\n+}\n+\n+struct SipHasher;\n+\n+impl Hasher for SipHasher {\n+    #[inline]\n+    fn write(&mut self, msg: &[u8]) {\n+        loop {}\n+    }\n+\n+    #[inline]\n+    fn finish(&self) -> u64 {\n+        0\n+    }\n+}"}, {"sha": "92200c7cd5f777ddfd87c9fbee59bf3d4f4ced82", "filename": "gcc/testsuite/rust/compile/issue-1130.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1130.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1130.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1130.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,47 @@\n+// { dg-additional-options \"-w\" }\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        fn size_of<T>() -> usize;\n+        fn transmute<U, V>(_: U) -> V;\n+    }\n+}\n+\n+impl u16 {\n+    fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n+        unsafe { mem::transmute(self) }\n+    }\n+}\n+\n+pub trait Hasher {\n+    fn finish(&self) -> u64;\n+\n+    fn write(&mut self, bytes: &[u8]);\n+\n+    fn write_u8(&mut self, i: u8) {\n+        self.write(&[i])\n+    }\n+\n+    fn write_i8(&mut self, i: i8) {\n+        self.write_u8(i as u8)\n+    }\n+\n+    fn write_u16(&mut self, i: u16) {\n+        self.write(&i.to_ne_bytes())\n+    }\n+\n+    fn write_i16(&mut self, i: i16) {\n+        self.write_u16(i as u16)\n+    }\n+}\n+\n+pub struct SipHasher;\n+\n+impl Hasher for SipHasher {\n+    #[inline]\n+    fn write(&mut self, msg: &[u8]) {}\n+\n+    #[inline]\n+    fn finish(&self) -> u64 {\n+        0\n+    }\n+}"}, {"sha": "fd158abc700f3026dddbf54becd81aa5a67f43cf", "filename": "gcc/testsuite/rust/compile/issue-1131.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1131.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1131.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1131.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+extern \"rust-intrinsic\" {\n+    fn size_of<T>() -> usize;\n+    fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+}"}, {"sha": "18eee9e6b4a63695584975c16bdd2c192be7bd14", "filename": "gcc/testsuite/rust/compile/issue-1152.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1152.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1152.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1152.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+fn test() {\n+    let f = [0; -4_isize];\n+    // { dg-error \"expected .usize. got .isize.\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n+    let f = [0_usize; -1_isize];\n+    // { dg-error \"expected .usize. got .isize.\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "f5889698d70e5a8aad2cca17c6e113dd7cc438f6", "filename": "gcc/testsuite/rust/compile/issue-1165.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1165.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1165.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1165.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+struct Foo<T>(T);\n+\n+fn main() {\n+    &Foo(123);\n+}"}, {"sha": "5c2a9173241d38fdb45d78cda9aeae4b2b363067", "filename": "gcc/testsuite/rust/compile/issue-1173.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1173.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1173.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1173.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,23 @@\n+// { dg-additional-options \"-w\" }\n+\n+#![feature(intrinsics)]\n+\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        pub fn transmute<U, V>(_: U) -> V;\n+    }\n+}\n+\n+pub trait Hasher {\n+    fn write(&mut self, bytes: &[u8]);\n+    fn write_u16(&mut self, i: u16) {\n+        self.write(unsafe { &mem::transmute::<_, [u8; 2]>(i) })\n+    }\n+}\n+\n+pub struct SipHasher;\n+\n+impl Hasher for SipHasher {\n+    #[inline]\n+    fn write(&mut self, msg: &[u8]) {}\n+}"}, {"sha": "f5f9e5ff08d329a6e4c92a5d5273d7df3446835e", "filename": "gcc/testsuite/rust/compile/issue-1226.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1226.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1226.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1226.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options \"-w\" }\n+const TEST: *mut u8 = 123 as *mut u8;\n+\n+fn test() {\n+    let a = TEST;\n+}"}, {"sha": "c6d5932c0041ea37c66655557a1c956e22d5ec5f", "filename": "gcc/testsuite/rust/compile/issue-1234.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1234.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1234.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1234.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+fn foo() -> u8 {\n+    // { dg-warning \"function is never used\" \"\" { target *-*-* } .-1 }\n+    1u8 << 2u32\n+}"}, {"sha": "098b337455fe0c5049769a9ada0ea7326c7c842b", "filename": "gcc/testsuite/rust/compile/issue-1235.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1235.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1235.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1235.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,21 @@\n+// { dg-additional-options \"-w\" }\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n+}\n+\n+pub union Repr<T> {\n+    rust: *const [T],\n+    rust_mut: *mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+impl<T> [T] {\n+    pub const fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n+\n+    pub const fn len(&self) -> usize {\n+        unsafe { Repr { rust: self }.raw.len }\n+    }\n+}"}, {"sha": "542be89794982a55617a28aa47fa181ee8452bf7", "filename": "gcc/testsuite/rust/compile/issue-1237.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1237.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1237.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1237.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,23 @@\n+// { dg-additional-options \"-w\" }\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\n+    }\n+}\n+\n+impl<T> *const T {\n+    pub unsafe fn offset(self, count: isize) -> *const T {\n+        unsafe { intrinsics::offset(self, count) }\n+    }\n+}\n+\n+impl<T> [T] {\n+    pub unsafe fn get_unchecked(&self, index: usize) -> &T {\n+        unsafe { &*(self as *const [T] as *const T).offset(index as isize) }\n+    }\n+}\n+\n+#[inline]\n+unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n+    (unsafe { *buf.get_unchecked(start) } as u64)\n+}"}, {"sha": "b16e1e0b0d90eb780dbf03e7515f99c2e035e4dc", "filename": "gcc/testsuite/rust/compile/issue-1251.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1251.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1251.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1251.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,14 @@\n+// { dg-additional-options \"-w\" }\n+mod a {\n+    pub mod b {\n+        pub mod a {\n+            pub fn foo() {}\n+        }\n+    }\n+\n+    pub fn bidule() {\n+        crate::a::b::a::foo()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5dd6418de4cd29e3f1a9334e54bdba857389ea3f", "filename": "gcc/testsuite/rust/compile/issue-1271.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1271.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1271.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1271.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+// { dg-additional-options \"-w\" }\n+fn test() {\n+    let a: &str = \"TEST 1\";\n+    let b: &str = &\"TEST 2\";\n+}"}, {"sha": "343aaab078b6aaefa291e4dacecca3ebbc3af221", "filename": "gcc/testsuite/rust/compile/issue-1289.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,43 @@\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n+        pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+    }\n+}\n+\n+#[lang = \"mut_ptr\"]\n+impl<T> *mut T {\n+    pub const unsafe fn offset(self, count: isize) -> *mut T {\n+        unsafe { intrinsics::offset(self, count) as *mut T }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        unsafe { self.offset(count as isize) }\n+    }\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<T> *const T {\n+    pub const unsafe fn offset(self, count: isize) -> *mut T {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        unsafe { intrinsics::offset(self, count) as *mut T }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        unsafe { self.offset(count as isize) }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a: *mut _ = &mut 123;\n+    unsafe {\n+        let _b = a.add(123);\n+    }\n+\n+    0\n+}"}, {"sha": "a6174253a21357435ed9b3ade4aa8d33ea6e8f25", "filename": "gcc/testsuite/rust/compile/issue-1323-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1323-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1323-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1323-1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,18 @@\n+fn main() {\n+    let mut x = [1, 2, 3];\n+    let y: i32 = x[0];\n+    print_int(y);\n+}\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn print_int(value: i32) {\n+    let s = \"%d\\n\\0\";\n+    let s_p = s as *const str;\n+    let c_p = s_p as *const i8;\n+    unsafe {\n+        printf(c_p, value as isize);\n+    }\n+}"}, {"sha": "45168b22fa729f56c0fe737e3ffba2b6c25ffd24", "filename": "gcc/testsuite/rust/compile/issue-1323-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1323-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1323-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1323-2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+fn print_int(value: i32) {\n+    let s = \"%d\\n\\0\";\n+    let s_p = s as *const str;\n+    let c_p = s_p as *const i8;\n+    unsafe {\n+        printf(c_p, value as isize);\n+    }\n+}\n+\n+fn main() {\n+    print_int(5);\n+}\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}"}, {"sha": "cca12e8fc714c41a6fb373be01ba7fd487402c6d", "filename": "gcc/testsuite/rust/compile/issue-1383.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1383.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1383.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1383.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+pub fn generic_function<X>(a: X) -> X {\n+    a\n+}\n+\n+fn main() -> i32 {\n+    let a = generic_function(123);\n+    a - 123\n+}"}, {"sha": "e09f01b62e5b2b2eca2f5cb6c5a2fa7d3d6bc2a7", "filename": "gcc/testsuite/rust/compile/issue-1393.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1393.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1393.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1393.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+fn tst() {\n+    let a = 123;\n+    let b = 0;\n+    let _c = if b == 0 {\n+        (a & 0x7fffff) << 1\n+    } else {\n+        (a & 0x7fffff) | 0x800000\n+    };\n+}\n+\n+fn main() {\n+    tst()\n+}"}, {"sha": "e0543e6247c4a071bad0dd1f85589505835c9dc5", "filename": "gcc/testsuite/rust/compile/issue-1447.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1447.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1447.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1447.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-w\" }\n+struct PhantomData<T>;\n+\n+struct Hasher<S> {\n+    _marker: PhantomData<S>,\n+}\n+\n+struct Sip24Rounds;\n+\n+struct SipHasher24 {\n+    hasher: Hasher<Sip24Rounds>,\n+}\n+\n+impl SipHasher24 {\n+    pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher24 {\n+        SipHasher24 {\n+            hasher: Hasher::new_with_keys(),\n+        }\n+    }\n+}\n+\n+impl<S> Hasher<S> {\n+    fn new_with_keys() -> Hasher<S> {\n+        Hasher {\n+            _marker: PhantomData,\n+        }\n+    }\n+}"}, {"sha": "cb8027b9c7f8863f27324e37b46c13fc98d7da5f", "filename": "gcc/testsuite/rust/compile/issue-407-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407-2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,21 @@\n+// #407\n+pub fn loopy()  {\n+    let mut a = 1;\n+    // { dg-error {failed to parse expr with block in parsing expr statement} \"\" { target *-*-* } .+2 }\n+    // { dg-error {failed to parse statement or expression without block in block expression} \"\" { target *-*-* } .+1 }\n+    loop {\n+        // { dg-error {failed to parse expr with block in parsing expr statement} \"\" { target *-*-* } .+2 }\n+        // { dg-error {failed to parse statement or expression without block in block expression} \"\" { target *-*-* } .+1 }\n+\tif a < 40 {\n+\t    a + = 1; // { dg-error \"found unexpected token '=' in null denotation\" }\n+            // { dg-error {failed to parse expression for expression without block \\(pratt-parsed expression is null\\)} \"\" { target *-*-* } .-1 }\n+            // { dg-error {failed to parse statement or expression without block in block expression} \"\" { target *-*-* } .-2 }\n+            // { dg-error {failed to parse if body block expression in if expression} \"\" { target *-*-* } .-3 }\n+            // { dg-error {could not parse loop body in \\(infinite\\) loop expression} \"\" { target *-*-* } .+1 }\n+\t} else {\n+\t    break;\n+\t}\n+    }\n+}\n+// { dg-error {unrecognised token '\\}' for start of item} \"\" { target *-*-* } .-1 }\n+// { dg-error {failed to parse item in crate} \"\" { target *-*-* } .-2 }"}, {"sha": "530b7ddfc125d2ed662f0135a4893e0657a17b95", "filename": "gcc/testsuite/rust/compile/issue-407.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-407.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+// This already worked before the #409 code changes.\n+fn test()  {\n+    let mut a = 1;\n+    a + = 1; // { dg-error \"found unexpected token '=' in null denotation\" }\n+    // { dg-error {failed to parse expression for expression without block \\(pratt-parsed expression is null\\)} \"\" { target *-*-* } .-1 }\n+    // { dg-error {failed to parse statement or expression without block in block expression} \"\" { target *-*-* } .-2 }\n+    // { dg-error {unrecognised token 'integer literal' for start of item} \"\" { target *-*-* } .-3 }\n+    // { dg-error {failed to parse item in crate} \"\" { target *-*-* } .-4 }\n+}"}, {"sha": "aeb5ba6755bbc58fb90a29856b767c391361dcc8", "filename": "gcc/testsuite/rust/compile/issue-557.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-557.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-557.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-557.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-w\" }\n+fn test(a: i32, _: i32) {\n+    let _ = 42 + a;\n+}"}, {"sha": "dc6a4c2eece748ad48d7a94175dad3f6a2a1ead0", "filename": "gcc/testsuite/rust/compile/issue-635-1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-635-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-635-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-635-1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+// { dg-additional-options \"-w\" }\n+fn test() -> i32 {\n+    return 10000000000000000000000000000000000000000000;\n+    // { dg-error \"integer overflows the respective type .i32.\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "335218aa52c3b205e80e6eac7b7c0ac92e8ace06", "filename": "gcc/testsuite/rust/compile/issue-635-2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-635-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-635-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-635-2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+// { dg-additional-options \"-w\" }\n+fn test() -> f32 {\n+    return 10000000000000000000000000000000000000000000.0f32;\n+    // { dg-error \"decimal overflows the respective type .f32.\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "4a96f9ff1403278239689b580b4664dd5c60c182", "filename": "gcc/testsuite/rust/compile/lookup_err1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Flookup_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Flookup_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Flookup_err1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+fn test() {\n+    fn nested() {}\n+}\n+\n+fn main() {\n+    nested(); // { dg-error \"Cannot find path .nested. in this scope\" }\n+}"}, {"sha": "31459907c08f9888a1fee9ba3d4234fcf57820a0", "filename": "gcc/testsuite/rust/compile/macro-issue1053-2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053-2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+macro_rules! m {\n+    ($e:expr $(forbidden)*) => {{}}; // { dg-error \"token .identifier. is not allowed after .expr. fragment\" }\n+                                     // { dg-error \"required first macro rule in macro rules definition could not be parsed\" \"\" { target *-*-* } .-1 }\n+                                     // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "1e968496e0ce3d2f247aaa487aa12b14bdc3d58d", "filename": "gcc/testsuite/rust/compile/macro-issue1053.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1053.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! m {\n+    ($e:expr $(,)*) => {{}};\n+}"}, {"sha": "003bbcd5067052ff279cae25af105a18b9287f71", "filename": "gcc/testsuite/rust/compile/macro-issue1224.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1224.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1224.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1224.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! impl_uint {\n+    ($($ty:ident),*) => {\n+        impl $ty {} // { dg-error \"metavariable is still repeating at this depth\" }\n+                    // { dg-error \"unrecognised token\" \"\" { target *-*-* } .-1 } // Spurious\n+                    // { dg-error \"could not parse type\" \"\" { target *-*-* } .-2 } // Spurious\n+    };\n+}\n+\n+impl_uint!(u8, u16, u32, u64, u128);"}, {"sha": "7fab787b9e8dcf54b1dca34dc243944335bedc90", "filename": "gcc/testsuite/rust/compile/macro-issue1233.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1233.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1233.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1233.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,22 @@\n+// { dg-additional-options \"-frust-cfg=A -w\" }\n+\n+macro_rules! impl_uint {\n+    ($($ty:ident = $lang:literal),*) => {\n+        $(\n+            impl $ty {\n+                pub fn to_le(self) -> Self {\n+                    #[cfg(not(A))]\n+                    {\n+                        self\n+                    }\n+                    #[cfg(A)]\n+                    {\n+                        self\n+                    }\n+                }\n+            }\n+        )*\n+    }\n+}\n+\n+impl_uint!(u8 = \"u8\", u16 = \"u16\", u32 = \"u32\");"}, {"sha": "1df6a3a0038496fc7ed61d37e5b71d028c554ee0", "filename": "gcc/testsuite/rust/compile/macro-issue1395-2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395-2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-frust-edition=2018\" }\n+\n+macro_rules! try {\n+    // { dg-error \"expecting .identifier. but .try. found\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-2 }\n+    () => {};\n+}"}, {"sha": "b0368c1610f7fb42288602fd36e2f672cee539a4", "filename": "gcc/testsuite/rust/compile/macro-issue1395.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1395.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+// Default edition is 2015 - this is valid\n+\n+macro_rules! try {\n+    () => {};\n+}"}, {"sha": "ba7b61b0b16632d0af2ebdb752f3d8aaca24b378", "filename": "gcc/testsuite/rust/compile/macro-issue1400-2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400-2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400-2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400-2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,32 @@\n+macro_rules! foo {\n+    ( ( $( $Trait: ident ),+ ) for $($Ty: ident)* ) => {\n+        $(\n+            impl $Trait for $Ty {\n+    // { dg-error \"different amount of matches used in merged repetitions: expected 4, got 1\" \"\" { target *-*-* } .-1 }\n+                fn bar() -> i32 {\n+                    14\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+trait Foo {\n+    fn bar() -> i32;\n+}\n+\n+trait Bar {\n+    fn bar() -> i32;\n+}\n+\n+trait Baz {\n+    fn bar() -> i32;\n+}\n+\n+trait Qux {\n+    fn bar() -> i32;\n+}\n+\n+struct S;\n+\n+foo! {(Foo, Bar, Baz, Qux) for S}"}, {"sha": "971bd778054eb46798f34e20fbca8abf05afe85a", "filename": "gcc/testsuite/rust/compile/macro-issue1400.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1400.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,33 @@\n+// { dg-additional-options \"-w\" }\n+\n+macro_rules! foo {\n+    ( ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n+        $(\n+            impl $Trait for $Ty {\n+                fn bar() -> i32 {\n+                    14\n+                }\n+            }\n+        )+\n+    }\n+}\n+\n+trait Foo {\n+    fn bar() -> i32;\n+}\n+\n+trait Bar {\n+    fn bar() -> i32;\n+}\n+\n+trait Baz {\n+    fn bar() -> i32;\n+}\n+\n+trait Qux {\n+    fn bar() -> i32;\n+}\n+\n+struct S;\n+\n+foo! {(Foo, Bar, Baz, Qux) for S}"}, {"sha": "8cd941891d0127d3628958fe9b448ef554ba705e", "filename": "gcc/testsuite/rust/compile/macro1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! empty_parens {\n+    () => ();\n+}"}, {"sha": "3f1453e2eda9ee446e848abfc902774abf383476", "filename": "gcc/testsuite/rust/compile/macro10.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro10.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-w\" }\n+macro_rules! foo {\n+    {} => {\n+        15\n+    };\n+}\n+\n+fn main() {\n+    let a = foo!();\n+    let b = foo![];\n+}"}, {"sha": "97b89a12d84e53a3bbc76598386d4361269f00a4", "filename": "gcc/testsuite/rust/compile/macro11.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro11.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+macro_rules! call_f {\n+    ($($f:ident)*) => { $($f();)* }\n+}\n+\n+fn f() {}\n+\n+// This is valid and should parse items\n+fn main() {\n+    call_f!(f f f f);\n+}\n+"}, {"sha": "b75fbad2c2fa24485162435471be096f49725421", "filename": "gcc/testsuite/rust/compile/macro12.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro12.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro12.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro12.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+// { dg-additional-options \"-w\" }\n+macro_rules! define_vars {\n+    ($($v:ident)*) => { $(let $v = 15;)* }\n+}\n+\n+fn main() {\n+    define_vars!(a0 b f __some_identifier);\n+}"}, {"sha": "eb8dfbbf3938600afb396f70b29a4276b7199f38", "filename": "gcc/testsuite/rust/compile/macro13.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro13.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+// { dg-additional-options \"-w\" }\n+macro_rules! create_type {\n+    ($s:ident) => {\n+        struct $s;\n+    };\n+}\n+\n+fn main() {\n+    create_type!(A);\n+\n+    let a = A;\n+}"}, {"sha": "b18c56eefc8a920a4fa5f5fdbca9dfb2f74a3d87", "filename": "gcc/testsuite/rust/compile/macro14.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro14.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro14.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro14.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+// { dg-additional-options \"-w\" }\n+macro_rules! define_vars {\n+    ($($v:ident)*) => { $(let $v = 15;)* }\n+}\n+\n+fn main() -> i32 {\n+    define_vars!(a0 b f __some_identifier);\n+\n+    b\n+}"}, {"sha": "02c739e415e93ea5bee04421b9c9850252259b62", "filename": "gcc/testsuite/rust/compile/macro15.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro15.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro15.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro15.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+// { dg-additional-options \"-w\" }\n+macro_rules! create_type {\n+    ($s:ident) => {\n+        struct $s;\n+    };\n+}\n+\n+create_type!(SomeOuterType);\n+\n+fn main() {\n+    let a = SomeOuterType;\n+}"}, {"sha": "e5e56ed3f0369e2364c6d22e18e111a6f553ff14", "filename": "gcc/testsuite/rust/compile/macro16.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro16.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro16.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro16.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    macro_rules! create_type {\n+        ($s:ident) => {\n+            struct $s(i32);\n+        };\n+    }\n+\n+    create_type!(Wrapper);\n+\n+    let _ = Wrapper(15);\n+}"}, {"sha": "743216529b781f1a6faef36ebf3a5d9d1be59666", "filename": "gcc/testsuite/rust/compile/macro17.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro17.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro17.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro17.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+macro_rules! rep {\n+    ($a:literal) => { $a }; // { dg-error \"reached recursion limit\" }\n+    ($a:literal $(, $e:literal)*) => { // { dg-error \"reached recursion limit\" }\n+        $a + rep!(0 $(, $e)*) // { dg-error \"Failed to match\" }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    rep!(1, 2)\n+}"}, {"sha": "5418725b619cd0e708fc2f24d935e8c7ad83e4f4", "filename": "gcc/testsuite/rust/compile/macro18.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro18.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro18.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro18.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,14 @@\n+// { dg-additional-options \"-w\" }\n+\n+macro_rules! take_stmt {\n+    ($s:stmt) => {\n+        $s;\n+    };\n+}\n+\n+fn main() -> i32 {\n+    take_stmt!(let complete = 15;); // { dg-error \"Failed to match any rule within macro\" }\n+    take_stmt!(let lacking = 14);\n+\n+    0\n+}"}, {"sha": "1bf9a2bfa9d388eaedb4f3b597a9542216dd0b45", "filename": "gcc/testsuite/rust/compile/macro19.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro19.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro19.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro19.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,19 @@\n+// { dg-additional-options \"-w\" }\n+\n+macro_rules! call_without_semi {\n+    () => {\n+        f()\n+    };\n+    (block) => {{\n+        f()\n+    }};\n+}\n+\n+fn f() {}\n+\n+fn main() -> i32 {\n+    call_without_semi!();\n+    call_without_semi!(block);\n+\n+    0\n+}"}, {"sha": "a437655ef70828bf6359767a67c2a5c93edc2610", "filename": "gcc/testsuite/rust/compile/macro2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! empty_brackets {\n+    [] => [];\n+}"}, {"sha": "9f3cbca012ceb5beddf97417f983d1f169cfea74", "filename": "gcc/testsuite/rust/compile/macro20.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro20.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro20.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro20.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+macro_rules! define_trait {\n+    ($assoc:ident, $i:item) => {\n+        type $assoc;\n+\n+        $i\n+    };\n+}\n+\n+trait DefinedThroughMacros {\n+    define_trait!(\n+        Inner,\n+        fn takes_inner(i: Self::Inner) -> Self::Inner {\n+            i\n+        }\n+    );\n+}"}, {"sha": "9a1d773ec4b07835bf8e728fa3698eb77ba2ffdb", "filename": "gcc/testsuite/rust/compile/macro21.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro21.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro21.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro21.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! c_fn {\n+    {$name:ident ($($arg_name:ident $arg_ty:ty),*) -> $ret_ty:ty} => {\n+        fn $name($($arg_name: $arg_ty)*) -> $ret_ty;\n+    };\n+}\n+\n+extern \"C\" {\n+    c_fn! {puts (s *const i8) -> i64}\n+}"}, {"sha": "bdc4bada2704bafadb8bdb7e32935bdfc584b8dc", "filename": "gcc/testsuite/rust/compile/macro22.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro22.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro22.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro22.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+macro_rules! print {\n+    () => {\n+        fn puts(s: *const i8);\n+        fn printf(fmt: *const i8, ...);\n+    };\n+}\n+\n+extern \"C\" {\n+    print! {}\n+}"}, {"sha": "afaca9bc96b1f104f7b78ae993c2e7ab6ee00acf", "filename": "gcc/testsuite/rust/compile/macro23.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro23.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro23.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro23.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,25 @@\n+macro_rules! maybe_impl {\n+    ($left:ident, $right:ident, $l_fn:ident, $r_fn:ident) => {\n+        fn $l_fn(value: T) -> Maybe<T> {\n+            Maybe::$left(value)\n+        }\n+\n+        fn $r_fn() -> Maybe<T> {\n+            Maybe::$right\n+        }\n+    };\n+}\n+\n+enum Maybe<T> {\n+    Just(T),\n+    Nothing,\n+}\n+\n+impl<T> Maybe<T> {\n+    maybe_impl!(Just, Nothing, just, nothing);\n+}\n+\n+fn main() {\n+    let _ = Maybe::just(14);\n+    let _: Maybe<i32> = Maybe::nothing();\n+}"}, {"sha": "d92534c0747540ef275f8deeb24a68b7ab535254", "filename": "gcc/testsuite/rust/compile/macro25.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro25.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro25.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro25.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! valid {\n+    ($($a:literal)* $i:ident) => {{}};\n+}\n+\n+fn main() {\n+    valid!(1 one_lit);\n+    valid!(identifier_only);\n+    valid!(1 2 two_lits);\n+}"}, {"sha": "f6588e75eb0ba9e50e60ebc0fbdc2f6410e453b9", "filename": "gcc/testsuite/rust/compile/macro26.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro26.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro26.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro26.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+macro_rules! repeat {\n+    ( $( $i:literal ),* ; $( $j:literal ),* ) => (( $( ($i,$j) ),* ))\n+    // { dg-error \"different amount of matches used in merged repetitions\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn main() -> i32 {\n+    let _ = repeat!(1, 2, 3; 2, 3);\n+\n+    0\n+}"}, {"sha": "ee7833be0a6e5cab4d0cba5d8cef535f43863269", "filename": "gcc/testsuite/rust/compile/macro27.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro27.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro27.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro27.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! m {\n+    ($a:expr tok) => {\n+        // { dg-error \"token .identifier. is not allowed after .expr. fragment\" \"\" { target *-*-* } .-1 }\n+        // { dg-error \"required first macro rule in macro rules definition could not be parsed\" \"\" { target *-*-* } .-2 }\n+        // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-3 }\n+        $a\n+    };\n+}"}, {"sha": "8002f284ecfff9ecaf69ffe58c529a0b34a7d91b", "filename": "gcc/testsuite/rust/compile/macro28.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro28.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro28.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro28.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! m {\n+    ($a:expr $(tok $es:expr)*) => {\n+        // { dg-error \"token .identifier. is not allowed after .expr. fragment\" \"\" { target *-*-* } .-1 }\n+        // { dg-error \"required first macro rule in macro rules definition could not be parsed\" \"\" { target *-*-* } .-2 }\n+        // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-3 }\n+        $a\n+    };\n+}"}, {"sha": "39f5021b74f7a527e3f4b1b1c1e48306c5ce8c3d", "filename": "gcc/testsuite/rust/compile/macro29.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro29.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro29.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro29.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! m {\n+    ($($es:expr)* tok) => {\n+        // { dg-error \"token .identifier. is not allowed after .expr. fragment\" \"\" { target *-*-* } .-1 }\n+        // { dg-error \"required first macro rule in macro rules definition could not be parsed\" \"\" { target *-*-* } .-2 }\n+        // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-3 }\n+        $a\n+    };\n+}"}, {"sha": "e5d3e93e07baa4a2eaeb0c1556a12774f3589ce5", "filename": "gcc/testsuite/rust/compile/macro3.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! empty_curlies {\n+    {} => {};\n+}"}, {"sha": "35064bc0ee58bb1867e063921250c6ba54e7678f", "filename": "gcc/testsuite/rust/compile/macro30.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro30.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro30.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro30.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! m {\n+    ($e:expr $f:expr) => {\n+        // { dg-error \"fragment is not allowed after .expr. fragment\" \"\" { target *-*-* } .-1 }\n+        // { dg-error \"required first macro rule in macro rules definition could not be parsed\" \"\" { target *-*-* } .-2 }\n+        // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-3 }\n+        $e\n+    };\n+}"}, {"sha": "6674a5fe554b24d072fa92fefe43e9e68ac17474", "filename": "gcc/testsuite/rust/compile/macro31.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro31.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro31.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro31.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+macro_rules! m {\n+    ($($e:expr)* $($f:expr)*) => {\n+        // { dg-error \"fragment is not allowed after .expr. fragment\" \"\" { target *-*-* } .-1 }\n+        // { dg-error \"required first macro rule in macro rules definition could not be parsed\" \"\" { target *-*-* } .-2 }\n+        // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-3 }\n+        $e\n+    };\n+}"}, {"sha": "d1d6305e6bdd005a0a696037926389ae9767c85b", "filename": "gcc/testsuite/rust/compile/macro32.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro32.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro32.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro32.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,19 @@\n+macro_rules! s {\n+    ($s:stmt) => {{}};\n+}\n+\n+macro_rules! multi_s {\n+    ($($s:stmt)+) => {{}};\n+}\n+\n+fn main() -> i32 {\n+    s!(let a = 15);\n+    s!(;); // Empty statement\n+    s!(let a = 15;); // { dg-error \"Failed to match any rule within macro\" }\n+    multi_s!(let a = 15;);\n+    // ^ this actually gets parsed as two statements - one LetStmt and one\n+    // empty statement. This is the same behavior as rustc, which you can\n+    // see using a count!() macro\n+\n+    32\n+}"}, {"sha": "2ccd33e50d3a49e31852f2fbb3b3cfb1174e0201", "filename": "gcc/testsuite/rust/compile/macro33.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro33.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro33.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro33.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+macro_rules! forbidden_frag {\n+    ($t:ty $not_block:ident) => {{}}; // { dg-error \"fragment specifier .ident. is not allowed after .ty. fragments\" }\n+                                      // { dg-error \"required first macro rule in macro rules definition could not be parsed\" \"\" { target *-*-* } .-1 }\n+                                      // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "105d042fd50b34936c15da597b602e8411c31530", "filename": "gcc/testsuite/rust/compile/macro34.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro34.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro34.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro34.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! allowed_after_expr_matcher {\n+    (($t:expr) bok) => {{}}; // follow-set restrictions do not apply after a matcher, but they do apply inside the matcher\n+}"}, {"sha": "07b157b53c2fd958a418e988dda456c8bf68e205", "filename": "gcc/testsuite/rust/compile/macro35.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro35.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro35.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro35.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+macro_rules! inside_matcher {\n+    (($e:expr tok) tok) => {{}}; // { dg-error \"token .identifier. is not allowed after .expr. fragment\" }\n+                                 // { dg-error \"failed to parse macro matcher\" \"\" { target *-*-* } .-1 }\n+                                 // { dg-error \"failed to parse macro match\" \"\" { target *-*-* } .-2 }\n+                                 // { dg-error \"required first macro rule\" \"\" { target *-*-* } .-3 }\n+                                 // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-4 }\n+}"}, {"sha": "e5d66b22b7bbe87cb2b60f580f567ae379ee5f2c", "filename": "gcc/testsuite/rust/compile/macro36.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro36.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro36.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro36.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! ty_allowed {\n+    ($t:ty $b:block) => {{}};\n+}"}, {"sha": "5713d90130aaa1cc79988a9094756ac609d8c2d0", "filename": "gcc/testsuite/rust/compile/macro37.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro37.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro37.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro37.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+macro_rules! invalid_after_zeroable {\n+    ($e:expr $(,)* forbidden) => {{}}; // { dg-error \"token .identifier. is not allowed after .expr. fragment\" }\n+                                       // { dg-error \"required first macro rule\" \"\" { target *-*-* } .-1 }\n+                                       // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "eb294aec83bb87d0a2020cada58fd3cd0f6b55e4", "filename": "gcc/testsuite/rust/compile/macro38.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro38.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro38.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro38.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+macro_rules! invalid_after_zeroable_multi {\n+    ($e:expr $(,)? $(;)* $(=>)? forbidden) => {{}}; // { dg-error \"token .identifier. is not allowed after .expr. fragment\" }\n+                                                    // { dg-error \"required first macro rule\" \"\" { target *-*-* } .-1 }\n+                                                    // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "f5c498cc8ef3328e63680921b73622431e92a840", "filename": "gcc/testsuite/rust/compile/macro39.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro39.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro39.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro39.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+macro_rules! m {\n+    ($e:expr (, parenthesis_forbidden)) => {{}}; // { dg-error \"token .\\\\(. at start of matcher is not allowed after .expr. fragment\" }\n+                                                 // { dg-error \"required first macro rule\" \"\" { target *-*-* } .-1 }\n+                                                 // { dg-error \"failed to parse item in crate\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "47ff6c93d87aa98052c53ef6b0a3ce3fa8906222", "filename": "gcc/testsuite/rust/compile/macro4.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! one_keyword {\n+    (kw) => {};\n+}"}, {"sha": "7151f3a83bce7c4248d05fcda535e03ab54d2f59", "filename": "gcc/testsuite/rust/compile/macro40.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro40.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro40.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro40.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,48 @@\n+// { dg-additional-options \"-w\" }\n+\n+macro_rules! t {\n+    () => {\n+        i32\n+    };\n+}\n+\n+macro_rules! s {\n+    () => {\n+        *const i8\n+    };\n+}\n+\n+extern \"C\" {\n+    fn printf(s: s!(), ...);\n+}\n+\n+fn square(arg: t!()) -> t!() {\n+    let input: t!() = arg;\n+\n+    input * input\n+}\n+\n+trait Trait {\n+    fn f() -> t!();\n+    fn g(arg: t!());\n+}\n+\n+struct Wrapper {\n+    inner: t!(),\n+}\n+\n+impl Trait for Wrapper {\n+    fn f() -> t!() {\n+        1\n+    }\n+\n+    fn g(arg: t!()) {}\n+}\n+\n+fn id<T>(arg: T) -> T {\n+    arg\n+}\n+\n+fn main() {\n+    id::<t!()>(15);\n+}"}, {"sha": "3824422292477648e738e209f0be7ed9a4004666", "filename": "gcc/testsuite/rust/compile/macro41.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro41.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro41.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro41.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+macro_rules! empty {\n+    ($($t:tt)*) => {};\n+}\n+\n+empty! {nothing}\n+empty! {struct OuterItem;}\n+empty! {}\n+\n+fn main() {\n+    empty! {as statement};\n+    empty! {any child item};\n+    empty! {};\n+}"}, {"sha": "52d150b82baf08e1ad3f33e9a9a959d486620af6", "filename": "gcc/testsuite/rust/compile/macro42.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro42.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro42.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro42.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,32 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+#[rustc_builtin_macro]\n+macro_rules! cfg {\n+    () => {{}};\n+}\n+\n+fn main() -> i32 {\n+    let mut res = 0;\n+    if cfg!(A) {\n+        res = 1;\n+    }\n+\n+    if cfg!(A) {\n+        res = 2;\n+    } else {\n+        res = 3;\n+    }\n+\n+    if cfg!(A) {\n+        res = 4;\n+    } else if cfg!(A) {\n+        res = 5;\n+    }\n+\n+    let res = if cfg!(A) {\n+        6\n+    } else {\n+        7\n+    };\n+\n+    return res;\n+}"}, {"sha": "a5d80952e28422c95e4476624d9ebe7fff641d7e", "filename": "gcc/testsuite/rust/compile/macro5.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+macro_rules! rust_keyword {\n+    (fn) => {};\n+}"}, {"sha": "0ca35ba688848e37c3bf7c5752fdb50a9164f400", "filename": "gcc/testsuite/rust/compile/macro6.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro6.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+macro_rules! zero_or_one {\n+    ($($a:literal)?) => { // { dg-error \"invalid amount of matches for macro invocation. Expected between 0 and 1, got 2\" }\n+        f();\n+    }\n+}\n+\n+fn main() {\n+    zero_or_one!();\n+    zero_or_one!(14);\n+    zero_or_one!(125 12 \"gcc\"); // { dg-error \"Failed to match any rule within macro\" }\n+}"}, {"sha": "abc48057c5458cc958ad45f4a1b996dac7363cac", "filename": "gcc/testsuite/rust/compile/macro7.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro7.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+fn f() {}\n+\n+macro_rules! one_or_more {\n+    ($($a:literal)+) => { // { dg-error \"invalid amount of matches for macro invocation\" }\n+        f();\n+    };\n+}\n+\n+fn main() {\n+    one_or_more!(1 1 1 1 1 1 1 1 1 1 1 \"rust\" 'c');\n+    one_or_more!(1);\n+    one_or_more!(); // { dg-error \"Failed to match any rule within macro\" }\n+}"}, {"sha": "d3e8af93a6ed5ac3a45543abf07115cff2aa9f63", "filename": "gcc/testsuite/rust/compile/macro8.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro8.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+fn f() {}\n+\n+macro_rules! expr {\n+    ($($a:expr)?) => {\n+        f();\n+    };\n+}\n+\n+fn main() {\n+    expr!();\n+    expr!(14);\n+}"}, {"sha": "9a59089b1e4fe20dabf311eb418c1fb25e8b3363", "filename": "gcc/testsuite/rust/compile/macro9.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,17 @@\n+macro_rules! add {\n+    ($e:expr, $($es:expr),*) => {\n+        $e + add!($($es),*)\n+    };\n+    ($e:expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() -> i32 {\n+    let a = add!(15 2 9); // { dg-error \"Failed to match any rule within macro\" }\n+    let b = add!(15);\n+    let b = add!(15 14); // { dg-error \"Failed to match any rule within macro\" }\n+    let b = add!(15, 14,); // { dg-error \"Failed to match any rule within macro\" }\n+\n+    0\n+}"}, {"sha": "8b06f875cc04a6f15320e6cdbda7f82535b15924", "filename": "gcc/testsuite/rust/compile/macro_return.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro_return.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro_return.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro_return.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+// { dg-additional-options \"-w\" }\n+\n+macro_rules! add {\n+    ($a:expr) => { $a };\n+    ($a:expr, $($b:expr),+) => { $a + add!($($b),*) }\n+}\n+\n+fn main() -> i32 {\n+    add!(add!(1, 2))\n+}"}, {"sha": "f649f3a19313175622f672e262cd6370d1936cf9", "filename": "gcc/testsuite/rust/compile/match1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+enum Foo {\n+    A,\n+    B,\n+    C(char),\n+    D { x: i64, y: i64 },\n+}\n+\n+fn inspect(f: Foo) {\n+    match f {\n+        Foo::A => {}\n+        Foo::B => {}\n+        Foo::C(a, b) => {}\n+        // { dg-error \"this pattern has 2 fields but the corresponding tuple variant has 1 field\" \"\" { target *-*-* } .-1 }\n+        Foo::D { x, y } => {}\n+    }\n+}"}, {"sha": "359936a187cdc82e22c7c8b01b773e25122094c0", "filename": "gcc/testsuite/rust/compile/match2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,15 @@\n+enum Foo {\n+    A,\n+    B,\n+    C(char),\n+    D { x: i64, y: i64 },\n+}\n+\n+fn inspect(f: Foo) {\n+    match f {\n+        Foo::A => {}\n+        Foo::B => {}\n+        Foo::C(x) => {}\n+        Foo::D { y } => {} // { dg-error \"pattern does not mention fields x\" }\n+    }\n+}"}, {"sha": "98181e85197c99d011dba37355dceadc89cd29fe", "filename": "gcc/testsuite/rust/compile/match3.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+enum Foo {\n+    A,\n+    B,\n+    C(char),\n+    D { x: i64, y: i64 },\n+}\n+\n+fn inspect(f: Foo) {\n+    match f {\n+        Foo::A => {}\n+        Foo::B => {}\n+        Foo::C(x) => {}\n+        Foo::D { z } => {} // { dg-error \"variant D does not have a field named z\" }\n+                           // { dg-error \"pattern does not mention fields x, y\" \"\" { target *-*-* } .-1 }\n+    }\n+}"}, {"sha": "35b90a64fa5f9933b445cc79dc9daaf3d1334aa4", "filename": "gcc/testsuite/rust/compile/match4.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+enum Foo {\n+    A,\n+    B,\n+    C(char),\n+    D { x: i64, y: i64 },\n+}\n+\n+fn inspect(f: Foo) {\n+    match f {\n+        Foo::A => {}\n+        Foo::B => {}\n+        Foo::C { a } => {}\n+        // { dg-error \"expected struct variant, found tuple variant C\" \"\" { target *-*-* } .-1 }\n+        Foo::D { x, y } => {}\n+    }\n+}"}, {"sha": "a5f934d6aebf020982142011de38048560484aef", "filename": "gcc/testsuite/rust/compile/match5.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,15 @@\n+enum Foo {\n+    A,\n+    B,\n+    C(char),\n+    D { x: i64, y: i64 },\n+}\n+\n+fn inspect(f: Foo) {\n+    match f {\n+        Foo::A => {}\n+        Foo::B => {}\n+        Foo::C(a) => {}\n+        Foo::D(x, y) => {} // { dg-error \"expected tuple struct or tuple variant, found struct variant 'Foo::D'\" }\n+    }\n+}"}, {"sha": "8fe06f7c116e7126f0954d3142449e5b4a49a1a4", "filename": "gcc/testsuite/rust/compile/match6.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch6.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,18 @@\n+fn foo() -> bool {\n+    true\n+}\n+\n+fn int32() -> i32 {\n+    1\n+}\n+\n+fn bar() -> i32 {\n+    match foo() {\n+        true => int32(),\n+        false => 0\n+    }\n+}\n+\n+fn main() -> () {\n+    bar();\n+}\n\\ No newline at end of file"}, {"sha": "b16a1883522a1d0c79a177a6e7c531e6a1a37e3c", "filename": "gcc/testsuite/rust/compile/match7.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmatch7.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+fn bar (x: u8, y: u8) -> i32 {\n+    match (x, y) {\n+        (1, 1) => { return 1; }\n+        (1, _) => { return -1; }\n+    }\n+\n+    return 0;\n+}\n+\n+fn main () -> () {\n+    bar (1, 2);\n+}"}, {"sha": "18652406085b4444af203719dba49bf41edb4996", "filename": "gcc/testsuite/rust/compile/method1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+struct Foo(i32);\n+impl Foo {\n+    fn test() {}\n+}\n+\n+pub fn main() {\n+    let a;\n+    a = Foo(123);\n+\n+    a.test();\n+    // { dg-error \"failed to resolve method for .test.\" \"\" { target *-*-* } .-1 }\n+    // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "c8699f77c6ab55d418bf638601f3bad06d5cbd05", "filename": "gcc/testsuite/rust/compile/method2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmethod2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+struct Foo<A, B>(A, B);\n+\n+impl Foo<i32, f32> {\n+    fn test<X>(self, a: X) -> X {\n+        a\n+    }\n+}\n+\n+fn main() {\n+    let a;\n+    a = Foo(123, 456f32);\n+\n+    let b;\n+    b = a.test::<asfasfr>(false);\n+    // { dg-error \"failed to resolve TypePath: asfasfr\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "e259b9e46ccb29e19d3d92e8d24fa655b25d6611", "filename": "gcc/testsuite/rust/compile/mismatch-crate-name.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmismatch-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmismatch-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmismatch-crate-name.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-frust-crate=another_name\" }\n+#![crate_name = \"legit_name\"]\n+// { dg-error \".-frust-crate-name. and .#.crate_name.. are required to match, but .another_name. does not match .legit_name.\" \"\" { target *-*-* } .-1 }\n+fn main() {}"}, {"sha": "5e5ad15457aa2887c7acda6f80993a55c2b956b7", "filename": "gcc/testsuite/rust/compile/missing_middle/both_path.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fboth_path.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fboth_path.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fboth_path.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() -> u32 {\n+    5\n+}"}, {"sha": "e28288b0f995b2691ca3ccf16e5c1a8a530a9510", "filename": "gcc/testsuite/rust/compile/missing_middle/explicit.not.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fexplicit.not.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fexplicit.not.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fexplicit.not.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1 @@\n+mod other;"}, {"sha": "daf4e3cc25aef6421227d1a4d7d64c00bc03ba85", "filename": "gcc/testsuite/rust/compile/missing_middle/inner_path.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Finner_path.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Finner_path.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Finner_path.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() -> u32 {\n+    4\n+}"}, {"sha": "0c0884ec968ef84c9fbfccb8e4e36be067ee17e7", "filename": "gcc/testsuite/rust/compile/missing_middle/other.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fother.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fother.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fother.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() -> u32 {\n+    2\n+}"}, {"sha": "fbe5074191bd59bfbbc7ceba4c564620f6d4d9aa", "filename": "gcc/testsuite/rust/compile/missing_middle/outer_path.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fouter_path.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fouter_path.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fouter_path.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() -> u32 {\n+    3\n+}"}, {"sha": "f099d61e04a29f4a6752a5d1fe2f1aaa3b7d36ac", "filename": "gcc/testsuite/rust/compile/missing_middle/sub/mod.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fsub%2Fmod.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fsub%2Fmod.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_middle%2Fsub%2Fmod.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+pub fn f() -> u32 {\n+    1\n+}"}, {"sha": "00bf393dbb9759208cc3236579bdcb1fcf17a0e5", "filename": "gcc/testsuite/rust/compile/missing_return1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_return1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_return1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmissing_return1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+// { dg-error \"expected .* got .*\" \"\" { target *-*-* } 0 }\n+fn test1() -> i32 {}\n+\n+fn main() {\n+    let call1 = test1();\n+}"}, {"sha": "79633407671134b42b33b3493b278ff1f8142dcf", "filename": "gcc/testsuite/rust/compile/mod_missing_middle.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmod_missing_middle.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmod_missing_middle.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmod_missing_middle.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,29 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod missing_middle {\n+    mod sub;\n+\n+    #[path = \"explicit.not.rs\"]\n+    mod explicit;\n+}\n+\n+#[path = \"missing_middle\"]\n+mod with_outer_path_attr {\n+    #[path = \"outer_path.rs\"]\n+    mod inner;\n+}\n+\n+mod with_inner_path_attr {\n+    #![path = \"missing_middle\"]\n+\n+    #[path = \"inner_path.rs\"]\n+    mod inner;\n+}\n+\n+#[path = \"missing_middle\"]\n+mod with_both_path_attr {\n+    #![path = \"this_is_ignored\"]\n+\n+    #[path = \"both_path.rs\"]\n+    mod inner;\n+}"}, {"sha": "52b1283fadfe9624891abaa16d4c2ff1ca2dea6e", "filename": "gcc/testsuite/rust/compile/never_type_err1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnever_type_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnever_type_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fnever_type_err1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,14 @@\n+fn test() {\n+    let a;\n+\n+    // FIXME: Unimplemented features\n+    a = if true { // { dg-error \"expected .T.. got .!.\" }\n+        return;\n+    } else {\n+        return;\n+    };\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "1cc83c04abe8c6568e3b8f81ec9f84db85087a77", "filename": "gcc/testsuite/rust/compile/privacy1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+mod orange {\n+    mod green {\n+        fn sain() {}\n+        pub fn doux() {}\n+    }\n+\n+    fn brown() {\n+        green::sain(); // { dg-error \"definition is private in this context\" }\n+        green::doux();\n+    }\n+}"}, {"sha": "3c0744928b19d7b85ee18c24b7e9276c7edddc38", "filename": "gcc/testsuite/rust/compile/privacy2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod orange {\n+    fn tangerine() {}\n+\n+    mod green {\n+        mod blue {\n+            fn berry() {\n+                tangerine();\n+            }\n+        }\n+    }\n+}"}, {"sha": "d48acea4786842ddb7bb589a125538e3744db85f", "filename": "gcc/testsuite/rust/compile/privacy3.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,28 @@\n+mod orange {\n+    mod green {\n+        fn sain_void() {}\n+        fn sain() -> bool {\n+            false\n+        }\n+        pub fn doux() {}\n+    }\n+\n+    fn brown() {\n+        if green::sain() {\n+            // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+            green::doux();\n+        }\n+\n+        {\n+            green::sain();\n+            // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+            green::sain();\n+            // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+            green::sain_void()\n+            // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+        }\n+\n+        let a = green::sain();\n+        // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+    }\n+}"}, {"sha": "d1ce0afd65431a55002d0193d29860312bb60423", "filename": "gcc/testsuite/rust/compile/privacy4.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,19 @@\n+mod orange {\n+    mod green {\n+        fn bean<T>(value: T) -> T {\n+            value\n+        }\n+    }\n+\n+    fn brown() {\n+        green::bean::<bool>(false);\n+        // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+        let a = green::bean::<i32>(15);\n+        // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+\n+        struct S;\n+\n+        let s = green::bean(S);\n+        // { dg-error \"definition is private in this context\" \"\" { target *-*-* } .-1 }\n+    }\n+}"}, {"sha": "0e0e496dde234b6f7c33eb8c1a858ac2f3010624", "filename": "gcc/testsuite/rust/compile/privacy5.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,17 @@\n+mod orange {\n+    mod green {\n+        struct Foo;\n+        pub(in orange) struct Bar;\n+        pub struct Baz;\n+    }\n+\n+    fn brown() {\n+        let _ = green::Foo; // { dg-error \"definition is private in this context\" }\n+        let _ = green::Bar;\n+        let _ = green::Baz;\n+\n+        let _: green::Foo; // { dg-error \"definition is private in this context\" }\n+\n+        fn any(a0: green::Foo, a1: green::Bar) {} // { dg-error \"20:definition is private in this context\" }\n+    }\n+}"}, {"sha": "487ed02420902028a10f66eb06323386f5d192fc", "filename": "gcc/testsuite/rust/compile/privacy6.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy6.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,39 @@\n+// { dg-additional-options \"-w\" }\n+\n+struct Adt;\n+enum EAdt {\n+    V0,\n+    V1,\n+}\n+struct Registers {\n+    r0: i64,\n+    r1: i64,\n+    r2: i64,\n+    r3: i64,\n+}\n+trait Foo {}\n+\n+fn foo1(value: bool) {}\n+fn foo2(value: char) {}\n+fn foo3(value: i32) {}\n+fn foo4(value: u16) {}\n+fn foo5(value: f64) {}\n+fn foo6(value: usize) {}\n+fn foo7(value: isize) {}\n+fn foo8(value: Adt) {}\n+fn foo9(value: EAdt) {}\n+fn foo10(value: &str) {}\n+fn foo11(value: *const i8) {}\n+fn foo12<T>(value: T) {}\n+fn foo13(value: [i32; 5]) {}\n+fn foo14(value: [Adt]) {}\n+fn foo15(value: fn(i32) -> i32) {}\n+fn foo16(value: (i32, Adt)) {}\n+fn foo17(value: (i32, [f64; 5])) {}\n+fn foo18(value: Registers) {}\n+fn foo19(value: &dyn Foo) {}\n+fn foo20(value: &[Adt]) {}\n+// FIXME: Uncomment once #1257 is fixed\n+// fn foo21(value: fn(i32)) {}\n+// fn foo22(value: fn()) {}\n+fn foo23(value: fn() -> i32) {}"}, {"sha": "9bda9682403238c7d5ed528d95c806badd81a68f", "filename": "gcc/testsuite/rust/compile/pub_restricted_1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+pub mod foo {\n+    pub mod bar {\n+        pub fn baz() {}\n+\n+        pub(in foo::bar) struct A0;\n+    }\n+}\n+\n+pub(in foo::fah::baz) struct A1; // { dg-error \"cannot find simple path segment .fah.\" }\n+pub(in fro::bulator::saindoux) struct A2; // { dg-error \"cannot find simple path segment .fro.\" }\n+pub(in foo::bar::saindoux) struct A3; // { dg-error \"cannot find simple path segment .saindoux.\" }\n+\n+fn main() {}"}, {"sha": "8588f2775cacfd3b6dbf68902d2d7ad4cada4a58", "filename": "gcc/testsuite/rust/compile/pub_restricted_2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,18 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod foo {\n+    mod bar {\n+        mod baz {\n+            pub(in baz) struct A0;\n+            pub(in bar::baz) struct A1;\n+            pub(in foo::bar::baz) struct A2;\n+\n+            mod sain {\n+                mod doux {}\n+            }\n+\n+            pub(in sain) struct A3; // { dg-error \"restricted path is not an ancestor of the current module\" }\n+            pub(in sain::doux) struct A4; // { dg-error \"restricted path is not an ancestor of the current module\" }\n+        }\n+    }\n+}"}, {"sha": "d477385d761fb8093aa32685c489d6e42f8920bf", "filename": "gcc/testsuite/rust/compile/pub_restricted_3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod foo {\n+    mod bar {\n+        pub(in foo) fn baz() {}\n+    }\n+\n+    fn baz() {\n+        bar::baz(); // no error, foo::bar::baz is public in foo\n+    }\n+}"}, {"sha": "854d7e6edee1d28a7999fc4dba318f02175b31f5", "filename": "gcc/testsuite/rust/compile/raw_identifiers_bad_keywords.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fraw_identifiers_bad_keywords.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fraw_identifiers_bad_keywords.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fraw_identifiers_bad_keywords.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+pub fn plus(n: i32, m: i32) -> i32 {\n+    r#crate /* { dg-error \"forbidden raw identifier\" } */\n+}"}, {"sha": "86e9013a50bf027e399462b1591b2fc7f2d5be64", "filename": "gcc/testsuite/rust/compile/raw_identifiers_underscore.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fraw_identifiers_underscore.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fraw_identifiers_underscore.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fraw_identifiers_underscore.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+pub fn s(num: i32) -> i32 {\n+    r#_ * num /* { dg-error \"not a valid raw identifier\" } */\n+}"}, {"sha": "9c6b762a7fd378206a3bfe21db5b708890f5466f", "filename": "gcc/testsuite/rust/compile/rawbytestring.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Frawbytestring.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Frawbytestring.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Frawbytestring.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c"}, {"sha": "ae51e36c87f495f80ee93e7576283f975b02330b", "filename": "gcc/testsuite/rust/compile/redef_error1.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+struct S1 {\n+    x: f64,\n+    y: f64,\n+}\n+\n+struct S1(i32, bool); // { dg-error \"redefined multiple times\" }\n+\n+fn main() {}"}, {"sha": "65793bcda8a25ae2304a04c3260404d56f7da9ae", "filename": "gcc/testsuite/rust/compile/redef_error2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+const TEST: i32 = 2;\n+const TEST: f32 = 3.0; // { dg-error \"redefined multiple times\" }\n+\n+fn main() {}"}, {"sha": "a4bf1ed3d8ce831847eb16d3fbc7b4fb92d6d66d", "filename": "gcc/testsuite/rust/compile/redef_error3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn test() -> bool {\n+    true\n+}\n+\n+fn test() -> i32 { // { dg-error \"redefined multiple times\" }\n+    123\n+}\n+\n+fn main() {}"}, {"sha": "a250c0ac00e2ee86af52792df58f4ee3331151ec", "filename": "gcc/testsuite/rust/compile/redef_error4.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,27 @@\n+struct Foo(i32, bool);\n+\n+impl Foo {\n+    fn new(a: i32, b: bool) -> Foo {\n+        Foo(a, b)\n+    }\n+\n+    fn test() -> i32 {\n+        test()\n+    }\n+\n+    fn test() -> bool { // { dg-error \"redefined multiple times\" }\n+        true\n+    }\n+}\n+\n+fn test() -> i32 {\n+    123\n+}\n+\n+fn main() {\n+    let a;\n+    a = Foo::new(1, true);\n+\n+    let b;\n+    b = Foo::test();\n+}"}, {"sha": "dc6ad50e1045a0aa7b169cd98ac8e4c547a6b49c", "filename": "gcc/testsuite/rust/compile/redef_error5.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+struct Foo(i32, bool);\n+\n+impl Foo {\n+    const TEST: i32 = 123;\n+    const TEST: bool = false; // { dg-error \"redefined multiple times\"  }\n+}\n+\n+fn main() {}"}, {"sha": "664c6ae9894cbc1ab392582571b0fd7255b50ce9", "filename": "gcc/testsuite/rust/compile/redef_error6.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fredef_error6.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+struct Foo<T>(T, usize);\n+\n+impl Foo<i32> {\n+    fn test() -> i32 {\n+        123\n+    }\n+\n+    fn test(self) -> i32 { // { dg-error \"redefined multiple times\" }\n+        self.0\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ff791533754b3a216da6fcda85b397795dc57610", "filename": "gcc/testsuite/rust/compile/reference1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Freference1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Freference1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Freference1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let a = &123;\n+    let b: &mut i32 = a;\n+    // { dg-error \"mismatched mutability\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"expected .&mut i32. got .& i32.\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "425ba848fc049700a19211d8579186c63e4cec49", "filename": "gcc/testsuite/rust/compile/self-path1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+// { dg-additional-options \"-w\" }\n+struct foo;\n+\n+fn bar() -> self::foo {\n+    crate::foo\n+}\n+\n+fn baz() {\n+    let a: foo = self::bar();\n+\n+    crate::bar();\n+}"}, {"sha": "b9b82cae5a6a502a6e6223976f8da8c5b0e7bc7b", "filename": "gcc/testsuite/rust/compile/self-path2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fself-path2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,21 @@\n+// { dg-additional-options \"-w\" }\n+struct foo;\n+\n+fn bar() -> self::foo {\n+    crate::foo\n+}\n+\n+fn baz() {\n+    let a: foo = self::bar();\n+\n+    crate::bar();\n+\n+    crate::self::foo();\n+    // { dg-error \"failed to resolve: .self. in paths can only be used in start position\" \"\" { target *-*-* } .-1 }\n+}\n+\n+type a = foo;\n+type b = crate::foo;\n+type c = self::foo;\n+type d = crate::self::foo;\n+// { dg-error \"failed to resolve: .self. in paths can only be used in start position\" \"\" { target *-*-* } .-1 }"}, {"sha": "77410e932daa8bb577f2d7c3e28c2fb4b0dcafac", "filename": "gcc/testsuite/rust/compile/shadow1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fshadow1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let mut x = 5;\n+    let mut x;\n+    x = true;\n+    x = x + 2; // { dg-error \"cannot apply this operator to types bool and <integer>\"  }\n+               // { dg-error {failed to type resolve expression} \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "a86791570243ad5fe7f8e17b593ff24bc2b1c279", "filename": "gcc/testsuite/rust/compile/specify-crate-name.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fspecify-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fspecify-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fspecify-crate-name.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-frust-crate=fancy_crate_name -fdump-tree-gimple\" }\n+pub fn does_nothing() {}\n+fn main() {\n+    does_nothing()\n+}\n+// { dg-final { scan-tree-dump-times {fancy_crate_name::does_nothing} 2 gimple } }\n+// { dg-final { scan-tree-dump-times {fancy_crate_name::main} 1 gimple } }"}, {"sha": "b3b5751c93227f4c933f3b22b7618f3d9bc89531", "filename": "gcc/testsuite/rust/compile/static_var1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstatic_var1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstatic_var1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstatic_var1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+static x = 3; // { dg-error \"expecting ':' but '=' found\" }\n+\n+fn main() {// { dg-error \"failed to parse item in crate\" }\n+    let y = x +1;\n+}"}, {"sha": "8780d0feeac617483e15e8b2e74fee4c5bce4878", "filename": "gcc/testsuite/rust/compile/stmt_with_block_err1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstmt_with_block_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstmt_with_block_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstmt_with_block_err1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,17 @@\n+fn test(x: i32) -> i32 {\n+    if x > 1 { // { dg-error \"expected .... got .<integer>.\" }\n+        1\n+    } else {\n+        2\n+    }\n+\n+    { // { dg-error \"expected .... got .<integer>.\" }\n+        3\n+    }\n+\n+    3\n+}\n+\n+fn main() {\n+    let a = test(0);\n+}"}, {"sha": "22eb6bc80fb0ddd20a341c033bce399caf61280a", "filename": "gcc/testsuite/rust/compile/struct_align1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,19 @@\n+#[repr(align(8))]\n+struct Foo {\n+    x: i16,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    y: i8,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    z: i32,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}\n+\n+#[repr(align(8))]\n+struct Bar(i8, i32);\n+\n+fn main () {\n+    let f = Foo { x: 5, y: 2, z: 13 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let b = Bar (7, 262);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "ac490643a360a2278089af4068f11d5fc90f90f6", "filename": "gcc/testsuite/rust/compile/struct_align2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,18 @@\n+\n+fn main () {\n+\n+    #[repr(align(8))]\n+    struct Baz {\n+        x: u16,\n+        y: u32,\n+    };\n+\n+    #[repr(align(4))]\n+    struct Qux (u8, i16);\n+\n+    let b = Baz { x: 5, y: 1984 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let c = Qux (1, 2);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "1875fb4f33ee2c40d22c7fa0aafa573c42322bff", "filename": "gcc/testsuite/rust/compile/struct_init1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_init1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_init1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_init1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+struct Foo {\n+    a: f32,\n+    b: f32,\n+}\n+\n+fn main() {\n+    let a = Foo { 0: 10.0, 1: 20.0 }; // { dg-error \"failed to resolve type for field\" }\n+    // { dg-error \"unknown field\" \"\" { target *-*-* } .-1 }\n+    // { dg-prune-output \"compilation terminated\" }\n+}"}, {"sha": "eb9d879c1dc14d243ef54038752be87942b9702f", "filename": "gcc/testsuite/rust/compile/struct_pack1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,19 @@\n+#[repr(packed(2))]\n+struct Foo {\n+    x: i16,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    y: i8,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    z: i32,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}\n+\n+#[repr(packed)]\n+struct Bar(i8, i32);\n+\n+fn main () {\n+    let f = Foo { x: 5, y: 2, z: 13 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let b = Bar (7, 262);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "e5f74c20bb0c0245f536f341ae373478fc78abc3", "filename": "gcc/testsuite/rust/compile/struct_pack2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,18 @@\n+\n+fn main () {\n+\n+    #[repr(packed(2))]\n+    struct Baz {\n+        x: u16,\n+        y: u32,\n+    };\n+\n+    #[repr(packed)]\n+    struct Qux (u8, i16);\n+\n+    let b = Baz { x: 5, y: 1984 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let c = Qux (1, 2);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "cd84907bf842439b652f8479e4aa6a3c7456b0e8", "filename": "gcc/testsuite/rust/compile/syntax-only.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fsyntax-only.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Fsyntax-only.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fsyntax-only.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options \"-fsyntax-only\" }\n+\n+fn main() {\n+    let mut a = 15;\n+    a = true;\n+}"}, {"sha": "4b3c000236b5f6cefc2cb731060b3fe7ced0d152", "filename": "gcc/testsuite/rust/compile/test_mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftest_mod.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftest_mod.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftest_mod.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+//! test_mod inner doc comment\n+//!\n+//! foo bar baz cake pizza carbs\n+\n+pub struct Test(pub i32);\n+// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }"}, {"sha": "b7368ba29ee70f13152bc4a32561f02b62c031e2", "filename": "gcc/testsuite/rust/compile/torture/all_doc_comment_line_blocks.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,45 @@\n+// comment line not a doc\n+/* comment block not a doc                   */\n+\n+//! inner line comment for most outer crate\n+/*! inner block comment for most outer crate */\n+\n+// comment line not a doc\n+/* comment block not a doc                   */\n+\n+/// outer doc line for module\n+/** outer doc block for module               */\n+pub mod module {\n+    //!  inner line doc\n+    //!! inner line doc!\n+    /*!  inner block doc  */\n+    /*!! inner block doc! */\n+\n+    //   line comment\n+    ///  outer line doc\n+    //// line comment\n+\n+    /*   block comment   */\n+    /**  outer block doc */\n+    /*** block comment   */\n+\n+    mod block_doc_comments {\n+        /*   /* */  /** */  /*! */  */\n+        /*!  /* */  /** */  /*! */  */\n+        /**  /* */  /** */  /*! */  */\n+        mod item {}\n+    }\n+\n+    pub mod empty {\n+        //!\n+        /*!*/\n+        //\n+\n+        ///\n+        // the following warning is issued one line earlier\n+        mod doc {}\n+        /**/\n+        /***/\n+    }\n+}\n+pub fn main() {}"}, {"sha": "9f2f22073976eac61b87c932454f49d3e1d210fb", "filename": "gcc/testsuite/rust/compile/torture/all_doc_comment_line_blocks_crlf.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks_crlf.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks_crlf.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks_crlf.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,48 @@\n+// comment line not a doc\r\n+/* comment block not a doc                   */\r\n+\r\n+//! inner line comment for most outer crate\r\n+/*! inner block comment for most outer crate */\r\n+\r\n+// comment line not a doc\r\n+/* comment block not a doc                   */\r\n+\r\n+/// outer doc line for module\r\n+/** outer doc block for module               */\r\n+pub mod module\r\n+{\r\n+  //!  inner line doc\r\n+  //!! inner line doc!\r\n+  /*!  inner block doc  */\r\n+  /*!! inner block doc! */\r\n+\r\n+  //   line comment\r\n+  ///  outer line doc\r\n+  //// line comment\r\n+\r\n+  /*   block comment   */\r\n+  /**  outer block doc */\r\n+  /*** block comment   */\r\n+\r\n+  mod block_doc_comments\r\n+  {\r\n+    /*   /* */  /** */  /*! */  */\r\n+    /*!  /* */  /** */  /*! */  */\r\n+    /**  /* */  /** */  /*! */  */\r\n+    mod item { }\r\n+  }\r\n+\r\n+  pub mod empty\r\n+  {\r\n+    //!\r\n+    /*!*/\r\n+    //\r\n+\r\n+    ///\r\n+    mod doc { }\r\n+\r\n+    /**/\r\n+    /***/\r\n+  }\r\n+}\r\n+pub fn main () { }\r"}, {"sha": "4c3ee77c835418b7a4093b65c7d35c56e1040594", "filename": "gcc/testsuite/rust/compile/torture/arithmetic_expressions1.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farithmetic_expressions1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farithmetic_expressions1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farithmetic_expressions1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,30 @@\n+// { dg-prune-output \"warning: unused name\" } as there are many of these expected.\n+\n+fn main() {\n+    let a: i32 = 1;\n+    let b: f32 = 5f32;\n+    let c: bool = true;\n+\n+    let a1: i32 = a + 1;\n+    let a2: i32 = a - 2;\n+    let a3: i32 = a * 3;\n+    let a4: i32 = a / 4;\n+    let a5: i32 = a % 5;\n+\n+    let b1: f32 = b + 1f32;\n+    let b2: f32 = b - 2f32;\n+    let b3: f32 = b * 3f32;\n+    let b4: f32 = b / 4f32;\n+    // let b5: f32 = b % 5f32;\n+\n+    let aa1: i32 = a & 1;\n+    let aa2: i32 = a | 2;\n+    let aa2: i32 = a ^ 3;\n+\n+    let c1: bool = c & true;\n+    let c2: bool = c | false;\n+    let c3: bool = c ^ true;\n+\n+    let aaa1: i32 = a << 1;\n+    let aaa2: i32 = a >> 2;\n+}"}, {"sha": "e45c9389c9345a499e808266c156f0e7dcbcc3ed", "filename": "gcc/testsuite/rust/compile/torture/array_const_fold_1.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_const_fold_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_const_fold_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_const_fold_1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,2 @@\n+const TEST: [i32; 16] = [2, 6, 3, 10, 7, 0, 4, 13, 1, 11, 12, 5, 9, 14, 15, 8];\n+// { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n\\ No newline at end of file"}, {"sha": "b42a68e5ddbad1cd744c836c18430793cc23be1c", "filename": "gcc/testsuite/rust/compile/torture/array_const_fold_2.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_const_fold_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_const_fold_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_const_fold_2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,3 @@\n+const SIZE: usize = 14 + 2;\n+const TEST: [i32; SIZE] = [2; SIZE];\n+// { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }"}, {"sha": "4e2b2e03f31e98ece816daa0aaa23e28a225d88f", "filename": "gcc/testsuite/rust/compile/torture/array_function.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_function.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_function.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_function.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+fn foo() -> i32 {\n+    1\n+}\n+\n+\n+fn main() {\n+    let _a: [i32; 1] = [foo()];\n+}\n\\ No newline at end of file"}, {"sha": "6f21bf2420cb31397280beee18f3c268b70f1eef", "filename": "gcc/testsuite/rust/compile/torture/array_type_infer.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_type_infer.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_type_infer.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_type_infer.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let arr: [_; 5] = [1, 2, 3, 4, 5];\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "3155b1c48c03ea66605f2683412f4a1aca540ab0", "filename": "gcc/testsuite/rust/compile/torture/array_zero_length.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_zero_length.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_zero_length.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farray_zero_length.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let arr = [\"Hello\"; 0];\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "7250e0fa2af54efdb2cf0ade2efa2d0c175b8622", "filename": "gcc/testsuite/rust/compile/torture/arrays1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let xs: [i32; 5] = [1, 2, 3, 4, 5];\n+    let xy = [6, 7, 8];\n+\n+    let a = xs[0];\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let b = xy[2];\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "55491f345249557e36346d5e639b4b048a3cd0dc", "filename": "gcc/testsuite/rust/compile/torture/arrays2.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let mut array: [i32; 3] = [0; 3];\n+\n+    let a = array[0];\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let mut c;\n+    c = array[2];\n+}"}, {"sha": "372d969aa07746a3069da5ceabd5571a2581fa3b", "filename": "gcc/testsuite/rust/compile/torture/arrays3.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+const TEST: usize = 6;\n+\n+fn main() {\n+    let a: [_; 12] = [123; TEST * 2];\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "ac317fedf44fef5c635366bb13f85cbc246fc2a4", "filename": "gcc/testsuite/rust/compile/torture/arrays4.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+const TEST: usize = 4;\n+\n+fn main() {\n+    let a: [_; TEST + 1 + 2] = [123; 7];\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "58950a17a1563f9c1e57d0ae16eb8273d6ad5120", "filename": "gcc/testsuite/rust/compile/torture/arrays5.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+\n+// Checks that we don't try to allocate a 4TB array during compilation\n+fn main () {\n+    let x = [0; 4 * 1024 * 1024 * 1024 * 1024];\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "c7212d3f1832c6837abcccd1457062228886d8db", "filename": "gcc/testsuite/rust/compile/torture/arrays6.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays6.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+\n+// Checks that we don't try to allocate a 4TB array during compilation\n+fn foo() -> [u8; 4 * 1024 * 1024 * 1024 * 1024] {\n+    [0; 4 * 1024 * 1024 * 1024 * 1024]\n+}\n+\n+fn main () {\n+    let x = foo ();\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "1fe5de91bcf1930f41aa0e3a62ce5a2c0d892058", "filename": "gcc/testsuite/rust/compile/torture/arrays_index1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays_index1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays_index1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays_index1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let mut array: [i32; 3] = [0; 3];\n+\n+    let a = array[0];\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let x = 0;\n+    let mut c;\n+    c = array[x+1];\n+}"}, {"sha": "f9bee7748ee688ee2527fb2bdab6c778e1155b9a", "filename": "gcc/testsuite/rust/compile/torture/arrays_index2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays_index2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays_index2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays_index2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let mut array: [i32; 3] = [0; 3];\n+    array[0] = 1;\n+}"}, {"sha": "8fa0a226d027bc35a7d433d5265e9a04f72607c2", "filename": "gcc/testsuite/rust/compile/torture/arrays_index3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays_index3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays_index3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Farrays_index3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,15 @@\n+fn foo() -> usize {\n+    1\n+}\n+    \n+fn bar() -> [i32; 1] {\n+    [0]\n+}\n+    \n+    \n+        \n+fn main() -> () {\n+    let a = [10];\n+    let _b = a[foo()];\n+    let _c = bar()[foo()];\n+}"}, {"sha": "d687499384a4658db3c77a33ee303b3b62cd7748", "filename": "gcc/testsuite/rust/compile/torture/as_bool_char.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fas_bool_char.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fas_bool_char.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fas_bool_char.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,36 @@\n+extern \"C\" { fn abort (); }\n+\n+pub fn main ()\n+{\n+  let t = true;\n+  let f = false;\n+  let one = t as u8;\n+  let zero = f as u8;\n+\n+  if one != 1 || zero != 0 { unsafe { abort (); } }\n+\n+  let isizeone = true as isize;\n+  let usizezero = false as usize;\n+\n+  if isizeone != 1 || usizezero != 0 { unsafe { abort (); } }\n+\n+  let i32zero = f as i32;\n+  let u128one = t as u128;\n+\n+  if u128one != 1 || i32zero != 0 { unsafe { abort (); } }\n+\n+  let a = 'a';\n+  let b = 'b';\n+  let ua = a as u8;\n+  let ib = b as i32;\n+\n+  if (ua + 1) as i32 != ib { unsafe { abort (); } }\n+\n+  let tt = ua;\n+  let aa = tt as char;\n+\n+  let ttt = tt + 1;\n+  let ab = ttt as char;\n+\n+  if aa != 'a' || ab != 'b' { unsafe { abort (); } }\n+}"}, {"sha": "bf181df7045e34dceb154b5921b6cf36c468e8be", "filename": "gcc/testsuite/rust/compile/torture/associated_types1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fassociated_types1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fassociated_types1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fassociated_types1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,12 @@\n+pub trait Foo {\n+    type A;\n+\n+    fn boo(&self) -> <Self as Foo>::A;\n+}\n+\n+fn foo2<I: Foo>(x: I) {\n+    // { dg-warning \"function is never used: .foo2.\" \"\" { target *-*-* } .-1 }\n+    x.boo();\n+}\n+\n+pub fn main() {}"}, {"sha": "0cf070f1f37e2b8f3e6dc266e862c6c4f55276c1", "filename": "gcc/testsuite/rust/compile/torture/autoderef1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fautoderef1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fautoderef1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fautoderef1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,15 @@\n+struct Foo(i32, bool);\n+struct Bar {\n+    a: i32,\n+    b: bool,\n+}\n+\n+fn main() {\n+    let a = &Foo(123, false);\n+    let _b: i32 = a.0;\n+    let _c: bool = a.1;\n+\n+    let a = &Bar { a: 456, b: false };\n+    let _b: i32 = a.a;\n+    let _c: bool = a.b;\n+}"}, {"sha": "011cc1fc89d59ebe30cc4ad7843bec255c58ce1f", "filename": "gcc/testsuite/rust/compile/torture/block_expr1.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,29 @@\n+fn test3(x: i32) -> i32 {\n+    if x > 1 {\n+        5\n+    } else {\n+        0\n+    }\n+}\n+\n+fn test5(x: i32) -> i32 {\n+    if x > 1 {\n+        if x == 5 {\n+            7\n+        } else {\n+            9\n+        }\n+    } else {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let call3: i32 = { test3(3) + 2 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let call5 = {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        let a = test5(5);\n+        a + 1\n+    };\n+}"}, {"sha": "7c3ff6980974b85e9948e0eb80fbe6021dd52223", "filename": "gcc/testsuite/rust/compile/torture/block_expr2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,15 @@\n+fn test() -> i32 {\n+    123\n+}\n+\n+fn main() {\n+    let a = { test() };\n+    let b = {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        if a > 10 {\n+            a - 1\n+        } else {\n+            a + 1\n+        }\n+    };\n+}"}, {"sha": "6914b6379d717e4bf524b3deb88162ab2d26e710", "filename": "gcc/testsuite/rust/compile/torture/block_expr3.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    let x = 111;\n+\n+    let a = {\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        if x == 10 {\n+            123\n+        } else if x < 10 {\n+            456\n+        } else {\n+            789\n+        }\n+    };\n+}"}, {"sha": "da033ef9ef4e087eb09e7274386bab5325796231", "filename": "gcc/testsuite/rust/compile/torture/block_expr4.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+fn foo() -> isize {\n+    0\n+}\n+\n+fn main() {\n+    let a = foo();\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "7e164a949bbf21a0bcbc97efb945a599a24d665d", "filename": "gcc/testsuite/rust/compile/torture/block_expr5.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,40 @@\n+fn foo() -> i32 {\n+    0\n+}\n+\n+fn bar() -> i32 {\n+    foo();\n+    foo()\n+}\n+\n+fn baz() -> i32 {\n+    {\n+        bar();\n+        bar();\n+    }\n+    {\n+        bar();\n+        bar()\n+    };\n+    {\n+        bar();\n+        bar()\n+    }\n+}\n+\n+fn test(ok: i32) -> i32 {\n+    if ok >= 1 {\n+        foo()\n+    } else if ok <= -1 {\n+        bar()\n+    } else {\n+        baz()\n+    }\n+}\n+\n+fn main() {\n+    let a = foo();\n+    let b = bar();\n+    let c = baz();\n+    test(a + b + c);\n+}"}, {"sha": "468aace9881a78b4732ba3d1da0808545a73eb65", "filename": "gcc/testsuite/rust/compile/torture/block_expr_parser_bug.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr_parser_bug.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr_parser_bug.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fblock_expr_parser_bug.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a = 123;\n+    let b = if a > 10 { a - 1 } else { a + 1 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "5edcab227ee20bfbedd3fd3c7f7a2bac7da9324b", "filename": "gcc/testsuite/rust/compile/torture/bom.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1 @@\n+\ufeffpub fn main () { }"}, {"sha": "020e1707b556438ebedf4e5ff5c9b05596d17b08", "filename": "gcc/testsuite/rust/compile/torture/bom_comment.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_comment.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,2 @@\n+\ufeff// UTF8 BOM\n+pub fn main () { }"}, {"sha": "4c552e8d71dc116e8f1c0d8154eca69b511f43fe", "filename": "gcc/testsuite/rust/compile/torture/bom_shebang.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_shebang.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_shebang.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_shebang.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,2 @@\n+\ufeff#!/usr/bin/cat\n+pub fn main () { }"}, {"sha": "b10d5654473e7024d3f5134c5cbe26a1b57bed4b", "filename": "gcc/testsuite/rust/compile/torture/bom_whitespace.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_whitespace.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_whitespace.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbom_whitespace.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,2 @@\n+\ufeff\n+pub fn main () { }"}, {"sha": "965127b5d542d1dec031872b72d3215de951f7b6", "filename": "gcc/testsuite/rust/compile/torture/bools_eq.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbools_eq.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbools_eq.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbools_eq.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,18 @@\n+extern \"C\"\n+{\n+  fn abort ();\n+}\n+\n+fn beq (a: bool, b: bool) -> bool\n+{\n+  let bools_eq = a == b;\n+  bools_eq\n+}\n+\n+pub fn main ()\n+{\n+  let a = true;\n+  let b = false;\n+  let r = beq (a, b);\n+  if r { unsafe { abort (); } }\n+}"}, {"sha": "8afa4746fefb7e9f7b15ea97c17b517c735127f6", "filename": "gcc/testsuite/rust/compile/torture/borrow1.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fborrow1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fborrow1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fborrow1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,17 @@\n+fn main() {\n+    let a: i32;\n+    a = 123;\n+\n+    let b: &i32;\n+    b = &a;\n+\n+    let aa;\n+    aa = 456;\n+    let bb: &_;\n+    bb = &a;\n+\n+    let aaa;\n+    aaa = 123;\n+    let bbb;\n+    bbb = &aaa;\n+}"}, {"sha": "98c6f99683e6f750dd132afbfd7ff016a26791f7", "filename": "gcc/testsuite/rust/compile/torture/borrow_function.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fborrow_function.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fborrow_function.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fborrow_function.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {}\n+\n+fn main() {\n+    let _a = &foo;\n+}\n\\ No newline at end of file"}, {"sha": "043e91c9502d95651b6b396d4cbc2228442672fa", "filename": "gcc/testsuite/rust/compile/torture/break_function.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbreak_function.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbreak_function.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbreak_function.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+fn foo() -> i32 {\n+    1\n+}\n+    \n+fn main() {\n+    let _a = loop {\n+        break foo();\n+    };\n+}\n+    \n\\ No newline at end of file"}, {"sha": "bc3ec5014e89a5b6e6982b88a12c19ae8a2358ef", "filename": "gcc/testsuite/rust/compile/torture/byte_char_str.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_char_str.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_char_str.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_char_str.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+pub fn main ()\n+{\n+  let _c = 'x';\n+  let _bc = b'x';\n+\n+  let _s = \"abc\";\n+  let _bs = b\"abc\";\n+}"}, {"sha": "28934d2581d95b8d3f8a27c9ef2a523e1d8bfb68", "filename": "gcc/testsuite/rust/compile/torture/byte_str.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_str.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_str.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_str.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+pub fn main() {\n+    let a: &[u8; 4];\n+    a = b\"test\";\n+}"}, {"sha": "845d08cea01a55fb9690c243b7e8433cbf1885b9", "filename": "gcc/testsuite/rust/compile/torture/cast1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcast1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcast1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcast1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a: *const i32 = &123;\n+    let b: *mut i32 = (a as *mut i32);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "82925e93271ccfb09c077c3327c9f26d6cd0c4b7", "filename": "gcc/testsuite/rust/compile/torture/cast2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcast2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcast2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcast2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let a: i32 = 123i32;\n+    let b: u8 = a as u8;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "1de95687039b43a0cabe8106393a8a20901fcf26", "filename": "gcc/testsuite/rust/compile/torture/cast3.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcast3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcast3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcast3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let a = \"foo\\0\";\n+    let b = a as *const str;\n+    let c = b as *const i8;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "d65faf2972a044cc1d2ba0309e3ed235dabe7bd8", "filename": "gcc/testsuite/rust/compile/torture/cfg_attr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+mod fake {} // Add one line so gccrs doesn't believe we're parsing a shebang\n+\n+#[cfg_attr(feature = \"somefeature\", attribute = \"someattr\")]\n+struct Feature;\n+// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+\n+fn main() {}"}, {"sha": "73835c218a2900edc2ac995e858073e93f970345", "filename": "gcc/testsuite/rust/compile/torture/char1.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fchar1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fchar1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fchar1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let a;\n+    a = 'c';\n+}"}, {"sha": "e113120bdbc1b4f8cbfc4c8d0e7e289a348bf999", "filename": "gcc/testsuite/rust/compile/torture/check-doc-attr-string.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcheck-doc-attr-string.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcheck-doc-attr-string.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcheck-doc-attr-string.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,18 @@\n+#![crate_type = \"lib\"]\n+\n+#[doc(alias = \"foo\")] // ok!\n+#[doc(alias(\"bar\", \"baz\"))] // ok!\n+pub struct Bar;\n+\n+#[doc(alias = \"\n+\")] // { dg-error \"invalid character used\" \"\" { target *-*-* } .-1 }\n+pub struct Foo;\n+\n+#[doc(alias(\n+    \"\n+\"\n+))] // ko but unchecked for now\n+pub struct Foo2;\n+\n+#[doc(whatever = \"buidule\")] // ko as well but unchecked for now\n+struct Boo;"}, {"sha": "3bfa938ffdcb1e7cda0c3a94c0583c7c28d06999", "filename": "gcc/testsuite/rust/compile/torture/coercion1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+pub fn main() {\n+    let a: &i32 = &123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let b: &mut i32 = &mut 123;\n+\n+    let c: &i32 = &mut 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let d: &i32 = b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "127f257f8b6432459f51e644864f9b99a3cd096a", "filename": "gcc/testsuite/rust/compile/torture/coercion2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcoercion2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,20 @@\n+pub fn main() {\n+    let a: *const i32 = &123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let b: &i32 = &123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let c: &mut i32 = &mut 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let d: *mut i32 = &mut 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let e: &i32 = &mut 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let f: *const i32 = &mut 123;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let g = &123;\n+    let h: *const i32 = g;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "ed71ec890253525dede896ce39a87470d55606ff", "filename": "gcc/testsuite/rust/compile/torture/comparison_expr1.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcomparison_expr1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcomparison_expr1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcomparison_expr1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,38 @@\n+fn is_zero(x: i32) -> bool {\n+    x == 0\n+}\n+\n+fn is_not_zero(x: i32) -> bool {\n+    x != 0\n+}\n+\n+fn is_positive(x: i32) -> bool {\n+    x > 0\n+}\n+\n+fn is_negative(x: i32) -> bool {\n+    x < 0\n+}\n+\n+fn is_positive_or_zero(x: i32) -> bool {\n+    x >= 0\n+}\n+\n+fn is_negative_or_zero(x: i32) -> bool {\n+    x <= 0\n+}\n+\n+fn main() {\n+    let a: bool = is_zero(1);\n+    let b: bool = is_not_zero(2);\n+    let c: bool = is_positive(3);\n+    let d: bool = is_negative(4);\n+    let e: bool = is_positive_or_zero(5);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let f: bool = is_negative_or_zero(6);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let g: bool = a || b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let h: bool = c && d;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "48da264a47a2c75c7ed1af35aa9ea772f897c23b", "filename": "gcc/testsuite/rust/compile/torture/compile.exp", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcompile.exp?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,33 @@\n+# Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Compile tests, torture testing.\n+\n+# Load support procs.\n+load_lib rust-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+set saved-dg-do-what-default ${dg-do-what-default}\n+\n+set dg-do-what-default \"compile\"\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.rs]] \"\" \"\"\n+set dg-do-what-default ${saved-dg-do-what-default}\n+\n+# All done.\n+dg-finish"}, {"sha": "1ff0d24cf8e67b3fadd3d083e9c668e3312cffc7", "filename": "gcc/testsuite/rust/compile/torture/compound_assignment_expr1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcompound_assignment_expr1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcompound_assignment_expr1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcompound_assignment_expr1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,23 @@\n+fn main() {\n+    let mut a = 1;\n+    let mut b = 2;\n+    let mut c = 3;\n+    let mut d = 4;\n+    let mut e = 5;\n+    let mut f = 6;\n+    let mut g = 7;\n+    let mut h = 8;\n+    let mut i = 9;\n+    let mut j = 10;\n+\n+    a += 1;\n+    b -= 2;\n+    c *= 3;\n+    d /= 4;\n+    e %= 5;\n+    f &= 6;\n+    g |= 7;\n+    h ^= 8;\n+    i <<= 9;\n+    j >>= 10;\n+}"}, {"sha": "2bb3a95f033ca6d73ac44e3b95b95b2ecea7cd15", "filename": "gcc/testsuite/rust/compile/torture/conditional.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconditional.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconditional.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconditional.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let mut x = 5;\n+\n+    if x == 5 {\n+        x = 1;\n+    } else if x == 3 {\n+        x = 2;\n+    } else {\n+        x = 3;\n+    }\n+}"}, {"sha": "57bcb0b497020159efb623ee835eccf11990e2b5", "filename": "gcc/testsuite/rust/compile/torture/constant1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+const TEST_CONST:i32 = 10;\n+\n+fn main() {\n+    let mut x = TEST_CONST;\n+    x = x + 1;\n+\n+    let mut y = x + TEST_CONST;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "d06324e8e65445e542693483311c2ba5bf864184", "filename": "gcc/testsuite/rust/compile/torture/constant2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    const C: usize = 42;\n+\n+    let _a = C;\n+    let _b: [i32; C] = [0; C];\n+}"}, {"sha": "d2f1dd5b6db6471ee24ff074d7b2934d56a0fae9", "filename": "gcc/testsuite/rust/compile/torture/constant3.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fconstant3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    const A: [i32; 3] = [1, 2, 3];\n+    const B: i32 = A[1];\n+    const C: usize = 42;\n+    const D: i32 = 7;\n+\n+    let _a = C;\n+    let _b: [i32; C] = [0; C];\n+    let _c = B + D;\n+}"}, {"sha": "1ba646f5c56a7f6f42a33df96fc20c7e3f688dea", "filename": "gcc/testsuite/rust/compile/torture/deadcode1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fdeadcode1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fdeadcode1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fdeadcode1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,22 @@\n+fn test1() -> i32 {\n+    return 2;\n+    // { dg-warning \"unreachable expression\" \"\" { target *-*-* } .+1 }\n+    1\n+}\n+\n+fn test2(x: i32) -> i32 {\n+    if x > 1 {\n+        return 5;\n+    } else {\n+        return 0;\n+    }\n+    // { dg-warning \"unreachable statement\" \"\" { target *-*-* } .+1 }\n+    return 1;\n+}\n+\n+fn main() {\n+    let call1 = test1();\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let call2 = test2(2);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "ba7d5f015e967cc47b089e1501f08b826ae983fa", "filename": "gcc/testsuite/rust/compile/torture/deadcode2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fdeadcode2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fdeadcode2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fdeadcode2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+fn foo() -> i32 {\n+    return 1;\n+\n+    let a = -1; // { dg-warning \"unreachable statement\" }\n+    a // { dg-warning \"unreachable expression\" }\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "d715ce96c7921b6df3fe724100914838061fb46b", "filename": "gcc/testsuite/rust/compile/torture/deref1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fderef1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fderef1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fderef1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let a = 123;\n+    let b = &a;\n+    let c = *b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "b1c5ff63423f89798ebd83187bac08e0fa6998a5", "filename": "gcc/testsuite/rust/compile/torture/deref_function.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fderef_function.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fderef_function.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fderef_function.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,10 @@\n+fn foo() {}\n+\n+\n+fn main() {\n+    let _c = *{\n+\tlet _a = foo;\n+\tlet b = &1;\n+\tb\n+    };\n+}\n\\ No newline at end of file"}, {"sha": "f99e41524aef0025689dc9479e7d92e743106cef", "filename": "gcc/testsuite/rust/compile/torture/doc_comment.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fdoc_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fdoc_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fdoc_comment.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,16 @@\n+/// doc comment 1\n+/// doc comment 2\n+/// `blah blah` markdown\n+pub struct TestStruct {}\n+\n+#[doc(hidden)]\n+pub struct DocAttribute {}\n+\n+#[doc(a,b)]\n+pub struct UnkAttribute {}\n+\n+fn main() {\n+    let _ = TestStruct {};\n+    let _ = DocAttribute {};\n+    let _ = UnkAttribute {};\n+}"}, {"sha": "7cea48f29e22177c4c2feb78498b032a90062fde", "filename": "gcc/testsuite/rust/compile/torture/enum1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fenum1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fenum1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fenum1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+enum Foo {\n+    A,\n+    B,\n+    C(char),\n+    D { x: i64, y: i64 },\n+}\n+\n+fn main() {\n+    let _a = Foo::A;\n+    let _b = Foo::B;\n+    let _c = Foo::C('x');\n+    let _d = Foo::D { x: 20, y: 80 };\n+}"}, {"sha": "4b576e03d8072effff189ddbd03db9924034cb0e", "filename": "gcc/testsuite/rust/compile/torture/extern_mod1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options \"-w\" }\n+mod modules;\n+\n+fn main() {\n+    let twelve = modules::return_12();\n+}"}, {"sha": "4984d5dc2c14b063ffe9e99ae966b7328a946a25", "filename": "gcc/testsuite/rust/compile/torture/extern_mod2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fextern_mod2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,23 @@\n+// { dg-additional-options \"-w\" }\n+\n+#[path = \"modules/valid_path.rs\"]\n+mod not_a_valid_path;\n+\n+#[path =\"modules/valid_path.rs\"]\n+mod path_without_extra_equal;\n+\n+#[path= \"modules/valid_path.rs\"]\n+mod no_leading_equal;\n+\n+#[path       =     \"modules/valid_path.rs\"]\n+mod extra_spaces;\n+\n+#[path] // { dg-error \"path attributes must contain a filename\" }\n+mod error; // { dg-error \"no candidate found\" }\n+\n+// This is \"valid\", and should only error out when parsing\n+// the file\n+#[path = \"not_a_valid_file.rs\"]\n+mod another_error; // { dg-error \"No such file or directory\" }\n+\n+fn main() {}"}, {"sha": "fbe8938226726a9250cf7afbbf9cbbc6f6c865ec", "filename": "gcc/testsuite/rust/compile/torture/float1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffloat1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffloat1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffloat1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn test(x: f32) -> f32 {\n+    return x + 1.0;\n+}\n+\n+fn main() {\n+    let a_float = 5.123;\n+    let call_test = test(a_float + 1.0);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "7d3d298a1bbf47fd117d3197197c41ebfbb774d4", "filename": "gcc/testsuite/rust/compile/torture/float_types.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffloat_types.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffloat_types.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffloat_types.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+// { dg-prune-output \"warning: unused name\" } as there are many of these expected.\n+\n+fn main() {\n+    let a1: f32 = 1.0f32;\n+    let a2: f64 = 2.0f64;\n+    let a3: f32 = 3f32;\n+    let a4: f64 = 4f64;\n+\n+    let b1 = 1.0f32;\n+    let b2 = 2.0f64;\n+    let b3 = 3f32;\n+    let b4 = 4f64;\n+}"}, {"sha": "b8403f9b97f880d1a48356d41cf7e0201dc22ddb", "filename": "gcc/testsuite/rust/compile/torture/forward_decl_1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let mut an_integer = 5;\n+    an_integer = test(1) + 3;\n+\n+    let call_test = test(1);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn test(x: i32) -> i32 {\n+    return x + 1;\n+}"}, {"sha": "efc3b0dc5650d88433acc1ecd60191f6347db0b1", "filename": "gcc/testsuite/rust/compile/torture/forward_decl_2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let y = x + 1;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}\n+\n+static x: i32 = 3;"}, {"sha": "04935864f0274491ab27f1597b7d4468d83c6aaf", "filename": "gcc/testsuite/rust/compile/torture/forward_decl_3-unsafe.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_3-unsafe.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_3-unsafe.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_3-unsafe.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    unsafe {\n+        let struct_test = Foo { one: 1, two: 2 };\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    };\n+}\n+\n+struct Foo {\n+    one: i32,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    two: i32,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "9256df5f728ae64a13736e1450de9b84d76fd612", "filename": "gcc/testsuite/rust/compile/torture/forward_decl_3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let struct_test = Foo { one: 1, two: 2 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}\n+\n+struct Foo {\n+    one: i32,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    two: i32,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "e1fe51f9025e67d278073380f488ccf4afbee5d2", "filename": "gcc/testsuite/rust/compile/torture/forward_decl_4.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    let mut x = TEST_CONST;\n+    x = x + 1;\n+\n+    let mut y = x + TEST_CONST;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}\n+\n+const TEST_CONST: i32 = 10;"}, {"sha": "73a47fe061bbf8ddaee5ff0e7f6f1e430bcaf918", "filename": "gcc/testsuite/rust/compile/torture/forward_decl_5.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fforward_decl_5.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,19 @@\n+pub fn main() {\n+    let a;\n+    a = foo { a: 123, b: 456f32 };\n+\n+    let mut a = 123;\n+    a = bar(a);\n+\n+    let mut b = 456f32;\n+    b = bar(b);\n+\n+    fn bar<T>(x: T) -> T {\n+        x\n+    }\n+\n+    struct foo {\n+        a: i32,\n+        b: f32,\n+    };\n+}"}, {"sha": "df1789e7bbe9fba26e464e5f837bbd0e5942009e", "filename": "gcc/testsuite/rust/compile/torture/func1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunc1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunc1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunc1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,7 @@\n+fn not_void() -> i32 {\n+    8\n+}\n+\n+fn main() {\n+    not_void();\n+}"}, {"sha": "f7dd556d955b21ee4aab4fd2845662f88852e0f7", "filename": "gcc/testsuite/rust/compile/torture/func2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunc2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunc2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunc2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,20 @@\n+fn foo() {\n+    8;\n+    8;\n+}\n+\n+fn bar() -> i32 {\n+    8;\n+    8\n+}\n+\n+fn baz() -> i32 {\n+    8;\n+    return 8;\n+}\n+\n+fn main() {\n+    let a = foo(); // { dg-warning \"unused name\" }\n+    let b = bar(); // { dg-warning \"unused name\" }\n+    let c = baz(); // { dg-warning \"unused name\" }\n+}"}, {"sha": "dfbd01bdbdcc2d524ab6b7874745aa6f9093114c", "filename": "gcc/testsuite/rust/compile/torture/function_reference1.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn test(a: i32) -> i32 {\n+    a + 1\n+}\n+\n+fn main() {\n+    let a = test;\n+    let b = a(1);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "3c3e7c10910c9b636c8f9f723a660e3598e4a0fd", "filename": "gcc/testsuite/rust/compile/torture/function_reference2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference2.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn test(a: i32) -> i32 {\n+    a + 1\n+}\n+\n+fn main() {\n+    let a: fn(i32) -> i32 = test;\n+    let b = a(1);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "0cb3181f4a16f024e7ed87195d903db135563acd", "filename": "gcc/testsuite/rust/compile/torture/function_reference3.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference3.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,20 @@\n+struct Foo {\n+    a: fn(i32) -> i32,\n+    b: i32,\n+}\n+\n+fn test(a: i32) -> i32 {\n+    a + 1\n+}\n+\n+fn main() {\n+    let a = test(1);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let b: fn(i32) -> i32 = test;\n+    let c = b(1);\n+\n+    let d = Foo { a: test, b: c };\n+    let e = (d.a)(d.b);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "977e4c9721593ab38af8f2bef07722d9b7e01312", "filename": "gcc/testsuite/rust/compile/torture/function_reference4.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ffunction_reference4.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,9 @@\n+fn test(a: i32) -> i32 {\n+    a + 1\n+}\n+\n+fn main() {\n+    let a: fn(_) -> _ = test;\n+    let b = a(1);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "87bcdc8f305d4ce011775f24185b92bd3e5249db", "filename": "gcc/testsuite/rust/compile/torture/generics1.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics1.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,51 @@\n+struct Foo {\n+    a: f32,\n+    b: bool,\n+}\n+\n+struct GenericStruct<T> {\n+    a: T,\n+    b: usize,\n+}\n+\n+fn main() {\n+    let a1;\n+    a1 = Foo { a: 1.0, b: false };\n+\n+    let b1: f32 = a1.a;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let c1: bool = a1.b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let a2: GenericStruct<i8>;\n+    a2 = GenericStruct::<i8> { a: 1, b: 456 };\n+\n+    let b2: i8 = a2.a;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let c2: usize = a2.b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let a3;\n+    a3 = GenericStruct::<i32> { a: 123, b: 456 };\n+\n+    let b3: i32 = a3.a;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let c3: usize = a3.b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let a4;\n+    a4 = GenericStruct { a: 1.0, b: 456 };\n+\n+    let b4: f32 = a4.a;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let c4: usize = a4.b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let a5;\n+    a5 = GenericStruct::<_> { a: true, b: 456 };\n+\n+    let b5: bool = a5.a;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let c5: usize = a5.b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "8473d49587ba6d504b675c08433779d64135984b", "filename": "gcc/testsuite/rust/compile/torture/generics10.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics10.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,20 @@\n+struct Foo<T>(T);\n+\n+struct Bar<T> {\n+    a: Foo<T>,\n+    b: bool,\n+// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}\n+\n+fn test<T>(a: Bar<T>) -> Foo<T> {\n+    a.a\n+}\n+\n+fn main() {\n+    let a: Bar<i32> = Bar::<i32> {\n+        a: Foo::<i32>(123),\n+        b: true,\n+    };\n+    let b: Foo<i32> = test(a);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "3c8f5ba0058d3de7964a10f3f0a3e80923041efd", "filename": "gcc/testsuite/rust/compile/torture/generics11.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics11.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,8 @@\n+struct Foo<T>(T, u32);\n+\n+type TypeAlias = Foo<i32>;\n+\n+fn main() {\n+    let a: Foo<i32>;\n+    a = TypeAlias { 0: 123, 1: 456 };\n+}"}, {"sha": "f31be584e09b518113eb8c863a788c4c0243b5e4", "filename": "gcc/testsuite/rust/compile/torture/generics12.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics12.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics12.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics12.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,17 @@\n+struct GenericStruct<T>(T, usize);\n+\n+impl GenericStruct<i32> {\n+    fn new(a: i32, b: usize) -> Self {\n+        GenericStruct(a, b)\n+    }\n+\n+    fn get(self) -> i32 {\n+        self.0\n+    }\n+}\n+\n+fn main() {\n+    let a: GenericStruct<i32> = GenericStruct::<i32>::new(123, 456);\n+    let aa: i32 = a.get();\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "9eb598f02a84b6e62bb2b78e25e7ac3540476fb5", "filename": "gcc/testsuite/rust/compile/torture/generics13.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,41 @@\n+struct Foo<A> {\n+    a: A,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}\n+\n+struct GenericStruct<T> {\n+    a: T,\n+    b: usize,\n+}\n+\n+impl Foo<isize> {\n+    fn test() -> i32 {\n+        123\n+    }\n+\n+    fn bar(self) -> isize {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        self.a\n+    }\n+}\n+\n+fn main() {\n+    let a: i32 = Foo::test();\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let a2: GenericStruct<i8>;\n+    a2 = GenericStruct::<i8> { a: 1, b: 456 };\n+\n+    let b2: i8 = a2.a;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let c2: usize = a2.b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let a4;\n+    a4 = GenericStruct { a: 1.0, b: 456 };\n+\n+    let b4: f32 = a4.a;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let c4: usize = a4.b;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "e51a4079e30e455b32a569eb818b6cc28ffc3356", "filename": "gcc/testsuite/rust/compile/torture/generics14.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97705b4459b645770ffb6c01ff6177de6774ef3c/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs?ref=97705b4459b645770ffb6c01ff6177de6774ef3c", "patch": "@@ -0,0 +1,20 @@\n+struct Foo<A> {\n+    a: A,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}\n+\n+impl Foo<isize> {\n+    fn test() -> i32 {\n+        123\n+    }\n+\n+    fn bar(self) -> isize {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        self.a\n+    }\n+}\n+\n+fn main() {\n+    let a: i32 = Foo::test();\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}]}