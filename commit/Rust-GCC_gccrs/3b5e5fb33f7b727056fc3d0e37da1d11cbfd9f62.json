{"sha": "3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I1ZTVmYjMzZjdiNzI3MDU2ZmMzZDBlMzdkYTFkMTFjYmZkOWY2Mg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-04-13T12:10:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-13T12:10:07Z"}, "message": "pa.c: Use a register name...\n\n        * pa.c: Use a register name, not a raw immediate in branch,\n        compare/clear, sub, subb, uaddcm and vshd instructions.\n        * pa.md: Likewise.\n\nFrom-SVN: r26404", "tree": {"sha": "364db7ca5c11eb9be8f7ffa8d3e3893e7cdf2c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/364db7ca5c11eb9be8f7ffa8d3e3893e7cdf2c5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62/comments", "author": null, "committer": null, "parents": [{"sha": "f24d52e1abf8c975974da9965d422a1e608d78b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24d52e1abf8c975974da9965d422a1e608d78b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24d52e1abf8c975974da9965d422a1e608d78b0"}], "stats": {"total": 98, "additions": 52, "deletions": 46}, "files": [{"sha": "ee6ed839e91f24fef5130e2e8522040f9a672bd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62", "patch": "@@ -10,6 +10,12 @@ Tue Apr 13 05:04:59 1999  Richard Earnshaw (rearnsha@arm.com)\n \n Tue Apr 13 02:11:11 1999  Jeffrey A Law  (law@cygnus.com)\n \n+        * pa.c: Use a register name, not a raw immediate in branch,\n+\tcompare/clear, sub, subb, uaddcm and vshd instructions.\n+\t* pa.md: Likewise.\n+\n+        * pa.md, pa.h, ee.asm, ee_fp.asm, lib2funcs.asm: Likewise.\n+\n \t* pa.c: Use a register name, not a raw immediate in \"bv\" instructions.\n \t* pa.md, pa.h, ee.asm, ee_fp.asm, lib2funcs.asm: Likewise.\n "}, {"sha": "918e6a73cc86d7cbbf8f8a16fb2420cdc72269d7", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62", "patch": "@@ -4472,7 +4472,7 @@ output_cbranch (operands, nullify, length, negated, insn)\n \telse\n \t  strcat (buf, \"%S3\");\n \tif (useskip)\n-\t  strcat (buf, \" %2,%r1,0\");\n+\t  strcat (buf, \" %2,%r1,%%r0\");\n \telse if (nullify)\n \t  strcat (buf, \",n %2,%r1,%0\");\n \telse\n@@ -4494,7 +4494,7 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t      strcat (buf, \"%S3\");\n \t    else\n \t      strcat (buf, \"%B3\");\n-\t    strcat (buf, \",n %2,%r1,.+12\\n\\tbl %0,0\");\n+\t    strcat (buf, \",n %2,%r1,.+12\\n\\tb %0\");\n \t  }\n \t/* Handle short backwards branch with an unfilled delay slot.\n \t   Using a comb;nop rather than comiclr;bl saves 1 cycle for both\n@@ -4519,9 +4519,9 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t    else\n \t      strcat (buf, \"%B3\");\n \t    if (nullify)\n-\t      strcat (buf, \" %2,%r1,0\\n\\tbl,n %0,0\");\n+\t      strcat (buf, \" %2,%r1,%%r0\\n\\tb,n %0\");\n \t    else\n-\t      strcat (buf, \" %2,%r1,0\\n\\tbl %0,0\");\n+\t      strcat (buf, \" %2,%r1,%%r0\\n\\tb %0\");\n \t  }\n \tbreak;\n \n@@ -4654,7 +4654,7 @@ output_bb (operands, nullify, length, negated, insn, which)\n \telse\n \t  strcat (buf, \"<\");\n \tif (useskip)\n-\t  strcat (buf, \" %0,%1,1,0\");\n+\t  strcat (buf, \" %0,%1,1,%%r0\");\n \telse if (nullify && negated)\n \t  strcat (buf, \",n %0,%1,%3\");\n \telse if (nullify && ! negated)\n@@ -4682,9 +4682,9 @@ output_bb (operands, nullify, length, negated, insn, which)\n \t    else\n \t      strcat (buf, \">=\");\n \t    if (negated)\n-\t      strcat (buf, \",n %0,%1,.+12\\n\\tbl %3,0\");\n+\t      strcat (buf, \",n %0,%1,.+12\\n\\tb %3\");\n \t    else\n-\t      strcat (buf, \",n %0,%1,.+12\\n\\tbl %2,0\");\n+\t      strcat (buf, \",n %0,%1,.+12\\n\\tb %2\");\n \t  }\n \t/* Handle short backwards branch with an unfilled delay slot.\n \t   Using a bb;nop rather than extrs;bl saves 1 cycle for both\n@@ -4715,13 +4715,13 @@ output_bb (operands, nullify, length, negated, insn, which)\n \t    else\n \t      strcat (buf, \">=\");\n \t    if (nullify && negated)\n-\t      strcat (buf, \" %0,%1,1,0\\n\\tbl,n %3,0\");\n+\t      strcat (buf, \" %0,%1,1,%%r0\\n\\tbn %3\");\n \t    else if (nullify && ! negated)\n-\t      strcat (buf, \" %0,%1,1,0\\n\\tbl,n %2,0\");\n+\t      strcat (buf, \" %0,%1,1,%%r0\\n\\tbn %2\");\n \t    else if (negated)\n-\t      strcat (buf, \" %0,%1,1,0\\n\\tbl %3,0\");\n+\t      strcat (buf, \" %0,%1,1,%%r0\\n\\tb %3\");\n \t    else\n-\t      strcat (buf, \" %0,%1,1,0\\n\\tbl %2,0\");\n+\t      strcat (buf, \" %0,%1,1,%%r0\\n\\tb %2\");\n \t  }\n \tbreak;\n \n@@ -4792,7 +4792,7 @@ output_bvb (operands, nullify, length, negated, insn, which)\n \telse\n \t  strcat (buf, \"<\");\n \tif (useskip)\n-\t  strcat (buf, \" %0,1,0\");\n+\t  strcat (buf, \" %0,1,%%r0\");\n \telse if (nullify && negated)\n \t  strcat (buf, \",n %0,%3\");\n \telse if (nullify && ! negated)\n@@ -4820,9 +4820,9 @@ output_bvb (operands, nullify, length, negated, insn, which)\n \t    else\n \t      strcat (buf, \">=\");\n \t    if (negated)\n-\t      strcat (buf, \",n %0,.+12\\n\\tbl %3,0\");\n+\t      strcat (buf, \",n %0,.+12\\n\\tb %3\");\n \t    else\n-\t      strcat (buf, \",n %0,.+12\\n\\tbl %2,0\");\n+\t      strcat (buf, \",n %0,.+12\\n\\tb %2\");\n \t  }\n \t/* Handle short backwards branch with an unfilled delay slot.\n \t   Using a bb;nop rather than extrs;bl saves 1 cycle for both\n@@ -4853,13 +4853,13 @@ output_bvb (operands, nullify, length, negated, insn, which)\n \t    else\n \t      strcat (buf, \">=\");\n \t    if (nullify && negated)\n-\t      strcat (buf, \" %0,1,0\\n\\tbl,n %3,0\");\n+\t      strcat (buf, \" %0,1,%%r0\\n\\tbn %3\");\n \t    else if (nullify && ! negated)\n-\t      strcat (buf, \" %0,1,0\\n\\tbl,n %2,0\");\n+\t      strcat (buf, \" %0,1,%%r0\\n\\tbn %2\");\n \t    else if (negated)\n-\t      strcat (buf, \" %0,1,0\\n\\tbl %3,0\");\n+\t      strcat (buf, \" %0,1,%%r0\\n\\tb %3\");\n \t    else\n-\t      strcat (buf, \" %0,1,0\\n\\tbl %2,0\");\n+\t      strcat (buf, \" %0,1,%%r0\\n\\tb %2\");\n \t  }\n \tbreak;\n \n@@ -4928,7 +4928,7 @@ output_dbra (operands, insn, which_alternative)\n \t  if (dbr_sequence_length () != 0\n \t      && ! forward_branch_p (insn)\n \t      && nullify)\n-\t    return \"addib,%N2,n %1,%0,.+12\\n\\tbl %3,0\";\n+\t    return \"addib,%N2,n %1,%0,.+12\\n\\tb %3\";\n \t  /* Handle short backwards branch with an unfilled delay slot.\n \t     Using a addb;nop rather than addi;bl saves 1 cycle for both\n \t     taken and untaken branches.  */\n@@ -4941,9 +4941,9 @@ output_dbra (operands, insn, which_alternative)\n \n \t  /* Handle normal cases.  */\n \t  if (nullify)\n-\t    return \"addi,%N2 %1,%0,%0\\n\\tbl,n %3,0\";\n+\t    return \"addi,%N2 %1,%0,%0\\n\\tb,n %3\";\n \t  else\n-\t    return \"addi,%N2 %1,%0,%0\\n\\tbl %3,0\";\n+\t    return \"addi,%N2 %1,%0,%0\\n\\tb %3\";\n \t}\n       else\n \tabort();\n@@ -4957,9 +4957,9 @@ output_dbra (operands, insn, which_alternative)\n       output_asm_insn (\"fstws %0,-16(%%r30)\\n\\tldw -16(%%r30),%4\",operands);\n       output_asm_insn (\"ldo %1(%4),%4\\n\\tstw %4,-16(%%r30)\", operands);\n       if (get_attr_length (insn) == 24)\n-\treturn \"comb,%S2 0,%4,%3\\n\\tfldws -16(%%r30),%0\";\n+\treturn \"comb,%S2 %%r0,%4,%3\\n\\tfldws -16(%%r30),%0\";\n       else\n-\treturn \"comclr,%B2 0,%4,0\\n\\tbl %3,0\\n\\tfldws -16(%%r30),%0\";\n+\treturn \"comclr,%B2 %%r0,%4,%%r0\\n\\tb %3\\n\\tfldws -16(%%r30),%0\";\n     }\n   /* Deal with gross reload from memory case.  */\n   else\n@@ -4970,7 +4970,7 @@ output_dbra (operands, insn, which_alternative)\n       if (get_attr_length (insn) == 12)\n \treturn \"addib,%C2 %1,%4,%3\\n\\tstw %4,%0\";\n       else\n-\treturn \"addi,%N2 %1,%4,%4\\n\\tbl %3,0\\n\\tstw %4,%0\";\n+\treturn \"addi,%N2 %1,%4,%4\\n\\tb %3\\n\\tstw %4,%0\";\n     }\n }\n \n@@ -5035,7 +5035,7 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n \t  if (dbr_sequence_length () != 0\n \t      && ! forward_branch_p (insn)\n \t      && nullify)\n-\t    return \"movb,%N2,n %1,%0,.+12\\n\\tbl %3,0\";\n+\t    return \"movb,%N2,n %1,%0,.+12\\n\\tb %3\";\n \n \t  /* Handle short backwards branch with an unfilled delay slot.\n \t     Using a movb;nop rather than or;bl saves 1 cycle for both\n@@ -5048,9 +5048,9 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n \t    return \"movb,%C2 %1,%0,%3%#\";\n \t  /* Handle normal cases.  */\n \t  if (nullify)\n-\t    return \"or,%N2 %1,%%r0,%0\\n\\tbl,n %3,0\";\n+\t    return \"or,%N2 %1,%%r0,%0\\n\\tb,n %3\";\n \t  else\n-\t    return \"or,%N2 %1,%%r0,%0\\n\\tbl %3,0\";\n+\t    return \"or,%N2 %1,%%r0,%0\\n\\tb %3\";\n \t}\n       else\n \tabort();\n@@ -5063,27 +5063,27 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n \t the FP register from MEM from within the branch's delay slot.  */\n       output_asm_insn (\"stw %1,-16(%%r30)\",operands);\n       if (get_attr_length (insn) == 12)\n-\treturn \"comb,%S2 0,%1,%3\\n\\tfldws -16(%%r30),%0\";\n+\treturn \"comb,%S2 %%r0,%1,%3\\n\\tfldws -16(%%r30),%0\";\n       else\n-\treturn \"comclr,%B2 0,%1,0\\n\\tbl %3,0\\n\\tfldws -16(%%r30),%0\";\n+\treturn \"comclr,%B2 %%r0,%1,%%r0\\n\\tb %3\\n\\tfldws -16(%%r30),%0\";\n     }\n   /* Deal with gross reload from memory case.  */\n   else if (which_alternative == 2)\n     {\n       /* Reload loop counter from memory, the store back to memory\n \t happens in the branch's delay slot.   */\n       if (get_attr_length (insn) == 8)\n-\treturn \"comb,%S2 0,%1,%3\\n\\tstw %1,%0\";\n+\treturn \"comb,%S2 %%r0,%1,%3\\n\\tstw %1,%0\";\n       else\n-\treturn \"comclr,%B2 0,%1,0\\n\\tbl %3,0\\n\\tstw %1,%0\";\n+\treturn \"comclr,%B2 %%r0,%1,%%r0\\n\\tb %3\\n\\tstw %1,%0\";\n     }\n   /* Handle SAR as a destination.  */\n   else\n     {\n       if (get_attr_length (insn) == 8)\n-\treturn \"comb,%S2 0,%1,%3\\n\\tmtsar %r1\";\n+\treturn \"comb,%S2 %%r0,%1,%3\\n\\tmtsar %r1\";\n       else\n-\treturn \"comclr,%B2 0,%1,0\\n\\tbl %3,0\\n\\tmtsar %r1\";\n+\treturn \"comclr,%B2 %%r0,%1,%%r0\\n\\tbl %3\\n\\tmtsar %r1\";\n     }\n }\n \n@@ -5157,7 +5157,7 @@ output_millicode_call (insn, call_dest)\n \t  output_asm_insn (\"ldo R%%%0(%%r29),%%r29\", xoperands);\n \n \t  /* Get our return address into %r31.  */\n-\t  output_asm_insn (\"blr 0,%%r31\", xoperands);\n+\t  output_asm_insn (\"blr %%r0,%%r31\", xoperands);\n \n \t  /* Jump to our target address in %r29.  */\n \t  output_asm_insn (\"bv,n %%r0(%%r29)\", xoperands);\n@@ -5415,7 +5415,7 @@ output_call (insn, call_dest)\n \t      output_asm_insn (\"ldo R%%$$dyncall-%1(%%r1),%%r1\", xoperands);\n \n \t      /* Get the return address into %r31.  */\n-\t      output_asm_insn (\"blr 0,%%r31\", xoperands);\n+\t      output_asm_insn (\"blr %%r0,%%r31\", xoperands);\n \n \t      /* Branch to our target which is in %r1.  */\n \t      output_asm_insn (\"bv %%r0(%%r1)\", xoperands);\n@@ -5823,17 +5823,17 @@ output_parallel_movb (operands, length)\n       /* Nothing in the delay slot, fake it by putting the combined\n \t insn (the copy or add) in the delay slot of a bl.  */\n       if (GET_CODE (operands[1]) == CONST_INT)\n-\treturn \"bl %2,0\\n\\tldi %1,%0\";\n+\treturn \"b %2\\n\\tldi %1,%0\";\n       else\n-\treturn \"bl %2,0\\n\\tcopy %1,%0\";\n+\treturn \"b %2\\n\\tcopy %1,%0\";\n     }\n   else\n     {\n       /* Something in the delay slot, but we've got a long branch.  */\n       if (GET_CODE (operands[1]) == CONST_INT)\n-\treturn \"ldi %1,%0\\n\\tbl %2,0\";\n+\treturn \"ldi %1,%0\\n\\tb %2\";\n       else\n-\treturn \"copy %1,%0\\n\\tbl %2,0\";\n+\treturn \"copy %1,%0\\n\\tb %2\";\n     }\n }\n \n@@ -5858,12 +5858,12 @@ output_parallel_addb (operands, length)\n     {\n       /* Nothing in the delay slot, fake it by putting the combined\n \t insn (the copy or add) in the delay slot of a bl.  */\n-      return \"bl %3,0\\n\\tadd%I1 %1,%0,%0\";\n+      return \"b %3\\n\\tadd%I1 %1,%0,%0\";\n     }\n   else\n     {\n       /* Something in the delay slot, but we've got a long branch.  */\n-      return \"add%I1 %1,%0,%0\\n\\tbl %3,0\";\n+      return \"add%I1 %1,%0,%0\\n\\tb %3\";\n     }\n }\n "}, {"sha": "ed3be78eb23642803f69dff41a6a2dde4b732788", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=3b5e5fb33f7b727056fc3d0e37da1d11cbfd9f62", "patch": "@@ -3478,15 +3478,15 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sub 0,%R1,%R0\\;subb 0,%1,%0\"\n+  \"sub %%r0,%R1,%R0\\;subb %%r0,%1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sub 0,%1,%0\"\n+  \"sub %%r0,%1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"4\")])\n \n@@ -3504,15 +3504,15 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"uaddcm 0,%1,%0\\;uaddcm 0,%R1,%R0\"\n+  \"uaddcm %%r0,%1,%0\\;uaddcm %%r0,%R1,%R0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"one_cmplsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(not:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"uaddcm 0,%1,%0\"\n+  \"uaddcm %%r0,%1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"4\")])\n \f\n@@ -3877,7 +3877,7 @@\n \t\t     (match_operand:SI 2 \"arith32_operand\" \"q,n\")))]\n   \"\"\n   \"@\n-   vshd 0,%1,%0\n+   vshd %%r0,%1,%0\n    extru %1,%P2,%L2,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])"}]}