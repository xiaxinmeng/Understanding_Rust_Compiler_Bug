{"sha": "393d989161437eac0494a4231ce1524808d5f3e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkzZDk4OTE2MTQzN2VhYzA0OTRhNDIzMWNlMTUyNDgwOGQ1ZjNlOQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2014-04-11T12:03:05Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2014-04-11T12:03:05Z"}, "message": "Improve RANDOM_SEED documentation example.\n\n2014-04-11  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* intrinsic.texi (RANDOM_SEED): Improve example.\n\nFrom-SVN: r209301", "tree": {"sha": "2c5f3b6e380b83c241c46463b6f12534a67828c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c5f3b6e380b83c241c46463b6f12534a67828c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/393d989161437eac0494a4231ce1524808d5f3e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393d989161437eac0494a4231ce1524808d5f3e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/393d989161437eac0494a4231ce1524808d5f3e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393d989161437eac0494a4231ce1524808d5f3e9/comments", "author": null, "committer": null, "parents": [{"sha": "3662b2774c8124ca34489c9350a1b4dbc3f0f0be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3662b2774c8124ca34489c9350a1b4dbc3f0f0be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3662b2774c8124ca34489c9350a1b4dbc3f0f0be"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "572a7ff5249c9776d11960dc262316ccf2068fe9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393d989161437eac0494a4231ce1524808d5f3e9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393d989161437eac0494a4231ce1524808d5f3e9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=393d989161437eac0494a4231ce1524808d5f3e9", "patch": "@@ -1,3 +1,7 @@\n+2014-04-11  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* intrinsic.texi (RANDOM_SEED): Improve example.\n+\n 2014-04-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* class.c (gfc_build_class_symbol): Append \"_t\" to target class"}, {"sha": "926ffe954ed6d347d0dffc71f5d31c6d7cf9b02e", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/393d989161437eac0494a4231ce1524808d5f3e9/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/393d989161437eac0494a4231ce1524808d5f3e9/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=393d989161437eac0494a4231ce1524808d5f3e9", "patch": "@@ -10207,11 +10207,12 @@ the @var{SIZE} argument.\n @item @emph{Example}:\n @smallexample\n subroutine init_random_seed()\n+  use iso_fortran_env, only: int64\n   implicit none\n   integer, allocatable :: seed(:)\n-  integer :: i, n, un, istat, dt(8), pid, t(2), s\n-  integer(8) :: count, tms\n-  \n+  integer :: i, n, un, istat, dt(8), pid\n+  integer(int64) :: t\n+\n   call random_seed(size = n)\n   allocate(seed(n))\n   ! First try if the OS provides a random number generator\n@@ -10224,34 +10225,37 @@ subroutine init_random_seed()\n      ! Fallback to XOR:ing the current time and pid. The PID is\n      ! useful in case one launches multiple instances of the same\n      ! program in parallel.\n-     call system_clock(count)\n-     if (count /= 0) then\n-        t = transfer(count, t)\n-     else\n+     call system_clock(t)\n+     if (t == 0) then\n         call date_and_time(values=dt)\n-        tms = (dt(1) - 1970) * 365_8 * 24 * 60 * 60 * 1000 &\n-             + dt(2) * 31_8 * 24 * 60 * 60 * 1000 &\n-             + dt(3) * 24 * 60 * 60 * 60 * 1000 &\n+        t = (dt(1) - 1970) * 365_int64 * 24 * 60 * 60 * 1000 &\n+             + dt(2) * 31_int64 * 24 * 60 * 60 * 1000 &\n+             + dt(3) * 24_int64 * 60 * 60 * 1000 &\n              + dt(5) * 60 * 60 * 1000 &\n              + dt(6) * 60 * 1000 + dt(7) * 1000 &\n              + dt(8)\n-        t = transfer(tms, t)\n-     end if\n-     s = ieor(t(1), t(2))\n-     pid = getpid() + 1099279 ! Add a prime\n-     s = ieor(s, pid)\n-     if (n >= 3) then\n-        seed(1) = t(1) + 36269\n-        seed(2) = t(2) + 72551\n-        seed(3) = pid\n-        if (n > 3) then\n-           seed(4:) = s + 37 * (/ (i, i = 0, n - 4) /)\n-        end if\n-     else \n-        seed = s + 37 * (/ (i, i = 0, n - 1 ) /)\n      end if\n+     pid = getpid()\n+     t = ieor(t, int(pid, kind(t)))\n+     do i = 1, n\n+        seed(i) = lcg(t)\n+     end do\n   end if\n   call random_seed(put=seed)\n+contains\n+  ! This simple PRNG might not be good enough for real work, but is\n+  ! sufficient for seeding a better PRNG.\n+  function lcg(s)\n+    integer :: lcg\n+    integer(int64) :: s\n+    if (s == 0) then\n+       s = 104729\n+    else\n+       s = mod(s, 4294967296_int64)\n+    end if\n+    s = mod(s * 279470273_int64, 4294967291_int64)\n+    lcg = int(mod(s, int(huge(0), int64)), kind(0))\n+  end function lcg\n end subroutine init_random_seed\n @end smallexample\n "}]}