{"sha": "a34f4f64689e3a109f3091f74af4750c1010e961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0ZjRmNjQ2ODllM2ExMDlmMzA5MWY3NGFmNDc1MGMxMDEwZTk2MQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-07-23T14:37:57Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-07-23T14:37:57Z"}, "message": "re PR target/66217 (PowerPC rotate/shift/mask instructions not optimal)\n\n\tPR target/66217\n\t* config/rs6000/rs6000-protos.h (rs6000_emit_2insn_and): Change\n\tprototype.\n\t* config/rs6000/rs6000.c (rs6000_emit_dot_insn): New function.\n\t(rs6000_emit_2insn_and): Handle dot forms.\n\t* config/rs6000/rs6000.md (and<mode>3): Adjust.\n\t(*and<mode>3_2insn): Remove TODO.  Adjust.  Add \"type\" attr.\n\t(*and<mode>3_2insn_dot, *and<mode>3_2insn_dot2): New.\n\nFrom-SVN: r226112", "tree": {"sha": "a103141f48cbcaad89dd2e61e71a83d28bd869c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a103141f48cbcaad89dd2e61e71a83d28bd869c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a34f4f64689e3a109f3091f74af4750c1010e961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34f4f64689e3a109f3091f74af4750c1010e961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34f4f64689e3a109f3091f74af4750c1010e961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34f4f64689e3a109f3091f74af4750c1010e961/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d057c8669b2ca758096697826647bdc06f77c336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d057c8669b2ca758096697826647bdc06f77c336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d057c8669b2ca758096697826647bdc06f77c336"}], "stats": {"total": 124, "additions": 109, "deletions": 15}, "files": [{"sha": "40977504c8bb1c2245a5b830ab78d33108e3159a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34f4f64689e3a109f3091f74af4750c1010e961/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34f4f64689e3a109f3091f74af4750c1010e961/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a34f4f64689e3a109f3091f74af4750c1010e961", "patch": "@@ -1,3 +1,14 @@\n+2015-07-23  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/66217\n+\t* config/rs6000/rs6000-protos.h (rs6000_emit_2insn_and): Change\n+\tprototype.\n+\t* config/rs6000/rs6000.c (rs6000_emit_dot_insn): New function.\n+\t(rs6000_emit_2insn_and): Handle dot forms.\n+\t* config/rs6000/rs6000.md (and<mode>3): Adjust.\n+\t(*and<mode>3_2insn): Remove TODO.  Adjust.  Add \"type\" attr.\n+\t(*and<mode>3_2insn_dot, *and<mode>3_2insn_dot2): New.\n+\n 2015-07-23  Richard Biener  <rguenther@suse.de>\n \n \t* generic-match-head.c: Include cgraph.h."}, {"sha": "f5d34766990f32746fbb802317dff430c5d5ad64", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34f4f64689e3a109f3091f74af4750c1010e961/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34f4f64689e3a109f3091f74af4750c1010e961/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=a34f4f64689e3a109f3091f74af4750c1010e961", "patch": "@@ -77,7 +77,7 @@ extern const char *rs6000_insn_for_and_mask (machine_mode, rtx *, bool);\n extern const char *rs6000_insn_for_shift_mask (machine_mode, rtx *, bool);\n extern const char *rs6000_insn_for_insert_mask (machine_mode, rtx *, bool);\n extern bool rs6000_is_valid_2insn_and (rtx, machine_mode);\n-extern void rs6000_emit_2insn_and (machine_mode, rtx *, bool, bool);\n+extern void rs6000_emit_2insn_and (machine_mode, rtx *, bool, int);\n extern int registers_ok_for_quad_peep (rtx, rtx);\n extern int mems_ok_for_quad_peep (rtx, rtx);\n extern bool gpr_or_gpr_p (rtx, rtx);"}, {"sha": "2eecde6ed43b188956f382799696582b504c2416", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34f4f64689e3a109f3091f74af4750c1010e961/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34f4f64689e3a109f3091f74af4750c1010e961/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a34f4f64689e3a109f3091f74af4750c1010e961", "patch": "@@ -16735,20 +16735,54 @@ rs6000_is_valid_2insn_and (rtx c, machine_mode mode)\n   return rs6000_is_valid_and_mask (GEN_INT (val + bit3 - bit2), mode);\n }\n \n+/* Emit a potentially record-form instruction, setting DST from SRC.\n+   If DOT is 0, that is all; otherwise, set CCREG to the result of the\n+   signed comparison of DST with zero.  If DOT is 1, the generated RTL\n+   doesn't care about the DST result; if DOT is 2, it does.  If CCREG\n+   is CR0 do a single dot insn (as a PARALLEL); otherwise, do a SET and\n+   a separate COMPARE.  */\n+\n+static void\n+rs6000_emit_dot_insn (rtx dst, rtx src, int dot, rtx ccreg)\n+{\n+  if (dot == 0)\n+    {\n+      emit_move_insn (dst, src);\n+      return;\n+    }\n+\n+  if (cc_reg_not_cr0_operand (ccreg, CCmode))\n+    {\n+      emit_move_insn (dst, src);\n+      emit_move_insn (ccreg, gen_rtx_COMPARE (CCmode, dst, const0_rtx));\n+      return;\n+    }\n+\n+  rtx ccset = gen_rtx_SET (ccreg, gen_rtx_COMPARE (CCmode, src, const0_rtx));\n+  if (dot == 1)\n+    {\n+      rtx clobber = gen_rtx_CLOBBER (VOIDmode, dst);\n+      emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, ccset, clobber)));\n+    }\n+  else\n+    {\n+      rtx set = gen_rtx_SET (dst, src);\n+      emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, ccset, set)));\n+    }\n+}\n+\n /* Emit the two insns to do an AND in mode MODE, with operands OPERANDS.\n    If EXPAND is true, split rotate-and-mask instructions we generate to\n    their constituent parts as well (this is used during expand); if DOT\n-   is true, make the last insn a record-form instruction.  */\n+   is 1, make the last insn a record-form instruction clobbering the\n+   destination GPR and setting the CC reg (from operands[3]); if 2, set\n+   that GPR as well as the CC reg.  */\n \n void\n-rs6000_emit_2insn_and (machine_mode mode, rtx *operands, bool expand, bool dot)\n+rs6000_emit_2insn_and (machine_mode mode, rtx *operands, bool expand, int dot)\n {\n   gcc_assert (!(expand && dot));\n \n-  /* We do not actually handle record form yet.  */\n-  if (dot)\n-    gcc_unreachable ();\n-\n   unsigned HOST_WIDE_INT val = INTVAL (operands[2]);\n \n   /* If it is one stretch of ones, it is DImode; shift left, mask, then\n@@ -16773,7 +16807,8 @@ rs6000_emit_2insn_and (machine_mode mode, rtx *operands, bool expand, bool dot)\n \t  rtx tmp = gen_rtx_ASHIFT (mode, operands[1], GEN_INT (shift));\n \t  tmp = gen_rtx_AND (mode, tmp, GEN_INT (val << shift));\n \t  emit_move_insn (operands[0], tmp);\n-\t  emit_insn (gen_lshrdi3 (operands[0], operands[0], GEN_INT (shift)));\n+\t  tmp = gen_rtx_LSHIFTRT (mode, operands[0], GEN_INT (shift));\n+\t  rs6000_emit_dot_insn (operands[0], tmp, dot, dot ? operands[3] : 0);\n \t}\n       return;\n     }\n@@ -16799,7 +16834,7 @@ rs6000_emit_2insn_and (machine_mode mode, rtx *operands, bool expand, bool dot)\n       rtx tmp = gen_rtx_AND (mode, operands[1], GEN_INT (mask1));\n       emit_move_insn (reg, tmp);\n       tmp = gen_rtx_AND (mode, reg, GEN_INT (mask2));\n-      emit_move_insn (operands[0], tmp);\n+      rs6000_emit_dot_insn (operands[0], tmp, dot, dot ? operands[3] : 0);\n       return;\n     }\n \n@@ -16816,7 +16851,7 @@ rs6000_emit_2insn_and (machine_mode mode, rtx *operands, bool expand, bool dot)\n       rtx reg_low = gen_lowpart (SImode, reg);\n       emit_move_insn (reg_low, tmp);\n       tmp = gen_rtx_AND (mode, reg, GEN_INT (mask2));\n-      emit_move_insn (operands[0], tmp);\n+      rs6000_emit_dot_insn (operands[0], tmp, dot, dot ? operands[3] : 0);\n       return;\n     }\n \n@@ -16845,7 +16880,7 @@ rs6000_emit_2insn_and (machine_mode mode, rtx *operands, bool expand, bool dot)\n       emit_move_insn (operands[0], tmp);\n       tmp = gen_rtx_ROTATE (mode, operands[0], GEN_INT (right));\n       tmp = gen_rtx_AND (mode, tmp, GEN_INT (mask2));\n-      emit_move_insn (operands[0], tmp);\n+      rs6000_emit_dot_insn (operands[0], tmp, dot, dot ? operands[3] : 0);\n     }\n }\n \f"}, {"sha": "f7fa3996b98ebe20f9095e8754fe4b39db0dbb39", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34f4f64689e3a109f3091f74af4750c1010e961/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34f4f64689e3a109f3091f74af4750c1010e961/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a34f4f64689e3a109f3091f74af4750c1010e961", "patch": "@@ -2913,7 +2913,7 @@\n \n   if (rs6000_is_valid_2insn_and (operands[2], <MODE>mode))\n     {\n-      rs6000_emit_2insn_and (<MODE>mode, operands, true, false);\n+      rs6000_emit_2insn_and (<MODE>mode, operands, true, 0);\n       DONE;\n     }\n \n@@ -3139,7 +3139,6 @@\n    (set_attr \"length\" \"4,8\")])\n \n \n-; TODO: dots of this\n (define_insn_and_split \"*and<mode>3_2insn\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(and:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"%r\")\n@@ -3152,10 +3151,59 @@\n   \"&& 1\"\n   [(pc)]\n {\n-  rs6000_emit_2insn_and (<MODE>mode, operands, false, false);\n+  rs6000_emit_2insn_and (<MODE>mode, operands, false, 0);\n   DONE;\n }\n-  [(set_attr \"length\" \"8\")])\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn_and_split \"*and<mode>3_2insn_dot\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (and:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"%r,r\")\n+\t\t\t     (match_operand:GPR 2 \"const_int_operand\" \"n,n\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:GPR 0 \"=r,r\"))]\n+  \"(<MODE>mode == Pmode || UINTVAL (operands[2]) <= 0x7fffffff)\n+   && rs6000_gen_cell_microcode\n+   && rs6000_is_valid_2insn_and (operands[2], <MODE>mode)\n+   && !(rs6000_is_valid_and_mask (operands[2], <MODE>mode)\n+\t|| (logical_const_operand (operands[2], <MODE>mode)\n+\t    && rs6000_gen_cell_microcode))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(pc)]\n+{\n+  rs6000_emit_2insn_and (<MODE>mode, operands, false, 1);\n+  DONE;\n+}\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"dot\" \"yes\")\n+   (set_attr \"length\" \"8,12\")])\n+\n+(define_insn_and_split \"*and<mode>3_2insn_dot2\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n+\t(compare:CC (and:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"%r,r\")\n+\t\t\t     (match_operand:GPR 2 \"const_int_operand\" \"n,n\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(and:GPR (match_dup 1)\n+\t\t (match_dup 2)))]\n+  \"(<MODE>mode == Pmode || UINTVAL (operands[2]) <= 0x7fffffff)\n+   && rs6000_gen_cell_microcode\n+   && rs6000_is_valid_2insn_and (operands[2], <MODE>mode)\n+   && !(rs6000_is_valid_and_mask (operands[2], <MODE>mode)\n+\t|| (logical_const_operand (operands[2], <MODE>mode)\n+\t    && rs6000_gen_cell_microcode))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(pc)]\n+{\n+  rs6000_emit_2insn_and (<MODE>mode, operands, false, 2);\n+  DONE;\n+}\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"dot\" \"yes\")\n+   (set_attr \"length\" \"8,12\")])\n \n \n (define_expand \"<code><mode>3\""}]}