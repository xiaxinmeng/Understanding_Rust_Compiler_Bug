{"sha": "7446b353b56739bbba9a3e7852ebce8ffd19779b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ0NmIzNTNiNTY3MzliYmJhOWEzZTc4NTJlYmNlOGZmZDE5Nzc5Yg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-03-21T22:08:19Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-03-21T22:08:19Z"}, "message": "[PR c++/84610,84642] recover from implicit template parms gracefully\n\nIf we get a parse error during an attempted fully implicit function\ntemplate parse, and need to skip to the end of the statement or block,\nwe may discard the function parms scope rather than the enclosing\ninjected implicit template parms scope.  If we rollback a tentative\nparse and try something else, we'll no longer be in a function parms\nscope, but rather in a template parms scope, but we may still attempt\nto synthesize implicit template parms and then fail the assert that\nchecks we're in a function parms scope.\n\nThis patch introduces an alternative to\nfinish_fully_implicit_template_p, to be used during error recovery,\nthat floats the implicit template parm scope to the top so that it\ngets discarded as we finish and discard the failed implicit template\ndata, while other scopes are retained as expected.  It also clears the\nimplicit template parser data as we finish the template, so that it\ndoesn't linger on referencing discarded or used scopes and parms.\n\nfor gcc/cp/ChangeLog\n\n\tPR c++/84610\n\tPR c++/84642\n\t* parser.c (abort_fully_implicit_template_p): New.\n\t(cp_parser_skip_to_end_of_statement): Use it.\n\t(cp_parser_skip_to_end_of_block_or_statement): Likewise.\n\t(finish_fully_implicit_template_p): Clear\n\timplicit_template_parms and implicit_template_scope.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/84610\n\tPR c++/84642\n\t* g++.dg/cpp0x/pr84610.C: New.\n\t* g++.dg/cpp0x/pr84642.C: New.\n\nFrom-SVN: r258748", "tree": {"sha": "d4665d99cdd00d61e51fb107e3801bf4414225e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4665d99cdd00d61e51fb107e3801bf4414225e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7446b353b56739bbba9a3e7852ebce8ffd19779b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7446b353b56739bbba9a3e7852ebce8ffd19779b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7446b353b56739bbba9a3e7852ebce8ffd19779b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7446b353b56739bbba9a3e7852ebce8ffd19779b/comments", "author": null, "committer": null, "parents": [{"sha": "aa1c94299c2b81f7728011ada92eb7761144b854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa1c94299c2b81f7728011ada92eb7761144b854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa1c94299c2b81f7728011ada92eb7761144b854"}], "stats": {"total": 61, "additions": 59, "deletions": 2}, "files": [{"sha": "233b57e2620005db621eb1b50881b925c00a5963", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7446b353b56739bbba9a3e7852ebce8ffd19779b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7446b353b56739bbba9a3e7852ebce8ffd19779b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7446b353b56739bbba9a3e7852ebce8ffd19779b", "patch": "@@ -1,3 +1,13 @@\n+2018-03-21  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/84610\n+\tPR c++/84642\n+\t* parser.c (abort_fully_implicit_template_p): New.\n+\t(cp_parser_skip_to_end_of_statement): Use it.\n+\t(cp_parser_skip_to_end_of_block_or_statement): Likewise.\n+\t(finish_fully_implicit_template_p): Clear\n+\timplicit_template_parms and implicit_template_scope.\n+\n 2018-03-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/84972"}, {"sha": "6dcfae125b7bff0c34c31baa85dfbb41f697623a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7446b353b56739bbba9a3e7852ebce8ffd19779b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7446b353b56739bbba9a3e7852ebce8ffd19779b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=7446b353b56739bbba9a3e7852ebce8ffd19779b", "patch": "@@ -2264,6 +2264,8 @@ static tree synthesize_implicit_template_parm\n   (cp_parser *, tree);\n static tree finish_fully_implicit_template\n   (cp_parser *, tree);\n+static void abort_fully_implicit_template\n+  (cp_parser *);\n \n /* Classes [gram.class] */\n \n@@ -3585,7 +3587,7 @@ cp_parser_skip_to_end_of_statement (cp_parser* parser)\n \n   /* Unwind generic function template scope if necessary.  */\n   if (parser->fully_implicit_function_template_p)\n-    finish_fully_implicit_template (parser, /*member_decl_opt=*/0);\n+    abort_fully_implicit_template (parser);\n \n   while (true)\n     {\n@@ -3675,7 +3677,7 @@ cp_parser_skip_to_end_of_block_or_statement (cp_parser* parser)\n \n   /* Unwind generic function template scope if necessary.  */\n   if (parser->fully_implicit_function_template_p)\n-    finish_fully_implicit_template (parser, /*member_decl_opt=*/0);\n+    abort_fully_implicit_template (parser);\n \n   while (nesting_depth >= 0)\n     {\n@@ -39273,11 +39275,43 @@ finish_fully_implicit_template (cp_parser *parser, tree member_decl_opt)\n   end_template_decl ();\n \n   parser->fully_implicit_function_template_p = false;\n+  parser->implicit_template_parms = 0;\n+  parser->implicit_template_scope = 0;\n   --parser->num_template_parameter_lists;\n \n   return member_decl_opt;\n }\n \n+/* Like finish_fully_implicit_template, but to be used in error\n+   recovery, rearranging scopes so that we restore the state we had\n+   before synthesize_implicit_template_parm inserted the implement\n+   template parms scope.  */\n+\n+static void\n+abort_fully_implicit_template (cp_parser *parser)\n+{\n+  cp_binding_level *return_to_scope = current_binding_level;\n+\n+  if (parser->implicit_template_scope\n+      && return_to_scope != parser->implicit_template_scope)\n+    {\n+      cp_binding_level *child = return_to_scope;\n+      for (cp_binding_level *scope = child->level_chain;\n+\t   scope != parser->implicit_template_scope;\n+\t   scope = child->level_chain)\n+\tchild = scope;\n+      child->level_chain = parser->implicit_template_scope->level_chain;\n+      parser->implicit_template_scope->level_chain = return_to_scope;\n+      current_binding_level = parser->implicit_template_scope;\n+    }\n+  else\n+    return_to_scope = return_to_scope->level_chain;\n+\n+  finish_fully_implicit_template (parser, NULL);\n+\n+  gcc_assert (current_binding_level == return_to_scope);\n+}\n+\n /* Helper function for diagnostics that have complained about things\n    being used with 'extern \"C\"' linkage.\n "}, {"sha": "45705c0eacbae94879d7f4356f494393f00432e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7446b353b56739bbba9a3e7852ebce8ffd19779b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7446b353b56739bbba9a3e7852ebce8ffd19779b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7446b353b56739bbba9a3e7852ebce8ffd19779b", "patch": "@@ -1,3 +1,10 @@\n+2018-03-21  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/84610\n+\tPR c++/84642\n+\t* g++.dg/cpp0x/pr84610.C: New.\n+\t* g++.dg/cpp0x/pr84642.C: New.\n+\n 2018-03-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/84999"}, {"sha": "cc70748967bc2676eb900bb515e10e1a325e7dc3", "filename": "gcc/testsuite/g++.dg/cpp0x/pr84610.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7446b353b56739bbba9a3e7852ebce8ffd19779b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84610.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7446b353b56739bbba9a3e7852ebce8ffd19779b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84610.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84610.C?ref=7446b353b56739bbba9a3e7852ebce8ffd19779b", "patch": "@@ -0,0 +1,3 @@\n+// { dg-do compile { target c++11 } }\n+\n+a (int &__attribute__ ((aligned(auto x)) y)); // { dg-error \"parameter declaration|before|expected constructor\" }"}, {"sha": "5c6895edb970cc320ccb03f6f24a5566ba08795b", "filename": "gcc/testsuite/g++.dg/cpp0x/pr84642.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7446b353b56739bbba9a3e7852ebce8ffd19779b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84642.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7446b353b56739bbba9a3e7852ebce8ffd19779b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84642.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr84642.C?ref=7446b353b56739bbba9a3e7852ebce8ffd19779b", "patch": "@@ -0,0 +1,3 @@\n+// { dg-do compile { target c++11 } }\n+\n+a(int(const &&__attribute__((b(auto;))))) // { dg-error \"parameter declaration|with no type|before|expected constructor\" }"}]}