{"sha": "c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2MTYyYWQxNjdkOGQ5MWUyZWEzZTY4ZWQzMWY4YTIzYWQ4NGY4ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-08T19:45:20Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-08T19:45:20Z"}, "message": "modulo-sched.c (create_partial_schedule, [...]): Make them static.\n\n\t* modulo-sched.c (create_partial_schedule,\n\tfree_partial_schedule, reset_partial_schedule,\n\tps_add_node_check_conflicts, rotate_partial_schedule): Make\n\tthem static.\n\nFrom-SVN: r90291", "tree": {"sha": "e3636e0501b7117ced6f1c4f102e7960b47ffbcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3636e0501b7117ced6f1c4f102e7960b47ffbcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d/comments", "author": null, "committer": null, "parents": [{"sha": "14c8e213350820ffc12ac6b8528c81732e7b6a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c8e213350820ffc12ac6b8528c81732e7b6a90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c8e213350820ffc12ac6b8528c81732e7b6a90"}], "stats": {"total": 33, "additions": 20, "deletions": 13}, "files": [{"sha": "9b778ff0a80d16ffe333a2857ee6f2967d5b68be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d", "patch": "@@ -1,3 +1,10 @@\n+2004-11-08  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* modulo-sched.c (create_partial_schedule,\n+\tfree_partial_schedule, reset_partial_schedule,\n+\tps_add_node_check_conflicts, rotate_partial_schedule): Make\n+\tthem static.\n+\n 2004-11-08  Richard Henderson  <rth@redhat.com>\n \n \t* expmed.c (extract_force_align_mem_bit_field): Correct handling at"}, {"sha": "b05fa19fe3689892c33eefd27dd9ef64afd97c49", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=c16162ad167d8d91e2ea3e68ed31f8a23ad84f8d", "patch": "@@ -147,15 +147,15 @@ struct partial_schedule\n };\n \n \n-partial_schedule_ptr create_partial_schedule (int ii, ddg_ptr, int history);\n-void free_partial_schedule (partial_schedule_ptr);\n-void reset_partial_schedule (partial_schedule_ptr, int new_ii);\n+static partial_schedule_ptr create_partial_schedule (int ii, ddg_ptr, int history);\n+static void free_partial_schedule (partial_schedule_ptr);\n+static void reset_partial_schedule (partial_schedule_ptr, int new_ii);\n void print_partial_schedule (partial_schedule_ptr, FILE *);\n-ps_insn_ptr ps_add_node_check_conflicts (partial_schedule_ptr,\n-\t\t\t\t\t ddg_node_ptr node, int cycle,\n-\t\t\t\t\t sbitmap must_precede,\n-\t\t\t\t\t sbitmap must_follow);\n-void rotate_partial_schedule (partial_schedule_ptr, int);\n+static ps_insn_ptr ps_add_node_check_conflicts (partial_schedule_ptr,\n+\t\t\t\t\t\tddg_node_ptr node, int cycle,\n+\t\t\t\t\t\tsbitmap must_precede,\n+\t\t\t\t\t\tsbitmap must_follow);\n+static void rotate_partial_schedule (partial_schedule_ptr, int);\n void set_row_column_for_ps (partial_schedule_ptr);\n \n \f\n@@ -1783,7 +1783,7 @@ order_nodes_in_scc (ddg_ptr g, sbitmap nodes_ordered, sbitmap scc,\n    modulo scheduling.  */\n \n /* Create a partial schedule and allocate a memory to hold II rows.  */\n-partial_schedule_ptr\n+static partial_schedule_ptr\n create_partial_schedule (int ii, ddg_ptr g, int history)\n {\n   partial_schedule_ptr ps = (partial_schedule_ptr)\n@@ -1819,7 +1819,7 @@ free_ps_insns (partial_schedule_ptr ps)\n }\n \n /* Free all the memory allocated to the partial schedule.  */\n-void\n+static void\n free_partial_schedule (partial_schedule_ptr ps)\n {\n   if (!ps)\n@@ -1831,7 +1831,7 @@ free_partial_schedule (partial_schedule_ptr ps)\n \n /* Clear the rows array with its PS_INSNs, and create a new one with\n    NEW_II rows.  */\n-void\n+static void\n reset_partial_schedule (partial_schedule_ptr ps, int new_ii)\n {\n   if (!ps)\n@@ -2131,7 +2131,7 @@ ps_has_conflicts (partial_schedule_ptr ps, int from, int to)\n    is returned.  Bit N is set in MUST_PRECEDE/MUST_FOLLOW if the node with \n    cuid N must be come before/after (respectively) the node pointed to by \n    PS_I when scheduled in the same cycle.  */\n-ps_insn_ptr\n+static ps_insn_ptr\n ps_add_node_check_conflicts (partial_schedule_ptr ps, ddg_node_ptr n,\n    \t\t\t     int c, sbitmap must_precede,\n \t\t\t     sbitmap must_follow)\n@@ -2176,7 +2176,7 @@ ps_add_node_check_conflicts (partial_schedule_ptr ps, ddg_node_ptr n,\n \n /* Rotate the rows of PS such that insns scheduled at time\n    START_CYCLE will appear in row 0.  Updates max/min_cycles.  */\n-void\n+static void\n rotate_partial_schedule (partial_schedule_ptr ps, int start_cycle)\n {\n   int i, row, backward_rotates;"}]}