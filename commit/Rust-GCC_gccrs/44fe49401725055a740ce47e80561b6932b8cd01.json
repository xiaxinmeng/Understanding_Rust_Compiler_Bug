{"sha": "44fe49401725055a740ce47e80561b6932b8cd01", "node_id": "C_kwDOANBUbNoAKDQ0ZmU0OTQwMTcyNTA1NWE3NDBjZTQ3ZTgwNTYxYjY5MzJiOGNkMDE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-06T07:36:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-06T08:33:13Z"}, "message": "tree-optimization/105163 - abnormal SSA coalescing and reassoc\n\nThe negate propagation optimizations in reassoc did not look out for\nabnormal SSA coalescing issues.  The following fixes that.\n\n2022-04-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105163\n\t* tree-ssa-reassoc.cc (repropagate_negates): Avoid propagating\n\tnegated abnormals.\n\n\t* gcc.dg/torture/pr105163.c: New testcase.", "tree": {"sha": "6d07d63256eb0e2e1afb427532ca3112f8997c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d07d63256eb0e2e1afb427532ca3112f8997c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44fe49401725055a740ce47e80561b6932b8cd01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44fe49401725055a740ce47e80561b6932b8cd01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44fe49401725055a740ce47e80561b6932b8cd01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44fe49401725055a740ce47e80561b6932b8cd01/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71770a0ea920641c53912f725f5abd4413b38fd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71770a0ea920641c53912f725f5abd4413b38fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71770a0ea920641c53912f725f5abd4413b38fd5"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "23e04107f683cea7be9707017ca3e1d4960fb1d1", "filename": "gcc/testsuite/gcc.dg/torture/pr105163.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44fe49401725055a740ce47e80561b6932b8cd01/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr105163.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44fe49401725055a740ce47e80561b6932b8cd01/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr105163.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr105163.c?ref=44fe49401725055a740ce47e80561b6932b8cd01", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target nonlocal_goto } */\n+\n+#include <setjmp.h>\n+\n+extern int bar (unsigned int *);\n+extern jmp_buf *baz (void);\n+struct C { int c1; };\n+void foo (struct C *x, int *z, int e)\n+{\n+  unsigned int d = 0;\n+  long f;\n+  setjmp (*baz());\n+  f = 1 + ~d;\n+  d = 8;\n+  if ((!0) && !e && bar(z)) *z = 1 + f;\n+}"}, {"sha": "0d55fc7e2d8e4d1d591318a67c00da5b57b0815c", "filename": "gcc/tree-ssa-reassoc.cc", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44fe49401725055a740ce47e80561b6932b8cd01/gcc%2Ftree-ssa-reassoc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44fe49401725055a740ce47e80561b6932b8cd01/gcc%2Ftree-ssa-reassoc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.cc?ref=44fe49401725055a740ce47e80561b6932b8cd01", "patch": "@@ -5970,10 +5970,14 @@ repropagate_negates (void)\n   FOR_EACH_VEC_ELT (plus_negates, i, negate)\n     {\n       gimple *user = get_single_immediate_use (negate);\n-\n       if (!user || !is_gimple_assign (user))\n \tcontinue;\n \n+      tree negateop = gimple_assign_rhs1 (SSA_NAME_DEF_STMT (negate));\n+      if (TREE_CODE (negateop) == SSA_NAME\n+\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (negateop))\n+\tcontinue;\n+\n       /* The negate operand can be either operand of a PLUS_EXPR\n \t (it can be the LHS if the RHS is a constant for example).\n \n@@ -5996,9 +6000,9 @@ repropagate_negates (void)\n \t  if (gimple_assign_rhs2 (user) == negate)\n \t    {\n \t      tree rhs1 = gimple_assign_rhs1 (user);\n-\t      tree rhs2 = gimple_assign_rhs1 (SSA_NAME_DEF_STMT (negate));\n \t      gimple_stmt_iterator gsi = gsi_for_stmt (user);\n-\t      gimple_assign_set_rhs_with_ops (&gsi, MINUS_EXPR, rhs1, rhs2);\n+\t      gimple_assign_set_rhs_with_ops (&gsi, MINUS_EXPR, rhs1,\n+\t\t\t\t\t      negateop);\n \t      update_stmt (user);\n \t    }\n \t}\n@@ -6007,21 +6011,20 @@ repropagate_negates (void)\n \t  if (gimple_assign_rhs1 (user) == negate)\n \t    {\n \t      /* We have\n-\t           x = -a\n+\t\t   x = -negateop\n \t\t   y = x - b\n \t\t which we transform into\n-\t\t   x = a + b\n+\t\t   x = negateop + b\n \t\t   y = -x .\n \t\t This pushes down the negate which we possibly can merge\n \t\t into some other operation, hence insert it into the\n \t\t plus_negates vector.  */\n \t      gimple *feed = SSA_NAME_DEF_STMT (negate);\n-\t      tree a = gimple_assign_rhs1 (feed);\n \t      tree b = gimple_assign_rhs2 (user);\n \t      gimple_stmt_iterator gsi = gsi_for_stmt (feed);\n \t      gimple_stmt_iterator gsi2 = gsi_for_stmt (user);\n \t      tree x = make_ssa_name (TREE_TYPE (gimple_assign_lhs (feed)));\n-\t      gimple *g = gimple_build_assign (x, PLUS_EXPR, a, b);\n+\t      gimple *g = gimple_build_assign (x, PLUS_EXPR, negateop, b);\n \t      gsi_insert_before (&gsi2, g, GSI_SAME_STMT);\n \t      gimple_assign_set_rhs_with_ops (&gsi2, NEGATE_EXPR, x);\n \t      user = gsi_stmt (gsi2);\n@@ -6032,13 +6035,11 @@ repropagate_negates (void)\n \t    }\n \t  else\n \t    {\n-\t      /* Transform \"x = -a; y = b - x\" into \"y = b + a\", getting\n-\t         rid of one operation.  */\n-\t      gimple *feed = SSA_NAME_DEF_STMT (negate);\n-\t      tree a = gimple_assign_rhs1 (feed);\n+\t      /* Transform \"x = -negateop; y = b - x\" into \"y = b + negateop\",\n+\t\t getting rid of one operation.  */\n \t      tree rhs1 = gimple_assign_rhs1 (user);\n \t      gimple_stmt_iterator gsi = gsi_for_stmt (user);\n-\t      gimple_assign_set_rhs_with_ops (&gsi, PLUS_EXPR, rhs1, a);\n+\t      gimple_assign_set_rhs_with_ops (&gsi, PLUS_EXPR, rhs1, negateop);\n \t      update_stmt (gsi_stmt (gsi));\n \t    }\n \t}"}]}