{"sha": "611a4849b4d0f5ae97f3e702a856db6f183bb84f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjExYTQ4NDliNGQwZjVhZTk3ZjNlNzAyYTg1NmRiNmYxODNiYjg0Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-10T18:38:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-10T18:38:36Z"}, "message": "mode-switching.c (optimize_mode_switching): Mark block as nontransparent, if last_mode at block exit is different from no_mode.\n\n\t* mode-switching.c (optimize_mode_switching): Mark block as\n\tnontransparent, if last_mode at block exit is different from no_mode.\n\nFrom-SVN: r204649", "tree": {"sha": "201bef40495be7b1b52fb02996ff61d429c759c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/201bef40495be7b1b52fb02996ff61d429c759c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/611a4849b4d0f5ae97f3e702a856db6f183bb84f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/611a4849b4d0f5ae97f3e702a856db6f183bb84f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/611a4849b4d0f5ae97f3e702a856db6f183bb84f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/611a4849b4d0f5ae97f3e702a856db6f183bb84f/comments", "author": null, "committer": null, "parents": [{"sha": "cabeea52a72a20a2c286cdae5598c191da7bb25e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabeea52a72a20a2c286cdae5598c191da7bb25e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cabeea52a72a20a2c286cdae5598c191da7bb25e"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "053d48727244cbd04ffa6c046f1b73972099aa16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611a4849b4d0f5ae97f3e702a856db6f183bb84f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611a4849b4d0f5ae97f3e702a856db6f183bb84f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=611a4849b4d0f5ae97f3e702a856db6f183bb84f", "patch": "@@ -1,3 +1,8 @@\n+2013-11-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* mode-switching.c (optimize_mode_switching): Mark block as\n+\tnontransparent, if last_mode at block exit is different from no_mode.\n+\n 2013-11-09  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* function.c (NAME__MAIN): Move to...\n@@ -90,8 +95,7 @@\n 2013-11-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59047\n-\t* tree-predcom.c (ref_at_iteration): Handle bitfield accesses\n-\tproperly.\n+\t* tree-predcom.c (ref_at_iteration): Handle bitfield accesses properly.\n \n 2013-11-08  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n@@ -124,8 +128,7 @@\n \t(TYPE_QUALS, TYPE_QUALS_NO_ADDR_SPACE): Add TYPE_QUAL_ATOMIC.\n \t(TYPE_QUALS_NO_ADDR_SPACE_NO_ATOMIC): New macro.\n \t(atomicQI_type_node, atomicHI_type_node, atomicSI_type_node)\n-\t(atomicDI_type_node, atomicTI_type_node): New macros for type\n-\tnodes.\n+\t(atomicDI_type_node, atomicTI_type_node): New macros for type nodes.\n \t* tree.c (set_type_quals): Set TYPE_ATOMIC.\n \t(find_atomic_core_type): New function.\n \t(build_qualified_type): Adjust alignment for qualified types.\n@@ -134,23 +137,20 @@\n \tatomicHI_type_node, atomicSI_type_node, atomicDI_type_node and\n \tatomicTI_type_node.\n \t* print-tree.c (print_node): Print atomic qualifier.\n-\t* tree-pretty-print.c (dump_generic_node): Print atomic type\n-\tattribute.\n+\t* tree-pretty-print.c (dump_generic_node): Print atomic type attribute.\n \t* target.def (atomic_assign_expand_fenv): New hook.\n \t* doc/tm.texi.in (TARGET_ATOMIC_ASSIGN_EXPAND_FENV): New @hook.\n \t* doc/tm.texi: Regenerate.\n \t* targhooks.c (default_atomic_assign_expand_fenv): New function.\n \t* targhooks.h (default_atomic_assign_expand_fenv): Declare.\n-\t* sync-builtins.def (__atomic_feraiseexcept): New built-in\n-\tfunction.\n+\t* sync-builtins.def (__atomic_feraiseexcept): New built-in function.\n \t* config/i386/i386-builtin-types.def (VOID_FTYPE_PUSHORT): New\n \tfunction type.\n \t* config/i386/i386.c (enum ix86_builtins): Add\n \tIX86_BUILTIN_FNSTENV, IX86_BUILTIN_FLDENV, IX86_BUILTIN_FNSTSW and\n \tIX86_BUILTIN_FNCLEX.\n \t(bdesc_special_args): Add __builtin_ia32_fnstenv,\n-\t__builtin_ia32_fldenv, __builtin_ia32_fnstsw and\n-\t__builtin_ia32_fnclex.\n+\t__builtin_ia32_fldenv, __builtin_ia32_fnstsw and __builtin_ia32_fnclex.\n \t(ix86_expand_builtin): Handle the new built-in functions.\n \t(ix86_atomic_assign_expand_fenv): New function.\n \t(TARGET_ATOMIC_ASSIGN_EXPAND_FENV): New macro.\n@@ -183,8 +183,7 @@\n \t* tree-ssa-loop-im.c\n \t(move_computations_dom_walker::before_dom_children): Same.\n \t* tree-ssa-loop-manip.c (rewrite_phi_with_iv): Same.\n-\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n-\tSame.\n+\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children): Same.\n \t* tree-ssa-propagate.c (substitute_and_fold): Same.\n \t* tree-vect-loop.c (vect_finalize_reduction): Same.\n \t* tree-vect-stmts.c (vectorizable_call): Same.\n@@ -218,15 +217,13 @@\n \t* doc/invoke.texi (-fisolate-erroneous-paths): Document.\n \n \t* gimple-ssa-isolate-paths.c (gate_isolate_erroneous_paths):\n-\tNo longer check if we have __builtin_trap, assume it's\n-\tavailable.\n+\tNo longer check if we have __builtin_trap, assume it's available.\n \n 2013-11-07  Diego Novillo  <dnovillo@google.com>\n \n \t* attribs.c (lookup_scoped_attribute_spec): Make static.\n \t(get_attribute_namespace): Likewise.\n-\t* builtins.c (more_const_call_expr_args_p): Move from\n-\ttree.h.\n+\t* builtins.c (more_const_call_expr_args_p): Move from tree.h.\n \t(validate_arglist): Move earlier in the file. Make static.\n \t(expand_stack_restore): Move from stmt.c\n \t(expand_stack_save): Move from stmt.c\n@@ -303,7 +300,7 @@\n \t(in_array_bounds_p): Move to tree-eh.c.\n \t(range_in_array_bounds_p): Move to tree-eh.c.\n \t(truth_type_for): Move to gimple-fold.c.\n-\t(list_equal_p): remove.\n+\t(list_equal_p): Remove.\n \t* tree.h (decl_assembler_name_equal): Remove.\n \t(decl_assembler_name_hash): Remove.\n \t(truth_type_for): Remove.\n@@ -349,13 +346,12 @@\n \t* doc/sourcebuild.texi (Top Level) <lto-plugin>: GNU ld can use\n \tlinker plugins, too.\n \n-\t* config/arc/arc.h (LINK_COMMAND_SPEC): For\n-\t-ftree-parallelize-loops=*, link to libgomp and its dependencies.\n+\t* config/arc/arc.h (LINK_COMMAND_SPEC): For -ftree-parallelize-loops=*,\n+\tlink to libgomp and its dependencies.\n \t* config/ia64/hpux.h (LIB_SPEC): Likewise.\n \t* config/pa/pa-hpux11.h (LIB_SPEC): Likewise.\n \t* config/pa/pa64-hpux.h (LIB_SPEC): Likewise.\n-\t* gcc.c (GOMP_SELF_SPECS): Update comment about libgomp's\n-\tdependencies.\n+\t* gcc.c (GOMP_SELF_SPECS): Update comment about libgomp's dependencies.\n \n 2013-11-07  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -398,8 +394,7 @@\n \t(canonicalize_value): ... this.  Also handle stripping of\n \tTREE_OVERFLOW.\n \t(get_value, set_lattice_value, get_value_for_expr): Adjust.\n-\t* gimple-fold.c (canonicalize_constructor_val): Strip\n-\tTREE_OVERFLOW.\n+\t* gimple-fold.c (canonicalize_constructor_val): Strip TREE_OVERFLOW.\n \t* tree-ssa-threadedge.c (set_ssa_name_value): Likewise.\n \n 2013-11-07  Richard Biener  <rguenther@suse.de>\n@@ -458,8 +453,7 @@\n \t(finish_live_range_shrinkage): Ditto.\n \t* sched-deps.c (create_insn_reg_set): Make void return value.\n \t* passes.def: Add pass_live_range_shrinkage.\n-\t* ira.c (update_equiv_regs): Don't move if\n-\tflag_live_range_shrinkage.\n+\t* ira.c (update_equiv_regs): Don't move if flag_live_range_shrinkage.\n \t* haifa-sched.c (live_range_shrinkage_p): New.\n \t(initialize_live_range_shrinkage, finish_live_range_shrinkage):\n \tNew functions."}, {"sha": "d54f32ca07139ca78c8286f1398a81b59621852a", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611a4849b4d0f5ae97f3e702a856db6f183bb84f/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611a4849b4d0f5ae97f3e702a856db6f183bb84f/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=611a4849b4d0f5ae97f3e702a856db6f183bb84f", "patch": "@@ -571,12 +571,15 @@ optimize_mode_switching (void)\n \n \t  info[bb->index].computing = last_mode;\n \t  /* Check for blocks without ANY mode requirements.\n-\t     N.B. because of MODE_AFTER, last_mode might still be different\n-\t     from no_mode.  */\n+\t     N.B. because of MODE_AFTER, last_mode might still\n+\t     be different from no_mode, in which case we need to\n+\t     mark the block as nontransparent.  */\n \t  if (!any_set_required)\n \t    {\n \t      ptr = new_seginfo (no_mode, BB_END (bb), bb->index, live_now);\n \t      add_seginfo (info + bb->index, ptr);\n+\t      if (last_mode != no_mode)\n+\t\tbitmap_clear_bit (transp[bb->index], j);\n \t    }\n \t}\n #if defined (MODE_ENTRY) && defined (MODE_EXIT)"}]}