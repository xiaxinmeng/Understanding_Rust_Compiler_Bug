{"sha": "c6e8c9219569f455c71553d29ad8d6af20098b92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZlOGM5MjE5NTY5ZjQ1NWM3MTU1M2QyOWFkOGQ2YWYyMDA5OGI5Mg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-10-07T19:23:08Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-10-07T19:23:08Z"}, "message": "hooks.c (hook_bool_tree_true): New.\n\n\t* hooks.c (hook_bool_tree_true): New.\n\t(hook_rtx_tree_int_null): New.\n\t(hook_rtx_rtx_null): Use NULL, not 0.\n\t* hooks.h: Add 'extern' to everything.\n\t(hook_bool_tree_true): New.\n\t(hook_rtx_tree_int_null): New.\n\t* targhooks.c (hook_bool_CUMULATIVE_ARGS_true): New.\n\t* targhooks.h (hook_bool_CUMULATIVE_ARGS_true): New.\n\t* config/rs6000/rs6000-protos.h (setup_incoming_varargs): Remove\n\tprototype.\n\t* config/rs6000/rs6000.c (rs6000_return_in_memory): New.\n\t(setup_incoming_varargs): Prototype.\n\t(TARGET_PROMOTE_FUNCTION_ARGS): Define.\n\t(TARGET_PROMOTE_FUNCTION_RETURN): Define.\n\t(TARGET_STRUCT_VALUE_RTX): Define.\n\t(TARGET_RETURN_IN_MEMORY): Define.\n\t(TARGET_SETUP_INCOMING_VARARGS): Define.\n\t(TARGET_STRICT_ARGUMENT_NAMING): Define.\n\t(TARGET_PRETEND_OUTGOING_VARARGS_NAMED): Define.\n\t(init_cumulative_args): Use rs6000_return_in_memory.\n\t(setup_incoming_varargs): Make 'static'.\n\t* config/rs6000/rs6000.h (PROMOTE_FUNCTION_ARGS): Delete.\n\t(PROMOTE_FUNCTION_RETURN): Delete.\n\t(STRUCT_VALUE): Delete.\n\t(RETURN_IN_MEMORY): Delete.\n\t(SETUP_INCOMING_VARARGS): Delete.\n\nFrom-SVN: r72197", "tree": {"sha": "c972ed6afcbdabbd32785bf380ad39c251f9a358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c972ed6afcbdabbd32785bf380ad39c251f9a358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6e8c9219569f455c71553d29ad8d6af20098b92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e8c9219569f455c71553d29ad8d6af20098b92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6e8c9219569f455c71553d29ad8d6af20098b92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6e8c9219569f455c71553d29ad8d6af20098b92/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90af80420ffdf47bb463ba333cbb922faf80c3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90af80420ffdf47bb463ba333cbb922faf80c3ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90af80420ffdf47bb463ba333cbb922faf80c3ed"}], "stats": {"total": 230, "additions": 141, "deletions": 89}, "files": [{"sha": "9454613314227e2ef6cc0647ab3f3bcb74140383", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6e8c9219569f455c71553d29ad8d6af20098b92", "patch": "@@ -1,3 +1,26 @@\n+2003-10-06  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config/sparc/sparc.h (STACK_BOUNDARY): Add comment about how\n+\tit's wrong when TARGET_ARCH64 && TARGET_STACK_BIAS.\n+\n+2003-09-24  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config/rs6000/rs6000.c (function_arg): On non-SVR4 systems,\n+\tarrange for vector parameters to varargs functions to be passed\n+\tin both memory and GPRs when appropriate.\n+\t(rs6000_va_arg): Vector arguments passed in memory are 16-byte\n+\taligned.\n+\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Make processor\n+\tlist have list of flags to set and all flags, rather than flags\n+\tto set and flags to clear; add MASK_ALTIVEC where appropriate;\n+\tuse enums rather than #defines.\n+\t\n+\t* function.c (pad_to_arg_alignment): Take STACK_POINTER_OFFSET into\n+\taccount\twhen aligning arguments.\n+\t* calls.c (STACK_POINTER_OFFSET): Move default from here ...\n+\t* defaults.h (STACK_POINTER_OFFSET): ... to here.\n+\n 2003-10-07  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/invoke.texi (Warning Options): Simplify and clarify the"}, {"sha": "35af1676152fd4306717996315cecf2ea53aac37", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=c6e8c9219569f455c71553d29ad8d6af20098b92", "patch": "@@ -151,9 +151,6 @@ extern int function_arg_partial_nregs (CUMULATIVE_ARGS *,\n extern int function_arg_pass_by_reference (CUMULATIVE_ARGS *,\n \t\t\t\t\t\t   enum machine_mode,\n \t\t\t\t\t\t   tree, int);\n-extern void setup_incoming_varargs (CUMULATIVE_ARGS *,\n-\t\t\t\t\t    enum machine_mode, tree,\n-\t\t\t\t\t    int *, int);\n extern rtx rs6000_function_value (tree, tree);\n extern rtx rs6000_libcall_value (enum machine_mode);\n extern struct rtx_def *rs6000_va_arg (tree, tree);"}, {"sha": "29a584c1016dcb6c39aefdd972ed032daf120eb9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c6e8c9219569f455c71553d29ad8d6af20098b92", "patch": "@@ -242,6 +242,7 @@ static void rs6000_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void rs6000_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t\t    HOST_WIDE_INT, tree);\n static rtx rs6000_emit_set_long_const (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n+static bool rs6000_return_in_memory (tree, tree);\n static void rs6000_file_start (void);\n #if TARGET_ELF\n static unsigned int rs6000_elf_section_type_flags (tree, const char *, int);\n@@ -326,6 +327,9 @@ static int rs6000_get_some_local_dynamic_name_1 (rtx *, void *);\n static rtx rs6000_complex_function_value (enum machine_mode);\n static rtx rs6000_spe_function_arg (CUMULATIVE_ARGS *, \n \t\t\t\t    enum machine_mode, tree);\n+static void setup_incoming_varargs (CUMULATIVE_ARGS *,\n+\t\t\t\t    enum machine_mode, tree,\n+\t\t\t\t    int *, int);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n@@ -503,6 +507,29 @@ static const char alt_reg_names[][8] =\n #undef TARGET_DWARF_REGISTER_SPAN\n #define TARGET_DWARF_REGISTER_SPAN rs6000_dwarf_register_span\n \n+/* On rs6000, function arguments are promoted, as are function return\n+   values.  */\n+#undef TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+\n+/* Structure return values are passed as an extra parameter.  */\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY rs6000_return_in_memory\n+\n+#undef TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS setup_incoming_varargs\n+\n+/* Always strict argument naming on rs6000.  */\n+#undef TARGET_STRICT_ARGUMENT_NAMING\n+#define TARGET_STRICT_ARGUMENT_NAMING hook_bool_CUMULATIVE_ARGS_true\n+#undef TARGET_PRETEND_OUTGOING_VARARGS_NAMED\n+#define TARGET_PRETEND_OUTGOING_VARARGS_NAMED hook_bool_CUMULATIVE_ARGS_true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override command line options.  Mostly we process the processor\n@@ -3521,6 +3548,39 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n   emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n }\n \f\n+/* Return a nonzero value to say to return the function value in\n+   memory, just as large structures are always returned.  TYPE will be\n+   the data type of the value, and FNTYPE will be the type of the\n+   function doing the returning, or @code{NULL} for libcalls.\n+\n+   The AIX ABI for the RS/6000 specifies that all structures are\n+   returned in memory.  The Darwin ABI does the same.  The SVR4 ABI\n+   specifies that structures <= 8 bytes are returned in r3/r4, but a\n+   draft put them in memory, and GCC used to implement the draft\n+   instead of the final standard.  Therefore, TARGET_AIX_STRUCT_RET\n+   controls this instead of DEFAULT_ABI; V.4 targets needing backward\n+   compatibility can change DRAFT_V4_STRUCT_RET to override the\n+   default, and -m switches get the final word.  See\n+   rs6000_override_options for more details.\n+\n+   The PPC32 SVR4 ABI uses IEEE double extended for long double, if 128-bit\n+   long double support is enabled.  These values are returned in memory.\n+\n+   int_size_in_bytes returns -1 for variable size objects, which go in\n+   memory always.  The cast to unsigned makes -1 > 8.  */\n+\n+static bool\n+rs6000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  if (AGGREGATE_TYPE_P (type)\n+      && (TARGET_AIX_STRUCT_RET\n+\t  || (unsigned HOST_WIDE_INT) int_size_in_bytes (type) > 8))\n+    return true;\n+  if (DEFAULT_ABI == ABI_V4 && TYPE_MODE (type) == TFmode)\n+    return true;\n+  return false;\n+}\n+\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.\n@@ -3553,7 +3613,8 @@ init_cumulative_args (CUMULATIVE_ARGS *cum, tree fntype,\n   else if (cum->prototype)\n     cum->nargs_prototype = (list_length (TYPE_ARG_TYPES (fntype)) - 1\n \t\t\t    + (TYPE_MODE (TREE_TYPE (fntype)) == BLKmode\n-\t\t\t       || RETURN_IN_MEMORY (TREE_TYPE (fntype))));\n+\t\t\t       || rs6000_return_in_memory (TREE_TYPE (fntype),\n+\t\t\t\t\t\t\t   fntype)));\n \n   else\n     cum->nargs_prototype = 0;\n@@ -4011,7 +4072,7 @@ function_arg_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n    Normally, this macro will push all remaining incoming registers on the\n    stack and set PRETEND_SIZE to the length of the registers pushed.  */\n \n-void\n+static void\n setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode, \n \t\ttree type, int *pretend_size ATTRIBUTE_UNUSED, int no_rtl)\n {"}, {"sha": "5d7e2e7d54629afd5f4972b8c469783a958e6ab9", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c6e8c9219569f455c71553d29ad8d6af20098b92", "patch": "@@ -563,15 +563,6 @@ extern int rs6000_sched_restricted_insns_priority;\n       && GET_MODE_SIZE (MODE) < UNITS_PER_WORD) \\\n     (MODE) = word_mode;\n \n-/* Define this if function arguments should also be promoted using the above\n-   procedure.  */\n-\n-#define PROMOTE_FUNCTION_ARGS\n-\n-/* Likewise, if the function return value is promoted.  */\n-\n-#define PROMOTE_FUNCTION_RETURN\n-\n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.  */\n /* That is true on RS/6000.  */\n@@ -1151,11 +1142,6 @@ extern int rs6000_sched_restricted_insns_priority;\n \n /* Count register number.  */\n #define COUNT_REGISTER_REGNUM 66\n-\n-/* Place that structure value return address is placed.\n-\n-   On the RS/6000, it is passed as an extra parameter.  */\n-#define STRUCT_VALUE 0\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n@@ -1616,28 +1602,6 @@ typedef struct rs6000_stack {\n \n #define LIBCALL_VALUE(MODE) rs6000_libcall_value ((MODE))\n \n-/* The AIX ABI for the RS/6000 specifies that all structures are\n-   returned in memory.  The Darwin ABI does the same.  The SVR4 ABI\n-   specifies that structures <= 8 bytes are returned in r3/r4, but a\n-   draft put them in memory, and GCC used to implement the draft\n-   instead of the final standard.  Therefore, TARGET_AIX_STRUCT_RET\n-   controls this instead of DEFAULT_ABI; V.4 targets needing backward\n-   compatibility can change DRAFT_V4_STRUCT_RET to override the\n-   default, and -m switches get the final word.  See\n-   rs6000_override_options for more details.\n-\n-   The PPC32 SVR4 ABI uses IEEE double extended for long double, if 128-bit\n-   long double support is enabled.  These values are returned in memory.\n-\n-   int_size_in_bytes returns -1 for variable size objects, which go in\n-   memory always.  The cast to unsigned makes -1 > 8.  */\n-\n-#define RETURN_IN_MEMORY(TYPE) \\\n-  ((AGGREGATE_TYPE_P (TYPE)\t\t\t\t\t\t\\\n-    && (TARGET_AIX_STRUCT_RET\t\t\t\t\t\t\\\n-\t|| (unsigned HOST_WIDE_INT) int_size_in_bytes (TYPE) > 8))\t\\\n-   || (DEFAULT_ABI == ABI_V4 && TYPE_MODE (TYPE) == TFmode))\n-\n /* DRAFT_V4_STRUCT_RET defaults off.  */\n #define DRAFT_V4_STRUCT_RET 0\n \n@@ -1857,23 +1821,6 @@ typedef struct rs6000_args\n    the ABIs at the moment.  For now, only AIX gets fixed.  */\n #define SPLIT_COMPLEX_ARGS (DEFAULT_ABI == ABI_AIX)\n \n-/* Perform any needed actions needed for a function that is receiving a\n-   variable number of arguments.\n-\n-   CUM is as above.\n-\n-   MODE and TYPE are the mode and type of the current parameter.\n-\n-   PRETEND_SIZE is a variable that should be set to the amount of stack\n-   that must be pushed by the prolog to pretend that our caller pushed\n-   it.\n-\n-   Normally, this macro will push all remaining incoming registers on the\n-   stack and set PRETEND_SIZE to the length of the registers pushed.  */\n-\n-#define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL) \\\n-  setup_incoming_varargs (&CUM, MODE, TYPE, &PRETEND_SIZE, NO_RTL)\n-\n /* Define the `__builtin_va_list' type for the ABI.  */\n #define BUILD_VA_LIST_TYPE(VALIST) \\\n   (VALIST) = rs6000_build_va_list ()"}, {"sha": "939ed8441685d3dbbb129a733100ba3fb8e78a7b", "filename": "gcc/hooks.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=c6e8c9219569f455c71553d29ad8d6af20098b92", "patch": "@@ -158,6 +158,12 @@ hook_bool_tree_false (tree a ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+bool\n+hook_bool_tree_true (tree a ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n bool\n hook_bool_tree_tree_false (tree a ATTRIBUTE_UNUSED, tree b ATTRIBUTE_UNUSED)\n {\n@@ -190,7 +196,14 @@ hook_rtx_rtx_identity (rtx x)\n rtx\n hook_rtx_rtx_null (rtx x ATTRIBUTE_UNUSED)\n {\n-  return 0;\n+  return NULL;\n+}\n+\n+/* Generic hook that takes a tree and an int and returns NULL_RTX.  */\n+rtx\n+hook_rtx_tree_int_null (tree a ATTRIBUTE_UNUSED, int b ATTRIBUTE_UNUSED)\n+{\n+  return NULL;\n }\n \n /* Generic hook that takes a size_t and returns NULL.  */"}, {"sha": "77111155ba758ffd33458c5b6935084ff8a04b5d", "filename": "gcc/hooks.h", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=c6e8c9219569f455c71553d29ad8d6af20098b92", "patch": "@@ -22,40 +22,42 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #ifndef GCC_HOOKS_H\n #define GCC_HOOKS_H\n \n-bool hook_bool_void_false (void);\n-bool hook_bool_bool_false (bool);\n-bool hook_bool_tree_false (tree);\n-bool hook_bool_tree_hwi_hwi_tree_false (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n+extern bool hook_bool_void_false (void);\n+extern bool hook_bool_bool_false (bool);\n+extern bool hook_bool_tree_false (tree);\n+extern bool hook_bool_tree_true (tree);\n+extern bool hook_bool_tree_hwi_hwi_tree_false (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t\ttree);\n-bool hook_bool_tree_hwi_hwi_tree_true (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n+extern bool hook_bool_tree_hwi_hwi_tree_true (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t       tree);\n-bool hook_bool_rtx_false (rtx);\n-bool hook_bool_rtx_int_int_intp_false (rtx, int, int, int *);\n-bool hook_bool_constcharptr_size_t_false (const char *, size_t);\n-\n-void hook_void_tree_int (tree, int);\n-void hook_void_void (void);\n-void hook_void_FILEptr_constcharptr (FILE *, const char *);\n-void hook_void_tree (tree);\n-void hook_void_tree_treeptr (tree, tree *);\n-void hook_void_constcharptr (const char *);\n-\n-int hook_int_tree_tree_1 (tree, tree);\n-int hook_int_rtx_0 (rtx);\n-int hook_int_void_0 (void);\n-int hook_int_size_t_constcharptr_int_0 (size_t, const char *, int);\n-int hook_int_void_no_regs (void);\n-\n-unsigned hook_uint_uint_constcharptrptr_0 (unsigned, const char **);\n-\n-bool default_can_output_mi_thunk_no_vcall (tree, HOST_WIDE_INT,\n+extern bool hook_bool_rtx_false (rtx);\n+extern bool hook_bool_rtx_int_int_intp_false (rtx, int, int, int *);\n+extern bool hook_bool_constcharptr_size_t_false (const char *, size_t);\n+\n+extern void hook_void_tree_int (tree, int);\n+extern void hook_void_void (void);\n+extern void hook_void_FILEptr_constcharptr (FILE *, const char *);\n+extern void hook_void_tree (tree);\n+extern void hook_void_tree_treeptr (tree, tree *);\n+extern void hook_void_constcharptr (const char *);\n+\n+extern int hook_int_tree_tree_1 (tree, tree);\n+extern int hook_int_rtx_0 (rtx);\n+extern int hook_int_void_0 (void);\n+extern int hook_int_size_t_constcharptr_int_0 (size_t, const char *, int);\n+extern int hook_int_void_no_regs (void);\n+\n+extern unsigned hook_uint_uint_constcharptrptr_0 (unsigned, const char **);\n+\n+extern bool default_can_output_mi_thunk_no_vcall (tree, HOST_WIDE_INT,\n \t\t\t\t\t   HOST_WIDE_INT, tree);\n \n-bool hook_bool_tree_tree_false (tree, tree);\n+extern bool hook_bool_tree_tree_false (tree, tree);\n \n-rtx hook_rtx_rtx_identity (rtx);\n-rtx hook_rtx_rtx_null (rtx);\n-void * hook_voidp_size_t_null (size_t);\n-bool hook_bool_voidp_size_t_false (void *, size_t);\n+extern rtx hook_rtx_rtx_identity (rtx);\n+extern rtx hook_rtx_rtx_null (rtx);\n+extern rtx hook_rtx_tree_int_null (tree, int);\n+extern void * hook_voidp_size_t_null (size_t);\n+extern bool hook_bool_voidp_size_t_false (void *, size_t);\n \n #endif"}, {"sha": "1000abb5d24774cafec2594f2d7e85d11dd822eb", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=c6e8c9219569f455c71553d29ad8d6af20098b92", "patch": "@@ -195,3 +195,10 @@ default_pretend_outgoing_varargs_named(CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n #endif\n #endif\n }\n+\n+/* Generic hook that takes a CUMULATIVE_ARGS pointer and returns true.  */\n+bool\n+hook_bool_CUMULATIVE_ARGS_true (CUMULATIVE_ARGS * a ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}"}, {"sha": "724abe82ab44d5d7457149d6e1fa6f138ce35b0b", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6e8c9219569f455c71553d29ad8d6af20098b92/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=c6e8c9219569f455c71553d29ad8d6af20098b92", "patch": "@@ -31,3 +31,5 @@ extern rtx default_expand_builtin_saveregs (void);\n extern void default_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int);\n extern bool default_strict_argument_naming (CUMULATIVE_ARGS *);\n extern bool default_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n+\n+extern bool hook_bool_CUMULATIVE_ARGS_true (CUMULATIVE_ARGS *);"}]}