{"sha": "7ef249e59f5763183e110ad98531645f3030a82c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VmMjQ5ZTU5ZjU3NjMxODNlMTEwYWQ5ODUzMTY0NWYzMDMwYTgyYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-11-20T10:36:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-11-20T10:36:03Z"}, "message": "re PR c/34146 (Inefficient code with compound literals inside a CONSTRUCTO)\n\n\tPR c/34146\n\t* c-gimplify.c (optimize_compound_literals_in_ctor): New function.\n\t(c_gimplify_expr): Use it.\n\n\tPR c/34146\n\t* gcc.dg/tree-ssa/pr34146.c: New test.\n\n\tPR testsuite/33978\n\t* gcc.dg/tree-ssa/pr33723.c: Adjust scan pattern to make it less\n\tdependent on target settings like move_by_pieces etc.\n\nFrom-SVN: r130311", "tree": {"sha": "0c4dfd8db5db25e7f3e83f89dc36db48d511e3fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c4dfd8db5db25e7f3e83f89dc36db48d511e3fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ef249e59f5763183e110ad98531645f3030a82c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef249e59f5763183e110ad98531645f3030a82c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ef249e59f5763183e110ad98531645f3030a82c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef249e59f5763183e110ad98531645f3030a82c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cae85ca91aadc601f13f814bbc6527f54293d843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cae85ca91aadc601f13f814bbc6527f54293d843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cae85ca91aadc601f13f814bbc6527f54293d843"}], "stats": {"total": 123, "additions": 120, "deletions": 3}, "files": [{"sha": "5625617b9c25956acfb9b257e53bfc5c95b2e0cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef249e59f5763183e110ad98531645f3030a82c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef249e59f5763183e110ad98531645f3030a82c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ef249e59f5763183e110ad98531645f3030a82c", "patch": "@@ -1,3 +1,9 @@\n+2007-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/34146\n+\t* c-gimplify.c (optimize_compound_literals_in_ctor): New function.\n+\t(c_gimplify_expr): Use it.\n+\n 2007-11-20  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/spu/spu_mfcio.h: Fix typo."}, {"sha": "12292a7e591acf45b1671e9d8da8c156897d7de9", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef249e59f5763183e110ad98531645f3030a82c/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef249e59f5763183e110ad98531645f3030a82c/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=7ef249e59f5763183e110ad98531645f3030a82c", "patch": "@@ -208,6 +208,47 @@ gimplify_compound_literal_expr (tree *expr_p, tree *pre_p)\n   return GS_OK;\n }\n \n+/* Optimize embedded COMPOUND_LITERAL_EXPRs within a CONSTRUCTOR,\n+   return a new CONSTRUCTOR if something changed.  */\n+\n+static tree\n+optimize_compound_literals_in_ctor (tree orig_ctor)\n+{\n+  tree ctor = orig_ctor;\n+  VEC(constructor_elt,gc) *elts = CONSTRUCTOR_ELTS (ctor);\n+  unsigned int idx, num = VEC_length (constructor_elt, elts);\n+\n+  for (idx = 0; idx < num; idx++)\n+    {\n+      tree value = VEC_index (constructor_elt, elts, idx)->value;\n+      tree newval = value;\n+      if (TREE_CODE (value) == CONSTRUCTOR)\n+\tnewval = optimize_compound_literals_in_ctor (value);\n+      else if (TREE_CODE (value) == COMPOUND_LITERAL_EXPR)\n+\t{\n+\t  tree decl_s = COMPOUND_LITERAL_EXPR_DECL_STMT (value);\n+\t  tree decl = DECL_EXPR_DECL (decl_s);\n+\t  tree init = DECL_INITIAL (decl);\n+\n+\t  if (!TREE_ADDRESSABLE (value)\n+\t      && !TREE_ADDRESSABLE (decl)\n+\t      && init)\n+\t    newval = init;\n+\t}\n+      if (newval == value)\n+\tcontinue;\n+\n+      if (ctor == orig_ctor)\n+\t{\n+\t  ctor = copy_node (orig_ctor);\n+\t  CONSTRUCTOR_ELTS (ctor) = VEC_copy (constructor_elt, gc, elts);\n+\t  elts = CONSTRUCTOR_ELTS (ctor);\n+\t}\n+      VEC_index (constructor_elt, elts, idx)->value = newval;\n+    }\n+  return ctor;\n+}\n+\n /* Do C-specific gimplification.  Args are as for gimplify_expr.  */\n \n int\n@@ -254,6 +295,18 @@ c_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p ATTRIBUTE_UNUSED)\n \t      return GS_OK;\n \t    }\n \t}\n+      else if (TREE_CODE (TREE_OPERAND (*expr_p, 1)) == CONSTRUCTOR)\n+\t{\n+\t  tree ctor\n+\t    = optimize_compound_literals_in_ctor (TREE_OPERAND (*expr_p, 1));\n+\n+\t  if (ctor != TREE_OPERAND (*expr_p, 1))\n+\t    {\n+\t      *expr_p = copy_node (*expr_p);\n+\t      TREE_OPERAND (*expr_p, 1) = ctor;\n+\t      return GS_OK;\n+\t    }\n+\t}\n       return GS_UNHANDLED;\n \n     default:"}, {"sha": "c01f3aefe28ffd963470a8cbee7d1542734d881f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef249e59f5763183e110ad98531645f3030a82c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef249e59f5763183e110ad98531645f3030a82c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ef249e59f5763183e110ad98531645f3030a82c", "patch": "@@ -1,5 +1,12 @@\n 2007-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/34146\n+\t* gcc.dg/tree-ssa/pr34146.c: New test.\n+\n+\tPR testsuite/33978\n+\t* gcc.dg/tree-ssa/pr33723.c: Adjust scan pattern to make it less\n+\tdependent on target settings like move_by_pieces etc.\n+\n \tPR c++/28879\n \t* g++.dg/template/vla2.C: New test.\n "}, {"sha": "32a3aad9c1ca73d1a3caa1d4baf7cf8dd0a7904a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr33723.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef249e59f5763183e110ad98531645f3030a82c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33723.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef249e59f5763183e110ad98531645f3030a82c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33723.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33723.c?ref=7ef249e59f5763183e110ad98531645f3030a82c", "patch": "@@ -68,7 +68,5 @@ baz3 (void)\n   test (&t);\n }\n \n-/* { dg-final { scan-tree-dump-times \"t = {}\" 3 \"gimple\"} } */\n-/* { dg-final { scan-tree-dump-times \"t.f.f1 = 1\" 4 \"gimple\"} } */\n-/* { dg-final { scan-tree-dump-times \"t.f.f8 = 8\" 4 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-not \"t = D\" \"gimple\"} } */\n /* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "99fdeb5edfef2517519e190b72b9a793e87cff16", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr34146.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef249e59f5763183e110ad98531645f3030a82c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr34146.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef249e59f5763183e110ad98531645f3030a82c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr34146.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr34146.c?ref=7ef249e59f5763183e110ad98531645f3030a82c", "patch": "@@ -0,0 +1,53 @@\n+/* PR c/34146 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-gimple\" } */\n+\n+struct A\n+{\n+  int f1, f2, f3;\n+};\n+\n+struct B\n+{\n+  struct A g1, g2;\n+};\n+\n+struct C\n+{\n+  struct B h1, h2;\n+};\n+\n+typedef union\n+{\n+  struct C c;\n+  char s[4];\n+  long int a;\n+} T;\n+\n+void\n+foo (void)\n+{\n+  T t = { { { { 0, 0, 0 }, { 0, 0, 0 } }, { { 0, 0, 0 }, { 0, 0, 0 } } } };\n+  test (&t);\n+}\n+\n+void\n+bar (void)\n+{\n+  T t = { { { { 0, 0, 0 }, (struct A) { 0, 0, 0 } },\n+\t    (struct B) { (struct A) { 0, 0, 0 }, { 0, 0, 0 } } } };\n+  test (&t);\n+}\n+\n+void\n+baz (void)\n+{\n+  T t = { { { { 0, 0, 0 }, (struct A) { 1, 1, 1 } },\n+\t    (struct B) { (struct A) { 0, 0, 0 }, { 1, 1, 1 } } } };\n+  test (&t);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"t = D\" \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-not \"t\\.c\\.h\\[12\\] = D\" \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-not \"\\.g\\[12\\] = D\" \"gimple\"} } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}