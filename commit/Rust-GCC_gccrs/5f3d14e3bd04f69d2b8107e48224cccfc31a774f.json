{"sha": "5f3d14e3bd04f69d2b8107e48224cccfc31a774f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzZDE0ZTNiZDA0ZjY5ZDJiODEwN2U0ODIyNGNjY2ZjMzFhNzc0Zg==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-05-17T15:53:19Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-05-17T15:53:19Z"}, "message": "i386.md (return, [...]): New patterns for emitting asm from prologue and epilogue RTL.\n\n* i386.md (return, return_internal, prologue, prologue_set_got,\nprologue_get_pc, epilogue, leave, pop): New patterns for emitting\nasm from prologue and epilogue RTL.\n\nFrom-SVN: r11990", "tree": {"sha": "52f189b2d0391e9d134fd671dfb9a1bf4cf5fb14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52f189b2d0391e9d134fd671dfb9a1bf4cf5fb14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f3d14e3bd04f69d2b8107e48224cccfc31a774f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3d14e3bd04f69d2b8107e48224cccfc31a774f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f3d14e3bd04f69d2b8107e48224cccfc31a774f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3d14e3bd04f69d2b8107e48224cccfc31a774f/comments", "author": null, "committer": null, "parents": [{"sha": "2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2fa5b1ad0e8be759f7f05172f6407fdee0d69f"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "3d35f0436d28c51d4532babab32fcacefc13bc3a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 89, "deletions": 7, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f3d14e3bd04f69d2b8107e48224cccfc31a774f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f3d14e3bd04f69d2b8107e48224cccfc31a774f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5f3d14e3bd04f69d2b8107e48224cccfc31a774f", "patch": "@@ -5987,19 +5987,100 @@\n ;; This is only done if the function's epilogue is known to be simple.\n ;; See comments for simple_386_epilogue in i386.c.\n \n-(define_insn \"return\"\n+(define_expand \"return\"\n   [(return)]\n-  \"simple_386_epilogue ()\"\n+  \"ix86_can_use_return_insn_p ()\"\n+  \"\")\n+\n+(define_insn \"return_internal\"\n+  [(return)]\n+  \"reload_completed\"\n+  \"ret\")\n+\n+(define_insn \"nop\"\n+  [(const_int 0)]\n+  \"\"\n+  \"nop\")\n+\n+(define_expand \"prologue\"\n+  [(const_int 1)]\n+  \"\"\n+  \"\n+{\n+  ix86_expand_prologue ();\n+  DONE;\n+}\")\n+\n+(define_insn \"prologue_set_got\"\n+  [(set (match_operand:SI 0 \"\" \"\")\n+    (plus:SI (match_dup 0)\n+     (plus:SI (match_operand:SI 1 \"symbolic_operand\" \"\")\n+      (minus:SI (pc) (match_operand 2 \"\" \"\")))))]\n+  \"\"\n   \"*\n {\n-  function_epilogue (asm_out_file, get_frame_size ());\n+  char buffer[64];\n+\n+  if (TARGET_DEEP_BRANCH_PREDICTION) \n+    {\n+      sprintf (buffer, \\\"addl %s,%%0\\\", XSTR (operands[1], 0));\n+      output_asm_insn (buffer, operands);\n+    }\n+  else  \n+    {\n+      sprintf (buffer, \\\"addl %s+[.-.L%d],%%0\\\", XSTR (operands[1], 0), INTVAL (operands[2]));\n+      output_asm_insn (buffer, operands);\n+    }    \n   RET;\n }\")\n \n-(define_insn \"nop\"\n-  [(const_int 0)]\n+(define_insn \"prologue_get_pc\"\n+  [(set (match_operand:SI 0 \"\" \"\")\n+    (plus:SI (pc) (match_operand 1 \"\" \"\")))]\n   \"\"\n-  \"nop\")\n+  \"*\n+{\n+  char buffer[64];\n+\n+  sprintf (buffer, \\\"call .L%d\\\", INTVAL (operands[1]));\n+  output_asm_insn (buffer, operands);\n+  if (! TARGET_DEEP_BRANCH_PREDICTION) \n+    {\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", INTVAL (operands[1]));\n+    }    \n+  RET;\n+}\")\n+\n+(define_expand \"epilogue\"\n+  [(const_int 1)]\n+  \"\"\n+  \"\n+{\n+  ix86_expand_epilogue ();\n+  DONE;\n+}\")\n+\n+(define_insn \"leave\"\n+  [(const_int 2)]\n+  \"\"\n+  \"leave\")\n+\n+(define_insn \"pop\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"r\")\n+\t(mem:SI (reg:SI 7)))\n+   (set (reg:SI 7) (minus:SI (reg:SI 7) (const_int 4)))]\n+  \"\"\n+  \"*\n+{\n+  rtx xops [2];\n+\n+    xops[0] = frame_pointer_rtx;\n+    xops[1] = stack_pointer_rtx;\n+    if (operands[0] == frame_pointer_rtx)\n+       output_asm_insn (AS2 (mov%L0,%0,%1), xops);\n+    output_asm_insn (AS1 (pop%L0,%P0), operands);\n+    RET;\n+}\")\n \n (define_expand \"movstrsi\"\n   [(parallel [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n@@ -6774,4 +6855,5 @@\n \t\t\t       (match_operand:SI 2 \"register_operand\" \"=&q\")] 0))\n    (clobber (match_dup 2))]\n   \"(TARGET_USE_Q_REG && optimize > 1)\"\n-  \"* return output_strlen_unroll (operands);\")\n+  \"* return output_strlen_unroll (operands);\"\n+)"}]}