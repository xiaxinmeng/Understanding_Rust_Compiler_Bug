{"sha": "79e72538bf5172eca78af35f62d5f75dedfd1f61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllNzI1MzhiZjUxNzJlY2E3OGFmMzVmNjJkNWY3NWRlZGZkMWY2MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2005-09-13T19:02:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-09-13T19:02:04Z"}, "message": "re PR target/23816 (ICE in extract_insn, at recog.c:2084)\n\n        PR target/23816\n        * config/i386/sse.md (*ieee_sminv4sf3, *ieee_smaxv4sf3)\n        (*ieee_sminv2df3, *ieee_smaxv2df3): New insn patterns.\n\nFrom-SVN: r104236", "tree": {"sha": "eebae47bfd149cfb13c36563afb2446fda61485f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eebae47bfd149cfb13c36563afb2446fda61485f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79e72538bf5172eca78af35f62d5f75dedfd1f61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e72538bf5172eca78af35f62d5f75dedfd1f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e72538bf5172eca78af35f62d5f75dedfd1f61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e72538bf5172eca78af35f62d5f75dedfd1f61/comments", "author": null, "committer": null, "parents": [{"sha": "f81ab296b960627404579bb873fc35807665efa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81ab296b960627404579bb873fc35807665efa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f81ab296b960627404579bb873fc35807665efa0"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "39345c89d31420e59958a7c22acea7bf77550301", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e72538bf5172eca78af35f62d5f75dedfd1f61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e72538bf5172eca78af35f62d5f75dedfd1f61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79e72538bf5172eca78af35f62d5f75dedfd1f61", "patch": "@@ -1,3 +1,9 @@\n+2005-09-13  Uros Bizjak  <uros@kss-loka.si>\n+\n+\tPR target/23816\n+\t* config/i386/sse.md (*ieee_sminv4sf3, *ieee_smaxv4sf3)\n+\t(*ieee_sminv2df3, *ieee_smaxv2df3): New insn patterns.\n+\n 2005-09-13  Ian Lance Taylor  <ian@airs.com>\n \n \t* loop-doloop.c (doloop_modify): Use GEN_INT to pass an rtx rather"}, {"sha": "19f91ed7f0c3ddeb8f9f45246d8f18c89569277f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e72538bf5172eca78af35f62d5f75dedfd1f61/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e72538bf5172eca78af35f62d5f75dedfd1f61/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=79e72538bf5172eca78af35f62d5f75dedfd1f61", "patch": "@@ -589,6 +589,52 @@\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"mode\" \"SF\")])\n \n+;; These versions of the min/max patterns implement exactly the operations\n+;;   min = (op1 < op2 ? op1 : op2)\n+;;   max = (!(op1 < op2) ? op1 : op2)\n+;; Their operands are not commutative, and thus they may be used in the\n+;; presence of -0.0 and NaN.\n+\n+(define_insn \"*ieee_sminv4sf3\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_IEEE_MIN))]\n+  \"TARGET_SSE\"\n+  \"minps\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"*ieee_smaxv4sf3\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_IEEE_MAX))]\n+  \"TARGET_SSE\"\n+  \"maxps\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"*ieee_sminv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_IEEE_MIN))]\n+  \"TARGET_SSE2\"\n+  \"minpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n+(define_insn \"*ieee_smaxv2df3\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x\")\n+\t(unspec:V2DF [(match_operand:V2DF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:V2DF 2 \"nonimmediate_operand\" \"xm\")]\n+\t\t     UNSPEC_IEEE_MAX))]\n+  \"TARGET_SSE2\"\n+  \"maxpd\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"V2DF\")])\n+\n (define_insn \"sse3_addsubv4sf3\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x\")\n \t(vec_merge:V4SF"}, {"sha": "9ee9892573b8b59138f0b2363ccc752765ca3f7c", "filename": "gcc/testsuite/gcc.dg/vect/pr23816-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e72538bf5172eca78af35f62d5f75dedfd1f61/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr23816-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e72538bf5172eca78af35f62d5f75dedfd1f61/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr23816-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr23816-1.c?ref=79e72538bf5172eca78af35f62d5f75dedfd1f61", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+void\n+foo (float a[32], float b[2][32])\n+{\n+  int i;\n+  for (i = 0; i < 32; i++)\n+    a[i] = (b[0][i] > b[1][i]) ? b[0][i] : b[1][i];\n+}"}, {"sha": "c3ef73457b202e13cea8d8ac720ab4e428ae5768", "filename": "gcc/testsuite/gcc.dg/vect/pr23816-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79e72538bf5172eca78af35f62d5f75dedfd1f61/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr23816-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79e72538bf5172eca78af35f62d5f75dedfd1f61/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr23816-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr23816-2.c?ref=79e72538bf5172eca78af35f62d5f75dedfd1f61", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+void\n+foo (double a[32], double b[2][32])\n+{\n+  int i;\n+  for (i = 0; i < 32; i++)\n+    a[i] = (b[0][i] > b[1][i]) ? b[0][i] : b[1][i];\n+}"}]}