{"sha": "30c6ec2f5309f78a1ded63243ae0037b63974d29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjNmVjMmY1MzA5Zjc4YTFkZWQ2MzI0M2FlMDAzN2I2Mzk3NGQyOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-02-03T14:03:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-02-03T14:03:35Z"}, "message": "tree-ssa-ifcombine.c (update_profile_after_ifcombine): New function.\n\n\t* tree-ssa-ifcombine.c (update_profile_after_ifcombine): New function.\n\t(ifcombine_ifandif): Use it.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-1.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-2.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-3.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-4.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-5.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-6.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-7.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-8.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-9.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-10.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-11.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-12.c: Check for no profile mismatches.\n\t* gcc.dg/tree-ssa/ssa-ifcombine-13.c: Check for no profile mismatches.\n\nFrom-SVN: r245151", "tree": {"sha": "af9a108f3707a0072eb12193f8868bd736521ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af9a108f3707a0072eb12193f8868bd736521ea3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c6ec2f5309f78a1ded63243ae0037b63974d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c6ec2f5309f78a1ded63243ae0037b63974d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c6ec2f5309f78a1ded63243ae0037b63974d29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c6ec2f5309f78a1ded63243ae0037b63974d29/comments", "author": null, "committer": null, "parents": [{"sha": "778e0ac39798b142bbc96c78da568e2debeeff0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778e0ac39798b142bbc96c78da568e2debeeff0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778e0ac39798b142bbc96c78da568e2debeeff0b"}], "stats": {"total": 109, "additions": 96, "deletions": 13}, "files": [{"sha": "7fd658ef9998b6a39e4824325695d5f0c3965bb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,3 +1,8 @@\n+2017-02-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-ifcombine.c (update_profile_after_ifcombine): New function.\n+\t(ifcombine_ifandif): Use it.\n+\n 2017-02-03  Martin Liska  <mliska@suse.cz>\n \n \t* doc/invoke.texi: Document default value for"}, {"sha": "ddcc87e86eb19f4cd4bdaea139c8b6fe72b3b12a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,3 +1,19 @@\n+2017-02-02  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-1.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-2.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-3.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-4.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-5.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-6.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-7.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-8.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-9.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-10.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-11.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-12.c: Check for no profile mismatches.\n+\t* gcc.dg/tree-ssa/ssa-ifcombine-13.c: Check for no profile mismatches.\n+\n 2017-02-02  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/79275"}, {"sha": "e38c1113de58e6087d7188031a08daa3057bd911", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-1.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-optimized\" } */\n+/* { dg-options \"-O -fdump-tree-optimized-details-blocks\" } */\n \n /* Testcase for PR31657.  */\n \n@@ -14,3 +14,4 @@ int foo (int x, int a, int b)\n }\n \n /* { dg-final { scan-tree-dump \"\\\\|\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "1948af82896e37bdb5c937ce393773ef09c1cb2e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-10.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-10.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized-details-blocks\" } */\n \n /* Testcase for PR31657.  */\n \n@@ -17,3 +17,4 @@ int f(int x, int a, int b)\n   return t;\n }\n /* { dg-final { scan-tree-dump \"& 5\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "780ecf57b3aefd12a9f13180860b67bbed1a4d92", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-11.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-11.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-optimized\" } */\n+/* { dg-options \"-O -fdump-tree-optimized-details-blocks\" } */\n \n /* Testcase for PR31657.  */\n int g(void);\n@@ -18,3 +18,4 @@ int f(int x, int a, int b)\n }\n \n /* { dg-final { scan-tree-dump \"& 5\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "72ffaf503fa161814dbacd19fe78c0a9dc1edfff", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-12.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-12.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-vrp -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fno-tree-vrp -fdump-tree-optimized-details-blocks\" } */\n \n /* Testcase for PR31657.  */\n \n@@ -17,3 +17,4 @@ int f(int x, int a, int b)\n   return t;\n }\n /* { dg-final { scan-tree-dump \"& 5\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "7f4f011faeea8c6ec64fd862972cf4f5161ae265", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-13.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-13.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O1 -fdump-tree-optimized-details-blocks\" } */\n /* { dg-additional-options \"-mbranch-cost=2\" { target { i?86-*-* x86_64-*-* s390*-*-* avr*-*-* } } } */\n \n _Bool f1(_Bool a, _Bool b)\n@@ -18,3 +18,4 @@ _Bool f1(_Bool a, _Bool b)\n /* For LOGICAL_OP_NON_SHORT_CIRCUIT, this should be optimized\n    into return a & b;, with no ifs.  */\n /* { dg-final { scan-tree-dump-not \"if\" \"optimized\" { target { i?86-*-* x86_64-*-* s390*-*-* avr*-*-* } } } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "ac70d4b639a7c8c0a443de3b74883b638191f053", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-2.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-optimized\" } */\n+/* { dg-options \"-O -fdump-tree-optimized-details-blocks\" } */\n \n /* Testcase for PR31657.  */\n \n@@ -20,3 +20,4 @@ int foo (int x, int a, int b)\n }\n \n /* { dg-final { scan-tree-dump \"\\\\|\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "c51fdf3a9c4f583cf8f4fbe85af7d90ed947e13a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-3.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-optimized\" } */\n+/* { dg-options \"-O -fdump-tree-optimized-details-blocks\" } */\n \n /* Testcase extracted from PR15353.  */\n \n@@ -20,3 +20,4 @@ int foo (int x, int a)\n }\n \n /* { dg-final { scan-tree-dump \">=\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "178ebda47587ebf1efe5634971effbaf4f28a277", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-4.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-optimized\" } */\n+/* { dg-options \"-O -fdump-tree-optimized-details-blocks\" } */\n \n /* Testcase extracted from PR15353.  */\n \n@@ -18,3 +18,4 @@ void foo (int x, int a)\n }\n \n /* { dg-final { scan-tree-dump \"!=\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "c16a0d9a94bd6104e9a920baf96921d4182125b8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-5.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-optimized\" } */\n+/* { dg-options \"-O -fdump-tree-optimized-details-blocks\" } */\n \n /* Testcase from PR15353.  */\n \n@@ -17,3 +17,4 @@ int f(int *i, int *j)\n }\n \n /* { dg-final { scan-tree-dump \">=\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"optimized\" } } */"}, {"sha": "a85531d19ec1bb9c9fc30c5edd87474f2d931627", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-6.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-6.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-ifcombine\" } */\n+/* { dg-options \"-O -fdump-tree-ifcombine-details-blocks\" } */\n \n void bar (void);\n \n@@ -34,3 +34,4 @@ foo2 (unsigned int a)\n \n /* { dg-final { scan-tree-dump \"optimizing bits or bits test\" \"ifcombine\" } } */\n /* { dg-final { scan-tree-dump \"optimizing double bit test\" \"ifcombine\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"ifcombine\" } } */"}, {"sha": "7eab7fd463636f7bd3adf7e63a5946694de66439", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-7.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-7.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-ifcombine\" } */\n+/* { dg-options \"-O -fdump-tree-ifcombine-details-blocks\" } */\n \n int test1 (int i, int j)\n {\n@@ -12,3 +12,4 @@ int test1 (int i, int j)\n /* The above should be optimized to a i > j test by ifcombine.  */\n \n /* { dg-final { scan-tree-dump \" > \" \"ifcombine\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"ifcombine\" } } */"}, {"sha": "5bddf68e2d10426d43daaaa82046547c6d982996", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-8.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-8.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fno-trapping-math -fdump-tree-ifcombine\" } */\n+/* { dg-options \"-O -fno-trapping-math -fdump-tree-ifcombine-details-blocks\" } */\n \n double test1 (double i, double j)\n {\n@@ -22,3 +22,4 @@ double test1 (double i, double j)\n    Instead we get u<=, which is acceptable with -fno-trapping-math.  */\n \n /* { dg-final { scan-tree-dump \" u<= \" \"ifcombine\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"ifcombine\" } } */"}, {"sha": "bb18e0f01b09877a2ec1204e2e87e5b7cb44b41e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ifcombine-9.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ifcombine-9.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-trapping-math -fdump-tree-ifcombine\" } */\n+/* { dg-options \"-O2 -fno-trapping-math -fdump-tree-ifcombine-details-blocks\" } */\n \n void f ();\n enum Sign { NEG=-1, ZERO, POS };\n@@ -19,3 +19,4 @@ void g (double x)\n    The transformation would also be legal with -ftrapping-math.  */\n \n /* { dg-final { scan-tree-dump \"optimizing.* < \" \"ifcombine\" } } */\n+/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"ifcombine\" } } */"}, {"sha": "16f6c73d7e6a092c5bb4d86a664ca6689ff587ea", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6ec2f5309f78a1ded63243ae0037b63974d29/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=30c6ec2f5309f78a1ded63243ae0037b63974d29", "patch": "@@ -332,6 +332,51 @@ recognize_bits_test (gcond *cond, tree *name, tree *bits, bool inv)\n   return true;\n }\n \n+\n+/* Update profile after code in outer_cond_bb was adjusted so\n+   outer_cond_bb has no condition.  */\n+\n+static void\n+update_profile_after_ifcombine (basic_block inner_cond_bb,\n+\t\t\t        basic_block outer_cond_bb)\n+{\n+  edge outer_to_inner = find_edge (outer_cond_bb, inner_cond_bb);\n+  edge outer2 = (EDGE_SUCC (outer_cond_bb, 0) == outer_to_inner\n+\t\t ? EDGE_SUCC (outer_cond_bb, 1)\n+\t\t : EDGE_SUCC (outer_cond_bb, 0));\n+  edge inner_taken = EDGE_SUCC (inner_cond_bb, 0);\n+  edge inner_not_taken = EDGE_SUCC (inner_cond_bb, 1);\n+  \n+  if (inner_taken->dest != outer2->dest)\n+    std::swap (inner_taken, inner_not_taken);\n+  gcc_assert (inner_taken->dest == outer2->dest);\n+\n+  /* In the following we assume that inner_cond_bb has single predecessor.  */\n+  gcc_assert (single_pred_p (inner_cond_bb));\n+\n+  /* Path outer_cond_bb->(outer2) needs to be merged into path\n+     outer_cond_bb->(outer_to_inner)->inner_cond_bb->(inner_taken)\n+     and probability of inner_not_taken updated.  */\n+\n+  outer_to_inner->count = outer_cond_bb->count;\n+  inner_cond_bb->count = outer_cond_bb->count;\n+  inner_taken->count += outer2->count;\n+  outer2->count = 0;\n+\n+  inner_taken->probability = outer2->probability\n+\t\t\t     + RDIV (outer_to_inner->probability\n+\t\t\t\t     * inner_taken->probability,\n+\t\t\t\t     REG_BR_PROB_BASE);\n+  if (inner_taken->probability > REG_BR_PROB_BASE)\n+    inner_taken->probability = REG_BR_PROB_BASE;\n+  inner_not_taken->probability = REG_BR_PROB_BASE\n+\t\t\t\t - inner_taken->probability;\n+\n+  outer_to_inner->probability = REG_BR_PROB_BASE;\n+  inner_cond_bb->frequency = outer_cond_bb->frequency;\n+  outer2->probability = 0;\n+}\n+\n /* If-convert on a and pattern with a common else block.  The inner\n    if is specified by its INNER_COND_BB, the outer by OUTER_COND_BB.\n    inner_inv, outer_inv and result_inv indicate whether the conditions\n@@ -394,6 +439,8 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n \touter_inv ? boolean_false_node : boolean_true_node);\n       update_stmt (outer_cond);\n \n+      update_profile_after_ifcombine (inner_cond_bb, outer_cond_bb);\n+\n       if (dump_file)\n \t{\n \t  fprintf (dump_file, \"optimizing double bit test to \");\n@@ -471,6 +518,7 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n       gimple_cond_set_condition_from_tree (outer_cond,\n \touter_inv ? boolean_false_node : boolean_true_node);\n       update_stmt (outer_cond);\n+      update_profile_after_ifcombine (inner_cond_bb, outer_cond_bb);\n \n       if (dump_file)\n \t{\n@@ -554,6 +602,7 @@ ifcombine_ifandif (basic_block inner_cond_bb, bool inner_inv,\n       gimple_cond_set_condition_from_tree (outer_cond,\n \touter_inv ? boolean_false_node : boolean_true_node);\n       update_stmt (outer_cond);\n+      update_profile_after_ifcombine (inner_cond_bb, outer_cond_bb);\n \n       if (dump_file)\n \t{"}]}