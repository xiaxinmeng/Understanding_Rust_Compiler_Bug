{"sha": "40bb78ad246919ee068382c3a2cdf6f299e412c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBiYjc4YWQyNDY5MTllZTA2ODM4MmMzYTJjZGY2ZjI5OWU0MTJjOQ==", "commit": {"author": {"name": "Fabien Ch\u00eane", "email": "fabien.chene@gmail.com", "date": "2010-05-07T15:52:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-07T15:52:06Z"}, "message": "re PR c++/43951 (Revision 158918 miscompiled 483.xalancbmk in SPEC CPU 2006)\n\n\tPR c++/43951\n\t* init.c (diagnose_uninitialized_cst_or_ref_member_1): Returns the\n\terror count. Emit errors only if compain is true.\n\t(build_new_1): Do not return error_mark_node if\n\tdiagnose_uninitialized_cst_or_ref_member_1 does not diagnose any\n\terrors. Delay the check for user-provided constructor.\n\t(perform_member_init): Adjust.\n\t* cp-tree.h (diagnose_uninitialized_cst_or_ref_member): Change the\n\tprototype.\n\nFrom-SVN: r159158", "tree": {"sha": "509ac9f873d8887b78813e37442448aa6d8215b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/509ac9f873d8887b78813e37442448aa6d8215b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40bb78ad246919ee068382c3a2cdf6f299e412c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bb78ad246919ee068382c3a2cdf6f299e412c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40bb78ad246919ee068382c3a2cdf6f299e412c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40bb78ad246919ee068382c3a2cdf6f299e412c9/comments", "author": null, "committer": null, "parents": [{"sha": "48cf395bdb30be10a283c3ac4d6217c322f39070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48cf395bdb30be10a283c3ac4d6217c322f39070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48cf395bdb30be10a283c3ac4d6217c322f39070"}], "stats": {"total": 135, "additions": 98, "deletions": 37}, "files": [{"sha": "d41a95fcccd8b55e13d5313bfc4cc52b6f7f32bf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bb78ad246919ee068382c3a2cdf6f299e412c9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bb78ad246919ee068382c3a2cdf6f299e412c9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=40bb78ad246919ee068382c3a2cdf6f299e412c9", "patch": "@@ -1,3 +1,15 @@\n+2010-05-07  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n+\n+\tPR c++/43951\n+\t* init.c (diagnose_uninitialized_cst_or_ref_member_1): Returns the\n+\terror count. Emit errors only if compain is true.\n+\t(build_new_1): Do not return error_mark_node if\n+\tdiagnose_uninitialized_cst_or_ref_member_1 does not diagnose any\n+\terrors. Delay the check for user-provided constructor.\n+\t(perform_member_init): Adjust.\n+\t* cp-tree.h (diagnose_uninitialized_cst_or_ref_member): Change the\n+\tprototype.\n+\n 2010-05-06  Magnus Fromreide  <magfr@lysator.liu.se>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "052828945804e56cc724bf0413238cceff2bc3e1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bb78ad246919ee068382c3a2cdf6f299e412c9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bb78ad246919ee068382c3a2cdf6f299e412c9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=40bb78ad246919ee068382c3a2cdf6f299e412c9", "patch": "@@ -4857,7 +4857,7 @@ extern tree create_temporary_var\t\t(tree);\n extern void initialize_vtbl_ptrs\t\t(tree);\n extern tree build_java_class_ref\t\t(tree);\n extern tree integral_constant_value\t\t(tree);\n-extern void diagnose_uninitialized_cst_or_ref_member (tree, bool);\n+extern int diagnose_uninitialized_cst_or_ref_member (tree, bool, bool);\n \n /* in lex.c */\n extern void cxx_dup_lang_specific_decl\t\t(tree);"}, {"sha": "e45d2b882b58f70e0d22e4a8cabe5d04b4dafbe2", "filename": "gcc/cp/init.c", "status": "modified", "additions": 47, "deletions": 36, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bb78ad246919ee068382c3a2cdf6f299e412c9/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bb78ad246919ee068382c3a2cdf6f299e412c9/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=40bb78ad246919ee068382c3a2cdf6f299e412c9", "patch": "@@ -54,7 +54,7 @@ static tree dfs_initialize_vtbl_ptrs (tree, void *);\n static tree build_dtor_call (tree, special_function_kind, int);\n static tree build_field_list (tree, tree, int *);\n static tree build_vtbl_address (tree);\n-static void diagnose_uninitialized_cst_or_ref_member_1 (tree, tree, bool);\n+static int diagnose_uninitialized_cst_or_ref_member_1 (tree, tree, bool, bool);\n \n /* We are about to generate some complex initialization code.\n    Conceptually, it is all a single expression.  However, we may want\n@@ -522,7 +522,8 @@ perform_member_init (tree member, tree init)\n \t      && (CLASSTYPE_READONLY_FIELDS_NEED_INIT (core_type)\n \t\t  || CLASSTYPE_REF_FIELDS_NEED_INIT (core_type)))\n \t    diagnose_uninitialized_cst_or_ref_member (core_type,\n-\t\t\t\t\t\t      /*using_new=*/false);\n+\t\t\t\t\t\t      /*using_new=*/false,\n+\t\t\t\t\t\t      /*complain=*/true);\n \t}\n       else if (TREE_CODE (init) == TREE_LIST)\n \t/* There was an explicit member initialization.  Do some work\n@@ -1771,16 +1772,18 @@ build_raw_new_expr (VEC(tree,gc) *placement, tree type, tree nelts,\n \n /* Diagnose uninitialized const members or reference members of type\n    TYPE. USING_NEW is used to disambiguate the diagnostic between a\n-   new expression without a new-initializer and a declaration */\n+   new expression without a new-initializer and a declaration. Returns\n+   the error count. */\n \n-static void\n+static int\n diagnose_uninitialized_cst_or_ref_member_1 (tree type, tree origin,\n-\t\t\t\t\t    bool using_new)\n+\t\t\t\t\t    bool using_new, bool complain)\n {\n   tree field;\n+  int error_count = 0;\n \n   if (type_has_user_provided_constructor (type))\n-    return;\n+    return 0;\n \n   for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n     {\n@@ -1793,36 +1796,46 @@ diagnose_uninitialized_cst_or_ref_member_1 (tree type, tree origin,\n \n       if (TREE_CODE (field_type) == REFERENCE_TYPE)\n \t{\n-\t  if (using_new)\n-\t    error (\"uninitialized reference member in %q#T \"\n-\t\t   \"using %<new%> without new-initializer\", origin);\n-\t  else\n-\t    error (\"uninitialized reference member in %q#T\", origin);\n-\t  inform (DECL_SOURCE_LOCATION (field),\n-\t\t  \"%qD should be initialized\", field);\n+\t  ++ error_count;\n+\t  if (complain)\n+\t    {\n+\t      if (using_new)\n+\t\terror (\"uninitialized reference member in %q#T \"\n+\t\t       \"using %<new%> without new-initializer\", origin);\n+\t      else\n+\t\terror (\"uninitialized reference member in %q#T\", origin);\n+\t      inform (DECL_SOURCE_LOCATION (field),\n+\t\t      \"%qD should be initialized\", field);\n+\t    }\n \t}\n \n       if (CP_TYPE_CONST_P (field_type))\n \t{\n-\t  if (using_new)\n-\t    error (\"uninitialized const member in %q#T \"\n-\t\t   \"using %<new%> without new-initializer\", origin);\n-\t  else\n-\t    error (\"uninitialized const member in %q#T\", origin);\n-\t  inform (DECL_SOURCE_LOCATION (field),\n-\t\t  \"%qD should be initialized\", field);\n+\t  ++ error_count;\n+\t  if (complain)\n+\t    {\n+\t      if (using_new)\n+\t\terror (\"uninitialized const member in %q#T \"\n+\t\t       \"using %<new%> without new-initializer\", origin);\n+\t      else\n+\t\terror (\"uninitialized const member in %q#T\", origin);\n+\t      inform (DECL_SOURCE_LOCATION (field),\n+\t\t      \"%qD should be initialized\", field);\n+\t    }\n \t}\n \n       if (CLASS_TYPE_P (field_type))\n-\tdiagnose_uninitialized_cst_or_ref_member_1 (field_type,\n-\t\t\t\t\t\t    origin, using_new);\n+\terror_count\n+\t  += diagnose_uninitialized_cst_or_ref_member_1 (field_type, origin,\n+\t\t\t\t\t\t\t using_new, complain);\n     }\n+  return error_count;\n }\n \n-void\n-diagnose_uninitialized_cst_or_ref_member (tree type, bool using_new)\n+int\n+diagnose_uninitialized_cst_or_ref_member (tree type, bool using_new, bool complain)\n {\n-  diagnose_uninitialized_cst_or_ref_member_1 (type, type, using_new);\n+  return diagnose_uninitialized_cst_or_ref_member_1 (type, type, using_new, complain);\n }\n \n /* Generate code for a new-expression, including calling the \"operator\n@@ -1911,13 +1924,13 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \n   is_initialized = (TYPE_NEEDS_CONSTRUCTING (elt_type) || *init != NULL);\n \n-  if (*init == NULL && !type_has_user_provided_constructor (elt_type))\n+  if (*init == NULL)\n     {\n-      bool uninitialized_error = false;\n+      bool maybe_uninitialized_error = false;\n       /* A program that calls for default-initialization [...] of an\n \t entity of reference type is ill-formed. */\n       if (CLASSTYPE_REF_FIELDS_NEED_INIT (elt_type))\n-\tuninitialized_error = true;\n+\tmaybe_uninitialized_error = true;\n \n       /* A new-expression that creates an object of type T initializes\n \t that object as follows:\n@@ -1932,15 +1945,13 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t   const-qualified type, the program is ill-formed; */\n \n       if (CLASSTYPE_READONLY_FIELDS_NEED_INIT (elt_type))\n-\tuninitialized_error = true;\n+\tmaybe_uninitialized_error = true;\n \n-      if (uninitialized_error)\n-\t{\n-\t  if (complain & tf_error)\n-\t    diagnose_uninitialized_cst_or_ref_member (elt_type,\n-\t\t\t\t\t\t      /*using_new*/true);\n-\t  return error_mark_node;\n-\t}\n+      if (maybe_uninitialized_error\n+\t  && diagnose_uninitialized_cst_or_ref_member (elt_type,\n+\t\t\t\t\t\t       /*using_new=*/true,\n+\t\t\t\t\t\t       complain & tf_error))\n+\treturn error_mark_node;\n     }\n \n   if (CP_TYPE_CONST_P (elt_type) && *init == NULL"}, {"sha": "08da4e6965d3e192ed8db03fecc870a0db910397", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bb78ad246919ee068382c3a2cdf6f299e412c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bb78ad246919ee068382c3a2cdf6f299e412c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40bb78ad246919ee068382c3a2cdf6f299e412c9", "patch": "@@ -1,3 +1,8 @@\n+2010-05-07  Fabien Ch\u00eane  <fabien.chene@gmail.com>\n+\n+\tPR c++/43951\n+\t* g++.dg/init/new29.C: New.\n+\n 2010-05-07  Daniel Franke  <franke.daniel@gmail.com>\n \n         PR fortran/40728"}, {"sha": "1ca8ca06abffae36f73e8302426d74ff6dbc1e60", "filename": "gcc/testsuite/g++.dg/init/new29.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40bb78ad246919ee068382c3a2cdf6f299e412c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40bb78ad246919ee068382c3a2cdf6f299e412c9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew29.C?ref=40bb78ad246919ee068382c3a2cdf6f299e412c9", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/43951\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern \"C\" void abort ();\n+\n+class Foo\n+{\n+public:\n+  Foo () : xxx (1) {};\n+  const int xxx;\n+};\n+\n+struct Foo2\n+{\n+  Foo foo;\n+};\n+\n+Foo2 *\n+bar ()\n+{\n+  return new Foo2;\n+}\n+\n+int\n+main ()\n+{\n+  Foo2 *p = bar ();\n+\n+  if (p->foo.xxx != 1)\n+    abort ();\n+  return 0;\n+}"}]}