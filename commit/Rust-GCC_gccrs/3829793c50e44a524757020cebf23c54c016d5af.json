{"sha": "3829793c50e44a524757020cebf23c54c016d5af", "node_id": "C_kwDOANBUbNoAKDM4Mjk3OTNjNTBlNDRhNTI0NzU3MDIwY2ViZjIzYzU0YzAxNmQ1YWY", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-07-12T06:02:10Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-23T09:05:02Z"}, "message": "AVX512FP16: add truncmn2/extendmn2 expanders\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (extend<ssePHmodelower><mode>2):\n\tNew expander.\n\t(extendv4hf<mode>2): Likewise.\n\t(extendv2hfv2df2): Likewise.\n\t(trunc<mode><ssePHmodelower>2): Likewise.\n\t(avx512fp16_vcvt<castmode>2ph_<mode>): Rename to ...\n\t(trunc<mode>v4hf2): ... this, and drop constraints.\n\t(avx512fp16_vcvtpd2ph_v2df): Rename to ...\n\t(truncv2dfv2hf2): ... this, and likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-trunc-extendvnhf.c: New test.", "tree": {"sha": "8c94b25371414d449fa524c4bc035e6bf9efdb79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c94b25371414d449fa524c4bc035e6bf9efdb79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3829793c50e44a524757020cebf23c54c016d5af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3829793c50e44a524757020cebf23c54c016d5af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3829793c50e44a524757020cebf23c54c016d5af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3829793c50e44a524757020cebf23c54c016d5af/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25faed6f37969a72ea8257736a6821a5c3a54bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25faed6f37969a72ea8257736a6821a5c3a54bba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25faed6f37969a72ea8257736a6821a5c3a54bba"}], "stats": {"total": 130, "additions": 123, "deletions": 7}, "files": [{"sha": "a48c8e8bede2496904302b7fd65492eb24bd81b7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 68, "deletions": 7, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3829793c50e44a524757020cebf23c54c016d5af/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3829793c50e44a524757020cebf23c54c016d5af/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3829793c50e44a524757020cebf23c54c016d5af", "patch": "@@ -6328,6 +6328,12 @@\n   [(V16SF \"x\") (V8SF \"x\") (V4SF \"x\")\n    (V8DF \"\") (V4DF \"\") (V2DF \"\")])\n \n+(define_expand \"extend<ssePHmodelower><mode>2\"\n+  [(set (match_operand:VF48H_AVX512VL 0 \"register_operand\")\n+\t(float_extend:VF48H_AVX512VL\n+\t  (match_operand:<ssePHmode> 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16\")\n+\n (define_insn \"avx512fp16_float_extend_ph<mode>2<mask_name><round_saeonly_name>\"\n   [(set (match_operand:VF48H_AVX512VL 0 \"register_operand\" \"=v\")\n \t(float_extend:VF48H_AVX512VL\n@@ -6338,6 +6344,21 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"extendv4hf<mode>2\"\n+  [(set (match_operand:VF4_128_8_256 0 \"register_operand\")\n+\t(float_extend:VF4_128_8_256\n+\t  (match_operand:V4HF 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = lowpart_subreg (V8HFmode, operands[1], V4HFmode);\n+      emit_insn (gen_avx512fp16_float_extend_ph<mode>2\n+\t\t (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"avx512fp16_float_extend_ph<mode>2<mask_name>\"\n   [(set (match_operand:VF4_128_8_256 0 \"register_operand\" \"=v\")\n \t(float_extend:VF4_128_8_256\n@@ -6360,6 +6381,21 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_expand \"extendv2hfv2df2\"\n+  [(set (match_operand:V2DF 0 \"register_operand\")\n+\t(float_extend:V2DF\n+\t  (match_operand:V2HF 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+{\n+  if (!MEM_P (operands[1]))\n+    {\n+      operands[1] = lowpart_subreg (V8HFmode, operands[1], V2HFmode);\n+      emit_insn (gen_avx512fp16_float_extend_phv2df2\n+\t\t (operands[0], operands[1]));\n+      DONE;\n+    }\n+})\n+\n (define_insn \"avx512fp16_float_extend_phv2df2<mask_name>\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=v\")\n \t(float_extend:V2DF\n@@ -6382,6 +6418,12 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_expand \"trunc<mode><ssePHmodelower>2\"\n+  [(set (match_operand:<ssePHmode> 0 \"register_operand\")\n+\t(float_truncate:<ssePHmode>\n+\t  (match_operand:VF48H_AVX512VL 1 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16\")\n+\n (define_insn \"avx512fp16_vcvt<castmode>2ph_<mode><mask_name><round_name>\"\n   [(set (match_operand:<ssePHmode> 0 \"register_operand\" \"=v\")\n \t(float_truncate:<ssePHmode>\n@@ -6392,11 +6434,21 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"avx512fp16_vcvt<castmode>2ph_<mode>\"\n-  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+(define_expand \"trunc<mode>v4hf2\"\n+  [(set (match_operand:V4HF 0 \"register_operand\")\n+\t(float_truncate:V4HF (match_operand:VF4_128_8_256 1 \"vector_operand\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+{\n+  operands[0] = lowpart_subreg (V8HFmode, operands[0], V4HFmode);\n+  emit_insn (gen_avx512fp16_trunc<mode>v4hf2 (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"avx512fp16_trunc<mode>v4hf2\"\n+  [(set (match_operand:V8HF 0 \"register_operand\")\n \t(vec_concat:V8HF\n \t    (float_truncate:V4HF\n-\t      (match_operand:VF4_128_8_256 1 \"vector_operand\" \"vm\"))\n+\t      (match_operand:VF4_128_8_256 1 \"vector_operand\"))\n \t    (match_dup 2)))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"operands[2] = CONST0_RTX (V4HFmode);\")\n@@ -6461,11 +6513,20 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"avx512fp16_vcvtpd2ph_v2df\"\n-  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+(define_expand \"truncv2dfv2hf2\"\n+  [(set (match_operand:V2HF 0 \"register_operand\")\n+\t(float_truncate:V2HF (match_operand:V2DF 1 \"vector_operand\")))]\n+  \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n+{\n+  operands[0] = lowpart_subreg (V8HFmode, operands[0], V2HFmode);\n+  emit_insn (gen_avx512fp16_truncv2dfv2hf2 (operands[0], operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"avx512fp16_truncv2dfv2hf2\"\n+  [(set (match_operand:V8HF 0 \"register_operand\")\n \t(vec_concat:V8HF\n-\t  (float_truncate:V2HF\n-\t    (match_operand:V2DF 1 \"vector_operand\" \"vm\"))\n+\t  (float_truncate:V2HF (match_operand:V2DF 1 \"vector_operand\"))\n \t  (match_dup 2)))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"operands[2] = CONST0_RTX (V6HFmode);\")"}, {"sha": "286ea9f2624ad90b4924eaee6adab163a2fcc1fc", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-trunc-extendvnhf.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3829793c50e44a524757020cebf23c54c016d5af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-trunc-extendvnhf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3829793c50e44a524757020cebf23c54c016d5af/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-trunc-extendvnhf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-trunc-extendvnhf.c?ref=3829793c50e44a524757020cebf23c54c016d5af", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512vl -ftree-slp-vectorize -mprefer-vector-width=512\" } */\n+\n+extern double df[8];\n+extern float sf[16];\n+extern _Float16 hf[32];\n+\n+#define DO_PRAGMA(X) _Pragma(#X)\n+\n+#define TRUNCHFVV(size, mode)\t    \\\n+  void __attribute__ ((noinline, noclone))  \\\n+truncv##size##mode##v##size##hf ()   \\\n+{\\\n+  int i;  \\\n+  DO_PRAGMA (GCC unroll size)\t\\\n+  for (i = 0; i < size; i++)  \\\n+    hf[i] = mode[i];  \\\n+}\n+\n+#define EXTENDHFVV(size, mode)\t    \\\n+  void __attribute__ ((noinline, noclone))  \\\n+extendv##size##hf##v##size##mode ()   \\\n+{\\\n+  int i;  \\\n+  DO_PRAGMA (GCC unroll size)\t\\\n+  for (i = 0; i < size; i++)  \\\n+    mode[i] = hf[i];  \\\n+}\n+\n+TRUNCHFVV(8, df)\n+TRUNCHFVV(4, df)\n+TRUNCHFVV(2, df)\n+TRUNCHFVV(16, sf)\n+TRUNCHFVV(8, sf)\n+TRUNCHFVV(4, sf)\n+EXTENDHFVV(8, df)\n+EXTENDHFVV(4, df)\n+EXTENDHFVV(2, df)\n+EXTENDHFVV(16, sf)\n+EXTENDHFVV(8, sf)\n+EXTENDHFVV(4, sf)\n+\n+/* { dg-final { scan-assembler-times \"vcvtpd2phz\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtpd2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phxy\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtps2phxx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2pd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtph2psx\\[ \\\\t\\]+\\[^\\{\\n\\]*\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 { xfail *-*-* } } } */\n+"}]}