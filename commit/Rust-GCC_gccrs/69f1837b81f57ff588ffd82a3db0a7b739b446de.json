{"sha": "69f1837b81f57ff588ffd82a3db0a7b739b446de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlmMTgzN2I4MWY1N2ZmNTg4ZmZkODJhM2RiMGE3YjczOWI0NDZkZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-07-02T19:22:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-07-02T19:22:47Z"}, "message": "re PR libgomp/32468 (number of threads in a parallel region depends on number of SECTIONs and MAX_THREADS)\n\n\tPR libgomp/32468\n\t* omp-low.c (check_combined_parallel): New function.\n\t(lower_omp_parallel): Call it via walk_stmts, set\n\tOMP_PARALLEL_COMBINED if appropriate.\n\t(determine_parallel_type): If OMP_FOR resp. OMP_SECTIONS\n\tisn't the only statement in WS_ENTRY_BB or OMP_RETURN\n\tthe only one in PAR_EXIT_BB and not OMP_PARALLEL_COMBINED,\n\tdon't consider it as combined parallel.\n\n\t* gcc.dg/gomp/pr32468-1.c: New test.\n\nFrom-SVN: r126226", "tree": {"sha": "e8a300b94b510ed658c3b719e55917d2e3346017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8a300b94b510ed658c3b719e55917d2e3346017"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69f1837b81f57ff588ffd82a3db0a7b739b446de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f1837b81f57ff588ffd82a3db0a7b739b446de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f1837b81f57ff588ffd82a3db0a7b739b446de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f1837b81f57ff588ffd82a3db0a7b739b446de/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15c723f39fb55da9ee0f288ecac2c178b68b2a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c723f39fb55da9ee0f288ecac2c178b68b2a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c723f39fb55da9ee0f288ecac2c178b68b2a3c"}], "stats": {"total": 158, "additions": 156, "deletions": 2}, "files": [{"sha": "164af0368be006978c7dee39b0d218466bf5f42a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f1837b81f57ff588ffd82a3db0a7b739b446de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f1837b81f57ff588ffd82a3db0a7b739b446de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69f1837b81f57ff588ffd82a3db0a7b739b446de", "patch": "@@ -1,3 +1,14 @@\n+2007-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/32468\n+\t* omp-low.c (check_combined_parallel): New function.\n+\t(lower_omp_parallel): Call it via walk_stmts, set\n+\tOMP_PARALLEL_COMBINED if appropriate.\n+\t(determine_parallel_type): If OMP_FOR resp. OMP_SECTIONS\n+\tisn't the only statement in WS_ENTRY_BB or OMP_RETURN\n+\tthe only one in PAR_EXIT_BB and not OMP_PARALLEL_COMBINED,\n+\tdon't consider it as combined parallel.\n+\n 2007-07-02  Richard Sandiford  <richard@codesourcery.com>\n \n \t* configure.ac (gcc_gxx_include_dir): Use $(libsubdir_to_prefix)."}, {"sha": "fce9975946f82c7c65024a6a58bb23daab25d35d", "filename": "gcc/omp-low.c", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f1837b81f57ff588ffd82a3db0a7b739b446de/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f1837b81f57ff588ffd82a3db0a7b739b446de/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=69f1837b81f57ff588ffd82a3db0a7b739b446de", "patch": "@@ -385,9 +385,12 @@ determine_parallel_type (struct omp_region *region)\n \n   if (single_succ (par_entry_bb) == ws_entry_bb\n       && single_succ (ws_exit_bb) == par_exit_bb\n-      && workshare_safe_to_combine_p (par_entry_bb, ws_entry_bb))\n+      && workshare_safe_to_combine_p (par_entry_bb, ws_entry_bb)\n+      && (OMP_PARALLEL_COMBINED (last_stmt (par_entry_bb))\n+\t  || (last_and_only_stmt (ws_entry_bb)\n+\t      && last_and_only_stmt (par_exit_bb))))\n     {\n-      tree ws_stmt = last_stmt (region->inner->entry);\n+      tree ws_stmt = last_stmt (ws_entry_bb);\n \n       if (region->inner->type == OMP_FOR)\n \t{\n@@ -4060,6 +4063,28 @@ lower_omp_for (tree *stmt_p, omp_context *ctx)\n   *stmt_p = new_stmt;\n }\n \n+/* Callback for walk_stmts.  Check if *TP only contains OMP_FOR\n+   or OMP_PARALLEL.  */\n+\n+static tree\n+check_combined_parallel (tree *tp, int *walk_subtrees, void *data)\n+{\n+  struct walk_stmt_info *wi = data;\n+  int *info = wi->info;\n+\n+  *walk_subtrees = 0;\n+  switch (TREE_CODE (*tp))\n+    {\n+    case OMP_FOR:\n+    case OMP_SECTIONS:\n+      *info = *info == 0 ? 1 : -1;\n+      break;\n+    default:\n+      *info = -1;\n+      break;\n+    }\n+  return NULL;\n+}\n \n /* Lower the OpenMP parallel directive in *STMT_P.  CTX holds context\n    information for the directive.  */\n@@ -4077,6 +4102,19 @@ lower_omp_parallel (tree *stmt_p, omp_context *ctx)\n   par_bind = OMP_PARALLEL_BODY (stmt);\n   par_body = BIND_EXPR_BODY (par_bind);\n   child_fn = ctx->cb.dst_fn;\n+  if (!OMP_PARALLEL_COMBINED (stmt))\n+    {\n+      struct walk_stmt_info wi;\n+      int ws_num = 0;\n+\n+      memset (&wi, 0, sizeof (wi));\n+      wi.callback = check_combined_parallel;\n+      wi.info = &ws_num;\n+      wi.val_only = true;\n+      walk_stmts (&wi, &par_bind);\n+      if (ws_num == 1)\n+\tOMP_PARALLEL_COMBINED (stmt) = 1;\n+    }\n \n   push_gimplify_context ();\n "}, {"sha": "f09c09ef3fa735da89bc71b8dda9ad1086f30fb7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f1837b81f57ff588ffd82a3db0a7b739b446de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f1837b81f57ff588ffd82a3db0a7b739b446de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69f1837b81f57ff588ffd82a3db0a7b739b446de", "patch": "@@ -1,3 +1,8 @@\n+2007-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/32468\n+\t* gcc.dg/gomp/pr32468-1.c: New test.\n+\n 2007-07-02  Richard Sandiford  <richard@codesourcery.com>\n \n \t* gcc.target/mips/mips.exp (setup_mips_tests): Treat -mfp* as"}, {"sha": "43724135720e97c153e9995c4bd95f931c73aa5f", "filename": "gcc/testsuite/gcc.dg/gomp/pr32468-1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69f1837b81f57ff588ffd82a3db0a7b739b446de/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr32468-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69f1837b81f57ff588ffd82a3db0a7b739b446de/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr32468-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr32468-1.c?ref=69f1837b81f57ff588ffd82a3db0a7b739b446de", "patch": "@@ -0,0 +1,100 @@\n+/* PR libgomp/32468 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fdump-tree-ompexp\" } */\n+\n+extern int printf (const char *, ...);\n+extern int omp_get_thread_num (void), omp_get_num_threads (void);\n+extern int bar (void);\n+extern int baz (const char *, ...);\n+\n+void\n+f1 (void)\n+{\n+#pragma omp parallel\n+  {\n+    baz (\"%d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+    #pragma omp sections\n+      {\n+\t#pragma omp section\n+\tprintf (\"section1 %d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+\t#pragma omp section\n+\tprintf (\"section2 %d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+      }\n+  }\n+}\n+\n+void\n+f2 (void)\n+{\n+#pragma omp parallel\n+  {\n+    #pragma omp sections\n+      {\n+\t#pragma omp section\n+\tprintf (\"section1 %d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+\t#pragma omp section\n+\tprintf (\"section2 %d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+      }\n+    baz (\"%d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+  }\n+}\n+\n+void\n+f3 (void)\n+{\n+#pragma omp parallel\n+  {\n+    int bb = bar ();\n+    #pragma omp sections\n+      {\n+\t#pragma omp section\n+\tprintf (\"section1 %d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+\t#pragma omp section\n+\tprintf (\"section2 %d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+      }\n+  }\n+}\n+\n+void\n+f4 (void)\n+{\n+  int i;\n+#pragma omp parallel\n+  {\n+    baz (\"%d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+    #pragma omp for schedule (dynamic, 15)\n+    for (i = 0; i < 10000; i++)\n+      printf (\"section1 %d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+  }\n+}\n+\n+void\n+f5 (void)\n+{\n+  int i;\n+#pragma omp parallel\n+  {\n+    #pragma omp for schedule (dynamic, 15)\n+    for (i = 0; i < 10000; i++)\n+      printf (\"section1 %d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+    baz (\"%d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+  }\n+}\n+\n+void\n+f6 (void)\n+{\n+  int i;\n+#pragma omp parallel\n+  {\n+    int bb = bar ();\n+    #pragma omp for schedule (runtime)\n+    for (i = 0; i < 10000; i++)\n+      printf (\"section1 %d/%d\\n\", omp_get_thread_num (), omp_get_num_threads ());\n+  }\n+}\n+\n+/* There should not be a GOMP_parallel_{loop,sections}* call.  */\n+/* { dg-final { scan-tree-dump-times \"GOMP_parallel_loop\" 0 \"ompexp\"} } */\n+/* { dg-final { scan-tree-dump-times \"GOMP_parallel_sections\" 0 \"ompexp\"} } */\n+/* { dg-final { cleanup-tree-dump \"ompexp\" } } */"}]}