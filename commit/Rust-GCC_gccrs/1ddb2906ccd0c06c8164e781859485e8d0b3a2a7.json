{"sha": "1ddb2906ccd0c06c8164e781859485e8d0b3a2a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRkYjI5MDZjY2QwYzA2YzgxNjRlNzgxODU5NDg1ZThkMGIzYTJhNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-17T20:33:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-17T20:33:45Z"}, "message": "Warning fixes:\n\n        * class.c (make_method_vec): Cast 1st argument of `bzero' to (PTR).\n        (add_method): Likewise for arguments 1 & 2 of `bcopy'.\n        * decl.c (signal_catch): Mark with ATTRIBUTE_NORETURN.\n        * pt.c (process_partial_specialization): Cast 1st argument of\n        `bzero' to (PTR).\n        * tree.c (build_base_fields): Cast `base_align' to (int) when\n        comparing against one.\n\nFrom-SVN: r23156", "tree": {"sha": "70a8dca684e92d634e8db0c480d175094e68c981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70a8dca684e92d634e8db0c480d175094e68c981"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/comments", "author": null, "committer": null, "parents": [{"sha": "79c9824ecb18f39f16051032db4be0b9bcf87cf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79c9824ecb18f39f16051032db4be0b9bcf87cf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79c9824ecb18f39f16051032db4be0b9bcf87cf1"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "5dabdf8f824a2a6984390dde51fa88da3ec9a905", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1ddb2906ccd0c06c8164e781859485e8d0b3a2a7", "patch": "@@ -1,3 +1,16 @@\n+Sat Oct 17 23:27:20 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (make_method_vec): Cast 1st argument of `bzero' to (PTR).\n+\t(add_method): Likewise for arguments 1 & 2 of `bcopy'.\n+\t\n+\t* decl.c (signal_catch): Mark with ATTRIBUTE_NORETURN.\n+\n+\t* pt.c (process_partial_specialization): Cast 1st argument of\n+\t`bzero' to (PTR).\n+\n+\t* tree.c (build_base_fields): Cast `base_align' to (int) when\n+\tcomparing against one.\n+\n 1998-10-16  Mark Mitchell  <mark@markmitchell.com>\n \n \t* decl.c (lookup_name_real): Handle template parameters for member"}, {"sha": "785279cbc9dd611fde75135c71964c2960a5d646", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1ddb2906ccd0c06c8164e781859485e8d0b3a2a7", "patch": "@@ -1091,7 +1091,7 @@ make_method_vec (n)\n \tnew_vec = *t;\n \t*t = TREE_CHAIN (new_vec);\n \tTREE_CHAIN (new_vec) = NULL_TREE;\n-\tbzero (&TREE_VEC_ELT (new_vec, 0), n * sizeof (tree));\n+\tbzero ((PTR) &TREE_VEC_ELT (new_vec, 0), n * sizeof (tree));\n \treturn new_vec;\n       }\n \n@@ -1175,8 +1175,8 @@ add_method (type, fields, method)\n \t    {\n \t      /* We need a bigger method vector.  */\n \t      tree new_vec = make_method_vec (2 * len);\n-\t      bcopy (&TREE_VEC_ELT (method_vec, 0),\n-\t\t     &TREE_VEC_ELT (new_vec, 0),\n+\t      bcopy ((PTR) &TREE_VEC_ELT (method_vec, 0),\n+\t\t     (PTR) &TREE_VEC_ELT (new_vec, 0),\n \t\t     len * sizeof (tree));\n \t      free_method_vec (method_vec);\n \t      len = 2 * len;\n@@ -1263,8 +1263,8 @@ add_method (type, fields, method)\n \t\t  /* We know the last slot in the vector is empty\n \t\t     because we know that at this point there's room for\n \t\t     a new function.  */\n-\t\t  bcopy (&TREE_VEC_ELT (method_vec, i),\n-\t\t\t &TREE_VEC_ELT (method_vec, i + 1),\n+\t\t  bcopy ((PTR) &TREE_VEC_ELT (method_vec, i),\n+\t\t\t (PTR) &TREE_VEC_ELT (method_vec, i + 1),\n \t\t\t (len - i - 1) * sizeof (tree));\n \t\t  TREE_VEC_ELT (method_vec, i) = NULL_TREE;\n \t\t}"}, {"sha": "42cd6ba8beaec7f30cae94f139f9e97debdb5943", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1ddb2906ccd0c06c8164e781859485e8d0b3a2a7", "patch": "@@ -146,7 +146,7 @@ static void resume_binding_level PROTO((struct binding_level *));\n static struct binding_level *make_binding_level PROTO((void));\n static int namespace_bindings_p PROTO((void));\n static void declare_namespace_level PROTO((void));\n-static void signal_catch PROTO((int));\n+static void signal_catch PROTO((int)) ATTRIBUTE_NORETURN;\n static void storedecls PROTO((tree));\n static void storetags PROTO((tree));\n static void require_complete_types_for_parms PROTO((tree));"}, {"sha": "cf1ca8c2419b4c5e97eca744be43ff7a86f3a689", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1ddb2906ccd0c06c8164e781859485e8d0b3a2a7", "patch": "@@ -1907,10 +1907,10 @@ process_partial_specialization (decl)\n      or some such would have been OK.  */\n   tpd.level = TMPL_PARMS_DEPTH (current_template_parms);\n   tpd.parms = alloca (sizeof (int) * ntparms);\n-  bzero (tpd.parms, sizeof (int) * ntparms);\n+  bzero ((PTR) tpd.parms, sizeof (int) * ntparms);\n \n   tpd.arg_uses_template_parms = alloca (sizeof (int) * nargs);\n-  bzero (tpd.arg_uses_template_parms, sizeof (int) * nargs);\n+  bzero ((PTR) tpd.arg_uses_template_parms, sizeof (int) * nargs);\n   for (i = 0; i < nargs; ++i)\n     {\n       tpd.current_arg = i;\n@@ -1993,7 +1993,7 @@ process_partial_specialization (decl)\n \t\t template, not in the specialization.  */\n \t      tpd2.current_arg = i;\n \t      tpd2.arg_uses_template_parms[i] = 0;\n-\t      bzero (tpd2.parms, sizeof (int) * nargs);\n+\t      bzero ((PTR) tpd2.parms, sizeof (int) * nargs);\n \t      for_each_template_parm (type,\n \t\t\t\t      &mark_template_parm,\n \t\t\t\t      &tpd2);"}, {"sha": "9aa094d0f0a4f6d3f6ca1880aacc3039c704119f", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ddb2906ccd0c06c8164e781859485e8d0b3a2a7/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=1ddb2906ccd0c06c8164e781859485e8d0b3a2a7", "patch": "@@ -806,7 +806,7 @@ build_base_fields (rec)\n \t  base_align = MAX (base_align, DECL_ALIGN (decl));\n \t  DECL_SIZE (decl)\n \t    = size_int (MAX (TREE_INT_CST_LOW (DECL_SIZE (decl)),\n-\t\t\t     base_align));\n+\t\t\t     (int) base_align));\n \t}\n       else if (DECL_SIZE (decl) == integer_zero_node)\n \tsaw_empty = 1;"}]}