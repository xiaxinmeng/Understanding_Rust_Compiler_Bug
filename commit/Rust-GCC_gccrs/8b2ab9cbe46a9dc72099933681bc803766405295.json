{"sha": "8b2ab9cbe46a9dc72099933681bc803766405295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIyYWI5Y2JlNDZhOWRjNzIwOTk5MzM2ODFiYzgwMzc2NjQwNTI5NQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2012-09-11T12:53:00Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2012-09-11T12:53:00Z"}, "message": "Add support for vectorized fma.\n\n\n\n\n2012-09-11  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\t    Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n\n\t* config/arm/neon.md (fma<VCVTF:mode>4): New pattern.\n\t(*fmsub<VCVTF:mode>4): Likewise.\n\t* doc/sourcebuild.texi (arm_neon_v2_ok, arm_neon_v2_hw):  Document it.\n\n2012-09-11  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\t    Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n\n\t* gcc.target/arm/neon-vfma-1.c: New testcase.\n\t* gcc.target/arm/neon-vfms-1.c: Likewise.\n\t* gcc.target/arm/neon-vmla-1.c: Update test to use int instead\n\tof float.\n\t* gcc.target/arm/neon-vmls-1.c: Likewise.\n\t* lib/target-supports.exp (add_options_for_arm_neonv2): New\n\tfunction.\n\t(check_effective_target_arm_neonv2_ok_nocache): Likewise.\n\t(check_effective_target_arm_neonv2_ok): Likewise.\n\t(check_effective_target_arm_neonv2_hw): Likewise.\n\t(check_effective_target_arm_neonv2): Likewise.\n\n\nCo-Authored-By: Matthew Gretton-Dann <matthew.gretton-dann@arm.com>\n\nFrom-SVN: r191180", "tree": {"sha": "90a905f2cc453fc2bf792384765f4e66c36977bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90a905f2cc453fc2bf792384765f4e66c36977bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b2ab9cbe46a9dc72099933681bc803766405295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2ab9cbe46a9dc72099933681bc803766405295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b2ab9cbe46a9dc72099933681bc803766405295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b2ab9cbe46a9dc72099933681bc803766405295/comments", "author": null, "committer": null, "parents": [{"sha": "e0a6637cbdc4fa4a0ce37e2bce10dc7932a1c5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a6637cbdc4fa4a0ce37e2bce10dc7932a1c5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a6637cbdc4fa4a0ce37e2bce10dc7932a1c5e8"}], "stats": {"total": 167, "additions": 163, "deletions": 4}, "files": [{"sha": "e65785a9e3121f70c3b4d5c2101fbd7e05e38fe2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b2ab9cbe46a9dc72099933681bc803766405295", "patch": "@@ -1,3 +1,10 @@\n+2012-09-11  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+            Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\n+       * config/arm/neon.md (fma<VCVTF:mode>4): New pattern.\n+       (*fmsub<VCVTF:mode>4): Likewise.\n+       * doc/sourcebuild.texi (arm_neon_v2_ok, arm_neon_v2_hw):  Document it.\n+\n 2012-09-11  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/54149"}, {"sha": "fe0618c225858624d697c981f655bfe776a6a9b0", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=8b2ab9cbe46a9dc72099933681bc803766405295", "patch": "@@ -707,6 +707,33 @@\n                                     (const_string \"neon_mla_qqq_32_qqd_32_scalar\")))))]\n )\n \n+;; Fused multiply-accumulate\n+(define_insn \"fma<VCVTF:mode>4\"\n+  [(set (match_operand:VCVTF 0 \"register_operand\" \"=w\")\n+        (fma:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"w\")\n+\t\t (match_operand:VCVTF 2 \"register_operand\" \"w\")\n+\t\t (match_operand:VCVTF 3 \"register_operand\" \"0\")))]\n+  \"TARGET_NEON && TARGET_FMA && flag_unsafe_math_optimizations\"\n+  \"vfma%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set (attr \"neon_type\")\n+\t(if_then_else (match_test \"<Is_d_reg>\")\n+\t\t      (const_string \"neon_fp_vmla_ddd\")\n+\t\t      (const_string \"neon_fp_vmla_qqq\")))]\n+)\n+\n+(define_insn \"*fmsub<VCVTF:mode>4\"\n+  [(set (match_operand:VCVTF 0 \"register_operand\" \"=w\")\n+        (fma:VCVTF (neg:VCVTF (match_operand:VCVTF 1 \"register_operand\" \"w\"))\n+\t\t   (match_operand:VCVTF 2 \"register_operand\" \"w\")\n+\t\t   (match_operand:VCVTF 3 \"register_operand\" \"0\")))]\n+  \"TARGET_NEON && TARGET_FMA && flag_unsafe_math_optimizations\"\n+  \"vfms%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set (attr \"neon_type\")\n+\t(if_then_else (match_test \"<Is_d_reg>\")\n+\t\t      (const_string \"neon_fp_vmla_ddd\")\n+\t\t      (const_string \"neon_fp_vmla_qqq\")))]\n+)\n+\n (define_insn \"ior<mode>3\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w,w\")\n \t(ior:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w,0\")"}, {"sha": "3fe52ad2356448dd16d5315164356f511759f238", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=8b2ab9cbe46a9dc72099933681bc803766405295", "patch": "@@ -1525,11 +1525,19 @@ ARM target supports generating NEON instructions.\n @item arm_neon_hw\n Test system supports executing NEON instructions.\n \n+@item arm_neonv2_hw\n+Test system supports executing NEON v2 instructions.\n+\n @item arm_neon_ok\n @anchor{arm_neon_ok}\n ARM Target supports @code{-mfpu=neon -mfloat-abi=softfp} or compatible\n options.  Some multilibs may be incompatible with these options.\n \n+@item arm_neonv2_ok\n+@anchor{arm_neon_ok}\n+ARM Target supports @code{-mfpu=neon -mfloat-abi=softfp} or compatible\n+options.  Some multilibs may be incompatible with these options.\n+\n @item arm_neon_fp16_ok\n @anchor{arm_neon_fp16_ok}\n ARM Target supports @code{-mfpu=neon-fp16 -mfloat-abi=softfp} or compatible"}, {"sha": "47def6320280526c7cade82d32d952e7673eb48d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b2ab9cbe46a9dc72099933681bc803766405295", "patch": "@@ -1,3 +1,18 @@\n+2012-09-11  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+           Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\n+       * gcc.target/arm/neon-vfma-1.c: New testcase.\n+       * gcc.target/arm/neon-vfms-1.c: Likewise.\n+       * gcc.target/arm/neon-vmla-1.c: Update test to use int instead\n+       of float.\n+       * gcc.target/arm/neon-vmls-1.c: Likewise.\n+       * lib/target-supports.exp (add_options_for_arm_neonv2): New\n+       function.\n+       (check_effective_target_arm_neonv2_ok_nocache): Likewise.\n+       (check_effective_target_arm_neonv2_ok): Likewise.\n+       (check_effective_target_arm_neonv2_hw): Likewise.\n+       (check_effective_target_arm_neonv2): Likewise.\n+\n 2012-09-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/54515"}, {"sha": "a003a8274f617d271dca143f65b0e7c612f04f65", "filename": "gcc/testsuite/gcc.target/arm/neon-vfma-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vfma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vfma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vfma-1.c?ref=8b2ab9cbe46a9dc72099933681bc803766405295", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neonv2_ok } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-add-options arm_neonv2 } */\n+/* { dg-final { scan-assembler \"vfma\\\\.f32\\[\t\\]+\\[dDqQ]\" } } */\n+\n+/* Verify that VFMA is used.  */\n+void f1(int n, float a, float x[], float y[]) {\n+  int i;\n+  for (i = 0; i < n; ++i)\n+    y[i] = a * x[i] + y[i];\n+}"}, {"sha": "8cefd8a851ce25694c95e195c0c7f1dce7e92f8c", "filename": "gcc/testsuite/gcc.target/arm/neon-vfms-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vfms-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vfms-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vfms-1.c?ref=8b2ab9cbe46a9dc72099933681bc803766405295", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neonv2_ok } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-add-options arm_neonv2 } */\n+/* { dg-final { scan-assembler \"vfms\\\\.f32\\[\t\\]+\\[dDqQ]\" } } */\n+\n+/* Verify that VFMS is used.  */\n+void f1(int n, float a, float x[], float y[]) {\n+  int i;\n+  for (i = 0; i < n; ++i)\n+    y[i] = a * -x[i] + y[i];\n+}"}, {"sha": "c60c014e0c2fd3dee903a56f5af3029bb329e546", "filename": "gcc/testsuite/gcc.target/arm/neon-vmla-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmla-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmla-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmla-1.c?ref=8b2ab9cbe46a9dc72099933681bc803766405295", "patch": "@@ -1,10 +1,10 @@\n /* { dg-require-effective-target arm_neon_hw } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n /* { dg-add-options arm_neon } */\n-/* { dg-final { scan-assembler \"vmla\\\\.f32\" } } */\n+/* { dg-final { scan-assembler \"vmla\\\\.i32\" } } */\n \n /* Verify that VMLA is used.  */\n-void f1(int n, float a, float x[], float y[]) {\n+void f1(int n, int a, int x[], int y[]) {\n   int i;\n   for (i = 0; i < n; ++i)\n     y[i] = a * x[i] + y[i];"}, {"sha": "89ee82b0fe81093722bbefd7fa1d410cceeb0ee1", "filename": "gcc/testsuite/gcc.target/arm/neon-vmls-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmls-1.c?ref=8b2ab9cbe46a9dc72099933681bc803766405295", "patch": "@@ -1,10 +1,10 @@\n /* { dg-require-effective-target arm_neon_hw } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n /* { dg-add-options arm_neon } */\n-/* { dg-final { scan-assembler \"vmls\\\\.f32\" } } */\n+/* { dg-final { scan-assembler \"vmls\\\\.i32\" } } */\n \n /* Verify that VMLS is used.  */\n-void f1(int n, float a, float x[], float y[]) {\n+void f1(int n, int a, int x[], int y[]) {\n   int i;\n   for (i = 0; i < n; ++i)\n     y[i] = y[i] - a * x[i];"}, {"sha": "8f793b7e50995b45d3ae5ef4d232afca159980af", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b2ab9cbe46a9dc72099933681bc803766405295/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8b2ab9cbe46a9dc72099933681bc803766405295", "patch": "@@ -2099,6 +2099,19 @@ proc add_options_for_arm_neon { flags } {\n     return \"$flags $et_arm_neon_flags\"\n }\n \n+# Add the options needed for NEON.  We need either -mfloat-abi=softfp\n+# or -mfloat-abi=hard, but if one is already specified by the\n+# multilib, use it.  Similarly, if a -mfpu option already enables\n+# NEON, do not add -mfpu=neon.\n+\n+proc add_options_for_arm_neonv2 { flags } {\n+    if { ! [check_effective_target_arm_neonv2_ok] } {\n+\treturn \"$flags\"\n+    }\n+    global et_arm_neonv2_flags\n+    return \"$flags $et_arm_neonv2_flags\"\n+}\n+\n # Return 1 if this is an ARM target supporting -mfpu=neon\n # -mfloat-abi=softfp or equivalent options.  Some multilibs may be\n # incompatible with these options.  Also set et_arm_neon_flags to the\n@@ -2127,6 +2140,38 @@ proc check_effective_target_arm_neon_ok { } {\n \t\tcheck_effective_target_arm_neon_ok_nocache]\n }\n \n+# Return 1 if this is an ARM target supporting -mfpu=neon-vfpv4\n+# -mfloat-abi=softfp or equivalent options.  Some multilibs may be\n+# incompatible with these options.  Also set et_arm_neonv2_flags to the\n+# best options to add.\n+\n+proc check_effective_target_arm_neonv2_ok_nocache { } {\n+    global et_arm_neonv2_flags\n+    set et_arm_neonv2_flags \"\"\n+    if { [check_effective_target_arm32] } {\n+\tforeach flags {\"\" \"-mfloat-abi=softfp\" \"-mfpu=neon-vfpv4\" \"-mfpu=neon-vfpv4 -mfloat-abi=softfp\"} {\n+\t    if { [check_no_compiler_messages_nocache arm_neonv2_ok object {\n+\t\t#include \"arm_neon.h\"\n+\t\tfloat32x2_t \n+\t\tfoo (float32x2_t a, float32x2_t b, float32x2_t c)\n+                {\n+                  return vfma_f32 (a, b, c);\n+                }\n+\t    } \"$flags\"] } {\n+\t\tset et_arm_neonv2_flags $flags\n+\t\treturn 1\n+\t    }\n+\t}\n+    }\n+\n+    return 0\n+}\n+\n+proc check_effective_target_arm_neonv2_ok { } {\n+    return [check_cached_effective_target arm_neonv2_ok \\\n+\t\tcheck_effective_target_arm_neonv2_ok_nocache]\n+}\n+\n # Add the options needed for NEON.  We need either -mfloat-abi=softfp\n # or -mfloat-abi=hard, but if one is already specified by the\n # multilib, use it.\n@@ -2318,6 +2363,21 @@ proc check_effective_target_arm_neon_hw { } {\n     } [add_options_for_arm_neon \"\"]]\n }\n \n+proc check_effective_target_arm_neonv2_hw { } {\n+    return [check_runtime arm_neon_hwv2_available {\n+\t#include \"arm_neon.h\"\n+\tint\n+\tmain (void)\n+\t{\n+\t  float32x2_t a, b, c;\n+\t  asm (\"vfma.f32 %P0, %P1, %P2\"\n+\t       : \"=w\" (a)\n+\t       : \"w\" (b), \"w\" (c));\n+\t  return 0;\n+\t}\n+    } [add_options_for_arm_neonv2 \"\"]]\n+}\n+\n # Return 1 if this is a ARM target with NEON enabled.\n \n proc check_effective_target_arm_neon { } {\n@@ -2334,6 +2394,24 @@ proc check_effective_target_arm_neon { } {\n     }\n }\n \n+proc check_effective_target_arm_neonv2 { } {\n+    if { [check_effective_target_arm32] } {\n+\treturn [check_no_compiler_messages arm_neon object {\n+\t    #ifndef __ARM_NEON__\n+\t    #error not NEON\n+\t    #else\n+\t    #ifndef __ARM_FEATURE_FMA\n+\t    #error not NEONv2\n+            #else\n+\t    int dummy;\n+\t    #endif\n+\t    #endif\n+\t}]\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n # Return 1 if this a Loongson-2E or -2F target using an ABI that supports\n # the Loongson vector modes.\n "}]}