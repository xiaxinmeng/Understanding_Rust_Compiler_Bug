{"sha": "ec0d53719f24e994706ff661ffef6cf358974554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMwZDUzNzE5ZjI0ZTk5NDcwNmZmNjYxZmZlZjZjZjM1ODk3NDU1NA==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@redhat.com", "date": "2019-01-16T08:01:22Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2019-01-16T08:01:22Z"}, "message": "PR libstdc++/88738 treat shared_ptr and unique_ptr more like plain old pointers\n\n        PR libstdc++/88738\n        Warn about unused comparisons of shared_ptr/unique_ptr\n        * include/bits/c++config [_GLIBCXX_NODISCARD]: Define.\n        * include/bits/shared_ptr.h: Use it for operator ==, !=,\n        <, <=, >, >= for shared_ptr.\n        * include/bits/unique_ptr.h: Likewise for unique_ptr.\n\nFrom-SVN: r267964", "tree": {"sha": "b9245463a68430af8129b767c77468d18b048233", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9245463a68430af8129b767c77468d18b048233"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec0d53719f24e994706ff661ffef6cf358974554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0d53719f24e994706ff661ffef6cf358974554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec0d53719f24e994706ff661ffef6cf358974554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec0d53719f24e994706ff661ffef6cf358974554/comments", "author": null, "committer": null, "parents": [{"sha": "df1de0641543701e6cde7c47e1da594eed83325e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df1de0641543701e6cde7c47e1da594eed83325e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df1de0641543701e6cde7c47e1da594eed83325e"}], "stats": {"total": 89, "additions": 53, "deletions": 36}, "files": [{"sha": "d9819eee4adc92ae36e537eecba0ed40ccbc2673", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0d53719f24e994706ff661ffef6cf358974554/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0d53719f24e994706ff661ffef6cf358974554/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ec0d53719f24e994706ff661ffef6cf358974554", "patch": "@@ -1,3 +1,12 @@\n+2019-02-14  Ulrich Drepper  <drepper@redhat.com>\n+\n+\tPR libstdc++/88738\n+\tWarn about unused comparisons of shared_ptr/unique_ptr\n+\t* include/bits/c++config [_GLIBCXX_NODISCARD]: Define.\n+\t* include/bits/shared_ptr.h: Use it for operator ==, !=,\n+\t<, <=, >, >= for shared_ptr.\n+\t* include/bits/unique_ptr.h: Likewise for unique_ptr.\n+\n 2019-01-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/shared_ptr_base.h (__cpp_lib_shared_ptr_arrays): Define"}, {"sha": "97bb6db70b13b9f168a25374dd4f4c10b6b9913c", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0d53719f24e994706ff661ffef6cf358974554/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0d53719f24e994706ff661ffef6cf358974554/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=ec0d53719f24e994706ff661ffef6cf358974554", "patch": "@@ -99,6 +99,14 @@\n # define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ (\"cxx11\")))\n #endif\n \n+// Macro to warn about unused results.\n+#if __cplusplus >= 201703L\n+# define _GLIBCXX_NODISCARD [[__nodiscard__]]\n+#else\n+# define _GLIBCXX_NODISCARD\n+#endif\n+\n+\n \n #if __cplusplus\n "}, {"sha": "d504627d1a04be01ac39ab9b8c50de1017cb6df2", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0d53719f24e994706ff661ffef6cf358974554/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0d53719f24e994706ff661ffef6cf358974554/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=ec0d53719f24e994706ff661ffef6cf358974554", "patch": "@@ -380,37 +380,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // 20.7.2.2.7 shared_ptr comparisons\n   template<typename _Tp, typename _Up>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     { return __a.get() == __b.get(); }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return !__a; }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return !__a; }\n \n   template<typename _Tp, typename _Up>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     { return __a.get() != __b.get(); }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return (bool)__a; }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return (bool)__a; }\n \n   template<typename _Tp, typename _Up>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     {\n       using _Tp_elt = typename shared_ptr<_Tp>::element_type;\n@@ -420,63 +420,63 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     {\n       using _Tp_elt = typename shared_ptr<_Tp>::element_type;\n       return less<_Tp_elt*>()(__a.get(), nullptr);\n     }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     {\n       using _Tp_elt = typename shared_ptr<_Tp>::element_type;\n       return less<_Tp_elt*>()(nullptr, __a.get());\n     }\n \n   template<typename _Tp, typename _Up>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     { return !(__b < __a); }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return !(nullptr < __a); }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return !(__a < nullptr); }\n \n   template<typename _Tp, typename _Up>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     { return (__b < __a); }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return nullptr < __a; }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return __a < nullptr; }\n \n   template<typename _Tp, typename _Up>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n     { return !(__a < __b); }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n     { return !(__a < nullptr); }\n \n   template<typename _Tp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n     { return !(nullptr < __a); }\n "}, {"sha": "61a3ef05460945cda4e56a8d7c1a6a1bcc20bbd6", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec0d53719f24e994706ff661ffef6cf358974554/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec0d53719f24e994706ff661ffef6cf358974554/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=ec0d53719f24e994706ff661ffef6cf358974554", "patch": "@@ -707,41 +707,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator==(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n     { return __x.get() == __y.get(); }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n     { return !__x; }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept\n     { return !__x; }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator!=(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n     { return __x.get() != __y.get(); }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n     { return (bool)__x; }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept\n     { return (bool)__x; }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<(const unique_ptr<_Tp, _Dp>& __x,\n \t      const unique_ptr<_Up, _Ep>& __y)\n     {\n@@ -752,67 +752,67 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n     { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),\n \t\t\t\t\t\t\t\t nullptr); }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n     { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,\n \t\t\t\t\t\t\t\t __x.get()); }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<=(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n     { return !(__y < __x); }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n     { return !(nullptr < __x); }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n     { return !(__x < nullptr); }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>(const unique_ptr<_Tp, _Dp>& __x,\n \t      const unique_ptr<_Up, _Ep>& __y)\n     { return (__y < __x); }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n     { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,\n \t\t\t\t\t\t\t\t __x.get()); }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n     { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),\n \t\t\t\t\t\t\t\t nullptr); }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>=(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n     { return !(__x < __y); }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n     { return !(__x < nullptr); }\n \n   template<typename _Tp, typename _Dp>\n-    inline bool\n+    _GLIBCXX_NODISCARD inline bool\n     operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n     { return !(nullptr < __x); }\n "}]}