{"sha": "54d19c3b7fb38097973a57b6e822e15cbcbd031d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRkMTljM2I3ZmIzODA5Nzk3M2E1N2I2ZTgyMmUxNWNiY2JkMDMxZA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2016-06-29T09:08:04Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2016-06-29T09:08:04Z"}, "message": "Improve diagnostic messages of \"#pragma omp cancel\", \"#pragma omp cancellation point\" parsing\n\n\tgcc/c/\n\t* c-parser.c (c_parser_pragma) <PRAGMA_OMP_CANCELLATION_POINT>:\n\tMove pragma context checking into...\n\t(c_parser_omp_cancellation_point): ... here, and improve\n\tdiagnostic messages.\n\t* c-typeck.c (c_finish_omp_cancel)\n\t(c_finish_omp_cancellation_point): Improve diagnostic messages.\n\tgcc/cp/\n\t* parser.c (cp_parser_pragma) <PRAGMA_OMP_CANCELLATION_POINT>:\n\tMove pragma context checking into...\n\t(cp_parser_omp_cancellation_point): ... here, and improve\n\tdiagnostic messages.\n\t* semantics.c (finish_omp_cancel, finish_omp_cancellation_point):\n\tImprove diagnostic messages.\n\tgcc/testsuite/\n\t* c-c++-common/gomp/cancel-1.c: Extend.\n\nFrom-SVN: r237843", "tree": {"sha": "607bd431945a31016513565efdb3f36e5a571dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/607bd431945a31016513565efdb3f36e5a571dfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54d19c3b7fb38097973a57b6e822e15cbcbd031d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d19c3b7fb38097973a57b6e822e15cbcbd031d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54d19c3b7fb38097973a57b6e822e15cbcbd031d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54d19c3b7fb38097973a57b6e822e15cbcbd031d/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9d8d99478f3b02e55a69b166a70646c87a7f5cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d8d99478f3b02e55a69b166a70646c87a7f5cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d8d99478f3b02e55a69b166a70646c87a7f5cd"}], "stats": {"total": 102, "additions": 72, "deletions": 30}, "files": [{"sha": "7bd112b3bce6cbe25484e3d4fa211a76014dac8b", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=54d19c3b7fb38097973a57b6e822e15cbcbd031d", "patch": "@@ -1,3 +1,12 @@\n+2016-06-29  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_pragma) <PRAGMA_OMP_CANCELLATION_POINT>:\n+\tMove pragma context checking into...\n+\t(c_parser_omp_cancellation_point): ... here, and improve\n+\tdiagnostic messages.\n+\t* c-typeck.c (c_finish_omp_cancel)\n+\t(c_finish_omp_cancellation_point): Improve diagnostic messages.\n+\n 2016-06-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/71685"}, {"sha": "1a50dea228b84d3bff2d3e28452623f869b9beb4", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=54d19c3b7fb38097973a57b6e822e15cbcbd031d", "patch": "@@ -1358,11 +1358,11 @@ static tree c_parser_omp_for_loop (location_t, c_parser *, enum tree_code,\n static void c_parser_omp_taskwait (c_parser *);\n static void c_parser_omp_taskyield (c_parser *);\n static void c_parser_omp_cancel (c_parser *);\n-static void c_parser_omp_cancellation_point (c_parser *);\n \n enum pragma_context { pragma_external, pragma_struct, pragma_param,\n \t\t      pragma_stmt, pragma_compound };\n static bool c_parser_pragma (c_parser *, enum pragma_context, bool *);\n+static void c_parser_omp_cancellation_point (c_parser *, enum pragma_context);\n static bool c_parser_omp_target (c_parser *, enum pragma_context, bool *);\n static void c_parser_omp_end_declare_target (c_parser *);\n static void c_parser_omp_declare (c_parser *, enum pragma_context);\n@@ -10187,14 +10187,7 @@ c_parser_pragma (c_parser *parser, enum pragma_context context, bool *if_p)\n       return false;\n \n     case PRAGMA_OMP_CANCELLATION_POINT:\n-      if (context != pragma_compound)\n-\t{\n-\t  if (context == pragma_stmt)\n-\t    c_parser_error (parser, \"%<#pragma omp cancellation point%> may \"\n-\t\t\t\t    \"only be used in compound statements\");\n-\t  goto bad_stmt;\n-\t}\n-      c_parser_omp_cancellation_point (parser);\n+      c_parser_omp_cancellation_point (parser, context);\n       return false;\n \n     case PRAGMA_OMP_THREADPRIVATE:\n@@ -15668,7 +15661,7 @@ c_parser_omp_cancel (c_parser *parser)\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_TASKGROUP))\n \n static void\n-c_parser_omp_cancellation_point (c_parser *parser)\n+c_parser_omp_cancellation_point (c_parser *parser, enum pragma_context context)\n {\n   location_t loc = c_parser_peek_token (parser)->location;\n   tree clauses;\n@@ -15691,6 +15684,17 @@ c_parser_omp_cancellation_point (c_parser *parser)\n       return;\n     }\n \n+  if (context != pragma_compound)\n+    {\n+      if (context == pragma_stmt)\n+\terror_at (loc, \"%<#pragma omp cancellation point%> may only be used in\"\n+\t\t  \" compound statements\");\n+      else\n+\tc_parser_error (parser, \"expected declaration specifiers\");\n+      c_parser_skip_to_pragma_eol (parser, false);\n+      return;\n+    }\n+\n   clauses\n     = c_parser_omp_all_clauses (parser, OMP_CANCELLATION_POINT_CLAUSE_MASK,\n \t\t\t\t\"#pragma omp cancellation point\");"}, {"sha": "b2435deac067a0e5f40bdd61c8f2db7e070884a9", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=54d19c3b7fb38097973a57b6e822e15cbcbd031d", "patch": "@@ -11933,7 +11933,7 @@ c_finish_omp_cancel (location_t loc, tree clauses)\n     mask = 8;\n   else\n     {\n-      error_at (loc, \"%<#pragma omp cancel must specify one of \"\n+      error_at (loc, \"%<#pragma omp cancel%> must specify one of \"\n \t\t     \"%<parallel%>, %<for%>, %<sections%> or %<taskgroup%> \"\n \t\t     \"clauses\");\n       return;\n@@ -11972,7 +11972,7 @@ c_finish_omp_cancellation_point (location_t loc, tree clauses)\n     mask = 8;\n   else\n     {\n-      error_at (loc, \"%<#pragma omp cancellation point must specify one of \"\n+      error_at (loc, \"%<#pragma omp cancellation point%> must specify one of \"\n \t\t     \"%<parallel%>, %<for%>, %<sections%> or %<taskgroup%> \"\n \t\t     \"clauses\");\n       return;"}, {"sha": "327391bf775f27d877051d3c6a55e91822e7838f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=54d19c3b7fb38097973a57b6e822e15cbcbd031d", "patch": "@@ -1,3 +1,12 @@\n+2016-06-29  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* parser.c (cp_parser_pragma) <PRAGMA_OMP_CANCELLATION_POINT>:\n+\tMove pragma context checking into...\n+\t(cp_parser_omp_cancellation_point): ... here, and improve\n+\tdiagnostic messages.\n+\t* semantics.c (finish_omp_cancel, finish_omp_cancellation_point):\n+\tImprove diagnostic messages.\n+\n 2016-06-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Make-lang.in: Don't cat ../stage_current if it does not exist."}, {"sha": "3e8270e1e6acb0629a494864f1d36a5f0cd1acc3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=54d19c3b7fb38097973a57b6e822e15cbcbd031d", "patch": "@@ -34395,7 +34395,8 @@ cp_parser_omp_cancel (cp_parser *parser, cp_token *pragma_tok)\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_TASKGROUP))\n \n static void\n-cp_parser_omp_cancellation_point (cp_parser *parser, cp_token *pragma_tok)\n+cp_parser_omp_cancellation_point (cp_parser *parser, cp_token *pragma_tok,\n+\t\t\t\t  enum pragma_context context)\n {\n   tree clauses;\n   bool point_seen = false;\n@@ -34414,7 +34415,19 @@ cp_parser_omp_cancellation_point (cp_parser *parser, cp_token *pragma_tok)\n   if (!point_seen)\n     {\n       cp_parser_error (parser, \"expected %<point%>\");\n-      cp_parser_require_pragma_eol (parser, pragma_tok);\n+      cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n+      return;\n+    }\n+\n+  if (context != pragma_compound)\n+    {\n+      if (context == pragma_stmt)\n+\terror_at (pragma_tok->location,\n+\t\t  \"%<#pragma omp cancellation point%> may only be used in\"\n+\t\t  \" compound statements\");\n+      else\n+\tcp_parser_error (parser, \"expected declaration specifiers\");\n+      cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n       return;\n     }\n \n@@ -37291,20 +37304,8 @@ cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)\n       break;\n \n     case PRAGMA_OMP_CANCELLATION_POINT:\n-      switch (context)\n-\t{\n-\tcase pragma_compound:\n-\t  cp_parser_omp_cancellation_point (parser, pragma_tok);\n-\t  return false;\n-\tcase pragma_stmt:\n-\t  error_at (pragma_tok->location,\n-\t\t    \"%<#pragma omp cancellation point%> may only be \"\n-\t\t    \"used in compound statements\");\n-\t  break;\n-\tdefault:\n-\t  goto bad_stmt;\n-\t}\n-      break;\n+      cp_parser_omp_cancellation_point (parser, pragma_tok, context);\n+      return false;\n \n     case PRAGMA_OMP_THREADPRIVATE:\n       cp_parser_omp_threadprivate (parser, pragma_tok);"}, {"sha": "d1fb11973fdbbd5d6cd58e3bca6bc1643a726294", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=54d19c3b7fb38097973a57b6e822e15cbcbd031d", "patch": "@@ -8571,7 +8571,7 @@ finish_omp_cancel (tree clauses)\n     mask = 8;\n   else\n     {\n-      error (\"%<#pragma omp cancel must specify one of \"\n+      error (\"%<#pragma omp cancel%> must specify one of \"\n \t     \"%<parallel%>, %<for%>, %<sections%> or %<taskgroup%> clauses\");\n       return;\n     }\n@@ -8608,7 +8608,7 @@ finish_omp_cancellation_point (tree clauses)\n     mask = 8;\n   else\n     {\n-      error (\"%<#pragma omp cancellation point must specify one of \"\n+      error (\"%<#pragma omp cancellation point%> must specify one of \"\n \t     \"%<parallel%>, %<for%>, %<sections%> or %<taskgroup%> clauses\");\n       return;\n     }"}, {"sha": "bc85add977db4bc360a3ed3bf6727dafab180944", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54d19c3b7fb38097973a57b6e822e15cbcbd031d", "patch": "@@ -1,3 +1,7 @@\n+2016-06-29  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/gomp/cancel-1.c: Extend.\n+\n 2016-06-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/71625"}, {"sha": "d26fcf1e226186450200158a0e04b3d007e28dbc", "filename": "gcc/testsuite/c-c++-common/gomp/cancel-1.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54d19c3b7fb38097973a57b6e822e15cbcbd031d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fcancel-1.c?ref=54d19c3b7fb38097973a57b6e822e15cbcbd031d", "patch": "@@ -455,3 +455,18 @@ f3 (void)\n       }\n     }\n }\n+\n+#pragma omp cancellation point /* { dg-error \"expected declaration specifiers before end of line\" } */\n+\n+void\n+f4 (void)\n+{\n+  if (0)\n+#pragma omp cancellation EKAHI /* { dg-error \"expected .point. before .EKAHI.\" } */\n+    ;\n+#pragma omp cancellation HO OKAHI /* { dg-error \"expected .point. before .HO.\" } */\n+  if (0)\n+#pragma omp cancellation point /* { dg-error \".pragma omp cancellation point. may only be used in compound statements\" } */\n+    ;\n+#pragma omp cancellation point /* { dg-error \".pragma omp cancellation point. must specify one of\" } */\n+}"}]}