{"sha": "1416a1434c43de0b93b313644f932ac024a94773", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQxNmExNDM0YzQzZGUwYjkzYjMxMzY0NGY5MzJhYzAyNGE5NDc3Mw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-04-26T21:41:22Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-07T18:53:44Z"}, "message": "Enhance initial global value setting.\n\nIncorporate code from vr_values to get safe initial parameter values.\nIf this is a local automatic which is used before defined, use UNDEFINED.\n\n\t* gimple-range.h (gimple_range_global): Pick up parameter initial\n\tvalues, and use-before defined locals are UNDEFINED.", "tree": {"sha": "e14e4694f814a3fddf533a1406962251ffda9208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e14e4694f814a3fddf533a1406962251ffda9208"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1416a1434c43de0b93b313644f932ac024a94773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1416a1434c43de0b93b313644f932ac024a94773", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1416a1434c43de0b93b313644f932ac024a94773", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1416a1434c43de0b93b313644f932ac024a94773/comments", "author": null, "committer": null, "parents": [{"sha": "e2bc5b6c04df820017c497a2578bd3c4c7b6c89b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2bc5b6c04df820017c497a2578bd3c4c7b6c89b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2bc5b6c04df820017c497a2578bd3c4c7b6c89b"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "f33156181bf80d4aaafad7d2f10fb7c5cf9e32d6", "filename": "gcc/gimple-range.h", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1416a1434c43de0b93b313644f932ac024a94773/gcc%2Fgimple-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1416a1434c43de0b93b313644f932ac024a94773/gcc%2Fgimple-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.h?ref=1416a1434c43de0b93b313644f932ac024a94773", "patch": "@@ -138,22 +138,39 @@ gimple_range_global (tree name)\n {\n   gcc_checking_assert (gimple_range_ssa_p (name));\n   tree type = TREE_TYPE (name);\n-#if 0\n-  // Reenable picking up global ranges when we are OK failing tests that look\n-  // for builtin_unreachable in the code, like\n-  // RUNTESTFLAGS=dg.exp=pr61034.C check-g++\n-  // pre-optimizations (inlining) set a global range which causes the ranger\n-  // to remove the condition which leads to builtin_unreachable.\n-  if (!POINTER_TYPE_P (type) && SSA_NAME_RANGE_INFO (name))\n+\n+  if (SSA_NAME_IS_DEFAULT_DEF (name))\n     {\n-      // Return a range from an SSA_NAME's available range.\n-      wide_int min, max;\n-      enum value_range_kind kind = get_range_info (name, &min, &max);\n-      return value_range (type, min, max, kind);\n-    }\n-#endif\n- // Otherwise return range for the type.\n- return value_range (type);\n+      tree sym = SSA_NAME_VAR (name);\n+      // Adapted from vr_values::get_lattice_entry().\n+      // Use a range from an SSA_NAME's available range.\n+      if (TREE_CODE (sym) == PARM_DECL)\n+\t{\n+\t  // Try to use the \"nonnull\" attribute to create ~[0, 0]\n+\t  // anti-ranges for pointers.  Note that this is only valid with\n+\t  // default definitions of PARM_DECLs.\n+\t  if (POINTER_TYPE_P (type)\n+\t      && (nonnull_arg_p (sym) || get_ptr_nonnull (name)))\n+\t    {\n+\t      value_range r;\n+\t      r.set_nonzero (type);\n+\t      return r;\n+\t    }\n+\t  else if (INTEGRAL_TYPE_P (type))\n+\t    {\n+\t      value_range r;\n+\t      get_range_info (name, r);\n+\t      if (r.undefined_p ())\n+\t\tr.set_varying (type);\n+\t      return r;\n+\t    }\n+\t}\n+      // If this is a local automatic with no definition, use undefined.\n+      else if (TREE_CODE (sym) != RESULT_DECL)\n+\treturn value_range ();\n+   }\n+  // Otherwise return range for the type.\n+  return value_range (type);\n }\n \n "}]}