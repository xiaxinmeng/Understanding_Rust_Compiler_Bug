{"sha": "78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhhYTE0NWQ5ZWNkYmNhY2M4ZjlhMDYwMjJmZWIzYThmOGUyZGFiMg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-07-29T16:44:18Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-07-29T16:44:18Z"}, "message": "re PR libstdc++/54075 ([4.7.1] unordered_map insert still slower than 4.6.2)\n\n2012-07-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/54075\n\t* include/bits/hashtable_policy.h\n\t(_Prime_rehash_policy::_M_next_bkt): Add a growth factor set to 2\n\tto boost growth in the number of buckets.\n\t* testsuite/performance/23_containers/insert/unordered_set.cc: New.\n\nFrom-SVN: r189938", "tree": {"sha": "e1573fe4e577579cd5aa5c3a14061a1736caa5c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1573fe4e577579cd5aa5c3a14061a1736caa5c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2/comments", "author": null, "committer": null, "parents": [{"sha": "231464b2276ca9dc901182e006f811ad5caca637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231464b2276ca9dc901182e006f811ad5caca637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231464b2276ca9dc901182e006f811ad5caca637"}], "stats": {"total": 81, "additions": 66, "deletions": 15}, "files": [{"sha": "6d6c06b5f7880dea28caebe899177eb89667ec47", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2", "patch": "@@ -1,3 +1,11 @@\n+2012-07-29  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/54075\n+\t* include/bits/hashtable_policy.h\n+\t(_Prime_rehash_policy::_M_next_bkt): Add a growth factor set to 2\n+\tto boost growth in the number of buckets.\n+\t* testsuite/performance/23_containers/insert/unordered_set.cc: New.\n+\n 2012-07-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/54075"}, {"sha": "27790f24a5e375a109495dba97d88b9e960d2afa", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2", "patch": "@@ -395,6 +395,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     enum { _S_n_primes = sizeof(unsigned long) != 8 ? 256 : 256 + 48 };\n \n+    static const std::size_t _S_growth_factor = 2;\n+\n     float                _M_max_load_factor;\n     mutable std::size_t  _M_prev_resize;\n     mutable std::size_t  _M_next_resize;\n@@ -415,28 +417,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static const unsigned char __fast_bkt[12]\n       = { 2, 2, 2, 3, 5, 5, 7, 7, 11, 11, 11, 11 };\n \n-    if (__n <= 11)\n+    const std::size_t __grown_n = __n * _S_growth_factor;\n+    if (__grown_n <= 11)\n       {\n \t_M_prev_resize = 0;\n \t_M_next_resize\n-\t  = __builtin_ceil(__fast_bkt[__n] * (long double)_M_max_load_factor);\n-\treturn __fast_bkt[__n];\n+\t  = __builtin_ceil(__fast_bkt[__grown_n]\n+\t\t\t   * (long double)_M_max_load_factor);\n+\treturn __fast_bkt[__grown_n];\n       }\n \n-    const unsigned long* __p\n-      = std::lower_bound(__prime_list + 5, __prime_list + _S_n_primes, __n);\n+    const unsigned long* __next_bkt\n+      = std::lower_bound(__prime_list + 5, __prime_list + _S_n_primes,\n+\t\t\t __grown_n);\n+    const unsigned long* __prev_bkt\n+      = std::lower_bound(__prime_list + 1, __next_bkt, __n / _S_growth_factor);\n \n-    // Shrink will take place only if the number of elements is small enough\n-    // so that the prime number 2 steps before __p is large enough to still\n-    // conform to the max load factor:\n     _M_prev_resize\n-      = __builtin_floor(*(__p - 2) * (long double)_M_max_load_factor);\n-\n-    // Let's guaranty that a minimal grow step of 11 is used\n-    if (*__p - __n < 11)\n-      __p = std::lower_bound(__p, __prime_list + _S_n_primes, __n + 11);\n-    _M_next_resize = __builtin_ceil(*__p * (long double)_M_max_load_factor);\n-    return *__p;\n+      = __builtin_floor(*(__prev_bkt - 1) * (long double)_M_max_load_factor);\n+    _M_next_resize\n+      = __builtin_ceil(*__next_bkt * (long double)_M_max_load_factor);\n+    return *__next_bkt;\n   }\n \n   // Return the smallest prime p such that alpha p >= n, where alpha"}, {"sha": "83d3935956be653cb02b5b739bfa2a0799633960", "filename": "libstdc++-v3/testsuite/performance/23_containers/insert/unordered_set.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Funordered_set.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Funordered_set.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F23_containers%2Finsert%2Funordered_set.cc?ref=78aa145d9ecdbcacc8f9a06022feb3a8f8e2dab2", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=c++11\" }\n+\n+#include <unordered_set>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const int sz = 10000000;\n+\n+  std::unordered_set<int> s;\n+  start_counters(time, resource);\n+\n+  for (int i = 0; i != sz ; ++i)\n+    s.insert(i);\n+\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"unordered_set 10000000 insertions\",\n+\t\t     time, resource);\n+  return 0;\n+}"}]}