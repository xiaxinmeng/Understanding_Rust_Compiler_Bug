{"sha": "387edf83a033e1a534c7a2a076d5ae691ecbac07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3ZWRmODNhMDMzZTFhNTM0YzdhMmEwNzZkNWFlNjkxZWNiYWMwNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-19T15:42:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-19T15:42:27Z"}, "message": "Define std::atomic<T>::is_always_lock_free for C++17\n\n\t* include/std/atomic (atomic::is_always_lock_free): Define.\n\t* testsuite/29_atomics/atomic/60695.cc: Adjust dg-error lineno.\n\t* testsuite/29_atomics/atomic/is_always_lock_free.cc: New.\n\t* testsuite/29_atomics/atomic_integral/is_always_lock_free.cc: New.\n\t* doc/xml/manual/status_cxx2017.xml: Update status.\n\t* doc/html/*: Regenerate.\n\nFrom-SVN: r239622", "tree": {"sha": "77661da71b0527cb4fbcc5d090681c3470ada6c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77661da71b0527cb4fbcc5d090681c3470ada6c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387edf83a033e1a534c7a2a076d5ae691ecbac07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387edf83a033e1a534c7a2a076d5ae691ecbac07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387edf83a033e1a534c7a2a076d5ae691ecbac07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387edf83a033e1a534c7a2a076d5ae691ecbac07/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285ee2fb11d392e2991f5307e959faac5a8f0bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285ee2fb11d392e2991f5307e959faac5a8f0bce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285ee2fb11d392e2991f5307e959faac5a8f0bce"}], "stats": {"total": 164, "additions": 159, "deletions": 5}, "files": [{"sha": "727285a80437a7afe25bc45aa94c9895ecc9de77", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=387edf83a033e1a534c7a2a076d5ae691ecbac07", "patch": "@@ -1,5 +1,12 @@\n 2016-08-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/atomic (atomic::is_always_lock_free): Define.\n+\t* testsuite/29_atomics/atomic/60695.cc: Adjust dg-error lineno.\n+\t* testsuite/29_atomics/atomic/is_always_lock_free.cc: New.\n+\t* testsuite/29_atomics/atomic_integral/is_always_lock_free.cc: New.\n+\t* doc/xml/manual/status_cxx2017.xml: Update status.\n+\t* doc/html/*: Regenerate.\n+\n \t* include/experimental/tuple (apply): Qualify call to __apply_impl.\n \t* include/std/tuple (apply): Likewise.\n \t* testsuite/experimental/system_error/value.cc: Fix ambiguities in"}, {"sha": "64606393711560e1fc2dcc656c1049961239f0eb", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=387edf83a033e1a534c7a2a076d5ae691ecbac07", "patch": "@@ -718,11 +718,11 @@\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0392r0.pdf\" target=\"_top\">\n \tP0392R0\n \t</a>\n-      </td><td align=\"center\"> No </td><td align=\"left\">\u00a0</td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> constexpr <code class=\"code\">atomic&lt;T&gt;::is_always_lock_free</code>\t </td><td align=\"left\">\n+      </td><td align=\"center\"> No </td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\"> constexpr <code class=\"code\">atomic&lt;T&gt;::is_always_lock_free</code>\t </td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0152r1.html\" target=\"_top\">\n \tP0152R1\n \t</a>\n-      </td><td align=\"center\"> No </td><td align=\"left\"><code class=\"code\"> __cpp_lib_atomic_is_always_lock_free &gt;= 201603 </code></td></tr><tr><td align=\"left\">A proposal to add <code class=\"code\">shared_mutex</code> (untimed) (Revision 4)</td><td align=\"left\">\n+      </td><td align=\"center\"> 7 </td><td align=\"left\"><code class=\"code\"> __cpp_lib_atomic_is_always_lock_free &gt;= 201603 </code></td></tr><tr><td align=\"left\">A proposal to add <code class=\"code\">shared_mutex</code> (untimed) (Revision 4)</td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4508.html\" target=\"_top\">\n \t  N4508\n \t</a>"}, {"sha": "331420ef3ce977c127498568a4de28de5d427e42", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=387edf83a033e1a534c7a2a076d5ae691ecbac07", "patch": "@@ -699,14 +699,13 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry> constexpr <code>atomic&lt;T&gt;::is_always_lock_free</code>\t </entry>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0152r1.html\">\n \tP0152R1\n \t</link>\n       </entry>\n-      <entry align=\"center\"> No </entry>\n+      <entry align=\"center\"> 7 </entry>\n       <entry><code> __cpp_lib_atomic_is_always_lock_free >= 201603 </code></entry>\n     </row>\n "}, {"sha": "ad7a4f6a2a49b05728f8b8c15211fc017b2e20a8", "filename": "libstdc++-v3/include/std/atomic", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=387edf83a033e1a534c7a2a076d5ae691ecbac07", "patch": "@@ -50,6 +50,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n+#if __cplusplus > 201402L\n+# define __cpp_lib_atomic_is_always_lock_free 201603\n+#endif\n+\n   template<typename _Tp>\n     struct atomic;\n \n@@ -90,6 +94,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     bool\n     is_lock_free() const volatile noexcept { return _M_base.is_lock_free(); }\n \n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;\n+#endif\n+\n     void\n     store(bool __i, memory_order __m = memory_order_seq_cst) noexcept\n     { _M_base.store(__i, __m); }\n@@ -221,6 +229,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    reinterpret_cast<void *>(-__alignof(_M_i)));\n       }\n \n+#if __cplusplus > 201402L\n+      static constexpr bool is_always_lock_free\n+\t= __atomic_always_lock_free(sizeof(_M_i), 0);\n+#endif\n+\n       void\n       store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept\n       { __atomic_store(std::__addressof(_M_i), std::__addressof(__i), __m); }\n@@ -416,6 +429,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       is_lock_free() const volatile noexcept\n       { return _M_b.is_lock_free(); }\n \n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_POINTER_LOCK_FREE == 2;\n+#endif\n+\n       void\n       store(__pointer_type __p,\n \t    memory_order __m = memory_order_seq_cst) noexcept\n@@ -537,6 +554,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_CHAR_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for signed char.\n@@ -556,6 +577,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_CHAR_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for unsigned char.\n@@ -575,6 +600,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_CHAR_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for short.\n@@ -594,6 +623,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_SHORT_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for unsigned short.\n@@ -613,6 +646,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_SHORT_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for int.\n@@ -632,6 +669,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_INT_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for unsigned int.\n@@ -651,6 +692,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_INT_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for long.\n@@ -670,6 +715,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_LONG_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for unsigned long.\n@@ -689,6 +738,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_LONG_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for long long.\n@@ -708,6 +761,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_LLONG_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for unsigned long long.\n@@ -727,6 +784,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_LLONG_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for wchar_t.\n@@ -746,6 +807,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_WCHAR_T_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for char16_t.\n@@ -765,6 +830,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_CHAR16_T_LOCK_FREE == 2;\n+#endif\n     };\n \n   /// Explicit specialization for char32_t.\n@@ -784,6 +853,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using __base_type::operator __integral_type;\n       using __base_type::operator=;\n+\n+#if __cplusplus > 201402L\n+    static constexpr bool is_always_lock_free = ATOMIC_CHAR32_T_LOCK_FREE == 2;\n+#endif\n     };\n \n "}, {"sha": "21ac7589a6e6b6a8572c0c7a05671dbc09b0d7e3", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/60695.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2F60695.cc?ref=387edf83a033e1a534c7a2a076d5ae691ecbac07", "patch": "@@ -27,4 +27,4 @@ struct X {\n   char stuff[0]; // GNU extension, type has zero size\n };\n \n-std::atomic<X> a;  // { dg-error \"not supported\" \"\" { target *-*-* } 182 }\n+std::atomic<X> a;  // { dg-error \"not supported\" \"\" { target *-*-* } 190 }"}, {"sha": "9383cea3344cab1ffbe851a26b5612c93baf9687", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/is_always_lock_free.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fis_always_lock_free.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fis_always_lock_free.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fis_always_lock_free.cc?ref=387edf83a033e1a534c7a2a076d5ae691ecbac07", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+#include <atomic>\n+\n+struct S { int s[64]; };\n+\n+constexpr bool b1 = std::atomic<S>::is_always_lock_free;\n+constexpr const bool* cktype1 = &std::atomic<S>::is_always_lock_free;\n+\n+constexpr bool b2 = std::atomic<int*>::is_always_lock_free;\n+constexpr const bool* cktype2 = &std::atomic<int*>::is_always_lock_free;\n+\n+static_assert( std::atomic<int*>::is_always_lock_free\n+                == (ATOMIC_POINTER_LOCK_FREE == 2) );"}, {"sha": "defa673e9a2d56b17dc44038e9620134f9966dc0", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/is_always_lock_free.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fis_always_lock_free.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387edf83a033e1a534c7a2a076d5ae691ecbac07/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fis_always_lock_free.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fis_always_lock_free.cc?ref=387edf83a033e1a534c7a2a076d5ae691ecbac07", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+#include <atomic>\n+\n+using std::atomic;\n+\n+template<typename T>\n+constexpr bool check(int macro)\n+{\n+  return std::atomic<T>::is_always_lock_free == (macro == 2);\n+}\n+\n+static_assert( check<bool>(ATOMIC_BOOL_LOCK_FREE) );\n+static_assert( check<char>(ATOMIC_CHAR_LOCK_FREE) );\n+static_assert( check<signed char>(ATOMIC_CHAR_LOCK_FREE) );\n+static_assert( check<unsigned char>(ATOMIC_CHAR_LOCK_FREE) );\n+static_assert( check<int>(ATOMIC_INT_LOCK_FREE) );\n+static_assert( check<unsigned int>(ATOMIC_INT_LOCK_FREE) );\n+static_assert( check<long>(ATOMIC_LONG_LOCK_FREE) );\n+static_assert( check<unsigned long>(ATOMIC_LONG_LOCK_FREE) );\n+static_assert( check<long long>(ATOMIC_LLONG_LOCK_FREE) );\n+static_assert( check<unsigned long long>(ATOMIC_LLONG_LOCK_FREE) );\n+static_assert( check<wchar_t>(ATOMIC_WCHAR_T_LOCK_FREE) );\n+static_assert( check<char16_t>(ATOMIC_CHAR16_T_LOCK_FREE) );\n+static_assert( check<char32_t>(ATOMIC_CHAR32_T_LOCK_FREE) );"}]}