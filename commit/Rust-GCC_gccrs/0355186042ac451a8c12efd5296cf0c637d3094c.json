{"sha": "0355186042ac451a8c12efd5296cf0c637d3094c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM1NTE4NjA0MmFjNDUxYThjMTJlZmQ1Mjk2Y2YwYzYzN2QzMDk0Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-10-01T11:55:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-10-01T11:55:02Z"}, "message": "memory.c (malloc_t): Remove.\n\n\t* runtime/memory.c (malloc_t): Remove.\n\t(GFC_MALLOC_MAGIC, HEADER_SIZE, DATA_POINTER, DATA_HEADER): Remove.\n\t(mem_root, runtime_cleanup, malloc_with_header): Remove.\n\t(internal_malloc_size): Use just get_mem if size != 0, return NULL\n\totherwise.\n\t(internal_free): Just free if non-NULL.\n\t(internal_realloc_size): Remove debugging stuff.\n\t(allocate_size): Use malloc directly, remove debugging stuff.\n\t(deallocate): Use free directly, fix error message wording.\n\nFrom-SVN: r104856", "tree": {"sha": "4794acf9f9d0c32f98133bfa076212a3a9313df4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4794acf9f9d0c32f98133bfa076212a3a9313df4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0355186042ac451a8c12efd5296cf0c637d3094c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0355186042ac451a8c12efd5296cf0c637d3094c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0355186042ac451a8c12efd5296cf0c637d3094c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0355186042ac451a8c12efd5296cf0c637d3094c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1449b8cba879ff1bedf7863f63ef079b2026c0a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1449b8cba879ff1bedf7863f63ef079b2026c0a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1449b8cba879ff1bedf7863f63ef079b2026c0a1"}], "stats": {"total": 154, "additions": 26, "deletions": 128}, "files": [{"sha": "7c9189839565b5f8ba52d5eb825d34af7bbe88dc", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0355186042ac451a8c12efd5296cf0c637d3094c/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0355186042ac451a8c12efd5296cf0c637d3094c/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0355186042ac451a8c12efd5296cf0c637d3094c", "patch": "@@ -1,5 +1,15 @@\n 2005-10-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* runtime/memory.c (malloc_t): Remove.\n+\t(GFC_MALLOC_MAGIC, HEADER_SIZE, DATA_POINTER, DATA_HEADER): Remove.\n+\t(mem_root, runtime_cleanup, malloc_with_header): Remove.\n+\t(internal_malloc_size): Use just get_mem if size != 0, return NULL\n+\totherwise.\n+\t(internal_free): Just free if non-NULL.\n+\t(internal_realloc_size): Remove debugging stuff.\n+\t(allocate_size): Use malloc directly, remove debugging stuff.\n+\t(deallocate): Use free directly, fix error message wording.\n+\n \t* libgfortran.h (GFC_ITOA_BUF_SIZE, GFC_XTOA_BUF_SIZE,\n \tGFC_OTOA_BUF_SIZE, GFC_BTOA_BUF_SIZE): Define.\n \t(gfc_itoa, xtoa): Add 2 extra arguments."}, {"sha": "4f342c57b92e3826a555d6a8ba528563f00b4d99", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 16, "deletions": 128, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0355186042ac451a8c12efd5296cf0c637d3094c/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0355186042ac451a8c12efd5296cf0c637d3094c/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=0355186042ac451a8c12efd5296cf0c637d3094c", "patch": "@@ -1,5 +1,5 @@\n /* Memory mamagement routines.\n-   Copyright 2002 Free Software Foundation, Inc.\n+   Copyright 2002, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -42,52 +42,6 @@ Boston, MA 02110-1301, USA.  */\n    This causes small overhead, but again, it also helps debugging.  */\n #define GFC_CHECK_MEMORY\n \n-/* We use a double linked list of these structures to keep track of\n-   the memory we allocate internally.  We could also use this for user\n-   allocated memory (ALLOCATE/DEALLOCATE).  This should be stored in a\n-   seperate list.  */\n-typedef struct malloc_t\n-{\n-  int magic;\n-  int marker;\n-  struct malloc_t *prev, *next;\n-\n-  /* The start of the block.  */\n-  void *data;\n-}\n-malloc_t;\n-\n-/* We try to make sure we don't get memory corruption by checking for\n-   a magic number.  */\n-#define GFC_MALLOC_MAGIC 0x4d353941\t/* \"G95M\" */\n-\n-#define HEADER_SIZE offsetof (malloc_t, data)\n-#define DATA_POINTER(pheader) (&((pheader)->data))\n-#define DATA_HEADER(pdata) ((malloc_t *)((char *) (pdata) - HEADER_SIZE))\n-\n-/* The root of the circular double linked list for compiler generated\n-   malloc calls.  */\n-static malloc_t mem_root = {\n-\t.next = &mem_root,\n-\t.prev = &mem_root\n-};\n-\n-#if 0\n-/* ??? Disabled because, well, it wasn't being called before transforming\n-   it to a destructor, and turning it on causes testsuite failures.  */\n-/* Doesn't actually do any cleaning up, just throws an error if something\n-   has got out of sync somewhere.  */\n-\n-static void __attribute__((destructor))\n-runtime_cleanup (void)\n-{\n-  /* Make sure all memory we've allocated is freed on exit.  */\n-  if (mem_root.next != &mem_root)\n-    runtime_error (\"Unfreed memory on program termination\");\n-}\n-#endif\n-\n-\n void *\n get_mem (size_t n)\n {\n@@ -112,50 +66,15 @@ free_mem (void *p)\n }\n \n \n-/* Allocates a block of memory with a size of N bytes.  N does not\n-   include the size of the header.  */\n-\n-static malloc_t *\n-malloc_with_header (size_t n)\n-{\n-  malloc_t *newmem;\n-\n-  n = n + HEADER_SIZE;\n-\n-  newmem = (malloc_t *) get_mem (n);\n-\n-  if (newmem)\n-    {\n-      newmem->magic = GFC_MALLOC_MAGIC;\n-      newmem->marker = 0;\n-    }\n-\n-  return newmem;\n-}\n-\n-\n /* Allocate memory for internal (compiler generated) use.  */\n \n void *\n internal_malloc_size (size_t size)\n {\n-  malloc_t *newmem;\n-\n   if (size == 0)\n-    return 0;\n-\n-  newmem = malloc_with_header (size);\n+    return NULL;\n \n-  if (!newmem)\n-    os_error (\"Out of memory.\");\n-\n-  /* Add to end of list.  */\n-  newmem->next = &mem_root;\n-  newmem->prev = mem_root.prev;\n-  mem_root.prev->next = newmem;\n-  mem_root.prev = newmem;\n-\n-  return DATA_POINTER (newmem);\n+  return get_mem (size);\n }\n \n extern void *internal_malloc (GFC_INTEGER_4);\n@@ -190,29 +109,12 @@ internal_malloc64 (GFC_INTEGER_8 size)\n \n /* Free internally allocated memory.  Pointer is NULLified.  Also used to\n    free user allocated memory.  */\n-/* TODO: keep a list of previously allocated blocks and reuse them.  */\n \n void\n internal_free (void *mem)\n {\n-  malloc_t *m;\n-\n-  if (!mem)\n-    return;\n-\n-  m = DATA_HEADER (mem);\n-\n-  if (m->magic != GFC_MALLOC_MAGIC)\n-    runtime_error (\"Internal: No magic memblock marker.  \"\n-\t\t   \"Possible memory corruption\");\n-\n-  /* Move markers up the chain, so they don't get lost.  */\n-  m->prev->marker += m->marker;\n-  /* Remove from list.  */\n-  m->prev->next = m->next;\n-  m->next->prev = m->prev;\n-\n-  free (m);\n+  if (mem != NULL)\n+    free (mem);\n }\n iexport(internal_free);\n \n@@ -223,30 +125,21 @@ iexport(internal_free);\n static void *\n internal_realloc_size (void *mem, size_t size)\n {\n-  malloc_t *m;\n-\n   if (size == 0)\n     {\n       if (mem)\n-\tinternal_free (mem);\n-      return 0;\n+\tfree (mem);\n+      return NULL;\n     }\n \n   if (mem == 0)\n-    return internal_malloc (size);\n+    return get_mem (size);\n \n-  m = DATA_HEADER (mem);\n-  if (m->magic != GFC_MALLOC_MAGIC)\n-    runtime_error (\"Internal: No magic memblock marker.  \"\n-\t\t   \"Possible memory corruption\");\n-\n-  m = realloc (m, size + HEADER_SIZE);\n-  if (!m)\n+  mem = realloc (mem, size);\n+  if (!mem)\n     os_error (\"Out of memory.\");\n \n-  m->prev->next = m;\n-  m->next->prev = m;\n-  return DATA_POINTER (m);\n+  return mem;\n }\n \n extern void *internal_realloc (void *, GFC_INTEGER_4);\n@@ -284,12 +177,12 @@ internal_realloc64 (void *mem, GFC_INTEGER_8 size)\n static void\n allocate_size (void **mem, size_t size, GFC_INTEGER_4 * stat)\n {\n-  malloc_t *newmem;\n+  void *newmem;\n \n   if (!mem)\n     runtime_error (\"Internal: NULL mem pointer in ALLOCATE.\");\n \n-  newmem = malloc_with_header (size);\n+  newmem = malloc (size);\n   if (!newmem)\n     {\n       if (stat)\n@@ -301,11 +194,7 @@ allocate_size (void **mem, size_t size, GFC_INTEGER_4 * stat)\n \truntime_error (\"ALLOCATE: Out of memory.\");\n     }\n \n-  /* We don't keep a list of these at the moment, so just link to itself. */\n-  newmem->next = newmem;\n-  newmem->prev = newmem;\n-\n-  (*mem) = DATA_POINTER (newmem);\n+  (*mem) = newmem;\n \n   if (stat)\n     *stat = 0;\n@@ -354,7 +243,7 @@ void\n deallocate (void **mem, GFC_INTEGER_4 * stat)\n {\n   if (!mem)\n-    runtime_error (\"Internal: NULL mem pointer in ALLOCATE.\");\n+    runtime_error (\"Internal: NULL mem pointer in DEALLOCATE.\");\n \n   if (!*mem)\n     {\n@@ -371,8 +260,7 @@ deallocate (void **mem, GFC_INTEGER_4 * stat)\n \t}\n     }\n \n-  /* Just use the internal routine.  */\n-  internal_free (*mem);\n+  free (*mem);\n   *mem = NULL;\n \n   if (stat)"}]}