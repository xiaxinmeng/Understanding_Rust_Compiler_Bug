{"sha": "002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyYjRlZjFiNDM4YzcyNWZiYmQ4Y2RiMWU0YzY3MmVkYmZlYTIzMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-16T13:29:51Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-16T13:29:51Z"}, "message": "ChangeLog: follow spelling conventions.\n\n\t* ChangeLog: follow spelling conventions.\n\t* g++.old-deja/g++.abi/ptrmem.C: Likewise.\n\t* g++.old-deja/g++.bugs/900210_05.C: Likewise.\n\t* g++.old-deja/g++.bugs/900211_04.C: Likewise.\n\t* g++.old-deja/g++.bugs/900321_02.C: Likewise.\n\t* g++.old-deja/g++.bugs/900404_02.C: Likewise.\n\t* g++.old-deja/g++.bugs/900520_06.C: Likewise.\n\t* g++.old-deja/g++.law/global-init1.C: Likewise.\n\t* g++.old-deja/g++.other/delete4.C: Likewise.\n\t* g++.old-deja/g++.other/inline21.C: Likewise.\n\t* g++.old-deja/g++.other/singleton.C: Likewise.\n\t* g77.dg/strlen0.f: Likewise.\n\t* g77.f-torture/compile/20010519-1.f: Likewise.\n\t* g77.f-torture/compile/980310-4.f: Likewise.\n\t* gcc.c-torture/compile/20000605-1.c: Likewise.\n\t* gcc.c-torture/execute/20020225-1.c: Likewise.\n\t* gcc.dg/c90-hexfloat-2.c: Likewise.\n\t* gcc.dg/c99-bool-1.c: Likewise.\n\t* gcc.dg/c99-hexfloat-2.c: Likewise.\n\t* gcc.dg/dll-2.c: Likewise.\n\t* gcc.dg/wtr-union-init-1.c: Likewise.\n\t* gcc.dg/wtr-union-init-2.c: Likewise.\n\t* gcc.dg/wtr-union-init-3.c: Likewise.\n\t* gcc.dg/cpp/avoidpaste1.c: Likewise.\n\t* gcc.dg/cpp/defined.c: Likewise.\n\t* gcc.dg/cpp/macsyntx.c: Likewise.\n\t* gcc.dg/cpp/paste2.c: Likewise.\n\t* gcc.dg/cpp/trad/defined.c: Likewise.\n\t* gcc.dg/format/c90-printf-1.c: Likewise.\n\t* gcc.dg/format/c90-scanf-1.c: Likewise.\n\t* gcc.dg/format/c99-printf-1.c: Likewise.\n\t* gcc.dg/format/c99-scanf-1.c: Likewise.\n\t* gcc.misc-tests/gcov-8.c: Likewise.\n\t* lib/profopt.exp: Likewise.\n\nFrom-SVN: r57189", "tree": {"sha": "10a354728144326bc362afdca9d972b7ebab86e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10a354728144326bc362afdca9d972b7ebab86e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/comments", "author": null, "committer": null, "parents": [{"sha": "8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d9afc4e2b9ac69f4808cdc9b55bbfb84d92f7b4"}], "stats": {"total": 123, "additions": 80, "deletions": 43}, "files": [{"sha": "9d1aadd555e5b85774bad3afc49e629143efd315", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,3 +1,40 @@\n+2002-09-16  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog: follow spelling conventions.\n+\t* g++.old-deja/g++.abi/ptrmem.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900210_05.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900211_04.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900321_02.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900404_02.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900520_06.C: Likewise.\n+\t* g++.old-deja/g++.law/global-init1.C: Likewise.\n+\t* g++.old-deja/g++.other/delete4.C: Likewise.\n+\t* g++.old-deja/g++.other/inline21.C: Likewise.\n+\t* g++.old-deja/g++.other/singleton.C: Likewise.\n+\t* g77.dg/strlen0.f: Likewise.\n+\t* g77.f-torture/compile/20010519-1.f: Likewise.\n+\t* g77.f-torture/compile/980310-4.f: Likewise.\n+\t* gcc.c-torture/compile/20000605-1.c: Likewise.\n+\t* gcc.c-torture/execute/20020225-1.c: Likewise.\n+\t* gcc.dg/c90-hexfloat-2.c: Likewise.\n+\t* gcc.dg/c99-bool-1.c: Likewise.\n+\t* gcc.dg/c99-hexfloat-2.c: Likewise.\n+\t* gcc.dg/dll-2.c: Likewise.\n+\t* gcc.dg/wtr-union-init-1.c: Likewise.\n+\t* gcc.dg/wtr-union-init-2.c: Likewise.\n+\t* gcc.dg/wtr-union-init-3.c: Likewise.\n+\t* gcc.dg/cpp/avoidpaste1.c: Likewise.\n+\t* gcc.dg/cpp/defined.c: Likewise.\n+\t* gcc.dg/cpp/macsyntx.c: Likewise.\n+\t* gcc.dg/cpp/paste2.c: Likewise.\n+\t* gcc.dg/cpp/trad/defined.c: Likewise.\n+\t* gcc.dg/format/c90-printf-1.c: Likewise.\n+\t* gcc.dg/format/c90-scanf-1.c: Likewise.\n+\t* gcc.dg/format/c99-printf-1.c: Likewise.\n+\t* gcc.dg/format/c99-scanf-1.c: Likewise.\n+\t* gcc.misc-tests/gcov-8.c: Likewise.\n+\t* lib/profopt.exp: Likewise.\n+\n 2002-09-15  Krister Walfridsson  <cato@df.lth.se>\n \n \t* lib/old-dejagnu.exp (old-dejagnu) Improve test for ICE.\n@@ -310,7 +347,7 @@ Tue Aug 27 22:23:22 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n 2002-07-26  Neil Booth  <neil@daikokuya.cop.uk>\n \n \t* gcc.dg/cpp/trad/Wunused.c, gcc.dg/cpp/Wunused.c: Add test\n-\tfor documented behaviour.\n+\tfor documented behavior.\n \n 2002-07-25  Roger Sayle  <roger@eyesopen.com>\n \n@@ -2741,7 +2778,7 @@ Wed Jan  9 14:03:20 2002  Jeffrey A Law  (law@redhat.com)\n \n 2001-12-28  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* gcc.dg/gnu89-init-1.c: Adjust for the new behaviour, add some\n+\t* gcc.dg/gnu89-init-1.c: Adjust for the new behavior, add some\n \tadditional tests.\n \n 2001-12-27  Roger Sayle <roger@eyesopen.com>"}, {"sha": "c9efd04dbd62168fcc13d327b8797c75c7246af1", "filename": "gcc/testsuite/g++.old-deja/g++.abi/ptrmem.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.abi%2Fptrmem.C?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -37,7 +37,7 @@ struct S\n };\n \n // Because S does not have a VPTR, it will not be a primary base of T,\n-// and will therefore end up at a non-zero offset.\n+// and will therefore end up at a nonzero offset.\n \n struct T : public S \n {"}, {"sha": "c053c2a7506a3fa1911e575878244b85aff01d48", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900210_05.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900210_05.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900210_05.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900210_05.C?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -12,8 +12,8 @@\n // options come to mind.)\n \n // The use of errors rather than warnings is important because errors\n-// usually result in non-zero exit status codes for language processors\n-// and these non-zero exit stati can be automatically checked during\n+// usually result in nonzero exit status codes for language processors\n+// and these nonzero exit stati can be automatically checked during\n // normal execution of a Makefile.\n \n // cfront 2.0 provides the +p option which causes errors to be generated for"}, {"sha": "e2bd8fd3776ebdef9c4a7bf5aa186c4c6d727e72", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900211_04.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900211_04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900211_04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900211_04.C?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,7 +1,7 @@\n // g++ 1.36.1 bug 900211_04\n \n // g++ fails to flag as errors attempts to compare pointer values against\n-// (non-zero) integer values;\n+// (nonzero) integer values;\n \n // Since implicit conversions of pointer to integers (or vise versa) are\n // illegal, these comparisons are also illegal."}, {"sha": "e54a02d80b69e228e54b4167cd1e19310afea4fc", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900321_02.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900321_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900321_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900321_02.C?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,6 +1,6 @@\n // g++ 1.37.1 bug 900321_02\n \n-// The following program exits with a non-zero status because the constructor\n+// The following program exits with a nonzero status because the constructor\n // is not called 3 times as it should be.  This program exits with a zero\n // status when compiled with cfront 2.0.\n "}, {"sha": "b48eb8ae63e0231411cb0807edc0791bd71b4dc9", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900404_02.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_02.C?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -3,7 +3,7 @@\n // g++ fails to treat multicharacter literals as type \"int\" as required by\n // section 2.5.2 of the C++ Reference Manual.\n \n-// The result is that the following program will exit with a non-zero\n+// The result is that the following program will exit with a nonzero\n // exit status.\n \n // keywords: character literals, multi-character literals, int type"}, {"sha": "2fda6cacc957324070bd44836376ea0fe8a36aab", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900520_06.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900520_06.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900520_06.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900520_06.C?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -9,7 +9,7 @@\n // the class type when a parameter of the class type is passed as an\n // actual parameter.\n \n-// This causes the following program to exit with a non-zero exit status.\n+// This causes the following program to exit with a nonzero exit status.\n \n // cfront 2.0 passes this test.\n "}, {"sha": "3a671585b56aef7a8610511055a4d4c0b77a8ee5", "filename": "gcc/testsuite/g++.old-deja/g++.law/global-init1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fglobal-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fglobal-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fglobal-init1.C?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -2,7 +2,7 @@\n // global-init file\n // Message-Id: <9212021756.AA12639@grumpy.pocs.com>\n // From: wp@pocs.com (Wolfgang Polak)\n-// Subject: Initializers - gcc 2.2.2 (g++), Sparc, SunOS 4.1.1\n+// Subject: Initializers - gcc 2.2.2 (g++), SPARC, SunOS 4.1.1\n // Date: Wed, 2 Dec 92 09:56:01 PST\n \n #include <stdio.h>"}, {"sha": "e729ea2dde442397ce06d2d6de37eef2ef047f5b", "filename": "gcc/testsuite/g++.old-deja/g++.other/delete4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdelete4.C?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -3,7 +3,7 @@\n // Copyright (C) 1999 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 15 Apr 1999 <nathan@acm.org>\n \n-// delete (void *)e and delete[] (void *)e result in undefined behaviour\n+// delete (void *)e and delete[] (void *)e result in undefined behavior\n // [expr.delete/3]. Check we warn about them\n // operator new functions can only return NULL, if their exceptions\n // specification is `throw()'. All other cases must return a non-null pointer"}, {"sha": "b7edf01be5262d42aa3c57460a416f092c50e256", "filename": "gcc/testsuite/g++.old-deja/g++.other/inline21.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline21.C?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -18,7 +18,7 @@ struct Container {\n };\n \n \n-// TEST FOR CORRECT BEHAVIOUR\n+// TEST FOR CORRECT BEHAVIOR\n \n int myArray[3];\n int * intp = myArray;"}, {"sha": "36d00f9be428b7698560f7d1aaa824e563d400f2", "filename": "gcc/testsuite/g++.old-deja/g++.other/singleton.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsingleton.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsingleton.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fsingleton.C?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -4,7 +4,7 @@\n // egcs fails to see that there is a public static accessor function.\n // 2. the program crashes, because apparently the static variable s in\n // singleton::instance() is considered constructed although the ctor\n-// exited via an exception. (crash changed to non-zero return here)\n+// exited via an exception. (crash changed to nonzero return here)\n \n class singleton {\n public:"}, {"sha": "765c8b61190c23862bbca4c9657284ead5322762", "filename": "gcc/testsuite/g77.dg/strlen0.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg77.dg%2Fstrlen0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg77.dg%2Fstrlen0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.dg%2Fstrlen0.f?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -28,7 +28,7 @@\n C\n C     This code compiles and runs without error on\n C       SunOS 4.1.3 f77 (-C option)\n-C       SUNWspro SparcCompiler 4.2 f77 (-C option)\n+C       SUNWspro SPARCcompiler 4.2 f77 (-C option)\n C       (and with proposed patches, gcc-2.9.2 -fbounds-check except for test 6,\n C        which is a genuine, deliberate error - comment out to make further\n C        tests)"}, {"sha": "4da86e815a92b7e65b5fbad28c4e1bbf814371e4", "filename": "gcc/testsuite/g77.f-torture/compile/20010519-1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F20010519-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F20010519-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F20010519-1.f?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -15,7 +15,7 @@ SUBROUTINE NMDIMB(X,Y,Z,NAT3,BNBND,BIMAG,LNOMA,AMASS,DDS,DDSCR,\n C     and: D.Perahia and L.Mouawad, Comput. Chem. (1995), 19, 241.\n C     The method iteratively solves the diagonalization of the\n C     Hessian matrix. To save memory space, it uses a compressed\n-C     form of the Hessian, which only contains the non-zero elements.\n+C     form of the Hessian, which only contains the nonzero elements.\n C     In the diagonalization process, approximate eigenvectors are\n C     mixed with Cartesian coordinates to form a reduced basis. The\n C     Hessian is then diagonalized in the reduced basis. By iterating"}, {"sha": "802e3031f86a106dcbe09881684c88c441c4c14e", "filename": "gcc/testsuite/g77.f-torture/compile/980310-4.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F980310-4.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F980310-4.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F980310-4.f?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -121,7 +121,7 @@ subroutine dqage(f,a,b,epsabs,epsrel,limit,result,abserr,\n c                         = 2 the occurrence of roundoff error is\n c                             detected, which prevents the requested\n c                             tolerance from being achieved.\n-c                         = 3 extremely bad integrand behaviour occurs\n+c                         = 3 extremely bad integrand behavior occurs\n c                             at some points of the integration\n c                             interval.\n c                         = 6 the input is invalid, because\n@@ -303,7 +303,7 @@ subroutine dqage(f,a,b,epsabs,epsrel,limit,result,abserr,\n c\n         if(last.eq.limit) ier = 1\n c\n-c           set error flag in the case of bad integrand behaviour\n+c           set error flag in the case of bad integrand behavior\n c           at a point of the integration range.\n c\n         if(dmax1(dabs(a1),dabs(b2)).le.(0.1d+01+0.1d+03*"}, {"sha": "1fe5882340f31abcc2db489a220cea42269ae85a", "filename": "gcc/testsuite/gcc.c-torture/compile/20000605-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000605-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000605-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000605-1.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,6 +1,6 @@\n /* Copyright (C) 2000 Free Software Foundation */\n \n-/* make sure we don't get confused by various flavours of void */\n+/* make sure we don't get confused by various flavors of void */\n \n /* Origin:  Jakub Jelinek  <jakub@redhat.com>\n  *          Joel Sherrill <joel.sherrill@OARcorp.com>"}, {"sha": "514730a09aa851de3830adec38f5702bcf344293", "filename": "gcc/testsuite/gcc.c-torture/execute/20020225-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020225-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020225-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020225-1.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,5 +1,5 @@\n /* This testcase failed at -O2 on powerpc64 due to andsi3 writing\n-   non-zero bits to the high 32 bits of a 64 bit register.  */\n+   nonzero bits to the high 32 bits of a 64 bit register.  */\n \n extern void abort (void);\n extern void exit (int);"}, {"sha": "259471c8fd05d69e135799d4386e6288ee2e6bbe", "filename": "gcc/testsuite/gcc.dg/c90-hexfloat-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-hexfloat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-hexfloat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-hexfloat-2.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -20,5 +20,5 @@ main (void)\n   if (strcmp (s, \"0x1p+( 0x1p+)\"))\n     abort ();\n   else\n-    return 0; /* Correct C90 behaviour.  */\n+    return 0; /* Correct C90 behavior.  */\n }"}, {"sha": "1037eb55173a8d843e19817aa99336375c0da55c", "filename": "gcc/testsuite/gcc.dg/c99-bool-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-bool-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-bool-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-bool-1.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -54,7 +54,7 @@ main (void)\n     abort ();\n   if (a != 1 || b != 0 || c != 1)\n     abort ();\n-  /* Casts to _Bool have a specified behaviour.  */\n+  /* Casts to _Bool have a specified behavior.  */\n   if ((int)(_Bool)2 != 1)\n     abort ();\n   if ((int)(_Bool)0.2 != 1)"}, {"sha": "3ca15c3c53de7c11163daa44778f892b03d05c78", "filename": "gcc/testsuite/gcc.dg/c99-hexfloat-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-hexfloat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-hexfloat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-hexfloat-2.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -20,5 +20,5 @@ main (void)\n   if (strcmp (s, \"0x1p+f 0x1p+l\"))\n     abort ();\n   else\n-    return 0; /* Correct C99 behaviour.  */\n+    return 0; /* Correct C99 behavior.  */\n }"}, {"sha": "f2905c34aab4573585b299f9499462fccb27d410", "filename": "gcc/testsuite/gcc.dg/cpp/avoidpaste1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Favoidpaste1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Favoidpaste1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Favoidpaste1.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -18,7 +18,7 @@\n : : : .. . 0 0 .\n \n It relies on the fact that even when preprocessing C we bother to separate\n-the colons of C++'s :: operator.  If we confine this behaviour to C++\n+the colons of C++'s :: operator.  If we confine this behavior to C++\n in future, this test needs to change.  */\n \n :: :g: :f(): :f(^): tricky"}, {"sha": "9a60bdd5d10620a3f903850af5af2cc033acda20", "filename": "gcc/testsuite/gcc.dg/cpp/defined.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdefined.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -2,7 +2,7 @@\n \n /* { dg-do preprocess } */\n \n-/* Tests behaviour of the defined operator.  */\n+/* Tests behavior of the defined operator.  */\n \n /*  Source: Neil Booth, 29 Oct 2000, Zack Weinberg 11 Dec 2000.  */\n \n@@ -19,7 +19,7 @@\n #error Z is not defined\n #endif\n \n-/* The behaviour of \"defined\" when it comes from a macro expansion is\n+/* The behavior of \"defined\" when it comes from a macro expansion is\n    now documented.  */\n #if is_Z_defined\n #error Macro expanding into defined operator test 1\n@@ -51,7 +51,7 @@\n #error Z is not defined\n #endif\n \n-/* The behaviour of \"defined\" when it comes from a macro expansion is\n+/* The behavior of \"defined\" when it comes from a macro expansion is\n    now documented.  */\n #if is_Z_defined\n #error Macro expanding into defined operator test 1"}, {"sha": "495921efa140747f0838b66a4a81dfa3d9036792", "filename": "gcc/testsuite/gcc.dg/cpp/macsyntx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -7,7 +7,7 @@\n \n    o Full range of macro definition semantics.\n    o No. of arguments supplied to function-like macros.\n-   o Odd GNU rest args behaviour.\n+   o Odd GNU rest args behavior.\n    o Macro arguments do not flow into the rest of the file.  */\n \n "}, {"sha": "788e4eb51d33f8f278f7a1612f244a1568f4e3f9", "filename": "gcc/testsuite/gcc.dg/cpp/paste2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste2.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do run } */\n /* { dg-options \"-std=c99 -pedantic-errors\" } */\n \n-/* Test ## behaviour and corner cases thoroughly.  The macro expander\n+/* Test ## behavior and corner cases thoroughly.  The macro expander\n    failed many of these during development.  */\n \n #ifndef __WCHAR_TYPE__"}, {"sha": "5fa1d93b8aa49257dc633bed6756958ff925cd2b", "filename": "gcc/testsuite/gcc.dg/cpp/trad/defined.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdefined.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdefined.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fdefined.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -29,7 +29,7 @@\n #error Z is not defined\n #endif\n \n-/* The behaviour of \"defined\" when it comes from a macro expansion is\n+/* The behavior of \"defined\" when it comes from a macro expansion is\n    now documented.  */\n #if is_Z_defined\n #error Macro expanding into defined operator test 1\n@@ -61,7 +61,7 @@\n #error Z is not defined\n #endif\n \n-/* The behaviour of \"defined\" when it comes from a macro expansion is\n+/* The behavior of \"defined\" when it comes from a macro expansion is\n    now documented.  */\n #if is_Z_defined\n #error Macro expanding into defined operator test 1"}, {"sha": "bf9170799659e5559e3c32c283f9ddf90f42d55f", "filename": "gcc/testsuite/gcc.dg/dll-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdll-2.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,5 +1,5 @@\n /* These dllimport and dllexport appearing for a symbol.\n-   The desired behaviour is that if both dllimport\n+   The desired behavior is that if both dllimport\n    and dllexport appear (in either order) the result is dllexport.\n \n    Microsoft's MSVC 2.0 allows dllimport followed by dllexport for variables,"}, {"sha": "e4c18f76862d3e8091910bbf1f77140bcd3dcacc", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,6 +1,6 @@\n /* Test for printf formats.  Formats using C90 features, including cases\n    where C90 specifies some aspect of the format to be ignored or where\n-   the behaviour is undefined.\n+   the behavior is undefined.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */\n@@ -203,14 +203,14 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   printf (\"%p%p%p%p\", s, ss, us, css);\n   /* %s allows any character type.  */\n   printf (\"%s%s%s%s\", s, ss, us, css);\n-  /* Warning for void * arguments for %s is GCC's historical behaviour,\n+  /* Warning for void * arguments for %s is GCC's historical behavior,\n      and seems useful to keep, even if some standard versions might be\n      read to permit it.\n   */\n   printf (\"%s\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n-  /* The historical behaviour is to allow signed / unsigned types\n+  /* The historical behavior is to allow signed / unsigned types\n      interchangably as arguments.  For values representable in both types,\n-     such usage may be correct.  For now preserve the behaviour of GCC\n+     such usage may be correct.  For now preserve the behavior of GCC\n      in such cases.\n   */\n   printf (\"%d\", u);"}, {"sha": "ea42f1e131e5c69e39b072c6d52bd675e8a170ce", "filename": "gcc/testsuite/gcc.dg/format/c90-scanf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-scanf-1.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,6 +1,6 @@\n /* Test for scanf formats.  Formats using C90 features, including cases\n    where C90 specifies some aspect of the format to be ignored or where\n-   the behaviour is undefined.\n+   the behavior is undefined.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */"}, {"sha": "729e41c3dfbb1adcd6a36d2442de414434a241f1", "filename": "gcc/testsuite/gcc.dg/format/c99-printf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-printf-1.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,6 +1,6 @@\n /* Test for printf formats.  Formats using C99 features, including cases\n    where C99 specifies some aspect of the format to be ignored or where\n-   the behaviour is undefined.\n+   the behavior is undefined.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */"}, {"sha": "7a8b3e2456c885077ffd2ffdc5db8bd1a38d7194", "filename": "gcc/testsuite/gcc.dg/format/c99-scanf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc99-scanf-1.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,6 +1,6 @@\n /* Test for scanf formats.  Formats using C99 features, including cases\n    where C99 specifies some aspect of the format to be ignored or where\n-   the behaviour is undefined.\n+   the behavior is undefined.\n */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n /* { dg-do compile } */"}, {"sha": "b6a814d7a192d12f394c70629c305675da9fa3c1", "filename": "gcc/testsuite/gcc.dg/wtr-union-init-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-1.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -13,7 +13,7 @@ union foo\n void\n testfunc ()\n {\n-  /* Note we only warn for non-zero initializers.  */\n+  /* Note we only warn for nonzero initializers.  */\n   static union foo f1 = { 0 };\n   static union foo f2 = { 1 }; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */\n "}, {"sha": "bea26f1bfaeb901630cad8433dba26c09b71373a", "filename": "gcc/testsuite/gcc.dg/wtr-union-init-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-2.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -21,7 +21,7 @@ union foo2\n void\n testfunc ()\n {\n-  /* Note we only warn for non-zero initializers.  */\n+  /* Note we only warn for nonzero initializers.  */\n   static union foo1 f1 = {0};\n   static union foo2 f2 = {0};\n   static union foo1 f3 = {1}; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */"}, {"sha": "407554a9c194433fbc4762016b9fa256c4219bb1", "filename": "gcc/testsuite/gcc.dg/wtr-union-init-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-3.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -40,7 +40,7 @@ struct baz2\n void\n testfunc ()\n {\n-  /* Note we only warn for non-zero initializers.  Xfail on substructures. */\n+  /* Note we only warn for nonzero initializers.  Xfail on substructures. */\n   static union foo f1 = {{0,0}}; /* { dg-bogus \"traditional C rejects initialization of unions\" \"initialization of unions\" { xfail *-*-* } } */\n   static union foo f2 = {{1,1}}; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */\n "}, {"sha": "4c95b3dae30fa5e256f6201080bf289b62123227", "filename": "gcc/testsuite/gcc.misc-tests/gcov-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov-8.c?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -1,4 +1,4 @@\n-/* Check that gcov correctly rounds nearly zero to non-zero and nearly\n+/* Check that gcov correctly rounds nearly zero to nonzero and nearly\n    100 to not-100.\n \n    Copyright (C) 2002 Free Software Foundation, Inc."}, {"sha": "57d79e956b313ca91689a520e1076240750a5269", "filename": "gcc/testsuite/lib/profopt.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/002b4ef1b438c725fbbd8cdb1e4c672edbfea230/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprofopt.exp?ref=002b4ef1b438c725fbbd8cdb1e4c672edbfea230", "patch": "@@ -27,7 +27,7 @@\n # addition to the profiling and feedback options.\n \n # If perf_ext is defined and the performance value for the\n-# profile-directed test run is non-zero then the performance check will\n+# profile-directed test run is nonzero then the performance check will\n # be done.\n \n global PROFOPT_OPTIONS perf_delta"}]}