{"sha": "477a21f7f9b31c687d45f1001dd93c90df52cf29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3YTIxZjdmOWIzMWM2ODdkNDVmMTAwMWRkOTNjOTBkZjUyY2YyOQ==", "commit": {"author": {"name": "Andrew John Hughes", "email": "gnu_andrew@member.fsf.org", "date": "2004-08-29T17:28:09Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-08-29T17:28:09Z"}, "message": "AbstractCollection.java, [...]: Added additional exceptions to documentation...\n\n2004-08-29  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n\n\t* java/util/AbstractCollection.java, java/util/AbstractList.java,\n\tjava/util/AbstractMap.java, java/util/AbstractSequentialList.java,\n\tjava/util/ArrayList.java, java/util/Arrays.java,\n\tjava/util/BitSet.java, java/util/Calendar.java,\n\tjava/util/Collection.java, java/util/ListIterator.java,\n\tjava/util/Map.java, java/util/SortedSet.java:\n\tAdded additional exceptions to documentation, along\n\twith some additions and corrections.\n\nFrom-SVN: r86730", "tree": {"sha": "20a303114d352cf8ac2c2a4bf36764aa0a06579a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20a303114d352cf8ac2c2a4bf36764aa0a06579a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/477a21f7f9b31c687d45f1001dd93c90df52cf29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477a21f7f9b31c687d45f1001dd93c90df52cf29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477a21f7f9b31c687d45f1001dd93c90df52cf29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477a21f7f9b31c687d45f1001dd93c90df52cf29/comments", "author": {"login": "gnu-andrew", "id": 962817, "node_id": "MDQ6VXNlcjk2MjgxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/962817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnu-andrew", "html_url": "https://github.com/gnu-andrew", "followers_url": "https://api.github.com/users/gnu-andrew/followers", "following_url": "https://api.github.com/users/gnu-andrew/following{/other_user}", "gists_url": "https://api.github.com/users/gnu-andrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnu-andrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnu-andrew/subscriptions", "organizations_url": "https://api.github.com/users/gnu-andrew/orgs", "repos_url": "https://api.github.com/users/gnu-andrew/repos", "events_url": "https://api.github.com/users/gnu-andrew/events{/privacy}", "received_events_url": "https://api.github.com/users/gnu-andrew/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "294fbfc89faac46092334188d2bbe527880794a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294fbfc89faac46092334188d2bbe527880794a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294fbfc89faac46092334188d2bbe527880794a7"}], "stats": {"total": 622, "additions": 568, "deletions": 54}, "files": [{"sha": "0b5bef2474eb74ff437411b4f13aaf6317f97e0e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -1,3 +1,14 @@\n+2004-08-29  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n+\n+\t* java/util/AbstractCollection.java, java/util/AbstractList.java,\n+\tjava/util/AbstractMap.java, java/util/AbstractSequentialList.java,\n+\tjava/util/ArrayList.java, java/util/Arrays.java,\n+\tjava/util/BitSet.java, java/util/Calendar.java,\n+\tjava/util/Collection.java, java/util/ListIterator.java,\n+\tjava/util/Map.java, java/util/SortedSet.java:\n+\tAdded additional exceptions to documentation, along\n+\twith some additions and corrections.\n+\n 2004-08-27  Hans Boehm  <Hans.Boehm@hp.com>\n \n \t* configure.ac: Handle --enable-gc-debug."}, {"sha": "a98f41efbeafaeddc2d825dcbbd8ffd6c9b17002", "filename": "libjava/java/util/AbstractCollection.java", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FAbstractCollection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FAbstractCollection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FAbstractCollection.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -129,11 +129,13 @@ public boolean add(Object o)\n    * @return true if the add operation caused the Collection to change\n    * @throws UnsupportedOperationException if the add operation is not\n    *         supported on this collection\n-   * @throws NullPointerException if this collection does not support null,\n-   *         or if the specified collection is null\n-   * @throws ClassCastException if an object in c is of the wrong type\n-   * @throws IllegalArgumentException if some aspect of an object in c prevents\n-   *         it from being added\n+   * @throws NullPointerException if the specified collection is null\n+   * @throws ClassCastException if the type of any element in c is\n+   *         not a valid type for addition.\n+   * @throws IllegalArgumentException if some aspect of any element\n+   *         in c prevents it being added.\n+   * @throws NullPointerException if any element in c is null and this\n+   *         collection doesn't allow null values.\n    * @see #add(Object)\n    */\n   public boolean addAll(Collection c)\n@@ -268,6 +270,7 @@ public boolean remove(Object o)\n    * @return true if the remove operation caused the Collection to change\n    * @throws UnsupportedOperationException if this collection's Iterator\n    *         does not support the remove method\n+   * @throws NullPointerException if the collection, c, is null.\n    * @see Iterator#remove()\n    */\n   public boolean removeAll(Collection c)\n@@ -288,8 +291,10 @@ public boolean removeAll(Collection c)\n    * @return true if the remove operation caused the Collection to change\n    * @throws UnsupportedOperationException if this collection's Iterator\n    *         does not support the remove method\n+   * @throws NullPointerException if the collection, c, is null.\n    * @see Iterator#remove()\n    */\n+  // Package visible for use throughout java.util.\n   boolean removeAllInternal(Collection c)\n   {\n     Iterator itr = iterator();\n@@ -316,6 +321,7 @@ boolean removeAllInternal(Collection c)\n    * @return true if the remove operation caused the Collection to change\n    * @throws UnsupportedOperationException if this collection's Iterator\n    *         does not support the remove method\n+   * @throws NullPointerException if the collection, c, is null.\n    * @see Iterator#remove()\n    */\n   public boolean retainAll(Collection c)\n@@ -337,8 +343,10 @@ public boolean retainAll(Collection c)\n    * @return true if the remove operation caused the Collection to change\n    * @throws UnsupportedOperationException if this collection's Iterator\n    *         does not support the remove method\n+   * @throws NullPointerException if the collection, c, is null.\n    * @see Iterator#remove()\n    */\n+  // Package visible for use throughout java.util.\n   boolean retainAllInternal(Collection c)\n   {\n     Iterator itr = iterator();"}, {"sha": "15cb5814ab837c1b0cc90830a21c13beea6e2d1e", "filename": "libjava/java/util/AbstractList.java", "status": "modified", "additions": 295, "deletions": 3, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FAbstractList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FAbstractList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FAbstractList.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -85,7 +85,7 @@ public abstract class AbstractList extends AbstractCollection implements List\n    * <code>add(int, Object)</code> and <code>remove(int)</code> methods.\n    * Otherwise, this field may be ignored.\n    */\n-  protected int modCount;\n+  protected transient int modCount;\n \n   /**\n    * The main constructor, for use by subclasses.\n@@ -308,18 +308,43 @@ public Iterator iterator()\n       private int knownMod = modCount;\n \n       // This will get inlined, since it is private.\n+      /**\n+       * Checks for modifications made to the list from\n+       * elsewhere while iteration is in progress.\n+       *\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       private void checkMod()\n       {\n         if (knownMod != modCount)\n           throw new ConcurrentModificationException();\n       }\n \n+      /**\n+       * Tests to see if there are any more objects to\n+       * return.\n+       *\n+       * @return True if the end of the list has not yet been\n+       *         reached.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public boolean hasNext()\n       {\n         checkMod();\n         return pos < size;\n       }\n \n+      /**\n+       * Retrieves the next object from the list.\n+       *\n+       * @return The next object.\n+       * @throws NoSuchElementException if there are\n+       *         no more objects to retrieve.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public Object next()\n       {\n         checkMod();\n@@ -329,6 +354,18 @@ public Object next()\n         return get(pos++);\n       }\n \n+      /**\n+       * Removes the last object retrieved by <code>next()</code>\n+       * from the list, if the list supports object removal.\n+       *\n+       * @throws ConcurrentModificationException if the list\n+       *         has been modified elsewhere.\n+       * @throws IllegalStateException if the iterator is positioned\n+       *         before the start of the list or the last object has already\n+       *         been removed.\n+       * @throws UnsupportedOperationException if the list does\n+       *         not support removing elements.\n+       */\n       public void remove()\n       {\n         checkMod();\n@@ -405,24 +442,58 @@ public ListIterator listIterator(final int index)\n       private int size = size();\n \n       // This will get inlined, since it is private.\n+      /**\n+       * Checks for modifications made to the list from\n+       * elsewhere while iteration is in progress.\n+       *\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       private void checkMod()\n       {\n         if (knownMod != modCount)\n           throw new ConcurrentModificationException();\n       }\n \n+      /**\n+       * Tests to see if there are any more objects to\n+       * return.\n+       *\n+       * @return True if the end of the list has not yet been\n+       *         reached.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public boolean hasNext()\n       {\n         checkMod();\n         return position < size;\n       }\n \n+      /**\n+       * Tests to see if there are objects prior to the\n+       * current position in the list.\n+       *\n+       * @return True if objects exist prior to the current\n+       *         position of the iterator.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public boolean hasPrevious()\n       {\n         checkMod();\n         return position > 0;\n       }\n \n+      /**\n+       * Retrieves the next object from the list.\n+       *\n+       * @return The next object.\n+       * @throws NoSuchElementException if there are no\n+       *         more objects to retrieve.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public Object next()\n       {\n         checkMod();\n@@ -432,6 +503,15 @@ public Object next()\n         return get(position++);\n       }\n \n+      /**\n+       * Retrieves the previous object from the list.\n+       *\n+       * @return The next object.\n+       * @throws NoSuchElementException if there are no\n+       *         previous objects to retrieve.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public Object previous()\n       {\n         checkMod();\n@@ -441,18 +521,47 @@ public Object previous()\n         return get(lastReturned);\n       }\n \n+      /**\n+       * Returns the index of the next element in the\n+       * list, which will be retrieved by <code>next()</code>\n+       *\n+       * @return The index of the next element.\n+       * @throws ConcurrentModificationException if the list\n+       *         has been modified elsewhere.\n+       */\n       public int nextIndex()\n       {\n         checkMod();\n         return position;\n       }\n \n+      /**\n+       * Returns the index of the previous element in the\n+       * list, which will be retrieved by <code>previous()</code>\n+       *\n+       * @return The index of the previous element.\n+       * @throws ConcurrentModificationException if the list\n+       *         has been modified elsewhere.\n+       */\n       public int previousIndex()\n       {\n         checkMod();\n         return position - 1;\n       }\n \n+     /**\n+      * Removes the last object retrieved by <code>next()</code>\n+      * or <code>previous()</code> from the list, if the list\n+      * supports object removal.\n+      *\n+      * @throws IllegalStateException if the iterator is positioned\n+      *         before the start of the list or the last object has already\n+      *         been removed.\n+      * @throws UnsupportedOperationException if the list does\n+      *         not support removing elements.\n+      * @throws ConcurrentModificationException if the list\n+      *         has been modified elsewhere.\n+      */\n       public void remove()\n       {\n         checkMod();\n@@ -465,6 +574,24 @@ public void remove()\n         knownMod = modCount;\n       }\n \n+     /**\n+      * Replaces the last object retrieved by <code>next()</code>\n+      * or <code>previous</code> with o, if the list supports object\n+      * replacement and an add or remove operation has not already\n+      * been performed.\n+      *\n+      * @throws IllegalStateException if the iterator is positioned\n+      *         before the start of the list or the last object has already\n+      *         been removed.\n+      * @throws UnsupportedOperationException if the list doesn't support\n+      *         the addition or removal of elements.\n+      * @throws ClassCastException if the type of o is not a valid type\n+      *         for this list.\n+      * @throws IllegalArgumentException if something else related to o\n+      *         prevents its addition.\n+      * @throws ConcurrentModificationException if the list\n+      *         has been modified elsewhere.\n+      */\n       public void set(Object o)\n       {\n         checkMod();\n@@ -473,6 +600,20 @@ public void set(Object o)\n         AbstractList.this.set(lastReturned, o);\n       }\n \n+      /**\n+       * Adds the supplied object before the element that would be returned\n+       * by a call to <code>next()</code>, if the list supports addition.\n+       * \n+       * @param o The object to add to the list.\n+       * @throws UnsupportedOperationException if the list doesn't support\n+       *         the addition of new elements.\n+       * @throws ClassCastException if the type of o is not a valid type\n+       *         for this list.\n+       * @throws IllegalArgumentException if something else related to o\n+       *         prevents its addition.\n+       * @throws ConcurrentModificationException if the list\n+       *         has been modified elsewhere.\n+       */\n       public void add(Object o)\n       {\n         checkMod();\n@@ -519,6 +660,8 @@ public Object remove(int index)\n    *\n    * @param fromIndex the index, inclusive, to remove from.\n    * @param toIndex the index, exclusive, to remove to.\n+   * @throws UnsupportedOperationException if the list does\n+   *         not support removing elements.\n    */\n   protected void removeRange(int fromIndex, int toIndex)\n   {\n@@ -663,7 +806,7 @@ void checkMod()\n    * it is not, an exception is thrown.\n    *\n    * @param index the value to check\n-   * @throws IndexOutOfBoundsException if the value is out of range\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt; size()\n    */\n   // This will get inlined, since it is private.\n   private void checkBoundsInclusive(int index)\n@@ -678,7 +821,7 @@ private void checkBoundsInclusive(int index)\n    * (exclusive). If it is not, an exception is thrown.\n    *\n    * @param index the value to check\n-   * @throws IndexOutOfBoundsException if the value is out of range\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt;= size()\n    */\n   // This will get inlined, since it is private.\n   private void checkBoundsExclusive(int index)\n@@ -692,6 +835,8 @@ private void checkBoundsExclusive(int index)\n    * Specified by AbstractList.subList to return the private field size.\n    *\n    * @return the sublist size\n+   * @throws ConcurrentModificationException if the backing list has been\n+   *         modified externally to this sublist\n    */\n   public int size()\n   {\n@@ -705,6 +850,15 @@ public int size()\n    * @param index the location to modify\n    * @param o the new value\n    * @return the old value\n+   * @throws ConcurrentModificationException if the backing list has been\n+   *         modified externally to this sublist\n+   * @throws UnsupportedOperationException if the backing list does not\n+   *         support the set operation\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt;= size()\n+   * @throws ClassCastException if o cannot be added to the backing list due\n+   *         to its type\n+   * @throws IllegalArgumentException if o cannot be added to the backing list\n+   *         for some other reason\n    */\n   public Object set(int index, Object o)\n   {\n@@ -718,6 +872,9 @@ public Object set(int index, Object o)\n    *\n    * @param index the location to get from\n    * @return the object at that location\n+   * @throws ConcurrentModificationException if the backing list has been\n+   *         modified externally to this sublist\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt;= size()\n    */\n   public Object get(int index)\n   {\n@@ -731,6 +888,15 @@ public Object get(int index)\n    *\n    * @param index the index to insert at\n    * @param o the object to add\n+   * @throws ConcurrentModificationException if the backing list has been\n+   *         modified externally to this sublist\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt; size()\n+   * @throws UnsupportedOperationException if the backing list does not\n+   *         support the add operation.\n+   * @throws ClassCastException if o cannot be added to the backing list due\n+   *         to its type.\n+   * @throws IllegalArgumentException if o cannot be added to the backing\n+   *         list for some other reason.\n    */\n   public void add(int index, Object o)\n   {\n@@ -746,6 +912,11 @@ public void add(int index, Object o)\n    *\n    * @param index the index to remove\n    * @return the removed object\n+   * @throws ConcurrentModificationException if the backing list has been\n+   *         modified externally to this sublist\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt;= size()\n+   * @throws UnsupportedOperationException if the backing list does not\n+   *         support the remove operation\n    */\n   public Object remove(int index)\n   {\n@@ -764,6 +935,10 @@ public Object remove(int index)\n    *\n    * @param fromIndex the lower bound, inclusive\n    * @param toIndex the upper bound, exclusive\n+   * @throws ConcurrentModificationException if the backing list has been\n+   *         modified externally to this sublist\n+   * @throws UnsupportedOperationException if the backing list does\n+   *         not support removing elements.\n    */\n   protected void removeRange(int fromIndex, int toIndex)\n   {\n@@ -780,6 +955,16 @@ protected void removeRange(int fromIndex, int toIndex)\n    * @param index the location to insert at\n    * @param c the collection to insert\n    * @return true if this list was modified, in other words, c is non-empty\n+   * @throws ConcurrentModificationException if the backing list has been\n+   *         modified externally to this sublist\n+   * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt; size()\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         addAll operation\n+   * @throws ClassCastException if some element of c cannot be added to this\n+   *         list due to its type\n+   * @throws IllegalArgumentException if some element of c cannot be added\n+   *         to this list for some other reason\n+   * @throws NullPointerException if the specified collection is null\n    */\n   public boolean addAll(int index, Collection c)\n   {\n@@ -797,6 +982,15 @@ public boolean addAll(int index, Collection c)\n    *\n    * @param c the collection to insert\n    * @return true if this list was modified, in other words, c is non-empty\n+   * @throws ConcurrentModificationException if the backing list has been\n+   *         modified externally to this sublist\n+   * @throws UnsupportedOperationException if this list does not support the\n+   *         addAll operation\n+   * @throws ClassCastException if some element of c cannot be added to this\n+   *         list due to its type\n+   * @throws IllegalArgumentException if some element of c cannot be added\n+   *         to this list for some other reason\n+   * @throws NullPointerException if the specified collection is null\n    */\n   public boolean addAll(Collection c)\n   {\n@@ -819,6 +1013,9 @@ public Iterator iterator()\n    *\n    * @param index the start location of the iterator\n    * @return a list iterator over the sublist\n+   * @throws ConcurrentModificationException if the backing list has been\n+   *         modified externally to this sublist\n+   * @throws IndexOutOfBoundsException if the value is out of range\n    */\n   public ListIterator listIterator(final int index)\n   {\n@@ -830,18 +1027,45 @@ public ListIterator listIterator(final int index)\n       private final ListIterator i = backingList.listIterator(index + offset);\n       private int position = index;\n \n+      /**\n+       * Tests to see if there are any more objects to\n+       * return.\n+       *\n+       * @return True if the end of the list has not yet been\n+       *         reached.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public boolean hasNext()\n       {\n         checkMod();\n         return position < size;\n       }\n \n+      /**\n+       * Tests to see if there are objects prior to the\n+       * current position in the list.\n+       *\n+       * @return True if objects exist prior to the current\n+       *         position of the iterator.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public boolean hasPrevious()\n       {\n         checkMod();\n         return position > 0;\n       }\n \n+      /**\n+       * Retrieves the next object from the list.\n+       *\n+       * @return The next object.\n+       * @throws NoSuchElementException if there are no\n+       *         more objects to retrieve.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public Object next()\n       {\n         if (position == size)\n@@ -850,6 +1074,15 @@ public Object next()\n         return i.next();\n       }\n \n+      /**\n+       * Retrieves the previous object from the list.\n+       *\n+       * @return The next object.\n+       * @throws NoSuchElementException if there are no\n+       *         previous objects to retrieve.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public Object previous()\n       {\n         if (position == 0)\n@@ -858,16 +1091,42 @@ public Object previous()\n         return i.previous();\n       }\n \n+      /**\n+       * Returns the index of the next element in the\n+       * list, which will be retrieved by <code>next()</code>\n+       *\n+       * @return The index of the next element.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public int nextIndex()\n       {\n         return i.nextIndex() - offset;\n       }\n \n+      /**\n+       * Returns the index of the previous element in the\n+       * list, which will be retrieved by <code>previous()</code>\n+       *\n+       * @return The index of the previous element.\n+       * @throws ConcurrentModificationException if the\n+       *         list has been modified elsewhere.\n+       */\n       public int previousIndex()\n       {\n         return i.previousIndex() - offset;\n       }\n \n+      /**\n+       * Removes the last object retrieved by <code>next()</code>\n+       * from the list, if the list supports object removal.\n+       *\n+       * @throws IllegalStateException if the iterator is positioned\n+       *         before the start of the list or the last object has already\n+       *         been removed.\n+       * @throws UnsupportedOperationException if the list does\n+       *         not support removing elements.\n+       */\n       public void remove()\n       {\n         i.remove();\n@@ -876,11 +1135,44 @@ public void remove()\n         modCount = backingList.modCount;\n       }\n \n+\n+     /**\n+      * Replaces the last object retrieved by <code>next()</code>\n+      * or <code>previous</code> with o, if the list supports object\n+      * replacement and an add or remove operation has not already\n+      * been performed.\n+      *\n+      * @throws IllegalStateException if the iterator is positioned\n+      *         before the start of the list or the last object has already\n+      *         been removed.\n+      * @throws UnsupportedOperationException if the list doesn't support\n+      *         the addition or removal of elements.\n+      * @throws ClassCastException if the type of o is not a valid type\n+      *         for this list.\n+      * @throws IllegalArgumentException if something else related to o\n+      *         prevents its addition.\n+      * @throws ConcurrentModificationException if the list\n+      *         has been modified elsewhere.\n+      */\n       public void set(Object o)\n       {\n         i.set(o);\n       }\n \n+      /**\n+       * Adds the supplied object before the element that would be returned\n+       * by a call to <code>next()</code>, if the list supports addition.\n+       * \n+       * @param o The object to add to the list.\n+       * @throws UnsupportedOperationException if the list doesn't support\n+       *         the addition of new elements.\n+       * @throws ClassCastException if the type of o is not a valid type\n+       *         for this list.\n+       * @throws IllegalArgumentException if something else related to o\n+       *         prevents its addition.\n+       * @throws ConcurrentModificationException if the list\n+       *         has been modified elsewhere.\n+       */\n       public void add(Object o)\n       {\n         i.add(o);"}, {"sha": "d27e93b65d10dbb10aa01a9f9d1746113c9af765", "filename": "libjava/java/util/AbstractMap.java", "status": "modified", "additions": 122, "deletions": 23, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FAbstractMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FAbstractMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FAbstractMap.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -91,6 +91,21 @@ protected AbstractMap()\n   {\n   }\n \n+  /**\n+   * Returns a set view of the mappings in this Map.  Each element in the\n+   * set must be an implementation of Map.Entry.  The set is backed by\n+   * the map, so that changes in one show up in the other.  Modifications\n+   * made while an iterator is in progress cause undefined behavior.  If\n+   * the set supports removal, these methods must be valid:\n+   * <code>Iterator.remove</code>, <code>Set.remove</code>,\n+   * <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code>.\n+   * Element addition is not supported via this set.\n+   *\n+   * @return the entry set\n+   * @see Map.Entry\n+   */\n+  public abstract Set entrySet();\n+\n   /**\n    * Remove all entries from this Map (optional operation). This default\n    * implementation calls entrySet().clear(). NOTE: If the entry set does\n@@ -153,8 +168,9 @@ public boolean containsKey(Object key)\n    * This implementation does a linear search, O(n), over the\n    * <code>entrySet()</code>, returning <code>true</code> if a match\n    * is found, <code>false</code> if the iteration ends. A match is\n-   * defined as <code>(value == null ? v == null : value.equals(v))</code>\n-   * Subclasses are unlikely to implement this more efficiently.\n+   * defined as a value, v, where <code>(value == null ? v == null :\n+   * value.equals(v))</code>.  Subclasses are unlikely to implement\n+   * this more efficiently.\n    *\n    * @param value the value to search for\n    * @return true if the map contains the value\n@@ -170,21 +186,6 @@ public boolean containsValue(Object value)\n     return false;\n   }\n \n-  /**\n-   * Returns a set view of the mappings in this Map.  Each element in the\n-   * set must be an implementation of Map.Entry.  The set is backed by\n-   * the map, so that changes in one show up in the other.  Modifications\n-   * made while an iterator is in progress cause undefined behavior.  If\n-   * the set supports removal, these methods must be valid:\n-   * <code>Iterator.remove</code>, <code>Set.remove</code>,\n-   * <code>removeAll</code>, <code>retainAll</code>, and <code>clear</code>.\n-   * Element addition is not supported via this set.\n-   *\n-   * @return the entry set\n-   * @see Map.Entry\n-   */\n-  public abstract Set entrySet();\n-\n   /**\n    * Compares the specified object with this map for equality. Returns\n    * <code>true</code> if the other object is a Map with the same mappings,\n@@ -277,32 +278,75 @@ public Set keySet()\n     if (keys == null)\n       keys = new AbstractSet()\n       {\n+\t/**\n+\t * Retrieves the number of keys in the backing map.\n+\t *\n+\t * @return The number of keys.\n+\t */\n         public int size()\n         {\n           return AbstractMap.this.size();\n         }\n \n+\t/**\n+\t * Returns true if the backing map contains the\n+\t * supplied key.\n+\t *\n+\t * @param key The key to search for.\n+\t * @return True if the key was found, false otherwise.\n+\t */\n         public boolean contains(Object key)\n         {\n           return containsKey(key);\n         }\n \n+\t/**\n+\t * Returns an iterator which iterates over the keys\n+\t * in the backing map, using a wrapper around the\n+\t * iterator returned by <code>entrySet()</code>.\n+\t *\n+\t * @return An iterator over the keys.\n+\t */\n         public Iterator iterator()\n         {\n           return new Iterator()\n           {\n+\t    /**\n+\t     * The iterator returned by <code>entrySet()</code>.\n+\t     */\n             private final Iterator map_iterator = entrySet().iterator();\n \n+\t    /**\n+\t     * Returns true if a call to <code>next()</code> will\n+\t     * return another key.\n+\t     *\n+\t     * @return True if the iterator has not yet reached\n+\t     *         the last key.\n+\t     */\n             public boolean hasNext()\n             {\n               return map_iterator.hasNext();\n             }\n \n+\t    /**\n+\t     * Returns the key from the next entry retrieved\n+\t     * by the underlying <code>entrySet()</code> iterator.\n+\t     *\n+\t     * @return The next key.\n+\t     */\n             public Object next()\n             {\n               return ((Map.Entry) map_iterator.next()).getKey();\n             }\n \n+\t    /**\n+\t     * Removes the map entry which has a key equal\n+\t     * to that returned by the last call to\n+\t     * <code>next()</code>.\n+\t     *\n+\t     * @throws UnsupportedOperationException if the\n+\t     *         map doesn't support removal.\n+\t     */\n             public void remove()\n             {\n               map_iterator.remove();\n@@ -343,11 +387,13 @@ public Object put(Object key, Object value)\n    *\n    * @param m the mapping to load into this map\n    * @throws UnsupportedOperationException if the operation is not supported\n-   * @throws ClassCastException if a key or value is of the wrong type\n+   *         by this map.\n+   * @throws ClassCastException if a key or value is of the wrong type for\n+   *         adding to this map.\n    * @throws IllegalArgumentException if something about a key or value\n-   *         prevents it from existing in this map\n-   * @throws NullPointerException if the map forbids null keys or values, or\n-   *         if <code>m</code> is null.\n+   *         prevents it from existing in this map.\n+   * @throws NullPointerException if the map forbids null keys or values.\n+   * @throws NullPointerException if <code>m</code> is null.\n    * @see #put(Object, Object)\n    */\n   public void putAll(Map m)\n@@ -372,7 +418,9 @@ public void putAll(Map m)\n    * implementations override it for efficiency.\n    *\n    * @param key the key to remove\n-   * @return the value the key mapped to, or null if not present\n+   * @return the value the key mapped to, or null if not present.\n+   *         Null may also be returned if null values are allowed\n+   *         in the map and the value of this mapping is null.\n    * @throws UnsupportedOperationException if deletion is unsupported\n    * @see Iterator#remove()\n    */\n@@ -461,32 +509,76 @@ public Collection values()\n     if (values == null)\n       values = new AbstractCollection()\n       {\n+\t/**\n+\t * Returns the number of values stored in\n+\t * the backing map.\n+\t *\n+\t * @return The number of values.\n+\t */\n         public int size()\n         {\n           return AbstractMap.this.size();\n         }\n \n+\t/**\n+\t * Returns true if the backing map contains\n+\t * the supplied value.\n+\t *\n+\t * @param value The value to search for.\n+\t * @return True if the value was found, false otherwise.\n+\t */\n         public boolean contains(Object value)\n         {\n           return containsValue(value);\n         }\n \n+\t/**\n+\t * Returns an iterator which iterates over the\n+\t * values in the backing map, by using a wrapper\n+\t * around the iterator returned by <code>entrySet()</code>.\n+\t *\n+\t * @return An iterator over the values.\n+\t */\n         public Iterator iterator()\n         {\n           return new Iterator()\n           {\n+\t    /**\n+\t     * The iterator returned by <code>entrySet()</code>.\n+\t     */\n             private final Iterator map_iterator = entrySet().iterator();\n \n+\t    /**\n+\t     * Returns true if a call to <code>next()</call> will\n+\t     * return another value.\n+\t     *\n+\t     * @return True if the iterator has not yet reached\n+\t     * the last value.\n+\t     */\n             public boolean hasNext()\n             {\n               return map_iterator.hasNext();\n             }\n \n+\t    /**\n+\t     * Returns the value from the next entry retrieved\n+\t     * by the underlying <code>entrySet()</code> iterator.\n+\t     *\n+\t     * @return The next value.\n+\t     */\n             public Object next()\n             {\n               return ((Map.Entry) map_iterator.next()).getValue();\n             }\n \n+\t    /**\n+\t     * Removes the map entry which has a key equal\n+\t     * to that returned by the last call to\n+\t     * <code>next()</code>.\n+\t     *\n+\t     * @throws UnsupportedOperationException if the\n+\t     *         map doesn't support removal.\n+\t     */\n             public void remove()\n             {\n               map_iterator.remove();\n@@ -533,6 +625,7 @@ static final int hashCode(Object o)\n    * @author Eric Blake <ebb9@email.byu.edu>\n    */\n   // XXX - FIXME Use fully qualified implements as gcj 3.1 workaround.\n+  //       Bug still exists in 3.4.1\n   static class BasicMapEntry implements Map.Entry\n   {\n     /**\n@@ -627,7 +720,13 @@ public final int hashCode()\n      *\n      * @param newVal the new value to store\n      * @return the old value\n-     * @throws NullPointerException if the map forbids null values\n+     * @throws NullPointerException if the map forbids null values.\n+     * @throws UnsupportedOperationException if the map doesn't support\n+     *          <code>put()</code>.\n+     * @throws ClassCastException if the value is of a type unsupported\n+     *         by the map.\n+     * @throws IllegalArgumentException if something else about this\n+     *         value prevents it being stored in the map.\n      */\n     public Object setValue(Object newVal)\n     {"}, {"sha": "0e5d59fceecbcdd1d19ba163e4aca4e7a29f7a60", "filename": "libjava/java/util/AbstractSequentialList.java", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FAbstractSequentialList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FAbstractSequentialList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FAbstractSequentialList.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -105,7 +105,9 @@ protected AbstractSequentialList()\n    * @throws ClassCastException if o cannot be added to this list due to its\n    *         type\n    * @throws IllegalArgumentException if o cannot be added to this list for\n-   *         some other reason\n+   *         some other reason.\n+   * @throws NullPointerException if o is null and the list does not permit\n+   *         the addition of null values.\n    */\n   public void add(int index, Object o)\n   {\n@@ -137,6 +139,8 @@ public void add(int index, Object o)\n    * @throws IllegalArgumentException if some element of c cannot be added\n    *         to this list for some other reason\n    * @throws NullPointerException if the specified collection is null\n+   * @throws NullPointerException if an object, o, in c is null and the list\n+   *         does not permit the addition of null values.\n    * @see #add(int, Object)\n    */\n   public boolean addAll(int index, Collection c)\n@@ -214,6 +218,8 @@ public Object remove(int index)\n    *         type\n    * @throws IllegalArgumentException if o cannot be added to this list for\n    *         some other reason\n+   * @throws NullPointerException if o is null and the list does not allow\n+   *         a value to be set to null.\n    */\n   public Object set(int index, Object o)\n   {"}, {"sha": "e39e4e0171b6cb76f16a72696e60eb86649bf904", "filename": "libjava/java/util/ArrayList.java", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FArrayList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FArrayList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrayList.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -120,7 +120,7 @@ public ArrayList(int capacity)\n   }\n \n   /**\n-   * Construct a new ArrayList with the default capcity (16).\n+   * Construct a new ArrayList with the default capacity (16).\n    */\n   public ArrayList()\n   {\n@@ -311,7 +311,8 @@ public Object get(int index)\n   }\n \n   /**\n-   * Sets the element at the specified index.\n+   * Sets the element at the specified index.  The new element, e,\n+   * can be an object of any type or null.\n    *\n    * @param index the index at which the element is being set\n    * @param e the element to be set\n@@ -328,6 +329,7 @@ public Object set(int index, Object e)\n \n   /**\n    * Appends the supplied element to the end of this list.\n+   * The element, e, can be an object of any type or null.\n    *\n    * @param e the element to be appended to this list\n    * @return true, the add will always succeed\n@@ -344,6 +346,7 @@ public boolean add(Object e)\n   /**\n    * Adds the supplied element at the specified index, shifting all\n    * elements currently at that index or higher one to the right.\n+   * The element, e, can be an object of any type or null.\n    *\n    * @param index the index at which the element is being added\n    * @param e the item being added\n@@ -397,7 +400,8 @@ public void clear()\n   /**\n    * Add each element in the supplied Collection to this List. It is undefined\n    * what happens if you modify the list while this is taking place; for\n-   * example, if the collection contains this list.\n+   * example, if the collection contains this list.  c can contain objects\n+   * of any type, as well as null values.\n    *\n    * @param c a Collection containing elements to be added to this List\n    * @return true if the list was modified, in other words c is not empty\n@@ -410,7 +414,8 @@ public boolean addAll(Collection c)\n \n   /**\n    * Add all elements in the supplied collection, inserting them beginning\n-   * at the specified index.\n+   * at the specified index.  c can contain objects of any type, as well\n+   * as null values.\n    *\n    * @param index the index at which the elements will be inserted\n    * @param c the Collection containing the elements to be inserted"}, {"sha": "bd6458def003fe00000ac567b9ffce57105e5332", "filename": "libjava/java/util/Arrays.java", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FArrays.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FArrays.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrays.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -2374,28 +2374,61 @@ private static final class ArrayList extends AbstractList\n       this.a = a;\n     }\n \n+    /**\n+     * Returns the object at the specified index in\n+     * the array.\n+     *\n+     * @param index The index to retrieve an object from.\n+     * @return The object at the array index specified.\n+     */ \n     public Object get(int index)\n     {\n       return a[index];\n     }\n \n+    /**\n+     * Returns the size of the array.\n+     *\n+     * @return The size.\n+     */\n     public int size()\n     {\n       return a.length;\n     }\n \n+    /**\n+     * Replaces the object at the specified index\n+     * with the supplied element.\n+     *\n+     * @param index The index at which to place the new object.\n+     * @return The object replaced by this operation.\n+     */\n     public Object set(int index, Object element)\n     {\n       Object old = a[index];\n       a[index] = element;\n       return old;\n     }\n \n+    /**\n+     * Returns true if the array contains the\n+     * supplied object.\n+     *\n+     * @param o The object to look for.\n+     * @return True if the object was found.\n+     */\n     public boolean contains(Object o)\n     {\n       return lastIndexOf(o) >= 0;\n     }\n \n+    /**\n+     * Returns the first index at which the\n+     * object, o, occurs in the array.\n+     *\n+     * @param o The object to search for.\n+     * @return The first relevant index.\n+     */\n     public int indexOf(Object o)\n     {\n       int size = a.length;\n@@ -2405,6 +2438,13 @@ public int indexOf(Object o)\n       return -1;\n     }\n \n+    /**\n+     * Returns the last index at which the\n+     * object, o, occurs in the array.\n+     *\n+     * @param o The object to search for.\n+     * @return The last relevant index.\n+     */\n     public int lastIndexOf(Object o)\n     {\n       int i = a.length;\n@@ -2414,11 +2454,28 @@ public int lastIndexOf(Object o)\n       return -1;\n     }\n \n+    /**\n+     * Transforms the list into an array of\n+     * objects, by simplying cloning the array\n+     * wrapped by this list.\n+     *\n+     * @return A clone of the internal array.\n+     */\n     public Object[] toArray()\n     {\n       return (Object[]) a.clone();\n     }\n \n+    /**\n+     * Copies the objects from this list into\n+     * the supplied array.  The supplied array\n+     * is shrunk or enlarged to the size of the\n+     * internal array, and filled with its objects.\n+     *\n+     * @param The array to fill with the objects in this list.\n+     * @return The array containing the objects in this list,\n+     *         which may or may not be == to array.\n+     */\n     public Object[] toArray(Object[] array)\n     {\n       int size = a.length;"}, {"sha": "f81ba1506ed85af590b209f010ba2cdb44d5e4b9", "filename": "libjava/java/util/BitSet.java", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FBitSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FBitSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FBitSet.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -133,7 +133,8 @@ public void and(BitSet bs)\n    * Performs the logical AND operation on this bit set and the\n    * complement of the given <code>set</code>.  This means it\n    * selects every element in the first set, that isn't in the\n-   * second set.  The result is stored into this bit set.\n+   * second set.  The result is stored into this bit set and is\n+   * effectively the set difference of the two.\n    *\n    * @param set the second bit set\n    * @throws NullPointerException if set is null\n@@ -210,7 +211,8 @@ public void clear(int pos)\n    *\n    * @param from the start range (inclusive)\n    * @param to the end range (exclusive)\n-   * @throws IndexOutOfBoundsException if from &lt; 0 || from &gt; to\n+   * @throws IndexOutOfBoundsException if from &lt; 0 || to &lt; 0 ||\n+   *         from &gt; to\n    * @since 1.4\n    */\n   public void clear(int from, int to)\n@@ -304,7 +306,8 @@ public void flip(int index)\n    *\n    * @param from the low index (inclusive)\n    * @param to the high index (exclusive)\n-   * @throws IndexOutOfBoundsException if from &gt; to || from &lt; 0\n+   * @throws IndexOutOfBoundsException if from &gt; to || from &lt; 0 ||\n+   *         to &lt; 0\n    * @since 1.4\n    */\n   public void flip(int from, int to)\n@@ -352,7 +355,8 @@ public boolean get(int pos)\n    *\n    * @param from the low index (inclusive)\n    * @param to the high index (exclusive)\n-   * @throws IndexOutOfBoundsException if from &gt; to || from &lt; 0\n+   * @throws IndexOutOfBoundsException if from &gt; to || from &lt; 0 ||\n+   *         to &lt; 0\n    * @since 1.4\n    */\n   public BitSet get(int from, int to)\n@@ -618,7 +622,8 @@ public void set(int index, boolean value)\n    *\n    * @param from the start range (inclusive)\n    * @param to the end range (exclusive)\n-   * @throws IndexOutOfBoundsException if from &lt; 0 || from &gt; to\n+   * @throws IndexOutOfBoundsException if from &lt; 0 || from &gt; to ||\n+   *         to &lt; 0\n    * @since 1.4\n    */\n   public void set(int from, int to)\n@@ -649,7 +654,8 @@ public void set(int from, int to)\n    * @param from the start range (inclusive)\n    * @param to the end range (exclusive)\n    * @param value the value to set it to\n-   * @throws IndexOutOfBoundsException if from &lt; 0 || from &gt; to\n+   * @throws IndexOutOfBoundsException if from &lt; 0 || from &gt; to ||\n+   *         to &lt; 0\n    * @since 1.4\n    */\n   public void set(int from, int to, boolean value)"}, {"sha": "05d48c2753c4ee45879833aec1d3248d64336a56", "filename": "libjava/java/util/Calendar.java", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FCalendar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FCalendar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCalendar.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -585,7 +585,9 @@ public void setTimeInMillis(long time)\n    * if they are invalid.\n    * @param field the time field. One of the time field constants.\n    * @return the value of the specified field\n-   *\n+   * @throws ArrayIndexOutOfBoundsException if the field is outside\n+   *         the valid range.  The value of field must be >= 0 and\n+   *         <= <code>FIELD_COUNT</code>.\n    * @specnote Not final since JDK 1.4\n    */\n   public int get(int field)\n@@ -603,6 +605,9 @@ public int get(int field)\n    * @param field the time field. One of the time field constants.\n    * @return the value of the specified field, undefined if\n    * <code>areFieldsSet</code> or <code>isSet[field]</code> is false.\n+   * @throws ArrayIndexOutOfBoundsException if the field is outside\n+   *         the valid range.  The value of field must be >= 0 and\n+   *         <= <code>FIELD_COUNT</code>.\n    */\n   protected final int internalGet(int field)\n   {\n@@ -614,7 +619,9 @@ protected final int internalGet(int field)\n    * the time in milliseconds.\n    * @param field the time field. One of the time field constants\n    * @param value the value to be set.\n-   *\n+   * @throws ArrayIndexOutOfBoundsException if field is outside\n+   *         the valid range.  The value of field must be >= 0 and\n+   *         <= <code>FIELD_COUNT</code>.\n    * @specnote Not final since JDK 1.4\n    */\n   public void set(int field, int value)\n@@ -718,6 +725,9 @@ public final void clear()\n   /**\n    * Clears the values of the specified time field.\n    * @param field the time field. One of the time field constants.\n+   * @throws ArrayIndexOutOfBoundsException if field is outside\n+   *         the valid range.  The value of field must be >= 0 and\n+   *         <= <code>FIELD_COUNT</code>.\n    */\n   public final void clear(int field)\n   {\n@@ -730,6 +740,9 @@ public final void clear(int field)\n   /**\n    * Determines if the specified field has a valid value.\n    * @return true if the specified field has a value.\n+   * @throws ArrayIndexOutOfBoundsException if the field is outside\n+   *         the valid range.  The value of field must be >= 0 and\n+   *         <= <code>FIELD_COUNT</code>.\n    */\n   public final boolean isSet(int field)\n   {\n@@ -803,6 +816,9 @@ public boolean after(Object o)\n    * it does what you expect: Jan, 25 + 10 Days is Feb, 4.\n    * @param field the time field. One of the time field constants.\n    * @param amount the amount of time.\n+   * @throws ArrayIndexOutOfBoundsException if the field is outside\n+   *         the valid range.  The value of field must be >= 0 and\n+   *         <= <code>FIELD_COUNT</code>.\n    */\n   public abstract void add(int field, int amount);\n \n@@ -817,6 +833,9 @@ public boolean after(Object o)\n    * The date June, 31 is automatically converted to July, 1.\n    * @param field the time field. One of the time field constants.\n    * @param up the direction, true for up, false for down.\n+   * @throws ArrayIndexOutOfBoundsException if the field is outside\n+   *         the valid range.  The value of field must be >= 0 and\n+   *         <= <code>FIELD_COUNT</code>.\n    */\n   public abstract void roll(int field, boolean up);\n \n@@ -830,6 +849,9 @@ public boolean after(Object o)\n    * @param field the time field. One of the time field constants.\n    * @param amount the amount to roll by, positive for rolling up,\n    * negative for rolling down.  \n+   * @throws ArrayIndexOutOfBoundsException if the field is outside\n+   *         the valid range.  The value of field must be >= 0 and\n+   *         <= <code>FIELD_COUNT</code>.\n    * @since JDK1.2\n    */\n   public void roll(int field, int amount)\n@@ -965,6 +987,9 @@ public int getMinimalDaysInFirstWeek()\n    * This value is dependent on the values of the other fields.\n    * @param field the time field. One of the time field constants.\n    * @return the actual minimum value.\n+   * @throws ArrayIndexOutOfBoundsException if the field is outside\n+   *         the valid range.  The value of field must be >= 0 and\n+   *         <= <code>FIELD_COUNT</code>.\n    * @since jdk1.2\n    */\n   public int getActualMinimum(int field)\n@@ -988,6 +1013,9 @@ public int getActualMinimum(int field)\n    * This value is dependent on the values of the other fields.\n    * @param field the time field. One of the time field constants.\n    * @return the actual maximum value.  \n+   * @throws ArrayIndexOutOfBoundsException if the field is outside\n+   *         the valid range.  The value of field must be >= 0 and\n+   *         <= <code>FIELD_COUNT</code>.\n    * @since jdk1.2\n    */\n   public int getActualMaximum(int field)"}, {"sha": "be500b20086c1394b1acb584989c1bf6766ca1c4", "filename": "libjava/java/util/Collection.java", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FCollection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FCollection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCollection.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -223,6 +223,7 @@\n    * Remove all elements of a given collection from this collection. That is,\n    * remove every element e such that c.contains(e).\n    *\n+   * @param c The collection of objects to be removed.\n    * @return true if this collection was modified as a result of this call.\n    * @throws UnsupportedOperationException if this collection does not\n    *   support the removeAll operation.\n@@ -238,6 +239,7 @@\n    * Remove all elements of this collection that are not contained in a given\n    * collection. That is, remove every element e such that !c.contains(e).\n    *\n+   * @param c The collection of objects to be retained.\n    * @return true if this collection was modified as a result of this call.\n    * @throws UnsupportedOperationException if this collection does not\n    *   support the retainAll operation."}, {"sha": "6d53469ec9902cafe099ed37e493a9ed07a5d2a0", "filename": "libjava/java/util/ListIterator.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FListIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FListIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FListIterator.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -127,12 +127,12 @@ public interface ListIterator extends Iterator\n    * by nextIndex() and previousIndex() are incremented.\n    *\n    * @param o the object to insert into the list\n-   * @throws ClassCastException the object is of a type which cannot be added\n-   *         to this list\n-   * @throws IllegalArgumentException some other aspect of the object stops\n-   *         it being added to this list\n+   * @throws ClassCastException if the object is of a type which cannot be added\n+   *         to this list.\n+   * @throws IllegalArgumentException if some other aspect of the object stops\n+   *         it being added to this list.\n    * @throws UnsupportedOperationException if this ListIterator does not\n-   *         support the add operation\n+   *         support the add operation.\n    */\n   void add(Object o);\n "}, {"sha": "093e13d215d1a193cdbe7a54fd721e57d8e44808", "filename": "libjava/java/util/Map.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FMap.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -227,7 +227,7 @@\n    * null values may also return null if the key was removed.\n    *\n    * @param key the key to remove\n-   * @return the value the key mapped to, or null if not present\n+   * @return the value the key mapped to, or null if not present.\n    * @throws UnsupportedOperationException if deletion is unsupported\n    * @throws NullPointerException if the key is null and this map doesn't\n    *         support null keys."}, {"sha": "415e95f8f18d399a26db83ecab271f6c322f1fb3", "filename": "libjava/java/util/SortedSet.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FSortedSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477a21f7f9b31c687d45f1001dd93c90df52cf29/libjava%2Fjava%2Futil%2FSortedSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSortedSet.java?ref=477a21f7f9b31c687d45f1001dd93c90df52cf29", "patch": "@@ -50,7 +50,7 @@\n  * <code>k1.compareTo(k2)</code> or <code>comparator.compare(k1, k2)</code>\n  * must not throw a ClassCastException. The ordering must be <i>consistent\n  * with equals</i> (see {@link Comparator} for this definition), if the\n- * map is to obey the general contract of the Set interface.  If not,\n+ * set is to obey the general contract of the Set interface.  If not,\n  * the results are well-defined, but probably not what you wanted.\n  * <p>\n  *\n@@ -85,7 +85,7 @@ public interface SortedSet extends Set\n   Comparator comparator();\n \n   /**\n-   * Returns the first (lowest sorted) element in the map.\n+   * Returns the first (lowest sorted) element in the set.\n    *\n    * @return the first element\n    * @throws NoSuchElementException if the set is empty.\n@@ -110,13 +110,13 @@ public interface SortedSet extends Set\n    *         contents\n    * @throws IllegalArgumentException if this is a subSet, and toElement is out\n    *         of range\n-   * @throws NullPointerException if toElement is null but the map does not\n+   * @throws NullPointerException if toElement is null but the set does not\n    *         allow null elements\n    */\n   SortedSet headSet(Object toElement);\n \n   /**\n-   * Returns the last (highest sorted) element in the map.\n+   * Returns the last (highest sorted) element in the set.\n    *\n    * @return the last element\n    * @throws NoSuchElementException if the set is empty."}]}