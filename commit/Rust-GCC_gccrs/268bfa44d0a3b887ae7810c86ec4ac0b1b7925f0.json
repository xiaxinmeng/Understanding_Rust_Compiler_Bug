{"sha": "268bfa44d0a3b887ae7810c86ec4ac0b1b7925f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY4YmZhNDRkMGEzYjg4N2FlNzgxMGM4NmVjNGFjMGIxYjc5MjVmMA==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1995-12-16T03:06:44Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1995-12-16T03:06:44Z"}, "message": "Use TARGET* macros.\n\nFrom-SVN: r10742", "tree": {"sha": "27e1bbc28ec9833849dd46fc2b6ce9ad219d9516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27e1bbc28ec9833849dd46fc2b6ce9ad219d9516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/268bfa44d0a3b887ae7810c86ec4ac0b1b7925f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268bfa44d0a3b887ae7810c86ec4ac0b1b7925f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/268bfa44d0a3b887ae7810c86ec4ac0b1b7925f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/268bfa44d0a3b887ae7810c86ec4ac0b1b7925f0/comments", "author": null, "committer": null, "parents": [{"sha": "c8c5cb99dedcbeca5018458cb76bd95479aa2d50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8c5cb99dedcbeca5018458cb76bd95479aa2d50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8c5cb99dedcbeca5018458cb76bd95479aa2d50"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "70f6953205aaa4555c2ba5d4ee1683dc11f6b38d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/268bfa44d0a3b887ae7810c86ec4ac0b1b7925f0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/268bfa44d0a3b887ae7810c86ec4ac0b1b7925f0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=268bfa44d0a3b887ae7810c86ec4ac0b1b7925f0", "patch": "@@ -72,6 +72,12 @@\n ;; actually generating RTL.  The bCOND or sCOND (emitted immediately\n ;; after the tstM or cmp) will actually emit the tstM or cmpM.\n \n+;; Processor type -- this attribute must exactly match the processor_type\n+;; enumeration in rs6000.h.\n+\n+(define_attr \"cpu\" \"i386,i486,pentium\"\n+  (const (symbol_ref \"ix86_cpu_attr\")))\n+\n (define_insn \"tstsi_1\"\n   [(set (cc0)\n \t(match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))]\n@@ -742,22 +748,22 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n \t(match_operand:SI 1 \"general_operand\" \"g\"))]\n-  \"TARGET_386\"\n+  \"TARGET_PUSH_MEMORY\"\n   \"push%L0 %1\")\n \n-;; On a 486, it is faster to move MEM to a REG and then push, rather than\n+;; If not a 386, it is faster to move MEM to a REG and then push, rather than\n ;; push MEM directly.\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n \t(match_operand:SI 1 \"nonmemory_operand\" \"ri\"))]\n-  \"!TARGET_386 && TARGET_MOVE\"\n+  \"!TARGET_PUSH_MEMORY && TARGET_MOVE\"\n   \"push%L0 %1\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n \t(match_operand:SI 1 \"general_operand\" \"ri\"))]\n-  \"!TARGET_386 && !TARGET_MOVE\"\n+  \"!TARGET_PUSH_MEMORY && !TARGET_MOVE\"\n   \"push%L0 %1\")\n \n ;; General case of fullword move.\n@@ -819,19 +825,19 @@\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n \t(match_operand:HI 1 \"general_operand\" \"g\"))]\n-  \"TARGET_386\"\n+  \"TARGET_PUSH_MEMORY\"\n   \"push%W0 %1\")\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n \t(match_operand:HI 1 \"nonmemory_operand\" \"ri\"))]\n-  \"!TARGET_386 && TARGET_MOVE\"\n+  \"!TARGET_PUSH_MEMORY && TARGET_MOVE\"\n   \"push%W0 %1\")\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n \t(match_operand:HI 1 \"general_operand\" \"ri\"))]\n-  \"!TARGET_386 && !TARGET_MOVE\"\n+  \"!TARGET_PUSH_MEMORY && !TARGET_MOVE\"\n   \"push%W0 %1\")\n \n ;; On i486, an incl and movl are both faster than incw and movw.\n@@ -1629,7 +1635,7 @@\n   \"\"\n   \"*\n {\n-  if ((!TARGET_386 || REGNO (operands[0]) == 0)\n+  if ((TARGET_ZERO_EXTEND_WITH_AND || REGNO (operands[0]) == 0)\n       && REG_P (operands[1]) && REGNO (operands[0]) == REGNO (operands[1]))\n     {\n       rtx xops[2];\n@@ -1653,7 +1659,7 @@\n   \"\"\n   \"*\n {\n-  if ((!TARGET_386 || REGNO (operands[0]) == 0)\n+  if ((TARGET_ZERO_EXTEND_WITH_AND || REGNO (operands[0]) == 0)\n       && REG_P (operands[1]) && REGNO (operands[0]) == REGNO (operands[1]))\n     {\n       rtx xops[2];\n@@ -1677,7 +1683,7 @@\n   \"\"\n   \"*\n {\n-  if ((!TARGET_386 || REGNO (operands[0]) == 0)\n+  if ((TARGET_ZERO_EXTEND_WITH_AND || REGNO (operands[0]) == 0)\n       && REG_P (operands[1]) && REGNO (operands[0]) == REGNO (operands[1]))\n     {\n       rtx xops[2];\n@@ -3003,7 +3009,7 @@\n       if (INTVAL (operands[2]) == 0xffff && REG_P (operands[0])\n \t  && (! REG_P (operands[1])\n \t      || REGNO (operands[0]) != 0 || REGNO (operands[1]) != 0)\n-\t  && (TARGET_386 || ! rtx_equal_p (operands[0], operands[1])))\n+\t  && (!TARGET_ZERO_EXTEND_WITH_AND || ! rtx_equal_p (operands[0], operands[1])))\n \t{\n \t  /* ??? tege: Should forget CC_STATUS only if we clobber a\n \t     remembered operand.  Fix that later.  */\n@@ -3019,7 +3025,7 @@\n \t  && !(REG_P (operands[1]) && NON_QI_REG_P (operands[1]))\n \t  && (! REG_P (operands[1])\n \t      || REGNO (operands[0]) != 0 || REGNO (operands[1]) != 0)\n-\t  && (TARGET_386 || ! rtx_equal_p (operands[0], operands[1])))\n+\t  && (!TARGET_ZERO_EXTEND_WITH_AND || ! rtx_equal_p (operands[0], operands[1])))\n \t{\n \t  /* ??? tege: Should forget CC_STATUS only if we clobber a\n \t     remembered operand.  Fix that later.  */\n@@ -3676,7 +3682,7 @@\n {\n   if (REG_P (operands[0]) && REGNO (operands[0]) != REGNO (operands[1]))\n     {\n-      if (!TARGET_386 && INTVAL (operands[2]) == 1)\n+      if (TARGET_DOUBLE_WITH_ADD && INTVAL (operands[2]) == 1)\n \t{\n \t  output_asm_insn (AS2 (mov%L0,%1,%0), operands);\n \t  return AS2 (add%L0,%1,%0);\n@@ -4177,7 +4183,7 @@\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 2 \"general_operand\" \"r\"))\n \t(match_operand:SI 3 \"const_int_operand\" \"n\"))]\n-  \"TARGET_386 && GET_CODE (operands[2]) != CONST_INT\"\n+  \"TARGET_BIT_TEST && GET_CODE (operands[2]) != CONST_INT\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -4195,7 +4201,7 @@\n \t(xor:SI (ashift:SI (const_int 1)\n \t\t\t   (match_operand:SI 1 \"general_operand\" \"r\"))\n \t\t(match_operand:SI 2 \"general_operand\" \"0\")))]\n-  \"TARGET_386 && GET_CODE (operands[1]) != CONST_INT\"\n+  \"TARGET_BIT_TEST && GET_CODE (operands[1]) != CONST_INT\"\n   \"*\n {\n   CC_STATUS_INIT;\n@@ -4208,7 +4214,7 @@\n \t(xor:SI (match_operand:SI 1 \"general_operand\" \"0\")\n \t\t(ashift:SI (const_int 1)\n \t\t\t   (match_operand:SI 2 \"general_operand\" \"r\"))))]\n-  \"TARGET_386 && GET_CODE (operands[2]) != CONST_INT\"\n+  \"TARGET_BIT_TEST && GET_CODE (operands[2]) != CONST_INT\"\n   \"*\n {\n   CC_STATUS_INIT;"}]}