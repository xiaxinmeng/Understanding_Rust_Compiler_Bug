{"sha": "64a54505ec8249178b9767d1420354f8eb55de50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhNTQ1MDVlYzgyNDkxNzhiOTc2N2QxNDIwMzU0ZjhlYjU1ZGU1MA==", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2020-12-16T20:53:56Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2020-12-16T21:09:02Z"}, "message": "gcc: xtensa: rearrange DI mode constant loading\n\n2020-12-16  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\ngcc/\n\t* config/xtensa/xtensa.c (xtensa_emit_move_sequence): Try to\n\treplace 'l32r' with 'movi' + 'slli' when optimizing for size.\n\t* config/xtensa/xtensa.md (movdi): Split loading DI mode constant\n\tinto register pair into two loads of SI mode constants.", "tree": {"sha": "0ca0776456b7e9cfda17f9030eea1d60b7d2501e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ca0776456b7e9cfda17f9030eea1d60b7d2501e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64a54505ec8249178b9767d1420354f8eb55de50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a54505ec8249178b9767d1420354f8eb55de50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a54505ec8249178b9767d1420354f8eb55de50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a54505ec8249178b9767d1420354f8eb55de50/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db253e8b1dba3ec1138d1b5ea0fac361dde9ac17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db253e8b1dba3ec1138d1b5ea0fac361dde9ac17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db253e8b1dba3ec1138d1b5ea0fac361dde9ac17"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "1cdc39acfffae11b29ab33d5d10da5c2f2436085", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a54505ec8249178b9767d1420354f8eb55de50/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a54505ec8249178b9767d1420354f8eb55de50/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=64a54505ec8249178b9767d1420354f8eb55de50", "patch": "@@ -1082,6 +1082,21 @@ xtensa_emit_move_sequence (rtx *operands, machine_mode mode)\n \n       if (! TARGET_AUTO_LITPOOLS && ! TARGET_CONST16)\n \t{\n+\t  /* Try to emit MOVI + SLLI sequence, that is smaller\n+\t     than L32R + literal.  */\n+\t  if (optimize_size && mode == SImode && register_operand (dst, mode))\n+\t    {\n+\t      HOST_WIDE_INT srcval = INTVAL (src);\n+\t      int shift = ctz_hwi (srcval);\n+\n+\t      if (xtensa_simm12b (srcval >> shift))\n+\t\t{\n+\t\t  emit_move_insn (dst, GEN_INT (srcval >> shift));\n+\t\t  emit_insn (gen_ashlsi3_internal (dst, dst, GEN_INT (shift)));\n+\t\t  return 1;\n+\t\t}\n+\t    }\n+\n \t  src = force_const_mem (SImode, src);\n \t  operands[1] = src;\n \t}"}, {"sha": "5fbe4ad4af9f20d291825d4889094e05f235ec0d", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64a54505ec8249178b9767d1420354f8eb55de50/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64a54505ec8249178b9767d1420354f8eb55de50/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=64a54505ec8249178b9767d1420354f8eb55de50", "patch": "@@ -727,8 +727,23 @@\n \t(match_operand:DI 1 \"general_operand\" \"\"))]\n   \"\"\n {\n-  if (CONSTANT_P (operands[1]) && !TARGET_CONST16)\n-    operands[1] = force_const_mem (DImode, operands[1]);\n+  if (CONSTANT_P (operands[1]))\n+    {\n+      /* Split in halves if 64-bit Const-to-Reg moves\n+\t because of offering further optimization opportunities.  */\n+      if (register_operand (operands[0], DImode))\n+\t{\n+\t  rtx first, second;\n+\n+\t  split_double (operands[1], &first, &second);\n+\t  emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]), first));\n+\t  emit_insn (gen_movsi (gen_highpart (SImode, operands[0]), second));\n+\t  DONE;\n+\t}\n+\n+      if (!TARGET_CONST16)\n+\toperands[1] = force_const_mem (DImode, operands[1]);\n+    }\n \n   if (!register_operand (operands[0], DImode)\n       && !register_operand (operands[1], DImode))"}]}