{"sha": "e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmM2Y3ZmUwOGJkZDQ5MzY3ZjY4MjM5OGUxZDJmNGU2YjYwZWY4NA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-05-14T18:48:10Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-07-03T15:14:40Z"}, "message": "[OpenACC] Revert always-copyfrom behavior for 'GOMP_MAP_FORCE_FROM' in 'libgomp/oacc-mem.c:goacc_exit_data_internal'\n\nAs done for 'GOMP_MAP_FROM', also for 'GOMP_MAP_FORCE_FROM' we should only\n'gomp_copy_dev2host' if 'n->refcount == 0'.\n\nThis had gotten altered in commit 378da98fcc907d05002bcd3d6ff7951f0cf485e5\n(r279621) \"OpenACC reference count overhaul\".\n\n\tlibgomp/\n\t* oacc-mem.c (goacc_exit_data_internal): Revert always-copyfrom\n\tbehavior for 'GOMP_MAP_FORCE_FROM'.\n\t* testsuite/libgomp.oacc-c-c++-common/pr92843-1.c: Adjust XFAIL.", "tree": {"sha": "7daeaf130d495ed2cbc91131729cf2ebb96b1472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7daeaf130d495ed2cbc91131729cf2ebb96b1472"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "995aba5867b1c64b2b56a200ef16b135effe85f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995aba5867b1c64b2b56a200ef16b135effe85f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/995aba5867b1c64b2b56a200ef16b135effe85f7"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "4fb78ee963487c5a1b642c03fd32daa723490a71", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84", "patch": "@@ -1144,16 +1144,17 @@ goacc_exit_data_internal (struct gomp_device_descr *acc_dev, size_t mapnum,\n \t    else if (n->refcount > 0 && n->refcount != REFCOUNT_INFINITY)\n \t      n->refcount--;\n \n-\t    if (copyfrom\n-\t\t&& (kind != GOMP_MAP_FROM || n->refcount == 0))\n-\t      gomp_copy_dev2host (acc_dev, aq, (void *) cur_node.host_start,\n-\t\t\t\t  (void *) (n->tgt->tgt_start + n->tgt_offset\n-\t\t\t\t\t    + cur_node.host_start\n-\t\t\t\t\t    - n->host_start),\n-\t\t\t\t  cur_node.host_end - cur_node.host_start);\n-\n \t    if (n->refcount == 0)\n \t      {\n+\t\tif (copyfrom)\n+\t\t  {\n+\t\t    void *d = (void *) (n->tgt->tgt_start + n->tgt_offset\n+\t\t\t\t\t+ cur_node.host_start - n->host_start);\n+\t\t    gomp_copy_dev2host (acc_dev, aq,\n+\t\t\t\t\t(void *) cur_node.host_start, d,\n+\t\t\t\t\tcur_node.host_end - cur_node.host_start);\n+\t\t  }\n+\n \t\tif (aq)\n \t\t  /* TODO We can't do the 'is_tgt_unmapped' checking -- see the\n \t\t     'gomp_unref_tgt' comment in"}, {"sha": "78fe1402ad464fce5d4ce5a3f48254f0ef3f9314", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr92843-1.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92843-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92843-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr92843-1.c?ref=e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84", "patch": "@@ -1,10 +1,10 @@\n /* Verify that 'acc_copyout' etc. is a no-op if there's still a structured\n    reference count.  */\n \n-/* { dg-xfail-run-if \"TODO PR92843\" { *-*-* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n \n #include <assert.h>\n+#include <stdio.h>\n #include <stdlib.h>\n #include <openacc.h>\n \n@@ -135,7 +135,15 @@ test_acc_data ()\n     assert (acc_is_present (h, sizeof h));\n \n     assign_array (h, N, c1);\n+    fprintf (stderr, \"CheCKpOInT1\\n\");\n+    // { dg-output \".*CheCKpOInT1(\\n|\\r\\n|\\r)\" }\n     acc_copyout_finalize (h, sizeof h);\n+    //TODO     goacc_exit_datum: Assertion `is_tgt_unmapped || num_mappings > 1' failed.\n+    //TODO { dg-output \".*\\[Aa\\]ssert.*is_tgt_unmapped\" { target { ! openacc_host_selected } } } ! Scan for what we expect in the \"XFAILed\" case (without actually XFAILing).\n+    //TODO { dg-shouldfail \"XFAILed\" { ! openacc_host_selected } } ! ... instead of 'dg-xfail-run-if' so that 'dg-output' is evaluated at all.\n+    //TODO { dg-final { if { [dg-process-target { xfail { ! openacc_host_selected } }] == \"F\" } { xfail \"[testname-for-summary] really is XFAILed\" } } } ! ... so that we still get an XFAIL visible in the log.\n+    fprintf (stderr, \"CheCKpOInT2\\n\");\n+    // { dg-output \".CheCKpOInT2(\\n|\\r\\n|\\r)\" { target { openacc_host_selected } } }\n     assert (acc_is_present (h, sizeof h));\n     verify_array (h, N, c1);\n "}]}