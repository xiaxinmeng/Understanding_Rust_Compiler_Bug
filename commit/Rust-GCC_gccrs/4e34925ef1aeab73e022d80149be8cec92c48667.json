{"sha": "4e34925ef1aeab73e022d80149be8cec92c48667", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUzNDkyNWVmMWFlYWI3M2UwMjJkODAxNDliZThjZWM5MmM0ODY2Nw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-08-04T16:40:10Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-08-04T16:40:10Z"}, "message": "IBM Z: Remove redundant V_HW_64 mode iterator.\n\ngcc/ChangeLog:\n\n\t* config/s390/vector.md (V_HW_64): Remove mode iterator.\n\t(*vec_load_pair<mode>): Use V_HW_2 instead of V_HW_64.\n\t* config/s390/vx-builtins.md\n\t(vec_scatter_element<V_HW_2:mode>_SI): Use V_HW_2 instead of\n\tV_HW_64.", "tree": {"sha": "9188223c8e30e9cef3dff947c1f85e421f0b7c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9188223c8e30e9cef3dff947c1f85e421f0b7c3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e34925ef1aeab73e022d80149be8cec92c48667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e34925ef1aeab73e022d80149be8cec92c48667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e34925ef1aeab73e022d80149be8cec92c48667", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e34925ef1aeab73e022d80149be8cec92c48667/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aa7091befa9fdb67f7013dbd454d336a31ef71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aa7091befa9fdb67f7013dbd454d336a31ef71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aa7091befa9fdb67f7013dbd454d336a31ef71d"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "d224165366e91d558887b41e511c99b11c126f60", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e34925ef1aeab73e022d80149be8cec92c48667/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e34925ef1aeab73e022d80149be8cec92c48667/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=4e34925ef1aeab73e022d80149be8cec92c48667", "patch": "@@ -36,7 +36,6 @@\n (define_mode_iterator V_HW2 [V16QI V8HI V4SI V2DI V2DF (V4SF \"TARGET_VXE\")\n \t\t\t     (V1TF \"TARGET_VXE\") (TF \"TARGET_VXE\")])\n \n-(define_mode_iterator V_HW_64 [V2DI V2DF])\n (define_mode_iterator VT_HW_HSDT [V8HI V4SI V4SF V2DI V2DF V1TI V1TF TI TF])\n (define_mode_iterator V_HW_HSD [V8HI V4SI (V4SF \"TARGET_VXE\") V2DI V2DF])\n \n@@ -1972,9 +1971,9 @@\n })\n \n (define_insn \"*vec_load_pair<mode>\"\n-  [(set (match_operand:V_HW_64                       0 \"register_operand\" \"=v,v\")\n-\t(vec_concat:V_HW_64 (match_operand:<non_vec> 1 \"register_operand\"  \"d,v\")\n-\t\t\t    (match_operand:<non_vec> 2 \"register_operand\"  \"d,v\")))]\n+  [(set (match_operand:V_HW_2                       0 \"register_operand\" \"=v,v\")\n+\t(vec_concat:V_HW_2 (match_operand:<non_vec> 1 \"register_operand\"  \"d,v\")\n+\t\t\t   (match_operand:<non_vec> 2 \"register_operand\"  \"d,v\")))]\n   \"TARGET_VX\"\n   \"@\n    vlvgp\\t%v0,%1,%2"}, {"sha": "3e7b8541887eac756811e72a271fa3a3e76dd667", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e34925ef1aeab73e022d80149be8cec92c48667/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e34925ef1aeab73e022d80149be8cec92c48667/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=4e34925ef1aeab73e022d80149be8cec92c48667", "patch": "@@ -452,17 +452,17 @@\n \n ; A 31 bit target address is generated from 64 bit elements\n ; vsceg\n-(define_insn \"vec_scatter_element<V_HW_64:mode>_SI\"\n+(define_insn \"vec_scatter_element<V_HW_2:mode>_SI\"\n   [(set (mem:<non_vec>\n \t (plus:SI (subreg:SI\n-\t\t   (unspec:<non_vec_int> [(match_operand:V_HW_64 1 \"register_operand\"   \"v\")\n-\t\t\t\t\t  (match_operand:QI      3 \"const_mask_operand\" \"C\")]\n+\t\t   (unspec:<non_vec_int> [(match_operand:V_HW_2 1 \"register_operand\"   \"v\")\n+\t\t\t\t\t  (match_operand:QI     3 \"const_mask_operand\" \"C\")]\n \t\t\t\t\t UNSPEC_VEC_EXTRACT) 4)\n-\t\t  (match_operand:SI                              2 \"address_operand\"   \"ZQ\")))\n-\t(unspec:<non_vec> [(match_operand:V_HW_64                0 \"register_operand\"   \"v\")\n+\t\t  (match_operand:SI                             2 \"address_operand\"   \"ZQ\")))\n+\t(unspec:<non_vec> [(match_operand:V_HW_2                0 \"register_operand\"   \"v\")\n \t\t\t   (match_dup 3)] UNSPEC_VEC_EXTRACT))]\n-  \"TARGET_VX && !TARGET_64BIT && UINTVAL (operands[3]) < GET_MODE_NUNITS (<V_HW_64:MODE>mode)\"\n-  \"vsce<V_HW_64:bhfgq>\\t%v0,%O2(%v1,%R2),%3\"\n+  \"TARGET_VX && !TARGET_64BIT && UINTVAL (operands[3]) < GET_MODE_NUNITS (<V_HW_2:MODE>mode)\"\n+  \"vsce<V_HW_2:bhfgq>\\t%v0,%O2(%v1,%R2),%3\"\n   [(set_attr \"op_type\" \"VRV\")])\n \n ; Element size and target address size is the same"}]}