{"sha": "1f073c9270d23a01f59b6871f127d99d54bd6670", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwNzNjOTI3MGQyM2EwMWY1OWI2ODcxZjEyN2Q5OWQ1NGJkNjY3MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-09-05T09:12:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-09-05T09:12:07Z"}, "message": "utils.c (unchecked_convert): When the result type is a non-biased integral type with size 0...\n\n\t* gcc-interface/utils.c (unchecked_convert): When the result type is a\n\tnon-biased integral type with size 0, set the result to 0 directly.\n\nFrom-SVN: r251701", "tree": {"sha": "4da34380a93f050079a4205f3a11b72d696fe88a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4da34380a93f050079a4205f3a11b72d696fe88a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f073c9270d23a01f59b6871f127d99d54bd6670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f073c9270d23a01f59b6871f127d99d54bd6670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f073c9270d23a01f59b6871f127d99d54bd6670", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f073c9270d23a01f59b6871f127d99d54bd6670/comments", "author": null, "committer": null, "parents": [{"sha": "7ed9919dff52443091071203bf93685cf78002a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed9919dff52443091071203bf93685cf78002a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed9919dff52443091071203bf93685cf78002a3"}], "stats": {"total": 61, "additions": 47, "deletions": 14}, "files": [{"sha": "0dbc77918de8549f24c5f69b4dac90b465967244", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f073c9270d23a01f59b6871f127d99d54bd6670/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f073c9270d23a01f59b6871f127d99d54bd6670/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1f073c9270d23a01f59b6871f127d99d54bd6670", "patch": "@@ -1,3 +1,8 @@\n+2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (unchecked_convert): When the result type is a\n+\tnon-biased integral type with size 0, set the result to 0 directly.\n+\n 2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (renaming_from_generic_instantiation_p): Turn to"}, {"sha": "1c83a08d5bdd63885500a9f0c908aff5a8e6260c", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f073c9270d23a01f59b6871f127d99d54bd6670/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f073c9270d23a01f59b6871f127d99d54bd6670/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=1f073c9270d23a01f59b6871f127d99d54bd6670", "patch": "@@ -5257,20 +5257,26 @@ unchecked_convert (tree type, tree expr, bool notrunc_p)\n \t\t\t\t\t? TYPE_RM_SIZE (etype)\n \t\t\t\t\t: TYPE_SIZE (etype)) == 0)))\n     {\n-      tree base_type\n-\t= gnat_type_for_size (TREE_INT_CST_LOW (TYPE_SIZE (type)),\n-\t\t\t      type_unsigned_for_rm (type));\n-      tree shift_expr\n-\t= convert (base_type,\n-\t\t   size_binop (MINUS_EXPR,\n-\t\t\t       TYPE_SIZE (type), TYPE_RM_SIZE (type)));\n-      expr\n-\t= convert (type,\n-\t\t   build_binary_op (RSHIFT_EXPR, base_type,\n-\t\t\t\t    build_binary_op (LSHIFT_EXPR, base_type,\n-\t\t\t\t\t\t     convert (base_type, expr),\n-\t\t\t\t\t\t     shift_expr),\n-\t\t\t\t    shift_expr));\n+      if (integer_zerop (TYPE_RM_SIZE (type)))\n+\texpr = build_int_cst (type, 0);\n+      else\n+\t{\n+\t  tree base_type\n+\t    = gnat_type_for_size (TREE_INT_CST_LOW (TYPE_SIZE (type)),\n+\t\t\t\t  type_unsigned_for_rm (type));\n+\t  tree shift_expr\n+\t    = convert (base_type,\n+\t\t       size_binop (MINUS_EXPR,\n+\t\t\t\t   TYPE_SIZE (type), TYPE_RM_SIZE (type)));\n+\t  expr\n+\t    = convert (type,\n+\t\t       build_binary_op (RSHIFT_EXPR, base_type,\n+\t\t\t\t        build_binary_op (LSHIFT_EXPR, base_type,\n+\t\t\t\t\t\t\t convert (base_type,\n+\t\t\t\t\t\t\t\t  expr),\n+\t\t\t\t\t\t\t shift_expr),\n+\t\t\t\t        shift_expr));\n+\t}\n     }\n \n   /* An unchecked conversion should never raise Constraint_Error.  The code"}, {"sha": "68c4076278d1f566ca238b77336c21710e193ff6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f073c9270d23a01f59b6871f127d99d54bd6670/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f073c9270d23a01f59b6871f127d99d54bd6670/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f073c9270d23a01f59b6871f127d99d54bd6670", "patch": "@@ -1,3 +1,7 @@\n+2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/uc2.ads: New test.\n+\n 2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/taft_type4.adb: New test."}, {"sha": "84d4e0432915b3dc502186c8ab5b0198b4a94807", "filename": "gcc/testsuite/gnat.dg/specs/uc2.ads", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f073c9270d23a01f59b6871f127d99d54bd6670/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fuc2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f073c9270d23a01f59b6871f127d99d54bd6670/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fuc2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fuc2.ads?ref=1f073c9270d23a01f59b6871f127d99d54bd6670", "patch": "@@ -0,0 +1,18 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O\" }\n+\n+with Ada.Unchecked_Conversion;\n+\n+package UC2 is\n+\n+  subtype Word_Type is Integer range 0 .. 0;\n+  type Arr is array (1 .. Word_Type'Size) of Boolean;\n+  pragma Pack(Arr);\n+\n+  function Conv is\n+     new Ada.Unchecked_Conversion (Source => Arr, Target => Word_Type);\n+\n+  A : Arr;\n+  W : Word_Type := Conv(A);\n+\n+end UC2;"}]}