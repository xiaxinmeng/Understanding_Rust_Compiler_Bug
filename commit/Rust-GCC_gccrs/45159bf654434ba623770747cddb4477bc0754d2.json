{"sha": "45159bf654434ba623770747cddb4477bc0754d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUxNTliZjY1NDQzNGJhNjIzNzcwNzQ3Y2RkYjQ0NzdiYzA3NTRkMg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-07-17T17:13:53Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-07-17T17:13:53Z"}, "message": "tree-optimize.c (init_tree_optimization_passes): Add pass_eliminate_useless_stores pass.\n\n2005-07-12  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-optimize.c (init_tree_optimization_passes): Add\n\tpass_eliminate_useless_stores pass.\n\t* tree-pass.h (pass_eliminate_useless_stores): New pass structure.\n\t* tree-ssa-pre.c (is_copy_stmt): New function.\n\t(follow_copies_till_vuse): Ditto.\n\t(do_eustores): Ditto.\n\t(gate_eustores): Ditto.\n\nFrom-SVN: r102112", "tree": {"sha": "5f5652ad0eca15cdf5a7021b1e6354abcb5181c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f5652ad0eca15cdf5a7021b1e6354abcb5181c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45159bf654434ba623770747cddb4477bc0754d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45159bf654434ba623770747cddb4477bc0754d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45159bf654434ba623770747cddb4477bc0754d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45159bf654434ba623770747cddb4477bc0754d2/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8caebfaaa6d4fe540490ab7e418c17eadd98529e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8caebfaaa6d4fe540490ab7e418c17eadd98529e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8caebfaaa6d4fe540490ab7e418c17eadd98529e"}], "stats": {"total": 159, "additions": 158, "deletions": 1}, "files": [{"sha": "b801c83272dd0e4aed7919cee917319a275af8c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45159bf654434ba623770747cddb4477bc0754d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45159bf654434ba623770747cddb4477bc0754d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45159bf654434ba623770747cddb4477bc0754d2", "patch": "@@ -1,3 +1,13 @@\n+2005-07-12  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-optimize.c (init_tree_optimization_passes): Add\n+\tpass_eliminate_useless_stores pass.\n+\t* tree-pass.h (pass_eliminate_useless_stores): New pass structure.\n+\t* tree-ssa-pre.c (is_copy_stmt): New function.\n+\t(follow_copies_till_vuse): Ditto.\n+\t(do_eustores): Ditto.\n+\t(gate_eustores): Ditto.\t\n+\t\n 2005-07-16  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.c (MFWRAP_SPEC): Don't wrap pthread_join or pthread_exit."}, {"sha": "edc75f1e672a9e0508f7edec9fd1f2c40b5b9729", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45159bf654434ba623770747cddb4477bc0754d2/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45159bf654434ba623770747cddb4477bc0754d2/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=45159bf654434ba623770747cddb4477bc0754d2", "patch": "@@ -479,6 +479,7 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_return_slot);\n   NEXT_PASS (pass_rename_ssa_copies);\n   NEXT_PASS (pass_early_warn_uninitialized);\n+  NEXT_PASS (pass_eliminate_useless_stores);\n \n   /* Initial scalar cleanups.  */\n   NEXT_PASS (pass_ccp);"}, {"sha": "6797ce521ff5d13268d5228aa0e487510ddd22e4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-eustores.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45159bf654434ba623770747cddb4477bc0754d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-eustores.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45159bf654434ba623770747cddb4477bc0754d2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-eustores.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-eustores.c?ref=45159bf654434ba623770747cddb4477bc0754d2", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-eustores-all\" } */\n+static int a;\n+int foo()\n+{\n+  int alocal;\n+  int b;\n+  alocal = a;\n+  b = alocal;\n+  a = b;\n+}\n+/* We should eliminate the store back to a.  */\n+/* { dg-final { scan-tree-dump-times \"Eliminating useless store\" 1 \"eustores\"} } */\n+/* { dg-final { cleanup-tree-dump \"eustores\" } } */"}, {"sha": "52df0f5af6ddfbda6d238e304883f8dd35a050cf", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45159bf654434ba623770747cddb4477bc0754d2/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45159bf654434ba623770747cddb4477bc0754d2/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=45159bf654434ba623770747cddb4477bc0754d2", "patch": "@@ -300,7 +300,6 @@ struct tree_opt_pass pass_init_datastructures =\n   0\t\t\t\t\t/* letter */\n };\n \n-\f\n void\n tree_lowering_passes (tree fn)\n {"}, {"sha": "7db3751952faabbeab557a85a4f69397aa9d5dab", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45159bf654434ba623770747cddb4477bc0754d2/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45159bf654434ba623770747cddb4477bc0754d2/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=45159bf654434ba623770747cddb4477bc0754d2", "patch": "@@ -282,6 +282,7 @@ extern struct tree_opt_pass pass_promote_statics;\n extern struct tree_opt_pass pass_return_slot;\n extern struct tree_opt_pass pass_reassoc;\n extern struct tree_opt_pass pass_rebuild_cgraph_edges;\n+extern struct tree_opt_pass pass_eliminate_useless_stores;\n \n /* IPA Passes */\n extern struct tree_opt_pass pass_ipa_inline;"}, {"sha": "67bc6d4dd5813ca19d106040be39ed8fb09309dd", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45159bf654434ba623770747cddb4477bc0754d2/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45159bf654434ba623770747cddb4477bc0754d2/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=45159bf654434ba623770747cddb4477bc0754d2", "patch": "@@ -2722,3 +2722,135 @@ struct tree_opt_pass pass_fre =\n   TODO_dump_func | TODO_ggc_collect | TODO_verify_ssa, /* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n+\n+/* Return true if T is a copy statement between two ssa names.  */\n+\n+static bool\n+is_copy_stmt (tree t)\n+{  \n+  if (!t || TREE_CODE (t) != MODIFY_EXPR)\n+    return false;\n+  if (TREE_CODE (TREE_OPERAND (t, 0)) == SSA_NAME \n+      && TREE_CODE (TREE_OPERAND (t, 1)) == SSA_NAME)\n+    return true;\n+  return false;\n+}\n+\n+/* Starting from START, walk copy statements till we hit a statement with a\n+   VUSE or a non-copy statement.  */\n+\n+static tree \n+follow_copies_till_vuse (tree start)\n+{\n+  if (is_copy_stmt (start) && ZERO_SSA_OPERANDS (start, SSA_OP_VIRTUAL_USES))\n+    {\n+      tree rhs, defstmt;\n+\n+      rhs = TREE_OPERAND (start, 1);\n+      defstmt = SSA_NAME_DEF_STMT (rhs);\n+      return follow_copies_till_vuse (defstmt);\n+    }\n+  return start;\n+}\n+\n+/* Gate and execute functions for eliminate useless stores.\t\n+   The goal here is to recognize the pattern *x = ... *x, and eliminate the\n+   store because the value hasn't changed.  Store copy/const prop won't\n+   do this because making *more* loads (IE propagating *x) is not a win, so it\n+   ignores them.  \n+   This pass is currently geared completely towards static variable store\n+   elimination.  */\n+\n+static void\n+do_eustores (void)\n+{\n+  basic_block bb;\n+  /* For each basic block\n+       For each statement (STMT) in the block\n+         if STMT is a stores of the pattern *x = y\n+           follow the chain of definitions for y, until we hit a non-copy\n+\t   statement or a statement with a vuse. \n+\t     if the statement we arrive at is a vuse of the operand we killed,\n+\t     accessed through the same memory operation, then we have a\n+\t     useless store (because it is *x = ... = *x).  */\n+\t  \n+  FOR_EACH_BB (bb)\n+    {\n+      block_stmt_iterator bsi;\n+\n+      for (bsi = bsi_start (bb);\n+\t   !bsi_end_p (bsi);)\n+\t{\n+\t  tree stmt = bsi_stmt (bsi);\n+\t  tree startat;\n+\t  tree kill;\t  \n+\t  tree found;\n+\t  \t  \n+\t  if (NUM_SSA_OPERANDS (stmt, SSA_OP_VMUSTDEF) != 1\n+\t      || TREE_CODE (stmt) != MODIFY_EXPR\n+\t      || TREE_CODE (TREE_OPERAND (stmt, 1)) != SSA_NAME)\n+\t    {\n+\t      bsi_next (&bsi);\n+\t      continue;\n+\t    }\n+\n+\t  kill = MUSTDEF_KILL (MUSTDEF_OPS (stmt)); \n+\t  startat = TREE_OPERAND (stmt, 1);\n+\t  startat = SSA_NAME_DEF_STMT (startat);\n+\t  found = follow_copies_till_vuse (startat);\n+\n+\t  if (found && TREE_CODE (found) == MODIFY_EXPR)\n+\t    {\t   \n+\n+\t      /* We want exactly one virtual use, and it should match up with\n+\t\t the use being killed.  */\n+\n+\t      if (NUM_SSA_OPERANDS (found, SSA_OP_VUSE) != 1\n+\t\t  || VUSE_OP (VUSE_OPS (found)) != kill\n+\t\t  || !operand_equal_p (TREE_OPERAND (found, 1), \n+\t\t\t\t       TREE_OPERAND (stmt, 0), 0))\n+\t\t{\n+\t\t  bsi_next (&bsi);\n+\t\t  continue;\n+\t\t}\n+\n+\t      if (dump_file)\n+\t\t{\n+\t\t  fprintf (dump_file, \"Eliminating useless store \");\n+\t\t  print_generic_stmt (dump_file, stmt, 0);\n+\t\t}\n+\t      mark_sym_for_renaming (TREE_OPERAND (stmt, 0));\n+\t      bsi_remove (&bsi);\n+\t    }\n+\t  else\n+\t    {\n+\t      bsi_next (&bsi);\n+\t      continue;\n+\t    }\n+\t}\n+    }\n+}\n+\n+static bool\n+gate_eustores(void)\n+{\n+  return flag_unit_at_a_time != 0;\n+}\n+\n+struct tree_opt_pass pass_eliminate_useless_stores =\n+{\n+  \"eustores\",\t\t\t\t/* name */\n+  gate_eustores,\t\t\t\t/* gate */\n+  do_eustores,\t\t\t\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  0,\t\t\t\t/* tv_id */\n+  PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_update_ssa | TODO_dump_func \n+  | TODO_ggc_collect | TODO_verify_ssa, /* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n+};"}]}