{"sha": "ffbaf3373c4886037e1bb16053145f1cc716c1c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiYWYzMzczYzQ4ODYwMzdlMWJiMTYwNTMxNDVmMWNjNzE2YzFjMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-05-07T13:12:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-07T13:12:02Z"}, "message": "re PR target/35714 (x86 poor code with pmaddwd)\n\n\tPR target/35714\n\t* config/i386/mmx.md (mmx_subv2sf3): New expander.\n\t(*mmx_subv2sf3): Rename from mmx_subv2sf3 insn pattern.\n\t(*mmx_eqv2sf3): Rename from mmx_eqv2sf3 insn pattern.\n\t(mmx_eqv2sf3): New expander.  Use ix86_fixup_binary_operands_no_copy\n\tto handle nonimmediate operands.\n\t(*mmx_paddwd): Rename from mmx_paddwd insn pattern.\n\t(mmx_paddwd): New expander.  Use ix86_fixup_binary_operands_no_copy\n\tto handle nonimmediate operands.\n\t(*mmx_pmulhrwv4hi3): Rename from mmx_pmulhrwv4hi3 insn pattern.\n\t(mmx_pmulhrwv4hi3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse2_umulv1siv1di3): Rename from sse2_umulv1siv1di3 insn pattern.\n\t(sse2_umulv1siv1di3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*mmx_eq<mode>3): Rename from mmx_eq<mode>3 insn pattern.\n\t(mmx_eq<mode>3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*mmx_uavgv8qi3): Rename from mmx_uavgv8qi3 insn pattern.\n\t(mmx_uavgv8qi3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*mmx_uavgv4hi3): Rename from mmx_uavgv4hi3 insn pattern.\n\t(mmx_uavgv4hi3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\n\t* config/i386/sse.md\n\t(*sse_movhlps): Rename from sse_movhlps insn pattern.\n\t(sse_movhlps): New expander.  Use ix86_fixup_binary_operands\n\tto handle nonimmediate operands.\n\t(*sse_movlhps): Rename from sse_movlhps insn pattern.\n\t(sse_movlhps): New expander.  Use ix86_fixup_binary_operands\n\tto handle nonimmediate operands.\n\t(*sse_loadhps): Rename from sse_loadhps insn pattern.\n\t(sse_loadhps): New expander.  Use ix86_fixup_binary_operands\n\tto handle nonimmediate operands.\n\t(*sse_loadlps): Rename from sse_loadlps insn pattern.\n\t(sse_loadlps): New expander.  Use ix86_fixup_binary_operands\n\tto handle nonimmediate operands.\n\t(*sse2_unpckhpd): Rename from sse2_unpckhpd insn pattern.\n\t(sse2_unpckhpd): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse2_unpcklpd): Rename from sse2_unpcklpd insn pattern.\n\t(sse2_unpcklpd): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse_loadhpd): Rename from sse_loadhpd insn pattern.\n\t(sse_loadhpd): New expander.  Use ix86_fixup_binary_operands\n\tto handle nonimmediate operands.\n\t(*sse_loadlpd): Rename from sse_loadlpd insn pattern.\n\t(sse_loadlpd): New expander.  Use ix86_fixup_binary_operands\n\tto handle nonimmediate operands.\n\t(*sse2_<plusminus_insn><mode>3): Rename from\n\tsse2_<plusminus_insn><mode>3 insn pattern.\n\t(sse2_<plusminus_insn><mode>3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse2_umulv2siv2di3): Rename from sse2_umulv2siv2di3 insn pattern.\n\t(sse2_umulv2siv2di3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse4_1_mulv2siv2di3): Rename from sse4_1_mulv2siv2di3 insn pattern.\n\t(sse4_1_mulv2siv2di3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse2_pmaddwd): Rename from sse2_pmaddwd insn pattern.\n\t(sse2_pmaddwd): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse2_eq<mode>3): Rename from sse2_eq<mode>3 insn pattern.\n\t(sse2_eq<mode>3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse4_1_eqv2di3): Rename from sse4_1_eqv2di3 insn pattern.\n\t(sse4_1_eqv2di3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse2_uavgv16qi3): Rename from sse2_uavgv16qi3 insn pattern.\n\t(sse2_uavgv16qi3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse2_uavgv16qi3): Rename from sse2_uavgv16qi3 insn pattern.\n\t(sse2_uavgv16qi3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*sse2_uavgv8hi3): Rename from sse2_uavgv8hi3 insn pattern.\n\t(sse2_uavgv8hi3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*ssse3_pmulhrswv8hi3): Rename from ssse3_pmulhrswv8hi3 insn pattern.\n\t(ssse3_pmulhrswv8hi3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\t(*ssse3_pmulhrswv4hi3): Rename from ssse3_pmulhrswv4hi3 insn pattern.\n\t(ssse3_pmulhrswv4hi3): New expander.  Use\n\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n\n\t(<sse>_vm<plusminus_insn><mode>3): Do not use ix86_binary_operator_ok.\n\t(<sse>_vmmul<mode>3): Ditto.\n\t(divv4sf3): Do not use ix86_fixup_binary_operands_no_copy.\n\t(divv2df3): Ditto.\n\t(ssse3_pmaddubsw128): Use register_operand for operand 1.\n\t(ssse3_pmaddubsw): Ditto.\n\n\t* config/i386/sse.md (ix86_fixup_binary_operands): Assert that src1\n\tand src2 must have the same mode when swapped.\n\t(ix86_expand_binop_builtin): Do not use ix86_fixup_binary_operands\n\tand ix86_binary_operator_ok.  Do not force operands in registers\n\twhen optimizing.\n\ntestsuite/ChangeLog:\n\n\tPR target/35714\n\t* gcc.target/i386/pr35714.c: New test.\n\nFrom-SVN: r135041", "tree": {"sha": "9189791ddc15c9eb4065f11dc04bbe83a88aa702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9189791ddc15c9eb4065f11dc04bbe83a88aa702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffbaf3373c4886037e1bb16053145f1cc716c1c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffbaf3373c4886037e1bb16053145f1cc716c1c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffbaf3373c4886037e1bb16053145f1cc716c1c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffbaf3373c4886037e1bb16053145f1cc716c1c1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a273a425372017288e758c59f6ab0a7304d80d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a273a425372017288e758c59f6ab0a7304d80d81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a273a425372017288e758c59f6ab0a7304d80d81"}], "stats": {"total": 612, "additions": 539, "deletions": 73}, "files": [{"sha": "441f09edd42be54b7b576bb9ebd2d966b96913bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffbaf3373c4886037e1bb16053145f1cc716c1c1", "patch": "@@ -1,3 +1,103 @@\n+2008-05-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/35714\n+\t* config/i386/mmx.md (mmx_subv2sf3): New expander.\n+\t(*mmx_subv2sf3): Rename from mmx_subv2sf3 insn pattern.\n+\t(*mmx_eqv2sf3): Rename from mmx_eqv2sf3 insn pattern.\n+\t(mmx_eqv2sf3): New expander.  Use ix86_fixup_binary_operands_no_copy\n+\tto handle nonimmediate operands.\n+\t(*mmx_paddwd): Rename from mmx_paddwd insn pattern.\n+\t(mmx_paddwd): New expander.  Use ix86_fixup_binary_operands_no_copy\n+\tto handle nonimmediate operands.\n+\t(*mmx_pmulhrwv4hi3): Rename from mmx_pmulhrwv4hi3 insn pattern.\n+\t(mmx_pmulhrwv4hi3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse2_umulv1siv1di3): Rename from sse2_umulv1siv1di3 insn pattern.\n+\t(sse2_umulv1siv1di3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*mmx_eq<mode>3): Rename from mmx_eq<mode>3 insn pattern.\n+\t(mmx_eq<mode>3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*mmx_uavgv8qi3): Rename from mmx_uavgv8qi3 insn pattern.\n+\t(mmx_uavgv8qi3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*mmx_uavgv4hi3): Rename from mmx_uavgv4hi3 insn pattern.\n+\t(mmx_uavgv4hi3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\n+\t* config/i386/sse.md\n+\t(*sse_movhlps): Rename from sse_movhlps insn pattern.\n+\t(sse_movhlps): New expander.  Use ix86_fixup_binary_operands\n+\tto handle nonimmediate operands.\n+\t(*sse_movlhps): Rename from sse_movlhps insn pattern.\n+\t(sse_movlhps): New expander.  Use ix86_fixup_binary_operands\n+\tto handle nonimmediate operands.\n+\t(*sse_loadhps): Rename from sse_loadhps insn pattern.\n+\t(sse_loadhps): New expander.  Use ix86_fixup_binary_operands\n+\tto handle nonimmediate operands.\n+\t(*sse_loadlps): Rename from sse_loadlps insn pattern.\n+\t(sse_loadlps): New expander.  Use ix86_fixup_binary_operands\n+\tto handle nonimmediate operands.\n+\t(*sse2_unpckhpd): Rename from sse2_unpckhpd insn pattern.\n+\t(sse2_unpckhpd): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse2_unpcklpd): Rename from sse2_unpcklpd insn pattern.\n+\t(sse2_unpcklpd): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse_loadhpd): Rename from sse_loadhpd insn pattern.\n+\t(sse_loadhpd): New expander.  Use ix86_fixup_binary_operands\n+\tto handle nonimmediate operands.\n+\t(*sse_loadlpd): Rename from sse_loadlpd insn pattern.\n+\t(sse_loadlpd): New expander.  Use ix86_fixup_binary_operands\n+\tto handle nonimmediate operands.\n+\t(*sse2_<plusminus_insn><mode>3): Rename from\n+\tsse2_<plusminus_insn><mode>3 insn pattern.\n+\t(sse2_<plusminus_insn><mode>3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse2_umulv2siv2di3): Rename from sse2_umulv2siv2di3 insn pattern.\n+\t(sse2_umulv2siv2di3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse4_1_mulv2siv2di3): Rename from sse4_1_mulv2siv2di3 insn pattern.\n+\t(sse4_1_mulv2siv2di3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse2_pmaddwd): Rename from sse2_pmaddwd insn pattern.\n+\t(sse2_pmaddwd): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse2_eq<mode>3): Rename from sse2_eq<mode>3 insn pattern.\n+\t(sse2_eq<mode>3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse4_1_eqv2di3): Rename from sse4_1_eqv2di3 insn pattern.\n+\t(sse4_1_eqv2di3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse2_uavgv16qi3): Rename from sse2_uavgv16qi3 insn pattern.\n+\t(sse2_uavgv16qi3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse2_uavgv16qi3): Rename from sse2_uavgv16qi3 insn pattern.\n+\t(sse2_uavgv16qi3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*sse2_uavgv8hi3): Rename from sse2_uavgv8hi3 insn pattern.\n+\t(sse2_uavgv8hi3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*ssse3_pmulhrswv8hi3): Rename from ssse3_pmulhrswv8hi3 insn pattern.\n+\t(ssse3_pmulhrswv8hi3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\t(*ssse3_pmulhrswv4hi3): Rename from ssse3_pmulhrswv4hi3 insn pattern.\n+\t(ssse3_pmulhrswv4hi3): New expander.  Use\n+\tix86_fixup_binary_operands_no_copy to handle nonimmediate operands.\n+\n+\t(<sse>_vm<plusminus_insn><mode>3): Do not use ix86_binary_operator_ok.\n+\t(<sse>_vmmul<mode>3): Ditto.\n+\t(divv4sf3): Do not use ix86_fixup_binary_operands_no_copy.\n+\t(divv2df3): Ditto.\n+\t(ssse3_pmaddubsw128): Use register_operand for operand 1.\n+\t(ssse3_pmaddubsw): Ditto.\n+\n+\t* config/i386/sse.md (ix86_fixup_binary_operands): Assert that src1\n+\tand src2 must have the same mode when swapped.\n+\t(ix86_expand_binop_builtin): Do not use ix86_fixup_binary_operands\n+\tand ix86_binary_operator_ok.  Do not force operands in registers\n+\twhen optimizing.\n+\n 2008-05-07  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (dump_cgraph_node): Update."}, {"sha": "678e7a567c16596e010ab923be50940d2ead39cd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ffbaf3373c4886037e1bb16053145f1cc716c1c1", "patch": "@@ -10689,7 +10689,12 @@ ix86_fixup_binary_operands (enum rtx_code code, enum machine_mode mode,\n   /* Canonicalize operand order.  */\n   if (ix86_swap_binary_operands_p (code, mode, operands))\n     {\n-      rtx temp = src1;\n+      rtx temp;\n+\n+      /* It is invalid to swap operands of different modes.  */\n+      gcc_assert (GET_MODE (src1) == GET_MODE (src2));\n+\n+      temp = src1;\n       src1 = src2;\n       src2 = temp;\n     }\n@@ -20128,7 +20133,7 @@ safe_vector_operand (rtx x, enum machine_mode mode)\n static rtx\n ix86_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n {\n-  rtx pat, xops[3];\n+  rtx pat;\n   tree arg0 = CALL_EXPR_ARG (exp, 0);\n   tree arg1 = CALL_EXPR_ARG (exp, 1);\n   rtx op0 = expand_normal (arg0);\n@@ -20159,30 +20164,12 @@ ix86_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n   if (!(*insn_data[icode].operand[2].predicate) (op1, mode1))\n     op1 = copy_to_mode_reg (mode1, op1);\n \n-  /* ??? Using ix86_fixup_binary_operands is problematic when\n-     we've got mismatched modes.  Fake it.  */\n-\n-  xops[0] = target;\n-  xops[1] = op0;\n-  xops[2] = op1;\n-\n-  if (tmode == mode0 && tmode == mode1)\n-    {\n-      target = ix86_fixup_binary_operands (UNKNOWN, tmode, xops);\n-      op0 = xops[1];\n-      op1 = xops[2];\n-    }\n-  else if (optimize || !ix86_binary_operator_ok (UNKNOWN, tmode, xops))\n-    {\n-      op0 = force_reg (mode0, op0);\n-      op1 = force_reg (mode1, op1);\n-      target = gen_reg_rtx (tmode);\n-    }\n-\n   pat = GEN_FCN (icode) (target, op0, op1);\n   if (! pat)\n     return 0;\n+\n   emit_insn (pat);\n+\n   return target;\n }\n "}, {"sha": "0a507e07a2f388e7fc4a817aed2674bb4ba9c369", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 131, "deletions": 23, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=ffbaf3373c4886037e1bb16053145f1cc716c1c1", "patch": "@@ -229,7 +229,21 @@\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"mode\" \"V2SF\")])\n \n-(define_insn \"mmx_subv2sf3\"\n+(define_expand \"mmx_subv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n+        (minus:V2SF (match_operand:V2SF 1 \"register_operand\" \"\")\n+\t\t    (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_3DNOW\"\n+  \"\")\n+\n+(define_expand \"mmx_subrv2sf3\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n+        (minus:V2SF (match_operand:V2SF 2 \"register_operand\" \"\")\n+\t\t    (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_3DNOW\"\n+  \"\")\n+\n+(define_insn \"*mmx_subv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\" \"=y,y\")\n         (minus:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"0,ym\")\n \t\t    (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym,0\")))]\n@@ -240,13 +254,6 @@\n   [(set_attr \"type\" \"mmxadd\")\n    (set_attr \"mode\" \"V2SF\")])\n \n-(define_expand \"mmx_subrv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n-        (minus:V2SF (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")\n-\t\t    (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_3DNOW && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n-  \"\")\n-\n (define_expand \"mmx_mulv2sf3\"\n   [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n \t(mult:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")\n@@ -403,6 +410,22 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n+(define_expand \"mmx_eqv2sf3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"\")\n+\t(eq:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")\n+\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_3DNOW\"\n+  \"ix86_fixup_binary_operands_no_copy (EQ, V2SFmode, operands);\")\n+\n+(define_insn \"*mmx_eqv2sf3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+\t(eq:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n+\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n+  \"TARGET_3DNOW && ix86_binary_operator_ok (EQ, V2SFmode, operands)\"\n+  \"pfcmpeq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"mmxcmp\")\n+   (set_attr \"mode\" \"V2SF\")])\n+\n (define_insn \"mmx_gtv2sf3\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n \t(gt:V2SI (match_operand:V2SF 1 \"register_operand\" \"0\")\n@@ -421,15 +444,6 @@\n   [(set_attr \"type\" \"mmxcmp\")\n    (set_attr \"mode\" \"V2SF\")])\n \n-(define_insn \"mmx_eqv2sf3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n-\t(eq:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\" \"%0\")\n-\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_3DNOW && ix86_binary_operator_ok (EQ, V2SFmode, operands)\"\n-  \"pfcmpeq\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxcmp\")\n-   (set_attr \"mode\" \"V2SF\")])\n-\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel single-precision floating point conversion operations\n@@ -702,7 +716,29 @@\n   [(set_attr \"type\" \"mmxmul\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"mmx_pmaddwd\"\n+(define_expand \"mmx_pmaddwd\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"\")\n+        (plus:V2SI\n+\t  (mult:V2SI\n+\t    (sign_extend:V2SI\n+\t      (vec_select:V2HI\n+\t\t(match_operand:V4HI 1 \"nonimmediate_operand\" \"\")\n+\t\t(parallel [(const_int 0) (const_int 2)])))\n+\t    (sign_extend:V2SI\n+\t      (vec_select:V2HI\n+\t\t(match_operand:V4HI 2 \"nonimmediate_operand\" \"\")\n+\t\t(parallel [(const_int 0) (const_int 2)]))))\n+\t  (mult:V2SI\n+\t    (sign_extend:V2SI\n+\t      (vec_select:V2HI (match_dup 1)\n+\t\t(parallel [(const_int 1) (const_int 3)])))\n+\t    (sign_extend:V2SI\n+\t      (vec_select:V2HI (match_dup 2)\n+\t\t(parallel [(const_int 1) (const_int 3)]))))))]\n+  \"TARGET_MMX\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V4HImode, operands);\")\n+\n+(define_insn \"*mmx_pmaddwd\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n         (plus:V2SI\n \t  (mult:V2SI\n@@ -726,7 +762,23 @@\n   [(set_attr \"type\" \"mmxmul\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"mmx_pmulhrwv4hi3\"\n+(define_expand \"mmx_pmulhrwv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+\t(truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (plus:V4SI\n+\t      (mult:V4SI\n+\t        (sign_extend:V4SI\n+\t\t  (match_operand:V4HI 1 \"nonimmediate_operand\" \"\"))\n+\t        (sign_extend:V4SI\n+\t\t  (match_operand:V4HI 2 \"nonimmediate_operand\" \"\")))\n+\t      (const_vector:V4SI [(const_int 32768) (const_int 32768)\n+\t\t\t\t  (const_int 32768) (const_int 32768)]))\n+\t    (const_int 16))))]\n+  \"TARGET_3DNOW\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V4HImode, operands);\")\n+\n+(define_insn \"*mmx_pmulhrwv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n \t(truncate:V4HI\n \t  (lshiftrt:V4SI\n@@ -744,7 +796,21 @@\n   [(set_attr \"type\" \"mmxmul\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"sse2_umulv1siv1di3\"\n+(define_expand \"sse2_umulv1siv1di3\"\n+  [(set (match_operand:V1DI 0 \"register_operand\" \"\")\n+        (mult:V1DI\n+\t  (zero_extend:V1DI\n+\t    (vec_select:V1SI\n+\t      (match_operand:V2SI 1 \"nonimmediate_operand\" \"\")\n+\t      (parallel [(const_int 0)])))\n+\t  (zero_extend:V1DI\n+\t    (vec_select:V1SI\n+\t      (match_operand:V2SI 2 \"nonimmediate_operand\" \"\")\n+\t      (parallel [(const_int 0)])))))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V2SImode, operands);\")\n+\n+(define_insn \"*sse2_umulv1siv1di3\"\n   [(set (match_operand:V1DI 0 \"register_operand\" \"=y\")\n         (mult:V1DI\n \t  (zero_extend:V1DI\n@@ -834,7 +900,15 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"mmx_eq<mode>3\"\n+(define_expand \"mmx_eq<mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"\")\n+        (eq:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_MMX\"\n+  \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n+\n+(define_insn \"*mmx_eq<mode>3\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y\")\n         (eq:MMXMODEI\n \t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"%0\")\n@@ -1275,7 +1349,25 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"mmx_uavgv8qi3\"\n+(define_expand \"mmx_uavgv8qi3\"\n+  [(set (match_operand:V8QI 0 \"register_operand\" \"\")\n+\t(truncate:V8QI\n+\t  (lshiftrt:V8HI\n+\t    (plus:V8HI\n+\t      (plus:V8HI\n+\t\t(zero_extend:V8HI\n+\t\t  (match_operand:V8QI 1 \"nonimmediate_operand\" \"\"))\n+\t\t(zero_extend:V8HI\n+\t\t  (match_operand:V8QI 2 \"nonimmediate_operand\" \"\")))\n+\t      (const_vector:V8HI [(const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"TARGET_SSE || TARGET_3DNOW\"\n+  \"ix86_fixup_binary_operands_no_copy (PLUS, V8QImode, operands);\")\n+\n+(define_insn \"*mmx_uavgv8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n \t(truncate:V8QI\n \t  (lshiftrt:V8HI\n@@ -1303,7 +1395,23 @@\n   [(set_attr \"type\" \"mmxshft\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"mmx_uavgv4hi3\"\n+(define_expand \"mmx_uavgv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+\t(truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (plus:V4SI\n+\t      (plus:V4SI\n+\t\t(zero_extend:V4SI\n+\t\t  (match_operand:V4HI 1 \"nonimmediate_operand\" \"\"))\n+\t\t(zero_extend:V4SI\n+\t\t  (match_operand:V4HI 2 \"nonimmediate_operand\" \"\")))\n+\t      (const_vector:V4SI [(const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"TARGET_SSE || TARGET_3DNOW_A\"\n+  \"ix86_fixup_binary_operands_no_copy (PLUS, V4HImode, operands);\")\n+\n+(define_insn \"*mmx_uavgv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n \t(truncate:V4HI\n \t  (lshiftrt:V4SI"}, {"sha": "69e498e2220dd982ad449deca909bd4d43c8bcac", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 276, "deletions": 28, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ffbaf3373c4886037e1bb16053145f1cc716c1c1", "patch": "@@ -329,8 +329,7 @@\n \t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n-  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\n-   && ix86_binary_operator_ok (<CODE>, V4SFmode, operands)\"\n+  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n   \"<plusminus_mnemonic>s<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n@@ -362,8 +361,7 @@\n \t    (match_operand:SSEMODEF2P 2 \"nonimmediate_operand\" \"xm\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n-  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\n-   && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n+  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n   \"muls<ssemodesuffixf2c>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ssemul\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n@@ -374,8 +372,6 @@\n \t\t  (match_operand:V4SF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE\"\n {\n-  ix86_fixup_binary_operands_no_copy (DIV, V4SFmode, operands);\n-\n   if (TARGET_SSE_MATH && TARGET_RECIP && !optimize_size\n       && flag_finite_math_only && !flag_trapping_math\n       && flag_unsafe_math_optimizations)\n@@ -391,7 +387,7 @@\n \t(div:V2DF (match_operand:V2DF 1 \"register_operand\" \"\")\n \t\t  (match_operand:V2DF 2 \"nonimmediate_operand\" \"\")))]\n   \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (DIV, V2DFmode, operands);\")\n+  \"\")\n \n (define_insn \"<sse>_div<mode>3\"\n   [(set (match_operand:SSEMODEF2P 0 \"register_operand\" \"=x\")\n@@ -1996,7 +1992,20 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"sse_movhlps\"\n+(define_expand \"sse_movhlps\"\n+  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")\n+\t(vec_select:V4SF\n+\t  (vec_concat:V8SF\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"\")\n+\t    (match_operand:V4SF 2 \"nonimmediate_operand\" \"\"))\n+\t  (parallel [(const_int 6)\n+\t\t     (const_int 7)\n+\t\t     (const_int 2)\n+\t\t     (const_int 3)])))]\n+  \"TARGET_SSE\"\n+  \"ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\")\n+\n+(define_insn \"*sse_movhlps\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\"     \"=x,x,m\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n@@ -2014,7 +2023,20 @@\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"V4SF,V2SF,V2SF\")])\n \n-(define_insn \"sse_movlhps\"\n+(define_expand \"sse_movlhps\"\n+  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")\n+\t(vec_select:V4SF\n+\t  (vec_concat:V8SF\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"\")\n+\t    (match_operand:V4SF 2 \"nonimmediate_operand\" \"\"))\n+\t  (parallel [(const_int 0)\n+\t\t     (const_int 1)\n+\t\t     (const_int 4)\n+\t\t     (const_int 5)])))]\n+  \"TARGET_SSE\"\n+  \"ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\")\n+\n+(define_insn \"*sse_movlhps\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\"     \"=x,x,o\")\n \t(vec_select:V4SF\n \t  (vec_concat:V8SF\n@@ -2145,7 +2167,17 @@\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n \n-(define_insn \"sse_loadhps\"\n+(define_expand \"sse_loadhps\"\n+  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")\n+\t(vec_concat:V4SF\n+\t  (vec_select:V2SF\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"\")\n+\t    (parallel [(const_int 0) (const_int 1)]))\n+\t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE\"\n+  \"ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\")\n+\n+(define_insn \"*sse_loadhps\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=x,x,o\")\n \t(vec_concat:V4SF\n \t  (vec_select:V2SF\n@@ -2173,7 +2205,17 @@\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n \n-(define_insn \"sse_loadlps\"\n+(define_expand \"sse_loadlps\"\n+  [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"\")\n+\t(vec_concat:V4SF\n+\t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")\n+\t  (vec_select:V2SF\n+\t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"\")\n+\t    (parallel [(const_int 2) (const_int 3)]))))]\n+  \"TARGET_SSE\"\n+  \"ix86_fixup_binary_operands (UNKNOWN, V4SFmode, operands);\")\n+\n+(define_insn \"*sse_loadlps\"\n   [(set (match_operand:V4SF 0 \"nonimmediate_operand\" \"=x,x,m\")\n \t(vec_concat:V4SF\n \t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"0,m,x\")\n@@ -2379,7 +2421,18 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"sse2_unpckhpd\"\n+(define_expand \"sse2_unpckhpd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"\")\n+\t(vec_select:V2DF\n+\t  (vec_concat:V4DF\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"\")\n+\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \"\"))\n+\t  (parallel [(const_int 1)\n+\t\t     (const_int 3)])))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\")\n+\n+(define_insn \"*sse2_unpckhpd\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,m\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n@@ -2427,7 +2480,18 @@\n   DONE;\n })\n \n-(define_insn \"sse2_unpcklpd\"\n+(define_expand \"sse2_unpcklpd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"\")\n+\t(vec_select:V2DF\n+\t  (vec_concat:V4DF\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"\")\n+\t    (match_operand:V2DF 2 \"nonimmediate_operand\" \"\"))\n+\t  (parallel [(const_int 0)\n+\t\t     (const_int 2)])))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\")\n+\n+(define_insn \"*sse2_unpcklpd\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,o\")\n \t(vec_select:V2DF\n \t  (vec_concat:V4DF\n@@ -2531,7 +2595,17 @@\n   DONE;\n })\n \n-(define_insn \"sse2_loadhpd\"\n+(define_expand \"sse2_loadhpd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"\")\n+\t(vec_concat:V2DF\n+\t  (vec_select:DF\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \"\")\n+\t    (parallel [(const_int 0)]))\n+\t  (match_operand:DF 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\")\n+\n+(define_insn \"*sse2_loadhpd\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,x,o\")\n \t(vec_concat:V2DF\n \t  (vec_select:DF\n@@ -2558,7 +2632,17 @@\n   operands[0] = adjust_address (operands[0], DFmode, 8);\n })\n \n-(define_insn \"sse2_loadlpd\"\n+(define_expand \"sse2_loadlpd\"\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"\")\n+\t(vec_concat:V2DF\n+\t  (match_operand:DF 2 \"nonimmediate_operand\" \"\")\n+\t  (vec_select:DF\n+\t    (match_operand:V2DF 1 \"vector_move_operand\" \"\")\n+\t    (parallel [(const_int 1)]))))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\")\n+\n+(define_insn \"*sse2_loadlpd\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\"    \"=x,x,x,x,x,m\")\n \t(vec_concat:V2DF\n \t  (match_operand:DF 2 \"nonimmediate_operand\"    \" m,m,x,0,0,x*fr\")\n@@ -2741,7 +2825,15 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_<plusminus_insn><mode>3\"\n+(define_expand \"sse2_<plusminus_insn><mode>3\"\n+  [(set (match_operand:SSEMODE12 0 \"register_operand\" \"\")\n+\t(sat_plusminus:SSEMODE12\n+\t  (match_operand:SSEMODE12 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:SSEMODE12 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_insn \"*sse2_<plusminus_insn><mode>3\"\n   [(set (match_operand:SSEMODE12 0 \"register_operand\" \"=x\")\n \t(sat_plusminus:SSEMODE12\n \t  (match_operand:SSEMODE12 1 \"nonimmediate_operand\" \"<comm>0\")\n@@ -2906,7 +2998,21 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_umulv2siv2di3\"\n+(define_expand \"sse2_umulv2siv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n+\t(mult:V2DI\n+\t  (zero_extend:V2DI\n+\t    (vec_select:V2SI\n+\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"\")\n+\t      (parallel [(const_int 0) (const_int 2)])))\n+\t  (zero_extend:V2DI\n+\t    (vec_select:V2SI\n+\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"\")\n+\t      (parallel [(const_int 0) (const_int 2)])))))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\")\n+\n+(define_insn \"*sse2_umulv2siv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(mult:V2DI\n \t  (zero_extend:V2DI\n@@ -2923,7 +3029,21 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse4_1_mulv2siv2di3\"\n+(define_expand \"sse4_1_mulv2siv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n+\t(mult:V2DI\n+\t  (sign_extend:V2DI\n+\t    (vec_select:V2SI\n+\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"\")\n+\t      (parallel [(const_int 0) (const_int 2)])))\n+\t  (sign_extend:V2DI\n+\t    (vec_select:V2SI\n+\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"\")\n+\t      (parallel [(const_int 0) (const_int 2)])))))]\n+  \"TARGET_SSE4_1\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\")\n+ \n+(define_insn \"*sse4_1_mulv2siv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(mult:V2DI\n \t  (sign_extend:V2DI\n@@ -2940,7 +3060,41 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_pmaddwd\"\n+(define_expand \"sse2_pmaddwd\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n+\t(plus:V4SI\n+\t  (mult:V4SI\n+\t    (sign_extend:V4SI\n+\t      (vec_select:V4HI\n+\t\t(match_operand:V8HI 1 \"nonimmediate_operand\" \"\")\n+\t\t(parallel [(const_int 0)\n+\t\t\t   (const_int 2)\n+\t\t\t   (const_int 4)\n+\t\t\t   (const_int 6)])))\n+\t    (sign_extend:V4SI\n+\t      (vec_select:V4HI\n+\t\t(match_operand:V8HI 2 \"nonimmediate_operand\" \"\")\n+\t\t(parallel [(const_int 0)\n+\t\t\t   (const_int 2)\n+\t\t\t   (const_int 4)\n+\t\t\t   (const_int 6)]))))\n+\t  (mult:V4SI\n+\t    (sign_extend:V4SI\n+\t      (vec_select:V4HI (match_dup 1)\n+\t\t(parallel [(const_int 1)\n+\t\t\t   (const_int 3)\n+\t\t\t   (const_int 5)\n+\t\t\t   (const_int 7)])))\n+\t    (sign_extend:V4SI\n+\t      (vec_select:V4HI (match_dup 2)\n+\t\t(parallel [(const_int 1)\n+\t\t\t   (const_int 3)\n+\t\t\t   (const_int 5)\n+\t\t\t   (const_int 7)]))))))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);\")\n+\n+(define_insn \"*sse2_pmaddwd\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n \t(plus:V4SI\n \t  (mult:V4SI\n@@ -3559,7 +3713,15 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"sse2_eq<mode>3\"\n+(define_expand \"sse2_eq<mode>3\"\n+  [(set (match_operand:SSEMODE124 0 \"register_operand\" \"\")\n+\t(eq:SSEMODE124\n+\t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:SSEMODE124 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE2 && !TARGET_SSE5\"\n+  \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n+\n+(define_insn \"*sse2_eq<mode>3\"\n   [(set (match_operand:SSEMODE124 0 \"register_operand\" \"=x\")\n \t(eq:SSEMODE124\n \t  (match_operand:SSEMODE124 1 \"nonimmediate_operand\" \"%0\")\n@@ -3571,7 +3733,15 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse4_1_eqv2di3\"\n+(define_expand \"sse4_1_eqv2di3\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"\")\n+\t(eq:V2DI\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"\")\n+\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"\")))]\n+  \"TARGET_SSE4_1\"\n+  \"ix86_fixup_binary_operands_no_copy (EQ, V2DImode, operands);\")\n+\n+(define_insn \"*sse4_1_eqv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(eq:V2DI\n \t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"%0\")\n@@ -3596,7 +3766,7 @@\n (define_insn \"sse4_2_gtv2di3\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(gt:V2DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"0\")\n+\t  (match_operand:V2DI 1 \"register_operand\" \"0\")\n \t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")))]\n   \"TARGET_SSE4_2\"\n   \"pcmpgtq\\t{%2, %0|%0, %2}\"\n@@ -4931,7 +5101,29 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_insn \"sse2_uavgv16qi3\"\n+(define_expand \"sse2_uavgv16qi3\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n+\t(truncate:V16QI\n+\t  (lshiftrt:V16HI\n+\t    (plus:V16HI\n+\t      (plus:V16HI\n+\t\t(zero_extend:V16HI\n+\t\t  (match_operand:V16QI 1 \"nonimmediate_operand\" \"\"))\n+\t\t(zero_extend:V16HI\n+\t\t  (match_operand:V16QI 2 \"nonimmediate_operand\" \"\")))\n+\t      (const_vector:V16QI [(const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)\n+\t\t\t\t   (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (PLUS, V16QImode, operands);\")\n+\n+(define_insn \"*sse2_uavgv16qi3\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=x\")\n \t(truncate:V16QI\n \t  (lshiftrt:V16HI\n@@ -4956,7 +5148,25 @@\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"sse2_uavgv8hi3\"\n+(define_expand \"sse2_uavgv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n+\t(truncate:V8HI\n+\t  (lshiftrt:V8SI\n+\t    (plus:V8SI\n+\t      (plus:V8SI\n+\t\t(zero_extend:V8SI\n+\t\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"\"))\n+\t\t(zero_extend:V8SI\n+\t\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"\")))\n+\t      (const_vector:V8HI [(const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"TARGET_SSE2\"\n+  \"ix86_fixup_binary_operands_no_copy (PLUS, V8HImode, operands);\")\n+\n+(define_insn \"*sse2_uavgv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n \t(truncate:V8HI\n \t  (lshiftrt:V8SI\n@@ -5542,7 +5752,7 @@\n \t  (mult:V8HI\n \t    (zero_extend:V8HI\n \t      (vec_select:V4QI\n-\t\t(match_operand:V16QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t(match_operand:V16QI 1 \"register_operand\" \"0\")\n \t\t(parallel [(const_int 0)\n \t\t\t   (const_int 2)\n \t\t\t   (const_int 4)\n@@ -5596,7 +5806,7 @@\n \t  (mult:V4HI\n \t    (zero_extend:V4HI\n \t      (vec_select:V4QI\n-\t\t(match_operand:V8QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t(match_operand:V8QI 1 \"register_operand\" \"0\")\n \t\t(parallel [(const_int 0)\n \t\t\t   (const_int 2)\n \t\t\t   (const_int 4)\n@@ -5627,7 +5837,27 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"ssse3_pmulhrswv8hi3\"\n+(define_expand \"ssse3_pmulhrswv8hi3\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n+\t(truncate:V8HI\n+\t  (lshiftrt:V8SI\n+\t    (plus:V8SI\n+\t      (lshiftrt:V8SI\n+\t\t(mult:V8SI\n+\t\t  (sign_extend:V8SI\n+\t\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"\"))\n+\t\t  (sign_extend:V8SI\n+\t\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"\")))\n+\t\t(const_int 14))\n+\t      (const_vector:V8HI [(const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"TARGET_SSSE3\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V8HImode, operands);\")\n+\n+(define_insn \"*ssse3_pmulhrswv8hi3\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n \t(truncate:V8HI\n \t  (lshiftrt:V8SI\n@@ -5651,7 +5881,25 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"ssse3_pmulhrswv4hi3\"\n+(define_expand \"ssse3_pmulhrswv4hi3\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+\t(truncate:V4HI\n+\t  (lshiftrt:V4SI\n+\t    (plus:V4SI\n+\t      (lshiftrt:V4SI\n+\t\t(mult:V4SI\n+\t\t  (sign_extend:V4SI\n+\t\t    (match_operand:V4HI 1 \"nonimmediate_operand\" \"\"))\n+\t\t  (sign_extend:V4SI\n+\t\t    (match_operand:V4HI 2 \"nonimmediate_operand\" \"\")))\n+\t\t(const_int 14))\n+\t      (const_vector:V4HI [(const_int 1) (const_int 1)\n+\t\t\t\t  (const_int 1) (const_int 1)]))\n+\t    (const_int 1))))]\n+  \"TARGET_SSSE3\"\n+  \"ix86_fixup_binary_operands_no_copy (MULT, V4HImode, operands);\")\n+\n+(define_insn \"*ssse3_pmulhrswv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n \t(truncate:V4HI\n \t  (lshiftrt:V4SI"}, {"sha": "35eec51b66441ab77a286edebf0be689d0595f1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffbaf3373c4886037e1bb16053145f1cc716c1c1", "patch": "@@ -1,3 +1,8 @@\n+2008-05-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/35714\n+\t* gcc.target/i386/pr35714.c: New test.\n+\n 2008-05-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/36013"}, {"sha": "13ca47c23a38dc3c03610a38187ca6c2131bf183", "filename": "gcc/testsuite/gcc.target/i386/pr35714.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35714.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffbaf3373c4886037e1bb16053145f1cc716c1c1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35714.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35714.c?ref=ffbaf3373c4886037e1bb16053145f1cc716c1c1", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include <emmintrin.h>\n+\n+extern __m128i a;\n+\n+__m128i madd (__m128i b)\n+{\n+  return _mm_madd_epi16(a, b);\n+}\n+\n+__m128i madd_swapped (__m128i b)\n+{\n+    return _mm_madd_epi16(b, a);\n+}\n+\n+/* { dg-final { scan-assembler-not \"movaps\" } } */"}]}