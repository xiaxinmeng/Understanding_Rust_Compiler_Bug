{"sha": "bab64f23e9aa03c3f309c7de92004c544667a5d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFiNjRmMjNlOWFhMDNjM2YzMDljN2RlOTIwMDRjNTQ0NjY3YTVkNg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2009-02-11T08:56:41Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2009-02-11T08:56:41Z"}, "message": "i386.md: Add two new peephole2 to avoid mov followed by arithmetic with memory operands.\n\ngcc:\n2009-02-06  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* config/i386/i386.md: Add two new peephole2 to avoid mov followed\n\tby arithmetic with memory operands.\n\t* config/i386/predicates.md (commutative_operator): New.\n\ngcc/testsuite:\n2009-02-06  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gcc.target/i386/pr38824.c: New testcase.\n\nFrom-SVN: r144098", "tree": {"sha": "c79fce9df9af24381a916e01ee7394f6ecc01201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c79fce9df9af24381a916e01ee7394f6ecc01201"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bab64f23e9aa03c3f309c7de92004c544667a5d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab64f23e9aa03c3f309c7de92004c544667a5d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab64f23e9aa03c3f309c7de92004c544667a5d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab64f23e9aa03c3f309c7de92004c544667a5d6/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bfbe1b687b599be65450795a562db10bcf2fde1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfbe1b687b599be65450795a562db10bcf2fde1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfbe1b687b599be65450795a562db10bcf2fde1d"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "4dd16725e0f564c24e8c8f3b66473148d8f242b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab64f23e9aa03c3f309c7de92004c544667a5d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab64f23e9aa03c3f309c7de92004c544667a5d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bab64f23e9aa03c3f309c7de92004c544667a5d6", "patch": "@@ -1,3 +1,9 @@\n+2009-02-11  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config/i386/i386.md: Add two new peephole2 to avoid mov followed\n+\tby arithmetic with memory operands.\n+\t* config/i386/predicates.md (commutative_operator): New.\n+\n 2009-02-10  Janis Johnson  <janis187@us.ibm.com>\n \n \t* doc/extend.texi (Fixed-Point Types): Break long paragraphs into"}, {"sha": "7a4511fc07faaba1f1b5a2160680a405c9fcf514", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab64f23e9aa03c3f309c7de92004c544667a5d6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab64f23e9aa03c3f309c7de92004c544667a5d6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bab64f23e9aa03c3f309c7de92004c544667a5d6", "patch": "@@ -20706,6 +20706,38 @@\n               (clobber (reg:CC FLAGS_REG))])]\n   \"\")\n \n+;; Prefer Load+RegOp to Mov+MemOp.  Watch out for cases when the memory address\n+;; refers to the destination of the load!\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+        (match_operand:SI 1 \"register_operand\" \"\"))\n+   (parallel [(set (match_dup 0)\n+                   (match_operator:SI 3 \"commutative_operator\"\n+                     [(match_dup 0)\n+                      (match_operand:SI 2 \"memory_operand\" \"\")]))\n+              (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[0] != operands[1]\"\n+  [(set (match_dup 0) (match_dup 4))\n+   (parallel [(set (match_dup 0)\n+                   (match_op_dup 3 [(match_dup 0) (match_dup 1)]))\n+              (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[4] = simplify_replace_rtx (operands[2], operands[0], operands[1]);\")\n+\n+(define_peephole2\n+  [(set (match_operand 0 \"register_operand\" \"\")\n+        (match_operand 1 \"register_operand\" \"\"))\n+   (set (match_dup 0)\n+                   (match_operator 3 \"commutative_operator\"\n+                     [(match_dup 0)\n+                      (match_operand 2 \"memory_operand\" \"\")]))]\n+  \"operands[0] != operands[1]\n+   && (MMX_REG_P (operands[0]) || SSE_REG_P (operands[0]))\"\n+  [(set (match_dup 0) (match_dup 2))\n+   (set (match_dup 0)\n+        (match_op_dup 3 [(match_dup 0) (match_dup 1)]))]\n+  \"\")\n+\n ; Don't do logical operations with memory outputs\n ;\n ; These two don't make sense for PPro/PII -- we're expanding a 4-uop"}, {"sha": "a8c01ad8005bad76d4f3b2f28fb2cf8488967fe4", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab64f23e9aa03c3f309c7de92004c544667a5d6/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab64f23e9aa03c3f309c7de92004c544667a5d6/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=bab64f23e9aa03c3f309c7de92004c544667a5d6", "patch": "@@ -1050,6 +1050,10 @@\n   (match_code \"plus,mult,and,ior,xor,smin,smax,umin,umax,compare,minus,div,\n \t       mod,udiv,umod,ashift,rotate,ashiftrt,lshiftrt,rotatert\"))\n \n+;; Return true for COMMUTATIVE_P.\n+(define_predicate \"commutative_operator\"\n+  (match_code \"plus,mult,and,ior,xor,smin,smax,umin,umax\"))\n+\n ;; Return 1 if OP is a binary operator that can be promoted to wider mode.\n (define_predicate \"promotable_binary_operator\"\n   (ior (match_code \"plus,and,ior,xor,ashift\")"}, {"sha": "9b64184478a20077b0e88753679f864748844a9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab64f23e9aa03c3f309c7de92004c544667a5d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab64f23e9aa03c3f309c7de92004c544667a5d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bab64f23e9aa03c3f309c7de92004c544667a5d6", "patch": "@@ -1,3 +1,7 @@\n+2009-02-11  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc.target/i386/pr38824.c: New testcase.\n+\n 2009-02-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/38649"}, {"sha": "637abfde888ccf20e6994ba2128a2cfbac25d03d", "filename": "gcc/testsuite/gcc.target/i386/pr38824.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab64f23e9aa03c3f309c7de92004c544667a5d6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr38824.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab64f23e9aa03c3f309c7de92004c544667a5d6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr38824.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr38824.c?ref=bab64f23e9aa03c3f309c7de92004c544667a5d6", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse\" } */\n+\n+typedef float v4sf __attribute__ ((__vector_size__ (16)));\n+\n+void bench_1(float * out, float * in, float f, unsigned int n)\n+{\n+    n /= 4;\n+    v4sf scalar = { f, f, f, f };\n+    do\n+    {\n+        v4sf arg = *(v4sf *)in;\n+        v4sf result = arg + scalar;\n+        *(v4sf *) out = result;\n+        in += 4;\n+        out += 4;\n+    }\n+    while (--n);\n+}\n+\n+/* { dg-final { scan-assembler-not \"addps\\[^\\\\n\\]*%\\[er\\]\" } } */"}]}