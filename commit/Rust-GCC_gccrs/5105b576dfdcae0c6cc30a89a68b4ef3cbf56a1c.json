{"sha": "5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEwNWI1NzZkZmRjYWUwYzZjYzMwYTg5YTY4YjRlZjNjYmY1NmExYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-12-03T11:59:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-12-03T11:59:13Z"}, "message": "re PR tree-optimization/92645 (Hand written vector code is 450 times slower when compiled with GCC compared to Clang)\n\n2019-12-03  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92645\n\t* gimple-fold.c (gimple_fold_builtin_memory_op): Fold memcpy\n\tfrom or to a properly aligned register variable.\n\n\t* gcc.target/i386/pr92645-5.c: New testcase.\n\nFrom-SVN: r278934", "tree": {"sha": "5c84bcbb4ae4e3a1b2b326b0cbf5f37160d5b143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c84bcbb4ae4e3a1b2b326b0cbf5f37160d5b143"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8f316505da1348cca2eb7aeac7919710c255d396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f316505da1348cca2eb7aeac7919710c255d396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f316505da1348cca2eb7aeac7919710c255d396"}], "stats": {"total": 73, "additions": 51, "deletions": 22}, "files": [{"sha": "e9119f997451028348cd4c2dca80f373a862e8b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c", "patch": "@@ -1,3 +1,9 @@\n+2019-12-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* gimple-fold.c (gimple_fold_builtin_memory_op): Fold memcpy\n+\tfrom or to a properly aligned register variable.\n+\n 2019-12-03  Matthias Klose  <doko@ubuntu.com>\n \n \t* Makefile.in (SOURCES): Add doc/lto-dump.1."}, {"sha": "24a478a80073f80cdff1e405118a193fe51454ae", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c", "patch": "@@ -986,36 +986,33 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \n       src_align = get_pointer_alignment (src);\n       dest_align = get_pointer_alignment (dest);\n-      if (dest_align < TYPE_ALIGN (desttype)\n-\t  || src_align < TYPE_ALIGN (srctype))\n-\treturn false;\n \n+      /* Choose between src and destination type for the access based\n+         on alignment, whether the access constitutes a register access\n+\t and whether it may actually expose a declaration for SSA rewrite\n+\t or SRA decomposition.  */\n       destvar = NULL_TREE;\n+      srcvar = NULL_TREE;\n       if (TREE_CODE (dest) == ADDR_EXPR\n \t  && var_decl_component_p (TREE_OPERAND (dest, 0))\n-\t  && tree_int_cst_equal (TYPE_SIZE_UNIT (desttype), len))\n+\t  && tree_int_cst_equal (TYPE_SIZE_UNIT (desttype), len)\n+\t  && dest_align >= TYPE_ALIGN (desttype)\n+\t  && (is_gimple_reg_type (desttype)\n+\t      || src_align >= TYPE_ALIGN (desttype)))\n \tdestvar = fold_build2 (MEM_REF, desttype, dest, off0);\n-\n-      srcvar = NULL_TREE;\n-      if (TREE_CODE (src) == ADDR_EXPR\n-\t  && var_decl_component_p (TREE_OPERAND (src, 0))\n-\t  && tree_int_cst_equal (TYPE_SIZE_UNIT (srctype), len))\n-\t{\n-\t  if (!destvar\n-\t      || src_align >= TYPE_ALIGN (desttype))\n-\t    srcvar = fold_build2 (MEM_REF, destvar ? desttype : srctype,\n-\t\t\t\t  src, off0);\n-\t  else if (!STRICT_ALIGNMENT)\n-\t    {\n-\t      srctype = build_aligned_type (TYPE_MAIN_VARIANT (desttype),\n-\t\t\t\t\t    src_align);\n-\t      srcvar = fold_build2 (MEM_REF, srctype, src, off0);\n-\t    }\n-\t}\n-\n+      else if (TREE_CODE (src) == ADDR_EXPR\n+\t       && var_decl_component_p (TREE_OPERAND (src, 0))\n+\t       && tree_int_cst_equal (TYPE_SIZE_UNIT (srctype), len)\n+\t       && src_align >= TYPE_ALIGN (srctype)\n+\t       && (is_gimple_reg_type (srctype)\n+\t\t   || dest_align >= TYPE_ALIGN (srctype)))\n+\tsrcvar = fold_build2 (MEM_REF, srctype, src, off0);\n       if (srcvar == NULL_TREE && destvar == NULL_TREE)\n \treturn false;\n \n+      /* Now that we chose an access type express the other side in\n+         terms of it if the target allows that with respect to alignment\n+\t constraints.  */\n       if (srcvar == NULL_TREE)\n \t{\n \t  if (src_align >= TYPE_ALIGN (desttype))"}, {"sha": "158e09073b1261f8cebb077a5827c337b4853173", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c", "patch": "@@ -1,3 +1,8 @@\n+2019-12-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* gcc.target/i386/pr92645-5.c: New testcase.\n+\n 2019-12-03  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92751"}, {"sha": "af3a4e23dca52a553ca82fb59f1d3cb2d6fa4407", "filename": "gcc/testsuite/gcc.target/i386/pr92645-5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645-5.c?ref=5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-cddce1 -mavx2 -Wno-psabi\" } */\n+typedef long long v4di __attribute__((vector_size(32)));\n+struct Vec\n+{\n+  unsigned int v[8];\n+};\n+\n+v4di pun (struct Vec *s)\n+{\n+  v4di tem;\n+  __builtin_memcpy (&tem, s, 32);\n+  return tem;\n+}\n+\n+/* We're expecting exactly two stmts, in particular no BIT_INSERT_EXPR\n+   and no memcpy call.\n+    _3 = MEM <vector(4) long long int> [(char * {ref-all})s_2(D)];\n+    return _3;  */\n+/* { dg-final { scan-tree-dump-times \" = MEM\" 1 \"cddce1\" } } */\n+/* { dg-final { scan-tree-dump-not \"memcpy\" \"cddce1\" } } */"}]}