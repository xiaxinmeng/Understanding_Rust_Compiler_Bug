{"sha": "3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczNGQ5NjA3ZWU0MDdmNGM3M2FhNjEzZjk2ZGJmYmMwZGQ2ZjUwMA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-05-06T10:12:36Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2010-05-06T10:12:36Z"}, "message": "re PR c/40989 (-Werror= and #pragma diagnostics do not work with group flags)\n\n2010-05-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR 40989\n\t* doc/invoke.texi (Wimplicit): Document as C only.\n\t* opts.c (common_handle_option): Add argument kind.\n\t(handle_option): Rename as read_cmdline_option. Factor out code to...\n\t(handle_option): ... here. New.\n\t(handle_options): Rename as read_cmdline_options.\n\t(decode_options): Update call.\n\t(set_option): Use option index instead of option pointer. Classify\n\tdiagnostics correctly.\n\t(enable_warning_as_error): Call handle_option.\n\t* opts.h (set_option): Update declaration.\n\t(handle_option): Declare.\n\t* langhooks.h (struct lang_hooks): Add argument kind to\n\thandle_option.\n\t* c.opt (Wimplicit,Wimplicit-int): Initialize to -1.\n\t* c-opts.c (set_Wimplicit): Delete.\n\t(c_family_lang_mask): New static constant.\n\t(c_common_handle_option): Add argument kind. Use handle_option\n\tinstead of set_Wimplicit.\n\t(c_common_post_options): warn_implicit and warn_implicit_int\n\tare disabled by default.\n\t* c-common.c (warn_implicit): Do not define here.\n\t* c-common.h (warn_implicit): Do not declare here.\n\t(c_common_handle_option): Update declaration.\n\t* lto-opts.c (lto_reissue_options): Update call to set_option.\njava/\n\t* lang.c (java_handle_option): Add argument kind.\nfortran/\t\n\t* options.c (gfc_handle_option): Add argument kind.\n\t* gfortran.h (gfc_handle_option): Update declaration.\nada/\n\t* gcc-interface/misc.c (gnat_handle_option): Add argument kind.\ntestsuite/\n\t* gcc.dg/pr40989.c: New.\n\nFrom-SVN: r159102", "tree": {"sha": "dbd0e72df35da905dec3347904aaa7d7fac6dd9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbd0e72df35da905dec3347904aaa7d7fac6dd9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/comments", "author": null, "committer": null, "parents": [{"sha": "2b90475adda974b77287699beb1180d1cd6e286b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b90475adda974b77287699beb1180d1cd6e286b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b90475adda974b77287699beb1180d1cd6e286b"}], "stats": {"total": 230, "additions": 154, "deletions": 76}, "files": [{"sha": "fff96268288dabd2efe91e8cba24ed2fd970be75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -1,3 +1,31 @@\n+2010-05-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 40989\n+\t* doc/invoke.texi (Wimplicit): Document as C only.\n+\t* opts.c (common_handle_option): Add argument kind.\n+\t(handle_option): Rename as read_cmdline_option. Factor out code to...\n+\t(handle_option): ... here. New.\n+\t(handle_options): Rename as read_cmdline_options.\n+\t(decode_options): Update call.\n+\t(set_option): Use option index instead of option pointer. Classify\n+\tdiagnostics correctly.\n+\t(enable_warning_as_error): Call handle_option.\n+\t* opts.h (set_option): Update declaration.\n+\t(handle_option): Declare.\n+\t* langhooks.h (struct lang_hooks): Add argument kind to\n+\thandle_option.\n+\t* c.opt (Wimplicit,Wimplicit-int): Initialize to -1.\n+\t* c-opts.c (set_Wimplicit): Delete.\n+\t(c_family_lang_mask): New static constant.\n+\t(c_common_handle_option): Add argument kind. Use handle_option\n+\tinstead of set_Wimplicit.\n+\t(c_common_post_options): warn_implicit and warn_implicit_int\n+\tare disabled by default.\n+\t* c-common.c (warn_implicit): Do not define here.\n+\t* c-common.h (warn_implicit): Do not declare here.\n+\t(c_common_handle_option): Update declaration.\n+\t* lto-opts.c (lto_reissue_options): Update call to set_option.\n+\n 2010-05-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43571"}, {"sha": "cb1013238b6d617789a53f883667a6957fc77b0d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -1,3 +1,8 @@\n+2010-05-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 40989\n+\t* gcc-interface/misc.c (gnat_handle_option): Add argument kind.\n+\n 2010-05-02  Giuseppe Scrivano <gscrivano@gnu.org>\n \n \t* gnathtml.pl: Use 755 as mask for new directories."}, {"sha": "db5badcf1457c57ac390f390cc213f04a3a751da", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -66,7 +66,7 @@\n \n static bool gnat_init\t\t\t(void);\n static unsigned int gnat_init_options\t(unsigned int, const char **);\n-static int gnat_handle_option\t\t(size_t, const char *, int);\n+static int gnat_handle_option\t\t(size_t, const char *, int, int);\n static bool gnat_post_options\t\t(const char **);\n static alias_set_type gnat_get_alias_set (tree);\n static void gnat_print_decl\t\t(FILE *, tree, int);\n@@ -184,7 +184,7 @@ gnat_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n    that have been successfully decoded or 0 on failure.  */\n \n static int\n-gnat_handle_option (size_t scode, const char *arg, int value)\n+gnat_handle_option (size_t scode, const char *arg, int value, int kind ATTRIBUTE_UNUSED)\n {\n   const struct cl_option *option = &cl_options[scode];\n   enum opt_code code = (enum opt_code) scode;"}, {"sha": "d939e12c65c247c68732ee3b0d13aa556133f349", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -427,10 +427,6 @@ int flag_threadsafe_statics = 1;\n \n int flag_pretty_templates = 1;\n \n-/* Nonzero means warn about implicit declarations.  */\n-\n-int warn_implicit = 1;\n-\n /* Maximum template instantiation depth.  This limit exists to limit the\n    time it takes to notice infinite template instantiations; the default\n    value of 1024 is likely to be in the next C++ standard.  */"}, {"sha": "0da83d5e395d41967b62e2a0d95ccfba2174ad0e", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -750,10 +750,6 @@ extern int flag_threadsafe_statics;\n \n extern int flag_pretty_templates;\n \n-/* Nonzero means warn about implicit declarations.  */\n-\n-extern int warn_implicit;\n-\n /* Warn about using __null (as NULL in C++) as sentinel.  For code compiled\n    with GCC this doesn't matter as __null is guaranteed to have the right\n    size.  */\n@@ -827,7 +823,7 @@ extern void set_Wformat (int);\n extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n extern bool attribute_takes_identifier_p (const_tree);\n-extern int c_common_handle_option (size_t code, const char *arg, int value);\n+extern int c_common_handle_option (size_t code, const char *arg, int value, int kind);\n extern bool c_common_missing_argument (const char *opt, size_t code);\n extern tree c_common_type_for_mode (enum machine_mode, int);\n extern tree c_common_type_for_size (unsigned int, int);"}, {"sha": "b72115756509a86de13299cca3b2f619ed57ba7f", "filename": "gcc/c-opts.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -106,7 +106,6 @@ static size_t deferred_count;\n /* Number of deferred options scanned for -include.  */\n static size_t include_cursor;\n \n-static void set_Wimplicit (int);\n static void handle_OPT_d (const char *);\n static void set_std_cxx98 (int);\n static void set_std_cxx0x (int);\n@@ -135,6 +134,10 @@ static struct deferred_opt\n   const char *arg;\n } *deferred_opts;\n \n+\n+static const unsigned int \n+c_family_lang_mask = (CL_C | CL_CXX | CL_ObjC | CL_ObjCXX);\n+\n /* Complain that switch CODE expects an argument but none was\n    provided.  OPT was the command-line option.  Return FALSE to get\n    the default message in opts.c, TRUE if we provide a specialized\n@@ -349,7 +352,8 @@ c_common_init_options (unsigned int argc, const char **argv)\n    invalid, a negative number to prevent language-independent\n    processing in toplev.c (a hack necessary for the short-term).  */\n int\n-c_common_handle_option (size_t scode, const char *arg, int value)\n+c_common_handle_option (size_t scode, const char *arg, int value,\n+\t\t\tint kind)\n {\n   const struct cl_option *option = &cl_options[scode];\n   enum opt_code code = (enum opt_code) scode;\n@@ -362,7 +366,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n   switch (code)\n     {\n     default:\n-      if (cl_options[code].flags & (CL_C | CL_CXX | CL_ObjC | CL_ObjCXX))\n+      if (cl_options[code].flags & c_family_lang_mask)\n \t{\n \t  if ((option->flags & CL_TARGET)\n \t      && ! targetcm.handle_c_option (scode, arg, value))\n@@ -471,7 +475,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     case OPT_Wall:\n       warn_unused = value;\n       set_Wformat (value);\n-      set_Wimplicit (value);\n+      handle_option (OPT_Wimplicit, value, NULL, c_family_lang_mask, kind);\n       warn_char_subscripts = value;\n       warn_missing_braces = value;\n       warn_parentheses = value;\n@@ -569,7 +573,13 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_Wimplicit:\n-      set_Wimplicit (value);\n+      gcc_assert (value == 0 || value == 1);\n+      if (warn_implicit_int == -1)\n+\thandle_option (OPT_Wimplicit_int, value, NULL,\n+\t\t       c_family_lang_mask, kind);\n+      if (warn_implicit_function_declaration == -1)\n+\thandle_option (OPT_Wimplicit_function_declaration, value, NULL,\n+\t\t       c_family_lang_mask, kind);\n       break;\n \n     case OPT_Wimport:\n@@ -1246,6 +1256,12 @@ c_common_post_options (const char **pfilename)\n \t       \"-Wformat-security ignored without -Wformat\");\n     }\n \n+  if (warn_implicit == -1)\n+    warn_implicit = 0;\n+      \n+  if (warn_implicit_int == -1)\n+    warn_implicit_int = 0;\n+\n   /* -Wimplicit-function-declaration is enabled by default for C99.  */\n   if (warn_implicit_function_declaration == -1)\n     warn_implicit_function_declaration = flag_isoc99;\n@@ -1766,15 +1782,6 @@ set_std_cxx0x (int iso)\n   cxx_dialect = cxx0x;\n }\n \n-/* Handle setting implicit to ON.  */\n-static void\n-set_Wimplicit (int on)\n-{\n-  warn_implicit = on;\n-  warn_implicit_int = on;\n-  warn_implicit_function_declaration = on;\n-}\n-\n /* Args to -d specify what to dump.  Silently ignore\n    unrecognized options; they may be aimed at toplev.c.  */\n static void"}, {"sha": "c79165a53f6dbbfa0c9e04a69dc6c8e5fc08ad31", "filename": "gcc/c.opt", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -263,14 +263,15 @@ C ObjC C++ ObjC++ Var(warn_init_self) Warning\n Warn about variables which are initialized to themselves\n \n Wimplicit\n-C ObjC C++ ObjC++ Warning\n+C ObjC Var(warn_implicit) Init(-1) Warning\n+Warn about implicit declarations\n \n Wimplicit-function-declaration\n C ObjC Var(warn_implicit_function_declaration) Init(-1) Warning\n Warn about implicit function declarations\n \n Wimplicit-int\n-C ObjC Var(warn_implicit_int) Warning\n+C ObjC Var(warn_implicit_int) Init(-1) Warning\n Warn when a declaration does not specify a type\n \n Wimport"}, {"sha": "33e4612a10a067788d9bedeed26a511df2aa1e95", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -2901,8 +2901,8 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wc++0x-compat  @gol\n -Wchar-subscripts  @gol\n -Wenum-compare @r{(in C/Objc; this is on by default in C++)} @gol\n--Wimplicit-int  @gol\n--Wimplicit-function-declaration  @gol\n+-Wimplicit-int @r{(C and Objective-C only)} @gol\n+-Wimplicit-function-declaration @r{(C and Objective-C only)} @gol\n -Wcomment  @gol\n -Wformat   @gol\n -Wmain @r{(only for C/ObjC and unless} @option{-ffreestanding}@r{)}  @gol\n@@ -3145,7 +3145,7 @@ enabled by default and it is made into an error by\n @option{-pedantic-errors}. This warning is also enabled by\n @option{-Wall}.\n \n-@item -Wimplicit\n+@item -Wimplicit @r{(C and Objective-C only)}\n @opindex Wimplicit\n @opindex Wno-implicit\n Same as @option{-Wimplicit-int} and @option{-Wimplicit-function-declaration}."}, {"sha": "acc40baeba6440c9e3dc89daa664d5a3dddf47d9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -1,4 +1,10 @@\n-2010-05-0  Tobias Burnus  <burnus@net-b.de>\n+2010-05-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 40989\n+\t* options.c (gfc_handle_option): Add argument kind.\n+\t* gfortran.h (gfc_handle_option): Update declaration.\n+\n+2010-05-06  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43985\n \t* trans-types.c (gfc_sym_type): Mark Cray pointees as"}, {"sha": "580ba3589abf35fa038dab7be13a4df9864cb039", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -2310,7 +2310,7 @@ int get_c_kind (const char *, CInteropKind_t *);\n \n /* options.c */\n unsigned int gfc_init_options (unsigned int, const char **);\n-int gfc_handle_option (size_t, const char *, int);\n+int gfc_handle_option (size_t, const char *, int, int);\n bool gfc_post_options (const char **);\n \n /* f95-lang.c */"}, {"sha": "28c91147534864db7aaf7a94a8f6e9d40880dda1", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -532,7 +532,8 @@ gfc_handle_runtime_check_option (const char *arg)\n    recognized and handled.  */\n \n int\n-gfc_handle_option (size_t scode, const char *arg, int value)\n+gfc_handle_option (size_t scode, const char *arg, int value,\n+\t\t   int kind ATTRIBUTE_UNUSED)\n {\n   int result = 1;\n   enum opt_code code = (enum opt_code) scode;"}, {"sha": "a0b868d8ec9acfdbb5fbe59c94808f3edeb98c23", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -1,3 +1,8 @@\n+2010-05-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 40989\n+\t* lang.c (java_handle_option): Add argument kind.\n+\n 2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (java_init_decl_processing): Remove argument in call to"}, {"sha": "a704d5d9020e7ed476fd3a8454aad42427811468", "filename": "gcc/java/lang.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -52,7 +52,7 @@ static void java_finish (void);\n static unsigned int java_init_options (unsigned int, const char **);\n static bool java_post_options (const char **);\n \n-static int java_handle_option (size_t scode, const char *arg, int value);\n+static int java_handle_option (size_t scode, const char *arg, int value, int kind);\n static void put_decl_string (const char *, int);\n static void put_decl_node (tree, int);\n static void java_print_error_function (diagnostic_context *, const char *,\n@@ -175,7 +175,8 @@ struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n  * return 0, but do not complain if the option is not recognized.\n  */\n static int\n-java_handle_option (size_t scode, const char *arg, int value)\n+java_handle_option (size_t scode, const char *arg, int value,\n+\t\t    int kind ATTRIBUTE_UNUSED)\n {\n   enum opt_code code = (enum opt_code) scode;\n "}, {"sha": "ce3bd03b94969ae89232f9029067fc427c220d0b", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -283,7 +283,7 @@ struct lang_hooks\n \n      Return 1 if the switch is valid, 0 if invalid, and -1 if it's\n      valid and should not be treated as language-independent too.  */\n-  int (*handle_option) (size_t code, const char *arg, int value);\n+  int (*handle_option) (size_t code, const char *arg, int value, int kind);\n \n   /* Return false to use the default complaint about a missing\n      argument, otherwise output a complaint and return true.  */"}, {"sha": "b7bf6ca2c96c8eaba36d19476621609404b70d36", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -383,7 +383,7 @@ lto_reissue_options (void)\n       const struct cl_option *option = &cl_options[o->code];\n \n       if (option->flag_var)\n-\tset_option (option, o->value, o->arg);\n+\tset_option (o->code, o->value, o->arg, 0 /*DK_UNSPECIFIED*/);\n \n       if (o->type == CL_TARGET)\n \ttargetm.handle_option (o->code, o->arg, o->value);"}, {"sha": "cf1fd2ded435a6b6b4e13b02c1ddc898616d7b9e", "filename": "gcc/opts.c", "status": "modified", "additions": 57, "deletions": 37, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -372,13 +372,11 @@ const char **in_fnames;\n unsigned num_in_fnames;\n \n static int common_handle_option (size_t scode, const char *arg, int value,\n-\t\t\t\t unsigned int lang_mask);\n+\t\t\t\t unsigned int lang_mask, int kind);\n static void handle_param (const char *);\n-static unsigned int handle_option (const char **argv, unsigned int lang_mask);\n static char *write_langs (unsigned int lang_mask);\n static void complain_wrong_lang (const char *, const struct cl_option *,\n \t\t\t\t unsigned int lang_mask);\n-static void handle_options (unsigned int, const char **, unsigned int);\n static void set_debug_level (enum debug_info_type type, int extended,\n \t\t\t     const char *arg);\n \n@@ -485,10 +483,51 @@ void print_ignored_options (void)\n   input_location = saved_loc;\n }\n \n+\n+/* Handle option OPT_INDEX, and argument ARG, for the language\n+   indicated by LANG_MASK.  VALUE is true, unless no- form of an -f or\n+   -W option was given.  KIND is the diagnostic_t if this is a\n+   diagnostics option, DK_UNSPECIFIED otherwise.  Returns false if the\n+   switch was invalid.  */\n+bool\n+handle_option (int opt_index, int value, const char *arg,\n+\t\tunsigned int lang_mask, int kind)\n+{\n+  const struct cl_option *option = &cl_options[opt_index];\n+\n+  if (option->flag_var)\n+    set_option (opt_index, value, arg, kind);\n+  \n+  if (option->flags & lang_mask)\n+    {\n+      if (lang_hooks.handle_option (opt_index, arg, value, kind) == 0)\n+\treturn false;\n+      else\n+\tlto_register_user_option (opt_index, arg, value, lang_mask);\n+    }\n+\n+  if (option->flags & CL_COMMON)\n+    {\n+      if (common_handle_option (opt_index, arg, value, lang_mask, kind) == 0)\n+\treturn false;\n+      else\n+\tlto_register_user_option (opt_index, arg, value, CL_COMMON);\n+    }\n+\n+  if (option->flags & CL_TARGET)\n+    {\n+      if (!targetm.handle_option (opt_index, arg, value))\n+\treturn false;\n+      else\n+\tlto_register_user_option (opt_index, arg, value, CL_TARGET);\n+    }\n+  return true;\n+}\n+\n /* Handle the switch beginning at ARGV for the language indicated by\n    LANG_MASK.  Returns the number of switches consumed.  */\n static unsigned int\n-handle_option (const char **argv, unsigned int lang_mask)\n+read_cmdline_option (const char **argv, unsigned int lang_mask)\n {\n   size_t opt_index;\n   const char *opt, *arg = 0;\n@@ -609,32 +648,8 @@ handle_option (const char **argv, unsigned int lang_mask)\n \t}\n     }\n \n-  if (option->flag_var)\n-    set_option (option, value, arg);\n-\n-  if (option->flags & lang_mask)\n-    {\n-      if (lang_hooks.handle_option (opt_index, arg, value) == 0)\n-\tresult = 0;\n-      else\n-\tlto_register_user_option (opt_index, arg, value, lang_mask);\n-    }\n-\n-  if (result && (option->flags & CL_COMMON))\n-    {\n-      if (common_handle_option (opt_index, arg, value, lang_mask) == 0)\n-\tresult = 0;\n-      else\n-\tlto_register_user_option (opt_index, arg, value, CL_COMMON);\n-    }\n-\n-  if (result && (option->flags & CL_TARGET))\n-    {\n-      if (!targetm.handle_option (opt_index, arg, value))\n-\tresult = 0;\n-      else\n-\tlto_register_user_option (opt_index, arg, value, CL_TARGET);\n-    }\n+  if (!handle_option (opt_index, value, arg, lang_mask, DK_UNSPECIFIED))\n+    result = 0;\n \n  done:\n   if (dup)\n@@ -735,7 +750,7 @@ flag_instrument_functions_exclude_p (tree fndecl)\n    contains has a single bit set representing the current\n    language.  */\n static void\n-handle_options (unsigned int argc, const char **argv, unsigned int lang_mask)\n+read_cmdline_options (unsigned int argc, const char **argv, unsigned int lang_mask)\n {\n   unsigned int n, i;\n \n@@ -757,7 +772,7 @@ handle_options (unsigned int argc, const char **argv, unsigned int lang_mask)\n \t  continue;\n \t}\n \n-      n = handle_option (argv + i, lang_mask);\n+      n = read_cmdline_option (argv + i, lang_mask);\n \n       if (!n)\n \t{\n@@ -973,7 +988,7 @@ decode_options (unsigned int argc, const char **argv)\n   OPTIMIZATION_OPTIONS (optimize, optimize_size);\n #endif\n \n-  handle_options (argc, argv, lang_mask);\n+  read_cmdline_options (argc, argv, lang_mask);\n \n   if (dump_base_name && ! IS_ABSOLUTE_PATH (dump_base_name))\n     {\n@@ -1467,7 +1482,7 @@ print_specific_help (unsigned int include_flags,\n \n static int\n common_handle_option (size_t scode, const char *arg, int value,\n-\t\t      unsigned int lang_mask)\n+\t\t      unsigned int lang_mask, int kind ATTRIBUTE_UNUSED)\n {\n   static bool verbose = false;\n   enum opt_code code = (enum opt_code) scode;\n@@ -2376,8 +2391,10 @@ get_option_state (int option, struct cl_option_state *state)\n /* Set *OPTION according to VALUE and ARG.  */\n \n void\n-set_option (const struct cl_option *option, int value, const char *arg)\n+set_option (int opt_index, int value, const char *arg, int kind)\n {\n+  const struct cl_option *option = &cl_options[opt_index];\n+\n   if (!option->flag_var)\n     return;\n \n@@ -2407,6 +2424,9 @@ set_option (const struct cl_option *option, int value, const char *arg)\n \t*(const char **) option->flag_var = arg;\n \tbreak;\n     }\n+\n+  if ((diagnostic_t)kind != DK_UNSPECIFIED)\n+    diagnostic_classify_diagnostic (global_dc, opt_index, (diagnostic_t)kind);\n }\n \n \n@@ -2450,8 +2470,8 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask)\n \t  const struct cl_option * const option = cl_options + option_index;\n \n \t  /* -Werror=foo implies -Wfoo.  */\n-\t  if (option->var_type == CLVC_BOOLEAN && option->flag_var)\n-\t    *(int *) option->flag_var = 1;\n+\t  if (option->var_type == CLVC_BOOLEAN)\n+\t    handle_option (option_index, value, arg, lang_mask, (int)kind);\n \n \t  if (warning_as_error_callback)\n \t    warning_as_error_callback (option_index);"}, {"sha": "af3c6e2abe632a76904145d71248d22ac8884a57", "filename": "gcc/opts.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -103,8 +103,9 @@ extern void prune_options (int *argcp, char ***argvp);\n extern void decode_options (unsigned int argc, const char **argv);\n extern int option_enabled (int opt_idx);\n extern bool get_option_state (int, struct cl_option_state *);\n-extern void set_option (const struct cl_option *, int, const char *);\n-\n+extern void set_option (int opt_index, int value, const char *arg, int);\n+bool handle_option (int opt_index, int value, const char *arg,\n+\t\t    unsigned int lang_mask, int kind);\n extern void register_warning_as_error_callback (void (*callback) (int));\n extern void enable_warning_as_error (const char *arg, int value,\n \t\t\t\t     unsigned int lang_mask);"}, {"sha": "6b4584e5e7a58bcdbbc89d52059e7a9c74b22486", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -1,3 +1,8 @@\n+2010-05-06  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR 40989\n+\t* gcc.dg/pr40989.c: New.\n+\n 2010-05-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43934"}, {"sha": "0fbc87082d3d1ba10fd2726cb05a4b78c57207a0", "filename": "gcc/testsuite/gcc.dg/pr40989.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40989.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3734d9607ee407f4c73aa613f96dbfbc0dd6f500/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40989.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40989.c?ref=3734d9607ee407f4c73aa613f96dbfbc0dd6f500", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Werror=implicit\" } */\n+int main() {\n+  return pippo(); /* { dg-error \"\" } */\n+}\n+/* { dg-message \"warnings being treated as errors\" \"\" { target *-*-* } 0 } */"}]}