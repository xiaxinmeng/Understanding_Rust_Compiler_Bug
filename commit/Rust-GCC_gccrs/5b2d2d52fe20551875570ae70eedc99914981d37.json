{"sha": "5b2d2d52fe20551875570ae70eedc99914981d37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIyZDJkNTJmZTIwNTUxODc1NTcwYWU3MGVlZGM5OTkxNDk4MWQzNw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2011-04-10T17:57:59Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2011-04-10T17:57:59Z"}, "message": "Cleanup double words.\n\nFrom-SVN: r172245", "tree": {"sha": "83b547627728caf21057292daf58dd55183cc2e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83b547627728caf21057292daf58dd55183cc2e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b2d2d52fe20551875570ae70eedc99914981d37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2d2d52fe20551875570ae70eedc99914981d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b2d2d52fe20551875570ae70eedc99914981d37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2d2d52fe20551875570ae70eedc99914981d37/comments", "author": null, "committer": null, "parents": [{"sha": "3e49fb03796af407ddfa41e6ab76e4787d349018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e49fb03796af407ddfa41e6ab76e4787d349018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e49fb03796af407ddfa41e6ab76e4787d349018"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "78038a2bcd45082459ae113e91ed9059902b3627", "filename": "gcc/testsuite/ada/acats/tests/c4/c460011.a", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fada%2Facats%2Ftests%2Fc4%2Fc460011.a", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fada%2Facats%2Ftests%2Fc4%2Fc460011.a", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fada%2Facats%2Ftests%2Fc4%2Fc460011.a?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -37,7 +37,7 @@\n --      and greater than the value of the mod.\n --      Declare a generic test procedure and instantiate it for each of the\n --      unsigned types for each operand type.\n---      Check that the the operand is properly rounded during the conversion.\n+--      Check that the operand is properly rounded during the conversion.\n --\n -- APPLICABILITY CRITERIA:\n --      This test is applicable to all implementations which support"}, {"sha": "70ea3f55970657336870f040ee26810cf9dab471", "filename": "gcc/testsuite/ada/acats/tests/c9/c954013.a", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fada%2Facats%2Ftests%2Fc9%2Fc954013.a", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fada%2Facats%2Ftests%2Fc9%2Fc954013.a", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fada%2Facats%2Ftests%2Fc9%2Fc954013.a?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -363,7 +363,7 @@ procedure C954013 is\n                -- Show that this message did pass through the Distributor Task\n                Transaction.TC_Thru_Dist := true;\n \n-               -- Pass this transaction on the the appropriate computation\n+               -- Pass this transaction on the appropriate computation\n                -- task\n                case Transaction.Code is \n                   when Credit =>"}, {"sha": "7f80554faae57e0d200836974b38e8c8f75ec353", "filename": "gcc/testsuite/gcc.c-torture/compile/20011106-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20011106-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20011106-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20011106-2.c?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -1,4 +1,4 @@\n-/* Test the the type of a component of a conditional expression between\n+/* Test the type of a component of a conditional expression between\n    two structures is correct.  */\n /* Origin: Joseph Myers <jsm28@cam.ac.uk>.  */\n "}, {"sha": "307f568859cf21c9ef4134462ac8c546bb78de96", "filename": "gcc/testsuite/gcc.c-torture/execute/980709-1.x", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F980709-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F980709-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F980709-1.x?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -1,7 +1,7 @@\n # XFAIL this test for AIX using -msoft-float.\n # This test calls the system libm.a function pow.\n # A false failure is reported if -msoft-float is used.\n-# AIX expects the the parameters to be passed in fp regs. \n+# AIX expects the parameters to be passed in fp regs. \n if { [istarget powerpc-*-aix*] || [istarget rs6000-*-aix*] } {\n     set torture_eval_before_execute {\n \tglobal compiler_conditional_xfail_data"}, {"sha": "477c10bba5bfa555cb1303ed38560caff914537a", "filename": "gcc/testsuite/gcc.c-torture/execute/990826-0.x", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F990826-0.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F990826-0.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F990826-0.x?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -1,7 +1,7 @@\n # XFAIL this test for AIX using -msoft-float.\n # This test calls the system libm.a function floor.\n # A false failure is reported if -msoft-float is used.\n-# AIX expects the the parameters to be passed in fp regs. \n+# AIX expects the parameters to be passed in fp regs. \n if { [istarget powerpc-*-aix*] || [istarget rs6000-*-aix*] } {\n     set torture_eval_before_execute {\n \tglobal compiler_conditional_xfail_data"}, {"sha": "2a150e91203f812c942260bfd441cf9959cce987", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -14,10 +14,10 @@ int main1 ()\n   int i;\n   int ia[N+1];\n \n-  /* All the accesses are misaligned. With cost model disabled, we count the \n-     the number of aligned accesses for each peeling option, and in this case\n-     we align the two loads if possible (i.e., if misaligned stores are \n-     supported).  */\n+  /* All the accesses are misaligned. With cost model disabled, we\n+     count the number of aligned accesses for each peeling option, and\n+     in this case we align the two loads if possible (i.e., if\n+     misaligned stores are supported).  */\n   for (i = 1; i <= N; i++)\n     {\n       ia[i] = ib[i+2] + ib[i+6];"}, {"sha": "38339cad8942af4e54b4bae28b90c93da1a77d46", "filename": "gcc/testsuite/gcc.target/mips/inter/mips16_stubs_1_x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finter%2Fmips16_stubs_1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finter%2Fmips16_stubs_1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Finter%2Fmips16_stubs_1_x.c?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -89,7 +89,7 @@ extern _Complex double (*pcd10) (double, double);\n #define CHECK_RESULT(x, y) if ((x) != (y)) abort ()\n #define CHECK_VOID_RESULT(x, y)  CHECK_RESULT (((x), the_result), y)\n \n-/* Call functions through pointers and and check against expected results.  */\n+/* Call functions through pointers and check against expected results.  */\n void\n test (void)\n {"}, {"sha": "51f5cd4ca9ee96a31e598c639843237fdb0d9f11", "filename": "gcc/testsuite/gfortran.dg/func_result_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_result_1.f90?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! From PR 19673 : We didn't dereference the the result from POINTER\n+! From PR 19673 : We didn't dereference the result from POINTER\n ! functions with a RESULT clause\n program ret_ptr\n   if (foo(99) /= bar(99)) call abort ()"}, {"sha": "c890927179c05ce1b07023b20145a748a3d1e88e", "filename": "gcc/testsuite/gfortran.dg/missing_derived_type_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_derived_type_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_derived_type_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_derived_type_1.f90?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! Tests the fix for PR29364, in which the the absence of the derived type\n+! Tests the fix for PR29364, in which the absence of the derived type\n ! 'nonexist' was not diagnosed.\n !\n ! Contributed by Tobias Burnus  <tobias.burnus@physik.fu-berlin.de>"}, {"sha": "2e9a3c8652a2360d47f85fb474ee25275340963e", "filename": "gcc/testsuite/gfortran.dg/use_rename_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fuse_rename_1.f90?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n ! Tests the fix for PR34854, in which the second of the two subroutines would fail\n-! because the the type declaration of nmoltype_phase would incorrectly conflict\n+! because the type declaration of nmoltype_phase would incorrectly conflict\n ! with the type given to the module variable of the same name.\n !\n ! Contributed by Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>"}, {"sha": "6a4b4ceed42cccad186f8b1b0d3706312ce20ad6", "filename": "gcc/testsuite/objc-obj-c++-shared/objc-test-suite-next-encode-assist-impl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-next-encode-assist-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-next-encode-assist-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2Fobjc-test-suite-next-encode-assist-impl.h?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -676,7 +676,7 @@ objc_layout_structure (const char *type,\n          && *ntype++ != '=')\n     /* do nothing */;\n \n-  /* If there's a \"<name>=\", ntype - 1 points to '='; skip the the name */\n+  /* If there's a \"<name>=\", ntype - 1 points to '='; skip the name */\n   if (*(ntype - 1) == '=')\n     type = ntype;\n "}, {"sha": "c28f173ce1a296b632405c4bdb5c4efd0baee3ce", "filename": "gcc/testsuite/objc/execute/next_mapping.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2d2d52fe20551875570ae70eedc99914981d37/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fnext_mapping.h?ref=5b2d2d52fe20551875570ae70eedc99914981d37", "patch": "@@ -749,7 +749,7 @@ objc_layout_structure (const char *type,\n          && *ntype++ != '=')\n     /* do nothing */;\n \n-  /* If there's a \"<name>=\", ntype - 1 points to '='; skip the the name */\n+  /* If there's a \"<name>=\", ntype - 1 points to '='; skip the name */\n   if (*(ntype - 1) == '=')\n     type = ntype;\n "}]}