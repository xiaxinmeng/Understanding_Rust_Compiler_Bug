{"sha": "27d16cb56972279fb1ca4e5c5a79d4c5b0b86610", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkMTZjYjU2OTcyMjc5ZmIxY2E0ZTVjNWE3OWQ0YzViMGI4NjYxMA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-06-15T13:07:39Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-07-16T16:51:46Z"}, "message": "Support scanning of build-time GC roots in gengtype\n\nCurrently gengtype supports scanning target-specific files for GC roots,\nbut those files must exist in the source tree.  This patch extends the\nsupport to include header files generated into the build directory.  It\nalso allows targets to specify build dependencies for s-gtype to ensure\nthe built headers are up to date prior to running gengtype.\n\n2021-06-15  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* Makefile.in (EXTRA_GTYPE_DEPS): New variable.\n\t(s-gtype): Depend on EXTRA_GTYPE_DEPS.\n\t* gengtype-state.c (state_writer::write_state_file_list): Add a\n\tparameter to the fileslist expression for the number of build\n\theaders to scan.\n\t(read_state_files_list): Detect build headers and strip the\n\tinitial \"./\" or \".\\\" from their names.\n\t* gengtype.c (build_headers): New global variable.\n\t(num_build_headers): Likewise.\n\t(open_base_files): Emit #include for each build header.\n\t(main): Detect and count build headers.\n\t* gengtype.h (build_headers): New extern variable.\n\t(num_build_headers): Likewise.", "tree": {"sha": "81d1c43675a0e7c4955e426cedd5957278b30367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81d1c43675a0e7c4955e426cedd5957278b30367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610/comments", "author": null, "committer": null, "parents": [{"sha": "3bf6e1f89dbd2c67c419d3d4e94085208611262f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf6e1f89dbd2c67c419d3d4e94085208611262f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bf6e1f89dbd2c67c419d3d4e94085208611262f"}], "stats": {"total": 64, "additions": 53, "deletions": 11}, "files": [{"sha": "1666ef84d6a43a386994873d447a33292d2912b7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=27d16cb56972279fb1ca4e5c5a79d4c5b0b86610", "patch": "@@ -560,6 +560,7 @@ out_file=$(srcdir)/config/@out_file@\n out_object_file=@out_object_file@\n common_out_file=$(srcdir)/common/config/@common_out_file@\n common_out_object_file=@common_out_object_file@\n+EXTRA_GTYPE_DEPS=\n md_file=$(srcdir)/common.md $(srcdir)/config/@md_file@\n tm_file_list=@tm_file_list@\n tm_include_list=@tm_include_list@\n@@ -2746,8 +2747,8 @@ s-gtyp-input: Makefile\n \t$(SHELL) $(srcdir)/../move-if-change tmp-gi.list gtyp-input.list\n \t$(STAMP) s-gtyp-input\n \n-s-gtype: build/gengtype$(build_exeext) $(filter-out [%], $(GTFILES)) \\\n-\t gtyp-input.list\n+s-gtype: $(EXTRA_GTYPE_DEPS) build/gengtype$(build_exeext) \\\n+\t$(filter-out [%], $(GTFILES)) gtyp-input.list\n # First, parse all files and save a state file.\n \t$(RUN_GEN) build/gengtype$(build_exeext) $(GENGTYPE_FLAGS) \\\n                     -S $(srcdir) -I gtyp-input.list -w tmp-gtype.state"}, {"sha": "ac9d536963ff02c80f7b8b8c376647cd5e431cf4", "filename": "gcc/gengtype-state.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610/gcc%2Fgengtype-state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610/gcc%2Fgengtype-state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-state.c?ref=27d16cb56972279fb1ca4e5c5a79d4c5b0b86610", "patch": "@@ -1269,7 +1269,7 @@ state_writer::write_state_files_list (void)\n   int i = 0;\n   /* Write the list of files with their lang_bitmap.  */\n   begin_s_expr (\"fileslist\");\n-  fprintf (state_file, \"%d\", (int) num_gt_files);\n+  fprintf (state_file, \"%d %d\", (int) num_gt_files, (int) num_build_headers);\n   for (i = 0; i < (int) num_gt_files; i++)\n     {\n       const char *cursrcrelpath = NULL;\n@@ -2456,16 +2456,20 @@ read_state_files_list (void)\n   struct state_token_st *t0 = peek_state_token (0);\n   struct state_token_st *t1 = peek_state_token (1);\n   struct state_token_st *t2 = peek_state_token (2);\n+  struct state_token_st *t3 = peek_state_token (3);\n \n   if (state_token_kind (t0) == STOK_LEFTPAR\n       && state_token_is_name (t1, \"!fileslist\")\n-      && state_token_kind (t2) == STOK_INTEGER)\n+      && state_token_kind (t2) == STOK_INTEGER\n+      && state_token_kind (t3) == STOK_INTEGER)\n     {\n-      int i = 0;\n+      int i = 0, j = 0;\n       num_gt_files = t2->stok_un.stok_num;\n-      next_state_tokens (3);\n-      t0 = t1 = t2 = NULL;\n+      num_build_headers = t3->stok_un.stok_num;\n+      next_state_tokens (4);\n+      t0 = t1 = t2 = t3 = NULL;\n       gt_files = XCNEWVEC (const input_file *, num_gt_files);\n+      build_headers = XCNEWVEC (const char *, num_build_headers);\n       for (i = 0; i < (int) num_gt_files; i++)\n \t{\n \t  bool issrcfile = FALSE;\n@@ -2498,7 +2502,23 @@ read_state_files_list (void)\n \t\t      free (fullpath);\n \t\t    }\n \t\t  else\n-\t\t    curgt = input_file_by_name (fnam);\n+\t\t    {\n+\t\t      curgt = input_file_by_name (fnam);\n+\t\t      /* Look for a header file created during the build,\n+\t\t\t which looks like \"./<filename>.h\".  */\n+\t\t      int len = strlen (fnam);\n+\t\t      if (len >= 5\n+\t\t\t  && fnam[0] == '.'\n+\t\t\t  && IS_DIR_SEPARATOR (fnam[1])\n+\t\t\t  && fnam[len-2] == '.'\n+\t\t\t  && fnam[len-1] == 'h')\n+\t\t\t{\n+\t\t\t  char *buf = (char *) xmalloc (len - 1);\n+\t\t\t  /* Strip the leading \"./\" from the filename.  */\n+\t\t\t  strcpy (buf, &fnam[2]);\n+\t\t\t  build_headers[j++] = buf;\n+\t\t\t}\n+\t\t    }\n \t\t  set_lang_bitmap (curgt, bmap);\n \t\t  gt_files[i] = curgt;\n \t\t  next_state_tokens (2);"}, {"sha": "31d4bf4e5d050d6cfdbf425886e6fcfe2b18df3b", "filename": "gcc/gengtype.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=27d16cb56972279fb1ca4e5c5a79d4c5b0b86610", "patch": "@@ -143,6 +143,11 @@ get_ultimate_base_class (type_p s)\n const input_file **gt_files;\n size_t num_gt_files;\n \n+/* Table of headers to be included in gtype-desc.c that are generated\n+   during the build.  These are identified as \"./<filename>.h\".  */\n+const char **build_headers;\n+size_t num_build_headers;\n+\n /* A number of places use the name of this \"gengtype.c\" file for a\n    location for things that we can't rely on the source to define.\n    Make sure we can still use pointer comparison on filenames.  */\n@@ -1736,6 +1741,8 @@ open_base_files (void)\n     gtype_desc_c = create_file (\"GCC\", \"gtype-desc.c\");\n     for (ifp = ifiles; *ifp; ifp++)\n       oprintf (gtype_desc_c, \"#include \\\"%s\\\"\\n\", *ifp);\n+    for (int j = 0; j < (int) num_build_headers; j++)\n+      oprintf (gtype_desc_c, \"#include \\\"%s\\\"\\n\", build_headers[j]);\n \n     /* Make sure we handle \"cfun\" specially.  */\n     oprintf (gtype_desc_c, \"\\n/* See definition in function.h.  */\\n\");\n@@ -5216,11 +5223,20 @@ main (int argc, char **argv)\n \t\t\t    &pos));\n #undef POS_HERE\n       read_input_list (inputlist);\n+      num_build_headers = 0;\n       for (i = 0; i < num_gt_files; i++)\n \t{\n-\t  parse_file (get_input_file_name (gt_files[i]));\n-\t  DBGPRINTF (\"parsed file #%d %s\", \n-\t\t     (int) i, get_input_file_name (gt_files[i]));\n+\t  const char *fname = get_input_file_name (gt_files[i]);\n+\t  parse_file (fname);\n+\t  DBGPRINTF (\"parsed file #%d %s\", (int) i, fname);\n+\t  /* Check if this is a header file generated during the build.  */\n+\t  int len = strlen (fname);\n+\t  if (len >= 5\n+\t      && fname[0] == '.'\n+\t      && IS_DIR_SEPARATOR (fname[1])\n+\t      && fname[len-2] == '.'\n+\t      && fname[len-1] == 'h')\n+\t    num_build_headers++;\n \t}\n       if (verbosity_level >= 1)\n \tprintf (\"%s parsed %d files with %d GTY types\\n\", "}, {"sha": "8a7a54957eafc6c1114267a1e93cf70e5eeead09", "filename": "gcc/gengtype.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d16cb56972279fb1ca4e5c5a79d4c5b0b86610/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=27d16cb56972279fb1ca4e5c5a79d4c5b0b86610", "patch": "@@ -55,6 +55,11 @@ struct fileloc\n extern const input_file** gt_files;\n extern size_t num_gt_files;\n \n+/* Table of headers to be included in gtype-desc.c that are generated\n+   during the build.  These are identified as \"./<filename>.h\".  */\n+extern const char **build_headers;\n+extern size_t num_build_headers;\n+\n /* A number of places use the name of this \"gengtype.c\" file for a\n    location for things that we can't rely on the source to define.  We\n    also need to refer to the \"system.h\" file specifically.  These two"}]}