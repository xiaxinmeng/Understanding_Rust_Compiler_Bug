{"sha": "4f469dec551ee19b81d9486e587ebb4945a92948", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0NjlkZWM1NTFlZTE5YjgxZDk0ODZlNTg3ZWJiNDk0NWE5Mjk0OA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-05T07:03:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:03:05Z"}, "message": "[Ada] Missing range check on assignment to bit-packed array\n\nThis patch adds an explicit range check on an assignment to a component\nof a bit-packed array, when the index type of the array is an\nenumeration type with a non-standard representation,\n\nExecuting the following:\n\n   gnatmake -f -gnata -q main\n   ./main\n\nmust yield:\n\n   1 is invalid\n    4097 is invalid\n    4116 is invalid\n    4117 is invalid\n    4118 is invalid\n    4119 is invalid\n    4120 is invalid\n    4121 is invalid\n\n----\nwith Example;     use Example;\nwith My_Types;    use My_Types;\nwith Text_IO; use Text_IO;\n\nprocedure main is\nbegin\n   --We try to access an invalid array location.\n    begin\n     dummy(idx    => 1,    action => DISABLE);\n    exception\n       when others => Text_IO.Put_Line (\"1 is invalid\");\n    end;\n\n      for I in typ_uint32'(16#1000#) .. 16#101E#  loop\n         declare\n         begin\n            --  Text_IO.Put_Line (typ_uint32'image(I) & \" OK\");\n            Dummy (Idx => I, action => Enable);\n        exception\n            when others => put_line (typ_uint32'Image (I) & \" is invalid\");\n         end;\n      end loop;\nend;\n----\nwith Interfaces;     use Interfaces;\n\npackage My_Types is\n\n   subtype typ_bool is boolean;\n\n   type typ_uint32 is new Interfaces.Unsigned_32;\n   subtype typ_uint16 is typ_uint32 range 0..2**16 - 1;\n\n   type typ_dis_en is ( DISABLE, ENABLE );\n   for typ_dis_en'size use 32;\n   for typ_dis_en use ( DISABLE => 0, ENABLE  => 1 );\n\ntype typ_rid is\n   (\n      RID_0,\n      RID_2,\n      RID_3,\n      RID_4,\n      RID_5,\n      RID_6,\n      RID_7,\n      RID_8,\n      RID_9,\n      RID_10,\n      RID_11,\n      RID_12,\n      RID_13,\n      RID_14,\n      RID_15,\n      RID_16,\n      RID_17,\n      RID_18,\n      RID_19,\n      RID_26,\n      RID_27,\n      RID_28,\n      RID_29,\n      RID_30\n   );\nfor typ_rid use\n   (\n      RID_0   =>  16#1000#,\n      RID_2   =>  16#1002#,\n      RID_3   =>  16#1003#,\n      RID_4   =>  16#1004#,\n      RID_5   =>  16#1005#,\n      RID_6   =>  16#1006#,\n      RID_7   =>  16#1007#,\n      RID_8   =>  16#1008#,\n      RID_9   =>  16#1009#,\n      RID_10  =>  16#100A#,\n      RID_11  =>  16#100B#,\n      RID_12  =>  16#100C#,\n      RID_13  =>  16#100D#,\n      RID_14  =>  16#100E#,\n      RID_15  =>  16#100F#,\n      RID_16  =>  16#1010#,\n      RID_17  =>  16#1011#,\n      RID_18  =>  16#1012#,\n      RID_19  =>  16#1013#,\n      RID_26  =>  16#101A#,\n      RID_27  =>  16#101B#,\n      RID_28  =>  16#101C#,\n      RID_29  =>  16#101D#,\n      RID_30  =>  16#101E#\n   );\nfor typ_rid'size use 16;\n\nend My_Types;\n\n----\nwith My_Types;\n\npackage  Example is\n\nprocedure Check;\nprocedure dummy\n   (\n     idx        : in My_Types.typ_uint32;\n     action     : in My_Types.typ_dis_en\n   );\n\nend Example;\n----\nwith Text_IO; use Text_IO;\nwith Unchecked_Conversion;\nwith my_types; use my_types;\npackage body Example is\n\n   type typ_rid_sts is array (My_Types.typ_rid)\n      of My_Types.typ_bool;\n   for typ_rid_sts'component_size use 1;\n\n   is_rid_en : typ_rid_sts :=\n      (TRUE, false, True, False, true, False, True, false, True, False,\n      TRUE, false, True, False, true, False, True, false, True, False,\n      TRUE, false, True, False);\n\n   procedure Check is\n   begin\n     pragma Assert (for all I in is_rid_en'range => is_rid_en (I));\n   end Check;\n\n   function toRidEvt is new Unchecked_Conversion\n      (\n         -- Defining source and target types\n         source => My_Types.typ_uint16,\n         target => My_Types.typ_rid\n      );\n\n   procedure dummy (\n     idx        : in My_Types.typ_uint32;\n     action     : in My_Types.typ_dis_en)\n   is\n      rid_evt      : My_Types.typ_rid;\n\n   begin\n\n      rid_evt := toRidEvt(idx);\n\n      if action = My_Types.ENABLE\n      then\n         is_rid_en(rid_evt) := TRUE;\n      else\n         is_rid_en(rid_evt) := FALSE;\n      end if;\n\n   end dummy;\nend Example;\n\n2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_pakd.adb (Expand_Bit_Packed_Element_Set): Add explicit\n\trange checks when the index type of the bit-packed array is an\n\tenumeration type with a non-standard representation,\n\nFrom-SVN: r273119", "tree": {"sha": "863eb5ac786796d67d0f3b00b0598198a0655d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/863eb5ac786796d67d0f3b00b0598198a0655d02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f469dec551ee19b81d9486e587ebb4945a92948", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f469dec551ee19b81d9486e587ebb4945a92948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f469dec551ee19b81d9486e587ebb4945a92948", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f469dec551ee19b81d9486e587ebb4945a92948/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be0443c30242995d615345d546987dace6ca1b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0443c30242995d615345d546987dace6ca1b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0443c30242995d615345d546987dace6ca1b07"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "8daf38b3c88b8780d9b312069280f5c131ddf5ea", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f469dec551ee19b81d9486e587ebb4945a92948/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f469dec551ee19b81d9486e587ebb4945a92948/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4f469dec551ee19b81d9486e587ebb4945a92948", "patch": "@@ -1,3 +1,9 @@\n+2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_pakd.adb (Expand_Bit_Packed_Element_Set): Add explicit\n+\trange checks when the index type of the bit-packed array is an\n+\tenumeration type with a non-standard representation,\n+\n 2019-07-05  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_res.adb (Is_Control_Flow_Statement): Delay statements"}, {"sha": "9a659fa3371dce81107a4b84ef28e5ebc065bd61", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f469dec551ee19b81d9486e587ebb4945a92948/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f469dec551ee19b81d9486e587ebb4945a92948/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=4f469dec551ee19b81d9486e587ebb4945a92948", "patch": "@@ -1022,7 +1022,9 @@ package body Exp_Pakd is\n       Ass_OK : constant Boolean := Assignment_OK (Lhs);\n       --  Used to preserve assignment OK status when assignment is rewritten\n \n-      Rhs : Node_Id := Expression (N);\n+      Expr : Node_Id;\n+\n+      Rhs  : Node_Id := Expression (N);\n       --  Initially Rhs is the right hand side value, it will be replaced\n       --  later by an appropriate unchecked conversion for the assignment.\n \n@@ -1140,6 +1142,35 @@ package body Exp_Pakd is\n          Analyze_And_Resolve (Rhs, Ctyp);\n       end if;\n \n+      --  If any of the indices has a nonstandard representation, introduce\n+      --  the proper Rep_To_Pos conversion, which in turn will generate index\n+      --  checks when needed. We do this on a copy of the index expression,\n+      --  rather that rewriting the LHS altogether.\n+\n+      Expr := First (Expressions (Lhs));\n+      while Present (Expr) loop\n+         declare\n+            Loc       : constant Source_Ptr := Sloc (Expr);\n+            Expr_Typ  : constant Entity_Id := Etype (Expr);\n+            Expr_Copy : Node_Id;\n+\n+         begin\n+            if Is_Enumeration_Type (Expr_Typ)\n+              and then Has_Non_Standard_Rep (Expr_Typ)\n+            then\n+               Expr_Copy :=\n+                 Make_Attribute_Reference (Loc,\n+                   Prefix         => New_Occurrence_Of (Expr_Typ, Loc),\n+                   Attribute_Name => Name_Pos,\n+                   Expressions    => New_List (Relocate_Node (Expr)));\n+               Set_Parent (Expr_Copy, N);\n+               Analyze_And_Resolve (Expr_Copy, Standard_Natural);\n+            end if;\n+         end;\n+\n+         Next (Expr);\n+      end loop;\n+\n       --  Case of component size 1,2,4 or any component size for the modular\n       --  case. These are the cases for which we can inline the code.\n "}]}