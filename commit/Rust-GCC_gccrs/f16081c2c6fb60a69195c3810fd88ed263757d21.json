{"sha": "f16081c2c6fb60a69195c3810fd88ed263757d21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2MDgxYzJjNmZiNjBhNjkxOTVjMzgxMGZkODhlZDI2Mzc1N2QyMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-09-04T11:23:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-09-04T11:23:44Z"}, "message": "Add portable timed_mutex and recursive_timed_mutex.\n\n\tPR libstdc++/65704\n\t* include/Makefile.am: Add <bits/mutex.h>.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/mutex.h (__mutex_base, mutex, lock_guard, unique_lock):\n\tNew file containing types moved from <mutex>.\n\t* include/std/condition_variable: Include <bits/mutex.h> instead of\n\t<mutex>.\n\t* include/std/mutex (__mutex_base, mutex, lock_guard, unique_lock):\n\tMove to <bits/mutex.h>.\n\t*  testsuite/30_threads/recursive_timed_mutex/cons/1.cc: Remove\n\tdg-require-gthreads-timed.\n\t*  testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc:\n\tLikewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc:\n\tLikewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/dest/\n\tdestructor_locked.cc: Likewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/lock/1.cc: Likewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/lock/2.cc: Likewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc: Likewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc: Likewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc:\n\tLikewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc:\n\tLikewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc:\n\tLikewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc:\n\tLikewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc:\n\tLikewise.\n\t*  testsuite/30_threads/recursive_timed_mutex/unlock/1.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/cons/1.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/dest/destructor_locked.cc:\n\tLikewise.\n\t*  testsuite/30_threads/timed_mutex/lock/1.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/requirements/standard_layout.cc:\n\tLikewise.\n\t*  testsuite/30_threads/timed_mutex/try_lock/1.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/try_lock/2.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/try_lock_for/1.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/try_lock_for/2.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/try_lock_for/3.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/try_lock_until/1.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/try_lock_until/2.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/try_lock_until/57641.cc: Likewise.\n\t*  testsuite/30_threads/timed_mutex/unlock/1.cc: Likewise.\n\t*  testsuite/30_threads/unique_lock/cons/5.cc: Likewise.\n\t*  testsuite/30_threads/unique_lock/cons/6.cc: Likewise.\n\t*  testsuite/30_threads/unique_lock/locking/3.cc: Likewise.\n\t*  testsuite/30_threads/unique_lock/locking/4.cc: Likewise.\n\nFrom-SVN: r227490", "tree": {"sha": "2ae7f2e44b80d66842aa2caa35dea4810069c0d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ae7f2e44b80d66842aa2caa35dea4810069c0d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f16081c2c6fb60a69195c3810fd88ed263757d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16081c2c6fb60a69195c3810fd88ed263757d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f16081c2c6fb60a69195c3810fd88ed263757d21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f16081c2c6fb60a69195c3810fd88ed263757d21/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda844f0ccb5be311f9aef651ea7d490942cb331", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda844f0ccb5be311f9aef651ea7d490942cb331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda844f0ccb5be311f9aef651ea7d490942cb331"}], "stats": {"total": 870, "additions": 566, "deletions": 304}, "files": [{"sha": "030becbdbe62f720c189e60e756514814cbb6524", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -1,3 +1,59 @@\n+2015-09-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/65704\n+\t* include/Makefile.am: Add <bits/mutex.h>.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/mutex.h (__mutex_base, mutex, lock_guard, unique_lock):\n+\tNew file containing types moved from <mutex>.\n+\t* include/std/condition_variable: Include <bits/mutex.h> instead of\n+\t<mutex>.\n+\t* include/std/mutex (__mutex_base, mutex, lock_guard, unique_lock):\n+\tMove to <bits/mutex.h>.\n+\t*  testsuite/30_threads/recursive_timed_mutex/cons/1.cc: Remove\n+\tdg-require-gthreads-timed.\n+\t*  testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc:\n+\tLikewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc:\n+\tLikewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/dest/\n+\tdestructor_locked.cc: Likewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/lock/1.cc: Likewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/lock/2.cc: Likewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc: Likewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc: Likewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc:\n+\tLikewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc:\n+\tLikewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc:\n+\tLikewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc:\n+\tLikewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc:\n+\tLikewise.\n+\t*  testsuite/30_threads/recursive_timed_mutex/unlock/1.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/cons/1.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/dest/destructor_locked.cc:\n+\tLikewise.\n+\t*  testsuite/30_threads/timed_mutex/lock/1.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/requirements/standard_layout.cc:\n+\tLikewise.\n+\t*  testsuite/30_threads/timed_mutex/try_lock/1.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/try_lock/2.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/try_lock_for/1.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/try_lock_for/2.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/try_lock_for/3.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/try_lock_until/1.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/try_lock_until/2.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/try_lock_until/57641.cc: Likewise.\n+\t*  testsuite/30_threads/timed_mutex/unlock/1.cc: Likewise.\n+\t*  testsuite/30_threads/unique_lock/cons/5.cc: Likewise.\n+\t*  testsuite/30_threads/unique_lock/cons/6.cc: Likewise.\n+\t*  testsuite/30_threads/unique_lock/locking/3.cc: Likewise.\n+\t*  testsuite/30_threads/unique_lock/locking/4.cc: Likewise.\n+\n 2015-09-04  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \t    Jonathan Wakely  <jwakely@redhat.com>\n "}, {"sha": "74100f299251568b518c018b90810b4c5bcc09c0", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -122,6 +122,7 @@ bits_headers = \\\n \t${bits_srcdir}/mask_array.h \\\n \t${bits_srcdir}/memoryfwd.h \\\n \t${bits_srcdir}/move.h \\\n+\t${bits_srcdir}/mutex.h \\\n \t${bits_srcdir}/ostream.tcc \\\n \t${bits_srcdir}/ostream_insert.h \\\n \t${bits_srcdir}/parse_numbers.h \\"}, {"sha": "b72df264531dee9623170adc5dabd309f4bed2aa", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -412,6 +412,7 @@ bits_headers = \\\n \t${bits_srcdir}/mask_array.h \\\n \t${bits_srcdir}/memoryfwd.h \\\n \t${bits_srcdir}/move.h \\\n+\t${bits_srcdir}/mutex.h \\\n \t${bits_srcdir}/ostream.tcc \\\n \t${bits_srcdir}/ostream_insert.h \\\n \t${bits_srcdir}/parse_numbers.h \\"}, {"sha": "43f5b0b2d60c3497048872d64b41af63707e7673", "filename": "libstdc++-v3/include/bits/mutex.h", "status": "added", "additions": 360, "deletions": 0, "changes": 360, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmutex.h?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -0,0 +1,360 @@\n+// std::mutex implementation -*- C++ -*-\n+\n+// Copyright (C) 2003-2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/mutex.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{mutex}\n+ */\n+\n+#ifndef _GLIBCXX_MUTEX_H\n+#define _GLIBCXX_MUTEX_H 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus < 201103L\n+# include <bits/c++0x_warning.h>\n+#else\n+\n+#include <system_error>\n+#include <bits/functexcept.h>\n+#include <bits/gthr.h>\n+#include <bits/move.h> // for std::swap\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /**\n+   * @defgroup mutexes Mutexes\n+   * @ingroup concurrency\n+   *\n+   * Classes for mutex support.\n+   * @{\n+   */\n+\n+#ifdef _GLIBCXX_HAS_GTHREADS\n+  // Common base class for std::mutex and std::timed_mutex\n+  class __mutex_base\n+  {\n+  protected:\n+    typedef __gthread_mutex_t\t\t\t__native_type;\n+\n+#ifdef __GTHREAD_MUTEX_INIT\n+    __native_type  _M_mutex = __GTHREAD_MUTEX_INIT;\n+\n+    constexpr __mutex_base() noexcept = default;\n+#else\n+    __native_type  _M_mutex;\n+\n+    __mutex_base() noexcept\n+    {\n+      // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n+      __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n+    }\n+\n+    ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }\n+#endif\n+\n+    __mutex_base(const __mutex_base&) = delete;\n+    __mutex_base& operator=(const __mutex_base&) = delete;\n+  };\n+\n+  /// mutex\n+  class mutex : private __mutex_base\n+  {\n+  public:\n+    typedef __native_type* \t\t\tnative_handle_type;\n+\n+#ifdef __GTHREAD_MUTEX_INIT\n+    constexpr\n+#endif\n+    mutex() noexcept = default;\n+    ~mutex() = default;\n+\n+    mutex(const mutex&) = delete;\n+    mutex& operator=(const mutex&) = delete;\n+\n+    void\n+    lock()\n+    {\n+      int __e = __gthread_mutex_lock(&_M_mutex);\n+\n+      // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)\n+      if (__e)\n+\t__throw_system_error(__e);\n+    }\n+\n+    bool\n+    try_lock() noexcept\n+    {\n+      // XXX EINVAL, EAGAIN, EBUSY\n+      return !__gthread_mutex_trylock(&_M_mutex);\n+    }\n+\n+    void\n+    unlock()\n+    {\n+      // XXX EINVAL, EAGAIN, EPERM\n+      __gthread_mutex_unlock(&_M_mutex);\n+    }\n+\n+    native_handle_type\n+    native_handle()\n+    { return &_M_mutex; }\n+  };\n+\n+#endif // _GLIBCXX_HAS_GTHREADS\n+\n+  /// Do not acquire ownership of the mutex.\n+  struct defer_lock_t { };\n+\n+  /// Try to acquire ownership of the mutex without blocking.\n+  struct try_to_lock_t { };\n+\n+  /// Assume the calling thread has already obtained mutex ownership\n+  /// and manage it.\n+  struct adopt_lock_t { };\n+\n+  constexpr defer_lock_t\tdefer_lock { };\n+  constexpr try_to_lock_t\ttry_to_lock { };\n+  constexpr adopt_lock_t\tadopt_lock { };\n+\n+  /// @brief  Scoped lock idiom.\n+  // Acquire the mutex here with a constructor call, then release with\n+  // the destructor call in accordance with RAII style.\n+  template<typename _Mutex>\n+    class lock_guard\n+    {\n+    public:\n+      typedef _Mutex mutex_type;\n+\n+      explicit lock_guard(mutex_type& __m) : _M_device(__m)\n+      { _M_device.lock(); }\n+\n+      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)\n+      { } // calling thread owns mutex\n+\n+      ~lock_guard()\n+      { _M_device.unlock(); }\n+\n+      lock_guard(const lock_guard&) = delete;\n+      lock_guard& operator=(const lock_guard&) = delete;\n+\n+    private:\n+      mutex_type&  _M_device;\n+    };\n+\n+  /// unique_lock\n+  template<typename _Mutex>\n+    class unique_lock\n+    {\n+    public:\n+      typedef _Mutex mutex_type;\n+\n+      unique_lock() noexcept\n+      : _M_device(0), _M_owns(false)\n+      { }\n+\n+      explicit unique_lock(mutex_type& __m)\n+      : _M_device(std::__addressof(__m)), _M_owns(false)\n+      {\n+\tlock();\n+\t_M_owns = true;\n+      }\n+\n+      unique_lock(mutex_type& __m, defer_lock_t) noexcept\n+      : _M_device(std::__addressof(__m)), _M_owns(false)\n+      { }\n+\n+      unique_lock(mutex_type& __m, try_to_lock_t)\n+      : _M_device(std::__addressof(__m)), _M_owns(_M_device->try_lock())\n+      { }\n+\n+      unique_lock(mutex_type& __m, adopt_lock_t)\n+      : _M_device(std::__addressof(__m)), _M_owns(true)\n+      {\n+\t// XXX calling thread owns mutex\n+      }\n+\n+      template<typename _Clock, typename _Duration>\n+\tunique_lock(mutex_type& __m,\n+\t\t    const chrono::time_point<_Clock, _Duration>& __atime)\n+\t: _M_device(std::__addressof(__m)),\n+\t  _M_owns(_M_device->try_lock_until(__atime))\n+\t{ }\n+\n+      template<typename _Rep, typename _Period>\n+\tunique_lock(mutex_type& __m,\n+\t\t    const chrono::duration<_Rep, _Period>& __rtime)\n+\t: _M_device(std::__addressof(__m)),\n+\t  _M_owns(_M_device->try_lock_for(__rtime))\n+\t{ }\n+\n+      ~unique_lock()\n+      {\n+\tif (_M_owns)\n+\t  unlock();\n+      }\n+\n+      unique_lock(const unique_lock&) = delete;\n+      unique_lock& operator=(const unique_lock&) = delete;\n+\n+      unique_lock(unique_lock&& __u) noexcept\n+      : _M_device(__u._M_device), _M_owns(__u._M_owns)\n+      {\n+\t__u._M_device = 0;\n+\t__u._M_owns = false;\n+      }\n+\n+      unique_lock& operator=(unique_lock&& __u) noexcept\n+      {\n+\tif(_M_owns)\n+\t  unlock();\n+\n+\tunique_lock(std::move(__u)).swap(*this);\n+\n+\t__u._M_device = 0;\n+\t__u._M_owns = false;\n+\n+\treturn *this;\n+      }\n+\n+      void\n+      lock()\n+      {\n+\tif (!_M_device)\n+\t  __throw_system_error(int(errc::operation_not_permitted));\n+\telse if (_M_owns)\n+\t  __throw_system_error(int(errc::resource_deadlock_would_occur));\n+\telse\n+\t  {\n+\t    _M_device->lock();\n+\t    _M_owns = true;\n+\t  }\n+      }\n+\n+      bool\n+      try_lock()\n+      {\n+\tif (!_M_device)\n+\t  __throw_system_error(int(errc::operation_not_permitted));\n+\telse if (_M_owns)\n+\t  __throw_system_error(int(errc::resource_deadlock_would_occur));\n+\telse\n+\t  {\n+\t    _M_owns = _M_device->try_lock();\n+\t    return _M_owns;\n+\t  }\n+      }\n+\n+      template<typename _Clock, typename _Duration>\n+\tbool\n+\ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n+\t{\n+\t  if (!_M_device)\n+\t    __throw_system_error(int(errc::operation_not_permitted));\n+\t  else if (_M_owns)\n+\t    __throw_system_error(int(errc::resource_deadlock_would_occur));\n+\t  else\n+\t    {\n+\t      _M_owns = _M_device->try_lock_until(__atime);\n+\t      return _M_owns;\n+\t    }\n+\t}\n+\n+      template<typename _Rep, typename _Period>\n+\tbool\n+\ttry_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n+\t{\n+\t  if (!_M_device)\n+\t    __throw_system_error(int(errc::operation_not_permitted));\n+\t  else if (_M_owns)\n+\t    __throw_system_error(int(errc::resource_deadlock_would_occur));\n+\t  else\n+\t    {\n+\t      _M_owns = _M_device->try_lock_for(__rtime);\n+\t      return _M_owns;\n+\t    }\n+\t }\n+\n+      void\n+      unlock()\n+      {\n+\tif (!_M_owns)\n+\t  __throw_system_error(int(errc::operation_not_permitted));\n+\telse if (_M_device)\n+\t  {\n+\t    _M_device->unlock();\n+\t    _M_owns = false;\n+\t  }\n+      }\n+\n+      void\n+      swap(unique_lock& __u) noexcept\n+      {\n+\tstd::swap(_M_device, __u._M_device);\n+\tstd::swap(_M_owns, __u._M_owns);\n+      }\n+\n+      mutex_type*\n+      release() noexcept\n+      {\n+\tmutex_type* __ret = _M_device;\n+\t_M_device = 0;\n+\t_M_owns = false;\n+\treturn __ret;\n+      }\n+\n+      bool\n+      owns_lock() const noexcept\n+      { return _M_owns; }\n+\n+      explicit operator bool() const noexcept\n+      { return owns_lock(); }\n+\n+      mutex_type*\n+      mutex() const noexcept\n+      { return _M_device; }\n+\n+    private:\n+      mutex_type*\t_M_device;\n+      bool\t\t_M_owns; // XXX use atomic_bool\n+    };\n+\n+  /// Swap overload for unique_lock objects.\n+  template<typename _Mutex>\n+    inline void\n+    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y) noexcept\n+    { __x.swap(__y); }\n+\n+  // @} group mutexes\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+#endif // _GLIBCXX_USE_C99_STDINT_TR1\n+\n+#endif // C++11\n+\n+#endif // _GLIBCXX_MUTEX_H"}, {"sha": "4714774f1c3d96d421eb4147620322c3f5994b84", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -36,7 +36,7 @@\n #else\n \n #include <chrono>\n-#include <mutex>\n+#include <bits/mutex.h>\n #include <ext/concurrence.h>\n #include <bits/alloc_traits.h>\n #include <bits/allocator.h>"}, {"sha": "47141d95477f9e1c30bef4b60c08547cf84f03cf", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 147, "deletions": 270, "changes": 417, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -41,42 +41,24 @@\n #include <type_traits>\n #include <functional>\n #include <system_error>\n-#include <bits/functexcept.h>\n-#include <bits/gthr.h>\n-#include <bits/move.h> // for std::swap\n+#include <bits/mutex.h>\n+#if ! _GTHREAD_USE_MUTEX_TIMEDLOCK\n+# include <condition_variable>\n+# include <thread>\n+#endif\n \n #ifdef _GLIBCXX_USE_C99_STDINT_TR1\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-#ifdef _GLIBCXX_HAS_GTHREADS\n-  // Common base class for std::mutex and std::timed_mutex\n-  class __mutex_base\n-  {\n-  protected:\n-    typedef __gthread_mutex_t\t\t\t__native_type;\n-\n-#ifdef __GTHREAD_MUTEX_INIT\n-    __native_type  _M_mutex = __GTHREAD_MUTEX_INIT;\n-\n-    constexpr __mutex_base() noexcept = default;\n-#else\n-    __native_type  _M_mutex;\n-\n-    __mutex_base() noexcept\n-    {\n-      // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n-      __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n-    }\n-\n-    ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }\n-#endif\n+  /**\n+   * @ingroup mutexes\n+   * @{\n+   */\n \n-    __mutex_base(const __mutex_base&) = delete;\n-    __mutex_base& operator=(const __mutex_base&) = delete;\n-  };\n+#ifdef _GLIBCXX_HAS_GTHREADS\n \n   // Common base class for std::recursive_mutex and std::recursive_timed_mutex\n   class __recursive_mutex_base\n@@ -105,58 +87,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n   };\n \n-  /**\n-   * @defgroup mutexes Mutexes\n-   * @ingroup concurrency\n-   *\n-   * Classes for mutex support.\n-   * @{\n-   */\n-\n-  /// mutex\n-  class mutex : private __mutex_base\n-  {\n-  public:\n-    typedef __native_type* \t\t\tnative_handle_type;\n-\n-#ifdef __GTHREAD_MUTEX_INIT\n-    constexpr\n-#endif\n-    mutex() noexcept = default;\n-    ~mutex() = default;\n-\n-    mutex(const mutex&) = delete;\n-    mutex& operator=(const mutex&) = delete;\n-\n-    void\n-    lock()\n-    {\n-      int __e = __gthread_mutex_lock(&_M_mutex);\n-\n-      // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)\n-      if (__e)\n-\t__throw_system_error(__e);\n-    }\n-\n-    bool\n-    try_lock() noexcept\n-    {\n-      // XXX EINVAL, EAGAIN, EBUSY\n-      return !__gthread_mutex_trylock(&_M_mutex);\n-    }\n-\n-    void\n-    unlock()\n-    {\n-      // XXX EINVAL, EAGAIN, EPERM\n-      __gthread_mutex_unlock(&_M_mutex);\n-    }\n-\n-    native_handle_type\n-    native_handle()\n-    { return &_M_mutex; }\n-  };\n-\n   /// recursive_mutex\n   class recursive_mutex : private __recursive_mutex_base\n   {\n@@ -359,230 +289,177 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_timedlock(const __gthread_time_t& __ts)\n       { return !__gthread_recursive_mutex_timedlock(&_M_mutex, &__ts); }\n   };\n-#endif\n-#endif // _GLIBCXX_HAS_GTHREADS\n-\n-  /// Do not acquire ownership of the mutex.\n-  struct defer_lock_t { };\n-\n-  /// Try to acquire ownership of the mutex without blocking.\n-  struct try_to_lock_t { };\n-\n-  /// Assume the calling thread has already obtained mutex ownership\n-  /// and manage it.\n-  struct adopt_lock_t { };\n-\n-  constexpr defer_lock_t\tdefer_lock { };\n-  constexpr try_to_lock_t\ttry_to_lock { };\n-  constexpr adopt_lock_t\tadopt_lock { };\n-\n-  /// @brief  Scoped lock idiom.\n-  // Acquire the mutex here with a constructor call, then release with\n-  // the destructor call in accordance with RAII style.\n-  template<typename _Mutex>\n-    class lock_guard\n-    {\n-    public:\n-      typedef _Mutex mutex_type;\n \n-      explicit lock_guard(mutex_type& __m) : _M_device(__m)\n-      { _M_device.lock(); }\n+#else // !_GTHREAD_USE_MUTEX_TIMEDLOCK\n \n-      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)\n-      { } // calling thread owns mutex\n+  /// timed_mutex\n+  class timed_mutex\n+  {\n+    mutex\t\t_M_mut;\n+    condition_variable\t_M_cv;\n+    bool\t\t_M_locked = false;\n \n-      ~lock_guard()\n-      { _M_device.unlock(); }\n+  public:\n \n-      lock_guard(const lock_guard&) = delete;\n-      lock_guard& operator=(const lock_guard&) = delete;\n+    timed_mutex() = default;\n+    ~timed_mutex() { _GLIBCXX_DEBUG_ASSERT( !_M_locked ); }\n \n-    private:\n-      mutex_type&  _M_device;\n-    };\n+    timed_mutex(const timed_mutex&) = delete;\n+    timed_mutex& operator=(const timed_mutex&) = delete;\n \n-  /// unique_lock\n-  template<typename _Mutex>\n-    class unique_lock\n+    void\n+    lock()\n     {\n-    public:\n-      typedef _Mutex mutex_type;\n+      unique_lock<mutex> __lk(_M_mut);\n+      _M_cv.wait(__lk, [&]{ return !_M_locked; });\n+      _M_locked = true;\n+    }\n \n-      unique_lock() noexcept\n-      : _M_device(0), _M_owns(false)\n-      { }\n+    bool\n+    try_lock()\n+    {\n+      lock_guard<mutex> __lk(_M_mut);\n+      if (_M_locked)\n+\treturn false;\n+      _M_locked = true;\n+      return true;\n+    }\n \n-      explicit unique_lock(mutex_type& __m)\n-      : _M_device(std::__addressof(__m)), _M_owns(false)\n+    template<typename _Rep, typename _Period>\n+      bool\n+      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n-\tlock();\n-\t_M_owns = true;\n+\tunique_lock<mutex> __lk(_M_mut);\n+\tif (!_M_cv.wait_for(__lk, __rtime, [&]{ return !_M_locked; }))\n+\t  return false;\n+\t_M_locked = true;\n+\treturn true;\n       }\n \n-      unique_lock(mutex_type& __m, defer_lock_t) noexcept\n-      : _M_device(std::__addressof(__m)), _M_owns(false)\n-      { }\n-\n-      unique_lock(mutex_type& __m, try_to_lock_t)\n-      : _M_device(std::__addressof(__m)), _M_owns(_M_device->try_lock())\n-      { }\n-\n-      unique_lock(mutex_type& __m, adopt_lock_t)\n-      : _M_device(std::__addressof(__m)), _M_owns(true)\n+    template<typename _Clock, typename _Duration>\n+      bool\n+      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n-\t// XXX calling thread owns mutex\n+\tunique_lock<mutex> __lk(_M_mut);\n+\tif (!_M_cv.wait_until(__lk, __atime, [&]{ return !_M_locked; }))\n+\t  return false;\n+\t_M_locked = true;\n+\treturn true;\n       }\n \n-      template<typename _Clock, typename _Duration>\n-\tunique_lock(mutex_type& __m,\n-\t\t    const chrono::time_point<_Clock, _Duration>& __atime)\n-\t: _M_device(std::__addressof(__m)),\n-\t  _M_owns(_M_device->try_lock_until(__atime))\n-\t{ }\n+    void\n+    unlock()\n+    {\n+      lock_guard<mutex> __lk(_M_mut);\n+      _GLIBCXX_DEBUG_ASSERT( _M_locked );\n+      _M_locked = false;\n+      _M_cv.notify_one();\n+    }\n+  };\n \n-      template<typename _Rep, typename _Period>\n-\tunique_lock(mutex_type& __m,\n-\t\t    const chrono::duration<_Rep, _Period>& __rtime)\n-\t: _M_device(std::__addressof(__m)),\n-\t  _M_owns(_M_device->try_lock_for(__rtime))\n-\t{ }\n+  /// recursive_timed_mutex\n+  class recursive_timed_mutex\n+  {\n+    mutex\t\t_M_mut;\n+    condition_variable\t_M_cv;\n+    thread::id\t\t_M_owner;\n+    unsigned\t\t_M_count = 0;\n \n-      ~unique_lock()\n-      {\n-\tif (_M_owns)\n-\t  unlock();\n-      }\n+    // Predicate type that tests whether the current thread can lock a mutex.\n+    struct _Can_lock\n+    {\n+      _Can_lock(const recursive_timed_mutex* __mx)\n+      : _M_mx(__mx), _M_caller(this_thread::get_id()) { }\n \n-      unique_lock(const unique_lock&) = delete;\n-      unique_lock& operator=(const unique_lock&) = delete;\n+      // Returns true if the mutex is unlocked or is locked by _M_caller.\n+      bool\n+      operator()() const noexcept\n+      { return _M_mx->_M_count == 0 || _M_mx->_M_owner == _M_caller; }\n \n-      unique_lock(unique_lock&& __u) noexcept\n-      : _M_device(__u._M_device), _M_owns(__u._M_owns)\n-      {\n-\t__u._M_device = 0;\n-\t__u._M_owns = false;\n-      }\n+      const recursive_timed_mutex* _M_mx;\n+      thread::id _M_caller;\n+    };\n \n-      unique_lock& operator=(unique_lock&& __u) noexcept\n-      {\n-\tif(_M_owns)\n-\t  unlock();\n+  public:\n \n-\tunique_lock(std::move(__u)).swap(*this);\n+    recursive_timed_mutex() = default;\n+    ~recursive_timed_mutex() { _GLIBCXX_DEBUG_ASSERT( _M_count == 0 ); }\n \n-\t__u._M_device = 0;\n-\t__u._M_owns = false;\n+    recursive_timed_mutex(const recursive_timed_mutex&) = delete;\n+    recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;\n \n-\treturn *this;\n-      }\n+    void\n+    lock()\n+    {\n+      _Can_lock __can_lock{this};\n+      unique_lock<mutex> __lk(_M_mut);\n+      _M_cv.wait(__lk, __can_lock);\n+      if (_M_count == -1u)\n+\t__throw_system_error(EAGAIN); // [thread.timedmutex.recursive]/3\n+      _M_owner = __id;\n+      ++_M_count;\n+    }\n+\n+    bool\n+    try_lock()\n+    {\n+      _Can_lock __can_lock{this};\n+      lock_guard<mutex> __lk(_M_mut);\n+      if (!__can_lock())\n+\treturn false;\n+      if (_M_count == -1u)\n+\treturn false;\n+      _M_owner = __id;\n+      ++_M_count;\n+      return true;\n+    }\n \n-      void\n-      lock()\n+    template<typename _Rep, typename _Period>\n+      bool\n+      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n       {\n-\tif (!_M_device)\n-\t  __throw_system_error(int(errc::operation_not_permitted));\n-\telse if (_M_owns)\n-\t  __throw_system_error(int(errc::resource_deadlock_would_occur));\n-\telse\n-\t  {\n-\t    _M_device->lock();\n-\t    _M_owns = true;\n-\t  }\n+\t_Can_lock __can_lock{this};\n+\tunique_lock<mutex> __lk(_M_mut);\n+\tif (!_M_cv.wait_for(__lk, __rtime, __can_lock);\n+\t  return false;\n+\tif (_M_count == -1u)\n+\t  return false;\n+\t_M_owner = __id;\n+\t++_M_count;\n+\treturn true;\n       }\n \n+    template<typename _Clock, typename _Duration>\n       bool\n-      try_lock()\n+      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n-\tif (!_M_device)\n-\t  __throw_system_error(int(errc::operation_not_permitted));\n-\telse if (_M_owns)\n-\t  __throw_system_error(int(errc::resource_deadlock_would_occur));\n-\telse\n-\t  {\n-\t    _M_owns = _M_device->try_lock();\n-\t    return _M_owns;\n-\t  }\n+\t_Can_lock __can_lock{this};\n+\tunique_lock<mutex> __lk(_M_mut);\n+\tif (!_M_cv.wait_until(__lk, __atime, __can_lock);\n+\t  return false;\n+\tif (_M_count == -1u)\n+\t  return false;\n+\t_M_owner = __id;\n+\t++_M_count;\n+\treturn true;\n       }\n \n-      template<typename _Clock, typename _Duration>\n-\tbool\n-\ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n+    void\n+    unlock()\n+    {\n+      lock_guard<mutex> __lk(_M_mut);\n+      _GLIBCXX_DEBUG_ASSERT( _M_owner == this_thread::get_id() );\n+      _GLIBCXX_DEBUG_ASSERT( _M_count > 0 );\n+      if (--_M_count == 0)\n \t{\n-\t  if (!_M_device)\n-\t    __throw_system_error(int(errc::operation_not_permitted));\n-\t  else if (_M_owns)\n-\t    __throw_system_error(int(errc::resource_deadlock_would_occur));\n-\t  else\n-\t    {\n-\t      _M_owns = _M_device->try_lock_until(__atime);\n-\t      return _M_owns;\n-\t    }\n+\t  _M_owner = {};\n+\t  _M_cv.notify_one();\n \t}\n+    }\n+  };\n \n-      template<typename _Rep, typename _Period>\n-\tbool\n-\ttry_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n-\t{\n-\t  if (!_M_device)\n-\t    __throw_system_error(int(errc::operation_not_permitted));\n-\t  else if (_M_owns)\n-\t    __throw_system_error(int(errc::resource_deadlock_would_occur));\n-\t  else\n-\t    {\n-\t      _M_owns = _M_device->try_lock_for(__rtime);\n-\t      return _M_owns;\n-\t    }\n-\t }\n-\n-      void\n-      unlock()\n-      {\n-\tif (!_M_owns)\n-\t  __throw_system_error(int(errc::operation_not_permitted));\n-\telse if (_M_device)\n-\t  {\n-\t    _M_device->unlock();\n-\t    _M_owns = false;\n-\t  }\n-      }\n-\n-      void\n-      swap(unique_lock& __u) noexcept\n-      {\n-\tstd::swap(_M_device, __u._M_device);\n-\tstd::swap(_M_owns, __u._M_owns);\n-      }\n-\n-      mutex_type*\n-      release() noexcept\n-      {\n-\tmutex_type* __ret = _M_device;\n-\t_M_device = 0;\n-\t_M_owns = false;\n-\treturn __ret;\n-      }\n-\n-      bool\n-      owns_lock() const noexcept\n-      { return _M_owns; }\n-\n-      explicit operator bool() const noexcept\n-      { return owns_lock(); }\n-\n-      mutex_type*\n-      mutex() const noexcept\n-      { return _M_device; }\n-\n-    private:\n-      mutex_type*\t_M_device;\n-      bool\t\t_M_owns; // XXX use atomic_bool\n-    };\n-\n-  /// Swap overload for unique_lock objects.\n-  template<typename _Mutex>\n-    inline void\n-    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y) noexcept\n-    { __x.swap(__y); }\n+#endif\n+#endif // _GLIBCXX_HAS_GTHREADS\n \n   template<typename _Lock>\n     inline unique_lock<_Lock>"}, {"sha": "6e4c7f508e7a008231f12ed1d7cfe11e828de961", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "62264feb147dfa3d351ee1af03c37b7e3b35ac9b", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -1,7 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "4f2c3cc3f010e93ad91a0d479da24a89d1cceff7", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -1,7 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "e06caecf51bd0a3c2e96336ab8026e755199f78e", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fdest%2Fdestructor_locked.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "104f0a96a3eb2f117fb5a8b309464678372b839d", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/lock/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "d4528b58a598a53d87fb52c01d55d93028d751cb", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/lock/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F2.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "f56afc81f0a67e900d2809a5acf5a67ece33b7a5", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "5ec212bdf7823b795e42960243d68ad71eb61208", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F2.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \"-std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \"-std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "c17525f8589066e6cc9e23ea17c96092c9ede11e", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "e9bc37135f94978d76c2f35c643abc207caf8b26", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F2.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "33ec4f2ff409deb17cb423e82344475941ab9a9a", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F3.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "f56afc81f0a67e900d2809a5acf5a67ece33b7a5", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "367134a3957aedea1e929ebf3e628ef812a70dd7", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F2.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "44e0b15d0849a1648a43ef9465e2bfd3d447262b", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/unlock/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Funlock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Funlock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Funlock%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "d6664fb9db38424eec7bc2bd1bf8f20c81df7d6b", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "c6ba40286419ab305cf8924abaeae8566441e220", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/assign_neg.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -1,7 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "1874b042deb07e20c4b02f8dc879a7974732d56e", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/copy_neg.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -1,7 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "5e7d27318460127b17c27af80ad7e7559e352766", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/dest/destructor_locked.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fdest%2Fdestructor_locked.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "26d4c784c827687f12fe53d2c66ef0a318b32977", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/lock/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Flock%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "e053aeb0c4f8e2eb05efe174ccd2609304bace20", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/requirements/standard_layout.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Frequirements%2Fstandard_layout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Frequirements%2Fstandard_layout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Frequirements%2Fstandard_layout.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -1,7 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++11\" }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2009-2015 Free Software Foundation, Inc.\n //"}, {"sha": "029f779d0cfa37e58e55b715da92ca76aa8a5189", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "5dc33165877dddd507cbead16a5775237d85aaec", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F2.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "5791aa1b6f2e00d1b149d512a7378eb855c6c8aa", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_for/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "8bfe85b67762de24cb20364a0cdae8958741da39", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_for/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F2.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "082e4ef65c09bb7c5c1eea712b2beac5d9a51277", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_for/3.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F3.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "029f779d0cfa37e58e55b715da92ca76aa8a5189", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "5dc33165877dddd507cbead16a5775237d85aaec", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/2.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F2.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "15f9cdf4ddca300356928619089bb0f319402b9c", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/57641.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F57641.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F57641.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F57641.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2013-2015 Free Software Foundation, Inc.\n //"}, {"sha": "812e2d833e54e2829feba4f222dce1eb136a7b0e", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/unlock/1.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Funlock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Funlock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Funlock%2F1.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "b62af9b8d0574cdf29843f1db515af9dac784cd9", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/cons/5.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F5.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "36b1cd6beba42fad16c7a6f9d8bb7372d3a860eb", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/cons/6.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Fcons%2F6.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "11b4fb632ac736c2918e7cf79f8406bf290947b4", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/3.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F3.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}, {"sha": "2be15bfd31afba80e3762adcfbe50c89dbdba2cc", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/4.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f16081c2c6fb60a69195c3810fd88ed263757d21/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2F4.cc?ref=f16081c2c6fb60a69195c3810fd88ed263757d21", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \" -std=gnu++11 -pthreads\" { target *-*-solaris* } }\n // { dg-options \" -std=gnu++11 \" { target *-*-cygwin *-*-rtems* *-*-darwin* } }\n // { dg-require-cstdint \"\" }\n-// { dg-require-gthreads-timed \"\" }\n \n // Copyright (C) 2008-2015 Free Software Foundation, Inc.\n //"}]}