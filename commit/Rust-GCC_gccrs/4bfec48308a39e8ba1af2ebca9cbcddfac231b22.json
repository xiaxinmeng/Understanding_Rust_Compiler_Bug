{"sha": "4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJmZWM0ODMwOGEzOWU4YmExYWYyZWJjYTljYmNkZGZhYzIzMWIyMg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-03-08T21:12:26Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-03-08T21:12:26Z"}, "message": "c-common.h (c_common_init, [...]): Update.\n\n\t* c-common.h (c_common_init, c_common_post_options): Update.\n\t* c-objc-common.c (c_objc_common_init): Update for new prototype.\n\t* c-opts.c (saved_lineno): New.\n\t(c_common_post_options, c_common_init): Update prototypes,\n\tmove call to cpp_read_main_file from latter to former.\n\t* c-tree.h (c_ojbc_common_init): Update.\n\t* langhooks-def.h (lhd_post_options): New.\n\t(LANG_HOOKS_INIT, LANG_HOOKS_POST_OPTIONS): Update.\n\t* langhooks.c (lhd_post_options): New.\n\t* langhooks.h (struct lang_hooks): Update post_options and init hooks.\n\t* toplev.c (no_backend): New.\n\t(process_options): Call post_options hook and set main_input_filename\n\tand input_filename here.\n\t(lang_dependent_init, do_compile): post_options hook moved to\n\tprocess_options.\n\t* objc/objc-act.c (objc_init): Update prototype.\n\t* objc/objc-act.h (objc_init): Update prototype.\nada:\n\t* misc.c (gnat_init): Update for new prototype.\ncp:\n\t* cp-tree.h (cxx_init): Update prototype.\n\t* lex.c (cxx_init): Similarly.\nf:\n\t* com.c (ffe_init): Update prototype; move code to ffe_post_options.\n\t(ffe_post_options): New.\njava:\n\t* lang.c (java_init): Update prototype, move code to java_post_options.\n\t(java_post_options): Similarly.\ntreelang:\n\t* tree1.c (in_fname): Fix type.\n\t(treelang_init): Update prototype and use of in_fname.\n\t* treelang.h (in_fname): Fix type.\n\t* treetree.c (tree_code_if_start, tree_code_if_else,\n\ttree_code_if_end, tree_code_create_function_prototype,\n\ttree_code_create_function_initial, tree_code_create_funciton_wrapup,\n\ttree_code_create_variable, tree_code_output_expression_statement)\n\t: Fix prototypes and use of filenames.\n\t* treetree.h: Similarly.\n\nFrom-SVN: r64001", "tree": {"sha": "6dbda9aef13aa04d7c15b46cb0bda16747482b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dbda9aef13aa04d7c15b46cb0bda16747482b8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9dd04ab53c8790dcb12aa7d4a0396a5ca58432da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd04ab53c8790dcb12aa7d4a0396a5ca58432da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd04ab53c8790dcb12aa7d4a0396a5ca58432da"}], "stats": {"total": 489, "additions": 277, "deletions": 212}, "files": [{"sha": "ddaf7da17e42d33c6fae113e7f63bd8dc9b15f3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -1,3 +1,23 @@\n+2003-03-08  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.h (c_common_init, c_common_post_options): Update.\n+\t* c-objc-common.c (c_objc_common_init): Update for new prototype.\n+\t* c-opts.c (saved_lineno): New.\n+\t(c_common_post_options, c_common_init): Update prototypes,\n+\tmove call to cpp_read_main_file from latter to former.\n+\t* c-tree.h (c_ojbc_common_init): Update.\n+\t* langhooks-def.h (lhd_post_options): New.\n+\t(LANG_HOOKS_INIT, LANG_HOOKS_POST_OPTIONS): Update.\n+\t* langhooks.c (lhd_post_options): New.\n+\t* langhooks.h (struct lang_hooks): Update post_options and init hooks.\n+\t* toplev.c (no_backend): New.\n+\t(process_options): Call post_options hook and set main_input_filename\n+\tand input_filename here.\n+\t(lang_dependent_init, do_compile): post_options hook moved to\n+\tprocess_options.\n+\t* objc/objc-act.c (objc_init): Update prototype.\n+\t* objc/objc-act.h (objc_init): Update prototype.\n+\n 2003-03-08  Roger Sayle  <roger@eyesopen.com>\n \n \t* emit-rtl.c (gen_lowpart): Don't attempt to load a part of"}, {"sha": "e57e493339ddbc9c92c6b57e2d2550d98326f47a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -1,3 +1,7 @@\n+2003-03-08  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* misc.c (gnat_init): Update for new prototype.\n+\n 2003-03-05  Olivier Hainque  <hainque@gnat.com>\n \n \tada/9961"}, {"sha": "1da50c3d713b01d3dd4964a4d623b2b4cef09770", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -79,7 +79,7 @@ extern FILE *asm_out_file;\n extern int save_argc;\n extern char **save_argv;\n \n-static const char *gnat_init\t\tPARAMS ((const char *));\n+static bool gnat_init\t\t\tPARAMS ((void));\n static void gnat_init_options\t\tPARAMS ((void));\n static int gnat_decode_option\t\tPARAMS ((int, char **));\n static HOST_WIDE_INT gnat_get_alias_set\tPARAMS ((tree));\n@@ -337,9 +337,8 @@ internal_error_function (msgid, ap)\n \n /* Perform all the initialization steps that are language-specific.  */\n \n-static const char *\n-gnat_init (filename)\n-     const char *filename;\n+static bool\n+gnat_init ()\n {\n   /* Performs whatever initialization steps needed by the language-dependent\n      lexical analyzer.\n@@ -350,7 +349,7 @@ gnat_init (filename)\n   gnat_init_decl_processing ();\n \n   /* Add the input filename as the last argument.  */\n-  gnat_argv[gnat_argc] = (char *) filename;\n+  gnat_argv[gnat_argc] = (char *) main_input_filename;\n   gnat_argc++;\n   gnat_argv[gnat_argc] = 0;\n \n@@ -361,10 +360,7 @@ gnat_init (filename)\n \n   set_lang_adjust_rli (gnat_adjust_rli);\n \n-  if (filename == 0)\n-    filename = \"\";\n-\n-  return filename;\n+  return true;\n }\n \n /* If we are using the GCC mechanism for to process exception handling, we"}, {"sha": "eb85e288d125d129c0cf34caeb4f40f66050741b", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -961,8 +961,8 @@ extern void disable_builtin_function\t\tPARAMS ((const char *));\n extern tree build_va_arg\t\t\tPARAMS ((tree, tree));\n \n extern void c_common_init_options\t\tPARAMS ((enum c_language_kind));\n-extern bool c_common_post_options\t\tPARAMS ((void));\n-extern const char *c_common_init\t\tPARAMS ((const char *));\n+extern bool c_common_post_options\t\tPARAMS ((const char **));\n+extern bool c_common_init\t\t\tPARAMS ((void));\n extern void c_common_finish\t\t\tPARAMS ((void));\n extern void c_common_parse_file\t\t\tPARAMS ((int));\n extern HOST_WIDE_INT c_common_get_alias_set\tPARAMS ((tree));"}, {"sha": "e097527e3906b199c1c3b2ef5f1828eb639074db", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -241,15 +241,13 @@ c_warn_unused_global_decl (decl)\n }\n \n /* Initialization common to C and Objective-C front ends.  */\n-const char *\n-c_objc_common_init (filename)\n-     const char *filename;\n+bool\n+c_objc_common_init ()\n {\n   c_init_decl_processing ();\n \n-  filename = c_common_init (filename);\n-  if (filename == NULL)\n-    return NULL;\n+  if (c_common_init () == false)\n+    return false;\n \n   lang_expand_decl_stmt = c_expand_decl_stmt;\n \n@@ -271,7 +269,7 @@ c_objc_common_init (filename)\n \n   VARRAY_TREE_INIT (deferred_fns, 32, \"deferred_fns\");\n \n-  return filename;\n+  return true;\n }\n \n /* Register a function tree, so that its optimization and conversion"}, {"sha": "7f902ee9e8a9b55187c08abd3f8bbd7e15fc6d4c", "filename": "gcc/c-opts.c", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -39,6 +39,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n # define TARGET_SYSTEM_ROOT NULL\n #endif\n \n+static int saved_lineno;\n+\n /* CPP's options.  */\n static cpp_options *cpp_opts;\n \n@@ -1442,7 +1444,8 @@ c_common_decode_option (argc, argv)\n \n /* Post-switch processing.  */\n bool\n-c_common_post_options ()\n+c_common_post_options (pfilename)\n+     const char **pfilename;\n {\n   /* Canonicalize the input and output filenames.  */\n   if (in_fname == NULL || !strcmp (in_fname, \"-\"))\n@@ -1492,26 +1495,6 @@ c_common_post_options ()\n   if (warn_missing_format_attribute && !warn_format)\n     warning (\"-Wmissing-format-attribute ignored without -Wformat\");\n \n-  /* If an error has occurred in cpplib, note it so we fail\n-     immediately.  */\n-  errorcount += cpp_errors (parse_in);\n-\n-  return flag_preprocess_only;\n-}\n-\n-/* Front end initialization common to C, ObjC and C++.  */\n-const char *\n-c_common_init (filename)\n-     const char *filename;\n-{\n-  /* Set up preprocessor arithmetic.  Must be done after call to\n-     c_common_nodes_and_builtins for type nodes to be good.  */\n-  cpp_opts->precision = TYPE_PRECISION (intmax_type_node);\n-  cpp_opts->char_precision = TYPE_PRECISION (char_type_node);\n-  cpp_opts->int_precision = TYPE_PRECISION (integer_type_node);\n-  cpp_opts->wchar_precision = TYPE_PRECISION (wchar_type_node);\n-  cpp_opts->unsigned_wchar = TREE_UNSIGNED (wchar_type_node);\n-\n   if (flag_preprocess_only)\n     {\n       /* Open the output now.  We must do so even if flag_no_output is\n@@ -1539,19 +1522,43 @@ c_common_init (filename)\n     }\n \n   /* NOTE: we use in_fname here, not the one supplied.  */\n-  filename = cpp_read_main_file (parse_in, in_fname, ident_hash);\n+  *pfilename = cpp_read_main_file (parse_in, in_fname, ident_hash);\n+\n+  saved_lineno = lineno;\n+  lineno = 0;\n+\n+  /* If an error has occurred in cpplib, note it so we fail\n+     immediately.  */\n+  errorcount += cpp_errors (parse_in);\n+\n+  return flag_preprocess_only;\n+}\n+\n+/* Front end initialization common to C, ObjC and C++.  */\n+bool\n+c_common_init ()\n+{\n+  lineno = saved_lineno;\n+\n+  /* Set up preprocessor arithmetic.  Must be done after call to\n+     c_common_nodes_and_builtins for type nodes to be good.  */\n+  cpp_opts->precision = TYPE_PRECISION (intmax_type_node);\n+  cpp_opts->char_precision = TYPE_PRECISION (char_type_node);\n+  cpp_opts->int_precision = TYPE_PRECISION (integer_type_node);\n+  cpp_opts->wchar_precision = TYPE_PRECISION (wchar_type_node);\n+  cpp_opts->unsigned_wchar = TREE_UNSIGNED (wchar_type_node);\n \n   if (flag_preprocess_only)\n     {\n-      if (filename)\n+      if (main_input_filename)\n \tpreprocess_file (parse_in);\n-      return NULL;\n+      return false;\n     }\n \n   /* Has to wait until now so that cpplib has its hash table.  */\n   init_pragma ();\n \n-  return filename;\n+  return true;\n }\n \n /* Common finish hook for the C, ObjC and C++ front ends.  */"}, {"sha": "22d1ee2f5fa5e7d068df062e6a6c968d212fa042", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -245,7 +245,7 @@ extern tree make_pointer_declarator\t\tPARAMS ((tree, tree));\n /* in c-objc-common.c */\n extern int c_disregard_inline_limits\t\tPARAMS ((tree));\n extern int c_cannot_inline_tree_fn\t\tPARAMS ((tree *));\n-extern const char *c_objc_common_init\t\tPARAMS ((const char *));\n+extern bool c_objc_common_init\t\t\tPARAMS ((void));\n extern int c_missing_noreturn_ok_p\t\tPARAMS ((tree));\n extern void c_objc_common_finish_file\t\tPARAMS ((void));\n extern int defer_fn\t\t\t\tPARAMS ((tree));"}, {"sha": "fda3b808f3ba9df82bdce3b35e99020972de6758", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -1,3 +1,8 @@\n+2003-03-08  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cp-tree.h (cxx_init): Update prototype.\n+\t* lex.c (cxx_init): Similarly.\n+\n 2003-03-08  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9823"}, {"sha": "69082912e146353836672fcc95349bfbf66051f1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -3964,7 +3964,7 @@ extern tree make_aggr_type\t\t\t(enum tree_code);\n extern void yyerror\t\t\t\t(const char *);\n extern void yyhook\t\t\t\t(int);\n extern int cp_type_qual_from_rid                (tree);\n-extern const char *cxx_init\t\t\t(const char *);\n+extern bool cxx_init\t\t\t\t(void);\n extern void cxx_finish (void);\n extern void cxx_init_options (void);\n "}, {"sha": "6433f2b1e0bf6dd69fe94c6741ac78c97aa6d34e", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -406,9 +406,8 @@ init_cp_pragma ()\n    the exact order that things are done here.  It would be nice if the\n    initialization done by this routine were moved to its subroutines,\n    and the ordering dependencies clarified and reduced.  */\n-const char *\n-cxx_init (filename)\n-     const char *filename;\n+bool\n+cxx_init (void)\n {\n   input_filename = \"<internal>\";\n \n@@ -446,15 +445,14 @@ cxx_init (filename)\n \n   interface_unknown = 1;\n \n-  filename = c_common_init (filename);\n-  if (filename == NULL)\n-    return NULL;\n+  if (c_common_init () == false)\n+    return false;\n \n   init_cp_pragma ();\n \n-  init_repo (filename);\n+  init_repo (main_input_filename);\n \n-  return filename;\n+  return true;\n }\n \f\n /* Helper function to load global variables with interface"}, {"sha": "53216b83d0807674d0ad44b972a9bea2afe476aa", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -1,3 +1,8 @@\n+Sat Mar  8 21:11:40 2003  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* com.c (ffe_init): Update prototype; move code to ffe_post_options.\n+\t(ffe_post_options): New.\n+\n 2003-03-04  Tom Tromey  <tromey@redhat.com>\n \n \t* Make-lang.in (f77.tags): New target."}, {"sha": "9c71841c543cc26dd2d8f1bc620b6ba089fdf184", "filename": "gcc/f/com.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -14030,8 +14030,9 @@ insert_block (tree block)\n }\n \n /* Each front end provides its own.  */\n-static const char *ffe_init PARAMS ((const char *));\n+static bool ffe_init PARAMS ((void));\n static void ffe_finish PARAMS ((void));\n+static bool ffe_post_options PARAMS ((const char **));\n static void ffe_init_options PARAMS ((void));\n static void ffe_print_identifier PARAMS ((FILE *, tree, int));\n \n@@ -14050,6 +14051,8 @@ struct language_function GTY(())\n #define LANG_HOOKS_INIT_OPTIONS\t\tffe_init_options\n #undef  LANG_HOOKS_DECODE_OPTION\n #define LANG_HOOKS_DECODE_OPTION\tffe_decode_option\n+#undef  LANG_HOOKS_POST_OPTIONS\n+#define LANG_HOOKS_POST_OPTIONS\t\tffe_post_options\n #undef  LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE\t\tffe_parse_file\n #undef  LANG_HOOKS_MARK_ADDRESSABLE\n@@ -14115,9 +14118,12 @@ const char *const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n-static const char *\n-ffe_init (const char *filename)\n+static bool\n+ffe_post_options (pfilename)\n+     const char **pfilename;\n {\n+  const char *filename = *pfilename;\n+\n   /* Open input file.  */\n   if (filename == 0 || !strcmp (filename, \"-\"))\n     {\n@@ -14126,9 +14132,17 @@ ffe_init (const char *filename)\n     }\n   else\n     finput = fopen (filename, \"r\");\n+\n   if (finput == 0)\n     fatal_io_error (\"can't open %s\", filename);\n \n+  return false;\n+}\n+\n+\n+static bool\n+ffe_init ()\n+{\n #ifdef IO_BUFFER_SIZE\n   setvbuf (finput, (char *) xmalloc (IO_BUFFER_SIZE), _IOFBF, IO_BUFFER_SIZE);\n #endif\n@@ -14144,11 +14158,8 @@ ffe_init (const char *filename)\n   ffelex_hash_kludge (finput);\n \n   /* FIXME: The ffelex_hash_kludge code needs to be cleaned up to\n-     return the new file name.  */\n-  if (main_input_filename)\n-    filename = main_input_filename;\n-\n-  return filename;\n+     set the new file name.  Maybe in ffe_post_options.  */\n+  return true;\n }\n \n static void"}, {"sha": "163567caff04539a164a639728a5e4387ddd7857", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -1,3 +1,8 @@\n+2003-03-08  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang.c (java_init): Update prototype, move code to java_post_options.\n+\t(java_post_options): Similarly.\n+\n 2003-03-05  Ranjit Mathew  <rmathew@hotmail.com>\n \n \t* jcf.h (COMPARE_FILENAMES): New macro similar to \"strcmp\" to"}, {"sha": "41441bf128fedd81181053eb04943ceb6839db08", "filename": "gcc/java/lang.c", "status": "modified", "additions": 69, "deletions": 67, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -53,10 +53,10 @@ struct string_option\n   const int on_value;\n };\n \n-static const char *java_init (const char *);\n+static bool java_init (void);\n static void java_finish (void);\n static void java_init_options (void);\n-static bool java_post_options (void);\n+static bool java_post_options (const char **);\n \n static int java_decode_option (int, char **);\n static void put_decl_string (const char *, int);\n@@ -508,8 +508,8 @@ java_decode_option (int argc __attribute__ ((__unused__)), char **argv)\n /* Global open file.  */\n FILE *finput;\n \n-static const char *\n-java_init (const char *filename)\n+static bool\n+java_init (void)\n {\n #if 0\n   extern int flag_minimal_debug;\n@@ -526,75 +526,14 @@ java_init (const char *filename)\n       && force_align_functions_log < 1)\n     force_align_functions_log = 1;\n \n-  /* Open input file.  */\n-\n-  if (filename == 0 || !strcmp (filename, \"-\"))\n-    {\n-      finput = stdin;\n-      filename = \"stdin\";\n-\n-      if (dependency_tracking)\n-\terror (\"can't do dependency tracking with input from stdin\");\n-    }\n-  else\n-    {\n-      if (dependency_tracking)\n-\t{\n-\t  char *dot;\n-\n-\t  /* If the target is set and the output filename is set, then\n-\t     there's no processing to do here.  Otherwise we must\n-\t     compute one or the other.  */\n-\t  if (! ((dependency_tracking & DEPEND_TARGET_SET)\n-\t\t && (dependency_tracking & DEPEND_FILE_ALREADY_SET)))\n-\t    {\n-\t      dot = strrchr (filename, '.');\n-\t      if (dot == NULL)\n-\t\terror (\"couldn't determine target name for dependency tracking\");\n-\t      else\n-\t\t{\n-\t\t  char *buf = xmalloc (dot - filename +\n-\t\t\t\t       3 + sizeof (TARGET_OBJECT_SUFFIX));\n-\t\t  strncpy (buf, filename, dot - filename);\n-\n-\t\t  /* If emitting class files, we might have multiple\n-\t\t     targets.  The class generation code takes care of\n-\t\t     registering them.  Otherwise we compute the\n-\t\t     target name here.  */\n-\t\t  if ((dependency_tracking & DEPEND_TARGET_SET))\n-\t\t    ; /* Nothing.  */\n-\t\t  else if (flag_emit_class_files)\n-\t\t    jcf_dependency_set_target (NULL);\n-\t\t  else\n-\t\t    {\n-\t\t      strcpy (buf + (dot - filename), TARGET_OBJECT_SUFFIX);\n-\t\t      jcf_dependency_set_target (buf);\n-\t\t    }\n-\n-\t\t  if ((dependency_tracking & DEPEND_FILE_ALREADY_SET))\n-\t\t    ; /* Nothing.  */\n-\t\t  else if ((dependency_tracking & DEPEND_SET_FILE))\n-\t\t    {\n-\t\t      strcpy (buf + (dot - filename), \".d\");\n-\t\t      jcf_dependency_set_dep_file (buf);\n-\t\t    }\n-\t\t  else\n-\t\t    jcf_dependency_set_dep_file (\"-\");\n-\n-\t\t  free (buf);\n-\t\t}\n-\t    }\n-\t}\n-    }\n-\n   jcf_path_init ();\n   jcf_path_seal (version_flag);\n \n   java_init_decl_processing ();\n \n   using_eh_for_cleanups ();\n \n-  return filename;\n+  return true;\n }\n \n static void\n@@ -813,8 +752,10 @@ java_can_use_bit_fields_p (void)\n \n /* Post-switch processing.  */\n static bool\n-java_post_options (void)\n+java_post_options (const char **pfilename)\n {\n+  const char *filename = *pfilename;\n+\n  /* Use tree inlining if possible.  Function instrumentation is only\n      done in the RTL level, so we disable tree inlining.  */\n   if (! flag_instrument_function_entry_exit)\n@@ -828,6 +769,67 @@ java_post_options (void)\n \t}\n     }\n \n+  /* Open input file.  */\n+\n+  if (filename == 0 || !strcmp (filename, \"-\"))\n+    {\n+      finput = stdin;\n+      filename = \"stdin\";\n+\n+      if (dependency_tracking)\n+\terror (\"can't do dependency tracking with input from stdin\");\n+    }\n+  else\n+    {\n+      if (dependency_tracking)\n+\t{\n+\t  char *dot;\n+\n+\t  /* If the target is set and the output filename is set, then\n+\t     there's no processing to do here.  Otherwise we must\n+\t     compute one or the other.  */\n+\t  if (! ((dependency_tracking & DEPEND_TARGET_SET)\n+\t\t && (dependency_tracking & DEPEND_FILE_ALREADY_SET)))\n+\t    {\n+\t      dot = strrchr (filename, '.');\n+\t      if (dot == NULL)\n+\t\terror (\"couldn't determine target name for dependency tracking\");\n+\t      else\n+\t\t{\n+\t\t  char *buf = xmalloc (dot - filename +\n+\t\t\t\t       3 + sizeof (TARGET_OBJECT_SUFFIX));\n+\t\t  strncpy (buf, filename, dot - filename);\n+\n+\t\t  /* If emitting class files, we might have multiple\n+\t\t     targets.  The class generation code takes care of\n+\t\t     registering them.  Otherwise we compute the\n+\t\t     target name here.  */\n+\t\t  if ((dependency_tracking & DEPEND_TARGET_SET))\n+\t\t    ; /* Nothing.  */\n+\t\t  else if (flag_emit_class_files)\n+\t\t    jcf_dependency_set_target (NULL);\n+\t\t  else\n+\t\t    {\n+\t\t      strcpy (buf + (dot - filename), TARGET_OBJECT_SUFFIX);\n+\t\t      jcf_dependency_set_target (buf);\n+\t\t    }\n+\n+\t\t  if ((dependency_tracking & DEPEND_FILE_ALREADY_SET))\n+\t\t    ; /* Nothing.  */\n+\t\t  else if ((dependency_tracking & DEPEND_SET_FILE))\n+\t\t    {\n+\t\t      strcpy (buf + (dot - filename), \".d\");\n+\t\t      jcf_dependency_set_dep_file (buf);\n+\t\t    }\n+\t\t  else\n+\t\t    jcf_dependency_set_dep_file (\"-\");\n+\n+\t\t  free (buf);\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n   /* Initialize the compiler back end.  */\n   return false;\n }"}, {"sha": "46ed0629c7fe3bf6b391e72fb9b5d8956dd5971c", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -46,6 +46,7 @@ extern void lhd_do_nothing_t PARAMS ((tree));\n extern void lhd_do_nothing_i PARAMS ((int));\n extern void lhd_do_nothing_f PARAMS ((struct function *));\n extern int lhd_decode_option PARAMS ((int, char **));\n+extern bool lhd_post_options PARAMS ((const char **));\n extern HOST_WIDE_INT lhd_get_alias_set PARAMS ((tree));\n extern tree lhd_return_tree PARAMS ((tree));\n extern tree lhd_return_null_tree PARAMS ((tree));\n@@ -86,13 +87,13 @@ void write_global_declarations PARAMS ((void));\n \n #define LANG_HOOKS_NAME\t\t\t\"GNU unknown\"\n #define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct lang_identifier)\n-#define LANG_HOOKS_INIT\t\t\tlhd_do_nothing\n+#define LANG_HOOKS_INIT\t\t\thook_bool_void_false\n #define LANG_HOOKS_FINISH\t\tlhd_do_nothing\n #define LANG_HOOKS_PARSE_FILE\t\tlhd_do_nothing_i\n #define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_clear_binding_stack\n #define LANG_HOOKS_INIT_OPTIONS\t\tlhd_do_nothing\n #define LANG_HOOKS_DECODE_OPTION\tlhd_decode_option\n-#define LANG_HOOKS_POST_OPTIONS\t\thook_bool_void_false\n+#define LANG_HOOKS_POST_OPTIONS\t\tlhd_post_options\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n #define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree\n #define LANG_HOOKS_EXPAND_EXPR\t\tlhd_expand_expr"}, {"sha": "210cc239ea2435582fca59c460c020d6af3460a3", "filename": "gcc/langhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -93,6 +93,15 @@ lhd_decode_option (argc, argv)\n   return 0;\n }\n \n+/* The default post options hook.  */\n+\n+bool\n+lhd_post_options (pfilename)\n+     const char **pfilename ATTRIBUTE_UNUSED;\n+{\n+  return false;\n+}\n+\n /* Called from by print-tree.c.  */\n \n void"}, {"sha": "bf9826ca44c3ec876f0a1f552b4192105008df5d", "filename": "gcc/langhooks.h", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -207,25 +207,20 @@ struct lang_hooks\n      done for this option.  */\n   int (*decode_option) PARAMS ((int, char **));\n \n-  /* Called when all command line options have been parsed.  Should do\n-     any required consistency checks, modifications etc.  Complex\n-     initialization should be left to the \"init\" callback, since GC\n-     and the identifier hashes are set up between now and then.\n+  /* Called when all command line options have been parsed to allow\n+     further processing and initialization\n \n-     Should return zero unless the compiler back-end does not need to\n-     be initialized, such as with the -E option.\n+     Should return true to indicate that a compiler back-end is\n+     not required, such as with the -E option.\n      \n      If errorcount is nonzero after this call the compiler exits\n      immediately and the finish hook is not called.  */\n-  bool (*post_options) PARAMS ((void));\n-\n-  /* Called after post_options, to initialize the front end.  The main\n-     input filename is passed, which may be NULL; the front end should\n-     return the original filename (e.g. foo.i -> foo.c).  Return NULL\n-     to indicate a serious error of some sort; in that case no\n-     compilation is performed, and the finish hook is called\n-     immediately.  */\n-  const char * (*init) PARAMS ((const char *));\n+  bool (*post_options) PARAMS ((const char **));\n+\n+  /* Called after post_options to initialize the front end.  Return\n+     false to indicate that no further compilation be performed, in\n+     which case the finish hook is called immediately.  */\n+  bool (*init) PARAMS ((void));\n \n   /* Called at the end of compilation, as a finalizer.  */\n   void (*finish) PARAMS ((void));"}, {"sha": "c23c622578709fbf697bd31d1ef8c229f691b973", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -432,13 +432,11 @@ generate_struct_by_value_array ()\n   exit (0);\n }\n \n-const char *\n-objc_init (filename)\n-     const char *filename;\n+bool\n+objc_init ()\n {\n-  filename = c_objc_common_init (filename);\n-  if (filename == NULL)\n-    return filename;\n+  if (c_objc_common_init () == false)\n+    return false;\n \n   /* Force the line number back to 0; check_newline will have\n      raised it to 1, which will make the builtin functions appear\n@@ -482,7 +480,7 @@ objc_init (filename)\n   if (print_struct_values)\n     generate_struct_by_value_array ();\n \n-  return filename;\n+  return true;\n }\n \n void"}, {"sha": "c06c2b8c27147f1625b6512498c6d1b5ca2a28b0", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -24,7 +24,7 @@ Boston, MA 02111-1307, USA.  */\n \n /*** Public Interface (procedures) ***/\n \n-const char *objc_init\t\t\t\tPARAMS ((const char *));\n+bool objc_init\t\t\t\t\tPARAMS ((void));\n const char *objc_printable_name\t\t\tPARAMS ((tree, int));\n \n /* used by yyparse */"}, {"sha": "7d7b3464f0e7c660b01c98355b3180e06b32275b", "filename": "gcc/toplev.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -104,7 +104,7 @@ extern void reg_alloc PARAMS ((void));\n \n static void general_init PARAMS ((char *));\n static void parse_options_and_default_flags PARAMS ((int, char **));\n-static void do_compile PARAMS ((int));\n+static void do_compile PARAMS ((void));\n static void process_options PARAMS ((void));\n static void backend_init PARAMS ((void));\n static int lang_dependent_init PARAMS ((const char *));\n@@ -135,6 +135,9 @@ static void print_switch_values PARAMS ((FILE *, int, int, const char *,\n /* Nonzero to dump debug info whilst parsing (-dy option).  */\n static int set_yydebug;\n \n+/* True if we don't need a backend (e.g. preprocessing only).  */\n+static bool no_backend;\n+\n /* Length of line when printing switch values.  */\n #define MAX_LINE 75\n \n@@ -5169,6 +5172,13 @@ parse_options_and_default_flags (argc, argv)\n static void\n process_options ()\n {\n+  /* Allow the front end to perform consistency checks and do further\n+     initialization based on the command line options.  This hook also\n+     sets the original filename if appropriate (e.g. foo.i -> foo.c)\n+     so we can correctly initialize debug output.  */\n+  no_backend = (*lang_hooks.post_options) (&filename);\n+  main_input_filename = input_filename = filename;\n+\n #ifdef OVERRIDE_OPTIONS\n   /* Some machines may reject certain combinations of options.  */\n   OVERRIDE_OPTIONS;\n@@ -5411,15 +5421,10 @@ lang_dependent_init (name)\n   if (dump_base_name == 0)\n     dump_base_name = name ? name : \"gccdump\";\n \n-  /* Front-end initialization.  This hook can assume that GC,\n-     identifier hashes etc. are set up, but debug initialization is\n-     not done yet.  This routine must return the original filename\n-     (e.g. foo.i -> foo.c) so can correctly initialize debug output.  */\n-  name = (*lang_hooks.init) (name);\n-  if (name == NULL)\n+  /* Other front-end initialization.  */\n+  if ((*lang_hooks.init) () == 0)\n     return 0;\n \n-  main_input_filename = input_filename = name;\n   init_asm_output (name);\n \n   /* These create various _DECL nodes, so need to be called after the\n@@ -5513,8 +5518,7 @@ finalize ()\n \f\n /* Initialize the compiler, and compile the input file.  */\n static void\n-do_compile (no_backend)\n-     int no_backend;\n+do_compile ()\n {\n   /* We cannot start timing until after options are processed since that\n      says if we run timers or not.  */\n@@ -5558,16 +5562,11 @@ toplev_main (argc, argv)\n   /* Exit early if we can (e.g. -help).  */\n   if (!exit_after_options)\n     {\n-      /* All command line options have been parsed; allow the front\n-\t end to perform consistency checks, etc.  */\n-      bool no_backend = (*lang_hooks.post_options) ();\n-\n-      /* The bulk of command line switch processing.  */\n       process_options ();\n \n       /* Don't do any more if an error has already occurred.  */\n       if (!errorcount)\n-\tdo_compile (no_backend);\n+\tdo_compile ();\n     }\n \n   if (errorcount || sorrycount)"}, {"sha": "d72763479413a65a081e8d528ecd7a86e04f858a", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -1,3 +1,15 @@\n+2003-03-08  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* tree1.c (in_fname): Fix type.\n+\t(treelang_init): Update prototype and use of in_fname.\n+\t* treelang.h (in_fname): Fix type.\n+\t* treetree.c (tree_code_if_start, tree_code_if_else,\n+\ttree_code_if_end, tree_code_create_function_prototype,\n+\ttree_code_create_function_initial, tree_code_create_funciton_wrapup,\n+\ttree_code_create_variable, tree_code_output_expression_statement)\n+\t: Fix prototypes and use of filenames.\n+\t* treetree.h: Similarly.\n+\n 2003-03-05  Andreas Jaeger  <aj@suse.de>\n \n \t* treetree.c (init_c_lex): Follow change to c-common.h."}, {"sha": "e6f96d4b62591b7fe085e5f20f83b0ec2dcab68c", "filename": "gcc/treelang/tree1.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftreelang%2Ftree1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftreelang%2Ftree1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftree1.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -78,7 +78,7 @@ unsigned int option_lexer_trace = 0;\n \n /* Local variables.  */\n \n-unsigned char *in_fname = NULL;\t/* Input file name.  */\n+const char *in_fname;\t/* Input file name.  */\n \n /* This is 1 if we have output the version string.  */\n \n@@ -179,12 +179,12 @@ treelang_decode_option (num_options_left, first_option_left)\n \n /* Language dependent parser setup.  */\n \n-const char*\n-treelang_init (const char* filename)\n+bool\n+treelang_init ()\n {\n-  /* Set up the declarations needed for this front end.  */\n+  in_fname = main_input_filename;\n \n-  input_filename = \"\";\n+  /* Set up the declarations needed for this front end.  */\n   lineno = 0;\n \n   /* Init decls etc.  */\n@@ -193,25 +193,25 @@ treelang_init (const char* filename)\n \n   /* This error will not happen from GCC as it will always create a\n      fake input file.  */\n-  if (!filename || (filename[0] == ' ') || (!filename[0])) \n+  if (!in_fname || in_fname[0] == ' ' || !in_fname[0]) \n     {\n       if (!version_done)\n         {\n           fprintf (stderr, \"No input file specified, try --help for help\\n\");\n           exit (1);\n         }\n \n-      in_fname = NULL;\n-      return NULL;\n+      return false;\n     }\n-  yyin = fopen (filename, \"r\");\n+\n+  yyin = fopen (in_fname, \"r\");\n   if (!yyin)\n     {\n-      fprintf (stderr, \"Unable to open input file %s\\n\", filename);\n+      fprintf (stderr, \"Unable to open input file %s\\n\", in_fname);\n       exit (1);\n     }\n-  input_filename = filename;\n-  return (char*) (in_fname = (unsigned char*)filename);\n+\n+  return true;\n }\n \n /* Language dependent wrapup.  */"}, {"sha": "5fded628736523377eb299b8ea7a8890bc8623a1", "filename": "gcc/treelang/treelang.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftreelang%2Ftreelang.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftreelang%2Ftreelang.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.h?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -40,7 +40,7 @@ enum category_enum\n };\n \n /* Input file name and FILE.  */\n-extern unsigned char* in_fname;\n+extern const char* in_fname;\n extern FILE* yyin;\n \n /* Forward references to satisfy mutually recursive definitions.  */"}, {"sha": "cc5455963fa91520e02e101d3e6ae71f6b6f1123", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -179,34 +179,34 @@ tree_code_get_type (int type_num)\n    LINENO in file FILENAME.  */\n \n void\n-tree_code_if_start (tree exp, unsigned char* filename, int lineno)\n+tree_code_if_start (tree exp, const char* filename, int lineno)\n {\n   tree cond_exp;\n   cond_exp = build (NE_EXPR,\n                  TREE_TYPE (exp),\n                  exp,\n                  build1 (CONVERT_EXPR, TREE_TYPE (exp), integer_zero_node));\n-  emit_line_note ((const char *)filename, lineno); /* Output the line number information.  */\n+  emit_line_note (filename, lineno); /* Output the line number information.  */\n   expand_start_cond (cond_exp, /* Exit-able if nonzero.  */ 0);\n }\n \n /* Output the code for the else of an if statement.  The else occurred\n    at line LINENO in file FILENAME.  */\n \n void\n-tree_code_if_else (unsigned char* filename, int lineno)\n+tree_code_if_else (const char* filename, int lineno)\n {\n-  emit_line_note ((const char *)filename, lineno); /* Output the line number information.  */\n+  emit_line_note (filename, lineno); /* Output the line number information.  */\n   expand_start_else ();\n }\n \n /* Output the code for the end_if an if statement.  The end_if (final brace) occurred\n    at line LINENO in file FILENAME.  */\n \n void\n-tree_code_if_end (unsigned char* filename, int lineno)\n+tree_code_if_end (const char* filename, int lineno)\n {\n-  emit_line_note ((const char *)filename, lineno); /* Output the line number information.  */\n+  emit_line_note (filename, lineno); /* Output the line number information.  */\n   expand_end_cond ();\n }\n \n@@ -219,7 +219,7 @@ tree_code_create_function_prototype (unsigned char* chars,\n                                     unsigned int storage_class,\n                                     unsigned int ret_type,\n                                     struct prod_token_parm_item* parms,\n-                                    unsigned char* filename,\n+                                    const char* filename,\n                                     int lineno)\n {\n \n@@ -252,7 +252,7 @@ tree_code_create_function_prototype (unsigned char* chars,\n   fn_decl = build_decl (FUNCTION_DECL, id, fn_type);\n \n   DECL_CONTEXT (fn_decl) = NULL_TREE; /* Nested functions not supported here.  */\n-  DECL_SOURCE_FILE (fn_decl) = (const char *)filename;\n+  DECL_SOURCE_FILE (fn_decl) = filename;\n  /*  if (lineno > 1000000)\n     ; */ /* Probably the line # is rubbish because someone forgot to set\n     the line number - and unfortunately impossible line #s are used as\n@@ -304,7 +304,7 @@ tree_code_create_function_prototype (unsigned char* chars,\n     parameter details are in the lists PARMS. Returns nothing.  */\n void\n tree_code_create_function_initial (tree prev_saved,\n-                                  unsigned char* filename,\n+                                  const char* filename,\n                                   int lineno,\n                                   struct prod_token_parm_item* parms)\n {\n@@ -332,14 +332,14 @@ tree_code_create_function_initial (tree prev_saved,\n   current_function_decl = fn_decl;\n   DECL_INITIAL (fn_decl) = error_mark_node;\n \n-  DECL_SOURCE_FILE (fn_decl) = (const char *)filename;\n+  DECL_SOURCE_FILE (fn_decl) = filename;\n   DECL_SOURCE_LINE (fn_decl) = lineno;\n \n   /* Prepare creation of rtl for a new function.  */\n \n   resultdecl = DECL_RESULT (fn_decl) = build_decl (RESULT_DECL, NULL_TREE, TREE_TYPE (TREE_TYPE (fn_decl)));\n   DECL_CONTEXT (DECL_RESULT (fn_decl)) = fn_decl;\n-  DECL_SOURCE_FILE (resultdecl) = (const char *)filename;\n+  DECL_SOURCE_FILE (resultdecl) = filename;\n   DECL_SOURCE_LINE (resultdecl) = lineno;\n   /* Work out the size. ??? is this needed.  */\n   layout_decl (DECL_RESULT (fn_decl), 0);\n@@ -359,7 +359,7 @@ tree_code_create_function_initial (tree prev_saved,\n       if (!fn_decl)\n         abort ();\n       DECL_CONTEXT (parm_decl) = fn_decl;\n-      DECL_SOURCE_FILE (parm_decl) = (const char *)filename;\n+      DECL_SOURCE_FILE (parm_decl) = filename;\n       DECL_SOURCE_LINE (parm_decl) = lineno;\n       parm_list = chainon (parm_decl, parm_list);\n     }\n@@ -389,7 +389,7 @@ tree_code_create_function_initial (tree prev_saved,\n   make_decl_rtl (fn_decl, NULL);\n \n   /* Use filename/lineno from above.  */\n-  init_function_start (fn_decl, (const char *)filename, lineno);\n+  init_function_start (fn_decl, filename, lineno);\n \n   /* Create rtl for startup code of function, such as saving registers.  */\n \n@@ -435,20 +435,20 @@ tree_code_create_function_initial (tree prev_saved,\n \n   expand_start_bindings (0);\n \n-  emit_line_note ((const char *)filename, lineno); /* Output the line number information.  */\n+  emit_line_note (filename, lineno); /* Output the line number information.  */\n }\n \n /* Wrapup a function contained in file FILENAME, ending at line LINENO.  */\n void\n-tree_code_create_function_wrapup (unsigned char* filename,\n+tree_code_create_function_wrapup (const char* filename,\n                                  int lineno)\n {\n   tree block;\n   tree fn_decl;\n \n   fn_decl = current_function_decl;\n \n-  emit_line_note ((const char *)filename, lineno); /* Output the line number information.  */\n+  emit_line_note (filename, lineno); /* Output the line number information.  */\n \n   /* Get completely built level from debugger symbol table.  */\n \n@@ -460,7 +460,7 @@ tree_code_create_function_wrapup (unsigned char* filename,\n \n   /* Emit rtl for end of function.  */\n \n-  expand_function_end ((const char *)filename, lineno, 0);\n+  expand_function_end (filename, lineno, 0);\n \n   /* Pop the level.  */\n \n@@ -498,7 +498,7 @@ tree_code_create_variable (unsigned int storage_class,\n                                unsigned int length,\n                                unsigned int expression_type,\n                                tree init,\n-                               unsigned char* filename,\n+                               const char* filename,\n                                int lineno)\n {\n   tree var_type;\n@@ -531,7 +531,7 @@ tree_code_create_variable (unsigned int storage_class,\n \n   DECL_CONTEXT (var_decl) = current_function_decl;\n \n-  DECL_SOURCE_FILE (var_decl) = (const char *)filename;\n+  DECL_SOURCE_FILE (var_decl) = filename;\n   DECL_SOURCE_LINE (var_decl) = lineno;\n \n   /* Set the storage mode and whether only visible in the same file.  */\n@@ -613,10 +613,10 @@ tree_code_generate_return (tree type, tree exp)\n \n void\n tree_code_output_expression_statement (tree code,\n-                                       unsigned char* filename, int lineno)\n+                                       const char* filename, int lineno)\n {\n   /* Output the line number information.  */\n-  emit_line_note ((const char *)filename, lineno);\n+  emit_line_note (filename, lineno);\n   TREE_USED (code) = 1;\n   TREE_SIDE_EFFECTS (code) = 1;\n   expand_expr_stmt (code);"}, {"sha": "c41dd6d5ed45d035c14099a21a6d9b0fa2c7d0aa", "filename": "gcc/treelang/treetree.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftreelang%2Ftreetree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bfec48308a39e8ba1af2ebca9cbcddfac231b22/gcc%2Ftreelang%2Ftreetree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.h?ref=4bfec48308a39e8ba1af2ebca9cbcddfac231b22", "patch": "@@ -39,31 +39,31 @@ void tree_ggc_storage_always_used  (void *m);\n tree tree_code_get_expression (unsigned int exp_type, tree type, tree op1, tree op2, tree op3);\n tree tree_code_get_numeric_type (unsigned int size1, unsigned int sign1);\n void tree_code_create_function_initial (tree prev_saved,\n-                                       unsigned char* filename, int lineno,\n+                                       const char* filename, int lineno,\n                                        struct prod_token_parm_item* parms);\n-void tree_code_create_function_wrapup (unsigned char* filename, int lineno);\n+void tree_code_create_function_wrapup (const char* filename, int lineno);\n tree tree_code_create_function_prototype (unsigned char* chars,\n                                          unsigned int storage_class,\n                                          unsigned int ret_type,\n                                          struct prod_token_parm_item* parms,                                 \n-                                         unsigned char* filename,\n+                                         const char* filename,\n                                          int lineno);\n tree tree_code_create_variable (unsigned int storage_class,\n                                unsigned char* chars,\n                                unsigned int length,\n                                unsigned int expression_type,\n                                tree init,\n-                               unsigned char* filename,\n+                               const char* filename,\n                                int lineno);\n-void tree_code_output_expression_statement (tree code, unsigned char* filename, int lineno);\n+void tree_code_output_expression_statement (tree code, const char* filename, int lineno);\n tree get_type_for_numeric_type (unsigned int numeric_type);\n-void tree_code_if_start (tree exp, unsigned char* filename, int lineno);\n-void tree_code_if_else (unsigned char* filename, int lineno);\n-void tree_code_if_end (unsigned char* filename, int lineno);\n+void tree_code_if_start (tree exp, const char* filename, int lineno);\n+void tree_code_if_else (const char* filename, int lineno);\n+void tree_code_if_end (const char* filename, int lineno);\n tree tree_code_get_type (int type_num);\n void treelang_init_decl_processing (void);\n void treelang_finish (void);\n-const char *treelang_init (const char* filename);\n+bool treelang_init (void);\n int treelang_decode_option (int, char **);\n void treelang_parse_file (int debug_flag);\n void push_var_level (void);"}]}