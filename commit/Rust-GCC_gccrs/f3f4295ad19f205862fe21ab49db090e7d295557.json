{"sha": "f3f4295ad19f205862fe21ab49db090e7d295557", "node_id": "C_kwDOANBUbNoAKGYzZjQyOTVhZDE5ZjIwNTg2MmZlMjFhYjQ5ZGIwOTBlN2QyOTU1NTc", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-10-06T14:36:28Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-28T09:06:13Z"}, "message": "arm: improve tests and fix vddupq*\n\ngcc/ChangeLog:\n\n\t* config/arm/mve.md (mve_vddupq_u<mode>_insn): Fix 'vddup.u'\n\tspacing.\n\t(mve_vddupq_m_wb_u<mode>_insn): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u16.c: Improve test.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_n_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_m_wb_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_wb_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_n_u8.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u16.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u32.c : Likewise.\n\t* gcc.target/arm/mve/intrinsics/vddupq_x_wb_u8.c : Likewise.", "tree": {"sha": "8f852a036fa617707be7a7b9caa90202698a0e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f852a036fa617707be7a7b9caa90202698a0e50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3f4295ad19f205862fe21ab49db090e7d295557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f4295ad19f205862fe21ab49db090e7d295557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f4295ad19f205862fe21ab49db090e7d295557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f4295ad19f205862fe21ab49db090e7d295557/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9496f8411d1058539d00f716c21397efa43022d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9496f8411d1058539d00f716c21397efa43022d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9496f8411d1058539d00f716c21397efa43022d"}], "stats": {"total": 738, "additions": 642, "deletions": 96}, "files": [{"sha": "1215f845388fad37c9d279e1e22b485aa46fd9fe", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -9043,7 +9043,7 @@\n        (minus:SI (match_dup 2)\n \t\t (match_operand:SI 4 \"immediate_operand\" \"i\")))]\n  \"TARGET_HAVE_MVE\"\n- \"vddup.u%#<V_sz_elem>  %q0, %1, %3\")\n+ \"vddup.u%#<V_sz_elem>\\t%q0, %1, %3\")\n \n ;;\n ;; [vddupq_m_n_u])\n@@ -9079,7 +9079,7 @@\n        (minus:SI (match_dup 3)\n \t\t (match_operand:SI 6 \"immediate_operand\" \"i\")))]\n  \"TARGET_HAVE_MVE\"\n- \"vpst\\;\\tvddupt.u%#<V_sz_elem>\\t%q0, %2, %4\"\n+ \"vpst\\;vddupt.u%#<V_sz_elem>\\t%q0, %2, %4\"\n  [(set_attr \"length\"\"8\")])\n \n ;;"}, {"sha": "7c8b0152763924632cd324c67ed548ecd9a13a88", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_n_u16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u16.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint32_t a, mve_pred16_t p)\n {\n   return vddupq_m_n_u16 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint32_t a, mve_pred16_t p)\n {\n   return vddupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "810a1a7e21b2aed62a0d1a9c102ba8f2d36c2dfa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_n_u32.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u32.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32_t a, mve_pred16_t p)\n {\n-  return vddupq_m_n_u32 (inactive, a, 4, p);\n+  return vddupq_m_n_u32 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32_t a, mve_pred16_t p)\n {\n-  return vddupq_m (inactive, a, 4, p);\n+  return vddupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6642b9f4b8839de42b7c0f2512e18eec774518ba", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_n_u8.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_n_u8.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint32_t a, mve_pred16_t p)\n {\n-  return vddupq_m_n_u8 (inactive, a, 4, p);\n+  return vddupq_m_n_u8 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint32_t a, mve_pred16_t p)\n {\n-  return vddupq_m (inactive, a, 4, p);\n+  return vddupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cc6a19516d9c8238c9151a920fe8164eeac7b457", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_wb_u16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u16.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint16x8_t inactive, uint32_t *a, mve_pred16_t p)\n {\n   return vddupq_m_wb_u16 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint16x8_t inactive, uint32_t *a, mve_pred16_t p)\n {\n   return vddupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (uint16x8_t inactive, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "cd6c6f86eeac2dbdb4e504285897e5897f387926", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_wb_u32.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u32.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32x4_t inactive, uint32_t *a, mve_pred16_t p)\n {\n-  return vddupq_m_wb_u32 (inactive, a, 4, p);\n+  return vddupq_m_wb_u32 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32x4_t inactive, uint32_t *a, mve_pred16_t p)\n {\n-  return vddupq_m (inactive, a, 4, p);\n+  return vddupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (uint32x4_t inactive, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fe186e743da7b147f9f648f95aa2b5709d42df1f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_m_wb_u8.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_m_wb_u8.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint8x16_t inactive, uint32_t *a, mve_pred16_t p)\n {\n-  return vddupq_m_wb_u8 (inactive, a, 4, p);\n+  return vddupq_m_wb_u8 (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint8x16_t inactive, uint32_t *a, mve_pred16_t p)\n {\n-  return vddupq_m (inactive, a, 4, p);\n+  return vddupq_m (inactive, a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (uint8x16_t inactive, mve_pred16_t p)\n+{\n+  return vddupq_m (inactive, 1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2dba2d74b610e09f05f4eb8d32fdfc25dd285199", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_n_u16.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u16.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvddup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t a)\n {\n-  return vddupq_n_u16 (a, 4);\n+  return vddupq_n_u16 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvddup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t a)\n {\n-  return vddupq_u16 (a, 4);\n+  return vddupq_u16 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvddup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 ()\n+{\n+  return vddupq_u16 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6b5cf6c75b03e74e9b73925d8d9e4a309a1d435e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_n_u32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u32.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvddup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t a)\n {\n   return vddupq_n_u32 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvddup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t a)\n {\n   return vddupq_u32 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvddup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 ()\n+{\n+  return vddupq_u32 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "174e422f4efd3e4bba4072b4362a0a9db1212d1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_n_u8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_n_u8.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvddup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t a)\n {\n   return vddupq_n_u8 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvddup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t a)\n {\n   return vddupq_u8 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvddup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 ()\n+{\n+  return vddupq_u8 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "6a471a7f72f2855c7b2e3dd44aecdd89e36217a6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_wb_u16.c", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u16.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvddup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t *a)\n {\n-  return vddupq_wb_u16 (a, 4);\n+  return vddupq_wb_u16 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvddup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t *a)\n {\n-  return vddupq_u16 (a, 4);\n+  return vddupq_u16 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvddup.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 ()\n+{\n+  return vddupq_u16 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "debf420d3e83bec90ebbfd0c06403baba3b642c1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_wb_u32.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u32.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvddup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t *a)\n {\n   return vddupq_wb_u32 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvddup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t *a)\n {\n   return vddupq_u32 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvddup.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 ()\n+{\n+  return vddupq_u32 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "8e6ef8adccda7add6df78a6da10016822a77f1ad", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_wb_u8.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_wb_u8.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,21 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvddup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t *a)\n {\n   return vddupq_wb_u8 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvddup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t *a)\n {\n   return vddupq_u8 (a, 1);\n }\n \n-/* { dg-final { scan-assembler \"vddup.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvddup.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 ()\n+{\n+  return vddupq_u8 (1, 1);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "1aafaf87b82acd57c004b911563c3c56887d290e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_n_u16.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u16.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo (uint32_t a, mve_pred16_t p)\n {\n   return vddupq_x_n_u16 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n foo1 (uint32_t a, mve_pred16_t p)\n {\n   return vddupq_x_u16 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vddupq_x_u16 (1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "2e3e268dbeef1ba13c90e7222910ffd83478c69a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_n_u32.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u32.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo (uint32_t a, mve_pred16_t p)\n {\n-  return vddupq_x_n_u32 (a, 4, p);\n+  return vddupq_x_n_u32 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n foo1 (uint32_t a, mve_pred16_t p)\n {\n-  return vddupq_x_u32 (a, 4, p);\n+  return vddupq_x_u32 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vddupq_x_u32 (1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "bdf563a807454eb174fefdcbfdaabae02a8765d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_n_u8.c", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_n_u8.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,23 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo (uint32_t a, mve_pred16_t p)\n {\n-  return vddupq_x_n_u8 (a, 4, p);\n+  return vddupq_x_n_u8 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n foo1 (uint32_t a, mve_pred16_t p)\n {\n-  return vddupq_x_u8 (a, 4, p);\n+  return vddupq_x_u8 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo2 (mve_pred16_t p)\n+{\n+  return vddupq_x_u8 (1, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "713d8b731c84e6c0b0f9f33c8a2b6a9802f7478d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_wb_u16.c", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u16.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,25 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n-uint32_t *a;\n-\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo (mve_pred16_t p)\n+foo (uint32_t *a, mve_pred16_t p)\n {\n-  return vddupq_x_wb_u16 (a, 2, p);\n+  return vddupq_x_wb_u16 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint16x8_t\n+foo1 (uint32_t *a, mve_pred16_t p)\n+{\n+  return vddupq_x_u16 (a, 1, p);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u16\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint16x8_t\n-foo1 (mve_pred16_t p)\n+foo2 (mve_pred16_t p)\n {\n-  return vddupq_x_u16 (a, 2, p);\n+  return vddupq_x_u16 (1, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u16\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9f484b3b8fb8f8c92531e95c8ee2eb7897c9214e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_wb_u32.c", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u32.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,25 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n-uint32_t *a;\n-\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo (mve_pred16_t p)\n+foo (uint32_t *a, mve_pred16_t p)\n {\n-  return vddupq_x_wb_u32 (a, 8, p);\n+  return vddupq_x_wb_u32 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint32x4_t\n+foo1 (uint32_t *a, mve_pred16_t p)\n+{\n+  return vddupq_x_u32 (a, 1, p);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u32\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint32x4_t\n-foo1 (mve_pred16_t p)\n+foo2 (mve_pred16_t p)\n {\n-  return vddupq_x_u32 (a, 8, p);\n+  return vddupq_x_u32 (1, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u32\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "aa83bfed12586aa0849848812a57fecf86a8c56c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vddupq_x_wb_u8.c", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f4295ad19f205862fe21ab49db090e7d295557/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvddupq_x_wb_u8.c?ref=f3f4295ad19f205862fe21ab49db090e7d295557", "patch": "@@ -1,25 +1,57 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n-uint32_t *a;\n-\n+/*\n+**foo:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo (mve_pred16_t p)\n+foo (uint32_t *a, mve_pred16_t p)\n {\n-  return vddupq_x_wb_u8 (a, 8, p);\n+  return vddupq_x_wb_u8 (a, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n+uint8x16_t\n+foo1 (uint32_t *a, mve_pred16_t p)\n+{\n+  return vddupq_x_u8 (a, 1, p);\n+}\n+\n+/*\n+**foo2:\n+**\t...\n+**\tvmsr\tp0, (?:ip|fp|r[0-9]+)(?:\t@.*|)\n+**\t...\n+**\tvpst(?:\t@.*|)\n+**\t...\n+**\tvddupt.u8\tq[0-9]+, (?:ip|fp|r[0-9]+), #[0-9]+(?:\t@.*|)\n+**\t...\n+*/\n uint8x16_t\n-foo1 (mve_pred16_t p)\n+foo2 (mve_pred16_t p)\n {\n-  return vddupq_x_u8 (a, 8, p);\n+  return vddupq_x_u8 (1, 1, p);\n }\n \n-/* { dg-final { scan-assembler \"vpst\" } } */\n-/* { dg-final { scan-assembler \"vddupt.u8\"  }  } */\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}