{"sha": "55b9c612573a120ea39f0a80a51b3b1757248f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTViOWM2MTI1NzNhMTIwZWEzOWYwYTgwYTUxYjNiMTc1NzI0OGYxMg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-03-13T07:21:33Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-03-13T07:21:33Z"}, "message": "[multiple changes]\n\n2019-03-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/66695\n\tPR fortran/77746\n\tPR fortran/79485\n\t* gfortran.h (gfc_symbol): Add bind_c component.\n\t(gfc_get_gsymbol): Add argument bind_c.\n\t* decl.c (add_global_entry): Add bind_c argument to\n\tgfc_get_symbol.\n\t* parse.c (parse_block_data): Likewise.\n\t(parse_module): Likewise.\n\t(add_global_procedure): Likewise.\n\t(add_global_program): Likewise.\n\t* resolve.c (resolve_common_blocks): Likewise.\n\t(resolve_global_procedure): Likewise.\n\t(gfc_verify_binding_labels): Likewise.\n\t* symbol.c (gfc_get_gsymbol): Add argument bind_c. Set bind_c\n\tin gsym.\n\t* trans-decl.c (gfc_get_module_backend_decl): Add bind_c argument\n\tto gfc_get_symbol.\n\t(gfc_get_extern_function_decl): If the sym has a binding label\n\tand it cannot be found in the global symbol tabel, it is the wrong\n\tone and vice versa.\n\n2019-03-13 Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/66695\n\tPR fortran/77746\n\tPR fortran/79485\n\t* gfortran.dg/binding_label_tests_30.f90: New test.\n\t* gfortran.dg/binding_label_tests_31.f90: New test.\n\t* gfortran.dg/binding_label_tests_32.f90: New test.\n\t* gfortran.dg/binding_label_tests_33.f90: New test.\n\nFrom-SVN: r269635", "tree": {"sha": "bc8357be046f69da95493b65f945f8d0532dbdd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc8357be046f69da95493b65f945f8d0532dbdd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55b9c612573a120ea39f0a80a51b3b1757248f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b9c612573a120ea39f0a80a51b3b1757248f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55b9c612573a120ea39f0a80a51b3b1757248f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b9c612573a120ea39f0a80a51b3b1757248f12/comments", "author": null, "committer": null, "parents": [{"sha": "599b9f723e42b0efdf580c45bc03e12dec377edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599b9f723e42b0efdf580c45bc03e12dec377edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/599b9f723e42b0efdf580c45bc03e12dec377edd"}], "stats": {"total": 184, "additions": 167, "deletions": 17}, "files": [{"sha": "ee39ad8d398bef9fd6779d4515055a935c277a63", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -1,3 +1,27 @@\n+2019-03-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/66695\n+\tPR fortran/77746\n+\tPR fortran/79485\n+\t* gfortran.h (gfc_symbol): Add bind_c component.\n+\t(gfc_get_gsymbol): Add argument bind_c.\n+\t* decl.c (add_global_entry): Add bind_c argument to\n+\tgfc_get_symbol.\n+\t* parse.c (parse_block_data): Likewise.\n+\t(parse_module): Likewise.\n+\t(add_global_procedure): Likewise.\n+\t(add_global_program): Likewise.\n+\t* resolve.c (resolve_common_blocks): Likewise.\n+\t(resolve_global_procedure): Likewise.\n+\t(gfc_verify_binding_labels): Likewise.\n+\t* symbol.c (gfc_get_gsymbol): Add argument bind_c. Set bind_c\n+\tin gsym.\n+\t* trans-decl.c (gfc_get_module_backend_decl): Add bind_c argument\n+\tto gfc_get_symbol.\n+\t(gfc_get_extern_function_decl): If the sym has a binding label\n+\tand it cannot be found in the global symbol tabel, it is the wrong\n+\tone and vice versa.\n+\n 2019-03-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/87673"}, {"sha": "2f335b24835896b9523d4e515ee854dbb95961de", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -7248,7 +7248,7 @@ add_global_entry (const char *name, const char *binding_label, bool sub,\n      name is a global identifier.  */\n   if (!binding_label || gfc_notification_std (GFC_STD_F2008))\n     {\n-      s = gfc_get_gsymbol (name);\n+      s = gfc_get_gsymbol (name, false);\n \n       if (s->defined || (s->type != GSYM_UNKNOWN && s->type != type))\n \t{\n@@ -7270,7 +7270,7 @@ add_global_entry (const char *name, const char *binding_label, bool sub,\n       && (!gfc_notification_std (GFC_STD_F2008)\n \t  || strcmp (name, binding_label) != 0))\n     {\n-      s = gfc_get_gsymbol (binding_label);\n+      s = gfc_get_gsymbol (binding_label, true);\n \n       if (s->defined || (s->type != GSYM_UNKNOWN && s->type != type))\n \t{"}, {"sha": "dd959e6403ecaf2e76554bec104077a519794441", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -1891,6 +1891,7 @@ typedef struct gfc_gsymbol\n   enum gfc_symbol_type type;\n \n   int defined, used;\n+  bool bind_c;\n   locus where;\n   gfc_namespace *ns;\n }\n@@ -3114,7 +3115,7 @@ void gfc_enforce_clean_symbol_state (void);\n void gfc_free_dt_list (void);\n \n \n-gfc_gsymbol *gfc_get_gsymbol (const char *);\n+gfc_gsymbol *gfc_get_gsymbol (const char *, bool bind_c);\n gfc_gsymbol *gfc_find_gsymbol (gfc_gsymbol *, const char *);\n gfc_gsymbol *gfc_find_case_gsymbol (gfc_gsymbol *, const char *);\n "}, {"sha": "14cda5f9fba42e606eddf9654daf7daed682a272", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -5839,7 +5839,7 @@ parse_block_data (void)\n     }\n   else\n     {\n-      s = gfc_get_gsymbol (gfc_new_block->name);\n+      s = gfc_get_gsymbol (gfc_new_block->name, false);\n       if (s->defined\n \t  || (s->type != GSYM_UNKNOWN && s->type != GSYM_BLOCK_DATA))\n        gfc_global_used (s, &gfc_new_block->declared_at);\n@@ -5921,7 +5921,7 @@ parse_module (void)\n   gfc_gsymbol *s;\n   bool error;\n \n-  s = gfc_get_gsymbol (gfc_new_block->name);\n+  s = gfc_get_gsymbol (gfc_new_block->name, false);\n   if (s->defined || (s->type != GSYM_UNKNOWN && s->type != GSYM_MODULE))\n     gfc_global_used (s, &gfc_new_block->declared_at);\n   else\n@@ -5985,7 +5985,7 @@ add_global_procedure (bool sub)\n      name is a global identifier.  */\n   if (!gfc_new_block->binding_label || gfc_notification_std (GFC_STD_F2008))\n     {\n-      s = gfc_get_gsymbol (gfc_new_block->name);\n+      s = gfc_get_gsymbol (gfc_new_block->name, false);\n \n       if (s->defined\n \t  || (s->type != GSYM_UNKNOWN\n@@ -6010,7 +6010,7 @@ add_global_procedure (bool sub)\n       && (!gfc_notification_std (GFC_STD_F2008)\n           || strcmp (gfc_new_block->name, gfc_new_block->binding_label) != 0))\n     {\n-      s = gfc_get_gsymbol (gfc_new_block->binding_label);\n+      s = gfc_get_gsymbol (gfc_new_block->binding_label, true);\n \n       if (s->defined\n \t  || (s->type != GSYM_UNKNOWN\n@@ -6042,7 +6042,7 @@ add_global_program (void)\n \n   if (gfc_new_block == NULL)\n     return;\n-  s = gfc_get_gsymbol (gfc_new_block->name);\n+  s = gfc_get_gsymbol (gfc_new_block->name, false);\n \n   if (s->defined || (s->type != GSYM_UNKNOWN && s->type != GSYM_PROGRAM))\n     gfc_global_used (s, &gfc_new_block->declared_at);"}, {"sha": "62c7d376b92182b67341bf5683285dfc28ec078e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -1050,7 +1050,7 @@ resolve_common_blocks (gfc_symtree *common_root)\n \t}\n       if (!gsym)\n \t{\n-\t  gsym = gfc_get_gsymbol (common_root->n.common->name);\n+\t  gsym = gfc_get_gsymbol (common_root->n.common->name, false);\n \t  gsym->type = GSYM_COMMON;\n \t  gsym->where = common_root->n.common->where;\n \t  gsym->defined = 1;\n@@ -1072,7 +1072,7 @@ resolve_common_blocks (gfc_symtree *common_root)\n \t}\n       if (!gsym)\n \t{\n-\t  gsym = gfc_get_gsymbol (common_root->n.common->binding_label);\n+\t  gsym = gfc_get_gsymbol (common_root->n.common->binding_label, true);\n \t  gsym->type = GSYM_COMMON;\n \t  gsym->where = common_root->n.common->where;\n \t  gsym->defined = 1;\n@@ -2487,7 +2487,8 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \n   type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;\n \n-  gsym = gfc_get_gsymbol (sym->binding_label ? sym->binding_label : sym->name);\n+  gsym = gfc_get_gsymbol (sym->binding_label ? sym->binding_label : sym->name,\n+\t\t\t  sym->binding_label != NULL);\n \n   if ((gsym->type != GSYM_UNKNOWN && gsym->type != type))\n     gfc_global_used (gsym, where);\n@@ -11847,7 +11848,7 @@ gfc_verify_binding_labels (gfc_symbol *sym)\n \t  && (gsym->type == GSYM_FUNCTION || gsym->type == GSYM_SUBROUTINE)))\n     {\n       if (!gsym)\n-\tgsym = gfc_get_gsymbol (sym->binding_label);\n+\tgsym = gfc_get_gsymbol (sym->binding_label, true);\n       gsym->where = sym->declared_at;\n       gsym->sym_name = sym->name;\n       gsym->binding_label = sym->binding_label;"}, {"sha": "882a4f323f814e4040cc9dc611ac8e72027675fc", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -4330,7 +4330,7 @@ gsym_compare (void *_s1, void *_s2)\n /* Get a global symbol, creating it if it doesn't exist.  */\n \n gfc_gsymbol *\n-gfc_get_gsymbol (const char *name)\n+gfc_get_gsymbol (const char *name, bool bind_c)\n {\n   gfc_gsymbol *s;\n \n@@ -4341,6 +4341,7 @@ gfc_get_gsymbol (const char *name)\n   s = XCNEW (gfc_gsymbol);\n   s->type = GSYM_UNKNOWN;\n   s->name = gfc_get_string (\"%s\", name);\n+  s->bind_c = bind_c;\n \n   gfc_insert_bbt (&gfc_gsym_root, s, gsym_compare);\n "}, {"sha": "ada6370899ac62ed9565f21557249bcdcd21f9ea", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -843,7 +843,7 @@ gfc_get_module_backend_decl (gfc_symbol *sym)\n \t{\n \t  if (!gsym)\n \t    {\n-\t      gsym = gfc_get_gsymbol (sym->module);\n+\t      gsym = gfc_get_gsymbol (sym->module, false);\n \t      gsym->type = GSYM_MODULE;\n \t      gsym->ns = gfc_get_namespace (NULL, 0);\n \t    }\n@@ -2002,9 +2002,22 @@ gfc_get_extern_function_decl (gfc_symbol * sym, gfc_actual_arglist *actual_args)\n     return get_proc_pointer_decl (sym);\n \n   /* See if this is an external procedure from the same file.  If so,\n-     return the backend_decl.  */\n-  gsym =  gfc_find_gsymbol (gfc_gsym_root, sym->binding_label\n-\t\t\t\t\t   ? sym->binding_label : sym->name);\n+     return the backend_decl.  If we are looking at a BIND(C)\n+     procedure and the symbol is not BIND(C), or vice versa, we\n+     haven't found the right procedure.  */\n+\n+  if (sym->binding_label)\n+    {\n+      gsym = gfc_find_gsymbol (gfc_gsym_root, sym->binding_label);\n+      if (gsym && !gsym->bind_c)\n+\tgsym = NULL;\n+    }\n+  else\n+    {\n+      gsym = gfc_find_gsymbol (gfc_gsym_root, sym->name);\n+      if (gsym && gsym->bind_c)\n+\tgsym = NULL;\n+    }\n \n   if (gsym && !gsym->defined)\n     gsym = NULL;"}, {"sha": "c41914e6f389e01104762b7bde1a82c8e1bc13da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -1,3 +1,13 @@\n+2019-03-13 Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/66695\n+\tPR fortran/77746\n+\tPR fortran/79485\n+\t* gfortran.dg/binding_label_tests_30.f90: New test.\n+\t* gfortran.dg/binding_label_tests_31.f90: New test.\n+\t* gfortran.dg/binding_label_tests_32.f90: New test.\n+\t* gfortran.dg/binding_label_tests_33.f90: New test.\n+\n 2019-03-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* gdc.dg/pr88957.d: Move to gdc.dg/ubsan."}, {"sha": "168d4b52f2d934b9653a6bb3d1acfa71677df4c6", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_30.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_30.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_30.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_30.f90?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+! Make sure this error is flagged.\n+subroutine foo() ! { dg-error \"is already being used as a SUBROUTINE\" }\n+end subroutine foo\n+\n+subroutine bar() bind(C,name=\"foo\") ! { dg-error \"is already being used as a SUBROUTINE\" }\n+end subroutine bar"}, {"sha": "e914c66a7b85e068178f722946e3860de5ee6d00", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_31.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_31.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_31.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_31.f90?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! PR fortran/66695 - this used to ICE.\n+! Original test case by Vladimir Fuka.\n+module mod\n+  implicit none\n+contains\n+    integer function F()\n+    end function\n+end module\n+    \n+module mod_C\n+  use mod\n+  implicit none\n+contains\n+  subroutine s()  bind(C, name=\"f\")\n+    integer :: x\n+      x = F()\n+  end subroutine\n+end module"}, {"sha": "f18df66a2cce34cd3b6afa2155628fa762cfffbd", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_32.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_32.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_32.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_32.f90?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do run }\n+! PR 77746 - this used to crash during execution.\n+! Original test case by Vladimir Fuka.\n+module first\n+  private\n+  public execute\n+  \n+  interface execute\n+    module procedure random_name\n+  end interface\n+  \n+contains\n+\n+  subroutine random_name()\n+  end subroutine\n+end module\n+\n+module test\n+  use first\n+\n+  implicit none\n+\n+contains\n+\n+  subroutine p_execute(i)  bind(C, name=\"random_name\")\n+    integer :: i\n+\n+    call execute()\n+  end subroutine\n+  \n+end module\n+\n+  use test\n+  call p_execute(1)\n+end"}, {"sha": "fdb9a887f60738c1f561d0eace4e01f1a8901ed0", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_33.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b9c612573a120ea39f0a80a51b3b1757248f12/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_33.f90?ref=55b9c612573a120ea39f0a80a51b3b1757248f12", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+! PR 79485 - used to crash because the wrong routine was called.\n+module fmod1\n+\n+  contains\n+\n+  subroutine foo(i)\n+    implicit none\n+\n+    integer, intent(inout) :: i\n+\n+    i=i+1\n+\n+  end subroutine foo\n+\n+end module fmod1\n+\n+module fmod2\n+  use iso_c_binding\n+  use fmod1, only : foo_first => foo\n+\n+  contains\n+\n+  subroutine foo(i) bind(c)\n+    implicit none\n+\n+    integer, intent(inout) :: i\n+\n+    i=i+2\n+    call foo_first(i)\n+\n+  end subroutine foo\n+\n+end module fmod2\n+\n+  use fmod2\n+  \n+  call foo(i)\n+end"}]}