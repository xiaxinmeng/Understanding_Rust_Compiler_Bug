{"sha": "3fefd0193cc8dcd50fe626a9d81719ba3c845a2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlZmQwMTkzY2M4ZGNkNTBmZTYyNmE5ZDgxNzE5YmEzYzg0NWEyZg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2005-07-14T18:20:10Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2005-07-14T18:20:10Z"}, "message": "Connection.java (unquote): New method.\n\n2005-07-13  Andrew Haley  <aph@redhat.com>\n\n        * gnu/java/net/protocol/file/Connection.java (unquote): New\n        method.\n        (connect): Unquote filename.\n        gnu/java/net/protocol/jar/Connection.java (getInputStream):\n        Likewise.\n        (getJarFile): Likewise.\n\n        * java/net/URLConnection.java (getContentHandler): Guard cast with\n        instaceof.\n\n        * java/net/URL.java (URL): If the file part of a spec is absolute,\n        ignore the file part of its context.\n\nFrom-SVN: r102029", "tree": {"sha": "8de981c27b99e5f3550c9d6ebf969b8edaec99fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8de981c27b99e5f3550c9d6ebf969b8edaec99fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b11e14262e1381cc7e7322aec4d5be27bb15529b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b11e14262e1381cc7e7322aec4d5be27bb15529b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b11e14262e1381cc7e7322aec4d5be27bb15529b"}], "stats": {"total": 108, "additions": 91, "deletions": 17}, "files": [{"sha": "3f224052321b9be333f4f5a59ab09f70611012a9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=3fefd0193cc8dcd50fe626a9d81719ba3c845a2f", "patch": "@@ -1,3 +1,18 @@\n+2005-07-14  Andrew Haley  <aph@redhat.com>\n+\n+        * gnu/java/net/protocol/file/Connection.java (unquote): New\n+        method.\n+        (connect): Unquote filename.\n+        gnu/java/net/protocol/jar/Connection.java (getInputStream):\n+        Likewise.  \n+        (getJarFile): Likewise.\n+\n+        * java/net/URLConnection.java (getContentHandler): Guard cast with\n+        instaceof.\n+\n+        * java/net/URL.java (URL): If the file part of a spec is absolute,\n+        ignore the file part of its context.\n+\n 2005-07-14  Aaron Luchko  <aluchko@redhat.com>\n \n \t* gnu/classpath/jdwp/processor/VirtualMachineCommandSet.java:"}, {"sha": "8e4a413667d1b946d377aa1ca111dea257403d90", "filename": "libjava/gnu/java/net/protocol/file/Connection.java", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Ffile%2FConnection.java?ref=3fefd0193cc8dcd50fe626a9d81719ba3c845a2f", "patch": "@@ -59,6 +59,7 @@\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.Locale;\n+import java.net.MalformedURLException;\n \n /**\n  * This subclass of java.net.URLConnection models a URLConnection via\n@@ -124,6 +125,54 @@ public Connection(URL url)\n     permission = new FilePermission(getURL().getFile(), DEFAULT_PERMISSION);\n   }\n   \n+  /**\n+   * Unquote \"%\" + hex quotes characters\n+   *\n+   * @param str The string to unquote or null.\n+   *\n+   * @return The unquoted string or null if str was null.\n+   *\n+   * @exception MalformedURLException If the given string contains invalid\n+   * escape sequences.\n+   *\n+   * Sadly the same as URI.unquote, but there's nothing we can do to\n+   * make it accessible.\n+   *\n+   */\n+  public static String unquote(String str) throws MalformedURLException\n+  {\n+    if (str == null)\n+      return null;\n+    byte[] buf = new byte[str.length()];\n+    int pos = 0;\n+    for (int i = 0; i < str.length(); i++)\n+      {\n+\tchar c = str.charAt(i);\n+\tif (c > 127)\n+\t  throw new MalformedURLException(str + \" : Invalid character\");\n+\tif (c == '%')\n+\t  {\n+\t    if (i + 2 >= str.length())\n+\t      throw new MalformedURLException(str + \" : Invalid quoted character\");\n+\t    int hi = Character.digit(str.charAt(++i), 16);\n+\t    int lo = Character.digit(str.charAt(++i), 16);\n+\t    if (lo < 0 || hi < 0)\n+\t      throw new MalformedURLException(str + \" : Invalid quoted character\");\n+\t    buf[pos++] = (byte) (hi * 16 + lo);\n+\t  }\n+\telse\n+\t  buf[pos++] = (byte) c;\n+      }\n+    try\n+      {\n+\treturn new String(buf, 0, pos, \"utf-8\");\n+      }\n+    catch (java.io.UnsupportedEncodingException x2)\n+      {\n+\tthrow (Error) new InternalError().initCause(x2);\n+      }\n+  }\n+\n   /**\n    * \"Connects\" to the file by opening it.\n    */\n@@ -134,7 +183,7 @@ public void connect() throws IOException\n       return;\n     \n     // If not connected, then file needs to be openned.\n-    file = new File (getURL().getFile());\n+    file = new File (unquote(getURL().getFile()));\n \n     if (! file.isDirectory())\n       {"}, {"sha": "34df18354e8928a6e5747ab4ed7e311d0c698560", "filename": "libjava/gnu/java/net/protocol/jar/Connection.java", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fjar%2FConnection.java?ref=3fefd0193cc8dcd50fe626a9d81719ba3c845a2f", "patch": "@@ -151,7 +151,8 @@ public InputStream getInputStream() throws IOException\n     if (jarfile != null)\n       {\n \t// this is the easy way...\n-\tZipEntry entry = jarfile.getEntry(getEntryName());\n+\tZipEntry entry = jarfile.getEntry\n+\t  (gnu.java.net.protocol.file.Connection.unquote(getEntryName()));\n         \n \tif (entry != null)\n \t  return jarfile.getInputStream (entry);\n@@ -164,12 +165,14 @@ public InputStream getInputStream() throws IOException\n \tJarInputStream zis = new JarInputStream(\n \t\t\tjarFileURLConnection.getInputStream ());\n \n+\tString entryName = gnu.java.net.protocol.file.Connection.unquote(getEntryName());\n+\n \t// This is hideous, we're doing a linear search...\n \tfor (ZipEntry entry = zis.getNextEntry(); \n \t     entry != null; \n \t     entry = zis.getNextEntry())\n \t  {\n-\t    if (getEntryName().equals(entry.getName()))\n+\t    if (entryName.equals(entry.getName()))\n \t      {\n \t\tint size = (int) entry.getSize();\n \t\tbyte[] data = new byte[size];\n@@ -203,12 +206,14 @@ public synchronized JarFile getJarFile() throws IOException\n \t    jar_file = (JarFile) file_cache.get (jarFileURL);\n \t    if (jar_file == null)\n \t      {\n-\t\tjar_file = new JarFile (jarFileURL.getFile());\n+\t\tjar_file = new JarFile \n+\t\t  (gnu.java.net.protocol.file.Connection.unquote(jarFileURL.getFile()));\n \t\tfile_cache.put (jarFileURL, jar_file);\n \t      }\n \t  }\n \telse\n-\t  jar_file = new JarFile (jarFileURL.getFile());\n+\t  jar_file = new JarFile \n+\t    (gnu.java.net.protocol.file.Connection.unquote(jarFileURL.getFile()));\n       }\n     else\n       {"}, {"sha": "0ae7c1cfb96ee62aae67f3c4448f9a238215aab8", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=3fefd0193cc8dcd50fe626a9d81719ba3c845a2f", "patch": "@@ -408,10 +408,7 @@ public URL(URL context, String spec, URLStreamHandler ph)\n \t    // The 1.2 doc specifically says these are copied to the new URL.\n \t    host = context.host;\n \t    port = context.port;\n-\t    file = context.file;\n             userInfo = context.userInfo;\n-\t    if (file == null || file.length() == 0)\n-\t      file = \"/\";\n \t    authority = context.authority;\n \t  }\n       }\n@@ -423,10 +420,13 @@ else if (context != null)\n \tprotocol = context.protocol;\n \thost = context.host;\n \tport = context.port;\n-\tfile = context.file;\n         userInfo = context.userInfo;\n-\tif (file == null || file.length() == 0)\n-\t  file = \"/\";\n+\tif (spec.indexOf(\":/\", 1) < 0)\n+\t  {\n+\t    file = context.file;\n+\t    if (file == null || file.length() == 0)\n+\t      file = \"/\";\n+\t  }\n \tauthority = context.authority;\n       }\n     else // Protocol NOT specified in spec. and no context available."}, {"sha": "55b9d664dc749e31607a6bad44c2e98bbe992e62", "filename": "libjava/java/net/URLConnection.java", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/libjava%2Fjava%2Fnet%2FURLConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fefd0193cc8dcd50fe626a9d81719ba3c845a2f/libjava%2Fjava%2Fnet%2FURLConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLConnection.java?ref=3fefd0193cc8dcd50fe626a9d81719ba3c845a2f", "patch": "@@ -983,17 +983,22 @@ private ContentHandler getContentHandler(String contentType)\n     if (contentType == null || contentType.equals(\"\"))\n       return null;\n \n-    ContentHandler handler;\n+    ContentHandler handler = null;\n \n     // See if a handler has been cached for this content type.\n     // For efficiency, if a content type has been searched for but not\n     // found, it will be in the hash table but as the contentType String\n     // instead of a ContentHandler.\n-    if ((handler = (ContentHandler) handlers.get(contentType)) != null)\n-      if (handler instanceof ContentHandler)\n-\treturn handler;\n-      else\n-\treturn null;\n+    {\n+      Object cachedHandler;\n+      if ((cachedHandler = handlers.get(contentType)) != null)\n+\t{\n+\t  if (cachedHandler instanceof ContentHandler)\n+\t    return (ContentHandler)cachedHandler;\n+\t  else\n+\t    return null;\n+\t}\n+    }\n \n     // If a non-default factory has been set, use it.\n     if (factory != null)"}]}