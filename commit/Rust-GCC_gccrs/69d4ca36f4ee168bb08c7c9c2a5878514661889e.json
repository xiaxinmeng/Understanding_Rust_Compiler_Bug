{"sha": "69d4ca36f4ee168bb08c7c9c2a5878514661889e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlkNGNhMzZmNGVlMTY4YmIwOGM3YzljMmE1ODc4NTE0NjYxODg5ZQ==", "commit": {"author": {"name": "Robert Lipe", "email": "robertl@dgii.com", "date": "1998-02-13T05:30:56Z"}, "committer": {"name": "Robert Lipe", "email": "robertl@gcc.gnu.org", "date": "1998-02-13T05:30:56Z"}, "message": "c-lang.c (finish_file): Bracket declaration of static_ctors, static_dtors.\n\n\t* c-lang.c (finish_file): Bracket declaration of static_ctors,\n\tstatic_dtors.\n\t* calls.c (expand_call): Bracket declaration of 'rtx_before_call',\n\t'old_stack_arg_under_construction'\n\t(emit_library_call): Bracket declaration of 'upper_bound',\n\t'lower_bound', 'i', 'reg_parm_stack_space'\n\t(emit_library_call_value): Likewise.\n\t(store_one_arg):\n\t* collect2.c: include <unistd.h> when appropriate.\n\tBracket declaration of 'exportf' and 'full_real_ld_suffix'.\n\t* emit-rtl.c (prev_cc0_setter): Remove unused variable 'link'.\n\t* explow.c (plus_constant_for_output_wide): Remove unused variable\n\t'code'.\n\t(memory_address): Remove unused variable 'orig_x'.\n\t* genattrtab.c (make_canonical): Remove unreferenced label 'cond:'.\n\t(write_const_num_delay_slots): Remove unused variable 'i'.\n\t* genopinit.c (main): Remove unused variables 'dummy', 'insn_ptr'.\n\t(gen_insn): Remove unused variable 'obstack_ptr'.\n        * libgcc2.c (__bb_exit_func): Remove unused variables 'ret',\n        'j', 'tmp', 'i'.\n\t(__bb_exit_trace_func): Remove unused variable 'e'.\n\t* optabs.c (expand_binop): remove unused variables 'lhs', 'rhs',\n\t'funexp'.\n\t(expand_unop): Remove unused variable 'funexp'.\n\t(expand_complex_abs): Remove unused variable 'funexp'.\n\t(init_optabs): Bracket declaration of 'j'.\n\t(init_complex_libfuncs): Deleted.  Dead static function.\n\t* profile.c (branch_prob): Remove unused variables 'insn', 'dest'.\n\t* reg-stack.c: Fix typo in proto for 'get_asm_operand_lengths'\n\t(reg_to_stack): 'initialized', 'before_function_beg'\n\texplictly type as ints instead of defaulting.\n\t(emit_swap_insn): Remove unused variable 'i2'.\n\t(compare_for_stack_reg): Remove unused variable 'src_note'.\n\t* rtlanal.c (computed_jump_p): Remove unused variable 'computed_jump'.\n\t* sched.c (actual_hazard): Bracket declaration of 'this_cost'.\n\t* stmt.c (add_case_node): Add parens for assignment used as truth.\n\t(all_cases_count):  Remove unused variable 'count_high'.\n\t(mark_seen_cases): Remove unused variable 'i'.\n\t(check_for_full_enumeration_handling): Remove unused variable 't'.\n\tBracket declaration of  'all_values', 'l'.\n\t* tlink.c: Include <stdlib.h>, <unistd.h>, <string.h>/<strings.h>.\n\t* varasm.c (assemble_string): Remove unused variable 'i'.\n\t(immed_double_const): Remove unused variable 'in_current_obstack'.\n\t(immed_real_const_1): Likewise.\n\t(output_constant_pool): Remove unreferenced label 'done'.\n\t(output_constant): Remove unused variable 'x'.\n        * i386/i386.h (ENCODE_SECTION_INFO): TREE_PUBLIC is an int, not\n        a string.\n        * i386/sco5.h (ASM_OUTPUT_ASCII): Add parens for assignment used\n        as truth.\n\nFrom-SVN: r17901", "tree": {"sha": "3526ac5c2b4e5a8ca2addb0ad5ca8a7fc398448e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3526ac5c2b4e5a8ca2addb0ad5ca8a7fc398448e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69d4ca36f4ee168bb08c7c9c2a5878514661889e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69d4ca36f4ee168bb08c7c9c2a5878514661889e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69d4ca36f4ee168bb08c7c9c2a5878514661889e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69d4ca36f4ee168bb08c7c9c2a5878514661889e/comments", "author": null, "committer": null, "parents": [{"sha": "387c47a3801e961f6fa0d7688f2db225a490fe86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387c47a3801e961f6fa0d7688f2db225a490fe86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387c47a3801e961f6fa0d7688f2db225a490fe86"}], "stats": {"total": 196, "additions": 134, "deletions": 62}, "files": [{"sha": "85518bf666cc3565676f80037425663c1852f625", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -1,3 +1,73 @@\n+Wed Feb 11 21:44:40 1998  Robert Lipe\t<robertl@dgii.com>\n+\n+\t* c-lang.c (finish_file): Bracket declaration of static_ctors, \n+\tstatic_dtors.\n+\n+\t* calls.c (expand_call): Bracket declaration of 'rtx_before_call',\n+\t'old_stack_arg_under_construction'\n+\t(emit_library_call): Bracket declaration of 'upper_bound', \n+\t'lower_bound', 'i', 'reg_parm_stack_space'\n+\t(emit_library_call_value): Likewise.\n+\t(store_one_arg): \n+\n+\t* collect2.c: include <unistd.h> when appropriate.\n+\tBracket declaration of 'exportf' and 'full_real_ld_suffix'.\n+\n+\t* emit-rtl.c (prev_cc0_setter): Remove unused variable 'link'.\n+\t\n+\t* explow.c (plus_constant_for_output_wide): Remove unused variable\n+\t'code'.\n+\t(memory_address): Remove unused variable 'orig_x'. \n+\n+\t* genattrtab.c (make_canonical): Remove unreferenced label 'cond:'.\n+\t(write_const_num_delay_slots): Remove unused variable 'i'.\n+\n+\t* genopinit.c (main): Remove unused variables 'dummy', 'insn_ptr'.\n+\t(gen_insn): Remove unused variable 'obstack_ptr'.\n+\n+        * libgcc2.c (__bb_exit_func): Remove unused variables 'ret',\n+        'j', 'tmp', 'i'.\n+\t(__bb_exit_trace_func): Remove unused variable 'e'.\n+\n+\t* optabs.c (expand_binop): remove unused variables 'lhs', 'rhs',\n+\t'funexp'.\n+\t(expand_unop): Remove unused variable 'funexp'.\n+\t(expand_complex_abs): Remove unused variable 'funexp'. \n+\t(init_optabs): Bracket declaration of 'j'.\n+\t(init_complex_libfuncs): Deleted.  Dead static function.\n+\t\n+\t* profile.c (branch_prob): Remove unused variables 'insn', 'dest'.\n+\n+\t* reg-stack.c: Fix typo in proto for 'get_asm_operand_lengths'\n+\t(reg_to_stack): 'initialized', 'before_function_beg'\n+\texplictly type as ints instead of defaulting.\n+\t(emit_swap_insn): Remove unused variable 'i2'.\n+\t(compare_for_stack_reg): Remove unused variable 'src_note'.\n+\n+\t* rtlanal.c (computed_jump_p): Remove unused variable 'computed_jump'.\n+\n+\t* sched.c (actual_hazard): Bracket declaration of 'this_cost'.\n+\n+\t* stmt.c (add_case_node): Add parens for assignment used as truth.\n+\t(all_cases_count):  Remove unused variable 'count_high'.\n+\t(mark_seen_cases): Remove unused variable 'i'.\n+\t(check_for_full_enumeration_handling): Remove unused variable 't'.\n+\tBracket declaration of  'all_values', 'l'.\n+\t\n+\t* tlink.c: Include <stdlib.h>, <unistd.h>, <string.h>/<strings.h>.\n+\n+\t* varasm.c (assemble_string): Remove unused variable 'i'. \n+\t(immed_double_const): Remove unused variable 'in_current_obstack'. \n+\t(immed_real_const_1): Likewise.\n+\t(output_constant_pool): Remove unreferenced label 'done'.\n+\t(output_constant): Remove unused variable 'x'.\n+\t\n+        * i386/i386.h (ENCODE_SECTION_INFO): TREE_PUBLIC is an int, not\n+        a string.\n+\n+        * i386/sco5.h (ASM_OUTPUT_ASCII): Add parens for assignment used\n+        as truth.\n+\n Fri Feb 13 10:21:41 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n         * combine.c (can_combine_p): Handle USEs in PARALLELs."}, {"sha": "d19dc0362d570c622e4c2432cca1370e102d961d", "filename": "gcc/c-lang.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -136,7 +136,12 @@ GNU_xref_end ()\n void\n finish_file ()\n {\n-  extern tree static_ctors, static_dtors;\n+#ifndef ASM_OUTPUT_CONSTRUCTOR\n+  extern tree static_ctors;\n+#endif\n+#ifndef ASM_OUTPUT_DESTRUCTOR\n+  extern tree static_dtors;\n+#endif\n   extern tree build_function_call                 PROTO((tree, tree));\n   tree void_list_node = build_tree_list (NULL_TREE, void_type_node);\n #ifndef ASM_OUTPUT_CONSTRUCTOR"}, {"sha": "6c52191036286927e321f2f80721c76afc4f0176", "filename": "gcc/calls.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -585,11 +585,11 @@ expand_call (exp, target, ignore)\n #ifdef ACCUMULATE_OUTGOING_ARGS\n   int initial_highest_arg_in_use = highest_outgoing_arg_in_use;\n   char *initial_stack_usage_map = stack_usage_map;\n+  int old_stack_arg_under_construction;\n #endif\n \n   rtx old_stack_level = 0;\n   int old_pending_adj = 0;\n-  int old_stack_arg_under_construction;\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n   rtx call_fusage = 0;\n   register tree p;\n@@ -723,7 +723,9 @@ expand_call (exp, target, ignore)\n   if (is_integrable)\n     {\n       rtx temp;\n+#ifdef ACCUMULATE_OUTGOING_ARGS\n       rtx before_call = get_last_insn ();\n+#endif\n \n       temp = expand_inline_function (fndecl, actparms, target,\n \t\t\t\t     ignore, TREE_TYPE (exp),\n@@ -2319,8 +2321,6 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n   struct arg *argvec;\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n   rtx call_fusage = 0;\n-  /* Size of the stack reserved for parameter registers.  */\n-  int reg_parm_stack_space = 0;\n #if defined(ACCUMULATE_OUTGOING_ARGS) && defined(REG_PARM_STACK_SPACE)\n   /* Define the boundary of the register parm stack space that needs to be\n      save, if any.  */\n@@ -2335,6 +2335,8 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n #endif\n \n #ifdef REG_PARM_STACK_SPACE\n+  /* Size of the stack reserved for parameter registers.  */\n+  int reg_parm_stack_space = 0;\n #ifdef MAYBE_REG_PARM_STACK_SPACE\n   reg_parm_stack_space = MAYBE_REG_PARM_STACK_SPACE;\n #else\n@@ -2613,7 +2615,9 @@ emit_library_call VPROTO((rtx orgfun, int no_queue, enum machine_mode outmode,\n       register rtx val = argvec[argnum].value;\n       rtx reg = argvec[argnum].reg;\n       int partial = argvec[argnum].partial;\n+#ifdef ACCUMULATE_OUTGOING_ARGS\n       int lower_bound, upper_bound, i;\n+#endif\n \n       if (! (reg != 0 && partial == 0))\n \t{\n@@ -2817,13 +2821,13 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n   struct arg *argvec;\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n   rtx call_fusage = 0;\n-  /* Size of the stack reserved for parameter registers.  */\n-  int reg_parm_stack_space = 0;\n   rtx mem_value = 0;\n   int pcc_struct_value = 0;\n   int struct_value_size = 0;\n   int is_const;\n+#ifdef ACCUMULATE_OUTGOING_ARGS\n   int needed;\n+#endif\n \n #if defined(ACCUMULATE_OUTGOING_ARGS) && defined(REG_PARM_STACK_SPACE)\n   /* Define the boundary of the register parm stack space that needs to be\n@@ -2833,6 +2837,8 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n #endif\n \n #ifdef ACCUMULATE_OUTGOING_ARGS\n+  /* Size of the stack reserved for parameter registers.  */\n+  int reg_parm_stack_space = 0;\n   int initial_highest_arg_in_use = highest_outgoing_arg_in_use;\n   char *initial_stack_usage_map = stack_usage_map;\n #endif\n@@ -3184,7 +3190,9 @@ emit_library_call_value VPROTO((rtx orgfun, rtx value, int no_queue,\n       register rtx val = argvec[argnum].value;\n       rtx reg = argvec[argnum].reg;\n       int partial = argvec[argnum].partial;\n+#ifdef ACCUMULATE_OUTGOING_ARGS\n       int lower_bound, upper_bound, i;\n+#endif\n \n       if (! (reg != 0 && partial == 0))\n \t{\n@@ -3448,7 +3456,9 @@ store_one_arg (arg, argblock, may_be_alloca, variable_size, fndecl,\n   rtx reg = 0;\n   int partial = 0;\n   int used = 0;\n+#ifdef ACCUMULATE_OUTGOING_ARGS\n   int i, lower_bound, upper_bound;\n+#endif\n \n   if (TREE_CODE (pval) == ERROR_MARK)\n     return;"}, {"sha": "57bd0d9f8b1c931742ed57a2941c43aad2496ebc", "filename": "gcc/collect2.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -38,6 +38,10 @@ Boston, MA 02111-1307, USA.  */\n #include <stdlib.h>\n #endif\n \n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n #ifdef HAVE_STRING_H\n #include <string.h>\n #else\n@@ -921,7 +925,9 @@ main (argc, argv)\n   char *ld_suffix\t= \"ld\";\n   char *full_ld_suffix\t= ld_suffix;\n   char *real_ld_suffix\t= \"real-ld\";\n+#ifdef CROSS_COMPILE\n   char *full_real_ld_suffix = real_ld_suffix;\n+#endif\n   char *collect_ld_suffix = \"collect-ld\";\n   char *nm_suffix\t= \"nm\";\n   char *full_nm_suffix\t= nm_suffix;\n@@ -936,7 +942,10 @@ main (argc, argv)\n   char *gstrip_suffix\t= \"gstrip\";\n   char *full_gstrip_suffix = gstrip_suffix;\n   char *arg;\n-  FILE *outf, *exportf;\n+  FILE *outf;\n+#ifdef COLLECT_EXPORT_LIST\n+  FILE *exportf;\n+#endif /* COLLECT_EXPORT_LIST */\n   char *ld_file_name;\n   char *collect_name;\n   char *collect_names;"}, {"sha": "035ca69c0d00fc52dfdadcc811cc03a3afe23006", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -1716,7 +1716,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \tif (TARGET_DEBUG_ADDR\t\t\t\t\t\t\\\n \t    && TREE_CODE_CLASS (TREE_CODE (DECL)) == 'd')\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n-\t    fprintf (stderr, \"Encode %s, public = %s\\n\",\t\t\\\n+\t    fprintf (stderr, \"Encode %s, public = %d\\n\",\t\t\\\n \t\t     IDENTIFIER_POINTER (DECL_NAME (DECL)),\t\t\\\n \t\t     TREE_PUBLIC (DECL));\t\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\"}, {"sha": "142d3bce2ccf24585c25aceec01c8c24a03d3607", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -313,7 +313,7 @@ asm_output_aligned_bss (FILE, DECL, NAME, SIZE, ALIGN)\n       register unsigned char *_limited_str = (unsigned char *) (STR);\t\\\n       register unsigned ch;\t\t\t\t\t\t\\\n       fprintf ((FILE), \"%s\\t\\\"\", STRING_ASM_OP);\t\t\t\\\n-      for (; ch = *_limited_str; _limited_str++)\t\t\t\\\n+      for (; (ch = *_limited_str); _limited_str++)\t\t\t\\\n         {\t\t\t\t\t\t\t\t\\\n \t  register int escape;\t\t\t\t\t\t\\\n \t  switch (escape = ESCAPES[ch])\t\t\t\t\t\\"}, {"sha": "fdbc310c42d4348ad4911408ee1c181634587839", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -2108,7 +2108,6 @@ prev_cc0_setter (insn)\n      rtx insn;\n {\n   rtx note = find_reg_note (insn, REG_CC_SETTER, NULL_RTX);\n-  rtx link;\n \n   if (note)\n     return XEXP (note, 0);"}, {"sha": "faa4640d14bcbfacfe8458d0f2648f2299636418", "filename": "gcc/explow.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -151,7 +151,6 @@ plus_constant_for_output_wide (x, c)\n      register rtx x;\n      register HOST_WIDE_INT c;\n {\n-  register RTX_CODE code = GET_CODE (x);\n   register enum machine_mode mode = GET_MODE (x);\n \n   if (GET_CODE (x) == LO_SUM)"}, {"sha": "5e513f69e71b30ba2ae4336b9c59b589411a7102", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -1446,7 +1446,6 @@ make_canonical (attr, exp)\n       /* Fall through to COND case since this is now a COND.  */\n \n     case COND:\n-    cond:\n       {\n \tint allsame = 1;\n \trtx defval;\n@@ -5770,7 +5769,6 @@ write_const_num_delay_slots ()\n   struct attr_desc *attr = find_attr (\"*num_delay_slots\", 0);\n   struct attr_value *av;\n   struct insn_ent *ie;\n-  int i;\n \n   if (attr)\n     {"}, {"sha": "5374786fe8fdf6d4c53e84d5364213e79d7c8378", "filename": "gcc/genopinit.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -142,7 +142,6 @@ gen_insn (insn)\n   int pindex;\n   int i;\n   char *np, *pp, *p, *q;\n-  struct obstack *obstack_ptr;\n \n   /* Don't mention instructions whose names are the null string.\n      They are in the machine description just to be recognized.  */\n@@ -336,8 +335,6 @@ main (argc, argv)\n      char **argv;\n {\n   rtx desc;\n-  rtx dummy;\n-  rtx *insn_ptr;\n   FILE *infile;\n   register int c;\n "}, {"sha": "474d1e1dbcb4cd6c37fb112f5e31dd3e5642cafe", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -1497,10 +1497,6 @@ __bb_exit_func (void)\n \t  if ((da_file = fopen (ptr->filename, \"r\")) != 0)\n \t    {\n \t      long n_counts = 0;\n-\t      unsigned char tmp;\n-\t      int i;\n-\t      int ret = 0;\n-\n \t      \n \t      if (__read_long (&n_counts, da_file, 8) != 0)\n \t\t{\n@@ -1516,9 +1512,6 @@ __bb_exit_func (void)\n \t\t  for (i = 0; i < n_counts; i++)\n \t\t    {\n \t\t      long v = 0;\n-\t\t      unsigned char tmp;\n-\t\t      int j;\n-\t\t      int ret = 0;\n \n \t\t      if (__read_long (&v, da_file, 8) != 0)\n \t\t\t{\n@@ -1883,7 +1876,6 @@ __bb_exit_trace_func ()\n {\n   FILE *file = fopen (\"bb.out\", \"a\");\n   struct bb_func *f;\n-  struct bb_edge *e;\n   struct bb *b;\n         \n   if (!file)"}, {"sha": "ffad9200833854a9ff58062de75a1774f35e0908", "filename": "gcc/optabs.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -247,7 +247,6 @@ static optab init_optab\tPROTO((enum rtx_code));\n static void init_libfuncs PROTO((optab, int, int, char *, int));\n static void init_integral_libfuncs PROTO((optab, char *, int));\n static void init_floating_libfuncs PROTO((optab, char *, int));\n-static void init_complex_libfuncs PROTO((optab, char *, int));\n \f\n /* Add a REG_EQUAL note to the last insn in SEQ.  TARGET is being set to\n    the result of operation CODE applied to OP0 (and OP1 if it is a binary\n@@ -1385,7 +1384,6 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t\t X/(a+ib) */\n \t      rtx divisor;\n \t      rtx real_t, imag_t;\n-\t      rtx lhs, rhs;\n \t      rtx temp1, temp2;\n \t      \n \t      /* Don't fetch these from memory more than once.  */\n@@ -1518,7 +1516,6 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       && (methods == OPTAB_LIB || methods == OPTAB_LIB_WIDEN))\n     {\n       rtx insns;\n-      rtx funexp = binoptab->handlers[(int) mode].libfunc;\n       rtx op1x = op1;\n       enum machine_mode op1_mode = mode;\n       rtx value;\n@@ -2014,7 +2011,6 @@ expand_unop (mode, unoptab, op0, target, unsignedp)\n   if (unoptab->handlers[(int) mode].libfunc)\n     {\n       rtx insns;\n-      rtx funexp = unoptab->handlers[(int) mode].libfunc;\n       rtx value;\n \n       start_sequence ();\n@@ -2324,7 +2320,6 @@ expand_complex_abs (mode, op0, target, unsignedp)\n   if (abs_optab->handlers[(int) mode].libfunc)\n     {\n       rtx insns;\n-      rtx funexp = abs_optab->handlers[(int) mode].libfunc;\n       rtx value;\n \n       start_sequence ();\n@@ -4062,27 +4057,18 @@ init_floating_libfuncs (optable, opname, suffix)\n   init_libfuncs (optable, SFmode, TFmode, opname, suffix);\n }\n \n-/* Initialize the libfunc fields of an entire group of entries in some\n-   optab which correspond to all complex floating modes.  The parameters\n-   have the same meaning as similarly named ones for the `init_libfuncs'\n-   routine.  (See above).  */\n-\n-static void\n-init_complex_libfuncs (optable, opname, suffix)\n-    register optab optable;\n-    register char *opname;\n-    register int suffix;\n-{\n-  init_libfuncs (optable, SCmode, TCmode, opname, suffix);\n-}\n \n /* Call this once to initialize the contents of the optabs\n    appropriately for the current target machine.  */\n \n void\n init_optabs ()\n {\n-  int i, j;\n+  int i;\n+#ifdef FIXUNS_TRUNC_LIKE_FIX_TRUNC\n+  int j;\n+#endif\n+\n   enum insn_code *p;\n \n   /* Start by initializing all tables to contain CODE_FOR_nothing.  */"}, {"sha": "d4b26f8d21b01bbf3028c133b482d9c66d8816f5", "filename": "gcc/profile.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -443,8 +443,6 @@ branch_prob (f, dump_file)\n      FILE *dump_file;\n {\n   int i, num_blocks;\n-  int dest;\n-  rtx insn;\n   struct adj_list *arcptr;\n   int num_arcs, changes, passes;\n   int total, prob;"}, {"sha": "10958d2b65009b167a74c828a275a2353c0a2d0c", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -246,7 +246,7 @@ static void record_asm_reg_life\t\tPROTO((rtx,stack, rtx *, char **,\n \t\t\t\t\t       int, int));\n static void record_reg_life_pat\t\tPROTO((rtx, HARD_REG_SET *,\n \t\t\t\t\t       HARD_REG_SET *, int));\n-static void get_asm_operand_length\tPROTO((rtx, int, int *, int *));\n+static void get_asm_operand_lengths\tPROTO((rtx, int, int *, int *));\n static void record_reg_life\t\tPROTO((rtx, int, stack));\n static void find_blocks\t\t\tPROTO((rtx));\n static int uses_reg_or_mem\t\tPROTO((rtx));\n@@ -370,7 +370,7 @@ reg_to_stack (first, file)\n   CLEAR_HARD_REG_SET (stackentry);\n \n    {\n-     static initialised;\n+     static int initialised;\n      if (!initialised)\n       {\n #if 0\n@@ -395,7 +395,7 @@ reg_to_stack (first, file)\n   {\n     register RTX_CODE prev_code = BARRIER;\n     register RTX_CODE code;\n-    register before_function_beg = 1;\n+    register int before_function_beg = 1;\n \n     max_uid = 0;\n     blocks = 0;\n@@ -1771,7 +1771,6 @@ emit_swap_insn (insn, regstack, reg)\n \n   if (i1set)\n     {\n-      rtx i2;\t\t\t/* the stack-reg insn prior to I1 */\n       rtx i1src = *get_true_reg (&SET_SRC (i1set));\n       rtx i1dest = *get_true_reg (&SET_DEST (i1set));\n \n@@ -2006,7 +2005,7 @@ compare_for_stack_reg (insn, regstack, pat)\n       && SET_DEST (PATTERN (cc0_user)) != pc_rtx\n       && GET_CODE (SET_SRC (PATTERN (cc0_user))) == IF_THEN_ELSE)\n     {\n-      rtx *dest, src_note;\n+      rtx *dest;\n       \n       dest = get_true_reg (&SET_DEST (PATTERN (cc0_user)));\n "}, {"sha": "d3b0f54f508048e75b58822ecab5a2c80aaa8d20", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -1967,7 +1967,6 @@ computed_jump_p (insn)\n   if (GET_CODE (insn) == JUMP_INSN)\n     {\n       rtx pat = PATTERN (insn);\n-      int computed_jump = 0;\n \n       if (GET_CODE (pat) == PARALLEL)\n \t{"}, {"sha": "5243961caa0e066762b8e39479a445053eb132a0", "filename": "gcc/sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -750,9 +750,9 @@ actual_hazard (unit, insn, clock, cost)\n       int instance = unit;\n       int best_cost = actual_hazard_this_instance (unit, instance, insn,\n \t\t\t\t\t\t   clock, cost);\n+#if MAX_MULTIPLICITY > 1\n       int this_cost;\n \n-#if MAX_MULTIPLICITY > 1\n       if (best_cost > cost)\n \t{\n \t  for (i = function_units[unit].multiplicity - 1; i > 0; i--)"}, {"sha": "c264e09a0b2feaa40acfe3b4ff76c5ab01896c39", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -4012,7 +4012,7 @@ add_case_node (low, high, label, duplicate)\n   q = &case_stack->data.case_stmt.case_list;\n   p = *q;\n \n-  while (r = *q)\n+  while ((r = *q))\n     {\n       p = r;\n \n@@ -4241,7 +4241,7 @@ all_cases_count (type, spareness)\n      tree type;\n      int *spareness;\n {\n-  HOST_WIDE_INT count, count_high = 0;\n+  HOST_WIDE_INT count;\n   *spareness = 0;\n \n   switch (TREE_CODE (type))\n@@ -4330,8 +4330,6 @@ mark_seen_cases (type, cases_seen, count, sparseness)\n      long count;\n      int sparseness;\n {\n-  long i;\n-\n   tree next_node_to_try = NULL_TREE;\n   long next_node_offset = 0;\n \n@@ -4459,9 +4457,11 @@ check_for_full_enumeration_handling (type)\n      tree type;\n {\n   register struct case_node *n;\n-  register struct case_node **l;\n   register tree chain;\n+#if 0  /* variable used by 'if 0'ed  code below. */\n+  register struct case_node **l;\n   int all_values = 1;\n+#endif\n \n   /* True iff the selector type is a numbered set mode.  */\n   int sparseness = 0;\n@@ -4475,7 +4475,6 @@ check_for_full_enumeration_handling (type)\n \n   /* The allocated size of cases_seen, in chars.  */\n   long bytes_needed;\n-  tree t;\n \n   if (! warn_switch)\n     return;"}, {"sha": "5c04ddcaf4f106cdecaf21ff68784dd4a6287a44", "filename": "gcc/tlink.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -26,6 +26,22 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"hash.h\"\n #include \"demangle.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n+\n #define MAX_ITERATIONS 17\n \n /* Obstack allocation and deallocation routines.  */"}, {"sha": "fb19010d58aad514f5cdc331041e571e6ad68366", "filename": "gcc/varasm.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69d4ca36f4ee168bb08c7c9c2a5878514661889e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=69d4ca36f4ee168bb08c7c9c2a5878514661889e", "patch": "@@ -1890,7 +1890,6 @@ immed_double_const (i0, i1, mode)\n      enum machine_mode mode;\n {\n   register rtx r;\n-  int in_current_obstack;\n \n   if (GET_MODE_CLASS (mode) == MODE_INT\n       || GET_MODE_CLASS (mode) == MODE_PARTIAL_INT)\n@@ -1999,7 +1998,6 @@ immed_real_const_1 (d, mode)\n {\n   union real_extract u;\n   register rtx r;\n-  int in_current_obstack;\n \n   /* Get the desired `double' value as a sequence of ints\n      since that is how they are stored in a CONST_DOUBLE.  */\n@@ -3537,7 +3535,6 @@ output_constant_pool (fnname, fndecl)\n \t  abort ();\n \t}\n \n-    done: ;\n     }\n \n #ifdef ASM_OUTPUT_POOL_EPILOGUE\n@@ -3723,7 +3720,6 @@ output_constant (exp, size)\n      register int size;\n {\n   register enum tree_code code = TREE_CODE (TREE_TYPE (exp));\n-  rtx x;\n \n   if (size == 0)\n     return;"}]}