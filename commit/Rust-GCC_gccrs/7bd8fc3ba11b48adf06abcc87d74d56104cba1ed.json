{"sha": "7bd8fc3ba11b48adf06abcc87d74d56104cba1ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkOGZjM2JhMTFiNDhhZGYwNmFiY2M4N2Q3NGQ1NjEwNGNiYTFlZA==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2012-10-15T11:20:02Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2012-10-15T11:20:02Z"}, "message": "* web.c (union_match_dups): Properly handle OP_INOUT match_dups.\n\nFrom-SVN: r192453", "tree": {"sha": "4bb1946929d0b4f58c34e16f1a365f4985dba9cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bb1946929d0b4f58c34e16f1a365f4985dba9cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bd8fc3ba11b48adf06abcc87d74d56104cba1ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd8fc3ba11b48adf06abcc87d74d56104cba1ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd8fc3ba11b48adf06abcc87d74d56104cba1ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd8fc3ba11b48adf06abcc87d74d56104cba1ed/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9506aecb3b05c1a9f1f04760fc5320acbfc283b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9506aecb3b05c1a9f1f04760fc5320acbfc283b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9506aecb3b05c1a9f1f04760fc5320acbfc283b1"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "790c69e485c68dfa756185374af7c2c3fd49b724", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd8fc3ba11b48adf06abcc87d74d56104cba1ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd8fc3ba11b48adf06abcc87d74d56104cba1ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bd8fc3ba11b48adf06abcc87d74d56104cba1ed", "patch": "@@ -1,3 +1,7 @@\n+2012-10-15  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* web.c (union_match_dups): Properly handle OP_INOUT match_dups.\n+\n 2012-10-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* expr.c (expand_expr_real_1) <VIEW_CONVERT_EXPR>: Do not unnecessarily"}, {"sha": "7b6e8c6208e584b5a4378d191f3e972eb6832b61", "filename": "gcc/web.c", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd8fc3ba11b48adf06abcc87d74d56104cba1ed/gcc%2Fweb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd8fc3ba11b48adf06abcc87d74d56104cba1ed/gcc%2Fweb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fweb.c?ref=7bd8fc3ba11b48adf06abcc87d74d56104cba1ed", "patch": "@@ -96,6 +96,7 @@ union_match_dups (rtx insn, struct web_entry *def_entry,\n   struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n   df_ref *use_link = DF_INSN_INFO_USES (insn_info);\n   df_ref *def_link = DF_INSN_INFO_DEFS (insn_info);\n+  struct web_entry *dup_entry;\n   int i;\n \n   extract_insn (insn);\n@@ -107,10 +108,24 @@ union_match_dups (rtx insn, struct web_entry *def_entry,\n       df_ref *ref, *dupref;\n       struct web_entry *entry;\n \n-      for (dupref = use_link; *dupref; dupref++)\n+      for (dup_entry = use_entry, dupref = use_link; *dupref; dupref++)\n \tif (DF_REF_LOC (*dupref) == recog_data.dup_loc[i])\n \t  break;\n \n+      if (*dupref == NULL && type == OP_INOUT)\n+\t{\n+\n+\t  for (dup_entry = def_entry, dupref = def_link; *dupref; dupref++)\n+\t    if (DF_REF_LOC (*dupref) == recog_data.dup_loc[i])\n+\t      break;\n+\t}\n+      /* ??? *DUPREF can still be zero, because when an operand matches\n+\t a memory, DF_REF_LOC (use_link[n]) points to the register part\n+\t of the address, whereas recog_data.dup_loc[m] points to the\n+\t entire memory ref, thus we fail to find the duplicate entry,\n+         even though it is there.\n+         Example: i686-pc-linux-gnu gcc.c-torture/compile/950607-1.c\n+\t\t  -O3 -fomit-frame-pointer -funroll-loops  */\n       if (*dupref == NULL\n \t  || DF_REF_REGNO (*dupref) < FIRST_PSEUDO_REGISTER)\n \tcontinue;\n@@ -121,7 +136,15 @@ union_match_dups (rtx insn, struct web_entry *def_entry,\n \tif (DF_REF_LOC (*ref) == recog_data.operand_loc[op])\n \t  break;\n \n-      (*fun) (use_entry + DF_REF_ID (*dupref), entry + DF_REF_ID (*ref));\n+      if (!*ref && type == OP_INOUT)\n+\t{\n+\t  for (ref = use_link, entry = use_entry; *ref; ref++)\n+\t    if (DF_REF_LOC (*ref) == recog_data.operand_loc[op])\n+\t      break;\n+\t}\n+\n+      gcc_assert (*ref);\n+      (*fun) (dup_entry + DF_REF_ID (*dupref), entry + DF_REF_ID (*ref));\n     }\n }\n "}]}