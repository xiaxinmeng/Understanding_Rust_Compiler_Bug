{"sha": "ea8bce02c651e70da4328a57f05004991fa0d404", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE4YmNlMDJjNjUxZTcwZGE0MzI4YTU3ZjA1MDA0OTkxZmEwZDQwNA==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2008-09-14T17:58:14Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2008-09-14T17:58:14Z"}, "message": "* tree-call-cdce.c (check_target_format): Accept Motorola formats.\n\nFrom-SVN: r140363", "tree": {"sha": "982e3bbde32206f141b3f32cc1f4c5de97fb7af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/982e3bbde32206f141b3f32cc1f4c5de97fb7af5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea8bce02c651e70da4328a57f05004991fa0d404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea8bce02c651e70da4328a57f05004991fa0d404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea8bce02c651e70da4328a57f05004991fa0d404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea8bce02c651e70da4328a57f05004991fa0d404/comments", "author": null, "committer": null, "parents": [{"sha": "6a78eaa3e613a48336cdfc9f153bc05be14d436e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a78eaa3e613a48336cdfc9f153bc05be14d436e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a78eaa3e613a48336cdfc9f153bc05be14d436e"}], "stats": {"total": 57, "additions": 32, "deletions": 25}, "files": [{"sha": "eeab0fea9977b57a59d795cd8c593e7228a4ee0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8bce02c651e70da4328a57f05004991fa0d404/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8bce02c651e70da4328a57f05004991fa0d404/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea8bce02c651e70da4328a57f05004991fa0d404", "patch": "@@ -1,3 +1,7 @@\n+2008-09-14  Andreas Schwab  <schwab@suse.de>\n+\n+\t* tree-call-cdce.c (check_target_format): Accept Motorola formats.\n+\n 2008-09-14  Jan Hubicka  <jh@suse.cz>\n \n \t* invoke.texi (-fconserve-stack): Document.\n@@ -133,15 +137,15 @@\n 2008-09-12  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-opt/37377\n-\t\n+\n \t* ira-build.c (common_loop_tree_node_dominator): Remove.\n \t(copy_live_ranges_to_removed_store_destinations): New function.\n \t(regno_top_level_allocno_map): Move to top level from ...\n \t(ira_flattening): ... here.  Use\n \tcopy_live_ranges_to_removed_store_destinations.\n \n \t* ira-emit.c (generate_edge_moves): Fix a comment.\n-\t\n+\n 2008-09-12  Anatoly Sokolov  <aesok@post.ru>\n \n \tPR target/37466\n@@ -445,7 +449,7 @@\n \tPR tree-optimization/37385\n \t* tree-vect-transform.c (vect_create_data_ref_ptr): Add a new argument,\n \tand use it as a vector type if not NULL.\n-\t(vectorizable_store): Call vect_create_data_ref_ptr with the type of \n+\t(vectorizable_store): Call vect_create_data_ref_ptr with the type of\n \tvectorized rhs.\n \t(vect_setup_realignment): Call vect_create_data_ref_ptr with additional\n \targument.\n@@ -473,7 +477,7 @@\n \n 2008-09-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n-\t* doc/invoke.texi (ARM Options): Correct errors in discussion \n+\t* doc/invoke.texi (ARM Options): Correct errors in discussion\n \tof -mfloat-abi, -mhard-float, and -msoft-float.\n \n 2008-09-09  Jakub Jelinek  <jakub@redhat.com>\n@@ -527,20 +531,20 @@\n \t(block_before_loop): New.\n \t* tree-data-ref.c (dr_analyze_indices): Update uses of instantiate_scev.\n \t* graphite.c (block_before_scop): New.\n-\t(loop_affine_expr, stmt_simple_for_scop_p, harmful_stmt_in_bb): Pass a \n+\t(loop_affine_expr, stmt_simple_for_scop_p, harmful_stmt_in_bb): Pass a\n \tbasic block, not a loop for determining the parameters.\n \t(scopdet_edge_info, build_scops_1): Do not pass outermost loop in the\n \tscop.\n \t(idx_record_params, find_params_in_bb, find_scop_parameters,\n-\tbuild_loop_iteration_domains, add_conditions_to_domain): Update calls \n+\tbuild_loop_iteration_domains, add_conditions_to_domain): Update calls\n \tto instantiate_scev.\n \n \t* Makefile.in (cfgloopmanip.o): Add missing dependency on TREE_FLOW_H.\n \n 2008-09-09  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-opt/37333\n-\t\n+\n \t* ira-build.c (ira_create_allocno): Setup frequency to 0.\n \n \t* ira-color.c (update_conflict_hard_regno_costs): Remove assert.\n@@ -586,7 +590,7 @@\n \tPR rtl-optimization/37360\n \t* haifa-sched.c (max_issue): Do not assert that we never issue more\n \tinsns than issue_rate.  Add comment.\n-\t\n+\n 2008-09-09  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (verify_types_in_gimple_op): Remove.\n@@ -862,13 +866,13 @@\n \t(move_operand): Disallow sub-word modes for the constant pool.\n \t* config/xtensa/xtensa.c (TARGET_SECONDARY_RELOAD): Define.\n \t(xtensa_secondary_reload_class): Replace with....\n-\t(xtensa_secondary_reload): this function.  Remove SIGN_EXTEND check. \n+\t(xtensa_secondary_reload): this function.  Remove SIGN_EXTEND check.\n \tSet icode for sub-word reloads from the constant pool.\n \t* config/xtensa/xtensa.h (SECONDARY_INPUT_RELOAD_CLASS): Delete.\n \t(SECONDARY_OUTPUT_RELOAD_CLASS): Delete.\n \t* config/xtensa/xtensa.md (reload<mode>_literal): New.\n \t* config/xtensa/xtensa-protos.h: Update prototypes.\n-\t\n+\n 2008-09-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/mips/mips.h (enum reg_class): Add FRAME_REGS.\n@@ -913,9 +917,9 @@\n \t* ira-build.c (print_copy, print_copies, ira_debug_copy,\n \tira_debug_copies): New.\n \t(ira_bulid): Call print_copies.\n-\t\n+\n \t* doc/tm.texi (IRA_COVER_CLASSES): Fix the description.\n-\t\n+\n 2008-09-04  Samuel Tardieu  <sam@rfc1149.net>\n \n \tPR target/32783\n@@ -1054,7 +1058,7 @@\n \n \t* config/bfin/bfin.c (bfin_function_ok_for_sibcall): Restore a null\n \tpointer check lost in the recent no-unit-at-a-time patch.\n-\t\n+\n 2008-09-04  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/37343\n@@ -1142,11 +1146,11 @@\n \t(remove_unnecessary_allocnos): Use all_allocnos.\n \t(check_allocno_creation): Check that allocnos are in the\n \tcorresponding bitmap all_allocnos.\n-\t\n+\n 2008-09-03  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-opt/37243\n-\t\n+\n \t* ira-conflicts.c (REG_SUBREG_P, go_through_subreg): New.\n \t(process_regs_for_copy): Process subregs.  Refine check when cost\n \tis taken into account in ira-costs.c.\n@@ -1159,7 +1163,7 @@\n \t(update_conflict_hard_regno_costs): New function.\n \t(assign_hard_reg): Use it.\n \t(ira_color): Allocate and free conflict_allocno_vec.\n- \n+\n 2008-09-03  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-opt/37296\n@@ -1401,7 +1405,7 @@\n \t(graphite.o): Add rule.\n \t* gimple.h (gimple_vec): ... here.\n \t* tree-cfg.c (print_loops): Start printing at ENTRY_BLOCK_PTR.\n-\t* passes.c (init_optimization_passes): Schedule \n+\t* passes.c (init_optimization_passes): Schedule\n \tpass_graphite_transforms.\n \n 2008-09-02  Samuel Tardieu  <sam@rfc1149.net>\n@@ -6318,7 +6322,7 @@\n \tPR ada/36554\n \t* dwarf2out.c (is_subrange_type): Deal with BOOLEAN_TYPE.\n \n-2008-07-30  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2008-07-30  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \tPR 36974\n \t* final.c (call_from_call_insn): Handle COND_EXEC.\n@@ -6530,7 +6534,7 @@\n \t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Add clause for\n \tvector modes.\n \n-2008-07-30  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2008-07-30  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \t* final.c (call_from_call_insn): New.\n \t(final_scan_insn): Call assemble_external on FUNCTION_DECLs.\n@@ -7646,7 +7650,7 @@\n \t(TARGET_OPTION_PRINT): Ditto.\n \t(TARGET_CAN_INLINE_P): Ditto.\n \n-2008-07-22  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2008-07-22  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \t* c-typeck.c (build_external_ref): Don't call assemble_external.\n \t* final.c (output_operand): Call assemble_external.\n@@ -7667,7 +7671,7 @@\n \thighest magnitude if this is still less or equal to the true\n \tquotient in magnitude.\n \n-2008-07-21  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2008-07-21  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \t* Makefile.in: Replace toplev.h with TOPLEV_H.\n \t* c-decl.c (merge_decls): Don't set DECL_IN_SYSTEM_HEADER.\n@@ -7969,7 +7973,7 @@\n \t(m32c_legitimate_address_p): Handle \"++rii\" addresses created by\n \tm32c_legitimize_reload_address.\n \n-2007-07-16  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2007-07-16  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \t* c-decl.c (merge_decls): Keep DECL_SOURCE_LOCATION and\n \tDECL_IN_SYSTEM_HEADER in sync.\n@@ -8059,7 +8063,7 @@\n \n \t* emit-rtl.c (set_mem_attributes_minus_bitpos): Improve comment.\n \n-2007-07-14  Rafael \ufffdvila de Esp\u00edndola  <espindola@google.com>\n+2007-07-14  Rafael \u00c1vila de Esp\u00edndola  <espindola@google.com>\n \n \t* c-decl.c (diagnose_mismatched_decls): Don't warn if TREE_NO_WARNING\n \tis set."}, {"sha": "301fe253b9af78707b75d013f345b8299792f7a1", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8bce02c651e70da4328a57f05004991fa0d404/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8bce02c651e70da4328a57f05004991fa0d404/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=ea8bce02c651e70da4328a57f05004991fa0d404", "patch": "@@ -141,9 +141,11 @@ check_target_format (tree arg)\n   mode = TYPE_MODE (type);\n   rfmt = REAL_MODE_FORMAT (mode);\n   if ((mode == SFmode\n-       && (rfmt == &ieee_single_format || rfmt == &mips_single_format))\n+       && (rfmt == &ieee_single_format || rfmt == &mips_single_format\n+\t   || rfmt == &motorola_single_format))\n       || (mode == DFmode\n-\t  && (rfmt == &ieee_double_format || rfmt == &mips_double_format))\n+\t  && (rfmt == &ieee_double_format || rfmt == &mips_double_format\n+\t      || rfmt == &motorola_double_format))\n       /* For long double, we can not really check XFmode\n          which is only defined on intel platforms.  \n          Candidate pre-selection using builtin function \n@@ -152,6 +154,7 @@ check_target_format (tree arg)\n       || (mode != SFmode && mode != DFmode \n           && (rfmt == &ieee_quad_format\n \t      || rfmt == &mips_quad_format\n+\t      || rfmt == &ieee_extended_motorola_format\n               || rfmt == &ieee_extended_intel_96_format \n               || rfmt == &ieee_extended_intel_128_format \n               || rfmt == &ieee_extended_intel_96_round_53_format)))"}]}