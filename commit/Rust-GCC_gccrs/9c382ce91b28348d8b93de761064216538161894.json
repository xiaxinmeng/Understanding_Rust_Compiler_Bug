{"sha": "9c382ce91b28348d8b93de761064216538161894", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMzODJjZTkxYjI4MzQ4ZDhiOTNkZTc2MTA2NDIxNjUzODE2MTg5NA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T04:29:12Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T04:29:12Z"}, "message": "tree-scalar-evolution.c (instantiate_scev_convert): New.\n\n2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-scalar-evolution.c (instantiate_scev_convert): New.\n\t(instantiate_scev_1): Move code in instantiate_scev_convert.\n\nFrom-SVN: r154534", "tree": {"sha": "e1a87640a15227a27c0393a6c8951e9ac3edf136", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1a87640a15227a27c0393a6c8951e9ac3edf136"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c382ce91b28348d8b93de761064216538161894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c382ce91b28348d8b93de761064216538161894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c382ce91b28348d8b93de761064216538161894", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c382ce91b28348d8b93de761064216538161894/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15fda3174a0269637454efc231e541edc1794b24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15fda3174a0269637454efc231e541edc1794b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15fda3174a0269637454efc231e541edc1794b24"}], "stats": {"total": 81, "additions": 56, "deletions": 25}, "files": [{"sha": "144236b14017f5fd7c927fe257fe9f39e94dba6a", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c382ce91b28348d8b93de761064216538161894/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c382ce91b28348d8b93de761064216538161894/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=9c382ce91b28348d8b93de761064216538161894", "patch": "@@ -1,3 +1,8 @@\n+2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-scalar-evolution.c (instantiate_scev_convert): New.\n+\t(instantiate_scev_1): Move code in instantiate_scev_convert.\n+\n 2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-scalar-evolution.c (instantiate_scev_binary): New."}, {"sha": "3a50f1e499d11fb751f6644a00b9ca19cac7cdae", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 51, "deletions": 25, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c382ce91b28348d8b93de761064216538161894/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c382ce91b28348d8b93de761064216538161894/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=9c382ce91b28348d8b93de761064216538161894", "patch": "@@ -2252,7 +2252,53 @@ instantiate_scev_binary (basic_block instantiate_below,\n }\n \n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n-   and EVOLUTION_LOOP, that were left under a symbolic form.  \n+   and EVOLUTION_LOOP, that were left under a symbolic form.\n+\n+   \"CHREC\" that stands for a convert expression \"(TYPE) OP\" is to be\n+   instantiated.\n+\n+   CACHE is the cache of already instantiated values.\n+\n+   FOLD_CONVERSIONS should be set to true when the conversions that\n+   may wrap in signed/pointer type are folded, as long as the value of\n+   the chrec is preserved.\n+\n+   SIZE_EXPR is used for computing the size of the expression to be\n+   instantiated, and to stop if it exceeds some limit.  */\n+\n+static tree\n+instantiate_scev_convert (basic_block instantiate_below,\n+\t\t\t  struct loop *evolution_loop, tree chrec,\n+\t\t\t  tree type, tree op,\n+\t\t\t  bool fold_conversions, htab_t cache, int size_expr)\n+{\n+  tree op0 = instantiate_scev_1 (instantiate_below, evolution_loop, op,\n+\t\t\t\t fold_conversions, cache, size_expr);\n+\n+  if (op0 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  if (fold_conversions)\n+    {\n+      tree tmp = chrec_convert_aggressive (type, op0);\n+      if (tmp)\n+\treturn tmp;\n+    }\n+\n+  if (chrec && op0 == op)\n+    return chrec;\n+\n+  /* If we used chrec_convert_aggressive, we can no longer assume that\n+     signed chrecs do not overflow, as chrec_convert does, so avoid\n+     calling it in that case.  */\n+  if (fold_conversions)\n+    return fold_convert (type, op0);\n+\n+  return chrec_convert (type, op0, NULL);\n+}\n+\n+/* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n+   and EVOLUTION_LOOP, that were left under a symbolic form.\n \n    CHREC is the scalar evolution to instantiate.\n \n@@ -2264,7 +2310,7 @@ instantiate_scev_binary (basic_block instantiate_below,\n \n    SIZE_EXPR is used for computing the size of the expression to be\n    instantiated, and to stop if it exceeds some limit.  */\n-  \n+\n static tree\n instantiate_scev_1 (basic_block instantiate_below,\n \t\t    struct loop *evolution_loop, tree chrec,\n@@ -2316,29 +2362,9 @@ instantiate_scev_1 (basic_block instantiate_below,\n \t\t\t\t      fold_conversions, cache, size_expr);\n \n     CASE_CONVERT:\n-      op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tTREE_OPERAND (chrec, 0),\n-\t\t\t\tfold_conversions, cache, size_expr);\n-      if (op0 == chrec_dont_know)\n-        return chrec_dont_know;\n-\n-      if (fold_conversions)\n-\t{\n-\t  tree tmp = chrec_convert_aggressive (TREE_TYPE (chrec), op0);\n-\t  if (tmp)\n-\t    return tmp;\n-\t}\n-\n-      if (op0 == TREE_OPERAND (chrec, 0))\n-\treturn chrec;\n-\n-      /* If we used chrec_convert_aggressive, we can no longer assume that\n-\t signed chrecs do not overflow, as chrec_convert does, so avoid\n-         calling it in that case.  */\n-      if (fold_conversions)\n-\treturn fold_convert (TREE_TYPE (chrec), op0);\n-\n-      return chrec_convert (TREE_TYPE (chrec), op0, NULL);\n+      return instantiate_scev_convert (instantiate_below, evolution_loop, chrec,\n+\t\t\t\t       TREE_TYPE (chrec), TREE_OPERAND (chrec, 0),\n+\t\t\t\t       fold_conversions, cache, size_expr);\n \n     case BIT_NOT_EXPR:\n       /* Handle ~X as -1 - X.  */"}]}