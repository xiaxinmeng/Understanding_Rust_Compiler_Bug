{"sha": "bef84347b46063152483e44d53f2301f82eeaa85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVmODQzNDdiNDYwNjMxNTI0ODNlNDRkNTNmMjMwMWY4MmVlYWE4NQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-01-18T09:37:00Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "1999-01-18T09:37:00Z"}, "message": "[multiple changes]\n\n1999-01-18  Vladimir N. Makarov  <vmakarov@cygnus.com>\n\t*  invoke.texi (-mcpu=740, -mcpu=750): New options.\n        (-m(no-)multiple, -m(no-)string): Describe cases for PPC740 &\n\tPPC750.\n1999-01-18  Michael Meissner  <meissner@cygnus.com>\n\t* rs6000.h ({ASM,CPP}_CPU_SPEC): Add support for all machines\n\tsupported with -mcpu=xxx.\n\t(processor_type): Add PROCESSOR_PPC750.\n\t(ADJUST_PRIORITY): Call rs6000_adjust_priority.\n\t(RTX_COSTS): Supply costs for 750 multiply/divide operations.\n\t(rs6000_adjust_priority): Add declaration.\n\t* rs6000.c (rs6000_override_options): -mcpu={750,740} now sets the\n\tprocessor type as 750, not 603.  Allow -mmultiple and -mstring on\n\tlittle endian 750 systems.\n\t(rs6000_adjust_priority): Stub for now.\n\t(get_issue_rate): The PowerPC 750 can issue 2 instructions/cycle.\n\t* rs6000.md (function/cpu attributes): Add initial ppc750 support.\n\t* sysv4.h (STRICT_ALIGNMENT): Don't force strict alignment if\n\tlittle endian.\n\t(CC1_SPEC): Pass -mstrict-align if little endian, and not\n\toverridden.\n\t(CC1_ENDIAN_{LITTLE,BIG,DEFAULT}_SPEC): Endian specific configs.\n\t(SUBTARGET_EXTRA_SPECS): Add cc1 endian specs.\n\t* {sysv4,eabi}le.h (CC1_ENDIAN_DEFAULT_SPEC): Override, default is\n\tlittle endian.\n\t* t-ppcgas (MULTILIB_*): Delete obsolete Solaris multilibs.\n\nFrom-SVN: r24746", "tree": {"sha": "fa361334ccb9a5679a59115e06e6f4304ebd3377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa361334ccb9a5679a59115e06e6f4304ebd3377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bef84347b46063152483e44d53f2301f82eeaa85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef84347b46063152483e44d53f2301f82eeaa85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef84347b46063152483e44d53f2301f82eeaa85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef84347b46063152483e44d53f2301f82eeaa85/comments", "author": null, "committer": null, "parents": [{"sha": "aa7ecb4aa55e20cb0f60061731ab7e9df22e5bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7ecb4aa55e20cb0f60061731ab7e9df22e5bcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa7ecb4aa55e20cb0f60061731ab7e9df22e5bcc"}], "stats": {"total": 269, "additions": 215, "deletions": 54}, "files": [{"sha": "2072e4d5f4ff183e7374690df46addb8c1752d38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bef84347b46063152483e44d53f2301f82eeaa85", "patch": "@@ -1,3 +1,38 @@\n+1999-01-18  Vladimir N. Makarov  <vmakarov@cygnus.com>\n+\n+\t*  invoke.texi (-mcpu=740, -mcpu=750): New options.\n+        (-m(no-)multiple, -m(no-)string): Describe cases for PPC740 &\n+\tPPC750.\n+\n+1999-01-18  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* rs6000.h ({ASM,CPP}_CPU_SPEC): Add support for all machines\n+\tsupported with -mcpu=xxx.\n+\t(processor_type): Add PROCESSOR_PPC750.\n+\t(ADJUST_PRIORITY): Call rs6000_adjust_priority.\n+\t(RTX_COSTS): Supply costs for 750 multiply/divide operations.\n+\t(rs6000_adjust_priority): Add declaration.\n+\t\n+\t* rs6000.c (rs6000_override_options): -mcpu={750,740} now sets the\n+\tprocessor type as 750, not 603.  Allow -mmultiple and -mstring on\n+\tlittle endian 750 systems.\n+\t(rs6000_adjust_priority): Stub for now.\n+\t(get_issue_rate): The PowerPC 750 can issue 2 instructions/cycle.\n+\n+\t* rs6000.md (function/cpu attributes): Add initial ppc750 support.\n+\n+\t* sysv4.h (STRICT_ALIGNMENT): Don't force strict alignment if\n+\tlittle endian.\n+\t(CC1_SPEC): Pass -mstrict-align if little endian, and not\n+\toverridden.\n+\t(CC1_ENDIAN_{LITTLE,BIG,DEFAULT}_SPEC): Endian specific configs.\n+\t(SUBTARGET_EXTRA_SPECS): Add cc1 endian specs.\n+\n+\t* {sysv4,eabi}le.h (CC1_ENDIAN_DEFAULT_SPEC): Override, default is\n+\tlittle endian.\n+\n+\t* t-ppcgas (MULTILIB_*): Delete obsolete Solaris multilibs.\n+\n Mon Jan 18 12:03:08 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n \n \t* config/mips/mips.md (div_trap): Split div_trap_mips16"}, {"sha": "97e2b7c6e8538a97a83cb00b97e8c905306c0c40", "filename": "gcc/config/rs6000/eabile.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Feabile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Feabile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabile.h?ref=bef84347b46063152483e44d53f2301f82eeaa85", "patch": "@@ -28,6 +28,9 @@ Boston, MA 02111-1307, USA.  */\n #undef\tCPP_ENDIAN_DEFAULT_SPEC\n #define\tCPP_ENDIAN_DEFAULT_SPEC \"%(cpp_endian_little)\"\n \n+#undef\tCC1_ENDIAN_DEFAULT_SPEC\n+#define\tCC1_ENDIAN_DEFAULT_SPEC \"%(cc1_endian_little)\"\n+\n #undef\tLINK_TARGET_SPEC\n #define\tLINK_TARGET_SPEC \"\\\n %{mbig: -oformat elf32-powerpc } %{mbig-endian: -oformat elf32-powerpc } \\"}, {"sha": "ab5ac2e6bb441b3cf94272da52f10a9ae5e9d6f6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=bef84347b46063152483e44d53f2301f82eeaa85", "patch": "@@ -234,6 +234,12 @@ rs6000_override_options (default_cpu)\n \t {\"620\", PROCESSOR_PPC620,\n \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | MASK_PPC_GPOPT},\n+\t {\"740\", PROCESSOR_PPC750,\n+ \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+ \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n+\t {\"750\", PROCESSOR_PPC750,\n+ \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n+ \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"801\", PROCESSOR_MPCCORE,\n \t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64},\n@@ -297,9 +303,12 @@ rs6000_override_options (default_cpu)\n   if (TARGET_STRING_SET)\n     target_flags = (target_flags & ~MASK_STRING) | string;\n \n-  /* Don't allow -mmultiple or -mstring on little endian systems, because the\n-     hardware doesn't support the instructions used in little endian mode */\n-  if (!BYTES_BIG_ENDIAN)\n+  /* Don't allow -mmultiple or -mstring on little endian systems unless the cpu\n+     is a 750, because the hardware doesn't support the instructions used in\n+     little endian mode, and causes an alignment trap.  The 750 does not cause\n+     an alignment trap (except when the target is unaligned).  */\n+\n+  if (!BYTES_BIG_ENDIAN && rs6000_cpu != PROCESSOR_PPC750)\n     {\n       if (TARGET_MULTIPLE)\n \t{\n@@ -5119,6 +5128,48 @@ rs6000_adjust_cost (insn, link, dep_insn, cost)\n   return cost;\n }\n \n+/* A C statement (sans semicolon) to update the integer scheduling priority\n+   INSN_PRIORITY (INSN).  Reduce the priority to execute the INSN earlier,\n+   increase the priority to execute INSN later.  Do not define this macro if\n+   you do not need to adjust the scheduling priorities of insns.  */\n+\n+int\n+rs6000_adjust_priority (insn, priority)\n+     rtx insn;\n+     int priority;\n+{\n+  /* On machines (like the 750) which have asymetric integer units, where one\n+     integer unit can do multiply and divides and the other can't, reduce the\n+     priority of multiply/divide so it is scheduled before other integer\n+     operationss.  */\n+\n+#if 0\n+  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+    return priority;\n+\n+  if (GET_CODE (PATTERN (insn)) == USE)\n+    return priority;\n+\n+  switch (rs6000_cpu_attr) {\n+  case CPU_PPC750:\n+    switch (get_attr_type (insn))\n+      {\n+      default:\n+\tbreak;\n+\n+      case TYPE_IMUL:\n+      case TYPE_IDIV:\n+\tfprintf (stderr, \"priority was %#x (%d) before adjustment\\n\", priority, priority);\n+\tif (priority >= 0 && priority < 0x01000000)\n+\t  priority >>= 3;\n+\tbreak;\n+      }\n+  }\n+#endif\n+\n+  return priority;\n+}\n+\n /* Return how many instructions the machine can issue per cycle */\n int get_issue_rate()\n {\n@@ -5131,6 +5182,8 @@ int get_issue_rate()\n     return 3;       /* ? */\n   case CPU_PPC603:\n     return 2; \n+  case CPU_PPC750:\n+    return 2; \n   case CPU_PPC604:\n     return 4;\n   case CPU_PPC604E:"}, {"sha": "e6810f10686fd06d05c4b152ca3656b33aea4417", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=bef84347b46063152483e44d53f2301f82eeaa85", "patch": "@@ -81,6 +81,9 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=604: -D_ARCH_PPC} \\\n %{mcpu=604e: -D_ARCH_PPC} \\\n %{mcpu=620: -D_ARCH_PPC} \\\n+%{mcpu=740: -D_ARCH_PPC} \\\n+%{mcpu=750: -D_ARCH_PPC} \\\n+%{mcpu=801: -D_ARCH_PPC} \\\n %{mcpu=821: -D_ARCH_PPC} \\\n %{mcpu=823: -D_ARCH_PPC} \\\n %{mcpu=860: -D_ARCH_PPC}\"\n@@ -134,6 +137,9 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=604: -mppc} \\\n %{mcpu=604e: -mppc} \\\n %{mcpu=620: -mppc} \\\n+%{mcpu=740: -mppc} \\\n+%{mcpu=750: -mppc} \\\n+%{mcpu=801: -mppc} \\\n %{mcpu=821: -mppc} \\\n %{mcpu=823: -mppc} \\\n %{mcpu=860: -mppc}\"\n@@ -391,15 +397,18 @@ extern int target_flags;\n \n /* Processor type.  Order must match cpu attribute in MD file.  */\n enum processor_type\n- {PROCESSOR_RIOS1,\n-  PROCESSOR_RIOS2,\n-  PROCESSOR_MPCCORE,\n-  PROCESSOR_PPC403,\n-  PROCESSOR_PPC601,\n-  PROCESSOR_PPC603,\n-  PROCESSOR_PPC604,\n-  PROCESSOR_PPC604e,\n-  PROCESSOR_PPC620};\n+ {\n+   PROCESSOR_RIOS1,\n+   PROCESSOR_RIOS2,\n+   PROCESSOR_MPCCORE,\n+   PROCESSOR_PPC403,\n+   PROCESSOR_PPC601,\n+   PROCESSOR_PPC603,\n+   PROCESSOR_PPC604,\n+   PROCESSOR_PPC604e,\n+   PROCESSOR_PPC620,\n+   PROCESSOR_PPC750\n+};\n \n extern enum processor_type rs6000_cpu;\n \n@@ -855,6 +864,14 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n #define ADJUST_COST(INSN,LINK,DEP_INSN,COST)\t\t\t\t\\\n   (COST) = rs6000_adjust_cost (INSN,LINK,DEP_INSN,COST)\n \n+/* A C statement (sans semicolon) to update the integer scheduling priority\n+   INSN_PRIORITY (INSN).  Reduce the priority to execute the INSN earlier,\n+   increase the priority to execute INSN later.  Do not define this macro if\n+   you do not need to adjust the scheduling priorities of insns.  */\n+\n+#define ADJUST_PRIORITY(INSN)\t\t\t\t\t\t\\\n+  INSN_PRIORITY (INSN) = rs6000_adjust_priority (INSN, INSN_PRIORITY (INSN))\n+\n /* Define this macro to change register usage conditional on target flags.\n    Set MQ register fixed (already call_used) if not POWER architecture\n    (RIOS1, RIOS2, RSC, and PPC601) so that it will not be allocated.\n@@ -2280,6 +2297,7 @@ do {                                                                    \\\n       case PROCESSOR_PPC601:\t\t\t\t\t\t\\\n         return COSTS_N_INSNS (5);\t\t\t\t\t\\\n       case PROCESSOR_PPC603:\t\t\t\t\t\t\\\n+      case PROCESSOR_PPC750:\t\t\t\t\t\t\\\n         return (GET_CODE (XEXP (X, 1)) != CONST_INT\t\t\t\\\n \t\t? COSTS_N_INSNS (5)\t\t\t\t\t\\\n \t\t: INTVAL (XEXP (X, 1)) >= -256 && INTVAL (XEXP (X, 1)) <= 255 \\\n@@ -2315,6 +2333,8 @@ do {                                                                    \\\n       case PROCESSOR_PPC604e:\t\t\t\t\t\t\\\n       case PROCESSOR_PPC620:\t\t\t\t\t\t\\\n \treturn COSTS_N_INSNS (20);\t\t\t\t\t\\\n+      case PROCESSOR_PPC750:\t\t\t\t\t\t\\\n+        return COSTS_N_INSNS (19);\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   case FFS:\t\t\t\t\t\t\t\t\\\n     return COSTS_N_INSNS (4);\t\t\t\t\t\t\\\n@@ -3306,6 +3326,7 @@ extern void output_ascii ();\n extern void rs6000_gen_section_name ();\n extern void output_function_profiler ();\n extern int rs6000_adjust_cost ();\n+extern int rs6000_adjust_priority ();\n extern void rs6000_trampoline_template ();\n extern int rs6000_trampoline_size ();\n extern void rs6000_initialize_trampoline ();"}, {"sha": "200228aa8e828cb49c4cb3eecae332dae5d582df", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=bef84347b46063152483e44d53f2301f82eeaa85", "patch": "@@ -40,7 +40,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620\"\n+(define_attr \"cpu\" \"rios1,rios2,mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n ; (define_function_unit NAME MULTIPLICITY SIMULTANEITY\n@@ -50,17 +50,17 @@\n ; (POWER and 601 use Integer Unit)\n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"load\")\n-       (eq_attr \"cpu\" \"mpccore,ppc603,ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"mpccore,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n   2 1)\n \n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"store,fpstore\")\n-       (eq_attr \"cpu\" \"mpccore,ppc603,ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"mpccore,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n   1 1)\n \n (define_function_unit \"lsu\" 1 0\n   (and (eq_attr \"type\" \"fpload\")\n-       (eq_attr \"cpu\" \"mpccore,ppc603\"))\n+       (eq_attr \"cpu\" \"mpccore,ppc603,ppc750\"))\n   2 1)\n \n (define_function_unit \"lsu\" 1 0\n@@ -204,6 +204,31 @@\n        (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n   20 19)\n \n+; PPC750 has two integer units: a primary one which can perform all\n+; operations and a secondary one which is fed in lock step with the first\n+; and can perform \"simple\" integer operations.  \n+; To catch this we define a 'dummy' imuldiv-unit that is also needed\n+; for the complex insns. \n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"integer\")\n+       (eq_attr \"cpu\" \"ppc750\"))\n+  1 1)\n+\n+(define_function_unit \"iu2\" 2 0\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppc750\"))\n+  4 2)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppc750\"))\n+  4 2)\n+\n+(define_function_unit \"imuldiv\" 1 0\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppc750\"))\n+  19 19)\n+\n ; compare is done on integer unit, but feeds insns which\n ; execute on the branch unit.\n (define_function_unit \"iu\" 1 0   \n@@ -218,7 +243,7 @@\n \n (define_function_unit \"iu\" 1 0\n   (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n   3 1)\n \n (define_function_unit \"iu2\" 2 0   \n@@ -228,7 +253,7 @@\n \n (define_function_unit \"iu2\" 2 0\n   (and (eq_attr \"type\" \"compare,delayed_compare\")\n-       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc604,ppc604e,ppc620,ppc750\"))\n   1 1)\n \n ; fp compare uses fp unit\n@@ -255,7 +280,7 @@\n ; fp compare uses fp unit\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fpcompare\")\n-       (eq_attr \"cpu\" \"ppc601,ppc603,ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n   5 1)\n \n (define_function_unit \"fpu\" 1 0\n@@ -270,7 +295,7 @@\n \n (define_function_unit \"bpu\" 1 0\n   (and (eq_attr \"type\" \"mtjmpr\")\n-       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"mpccore,ppc403,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n   4 1)\n \n ; all jumps/branches are executing on the bpu, in 1 cycle, for all machines.\n@@ -300,7 +325,7 @@\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"fp\")\n-       (eq_attr \"cpu\" \"ppc603,ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc603,ppc604,ppc604e,ppc620,ppc750\"))\n   3 1)\n \n (define_function_unit \"fpu\" 1 0\n@@ -316,7 +341,7 @@\n ; is this true?\n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"dmul\")\n-       (eq_attr \"cpu\" \"ppc603\"))\n+       (eq_attr \"cpu\" \"ppc603,ppc750\"))\n   4 2)\n \n (define_function_unit \"fpu\" 1 0\n@@ -351,7 +376,7 @@\n \n (define_function_unit \"fpu\" 1 0\n   (and (eq_attr \"type\" \"ddiv\")\n-       (eq_attr \"cpu\" \"ppc601,ppc604,ppc604e,ppc620\"))\n+       (eq_attr \"cpu\" \"ppc601,ppc604,ppc604e,ppc620,ppc750\"))\n   31 31)\n \n (define_function_unit \"fpu\" 1 0"}, {"sha": "2113da3350d1065d01378cd18335c3ee62ad88e0", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=bef84347b46063152483e44d53f2301f82eeaa85", "patch": "@@ -393,12 +393,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Define this macro to be the value 1 if instructions will fail to\n    work if given data not on the nominal alignment.  If instructions\n-   will merely go slower in that case, define this macro as 0.\n-\n-   Note, little endian systems trap on unaligned addresses, so never\n-   turn off strict alignment in that case. */\n+   will merely go slower in that case, define this macro as 0.  */\n #undef\tSTRICT_ALIGNMENT\n-#define\tSTRICT_ALIGNMENT (TARGET_STRICT_ALIGN || TARGET_LITTLE_ENDIAN)\n+#define\tSTRICT_ALIGNMENT (TARGET_STRICT_ALIGN)\n \n /* Alignment in bits of the stack boundary.  Note, in order to allow building\n    one set of libraries with -mno-eabi instead of eabi libraries and non-eabi\n@@ -975,16 +972,37 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{memb} %{!memb: %{msdata: -memb} %{msdata=eabi: -memb}} \\\n %{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian} \\\n %{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \\\n-    %{mcall-solaris: -mlittle -msolaris} %{mcall-linux: -mbig} }}}}\"\n+    %{mcall-solaris: -mlittle -msolaris} \\\n+    %{mcall-linux: -mbig} }}}}\"\n+\n+#ifndef CC1_ENDIAN_BIG_SPEC\n+#define CC1_ENDIAN_BIG_SPEC \"\"\n+#endif\n+\n+#ifndef CC1_ENDIAN_LITTLE_SPEC\n+#define CC1_ENDIAN_LITTLE_SPEC \"\\\n+%{!mstrict-align: %{!mno-strict-align: \\\n+\t-mstrict-align \\\n+}}\"\n+#endif\n+\n+#ifndef CC1_ENDIAN_DEFAULT_SPEC\n+#define CC1_ENDIAN_DEFAULT_SPEC \"%(cc1_endian_big_spec)\"\n+#endif\n \n #undef CC1_SPEC\n /* Pass -G xxx to the compiler and set correct endian mode */\n #define CC1_SPEC \"%{G*} \\\n-%{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \\\n-    %{mcall-nt: -mlittle } \\\n-    %{mcall-aixdesc: -mbig } \\\n-    %{mcall-solaris: -mlittle } \\\n-    %{mcall-linux: -mbig} }}}} \\\n+%{mlittle: %(cc1_endian_little)} %{!mlittle: %{mlittle-endian: %(cc1_endian_little)}} \\\n+%{mbig: %(cc1_endian_big)} %{!mbig: %{mbig-endian: %(cc1_endian_big)}} \\\n+    %{mcall-nt: -mlittle %{cc1_endian_little} } \\\n+    %{mcall-aixdesc: -mbig %{cc1_endian_big} } \\\n+    %{mcall-solaris: -mlittle %{cc1_endian_little} } \\\n+    %{mcall-linux: -mbig %{cc1_endian_big}}} \\\n+    %{!mcall-nt: %{!mcall-aixdesc: %{!mcall-solaris: %{!mcall-linux: \\\n+\t    %(cc1_endian_default) \\\n+    }}}} \\\n+}}} \\\n %{mcall-solaris: -mregnames } \\\n %{mno-sdata: -msdata=none } \\\n %{meabi: %{!mcall-*: -mcall-sysv }} \\\n@@ -1419,6 +1437,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   { \"link_os_linux\",\t\tLINK_OS_LINUX_SPEC },\t\t\t\\\n   { \"link_os_solaris\",\t\tLINK_OS_SOLARIS_SPEC },\t\t\t\\\n   { \"link_os_default\",\t\tLINK_OS_DEFAULT_SPEC },\t\t\t\\\n+  { \"cc1_endian_big\",\t\tCC1_ENDIAN_BIG_SPEC },\t\t\t\\\n+  { \"cc1_endian_little\",\tCC1_ENDIAN_LITTLE_SPEC },\t\t\\\n+  { \"cc1_endian_default\",\tCC1_ENDIAN_DEFAULT_SPEC },\t\t\\\n   { \"cpp_endian_big\",\t\tCPP_ENDIAN_BIG_SPEC },\t\t\t\\\n   { \"cpp_endian_little\",\tCPP_ENDIAN_LITTLE_SPEC },\t\t\\\n   { \"cpp_endian_solaris\",\tCPP_ENDIAN_SOLARIS_SPEC },\t\t\\"}, {"sha": "1e21acd7b8659bd7106fa3e32a431ff3e65fdb6b", "filename": "gcc/config/rs6000/sysv4le.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Fsysv4le.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Fsysv4le.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4le.h?ref=bef84347b46063152483e44d53f2301f82eeaa85", "patch": "@@ -28,6 +28,9 @@ Boston, MA 02111-1307, USA.  */\n #undef\tCPP_ENDIAN_DEFAULT_SPEC\n #define\tCPP_ENDIAN_DEFAULT_SPEC \"%(cpp_endian_little)\"\n \n+#undef\tCC1_ENDIAN_DEFAULT_SPEC\n+#define\tCC1_ENDIAN_DEFAULT_SPEC \"%(cc1_endian_little)\"\n+\n #undef\tLINK_TARGET_SPEC\n #define\tLINK_TARGET_SPEC \"\\\n %{mbig: -oformat elf32-powerpc } %{mbig-endian: -oformat elf32-powerpc } \\"}, {"sha": "8ea37beebd5e5abe1d1a3ae719da5e4cf2c0c38f", "filename": "gcc/config/rs6000/t-ppcgas", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Ft-ppcgas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Fconfig%2Frs6000%2Ft-ppcgas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-ppcgas?ref=bef84347b46063152483e44d53f2301f82eeaa85", "patch": "@@ -3,17 +3,14 @@\n \n MULTILIB_OPTIONS\t= msoft-float \\\n \t\t\t  mlittle/mbig \\\n-\t\t\t  mcall-sysv/mcall-aix/mcall-solaris/mcall-linux\n+\t\t\t  mcall-sysv/mcall-aix/mcall-linux\n \n MULTILIB_DIRNAMES\t= nof \\\n \t\t\t  le be \\\n-\t\t\t  cs ca sol lin\n+\t\t\t  cs ca lin\n \n MULTILIB_EXTRA_OPTS\t= mrelocatable-lib mno-eabi mstrict-align\n-MULTILIB_EXCEPTIONS\t= *mbig/*mcall-solaris* \\\n-\t\t\t  *mlittle/*mcall-solaris* \\\n-\t\t\t  *msoft-float/*mcall-solaris* \\\n-\t\t\t  *mbig/*mcall-linux* \\\n+MULTILIB_EXCEPTIONS\t= *mbig/*mcall-linux* \\\n \t\t\t  *mlittle/*mcall-linux* \\\n \t\t\t  *msoft-float/*mcall-linux*\n "}, {"sha": "78e332d42b64c9c935b24653a09b2413d9020927", "filename": "gcc/invoke.texi", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef84347b46063152483e44d53f2301f82eeaa85/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=bef84347b46063152483e44d53f2301f82eeaa85", "patch": "@@ -4289,13 +4289,13 @@ Set architecture type, register usage, choice of mnemonics, and\n instruction scheduling parameters for machine type @var{cpu_type}.\n Supported values for @var{cpu_type} are @samp{rs6000}, @samp{rios1},\n @samp{rios2}, @samp{rsc}, @samp{601}, @samp{602}, @samp{603},\n-@samp{603e}, @samp{604}, @samp{604e}, @samp{620}, @samp{power},\n-@samp{power2}, @samp{powerpc}, @samp{403}, @samp{505}, @samp{801},\n-@samp{821}, @samp{823}, and @samp{860} and @samp{common}.\n-@samp{-mcpu=power}, @samp{-mcpu=power2}, and @samp{-mcpu=powerpc}\n-specify generic POWER, POWER2 and pure PowerPC (i.e., not MPC601)\n-architecture machine types, with an appropriate, generic processor model\n-assumed for scheduling purposes.@refill\n+@samp{603e}, @samp{604}, @samp{604e}, @samp{620}, @samp{740},\n+@samp{750}, @samp{power}, @samp{power2}, @samp{powerpc}, @samp{403},\n+@samp{505}, @samp{801}, @samp{821}, @samp{823}, and @samp{860} and\n+@samp{common}.  @samp{-mcpu=power}, @samp{-mcpu=power2}, and\n+@samp{-mcpu=powerpc} specify generic POWER, POWER2 and pure PowerPC\n+(i.e., not MPC601) architecture machine types, with an appropriate,\n+generic processor model assumed for scheduling purposes.@refill\n \n @c overfull hbox here --bob 22 jul96\n @c original text between ignore ... end ignore\n@@ -4439,17 +4439,20 @@ instructions and the store multiple word instructions.  These\n instructions are generated by default on POWER systems, and not\n generated on PowerPC systems.  Do not use @samp{-mmultiple} on little\n endian PowerPC systems, since those instructions do not work when the\n-processor is in little endian mode.\n+processor is in little endian mode.  The exceptions are PPC740 and\n+PPC750 which permit the instructions usage in little endian mode.\n \n @item -mstring\n @itemx -mno-string\n @kindex -mstring\n-Generate code that uses (does not use) the load string instructions and the\n-store string word instructions to save multiple registers and do small block\n-moves.  These instructions are generated by default on POWER systems, and not\n-generated on PowerPC systems.  Do not use @samp{-mstring} on little endian\n-PowerPC systems, since those instructions do not work when the processor is in\n-little endian mode.\n+Generate code that uses (does not use) the load string instructions\n+and the store string word instructions to save multiple registers and\n+do small block moves.  These instructions are generated by default on\n+POWER systems, and not generated on PowerPC systems.  Do not use\n+@samp{-mstring} on little endian PowerPC systems, since those\n+instructions do not work when the processor is in little endian mode.\n+The exceptions are PPC740 and PPC750 which permit the instructions\n+usage in little endian mode.\n \n @item -mupdate\n @itemx -mno-update"}]}