{"sha": "12841eb3d032e926775f49834b8941f57a047baf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4NDFlYjNkMDMyZTkyNjc3NWY0OTgzNGI4OTQxZjU3YTA0N2JhZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-11-27T08:14:25Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-11-27T08:14:25Z"}, "message": "re PR libstdc++/9371 (Bad exception handling in i/ostream::operator>>/<<(streambuf*))\n\n\n2003-11-26  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/9371\n\tPR libstdc++/9546\n\tPR libstdc++/10093\n\tPR libstdc++/10095\n\t* include/bits/basic_ios.h (basic_ios::setstate): Elide if goodbit.\n\t(basic_ios::_M_setstate): Consolidate common error handling code.\n\t* include/bits/basic_ios.tcc: Tweak.\n\t* include/bits/fstream.tcc: Tweak.\n\t* include/bits/istream.tcc: Use _M_setstate for common exception\n\thandling. Move setstate calls after catch.\n\t(basic_istream::tellg): Check for exceptions thrown by streambuf\n\tvirtual functions.\n\t(basic_istream::seekg): Same.\n\t* include/bits/ostream.tcc: Same, but for ostream.\n\t(basic_ostream::flush): Check for exceptions thrown by streambuf\n\tvirtual functions.\n\t(basic_istream::tellp): Same.\n\t(basic_istream::seekp): Same.\n\t* include/bits/locale_facets.tcc: Tweak.\n\t* include/bits/streambuf.tcc: Tweak.\n\t(__copy_streambufs): Propagate exceptions.\n\t* testsuite/testsuite_io.h (fail_streambuf): New.\n\t(fail_num_get): New.\n\t(fail_num_put): New.\n\t(facet_error): New.\n\t(underflow_error): New.\n\t(overflow_error): New.\n\t(positioning_error): New.\n\t* testsuite/27_io/basic_istream/exceptions/char/9561.cc: Tweak.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n        exceptions_badbit_throw.cc, exceptions_failbit.cc,\n        exceptions_failbit_throw.cc: New.\n\t* testsuite/27_io/basic_istream/extractors_other/char/\n\terror_failbit.cc, exceptions_badbit_throw.cc,\n        exceptions_failbit_throw.cc, exceptions_null.cc: New.\n\t* testsuite/27_io/basic_istream/seekg/char/exceptions_badbit_throw.cc:\n\tNew.\n\t* testsuite/27_io/basic_istream/tellg/char/exceptions_badbit_throw.cc:\n\tNew.\n\t* testsuite/27_io/basic_ostream/flush/char/exceptions_badbit_throw.cc:\n\tNew.\n\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/\n\texceptions_badbit_throw.cc, exceptions_failbit_throw.cc: New.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\terror_failbit.cc, exceptions_badbit_throw.cc,\n        exceptions_failbit_throw.cc, exceptions_null.cc: New.\n\t* testsuite/27_io/basic_ostream/seekp/char/exceptions_badbit_throw.cc:\n\tNew.\n\t* testsuite/27_io/basic_ostream/tellp/char/exceptions_badbit_throw.cc:\n\tNew.\n\nFrom-SVN: r73979", "tree": {"sha": "27f6d0d3d427d9db5da892e2b7f7f741d945f41a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27f6d0d3d427d9db5da892e2b7f7f741d945f41a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12841eb3d032e926775f49834b8941f57a047baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12841eb3d032e926775f49834b8941f57a047baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12841eb3d032e926775f49834b8941f57a047baf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12841eb3d032e926775f49834b8941f57a047baf/comments", "author": null, "committer": null, "parents": [{"sha": "b483cfb7a714d1d4ca0868241f69b31d44c51e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b483cfb7a714d1d4ca0868241f69b31d44c51e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b483cfb7a714d1d4ca0868241f69b31d44c51e55"}], "stats": {"total": 2469, "additions": 1948, "deletions": 521}, "files": [{"sha": "fd4aaaf3d1ebf173e89139ded9c32717375b5364", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -1,3 +1,56 @@\n+2003-11-26  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/9371\n+\tPR libstdc++/9546\n+\tPR libstdc++/10093\n+\tPR libstdc++/10095\n+\t* include/bits/basic_ios.h (basic_ios::setstate): Elide if goodbit.\n+\t(basic_ios::_M_setstate): Consolidate common error handling code.\n+\t* include/bits/basic_ios.tcc: Tweak.\n+\t* include/bits/fstream.tcc: Tweak.\n+\t* include/bits/istream.tcc: Use _M_setstate for common exception\n+\thandling. Move setstate calls after catch. \n+\t(basic_istream::tellg): Check for exceptions thrown by streambuf\n+\tvirtual functions.\n+\t(basic_istream::seekg): Same.\n+\t* include/bits/ostream.tcc: Same, but for ostream.\n+\t(basic_ostream::flush): Check for exceptions thrown by streambuf\n+\tvirtual functions.\n+\t(basic_istream::tellp): Same.\t\n+\t(basic_istream::seekp): Same.\n+\t* include/bits/locale_facets.tcc: Tweak.\n+\t* include/bits/streambuf.tcc: Tweak.\n+\t(__copy_streambufs): Propagate exceptions.\n+\t* testsuite/testsuite_io.h (fail_streambuf): New.\n+\t(fail_num_get): New.\n+\t(fail_num_put): New.\n+\t(facet_error): New.\n+\t(underflow_error): New.\n+\t(overflow_error): New.\t\n+\t(positioning_error): New.\t\n+\t* testsuite/27_io/basic_istream/exceptions/char/9561.cc: Tweak.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n+        exceptions_badbit_throw.cc, exceptions_failbit.cc,\n+        exceptions_failbit_throw.cc: New.\n+\t* testsuite/27_io/basic_istream/extractors_other/char/\n+\terror_failbit.cc, exceptions_badbit_throw.cc,\n+        exceptions_failbit_throw.cc, exceptions_null.cc: New.\n+\t* testsuite/27_io/basic_istream/seekg/char/exceptions_badbit_throw.cc: \n+\tNew.\n+\t* testsuite/27_io/basic_istream/tellg/char/exceptions_badbit_throw.cc:\n+\tNew.\n+\t* testsuite/27_io/basic_ostream/flush/char/exceptions_badbit_throw.cc:\n+\tNew.\n+\t* testsuite/27_io/basic_ostream/inserters_arithmetic/char/\n+\texceptions_badbit_throw.cc, exceptions_failbit_throw.cc: New.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\terror_failbit.cc, exceptions_badbit_throw.cc,\n+        exceptions_failbit_throw.cc, exceptions_null.cc: New.\n+\t* testsuite/27_io/basic_ostream/seekp/char/exceptions_badbit_throw.cc: \n+\tNew.\n+\t* testsuite/27_io/basic_ostream/tellp/char/exceptions_badbit_throw.cc: \n+\tNew.\n+\n 2003-11-26  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/12297"}, {"sha": "5ada6dab7b317f934daed6739d9a3b0811246bc9", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -141,7 +141,23 @@ namespace std\n       */\n       void \n       setstate(iostate __state) \n-      { this->clear(this->rdstate() | __state); }\n+      {\n+\tif (__state != ios_base::goodbit)\n+\t  this->clear(this->rdstate() | __state); \n+      }\n+\n+      // Flip the internal state on for the proper state bits, then re\n+      // throws the propagated exception if bit also set in\n+      // exceptions().\n+      void\n+      _M_setstate(iostate __state) \n+      { \n+\t// 27.6.1.2.1 Common requirements.\n+\t// Turn this on without causing an ios::failure to be thrown.\n+\t_M_streambuf_state |= __state; \n+\tif (this->exceptions() & __state)\n+\t  __throw_exception_again;\n+      }\n \n       /**\n        *  @brief  Fast error checking.\n@@ -441,11 +457,6 @@ namespace std\n \n       void\n       _M_cache_locale(const locale& __loc);\n-\n-      // Internal state setter that won't throw, only set the state bits.\n-      // Used to guarantee we don't throw when setting badbit.\n-      void\n-      _M_setstate(iostate __state) { _M_streambuf_state |= __state; }\n     };\n } // namespace std\n "}, {"sha": "6f690e0585d96ed81c3c3f474d41b921b9af5377", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -42,7 +42,7 @@ namespace std\n \t_M_streambuf_state = __state;\n       else\n \t  _M_streambuf_state = __state | badbit;\n-      if ((this->rdstate() & this->exceptions()))\n+      if (this->exceptions() & this->rdstate())\n \t__throw_ios_failure(\"basic_ios::clear\");\n     }\n   "}, {"sha": "b15ad7db0a158cb45f268ceb589bbd83072ec746", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -134,9 +134,7 @@ namespace std\n \t\t__testfail = true;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      __testfail = true;\n-\t    }\n+\t    { __testfail = true; }\n \t      \n \t  // NB: Do this here so that re-opened filebufs will be cool...\n \t  this->_M_mode = ios_base::openmode(0);"}, {"sha": "4055ca793086549b4f583e46c5e5fc645af714f5", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 181, "deletions": 303, "changes": 484, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -61,7 +61,7 @@ namespace std\n \t      while (!traits_type::eq_int_type(__c, __eof)\n \t\t     && __ct.is(ctype_base::space, \n \t\t\t\ttraits_type::to_char_type(__c)))\n-\t\t  __c = __sb->snextc();\n+\t\t__c = __sb->snextc();\n \n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 195. Should basic_istream::sentry's constructor ever\n@@ -85,10 +85,7 @@ namespace std\n     basic_istream<_CharT, _Traits>& \n     basic_istream<_CharT, _Traits>::\n     operator>>(__istream_type& (*__pf)(__istream_type&))\n-    {\n-      __pf(*this);\n-      return *this;\n-    }\n+    { return __pf(*this); }\n \n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>& \n@@ -116,21 +113,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -143,10 +134,10 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      long __l;\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __l);\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -157,16 +148,10 @@ namespace std\n \t\t__n = __l;\n \t      else\n                 __err |= ios_base::failbit;\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -179,21 +164,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -206,10 +185,10 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      long __l;\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __l);\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -220,16 +199,10 @@ namespace std\n \t\t__n = __l;\n \t      else\n                 __err |= ios_base::failbit;\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -242,21 +215,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -269,21 +236,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -296,21 +257,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -324,21 +279,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t      __throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -351,21 +300,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -379,21 +322,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -406,21 +343,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -433,21 +364,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -460,21 +385,15 @@ namespace std\n       sentry __cerb(*this, false);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n-\t      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n \t      __ng.get(*this, 0, *this, __err, __n);\n-\t      this->setstate(__err);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -484,30 +403,22 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     operator>>(__streambuf_type* __sbout)\n     {\n-       sentry __cerb(*this, false);\n-       if (__cerb)\n-\t {\n-\t   try\n-\t     {\n-\t       streamsize __xtrct = 0;\n-\t       if (__sbout)\n-\t\t {\n-\t\t   __streambuf_type* __sbin = this->rdbuf();\n-\t\t   __xtrct = __copy_streambufs(*this, __sbin, __sbout);\n-\t\t }\n-\t       if (!__sbout || !__xtrct)\n-\t\t this->setstate(ios_base::failbit);\n-\t     }\n-\t   catch(...)\n-\t     {\n-\t       // 27.6.2.5.1 Common requirements.\n-\t       // Turn this on without causing an ios::failure to be thrown.\n-\t       this->_M_setstate(ios_base::badbit);\n-\t       if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t __throw_exception_again;\n-\t     }\n-\t }\n-       return *this;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      sentry __cerb(*this, false);\n+      if (__cerb && __sbout)\n+\t{\n+\t  try\n+\t    {\n+\t      if (!__copy_streambufs(*this, this->rdbuf(), __sbout))\n+\t\t__err |= ios_base::failbit;\n+\t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::failbit); }\n+\t}\n+      else if (!__sbout)\n+\t__err |= ios_base::failbit;\n+      this->setstate(__err);\n+      return *this;\n     }\n \n   template<typename _CharT, typename _Traits>\n@@ -518,6 +429,7 @@ namespace std\n       const int_type __eof = traits_type::eof();\n       int_type __c = __eof;\n       _M_gcount = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n@@ -528,17 +440,14 @@ namespace std\n \t      if (!traits_type::eq_int_type(__c, __eof))\n \t\t_M_gcount = 1;\n \t      else\n-\t\tthis->setstate(ios_base::eofbit | ios_base::failbit);\n+\t\t__err |= ios_base::eofbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n \t}\n+      if (!_M_gcount)\n+\t__err |= ios_base::failbit;\n+      this->setstate(__err);\n       return __c;\n     }\n \n@@ -548,31 +457,28 @@ namespace std\n     get(char_type& __c)\n     {\n       _M_gcount = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n  \t  try \n \t    {\n-\t      const int_type __eof = traits_type::eof();\n-\t      int_type __bufval = this->rdbuf()->sbumpc();\n+\t      int_type __cb = this->rdbuf()->sbumpc();\n \t      // 27.6.1.1 paragraph 3\n-\t      if (!traits_type::eq_int_type(__bufval, __eof))\n+\t      if (!traits_type::eq_int_type(__cb, traits_type::eof()))\n \t\t{\n \t\t  _M_gcount = 1;\n-\t\t  __c = traits_type::to_char_type(__bufval);\n+\t\t  __c = traits_type::to_char_type(__cb);\n \t\t}\n \t      else\n-\t\tthis->setstate(ios_base::eofbit | ios_base::failbit);\n+\t\t__err |= ios_base::eofbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n \t}\n+      if (!_M_gcount)\n+\t__err |= ios_base::failbit;\n+      this->setstate(__err);\n       return *this;\n     }\n \n@@ -582,6 +488,7 @@ namespace std\n     get(char_type* __s, streamsize __n, char_type __delim)\n     {\n       _M_gcount = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n@@ -601,20 +508,15 @@ namespace std\n \t\t  ++_M_gcount;\n \t\t}\n \t      if (traits_type::eq_int_type(__c, __eof))\n-\t\tthis->setstate(ios_base::eofbit);\n+\t\t__err |= ios_base::eofbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       *__s = char_type();\n       if (!_M_gcount)\n-\tthis->setstate(ios_base::failbit);\n+\t__err |= ios_base::failbit;\n+      this->setstate(__err);\n       return *this;\n     }\n \n@@ -624,6 +526,7 @@ namespace std\n     get(__streambuf_type& __sb, char_type __delim)\n     {\n       _M_gcount = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n@@ -644,19 +547,14 @@ namespace std\n \t\t  __c2 = traits_type::to_char_type(__c);\n \t\t}\n \t      if (traits_type::eq_int_type(__c, __eof))\n-\t\tthis->setstate(ios_base::eofbit);\n+\t\t__err |= ios_base::eofbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       if (!_M_gcount)\n-\tthis->setstate(ios_base::failbit);\n+\t__err |= ios_base::failbit;\n+      this->setstate(__err);\n       return *this;\n     }\n \n@@ -666,6 +564,7 @@ namespace std\n     getline(char_type* __s, streamsize __n, char_type __delim)\n     {\n       _M_gcount = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n@@ -685,7 +584,7 @@ namespace std\n \t\t  ++_M_gcount;\n \t\t}\n \t      if (traits_type::eq_int_type(__c, __eof))\n-\t\tthis->setstate(ios_base::eofbit);\n+\t\t__err |= ios_base::eofbit;\n \t      else\n \t\t{\n \t\t  if (traits_type::eq_int_type(__c, __idelim))\n@@ -694,21 +593,16 @@ namespace std\n \t\t      ++_M_gcount;\n \t\t    }\n \t\t  else\n-\t\t    this->setstate(ios_base::failbit);\n+\t\t    __err |= ios_base::failbit;\n \t\t}\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       *__s = char_type();\n       if (!_M_gcount)\n-\tthis->setstate(ios_base::failbit);\n+\t__err |= ios_base::failbit;\n+      this->setstate(__err);\n       return *this;\n     }\n   \n@@ -721,6 +615,7 @@ namespace std\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      const int_type __eof = traits_type::eof();\n@@ -736,16 +631,11 @@ namespace std\n \t\t    break;\n \t\t}\n \t      if (traits_type::eq_int_type(__c, __eof))\n-\t\tthis->setstate(ios_base::eofbit);\n+\t\t__err |= ios_base::eofbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -760,20 +650,16 @@ namespace std\n       sentry __cerb(*this, true);\n       if (__cerb)\n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      __c = this->rdbuf()->sgetc();\n \t      if (traits_type::eq_int_type(__c, traits_type::eof()))\n-\t\tthis->setstate(ios_base::eofbit);\n+\t\t__err |= ios_base::eofbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t} \n       return __c;\n     }\n@@ -787,20 +673,16 @@ namespace std\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      _M_gcount = this->rdbuf()->sgetn(__s, __n);\n \t      if (_M_gcount != __n)\n-\t\tthis->setstate(ios_base::eofbit | ios_base::failbit);\n+\t\t__err |= (ios_base::eofbit | ios_base::failbit);\n \t    }\t    \n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -814,6 +696,7 @@ namespace std\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      // Cannot compare int_type with streamsize generically.\n@@ -825,16 +708,11 @@ namespace std\n \t\t    _M_gcount = this->rdbuf()->sgetn(__s, __num);\n \t\t}\n \t      else\n-\t\tthis->setstate(ios_base::eofbit);\t\t    \n+\t\t__err |= ios_base::eofbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return _M_gcount;\n     }\n@@ -850,22 +728,18 @@ namespace std\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      if (!__sb \n \t\t  || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))\n-\t\tthis->setstate(ios_base::badbit);\t\t    \n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -881,22 +755,18 @@ namespace std\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      if (!__sb \n \t\t  || traits_type::eq_int_type(__sb->sungetc(), __eof))\n-\t\tthis->setstate(ios_base::badbit);\t\t    \n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n@@ -906,30 +776,27 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     sync(void)\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR60.  Do not change _M_gcount.\n       int __ret = -1;\n       sentry __cerb(*this, true);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      if (__sb)\n \t\t{\n \t\t  if (__sb->pubsync() == -1)\n-\t\t    this->setstate(ios_base::badbit);\t\t    \n+\t\t    __err |= ios_base::badbit;\n \t\t  else \n \t\t    __ret = 0;\n \t\t}\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.3 paragraph 1\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return __ret;\n     }\n@@ -939,30 +806,42 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     tellg(void)\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR60.  Do not change _M_gcount.\n       pos_type __ret = pos_type(-1);\n-      if (!this->fail())\n-\t__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);\n+      try\n+\t{\n+\t  if (!this->fail())\n+\t    __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);\n+\t}\n+      catch(...)\n+\t{ this->_M_setstate(ios_base::badbit); }\n       return __ret;\n     }\n \n-\n   template<typename _CharT, typename _Traits>\n     basic_istream<_CharT, _Traits>&\n     basic_istream<_CharT, _Traits>::\n     seekg(pos_type __pos)\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR60.  Do not change _M_gcount.\n-      if (!this->fail())\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      try\n \t{\n-\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t  // 136.  seekp, seekg setting wrong streams?\n-\t  pos_type __err = this->rdbuf()->pubseekpos(__pos, ios_base::in);\n+\t  if (!this->fail())\n+\t    {\n+\t      // 136.  seekp, seekg setting wrong streams?\n+\t      pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::in);\n \n-\t  // 129. Need error indication from seekp() and seekg()\n-\t  if (__err == pos_type(off_type(-1)))\n-\t    this->setstate(ios_base::failbit);\n+\t      // 129. Need error indication from seekp() and seekg()\n+\t      if (__p == pos_type(off_type(-1)))\n+\t\t__err |= ios_base::failbit;\n+\t    }\n \t}\n+      catch(...)\n+\t{ this->_M_setstate(ios_base::badbit); }\n+      this->setstate(__err);\n       return *this;\n     }\n \n@@ -971,18 +850,25 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     seekg(off_type __off, ios_base::seekdir __dir)\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR60.  Do not change _M_gcount.\n-      if (!this->fail())\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      try\n \t{\n-\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t  // 136.  seekp, seekg setting wrong streams?\n-\t  pos_type __err = this->rdbuf()->pubseekoff(__off, __dir, \n-\t\t\t\t\t\t     ios_base::in);\n-\n-\t  // 129. Need error indication from seekp() and seekg()\n-\t  if (__err == pos_type(off_type(-1)))\n-\t    this->setstate(ios_base::failbit);\n+\t  if (!this->fail())\n+\t    {\n+\t      // 136.  seekp, seekg setting wrong streams?\n+\t      pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, \n+\t\t\t\t\t\t       ios_base::in);\n+\t      \n+\t      // 129. Need error indication from seekp() and seekg()\n+\t      if (__p == pos_type(off_type(-1)))\n+\t\t__err |= ios_base::failbit;\n+\t    }\n \t}\n+      catch(...)\n+\t{ this->_M_setstate(ios_base::badbit); }\n+      this->setstate(__err);\n       return *this;\n     }\n \n@@ -995,16 +881,18 @@ namespace std\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n-\t    { __in.get(__c); }\n-\t  catch(...)\n \t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __in._M_setstate(ios_base::badbit);\n-\t      if ((__in.exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n+\t      typename __istream_type::int_type __cb = __in.rdbuf()->sbumpc();\n+\t      if (!_Traits::eq_int_type(__cb, _Traits::eof()))\n+\t\t__c = _Traits::to_char_type(__cb);\n+\t      else\n+\t\t__err |= (ios_base::eofbit | ios_base::failbit);\n \t    }\n+\t  catch(...)\n+\t    { __in._M_setstate(ios_base::badbit); }\n+\t  __in.setstate(__err);\n \t}\n       return __in;\n     }\n@@ -1018,8 +906,9 @@ namespace std\n       typedef typename _Traits::int_type \t\tint_type;\n       typedef _CharT                     \t\tchar_type;\n       typedef ctype<_CharT>     \t\t\t__ctype_type;\n-      streamsize __extracted = 0;\n \n+      streamsize __extracted = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n@@ -1046,24 +935,19 @@ namespace std\n \t\t  __c = __sb->snextc();\n \t\t}\n \t      if (_Traits::eq_int_type(__c, __eof))\n-\t\t__in.setstate(ios_base::eofbit);\n+\t\t__err |= ios_base::eofbit;\n \n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 68.  Extractors for char* should store null at end\n \t      *__s = char_type();\n \t      __in.width(0);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __in._M_setstate(ios_base::badbit);\n-\t      if ((__in.exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { __in._M_setstate(ios_base::badbit); }\n \t}\n       if (!__extracted)\n-\t__in.setstate(ios_base::failbit);\n+\t__err |= ios_base::failbit;\n+      __in.setstate(__err);\n       return __in;\n     }\n \n@@ -1087,8 +971,7 @@ namespace std\n \t__c = __sb->snextc();\n \n        if (_Traits::eq_int_type(__c, __eof))\n-\t__in.setstate(ios_base::eofbit);\n-\n+\t __in.setstate(ios_base::eofbit);\n       return __in;\n     }\n \n@@ -1106,6 +989,7 @@ namespace std\n       typedef typename __string_type::size_type\t\t__size_type;\n \n       __size_type __extracted = 0;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb) \n \t{\n@@ -1130,25 +1014,21 @@ namespace std\n \t\t  __c = __sb->snextc();\n \t\t}\n \t      if (_Traits::eq_int_type(__c, __eof))\n-\t\t__in.setstate(ios_base::eofbit);\n+\t\t__err |= ios_base::eofbit;\n \t      __in.width(0);\n \t    }\n \t  catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>\n \t      // might cause endless loop\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __in.setstate(ios_base::badbit);\n-\t      if ((__in.exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n+\t      __in._M_setstate(ios_base::badbit);\n \t    }\n \t}\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 211.  operator>>(istream&, string&) doesn't set failbit\n       if (!__extracted)\n-\t__in.setstate (ios_base::failbit);\n+\t__err |= ios_base::failbit;\n+      __in.setstate(__err);\n       return __in;\n     }\n \n@@ -1167,6 +1047,7 @@ namespace std\n       __size_type __extracted = 0;\n       const __size_type __n = __str.max_size();\n       bool __testdelim = false;\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n       typename __istream_type::sentry __cerb(__in, true);\n       if (__cerb) \n \t{\n@@ -1188,22 +1069,19 @@ namespace std\n \t\t  __testdelim = _Traits::eq_int_type(__c, __idelim);\n \t\t}\n \t      if (_Traits::eq_int_type(__c, __eof))\n-\t\t__in.setstate(ios_base::eofbit);\n+\t\t__err |= ios_base::eofbit;\n \t    }\n \t  catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>\n \t      // might cause endless loop\n-\t      // 27.6.1.3 paragraph 1.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __in.setstate(ios_base::badbit);\n-\t      if ((__in.exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n+\t      __in._M_setstate(ios_base::badbit);\n \t    }\n \t}\n       if ((!__extracted && !__testdelim) || __extracted == __n)\n-\t__in.setstate(ios_base::failbit);\n+\t__err |= ios_base::failbit;\n+      __in.setstate(__err);\n       return __in;\n     }\n "}, {"sha": "c2097e30d335ba5c3d3df7d54efe5d4bdf5644a3", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -627,7 +627,7 @@ namespace std\n       __io.flags(__fmt);\n \n       unsigned long __ul;\n-      std::__convert_to_v(__xtrc.c_str(), __ul, __err,\n+      std::__convert_to_v(__xtrc.c_str(), __ul, __err, \n \t\t\t  _S_get_c_locale(), __base);\n       if (!(__err & ios_base::failbit))\n \t__v = reinterpret_cast<void*>(__ul);"}, {"sha": "fecaa93eeeb53b49e4553facae6b3d25a82d02c0", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 139, "deletions": 171, "changes": 310, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -43,7 +43,7 @@ namespace std\n {\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>::sentry::\n-    sentry(basic_ostream<_CharT,_Traits>& __os)\n+    sentry(basic_ostream<_CharT, _Traits>& __os)\n     : _M_os(__os)\n     {\n       // XXX MT\n@@ -96,62 +96,35 @@ namespace std\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n-    basic_ostream<_CharT, _Traits>::operator<<(__streambuf_type* __sbin)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb && __sbin)\n-\t{\n-\t  try\n-\t    {\n-\t      if (!__copy_streambufs(*this, __sbin, this->rdbuf()))\n-\t\tthis->setstate(ios_base::failbit);\n-\t    }\n-\t  catch(...)\n-\t    {\n-\t      // 27.6.2.5.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n-\t}\n-      else if (!__sbin)\n-\tthis->setstate(ios_base::badbit);\n-      return *this;\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>& \n-    basic_ostream<_CharT, _Traits>::operator<<(bool __n)\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(bool __n)\n     {\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n \t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n-    basic_ostream<_CharT, _Traits>::operator<<(long __n)\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(long __n)\n     {\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      bool __b = false;\n@@ -166,53 +139,47 @@ namespace std\n \t      else\n \t\t__b = __np.put(*this, *this, __c, __n).failed();\n \t      if (__b)  \n-\t\tthis->setstate(ios_base::badbit);\n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n-    basic_ostream<_CharT, _Traits>::operator<<(unsigned long __n)\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(unsigned long __n)\n     {\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n \t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n \n #ifdef _GLIBCXX_USE_LONG_LONG\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n-    basic_ostream<_CharT, _Traits>::operator<<(long long __n)\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(long long __n)\n     {\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      bool __b = false;\n@@ -228,124 +195,131 @@ namespace std\n \t      else\n \t\t__b = __np.put(*this, *this, __c, __n).failed();\n \t      if (__b)  \n-\t\tthis->setstate(ios_base::badbit);\n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n-    basic_ostream<_CharT, _Traits>::operator<<(unsigned long long __n)\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(unsigned long long __n)\n     {\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n \t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n #endif\n   \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n-    basic_ostream<_CharT, _Traits>::operator<<(double __n)\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(double __n)\n     {\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n \t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n   \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n-    basic_ostream<_CharT, _Traits>::operator<<(long double __n)\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(long double __n)\n     {\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n \t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n-    basic_ostream<_CharT, _Traits>::operator<<(const void* __n)\n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(const void* __n)\n     {\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try \n \t    {\n \t      const __num_put_type& __np = __check_facet(this->_M_num_put);\n \t      if (__np.put(*this, *this, this->fill(), __n).failed())\n-\t\tthis->setstate(ios_base::badbit);\n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch(...)\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n+\t}\n+      return *this;\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>& \n+    basic_ostream<_CharT, _Traits>::\n+    operator<<(__streambuf_type* __sbin)\n+    {\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      sentry __cerb(*this);\n+      if (__cerb && __sbin)\n+\t{\n+\t  try\n \t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n+\t      if (!__copy_streambufs(*this, __sbin, this->rdbuf()))\n+\t\t__err |= ios_base::failbit;\n \t    }\n+\t  catch(...)\n+\t    { this->_M_setstate(ios_base::failbit); }\n \t}\n+      else if (!__sbin)\n+\t__err |= ios_base::badbit;\n+      this->setstate(__err);\n       return *this;\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::put(char_type __c)\n+    basic_ostream<_CharT, _Traits>::\n+    put(char_type __c)\n     { \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 60. What is a formatted input function?\n@@ -356,25 +330,24 @@ namespace std\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n+\t  ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n \t  try\n \t    {\n \t      int_type __put = this->rdbuf()->sputc(__c); \n \t      if (traits_type::eq_int_type(__put, traits_type::eof()))\n-\t\tthis->setstate(ios_base::badbit);\n+\t\t__err |= ios_base::badbit;\n \t    }\n \t  catch (...)\n-\t    {\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n+\t  this->setstate(__err);\n \t}\n       return *this;  \n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::write(const _CharT* __s, streamsize __n)\n+    basic_ostream<_CharT, _Traits>::\n+    write(const _CharT* __s, streamsize __n)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 60. What is a formatted input function?\n@@ -389,71 +362,95 @@ namespace std\n \t  try\n \t    { _M_write(__s, __n); }\n \t  catch (...)\n-\t    {\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { this->_M_setstate(ios_base::badbit); }\n \t}\n       return *this;\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::flush()\n+    basic_ostream<_CharT, _Traits>::\n+    flush()\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 60. What is a formatted input function?\n       // basic_ostream::flush() is *not* an unformatted output function.\n-      if (this->rdbuf() && this->rdbuf()->pubsync() == -1)\n-\tthis->setstate(ios_base::badbit);\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      try\n+\t{\n+\t  if (this->rdbuf() && this->rdbuf()->pubsync() == -1)\n+\t    __err |= ios_base::badbit;\n+\t}\n+      catch(...)\n+\t{ this->_M_setstate(ios_base::badbit); }\n+      this->setstate(__err);\n       return *this;\n     }\n   \n   template<typename _CharT, typename _Traits>\n     typename basic_ostream<_CharT, _Traits>::pos_type\n-    basic_ostream<_CharT, _Traits>::tellp()\n+    basic_ostream<_CharT, _Traits>::\n+    tellp()\n     {\n       pos_type __ret = pos_type(-1);\n-      if (!this->fail())\n-\t__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);\n+      try\n+\t{\n+\t  if (!this->fail())\n+\t    __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);\n+\t}\n+      catch(...)\n+\t{ this->_M_setstate(ios_base::badbit); }\n       return __ret;\n     }\n \n-\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::seekp(pos_type __pos)\n+    basic_ostream<_CharT, _Traits>::\n+    seekp(pos_type __pos)\n     {\n-      if (!this->fail())\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      try\n \t{\n-\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t  // 136.  seekp, seekg setting wrong streams?\n-\t  pos_type __err = this->rdbuf()->pubseekpos(__pos, ios_base::out);\n-\n-\t  // 129. Need error indication from seekp() and seekg()\n-\t  if (__err == pos_type(off_type(-1)))\n-\t    this->setstate(ios_base::failbit);\n+\t  if (!this->fail())\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 136.  seekp, seekg setting wrong streams?\n+\t      pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out);\n+\t      \n+\t      // 129. Need error indication from seekp() and seekg()\n+\t      if (__p == pos_type(off_type(-1)))\n+\t\t__err |= ios_base::failbit;\n+\t    }\n \t}\n+      catch(...)\n+\t{ this->_M_setstate(ios_base::badbit); }\n+      this->setstate(__err);\n       return *this;\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n     basic_ostream<_CharT, _Traits>::\n-    seekp(off_type __off, ios_base::seekdir __d)\n+    seekp(off_type __off, ios_base::seekdir __dir)\n     {\n-      if (!this->fail())\n+      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      try\n \t{\n-\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t  // 136.  seekp, seekg setting wrong streams?\n-\t  pos_type __err = this->rdbuf()->pubseekoff(__off, __d, \n-\t\t\t\t\t\t     ios_base::out);\n-\n-\t  // 129. Need error indication from seekp() and seekg()\n-\t  if (__err == pos_type(off_type(-1)))\n-\t    this->setstate(ios_base::failbit);\n+\t  if (!this->fail())\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 136.  seekp, seekg setting wrong streams?\n+\t      pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, \n+\t\t\t\t\t\t       ios_base::out);\n+\t      \n+\t      // 129. Need error indication from seekp() and seekg()\n+\t      if (__p == pos_type(off_type(-1)))\n+\t\t__err |= ios_base::failbit;\n+\t    }\n \t}\n+      catch(...)\n+\t{ this->_M_setstate(ios_base::badbit); }\n+      this->setstate(__err);\n       return *this;\n     }\n \n@@ -483,13 +480,7 @@ namespace std\n \t      __out.width(0);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __out._M_setstate(ios_base::badbit);\n-\t      if ((__out.exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { __out._M_setstate(ios_base::badbit); }\n \t}\n       return __out;\n     }\n@@ -519,13 +510,7 @@ namespace std\n \t      __out.width(0);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __out._M_setstate(ios_base::badbit);\n-\t      if ((__out.exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { __out._M_setstate(ios_base::badbit); }\n \t}\n       return __out;\n      }\n@@ -555,13 +540,7 @@ namespace std\n \t      __out.width(0);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __out._M_setstate(ios_base::badbit);\n-\t      if ((__out.exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { __out._M_setstate(ios_base::badbit); }\n \t}\n       else if (!__s)\n \t__out.setstate(ios_base::badbit);\n@@ -604,13 +583,7 @@ namespace std\n \t      __out.width(0);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __out._M_setstate(ios_base::badbit);\n-\t      if ((__out.exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { __out._M_setstate(ios_base::badbit); }\n \t}\n       else if (!__s)\n \t__out.setstate(ios_base::badbit);\n@@ -642,13 +615,7 @@ namespace std\n \t      __out.width(0);\n \t    }\n \t  catch(...)\n-\t    {\n-\t      // 27.6.1.2.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      __out._M_setstate(ios_base::badbit);\n-\t      if ((__out.exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n+\t    { __out._M_setstate(ios_base::badbit); }\n \t}\n       else if (!__s)\n \t__out.setstate(ios_base::badbit);\n@@ -668,6 +635,7 @@ namespace std\n \t  const streamsize __w = __out.width();\n \t  streamsize __len = static_cast<streamsize>(__str.size());\n \t  const _CharT* __s = __str.data();\n+\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // 25. String operator<< uses width() value wrong\n \t  if (__w > __len)"}, {"sha": "559c5b9874fd6782a98e122618e05ae128e85141", "filename": "libstdc++-v3/include/bits/streambuf.tcc", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf.tcc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -126,8 +126,7 @@ namespace std\n \t      const size_t __n = __sbin->egptr() - __sbin->gptr();\n \t      if (__n > 1)\n \t\t{\n-\t\t  const size_t __wrote = __sbout->sputn(__sbin->gptr(),\n-\t\t\t\t\t\t\t__n);\n+\t\t  const size_t __wrote = __sbout->sputn(__sbin->gptr(), __n);\n \t\t  __sbin->gbump(__wrote);\n \t\t  __ret += __wrote;\n \t\t  if (__wrote < __n)\n@@ -144,12 +143,8 @@ namespace std\n \t\t}\n \t    }\n \t}\n-      catch(exception& __fail) \n-\t{\n-\t  __ios.setstate(ios_base::failbit);\n-\t  if ((__ios.exceptions() & ios_base::failbit) != 0)\n-\t    __throw_exception_again;\n-\t}\n+      catch(...)\n+\t{ __throw_exception_again; }\n       return __ret;\n     }\n "}, {"sha": "ace6cdd56ede50bdfc7a63abab25cc2aaa2ecfa7", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/exceptions/char/9561.cc", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fexceptions%2Fchar%2F9561.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fexceptions%2Fchar%2F9561.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fexceptions%2Fchar%2F9561.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -21,44 +21,36 @@\n #include <istream>\n #include <streambuf>\n #include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n \n // libstdc++/9561\n-struct foobar: std::exception { };\n-\n-struct buf: std::streambuf\n-{\n-    virtual int_type underflow () {\n-        throw foobar ();\n-        return -1;\n-    }\n-    virtual int_type uflow () {\n-        throw foobar ();\n-        return -1;\n-    }\n-};\n-\n void test01()\n {\n   using namespace std;\n   bool test __attribute__((unused)) = true;\n \n-  buf b;\n+  __gnu_test::fail_streambuf b;\n   std::istream strm (&b);\n   strm.exceptions (std::ios::badbit);\n   int i = 0;\n \n-  try {\n-    i = strm.get();\n-  }\n-  catch (foobar) {\n-    // strm should throw foobar and not do anything else\n-    VERIFY(strm.bad());\n-  }\n-  catch (...) {\n-    VERIFY(false);\n-  }\n+  try \n+    {\n+      i = strm.get();\n+      i = strm.get();\n+      i = strm.get();\n+    }\n+  catch (__gnu_test::underflow_error&) \n+    {\n+      // strm should throw facet_error and not do anything else\n+      VERIFY(strm.bad());\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n \n-  VERIFY(i == 0);\n+  VERIFY(i == 's');\n }\n \n "}, {"sha": "f7c43e2b63058df8b437178e90e94e9c99c2cd8f", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/exceptions_badbit_throw.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,76 @@\n+// 2003-03-08  Jerry Quinn  <jlquinn@optonline.net>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// libstdc++/9561\n+template<typename T>\n+void test_badbit()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale::classic(), new __gnu_test::fail_num_get);\n+  istringstream stream(\"jaylib - champion sound\");\n+  stream.imbue(loc);\n+\n+  stream.exceptions(ios_base::badbit);\n+  VERIFY( stream.rdstate() == ios_base::goodbit );\n+\n+  try \n+    {\n+      T i;\n+      stream >> i;\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::facet_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+\n+int main()\n+{\n+  test_badbit<bool>();\n+  test_badbit<short>();\n+  test_badbit<unsigned short>();\n+  test_badbit<int>();\n+  test_badbit<unsigned int>();\n+  test_badbit<long>();\n+  test_badbit<unsigned long>();\n+\n+  test_badbit<float>();\n+  test_badbit<double>();\n+\n+  test_badbit<void*>();\n+\n+  return 0;\n+}"}, {"sha": "e2ffe3623d419fc18e20ccb589f3a0756f6cc6a4", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/exceptions_failbit.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/10093\n+template<typename T>\n+void test_failbit()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  istringstream stream(\"jaylib - champion sound\");\n+  stream.exceptions(ios_base::failbit);\n+  \n+  try\n+    {\n+      T i;\n+      stream >> i;\n+      VERIFY( false );\n+    }\n+  catch (const ios_base::failure&)\n+    { \n+      // stream should set failbit and throw ios_base::failure.\n+      VERIFY( stream.fail() );\n+      VERIFY( !stream.bad() );\n+      VERIFY( !stream.eof() );\n+    }  \n+  catch(...)\n+    { VERIFY( false ); }\n+}\n+\n+int main()\n+{\n+  test_failbit<bool>();\n+  test_failbit<short>();\n+  test_failbit<unsigned short>();\n+  test_failbit<int>();\n+  test_failbit<unsigned int>();\n+  test_failbit<long>();\n+  test_failbit<unsigned long>();\n+\n+  test_failbit<float>();\n+  test_failbit<double>();\n+\n+  test_failbit<void*>();\n+\n+  return 0;\n+}"}, {"sha": "0b223bcbeefcf61a878e5aec2919f280cb2e3ef5", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/exceptions_failbit_throw.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// libstdc++/10093\n+template<typename T>\n+void test_failbit()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale::classic(), new __gnu_test::fail_num_get);\n+  istringstream stream(\"jaylib - champion sound\");\n+  stream.imbue(loc);\n+\n+  stream.exceptions(ios_base::failbit);\n+  \n+  try\n+    {\n+      T i;\n+      stream >> i;\n+    }\n+  catch (const ios_base::failure&)\n+    { VERIFY( false ); }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+  // stream should set badbit.\n+  VERIFY( stream.bad() );\n+  VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+  VERIFY( !stream.eof() );\n+}\n+\n+int main()\n+{\n+  test_failbit<bool>();\n+  test_failbit<short>();\n+  test_failbit<unsigned short>();\n+  test_failbit<int>();\n+  test_failbit<unsigned int>();\n+  test_failbit<long>();\n+  test_failbit<unsigned long>();\n+\n+  test_failbit<float>();\n+  test_failbit<double>();\n+\n+  test_failbit<void*>();\n+\n+  return 0;\n+}"}, {"sha": "2079b453995cc0a21a370e4b1a7ef48f7751afa7", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/error_failbit.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Ferror_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Ferror_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Ferror_failbit.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test6()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bib;\n+  istream stream(&bib);\n+  stringbuf sbuf(\"\", ios_base::out);\n+\n+  stream >> &sbuf;\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+void test8()\n+{\n+  bool test __attribute__((unused)) = true;\n+  istringstream stream(\"foo, bar, qux\");\n+  __gnu_test::fail_streambuf bob;\n+\n+  stream >> &bob;\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test6();\n+  test8();\n+  return 0;\n+}"}, {"sha": "86c0a8a1a92f0f0ed4db61d6a6424baa54952aeb", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/exceptions_badbit_throw.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_badbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test14()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bib;\n+  istream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+  stringbuf sbuf(\"\", ios_base::out);\n+\n+  try\n+    {\n+      stream >> &sbuf;\n+    }\n+  catch (...)\n+    { VERIFY(false); }\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+void test16()\n+{\n+  bool test __attribute__((unused)) = true;\n+  istringstream stream(\"foo, bar, qux\");\n+  stream.exceptions(ios_base::badbit);\n+  __gnu_test::fail_streambuf bob;\n+\n+  try\n+    {\n+      stream >> &bob;\n+    }\n+  catch (...)\n+    { VERIFY(false); }\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test14();\n+  test16();\n+  return 0;\n+}"}, {"sha": "199750af0bd9fa932b0a8b610f11d8cc97c824e8", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/exceptions_failbit_throw.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_failbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test10()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bib;\n+  istream stream(&bib);\n+  stream.exceptions(ios_base::failbit);\n+  stringbuf sbuf(\"\", ios_base::out);\n+\n+  try\n+    {\n+      stream >> &sbuf;\n+      VERIFY(false);\n+    }\n+  catch (ios_base::failure&)\n+    { VERIFY(false); }\n+  catch (__gnu_test::underflow_error&)\n+    { }\n+  catch (...)\n+    { VERIFY(false); }\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+void test12()\n+{\n+  bool test __attribute__((unused)) = true;\n+  istringstream stream(\"foo, bar, qux\");\n+  stream.exceptions(ios_base::failbit);\n+  __gnu_test::fail_streambuf bob;\n+\n+  try\n+    {\n+      stream >> &bob;\n+      VERIFY(false);\n+    }\n+  catch (ios_base::failure&)\n+    { VERIFY(false); }\n+  catch (__gnu_test::overflow_error&)\n+    { }\n+  catch (...)\n+    { VERIFY(false); }\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test10();\n+  test12();\n+  return 0;\n+}"}, {"sha": "8e012d137147a76d861bc180f255a18bd5b5fff7", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/exceptions_null.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  istringstream stream;\n+  stream >> static_cast<streambuf*>(NULL);\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+}\n+\n+void test4()\n+{\n+  bool test __attribute__((unused)) = true;\n+  istringstream stream;\n+  stream.exceptions(ios_base::failbit);\n+\n+  try\n+    {\n+      stream >> static_cast<streambuf*>(NULL);\n+      VERIFY(false);\n+    }\n+  catch (ios_base::failure&)\n+    {\n+    }\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test2();\n+  test4();\n+  return 0;\n+}"}, {"sha": "bf893408064de7006c7dcd2e49ac655023dfe6c2", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/seekg/char/exceptions_badbit_throw.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fseekg%2Fchar%2Fexceptions_badbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,96 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bib;\n+  istream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  istream::pos_type pos;\n+\n+  try\n+    {\n+      stream.seekg(pos);\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bib;\n+  istream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  istream::off_type off;\n+\n+  try\n+    {\n+      stream.seekg(off, ios_base::cur);\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+// libstdc++/9546\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "bd90ab26ba71d3e8c55c33b060173506e9d90a0e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/tellg/char/exceptions_badbit_throw.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Ftellg%2Fchar%2Fexceptions_badbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bib;\n+  istream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  try\n+    {\n+      stream.tellg();\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+// libstdc++/9546\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e8c5653189d6d7a6789203822bcfeb4a4163bb2e", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/char/exceptions_badbit_throw.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2Fexceptions_badbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bib;\n+  ostream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  try\n+    {\n+      stream.flush();\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+// libstdc++/9546\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a084dbdb7d496a801c52b62718494ded07fb1f00", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/exceptions_badbit_throw.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_badbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,74 @@\n+// 2003-03-08  Jerry Quinn  <jlquinn@optonline.net>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// libstdc++/9561\n+template<typename T>\n+void test_badbit()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale::classic(), new __gnu_test::fail_num_put);\n+  ostringstream stream(\"jaylib - champion sound\");\n+  stream.imbue(loc);\n+\n+  stream.exceptions(ios_base::badbit);\n+  VERIFY( stream.rdstate() == ios_base::goodbit );\n+\n+  try \n+    {\n+      T i;\n+      stream << i;\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::facet_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+\n+int main()\n+{\n+  test_badbit<bool>();\n+  test_badbit<short>();\n+  test_badbit<unsigned short>();\n+  test_badbit<int>();\n+  test_badbit<unsigned int>();\n+  test_badbit<long>();\n+  test_badbit<unsigned long>();\n+\n+  test_badbit<float>();\n+  test_badbit<double>();\n+\n+  return 0;\n+}"}, {"sha": "a1fbe21178f94e415415093d0850eada48c14e5a", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_arithmetic/char/exceptions_failbit_throw.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_arithmetic%2Fchar%2Fexceptions_failbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// libstdc++/10093\n+template<typename T>\n+void test_failbit()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale::classic(), new __gnu_test::fail_num_put);\n+  ostringstream stream(\"jaylib - champion sound\");\n+  stream.imbue(loc);\n+\n+  stream.exceptions(ios_base::failbit);\n+  \n+  try\n+    {\n+      T i;\n+      stream << i;\n+    }\n+  catch (const ios_base::failure&)\n+    { VERIFY( false ); }\n+  catch(...)\n+    { VERIFY( false ); }\n+\n+    // stream should set badbit.\n+    VERIFY( stream.bad() );\n+    VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+    VERIFY( !stream.eof() );\n+}\n+\n+int main()\n+{\n+  test_failbit<bool>();\n+  test_failbit<short>();\n+  test_failbit<unsigned short>();\n+  test_failbit<int>();\n+  test_failbit<unsigned int>();\n+  test_failbit<long>();\n+  test_failbit<unsigned long>();\n+\n+  test_failbit<float>();\n+  test_failbit<double>();\n+\n+  return 0;\n+}"}, {"sha": "ce47b6f39895941d2e22f23ddaf96b2fb13f3f5c", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/error_failbit.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Ferror_failbit.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test5()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bob;\n+  ostream stream(&bob);\n+  stringbuf sbuf(\"Foo, bar, qux\", ios_base::in);\n+\n+  stream << &sbuf;\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+void test7()\n+{\n+  bool test __attribute__((unused)) = true;\n+  ostringstream stream;\n+  __gnu_test::fail_streambuf bib;\n+\n+  stream << &bib;\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test5();\n+  test7();\n+  return 0;\n+}"}, {"sha": "13ff248940b3113481139591d0ef4fa850171f1b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/exceptions_badbit_throw.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_badbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test13()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bob;\n+  ostream stream(&bob);\n+  stream.exceptions(ios_base::badbit);\n+  stringbuf sbuf(\"Foo, bar, qux\", ios_base::in);\n+\n+  try\n+    {\n+      stream << &sbuf;\n+    }\n+  catch (...)\n+    { VERIFY(false); }\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+void test15()\n+{\n+  bool test __attribute__((unused)) = true;\n+  ostringstream stream;\n+  stream.exceptions(ios_base::badbit);\n+  __gnu_test::fail_streambuf bib;\n+\n+  try\n+    {\n+      stream << &bib;\n+    }\n+  catch (...)\n+    { VERIFY(false); }\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test13();\n+  test15();\n+  return 0;\n+}"}, {"sha": "5abaf92b8042cbe11340361831d5c1c8c75776f3", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/exceptions_failbit_throw.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_failbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_failbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_failbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test9()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bob;\n+  ostream stream(&bob);\n+  stream.exceptions(ios_base::failbit);\n+  stringbuf sbuf(\"Foo, bar, qux\", ios_base::in);\n+\n+  try\n+    {\n+      stream << &sbuf;\n+      VERIFY(false);\n+    }\n+  catch (ios_base::failure&)\n+    { VERIFY(false); }\n+  catch (__gnu_test::overflow_error&)\n+    { }\n+  catch (...)\n+    { VERIFY(false); }\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+void test11()\n+{\n+  bool test __attribute__((unused)) = true;\n+  ostringstream stream;\n+  stream.exceptions(ios_base::failbit);\n+  __gnu_test::fail_streambuf bib;\n+\n+  try\n+    {\n+      stream << &bib;\n+      VERIFY(false);\n+    }\n+  catch (ios_base::failure&)\n+    { VERIFY(false); }\n+  catch (__gnu_test::underflow_error&)\n+    { }\n+  catch (...)\n+    { VERIFY(false); }\n+\n+  VERIFY(stream.rdstate() & ios_base::failbit);\n+  VERIFY((stream.rdstate() & ios_base::badbit) == 0);\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test9();\n+  test11();\n+  return 0;\n+}"}, {"sha": "3f2de4d683b7a566febc7022d6cf35402c2dd866", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/exceptions_null.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <istream>\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+void test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+  ostringstream stream;\n+  stream << static_cast<streambuf*>(NULL);\n+  VERIFY(stream.rdstate() & ios_base::badbit);\n+}\n+\n+void test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+  ostringstream stream;\n+  stream.exceptions(ios_base::badbit);\n+\t\n+  try\n+    {\n+      stream << static_cast<streambuf*>(NULL);\n+      VERIFY(false);\n+    }\n+  catch (ios_base::failure&)\n+    {\n+    }\n+\n+  VERIFY(stream.rdstate() & ios_base::badbit);\n+}\n+\n+// libstdc++/9371\n+int main()\n+{\n+  test1();\n+  test3();\n+  return 0;\n+}"}, {"sha": "b0b30518eb0ac06fc3c8a7b5b61b12bd036c8b8b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/seekp/char/exceptions_badbit_throw.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fseekp%2Fchar%2Fexceptions_badbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,96 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bib;\n+  ostream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  ostream::pos_type pos;\n+\n+  try\n+    {\n+      stream.seekp(pos);\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bib;\n+  ostream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  ostream::off_type off;\n+\n+  try\n+    {\n+      stream.seekp(off, ios_base::cur);\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+// libstdc++/9546\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "01d346ab7ba95537915a91e43af45b4ecd975029", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/tellp/char/exceptions_badbit_throw.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2Fexceptions_badbit_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2Fexceptions_badbit_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Ftellp%2Fchar%2Fexceptions_badbit_throw.cc?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+using namespace std;\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  __gnu_test::fail_streambuf bib;\n+  ostream stream(&bib);\n+  stream.exceptions(ios_base::badbit);\n+\n+  try\n+    {\n+      stream.tellp();\n+      VERIFY( false );\n+    }\n+  catch (const __gnu_test::positioning_error&) \n+    {\n+      // stream should set badbit and rethrow facet_error.\n+      VERIFY( stream.bad() );\n+      VERIFY( (stream.rdstate() & ios_base::failbit) == 0 );\n+      VERIFY( !stream.eof() );\n+    }\n+  catch (...) \n+    {\n+      VERIFY(false);\n+    }\n+}\n+\n+// libstdc++/9546\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "294f4273662f3b6e38b0befafb9635a1cbfc93c5", "filename": "libstdc++-v3/testsuite/testsuite_io.h", "status": "modified", "additions": 159, "deletions": 2, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12841eb3d032e926775f49834b8941f57a047baf/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h?ref=12841eb3d032e926775f49834b8941f57a047baf", "patch": "@@ -70,8 +70,7 @@ namespace __gnu_test\n       bool one = this->pbase() == NULL; \n       bool two = this->pptr() == NULL; \n       return one && two;\n-    }\n-    \n+    }    \n   };\n \n   // Used to check if basic_streambuf::pubsync() has been called.\n@@ -97,6 +96,164 @@ namespace __gnu_test\n       return 0;\n     }\n   };\n+\n+  // Throws on all overflow and underflow calls.\n+  struct underflow_error: std::exception { };\n+  struct overflow_error: std::exception { };\n+  struct positioning_error: std::exception { };\n+\n+  struct fail_streambuf : std::streambuf\n+  {\n+    fail_streambuf()\n+    {\n+      static char p[] = \"s\";\n+      setg(p, p, p + 1);\n+    }\n+\n+    virtual int_type underflow() \n+    {\n+      throw underflow_error();\n+      return -1;\n+    }\n+  \n+    virtual int_type uflow() \n+    {\n+      throw underflow_error();\n+      return -1;\n+    }\n+\n+    virtual int_type\n+    overflow(int_type)\n+    {\n+      throw overflow_error();\n+      return -1;\n+    }\n+\n+    virtual pos_type \n+    seekoff(off_type, std::ios_base::seekdir, std::ios_base::openmode)\n+    { \n+      throw positioning_error();\n+      return pos_type(off_type(-1)); \n+    } \n+    \n+    virtual pos_type \n+    seekpos(pos_type, std::ios_base::openmode)\n+    { \n+      throw positioning_error();\n+      return pos_type(off_type(-1)); \n+    } \n+\n+    virtual int \n+    sync() \n+    { \n+      throw positioning_error();\n+      return 0; \n+    }\n+  };\n+\n+  // Facets that throw an exception for every virtual function.\n+  struct facet_error: std::exception { };\n+\n+  class fail_num_get : public std::num_get<char>\n+  {\n+    typedef std::ios_base ios_base;\n+\n+  protected:\n+    iter_type \n+    do_get(iter_type a, iter_type, ios_base&, ios_base::iostate&, bool&) const\n+    { throw facet_error(); return iter_type(); }\n+\n+    virtual iter_type \n+    do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, long&) const\n+    { throw facet_error(); return iter_type(); }\n+\n+    virtual iter_type \n+    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t   unsigned short&) const\n+    { throw facet_error(); return iter_type(); }\n+\n+    virtual iter_type \n+    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t   unsigned int&) const\n+    { throw facet_error(); return iter_type(); }\n+\n+    virtual iter_type \n+    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t   unsigned long&) const\n+    { throw facet_error(); return iter_type(); }\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG \n+    virtual iter_type \n+    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t   long long&) const\n+    { throw facet_error(); return iter_type(); }\n+\n+    virtual iter_type \n+    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t   unsigned long long&) const\n+    { throw facet_error(); return iter_type(); }\n+#endif\n+\n+    virtual iter_type \n+    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t   float&) const\n+    { throw facet_error(); return iter_type(); }\n+\n+    virtual iter_type \n+    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t   double&) const\n+    { throw facet_error(); return iter_type(); }\n+\n+    virtual iter_type \n+    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t   long double&) const\n+    { throw facet_error(); return iter_type(); }\n+\n+    virtual iter_type \n+    do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err, \n+\t   void*&) const\n+    { throw facet_error(); return iter_type(); }\n+  };\n+\n+  class fail_num_put : public std::num_put<char>\n+  {\n+    typedef std::ios_base ios_base;\n+\n+  protected:\n+    iter_type \n+    do_put(iter_type, ios_base&, char_type __fill, bool __v) const\n+    { throw facet_error(); return iter_type(NULL); }\n+\n+    virtual iter_type \n+    do_put(iter_type, ios_base&, char_type __fill, long __v) const\n+    { throw facet_error(); return iter_type(NULL); }\n+\n+    virtual iter_type \n+    do_put(iter_type, ios_base&, char_type __fill, unsigned long) const\n+    { throw facet_error(); return iter_type(NULL); }\n+\n+#ifdef _GLIBCXX_USE_LONG_LONG \n+    virtual iter_type \n+    do_put(iter_type, ios_base&, char_type __fill, long long __v) const\n+    { throw facet_error(); return iter_type(NULL); }\n+\n+    virtual iter_type \n+    do_put(iter_type, ios_base&, char_type __fill, unsigned long long) const\n+    { throw facet_error(); return iter_type(NULL); }\n+#endif\n+\n+    virtual iter_type \n+    do_put(iter_type, ios_base&, char_type __fill, double __v) const\n+    { throw facet_error(); return iter_type(NULL); }\n+\n+    virtual iter_type \n+    do_put(iter_type, ios_base&, char_type __fill, long double __v) const\n+    { throw facet_error(); return iter_type(NULL); }\n+\n+    virtual iter_type \n+    do_put(iter_type, ios_base&, char_type __fill, const void* __v) const\n+    { throw facet_error(); return iter_type(NULL); }\n+  };\n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_IO_H"}]}