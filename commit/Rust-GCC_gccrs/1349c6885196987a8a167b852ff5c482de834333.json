{"sha": "1349c6885196987a8a167b852ff5c482de834333", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM0OWM2ODg1MTk2OTg3YThhMTY3Yjg1MmZmNWM0ODJkZTgzNDMzMw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2006-02-09T01:35:33Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2006-02-09T01:35:33Z"}, "message": "re PR libgcj/25187 (dereferencing type-punned pointer warnings while building libgcj)\n\n2006-02-08  Bryce McKinlay  <mckinlay@redhat.com>\n\n        PR libgcj/25187:\n        * gnu/gcj/io/natSimpleSHSStream.cc\n        (gnu::gcj::io::SimpleSHSStream::shsFinal): Remove bogus cast.\n        * interpret.cc (_Jv_InterpMethod::run): Simplify arguments to\n        _Jv_InterpFrame().\n        * boehm.cc: #undef some autoconf macros before including gc-config.h.\n        (_Jv_MarkObject): Don't mark the class, it is reachable via the vtable.\n        (_Jv_MarkArray): Likewise.\n        * java/lang/ref/natReference.cc (java::lang::ref::Reference::create):\n        Simplify _Jv_GCRegisterDisappearingLink() call.\n        * java/lang/Class.h (getComponentType): Use element_type.\n        (element_type): New field declaration, as a union with \"methods\".\n        * java/lang/natClassLoader.cc (_Jv_NewArrayClass): Use \"element_type\".\n        * java/net/natVMNetworkInterfacePosix.cc\n        (java::net::VMNetworkInterface::getInterfaces): Add \"int\" cast to\n        avoid sign comparison warning.\n        * include/java-interp.h (_Jv_InterpFrame): Take thread as second\n        argument, not parent call frame.\n        * include/x86_64-signal.h (MAKE_THROW_FRAME): Use \"gregs\" directly,\n        without a cast.\n        (restore_rt): Declare with hidden visibility, not \"static\".\n        * posix.cc (_Jv_platform_initProperties): Make \"tmpdir\" a string\n        constant.\n        * jni.cc (_Jv_JNI_DestroyJavaVM): Use a union to avoid strict alias\n        warning\n\nFrom-SVN: r110783", "tree": {"sha": "726a8b9fcb5ec53a03add370b1409565ddac5505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/726a8b9fcb5ec53a03add370b1409565ddac5505"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1349c6885196987a8a167b852ff5c482de834333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1349c6885196987a8a167b852ff5c482de834333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1349c6885196987a8a167b852ff5c482de834333", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1349c6885196987a8a167b852ff5c482de834333/comments", "author": null, "committer": null, "parents": [{"sha": "c03a2b6f6879703fbf0655399ba73c7780c63336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c03a2b6f6879703fbf0655399ba73c7780c63336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c03a2b6f6879703fbf0655399ba73c7780c63336"}], "stats": {"total": 94, "additions": 65, "deletions": 29}, "files": [{"sha": "894add7fa3f870f14dca3a6c95bd6fe57d696dd4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -1,3 +1,31 @@\n+2006-02-08  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\tPR libgcj/25187:\n+\t* gnu/gcj/io/natSimpleSHSStream.cc\n+\t(gnu::gcj::io::SimpleSHSStream::shsFinal): Remove bogus cast.\n+\t* interpret.cc (_Jv_InterpMethod::run): Simplify arguments to\n+\t_Jv_InterpFrame(). \n+\t* boehm.cc: #undef some autoconf macros before including gc-config.h.\n+\t(_Jv_MarkObject): Don't mark the class, it is reachable via the vtable.\n+\t(_Jv_MarkArray): Likewise.\n+\t* java/lang/ref/natReference.cc (java::lang::ref::Reference::create):\n+\tSimplify _Jv_GCRegisterDisappearingLink() call.\n+\t* java/lang/Class.h (getComponentType): Use element_type.\n+\t(element_type): New field declaration, as a union with \"methods\".\n+\t* java/lang/natClassLoader.cc (_Jv_NewArrayClass): Use \"element_type\".\n+\t* java/net/natVMNetworkInterfacePosix.cc\n+\t(java::net::VMNetworkInterface::getInterfaces): Add \"int\" cast to\n+\tavoid sign comparison warning.\t\n+\t* include/java-interp.h (_Jv_InterpFrame): Take thread as second\n+\targument, not parent call frame.\n+\t* include/x86_64-signal.h (MAKE_THROW_FRAME): Use \"gregs\" directly,\n+\twithout a cast.\n+\t(restore_rt): Declare with hidden visibility, not \"static\".\n+\t* posix.cc (_Jv_platform_initProperties): Make \"tmpdir\" a string\n+\tconstant.\n+\t* jni.cc (_Jv_JNI_DestroyJavaVM): Use a union to avoid strict alias\n+\twarning.\n+\n 2006-02-08  Bryce McKinlay  <mckinlay@redhat.com>\n \n \tPR libgcj/26113:"}, {"sha": "7066e286b4960394f535f34ede81c4650f5460f3", "filename": "libjava/boehm.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -26,6 +26,12 @@ details.  */\n #undef TRUE\n #undef FALSE\n \n+// We include two autoconf headers. Avoid multiple definition warnings.\n+#undef PACKAGE_NAME\n+#undef PACKAGE_STRING\n+#undef PACKAGE_TARNAME\n+#undef PACKAGE_VERSION\n+\n extern \"C\"\n {\n #include <gc_config.h>\n@@ -93,9 +99,6 @@ _Jv_MarkObj (void *addr, void *msp, void *msl, void *env)\n     p = (GC_PTR) obj->sync_info;\n     MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, obj);\n # endif\n-  // Mark the object's class.\n-  p = (GC_PTR) klass;\n-  MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, obj);\n \n   if (__builtin_expect (klass == &java::lang::Class::class$, false))\n     {\n@@ -208,7 +211,6 @@ _Jv_MarkArray (void *addr, void *msp, void *msl, void *env)\n   // we may need to round up the size.\n   if (__builtin_expect (! dt || !(dt -> get_finalizer()), false))\n     return mark_stack_ptr;\n-  jclass klass = dt->clas;\n   GC_PTR p;\n \n   p = (GC_PTR) dt;\n@@ -219,9 +221,6 @@ _Jv_MarkArray (void *addr, void *msp, void *msl, void *env)\n     p = (GC_PTR) array->sync_info;\n     MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, array);\n # endif\n-  // Mark the object's class.\n-  p = (GC_PTR) klass;\n-  MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, &(dt -> clas));\n \n   for (int i = 0; i < JvGetArrayLength (array); ++i)\n     {"}, {"sha": "0487ce740be6da54d3d5b3d196e8978e2ef99a87", "filename": "libjava/gnu/gcj/io/natSimpleSHSStream.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fgnu%2Fgcj%2Fio%2FnatSimpleSHSStream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fgnu%2Fgcj%2Fio%2FnatSimpleSHSStream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fio%2FnatSimpleSHSStream.cc?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -29,7 +29,7 @@ gnu::gcj::io::SimpleSHSStream::shsFinal (jbyteArray shs_info)\n   ::shsFinal (info);\n \n   jbyteArray buffer = JvNewByteArray (SHS_DIGESTSIZE);\n-  memcpy (elements (buffer), (jbyte *)&info->digest, SHS_DIGESTSIZE);\n+  memcpy (elements (buffer), &info->digest, SHS_DIGESTSIZE);\n   return buffer;\n }\n     "}, {"sha": "aed642b576d30ec45eb2f510dc6dc9c3e15fdeef", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -22,6 +22,8 @@ details.  */\n #include <java/lang/Class.h>\n #include <java/lang/ClassLoader.h>\n #include <java/lang/reflect/Modifier.h>\n+#include <java/lang/Thread.h>\n+#include <gnu/gcj/RawData.h>\n \n // Define this to get the direct-threaded interpreter.  If undefined,\n // we revert to a basic bytecode interpreter.  The former is faster\n@@ -290,22 +292,22 @@ class _Jv_JNIMethod : public _Jv_MethodBase\n struct _Jv_InterpFrame\n {\n   _Jv_InterpMethod *self;\n-  _Jv_InterpFrame **ptr;\n+  java::lang::Thread *thread;\n   _Jv_InterpFrame *next;\n   pc_t pc;\n \n-  _Jv_InterpFrame (_Jv_InterpMethod *s, _Jv_InterpFrame **n)\n+  _Jv_InterpFrame (_Jv_InterpMethod *s, java::lang::Thread *thr)\n   {\n     self = s;\n-    ptr = n;\n-    next = *n;\n-    *n = this;\n+    thread = thr;\n+    next = (_Jv_InterpFrame *) thr->interp_frame;\n+    thr->interp_frame = (gnu::gcj::RawData *) this;\n     pc = NULL;\n   }\n \n   ~_Jv_InterpFrame ()\n   {\n-    *ptr = next;\n+    thread->interp_frame = (gnu::gcj::RawData *) next;\n   }\n };\n "}, {"sha": "f6df7d71732e86620d6170a8c4a8c392d670f940", "filename": "libjava/include/x86_64-signal.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Finclude%2Fx86_64-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Finclude%2Fx86_64-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fx86_64-signal.h?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -41,8 +41,7 @@ do\t\t\t\t\t\t\t\t\t     \\\n      instruction:  the x86_64 exception handler expects\t\t\t     \\\n      the PC to point to the instruction after a call. */\t\t     \\\n   struct ucontext *_uc = (struct ucontext *)_p;\t\t\t\t     \\\n-  volatile struct sigcontext *_sc = (struct sigcontext *) &_uc->uc_mcontext; \\\n-  _sc->rip += 2;\t\t\t\t\t\t\t     \\\n+  _uc->uc_mcontext.gregs[REG_RIP] += 2;\t\t\t\t     \t     \\\n }\t\t\t\t\t\t\t\t\t     \\\n while (0)\n \n@@ -60,7 +59,8 @@ asm\t\t\t\t\t\t\\\n \n /* The return code for realtime-signals.  */\n RESTORE (restore_rt, __NR_rt_sigreturn)\n-static void restore_rt (void) asm (\"__restore_rt\");\n+void restore_rt (void) asm (\"__restore_rt\")\n+  __attribute__ ((visibility (\"hidden\")));\n \n #define INIT_SEGV\t\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\\"}, {"sha": "ddb469788f0c116051c9064c34bbce409dec8121", "filename": "libjava/interpret.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -807,8 +807,7 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n   // destructor so it cleans up automatically when the interpreter\n   // returns.\n   java::lang::Thread *thread = java::lang::Thread::currentThread();\n-  _Jv_InterpFrame frame_desc (meth,\n-\t\t\t      (_Jv_InterpFrame **) &thread->interp_frame);\n+  _Jv_InterpFrame frame_desc (meth, thread);\n \n   _Jv_word stack[meth->max_stack];\n   _Jv_word *sp = stack;"}, {"sha": "62e280ced827f6baf8eba354d8ddf49b1c225a65", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -368,7 +368,7 @@ class java::lang::Class : public java::lang::Object\n \n   inline jclass getComponentType (void)\n     {\n-      return isArray () ? (* (jclass *) &methods) : 0;\n+      return isArray () ? element_type : 0;\n     }\n \n   jboolean isAssignableFrom (jclass cls);\n@@ -554,7 +554,11 @@ class java::lang::Class : public java::lang::Object\n   _Jv_Constants constants;\n   // Methods.  If this is an array class, then this field holds a\n   // pointer to the element type.\n-  _Jv_Method *methods;\n+  union\n+  {\n+    _Jv_Method *methods;\n+    jclass element_type;\n+  };\n   // Number of methods.  If this class is primitive, this holds the\n   // character used to represent this type in a signature.\n   jshort method_count;"}, {"sha": "fa6f201db468a2f98c1abd4e750b05abf381da67", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -458,7 +458,7 @@ _Jv_NewArrayClass (jclass element, java::lang::ClassLoader *loader,\n     = java::lang::Object::class$.vtable_method_count;\n \n   // Stash the pointer to the element type.\n-  array_class->methods = (_Jv_Method *) element;\n+  array_class->element_type = element;\n \n   // Register our interfaces.\n   static jclass interfaces[] ="}, {"sha": "23f435f4def20b1ed18e98eaa863b054979bf193", "filename": "libjava/java/lang/ref/natReference.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fjava%2Flang%2Fref%2FnatReference.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fjava%2Flang%2Fref%2FnatReference.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Fref%2FnatReference.cc?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -363,8 +363,8 @@ ::java::lang::ref::Reference::create (jobject ref)\n       // finalizer for ourselves as well.\n       _Jv_RegisterFinalizer (this, finalize_reference);\n       _Jv_RegisterFinalizer (referent, finalize_referred_to_object);\n-      jobject *objp = reinterpret_cast<jobject *> (&referent);\n-      _Jv_GCRegisterDisappearingLink (objp);\n+      gnu::gcj::RawData **p = &referent;\n+     _Jv_GCRegisterDisappearingLink ((jobject *) p);\n       add_to_hash (this);\n     }\n }"}, {"sha": "b840907ccab3c8d589a98050294365a2fb3a03c8", "filename": "libjava/java/net/natVMNetworkInterfacePosix.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fjava%2Fnet%2FnatVMNetworkInterfacePosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fjava%2Fnet%2FnatVMNetworkInterfacePosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatVMNetworkInterfacePosix.cc?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -75,7 +75,7 @@ java::net::VMNetworkInterface::getInterfaces ()\n       if (::ioctl (fd, SIOCGIFCONF, &if_data) < 0)\n         throw new java::net::SocketException;\n     }\n-  while (if_data.ifc_len >= (sizeof (struct ifreq) * num_interfaces));\n+  while (if_data.ifc_len >= (int) (sizeof (struct ifreq) * num_interfaces));\n \n   // Get addresses of all interfaces.\n   if_record = if_data.ifc_req;"}, {"sha": "62a96ce9c6f69eff90b1f469476c6f50eaeec9bd", "filename": "libjava/jni.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -2426,7 +2426,12 @@ _Jv_JNI_DestroyJavaVM (JavaVM *vm)\n {\n   JvAssert (the_vm && vm == the_vm);\n \n-  JNIEnv *env;\n+  union\n+  {\n+    JNIEnv *env;\n+    void *env_p;\n+  };\n+\n   if (_Jv_ThreadCurrent () != NULL)\n     {\n       jstring main_name;\n@@ -2440,8 +2445,7 @@ _Jv_JNI_DestroyJavaVM (JavaVM *vm)\n \t  return JNI_ERR;\n \t}\n \n-      jint r = _Jv_JNI_AttachCurrentThread (vm, main_name,\n-\t\t\t\t\t    reinterpret_cast<void **> (&env),\n+      jint r = _Jv_JNI_AttachCurrentThread (vm, main_name, &env_p,\n \t\t\t\t\t    NULL, false);\n       if (r < 0)\n \treturn r;"}, {"sha": "3b551966fca3a930f208557aa5681b143cced463", "filename": "libjava/posix.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fposix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1349c6885196987a8a167b852ff5c482de834333/libjava%2Fposix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix.cc?ref=1349c6885196987a8a167b852ff5c482de834333", "patch": "@@ -98,7 +98,7 @@ _Jv_platform_initProperties (java::util::Properties* newprops)\n   SET (\"file.separator\", \"/\");\n   SET (\"path.separator\", \":\");\n   SET (\"line.separator\", \"\\n\");\n-  char *tmpdir = ::getenv(\"TMPDIR\");\n+  const char *tmpdir = ::getenv(\"TMPDIR\");\n   if (! tmpdir)\n     tmpdir = \"/tmp\";\n   SET (\"java.io.tmpdir\", tmpdir);"}]}