{"sha": "dd5e783701bbab8fd871ef8befbb9557ca205086", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ1ZTc4MzcwMWJiYWI4ZmQ4NzFlZjhiZWZiYjk1NTdjYTIwNTA4Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-26T20:23:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-26T20:23:34Z"}, "message": "re PR target/61586 (ICE on alpha in alpha_handle_trap_shadows, at config/alpha/alpha.c:8724)\n\n\tPR target/61586\n\t* config/alpha/alpha.c (alpha_handle_trap_shadows): Handle BARRIER RTX.\n\ntestsuite/ChangeLog:\n\n2014-06-26  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/61586\n\t* gcc.target/alpha/pr61586.c: New test.\n\nFrom-SVN: r212053", "tree": {"sha": "b485c15d867f6ded916f83dc09ce206ed5acf7d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b485c15d867f6ded916f83dc09ce206ed5acf7d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd5e783701bbab8fd871ef8befbb9557ca205086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd5e783701bbab8fd871ef8befbb9557ca205086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd5e783701bbab8fd871ef8befbb9557ca205086", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd5e783701bbab8fd871ef8befbb9557ca205086/comments", "author": null, "committer": null, "parents": [{"sha": "efa77d22f915b88ac9895fe34512b9d6e4064032", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa77d22f915b88ac9895fe34512b9d6e4064032", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa77d22f915b88ac9895fe34512b9d6e4064032"}], "stats": {"total": 187, "additions": 108, "deletions": 79}, "files": [{"sha": "13eb7f3dee5cc96aec8dd40a4a8bc1728c541e50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 81, "deletions": 74, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd5e783701bbab8fd871ef8befbb9557ca205086/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd5e783701bbab8fd871ef8befbb9557ca205086/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd5e783701bbab8fd871ef8befbb9557ca205086", "patch": "@@ -1,3 +1,8 @@\n+2014-06-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/61586\n+\t* config/alpha/alpha.c (alpha_handle_trap_shadows): Handle BARRIER RTX.\n+\n 2014-06-26  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* doc/invoke.texi (-fsemantic-interposition): Document.\n@@ -36,8 +41,7 @@\n \t* opts.c (default_options_optimization): Set\n \tPARAM_ALLOW_STORE_DATA_RACES to one at -Ofast.\n \t* doc/invoke.texi (allow-load-data-races)\n-\t(allow-packed-load-data-races, allow-packed-store-data-races):\n-\tRemoved.\n+\t(allow-packed-load-data-races, allow-packed-store-data-races): Removed.\n \t(allow-store-data-races): Document the new default.\n \n 2014-06-26  Martin Jambor  <mjambor@suse.cz>\n@@ -59,59 +63,59 @@\n \n 2014-06-26  Bernd Schmidt  <bernds@codesourcery.com>\n \n-        * Makefile.in (COLLECT2_OBJS): Add collect-utils.o.\n-        (LTO_WRAPPER_OBJS): New variable.\n-        (lto-wrapper$(exeext)): Use it.\n-        * collect2.c: Include \"collect-utils.h\".\n-        (verbose, debug): Remove variables.\n-        (at_file_supplied): No longer static.\n-        (tool_name): New variable.\n-        (do_wait, fork_execute, maybe_unlink): Don't declare.\n-        (tool_cleanup): No longer static.\n-        (notice): Remove function.\n-        (maybe_run_lto_and_relink, main, do_dsymutil): Add new arg to\n-        fork_execute calls.\n-        (collect_wait, do_wait, collect_execute): Remove functions.\n-        (maybe_unlink): No longer static.\n-        * collect2.h (verbose, debug): Don't declare.\n-        (at_file_supplied): Declare.\n-        * collect-utils.c (utils_cleanup): New arg from_signal.  All callers\n-        changed.\n-        (collect_execute): Replace with implementation from collect2, plus a\n-        new arg use_atfile.  All callers changed.\n-        (collect_wait): Replace with implementation from collect2.\n-        (maybe_unlink_file): Remove function.\n-        (fork_execute): Replace with implementation from collect2, plus a\n-        new arg use_atfile.  All callers changed.\n-        (do_wait): Add call to utils_cleanup to the error path.\n-        * collect-utils.h (collect_execute, fork_execute, utils_cleanup)\n-        (tool_cleanup): Adjust declarations.\n-        * lto-wrapper.c (tool_cleanup): Add unused bool argument.\n-        * tlink.c: Include \"collect-utils.h\".\n-        (tlink_execute): New arg use_atfile.  All callers changed.\n-        (tlink_init, tlink_execute): Remove declarations.\n-\n-    \t* collect-utils.c (save_temps): New variable.\n-    \t(do_wait): Use it instead of debug.  Use fatal_error.\n-    \t* collect-utils.h (save_temps): Declare.\n-    \t* collect2.c (verbose): Rename from vflag.  All uses changed.\n-    \t(tool_cleanup): New function, copied from collect_atexit.\n-    \t(collect_atexit, handler): Just call it.\n-    \t* collect2.h (verbose): Declaration renamed from vflag.\n-    \t* lto-wrapper.c (maybe_unlink, run_gcc): Use save_temps instead of\n-    \tdebug.\n-\n-        * Makefile.in (ALL_HOST_BACKEND_OBJS): Add collect-utils.o.\n-        (lto-wrapper$(exeext)): Link with collect-utils.o.\n-        * collect-utils.c: New file.\n-        * collect-utils.h: New file.\n-        * lto-wrapper.c: Include \"collect-utils.h\".\n-        (args_name): Delete variable.\n-        (tool_name): New variable.\n-        (tool_cleanup): New function.\n-        (maybe_unlink): Renamed from maybe_unlink_file.  All callers changed.\n-        (lto_wrapper_cleanup, fatal_signal, collect_execute, collect_wait,\n-        fork_execute): Remove functions.\n+\t* Makefile.in (COLLECT2_OBJS): Add collect-utils.o.\n+\t(LTO_WRAPPER_OBJS): New variable.\n+\t(lto-wrapper$(exeext)): Use it.\n+\t* collect2.c: Include \"collect-utils.h\".\n+\t(verbose, debug): Remove variables.\n+\t(at_file_supplied): No longer static.\n+\t(tool_name): New variable.\n+\t(do_wait, fork_execute, maybe_unlink): Don't declare.\n+\t(tool_cleanup): No longer static.\n+\t(notice): Remove function.\n+\t(maybe_run_lto_and_relink, main, do_dsymutil): Add new arg to\n+\tfork_execute calls.\n+\t(collect_wait, do_wait, collect_execute): Remove functions.\n+\t(maybe_unlink): No longer static.\n+\t* collect2.h (verbose, debug): Don't declare.\n+\t(at_file_supplied): Declare.\n+\t* collect-utils.c (utils_cleanup): New arg from_signal.  All callers\n+\tchanged.\n+\t(collect_execute): Replace with implementation from collect2, plus a\n+\tnew arg use_atfile.  All callers changed.\n+\t(collect_wait): Replace with implementation from collect2.\n+\t(maybe_unlink_file): Remove function.\n+\t(fork_execute): Replace with implementation from collect2, plus a\n+\tnew arg use_atfile.  All callers changed.\n+\t(do_wait): Add call to utils_cleanup to the error path.\n+\t* collect-utils.h (collect_execute, fork_execute, utils_cleanup)\n+\t(tool_cleanup): Adjust declarations.\n+\t* lto-wrapper.c (tool_cleanup): Add unused bool argument.\n+\t* tlink.c: Include \"collect-utils.h\".\n+\t(tlink_execute): New arg use_atfile.  All callers changed.\n+\t(tlink_init, tlink_execute): Remove declarations.\n+\n+\t* collect-utils.c (save_temps): New variable.\n+\t(do_wait): Use it instead of debug.  Use fatal_error.\n+\t* collect-utils.h (save_temps): Declare.\n+\t* collect2.c (verbose): Rename from vflag.  All uses changed.\n+\t(tool_cleanup): New function, copied from collect_atexit.\n+\t(collect_atexit, handler): Just call it.\n+\t* collect2.h (verbose): Declaration renamed from vflag.\n+\t* lto-wrapper.c (maybe_unlink, run_gcc): Use save_temps instead of\n+\tdebug.\n+\n+\t* Makefile.in (ALL_HOST_BACKEND_OBJS): Add collect-utils.o.\n+\t(lto-wrapper$(exeext)): Link with collect-utils.o.\n+\t* collect-utils.c: New file.\n+\t* collect-utils.h: New file.\n+\t* lto-wrapper.c: Include \"collect-utils.h\".\n+\t(args_name): Delete variable.\n+\t(tool_name): New variable.\n+\t(tool_cleanup): New function.\n+\t(maybe_unlink): Renamed from maybe_unlink_file.  All callers changed.\n+\t(lto_wrapper_cleanup, fatal_signal, collect_execute, collect_wait)\n+\t(fork_execute): Remove functions.\n \n 2014-06-26  Nick Clifton  <nickc@redhat.com>\n \n@@ -139,12 +143,16 @@\n \n 2014-06-25  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* toplev.c (backend_init_target): Move init_emit_regs and init_regs to...\n+\t* toplev.c (backend_init_target): Move init_emit_regs and\n+\tinit_regs to...\n \t(backend_init) ... here; skip ira_init_once and backend_init_target.\n-\t(target_reinit) ... and here; clear this_target_rtl->lang_dependent_initialized.\n-\t(lang_dependent_init_target): Clear this_target_rtl->lang_dependent_initialized;\n+\t(target_reinit) ... and here; clear\n+\tthis_target_rtl->lang_dependent_initialized.\n+\t(lang_dependent_init_target): Clear\n+\tthis_target_rtl->lang_dependent_initialized;\n \tbreak out rtl initialization to ...\n-\t(initialize_rtl): ... here; call also backend_init_target and ira_init_once.\n+\t(initialize_rtl): ... here; call also backend_init_target\n+\tand ira_init_once.\n \t* toplev.h (initialize_rtl): New function.\n \t* function.c: Include toplev.h\n \t(init_function_start): Call initialize_rtl.\n@@ -241,7 +249,8 @@\n \t(set_writeonly_bit): Likewise.\n \t* lto-cgraph.c: Implementation of new symtab_node member functions\n \tthat uses new IPA REF functions.\n-\t* lto-streamer-in.c (fixup_call_stmt_edges_1): New IPA REF function used.\n+\t* lto-streamer-in.c (fixup_call_stmt_edges_1): New IPA REF\n+\tfunction used.\n \t* lto-streamer-out.c (output_symbol_p): Likewise.\n \t* lto-streamer.h (referenced_from_this_partition_p): Argument type\n \tchanged.\n@@ -447,9 +456,9 @@\n \ttree-ssa-reassoc.c, tree-ssa-sccvn.c, tree-ssa-strlen.c,\n \ttree-ssa-structalias.c, tree-ssa-tail-merge.c,\n \ttree-ssa-threadupdate.c, tree-ssa-uncprop.c,\n-tree-vect-data-refs.c, tree-vect-loop.c, tree-vectorizer.c,\n-tree-vectorizer.h, valtrack.c, valtrack.h, var-tracking.c,\n-vtable-verify.c, vtable-verify.h: Adjust.\n+\ttree-vect-data-refs.c, tree-vect-loop.c, tree-vectorizer.c,\n+\ttree-vectorizer.h, valtrack.c, valtrack.h, var-tracking.c,\n+\tvtable-verify.c, vtable-verify.h: Adjust.\n \n 2014-06-24  Richard Biener  <rguenther@suse.de>\n \n@@ -503,8 +512,8 @@ vtable-verify.c, vtable-verify.h: Adjust.\n \t* varpool.c (dump_varpool_node): Dump used_by_single_function.\n \t* tree-pass.h (make_pass_ipa_single_use): New pass.\n \t* cgraph.h (used_by_single_function): New flag.\n-\t* lto-cgraph.c (lto_output_varpool_node, input_varpool_node): Stream\n-\tit.\n+\t* lto-cgraph.c (lto_output_varpool_node, input_varpool_node):\n+\tStream it.\n \t* passes.def (pass_ipa_single_use): Scedule.\n \t* ipa.c (BOTTOM): New macro.\n \t(meet): New function\n@@ -518,10 +527,8 @@ vtable-verify.c, vtable-verify.h: Adjust.\n 2014-06-23  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/39284\n-\t* passes.def (peephole2): Move peephole2 pass before\n-\tbefore sched2 pass.\n-\t* config/i386/i386.md (peehole2): Combine memories\n-\tand indirect jumps.\n+\t* passes.def (peephole2): Move peephole2 pass before sched2 pass.\n+\t* config/i386/i386.md (peehole2): Combine memories and indirect jumps.\n \n 2014-06-23  Richard Biener  <rguenther@suse.de>\n \n@@ -628,8 +635,8 @@ vtable-verify.c, vtable-verify.h: Adjust.\n \tvariant but not df.\n \t(vreinterpretv1df*, vreinterpret*v1df): New.\n \t(vreinterpretdf*, vreinterpret*df): Remove.\n-\t* config/aarch64/aarch64-simd.md (aarch64_create, aarch64_reinterpret*):\n-\tGenerate V1DFmode pattern not DFmode.\n+\t* config/aarch64/aarch64-simd.md (aarch64_create,\n+\taarch64_reinterpret*): Generate V1DFmode pattern not DFmode.\n \t* config/aarch64/iterators.md (VD_RE): Include V1DF, remove DF.\n \t(VD1): New.\n \t* config/aarch64/arm_neon.h (float64x1_t): typedef with gcc extensions.\n@@ -660,8 +667,8 @@ vtable-verify.c, vtable-verify.h: Adjust.\n \n 2014-06-23  Jan Hubicka  <hubicka@ucw.cz>\n \n-\t* lto-cgraph.c (lto_output_node, input_node): Set/get init/fini priority\n-\tdirectly.\n+\t* lto-cgraph.c (lto_output_node, input_node): Set/get init/fini\n+\tpriority directly.\n \n 2014-06-23  Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n@@ -1044,7 +1051,7 @@ vtable-verify.c, vtable-verify.h: Adjust.\n \texpand variant and aarch64_emit_call_insn.\n \n 2014-06-18  Radovan Obradovic  <robradovic@mips.com>\n-            Tom de Vries  <tom@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n \n \t* config/arm/arm-protos.h (arm_emit_call_insn): Add bool parameter.\n \t* config/arm/arm.c (TARGET_CALL_FUSAGE_CONTAINS_NON_CALLEE_CLOBBERS):"}, {"sha": "50b7320431e89442cc6934c65410603aea49b534", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd5e783701bbab8fd871ef8befbb9557ca205086/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd5e783701bbab8fd871ef8befbb9557ca205086/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=dd5e783701bbab8fd871ef8befbb9557ca205086", "patch": "@@ -8717,6 +8717,11 @@ alpha_handle_trap_shadows (void)\n \t\t\t}\n \t\t      break;\n \n+\t\t    case BARRIER:\n+\t\t      /* __builtin_unreachable can expand to no code at all,\n+\t\t\t leaving (barrier) RTXes in the instruction stream.  */\n+\t\t      goto close_shadow_notrapb;\n+\n \t\t    case JUMP_INSN:\n \t\t    case CALL_INSN:\n \t\t    case CODE_LABEL:\n@@ -8732,6 +8737,7 @@ alpha_handle_trap_shadows (void)\n \t\t  n = emit_insn_before (gen_trapb (), i);\n \t\t  PUT_MODE (n, TImode);\n \t\t  PUT_MODE (i, TImode);\n+\t\tclose_shadow_notrapb:\n \t\t  trap_pending = 0;\n \t\t  shadow.used.i = 0;\n \t\t  shadow.used.fp = 0;"}, {"sha": "9decbd955f30fc5c33eb7111b1939c7b42354a09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd5e783701bbab8fd871ef8befbb9557ca205086/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd5e783701bbab8fd871ef8befbb9557ca205086/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd5e783701bbab8fd871ef8befbb9557ca205086", "patch": "@@ -1,3 +1,8 @@\n+2014-06-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/61586\n+\t* gcc.target/alpha/pr61586.c: New test.\n+\n 2014-06-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/57573\n@@ -252,7 +257,7 @@\n \t* gcc.dg/vect/no-tree-sra-bb-slp-pr50730.c: Likewise.\n \t* gcc.dg/vect/pr26359.c: Likewise.\n \t* gcc.dg/vect/costmodel/ppc/costmodel-bb-slp-9a.c: Likewise.\n-   \n+\n 2014-06-23  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/pr49706-2.c: New test.\n@@ -316,10 +321,11 @@\n \t* gcc.target/aarch64/aapcs/test_64x1_1.c: New test.\n \t* gcc.target/aarch64/aapcs/func-ret-64x1_1.c: New test.\n \t* gcc.target/aarch64/simd/ext_f64_1.c (main): Compare vector elements.\n-\t* gcc.target/aarch64/vadd_f64.c: Rewrite with macro to use vector types.\n+\t* gcc.target/aarch64/vadd_f64.c: Rewrite with macro to use\n+\tvector types.\n \t* gcc.target/aarch64/vsub_f64.c: Likewise.\n-\t* gcc.target/aarch64/vdiv_f.c (INDEX*, RUN_TEST): Remove indexing scheme\n-\tas now the same for all variants.\n+\t* gcc.target/aarch64/vdiv_f.c (INDEX*, RUN_TEST): Remove indexing\n+\tscheme as now the same for all variants.\n \t* gcc.target/aarch64/vrnd_f64_1.c (compare_f64): Return float64_t not\n \tfloat64x1_t.\n \n@@ -375,7 +381,7 @@\n 2014-06-20  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61540\n-        * g++.dg/ipa/pr61540.C: New test.\n+\t* g++.dg/ipa/pr61540.C: New test.\n \n 2014-06-20  Yury Gribov  <y.gribov@samsung.com>\n \t    Max Ostapenko  <m.ostapenko@partner.samsung.com>"}, {"sha": "afb1af3597fe7df096b9b2f3cc954e77d47f4e99", "filename": "gcc/testsuite/gcc.target/alpha/pr61586.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd5e783701bbab8fd871ef8befbb9557ca205086/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr61586.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd5e783701bbab8fd871ef8befbb9557ca205086/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr61586.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Falpha%2Fpr61586.c?ref=dd5e783701bbab8fd871ef8befbb9557ca205086", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mieee\" } */\n+\n+void foo (int *dimensions, double **params, int hh)\n+{\n+  if (params[hh])\n+    ;\n+  else if (dimensions[hh] > 0)\n+    params[hh][0] = 1.0f;\n+}"}]}