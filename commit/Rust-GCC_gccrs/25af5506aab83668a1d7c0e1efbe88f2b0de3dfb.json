{"sha": "25af5506aab83668a1d7c0e1efbe88f2b0de3dfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVhZjU1MDZhYWI4MzY2OGExZDdjMGUxZWZiZTg4ZjJiMGRlM2RmYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-03T06:32:13Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-03T06:32:13Z"}, "message": "stormy16-protos.h: Remove the prototypes for xstormy16_ineqsi_operator...\n\n\t* config/stormy16/stormy16-protos.h: Remove the prototypes for\n\txstormy16_ineqsi_operator, equality_operator,\n\tinequality_operator, shift_operator,\n\txstormy16_below100_operand, xstormy16_below100_or_register,\n\txstormy16_splittable_below100_or_register,\n\txstormy16_onebit_set_operand, xstormy16_onebit_clr_operand.\n\t* config/stormy16/stormy16.c (xstormy16_ineqsi_operator,\n\tequality_operator, inequality_operator,\n\txstormy16_below100_operand, xstormy16_below100_or_register,\n\txstormy16_splittable_below100_or_register,\n\txstormy16_onebit_set_operand, xstormy16_onebit_clr_operand,\n\tnonimmediate_nonstack_operand, shift_operator): Move to\n\tpredicates.md.\n\t* config/stormy16/stormy16.h (PREDICATE_CODES): Remove.\n\t* config/stormy16/stormy16.md: Include predicates.md.\n\t* config/stormy16/predicates.md: New.\n\nFrom-SVN: r97476", "tree": {"sha": "b17a42c07a21561134b517e148affb1bcf0d0fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b17a42c07a21561134b517e148affb1bcf0d0fec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/comments", "author": null, "committer": null, "parents": [{"sha": "c8db7af2be7fe3e17cb9269ca5a8639cf59781e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8db7af2be7fe3e17cb9269ca5a8639cf59781e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8db7af2be7fe3e17cb9269ca5a8639cf59781e3"}], "stats": {"total": 304, "additions": 165, "deletions": 139}, "files": [{"sha": "1c1a0de301536859701fc14963fae026c794cbbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25af5506aab83668a1d7c0e1efbe88f2b0de3dfb", "patch": "@@ -5,6 +5,23 @@\n \txstormy16_splittable_below100_or_register, and\n \tnonimmediate_nonstack_operand.\n \n+\t* config/stormy16/stormy16-protos.h: Remove the prototypes for\n+\txstormy16_ineqsi_operator, equality_operator,\n+\tinequality_operator, shift_operator,\n+\txstormy16_below100_operand, xstormy16_below100_or_register,\n+\txstormy16_splittable_below100_or_register,\n+\txstormy16_onebit_set_operand, xstormy16_onebit_clr_operand.\n+\t* config/stormy16/stormy16.c (xstormy16_ineqsi_operator,\n+\tequality_operator, inequality_operator,\n+\txstormy16_below100_operand, xstormy16_below100_or_register,\n+\txstormy16_splittable_below100_or_register,\n+\txstormy16_onebit_set_operand, xstormy16_onebit_clr_operand,\n+\tnonimmediate_nonstack_operand, shift_operator): Move to\n+\tpredicates.md.\n+\t* config/stormy16/stormy16.h (PREDICATE_CODES): Remove.\n+\t* config/stormy16/stormy16.md: Include predicates.md.\n+\t* config/stormy16/predicates.md: New.\n+\n 2005-04-02  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/iq2000/iq2000.c (uns_arith_operand, arith_operand,"}, {"sha": "b56b725b4da0d41625ced4d6562c31d56f48bf9e", "filename": "gcc/config/stormy16/predicates.md", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2Fconfig%2Fstormy16%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2Fconfig%2Fstormy16%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fpredicates.md?ref=25af5506aab83668a1d7c0e1efbe88f2b0de3dfb", "patch": "@@ -0,0 +1,146 @@\n+;; Predicate definitions for XSTORMY16.\n+;; Copyright (C) 2005 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 59 Temple Place - Suite 330,\n+;; Boston, MA 02111-1307, USA.\n+\n+;; Return 1 if OP is a shift operator.\n+\n+(define_predicate \"shift_operator\"\n+  (match_code \"ashift,ashiftrt,lshiftrt\")\n+{\n+  enum rtx_code code = GET_CODE (op);\n+\n+  return (code == ASHIFT\n+\t  || code == ASHIFTRT\n+\t  || code == LSHIFTRT);\n+})\n+\n+;; Return 1 if this is an EQ or NE operator.\n+\n+(define_predicate \"equality_operator\"\n+  (match_code \"eq,ne\")\n+{\n+  return ((mode == VOIDmode || GET_MODE (op) == mode)\n+\t  && (GET_CODE (op) == EQ || GET_CODE (op) == NE));\n+})\n+\n+;; Return 1 if this is a comparison operator but not an EQ or NE\n+;; operator.\n+\n+(define_predicate \"inequality_operator\"\n+  (match_code \"ge,gt,le,lt,geu,gtu,leu,ltu\")\n+{\n+  return comparison_operator (op, mode) && ! equality_operator (op, mode);\n+})\n+\n+;; Return 1 if this is a LT, GE, LTU, or GEU operator.\n+\n+(define_predicate \"xstormy16_ineqsi_operator\"\n+  (match_code \"lt,ge,ltu,geu\")\n+{\n+  enum rtx_code code = GET_CODE (op);\n+  \n+  return ((mode == VOIDmode || GET_MODE (op) == mode)\n+\t  && (code == LT || code == GE || code == LTU || code == GEU));\n+})\n+\n+;; Predicate for MEMs that can use special 8-bit addressing.\n+\n+(define_predicate \"xstormy16_below100_operand\"\n+  (match_code \"mem\")\n+{\n+  if (GET_MODE (op) != mode)\n+    return 0;\n+  if (GET_CODE (op) == MEM)\n+    op = XEXP (op, 0);\n+  else if (GET_CODE (op) == SUBREG\n+\t   && GET_CODE (XEXP (op, 0)) == MEM\n+\t   && !MEM_VOLATILE_P (XEXP (op, 0)))\n+    op = XEXP (XEXP (op, 0), 0);\n+  else\n+    return 0;\n+  if (GET_CODE (op) == CONST_INT)\n+    {\n+      HOST_WIDE_INT i = INTVAL (op);\n+      return (i >= 0x7f00 && i < 0x7fff);\n+    }\n+  return xstormy16_below100_symbol (op, HImode);\n+})\n+\n+;; TODO: Add a comment here.\n+\n+(define_predicate \"xstormy16_below100_or_register\"\n+  (match_code \"mem,reg,subreg\")\n+{\n+  return (xstormy16_below100_operand (op, mode)\n+\t  || register_operand (op, mode));\n+})\n+\n+;; TODO: Add a comment here.\n+\n+(define_predicate \"xstormy16_splittable_below100_or_register\"\n+  (match_code \"mem,reg,subreg\")\n+{\n+  if (GET_CODE (op) == MEM && MEM_VOLATILE_P (op))\n+    return 0;\n+  return (xstormy16_below100_operand (op, mode)\n+\t  || register_operand (op, mode));\n+})\n+\n+;; Predicate for constants with exactly one bit not set.\n+\n+(define_predicate \"xstormy16_onebit_clr_operand\"\n+  (match_code \"const_int\")\n+{\n+  HOST_WIDE_INT i;\n+  if (GET_CODE (op) != CONST_INT)\n+    return 0;\n+  i = ~ INTVAL (op);\n+  if (mode == QImode)\n+    i &= 0xff;\n+  if (mode == HImode)\n+    i &= 0xffff;\n+  return exact_log2 (i) != -1;\n+})\n+\n+;; Predicate for constants with exactly one bit set.\n+\n+(define_predicate \"xstormy16_onebit_set_operand\"\n+  (match_code \"const_int\")\n+{\n+  HOST_WIDE_INT i;\n+  if (GET_CODE (op) != CONST_INT)\n+    return 0;\n+  i = INTVAL (op);\n+  if (mode == QImode)\n+    i &= 0xff;\n+  if (mode == HImode)\n+    i &= 0xffff;\n+  return exact_log2 (i) != -1;\n+})\n+\n+;; TODO: Add a comment here.\n+\n+(define_predicate \"nonimmediate_nonstack_operand\"\n+  (match_code \"reg,mem,subreg\")\n+{\n+  /* 'Q' is for pushes, 'R' for pops.  */\n+  return (nonimmediate_operand (op, mode) \n+\t  && ! xstormy16_extra_constraint_p (op, 'Q')\n+\t  && ! xstormy16_extra_constraint_p (op, 'R'));\n+})"}, {"sha": "f5f5bb67b8e1ef4622f11ec852ddcb386bc9ded6", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=25af5506aab83668a1d7c0e1efbe88f2b0de3dfb", "patch": "@@ -68,9 +68,6 @@ extern void xstormy16_expand_andqi3 (rtx *);\n #endif\n \n #if defined (HAVE_MACHINE_MODES) && defined (RTX_CODE)\n-extern int xstormy16_ineqsi_operator (rtx, enum machine_mode);\n-extern int equality_operator (rtx, enum machine_mode);\n-extern int inequality_operator (rtx, enum machine_mode);\n extern void xstormy16_split_cbranch (enum machine_mode, rtx, rtx, rtx, rtx);\n extern int  short_memory_operand (rtx, enum machine_mode);\n extern int  nonimmediate_nonstack_operand (rtx, enum machine_mode);\n@@ -85,15 +82,9 @@ extern void xstormy16_split_move (enum machine_mode, rtx, rtx);\n extern void xstormy16_expand_move (enum machine_mode, rtx, rtx);\n extern void xstormy16_expand_arith (enum machine_mode, enum rtx_code, \n \t\t\t\t    rtx, rtx, rtx, rtx);\n-extern int  shift_operator (rtx, enum machine_mode);\n extern const char * xstormy16_output_shift (enum machine_mode, enum rtx_code, \n \t\t\t\t\t    rtx, rtx, rtx);\n extern int  xstormy16_below100_symbol (rtx, enum machine_mode);\n-extern int  xstormy16_below100_operand (rtx, enum machine_mode);\n extern int  xstormy16_splittable_below100_operand (rtx, enum machine_mode);\n-extern int  xstormy16_below100_or_register (rtx, enum machine_mode);\n-extern int  xstormy16_splittable_below100_or_register (rtx, enum machine_mode);\n-extern int xstormy16_onebit_set_operand (rtx, enum machine_mode);\n-extern int xstormy16_onebit_clr_operand (rtx, enum machine_mode);\n #endif\n "}, {"sha": "f6c5b4327efbb8550c96a1893f99a4bb239300f6", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=25af5506aab83668a1d7c0e1efbe88f2b0de3dfb", "patch": "@@ -65,34 +65,6 @@ static bool xstormy16_return_in_memory (tree, tree);\n struct rtx_def * xstormy16_compare_op0;\n struct rtx_def * xstormy16_compare_op1;\n \n-/* Return 1 if this is a LT, GE, LTU, or GEU operator.  */\n-\n-int\n-xstormy16_ineqsi_operator (register rtx op, enum machine_mode mode)\n-{\n-  enum rtx_code code = GET_CODE (op);\n-  \n-  return ((mode == VOIDmode || GET_MODE (op) == mode)\n-\t  && (code == LT || code == GE || code == LTU || code == GEU));\n-}\n-\n-/* Return 1 if this is an EQ or NE operator.  */\n-\n-int\n-equality_operator (register rtx op, enum machine_mode mode)\n-{\n-  return ((mode == VOIDmode || GET_MODE (op) == mode)\n-\t  && (GET_CODE (op) == EQ || GET_CODE (op) == NE));\n-}\n-\n-/* Return 1 if this is a comparison operator but not an EQ or NE operator.  */\n-\n-int\n-inequality_operator (register rtx op, enum machine_mode mode)\n-{\n-  return comparison_operator (op, mode) && ! equality_operator (op, mode);\n-}\n-\n /* Compute a (partial) cost for rtx X.  Return true if the complete\n    cost has been computed, and false if subexpressions should be\n    scanned.  In either case, *TOTAL contains the cost result.  */\n@@ -576,28 +548,6 @@ xstormy16_below100_symbol (rtx x,\n   return 0;\n }\n \n-/* Predicate for MEMs that can use special 8-bit addressing.  */\n-int\n-xstormy16_below100_operand (rtx x, enum machine_mode mode)\n-{\n-  if (GET_MODE (x) != mode)\n-    return 0;\n-  if (GET_CODE (x) == MEM)\n-    x = XEXP (x, 0);\n-  else if (GET_CODE (x) == SUBREG\n-\t   && GET_CODE (XEXP (x, 0)) == MEM\n-\t   && !MEM_VOLATILE_P (XEXP (x, 0)))\n-    x = XEXP (XEXP (x, 0), 0);\n-  else\n-    return 0;\n-  if (GET_CODE (x) == CONST_INT)\n-    {\n-      HOST_WIDE_INT i = INTVAL (x);\n-      return (i >= 0x7f00 && i < 0x7fff);\n-    }\n-  return xstormy16_below100_symbol (x, HImode);\n-}\n-\n /* Likewise, but only for non-volatile MEMs, for patterns where the\n    MEM will get split into smaller sized accesses.  */\n int\n@@ -608,52 +558,6 @@ xstormy16_splittable_below100_operand (rtx x, enum machine_mode mode)\n   return xstormy16_below100_operand (x, mode);\n }\n \n-int\n-xstormy16_below100_or_register (rtx x, enum machine_mode mode)\n-{\n-  return (xstormy16_below100_operand (x, mode)\n-\t  || register_operand (x, mode));\n-}\n-\n-int\n-xstormy16_splittable_below100_or_register (rtx x, enum machine_mode mode)\n-{\n-  if (GET_CODE (x) == MEM && MEM_VOLATILE_P (x))\n-    return 0;\n-  return (xstormy16_below100_operand (x, mode)\n-\t  || register_operand (x, mode));\n-}\n-\n-/* Predicate for constants with exactly one bit set.  */\n-int\n-xstormy16_onebit_set_operand (rtx x, enum machine_mode mode)\n-{\n-  HOST_WIDE_INT i;\n-  if (GET_CODE (x) != CONST_INT)\n-    return 0;\n-  i = INTVAL (x);\n-  if (mode == QImode)\n-    i &= 0xff;\n-  if (mode == HImode)\n-    i &= 0xffff;\n-  return exact_log2 (i) != -1;\n-}\n-\n-/* Predicate for constants with exactly one bit not set.  */\n-int\n-xstormy16_onebit_clr_operand (rtx x, enum machine_mode mode)\n-{\n-  HOST_WIDE_INT i;\n-  if (GET_CODE (x) != CONST_INT)\n-    return 0;\n-  i = ~ INTVAL (x);\n-  if (mode == QImode)\n-    i &= 0xff;\n-  if (mode == HImode)\n-    i &= 0xffff;\n-  return exact_log2 (i) != -1;\n-}\n-\n /* Expand an 8-bit IOR.  This either detects the one case we can\n    actually do, or uses a 16-bit IOR.  */\n void\n@@ -875,15 +779,6 @@ short_memory_operand (rtx x, enum machine_mode mode)\n   return (GET_CODE (XEXP (x, 0)) != PLUS);\n }\n \n-int\n-nonimmediate_nonstack_operand (rtx op, enum machine_mode mode)\n-{\n-  /* 'Q' is for pushes, 'R' for pops.  */\n-  return (nonimmediate_operand (op, mode) \n-\t  && ! xstormy16_extra_constraint_p (op, 'Q')\n-\t  && ! xstormy16_extra_constraint_p (op, 'R'));\n-}\n-\n /* Splitter for the 'move' patterns, for modes not directly implemented\n    by hardware.  Emit insns to copy a value of mode MODE from SRC to\n    DEST.\n@@ -2238,18 +2133,6 @@ xstormy16_expand_arith (enum machine_mode mode, enum rtx_code code,\n     emit (gen_nop ());\n }\n \n-/* Return 1 if OP is a shift operator.  */\n-\n-int\n-shift_operator (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  enum rtx_code code = GET_CODE (op);\n-\n-  return (code == ASHIFT\n-\t  || code == ASHIFTRT\n-\t  || code == LSHIFTRT);\n-}\n-\n /* The shift operations are split at output time for constant values;\n    variable-width shifts get handed off to a library routine.  \n "}, {"sha": "2645bc72190599f1ad2d8249c60ce26b7b36b5ec", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=25af5506aab83668a1d7c0e1efbe88f2b0de3dfb", "patch": "@@ -810,18 +810,6 @@ do  {\t\t\t\t\t\t\\\n \f\n /* Miscellaneous Parameters.  */\n \n-#define PREDICATE_CODES\t\t\t\t\t\\\n-  {\"shift_operator\", {ASHIFT, ASHIFTRT, LSHIFTRT }},\t\\\n-  {\"equality_operator\", {EQ, NE }},\t\t\t\\\n-  {\"inequality_operator\", {GE, GT, LE, LT, GEU, GTU, LEU, LTU }}, \\\n-  {\"xstormy16_ineqsi_operator\", {LT, GE, LTU, GEU }}, \\\n-  {\"xstormy16_below100_operand\", {MEM }}, \\\n-  {\"xstormy16_below100_or_register\", {MEM, REG, SUBREG }}, \\\n-  {\"xstormy16_splittable_below100_or_register\", {MEM, REG, SUBREG }}, \\\n-  {\"xstormy16_onebit_clr_operand\", {CONST_INT }}, \\\n-  {\"xstormy16_onebit_set_operand\", {CONST_INT }}, \\\n-  {\"nonimmediate_nonstack_operand\", {REG, MEM, SUBREG }},\n-\n #define CASE_VECTOR_MODE SImode\n \n #define WORD_REGISTER_OPERATIONS"}, {"sha": "6693f8f6bff0ef22037a13a375e333004a703a4d", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25af5506aab83668a1d7c0e1efbe88f2b0de3dfb/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=25af5506aab83668a1d7c0e1efbe88f2b0de3dfb", "patch": "@@ -1,5 +1,5 @@\n ;; XSTORMY16 Machine description template\n-;; Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2004\n+;; Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005\n ;; Free Software Foundation, Inc.\n ;; Contributed by Red Hat, Inc.\n \n@@ -91,6 +91,7 @@\n (define_asm_attributes [(set_attr \"length\" \"4\")\n \t\t\t(set_attr \"psw_operand\" \"clobber\")])\n \n+(include \"predicates.md\")\n \f\n ;; ::::::::::::::::::::\n ;; ::"}]}