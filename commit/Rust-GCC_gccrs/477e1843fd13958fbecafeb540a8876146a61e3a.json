{"sha": "477e1843fd13958fbecafeb540a8876146a61e3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3ZTE4NDNmZDEzOTU4ZmJlY2FmZWI1NDBhODg3NjE0NmE2MWUzYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-28T18:20:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-28T18:20:30Z"}, "message": "re PR c++/56728 (ICE using constexpr initialization and arrays)\n\n\tPR c++/56728\n\t* semantics.c (potential_constant_expression_1) [NOP_EXPR]: Reject\n\tconversion from integer to pointer.\n\t(cxx_eval_constant_expression): Likewise.\n\t(cxx_eval_indirect_ref): Use the folded operand if we still think\n\tthis might be constant.\n\nFrom-SVN: r197209", "tree": {"sha": "33027c7c041aeceaaea4fdb86398083626a69329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33027c7c041aeceaaea4fdb86398083626a69329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/477e1843fd13958fbecafeb540a8876146a61e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477e1843fd13958fbecafeb540a8876146a61e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477e1843fd13958fbecafeb540a8876146a61e3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477e1843fd13958fbecafeb540a8876146a61e3a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cd347ae13bb5c8a1785aa8cbd7287fe6d606120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cd347ae13bb5c8a1785aa8cbd7287fe6d606120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cd347ae13bb5c8a1785aa8cbd7287fe6d606120"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "164c79700cac706cc51e5d88dda44281f5d1a280", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477e1843fd13958fbecafeb540a8876146a61e3a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477e1843fd13958fbecafeb540a8876146a61e3a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=477e1843fd13958fbecafeb540a8876146a61e3a", "patch": "@@ -1,3 +1,12 @@\n+2013-03-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/56728\n+\t* semantics.c (potential_constant_expression_1) [NOP_EXPR]: Reject\n+\tconversion from integer to pointer.\n+\t(cxx_eval_constant_expression): Likewise.\n+\t(cxx_eval_indirect_ref): Use the folded operand if we still think\n+\tthis might be constant.\n+\n 2013-03-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \t    Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n "}, {"sha": "0b8e2f7488810f79e58ad2fd8bb24731d31389ce", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477e1843fd13958fbecafeb540a8876146a61e3a/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477e1843fd13958fbecafeb540a8876146a61e3a/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=477e1843fd13958fbecafeb540a8876146a61e3a", "patch": "@@ -7661,6 +7661,8 @@ cxx_eval_indirect_ref (const constexpr_call *call, tree t,\n \n   if (r == NULL_TREE)\n     {\n+      if (addr && op0 != orig_op0)\n+\treturn build1 (INDIRECT_REF, TREE_TYPE (t), op0);\n       if (!addr)\n \tVERIFY_CONSTANT (t);\n       return t;\n@@ -8056,6 +8058,16 @@ cxx_eval_constant_expression (const constexpr_call *call, tree t,\n \t\t\t\t\t\tnon_constant_p, overflow_p);\n \tif (*non_constant_p)\n \t  return t;\n+\tif (POINTER_TYPE_P (TREE_TYPE (t))\n+\t    && TREE_CODE (op) == INTEGER_CST\n+\t    && !integer_zerop (op))\n+\t  {\n+\t    if (!allow_non_constant)\n+\t      error_at (EXPR_LOC_OR_HERE (t),\n+\t\t\t\"reinterpret_cast from integer to pointer\");\n+\t    *non_constant_p = true;\n+\t    return t;\n+\t  }\n \tif (op == oldop)\n \t  /* We didn't fold at the top so we could check for ptr-int\n \t     conversion.  */\n@@ -8452,6 +8464,15 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n \t may change to something more specific to type-punning (DR 1312).  */\n       {\n         tree from = TREE_OPERAND (t, 0);\n+\tif (POINTER_TYPE_P (TREE_TYPE (t))\n+\t    && TREE_CODE (from) == INTEGER_CST\n+\t    && !integer_zerop (from))\n+\t  {\n+\t    if (flags & tf_error)\n+\t      error_at (EXPR_LOC_OR_HERE (t),\n+\t\t\t\"reinterpret_cast from integer to pointer\");\n+\t    return false;\n+\t  }\n         return (potential_constant_expression_1\n \t\t(from, TREE_CODE (t) != VIEW_CONVERT_EXPR, flags));\n       }"}, {"sha": "69db98bc7727a5b282638224be609131c737474b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-reinterpret1.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477e1843fd13958fbecafeb540a8876146a61e3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-reinterpret1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477e1843fd13958fbecafeb540a8876146a61e3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-reinterpret1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-reinterpret1.C?ref=477e1843fd13958fbecafeb540a8876146a61e3a", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/56728\n+// { dg-require-effective-target c++11 }\n+\n+class B {\n+public:\n+  static B instance;\n+  class Inner\n+  {\n+  public:\n+    class Wuzi\n+    {\n+      unsigned int m;\n+    } m_Class[3];\n+    unsigned m_Int[4];\n+  };\n+\n+  constexpr static Inner & getInner()\n+  {\n+    /* I am surprised this is considered a constexpr */\n+    return *((Inner *)4);\n+  } // { dg-error \"reinterpret_cast\" }\n+};\n+\n+B B::instance;\n+\n+class A\n+{\n+public:\n+  constexpr A(B &bridge, B::Inner &bridge2, unsigned char index)\n+    : m_Bridge(bridge), m_Wuz(bridge2.m_Class[index])\n+  {}\n+\n+  B &m_Bridge;\n+  B::Inner::Wuzi &m_Wuz;\n+};\n+A works{B::instance, B::getInner(), 3};\n+A crashnkill[1]{{B::instance, B::getInner(), 3}};"}]}