{"sha": "ea8b72e6badeeb6714ea16707002a054de17f3a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE4YjcyZTZiYWRlZWI2NzE0ZWExNjcwNzAwMmEwNTRkZTE3ZjNhOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-06-21T21:51:41Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-06-21T21:51:41Z"}, "message": "trans-array.c (gfc_trans_deferred_array): Call the finalizer for nonallocatable local variables.\n\n2013-06-21  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-array.c (gfc_trans_deferred_array): Call the\n        finalizer for nonallocatable local variables.\n        * trans-decl.c (gfc_get_symbol_decl): Add local\n        finalizable vars to the deferred list.\n        (gfc_trans_deferred_vars): Call gfc_trans_deferred_array\n        for those.\n\n2013-06-21  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/finalize_17.f90: New.\n\nFrom-SVN: r200321", "tree": {"sha": "8c497c9e3d7192b2eab61b4fc62363f866caa686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c497c9e3d7192b2eab61b4fc62363f866caa686"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea8b72e6badeeb6714ea16707002a054de17f3a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea8b72e6badeeb6714ea16707002a054de17f3a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea8b72e6badeeb6714ea16707002a054de17f3a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea8b72e6badeeb6714ea16707002a054de17f3a9/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f556b07c95e830c322c1ba5ffaa2bbdaab51423", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f556b07c95e830c322c1ba5ffaa2bbdaab51423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f556b07c95e830c322c1ba5ffaa2bbdaab51423"}], "stats": {"total": 98, "additions": 83, "deletions": 15}, "files": [{"sha": "7667dc25b675bd5d5ce8d9e1c898cbf3442e505c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8b72e6badeeb6714ea16707002a054de17f3a9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8b72e6badeeb6714ea16707002a054de17f3a9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ea8b72e6badeeb6714ea16707002a054de17f3a9", "patch": "@@ -1,3 +1,12 @@\n+2013-06-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-array.c (gfc_trans_deferred_array): Call the\n+\tfinalizer for nonallocatable local variables.\n+\t* trans-decl.c (gfc_get_symbol_decl): Add local\n+\tfinalizable vars to the deferred list.\n+\t(gfc_trans_deferred_vars): Call gfc_trans_deferred_array\n+\tfor those.\n+\n 2013-06-21  Tobias Burnus  <burnus@net-b.de>\n \n \t* trans-array.c (gfc_alloc_allocatable_for_assignment): Allocate"}, {"sha": "96162e5496bcc1b6b6d33ee6bef02ecdcbb0edd7", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8b72e6badeeb6714ea16707002a054de17f3a9/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8b72e6badeeb6714ea16707002a054de17f3a9/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=ea8b72e6badeeb6714ea16707002a054de17f3a9", "patch": "@@ -8309,12 +8309,12 @@ gfc_trans_deferred_array (gfc_symbol * sym, gfc_wrapped_block * block)\n   sym_has_alloc_comp = (sym->ts.type == BT_DERIVED\n \t\t\t|| sym->ts.type == BT_CLASS)\n \t\t\t  && sym->ts.u.derived->attr.alloc_comp;\n+  has_finalizer = sym->ts.type == BT_CLASS || sym->ts.type == BT_DERIVED\n+\t\t   ? gfc_is_finalizable (sym->ts.u.derived, NULL) : false;\n \n   /* Make sure the frontend gets these right.  */\n-  if (!(sym->attr.pointer || sym->attr.allocatable || sym_has_alloc_comp))\n-    fatal_error (\"Possible front-end bug: Deferred array size without pointer, \"\n-\t\t \"allocatable attribute or derived type without allocatable \"\n-\t\t \"components.\");\n+  gcc_assert (sym->attr.pointer || sym->attr.allocatable || sym_has_alloc_comp\n+\t      || has_finalizer);\n \n   gfc_save_backend_locus (&loc);\n   gfc_set_backend_locus (&sym->declared_at);\n@@ -8343,7 +8343,7 @@ gfc_trans_deferred_array (gfc_symbol * sym, gfc_wrapped_block * block)\n   /* Although static, derived types with default initializers and\n      allocatable components must not be nulled wholesale; instead they\n      are treated component by component.  */\n-  if (TREE_STATIC (descriptor) && !sym_has_alloc_comp)\n+  if (TREE_STATIC (descriptor) && !sym_has_alloc_comp && !has_finalizer)\n     {\n       /* SAVEd variables are not freed on exit.  */\n       gfc_trans_static_array_pointer (sym);\n@@ -8356,7 +8356,8 @@ gfc_trans_deferred_array (gfc_symbol * sym, gfc_wrapped_block * block)\n   /* Get the descriptor type.  */\n   type = TREE_TYPE (sym->backend_decl);\n \n-  if (sym_has_alloc_comp && !(sym->attr.pointer || sym->attr.allocatable))\n+  if ((sym_has_alloc_comp || (has_finalizer && sym->ts.type != BT_CLASS))\n+      && !(sym->attr.pointer || sym->attr.allocatable))\n     {\n       if (!sym->attr.save\n \t  && !(TREE_STATIC (sym->backend_decl) && sym->attr.is_main_program))\n@@ -8391,9 +8392,17 @@ gfc_trans_deferred_array (gfc_symbol * sym, gfc_wrapped_block * block)\n \n   /* Allocatable arrays need to be freed when they go out of scope.\n      The allocatable components of pointers must not be touched.  */\n-  has_finalizer = sym->ts.type == BT_CLASS || sym->ts.type == BT_DERIVED\n-\t\t   ? gfc_is_finalizable (sym->ts.u.derived, NULL) : false;\n-  if ((!sym->attr.allocatable || !has_finalizer)\n+  if (!sym->attr.allocatable && has_finalizer && sym->ts.type != BT_CLASS\n+      && !sym->attr.pointer && !sym->attr.artificial && !sym->attr.save\n+      && !sym->ns->proc_name->attr.is_main_program)\n+    {\n+      gfc_expr *e;\n+      sym->attr.referenced = 1;\n+      e = gfc_lval_expr_from_sym (sym);\n+      gfc_add_finalizer_call (&cleanup, e);\n+      gfc_free_expr (e);\n+    }\n+  else if ((!sym->attr.allocatable || !has_finalizer)\n       && sym_has_alloc_comp && !(sym->attr.function || sym->attr.result)\n       && !sym->attr.pointer && !sym->attr.save\n       && !sym->ns->proc_name->attr.is_main_program)"}, {"sha": "fc3a725aa3db396df5141693cc994f58a3addd08", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8b72e6badeeb6714ea16707002a054de17f3a9/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8b72e6badeeb6714ea16707002a054de17f3a9/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=ea8b72e6badeeb6714ea16707002a054de17f3a9", "patch": "@@ -1420,7 +1420,11 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n       || (sym->ts.type == BT_CLASS &&\n \t  (CLASS_DATA (sym)->attr.dimension\n \t   || CLASS_DATA (sym)->attr.allocatable))\n-      || (sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.alloc_comp)\n+      || (sym->ts.type == BT_DERIVED\n+\t  && (sym->ts.u.derived->attr.alloc_comp\n+\t      || (!sym->attr.pointer && !sym->attr.artificial && !sym->attr.save\n+\t\t  && !sym->ns->proc_name->attr.is_main_program\n+\t\t  && gfc_is_finalizable (sym->ts.u.derived, NULL))))\n       /* This applies a derived type default initializer.  */\n       || (sym->ts.type == BT_DERIVED\n \t  && sym->attr.save == SAVE_NONE\n@@ -3668,8 +3672,10 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \n   for (sym = proc_sym->tlink; sym != proc_sym; sym = sym->tlink)\n     {\n-      bool sym_has_alloc_comp = (sym->ts.type == BT_DERIVED)\n-\t\t\t\t   && sym->ts.u.derived->attr.alloc_comp;\n+      bool alloc_comp_or_fini = (sym->ts.type == BT_DERIVED)\n+\t\t\t\t&& (sym->ts.u.derived->attr.alloc_comp\n+\t\t\t\t    || gfc_is_finalizable (sym->ts.u.derived,\n+\t\t\t\t\t\t\t   NULL));\n       if (sym->assoc)\n \tcontinue;\n \n@@ -3754,7 +3760,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t  gfc_save_backend_locus (&loc);\n \t\t  gfc_set_backend_locus (&sym->declared_at);\n \n-\t\t  if (sym_has_alloc_comp)\n+\t\t  if (alloc_comp_or_fini)\n \t\t    {\n \t\t      seen_trans_deferred_array = true;\n \t\t      gfc_trans_deferred_array (sym, block);\n@@ -3802,7 +3808,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t    default:\n \t      gcc_unreachable ();\n \t    }\n-\t  if (sym_has_alloc_comp && !seen_trans_deferred_array)\n+\t  if (alloc_comp_or_fini && !seen_trans_deferred_array)\n \t    gfc_trans_deferred_array (sym, block);\n \t}\n       else if ((!sym->attr.dummy || sym->ts.deferred)\n@@ -3998,7 +4004,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t}\n       else if (sym->ts.deferred)\n \tgfc_fatal_error (\"Deferred type parameter not yet supported\");\n-      else if (sym_has_alloc_comp)\n+      else if (alloc_comp_or_fini)\n \tgfc_trans_deferred_array (sym, block);\n       else if (sym->ts.type == BT_CHARACTER)\n \t{"}, {"sha": "b5ab534818d61d016cb67f2b06a41019de9d44d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8b72e6badeeb6714ea16707002a054de17f3a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8b72e6badeeb6714ea16707002a054de17f3a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea8b72e6badeeb6714ea16707002a054de17f3a9", "patch": "@@ -1,3 +1,7 @@\n+2013-06-21  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/finalize_17.f90: New.\n+\n 2013-06-21  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/realloc_on_assign_18.f90: New."}, {"sha": "ce2306cce8a69076b04e1c0f31c16274347bcdad", "filename": "gcc/testsuite/gfortran.dg/finalize_17.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea8b72e6badeeb6714ea16707002a054de17f3a9/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea8b72e6badeeb6714ea16707002a054de17f3a9/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_17.f90?ref=ea8b72e6badeeb6714ea16707002a054de17f3a9", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+!\n+! PR fortran/37336\n+!\n+! Test for finalization of nonallocatable variables\n+!\n+module m\n+  implicit none\n+  type t\n+    integer :: i\n+  contains\n+    final :: finit\n+  end type t\n+  integer, save :: called_final = -1\n+contains\n+  impure elemental subroutine finit(x)\n+    type(t), intent(in) :: x\n+    if (called_final == -1) call abort ()\n+    called_final = called_final + 1 \n+    if (called_final /= x%i) call abort ()\n+  end subroutine finit\n+end module m\n+\n+  use m\n+  implicit none\n+  type(t) :: x2, y2(2)\n+  block\n+    type(t) :: xx, yy(2)\n+    type(t), save :: x3, y3(2)\n+    yy%i = [1, 2]\n+    xx%i = 3\n+    y3%i = [-4, -5]\n+    x3%i = -6\n+    called_final = 0\n+  end block\n+  if (called_final /= 3) call abort\n+  called_final = -1\n+  y2%i = [-7, -8]\n+  x2%i = -9\n+end"}]}