{"sha": "a27d595da25b497f14d8f3714b63819f712cde11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3ZDU5NWRhMjViNDk3ZjE0ZDhmMzcxNGI2MzgxOWY3MTJjZGUxMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2012-09-14T16:59:10Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2012-09-14T16:59:10Z"}, "message": "re PR c/54103 (ICE at gimplify.c:7790 on current trunk)\n\nc:\n\tPR c/54103\n\t* c-typeck.c (build_unary_op): Pass original argument of\n\tTRUTH_NOT_EXPR to c_objc_common_truthvalue_conversion, then remove\n\tany C_MAYBE_CONST_EXPR, if it has integer operands.\n\t(build_binary_op): Pass original arguments of TRUTH_ANDIF_EXPR,\n\tTRUTH_ORIF_EXPR, TRUTH_AND_EXPR, TRUTH_OR_EXPR and TRUTH_XOR_EXPR\n\tto c_objc_common_truthvalue_conversion, then remove any\n\tC_MAYBE_CONST_EXPR, if they have integer operands.  Use\n\tc_objc_common_truthvalue_conversion not\n\tc_common_truthvalue_conversion.\n\t(c_objc_common_truthvalue_conversion): Build NE_EXPR directly and\n\tcall note_integer_operands for arguments with integer operands\n\tthat are not integer constants.\n\ntestsuite:\n\t* gcc.c-torture/compile/pr54103-1.c,\n\tgcc.c-torture/compile/pr54103-2.c,\n\tgcc.c-torture/compile/pr54103-3.c,\n\tgcc.c-torture/compile/pr54103-4.c,\n\tgcc.c-torture/compile/pr54103-5.c,\n\tgcc.c-torture/compile/pr54103-6.c: New tests.\n\t* gcc.dg/c90-const-expr-8.c: Update expected column number.\n\nFrom-SVN: r191304", "tree": {"sha": "95a34b6ced24ac7d8b25b3d0768dbbb429f9ac2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95a34b6ced24ac7d8b25b3d0768dbbb429f9ac2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a27d595da25b497f14d8f3714b63819f712cde11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27d595da25b497f14d8f3714b63819f712cde11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a27d595da25b497f14d8f3714b63819f712cde11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a27d595da25b497f14d8f3714b63819f712cde11/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "937f6ef1451c19076caa9add827a3921f6aead06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/937f6ef1451c19076caa9add827a3921f6aead06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/937f6ef1451c19076caa9add827a3921f6aead06"}], "stats": {"total": 100, "additions": 90, "deletions": 10}, "files": [{"sha": "bd6ef8fbf98f8fdd4837e72df55e5baa21de053e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a27d595da25b497f14d8f3714b63819f712cde11", "patch": "@@ -1,3 +1,19 @@\n+2012-09-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/54103\n+\t* c-typeck.c (build_unary_op): Pass original argument of\n+\tTRUTH_NOT_EXPR to c_objc_common_truthvalue_conversion, then remove\n+\tany C_MAYBE_CONST_EXPR, if it has integer operands.\n+\t(build_binary_op): Pass original arguments of TRUTH_ANDIF_EXPR,\n+\tTRUTH_ORIF_EXPR, TRUTH_AND_EXPR, TRUTH_OR_EXPR and TRUTH_XOR_EXPR\n+\tto c_objc_common_truthvalue_conversion, then remove any\n+\tC_MAYBE_CONST_EXPR, if they have integer operands.  Use\n+\tc_objc_common_truthvalue_conversion not\n+\tc_common_truthvalue_conversion.\n+\t(c_objc_common_truthvalue_conversion): Build NE_EXPR directly and\n+\tcall note_integer_operands for arguments with integer operands\n+\tthat are not integer constants.\n+\n 2012-09-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/54559"}, {"sha": "628857c38b202de8ad4b1c98c7dbcb93a3a7e585", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a27d595da25b497f14d8f3714b63819f712cde11", "patch": "@@ -3553,7 +3553,13 @@ build_unary_op (location_t location,\n \t\t    \"wrong type argument to unary exclamation mark\");\n \t  return error_mark_node;\n \t}\n-      arg = c_objc_common_truthvalue_conversion (location, arg);\n+      if (int_operands)\n+\t{\n+\t  arg = c_objc_common_truthvalue_conversion (location, xarg);\n+\t  arg = remove_c_maybe_const_expr (arg);\n+\t}\n+      else\n+\targ = c_objc_common_truthvalue_conversion (location, arg);\n       ret = invert_truthvalue_loc (location, arg);\n       /* If the TRUTH_NOT_EXPR has been folded, reset the location.  */\n       if (EXPR_P (ret) && EXPR_HAS_LOCATION (ret))\n@@ -9807,8 +9813,20 @@ build_binary_op (location_t location, enum tree_code code,\n \t     but that does not mean the operands should be\n \t     converted to ints!  */\n \t  result_type = integer_type_node;\n-\t  op0 = c_common_truthvalue_conversion (location, op0);\n-\t  op1 = c_common_truthvalue_conversion (location, op1);\n+\t  if (op0_int_operands)\n+\t    {\n+\t      op0 = c_objc_common_truthvalue_conversion (location, orig_op0);\n+\t      op0 = remove_c_maybe_const_expr (op0);\n+\t    }\n+\t  else\n+\t    op0 = c_objc_common_truthvalue_conversion (location, op0);\n+\t  if (op1_int_operands)\n+\t    {\n+\t      op1 = c_objc_common_truthvalue_conversion (location, orig_op1);\n+\t      op1 = remove_c_maybe_const_expr (op1);\n+\t    }\n+\t  else\n+\t    op1 = c_objc_common_truthvalue_conversion (location, op1);\n \t  converted = 1;\n \t  boolean_op = true;\n \t}\n@@ -10520,12 +10538,17 @@ c_objc_common_truthvalue_conversion (location_t location, tree expr)\n \n   int_const = (TREE_CODE (expr) == INTEGER_CST && !TREE_OVERFLOW (expr));\n   int_operands = EXPR_INT_CONST_OPERANDS (expr);\n-  if (int_operands)\n-    expr = remove_c_maybe_const_expr (expr);\n-\n-  /* ??? Should we also give an error for vectors rather than leaving\n-     those to give errors later?  */\n-  expr = c_common_truthvalue_conversion (location, expr);\n+  if (int_operands && TREE_CODE (expr) != INTEGER_CST)\n+    {\n+      expr = remove_c_maybe_const_expr (expr);\n+      expr = build2 (NE_EXPR, integer_type_node, expr,\n+\t\t     convert (TREE_TYPE (expr), integer_zero_node));\n+      expr = note_integer_operands (expr);\n+    }\n+  else\n+    /* ??? Should we also give an error for vectors rather than leaving\n+       those to give errors later?  */\n+    expr = c_common_truthvalue_conversion (location, expr);\n \n   if (TREE_CODE (expr) == INTEGER_CST && int_operands && !int_const)\n     {"}, {"sha": "ac72d3264b76bd3a4985bbf6b0e22fb35499cdf4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a27d595da25b497f14d8f3714b63819f712cde11", "patch": "@@ -1,3 +1,14 @@\n+2012-09-14  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/54103\n+\t* gcc.c-torture/compile/pr54103-1.c,\n+\tgcc.c-torture/compile/pr54103-2.c,\n+\tgcc.c-torture/compile/pr54103-3.c,\n+\tgcc.c-torture/compile/pr54103-4.c,\n+\tgcc.c-torture/compile/pr54103-5.c,\n+\tgcc.c-torture/compile/pr54103-6.c: New tests.\n+\t* gcc.dg/c90-const-expr-8.c: Update expected column number.\n+\n 2012-09-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/pr44194-1.c: Check that there are no memory accesses left."}, {"sha": "d941f3e1fdfddc85e05cba78d9f7057aa0b25751", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54103-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-1.c?ref=a27d595da25b497f14d8f3714b63819f712cde11", "patch": "@@ -0,0 +1,5 @@\n+void\n+f (void)\n+{\n+  0 || 0 / 0 ? : 0;\n+}"}, {"sha": "4bd624965e887e0acd1f624b57baa7118e6598f5", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54103-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-2.c?ref=a27d595da25b497f14d8f3714b63819f712cde11", "patch": "@@ -0,0 +1,5 @@\n+void\n+f (void)\n+{\n+  0 / 0 || 0 ? : 0;\n+}"}, {"sha": "9be0b94ce3118375f3715f56c757f99d0422c3cf", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54103-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-3.c?ref=a27d595da25b497f14d8f3714b63819f712cde11", "patch": "@@ -0,0 +1,5 @@\n+void\n+f (void)\n+{\n+  1 && 0 / 0 ? : 0;\n+}"}, {"sha": "89ce24cd912c8e663809f918e9dea0b219f22c60", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54103-4.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-4.c?ref=a27d595da25b497f14d8f3714b63819f712cde11", "patch": "@@ -0,0 +1,5 @@\n+void\n+f (void)\n+{\n+  0 / 0 && 1 ? : 0;\n+}"}, {"sha": "9594b28955f2dc34db494fef91d4c0522efcf6d6", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54103-5.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-5.c?ref=a27d595da25b497f14d8f3714b63819f712cde11", "patch": "@@ -0,0 +1,5 @@\n+void\n+f (void)\n+{\n+  !(0 / 0);\n+}"}, {"sha": "2b0b0baa9166a141a2a0b2075da048fb45bd532b", "filename": "gcc/testsuite/gcc.c-torture/compile/pr54103-6.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr54103-6.c?ref=a27d595da25b497f14d8f3714b63819f712cde11", "patch": "@@ -0,0 +1,5 @@\n+void\n+f (void)\n+{\n+  0 || 65536*65536 ? : 0;\n+}"}, {"sha": "4923bc680468ab4a024f34987c1c82a823747cbf", "filename": "gcc/testsuite/gcc.dg/c90-const-expr-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a27d595da25b497f14d8f3714b63819f712cde11/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-const-expr-8.c?ref=a27d595da25b497f14d8f3714b63819f712cde11", "patch": "@@ -22,6 +22,6 @@ enum e {\n   E5 = 0 * -INT_MIN, /* { dg-warning \"12:integer overflow in expression\" } */\n   /* { dg-error \"3:overflow in constant expression\" \"constant\" { target *-*-* } 22 } */\n   E6 = 0 * !-INT_MIN, /* { dg-warning \"13:integer overflow in expression\" } */\n-  /* { dg-error \"3:not an integer constant\" \"constant\" { target *-*-* } 24 } */\n+  /* { dg-error \"8:not an integer constant\" \"constant\" { target *-*-* } 24 } */\n   E7 = INT_MIN % -1 /* Not an overflow.  */\n };"}]}