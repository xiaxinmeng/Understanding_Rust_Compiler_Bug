{"sha": "4c6b7393dcb6c97b57b5268dc84542369d5b367f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM2YjczOTNkY2I2Yzk3YjU3YjUyNjhkYzg0NTQyMzY5ZDViMzY3Zg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-12-21T00:19:01Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-12-21T00:19:01Z"}, "message": "cp-tree.h (TYPE_VIRTUAL_P): Rename to ...\n\n\t* cp-tree.h (TYPE_VIRTUAL_P): Rename to ...\n\t(TYPE_POLYMORPHIC_P): ... this.\n\t(TYPE_USES_COMPLEX_INHERITANCE): Rename to ...\n\t(TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P): ... this.\n\t(TREE_CALLS_NEW): Remove.\n\t(TREE_MANGLED): Likewise.\n\t* call.c (build_vfield_ref): Use TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P,\n\tand TYPE_POLYMORPHIC_P.\n\t* class.c (check_bases): Likewise.\n\t(finish_base_struct): Likewise.\n\t(finish_struct_bits): Likewise.\n\t(check_for_override): Likewise.\n\t(finish_struct_1): Likewise.\n\t(get_vfield_name): Likewise.\n\t* decl.c (xref_basetypes): Likewise.\n\t* decl2.c (import_export_class): Likewise.\n\t(import_export_decl): Likewise.\n\t* error.c (dump_function_decl): Likewise.\n\t* pt.c (instantiate_class_template): Likewise.\n\t* repo.c (repo_inline_used): Likewise.\n\t* rtti.c (build_headof): Likewise.\n\t(get_tinfo_fn_dynamic): Likewise.\n\t(build_x_typeid): Likewise.\n\t(get_tinfo_var): Likewise.\n\t(build_dynamic_cast_1): Likewise.\n\t(synthesize_tinfo_fn): Likewise.\n\t* search.c (lookup_field_1): Likewise.\n\t(dfs_debug_mark): Likewise.\n\t(maybe_suppress_debug_info): Likewise.\n\t* typeck.c (build_component_ref): Likewise.\n\t(build_component_addr): Likewise.\n\t* typeck2.c (process_init_constructor): Likewise.\n\nFrom-SVN: r31041", "tree": {"sha": "b5e17ba549d5dfeebcbd07dc4b3188c97385acc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5e17ba549d5dfeebcbd07dc4b3188c97385acc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c6b7393dcb6c97b57b5268dc84542369d5b367f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6b7393dcb6c97b57b5268dc84542369d5b367f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6b7393dcb6c97b57b5268dc84542369d5b367f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6b7393dcb6c97b57b5268dc84542369d5b367f/comments", "author": null, "committer": null, "parents": [{"sha": "bcc7684092d4ad419002e53e8cbd27aff8089d05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc7684092d4ad419002e53e8cbd27aff8089d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc7684092d4ad419002e53e8cbd27aff8089d05"}], "stats": {"total": 179, "additions": 99, "deletions": 80}, "files": [{"sha": "2e23f2fd5a6a90e18645e90ea688da60c5f90f46", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -1,3 +1,38 @@\n+1999-12-20  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (TYPE_VIRTUAL_P): Rename to ...\n+\t(TYPE_POLYMORPHIC_P): ... this.\n+\t(TYPE_USES_COMPLEX_INHERITANCE): Rename to ...\n+\t(TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P): ... this.\n+\t(TREE_CALLS_NEW): Remove.\n+\t(TREE_MANGLED): Likewise.\n+\t* call.c (build_vfield_ref): Use TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P,\n+\tand TYPE_POLYMORPHIC_P.\n+\t* class.c (check_bases): Likewise.\n+\t(finish_base_struct): Likewise.\n+\t(finish_struct_bits): Likewise.\n+\t(check_for_override): Likewise.\n+\t(finish_struct_1): Likewise.\n+\t(get_vfield_name): Likewise.\n+\t* decl.c (xref_basetypes): Likewise.\n+\t* decl2.c (import_export_class): Likewise.\n+\t(import_export_decl): Likewise.\n+\t* error.c (dump_function_decl): Likewise.\n+\t* pt.c (instantiate_class_template): Likewise.\n+\t* repo.c (repo_inline_used): Likewise.\n+\t* rtti.c (build_headof): Likewise.\n+\t(get_tinfo_fn_dynamic): Likewise.\n+\t(build_x_typeid): Likewise.\n+\t(get_tinfo_var): Likewise.\n+\t(build_dynamic_cast_1): Likewise.\n+\t(synthesize_tinfo_fn): Likewise.\n+\t* search.c (lookup_field_1): Likewise.\n+\t(dfs_debug_mark): Likewise.\n+\t(maybe_suppress_debug_info): Likewise.\n+\t* typeck.c (build_component_ref): Likewise.\n+\t(build_component_addr): Likewise.\n+\t* typeck2.c (process_init_constructor): Likewise.\n+\t\n 1999-12-20  Nathan Sidwell  <nathan@acm.org>\n \n \t* typeck.c (strip_all_pointer_quals): New static function."}, {"sha": "cfc6fd5c74541ab70cd95ff1d38a47267f17ab10", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -111,7 +111,7 @@ build_vfield_ref (datum, type)\n   if (TREE_CODE (TREE_TYPE (datum)) == REFERENCE_TYPE)\n     datum = convert_from_reference (datum);\n \n-  if (! TYPE_USES_COMPLEX_INHERITANCE (type))\n+  if (! TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (type))\n     rval = build (COMPONENT_REF, TREE_TYPE (TYPE_VFIELD (type)),\n \t\t  datum, TYPE_VFIELD (type));\n   else"}, {"sha": "02b034aa416ddc8860e8f2cc9e868ff4f6d37fee", "filename": "gcc/cp/class.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -1542,10 +1542,10 @@ check_bases (t, cant_have_default_ctor_p, cant_have_const_ctor_p,\n \t  continue;\n \t}\n \n-      /* Effective C++ rule 14.  We only need to check TYPE_VIRTUAL_P\n+      /* Effective C++ rule 14.  We only need to check TYPE_POLYMORPHIC_P\n \t here because the case of virtual functions but non-virtual\n \t dtor is handled in finish_struct_1.  */\n-      if (warn_ecpp && ! TYPE_VIRTUAL_P (basetype)\n+      if (warn_ecpp && ! TYPE_POLYMORPHIC_P (basetype)\n \t  && TYPE_HAS_DESTRUCTOR (basetype))\n \tcp_warning (\"base class `%#T' has a non-virtual destructor\",\n \t\t    basetype);\n@@ -1584,6 +1584,7 @@ check_bases (t, cant_have_default_ctor_p, cant_have_const_ctor_p,\n       TYPE_OVERLOADS_CALL_EXPR (t) |= TYPE_OVERLOADS_CALL_EXPR (basetype);\n       TYPE_OVERLOADS_ARRAY_REF (t) |= TYPE_OVERLOADS_ARRAY_REF (basetype);\n       TYPE_OVERLOADS_ARROW (t) |= TYPE_OVERLOADS_ARROW (basetype);\n+      TYPE_POLYMORPHIC_P (t) |= TYPE_POLYMORPHIC_P (basetype);\n \n       /* Derived classes can implicitly become COMified if their bases\n \t are COM.  */\n@@ -1630,7 +1631,7 @@ finish_base_struct (t, b)\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n       tree basetype = BINFO_TYPE (base_binfo);\n \n-      if (TYPE_VIRTUAL_P (basetype))\n+      if (TYPE_POLYMORPHIC_P (basetype))\n \t{\n \t  /* Ensure that this is set from at least a virtual base\n              class.  */\n@@ -1770,8 +1771,9 @@ finish_struct_bits (t, max_has_virtual)\n       TYPE_NEEDS_CONSTRUCTING (variants) = TYPE_NEEDS_CONSTRUCTING (t);\n       TYPE_NEEDS_DESTRUCTOR (variants) = TYPE_NEEDS_DESTRUCTOR (t);\n \n-      TYPE_USES_COMPLEX_INHERITANCE (variants) = TYPE_USES_COMPLEX_INHERITANCE (t);\n-      TYPE_VIRTUAL_P (variants) = TYPE_VIRTUAL_P (t);\n+      TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (variants) \n+\t= TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (t);\n+      TYPE_POLYMORPHIC_P (variants) = TYPE_POLYMORPHIC_P (t);\n       TYPE_USES_VIRTUAL_BASECLASSES (variants) = TYPE_USES_VIRTUAL_BASECLASSES (t);\n       /* Copy whatever these are holding today.  */\n       TYPE_MIN_VALUE (variants) = TYPE_MIN_VALUE (t);\n@@ -2926,7 +2928,7 @@ check_for_override (decl, ctype)\n   for (i = 0; i < n_baselinks; i++)\n     {\n       tree base_binfo = TREE_VEC_ELT (binfos, i);\n-      if (TYPE_VIRTUAL_P (BINFO_TYPE (base_binfo)))\n+      if (TYPE_POLYMORPHIC_P (BINFO_TYPE (base_binfo)))\n \t{\n \t  tree tmp = get_matching_virtual\n \t    (base_binfo, decl,\n@@ -4290,21 +4292,22 @@ finish_struct_1 (t)\n \t= size_binop (PLUS_EXPR, offset, DECL_FIELD_BITPOS (vfield));\n       TYPE_VFIELD (t) = vfield;\n     }\n+\n+  /* If this vtbl pointer is new, add it to the list of vtbl\n+     pointers in this class.  */\n     \n   if (has_virtual > max_has_virtual)\n     max_has_virtual = has_virtual;\n   if (max_has_virtual > 0)\n-    TYPE_VIRTUAL_P (t) = 1;\n+    TYPE_POLYMORPHIC_P (t) = 1;\n \n-  if (flag_rtti && TYPE_VIRTUAL_P (t) && !pending_hard_virtuals)\n+  if (flag_rtti && TYPE_POLYMORPHIC_P (t) && !pending_hard_virtuals)\n     modify_all_vtables (t, NULL_TREE);\n \n-  while (pending_hard_virtuals)\n-    {\n-      modify_all_vtables (t,\n-\t\t\t  TREE_VALUE (pending_hard_virtuals));\n-      pending_hard_virtuals = TREE_CHAIN (pending_hard_virtuals);\n-    }\n+  for (pending_hard_virtuals = nreverse (pending_hard_virtuals);\n+       pending_hard_virtuals;\n+       pending_hard_virtuals = TREE_CHAIN (pending_hard_virtuals))\n+    modify_all_vtables (t, TREE_VALUE (pending_hard_virtuals));\n   \n   if (TYPE_USES_VIRTUAL_BASECLASSES (t))\n     {\n@@ -5525,7 +5528,7 @@ get_vfield_name (type)\n   char *buf;\n \n   while (BINFO_BASETYPES (binfo)\n-\t && TYPE_VIRTUAL_P (BINFO_TYPE (BINFO_BASETYPE (binfo, 0)))\n+\t && TYPE_POLYMORPHIC_P (BINFO_TYPE (BINFO_BASETYPE (binfo, 0)))\n \t && ! TREE_VIA_VIRTUAL (BINFO_BASETYPE (binfo, 0)))\n     binfo = BINFO_BASETYPE (binfo, 0);\n "}, {"sha": "3708dfa60b9b8fa669f7ace206e8b417712aa7f2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -47,7 +47,7 @@ Boston, MA 02111-1307, USA.  */\n       TEMPLATE_PARMS_FOR_INLINE.\n       DELETE_EXPR_USE_VEC (in DELETE_EXPR).\n       (TREE_CALLS_NEW) (in _EXPR or _REF) (commented-out).\n-      TYPE_USES_COMPLEX_INHERITANCE (in _TYPE).\n+      TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (in _TYPE).\n       C_DECLARED_LABEL_FLAG (in LABEL_DECL)\n       INHERITED_VALUE_BINDING_P (in CPLUS_BINDING)\n       BASELINK_P (in TREE_LIST)\n@@ -56,7 +56,7 @@ Boston, MA 02111-1307, USA.  */\n    2: IDENTIFIER_OPNAME_P.\n       BINFO_VBASE_MARKED.\n       BINFO_FIELDS_MARKED.\n-      TYPE_VIRTUAL_P.\n+      TYPE_POLYMORHPIC_P (in _TYPE)\n       ICS_THIS_FLAG (in _CONV)\n       STMT_LINENO_FOR_FN_P (in _STMT)\n       BINDING_HAS_LEVEL_P (in CPLUS_BINDING)\n@@ -2065,40 +2065,16 @@ struct lang_decl\n    using a twos-complement negated operand.  */\n #define TREE_NEGATED_INT(NODE) TREE_LANG_FLAG_0 (INTEGER_CST_CHECK (NODE))\n \n-#if 0\t\t\t\t/* UNUSED */\n-/* Nonzero in any kind of _EXPR or _REF node means that it is a call\n-   to a storage allocation routine.  If, later, alternate storage\n-   is found to hold the object, this call can be ignored.  */\n-#define TREE_CALLS_NEW(NODE) (TREE_LANG_FLAG_1 (NODE))\n-#endif\n-\n-/* Nonzero in any kind of _TYPE that uses multiple inheritance\n-   or virtual baseclasses.  */\n-#define TYPE_USES_COMPLEX_INHERITANCE(NODE) (TREE_LANG_FLAG_1 (NODE))\n-\n-#if 0\t\t\t\t/* UNUSED */\n-/* Nonzero in IDENTIFIER_NODE means that this name is not the name the user\n-   gave; it's a DECL_NESTED_TYPENAME.  Someone may want to set this on\n-   mangled function names, too, but it isn't currently.  */\n-#define TREE_MANGLED(NODE) (FOO)\n-#endif\n-\n-#if 0\t\t\t\t/* UNUSED */\n-/* Nonzero in IDENTIFIER_NODE means that this name is overloaded, and\n-   should be looked up in a non-standard way.  */\n-#define DECL_OVERLOADED(NODE) (FOO)\n-#endif\n+/* Nonzero in any kind of _TYPE where conversions to base-classes may\n+   involve pointer arithmetic.  If this is zero, then converting to\n+   a base-class never requires changing the value of the pointer.  */\n+#define TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P(NODE) (TREE_LANG_FLAG_1 (NODE))\n \n-/* Nonzero if this (non-TYPE)_DECL has its virtual attribute set.\n-   For a FUNCTION_DECL, this is when the function is a virtual function.\n-   For a VAR_DECL, this is when the variable is a virtual function table.\n-   For a FIELD_DECL, when the field is the field for the virtual function table.\n-   For an IDENTIFIER_NODE, nonzero if any function with this name\n-   has been declared virtual.\n+/* [class.virtual]\n \n-   For a _TYPE if it uses virtual functions (or is derived from\n-   one that does).  */\n-#define TYPE_VIRTUAL_P(NODE) (TREE_LANG_FLAG_2 (NODE))\n+   A class that declares or inherits a virtual function is called a\n+   polymorphic class.  */\n+#define TYPE_POLYMORPHIC_P(NODE) (TREE_LANG_FLAG_2 (NODE))\n \n extern int flag_new_for_scope;\n "}, {"sha": "db44737cc13a5b08a9d6bd2c4c660d39808a6562", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -12477,13 +12477,23 @@ xref_basetypes (code_type_node, name, ref, binfo)\n \t  if (via_virtual || TYPE_USES_VIRTUAL_BASECLASSES (basetype))\n \t    {\n \t      TYPE_USES_VIRTUAL_BASECLASSES (ref) = 1;\n-\t      TYPE_USES_COMPLEX_INHERITANCE (ref) = 1;\n+\t      /* Converting to a virtual base class requires looking\n+\t\t up the offset of the virtual base.  */\n+\t      TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (ref) = 1;\n \t    }\n \n \t  if (CLASS_TYPE_P (basetype))\n \t    {\n \t      TYPE_GETS_NEW (ref) |= TYPE_GETS_NEW (basetype);\n \t      TYPE_GETS_DELETE (ref) |= TYPE_GETS_DELETE (basetype);\n+\t      /* If the base-class uses multiple inheritance, so do we.  */\n+\t      TYPE_USES_MULTIPLE_INHERITANCE (ref) \n+\t\t|= TYPE_USES_MULTIPLE_INHERITANCE (basetype);\n+\t      /* Likewise, if converting to a base of the base may require\n+\t\t code, then we may need to generate code to convert to a\n+\t\t base as well.  */\n+\t      TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (ref) \n+\t\t|= TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (basetype);\n \t    }\n \n \t  i += 1;\n@@ -12495,19 +12505,13 @@ xref_basetypes (code_type_node, name, ref, binfo)\n     BINFO_BASETYPES (TYPE_BINFO (ref)) = NULL_TREE;\n \n   if (i > 1)\n-    TYPE_USES_MULTIPLE_INHERITANCE (ref) = 1;\n-  else if (i == 1)\n     {\n-      tree basetype = BINFO_TYPE (TREE_VEC_ELT (binfos, 0));\n-      \n-      if (CLASS_TYPE_P (basetype))\n-\tTYPE_USES_MULTIPLE_INHERITANCE (ref)\n-\t  = TYPE_USES_MULTIPLE_INHERITANCE (basetype);\n+      TYPE_USES_MULTIPLE_INHERITANCE (ref) = 1;\n+      /* If there is more than one non-empty they cannot be at the same\n+\t address.  */\n+      TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (ref) = 1;\n     }\n \n-  if (TYPE_USES_MULTIPLE_INHERITANCE (ref))\n-    TYPE_USES_COMPLEX_INHERITANCE (ref) = 1;\n-\n   /* Unmark all the types.  */\n   while (--i >= 0)\n     CLEAR_CLASSTYPE_MARKED (BINFO_TYPE (TREE_VEC_ELT (binfos, i)));"}, {"sha": "58cbf3cf074dc027b6b2c87c767ec60903a162e8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -2480,7 +2480,7 @@ import_export_class (ctype)\n   /* Base our import/export status on that of the first non-inline,\n      non-abstract virtual function, if any.  */\n   if (import_export == 0\n-      && TYPE_VIRTUAL_P (ctype)\n+      && TYPE_POLYMORPHIC_P (ctype)\n       && ! CLASSTYPE_TEMPLATE_INSTANTIATION (ctype))\n     {\n       tree method;\n@@ -2684,7 +2684,7 @@ import_export_decl (decl)\n \timport_export_class (ctype);\n \n       if (IS_AGGR_TYPE (ctype) && CLASSTYPE_INTERFACE_KNOWN (ctype)\n-\t  && TYPE_VIRTUAL_P (ctype)\n+\t  && TYPE_POLYMORPHIC_P (ctype)\n \t  /* If -fno-rtti, we're not necessarily emitting this stuff with\n \t     the class, so go ahead and emit it now.  This can happen\n \t     when a class is used in exception handling.  */"}, {"sha": "e7633f5c58dcf16e7af9cf8c98b67f86f05b6beb", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -1134,7 +1134,7 @@ dump_function_decl (t, flags)\n     /* OK */;\n   else if (DECL_STATIC_FUNCTION_P (t))\n     OB_PUTS (\"static \");\n-  else if (TYPE_VIRTUAL_P (t))\n+  else if (TYPE_POLYMORPHIC_P (t))\n     OB_PUTS (\"virtual \");\n   \n   /* Print the return type?  */"}, {"sha": "4d76cfc57c61129ff292ba85847f5048d2acecca", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -4833,8 +4833,8 @@ instantiate_class_template (type)\n   TYPE_HAS_CONST_INIT_REF (type) = TYPE_HAS_CONST_INIT_REF (pattern);\n   TYPE_HAS_DEFAULT_CONSTRUCTOR (type) = TYPE_HAS_DEFAULT_CONSTRUCTOR (pattern);\n   TYPE_HAS_CONVERSION (type) = TYPE_HAS_CONVERSION (pattern);\n-  TYPE_USES_COMPLEX_INHERITANCE (type)\n-    = TYPE_USES_COMPLEX_INHERITANCE (pattern);\n+  TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (type)\n+    = TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (pattern);\n   TYPE_USES_MULTIPLE_INHERITANCE (type)\n     = TYPE_USES_MULTIPLE_INHERITANCE (pattern);\n   TYPE_USES_VIRTUAL_BASECLASSES (type)"}, {"sha": "92597aa58f5921243bf6f550ae0f47d980cea731", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -170,7 +170,8 @@ repo_inline_used (fn)\n     return;\n \n   /* Member functions of polymorphic classes go with their vtables.  */\n-  if (DECL_FUNCTION_MEMBER_P (fn) && TYPE_VIRTUAL_P (DECL_CLASS_CONTEXT (fn)))\n+  if (DECL_FUNCTION_MEMBER_P (fn) \n+      && TYPE_POLYMORPHIC_P (DECL_CLASS_CONTEXT (fn)))\n     {\n       repo_vtable_used (DECL_CLASS_CONTEXT (fn));\n       return;"}, {"sha": "74113aba2c65751133caddf8cdfed8e7438e5722", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -84,7 +84,7 @@ build_headof_sub (exp)\n \n /* Given the expression EXP of type `class *', return the head of the\n    object pointed to by EXP with type cv void*, if the class has any\n-   virtual functions (TYPE_VIRTUAL_P), else just return the\n+   virtual functions (TYPE_POLYMORPHIC_P), else just return the\n    expression.  */\n \n static tree\n@@ -102,7 +102,7 @@ build_headof (exp)\n     }\n   type = TREE_TYPE (type);\n \n-  if (!TYPE_VIRTUAL_P (type))\n+  if (!TYPE_POLYMORPHIC_P (type))\n     return exp;\n   if (CLASSTYPE_COM_INTERFACE (type))\n     {\n@@ -207,7 +207,7 @@ get_tinfo_fn_dynamic (exp)\n     }\n \n   /* If exp is a reference to polymorphic type, get the real type_info.  */\n-  if (TYPE_VIRTUAL_P (type) && ! resolves_to_fixed_type_p (exp, 0))\n+  if (TYPE_POLYMORPHIC_P (type) && ! resolves_to_fixed_type_p (exp, 0))\n     {\n       /* build reference to type_info from vtable.  */\n       tree t;\n@@ -274,7 +274,7 @@ build_x_typeid (exp)\n \n   if (TREE_CODE (exp) == INDIRECT_REF\n       && TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == POINTER_TYPE\n-      && TYPE_VIRTUAL_P (TREE_TYPE (exp))\n+      && TYPE_POLYMORPHIC_P (TREE_TYPE (exp))\n       && ! resolves_to_fixed_type_p (exp, &nonnull)\n       && ! nonnull)\n     {\n@@ -327,7 +327,7 @@ get_tinfo_var (type)\n     {\n       if (CLASSTYPE_N_BASECLASSES (type) == 0)\n \tsize = 2 * POINTER_SIZE;\n-      else if (! TYPE_USES_COMPLEX_INHERITANCE (type)\n+      else if (! TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (type)\n \t       && (TREE_VIA_PUBLIC\n \t\t   (TREE_VEC_ELT (TYPE_BINFO_BASETYPES (type), 0))))\n \tsize = 3 * POINTER_SIZE;\n@@ -562,7 +562,7 @@ build_dynamic_cast_1 (type, expr)\n   }\n \n   /* Otherwise *exprtype must be a polymorphic class (have a vtbl).  */\n-  if (TYPE_VIRTUAL_P (TREE_TYPE (exprtype)))\n+  if (TYPE_POLYMORPHIC_P (TREE_TYPE (exprtype)))\n     {\n       tree expr1;\n       /* if TYPE is `void *', return pointer to complete object.  */\n@@ -1162,7 +1162,7 @@ synthesize_tinfo_fn (fndecl)\n     {\n       if (CLASSTYPE_N_BASECLASSES (type) == 0)\n \texpand_generic_desc (tdecl, type, \"__rtti_user\");\n-      else if (! TYPE_USES_COMPLEX_INHERITANCE (type)\n+      else if (! TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (type)\n \t       && (TREE_VIA_PUBLIC\n \t\t   (TREE_VEC_ELT (TYPE_BINFO_BASETYPES (type), 0))))\n \texpand_si_desc (tdecl, type);"}, {"sha": "60f9405547de885603841ac0034b25fef535c9e3", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -657,7 +657,7 @@ lookup_field_1 (type, name)\n   if (name == vptr_identifier)\n     {\n       /* Give the user what s/he thinks s/he wants.  */\n-      if (TYPE_VIRTUAL_P (type))\n+      if (TYPE_POLYMORPHIC_P (type))\n \treturn TYPE_VFIELD (type);\n     }\n   return NULL_TREE;\n@@ -2373,7 +2373,7 @@ dfs_debug_mark (binfo, data)\n \n   /* If the class has virtual functions, we'll emit the debug info\n      with the vtable.  */\n-  if (TYPE_VIRTUAL_P (t))\n+  if (TYPE_POLYMORPHIC_P (t))\n     return NULL_TREE;\n \n   /* We cannot rely on some alien method to solve our problems,\n@@ -2942,7 +2942,7 @@ maybe_suppress_debug_info (t)\n     /* Don't set it.  */;\n   /* If the class has virtual functions, write out the debug info\n      along with the vtable.  */\n-  else if (TYPE_VIRTUAL_P (t))\n+  else if (TYPE_POLYMORPHIC_P (t))\n     TYPE_DECL_SUPPRESS_DEBUG (TYPE_MAIN_DECL (t)) = 1;\n \n   /* Otherwise, just emit the debug info normally.  */"}, {"sha": "9d5bfa781dbf34c994dc1689b9729b4ccdaa1f63", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -2200,7 +2200,7 @@ build_component_ref (datum, component, basetype_path, protect)\n \t}\n \n       /* Handle base classes here...  */\n-      if (base != basetype && TYPE_USES_COMPLEX_INHERITANCE (basetype))\n+      if (base != basetype && TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (basetype))\n \t{\n \t  tree addr = build_unary_op (ADDR_EXPR, datum, 0);\n \t  if (integer_zerop (addr))\n@@ -4275,7 +4275,7 @@ build_component_addr (arg, argtype)\n     }\n \n   if (TREE_CODE (field) == FIELD_DECL\n-      && TYPE_USES_COMPLEX_INHERITANCE (basetype))\n+      && TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (basetype))\n     {\n       /* Can't convert directly to ARGTYPE, since that\n \t may have the same pointer type as one of our"}, {"sha": "182b3d7df76002c0f1ecc908c50bcf637f34f739", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6b7393dcb6c97b57b5268dc84542369d5b367f/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=4c6b7393dcb6c97b57b5268dc84542369d5b367f", "patch": "@@ -831,7 +831,7 @@ process_init_constructor (type, init, elts)\n \t      return error_mark_node;\n \t    }\n \n-\t  if (TYPE_VIRTUAL_P (type))\n+\t  if (TYPE_POLYMORPHIC_P (type))\n \t    {\n \t      sorry (\"initializer list for object using virtual functions\");\n \t      return error_mark_node;"}]}