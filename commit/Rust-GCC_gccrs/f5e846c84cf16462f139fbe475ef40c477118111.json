{"sha": "f5e846c84cf16462f139fbe475ef40c477118111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlODQ2Yzg0Y2YxNjQ2MmYxMzlmYmU0NzVlZjQwYzQ3NzExODExMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-05-24T21:43:42Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-05-24T21:43:42Z"}, "message": "calls.c (expand_call): Handle cleanups in tail-recursion arguments analagously to cleanups in sibling...\n\n\t* calls.c (expand_call): Handle cleanups in tail-recursion\n\targuments analagously to cleanups in sibling calls.\n\nFrom-SVN: r34143", "tree": {"sha": "a2e82baf04352a994fb25663c70965aa05e4b6ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2e82baf04352a994fb25663c70965aa05e4b6ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5e846c84cf16462f139fbe475ef40c477118111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e846c84cf16462f139fbe475ef40c477118111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e846c84cf16462f139fbe475ef40c477118111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e846c84cf16462f139fbe475ef40c477118111/comments", "author": null, "committer": null, "parents": [{"sha": "0d0cd4416983022d5bd65c29b4368069f55684d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d0cd4416983022d5bd65c29b4368069f55684d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d0cd4416983022d5bd65c29b4368069f55684d6"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "27b55542a79301dffadb4afbba478f36ff31a021", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e846c84cf16462f139fbe475ef40c477118111/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e846c84cf16462f139fbe475ef40c477118111/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5e846c84cf16462f139fbe475ef40c477118111", "patch": "@@ -1,3 +1,8 @@\n+2000-05-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* calls.c (expand_call): Handle cleanups in tail-recursion\n+\targuments analagously to cleanups in sibling calls.\n+\n 2000-05-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* simplify-rtx.c: Rename macro SIGN_EXTEND to HWI_SIGN_EXTEND."}, {"sha": "1c2c2eacec2cf2a1913f036bb32a19fac5b978b8", "filename": "gcc/calls.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e846c84cf16462f139fbe475ef40c477118111/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e846c84cf16462f139fbe475ef40c477118111/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f5e846c84cf16462f139fbe475ef40c477118111", "patch": "@@ -2400,7 +2400,7 @@ expand_call (exp, target, ignore)\n \t    break;\n \n \t  case 1: /* Mildly unsafe.  */\n-\t      args[i].tree_value = unsave_expr (args[i].tree_value);\n+\t    args[i].tree_value = unsave_expr (args[i].tree_value);\n \t    break;\n \n \t  case 2: /* Wildly unsafe.  */\n@@ -2444,9 +2444,20 @@ expand_call (exp, target, ignore)\n \t made until after RTL generation for the entire function is\n \t complete.  */\n       start_sequence ();\n-\n+      /* If expanding any of the arguments creates cleanups, we can't\n+\t do a tailcall.  So, we'll need to pop the pending cleanups\n+\t list.  If, however, all goes well, and there are no cleanups\n+\t then the call to expand_start_target_temps will have no\n+\t effect.  */\n+      expand_start_target_temps ();\n       if (optimize_tail_recursion (actparms, get_last_insn ()))\n-        tail_recursion_insns = get_insns ();\n+\t{\n+\t  if (any_pending_cleanups (1))\n+\t    try_tail_call = try_tail_recursion = 0;\n+\t  else\n+\t    tail_recursion_insns = get_insns ();\n+\t}\n+      expand_end_target_temps ();\n       end_sequence ();\n \n       /* Restore the original pending stack adjustment for the sibling and"}, {"sha": "573149fdd317f26f8cff81711ad8207b33c6acf7", "filename": "gcc/testsuite/g++.old-deja/g++.eh/crash4.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e846c84cf16462f139fbe475ef40c477118111/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e846c84cf16462f139fbe475ef40c477118111/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash4.C?ref=f5e846c84cf16462f139fbe475ef40c477118111", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link:\n+// Origin: Nathan Sidwell <nathan@codesourcery.com>\n+// Special g++ Options: -O2\n+\n+struct A\n+{\n+  A (int) { }\n+  ~A () { }\n+  int get () const { return 0; }\n+};\n+\n+void f (const A &s) {\n+  f (s.get ());\n+}"}]}