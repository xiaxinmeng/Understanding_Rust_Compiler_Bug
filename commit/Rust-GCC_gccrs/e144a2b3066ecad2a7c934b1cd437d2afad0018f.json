{"sha": "e144a2b3066ecad2a7c934b1cd437d2afad0018f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE0NGEyYjMwNjZlY2FkMmE3YzkzNGIxY2Q0MzdkMmFmYWQwMDE4Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-08-24T11:17:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-08-24T11:17:16Z"}, "message": "cfg.h (struct control_flow_graph): Add edge_flags_allocated and bb_flags_allocated members.\n\n2018-08-24  Richard Biener  <rguenther@suse.de>\n\n\t* cfg.h (struct control_flow_graph): Add edge_flags_allocated and\n\tbb_flags_allocated members.\n\t(auto_flag): New RAII class for allocating flags.\n\t(auto_edge_flag): New RAII class for allocating edge flags.\n\t(auto_bb_flag): New RAII class for allocating bb flags.\n\t* cfgloop.c (verify_loop_structure): Allocate temporary edge\n\tflag dynamically.\n\t* cfganal.c (dfs_enumerate_from): Remove use of visited sbitmap\n\tin favor of temporarily allocated BB flag.\n\t* hsa-brig.c: Re-order includes.\n\t* hsa-dump.c: Likewise.\n\t* hsa-regalloc.c: Likewise.\n\t* print-rtl.c: Likewise.\n\t* profile-count.c: Likewise.\n\nFrom-SVN: r263830", "tree": {"sha": "1bf53ff1e85aa724075fc8e89e510ebad078c63e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bf53ff1e85aa724075fc8e89e510ebad078c63e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e144a2b3066ecad2a7c934b1cd437d2afad0018f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e144a2b3066ecad2a7c934b1cd437d2afad0018f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e144a2b3066ecad2a7c934b1cd437d2afad0018f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e144a2b3066ecad2a7c934b1cd437d2afad0018f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6a84c265a32e6f407cf6712040df65527ffcf445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a84c265a32e6f407cf6712040df65527ffcf445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a84c265a32e6f407cf6712040df65527ffcf445"}], "stats": {"total": 137, "additions": 94, "deletions": 43}, "files": [{"sha": "e95f409da7e8a06892b8501dad0486193615413d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e144a2b3066ecad2a7c934b1cd437d2afad0018f", "patch": "@@ -1,3 +1,20 @@\n+2018-08-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfg.h (struct control_flow_graph): Add edge_flags_allocated and\n+\tbb_flags_allocated members.\n+\t(auto_flag): New RAII class for allocating flags.\n+\t(auto_edge_flag): New RAII class for allocating edge flags.\n+\t(auto_bb_flag): New RAII class for allocating bb flags.\n+\t* cfgloop.c (verify_loop_structure): Allocate temporary edge\n+\tflag dynamically.\n+\t* cfganal.c (dfs_enumerate_from): Remove use of visited sbitmap\n+\tin favor of temporarily allocated BB flag.\n+\t* hsa-brig.c: Re-order includes.\n+\t* hsa-dump.c: Likewise.\n+\t* hsa-regalloc.c: Likewise.\n+\t* print-rtl.c: Likewise.\n+\t* profile-count.c: Likewise.\n+\n 2018-08-24  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/86989"}, {"sha": "7be89d406043624df1d9beb00b4f39c954d4d3b0", "filename": "gcc/cfg.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=e144a2b3066ecad2a7c934b1cd437d2afad0018f", "patch": "@@ -79,6 +79,8 @@ init_flow (struct function *the_fun)\n     = EXIT_BLOCK_PTR_FOR_FN (the_fun);\n   EXIT_BLOCK_PTR_FOR_FN (the_fun)->prev_bb\n     = ENTRY_BLOCK_PTR_FOR_FN (the_fun);\n+  the_fun->cfg->edge_flags_allocated = EDGE_ALL_FLAGS;\n+  the_fun->cfg->bb_flags_allocated = BB_ALL_FLAGS;\n }\n \f\n /* Helper function for remove_edge and clear_edges.  Frees edge structure"}, {"sha": "9fff135d11f2ce21b290a471a7054b5aea833926", "filename": "gcc/cfg.h", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fcfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fcfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.h?ref=e144a2b3066ecad2a7c934b1cd437d2afad0018f", "patch": "@@ -74,6 +74,10 @@ struct GTY(()) control_flow_graph {\n \n   /* Maximal count of BB in function.  */\n   profile_count count_max;\n+\n+  /* Dynamically allocated edge/bb flags.  */\n+  int edge_flags_allocated;\n+  int bb_flags_allocated;\n };\n \n \n@@ -121,4 +125,60 @@ extern basic_block get_bb_copy (basic_block);\n void set_loop_copy (struct loop *, struct loop *);\n struct loop *get_loop_copy (struct loop *);\n \n+/* Generic RAII class to allocate a bit from storage of integer type T.\n+   The allocated bit is accessible as mask with the single bit set\n+   via the conversion operator to T.  */\n+\n+template <class T>\n+class auto_flag\n+{\n+public:\n+  /* static assert T is integer type of max HOST_WIDE_INT precision.  */\n+  auto_flag (T *sptr)\n+    {\n+      m_sptr = sptr;\n+      int free_bit = ffs_hwi (~*sptr);\n+      /* If there are no unset bits... */\n+      if (free_bit == 0)\n+\tgcc_unreachable ();\n+      m_flag = HOST_WIDE_INT_1U << (free_bit - 1);\n+      /* ...or if T is signed and thus the complement is sign-extended,\n+         check if we ran out of bits.  We could spare us this bit\n+\t if we could use C++11 std::make_unsigned<T>::type to pass\n+\t ~*sptr to ffs_hwi.  */\n+      if (m_flag == 0)\n+\tgcc_unreachable ();\n+      gcc_checking_assert ((*sptr & m_flag) == 0);\n+      *sptr |= m_flag;\n+    }\n+  ~auto_flag ()\n+    {\n+      gcc_checking_assert ((*m_sptr & m_flag) == m_flag);\n+      *m_sptr &= ~m_flag;\n+    }\n+  operator T () const { return m_flag; }\n+private:\n+  T *m_sptr;\n+  T m_flag;\n+};\n+\n+/* RAII class to allocate an edge flag for temporary use.  You have\n+   to clear the flag from all edges when you are finished using it.  */\n+\n+class auto_edge_flag : public auto_flag<int>\n+{\n+public:\n+  auto_edge_flag (function *fun)\n+    : auto_flag (&fun->cfg->edge_flags_allocated) {}\n+};\n+\n+/* RAII class to allocate a bb flag for temporary use.  You have\n+   to clear the flag from all edges when you are finished using it.  */\n+class auto_bb_flag : public auto_flag<int>\n+{\n+public:\n+  auto_bb_flag (function *fun)\n+    : auto_flag (&fun->cfg->bb_flags_allocated) {}\n+};\n+\n #endif /* GCC_CFG_H */"}, {"sha": "b9944c6ef982129b228970f4cbfb65a5b3b934e5", "filename": "gcc/cfganal.c", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=e144a2b3066ecad2a7c934b1cd437d2afad0018f", "patch": "@@ -1145,41 +1145,12 @@ dfs_enumerate_from (basic_block bb, int reverse,\n {\n   basic_block *st, lbb;\n   int sp = 0, tv = 0;\n-  unsigned size;\n \n-  /* A bitmap to keep track of visited blocks.  Allocating it each time\n-     this function is called is not possible, since dfs_enumerate_from\n-     is often used on small (almost) disjoint parts of cfg (bodies of\n-     loops), and allocating a large sbitmap would lead to quadratic\n-     behavior.  */\n-  static sbitmap visited;\n-  static unsigned v_size;\n+  auto_bb_flag visited (cfun);\n \n-#define MARK_VISITED(BB) (bitmap_set_bit (visited, (BB)->index))\n-#define UNMARK_VISITED(BB) (bitmap_clear_bit (visited, (BB)->index))\n-#define VISITED_P(BB) (bitmap_bit_p (visited, (BB)->index))\n-\n-  /* Resize the VISITED sbitmap if necessary.  */\n-  size = last_basic_block_for_fn (cfun);\n-  if (size < 10)\n-    size = 10;\n-\n-  if (!visited)\n-    {\n-\n-      visited = sbitmap_alloc (size);\n-      bitmap_clear (visited);\n-      v_size = size;\n-    }\n-  else if (v_size < size)\n-    {\n-      /* Ensure that we increase the size of the sbitmap exponentially.  */\n-      if (2 * v_size > size)\n-\tsize = 2 * v_size;\n-\n-      visited = sbitmap_resize (visited, size, 0);\n-      v_size = size;\n-    }\n+#define MARK_VISITED(BB) ((BB)->flags |= visited)\n+#define UNMARK_VISITED(BB) ((BB)->flags &= ~visited)\n+#define VISITED_P(BB) (((BB)->flags & visited) != 0)\n \n   st = XNEWVEC (basic_block, rslt_max);\n   rslt[tv++] = st[sp++] = bb;"}, {"sha": "0917b716da7b9b5021ceebce7e4fad07a74c9117", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=e144a2b3066ecad2a7c934b1cd437d2afad0018f", "patch": "@@ -1539,6 +1539,7 @@ verify_loop_structure (void)\n   /* Check irreducible loops.  */\n   if (loops_state_satisfies_p (LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS))\n     {\n+      auto_edge_flag saved_irr_mask (cfun);\n       /* Record old info.  */\n       auto_sbitmap irreds (last_basic_block_for_fn (cfun));\n       FOR_EACH_BB_FN (bb, cfun)\n@@ -1550,7 +1551,7 @@ verify_loop_structure (void)\n \t    bitmap_clear_bit (irreds, bb->index);\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    if (e->flags & EDGE_IRREDUCIBLE_LOOP)\n-\t      e->flags |= EDGE_ALL_FLAGS + 1;\n+\t      e->flags |= saved_irr_mask;\n \t}\n \n       /* Recount it.  */\n@@ -1576,20 +1577,20 @@ verify_loop_structure (void)\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    {\n \t      if ((e->flags & EDGE_IRREDUCIBLE_LOOP)\n-\t\t  && !(e->flags & (EDGE_ALL_FLAGS + 1)))\n+\t\t  && !(e->flags & saved_irr_mask))\n \t\t{\n \t\t  error (\"edge from %d to %d should be marked irreducible\",\n \t\t\t e->src->index, e->dest->index);\n \t\t  err = 1;\n \t\t}\n \t      else if (!(e->flags & EDGE_IRREDUCIBLE_LOOP)\n-\t\t       && (e->flags & (EDGE_ALL_FLAGS + 1)))\n+\t\t       && (e->flags & saved_irr_mask))\n \t\t{\n \t\t  error (\"edge from %d to %d should not be marked irreducible\",\n \t\t\t e->src->index, e->dest->index);\n \t\t  err = 1;\n \t\t}\n-\t      e->flags &= ~(EDGE_ALL_FLAGS + 1);\n+\t      e->flags &= ~saved_irr_mask;\n \t    }\n \t}\n     }"}, {"sha": "ca066118ebd725ecb8cdec6da71eed76c6035e67", "filename": "gcc/hsa-brig.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fhsa-brig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fhsa-brig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-brig.c?ref=e144a2b3066ecad2a7c934b1cd437d2afad0018f", "patch": "@@ -35,8 +35,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"output.h\"\n #include \"basic-block.h\"\n-#include \"cfg.h\"\n #include \"function.h\"\n+#include \"cfg.h\"\n #include \"fold-const.h\"\n #include \"stringpool.h\"\n #include \"gimple-pretty-print.h\""}, {"sha": "96f82647558080b1cfa6549d18c994410d9fdbb4", "filename": "gcc/hsa-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fhsa-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fhsa-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-dump.c?ref=e144a2b3066ecad2a7c934b1cd437d2afad0018f", "patch": "@@ -27,8 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vec.h\"\n #include \"tree.h\"\n #include \"basic-block.h\"\n-#include \"cfg.h\"\n #include \"function.h\"\n+#include \"cfg.h\"\n #include \"dumpfile.h\"\n #include \"gimple-pretty-print.h\"\n #include \"cgraph.h\""}, {"sha": "819f680d1bcae34530f98de99c01a978964e310c", "filename": "gcc/hsa-regalloc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fhsa-regalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fhsa-regalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-regalloc.c?ref=e144a2b3066ecad2a7c934b1cd437d2afad0018f", "patch": "@@ -27,9 +27,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"dominance.h\"\n #include \"basic-block.h\"\n-#include \"cfg.h\"\n-#include \"cfganal.h\"\n #include \"function.h\"\n+#include \"cfganal.h\"\n+#include \"cfg.h\"\n #include \"bitmap.h\"\n #include \"dumpfile.h\"\n #include \"cgraph.h\""}, {"sha": "5dd2e31340a34562741a3ef0a9f32862f5e9dd5a", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=e144a2b3066ecad2a7c934b1cd437d2afad0018f", "patch": "@@ -36,11 +36,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alias.h\"\n #include \"tree.h\"\n #include \"basic-block.h\"\n-#include \"cfg.h\"\n #include \"print-tree.h\"\n #include \"flags.h\"\n #include \"predict.h\"\n #include \"function.h\"\n+#include \"cfg.h\"\n #include \"basic-block.h\"\n #include \"diagnostic.h\"\n #include \"tree-pretty-print.h\""}, {"sha": "f4ab244e3a3d2b300059e4113495e0ec61ae940b", "filename": "gcc/profile-count.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fprofile-count.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e144a2b3066ecad2a7c934b1cd437d2afad0018f/gcc%2Fprofile-count.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.c?ref=e144a2b3066ecad2a7c934b1cd437d2afad0018f", "patch": "@@ -25,8 +25,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"options.h\"\n #include \"tree.h\"\n #include \"basic-block.h\"\n-#include \"cfg.h\"\n #include \"function.h\"\n+#include \"cfg.h\"\n #include \"gimple.h\"\n #include \"data-streamer.h\"\n #include \"cgraph.h\""}]}