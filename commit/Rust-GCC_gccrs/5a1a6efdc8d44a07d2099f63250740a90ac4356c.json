{"sha": "5a1a6efdc8d44a07d2099f63250740a90ac4356c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWExYTZlZmRjOGQ0NGEwN2QyMDk5ZjYzMjUwNzQwYTkwYWM0MzU2Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-22T12:52:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-22T12:52:50Z"}, "message": "(split_double): Handle CONST_INT that holds both words.\n\nFrom-SVN: r9028", "tree": {"sha": "6f3add670b2a3cab874cf4225d24059aaf880a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f3add670b2a3cab874cf4225d24059aaf880a8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a1a6efdc8d44a07d2099f63250740a90ac4356c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1a6efdc8d44a07d2099f63250740a90ac4356c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a1a6efdc8d44a07d2099f63250740a90ac4356c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a1a6efdc8d44a07d2099f63250740a90ac4356c/comments", "author": null, "committer": null, "parents": [{"sha": "8c35bbc594203f75b4f0780e8394847c11c1dd6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c35bbc594203f75b4f0780e8394847c11c1dd6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c35bbc594203f75b4f0780e8394847c11c1dd6a"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "38e38c6d1635768b5b04664636f04cac0fd28261", "filename": "gcc/final.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a1a6efdc8d44a07d2099f63250740a90ac4356c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a1a6efdc8d44a07d2099f63250740a90ac4356c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5a1a6efdc8d44a07d2099f63250740a90ac4356c", "patch": "@@ -2846,19 +2846,46 @@ split_double (value, first, second)\n {\n   if (GET_CODE (value) == CONST_INT)\n     {\n-      /* The rule for using CONST_INT for a wider mode\n-\t is that we regard the value as signed.\n-\t So sign-extend it.  */\n-      rtx high = (INTVAL (value) < 0 ? constm1_rtx : const0_rtx);\n-      if (WORDS_BIG_ENDIAN)\n+      if (HOST_BITS_PER_WIDE_INT >= (2 * BITS_PER_WORD))\n \t{\n-\t  *first = high;\n-\t  *second = value;\n+\t  /* In this case the CONST_INT holds both target words.\n+\t     Extract the bits from it into two word-sized pieces.  */\n+\t  rtx low, high;\n+\t  HOST_WIDE_INT word_mask;\n+\t  /* Avoid warnings for shift count >= BITS_PER_WORD.  */\n+\t  int shift_count = BITS_PER_WORD - 1;\n+\n+\t  word_mask = (HOST_WIDE_INT) 1 << shift_count;\n+\t  word_mask |= word_mask - 1;\n+\t  low = GEN_INT (INTVAL (value) & word_mask);\n+\t  high = GEN_INT ((INTVAL (value) >> (shift_count + 1)) & word_mask);\n+\t  if (WORDS_BIG_ENDIAN)\n+\t    {\n+\t      *first = high;\n+\t      *second = low;\n+\t    }\n+\t  else\n+\t    {\n+\t      *first = low;\n+\t      *second = high;\n+\t    }\n \t}\n       else\n \t{\n-\t  *first = value;\n-\t  *second = high;\n+\t  /* The rule for using CONST_INT for a wider mode\n+\t     is that we regard the value as signed.\n+\t     So sign-extend it.  */\n+\t  rtx high = (INTVAL (value) < 0 ? constm1_rtx : const0_rtx);\n+\t  if (WORDS_BIG_ENDIAN)\n+\t    {\n+\t      *first = high;\n+\t      *second = value;\n+\t    }\n+\t  else\n+\t    {\n+\t      *first = value;\n+\t      *second = high;\n+\t    }\n \t}\n     }\n   else if (GET_CODE (value) != CONST_DOUBLE)"}]}