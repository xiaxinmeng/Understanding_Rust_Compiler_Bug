{"sha": "9e5ac782bd8267d0ecb81af67691f8098c0eb99e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU1YWM3ODJiZDgyNjdkMGVjYjgxYWY2NzY5MWY4MDk4YzBlYjk5ZQ==", "commit": {"author": {"name": "Clinton Popetz", "email": "cpopetz@cygnus.com", "date": "2000-07-17T13:27:54Z"}, "committer": {"name": "Clinton Popetz", "email": "cpopetz@gcc.gnu.org", "date": "2000-07-17T13:27:54Z"}, "message": "mips.c (mips_expand_prologue): Don't calculate the last argument register unless we need it.\n\n\t* mips.c (mips_expand_prologue): Don't calculate the last\n\targument register unless we need it.  When we are calculating\n\tthis, make sure FUNCTION_ARG is giving us a REG.\n\nFrom-SVN: r35094", "tree": {"sha": "70081ed980ee7802e8a7089bbba402c6ed26545d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70081ed980ee7802e8a7089bbba402c6ed26545d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e5ac782bd8267d0ecb81af67691f8098c0eb99e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5ac782bd8267d0ecb81af67691f8098c0eb99e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e5ac782bd8267d0ecb81af67691f8098c0eb99e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5ac782bd8267d0ecb81af67691f8098c0eb99e/comments", "author": null, "committer": null, "parents": [{"sha": "39a6492f9dd2b52c3cb25749b98b75b526892ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a6492f9dd2b52c3cb25749b98b75b526892ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a6492f9dd2b52c3cb25749b98b75b526892ee2"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "7509ddf4a313966a5c23cefe0228edf662379024", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5ac782bd8267d0ecb81af67691f8098c0eb99e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5ac782bd8267d0ecb81af67691f8098c0eb99e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e5ac782bd8267d0ecb81af67691f8098c0eb99e", "patch": "@@ -1,3 +1,9 @@\n+Mon Jul 17 08:26:35 2000  Clinton Popetz  <cpopetz@cygnus.com>\n+\n+\t* mips.c (mips_expand_prologue): Don't calculate the last               \n+\targument register unless we need it.  When we are calculating \n+\tthis, make sure FUNCTION_ARG is giving us a REG.                        \n+\n 2000-07-17  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* flow.c (libcall_dead_p): Use single_set to verify the insn\n@@ -6,6 +12,7 @@\n \n 2000-07-17  Mark Klein <mklein@dis.com>\n \n+\n          * pa.c (emit_hpdiv_const): Update to match new pattern for udivsi3.\n \n 2000-07-17  J. David Anglin  <dave@hiauly1.hia.nrc.ca>"}, {"sha": "e9258ba1e8fe0f5c618288574cf059933c547f4f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e5ac782bd8267d0ecb81af67691f8098c0eb99e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e5ac782bd8267d0ecb81af67691f8098c0eb99e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9e5ac782bd8267d0ecb81af67691f8098c0eb99e", "patch": "@@ -6942,6 +6942,8 @@ mips_expand_prologue ()\n   tree cur_arg;\n   CUMULATIVE_ARGS args_so_far;\n   rtx reg_18_save = NULL_RTX;\n+  int store_args_on_stack = (mips_abi == ABI_32 || mips_abi == ABI_O64)\n+                            && (! mips_entry || mips_can_use_return_insn ());\n \n   /* If struct value address is treated as the first argument, make it so.  */\n   if (aggregate_value_p (DECL_RESULT (fndecl))\n@@ -6960,7 +6962,9 @@ mips_expand_prologue ()\n      of the first argument in the variable part of the argument list,\n      otherwise GP_ARG_LAST+1.  Note also if the last argument is \n      the varargs special argument, and treat it as part of the\n-     variable arguments. */\n+     variable arguments. \n+     \n+     This is only needed if store_args_on_stack is true. */\n \n   INIT_CUMULATIVE_ARGS (args_so_far, fntype, NULL_RTX, 0);\n   regno = GP_ARG_FIRST;\n@@ -6982,7 +6986,7 @@ mips_expand_prologue ()\n       FUNCTION_ARG_ADVANCE (args_so_far, passed_mode, passed_type, 1);\n       next_arg = TREE_CHAIN (cur_arg);\n \n-      if (entry_parm)\n+      if (entry_parm && store_args_on_stack)\n \t{\n \t  if (next_arg == 0\n \t      && DECL_NAME (cur_arg)\n@@ -6997,7 +7001,10 @@ mips_expand_prologue ()\n \t  else\n \t    {\n \t      int words;\n-\t  \n+\n+\t      if (GET_CODE (entry_parm) != REG)\n+\t        abort ();\n+\n \t      /* passed in a register, so will get homed automatically */\n \t      if (GET_MODE (entry_parm) == BLKmode)\n \t\twords = (int_size_in_bytes (passed_type) + 3) / 4;\n@@ -7042,8 +7049,7 @@ mips_expand_prologue ()\n \n   /* If this function is a varargs function, store any registers that\n      would normally hold arguments ($4 - $7) on the stack.  */\n-  if ((mips_abi == ABI_32 || mips_abi == ABI_O64)\n-      && (! mips_entry || mips_can_use_return_insn ())\n+  if (store_args_on_stack\n       && ((TYPE_ARG_TYPES (fntype) != 0\n \t   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n \t       != void_type_node))"}]}