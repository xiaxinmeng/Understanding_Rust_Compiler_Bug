{"sha": "f60518c8debf595354f37c0b2974a5dfa56aa5f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYwNTE4YzhkZWJmNTk1MzU0ZjM3YzBiMjk3NGE1ZGZhNTZhYTVmMQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2002-09-02T15:36:07Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-09-02T15:36:07Z"}, "message": "gcj.texi: Add chapter about system properties.\n\n       * gcj.texi: Add chapter about system properties.\n       Fixed some typos.\n\nFrom-SVN: r56740", "tree": {"sha": "dc5d7aa6ad77acce36c0d1ecce99fa61733f992d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc5d7aa6ad77acce36c0d1ecce99fa61733f992d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f60518c8debf595354f37c0b2974a5dfa56aa5f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60518c8debf595354f37c0b2974a5dfa56aa5f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f60518c8debf595354f37c0b2974a5dfa56aa5f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60518c8debf595354f37c0b2974a5dfa56aa5f1/comments", "author": null, "committer": null, "parents": [{"sha": "603f86d7dbb9d95953ef1a179a01729a3df3ef86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603f86d7dbb9d95953ef1a179a01729a3df3ef86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603f86d7dbb9d95953ef1a179a01729a3df3ef86"}], "stats": {"total": 254, "additions": 245, "deletions": 9}, "files": [{"sha": "8195d1f03e90ba7dc019d637a7ed35cf7ca29956", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60518c8debf595354f37c0b2974a5dfa56aa5f1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60518c8debf595354f37c0b2974a5dfa56aa5f1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=f60518c8debf595354f37c0b2974a5dfa56aa5f1", "patch": "@@ -1,3 +1,8 @@\n+2002-09-01  Mark Wielaard <mark@klomp.org>\n+\n+\t* gcj.texi: Add chapter about system properties.\n+\tFixed some typos.\n+\n 2002-08-26  Tom Tromey  <tromey@redhat.com>\n \n \t* parse.y (try_builtin_assignconv): Allow narrowing primitive"}, {"sha": "bb45c4b72e2af1aa5f76a0c1fcc880e861903eca", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 240, "deletions": 9, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60518c8debf595354f37c0b2974a5dfa56aa5f1/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60518c8debf595354f37c0b2974a5dfa56aa5f1/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=f60518c8debf595354f37c0b2974a5dfa56aa5f1", "patch": "@@ -130,6 +130,7 @@ files and object files, and it can read both Java source code and\n * Invoking rmic::        Generate stubs for Remote Method Invocation.\n * Invoking rmiregistry:: The remote object registry.\n * About CNI::           Description of the Cygnus Native Interface\n+* System properties::   Modifying runtime behavior of the libgcj library\n * Resources::\t\tWhere to look for more information\n @end menu\n \n@@ -282,7 +283,7 @@ If @code{--bootclasspath} was specified, append its value.\n Otherwise, append the built-in system directory, @file{libgcj.jar}.\n \n @item\n-Finaly, if @code{--extdirs} was specified, append the contents of the\n+Finally, if @code{--extdirs} was specified, append the contents of the\n specified directories at the end of the class path.  Otherwise, append\n the contents of the built-in extdirs at @code{$(prefix)/share/java/ext}.\n @end itemize\n@@ -428,7 +429,7 @@ using JNI, then you must use @code{-fjni}.  This option causes\n methods.\n \n @item -fno-optimize-static-class-initialization\n-When the optimization level is greather or equal to @code{-O2},\n+When the optimization level is greater or equal to @code{-O2},\n @command{gcj} will try to optimize the way calls into the runtime are made\n to initialize static classes upon their first use (this optimization\n isn't carried out if @code{-C} was specified.) When compiling to native\n@@ -687,7 +688,7 @@ and the Info entries for @file{gcj} and @file{gcc}.\n @c man begin DESCRIPTION jcf-dump\n \n This is a class file examiner, similar to @code{javap}.  It will print\n-information about a number of classes, which are specifed by class name\n+information about a number of classes, which are specified by class name\n or file name.\n \n @c man end\n@@ -1108,7 +1109,7 @@ class java::lang::String : public java::lang::Object\n @};\n @end example\n \n-@noindent The @code{gcjh} tool automatically generates the nessary namespace\n+@noindent The @code{gcjh} tool automatically generates the necessary namespace\n declarations.\n \n \n@@ -1150,7 +1151,7 @@ import @var{package-name}.*;\n @end example\n \n @noindent Doing this allows any class from the package @var{package-name} to be\n-refered to only by its class-name within the program text.\n+referred to only by its class-name within the program text.\n \n \n @noindent The same effect can be achieved in C++ like this:\n@@ -1182,7 +1183,7 @@ so CNI provides a special C++ type for each primitive Java type:\n @item @code{void}        @tab @code{void}           @tab no value\n @end multitable\n \n-When refering to a Java type You should always use these C++ typenames (e.g.: @code{jint})\n+When referring to a Java type You should always use these C++ typenames (e.g.: @code{jint})\n to avoid disappointment.\n \n \n@@ -1580,7 +1581,7 @@ java::lang:Integer::doubleValue()\n @subsection Interface methods\n \n In Java you can call a method using an interface reference.  This is\n-supported, but not completly.  @xref{Interfaces}.\n+supported, but not completely.  @xref{Interfaces}.\n \n \n \n@@ -1824,8 +1825,8 @@ the @code{synchronized} attribute is handled by the\n method implementation, it is up to the programmer\n of a synchronized native method to handle the synchronization\n (in the C++ implementation of the method).\n-In otherwords, you need to manually add @code{JvSynchronize}\n-in a @code{native synchornized} method.\n+In other words, you need to manually add @code{JvSynchronize}\n+in a @code{native synchronized} method.\n \n @node Invocation\n @section Invocation\n@@ -1945,6 +1946,236 @@ are as in JNI@.\n @noindent will be added shortly, as will other functions corresponding to JNI@.\n \n \n+@node System properties\n+@chapter System properties\n+\n+The runtime behavior of the @code{libgcj} library can be modified by setting\n+certain system properties.  These properties can be compiled into the program\n+using the @code{-D@var{name}[=@var{value}]} option to @command{gcj} or by\n+setting them explicitly in the program by calling the\n+@code{java.lang.System.setProperty()} method.  Some system properties are only\n+used for informational purposes (like giving a version number or a user name).\n+A program can inspect the current value of a property by calling the\n+@code{java.lang.System.getProperty()} method.\n+\n+@menu\n+* Standard Properties::         Standard properties supported by @code{libgcj}\n+* GNU Classpath Properties::    Properties found in Classpath based libraries\n+* libgcj Runtime Properties::   Properties specific to @code{libgcj}\n+@end menu\n+\n+@node Standard Properties\n+@section Standard Properties\n+\n+The following properties are normally found in all implementations of the core\n+libraries for the Java language.\n+\n+@table @gcctabopt\n+\n+@item java.version\n+The @code{libgcj} version number.\n+\n+@item java.vendor\n+Set to @samp{The Free Software Foundation, Inc.}\n+\n+@item java.vendor.url\n+Set to @uref{http://gcc.gnu.org/java/}.\n+\n+@item java.home\n+The directory where @code{gcj} was installed.  Taken from the @code{--prefix}\n+option given to @command{configure}.\n+\n+@item java.class.version\n+The class format version number supported by the libgcj byte code interpreter.\n+(Currently @samp{46.0})\n+\n+@item java.vm.specification.version\n+The Virtual Machine Specification version implemented by @code{libgcj}.\n+(Currently @samp{1.0})\n+\n+@item java.vm.specification.vendor\n+The name of the Virtual Machine specification designer.\n+\n+@item java.vm.specification.name\n+The name of the Virtual Machine specification\n+(Set to @samp{Java Virtual Machine Specification}).\n+\n+@item java.vm.version\n+The @command{gcj} version number.\n+\n+@item java.vm.vendor\n+Set to @samp{The Free Software Foundation, Inc.}\n+\n+@item java.vm.name\n+Set to @samp{GNU libgcj}.\n+\n+@item java.specification.version\n+The Runtime Environment specification version implemented by @code{libgcj}.\n+(Currently set to @samp{1.3})\n+\n+@item java.specification.vendor\n+The Runtime Environment specification designer.\n+\n+@item java.specification.name\n+The name of the Runtime Environment specification\n+(Set to @samp{Java Platform API Specification}).\n+\n+@item java.class.path\n+The paths (jar files, zip files and directories) used for finding class files.\n+\n+@item java.library.path\n+Directory path used for finding native libraries.  Currently not set.\n+\n+@item java.io.tmpdir\n+The directory used to put temporary files in.\n+\n+@item java.compiler\n+Name of the Just In Time compiler to use by the byte code interpreter.\n+Currently not used in @code{libgcj}.\n+\n+@item java.ext.dirs\n+Directories containing jar files with extra libraries.  Will be used when\n+resolving classes.  Currently not used in @code{libgcj}.\n+\n+@item java.protocol.handler.pkgs\n+A @samp{|} separated list of package names that is used to find classes that\n+implement handlers for @code{java.net.URL}.\n+\n+@item java.rmi.server.codebase\n+A list of URLs that is used by the @code{java.rmi.server.RMIClassLoader}\n+to load classes from.\n+\n+@item jdbc.drivers\n+A list of class names that will be loaded by the @code{java.sql.DriverManager}\n+when it starts up.\n+\n+@item file.separator\n+The separator used in when directories are included in a filename\n+(normally @samp{/} or @samp{\\} ).\n+\n+@item file.encoding\n+The default character encoding used when converting platform native files to\n+Unicode (usually set to @samp{8859_1}).\n+\n+@item path.separator\n+The standard separator used when a string contains multiple paths\n+(normally @samp{:} or @samp{;}), the string is usually not a valid character\n+to use in normal directory names.)\n+\n+@item line.separator\n+The default line separator used on the platform (normally @samp{\\n}, @samp{\\r}\n+or a combination of those two characters).\n+\n+@item policy.provider\n+The class name used for the default policy provider returned by\n+@code{java.security.Policy.getPolicy}.\n+\n+@item user.name\n+The name of the user running the program.  Can be the full name, the login name\n+or empty if unknown.\n+\n+@item user.home\n+The default directory to put user specific files in.\n+\n+@item user.dir\n+The current working directory from which the program was started.\n+\n+@item user.language\n+The default language as used by the @code{java.util.Locale} class.\n+\n+@item user.region\n+The default region as used by the @code{java.util.Local} class.\n+\n+@item user.variant\n+The default variant of the language and region local used.\n+\n+@item user.timezone\n+The default timezone as used by the @code{java.util.TimeZone} class.\n+\n+@item os.name\n+The operating system/kernel name that the program runs on.\n+\n+@item os.arch\n+The hardware that we are running on.\n+\n+@item os.version\n+The version number of the operating system/kernel.\n+\n+@item awt.appletWarning\n+The string to display when an untrusted applet is displayed.\n+Returned by @code{java.awt.Window.getWarningString()} when the window is\n+``insecure''.\n+\n+@item awt.toolkit\n+The class name used for initializing the default @code{java.awt.Toolkit}. \n+Defaults to @code{gnu.java.awt.peer.gtk.GtkToolkit}.\n+\n+@end table\n+\n+@node GNU Classpath Properties\n+@section GNU Classpath Properties\n+\n+@code{libgcj} is based on the GNU Classpath (Essential Libraries for Java) a\n+GNU project to create free core class libraries for use with virtual machines\n+and compilers for the Java language.  The following properties are common to\n+libraries based on GNU Classpath.\n+\n+@table @gcctabopt\n+\n+@item gcj.dumpobject\n+Enables printing serialization debugging by the @code{java.io.ObjectInput} and\n+@code{java.io.ObjectOutput} classes when set to something else then the empty\n+string.  Only used when running a debug build of the library.\n+\n+@end table\n+\n+@node libgcj Runtime Properties\n+@section libgcj Runtime Properties\n+\n+The following properties are specific to the @code{libgcj} runtime and will\n+normally not be found in other core libraries for the java language.\n+\n+@table @gcctabopt\n+\n+@item java.fullversion\n+The combination of @code{java.vm.name} and @code{java.vm.version}.\n+\n+@item java.vm.info\n+Same as @code{java.fullversion}.\n+\n+@item impl.prefix\n+Used by the @code{java.net.DatagramSocket} class when set to something else\n+then the empty string.  When set all newly created @code{DatagramSocket}s will\n+try to load a class @code{java.net.[impl.prefix]DatagramSocketImpl} instead of\n+the normal @code{java.net.PlainDatagramSocketImpl}.\n+\n+@item gnu.gcj.runtime.NameFinder.demangle\n+Whether names in a stack trace should be demangled.  Defaults to @code{true}.\n+\n+@item gnu.gcj.runtime.NameFinder.sanitize\n+Whether calls to initialize exceptions and starting the runtime system\n+should be removed from the stack trace.  Only done when names are\n+demangled.  Defaults to @code{true}.\n+\n+@item gnu.gcj.runtime.NameFinder.remove_unknown\n+Whether calls to unknown functions (class and method names are unknown)\n+should be removed from the stack trace.  Only done when the stack is\n+sanitized.  Ignored if this means no stack trace information would be\n+available anymore.  Defaults to @code{true}.\n+\n+@item gnu.gcj.runtime.NameFinder.remove_interpreter\n+Whether runtime interpreter calls (methods in the @code{_Jv_InterpMethod} class\n+and functions starting with @samp{ffi_}) should be removed from the stack\n+trace.  Only done when the stack is sanitized.  Defaults to @code{true}.\n+\n+\n+@item gnu.gcj.runtime.NameFinder.use_addr2line\n+Whether an external process (@command{addr2line} or @command{addr2name.awk})\n+should be used as fallback to convert the addresses to function names when\n+the runtime is unable to do it through @code{dladdr}.\n+\n+@end table\n+\n \n @node Resources\n @chapter Resources"}]}