{"sha": "e4b68cedfd8fe2d9c380f701d8add1fec4c2532f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRiNjhjZWRmZDhmZTJkOWMzODBmNzAxZDhhZGQxZmVjNGMyNTMyZg==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2000-01-19T11:17:13Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-01-19T11:17:13Z"}, "message": "loop.c\n\nFrom-SVN: r31500", "tree": {"sha": "bfb4d9d9ee38a783e6b9356016d8465cae06d590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfb4d9d9ee38a783e6b9356016d8465cae06d590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4b68cedfd8fe2d9c380f701d8add1fec4c2532f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b68cedfd8fe2d9c380f701d8add1fec4c2532f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b68cedfd8fe2d9c380f701d8add1fec4c2532f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b68cedfd8fe2d9c380f701d8add1fec4c2532f/comments", "author": null, "committer": null, "parents": [{"sha": "d29c259b715bb5873c1b9ecf5af5ce06132a3377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29c259b715bb5873c1b9ecf5af5ce06132a3377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29c259b715bb5873c1b9ecf5af5ce06132a3377"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "0317a032b1e6dc0a569d9ba882bb5beb4c794c0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b68cedfd8fe2d9c380f701d8add1fec4c2532f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b68cedfd8fe2d9c380f701d8add1fec4c2532f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4b68cedfd8fe2d9c380f701d8add1fec4c2532f", "patch": "@@ -1,3 +1,14 @@\n+2000-01-20  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* loop.c (current_loop_info): Renamed from loop_info_data\n+\tand changed to a pointer.\n+\t(loop_optimize): Allocate loop_info structure for each loop\n+\tand initialise to zero.\n+\t(scan_loop): Set current_loop_info.\n+\n+\t* unroll.c (loop_iterations): Don't abort if REG_USERVAR_P set\n+\ton iteration_var.\n+\n 2000-01-19  Richard Henderson  <rth@cygnus.com>\n \n \t* stupid.c: Die die die."}, {"sha": "b166298653e55962cbc5b5e801af3bb6a3f895ed", "filename": "gcc/unroll.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b68cedfd8fe2d9c380f701d8add1fec4c2532f/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b68cedfd8fe2d9c380f701d8add1fec4c2532f/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=e4b68cedfd8fe2d9c380f701d8add1fec4c2532f", "patch": "@@ -3702,10 +3702,14 @@ loop_iterations (loop)\n       return 0;\n     }\n \n-  /* The only new registers that care created before loop iterations are\n-     givs made from biv increments, so this should never occur.  */\n-\n-  if ((unsigned) REGNO (iteration_var) >= reg_iv_type->num_elements)\n+  /* The only new registers that are created before loop iterations\n+     are givs made from biv increments or registers created by\n+     load_mems.  In the latter case, it is possible that try_copy_prop\n+     will propagate a new pseudo into the old iteration register but\n+     this will be marked by having the REG_USERVAR_P bit set.  */\n+\n+  if ((unsigned) REGNO (iteration_var) >= reg_iv_type->num_elements\n+      && ! REG_USERVAR_P (iteration_var))\n     abort ();\n \n   iteration_info (iteration_var, &initial_value, &increment,"}]}