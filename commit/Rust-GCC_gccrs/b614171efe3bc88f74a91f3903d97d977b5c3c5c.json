{"sha": "b614171efe3bc88f74a91f3903d97d977b5c3c5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYxNDE3MWVmZTNiYzg4Zjc0YTkxZjM5MDNkOTdkOTc3YjVjM2M1Yw==", "commit": {"author": {"name": "Michael Matz", "email": "matzmich@cs.tu-berlin.de", "date": "2000-12-06T18:45:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-12-06T18:45:31Z"}, "message": "gcse.c (compute_pre_data): Kill trapping expressions in destination blocks of abnormal edges.\n\n        * gcse.c (compute_pre_data): Kill trapping expressions in\n        destination blocks of abnormal edges.\n\nFrom-SVN: r38068", "tree": {"sha": "132c51a832ee578c60a08a99cb44c05490e8842a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/132c51a832ee578c60a08a99cb44c05490e8842a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b614171efe3bc88f74a91f3903d97d977b5c3c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b614171efe3bc88f74a91f3903d97d977b5c3c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b614171efe3bc88f74a91f3903d97d977b5c3c5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b614171efe3bc88f74a91f3903d97d977b5c3c5c/comments", "author": null, "committer": null, "parents": [{"sha": "8954e858e668197d24695957a64d316253355c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8954e858e668197d24695957a64d316253355c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8954e858e668197d24695957a64d316253355c25"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "3ea0e3b2ab7bfeae0be5d62887789808d8a9dc6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b614171efe3bc88f74a91f3903d97d977b5c3c5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b614171efe3bc88f74a91f3903d97d977b5c3c5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b614171efe3bc88f74a91f3903d97d977b5c3c5c", "patch": "@@ -1,3 +1,8 @@\n+2000-12-06  Michael Matz  <matzmich@cs.tu-berlin.de>\n+\n+\t* gcse.c (compute_pre_data): Kill trapping expressions in\n+\tdestination blocks of abnormal edges.\n+\n 2000-12-05  Richard Sandiford  <r.sandiford@redhat.com>\n \n \t* config/mn10300/mn10300.c (mn10300_print_reg_list): Added."}, {"sha": "73f49f3ce88f8f19a910b88bf82121074f71ce73", "filename": "gcc/gcse.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b614171efe3bc88f74a91f3903d97d977b5c3c5c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b614171efe3bc88f74a91f3903d97d977b5c3c5c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=b614171efe3bc88f74a91f3903d97d977b5c3c5c", "patch": "@@ -4157,11 +4157,24 @@ free_pre_mem ()\n static void\n compute_pre_data ()\n {\n+  sbitmap trapping_expr;\n   int i;\n+  unsigned int ui;\n \n   compute_local_properties (transp, comp, antloc, 0);\n   sbitmap_vector_zero (ae_kill, n_basic_blocks);\n \n+  /* Collect expressions which might trap.  */\n+  trapping_expr = sbitmap_alloc (n_exprs);\n+  sbitmap_zero (trapping_expr);\n+  for (ui = 0; ui < expr_hash_table_size; ui++)\n+    {\n+      struct expr *e;\n+      for (e = expr_hash_table[ui]; e != NULL; e = e->next_same_hash)\n+\tif (may_trap_p (e->expr))\n+\t  SET_BIT (trapping_expr, e->bitmap_index);\n+    }\n+\n   /* Compute ae_kill for each basic block using:\n \n      ~(TRANSP | COMP)\n@@ -4170,6 +4183,20 @@ compute_pre_data ()\n \n   for (i = 0; i < n_basic_blocks; i++)\n     {\n+      edge e;\n+\n+      /* If the current block is the destination of an abnormal edge, we\n+\t kill all trapping expressions because we won't be able to properly\n+\t place the instruction on the edge.  So make them neither\n+\t anticipatable nor transparent.  This is fairly conservative.  */\n+      for (e = BASIC_BLOCK (i)->pred; e ; e = e->pred_next)\n+\tif (e->flags & EDGE_ABNORMAL)\n+\t  {\n+\t    sbitmap_difference (antloc[i], antloc[i], trapping_expr);\n+\t    sbitmap_difference (transp[i], transp[i], trapping_expr);\n+\t    break;\n+\t  }\n+\n       sbitmap_a_or_b (ae_kill[i], transp[i], comp[i]);\n       sbitmap_not (ae_kill[i], ae_kill[i]);\n     }\n@@ -4180,6 +4207,7 @@ compute_pre_data ()\n   antloc = NULL;\n   free (ae_kill);\n   ae_kill = NULL; \n+  free (trapping_expr);\n }\n \f\n /* PRE utilities */"}]}