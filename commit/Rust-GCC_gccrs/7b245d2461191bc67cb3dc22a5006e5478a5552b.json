{"sha": "7b245d2461191bc67cb3dc22a5006e5478a5552b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IyNDVkMjQ2MTE5MWJjNjdjYjNkYzIyYTUwMDZlNTQ3OGE1NTUyYg==", "commit": {"author": {"name": "Warren Levy", "email": "warrenl@cygnus.com", "date": "2000-06-27T05:10:03Z"}, "committer": {"name": "Warren Levy", "email": "warrenl@gcc.gnu.org", "date": "2000-06-27T05:10:03Z"}, "message": "PropertyChangeEvent.java (oldVal): Renamed to oldValue.\n\n\t* java/beans/PropertyChangeEvent.java (oldVal): Renamed to oldValue.\n\t(newVal): Renamed to newValue.\n\t* java/beans/PropertyVetoException.java (changeEvent): Renamed to evt.\n\t* java/beans/beancontext/BeanContextServiceRevokedEvent.java\n\t(revokeNow): Renamed to invalidateRefs.\n\t* java/io/OptionalDataException.java: Updated FIXME.\n\t(eof): New placeholder field.\n\t(length); Ditto.\n\t* java/io/WriteAbortedException.java (message): Made transient.\n\t* java/lang/ClassNotFoundException.java: Updated comments for JDK 1.2.\n\t* java/lang/Throwable.java (stackTrace): Made transient.\n\t* java/net/InetAddress.java: Made Serializable.\n\t* java/security/KeyPair.java: Made Serializable.\n\t* java/security/Provider.java: Replaced with Classpath version that\n\timplements serialization and proper methods.\n\t* java/text/ChoiceFormat.java (strings): Renamed to choiceFormats.\n\t(limits): Renamed to choiceLimits.\n\nSerialization changes per:\nhttp://java.sun.com/products/jdk/1.2/docs/api/serialized-form.html\n\nFrom-SVN: r34726", "tree": {"sha": "489d75420cadf0ca7a7d52253e3912d484dfc0a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/489d75420cadf0ca7a7d52253e3912d484dfc0a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b245d2461191bc67cb3dc22a5006e5478a5552b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b245d2461191bc67cb3dc22a5006e5478a5552b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b245d2461191bc67cb3dc22a5006e5478a5552b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b245d2461191bc67cb3dc22a5006e5478a5552b/comments", "author": null, "committer": null, "parents": [{"sha": "cf1748bfce3d254bfd8bad027ab55e25793ce2fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1748bfce3d254bfd8bad027ab55e25793ce2fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf1748bfce3d254bfd8bad027ab55e25793ce2fc"}], "stats": {"total": 376, "additions": 275, "deletions": 101}, "files": [{"sha": "6efc732891a20eed1196bbf9206c8ccf93fb1b76", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -1,3 +1,23 @@\n+2000-06-26  Warren Levy  <warrenl@cygnus.com>\n+\n+\t* java/beans/PropertyChangeEvent.java (oldVal): Renamed to oldValue.\n+\t(newVal): Renamed to newValue.\n+\t* java/beans/PropertyVetoException.java (changeEvent): Renamed to evt.\n+\t* java/beans/beancontext/BeanContextServiceRevokedEvent.java\n+\t(revokeNow): Renamed to invalidateRefs.\n+\t* java/io/OptionalDataException.java: Updated FIXME.\n+\t(eof): New placeholder field.\n+\t(length); Ditto.\n+\t* java/io/WriteAbortedException.java (message): Made transient.\n+\t* java/lang/ClassNotFoundException.java: Updated comments for JDK 1.2.\n+\t* java/lang/Throwable.java (stackTrace): Made transient.\n+\t* java/net/InetAddress.java: Made Serializable.\n+\t* java/security/KeyPair.java: Made Serializable.\n+\t* java/security/Provider.java: Replaced with Classpath version that\n+\timplements serialization and proper methods.\n+\t* java/text/ChoiceFormat.java (strings): Renamed to choiceFormats.\n+\t(limits): Renamed to choiceLimits.\n+\n 2000-06-24  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/natDouble.cc (parseDouble): Renamed from"}, {"sha": "f48d5fe535bbc13f19c24cc3371f79deedd255c9", "filename": "libjava/java/beans/PropertyChangeEvent.java", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fbeans%2FPropertyChangeEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fbeans%2FPropertyChangeEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyChangeEvent.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -1,5 +1,5 @@\n /* java.beans.PropertyChangeEvent\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -50,8 +50,8 @@\n \n public class PropertyChangeEvent extends java.util.EventObject {\n \tString propertyName;\n-\tObject oldVal;\n-\tObject newVal;\n+\tObject oldValue;\n+\tObject newValue;\n \tObject propagationId;\n \n \t/** Create a new PropertyChangeEvent.  Remember that if\n@@ -60,14 +60,14 @@ public class PropertyChangeEvent extends java.util.EventObject {\n \t ** from the old PropertyChangeEvent.\n \t ** @param source the Bean containing the property.\n \t ** @param propertyName the property's name.\n-\t ** @param oldVal the old value of the property.\n-\t ** @param newVal the new value of the property.\n+\t ** @param oldValue the old value of the property.\n+\t ** @param newValue the new value of the property.\n \t **/\n \tpublic PropertyChangeEvent(Object source, String propertyName, Object oldVal, Object newVal) {\n \t\tsuper(source);\n \t\tthis.propertyName = propertyName;\n-\t\tthis.oldVal = oldVal;\n-\t\tthis.newVal = newVal;\n+\t\toldValue = oldVal;\n+\t\tnewValue = newVal;\n \t}\n \n \t/** Get the property name.\n@@ -81,14 +81,14 @@ public String getPropertyName() {\n \t ** @return the property's old value.\n \t **/\n \tpublic Object getOldValue() {\n-\t\treturn oldVal;\n+\t\treturn oldValue;\n \t}\n \n \t/** Get the property's new value.\n \t ** @return the property's new value.\n \t **/\n \tpublic Object getNewValue() {\n-\t\treturn newVal;\n+\t\treturn newValue;\n \t}\n \n \t/** Set the propagation ID.  This is a way for the event"}, {"sha": "989b9e0281df6352b7d713af5993d0f8b3ac5346", "filename": "libjava/java/beans/PropertyVetoException.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fbeans%2FPropertyVetoException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fbeans%2FPropertyVetoException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FPropertyVetoException.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -1,5 +1,5 @@\n /* java.beans.PropertyVetoException\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,19 +37,19 @@\n  **/\n \n public class PropertyVetoException extends Exception {\n-\tPropertyChangeEvent changeEvent;\n+\tPropertyChangeEvent evt;\n \n \t/** Instantiate this exception with the given message and property change.\n \t ** @param msg the reason for the veto.\n \t ** @param changeEvent the PropertyChangeEvent that was thrown.\n \t **/\n \tpublic PropertyVetoException(String msg, PropertyChangeEvent changeEvent) {\n \t\tsuper(msg);\n-\t\tthis.changeEvent = changeEvent;\n+\t\tevt = changeEvent;\n \t}\n \n \t/** Get the PropertyChange event that was vetoed. **/\n \tpublic PropertyChangeEvent getPropertyChangeEvent() {\n-\t\treturn changeEvent;\n+\t\treturn evt;\n \t}\n }"}, {"sha": "f19fcdaaaf76012b9f0c0348dacd6cb86305a36d", "filename": "libjava/java/beans/beancontext/BeanContextServiceRevokedEvent.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServiceRevokedEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServiceRevokedEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2Fbeancontext%2FBeanContextServiceRevokedEvent.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -1,5 +1,5 @@\n /* java.beans.beancontext.BeanContextServiceRevokedEvent\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,7 +41,7 @@ public class BeanContextServiceRevokedEvent extends BeanContextEvent {\n \t * available.\n \t */\n \tprotected Class serviceClass;\n-\tprivate boolean revokeNow;\n+\tprivate boolean invalidateRefs;\n \n \t/**\n \t * Create a new service revoked event.\n@@ -55,7 +55,7 @@ public class BeanContextServiceRevokedEvent extends BeanContextEvent {\n \tpublic BeanContextServiceRevokedEvent(BeanContextServices services, Class serviceClass, boolean revokeNow) {\n \t\tsuper(services);\n \t\tthis.serviceClass = serviceClass;\n-\t\tthis.revokeNow = revokeNow;\n+\t\tinvalidateRefs = revokeNow;\n \t}\n \n \t/**\n@@ -94,6 +94,6 @@ public BeanContextServices getSourceAsBeanContextServices() {\n \t *         usable.\n \t */\n \tpublic boolean isCurrentServiceInvalidNow() {\n-\t\treturn revokeNow;\n+\t\treturn invalidateRefs;\n \t}\n }"}, {"sha": "eabda73696baf868b958570073aa9af97dda504f", "filename": "libjava/java/io/OptionalDataException.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fio%2FOptionalDataException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fio%2FOptionalDataException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOptionalDataException.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -19,6 +19,10 @@\n \n public class OptionalDataException extends ObjectStreamException\n {\n+  // FIXME: Need to set these fields per the doc in a constructor.\n+  public boolean eof;\n+  public int length;\n+\n   public OptionalDataException()\n   {\n     super();"}, {"sha": "0645ff79713cd8b7eaf47fcc1c1af60fe4fb404c", "filename": "libjava/java/io/WriteAbortedException.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fio%2FWriteAbortedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fio%2FWriteAbortedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FWriteAbortedException.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -1,6 +1,6 @@\n /* WriteAbortedException.java -- An exception occured while writing a \n    serialization stream\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -47,7 +47,7 @@ public class WriteAbortedException extends ObjectStreamException\n   * The detailed exception that caused this exception to be thrown\n   */\n public Exception detail;\n-private String message;\n+private transient String message;\n \n /*************************************************************************/\n "}, {"sha": "7a187e83b9fea8e5cb501d64f538da630154a958", "filename": "libjava/java/lang/ClassNotFoundException.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Flang%2FClassNotFoundException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Flang%2FClassNotFoundException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassNotFoundException.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -20,6 +20,9 @@\n  \n public class ClassNotFoundException extends Exception\n {\n+  // TODO12:\n+  // Throwable ex;\n+\n   public ClassNotFoundException()\n   {\n     super();\n@@ -28,6 +31,7 @@ public ClassNotFoundException()\n   // TODO12:\n   // public ClassNotFoundException(String msg, Throwable ex)\n   // {\n+  //   FIXME: Set 'ex' here.\n   // }\n \n   public ClassNotFoundException(String msg)"}, {"sha": "1a0876fce3f7db3794f809bd518ae75a5cab1935", "filename": "libjava/java/lang/Throwable.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Flang%2FThrowable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Flang%2FThrowable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThrowable.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -164,5 +164,5 @@ public String toString ()\n   // Name of this field comes from serialization spec.\n   private String detailMessage;\n \n-  private byte stackTrace[];\n+  private transient byte stackTrace[];\n }"}, {"sha": "303a45b3cf298f452a80cee3ffc743245aec3d47", "filename": "libjava/java/net/InetAddress.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fnet%2FInetAddress.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fnet%2FInetAddress.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInetAddress.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -22,10 +22,10 @@\n  * Status:  Believed complete and correct.\n  */\n \n-public final class InetAddress\n+public final class InetAddress implements java.io.Serializable\n {\n-  String hostname;\n   byte[] address;\n+  String hostname;\n \n   InetAddress (byte[] address, String hostname)\n   {"}, {"sha": "0aeb7c35792085d99dba1e4634372a6e02a96655", "filename": "libjava/java/security/KeyPair.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fsecurity%2FKeyPair.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fsecurity%2FKeyPair.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FKeyPair.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -17,7 +17,7 @@\n  * Status:  Believed complete and correct.\n  */\n  \n-public class KeyPair /* FIXME: implements serializable */\n+public class KeyPair implements java.io.Serializable\n {\n   public KeyPair (PublicKey publicKey, PrivateKey privateKey)\n   {"}, {"sha": "d0a969f8c5e9486ba018cc906e12747cb12f0845", "filename": "libjava/java/security/Provider.java", "status": "modified", "additions": 184, "deletions": 40, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fsecurity%2FProvider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Fsecurity%2FProvider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FProvider.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -1,53 +1,197 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Provider.java -- Security provider information\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.security;\n+\n+import java.io.Serializable;\n import java.util.Properties;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date February 7, 2000.\n+  * This class represents a Java security architecture service provider.\n+  * The services provided by a such a provider can range from security\n+  * algorithms to key generation.\n+  * <p>\n+  * Providers are installed by name and verion number.  There is one\n+  * standard provider supplied with the class library.  This is the\n+  * \"GNU\" provider, which can also be accessed by the alias \"SUN\" for\n+  * compatibility with the JDK.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public abstract class Provider extends Properties implements Serializable\n+{\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n  */\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification.\n- * Status:  Partially implemented.\n+  * This is a textual description of the provider\n+  */\n+private String info;\n+\n+/**\n+  * This is the name of the provider\n+  */\n+private String name;\n+\n+/**\n+  * This is the version number of the provider\n+  */\n+private double version;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n  */\n \n-public abstract class Provider extends Properties\n-{\n-  // FIXME: Check the following property values against specs!\n-  protected Provider(String name, double version, String info)\n-  {\n-    super();\n-    put(\"java.security.Provider.Name\", name);\n-    put(\"java.security.Provider.Version\", Double.toString(version));\n-    put(\"java.security.Provider.Info\", info);\n-  }\n-\n-  public String getName()\n-  {\n-    return getProperty(\"java.security.Provider.Name\");\n-  }\n-\n-  public double getVersion()\n-  {\n-    return Double.valueOf(getProperty(\"java.security.Provider.Version\")).doubleValue();\n-  }\n-\n-  public String getInfo()\n-  {\n-    return getProperty(\"java.security.Provider.Info\");\n-  }\n-\n-  public String toString()\n-  {\n-    // FIXME: Check this string against the spec.\n-    return getName() + \" \" + getProperty(\"java.security.Provider.Version\");\n-  }\n+/**\n+  * This method initializes a new instance of <code>Provider</code> to have\n+  * the specified name, version, and description information.\n+  *\n+  * @param name The name to assign to this <code>Provider</code>.\n+  * @param version The version number for this <code>Provider</code>.\n+  * @param info A textual description of this provider.\n+  */\n+protected\n+Provider(String name, double version, String info)\n+{\n+  this.name = name;\n+  this.version = version;\n+  this.info = info;\n+} \n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * This method returns the name assigned to this <code>Provider</code>.\n+  *\n+  * @return The <code>Provider</code>'s name.\n+  */\n+public String\n+getName()\n+{\n+  return(name);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method retunrs the version number of this <code>Provider</code>.\n+  * \n+  * @return The <code>Provider</code>'s version number.\n+  */\n+public double\n+getVersion()\n+{\n+  return(version);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a textual description of the <code>Provider</code>.\n+  *\n+  * @return A description of the <code>Provider</code>.\n+  */\n+public String\n+getInfo()\n+{\n+  return(info);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified key to have the specified value.\n+  *\n+  * @param key The property key\n+  * @param value The property value\n+  *\n+  * @return The previous value for this key, or <code>null</code> if no previous value.\n+  */\n+public Object\n+put(Object key, Object value)\n+{\n+  return(super.put(key, value));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method removes the specified key entry (and its associated value)\n+  * from the property mapping list.\n+  * \n+  * @param key The key to remove\n+  *\n+  * @return The previous value for this key, or <code>null</code> if no previous value.\n+  */\n+public Object\n+remove(Object key)\n+{\n+  return(super.remove(key));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method clears the entire property list such that it no longer\n+  * contains the properties used to look up the services provided by\n+  * the <code>Provider</code>.\n+  */\n+public void\n+clear()\n+{\n+  super.clear();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method returns a <code>String</code> representation of this\n+  * object.  This will include the <code>Provider</code> name and\n+  * version number.\n+  *\n+  * @return A <code>String</code> representation of this object.\n+  */\n+public String\n+toString()\n+{\n+  return(getClass().getName() + \": name=\" + getName() + \" version=\" + version);\n+}\n+\n+} // class Provider\n+"}, {"sha": "da70114ac3358cfc440ca91a27a781ef3432a53c", "filename": "libjava/java/text/ChoiceFormat.java", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Ftext%2FChoiceFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b245d2461191bc67cb3dc22a5006e5478a5552b/libjava%2Fjava%2Ftext%2FChoiceFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FChoiceFormat.java?ref=7b245d2461191bc67cb3dc22a5006e5478a5552b", "patch": "@@ -84,14 +84,14 @@ else if (c == '|')\n \t  ++index;\n \t}\n \n-      strings = new String[stringVec.size()];\n-      stringVec.copyInto(strings);\n+      choiceFormats = new String[stringVec.size()];\n+      stringVec.copyInto(choiceFormats);\n \n-      limits = new double[limitVec.size()];\n-      for (int i = 0; i < limits.length; ++i)\n+      choiceLimits = new double[limitVec.size()];\n+      for (int i = 0; i < choiceLimits.length; ++i)\n \t{\n \t  Double d = (Double) limitVec.elementAt(i);\n-\t  limits[i] = d.doubleValue();\n+\t  choiceLimits[i] = d.doubleValue();\n \t}\n     }\n \n@@ -101,28 +101,28 @@ public ChoiceFormat (String newPattern)\n       applyPattern (newPattern);\n     }\n \n-  public ChoiceFormat (double[] limits, String[] strings)\n+  public ChoiceFormat (double[] choiceLimits, String[] choiceFormats)\n     {\n       super ();\n-      setChoices (limits, strings);\n+      setChoices (choiceLimits, choiceFormats);\n     }\n \n   public Object clone ()\n     {\n-      return new ChoiceFormat (limits, strings);\n+      return new ChoiceFormat (choiceLimits, choiceFormats);\n     }\n \n   public boolean equals (Object obj)\n     {\n       if (! (obj instanceof ChoiceFormat))\n \treturn false;\n       ChoiceFormat cf = (ChoiceFormat) obj;\n-      if (limits.length != cf.limits.length)\n+      if (choiceLimits.length != cf.choiceLimits.length)\n \treturn false;\n-      for (int i = limits.length - 1; i >= 0; --i)\n+      for (int i = choiceLimits.length - 1; i >= 0; --i)\n \t{\n-\t  if (limits[i] != cf.limits[i]\n-\t      || !strings[i].equals(cf.strings[i]))\n+\t  if (choiceLimits[i] != cf.choiceLimits[i]\n+\t      || !choiceFormats[i].equals(cf.choiceFormats[i]))\n \t    return false;\n \t}\n       return true;\n@@ -137,42 +137,42 @@ public StringBuffer format (long num, StringBuffer appendBuf,\n   public StringBuffer format (double num, StringBuffer appendBuf,\n \t\t\t      FieldPosition pos)\n     {\n-      if (limits.length == 0)\n+      if (choiceLimits.length == 0)\n \treturn appendBuf;\n \n       int index =  0;\n-      if (! Double.isNaN(num) && num >= limits[0])\n+      if (! Double.isNaN(num) && num >= choiceLimits[0])\n \t{\n-\t  for (; index < limits.length - 1; ++index)\n+\t  for (; index < choiceLimits.length - 1; ++index)\n \t    {\n-\t      if (limits[index] <= num\n-\t\t  && index != limits.length - 2\n-\t\t  && num < limits[index + 1])\n+\t      if (choiceLimits[index] <= num\n+\t\t  && index != choiceLimits.length - 2\n+\t\t  && num < choiceLimits[index + 1])\n \t\tbreak;\n \t    }\n \t}\n \n-      return appendBuf.append(strings[index]);\n+      return appendBuf.append(choiceFormats[index]);\n     }\n \n   public Object[] getFormats ()\n     {\n-      return (Object[]) strings.clone();\n+      return (Object[]) choiceFormats.clone();\n     }\n \n   public double[] getLimits ()\n     {\n-      return (double[]) limits.clone();\n+      return (double[]) choiceLimits.clone();\n     }\n \n   public int hashCode ()\n     {\n       int hash = 0;\n-      for (int i = 0; i < limits.length; ++i)\n+      for (int i = 0; i < choiceLimits.length; ++i)\n \t{\n-\t  long v = Double.doubleToLongBits(limits[i]);\n+\t  long v = Double.doubleToLongBits(choiceLimits[i]);\n \t  hash ^= (v ^ (v >>> 32));\n-\t  hash ^= strings[i].hashCode();\n+\t  hash ^= choiceFormats[i].hashCode();\n \t}\n       return hash;\n     }\n@@ -238,12 +238,12 @@ public static double nextDouble (double d, boolean next)\n   public Number parse (String sourceStr, ParsePosition pos)\n     {\n       int index = pos.getIndex();\n-      for (int i = 0; i < limits.length; ++i)\n+      for (int i = 0; i < choiceLimits.length; ++i)\n \t{\n-\t  if (sourceStr.startsWith(strings[i], index))\n+\t  if (sourceStr.startsWith(choiceFormats[i], index))\n \t    {\n-\t      pos.setIndex(index + strings[i].length());\n-\t      return new Double (limits[i]);\n+\t      pos.setIndex(index + choiceFormats[i].length());\n+\t      return new Double (choiceLimits[i]);\n \t    }\n \t}\n       pos.setErrorIndex(index);\n@@ -255,12 +255,14 @@ public static final double previousDouble (double d)\n       return nextDouble (d, false);\n     }\n \n-  public void setChoices (double[] limits, String[] strings)\n+  public void setChoices (double[] choiceLimits, String[] choiceFormats)\n     {\n-      if (limits.length != strings.length)\n+      if (choiceLimits == null || choiceFormats == null)\n+\tthrow new NullPointerException ();\n+      if (choiceLimits.length != choiceFormats.length)\n \tthrow new IllegalArgumentException ();\n-      this.strings = (String[]) strings.clone();\n-      this.limits = (double[]) limits.clone();\n+      this.choiceFormats = (String[]) choiceFormats.clone();\n+      this.choiceLimits = (double[]) choiceLimits.clone();\n     }\n \n   private final void quoteString (StringBuffer dest, String text)\n@@ -288,18 +290,18 @@ else if (c == '#' || c == '|' || c == '\\u2064' || c == '<')\n   public String toPattern ()\n     {\n       StringBuffer result = new StringBuffer ();\n-      for (int i = 0; i < limits.length; ++i)\n+      for (int i = 0; i < choiceLimits.length; ++i)\n \t{\n-\t  result.append(limits[i]);\n+\t  result.append(choiceLimits[i]);\n \t  result.append('#');\n-\t  quoteString (result, strings[i]);\n+\t  quoteString (result, choiceFormats[i]);\n \t}\n       return result.toString();\n     }\n \n   // Formats and limits.\n-  private String[] strings;\n-  private double[] limits;\n+  private String[] choiceFormats;\n+  private double[] choiceLimits;\n \n   // Number of mantissa bits in double.\n   private static final int mantissaBits = 52;"}]}