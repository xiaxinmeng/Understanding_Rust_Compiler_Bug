{"sha": "08b83163db07c903a6524f15f9adce4a0e7fa359", "node_id": "C_kwDOANBUbNoAKDA4YjgzMTYzZGIwN2M5MDNhNjUyNGYxNWY5YWRjZTRhMGU3ZmEzNTk", "commit": {"author": {"name": "Nirmal Patel", "email": "npate012@gmail.com", "date": "2021-10-28T17:58:03Z"}, "committer": {"name": "Nirmal Patel", "email": "npate012@gmail.com", "date": "2021-10-28T17:58:03Z"}, "message": "Remove iterate_params from AST::CallExpr and AST::MethodCallExpr\n\nThese lambda iterators are removed because they make working\nwith IR more complex. Instead, we are using the get_params ()\nto access the parameters with the help of a for loop.\n\nFixes #722 #723\n\nSigned-off-by: Nirmal Patel <npate012@gmail.com>", "tree": {"sha": "22cc4400519d1b4826596dceb1faf6cb07520fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22cc4400519d1b4826596dceb1faf6cb07520fc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08b83163db07c903a6524f15f9adce4a0e7fa359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b83163db07c903a6524f15f9adce4a0e7fa359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b83163db07c903a6524f15f9adce4a0e7fa359", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b83163db07c903a6524f15f9adce4a0e7fa359/comments", "author": {"login": "nirmal-j-patel", "id": 5339144, "node_id": "MDQ6VXNlcjUzMzkxNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5339144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirmal-j-patel", "html_url": "https://github.com/nirmal-j-patel", "followers_url": "https://api.github.com/users/nirmal-j-patel/followers", "following_url": "https://api.github.com/users/nirmal-j-patel/following{/other_user}", "gists_url": "https://api.github.com/users/nirmal-j-patel/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirmal-j-patel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirmal-j-patel/subscriptions", "organizations_url": "https://api.github.com/users/nirmal-j-patel/orgs", "repos_url": "https://api.github.com/users/nirmal-j-patel/repos", "events_url": "https://api.github.com/users/nirmal-j-patel/events{/privacy}", "received_events_url": "https://api.github.com/users/nirmal-j-patel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nirmal-j-patel", "id": 5339144, "node_id": "MDQ6VXNlcjUzMzkxNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5339144?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nirmal-j-patel", "html_url": "https://github.com/nirmal-j-patel", "followers_url": "https://api.github.com/users/nirmal-j-patel/followers", "following_url": "https://api.github.com/users/nirmal-j-patel/following{/other_user}", "gists_url": "https://api.github.com/users/nirmal-j-patel/gists{/gist_id}", "starred_url": "https://api.github.com/users/nirmal-j-patel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nirmal-j-patel/subscriptions", "organizations_url": "https://api.github.com/users/nirmal-j-patel/orgs", "repos_url": "https://api.github.com/users/nirmal-j-patel/repos", "events_url": "https://api.github.com/users/nirmal-j-patel/events{/privacy}", "received_events_url": "https://api.github.com/users/nirmal-j-patel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28c43f2f40cf405e89b3892aa65f6a06fa1c802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28c43f2f40cf405e89b3892aa65f6a06fa1c802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28c43f2f40cf405e89b3892aa65f6a06fa1c802"}], "stats": {"total": 55, "additions": 19, "deletions": 36}, "files": [{"sha": "05c78b7b9655c8adcdbaba5d6ebb59ae658c644f", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b83163db07c903a6524f15f9adce4a0e7fa359/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b83163db07c903a6524f15f9adce4a0e7fa359/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=08b83163db07c903a6524f15f9adce4a0e7fa359", "patch": "@@ -1916,15 +1916,6 @@ class CallExpr : public ExprWithoutBlock\n   void mark_for_strip () override { function = nullptr; }\n   bool is_marked_for_strip () const override { return function == nullptr; }\n \n-  void iterate_params (std::function<bool (Expr *)> cb)\n-  {\n-    for (auto &param : params)\n-      {\n-\tif (!cb (param.get ()))\n-\t  return;\n-      }\n-  }\n-\n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<std::unique_ptr<Expr> > &get_params () const\n   {\n@@ -2025,15 +2016,6 @@ class MethodCallExpr : public ExprWithoutBlock\n   void mark_for_strip () override { receiver = nullptr; }\n   bool is_marked_for_strip () const override { return receiver == nullptr; }\n \n-  void iterate_params (std::function<bool (Expr *)> cb)\n-  {\n-    for (auto &param : params)\n-      {\n-\tif (!cb (param.get ()))\n-\t  return;\n-      }\n-  }\n-\n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<std::unique_ptr<Expr> > &get_params () const\n   {"}, {"sha": "54cb6113ab72792e995dde3beaf66e4a68bc17a3", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b83163db07c903a6524f15f9adce4a0e7fa359/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b83163db07c903a6524f15f9adce4a0e7fa359/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=08b83163db07c903a6524f15f9adce4a0e7fa359", "patch": "@@ -192,12 +192,14 @@ class ASTLoweringExpr : public ASTLoweringBase\n   {\n     HIR::Expr *func\n       = ASTLoweringExpr::translate (expr.get_function_expr ().get ());\n+\n+    auto const &in_params = expr.get_params ();\n     std::vector<std::unique_ptr<HIR::Expr> > params;\n-    expr.iterate_params ([&] (AST::Expr *p) mutable -> bool {\n-      auto trans = ASTLoweringExpr::translate (p);\n-      params.push_back (std::unique_ptr<HIR::Expr> (trans));\n-      return true;\n-    });\n+    for (auto &param : in_params)\n+      {\n+\tauto trans = ASTLoweringExpr::translate (param.get ());\n+\tparams.push_back (std::unique_ptr<HIR::Expr> (trans));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (\n@@ -217,12 +219,13 @@ class ASTLoweringExpr : public ASTLoweringBase\n     HIR::Expr *receiver\n       = ASTLoweringExpr::translate (expr.get_receiver_expr ().get ());\n \n+    auto const &in_params = expr.get_params ();\n     std::vector<std::unique_ptr<HIR::Expr> > params;\n-    expr.iterate_params ([&] (AST::Expr *p) mutable -> bool {\n-      auto trans = ASTLoweringExpr::translate (p);\n-      params.push_back (std::unique_ptr<HIR::Expr> (trans));\n-      return true;\n-    });\n+    for (auto &param : in_params)\n+      {\n+\tauto trans = ASTLoweringExpr::translate (param.get ());\n+\tparams.push_back (std::unique_ptr<HIR::Expr> (trans));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),"}, {"sha": "12a4f8ca9c79d78a5375d1571c9b2778ceb6f4af", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b83163db07c903a6524f15f9adce4a0e7fa359/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b83163db07c903a6524f15f9adce4a0e7fa359/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=08b83163db07c903a6524f15f9adce4a0e7fa359", "patch": "@@ -101,10 +101,9 @@ class ResolveExpr : public ResolverBase\n   void visit (AST::CallExpr &expr) override\n   {\n     ResolveExpr::go (expr.get_function_expr ().get (), expr.get_node_id ());\n-    expr.iterate_params ([&] (AST::Expr *p) mutable -> bool {\n-      ResolveExpr::go (p, expr.get_node_id ());\n-      return true;\n-    });\n+    auto const &in_params = expr.get_params ();\n+    for (auto &param : in_params)\n+      ResolveExpr::go (param.get (), expr.get_node_id ());\n   }\n \n   void visit (AST::MethodCallExpr &expr) override\n@@ -117,10 +116,9 @@ class ResolveExpr : public ResolverBase\n \tResolveTypeToCanonicalPath::type_resolve_generic_args (args);\n       }\n \n-    expr.iterate_params ([&] (AST::Expr *p) mutable -> bool {\n-      ResolveExpr::go (p, expr.get_node_id ());\n-      return true;\n-    });\n+    auto const &in_params = expr.get_params ();\n+    for (auto &param : in_params)\n+      ResolveExpr::go (param.get (), expr.get_node_id ());\n   }\n \n   void visit (AST::AssignmentExpr &expr) override"}]}