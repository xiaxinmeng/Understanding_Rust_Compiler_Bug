{"sha": "5b725b8d04fff8583103bbea88f3d42f5443367d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI3MjViOGQwNGZmZjg1ODMxMDNiYmVhODhmM2Q0MmY1NDQzMzY3ZA==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2006-03-03T16:18:46Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2006-03-03T16:18:46Z"}, "message": "re PR fortran/25031 ([4.1 only] Allocatable array can be reallocated.)\n\n2006-03-03  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR fortran/25031\n\t* trans-array.h:  Adjust gfc_array_allocate prototype.\n\t* trans-array.c (gfc_array_allocate):  Change type of\n\tgfc_array_allocatate to bool.  Function returns true if\n\tit operates on an array.  Change second argument to gfc_expr.\n\tFind last reference in chain.\n\tIf the function operates on an allocatable array, emit call to\n\tallocate_array() or allocate64_array().\n\t* trans-stmt.c (gfc_trans_allocate):  Code to follow to last\n\treference has been moved to gfc_array_allocate.\n\t* trans.h:  Add declaration for gfor_fndecl_allocate_array and\n\tgfor_fndecl_allocate64_array.\n\t(gfc_build_builtin_function_decls):  Add gfor_fndecl_allocate_array\n\tand gfor_fndecl_allocate64_array.\n\n2006-03-03  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR fortran/25031\n\t* runtime/memory.c:  Adjust copyright years.\n\t(allocate_array):  New function.\n\t(allocate64_array):  New function.\n\t* libgfortran.h (error_codes):  Add ERROR_ALLOCATION.\n\n2006-03-03  Thomas Koenig  <Thomas.Koenig@online.de>\n\n\tPR fortran/25031\n\t* multiple_allocation_1.f90:  New test.\n\nFrom-SVN: r111677", "tree": {"sha": "2053327438b596f44709a80d2095a44b82bdb8f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2053327438b596f44709a80d2095a44b82bdb8f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b725b8d04fff8583103bbea88f3d42f5443367d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b725b8d04fff8583103bbea88f3d42f5443367d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b725b8d04fff8583103bbea88f3d42f5443367d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b725b8d04fff8583103bbea88f3d42f5443367d/comments", "author": null, "committer": null, "parents": [{"sha": "9a75ede07ca08c69fd38acafea04cc2e1a7bfd10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a75ede07ca08c69fd38acafea04cc2e1a7bfd10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a75ede07ca08c69fd38acafea04cc2e1a7bfd10"}], "stats": {"total": 166, "additions": 144, "deletions": 22}, "files": [{"sha": "81f27ecdcb270af3050ab3ff2c1813a3adc4ed88", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -1,3 +1,20 @@\n+2006-03-03  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/25031\n+\t* trans-array.h:  Adjust gfc_array_allocate prototype.\n+\t* trans-array.c (gfc_array_allocate):  Change type of\n+\tgfc_array_allocatate to bool.  Function returns true if\n+\tit operates on an array.  Change second argument to gfc_expr.\n+\tFind last reference in chain.\n+\tIf the function operates on an allocatable array, emit call to\n+\tallocate_array() or allocate64_array().\n+\t* trans-stmt.c (gfc_trans_allocate):  Code to follow to last\n+\treference has been moved to gfc_array_allocate.\n+\t* trans.h:  Add declaration for gfor_fndecl_allocate_array and\n+\tgfor_fndecl_allocate64_array.\n+\t(gfc_build_builtin_function_decls):  Add gfor_fndecl_allocate_array\n+\tand gfor_fndecl_allocate64_array.\n+\n 2006-03-01  Roger Sayle  <roger@eyesopen.com>\n \n \t* trans-stmt.c (generate_loop_for_temp_to_lhs): Add an additional"}, {"sha": "20647b18bc208b368625bc302e983228363ec1e1", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -3001,8 +3001,8 @@ gfc_array_init_size (tree descriptor, int rank, tree * poffset,\n    the work for an ALLOCATE statement.  */\n /*GCC ARRAYS*/\n \n-void\n-gfc_array_allocate (gfc_se * se, gfc_ref * ref, tree pstat)\n+bool\n+gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree pstat)\n {\n   tree tmp;\n   tree pointer;\n@@ -3011,6 +3011,20 @@ gfc_array_allocate (gfc_se * se, gfc_ref * ref, tree pstat)\n   tree size;\n   gfc_expr **lower;\n   gfc_expr **upper;\n+  gfc_ref *ref;\n+  int allocatable_array;\n+\n+  ref = expr->ref;\n+\n+  /* Find the last reference in the chain.  */\n+  while (ref && ref->next != NULL)\n+    {\n+      gcc_assert (ref->type != REF_ARRAY || ref->u.ar.type == AR_ELEMENT);\n+      ref = ref->next;\n+    }\n+\n+  if (ref == NULL || ref->type != REF_ARRAY)\n+    return false;\n \n   /* Figure out the size of the array.  */\n   switch (ref->u.ar.type)\n@@ -3044,10 +3058,22 @@ gfc_array_allocate (gfc_se * se, gfc_ref * ref, tree pstat)\n   tmp = gfc_conv_descriptor_data_addr (se->expr);\n   pointer = gfc_evaluate_now (tmp, &se->pre);\n \n+  allocatable_array = expr->symtree->n.sym->attr.allocatable;\n+\n   if (TYPE_PRECISION (gfc_array_index_type) == 32)\n-    allocate = gfor_fndecl_allocate;\n+    {\n+      if (allocatable_array)\n+\tallocate = gfor_fndecl_allocate_array;\n+      else\n+\tallocate = gfor_fndecl_allocate;\n+    }\n   else if (TYPE_PRECISION (gfc_array_index_type) == 64)\n-    allocate = gfor_fndecl_allocate64;\n+    {\n+      if (allocatable_array)\n+\tallocate = gfor_fndecl_allocate64_array;\n+      else\n+\tallocate = gfor_fndecl_allocate64;\n+    }\n   else\n     gcc_unreachable ();\n \n@@ -3059,6 +3085,8 @@ gfc_array_allocate (gfc_se * se, gfc_ref * ref, tree pstat)\n \n   tmp = gfc_conv_descriptor_offset (se->expr);\n   gfc_add_modify_expr (&se->pre, tmp, offset);\n+\n+  return true;\n }\n \n "}, {"sha": "8038f40e9d0e9d55bcccb4b5e81ac07a869962d6", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -24,7 +24,7 @@ tree gfc_array_deallocate (tree, tree);\n \n /* Generate code to initialize an allocate an array.  Statements are added to\n    se, which should contain an expression for the array descriptor.  */\n-void gfc_array_allocate (gfc_se *, gfc_ref *, tree);\n+bool gfc_array_allocate (gfc_se *, gfc_expr *, tree);\n \n /* Allow the bounds of a loop to be set from a callee's array spec.  */\n void gfc_set_loop_bounds_from_array_spec (gfc_interface_mapping *,"}, {"sha": "41f5abe831fd7e0765761d198d9422e465877dce", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -80,6 +80,8 @@ tree gfor_fndecl_internal_realloc64;\n tree gfor_fndecl_internal_free;\n tree gfor_fndecl_allocate;\n tree gfor_fndecl_allocate64;\n+tree gfor_fndecl_allocate_array;\n+tree gfor_fndecl_allocate64_array;\n tree gfor_fndecl_deallocate;\n tree gfor_fndecl_pause_numeric;\n tree gfor_fndecl_pause_string;\n@@ -2193,6 +2195,16 @@ gfc_build_builtin_function_decls (void)\n \t\t\t\t     void_type_node, 2, ppvoid_type_node,\n \t\t\t\t     gfc_int8_type_node);\n \n+  gfor_fndecl_allocate_array =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate_array\")),\n+\t\t\t\t     void_type_node, 2, ppvoid_type_node,\n+\t\t\t\t     gfc_int4_type_node);\n+\n+  gfor_fndecl_allocate64_array =\n+    gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate64_array\")),\n+\t\t\t\t     void_type_node, 2, ppvoid_type_node,\n+\t\t\t\t     gfc_int8_type_node);\n+\n   gfor_fndecl_deallocate =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"deallocate\")),\n \t\t\t\t     void_type_node, 2, ppvoid_type_node,"}, {"sha": "2ec8ba7d181a986c5fe46122ef7bcd72b81fa114", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -3389,7 +3389,6 @@ gfc_trans_allocate (gfc_code * code)\n   gfc_se se;\n   tree tmp;\n   tree parm;\n-  gfc_ref *ref;\n   tree stat;\n   tree pstat;\n   tree error_label;\n@@ -3428,21 +3427,7 @@ gfc_trans_allocate (gfc_code * code)\n       se.descriptor_only = 1;\n       gfc_conv_expr (&se, expr);\n \n-      ref = expr->ref;\n-\n-      /* Find the last reference in the chain.  */\n-      while (ref && ref->next != NULL)\n-\t{\n-\t  gcc_assert (ref->type != REF_ARRAY || ref->u.ar.type == AR_ELEMENT);\n-\t  ref = ref->next;\n-\t}\n-\n-      if (ref != NULL && ref->type == REF_ARRAY)\n-\t{\n-\t  /* An array.  */\n-\t  gfc_array_allocate (&se, ref, pstat);\n-\t}\n-      else\n+      if (!gfc_array_allocate (&se, expr, pstat))\n \t{\n \t  /* A scalar or derived type.  */\n \t  tree val;"}, {"sha": "89f4058a8343463a14e9061d74e6a2034de570d0", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -455,6 +455,8 @@ extern GTY(()) tree gfor_fndecl_internal_realloc64;\n extern GTY(()) tree gfor_fndecl_internal_free;\n extern GTY(()) tree gfor_fndecl_allocate;\n extern GTY(()) tree gfor_fndecl_allocate64;\n+extern GTY(()) tree gfor_fndecl_allocate_array;\n+extern GTY(()) tree gfor_fndecl_allocate64_array;\n extern GTY(()) tree gfor_fndecl_deallocate;\n extern GTY(()) tree gfor_fndecl_pause_numeric;\n extern GTY(()) tree gfor_fndecl_pause_string;"}, {"sha": "8580d28d071480a639a66465fc1066eb468eab09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -1,3 +1,8 @@\n+2006-03-03  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/25031\n+\t* multiple_allocation_1.f90:  New test.\n+\n 2006-03-03  Roger Sayle  <roger@eyesopen.com>\n \n \tPR tree-optimization/26524"}, {"sha": "9c14248a05d69740567aed70f1900c7e52da0f5c", "filename": "gcc/testsuite/gfortran.dg/multiple_allocation_1.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ftestsuite%2Fgfortran.dg%2Fmultiple_allocation_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/gcc%2Ftestsuite%2Fgfortran.dg%2Fmultiple_allocation_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmultiple_allocation_1.f90?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do run }\n+! PR 25031 - We didn't cause an error when allocating an already\n+!            allocated array.\n+program alloc_test\n+  implicit none\n+  integer :: i\n+  integer, allocatable :: a(:)\n+  integer, pointer :: b(:)\n+\n+  allocate(a(4))\n+  ! This should set the stat code without changing the size\n+  allocate(a(4),stat=i)\n+  if (i == 0) call abort\n+  if (.not. allocated(a)) call abort\n+  ! It's OK to allocate pointers twice (even though this causes\n+  ! a memory leak)\n+  allocate(b(4))\n+  allocate(b(4))\n+end program"}, {"sha": "ff9e599edc55991efd68b0f38c71a0909aa23aa4", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -1,3 +1,11 @@\n+2006-03-03  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR fortran/25031\n+\t* runtime/memory.c:  Adjust copyright years.\n+\t(allocate_array):  New function.\n+\t(allocate64_array):  New function.\n+\t* libgfortran.h (error_codes):  Add ERROR_ALLOCATION.\n+\n 2006-02-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/26136"}, {"sha": "5efc8ae2e0ef0bf30b4792b49ce68f35e95c58a0", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -379,6 +379,7 @@ typedef enum\n   ERROR_READ_OVERFLOW,\n   ERROR_INTERNAL,\n   ERROR_INTERNAL_UNIT,\n+  ERROR_ALLOCATION,\n   ERROR_LAST\t\t\t/* Not a real error, the last error # + 1.  */\n }\n error_codes;"}, {"sha": "34d70f2f17b0c9fcb5e13bff0cef6712e0448f80", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b725b8d04fff8583103bbea88f3d42f5443367d/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b725b8d04fff8583103bbea88f3d42f5443367d/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=5b725b8d04fff8583103bbea88f3d42f5443367d", "patch": "@@ -1,5 +1,5 @@\n /* Memory mamagement routines.\n-   Copyright 2002, 2005 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -233,6 +233,51 @@ allocate64 (void **mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n   allocate_size (mem, (size_t) size, stat);\n }\n \n+/* Function to call in an ALLOCATE statement when the argument is an\n+   allocatable array.  If the array is currently allocated, it is\n+   an error to allocate it again.  32-bit version.  */\n+\n+extern void allocate_array (void **, GFC_INTEGER_4, GFC_INTEGER_4 *);\n+export_proto(allocate_array);\n+\n+void\n+allocate_array (void **mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n+{\n+  if (*mem == NULL)\n+    {\n+      allocate (mem, size, stat);\n+      return;\n+    }\n+  if (stat)\n+    *stat = ERROR_ALLOCATION;\n+  else\n+    runtime_error (\"Attempting to allocate already allocated array.\");\n+\n+  return;\n+}\n+\n+/* Function to call in an ALLOCATE statement when the argument is an\n+   allocatable array.  If the array is currently allocated, it is\n+   an error to allocate it again.  64-bit version.  */\n+\n+extern void allocate64_array (void **, GFC_INTEGER_8, GFC_INTEGER_4 *);\n+export_proto(allocate64_array);\n+\n+void\n+allocate64_array (void **mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n+{\n+  if (*mem == NULL)\n+    {\n+      allocate64 (mem, size, stat);\n+      return;\n+    }\n+  if (stat)\n+    *stat = ERROR_ALLOCATION;\n+  else\n+    runtime_error (\"Attempting to allocate already allocated array.\");\n+  \n+  return;\n+}\n \n /* User-deallocate; pointer is NULLified. */\n "}]}