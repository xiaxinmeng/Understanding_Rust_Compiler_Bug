{"sha": "8f215e0f07c33e511ed478152330451ede1e6285", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyMTVlMGYwN2MzM2U1MTFlZDQ3ODE1MjMzMDQ1MWVkZTFlNjI4NQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-11-13T10:33:55Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-11-13T10:33:55Z"}, "message": "Revert [ARM] Remove neon-testgen.ml and generated tests.\n\nFrom-SVN: r230296", "tree": {"sha": "3ca7a9e8a38f8bd91cebf5d7ed042a8e1b8bd5a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ca7a9e8a38f8bd91cebf5d7ed042a8e1b8bd5a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f215e0f07c33e511ed478152330451ede1e6285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f215e0f07c33e511ed478152330451ede1e6285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f215e0f07c33e511ed478152330451ede1e6285", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f215e0f07c33e511ed478152330451ede1e6285/comments", "author": null, "committer": null, "parents": [{"sha": "8014404589079fd5a775d0e3eeafa5fc65d1162b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8014404589079fd5a775d0e3eeafa5fc65d1162b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8014404589079fd5a775d0e3eeafa5fc65d1162b"}], "stats": {"total": 40754, "additions": 40754, "deletions": 0}, "files": [{"sha": "8623e2198daaa139a71e30c751ec59e28b0a6b3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -1,3 +1,13 @@\n+2015-11-13  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tRevert [ARM] Remove neon-testgen.ml and generated tests.\n+\n+\t2015-11-12  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t[ARM] Remove neon-testgen.ml and generated tests.\n+\n+\t* config/arm/neon-testgen.ml: Remove.\n+\n 2015-11-13  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (vect_analyze_loop_2): Add fatal parameter."}, {"sha": "a80c05dfe09dbecfa2e12498be979662d928e60a", "filename": "gcc/config/arm/neon-testgen.ml", "status": "added", "additions": 324, "deletions": 0, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-testgen.ml?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,324 @@\n+(* Auto-generate ARM Neon intrinsics tests.\n+   Copyright (C) 2006-2015 Free Software Foundation, Inc.\n+   Contributed by CodeSourcery.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.\n+\n+   This is an O'Caml program.  The O'Caml compiler is available from:\n+\n+     http://caml.inria.fr/\n+\n+   Or from your favourite OS's friendly packaging system. Tested with version\n+   3.09.2, though other versions will probably work too.\n+\n+   Compile with:\n+     ocamlc -c neon.ml\n+     ocamlc -o neon-testgen neon.cmo neon-testgen.ml\n+\n+   Run with:\n+     cd /path/to/gcc/testsuite/gcc.target/arm/neon\n+     /path/to/neon-testgen\n+*)\n+\n+open Neon\n+\n+type c_type_flags = Pointer | Const\n+\n+(* Open a test source file.  *)\n+let open_test_file dir name =\n+  try\n+    open_out (dir ^ \"/\" ^ name ^ \".c\")\n+  with Sys_error str ->\n+    failwith (\"Could not create test source file \" ^ name ^ \": \" ^ str)\n+\n+(* Emit prologue code to a test source file.  *)\n+let emit_prologue chan test_name effective_target compile_test_optim =\n+  Printf.fprintf chan \"/* Test the `%s' ARM Neon intrinsic.  */\\n\" test_name;\n+  Printf.fprintf chan \"/* This file was autogenerated by neon-testgen.  */\\n\\n\";\n+  Printf.fprintf chan \"/* { dg-do assemble } */\\n\";\n+  Printf.fprintf chan \"/* { dg-require-effective-target %s_ok } */\\n\"\n+                 effective_target;\n+  Printf.fprintf chan \"/* { dg-options \\\"-save-temps %s\\\" } */\\n\" compile_test_optim;\n+  Printf.fprintf chan \"/* { dg-add-options %s } */\\n\" effective_target;\n+  Printf.fprintf chan \"\\n#include \\\"arm_neon.h\\\"\\n\\n\"\n+\n+(* Emit declarations of variables that are going to be passed\n+   to an intrinsic, together with one to take a returned value if needed.  *)\n+let emit_variables chan c_types features spaces =\n+  let emit () =\n+    ignore (\n+      List.fold_left (fun arg_number -> fun (flags, ty) ->\n+                        let pointer_bit =\n+                          if List.mem Pointer flags then \"*\" else \"\"\n+                        in\n+                          (* Const arguments to builtins are directly\n+                             written in as constants.  *)\n+                          if not (List.mem Const flags) then\n+                            Printf.fprintf chan \"%s%s %sarg%d_%s;\\n\"\n+                                           spaces ty pointer_bit arg_number ty;\n+                        arg_number + 1)\n+                     0 (List.tl c_types))\n+  in\n+    match c_types with\n+      (_, return_ty) :: tys ->\n+        if return_ty <> \"void\" then begin\n+          (* The intrinsic returns a value.  We need to do explicit register\n+             allocation for vget_low tests or they fail because of copy\n+             elimination.  *)\n+          ((if List.mem Fixed_vector_reg features then\n+              Printf.fprintf chan \"%sregister %s out_%s asm (\\\"d18\\\");\\n\"\n+                             spaces return_ty return_ty\n+            else if List.mem Fixed_core_reg features then\n+              Printf.fprintf chan \"%sregister %s out_%s asm (\\\"r0\\\");\\n\"\n+                             spaces return_ty return_ty\n+            else\n+              Printf.fprintf chan \"%s%s out_%s;\\n\" spaces return_ty return_ty);\n+\t   emit ())\n+        end else\n+          (* The intrinsic does not return a value.  *)\n+          emit ()\n+    | _ -> assert false\n+\n+(* Emit code to call an intrinsic.  *)\n+let emit_call chan const_valuator c_types name elt_ty =\n+  (if snd (List.hd c_types) <> \"void\" then\n+     Printf.fprintf chan \"  out_%s = \" (snd (List.hd c_types))\n+   else\n+     Printf.fprintf chan \"  \");\n+  Printf.fprintf chan \"%s_%s (\" (intrinsic_name name) (string_of_elt elt_ty);\n+  let print_arg chan arg_number (flags, ty) =\n+    (* If the argument is of const type, then directly write in the\n+       constant now.  *)\n+    if List.mem Const flags then\n+      match const_valuator with\n+        None ->\n+          if List.mem Pointer flags then\n+            Printf.fprintf chan \"0\"\n+          else\n+            Printf.fprintf chan \"1\"\n+      | Some f -> Printf.fprintf chan \"%s\" (string_of_int (f arg_number))\n+    else\n+      Printf.fprintf chan \"arg%d_%s\" arg_number ty\n+  in\n+  let rec print_args arg_number tys =\n+    match tys with\n+      [] -> ()\n+    | [ty] -> print_arg chan arg_number ty\n+    | ty::tys ->\n+      print_arg chan arg_number ty;\n+      Printf.fprintf chan \", \";\n+      print_args (arg_number + 1) tys\n+  in\n+    print_args 0 (List.tl c_types);\n+    Printf.fprintf chan \");\\n\"\n+\n+(* Emit epilogue code to a test source file.  *)\n+let emit_epilogue chan features regexps =\n+  let no_op = List.exists (fun feature -> feature = No_op) features in\n+    Printf.fprintf chan \"}\\n\\n\";\n+    if not no_op then\n+      List.iter (fun regexp ->\n+                  Printf.fprintf chan\n+                    \"/* { dg-final { scan-assembler \\\"%s\\\" } } */\\n\" regexp)\n+                regexps\n+    else\n+      ()\n+    \n+\n+(* Check a list of C types to determine which ones are pointers and which\n+   ones are const.  *)\n+let check_types tys =\n+  let tys' =\n+    List.map (fun ty ->\n+                let len = String.length ty in\n+                  if len > 2 && String.get ty (len - 2) = ' '\n+                             && String.get ty (len - 1) = '*'\n+                  then ([Pointer], String.sub ty 0 (len - 2))\n+                  else ([], ty)) tys\n+  in\n+    List.map (fun (flags, ty) ->\n+                if String.length ty > 6 && String.sub ty 0 6 = \"const \"\n+                then (Const :: flags, String.sub ty 6 ((String.length ty) - 6))\n+                else (flags, ty)) tys'\n+\n+(* Work out what the effective target should be.  *)\n+let effective_target features =\n+  try\n+    match List.find (fun feature ->\n+                       match feature with Requires_feature _ -> true\n+                                        | Requires_arch _ -> true\n+                                        | Requires_FP_bit 1 -> true\n+                                        | _ -> false)\n+                     features with\n+      Requires_feature \"FMA\" -> \"arm_neonv2\"\n+    | Requires_feature \"CRYPTO\" -> \"arm_crypto\"\n+    | Requires_arch 8 -> \"arm_v8_neon\"\n+    | Requires_FP_bit 1 -> \"arm_neon_fp16\"\n+    | _ -> assert false\n+  with Not_found -> \"arm_neon\"\n+\n+(* Work out what the testcase optimization level should be, default to -O0.  *)\n+let compile_test_optim features =\n+  try\n+    match List.find (fun feature ->\n+                       match feature with Compiler_optim _ -> true\n+                                        | _ -> false)\n+                     features with\n+      Compiler_optim opt -> opt\n+    | _ -> assert false\n+  with Not_found -> \"-O0\"\n+\n+(* Given an intrinsic shape, produce a regexp that will match\n+   the right-hand sides of instructions generated by an intrinsic of\n+   that shape.  *)\n+let rec analyze_shape shape =\n+  let rec n_things n thing =\n+    match n with\n+      0 -> []\n+    | n -> thing :: (n_things (n - 1) thing)\n+  in\n+  let rec analyze_shape_elt elt =\n+    match elt with\n+      Dreg -> \"\\\\[dD\\\\]\\\\[0-9\\\\]+\"\n+    | Qreg -> \"\\\\[qQ\\\\]\\\\[0-9\\\\]+\"\n+    | Corereg -> \"\\\\[rR\\\\]\\\\[0-9\\\\]+\"\n+    | Immed -> \"#\\\\[0-9\\\\]+\"\n+    | VecArray (1, elt) ->\n+        let elt_regexp = analyze_shape_elt elt in\n+          \"((\\\\\\\\\\\\{\" ^ elt_regexp ^ \"\\\\\\\\\\\\})|(\" ^ elt_regexp ^ \"))\"\n+    | VecArray (n, elt) ->\n+      let elt_regexp = analyze_shape_elt elt in\n+      let alt1 = elt_regexp ^ \"-\" ^ elt_regexp in\n+      let alt2 = commas (fun x -> x) (n_things n elt_regexp) \"\" in\n+        \"\\\\\\\\\\\\{((\" ^ alt1 ^ \")|(\" ^ alt2 ^ \"))\\\\\\\\\\\\}\"\n+    | (PtrTo elt | CstPtrTo elt) ->\n+      \"\\\\\\\\\\\\[\" ^ (analyze_shape_elt elt) ^ \"\\\\(:\\\\[0-9\\\\]+\\\\)?\\\\\\\\\\\\]\"\n+    | Element_of_dreg -> (analyze_shape_elt Dreg) ^ \"\\\\\\\\\\\\[\\\\[0-9\\\\]+\\\\\\\\\\\\]\"\n+    | Element_of_qreg -> (analyze_shape_elt Qreg) ^ \"\\\\\\\\\\\\[\\\\[0-9\\\\]+\\\\\\\\\\\\]\"\n+    | All_elements_of_dreg -> (analyze_shape_elt Dreg) ^ \"\\\\\\\\\\\\[\\\\\\\\\\\\]\"\n+    | Alternatives (elts) -> \"(\" ^ (String.concat \"|\" (List.map analyze_shape_elt elts)) ^ \")\"\n+  in\n+    match shape with\n+      All (n, elt) -> commas analyze_shape_elt (n_things n elt) \"\"\n+    | Long -> (analyze_shape_elt Qreg) ^ \", \" ^ (analyze_shape_elt Dreg) ^\n+              \", \" ^ (analyze_shape_elt Dreg)\n+    | Long_noreg elt -> (analyze_shape_elt elt) ^ \", \" ^ (analyze_shape_elt elt)\n+    | Wide -> (analyze_shape_elt Qreg) ^ \", \" ^ (analyze_shape_elt Qreg) ^\n+              \", \" ^ (analyze_shape_elt Dreg)\n+    | Wide_noreg elt -> analyze_shape (Long_noreg elt)\n+    | Narrow -> (analyze_shape_elt Dreg) ^ \", \" ^ (analyze_shape_elt Qreg) ^\n+                \", \" ^ (analyze_shape_elt Qreg)\n+    | Use_operands elts -> commas analyze_shape_elt (Array.to_list elts) \"\"\n+    | By_scalar Dreg ->\n+        analyze_shape (Use_operands [| Dreg; Dreg; Element_of_dreg |])\n+    | By_scalar Qreg ->\n+        analyze_shape (Use_operands [| Qreg; Qreg; Element_of_dreg |])\n+    | By_scalar _ -> assert false\n+    | Wide_lane ->\n+        analyze_shape (Use_operands [| Qreg; Dreg; Element_of_dreg |])\n+    | Wide_scalar ->\n+        analyze_shape (Use_operands [| Qreg; Dreg; Element_of_dreg |])\n+    | Pair_result elt ->\n+      let elt_regexp = analyze_shape_elt elt in\n+        elt_regexp ^ \", \" ^ elt_regexp\n+    | Unary_scalar _ -> \"FIXME Unary_scalar\"\n+    | Binary_imm elt -> analyze_shape (Use_operands [| elt; elt; Immed |])\n+    | Narrow_imm -> analyze_shape (Use_operands [| Dreg; Qreg; Immed |])\n+    | Long_imm -> analyze_shape (Use_operands [| Qreg; Dreg; Immed |])\n+\n+(* Generate tests for one intrinsic.  *)\n+let test_intrinsic dir opcode features shape name munge elt_ty =\n+  (* Open the test source file.  *)\n+  let test_name = name ^ (string_of_elt elt_ty) in\n+  let chan = open_test_file dir test_name in\n+  (* Work out what argument and return types the intrinsic has.  *)\n+  let c_arity, new_elt_ty = munge shape elt_ty in\n+  let c_types = check_types (strings_of_arity c_arity) in\n+  (* Extract any constant valuator (a function specifying what constant\n+     values are to be written into the intrinsic call) from the features\n+     list.  *)\n+  let const_valuator =\n+    try\n+      match (List.find (fun feature -> match feature with\n+                                         Const_valuator _ -> true\n+\t\t\t\t       | _ -> false) features) with\n+        Const_valuator f -> Some f\n+      | _ -> assert false\n+    with Not_found -> None\n+  in\n+  (* Work out what instruction name(s) to expect.  *)\n+  let insns = get_insn_names features name in\n+  let no_suffix = (new_elt_ty = NoElts) in\n+  let insns =\n+    if no_suffix then insns\n+                 else List.map (fun insn ->\n+                                  let suffix = string_of_elt_dots new_elt_ty in\n+                                    insn ^ \"\\\\.\" ^ suffix) insns\n+  in\n+  (* Construct a regexp to match against the expected instruction name(s).  *)\n+  let insn_regexp =\n+    match insns with\n+      [] -> assert false\n+    | [insn] -> insn\n+    | _ ->\n+      let rec calc_regexp insns cur_regexp =\n+        match insns with\n+          [] -> cur_regexp\n+        | [insn] -> cur_regexp ^ \"(\" ^ insn ^ \"))\"\n+        | insn::insns -> calc_regexp insns (cur_regexp ^ \"(\" ^ insn ^ \")|\")\n+      in calc_regexp insns \"(\"\n+  in\n+  (* Construct regexps to match against the instructions that this\n+     intrinsic expands to.  Watch out for any writeback character and\n+     comments after the instruction.  *)\n+  let regexps = List.map (fun regexp -> insn_regexp ^ \"\\\\[ \\t\\\\]+\" ^ regexp ^\n+\t\t\t  \"!?\\\\(\\\\[ \\t\\\\]+@\\\\[a-zA-Z0-9 \\\\]+\\\\)?\\\\n\")\n+                         (analyze_all_shapes features shape analyze_shape)\n+  in\n+  let effective_target = effective_target features in\n+  let compile_test_optim = compile_test_optim features\n+  in\n+    (* Emit file and function prologues.  *)\n+    emit_prologue chan test_name effective_target compile_test_optim;\n+\n+    if (compare compile_test_optim \"-O0\") <> 0 then\n+        (* Emit variable declarations.  *)\n+        emit_variables chan c_types features \"\";\n+\n+    Printf.fprintf chan \"void test_%s (void)\\n{\\n\" test_name;\n+\n+    if compare compile_test_optim \"-O0\" = 0 then\n+        (* Emit variable declarations.  *)\n+        emit_variables chan c_types features \"  \";\n+\n+    Printf.fprintf chan \"\\n\";\n+    (* Emit the call to the intrinsic.  *)\n+    emit_call chan const_valuator c_types name elt_ty;\n+    (* Emit the function epilogue and the DejaGNU scan-assembler directives.  *)\n+    emit_epilogue chan features regexps;\n+    (* Close the test file.  *)\n+    close_out chan\n+\n+(* Generate tests for one element of the \"ops\" table.  *)\n+let test_intrinsic_group dir (opcode, features, shape, name, munge, types) =\n+  List.iter (test_intrinsic dir opcode features shape name munge) types\n+\n+(* Program entry point.  *)\n+let _ =\n+  let directory = if Array.length Sys.argv <> 1 then Sys.argv.(1) else \".\" in\n+    List.iter (test_intrinsic_group directory) (reinterp @ reinterpq @ ops)\n+"}, {"sha": "5e8bdba99f0cca0c3c9e53cd530586b259e4c824", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 1995, "deletions": 0, "changes": 1995, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -1,3 +1,1998 @@\n+2015-11-13  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tRevert [ARM] Remove neon-testgen.ml and generated tests.\n+\t2015-11-12  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/neon/vRaddhns16.c: Remove.\n+\t* gcc.target/arm/neon/vRaddhns32.c: Remove.\n+\t* gcc.target/arm/neon/vRaddhns64.c: Remove.\n+\t* gcc.target/arm/neon/vRaddhnu16.c: Remove.\n+\t* gcc.target/arm/neon/vRaddhnu32.c: Remove.\n+\t* gcc.target/arm/neon/vRaddhnu64.c: Remove.\n+\t* gcc.target/arm/neon/vRhaddQs16.c: Remove.\n+\t* gcc.target/arm/neon/vRhaddQs32.c: Remove.\n+\t* gcc.target/arm/neon/vRhaddQs8.c: Remove.\n+\t* gcc.target/arm/neon/vRhaddQu16.c: Remove.\n+\t* gcc.target/arm/neon/vRhaddQu32.c: Remove.\n+\t* gcc.target/arm/neon/vRhaddQu8.c: Remove.\n+\t* gcc.target/arm/neon/vRhadds16.c: Remove.\n+\t* gcc.target/arm/neon/vRhadds32.c: Remove.\n+\t* gcc.target/arm/neon/vRhadds8.c: Remove.\n+\t* gcc.target/arm/neon/vRhaddu16.c: Remove.\n+\t* gcc.target/arm/neon/vRhaddu32.c: Remove.\n+\t* gcc.target/arm/neon/vRhaddu8.c: Remove.\n+\t* gcc.target/arm/neon/vRshlQs16.c: Remove.\n+\t* gcc.target/arm/neon/vRshlQs32.c: Remove.\n+\t* gcc.target/arm/neon/vRshlQs64.c: Remove.\n+\t* gcc.target/arm/neon/vRshlQs8.c: Remove.\n+\t* gcc.target/arm/neon/vRshlQu16.c: Remove.\n+\t* gcc.target/arm/neon/vRshlQu32.c: Remove.\n+\t* gcc.target/arm/neon/vRshlQu64.c: Remove.\n+\t* gcc.target/arm/neon/vRshlQu8.c: Remove.\n+\t* gcc.target/arm/neon/vRshls16.c: Remove.\n+\t* gcc.target/arm/neon/vRshls32.c: Remove.\n+\t* gcc.target/arm/neon/vRshls64.c: Remove.\n+\t* gcc.target/arm/neon/vRshls8.c: Remove.\n+\t* gcc.target/arm/neon/vRshlu16.c: Remove.\n+\t* gcc.target/arm/neon/vRshlu32.c: Remove.\n+\t* gcc.target/arm/neon/vRshlu64.c: Remove.\n+\t* gcc.target/arm/neon/vRshlu8.c: Remove.\n+\t* gcc.target/arm/neon/vRshrQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vRshrQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vRshrQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vRshrQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vRshrQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vRshrQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vRshrQ_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vRshrQ_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vRshr_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vRshr_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vRshr_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vRshr_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vRshr_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vRshr_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vRshr_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vRshr_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vRshrn_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vRshrn_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vRshrn_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vRshrn_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vRshrn_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vRshrn_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vRsraQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vRsraQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vRsraQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vRsraQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vRsraQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vRsraQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vRsraQ_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vRsraQ_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vRsra_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vRsra_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vRsra_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vRsra_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vRsra_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vRsra_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vRsra_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vRsra_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vRsubhns16.c: Remove.\n+\t* gcc.target/arm/neon/vRsubhns32.c: Remove.\n+\t* gcc.target/arm/neon/vRsubhns64.c: Remove.\n+\t* gcc.target/arm/neon/vRsubhnu16.c: Remove.\n+\t* gcc.target/arm/neon/vRsubhnu32.c: Remove.\n+\t* gcc.target/arm/neon/vRsubhnu64.c: Remove.\n+\t* gcc.target/arm/neon/vabaQs16.c: Remove.\n+\t* gcc.target/arm/neon/vabaQs32.c: Remove.\n+\t* gcc.target/arm/neon/vabaQs8.c: Remove.\n+\t* gcc.target/arm/neon/vabaQu16.c: Remove.\n+\t* gcc.target/arm/neon/vabaQu32.c: Remove.\n+\t* gcc.target/arm/neon/vabaQu8.c: Remove.\n+\t* gcc.target/arm/neon/vabals16.c: Remove.\n+\t* gcc.target/arm/neon/vabals32.c: Remove.\n+\t* gcc.target/arm/neon/vabals8.c: Remove.\n+\t* gcc.target/arm/neon/vabalu16.c: Remove.\n+\t* gcc.target/arm/neon/vabalu32.c: Remove.\n+\t* gcc.target/arm/neon/vabalu8.c: Remove.\n+\t* gcc.target/arm/neon/vabas16.c: Remove.\n+\t* gcc.target/arm/neon/vabas32.c: Remove.\n+\t* gcc.target/arm/neon/vabas8.c: Remove.\n+\t* gcc.target/arm/neon/vabau16.c: Remove.\n+\t* gcc.target/arm/neon/vabau32.c: Remove.\n+\t* gcc.target/arm/neon/vabau8.c: Remove.\n+\t* gcc.target/arm/neon/vabdQf32.c: Remove.\n+\t* gcc.target/arm/neon/vabdQs16.c: Remove.\n+\t* gcc.target/arm/neon/vabdQs32.c: Remove.\n+\t* gcc.target/arm/neon/vabdQs8.c: Remove.\n+\t* gcc.target/arm/neon/vabdQu16.c: Remove.\n+\t* gcc.target/arm/neon/vabdQu32.c: Remove.\n+\t* gcc.target/arm/neon/vabdQu8.c: Remove.\n+\t* gcc.target/arm/neon/vabdf32.c: Remove.\n+\t* gcc.target/arm/neon/vabdls16.c: Remove.\n+\t* gcc.target/arm/neon/vabdls32.c: Remove.\n+\t* gcc.target/arm/neon/vabdls8.c: Remove.\n+\t* gcc.target/arm/neon/vabdlu16.c: Remove.\n+\t* gcc.target/arm/neon/vabdlu32.c: Remove.\n+\t* gcc.target/arm/neon/vabdlu8.c: Remove.\n+\t* gcc.target/arm/neon/vabds16.c: Remove.\n+\t* gcc.target/arm/neon/vabds32.c: Remove.\n+\t* gcc.target/arm/neon/vabds8.c: Remove.\n+\t* gcc.target/arm/neon/vabdu16.c: Remove.\n+\t* gcc.target/arm/neon/vabdu32.c: Remove.\n+\t* gcc.target/arm/neon/vabdu8.c: Remove.\n+\t* gcc.target/arm/neon/vabsQf32.c: Remove.\n+\t* gcc.target/arm/neon/vabsQs16.c: Remove.\n+\t* gcc.target/arm/neon/vabsQs32.c: Remove.\n+\t* gcc.target/arm/neon/vabsQs8.c: Remove.\n+\t* gcc.target/arm/neon/vabsf32.c: Remove.\n+\t* gcc.target/arm/neon/vabss16.c: Remove.\n+\t* gcc.target/arm/neon/vabss32.c: Remove.\n+\t* gcc.target/arm/neon/vabss8.c: Remove.\n+\t* gcc.target/arm/neon/vaddQf32.c: Remove.\n+\t* gcc.target/arm/neon/vaddQs16.c: Remove.\n+\t* gcc.target/arm/neon/vaddQs32.c: Remove.\n+\t* gcc.target/arm/neon/vaddQs64.c: Remove.\n+\t* gcc.target/arm/neon/vaddQs8.c: Remove.\n+\t* gcc.target/arm/neon/vaddQu16.c: Remove.\n+\t* gcc.target/arm/neon/vaddQu32.c: Remove.\n+\t* gcc.target/arm/neon/vaddQu64.c: Remove.\n+\t* gcc.target/arm/neon/vaddQu8.c: Remove.\n+\t* gcc.target/arm/neon/vaddf32.c: Remove.\n+\t* gcc.target/arm/neon/vaddhns16.c: Remove.\n+\t* gcc.target/arm/neon/vaddhns32.c: Remove.\n+\t* gcc.target/arm/neon/vaddhns64.c: Remove.\n+\t* gcc.target/arm/neon/vaddhnu16.c: Remove.\n+\t* gcc.target/arm/neon/vaddhnu32.c: Remove.\n+\t* gcc.target/arm/neon/vaddhnu64.c: Remove.\n+\t* gcc.target/arm/neon/vaddls16.c: Remove.\n+\t* gcc.target/arm/neon/vaddls32.c: Remove.\n+\t* gcc.target/arm/neon/vaddls8.c: Remove.\n+\t* gcc.target/arm/neon/vaddlu16.c: Remove.\n+\t* gcc.target/arm/neon/vaddlu32.c: Remove.\n+\t* gcc.target/arm/neon/vaddlu8.c: Remove.\n+\t* gcc.target/arm/neon/vadds16.c: Remove.\n+\t* gcc.target/arm/neon/vadds32.c: Remove.\n+\t* gcc.target/arm/neon/vadds64.c: Remove.\n+\t* gcc.target/arm/neon/vadds8.c: Remove.\n+\t* gcc.target/arm/neon/vaddu16.c: Remove.\n+\t* gcc.target/arm/neon/vaddu32.c: Remove.\n+\t* gcc.target/arm/neon/vaddu64.c: Remove.\n+\t* gcc.target/arm/neon/vaddu8.c: Remove.\n+\t* gcc.target/arm/neon/vaddws16.c: Remove.\n+\t* gcc.target/arm/neon/vaddws32.c: Remove.\n+\t* gcc.target/arm/neon/vaddws8.c: Remove.\n+\t* gcc.target/arm/neon/vaddwu16.c: Remove.\n+\t* gcc.target/arm/neon/vaddwu32.c: Remove.\n+\t* gcc.target/arm/neon/vaddwu8.c: Remove.\n+\t* gcc.target/arm/neon/vandQs16.c: Remove.\n+\t* gcc.target/arm/neon/vandQs32.c: Remove.\n+\t* gcc.target/arm/neon/vandQs64.c: Remove.\n+\t* gcc.target/arm/neon/vandQs8.c: Remove.\n+\t* gcc.target/arm/neon/vandQu16.c: Remove.\n+\t* gcc.target/arm/neon/vandQu32.c: Remove.\n+\t* gcc.target/arm/neon/vandQu64.c: Remove.\n+\t* gcc.target/arm/neon/vandQu8.c: Remove.\n+\t* gcc.target/arm/neon/vands16.c: Remove.\n+\t* gcc.target/arm/neon/vands32.c: Remove.\n+\t* gcc.target/arm/neon/vands64.c: Remove.\n+\t* gcc.target/arm/neon/vands8.c: Remove.\n+\t* gcc.target/arm/neon/vandu16.c: Remove.\n+\t* gcc.target/arm/neon/vandu32.c: Remove.\n+\t* gcc.target/arm/neon/vandu64.c: Remove.\n+\t* gcc.target/arm/neon/vandu8.c: Remove.\n+\t* gcc.target/arm/neon/vbicQs16.c: Remove.\n+\t* gcc.target/arm/neon/vbicQs32.c: Remove.\n+\t* gcc.target/arm/neon/vbicQs64.c: Remove.\n+\t* gcc.target/arm/neon/vbicQs8.c: Remove.\n+\t* gcc.target/arm/neon/vbicQu16.c: Remove.\n+\t* gcc.target/arm/neon/vbicQu32.c: Remove.\n+\t* gcc.target/arm/neon/vbicQu64.c: Remove.\n+\t* gcc.target/arm/neon/vbicQu8.c: Remove.\n+\t* gcc.target/arm/neon/vbics16.c: Remove.\n+\t* gcc.target/arm/neon/vbics32.c: Remove.\n+\t* gcc.target/arm/neon/vbics64.c: Remove.\n+\t* gcc.target/arm/neon/vbics8.c: Remove.\n+\t* gcc.target/arm/neon/vbicu16.c: Remove.\n+\t* gcc.target/arm/neon/vbicu32.c: Remove.\n+\t* gcc.target/arm/neon/vbicu64.c: Remove.\n+\t* gcc.target/arm/neon/vbicu8.c: Remove.\n+\t* gcc.target/arm/neon/vbslQf32.c: Remove.\n+\t* gcc.target/arm/neon/vbslQp16.c: Remove.\n+\t* gcc.target/arm/neon/vbslQp64.c: Remove.\n+\t* gcc.target/arm/neon/vbslQp8.c: Remove.\n+\t* gcc.target/arm/neon/vbslQs16.c: Remove.\n+\t* gcc.target/arm/neon/vbslQs32.c: Remove.\n+\t* gcc.target/arm/neon/vbslQs64.c: Remove.\n+\t* gcc.target/arm/neon/vbslQs8.c: Remove.\n+\t* gcc.target/arm/neon/vbslQu16.c: Remove.\n+\t* gcc.target/arm/neon/vbslQu32.c: Remove.\n+\t* gcc.target/arm/neon/vbslQu64.c: Remove.\n+\t* gcc.target/arm/neon/vbslQu8.c: Remove.\n+\t* gcc.target/arm/neon/vbslf32.c: Remove.\n+\t* gcc.target/arm/neon/vbslp16.c: Remove.\n+\t* gcc.target/arm/neon/vbslp64.c: Remove.\n+\t* gcc.target/arm/neon/vbslp8.c: Remove.\n+\t* gcc.target/arm/neon/vbsls16.c: Remove.\n+\t* gcc.target/arm/neon/vbsls32.c: Remove.\n+\t* gcc.target/arm/neon/vbsls64.c: Remove.\n+\t* gcc.target/arm/neon/vbsls8.c: Remove.\n+\t* gcc.target/arm/neon/vbslu16.c: Remove.\n+\t* gcc.target/arm/neon/vbslu32.c: Remove.\n+\t* gcc.target/arm/neon/vbslu64.c: Remove.\n+\t* gcc.target/arm/neon/vbslu8.c: Remove.\n+\t* gcc.target/arm/neon/vcageQf32.c: Remove.\n+\t* gcc.target/arm/neon/vcagef32.c: Remove.\n+\t* gcc.target/arm/neon/vcagtQf32.c: Remove.\n+\t* gcc.target/arm/neon/vcagtf32.c: Remove.\n+\t* gcc.target/arm/neon/vcaleQf32.c: Remove.\n+\t* gcc.target/arm/neon/vcalef32.c: Remove.\n+\t* gcc.target/arm/neon/vcaltQf32.c: Remove.\n+\t* gcc.target/arm/neon/vcaltf32.c: Remove.\n+\t* gcc.target/arm/neon/vceqQf32.c: Remove.\n+\t* gcc.target/arm/neon/vceqQp8.c: Remove.\n+\t* gcc.target/arm/neon/vceqQs16.c: Remove.\n+\t* gcc.target/arm/neon/vceqQs32.c: Remove.\n+\t* gcc.target/arm/neon/vceqQs8.c: Remove.\n+\t* gcc.target/arm/neon/vceqQu16.c: Remove.\n+\t* gcc.target/arm/neon/vceqQu32.c: Remove.\n+\t* gcc.target/arm/neon/vceqQu8.c: Remove.\n+\t* gcc.target/arm/neon/vceqf32.c: Remove.\n+\t* gcc.target/arm/neon/vceqp8.c: Remove.\n+\t* gcc.target/arm/neon/vceqs16.c: Remove.\n+\t* gcc.target/arm/neon/vceqs32.c: Remove.\n+\t* gcc.target/arm/neon/vceqs8.c: Remove.\n+\t* gcc.target/arm/neon/vcequ16.c: Remove.\n+\t* gcc.target/arm/neon/vcequ32.c: Remove.\n+\t* gcc.target/arm/neon/vcequ8.c: Remove.\n+\t* gcc.target/arm/neon/vcgeQf32.c: Remove.\n+\t* gcc.target/arm/neon/vcgeQs16.c: Remove.\n+\t* gcc.target/arm/neon/vcgeQs32.c: Remove.\n+\t* gcc.target/arm/neon/vcgeQs8.c: Remove.\n+\t* gcc.target/arm/neon/vcgeQu16.c: Remove.\n+\t* gcc.target/arm/neon/vcgeQu32.c: Remove.\n+\t* gcc.target/arm/neon/vcgeQu8.c: Remove.\n+\t* gcc.target/arm/neon/vcgef32.c: Remove.\n+\t* gcc.target/arm/neon/vcges16.c: Remove.\n+\t* gcc.target/arm/neon/vcges32.c: Remove.\n+\t* gcc.target/arm/neon/vcges8.c: Remove.\n+\t* gcc.target/arm/neon/vcgeu16.c: Remove.\n+\t* gcc.target/arm/neon/vcgeu32.c: Remove.\n+\t* gcc.target/arm/neon/vcgeu8.c: Remove.\n+\t* gcc.target/arm/neon/vcgtQf32.c: Remove.\n+\t* gcc.target/arm/neon/vcgtQs16.c: Remove.\n+\t* gcc.target/arm/neon/vcgtQs32.c: Remove.\n+\t* gcc.target/arm/neon/vcgtQs8.c: Remove.\n+\t* gcc.target/arm/neon/vcgtQu16.c: Remove.\n+\t* gcc.target/arm/neon/vcgtQu32.c: Remove.\n+\t* gcc.target/arm/neon/vcgtQu8.c: Remove.\n+\t* gcc.target/arm/neon/vcgtf32.c: Remove.\n+\t* gcc.target/arm/neon/vcgts16.c: Remove.\n+\t* gcc.target/arm/neon/vcgts32.c: Remove.\n+\t* gcc.target/arm/neon/vcgts8.c: Remove.\n+\t* gcc.target/arm/neon/vcgtu16.c: Remove.\n+\t* gcc.target/arm/neon/vcgtu32.c: Remove.\n+\t* gcc.target/arm/neon/vcgtu8.c: Remove.\n+\t* gcc.target/arm/neon/vcleQf32.c: Remove.\n+\t* gcc.target/arm/neon/vcleQs16.c: Remove.\n+\t* gcc.target/arm/neon/vcleQs32.c: Remove.\n+\t* gcc.target/arm/neon/vcleQs8.c: Remove.\n+\t* gcc.target/arm/neon/vcleQu16.c: Remove.\n+\t* gcc.target/arm/neon/vcleQu32.c: Remove.\n+\t* gcc.target/arm/neon/vcleQu8.c: Remove.\n+\t* gcc.target/arm/neon/vclef32.c: Remove.\n+\t* gcc.target/arm/neon/vcles16.c: Remove.\n+\t* gcc.target/arm/neon/vcles32.c: Remove.\n+\t* gcc.target/arm/neon/vcles8.c: Remove.\n+\t* gcc.target/arm/neon/vcleu16.c: Remove.\n+\t* gcc.target/arm/neon/vcleu32.c: Remove.\n+\t* gcc.target/arm/neon/vcleu8.c: Remove.\n+\t* gcc.target/arm/neon/vclsQs16.c: Remove.\n+\t* gcc.target/arm/neon/vclsQs32.c: Remove.\n+\t* gcc.target/arm/neon/vclsQs8.c: Remove.\n+\t* gcc.target/arm/neon/vclss16.c: Remove.\n+\t* gcc.target/arm/neon/vclss32.c: Remove.\n+\t* gcc.target/arm/neon/vclss8.c: Remove.\n+\t* gcc.target/arm/neon/vcltQf32.c: Remove.\n+\t* gcc.target/arm/neon/vcltQs16.c: Remove.\n+\t* gcc.target/arm/neon/vcltQs32.c: Remove.\n+\t* gcc.target/arm/neon/vcltQs8.c: Remove.\n+\t* gcc.target/arm/neon/vcltQu16.c: Remove.\n+\t* gcc.target/arm/neon/vcltQu32.c: Remove.\n+\t* gcc.target/arm/neon/vcltQu8.c: Remove.\n+\t* gcc.target/arm/neon/vcltf32.c: Remove.\n+\t* gcc.target/arm/neon/vclts16.c: Remove.\n+\t* gcc.target/arm/neon/vclts32.c: Remove.\n+\t* gcc.target/arm/neon/vclts8.c: Remove.\n+\t* gcc.target/arm/neon/vcltu16.c: Remove.\n+\t* gcc.target/arm/neon/vcltu32.c: Remove.\n+\t* gcc.target/arm/neon/vcltu8.c: Remove.\n+\t* gcc.target/arm/neon/vclzQs16.c: Remove.\n+\t* gcc.target/arm/neon/vclzQs32.c: Remove.\n+\t* gcc.target/arm/neon/vclzQs8.c: Remove.\n+\t* gcc.target/arm/neon/vclzQu16.c: Remove.\n+\t* gcc.target/arm/neon/vclzQu32.c: Remove.\n+\t* gcc.target/arm/neon/vclzQu8.c: Remove.\n+\t* gcc.target/arm/neon/vclzs16.c: Remove.\n+\t* gcc.target/arm/neon/vclzs32.c: Remove.\n+\t* gcc.target/arm/neon/vclzs8.c: Remove.\n+\t* gcc.target/arm/neon/vclzu16.c: Remove.\n+\t* gcc.target/arm/neon/vclzu32.c: Remove.\n+\t* gcc.target/arm/neon/vclzu8.c: Remove.\n+\t* gcc.target/arm/neon/vcntQp8.c: Remove.\n+\t* gcc.target/arm/neon/vcntQs8.c: Remove.\n+\t* gcc.target/arm/neon/vcntQu8.c: Remove.\n+\t* gcc.target/arm/neon/vcntp8.c: Remove.\n+\t* gcc.target/arm/neon/vcnts8.c: Remove.\n+\t* gcc.target/arm/neon/vcntu8.c: Remove.\n+\t* gcc.target/arm/neon/vcombinef32.c: Remove.\n+\t* gcc.target/arm/neon/vcombinep16.c: Remove.\n+\t* gcc.target/arm/neon/vcombinep64.c: Remove.\n+\t* gcc.target/arm/neon/vcombinep8.c: Remove.\n+\t* gcc.target/arm/neon/vcombines16.c: Remove.\n+\t* gcc.target/arm/neon/vcombines32.c: Remove.\n+\t* gcc.target/arm/neon/vcombines64.c: Remove.\n+\t* gcc.target/arm/neon/vcombines8.c: Remove.\n+\t* gcc.target/arm/neon/vcombineu16.c: Remove.\n+\t* gcc.target/arm/neon/vcombineu32.c: Remove.\n+\t* gcc.target/arm/neon/vcombineu64.c: Remove.\n+\t* gcc.target/arm/neon/vcombineu8.c: Remove.\n+\t* gcc.target/arm/neon/vcreatef32.c: Remove.\n+\t* gcc.target/arm/neon/vcreatep16.c: Remove.\n+\t* gcc.target/arm/neon/vcreatep64.c: Remove.\n+\t* gcc.target/arm/neon/vcreatep8.c: Remove.\n+\t* gcc.target/arm/neon/vcreates16.c: Remove.\n+\t* gcc.target/arm/neon/vcreates32.c: Remove.\n+\t* gcc.target/arm/neon/vcreates64.c: Remove.\n+\t* gcc.target/arm/neon/vcreates8.c: Remove.\n+\t* gcc.target/arm/neon/vcreateu16.c: Remove.\n+\t* gcc.target/arm/neon/vcreateu32.c: Remove.\n+\t* gcc.target/arm/neon/vcreateu64.c: Remove.\n+\t* gcc.target/arm/neon/vcreateu8.c: Remove.\n+\t* gcc.target/arm/neon/vcvtQ_nf32_s32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtQ_nf32_u32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtQ_ns32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtQ_nu32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtQf32_s32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtQf32_u32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtQs32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtQu32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vcvt_nf32_s32.c: Remove.\n+\t* gcc.target/arm/neon/vcvt_nf32_u32.c: Remove.\n+\t* gcc.target/arm/neon/vcvt_ns32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vcvt_nu32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtf16_f32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtf32_f16.c: Remove.\n+\t* gcc.target/arm/neon/vcvtf32_s32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtf32_u32.c: Remove.\n+\t* gcc.target/arm/neon/vcvts32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vcvtu32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_lanep64.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_lanes64.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_laneu64.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_nf32.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_np16.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_np64.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_np8.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vdupQ_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vdup_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vdup_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vdup_lanep64.c: Remove.\n+\t* gcc.target/arm/neon/vdup_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vdup_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vdup_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vdup_lanes64.c: Remove.\n+\t* gcc.target/arm/neon/vdup_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vdup_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vdup_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vdup_laneu64.c: Remove.\n+\t* gcc.target/arm/neon/vdup_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vdup_nf32.c: Remove.\n+\t* gcc.target/arm/neon/vdup_np16.c: Remove.\n+\t* gcc.target/arm/neon/vdup_np64.c: Remove.\n+\t* gcc.target/arm/neon/vdup_np8.c: Remove.\n+\t* gcc.target/arm/neon/vdup_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vdup_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vdup_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vdup_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vdup_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vdup_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vdup_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vdup_nu8.c: Remove.\n+\t* gcc.target/arm/neon/veorQs16.c: Remove.\n+\t* gcc.target/arm/neon/veorQs32.c: Remove.\n+\t* gcc.target/arm/neon/veorQs64.c: Remove.\n+\t* gcc.target/arm/neon/veorQs8.c: Remove.\n+\t* gcc.target/arm/neon/veorQu16.c: Remove.\n+\t* gcc.target/arm/neon/veorQu32.c: Remove.\n+\t* gcc.target/arm/neon/veorQu64.c: Remove.\n+\t* gcc.target/arm/neon/veorQu8.c: Remove.\n+\t* gcc.target/arm/neon/veors16.c: Remove.\n+\t* gcc.target/arm/neon/veors32.c: Remove.\n+\t* gcc.target/arm/neon/veors64.c: Remove.\n+\t* gcc.target/arm/neon/veors8.c: Remove.\n+\t* gcc.target/arm/neon/veoru16.c: Remove.\n+\t* gcc.target/arm/neon/veoru32.c: Remove.\n+\t* gcc.target/arm/neon/veoru64.c: Remove.\n+\t* gcc.target/arm/neon/veoru8.c: Remove.\n+\t* gcc.target/arm/neon/vextQf32.c: Remove.\n+\t* gcc.target/arm/neon/vextQp16.c: Remove.\n+\t* gcc.target/arm/neon/vextQp64.c: Remove.\n+\t* gcc.target/arm/neon/vextQp8.c: Remove.\n+\t* gcc.target/arm/neon/vextQs16.c: Remove.\n+\t* gcc.target/arm/neon/vextQs32.c: Remove.\n+\t* gcc.target/arm/neon/vextQs64.c: Remove.\n+\t* gcc.target/arm/neon/vextQs8.c: Remove.\n+\t* gcc.target/arm/neon/vextQu16.c: Remove.\n+\t* gcc.target/arm/neon/vextQu32.c: Remove.\n+\t* gcc.target/arm/neon/vextQu64.c: Remove.\n+\t* gcc.target/arm/neon/vextQu8.c: Remove.\n+\t* gcc.target/arm/neon/vextf32.c: Remove.\n+\t* gcc.target/arm/neon/vextp16.c: Remove.\n+\t* gcc.target/arm/neon/vextp64.c: Remove.\n+\t* gcc.target/arm/neon/vextp8.c: Remove.\n+\t* gcc.target/arm/neon/vexts16.c: Remove.\n+\t* gcc.target/arm/neon/vexts32.c: Remove.\n+\t* gcc.target/arm/neon/vexts64.c: Remove.\n+\t* gcc.target/arm/neon/vexts8.c: Remove.\n+\t* gcc.target/arm/neon/vextu16.c: Remove.\n+\t* gcc.target/arm/neon/vextu32.c: Remove.\n+\t* gcc.target/arm/neon/vextu64.c: Remove.\n+\t* gcc.target/arm/neon/vextu8.c: Remove.\n+\t* gcc.target/arm/neon/vfmaQf32.c: Remove.\n+\t* gcc.target/arm/neon/vfmaf32.c: Remove.\n+\t* gcc.target/arm/neon/vfmsQf32.c: Remove.\n+\t* gcc.target/arm/neon/vfmsf32.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_lanes64.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_laneu64.c: Remove.\n+\t* gcc.target/arm/neon/vgetQ_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vget_highf32.c: Remove.\n+\t* gcc.target/arm/neon/vget_highp16.c: Remove.\n+\t* gcc.target/arm/neon/vget_highp64.c: Remove.\n+\t* gcc.target/arm/neon/vget_highp8.c: Remove.\n+\t* gcc.target/arm/neon/vget_highs16.c: Remove.\n+\t* gcc.target/arm/neon/vget_highs32.c: Remove.\n+\t* gcc.target/arm/neon/vget_highs64.c: Remove.\n+\t* gcc.target/arm/neon/vget_highs8.c: Remove.\n+\t* gcc.target/arm/neon/vget_highu16.c: Remove.\n+\t* gcc.target/arm/neon/vget_highu32.c: Remove.\n+\t* gcc.target/arm/neon/vget_highu64.c: Remove.\n+\t* gcc.target/arm/neon/vget_highu8.c: Remove.\n+\t* gcc.target/arm/neon/vget_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vget_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vget_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vget_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vget_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vget_lanes64.c: Remove.\n+\t* gcc.target/arm/neon/vget_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vget_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vget_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vget_laneu64.c: Remove.\n+\t* gcc.target/arm/neon/vget_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vget_lowf32.c: Remove.\n+\t* gcc.target/arm/neon/vget_lowp16.c: Remove.\n+\t* gcc.target/arm/neon/vget_lowp64.c: Remove.\n+\t* gcc.target/arm/neon/vget_lowp8.c: Remove.\n+\t* gcc.target/arm/neon/vget_lows16.c: Remove.\n+\t* gcc.target/arm/neon/vget_lows32.c: Remove.\n+\t* gcc.target/arm/neon/vget_lows64.c: Remove.\n+\t* gcc.target/arm/neon/vget_lows8.c: Remove.\n+\t* gcc.target/arm/neon/vget_lowu16.c: Remove.\n+\t* gcc.target/arm/neon/vget_lowu32.c: Remove.\n+\t* gcc.target/arm/neon/vget_lowu64.c: Remove.\n+\t* gcc.target/arm/neon/vget_lowu8.c: Remove.\n+\t* gcc.target/arm/neon/vhaddQs16.c: Remove.\n+\t* gcc.target/arm/neon/vhaddQs32.c: Remove.\n+\t* gcc.target/arm/neon/vhaddQs8.c: Remove.\n+\t* gcc.target/arm/neon/vhaddQu16.c: Remove.\n+\t* gcc.target/arm/neon/vhaddQu32.c: Remove.\n+\t* gcc.target/arm/neon/vhaddQu8.c: Remove.\n+\t* gcc.target/arm/neon/vhadds16.c: Remove.\n+\t* gcc.target/arm/neon/vhadds32.c: Remove.\n+\t* gcc.target/arm/neon/vhadds8.c: Remove.\n+\t* gcc.target/arm/neon/vhaddu16.c: Remove.\n+\t* gcc.target/arm/neon/vhaddu32.c: Remove.\n+\t* gcc.target/arm/neon/vhaddu8.c: Remove.\n+\t* gcc.target/arm/neon/vhsubQs16.c: Remove.\n+\t* gcc.target/arm/neon/vhsubQs32.c: Remove.\n+\t* gcc.target/arm/neon/vhsubQs8.c: Remove.\n+\t* gcc.target/arm/neon/vhsubQu16.c: Remove.\n+\t* gcc.target/arm/neon/vhsubQu32.c: Remove.\n+\t* gcc.target/arm/neon/vhsubQu8.c: Remove.\n+\t* gcc.target/arm/neon/vhsubs16.c: Remove.\n+\t* gcc.target/arm/neon/vhsubs32.c: Remove.\n+\t* gcc.target/arm/neon/vhsubs8.c: Remove.\n+\t* gcc.target/arm/neon/vhsubu16.c: Remove.\n+\t* gcc.target/arm/neon/vhsubu32.c: Remove.\n+\t* gcc.target/arm/neon/vhsubu8.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dupf32.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dupp16.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dupp64.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dupp8.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dups16.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dups32.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dups64.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dups8.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dupu16.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dupu32.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dupu64.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_dupu8.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_lanep64.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_lanes64.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_laneu64.c: Remove.\n+\t* gcc.target/arm/neon/vld1Q_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qf32.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qp16.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qp64.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qs16.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qs32.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qs64.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qu16.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qu32.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qu64.c: Remove.\n+\t* gcc.target/arm/neon/vld1Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dupf32.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dupp16.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dupp64.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dupp8.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dups16.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dups32.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dups64.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dups8.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dupu16.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dupu32.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dupu64.c: Remove.\n+\t* gcc.target/arm/neon/vld1_dupu8.c: Remove.\n+\t* gcc.target/arm/neon/vld1_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vld1_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vld1_lanep64.c: Remove.\n+\t* gcc.target/arm/neon/vld1_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vld1_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vld1_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vld1_lanes64.c: Remove.\n+\t* gcc.target/arm/neon/vld1_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vld1_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vld1_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vld1_laneu64.c: Remove.\n+\t* gcc.target/arm/neon/vld1_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vld1f32.c: Remove.\n+\t* gcc.target/arm/neon/vld1p16.c: Remove.\n+\t* gcc.target/arm/neon/vld1p64.c: Remove.\n+\t* gcc.target/arm/neon/vld1p8.c: Remove.\n+\t* gcc.target/arm/neon/vld1s16.c: Remove.\n+\t* gcc.target/arm/neon/vld1s32.c: Remove.\n+\t* gcc.target/arm/neon/vld1s64.c: Remove.\n+\t* gcc.target/arm/neon/vld1s8.c: Remove.\n+\t* gcc.target/arm/neon/vld1u16.c: Remove.\n+\t* gcc.target/arm/neon/vld1u32.c: Remove.\n+\t* gcc.target/arm/neon/vld1u64.c: Remove.\n+\t* gcc.target/arm/neon/vld1u8.c: Remove.\n+\t* gcc.target/arm/neon/vld2Q_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vld2Q_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vld2Q_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vld2Q_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vld2Q_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vld2Q_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vld2Qf32.c: Remove.\n+\t* gcc.target/arm/neon/vld2Qp16.c: Remove.\n+\t* gcc.target/arm/neon/vld2Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vld2Qs16.c: Remove.\n+\t* gcc.target/arm/neon/vld2Qs32.c: Remove.\n+\t* gcc.target/arm/neon/vld2Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vld2Qu16.c: Remove.\n+\t* gcc.target/arm/neon/vld2Qu32.c: Remove.\n+\t* gcc.target/arm/neon/vld2Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dupf32.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dupp16.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dupp64.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dupp8.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dups16.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dups32.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dups64.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dups8.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dupu16.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dupu32.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dupu64.c: Remove.\n+\t* gcc.target/arm/neon/vld2_dupu8.c: Remove.\n+\t* gcc.target/arm/neon/vld2_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vld2_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vld2_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vld2_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vld2_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vld2_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vld2_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vld2_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vld2_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vld2f32.c: Remove.\n+\t* gcc.target/arm/neon/vld2p16.c: Remove.\n+\t* gcc.target/arm/neon/vld2p64.c: Remove.\n+\t* gcc.target/arm/neon/vld2p8.c: Remove.\n+\t* gcc.target/arm/neon/vld2s16.c: Remove.\n+\t* gcc.target/arm/neon/vld2s32.c: Remove.\n+\t* gcc.target/arm/neon/vld2s64.c: Remove.\n+\t* gcc.target/arm/neon/vld2s8.c: Remove.\n+\t* gcc.target/arm/neon/vld2u16.c: Remove.\n+\t* gcc.target/arm/neon/vld2u32.c: Remove.\n+\t* gcc.target/arm/neon/vld2u64.c: Remove.\n+\t* gcc.target/arm/neon/vld2u8.c: Remove.\n+\t* gcc.target/arm/neon/vld3Q_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vld3Q_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vld3Q_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vld3Q_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vld3Q_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vld3Q_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vld3Qf32.c: Remove.\n+\t* gcc.target/arm/neon/vld3Qp16.c: Remove.\n+\t* gcc.target/arm/neon/vld3Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vld3Qs16.c: Remove.\n+\t* gcc.target/arm/neon/vld3Qs32.c: Remove.\n+\t* gcc.target/arm/neon/vld3Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vld3Qu16.c: Remove.\n+\t* gcc.target/arm/neon/vld3Qu32.c: Remove.\n+\t* gcc.target/arm/neon/vld3Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dupf32.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dupp16.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dupp64.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dupp8.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dups16.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dups32.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dups64.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dups8.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dupu16.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dupu32.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dupu64.c: Remove.\n+\t* gcc.target/arm/neon/vld3_dupu8.c: Remove.\n+\t* gcc.target/arm/neon/vld3_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vld3_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vld3_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vld3_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vld3_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vld3_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vld3_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vld3_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vld3_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vld3f32.c: Remove.\n+\t* gcc.target/arm/neon/vld3p16.c: Remove.\n+\t* gcc.target/arm/neon/vld3p64.c: Remove.\n+\t* gcc.target/arm/neon/vld3p8.c: Remove.\n+\t* gcc.target/arm/neon/vld3s16.c: Remove.\n+\t* gcc.target/arm/neon/vld3s32.c: Remove.\n+\t* gcc.target/arm/neon/vld3s64.c: Remove.\n+\t* gcc.target/arm/neon/vld3s8.c: Remove.\n+\t* gcc.target/arm/neon/vld3u16.c: Remove.\n+\t* gcc.target/arm/neon/vld3u32.c: Remove.\n+\t* gcc.target/arm/neon/vld3u64.c: Remove.\n+\t* gcc.target/arm/neon/vld3u8.c: Remove.\n+\t* gcc.target/arm/neon/vld4Q_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vld4Q_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vld4Q_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vld4Q_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vld4Q_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vld4Q_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vld4Qf32.c: Remove.\n+\t* gcc.target/arm/neon/vld4Qp16.c: Remove.\n+\t* gcc.target/arm/neon/vld4Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vld4Qs16.c: Remove.\n+\t* gcc.target/arm/neon/vld4Qs32.c: Remove.\n+\t* gcc.target/arm/neon/vld4Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vld4Qu16.c: Remove.\n+\t* gcc.target/arm/neon/vld4Qu32.c: Remove.\n+\t* gcc.target/arm/neon/vld4Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dupf32.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dupp16.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dupp64.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dupp8.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dups16.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dups32.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dups64.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dups8.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dupu16.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dupu32.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dupu64.c: Remove.\n+\t* gcc.target/arm/neon/vld4_dupu8.c: Remove.\n+\t* gcc.target/arm/neon/vld4_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vld4_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vld4_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vld4_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vld4_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vld4_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vld4_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vld4_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vld4_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vld4f32.c: Remove.\n+\t* gcc.target/arm/neon/vld4p16.c: Remove.\n+\t* gcc.target/arm/neon/vld4p64.c: Remove.\n+\t* gcc.target/arm/neon/vld4p8.c: Remove.\n+\t* gcc.target/arm/neon/vld4s16.c: Remove.\n+\t* gcc.target/arm/neon/vld4s32.c: Remove.\n+\t* gcc.target/arm/neon/vld4s64.c: Remove.\n+\t* gcc.target/arm/neon/vld4s8.c: Remove.\n+\t* gcc.target/arm/neon/vld4u16.c: Remove.\n+\t* gcc.target/arm/neon/vld4u32.c: Remove.\n+\t* gcc.target/arm/neon/vld4u64.c: Remove.\n+\t* gcc.target/arm/neon/vld4u8.c: Remove.\n+\t* gcc.target/arm/neon/vmaxQf32.c: Remove.\n+\t* gcc.target/arm/neon/vmaxQs16.c: Remove.\n+\t* gcc.target/arm/neon/vmaxQs32.c: Remove.\n+\t* gcc.target/arm/neon/vmaxQs8.c: Remove.\n+\t* gcc.target/arm/neon/vmaxQu16.c: Remove.\n+\t* gcc.target/arm/neon/vmaxQu32.c: Remove.\n+\t* gcc.target/arm/neon/vmaxQu8.c: Remove.\n+\t* gcc.target/arm/neon/vmaxf32.c: Remove.\n+\t* gcc.target/arm/neon/vmaxs16.c: Remove.\n+\t* gcc.target/arm/neon/vmaxs32.c: Remove.\n+\t* gcc.target/arm/neon/vmaxs8.c: Remove.\n+\t* gcc.target/arm/neon/vmaxu16.c: Remove.\n+\t* gcc.target/arm/neon/vmaxu32.c: Remove.\n+\t* gcc.target/arm/neon/vmaxu8.c: Remove.\n+\t* gcc.target/arm/neon/vminQf32.c: Remove.\n+\t* gcc.target/arm/neon/vminQs16.c: Remove.\n+\t* gcc.target/arm/neon/vminQs32.c: Remove.\n+\t* gcc.target/arm/neon/vminQs8.c: Remove.\n+\t* gcc.target/arm/neon/vminQu16.c: Remove.\n+\t* gcc.target/arm/neon/vminQu32.c: Remove.\n+\t* gcc.target/arm/neon/vminQu8.c: Remove.\n+\t* gcc.target/arm/neon/vminf32.c: Remove.\n+\t* gcc.target/arm/neon/vmins16.c: Remove.\n+\t* gcc.target/arm/neon/vmins32.c: Remove.\n+\t* gcc.target/arm/neon/vmins8.c: Remove.\n+\t* gcc.target/arm/neon/vminu16.c: Remove.\n+\t* gcc.target/arm/neon/vminu32.c: Remove.\n+\t* gcc.target/arm/neon/vminu8.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQ_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQ_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQ_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQ_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQ_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQ_nf32.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQf32.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQs16.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQs32.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQs8.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlaQu8.c: Remove.\n+\t* gcc.target/arm/neon/vmla_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vmla_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vmla_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vmla_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vmla_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vmla_nf32.c: Remove.\n+\t* gcc.target/arm/neon/vmla_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmla_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmla_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmla_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlaf32.c: Remove.\n+\t* gcc.target/arm/neon/vmlal_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vmlal_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vmlal_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlal_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlal_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmlal_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmlal_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlal_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlals16.c: Remove.\n+\t* gcc.target/arm/neon/vmlals32.c: Remove.\n+\t* gcc.target/arm/neon/vmlals8.c: Remove.\n+\t* gcc.target/arm/neon/vmlalu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlalu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlalu8.c: Remove.\n+\t* gcc.target/arm/neon/vmlas16.c: Remove.\n+\t* gcc.target/arm/neon/vmlas32.c: Remove.\n+\t* gcc.target/arm/neon/vmlas8.c: Remove.\n+\t* gcc.target/arm/neon/vmlau16.c: Remove.\n+\t* gcc.target/arm/neon/vmlau32.c: Remove.\n+\t* gcc.target/arm/neon/vmlau8.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQ_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQ_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQ_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQ_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQ_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQ_nf32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQf32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQs16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQs32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQs8.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsQu8.c: Remove.\n+\t* gcc.target/arm/neon/vmls_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vmls_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vmls_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vmls_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vmls_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vmls_nf32.c: Remove.\n+\t* gcc.target/arm/neon/vmls_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmls_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmls_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmls_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsf32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsl_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsl_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsl_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsl_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsl_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsl_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsl_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsl_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsls16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsls32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsls8.c: Remove.\n+\t* gcc.target/arm/neon/vmlslu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlslu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlslu8.c: Remove.\n+\t* gcc.target/arm/neon/vmlss16.c: Remove.\n+\t* gcc.target/arm/neon/vmlss32.c: Remove.\n+\t* gcc.target/arm/neon/vmlss8.c: Remove.\n+\t* gcc.target/arm/neon/vmlsu16.c: Remove.\n+\t* gcc.target/arm/neon/vmlsu32.c: Remove.\n+\t* gcc.target/arm/neon/vmlsu8.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_nf32.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_np16.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_np8.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vmovQ_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vmov_nf32.c: Remove.\n+\t* gcc.target/arm/neon/vmov_np16.c: Remove.\n+\t* gcc.target/arm/neon/vmov_np8.c: Remove.\n+\t* gcc.target/arm/neon/vmov_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmov_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmov_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vmov_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vmov_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmov_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmov_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vmov_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vmovls16.c: Remove.\n+\t* gcc.target/arm/neon/vmovls32.c: Remove.\n+\t* gcc.target/arm/neon/vmovls8.c: Remove.\n+\t* gcc.target/arm/neon/vmovlu16.c: Remove.\n+\t* gcc.target/arm/neon/vmovlu32.c: Remove.\n+\t* gcc.target/arm/neon/vmovlu8.c: Remove.\n+\t* gcc.target/arm/neon/vmovns16.c: Remove.\n+\t* gcc.target/arm/neon/vmovns32.c: Remove.\n+\t* gcc.target/arm/neon/vmovns64.c: Remove.\n+\t* gcc.target/arm/neon/vmovnu16.c: Remove.\n+\t* gcc.target/arm/neon/vmovnu32.c: Remove.\n+\t* gcc.target/arm/neon/vmovnu64.c: Remove.\n+\t* gcc.target/arm/neon/vmulQ_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vmulQ_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vmulQ_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vmulQ_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vmulQ_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vmulQ_nf32.c: Remove.\n+\t* gcc.target/arm/neon/vmulQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmulQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmulQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmulQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmulQf32.c: Remove.\n+\t* gcc.target/arm/neon/vmulQp8.c: Remove.\n+\t* gcc.target/arm/neon/vmulQs16.c: Remove.\n+\t* gcc.target/arm/neon/vmulQs32.c: Remove.\n+\t* gcc.target/arm/neon/vmulQs8.c: Remove.\n+\t* gcc.target/arm/neon/vmulQu16.c: Remove.\n+\t* gcc.target/arm/neon/vmulQu32.c: Remove.\n+\t* gcc.target/arm/neon/vmulQu8.c: Remove.\n+\t* gcc.target/arm/neon/vmul_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vmul_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vmul_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vmul_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vmul_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vmul_nf32.c: Remove.\n+\t* gcc.target/arm/neon/vmul_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmul_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmul_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmul_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmulf32.c: Remove.\n+\t* gcc.target/arm/neon/vmull_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vmull_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vmull_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vmull_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vmull_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vmull_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vmull_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vmull_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vmullp8.c: Remove.\n+\t* gcc.target/arm/neon/vmulls16.c: Remove.\n+\t* gcc.target/arm/neon/vmulls32.c: Remove.\n+\t* gcc.target/arm/neon/vmulls8.c: Remove.\n+\t* gcc.target/arm/neon/vmullu16.c: Remove.\n+\t* gcc.target/arm/neon/vmullu32.c: Remove.\n+\t* gcc.target/arm/neon/vmullu8.c: Remove.\n+\t* gcc.target/arm/neon/vmulp8.c: Remove.\n+\t* gcc.target/arm/neon/vmuls16.c: Remove.\n+\t* gcc.target/arm/neon/vmuls32.c: Remove.\n+\t* gcc.target/arm/neon/vmuls8.c: Remove.\n+\t* gcc.target/arm/neon/vmulu16.c: Remove.\n+\t* gcc.target/arm/neon/vmulu32.c: Remove.\n+\t* gcc.target/arm/neon/vmulu8.c: Remove.\n+\t* gcc.target/arm/neon/vmvnQp8.c: Remove.\n+\t* gcc.target/arm/neon/vmvnQs16.c: Remove.\n+\t* gcc.target/arm/neon/vmvnQs32.c: Remove.\n+\t* gcc.target/arm/neon/vmvnQs8.c: Remove.\n+\t* gcc.target/arm/neon/vmvnQu16.c: Remove.\n+\t* gcc.target/arm/neon/vmvnQu32.c: Remove.\n+\t* gcc.target/arm/neon/vmvnQu8.c: Remove.\n+\t* gcc.target/arm/neon/vmvnp8.c: Remove.\n+\t* gcc.target/arm/neon/vmvns16.c: Remove.\n+\t* gcc.target/arm/neon/vmvns32.c: Remove.\n+\t* gcc.target/arm/neon/vmvns8.c: Remove.\n+\t* gcc.target/arm/neon/vmvnu16.c: Remove.\n+\t* gcc.target/arm/neon/vmvnu32.c: Remove.\n+\t* gcc.target/arm/neon/vmvnu8.c: Remove.\n+\t* gcc.target/arm/neon/vnegQf32.c: Remove.\n+\t* gcc.target/arm/neon/vnegQs16.c: Remove.\n+\t* gcc.target/arm/neon/vnegQs32.c: Remove.\n+\t* gcc.target/arm/neon/vnegQs8.c: Remove.\n+\t* gcc.target/arm/neon/vnegf32.c: Remove.\n+\t* gcc.target/arm/neon/vnegs16.c: Remove.\n+\t* gcc.target/arm/neon/vnegs32.c: Remove.\n+\t* gcc.target/arm/neon/vnegs8.c: Remove.\n+\t* gcc.target/arm/neon/vornQs16.c: Remove.\n+\t* gcc.target/arm/neon/vornQs32.c: Remove.\n+\t* gcc.target/arm/neon/vornQs64.c: Remove.\n+\t* gcc.target/arm/neon/vornQs8.c: Remove.\n+\t* gcc.target/arm/neon/vornQu16.c: Remove.\n+\t* gcc.target/arm/neon/vornQu32.c: Remove.\n+\t* gcc.target/arm/neon/vornQu64.c: Remove.\n+\t* gcc.target/arm/neon/vornQu8.c: Remove.\n+\t* gcc.target/arm/neon/vorns16.c: Remove.\n+\t* gcc.target/arm/neon/vorns32.c: Remove.\n+\t* gcc.target/arm/neon/vorns64.c: Remove.\n+\t* gcc.target/arm/neon/vorns8.c: Remove.\n+\t* gcc.target/arm/neon/vornu16.c: Remove.\n+\t* gcc.target/arm/neon/vornu32.c: Remove.\n+\t* gcc.target/arm/neon/vornu64.c: Remove.\n+\t* gcc.target/arm/neon/vornu8.c: Remove.\n+\t* gcc.target/arm/neon/vorrQs16.c: Remove.\n+\t* gcc.target/arm/neon/vorrQs32.c: Remove.\n+\t* gcc.target/arm/neon/vorrQs64.c: Remove.\n+\t* gcc.target/arm/neon/vorrQs8.c: Remove.\n+\t* gcc.target/arm/neon/vorrQu16.c: Remove.\n+\t* gcc.target/arm/neon/vorrQu32.c: Remove.\n+\t* gcc.target/arm/neon/vorrQu64.c: Remove.\n+\t* gcc.target/arm/neon/vorrQu8.c: Remove.\n+\t* gcc.target/arm/neon/vorrs16.c: Remove.\n+\t* gcc.target/arm/neon/vorrs32.c: Remove.\n+\t* gcc.target/arm/neon/vorrs64.c: Remove.\n+\t* gcc.target/arm/neon/vorrs8.c: Remove.\n+\t* gcc.target/arm/neon/vorru16.c: Remove.\n+\t* gcc.target/arm/neon/vorru32.c: Remove.\n+\t* gcc.target/arm/neon/vorru64.c: Remove.\n+\t* gcc.target/arm/neon/vorru8.c: Remove.\n+\t* gcc.target/arm/neon/vpadalQs16.c: Remove.\n+\t* gcc.target/arm/neon/vpadalQs32.c: Remove.\n+\t* gcc.target/arm/neon/vpadalQs8.c: Remove.\n+\t* gcc.target/arm/neon/vpadalQu16.c: Remove.\n+\t* gcc.target/arm/neon/vpadalQu32.c: Remove.\n+\t* gcc.target/arm/neon/vpadalQu8.c: Remove.\n+\t* gcc.target/arm/neon/vpadals16.c: Remove.\n+\t* gcc.target/arm/neon/vpadals32.c: Remove.\n+\t* gcc.target/arm/neon/vpadals8.c: Remove.\n+\t* gcc.target/arm/neon/vpadalu16.c: Remove.\n+\t* gcc.target/arm/neon/vpadalu32.c: Remove.\n+\t* gcc.target/arm/neon/vpadalu8.c: Remove.\n+\t* gcc.target/arm/neon/vpaddf32.c: Remove.\n+\t* gcc.target/arm/neon/vpaddlQs16.c: Remove.\n+\t* gcc.target/arm/neon/vpaddlQs32.c: Remove.\n+\t* gcc.target/arm/neon/vpaddlQs8.c: Remove.\n+\t* gcc.target/arm/neon/vpaddlQu16.c: Remove.\n+\t* gcc.target/arm/neon/vpaddlQu32.c: Remove.\n+\t* gcc.target/arm/neon/vpaddlQu8.c: Remove.\n+\t* gcc.target/arm/neon/vpaddls16.c: Remove.\n+\t* gcc.target/arm/neon/vpaddls32.c: Remove.\n+\t* gcc.target/arm/neon/vpaddls8.c: Remove.\n+\t* gcc.target/arm/neon/vpaddlu16.c: Remove.\n+\t* gcc.target/arm/neon/vpaddlu32.c: Remove.\n+\t* gcc.target/arm/neon/vpaddlu8.c: Remove.\n+\t* gcc.target/arm/neon/vpadds16.c: Remove.\n+\t* gcc.target/arm/neon/vpadds32.c: Remove.\n+\t* gcc.target/arm/neon/vpadds8.c: Remove.\n+\t* gcc.target/arm/neon/vpaddu16.c: Remove.\n+\t* gcc.target/arm/neon/vpaddu32.c: Remove.\n+\t* gcc.target/arm/neon/vpaddu8.c: Remove.\n+\t* gcc.target/arm/neon/vpmaxf32.c: Remove.\n+\t* gcc.target/arm/neon/vpmaxs16.c: Remove.\n+\t* gcc.target/arm/neon/vpmaxs32.c: Remove.\n+\t* gcc.target/arm/neon/vpmaxs8.c: Remove.\n+\t* gcc.target/arm/neon/vpmaxu16.c: Remove.\n+\t* gcc.target/arm/neon/vpmaxu32.c: Remove.\n+\t* gcc.target/arm/neon/vpmaxu8.c: Remove.\n+\t* gcc.target/arm/neon/vpminf32.c: Remove.\n+\t* gcc.target/arm/neon/vpmins16.c: Remove.\n+\t* gcc.target/arm/neon/vpmins32.c: Remove.\n+\t* gcc.target/arm/neon/vpmins8.c: Remove.\n+\t* gcc.target/arm/neon/vpminu16.c: Remove.\n+\t* gcc.target/arm/neon/vpminu32.c: Remove.\n+\t* gcc.target/arm/neon/vpminu8.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulhQ_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulhQ_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulhQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulhQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulhQs16.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulhQs32.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulh_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulh_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulh_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulh_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulhs16.c: Remove.\n+\t* gcc.target/arm/neon/vqRdmulhs32.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlQs16.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlQs32.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlQs64.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlQs8.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlQu16.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlQu32.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlQu64.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlQu8.c: Remove.\n+\t* gcc.target/arm/neon/vqRshls16.c: Remove.\n+\t* gcc.target/arm/neon/vqRshls32.c: Remove.\n+\t* gcc.target/arm/neon/vqRshls64.c: Remove.\n+\t* gcc.target/arm/neon/vqRshls8.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlu16.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlu32.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlu64.c: Remove.\n+\t* gcc.target/arm/neon/vqRshlu8.c: Remove.\n+\t* gcc.target/arm/neon/vqRshrn_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqRshrn_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqRshrn_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vqRshrn_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vqRshrn_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vqRshrn_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vqRshrun_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqRshrun_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqRshrun_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vqabsQs16.c: Remove.\n+\t* gcc.target/arm/neon/vqabsQs32.c: Remove.\n+\t* gcc.target/arm/neon/vqabsQs8.c: Remove.\n+\t* gcc.target/arm/neon/vqabss16.c: Remove.\n+\t* gcc.target/arm/neon/vqabss32.c: Remove.\n+\t* gcc.target/arm/neon/vqabss8.c: Remove.\n+\t* gcc.target/arm/neon/vqaddQs16.c: Remove.\n+\t* gcc.target/arm/neon/vqaddQs32.c: Remove.\n+\t* gcc.target/arm/neon/vqaddQs64.c: Remove.\n+\t* gcc.target/arm/neon/vqaddQs8.c: Remove.\n+\t* gcc.target/arm/neon/vqaddQu16.c: Remove.\n+\t* gcc.target/arm/neon/vqaddQu32.c: Remove.\n+\t* gcc.target/arm/neon/vqaddQu64.c: Remove.\n+\t* gcc.target/arm/neon/vqaddQu8.c: Remove.\n+\t* gcc.target/arm/neon/vqadds16.c: Remove.\n+\t* gcc.target/arm/neon/vqadds32.c: Remove.\n+\t* gcc.target/arm/neon/vqadds64.c: Remove.\n+\t* gcc.target/arm/neon/vqadds8.c: Remove.\n+\t* gcc.target/arm/neon/vqaddu16.c: Remove.\n+\t* gcc.target/arm/neon/vqaddu32.c: Remove.\n+\t* gcc.target/arm/neon/vqaddu64.c: Remove.\n+\t* gcc.target/arm/neon/vqaddu8.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlal_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlal_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlal_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlal_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlals16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlals32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlsl_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlsl_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlsl_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlsl_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlsls16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmlsls32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulhQ_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulhQ_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulhQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulhQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulhQs16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulhQs32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulh_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulh_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulh_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulh_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulhs16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulhs32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmull_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmull_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmull_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmull_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulls16.c: Remove.\n+\t* gcc.target/arm/neon/vqdmulls32.c: Remove.\n+\t* gcc.target/arm/neon/vqmovns16.c: Remove.\n+\t* gcc.target/arm/neon/vqmovns32.c: Remove.\n+\t* gcc.target/arm/neon/vqmovns64.c: Remove.\n+\t* gcc.target/arm/neon/vqmovnu16.c: Remove.\n+\t* gcc.target/arm/neon/vqmovnu32.c: Remove.\n+\t* gcc.target/arm/neon/vqmovnu64.c: Remove.\n+\t* gcc.target/arm/neon/vqmovuns16.c: Remove.\n+\t* gcc.target/arm/neon/vqmovuns32.c: Remove.\n+\t* gcc.target/arm/neon/vqmovuns64.c: Remove.\n+\t* gcc.target/arm/neon/vqnegQs16.c: Remove.\n+\t* gcc.target/arm/neon/vqnegQs32.c: Remove.\n+\t* gcc.target/arm/neon/vqnegQs8.c: Remove.\n+\t* gcc.target/arm/neon/vqnegs16.c: Remove.\n+\t* gcc.target/arm/neon/vqnegs32.c: Remove.\n+\t* gcc.target/arm/neon/vqnegs8.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQ_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQ_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQs16.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQs32.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQs64.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQs8.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQu16.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQu32.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQu64.c: Remove.\n+\t* gcc.target/arm/neon/vqshlQu8.c: Remove.\n+\t* gcc.target/arm/neon/vqshl_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqshl_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqshl_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vqshl_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vqshl_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vqshl_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vqshl_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vqshl_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vqshls16.c: Remove.\n+\t* gcc.target/arm/neon/vqshls32.c: Remove.\n+\t* gcc.target/arm/neon/vqshls64.c: Remove.\n+\t* gcc.target/arm/neon/vqshls8.c: Remove.\n+\t* gcc.target/arm/neon/vqshlu16.c: Remove.\n+\t* gcc.target/arm/neon/vqshlu32.c: Remove.\n+\t* gcc.target/arm/neon/vqshlu64.c: Remove.\n+\t* gcc.target/arm/neon/vqshlu8.c: Remove.\n+\t* gcc.target/arm/neon/vqshluQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqshluQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqshluQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vqshluQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vqshlu_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqshlu_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqshlu_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vqshlu_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vqshrn_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqshrn_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqshrn_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vqshrn_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vqshrn_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vqshrn_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vqshrun_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vqshrun_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vqshrun_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vqsubQs16.c: Remove.\n+\t* gcc.target/arm/neon/vqsubQs32.c: Remove.\n+\t* gcc.target/arm/neon/vqsubQs64.c: Remove.\n+\t* gcc.target/arm/neon/vqsubQs8.c: Remove.\n+\t* gcc.target/arm/neon/vqsubQu16.c: Remove.\n+\t* gcc.target/arm/neon/vqsubQu32.c: Remove.\n+\t* gcc.target/arm/neon/vqsubQu64.c: Remove.\n+\t* gcc.target/arm/neon/vqsubQu8.c: Remove.\n+\t* gcc.target/arm/neon/vqsubs16.c: Remove.\n+\t* gcc.target/arm/neon/vqsubs32.c: Remove.\n+\t* gcc.target/arm/neon/vqsubs64.c: Remove.\n+\t* gcc.target/arm/neon/vqsubs8.c: Remove.\n+\t* gcc.target/arm/neon/vqsubu16.c: Remove.\n+\t* gcc.target/arm/neon/vqsubu32.c: Remove.\n+\t* gcc.target/arm/neon/vqsubu64.c: Remove.\n+\t* gcc.target/arm/neon/vqsubu8.c: Remove.\n+\t* gcc.target/arm/neon/vrecpeQf32.c: Remove.\n+\t* gcc.target/arm/neon/vrecpeQu32.c: Remove.\n+\t* gcc.target/arm/neon/vrecpef32.c: Remove.\n+\t* gcc.target/arm/neon/vrecpeu32.c: Remove.\n+\t* gcc.target/arm/neon/vrecpsQf32.c: Remove.\n+\t* gcc.target/arm/neon/vrecpsf32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQf32_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp128_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp16_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp64_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQp8_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs16_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs32_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs64_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQs8_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu16_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu32_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu64_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_p128.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretQu8_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretf32_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp16_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp64_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretp8_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets16_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets32_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets64_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterprets8_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu16_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_u64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu32_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu64_u8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_f32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_p16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_p64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_p8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_s16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_s32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_s64.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_s8.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_u16.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_u32.c: Remove.\n+\t* gcc.target/arm/neon/vreinterpretu8_u64.c: Remove.\n+\t* gcc.target/arm/neon/vrev16Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vrev16Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vrev16Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vrev16p8.c: Remove.\n+\t* gcc.target/arm/neon/vrev16s8.c: Remove.\n+\t* gcc.target/arm/neon/vrev16u8.c: Remove.\n+\t* gcc.target/arm/neon/vrev32Qp16.c: Remove.\n+\t* gcc.target/arm/neon/vrev32Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vrev32Qs16.c: Remove.\n+\t* gcc.target/arm/neon/vrev32Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vrev32Qu16.c: Remove.\n+\t* gcc.target/arm/neon/vrev32Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vrev32p16.c: Remove.\n+\t* gcc.target/arm/neon/vrev32p8.c: Remove.\n+\t* gcc.target/arm/neon/vrev32s16.c: Remove.\n+\t* gcc.target/arm/neon/vrev32s8.c: Remove.\n+\t* gcc.target/arm/neon/vrev32u16.c: Remove.\n+\t* gcc.target/arm/neon/vrev32u8.c: Remove.\n+\t* gcc.target/arm/neon/vrev64Qf32.c: Remove.\n+\t* gcc.target/arm/neon/vrev64Qp16.c: Remove.\n+\t* gcc.target/arm/neon/vrev64Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vrev64Qs16.c: Remove.\n+\t* gcc.target/arm/neon/vrev64Qs32.c: Remove.\n+\t* gcc.target/arm/neon/vrev64Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vrev64Qu16.c: Remove.\n+\t* gcc.target/arm/neon/vrev64Qu32.c: Remove.\n+\t* gcc.target/arm/neon/vrev64Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vrev64f32.c: Remove.\n+\t* gcc.target/arm/neon/vrev64p16.c: Remove.\n+\t* gcc.target/arm/neon/vrev64p8.c: Remove.\n+\t* gcc.target/arm/neon/vrev64s16.c: Remove.\n+\t* gcc.target/arm/neon/vrev64s32.c: Remove.\n+\t* gcc.target/arm/neon/vrev64s8.c: Remove.\n+\t* gcc.target/arm/neon/vrev64u16.c: Remove.\n+\t* gcc.target/arm/neon/vrev64u32.c: Remove.\n+\t* gcc.target/arm/neon/vrev64u8.c: Remove.\n+\t* gcc.target/arm/neon/vrndaf32.c: Remove.\n+\t* gcc.target/arm/neon/vrndaqf32.c: Remove.\n+\t* gcc.target/arm/neon/vrndf32.c: Remove.\n+\t* gcc.target/arm/neon/vrndmf32.c: Remove.\n+\t* gcc.target/arm/neon/vrndmqf32.c: Remove.\n+\t* gcc.target/arm/neon/vrndnf32.c: Remove.\n+\t* gcc.target/arm/neon/vrndnqf32.c: Remove.\n+\t* gcc.target/arm/neon/vrndpf32.c: Remove.\n+\t* gcc.target/arm/neon/vrndpqf32.c: Remove.\n+\t* gcc.target/arm/neon/vrndqf32.c: Remove.\n+\t* gcc.target/arm/neon/vrsqrteQf32.c: Remove.\n+\t* gcc.target/arm/neon/vrsqrteQu32.c: Remove.\n+\t* gcc.target/arm/neon/vrsqrtef32.c: Remove.\n+\t* gcc.target/arm/neon/vrsqrteu32.c: Remove.\n+\t* gcc.target/arm/neon/vrsqrtsQf32.c: Remove.\n+\t* gcc.target/arm/neon/vrsqrtsf32.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_lanes64.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_laneu64.c: Remove.\n+\t* gcc.target/arm/neon/vsetQ_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vset_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vset_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vset_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vset_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vset_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vset_lanes64.c: Remove.\n+\t* gcc.target/arm/neon/vset_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vset_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vset_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vset_laneu64.c: Remove.\n+\t* gcc.target/arm/neon/vset_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vshlQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vshlQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vshlQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vshlQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vshlQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vshlQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vshlQ_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vshlQ_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vshlQs16.c: Remove.\n+\t* gcc.target/arm/neon/vshlQs32.c: Remove.\n+\t* gcc.target/arm/neon/vshlQs64.c: Remove.\n+\t* gcc.target/arm/neon/vshlQs8.c: Remove.\n+\t* gcc.target/arm/neon/vshlQu16.c: Remove.\n+\t* gcc.target/arm/neon/vshlQu32.c: Remove.\n+\t* gcc.target/arm/neon/vshlQu64.c: Remove.\n+\t* gcc.target/arm/neon/vshlQu8.c: Remove.\n+\t* gcc.target/arm/neon/vshl_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vshl_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vshl_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vshl_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vshl_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vshl_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vshl_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vshl_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vshll_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vshll_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vshll_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vshll_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vshll_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vshll_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vshls16.c: Remove.\n+\t* gcc.target/arm/neon/vshls32.c: Remove.\n+\t* gcc.target/arm/neon/vshls64.c: Remove.\n+\t* gcc.target/arm/neon/vshls8.c: Remove.\n+\t* gcc.target/arm/neon/vshlu16.c: Remove.\n+\t* gcc.target/arm/neon/vshlu32.c: Remove.\n+\t* gcc.target/arm/neon/vshlu64.c: Remove.\n+\t* gcc.target/arm/neon/vshlu8.c: Remove.\n+\t* gcc.target/arm/neon/vshrQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vshrQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vshrQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vshrQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vshrQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vshrQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vshrQ_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vshrQ_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vshr_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vshr_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vshr_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vshr_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vshr_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vshr_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vshr_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vshr_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vshrn_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vshrn_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vshrn_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vshrn_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vshrn_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vshrn_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_np16.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_np64.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_np8.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vsliQ_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vsli_np16.c: Remove.\n+\t* gcc.target/arm/neon/vsli_np64.c: Remove.\n+\t* gcc.target/arm/neon/vsli_np8.c: Remove.\n+\t* gcc.target/arm/neon/vsli_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vsli_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vsli_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vsli_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vsli_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vsli_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vsli_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vsli_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vsraQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vsraQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vsraQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vsraQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vsraQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vsraQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vsraQ_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vsraQ_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vsra_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vsra_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vsra_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vsra_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vsra_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vsra_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vsra_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vsra_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_np16.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_np64.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_np8.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vsriQ_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vsri_np16.c: Remove.\n+\t* gcc.target/arm/neon/vsri_np64.c: Remove.\n+\t* gcc.target/arm/neon/vsri_np8.c: Remove.\n+\t* gcc.target/arm/neon/vsri_ns16.c: Remove.\n+\t* gcc.target/arm/neon/vsri_ns32.c: Remove.\n+\t* gcc.target/arm/neon/vsri_ns64.c: Remove.\n+\t* gcc.target/arm/neon/vsri_ns8.c: Remove.\n+\t* gcc.target/arm/neon/vsri_nu16.c: Remove.\n+\t* gcc.target/arm/neon/vsri_nu32.c: Remove.\n+\t* gcc.target/arm/neon/vsri_nu64.c: Remove.\n+\t* gcc.target/arm/neon/vsri_nu8.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_lanep64.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_lanes64.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_laneu64.c: Remove.\n+\t* gcc.target/arm/neon/vst1Q_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qf32.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qp16.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qp64.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qs16.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qs32.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qs64.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qu16.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qu32.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qu64.c: Remove.\n+\t* gcc.target/arm/neon/vst1Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vst1_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vst1_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vst1_lanep64.c: Remove.\n+\t* gcc.target/arm/neon/vst1_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vst1_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vst1_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vst1_lanes64.c: Remove.\n+\t* gcc.target/arm/neon/vst1_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vst1_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vst1_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vst1_laneu64.c: Remove.\n+\t* gcc.target/arm/neon/vst1_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vst1f32.c: Remove.\n+\t* gcc.target/arm/neon/vst1p16.c: Remove.\n+\t* gcc.target/arm/neon/vst1p64.c: Remove.\n+\t* gcc.target/arm/neon/vst1p8.c: Remove.\n+\t* gcc.target/arm/neon/vst1s16.c: Remove.\n+\t* gcc.target/arm/neon/vst1s32.c: Remove.\n+\t* gcc.target/arm/neon/vst1s64.c: Remove.\n+\t* gcc.target/arm/neon/vst1s8.c: Remove.\n+\t* gcc.target/arm/neon/vst1u16.c: Remove.\n+\t* gcc.target/arm/neon/vst1u32.c: Remove.\n+\t* gcc.target/arm/neon/vst1u64.c: Remove.\n+\t* gcc.target/arm/neon/vst1u8.c: Remove.\n+\t* gcc.target/arm/neon/vst2Q_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vst2Q_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vst2Q_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vst2Q_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vst2Q_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vst2Q_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vst2Qf32.c: Remove.\n+\t* gcc.target/arm/neon/vst2Qp16.c: Remove.\n+\t* gcc.target/arm/neon/vst2Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vst2Qs16.c: Remove.\n+\t* gcc.target/arm/neon/vst2Qs32.c: Remove.\n+\t* gcc.target/arm/neon/vst2Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vst2Qu16.c: Remove.\n+\t* gcc.target/arm/neon/vst2Qu32.c: Remove.\n+\t* gcc.target/arm/neon/vst2Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vst2_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vst2_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vst2_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vst2_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vst2_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vst2_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vst2_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vst2_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vst2_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vst2f32.c: Remove.\n+\t* gcc.target/arm/neon/vst2p16.c: Remove.\n+\t* gcc.target/arm/neon/vst2p64.c: Remove.\n+\t* gcc.target/arm/neon/vst2p8.c: Remove.\n+\t* gcc.target/arm/neon/vst2s16.c: Remove.\n+\t* gcc.target/arm/neon/vst2s32.c: Remove.\n+\t* gcc.target/arm/neon/vst2s64.c: Remove.\n+\t* gcc.target/arm/neon/vst2s8.c: Remove.\n+\t* gcc.target/arm/neon/vst2u16.c: Remove.\n+\t* gcc.target/arm/neon/vst2u32.c: Remove.\n+\t* gcc.target/arm/neon/vst2u64.c: Remove.\n+\t* gcc.target/arm/neon/vst2u8.c: Remove.\n+\t* gcc.target/arm/neon/vst3Q_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vst3Q_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vst3Q_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vst3Q_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vst3Q_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vst3Q_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vst3Qf32.c: Remove.\n+\t* gcc.target/arm/neon/vst3Qp16.c: Remove.\n+\t* gcc.target/arm/neon/vst3Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vst3Qs16.c: Remove.\n+\t* gcc.target/arm/neon/vst3Qs32.c: Remove.\n+\t* gcc.target/arm/neon/vst3Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vst3Qu16.c: Remove.\n+\t* gcc.target/arm/neon/vst3Qu32.c: Remove.\n+\t* gcc.target/arm/neon/vst3Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vst3_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vst3_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vst3_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vst3_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vst3_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vst3_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vst3_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vst3_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vst3_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vst3f32.c: Remove.\n+\t* gcc.target/arm/neon/vst3p16.c: Remove.\n+\t* gcc.target/arm/neon/vst3p64.c: Remove.\n+\t* gcc.target/arm/neon/vst3p8.c: Remove.\n+\t* gcc.target/arm/neon/vst3s16.c: Remove.\n+\t* gcc.target/arm/neon/vst3s32.c: Remove.\n+\t* gcc.target/arm/neon/vst3s64.c: Remove.\n+\t* gcc.target/arm/neon/vst3s8.c: Remove.\n+\t* gcc.target/arm/neon/vst3u16.c: Remove.\n+\t* gcc.target/arm/neon/vst3u32.c: Remove.\n+\t* gcc.target/arm/neon/vst3u64.c: Remove.\n+\t* gcc.target/arm/neon/vst3u8.c: Remove.\n+\t* gcc.target/arm/neon/vst4Q_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vst4Q_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vst4Q_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vst4Q_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vst4Q_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vst4Q_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vst4Qf32.c: Remove.\n+\t* gcc.target/arm/neon/vst4Qp16.c: Remove.\n+\t* gcc.target/arm/neon/vst4Qp8.c: Remove.\n+\t* gcc.target/arm/neon/vst4Qs16.c: Remove.\n+\t* gcc.target/arm/neon/vst4Qs32.c: Remove.\n+\t* gcc.target/arm/neon/vst4Qs8.c: Remove.\n+\t* gcc.target/arm/neon/vst4Qu16.c: Remove.\n+\t* gcc.target/arm/neon/vst4Qu32.c: Remove.\n+\t* gcc.target/arm/neon/vst4Qu8.c: Remove.\n+\t* gcc.target/arm/neon/vst4_lanef32.c: Remove.\n+\t* gcc.target/arm/neon/vst4_lanep16.c: Remove.\n+\t* gcc.target/arm/neon/vst4_lanep8.c: Remove.\n+\t* gcc.target/arm/neon/vst4_lanes16.c: Remove.\n+\t* gcc.target/arm/neon/vst4_lanes32.c: Remove.\n+\t* gcc.target/arm/neon/vst4_lanes8.c: Remove.\n+\t* gcc.target/arm/neon/vst4_laneu16.c: Remove.\n+\t* gcc.target/arm/neon/vst4_laneu32.c: Remove.\n+\t* gcc.target/arm/neon/vst4_laneu8.c: Remove.\n+\t* gcc.target/arm/neon/vst4f32.c: Remove.\n+\t* gcc.target/arm/neon/vst4p16.c: Remove.\n+\t* gcc.target/arm/neon/vst4p64.c: Remove.\n+\t* gcc.target/arm/neon/vst4p8.c: Remove.\n+\t* gcc.target/arm/neon/vst4s16.c: Remove.\n+\t* gcc.target/arm/neon/vst4s32.c: Remove.\n+\t* gcc.target/arm/neon/vst4s64.c: Remove.\n+\t* gcc.target/arm/neon/vst4s8.c: Remove.\n+\t* gcc.target/arm/neon/vst4u16.c: Remove.\n+\t* gcc.target/arm/neon/vst4u32.c: Remove.\n+\t* gcc.target/arm/neon/vst4u64.c: Remove.\n+\t* gcc.target/arm/neon/vst4u8.c: Remove.\n+\t* gcc.target/arm/neon/vsubQf32.c: Remove.\n+\t* gcc.target/arm/neon/vsubQs16.c: Remove.\n+\t* gcc.target/arm/neon/vsubQs32.c: Remove.\n+\t* gcc.target/arm/neon/vsubQs64.c: Remove.\n+\t* gcc.target/arm/neon/vsubQs8.c: Remove.\n+\t* gcc.target/arm/neon/vsubQu16.c: Remove.\n+\t* gcc.target/arm/neon/vsubQu32.c: Remove.\n+\t* gcc.target/arm/neon/vsubQu64.c: Remove.\n+\t* gcc.target/arm/neon/vsubQu8.c: Remove.\n+\t* gcc.target/arm/neon/vsubf32.c: Remove.\n+\t* gcc.target/arm/neon/vsubhns16.c: Remove.\n+\t* gcc.target/arm/neon/vsubhns32.c: Remove.\n+\t* gcc.target/arm/neon/vsubhns64.c: Remove.\n+\t* gcc.target/arm/neon/vsubhnu16.c: Remove.\n+\t* gcc.target/arm/neon/vsubhnu32.c: Remove.\n+\t* gcc.target/arm/neon/vsubhnu64.c: Remove.\n+\t* gcc.target/arm/neon/vsubls16.c: Remove.\n+\t* gcc.target/arm/neon/vsubls32.c: Remove.\n+\t* gcc.target/arm/neon/vsubls8.c: Remove.\n+\t* gcc.target/arm/neon/vsublu16.c: Remove.\n+\t* gcc.target/arm/neon/vsublu32.c: Remove.\n+\t* gcc.target/arm/neon/vsublu8.c: Remove.\n+\t* gcc.target/arm/neon/vsubs16.c: Remove.\n+\t* gcc.target/arm/neon/vsubs32.c: Remove.\n+\t* gcc.target/arm/neon/vsubs64.c: Remove.\n+\t* gcc.target/arm/neon/vsubs8.c: Remove.\n+\t* gcc.target/arm/neon/vsubu16.c: Remove.\n+\t* gcc.target/arm/neon/vsubu32.c: Remove.\n+\t* gcc.target/arm/neon/vsubu64.c: Remove.\n+\t* gcc.target/arm/neon/vsubu8.c: Remove.\n+\t* gcc.target/arm/neon/vsubws16.c: Remove.\n+\t* gcc.target/arm/neon/vsubws32.c: Remove.\n+\t* gcc.target/arm/neon/vsubws8.c: Remove.\n+\t* gcc.target/arm/neon/vsubwu16.c: Remove.\n+\t* gcc.target/arm/neon/vsubwu32.c: Remove.\n+\t* gcc.target/arm/neon/vsubwu8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl1p8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl1s8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl1u8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl2p8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl2s8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl2u8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl3p8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl3s8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl3u8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl4p8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl4s8.c: Remove.\n+\t* gcc.target/arm/neon/vtbl4u8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx1p8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx1s8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx1u8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx2p8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx2s8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx2u8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx3p8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx3s8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx3u8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx4p8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx4s8.c: Remove.\n+\t* gcc.target/arm/neon/vtbx4u8.c: Remove.\n+\t* gcc.target/arm/neon/vtrnQf32.c: Remove.\n+\t* gcc.target/arm/neon/vtrnQp16.c: Remove.\n+\t* gcc.target/arm/neon/vtrnQp8.c: Remove.\n+\t* gcc.target/arm/neon/vtrnQs16.c: Remove.\n+\t* gcc.target/arm/neon/vtrnQs32.c: Remove.\n+\t* gcc.target/arm/neon/vtrnQs8.c: Remove.\n+\t* gcc.target/arm/neon/vtrnQu16.c: Remove.\n+\t* gcc.target/arm/neon/vtrnQu32.c: Remove.\n+\t* gcc.target/arm/neon/vtrnQu8.c: Remove.\n+\t* gcc.target/arm/neon/vtrnf32.c: Remove.\n+\t* gcc.target/arm/neon/vtrnp16.c: Remove.\n+\t* gcc.target/arm/neon/vtrnp8.c: Remove.\n+\t* gcc.target/arm/neon/vtrns16.c: Remove.\n+\t* gcc.target/arm/neon/vtrns32.c: Remove.\n+\t* gcc.target/arm/neon/vtrns8.c: Remove.\n+\t* gcc.target/arm/neon/vtrnu16.c: Remove.\n+\t* gcc.target/arm/neon/vtrnu32.c: Remove.\n+\t* gcc.target/arm/neon/vtrnu8.c: Remove.\n+\t* gcc.target/arm/neon/vtstQp8.c: Remove.\n+\t* gcc.target/arm/neon/vtstQs16.c: Remove.\n+\t* gcc.target/arm/neon/vtstQs32.c: Remove.\n+\t* gcc.target/arm/neon/vtstQs8.c: Remove.\n+\t* gcc.target/arm/neon/vtstQu16.c: Remove.\n+\t* gcc.target/arm/neon/vtstQu32.c: Remove.\n+\t* gcc.target/arm/neon/vtstQu8.c: Remove.\n+\t* gcc.target/arm/neon/vtstp8.c: Remove.\n+\t* gcc.target/arm/neon/vtsts16.c: Remove.\n+\t* gcc.target/arm/neon/vtsts32.c: Remove.\n+\t* gcc.target/arm/neon/vtsts8.c: Remove.\n+\t* gcc.target/arm/neon/vtstu16.c: Remove.\n+\t* gcc.target/arm/neon/vtstu32.c: Remove.\n+\t* gcc.target/arm/neon/vtstu8.c: Remove.\n+\t* gcc.target/arm/neon/vuzpQf32.c: Remove.\n+\t* gcc.target/arm/neon/vuzpQp16.c: Remove.\n+\t* gcc.target/arm/neon/vuzpQp8.c: Remove.\n+\t* gcc.target/arm/neon/vuzpQs16.c: Remove.\n+\t* gcc.target/arm/neon/vuzpQs32.c: Remove.\n+\t* gcc.target/arm/neon/vuzpQs8.c: Remove.\n+\t* gcc.target/arm/neon/vuzpQu16.c: Remove.\n+\t* gcc.target/arm/neon/vuzpQu32.c: Remove.\n+\t* gcc.target/arm/neon/vuzpQu8.c: Remove.\n+\t* gcc.target/arm/neon/vuzpf32.c: Remove.\n+\t* gcc.target/arm/neon/vuzpp16.c: Remove.\n+\t* gcc.target/arm/neon/vuzpp8.c: Remove.\n+\t* gcc.target/arm/neon/vuzps16.c: Remove.\n+\t* gcc.target/arm/neon/vuzps32.c: Remove.\n+\t* gcc.target/arm/neon/vuzps8.c: Remove.\n+\t* gcc.target/arm/neon/vuzpu16.c: Remove.\n+\t* gcc.target/arm/neon/vuzpu32.c: Remove.\n+\t* gcc.target/arm/neon/vuzpu8.c: Remove.\n+\t* gcc.target/arm/neon/vzipQf32.c: Remove.\n+\t* gcc.target/arm/neon/vzipQp16.c: Remove.\n+\t* gcc.target/arm/neon/vzipQp8.c: Remove.\n+\t* gcc.target/arm/neon/vzipQs16.c: Remove.\n+\t* gcc.target/arm/neon/vzipQs32.c: Remove.\n+\t* gcc.target/arm/neon/vzipQs8.c: Remove.\n+\t* gcc.target/arm/neon/vzipQu16.c: Remove.\n+\t* gcc.target/arm/neon/vzipQu32.c: Remove.\n+\t* gcc.target/arm/neon/vzipQu8.c: Remove.\n+\t* gcc.target/arm/neon/vzipf32.c: Remove.\n+\t* gcc.target/arm/neon/vzipp16.c: Remove.\n+\t* gcc.target/arm/neon/vzipp8.c: Remove.\n+\t* gcc.target/arm/neon/vzips16.c: Remove.\n+\t* gcc.target/arm/neon/vzips32.c: Remove.\n+\t* gcc.target/arm/neon/vzips8.c: Remove.\n+\t* gcc.target/arm/neon/vzipu16.c: Remove.\n+\t* gcc.target/arm/neon/vzipu32.c: Remove.\n+\t* gcc.target/arm/neon/vzipu8.c: Remove.\n+\n 2015-11-13  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \t* g++.dg/vect/simd-mask-store-bool.cc: New test."}, {"sha": "d2424d9c5b6306831951bdf8d8cddc13222af8fc", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhns16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRaddhns16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRaddhns16 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_int8x8_t = vraddhn_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vraddhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a787bccf479919c00748ac13c9ac846c2c1b0cec", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhns32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRaddhns32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRaddhns32 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_int16x4_t = vraddhn_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vraddhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "dde572c4457c3e15e801c904e38394567e81619f", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhns64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhns64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRaddhns64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRaddhns64 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int64x2_t arg0_int64x2_t;\n+  int64x2_t arg1_int64x2_t;\n+\n+  out_int32x2_t = vraddhn_s64 (arg0_int64x2_t, arg1_int64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vraddhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "74098a9e5473029217ba18536019ff9347d949e3", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhnu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRaddhnu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRaddhnu16 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint8x8_t = vraddhn_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vraddhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4795f446dc714a355a1fc0e53edc1c37e7c34b41", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhnu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRaddhnu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRaddhnu32 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint16x4_t = vraddhn_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vraddhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d3a7e0b4ae5da18d82f359dc873e2ad1024ebafb", "filename": "gcc/testsuite/gcc.target/arm/neon/vRaddhnu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRaddhnu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRaddhnu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRaddhnu64 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  uint64x2_t arg1_uint64x2_t;\n+\n+  out_uint32x2_t = vraddhn_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vraddhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d8da62725b7b07ec2c314afdc1bb542fa408152e", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhaddQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhaddQs16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_int16x8_t = vrhaddq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6281ade30ca6d3d8ab00e75be648c61be9613848", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhaddQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhaddQs32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_int32x4_t = vrhaddq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a558ca363d939990550920e6ee7ce482ebb6329e", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhaddQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhaddQs8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_int8x16_t = vrhaddq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "06822c2ff118aa37401de0d7514e7e237922a3b2", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhaddQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhaddQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint16x8_t = vrhaddq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "713e70a2a6b495d9a2f589abbc4c027e16f01fcb", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhaddQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhaddQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint32x4_t = vrhaddq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "64a912f25ee139cb6c4c2681e4f682afbb09ec83", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhaddQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhaddQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+\n+  out_uint8x16_t = vrhaddq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8eb55045ec6cbc14621577d04c6a3e398795c617", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhadds16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhadds16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhadds16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_int16x4_t = vrhadd_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a1acebd186f0d485e2137755760388742b64e43b", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhadds32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhadds32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhadds32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_int32x2_t = vrhadd_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "df7f58c33a07febf560012e3a00e1300b2281538", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhadds8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhadds8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhadds8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhadds8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_int8x8_t = vrhadd_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "215eb1597bd284f5996f72f9803cf3850883170f", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhaddu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhaddu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint16x4_t = vrhadd_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2d8d5fbf6353040040bcb0b37ba9a7c92332ce29", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhaddu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhaddu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint32x2_t = vrhadd_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "362a54647012666bfe01b9c6fffb7912e2acc3ea", "filename": "gcc/testsuite/gcc.target/arm/neon/vRhaddu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRhaddu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRhaddu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRhaddu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint8x8_t = vrhadd_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrhadd\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "74bd3aaf091cc85d26b4643e8a1daa5f1e7809ae", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlQs16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_int16x8_t = vrshlq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a6a9e4c24900ad9af04a84ae4f5a004bccd2fa53", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlQs32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_int32x4_t = vrshlq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8201a04fb5acd3133b24c754bc0b4d24393fe821", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQs64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlQs64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlQs64 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  int64x2_t arg0_int64x2_t;\n+  int64x2_t arg1_int64x2_t;\n+\n+  out_int64x2_t = vrshlq_s64 (arg0_int64x2_t, arg1_int64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.s64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "28d281f767076703df19ad94e5e6a5bbbc12e51b", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlQs8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_int8x16_t = vrshlq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "66d278887e5b3f7ade24c8450a678f432ea5c7b9", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_uint16x8_t = vrshlq_u16 (arg0_uint16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4185fbe17695ce7532814cd59ab6c44e503deb8c", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_uint32x4_t = vrshlq_u32 (arg0_uint32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fb0eddd71294ea5022c00a7560353e9e6960281e", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlQu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlQu64 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  int64x2_t arg1_int64x2_t;\n+\n+  out_uint64x2_t = vrshlq_u64 (arg0_uint64x2_t, arg1_int64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.u64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cee1b9e38fbac7a7c7dbd7916dffb82feb76f479", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_uint8x16_t = vrshlq_u8 (arg0_uint8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ac7158adc15e7ce03b722fa794ba057905d8d30c", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshls16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshls16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshls16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_int16x4_t = vrshl_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8da59185c1a34c241eb7021b85d22e1677b10eb5", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshls32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshls32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshls32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_int32x2_t = vrshl_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2e732ee12de5e38101e0e3bdfed00bc768f66ccc", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshls64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshls64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshls64 (void)\n+{\n+  int64x1_t out_int64x1_t;\n+  int64x1_t arg0_int64x1_t;\n+  int64x1_t arg1_int64x1_t;\n+\n+  out_int64x1_t = vrshl_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.s64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f0c351d485076bca5094239ea3386844329ea2c6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshls8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshls8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshls8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshls8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_int8x8_t = vrshl_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1a7751b43ce82196914ad4081c564a69376f4dea", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_uint16x4_t = vrshl_u16 (arg0_uint16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "198b13c43697ec657aee8826539be23fd5bd61b9", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_uint32x2_t = vrshl_u32 (arg0_uint32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3f67aaaa4b6e698a222a5103f9fb005315316e6e", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlu64 (void)\n+{\n+  uint64x1_t out_uint64x1_t;\n+  uint64x1_t arg0_uint64x1_t;\n+  int64x1_t arg1_int64x1_t;\n+\n+  out_uint64x1_t = vrshl_u64 (arg0_uint64x1_t, arg1_int64x1_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.u64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "439948224a3331b0e08cc089ebc84b575e6f49f0", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshlu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshlu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRshlu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshlu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_uint8x8_t = vrshl_u8 (arg0_uint8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshl\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a89842b4001b22449db7da0db372b80e0a02db36", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_ns16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrQ_ns16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrQ_ns16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+\n+  out_int16x8_t = vrshrq_n_s16 (arg0_int16x8_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "00ec911743b7a64622b116a53dd0198960849424", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_ns32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrQ_ns32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrQ_ns32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+\n+  out_int32x4_t = vrshrq_n_s32 (arg0_int32x4_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0b1851e7e00750a846c93113e4e28008e24cf321", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_ns64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrQ_ns64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrQ_ns64 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  int64x2_t arg0_int64x2_t;\n+\n+  out_int64x2_t = vrshrq_n_s64 (arg0_int64x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.s64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "80084d02dc6b32a04cd31a035c0a211dc9cfec72", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_ns8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_ns8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrQ_ns8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrQ_ns8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+\n+  out_int8x16_t = vrshrq_n_s8 (arg0_int8x16_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a24ea19a1a921ad3694ab871539d79f0d0cf1b8b", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_nu16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrQ_nu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrQ_nu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+\n+  out_uint16x8_t = vrshrq_n_u16 (arg0_uint16x8_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fa4e20da18fdcc863a1af5029e5bf51412b36c52", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_nu32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrQ_nu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrQ_nu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+\n+  out_uint32x4_t = vrshrq_n_u32 (arg0_uint32x4_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "9e61a6916cea2a9750e0efb240d716ac53843129", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_nu64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrQ_nu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrQ_nu64 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+\n+  out_uint64x2_t = vrshrq_n_u64 (arg0_uint64x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.u64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3445c8dcd53646694bc0b66bf05f773937a2ab4c", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrQ_nu8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrQ_nu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrQ_nu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrQ_nu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+\n+  out_uint8x16_t = vrshrq_n_u8 (arg0_uint8x16_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5445d5945e08813e93228e721a85f8864caa87b9", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_ns16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshr_ns16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshr_ns16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+\n+  out_int16x4_t = vrshr_n_s16 (arg0_int16x4_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8b3f60daead382888d3896ef29786e1091ac8298", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_ns32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshr_ns32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshr_ns32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+\n+  out_int32x2_t = vrshr_n_s32 (arg0_int32x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1d3735a879541af07b1fb1d7eed17b65de3e42c6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_ns64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshr_ns64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshr_ns64 (void)\n+{\n+  int64x1_t out_int64x1_t;\n+  int64x1_t arg0_int64x1_t;\n+\n+  out_int64x1_t = vrshr_n_s64 (arg0_int64x1_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.s64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "dc011d95380d7db695ba405efd0022a4a7eeab18", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_ns8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_ns8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshr_ns8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshr_ns8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+\n+  out_int8x8_t = vrshr_n_s8 (arg0_int8x8_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "890c88664e3a081bd57925ff2da549c1133b102a", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_nu16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshr_nu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshr_nu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+\n+  out_uint16x4_t = vrshr_n_u16 (arg0_uint16x4_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5994f6be64fc389fbab48d54fdee8ec15067e4ee", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_nu32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshr_nu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshr_nu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+\n+  out_uint32x2_t = vrshr_n_u32 (arg0_uint32x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "03047707dc9235012e44c5628beb0167036b77cc", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_nu64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshr_nu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshr_nu64 (void)\n+{\n+  uint64x1_t out_uint64x1_t;\n+  uint64x1_t arg0_uint64x1_t;\n+\n+  out_uint64x1_t = vrshr_n_u64 (arg0_uint64x1_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.u64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4df95c24b24450159e4e1e03dc9118606241f5ea", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshr_nu8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshr_nu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshr_nu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshr_nu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+\n+  out_uint8x8_t = vrshr_n_u8 (arg0_uint8x8_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshr\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "7f423036c3d1d69f83582ce8e76678ee4fef70c6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_ns16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrn_ns16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrn_ns16 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int16x8_t arg0_int16x8_t;\n+\n+  out_int8x8_t = vrshrn_n_s16 (arg0_int16x8_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6c0559fc583778e4c09da7a1835e59a26de0474a", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_ns32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrn_ns32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrn_ns32 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int32x4_t arg0_int32x4_t;\n+\n+  out_int16x4_t = vrshrn_n_s32 (arg0_int32x4_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0f223c9377ee16c1fbcc341aded32763ea06962d", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_ns64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_ns64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrn_ns64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrn_ns64 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int64x2_t arg0_int64x2_t;\n+\n+  out_int32x2_t = vrshrn_n_s64 (arg0_int64x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "12ba6252a0290b6ed438beb60841b8d26fb97cf3", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_nu16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrn_nu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrn_nu16 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+\n+  out_uint8x8_t = vrshrn_n_u16 (arg0_uint16x8_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8b2014f34854e9d31b308e2029660cc7f35fae5f", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_nu32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrn_nu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrn_nu32 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+\n+  out_uint16x4_t = vrshrn_n_u32 (arg0_uint32x4_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f3bf756637515f48fc5c0cf97ef43552f69197b6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRshrn_nu64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRshrn_nu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vRshrn_nu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRshrn_nu64 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+\n+  out_uint32x2_t = vrshrn_n_u64 (arg0_uint64x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrshrn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "66e2ea0e974fbc3f72352aa3d3a24bc232d1eefb", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_ns16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsraQ_ns16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsraQ_ns16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_int16x8_t = vrsraq_n_s16 (arg0_int16x8_t, arg1_int16x8_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b6c3cb8f40dd13e0e22ea75e21ca7127823f53ce", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_ns32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsraQ_ns32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsraQ_ns32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_int32x4_t = vrsraq_n_s32 (arg0_int32x4_t, arg1_int32x4_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8d68b1ae89a225899073224f19637cc96f6e118c", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_ns64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsraQ_ns64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsraQ_ns64 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  int64x2_t arg0_int64x2_t;\n+  int64x2_t arg1_int64x2_t;\n+\n+  out_int64x2_t = vrsraq_n_s64 (arg0_int64x2_t, arg1_int64x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.s64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "413f49ef8209c12afe9fddf75a75c1a8259fb77d", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_ns8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_ns8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsraQ_ns8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsraQ_ns8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_int8x16_t = vrsraq_n_s8 (arg0_int8x16_t, arg1_int8x16_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d9e668011a74cd6c17029ef28afd6df7674c1f50", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_nu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsraQ_nu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsraQ_nu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint16x8_t = vrsraq_n_u16 (arg0_uint16x8_t, arg1_uint16x8_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "56ae88612a2c9efcdfced10bcc5b26ecdd4321b6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_nu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsraQ_nu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsraQ_nu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint32x4_t = vrsraq_n_u32 (arg0_uint32x4_t, arg1_uint32x4_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2ce4af3bcc9f14d145321a0e0f9cc2260d6078e6", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_nu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsraQ_nu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsraQ_nu64 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  uint64x2_t arg1_uint64x2_t;\n+\n+  out_uint64x2_t = vrsraq_n_u64 (arg0_uint64x2_t, arg1_uint64x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.u64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "53078a0464e09384f80f9596e66555c7950589d2", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsraQ_nu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsraQ_nu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsraQ_nu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsraQ_nu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+\n+  out_uint8x16_t = vrsraq_n_u8 (arg0_uint8x16_t, arg1_uint8x16_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "bc68117af1b232283be97ad9f740354355cbc52b", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_ns16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsra_ns16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsra_ns16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_int16x4_t = vrsra_n_s16 (arg0_int16x4_t, arg1_int16x4_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "caeb45b22dcb3d6e813652cb5467e75eea9fbb0f", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_ns32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsra_ns32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsra_ns32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_int32x2_t = vrsra_n_s32 (arg0_int32x2_t, arg1_int32x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b9ea8c88a43fa447a8a9b2be2550ecee0c0b8fb5", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_ns64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsra_ns64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsra_ns64 (void)\n+{\n+  int64x1_t out_int64x1_t;\n+  int64x1_t arg0_int64x1_t;\n+  int64x1_t arg1_int64x1_t;\n+\n+  out_int64x1_t = vrsra_n_s64 (arg0_int64x1_t, arg1_int64x1_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.s64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f32ae16bd5a3b9f578d54b2765fb03984ca75777", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_ns8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_ns8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsra_ns8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsra_ns8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_int8x8_t = vrsra_n_s8 (arg0_int8x8_t, arg1_int8x8_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b6d2ccee8f9214885bad450f93cbc335e5f36513", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_nu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsra_nu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsra_nu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint16x4_t = vrsra_n_u16 (arg0_uint16x4_t, arg1_uint16x4_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "99c217b19098ef3ca06a5d7b33e0c691d1366bc2", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_nu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsra_nu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsra_nu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint32x2_t = vrsra_n_u32 (arg0_uint32x2_t, arg1_uint32x2_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6eaa2ae4302b4a43155e315973d9b1302ce0cb93", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_nu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsra_nu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsra_nu64 (void)\n+{\n+  uint64x1_t out_uint64x1_t;\n+  uint64x1_t arg0_uint64x1_t;\n+  uint64x1_t arg1_uint64x1_t;\n+\n+  out_uint64x1_t = vrsra_n_u64 (arg0_uint64x1_t, arg1_uint64x1_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.u64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6ae17f7e2e1f86f5f598616ee9b369d8e2d402bb", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsra_nu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsra_nu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsra_nu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsra_nu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint8x8_t = vrsra_n_u8 (arg0_uint8x8_t, arg1_uint8x8_t, 1);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsra\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, #\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b0a5cb0095703399cb50c9ce03871c40407bb234", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhns16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsubhns16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsubhns16 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_int8x8_t = vrsubhn_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsubhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "31e01e0f20aa287294d1aad0869ada571e807da5", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhns32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsubhns32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsubhns32 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_int16x4_t = vrsubhn_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsubhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e1c8c9ec751a98c456c4f6e75d6ffbf2c83d79fb", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhns64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhns64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsubhns64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsubhns64 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int64x2_t arg0_int64x2_t;\n+  int64x2_t arg1_int64x2_t;\n+\n+  out_int32x2_t = vrsubhn_s64 (arg0_int64x2_t, arg1_int64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsubhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "58368f444e5286005da29ba3c335c418d1fb93f8", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhnu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsubhnu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsubhnu16 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint8x8_t = vrsubhn_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsubhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "edb7b4f41997c844826390251165ffbd7714b4fc", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhnu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsubhnu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsubhnu32 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint16x4_t = vrsubhn_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsubhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2b1c77f10a53b0785cbf7d2686380c23043edf86", "filename": "gcc/testsuite/gcc.target/arm/neon/vRsubhnu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvRsubhnu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vRsubhnu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vRsubhnu64 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  uint64x2_t arg1_uint64x2_t;\n+\n+  out_uint32x2_t = vrsubhn_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrsubhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f0c69713434bd337a7c4aecd709fac23669859ad", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQs16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabaQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabaQs16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+  int16x8_t arg2_int16x8_t;\n+\n+  out_int16x8_t = vabaq_s16 (arg0_int16x8_t, arg1_int16x8_t, arg2_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cc68f6f603465b727173a5532821ffa5bc3b4dca", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQs32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabaQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabaQs32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+  int32x4_t arg2_int32x4_t;\n+\n+  out_int32x4_t = vabaq_s32 (arg0_int32x4_t, arg1_int32x4_t, arg2_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "7b1bfeb30ac48e874ca39340f394df58f94403fc", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQs8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabaQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabaQs8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+  int8x16_t arg2_int8x16_t;\n+\n+  out_int8x16_t = vabaq_s8 (arg0_int8x16_t, arg1_int8x16_t, arg2_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3b5ba07643e675904a5fa297c0a5704d35079853", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQu16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabaQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabaQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+  uint16x8_t arg2_uint16x8_t;\n+\n+  out_uint16x8_t = vabaq_u16 (arg0_uint16x8_t, arg1_uint16x8_t, arg2_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cf526e9b7d868193d928f127c7fd059d2aeb1b2e", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQu32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabaQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabaQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+  uint32x4_t arg2_uint32x4_t;\n+\n+  out_uint32x4_t = vabaq_u32 (arg0_uint32x4_t, arg1_uint32x4_t, arg2_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "484fb7fc79e749c0a1d3cfd3d418db14720bbf52", "filename": "gcc/testsuite/gcc.target/arm/neon/vabaQu8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabaQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabaQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabaQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+  uint8x16_t arg2_uint8x16_t;\n+\n+  out_uint8x16_t = vabaq_u8 (arg0_uint8x16_t, arg1_uint8x16_t, arg2_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6617e2e68db3d52ad73a9a5216a7379798d7fbb9", "filename": "gcc/testsuite/gcc.target/arm/neon/vabals16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabals16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabals16 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int16x4_t arg1_int16x4_t;\n+  int16x4_t arg2_int16x4_t;\n+\n+  out_int32x4_t = vabal_s16 (arg0_int32x4_t, arg1_int16x4_t, arg2_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabal\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2110dee6b48b5fc7efda9fa78c564bc6a77927ea", "filename": "gcc/testsuite/gcc.target/arm/neon/vabals32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabals32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabals32 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  int64x2_t arg0_int64x2_t;\n+  int32x2_t arg1_int32x2_t;\n+  int32x2_t arg2_int32x2_t;\n+\n+  out_int64x2_t = vabal_s32 (arg0_int64x2_t, arg1_int32x2_t, arg2_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabal\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c313a11a5a06ef4f8206bb9d524562c42dbc0108", "filename": "gcc/testsuite/gcc.target/arm/neon/vabals8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabals8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabals8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabals8 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int8x8_t arg1_int8x8_t;\n+  int8x8_t arg2_int8x8_t;\n+\n+  out_int16x8_t = vabal_s8 (arg0_int16x8_t, arg1_int8x8_t, arg2_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabal\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f43c8ed30c7f99631e7185e362c1ce09f7ec877c", "filename": "gcc/testsuite/gcc.target/arm/neon/vabalu16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabalu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabalu16 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+  uint16x4_t arg2_uint16x4_t;\n+\n+  out_uint32x4_t = vabal_u16 (arg0_uint32x4_t, arg1_uint16x4_t, arg2_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabal\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "12af07299eebaf2cfb53eb8e8408e06d261da571", "filename": "gcc/testsuite/gcc.target/arm/neon/vabalu32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabalu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabalu32 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+  uint32x2_t arg2_uint32x2_t;\n+\n+  out_uint64x2_t = vabal_u32 (arg0_uint64x2_t, arg1_uint32x2_t, arg2_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabal\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "05ba74760a3d6dcaf5dda790c56010dc06b1e736", "filename": "gcc/testsuite/gcc.target/arm/neon/vabalu8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabalu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabalu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabalu8 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+  uint8x8_t arg2_uint8x8_t;\n+\n+  out_uint16x8_t = vabal_u8 (arg0_uint16x8_t, arg1_uint8x8_t, arg2_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabal\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "9094ecb2a0774b13a968af330c116012f104dfb9", "filename": "gcc/testsuite/gcc.target/arm/neon/vabas16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabas16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabas16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+  int16x4_t arg2_int16x4_t;\n+\n+  out_int16x4_t = vaba_s16 (arg0_int16x4_t, arg1_int16x4_t, arg2_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "184fc9553cad13625bc72ee77a8ff2902f525ee7", "filename": "gcc/testsuite/gcc.target/arm/neon/vabas32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabas32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabas32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+  int32x2_t arg2_int32x2_t;\n+\n+  out_int32x2_t = vaba_s32 (arg0_int32x2_t, arg1_int32x2_t, arg2_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b9bc8130665d6422957afbbac6b2254079e51dcf", "filename": "gcc/testsuite/gcc.target/arm/neon/vabas8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabas8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabas8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabas8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+  int8x8_t arg2_int8x8_t;\n+\n+  out_int8x8_t = vaba_s8 (arg0_int8x8_t, arg1_int8x8_t, arg2_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d3b8c4ef6e2ab5a5205f109c0dbb7bd2f2df8806", "filename": "gcc/testsuite/gcc.target/arm/neon/vabau16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabau16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabau16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+  uint16x4_t arg2_uint16x4_t;\n+\n+  out_uint16x4_t = vaba_u16 (arg0_uint16x4_t, arg1_uint16x4_t, arg2_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2c65f1b72698268474a5a099615db6fe59bcdddf", "filename": "gcc/testsuite/gcc.target/arm/neon/vabau32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabau32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabau32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+  uint32x2_t arg2_uint32x2_t;\n+\n+  out_uint32x2_t = vaba_u32 (arg0_uint32x2_t, arg1_uint32x2_t, arg2_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "665410ced8151b999c86a3ccddd1be70f1b2d009", "filename": "gcc/testsuite/gcc.target/arm/neon/vabau8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabau8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vabau8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabau8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+  uint8x8_t arg2_uint8x8_t;\n+\n+  out_uint8x8_t = vaba_u8 (arg0_uint8x8_t, arg1_uint8x8_t, arg2_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaba\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "682736ff263a601cf30670cb4c21399da98deb4e", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdQf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_float32x4_t = vabdq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "37349e91f3252a6918925821a6af4e97bbe94a30", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdQs16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_int16x8_t = vabdq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "961b4cab2a19bc58409ad4126a9e31237e89e9b4", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdQs32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_int32x4_t = vabdq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b6d6eaf292ece7683f7d8d9d4f5a89dc53789b33", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdQs8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_int8x16_t = vabdq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1c86be1c6ed9e24a873fc985ad4feb5ada25970c", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint16x8_t = vabdq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a263b65505c1daa5e5d4072df801363eaa766a46", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint32x4_t = vabdq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d217f48c43fe71d5f043aab097dfffc107a00304", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabdQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+\n+  out_uint8x16_t = vabdq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "9454282c00421b652ec9162090b170a3de4c89bd", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_float32x2_t = vabd_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "63ac7e3706d0f4c7404309f8027bb59c78970aea", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdls16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdls16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdls16 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_int32x4_t = vabdl_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabdl\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "7d51343a2bfac09ac5445dda91146effbd0c8e07", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdls32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdls32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdls32 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_int64x2_t = vabdl_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabdl\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0d9ac62a5ee37bbe501ab839b3ce429ab5d753eb", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdls8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdls8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdls8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdls8 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_int16x8_t = vabdl_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabdl\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6f19e6720164ed2700dc071c80a3f7e315665456", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdlu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdlu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdlu16 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint32x4_t = vabdl_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabdl\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0ec3f93f2ac78fd7d6b1aa9704fdd7e7c9990d86", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdlu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdlu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdlu32 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint64x2_t = vabdl_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabdl\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0d981fae277e805272becdf29f53c87dcaef7569", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdlu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdlu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdlu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdlu8 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint16x8_t = vabdl_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabdl\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a13ee8865c4f70443f164980c1224bb3c28e9010", "filename": "gcc/testsuite/gcc.target/arm/neon/vabds16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabds16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabds16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_int16x4_t = vabd_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fdbfdb656c22e05ab1bbbf571790344b5f65c805", "filename": "gcc/testsuite/gcc.target/arm/neon/vabds32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabds32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabds32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_int32x2_t = vabd_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2b0fe0abb07900d1acc8d46910f70ba28d79c41a", "filename": "gcc/testsuite/gcc.target/arm/neon/vabds8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabds8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabds8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabds8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_int8x8_t = vabd_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ca599ac56af26b4d4cd1806a501e9aacf64843ff", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint16x4_t = vabd_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cdd83429cc74995e7af7e8eec2fdbf8808f0f6da", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint32x2_t = vabd_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1d939185ed05960d1ec4b81c392f28f4231ab44d", "filename": "gcc/testsuite/gcc.target/arm/neon/vabdu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabdu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vabdu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabdu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint8x8_t = vabd_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabd\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f77af2a5d043b2d932e141eaba9aecb1f3d2d807", "filename": "gcc/testsuite/gcc.target/arm/neon/vabsQf32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vabsQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabsQf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+\n+  out_float32x4_t = vabsq_f32 (arg0_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5b3a3578fb9b416238ca52e01f3c8068bfa57904", "filename": "gcc/testsuite/gcc.target/arm/neon/vabsQs16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vabsQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabsQs16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+\n+  out_int16x8_t = vabsq_s16 (arg0_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a0ad40304962b11b9d010c9304c5059c10cb43c9", "filename": "gcc/testsuite/gcc.target/arm/neon/vabsQs32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vabsQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabsQs32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+\n+  out_int32x4_t = vabsq_s32 (arg0_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "786d20044136859de15a83631428e288f672a7ab", "filename": "gcc/testsuite/gcc.target/arm/neon/vabsQs8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvabsQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vabsQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabsQs8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+\n+  out_int8x16_t = vabsq_s8 (arg0_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b1845da54f64958dfdbe2c607087782a89f687a9", "filename": "gcc/testsuite/gcc.target/arm/neon/vabsf32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabsf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabsf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabsf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vabsf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabsf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+\n+  out_float32x2_t = vabs_f32 (arg0_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ad37064889883951a57c1b933ab18f5b4f8a8f6e", "filename": "gcc/testsuite/gcc.target/arm/neon/vabss16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vabss16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabss16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+\n+  out_int16x4_t = vabs_s16 (arg0_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "38066982fcfb1a556c99dc89e649c9c1a81c85d9", "filename": "gcc/testsuite/gcc.target/arm/neon/vabss32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vabss32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabss32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+\n+  out_int32x2_t = vabs_s32 (arg0_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a36a2a7669a2113a497046c9d763b6a62f609671", "filename": "gcc/testsuite/gcc.target/arm/neon/vabss8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvabss8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vabss8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vabss8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+\n+  out_int8x8_t = vabs_s8 (arg0_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vabs\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "dd2c06abba0992bb6b184626214af0568505b44b", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddQf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_float32x4_t = vaddq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ec000faa3b0c1c005cce0ddd386c5a1984ce3905", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddQs16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_int16x8_t = vaddq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "34ead8ca80f3ee05446f2a02d48c79b68abec400", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddQs32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_int32x4_t = vaddq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "77942deee66392ad285845f5f3ee69a741dce046", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQs64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddQs64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddQs64 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  int64x2_t arg0_int64x2_t;\n+  int64x2_t arg1_int64x2_t;\n+\n+  out_int64x2_t = vaddq_s64 (arg0_int64x2_t, arg1_int64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "42bcdf9ae74c184f781e8eaed5829a3c854c1eb0", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddQs8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_int8x16_t = vaddq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "983bb35f6b84c9eed5e233d6124fb7fda757ea1a", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint16x8_t = vaddq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c98772e9389292b3db8079e951cfc9f3ddb637b3", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint32x4_t = vaddq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "95756c646719fbb0ed7a72f09ca38e83982309c8", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddQu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddQu64 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  uint64x2_t arg1_uint64x2_t;\n+\n+  out_uint64x2_t = vaddq_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i64\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e52524eb00ad3580c8e8c5448dfab719612b8d86", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvaddQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+\n+  out_uint8x16_t = vaddq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6afb8c195feaa74e3f922562af41edec3eeaebec", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_float32x2_t = vadd_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f3f35e4eccecd457d1894fed360f10a5e3215ef8", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhns16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddhns16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddhns16 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_int8x8_t = vaddhn_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "028f431944d059014c4d12cf19b1d6ac3ab72af7", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhns32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddhns32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddhns32 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_int16x4_t = vaddhn_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f139a6da1e7a2be432919c51e15fdb7cad422e03", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhns64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhns64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddhns64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddhns64 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int64x2_t arg0_int64x2_t;\n+  int64x2_t arg1_int64x2_t;\n+\n+  out_int32x2_t = vaddhn_s64 (arg0_int64x2_t, arg1_int64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6c770621e91c79cef5584ff43763fea3f1015b5b", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhnu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddhnu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddhnu16 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint8x8_t = vaddhn_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddhn\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5315f91c1c7caebfc78207d114829dd0c0d12181", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhnu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddhnu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddhnu32 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint16x4_t = vaddhn_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddhn\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6aa25609e16b2373948d9fe999d0b8f3b6cfe5f6", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddhnu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddhnu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddhnu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddhnu64 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  uint64x2_t arg1_uint64x2_t;\n+\n+  out_uint32x2_t = vaddhn_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddhn\\.i64\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4b84ae89e6a747b561746023d2872f9d5063cad0", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddls16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddls16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddls16 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_int32x4_t = vaddl_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddl\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3f267cc5ad718a9848d5ba03df13638b74209342", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddls32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddls32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddls32 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_int64x2_t = vaddl_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddl\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c2136109316bc0029810ab3c1a63414d3e0e54dc", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddls8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddls8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddls8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddls8 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_int16x8_t = vaddl_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddl\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6e5341c27cb8e6a4696c4d79009f5d9ef81d855b", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddlu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddlu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddlu16 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint32x4_t = vaddl_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddl\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "bc4359beae5967a3aab1921fb78c3247a3ecad28", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddlu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddlu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddlu32 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint64x2_t = vaddl_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddl\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "9ec110e5a7307ee1a9e8acf7d846d50e8dc9b165", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddlu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddlu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddlu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddlu8 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint16x8_t = vaddl_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddl\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1c2f70b31fbb07278a0c0976006b807dae29e142", "filename": "gcc/testsuite/gcc.target/arm/neon/vadds16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vadds16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vadds16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_int16x4_t = vadd_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8889228215d4fa3b1c84dc40c1317650203e534c", "filename": "gcc/testsuite/gcc.target/arm/neon/vadds32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vadds32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vadds32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_int32x2_t = vadd_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8b6bb5b9ca9887405766111d256b3040bd06b3e0", "filename": "gcc/testsuite/gcc.target/arm/neon/vadds64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vadds64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vadds64 (void)\n+{\n+  int64x1_t out_int64x1_t;\n+  int64x1_t arg0_int64x1_t;\n+  int64x1_t arg1_int64x1_t;\n+\n+  out_int64x1_t = vadd_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+}\n+"}, {"sha": "6165e628728a0454ad93c93facf24acc23ea0b15", "filename": "gcc/testsuite/gcc.target/arm/neon/vadds8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvadds8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vadds8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vadds8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_int8x8_t = vadd_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c3469152564f700615cf3c5e5e9667e18b9d9528", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint16x4_t = vadd_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8436c129aedca93a75a92f7f1e549d62c2f1ce59", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint32x2_t = vadd_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4cf9fcf2b6ab143801754fcd4ce0e21d1df7480a", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddu64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vaddu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddu64 (void)\n+{\n+  uint64x1_t out_uint64x1_t;\n+  uint64x1_t arg0_uint64x1_t;\n+  uint64x1_t arg1_uint64x1_t;\n+\n+  out_uint64x1_t = vadd_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n+}\n+"}, {"sha": "8435a7b74c0173bf7be126f5484c1e3cdc166e3e", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint8x8_t = vadd_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vadd\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8021483d6aa4ffb63e4aa3b942ce480f8ae25358", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddws16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddws16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddws16 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_int32x4_t = vaddw_s16 (arg0_int32x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddw\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5691af3df9a18db8e595e4cbd4bb032cc82ab7cc", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddws32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddws32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddws32 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  int64x2_t arg0_int64x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_int64x2_t = vaddw_s32 (arg0_int64x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddw\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0a774c059458cd03f19d3e42f3fb6e438e821ab9", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddws8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddws8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddws8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddws8 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_int16x8_t = vaddw_s8 (arg0_int16x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddw\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a7cfc65cbc3ab900dce1e0dd4efc6a67728ea37c", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddwu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddwu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddwu16 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint32x4_t = vaddw_u16 (arg0_uint32x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddw\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "40f86f1454fe371c6e0f8c19febdb7a9c525183c", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddwu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddwu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddwu32 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint64x2_t = vaddw_u32 (arg0_uint64x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddw\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "bb6d0fbdbe363728127270d905ce6ba8f7508adc", "filename": "gcc/testsuite/gcc.target/arm/neon/vaddwu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvaddwu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vaddwu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vaddwu8 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint16x8_t = vaddw_u8 (arg0_uint16x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddw\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "bfc9a214da71dbf1953cf6205938f8f1954b6c32", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandQs16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_int16x8_t = vandq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "feeca5641244f5e6c61a2be77cdff1fa212dfde1", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandQs32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_int32x4_t = vandq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6c67c1424453bd507f7a4f395b7759e5b650f497", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQs64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandQs64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandQs64 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  int64x2_t arg0_int64x2_t;\n+  int64x2_t arg1_int64x2_t;\n+\n+  out_int64x2_t = vandq_s64 (arg0_int64x2_t, arg1_int64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "7411c335822d8fa3e8ec82fe53eb6dc5121f4925", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandQs8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_int8x16_t = vandq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "710312d64aade652aca86b20b265825004992c22", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint16x8_t = vandq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "64a956d19f2fc32876219b66cb07718b05edc0de", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint32x4_t = vandq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "832d83c7fb5d83b2eaf7afeb3a9886bdc3c9cf54", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandQu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandQu64 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  uint64x2_t arg1_uint64x2_t;\n+\n+  out_uint64x2_t = vandq_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4820aa40573fc4280daae45f733af809d4ac3c30", "filename": "gcc/testsuite/gcc.target/arm/neon/vandQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvandQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+\n+  out_uint8x16_t = vandq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0e17817b832a537931cc7a06b9271eba8f19e279", "filename": "gcc/testsuite/gcc.target/arm/neon/vands16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vands16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vands16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_int16x4_t = vand_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d56529e96f1fc8131f0160486837dbf475698539", "filename": "gcc/testsuite/gcc.target/arm/neon/vands32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vands32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vands32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_int32x2_t = vand_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "164159419c17246c4d41a3145b65eaab99c8a993", "filename": "gcc/testsuite/gcc.target/arm/neon/vands64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vands64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vands64 (void)\n+{\n+  int64x1_t out_int64x1_t;\n+  int64x1_t arg0_int64x1_t;\n+  int64x1_t arg1_int64x1_t;\n+\n+  out_int64x1_t = vand_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+}\n+"}, {"sha": "961e3d83fda8c475be2b422e59ee6755ae2350c9", "filename": "gcc/testsuite/gcc.target/arm/neon/vands8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvands8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vands8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vands8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_int8x8_t = vand_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d60a0a15ee3a58a403fa88bae58a64e5d91616d7", "filename": "gcc/testsuite/gcc.target/arm/neon/vandu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint16x4_t = vand_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "79f57736a9d95e7e7ee88df0544408d26b351b80", "filename": "gcc/testsuite/gcc.target/arm/neon/vandu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint32x2_t = vand_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "40172e9612882af7ec646961391617ae3f3c31b7", "filename": "gcc/testsuite/gcc.target/arm/neon/vandu64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vandu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandu64 (void)\n+{\n+  uint64x1_t out_uint64x1_t;\n+  uint64x1_t arg0_uint64x1_t;\n+  uint64x1_t arg1_uint64x1_t;\n+\n+  out_uint64x1_t = vand_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n+}\n+"}, {"sha": "1244ecace2ace14ed4b512bc64fa2fcf6c3fd591", "filename": "gcc/testsuite/gcc.target/arm/neon/vandu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvandu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vandu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vandu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint8x8_t = vand_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vand\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ff6625525ffedae9fd9f456b6e491131212c5c96", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+int16x8_t out_int16x8_t;\n+int16x8_t arg0_int16x8_t;\n+int16x8_t arg1_int16x8_t;\n+void test_vbicQs16 (void)\n+{\n+\n+  out_int16x8_t = vbicq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4a691bd5915bf69d62e489fe58e9241ef74da797", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t out_int32x4_t;\n+int32x4_t arg0_int32x4_t;\n+int32x4_t arg1_int32x4_t;\n+void test_vbicQs32 (void)\n+{\n+\n+  out_int32x4_t = vbicq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "403098f5fd054a9bba8ca3692fb507817fb3600b", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicQs64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t out_int64x2_t;\n+int64x2_t arg0_int64x2_t;\n+int64x2_t arg1_int64x2_t;\n+void test_vbicQs64 (void)\n+{\n+\n+  out_int64x2_t = vbicq_s64 (arg0_int64x2_t, arg1_int64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "576769c3cd5fec9eb99e2b011828b161ede9df5a", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+int8x16_t out_int8x16_t;\n+int8x16_t arg0_int8x16_t;\n+int8x16_t arg1_int8x16_t;\n+void test_vbicQs8 (void)\n+{\n+\n+  out_int8x16_t = vbicq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3504a2685c847941458e52009aeb509885d1584d", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+uint16x8_t out_uint16x8_t;\n+uint16x8_t arg0_uint16x8_t;\n+uint16x8_t arg1_uint16x8_t;\n+void test_vbicQu16 (void)\n+{\n+\n+  out_uint16x8_t = vbicq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "993280b2be3cf0fc191c9c90efd355a5cca2246c", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+uint32x4_t out_uint32x4_t;\n+uint32x4_t arg0_uint32x4_t;\n+uint32x4_t arg1_uint32x4_t;\n+void test_vbicQu32 (void)\n+{\n+\n+  out_uint32x4_t = vbicq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fb27c6292084c7faa102dface94e5490370b7411", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicQu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+uint64x2_t out_uint64x2_t;\n+uint64x2_t arg0_uint64x2_t;\n+uint64x2_t arg1_uint64x2_t;\n+void test_vbicQu64 (void)\n+{\n+\n+  out_uint64x2_t = vbicq_u64 (arg0_uint64x2_t, arg1_uint64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "65f0e403304403fea3dcf99b354ba438df9d8ed9", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbicQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+uint8x16_t out_uint8x16_t;\n+uint8x16_t arg0_uint8x16_t;\n+uint8x16_t arg1_uint8x16_t;\n+void test_vbicQu8 (void)\n+{\n+\n+  out_uint8x16_t = vbicq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "95aed5b08df51f91af19abeb8d6e15006c206216", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbics16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+int16x4_t out_int16x4_t;\n+int16x4_t arg0_int16x4_t;\n+int16x4_t arg1_int16x4_t;\n+void test_vbics16 (void)\n+{\n+\n+  out_int16x4_t = vbic_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "925d7483c1d255d0f813d82063ac625062bccdc7", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbics32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x2_t out_int32x2_t;\n+int32x2_t arg0_int32x2_t;\n+int32x2_t arg1_int32x2_t;\n+void test_vbics32 (void)\n+{\n+\n+  out_int32x2_t = vbic_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c7ab6cbb0068727ead146096a92071f79230058d", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vbics64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x1_t out_int64x1_t;\n+int64x1_t arg0_int64x1_t;\n+int64x1_t arg1_int64x1_t;\n+void test_vbics64 (void)\n+{\n+\n+  out_int64x1_t = vbic_s64 (arg0_int64x1_t, arg1_int64x1_t);\n+}\n+"}, {"sha": "22e2a12fe86eb42cccc9bac3a6b83702ce70bab0", "filename": "gcc/testsuite/gcc.target/arm/neon/vbics8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbics8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbics8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+int8x8_t out_int8x8_t;\n+int8x8_t arg0_int8x8_t;\n+int8x8_t arg1_int8x8_t;\n+void test_vbics8 (void)\n+{\n+\n+  out_int8x8_t = vbic_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cfa96c10a4a69d59069a2feeb364ee6695457d48", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+uint16x4_t out_uint16x4_t;\n+uint16x4_t arg0_uint16x4_t;\n+uint16x4_t arg1_uint16x4_t;\n+void test_vbicu16 (void)\n+{\n+\n+  out_uint16x4_t = vbic_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "65f49a53bfe98fa07477fd920cda80998872b58f", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+uint32x2_t out_uint32x2_t;\n+uint32x2_t arg0_uint32x2_t;\n+uint32x2_t arg1_uint32x2_t;\n+void test_vbicu32 (void)\n+{\n+\n+  out_uint32x2_t = vbic_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "89c8a5e1748cb0240fa16b9249ef843c6ccfba51", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu64.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vbicu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+uint64x1_t out_uint64x1_t;\n+uint64x1_t arg0_uint64x1_t;\n+uint64x1_t arg1_uint64x1_t;\n+void test_vbicu64 (void)\n+{\n+\n+  out_uint64x1_t = vbic_u64 (arg0_uint64x1_t, arg1_uint64x1_t);\n+}\n+"}, {"sha": "930eb36acf431d16a3ee5733cbc177f0a5d09254", "filename": "gcc/testsuite/gcc.target/arm/neon/vbicu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbicu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vbicu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O2\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+uint8x8_t out_uint8x8_t;\n+uint8x8_t arg0_uint8x8_t;\n+uint8x8_t arg1_uint8x8_t;\n+void test_vbicu8 (void)\n+{\n+\n+  out_uint8x8_t = vbic_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vbic\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6db03f35a6206259cc5625e63eff46b27b8e453e", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQf32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+  float32x4_t arg2_float32x4_t;\n+\n+  out_float32x4_t = vbslq_f32 (arg0_uint32x4_t, arg1_float32x4_t, arg2_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0c0c88dd1cfa7313c83c77c7c66a760bc0dd31bf", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQp16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQp16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQp16 (void)\n+{\n+  poly16x8_t out_poly16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  poly16x8_t arg1_poly16x8_t;\n+  poly16x8_t arg2_poly16x8_t;\n+\n+  out_poly16x8_t = vbslq_p16 (arg0_uint16x8_t, arg1_poly16x8_t, arg2_poly16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "50d8180b17af3cf9501fcece25c30f64ab2a8125", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQp64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQp64 (void)\n+{\n+  poly64x2_t out_poly64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  poly64x2_t arg1_poly64x2_t;\n+  poly64x2_t arg2_poly64x2_t;\n+\n+  out_poly64x2_t = vbslq_p64 (arg0_uint64x2_t, arg1_poly64x2_t, arg2_poly64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2d09700186c9010cc2bf4cc23cfecd03c5d0ca2f", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQp8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQp8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQp8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQp8 (void)\n+{\n+  poly8x16_t out_poly8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  poly8x16_t arg1_poly8x16_t;\n+  poly8x16_t arg2_poly8x16_t;\n+\n+  out_poly8x16_t = vbslq_p8 (arg0_uint8x16_t, arg1_poly8x16_t, arg2_poly8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "28031941b62edfd818933e1031ded23cb91c35cb", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQs16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQs16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+  int16x8_t arg2_int16x8_t;\n+\n+  out_int16x8_t = vbslq_s16 (arg0_uint16x8_t, arg1_int16x8_t, arg2_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "637895d1c496a5675e14243519094e107caeb82f", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQs32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQs32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+  int32x4_t arg2_int32x4_t;\n+\n+  out_int32x4_t = vbslq_s32 (arg0_uint32x4_t, arg1_int32x4_t, arg2_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d329d194392aa7f0ae9df83b38b594671592a94a", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQs64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQs64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQs64 (void)\n+{\n+  int64x2_t out_int64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  int64x2_t arg1_int64x2_t;\n+  int64x2_t arg2_int64x2_t;\n+\n+  out_int64x2_t = vbslq_s64 (arg0_uint64x2_t, arg1_int64x2_t, arg2_int64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5e78bbcf09ed20c5f3badfa6ecfcaf1eed48e348", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQs8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQs8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+  int8x16_t arg2_int8x16_t;\n+\n+  out_int8x16_t = vbslq_s8 (arg0_uint8x16_t, arg1_int8x16_t, arg2_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2446349a294a855f11e8f6f11b11f695fabef2fe", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQu16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+  uint16x8_t arg2_uint16x8_t;\n+\n+  out_uint16x8_t = vbslq_u16 (arg0_uint16x8_t, arg1_uint16x8_t, arg2_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a8c32a429e8878cc4017cfd78d5521baa7d4f40a", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQu32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+  uint32x4_t arg2_uint32x4_t;\n+\n+  out_uint32x4_t = vbslq_u32 (arg0_uint32x4_t, arg1_uint32x4_t, arg2_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fd00ae87c3112e45537ed6f6883b164b9e53cb01", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQu64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQu64 (void)\n+{\n+  uint64x2_t out_uint64x2_t;\n+  uint64x2_t arg0_uint64x2_t;\n+  uint64x2_t arg1_uint64x2_t;\n+  uint64x2_t arg2_uint64x2_t;\n+\n+  out_uint64x2_t = vbslq_u64 (arg0_uint64x2_t, arg1_uint64x2_t, arg2_uint64x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "123584360f20a059c79963d9d47c32ba887996b8", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslQu8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvbslQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+  uint8x16_t arg2_uint8x16_t;\n+\n+  out_uint8x16_t = vbslq_u8 (arg0_uint8x16_t, arg1_uint8x16_t, arg2_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "345f1c89dff9dd766f26e5d9a58d8e7834f949ec", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslf32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+  float32x2_t arg2_float32x2_t;\n+\n+  out_float32x2_t = vbsl_f32 (arg0_uint32x2_t, arg1_float32x2_t, arg2_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6ce42b31eb76cf18c87dd5fee8f739f8bccf25e0", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslp16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslp16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslp16 (void)\n+{\n+  poly16x4_t out_poly16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  poly16x4_t arg1_poly16x4_t;\n+  poly16x4_t arg2_poly16x4_t;\n+\n+  out_poly16x4_t = vbsl_p16 (arg0_uint16x4_t, arg1_poly16x4_t, arg2_poly16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0ff4cfc3833da66a04f74f6bb7464a1f6f1c2276", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslp64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslp64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crypto_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crypto } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslp64 (void)\n+{\n+  poly64x1_t out_poly64x1_t;\n+  uint64x1_t arg0_uint64x1_t;\n+  poly64x1_t arg1_poly64x1_t;\n+  poly64x1_t arg2_poly64x1_t;\n+\n+  out_poly64x1_t = vbsl_p64 (arg0_uint64x1_t, arg1_poly64x1_t, arg2_poly64x1_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6e1f1871bf84e393c856bfc592bfb9803d74529c", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslp8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslp8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslp8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslp8 (void)\n+{\n+  poly8x8_t out_poly8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  poly8x8_t arg1_poly8x8_t;\n+  poly8x8_t arg2_poly8x8_t;\n+\n+  out_poly8x8_t = vbsl_p8 (arg0_uint8x8_t, arg1_poly8x8_t, arg2_poly8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3368f99c39144e2d42095142037ac7d9a30c8945", "filename": "gcc/testsuite/gcc.target/arm/neon/vbsls16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbsls16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbsls16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+  int16x4_t arg2_int16x4_t;\n+\n+  out_int16x4_t = vbsl_s16 (arg0_uint16x4_t, arg1_int16x4_t, arg2_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "40bc0ad1b8ba94243be458086b4601ce55876c07", "filename": "gcc/testsuite/gcc.target/arm/neon/vbsls32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbsls32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbsls32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+  int32x2_t arg2_int32x2_t;\n+\n+  out_int32x2_t = vbsl_s32 (arg0_uint32x2_t, arg1_int32x2_t, arg2_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8249a62d0c13a30c958c240655ca9e9cc3f6f0b8", "filename": "gcc/testsuite/gcc.target/arm/neon/vbsls64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbsls64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbsls64 (void)\n+{\n+  int64x1_t out_int64x1_t;\n+  uint64x1_t arg0_uint64x1_t;\n+  int64x1_t arg1_int64x1_t;\n+  int64x1_t arg2_int64x1_t;\n+\n+  out_int64x1_t = vbsl_s64 (arg0_uint64x1_t, arg1_int64x1_t, arg2_int64x1_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "914a1d6871b26e7bd5fc204be81620abbec4c259", "filename": "gcc/testsuite/gcc.target/arm/neon/vbsls8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbsls8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbsls8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbsls8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+  int8x8_t arg2_int8x8_t;\n+\n+  out_int8x8_t = vbsl_s8 (arg0_uint8x8_t, arg1_int8x8_t, arg2_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "7106ffcf045159f40745656a248600c2f088b593", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslu16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+  uint16x4_t arg2_uint16x4_t;\n+\n+  out_uint16x4_t = vbsl_u16 (arg0_uint16x4_t, arg1_uint16x4_t, arg2_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f6922e6f6758562681e4ad0c7e104942122c2b34", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslu32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+  uint32x2_t arg2_uint32x2_t;\n+\n+  out_uint32x2_t = vbsl_u32 (arg0_uint32x2_t, arg1_uint32x2_t, arg2_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "724fdb32dda42807141b30b5e8b90aa8a8a0cf74", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslu64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu64.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslu64' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslu64 (void)\n+{\n+  uint64x1_t out_uint64x1_t;\n+  uint64x1_t arg0_uint64x1_t;\n+  uint64x1_t arg1_uint64x1_t;\n+  uint64x1_t arg2_uint64x1_t;\n+\n+  out_uint64x1_t = vbsl_u64 (arg0_uint64x1_t, arg1_uint64x1_t, arg2_uint64x1_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a27bc640bc404ba0cf58220a5fa85e40e33e2724", "filename": "gcc/testsuite/gcc.target/arm/neon/vbslu8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvbslu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vbslu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vbslu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+  uint8x8_t arg2_uint8x8_t;\n+\n+  out_uint8x8_t = vbsl_u8 (arg0_uint8x8_t, arg1_uint8x8_t, arg2_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"((vbsl)|(vbit)|(vbif))\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "48e8e790424b35a414c3b5264bd1a7bb2e02c352", "filename": "gcc/testsuite/gcc.target/arm/neon/vcageQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcageQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcageQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcageQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcageQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcageQf32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_uint32x4_t = vcageq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vacge\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "52084e7e7111d57283a55e337fa1723a579bc799", "filename": "gcc/testsuite/gcc.target/arm/neon/vcagef32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagef32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagef32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagef32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcagef32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcagef32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_uint32x2_t = vcage_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vacge\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e7290ed807f2575f45ec0dd01dc42cf0ea3ae3d4", "filename": "gcc/testsuite/gcc.target/arm/neon/vcagtQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcagtQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcagtQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcagtQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcagtQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcagtQf32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_uint32x4_t = vcagtq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vacgt\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ce8969bdc888b0044fad860a1b4790e592c9979f", "filename": "gcc/testsuite/gcc.target/arm/neon/vcagtf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagtf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagtf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcagtf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcagtf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcagtf32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_uint32x2_t = vcagt_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vacgt\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b429bba7eab4ef5cd5cde2ffb69dd4917c661895", "filename": "gcc/testsuite/gcc.target/arm/neon/vcaleQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaleQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaleQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaleQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcaleQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcaleQf32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_uint32x4_t = vcaleq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vacge\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a8340655b459eab4d9bd616be867c774fd75e83b", "filename": "gcc/testsuite/gcc.target/arm/neon/vcalef32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcalef32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcalef32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcalef32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcalef32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcalef32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_uint32x2_t = vcale_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vacge\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "dbebe489e63c5545b38a9356dc1b2112b3f80ef2", "filename": "gcc/testsuite/gcc.target/arm/neon/vcaltQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaltQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaltQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcaltQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcaltQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcaltQf32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_uint32x4_t = vcaltq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vacgt\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "004edc6e0ade895bf82d5c94be8f129646a5333d", "filename": "gcc/testsuite/gcc.target/arm/neon/vcaltf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcaltf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcaltf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcaltf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcaltf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcaltf32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_uint32x2_t = vcalt_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vacgt\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6a537219c14934ac3f82283b40ae7f856aea13e1", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqQf32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_uint32x4_t = vceqq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "556fbdf35bede76e65d4393dbe77096588b6cf79", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQp8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQp8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQp8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQp8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqQp8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqQp8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  poly8x16_t arg0_poly8x16_t;\n+  poly8x16_t arg1_poly8x16_t;\n+\n+  out_uint8x16_t = vceqq_p8 (arg0_poly8x16_t, arg1_poly8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cfbf64a48f2fded62fb4025de4ff1e2da93a710b", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqQs16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_uint16x8_t = vceqq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1b75729f5940e2035ba769d1b6a5bea5d799d8d8", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqQs32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_uint32x4_t = vceqq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d6d6d30dc54a54993f34cae4f5ff711db4fe07f8", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqQs8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_uint8x16_t = vceqq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "6f33d9d971263b73abad8c6672756d6c838c11ec", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint16x8_t = vceqq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "df2d47b7f8c8806bc0aaf8b1da2678a3a90d372d", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint32x4_t = vceqq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "80d56ffe4245e6290aab72a70acfc5182f856a8c", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvceqQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+\n+  out_uint8x16_t = vceqq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "046a5052004f64e74477962bd667c37c3076aee7", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqf32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_uint32x2_t = vceq_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5758ebaf81a9a829662c9efc8dea3e3628b3bacc", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqp8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqp8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqp8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqp8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqp8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqp8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  poly8x8_t arg0_poly8x8_t;\n+  poly8x8_t arg1_poly8x8_t;\n+\n+  out_uint8x8_t = vceq_p8 (arg0_poly8x8_t, arg1_poly8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "11337b0e173f3853dabbaa7f38a19633d4c0f9d6", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqs16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_uint16x4_t = vceq_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "506c9800d36e92b5476f1a3a0d5892d0d7d33d4a", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqs32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_uint32x2_t = vceq_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c76e2b4b102f6d317e288cfdb856d34e512bdbbd", "filename": "gcc/testsuite/gcc.target/arm/neon/vceqs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvceqs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vceqs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vceqs8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_uint8x8_t = vceq_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "dda7ab79798e55b1008eb3f6fbf4a0791d4d27d6", "filename": "gcc/testsuite/gcc.target/arm/neon/vcequ16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcequ16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcequ16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint16x4_t = vceq_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "4ee8c5f6a02919a41a53c1c53da0e9c214332696", "filename": "gcc/testsuite/gcc.target/arm/neon/vcequ32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcequ32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcequ32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint32x2_t = vceq_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "60134cf63cbe3c3733cd1b83af829bbb4cf17750", "filename": "gcc/testsuite/gcc.target/arm/neon/vcequ8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcequ8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcequ8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcequ8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint8x8_t = vceq_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vceq\\.i8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "93a5e3ca86d418a728190409439298aa27af4c3e", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgeQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgeQf32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_uint32x4_t = vcgeq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f60344f4f3d75d60d2cf2c886fbe6f70114d4504", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgeQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgeQs16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_uint16x8_t = vcgeq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1d8caccfa71fef3b8c0452d3175ab7efd6707db2", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgeQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgeQs32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_uint32x4_t = vcgeq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b5bb84e2b41242321b810df54eb05a7409d316dd", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgeQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgeQs8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_uint8x16_t = vcgeq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "62f060f8f3d09f585345cad9c90b2343d3f92823", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgeQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgeQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint16x8_t = vcgeq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a86dfa216d44586c3910d11f5817407618deda48", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgeQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgeQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint32x4_t = vcgeq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fbf678c175bd044f5a9a87dc72fbf8c15c0115e8", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgeQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgeQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgeQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+\n+  out_uint8x16_t = vcgeq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f12259aecc240434c44c435d3b1927e8a8c3724e", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgef32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgef32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgef32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgef32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgef32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgef32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_uint32x2_t = vcge_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d420dec6094212357283f61e2aaa48c20140bb1c", "filename": "gcc/testsuite/gcc.target/arm/neon/vcges16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcges16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcges16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_uint16x4_t = vcge_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c4e731588c642880bbfd8ee0abc0b68462de4403", "filename": "gcc/testsuite/gcc.target/arm/neon/vcges32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcges32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcges32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_uint32x2_t = vcge_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0484e247748cf6c0d56e3bbb49d122ae4e78d0a3", "filename": "gcc/testsuite/gcc.target/arm/neon/vcges8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcges8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcges8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcges8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_uint8x8_t = vcge_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "89874e040aa81a8175b643d3b3b5faec97edbd32", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgeu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgeu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint16x4_t = vcge_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cb907fd3fa5c6b0460232b46630366c612f4083e", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgeu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgeu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint32x2_t = vcge_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "01af80920b7fff71f7a71d8e323baeebedb9f9a0", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgeu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgeu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgeu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgeu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint8x8_t = vcge_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ab5f92d6e8a18a9d713d2a8c6c8102f1d545f51a", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtQf32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_uint32x4_t = vcgtq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5e966f74edb295f4105703afaeca8b2e3e059cae", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtQs16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_uint16x8_t = vcgtq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3db4176682514834dfab2f4a3aa743675e470e82", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtQs32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_uint32x4_t = vcgtq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a092e21927be063dfadf43e495c1b8af747fe2bf", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtQs8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_uint8x16_t = vcgtq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "2239331c40d4375972db51f852c99a04825fc136", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint16x8_t = vcgtq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "430f3ca07be6d2c290ccb613793bd56220075244", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint32x4_t = vcgtq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "bb38a0ec54d02865796666382df7ef81c5f3c037", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcgtQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+\n+  out_uint8x16_t = vcgtq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "171780725cb9072e46395486f01a134c552ed33d", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtf32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_uint32x2_t = vcgt_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "05088830c6bb609c8db66c4b1b1bbb5a3a946ff0", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgts16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgts16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgts16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_uint16x4_t = vcgt_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "09dc2b5ca4a903249b96fd5d5be689464158abee", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgts32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgts32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgts32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_uint32x2_t = vcgt_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "1cb6b028bc4dca23e71a38951edc68f60a0c4d04", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgts8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgts8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgts8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgts8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_uint8x8_t = vcgt_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "0c76d53e06edeb1efa3cd51b3df060c60c30e579", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint16x4_t = vcgt_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "ae6aae5a27c0b8739a22fce7789d91db89fc24a7", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint32x2_t = vcgt_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3ed6bcc19f50aa4a3a8316f701a49f7ea4f6b1ec", "filename": "gcc/testsuite/gcc.target/arm/neon/vcgtu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcgtu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcgtu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcgtu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint8x8_t = vcgt_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "cc24025fc309e751e5f6bf5ee6a9b354fd47416b", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcleQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcleQf32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_uint32x4_t = vcleq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e4efae94673177eafa354523c776728cbca0e4ee", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcleQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcleQs16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_uint16x8_t = vcleq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a432421a7c298ba81c3822932da237b6a07ff042", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcleQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcleQs32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_uint32x4_t = vcleq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a6d2d779c016330af27e5b1a5f44c8f524e7bfef", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcleQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcleQs8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_uint8x16_t = vcleq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "72dccdc0acf15344b4b97226be2db063388fced0", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcleQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcleQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint16x8_t = vcleq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c057a4f252c4b8ac7c463a5d285ced6fa7dba91c", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcleQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcleQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint32x4_t = vcleq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "618232e3be8713d94c48a6a37f20d6559fe67f53", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcleQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcleQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcleQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+\n+  out_uint8x16_t = vcleq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e4ef97382b7a4b205a51cb87a65eb44f8cfe3f47", "filename": "gcc/testsuite/gcc.target/arm/neon/vclef32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclef32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclef32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclef32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vclef32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vclef32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_uint32x2_t = vcle_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "8b835b3b4ce102a788b2dea39df0880c79663e0f", "filename": "gcc/testsuite/gcc.target/arm/neon/vcles16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcles16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcles16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_uint16x4_t = vcle_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f5035d2cbcc7aac1c5b84952d807bb413a974c62", "filename": "gcc/testsuite/gcc.target/arm/neon/vcles32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcles32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcles32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+  int32x2_t arg1_int32x2_t;\n+\n+  out_uint32x2_t = vcle_s32 (arg0_int32x2_t, arg1_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "65b5962190c2f8891ce28ba0418c244db2d3bb21", "filename": "gcc/testsuite/gcc.target/arm/neon/vcles8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcles8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcles8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcles8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+  int8x8_t arg1_int8x8_t;\n+\n+  out_uint8x8_t = vcle_s8 (arg0_int8x8_t, arg1_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a51824173c7be7034905a8d5ea443042595a584e", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcleu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcleu16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  uint16x4_t arg0_uint16x4_t;\n+  uint16x4_t arg1_uint16x4_t;\n+\n+  out_uint16x4_t = vcle_u16 (arg0_uint16x4_t, arg1_uint16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f1d83e893acb3afff74909cfa84435ac57d13a08", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcleu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcleu32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  uint32x2_t arg0_uint32x2_t;\n+  uint32x2_t arg1_uint32x2_t;\n+\n+  out_uint32x2_t = vcle_u32 (arg0_uint32x2_t, arg1_uint32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "3a394543281bccc04267fee8155d1c32a4887d32", "filename": "gcc/testsuite/gcc.target/arm/neon/vcleu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcleu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcleu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcleu8 (void)\n+{\n+  uint8x8_t out_uint8x8_t;\n+  uint8x8_t arg0_uint8x8_t;\n+  uint8x8_t arg1_uint8x8_t;\n+\n+  out_uint8x8_t = vcle_u8 (arg0_uint8x8_t, arg1_uint8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcge\\.u8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5c878526259b2d38899c4295ffffe49b89fac575", "filename": "gcc/testsuite/gcc.target/arm/neon/vclsQs16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vclsQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vclsQs16 (void)\n+{\n+  int16x8_t out_int16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+\n+  out_int16x8_t = vclsq_s16 (arg0_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "c44d5a7d1c6ef96498f1391b9fee5e9c6d2eac2f", "filename": "gcc/testsuite/gcc.target/arm/neon/vclsQs32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vclsQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vclsQs32 (void)\n+{\n+  int32x4_t out_int32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+\n+  out_int32x4_t = vclsq_s32 (arg0_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "a4c7cfe17872c06af3cbae3a6d7f516af27b2c61", "filename": "gcc/testsuite/gcc.target/arm/neon/vclsQs8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvclsQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vclsQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vclsQs8 (void)\n+{\n+  int8x16_t out_int8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+\n+  out_int8x16_t = vclsq_s8 (arg0_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "5b43faec23a01ae6ca09bedfa4284e04b8f04db0", "filename": "gcc/testsuite/gcc.target/arm/neon/vclss16.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vclss16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vclss16 (void)\n+{\n+  int16x4_t out_int16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+\n+  out_int16x4_t = vcls_s16 (arg0_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "e60c1c0957a2b8dda505485add4c337904e11869", "filename": "gcc/testsuite/gcc.target/arm/neon/vclss32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vclss32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vclss32 (void)\n+{\n+  int32x2_t out_int32x2_t;\n+  int32x2_t arg0_int32x2_t;\n+\n+  out_int32x2_t = vcls_s32 (arg0_int32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls\\.s32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "272ef8d039d5382eb3b81daf148b7ee3993a9e85", "filename": "gcc/testsuite/gcc.target/arm/neon/vclss8.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclss8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,19 @@\n+/* Test the `vclss8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vclss8 (void)\n+{\n+  int8x8_t out_int8x8_t;\n+  int8x8_t arg0_int8x8_t;\n+\n+  out_int8x8_t = vcls_s8 (arg0_int8x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcls\\.s8\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "95234124339a6bcf0f992ac858f69652982ec535", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcltQf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcltQf32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+  float32x4_t arg1_float32x4_t;\n+\n+  out_uint32x4_t = vcltq_f32 (arg0_float32x4_t, arg1_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "fc67ae1ae9037d9d863ea5ac580f5ac466841dfc", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQs16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcltQs16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcltQs16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  int16x8_t arg0_int16x8_t;\n+  int16x8_t arg1_int16x8_t;\n+\n+  out_uint16x8_t = vcltq_s16 (arg0_int16x8_t, arg1_int16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.s16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "58da373a455b518733b48dc9495afecf820d71fa", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQs32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcltQs32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcltQs32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  int32x4_t arg0_int32x4_t;\n+  int32x4_t arg1_int32x4_t;\n+\n+  out_uint32x4_t = vcltq_s32 (arg0_int32x4_t, arg1_int32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.s32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "800a50220c941f716706b70bddf03b03c8376899", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQs8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQs8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcltQs8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcltQs8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  int8x16_t arg0_int8x16_t;\n+  int8x16_t arg1_int8x16_t;\n+\n+  out_uint8x16_t = vcltq_s8 (arg0_int8x16_t, arg1_int8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.s8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "b6435de6b3f4681a394cb534613af1d73d60c0b6", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQu16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcltQu16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcltQu16 (void)\n+{\n+  uint16x8_t out_uint16x8_t;\n+  uint16x8_t arg0_uint16x8_t;\n+  uint16x8_t arg1_uint16x8_t;\n+\n+  out_uint16x8_t = vcltq_u16 (arg0_uint16x8_t, arg1_uint16x8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.u16\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "43205b77ec3e345f152138c7843c4a2e7ed7b8ea", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQu32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcltQu32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcltQu32 (void)\n+{\n+  uint32x4_t out_uint32x4_t;\n+  uint32x4_t arg0_uint32x4_t;\n+  uint32x4_t arg1_uint32x4_t;\n+\n+  out_uint32x4_t = vcltq_u32 (arg0_uint32x4_t, arg1_uint32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.u32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "d65a8259f00c71fc8c8d9847f80220a8b42451f3", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltQu8.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvcltQu8.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcltQu8' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcltQu8 (void)\n+{\n+  uint8x16_t out_uint8x16_t;\n+  uint8x16_t arg0_uint8x16_t;\n+  uint8x16_t arg1_uint8x16_t;\n+\n+  out_uint8x16_t = vcltq_u8 (arg0_uint8x16_t, arg1_uint8x16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.u8\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "f18e000c56bfcdc31dc4986b64df94e9e2dd2c38", "filename": "gcc/testsuite/gcc.target/arm/neon/vcltf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcltf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcltf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvcltf32.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vcltf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vcltf32 (void)\n+{\n+  uint32x2_t out_uint32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+  float32x2_t arg1_float32x2_t;\n+\n+  out_uint32x2_t = vclt_f32 (arg0_float32x2_t, arg1_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}, {"sha": "115675ea850e64151645eab1ff75c0803215ec83", "filename": "gcc/testsuite/gcc.target/arm/neon/vclts16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclts16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f215e0f07c33e511ed478152330451ede1e6285/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclts16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvclts16.c?ref=8f215e0f07c33e511ed478152330451ede1e6285", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vclts16' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vclts16 (void)\n+{\n+  uint16x4_t out_uint16x4_t;\n+  int16x4_t arg0_int16x4_t;\n+  int16x4_t arg1_int16x4_t;\n+\n+  out_uint16x4_t = vclt_s16 (arg0_int16x4_t, arg1_int16x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vcgt\\.s16\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */"}]}