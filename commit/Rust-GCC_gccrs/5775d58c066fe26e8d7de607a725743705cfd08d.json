{"sha": "5775d58c066fe26e8d7de607a725743705cfd08d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3NWQ1OGMwNjZmZTI2ZThkN2RlNjA3YTcyNTc0MzcwNWNmZDA4ZA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-06-11T20:42:26Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-06-11T20:42:26Z"}, "message": "[ARM] length pop* pattern in epilogue correctly\n\n\tPR target/71061\n\t* config/arm/arm-protos.h (arm_attr_length_pop_multi): New declaration.\n\t* config/arm/arm.c (arm_attr_length_pop_multi): New function to return\n\tlength for pop patterns.\n\t(arm_attr_length_push_multi): Update comments.\n\t* config/arm/arm.md (*load_multiple_with_writeback): Set \"length\"\n\tattribute.\n\t(*pop_multiple_with_writeback_and_return): Likewise.\n\t(*pop_multiple_with_return): Likewise.\n\nFrom-SVN: r237331", "tree": {"sha": "13f9f0b62c517609fd6e7c120f28c37f6e02ec48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13f9f0b62c517609fd6e7c120f28c37f6e02ec48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5775d58c066fe26e8d7de607a725743705cfd08d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5775d58c066fe26e8d7de607a725743705cfd08d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5775d58c066fe26e8d7de607a725743705cfd08d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5775d58c066fe26e8d7de607a725743705cfd08d/comments", "author": null, "committer": null, "parents": [{"sha": "a0d66002539dcc75618868d902a44e11059b286a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0d66002539dcc75618868d902a44e11059b286a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0d66002539dcc75618868d902a44e11059b286a"}], "stats": {"total": 86, "additions": 82, "deletions": 4}, "files": [{"sha": "6266fb35712368ed9764512a93c60fa131c83504", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775d58c066fe26e8d7de607a725743705cfd08d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775d58c066fe26e8d7de607a725743705cfd08d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5775d58c066fe26e8d7de607a725743705cfd08d", "patch": "@@ -1,3 +1,15 @@\n+2016-06-11  Jiong Wang  <jiong.wang@arm.com>\n+\n+\tPR target/71061\n+\t* config/arm/arm-protos.h (arm_attr_length_pop_multi): New declaration.\n+\t* config/arm/arm.c (arm_attr_length_pop_multi): New function to return\n+\tlength for pop patterns.\n+\t(arm_attr_length_push_multi): Update comments.\n+\t* config/arm/arm.md (*load_multiple_with_writeback): Set \"length\"\n+\tattribute.\n+\t(*pop_multiple_with_writeback_and_return): Likewise.\n+\t(*pop_multiple_with_return): Likewise.\n+\n 2016-06-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR middle-end/71310"}, {"sha": "1ba2ebb630ea109fec35c3883561c13816478801", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775d58c066fe26e8d7de607a725743705cfd08d/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775d58c066fe26e8d7de607a725743705cfd08d/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=5775d58c066fe26e8d7de607a725743705cfd08d", "patch": "@@ -163,6 +163,7 @@ extern const char *arm_output_iwmmxt_shift_immediate (const char *, rtx *, bool)\n extern const char *arm_output_iwmmxt_tinsr (rtx *);\n extern unsigned int arm_sync_loop_insns (rtx , rtx *);\n extern int arm_attr_length_push_multi(rtx, rtx);\n+extern int arm_attr_length_pop_multi(rtx *, bool, bool);\n extern void arm_expand_compare_and_swap (rtx op[]);\n extern void arm_split_compare_and_swap (rtx op[]);\n extern void arm_split_atomic_op (enum rtx_code, rtx, rtx, rtx, rtx, rtx, rtx);"}, {"sha": "3503c15420ede88761a870c9ad5b8968cadb2d0e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775d58c066fe26e8d7de607a725743705cfd08d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775d58c066fe26e8d7de607a725743705cfd08d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5775d58c066fe26e8d7de607a725743705cfd08d", "patch": "@@ -27793,7 +27793,7 @@ arm_preferred_rename_class (reg_class_t rclass)\n     return NO_REGS;\n }\n \n-/* Compute the atrribute \"length\" of insn \"*push_multi\".\n+/* Compute the attribute \"length\" of insn \"*push_multi\".\n    So this function MUST be kept in sync with that insn pattern.  */\n int\n arm_attr_length_push_multi(rtx parallel_op, rtx first_op)\n@@ -27810,6 +27810,11 @@ arm_attr_length_push_multi(rtx parallel_op, rtx first_op)\n \n   /* Thumb2 mode.  */\n   regno = REGNO (first_op);\n+  /* For PUSH/STM under Thumb2 mode, we can use 16-bit encodings if the register\n+     list is 8-bit.  Normally this means all registers in the list must be\n+     LO_REGS, that is (R0 -R7).  If any HI_REGS used, then we must use 32-bit\n+     encodings.  There is one exception for PUSH that LR in HI_REGS can be used\n+     with 16-bit encoding.  */\n   hi_reg = (REGNO_REG_CLASS (regno) == HI_REGS) && (regno != LR_REGNUM);\n   for (i = 1; i < num_saves && !hi_reg; i++)\n     {\n@@ -27822,6 +27827,56 @@ arm_attr_length_push_multi(rtx parallel_op, rtx first_op)\n   return 4;\n }\n \n+/* Compute the attribute \"length\" of insn.  Currently, this function is used\n+   for \"*load_multiple_with_writeback\", \"*pop_multiple_with_return\" and\n+   \"*pop_multiple_with_writeback_and_return\".  OPERANDS is the toplevel PARALLEL\n+   rtx, RETURN_PC is true if OPERANDS contains return insn.  WRITE_BACK_P is\n+   true if OPERANDS contains insn which explicit updates base register.  */\n+\n+int\n+arm_attr_length_pop_multi (rtx *operands, bool return_pc, bool write_back_p)\n+{\n+  /* ARM mode.  */\n+  if (TARGET_ARM)\n+    return 4;\n+  /* Thumb1 mode.  */\n+  if (TARGET_THUMB1)\n+    return 2;\n+\n+  rtx parallel_op = operands[0];\n+  /* Initialize to elements number of PARALLEL.  */\n+  unsigned indx = XVECLEN (parallel_op, 0) - 1;\n+  /* Initialize the value to base register.  */\n+  unsigned regno = REGNO (operands[1]);\n+  /* Skip return and write back pattern.\n+     We only need register pop pattern for later analysis.  */\n+  unsigned first_indx = 0;\n+  first_indx += return_pc ? 1 : 0;\n+  first_indx += write_back_p ? 1 : 0;\n+\n+  /* A pop operation can be done through LDM or POP.  If the base register is SP\n+     and if it's with write back, then a LDM will be alias of POP.  */\n+  bool pop_p = (regno == SP_REGNUM && write_back_p);\n+  bool ldm_p = !pop_p;\n+\n+  /* Check base register for LDM.  */\n+  if (ldm_p && REGNO_REG_CLASS (regno) == HI_REGS)\n+    return 4;\n+\n+  /* Check each register in the list.  */\n+  for (; indx >= first_indx; indx--)\n+    {\n+      regno = REGNO (XEXP (XVECEXP (parallel_op, 0, indx), 0));\n+      /* For POP, PC in HI_REGS can be used with 16-bit encoding.  See similar\n+\t comment in arm_attr_length_push_multi.  */\n+      if (REGNO_REG_CLASS (regno) == HI_REGS\n+\t  && (regno != PC_REGNUM || ldm_p))\n+\treturn 4;\n+    }\n+\n+  return 2;\n+}\n+\n /* Compute the number of instructions emitted by output_move_double.  */\n int\n arm_count_output_move_double_insns (rtx *operands)"}, {"sha": "16498316bee9f19baff414885efe1e78191da047", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775d58c066fe26e8d7de607a725743705cfd08d/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775d58c066fe26e8d7de607a725743705cfd08d/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=5775d58c066fe26e8d7de607a725743705cfd08d", "patch": "@@ -10562,7 +10562,11 @@\n   }\n   \"\n   [(set_attr \"type\" \"load4\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set (attr \"length\")\n+\t(symbol_ref \"arm_attr_length_pop_multi (operands,\n+\t\t\t\t\t\t/*return_pc=*/false,\n+\t\t\t\t\t\t/*write_back_p=*/true)\"))]\n )\n \n ;; Pop with return (as used in epilogue RTL)\n@@ -10591,7 +10595,10 @@\n   }\n   \"\n   [(set_attr \"type\" \"load4\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set (attr \"length\")\n+\t(symbol_ref \"arm_attr_length_pop_multi (operands, /*return_pc=*/true,\n+\t\t\t\t\t\t/*write_back_p=*/true)\"))]\n )\n \n (define_insn \"*pop_multiple_with_return\"\n@@ -10611,7 +10618,10 @@\n   }\n   \"\n   [(set_attr \"type\" \"load4\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set (attr \"length\")\n+\t(symbol_ref \"arm_attr_length_pop_multi (operands, /*return_pc=*/true,\n+\t\t\t\t\t\t/*write_back_p=*/false)\"))]\n )\n \n ;; Load into PC and return"}]}