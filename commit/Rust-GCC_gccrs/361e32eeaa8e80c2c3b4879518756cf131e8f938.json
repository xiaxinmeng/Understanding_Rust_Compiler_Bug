{"sha": "361e32eeaa8e80c2c3b4879518756cf131e8f938", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYxZTMyZWVhYThlODBjMmMzYjQ4Nzk1MTg3NTZjZjEzMWU4ZjkzOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-09-28T16:05:32Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-09-28T16:05:32Z"}, "message": "libstdc++: Rearrange some range adaptors' data members\n\nSince the standard range adaptors are specified to derive from the empty\nclass view_base, having their first data member store the underlying\nview is suboptimal, for if the underlying view also derives from\nview_base then the two view_base subobjects will be adjacent; this\nprevents the compiler from applying the empty base optimization to elide\naway the storage for these two empty bases.\n\nThis patch improves the situation by declaring the _M_base data member\nlast instead of first in each range adaptor that has more than one data\nmember, so that the empty base optimization can apply in more cases.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (filter_view): Declare the data member\n\t_M_base last instead of first, and adjust constructors' member\n\tinitializer lists accordingly.\n\t(transform_view): Likewise.\n\t(take_view): Likewise.\n\t(take_while_view): Likewise.\n\t(drop_view): Likewise.\n\t(drop_while_view): Likewise.\n\t(join_view): Likewise.\n\t(split_view): Likewise (and tweak nearby formatting).\n\t(reverse_view): Likewise.\n\t* testsuite/std/ranges/adaptors/sizeof.cc: Update expected\n\tsizes.", "tree": {"sha": "cb8e49f29fe2d9db63d085bc704400e3a3925866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb8e49f29fe2d9db63d085bc704400e3a3925866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/361e32eeaa8e80c2c3b4879518756cf131e8f938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361e32eeaa8e80c2c3b4879518756cf131e8f938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/361e32eeaa8e80c2c3b4879518756cf131e8f938", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361e32eeaa8e80c2c3b4879518756cf131e8f938/comments", "author": null, "committer": null, "parents": [{"sha": "ea51fba504d05e94f7ac97e7f278652d684418b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea51fba504d05e94f7ac97e7f278652d684418b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea51fba504d05e94f7ac97e7f278652d684418b2"}], "stats": {"total": 67, "additions": 32, "deletions": 35}, "files": [{"sha": "7fd5d5110ed5ab7d0cff371fca111de4d47cf6ac", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361e32eeaa8e80c2c3b4879518756cf131e8f938/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361e32eeaa8e80c2c3b4879518756cf131e8f938/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=361e32eeaa8e80c2c3b4879518756cf131e8f938", "patch": "@@ -1250,16 +1250,16 @@ namespace views\n \t{ return __y.__equal(__x); }\n       };\n \n-      _Vp _M_base = _Vp();\n       [[no_unique_address]] __detail::__box<_Pred> _M_pred;\n       [[no_unique_address]] __detail::_CachedPosition<_Vp> _M_cached_begin;\n+      _Vp _M_base = _Vp();\n \n     public:\n       filter_view() = default;\n \n       constexpr\n       filter_view(_Vp __base, _Pred __pred)\n-\t: _M_base(std::move(__base)), _M_pred(std::move(__pred))\n+\t: _M_pred(std::move(__pred)), _M_base(std::move(__base))\n       { }\n \n       constexpr _Vp\n@@ -1588,15 +1588,15 @@ namespace views\n \t  friend _Sentinel<!_Const>;\n \t};\n \n-      _Vp _M_base = _Vp();\n       [[no_unique_address]] __detail::__box<_Fp> _M_fun;\n+      _Vp _M_base = _Vp();\n \n     public:\n       transform_view() = default;\n \n       constexpr\n       transform_view(_Vp __base, _Fp __fun)\n-\t: _M_base(std::move(__base)), _M_fun(std::move(__fun))\n+\t: _M_fun(std::move(__fun)), _M_base(std::move(__base))\n       { }\n \n       constexpr _Vp\n@@ -1695,15 +1695,15 @@ namespace views\n \t  friend _Sentinel<!_Const>;\n \t};\n \n-      _Vp _M_base = _Vp();\n       range_difference_t<_Vp> _M_count = 0;\n+      _Vp _M_base = _Vp();\n \n     public:\n       take_view() = default;\n \n       constexpr\n       take_view(_Vp base, range_difference_t<_Vp> __count)\n-\t: _M_base(std::move(base)), _M_count(std::move(__count))\n+\t: _M_count(std::move(__count)), _M_base(std::move(base))\n       { }\n \n       constexpr _Vp\n@@ -1842,17 +1842,16 @@ namespace views\n \t  friend _Sentinel<!_Const>;\n \t};\n \n-      _Vp _M_base = _Vp();\n       [[no_unique_address]] __detail::__box<_Pred> _M_pred;\n+      _Vp _M_base = _Vp();\n \n     public:\n       take_while_view() = default;\n \n       constexpr\n       take_while_view(_Vp base, _Pred __pred)\n-\t: _M_base(std::move(base)), _M_pred(std::move(__pred))\n-      {\n-      }\n+\t: _M_pred(std::move(__pred)), _M_base(std::move(base))\n+      { }\n \n       constexpr _Vp\n       base() const& requires copy_constructible<_Vp>\n@@ -1902,8 +1901,8 @@ namespace views\n     class drop_view : public view_interface<drop_view<_Vp>>\n     {\n     private:\n-      _Vp _M_base = _Vp();\n       range_difference_t<_Vp> _M_count = 0;\n+      _Vp _M_base = _Vp();\n \n       // ranges::next(begin(base), count, end(base)) is O(1) if _Vp satisfies\n       // both random_access_range and sized_range. Otherwise, cache its result.\n@@ -1919,7 +1918,7 @@ namespace views\n \n       constexpr\n       drop_view(_Vp __base, range_difference_t<_Vp> __count)\n-\t: _M_base(std::move(__base)), _M_count(__count)\n+\t: _M_count(__count), _M_base(std::move(__base))\n       { __glibcxx_assert(__count >= 0); }\n \n       constexpr _Vp\n@@ -2002,16 +2001,16 @@ namespace views\n     class drop_while_view : public view_interface<drop_while_view<_Vp, _Pred>>\n     {\n     private:\n-      _Vp _M_base = _Vp();\n       [[no_unique_address]] __detail::__box<_Pred> _M_pred;\n       [[no_unique_address]] __detail::_CachedPosition<_Vp> _M_cached_begin;\n+      _Vp _M_base = _Vp();\n \n     public:\n       drop_while_view() = default;\n \n       constexpr\n       drop_while_view(_Vp __base, _Pred __pred)\n-\t: _M_base(std::move(__base)), _M_pred(std::move(__pred))\n+\t: _M_pred(std::move(__pred)), _M_base(std::move(__base))\n       { }\n \n       constexpr _Vp\n@@ -2300,12 +2299,11 @@ namespace views\n \t  friend _Sentinel<!_Const>;\n \t};\n \n-      _Vp _M_base = _Vp();\n-\n       // XXX: _M_inner is \"present only when !is_reference_v<_InnerRange>\"\n       [[no_unique_address]]\n \t__detail::__maybe_present_t<!is_reference_v<_InnerRange>,\n \t\t\t\t    views::all_t<_InnerRange>> _M_inner;\n+      _Vp _M_base = _Vp();\n \n     public:\n       join_view() = default;\n@@ -2680,30 +2678,29 @@ namespace views\n \t  { ranges::iter_swap(__x._M_i_current(), __y._M_i_current()); }\n \t};\n \n-      _Vp _M_base = _Vp();\n       _Pattern _M_pattern = _Pattern();\n-\n       // XXX: _M_current is \"present only if !forward_range<V>\"\n       [[no_unique_address]]\n-\t__detail::__maybe_present_t<!forward_range<_Vp>, iterator_t<_Vp>>\n-\t  _M_current;\n+\t__detail::__maybe_present_t<!forward_range<_Vp>,\n+\t\t\t\t    iterator_t<_Vp>> _M_current;\n+      _Vp _M_base = _Vp();\n \n \n     public:\n       split_view() = default;\n \n       constexpr\n       split_view(_Vp __base, _Pattern __pattern)\n-\t: _M_base(std::move(__base)), _M_pattern(std::move(__pattern))\n+\t: _M_pattern(std::move(__pattern)), _M_base(std::move(__base))\n       { }\n \n       template<input_range _Range>\n \trequires constructible_from<_Vp, views::all_t<_Range>>\n \t  && constructible_from<_Pattern, single_view<range_value_t<_Range>>>\n \tconstexpr\n \tsplit_view(_Range&& __r, range_value_t<_Range> __e)\n-\t  : _M_base(views::all(std::forward<_Range>(__r))),\n-\t    _M_pattern(std::move(__e))\n+\t  : _M_pattern(std::move(__e)),\n+\t    _M_base(views::all(std::forward<_Range>(__r)))\n \t{ }\n \n       constexpr _Vp\n@@ -2892,14 +2889,14 @@ namespace views\n     class reverse_view : public view_interface<reverse_view<_Vp>>\n     {\n     private:\n-      _Vp _M_base = _Vp();\n-\n       static constexpr bool _S_needs_cached_begin\n \t= !common_range<_Vp> && !random_access_range<_Vp>;\n+\n       [[no_unique_address]]\n \t__detail::__maybe_present_t<_S_needs_cached_begin,\n \t\t\t\t    __detail::_CachedPosition<_Vp>>\n \t\t\t\t      _M_cached_begin;\n+      _Vp _M_base = _Vp();\n \n     public:\n       reverse_view() = default;"}, {"sha": "4d6f78b36b1e427584c45104ed9746d6823b3602", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/sizeof.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361e32eeaa8e80c2c3b4879518756cf131e8f938/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361e32eeaa8e80c2c3b4879518756cf131e8f938/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsizeof.cc?ref=361e32eeaa8e80c2c3b4879518756cf131e8f938", "patch": "@@ -33,20 +33,20 @@ using V = ranges::subrange<int*, int*>;\n constexpr auto ptr = sizeof(int*);\n static_assert(sizeof(V) == 2*ptr);\n \n-static_assert(sizeof(ranges::take_view<V>) == 4*ptr);\n-static_assert(sizeof(ranges::drop_view<V>) == 4*ptr);\n+static_assert(sizeof(ranges::take_view<V>) == 3*ptr);\n+static_assert(sizeof(ranges::drop_view<V>) == 3*ptr);\n \n-static_assert(sizeof(ranges::filter_view<V, decltype(&pred_f)>) == 5*ptr);\n-static_assert(sizeof(ranges::take_while_view<V, decltype(&pred_f)>) == 4*ptr);\n-static_assert(sizeof(ranges::drop_while_view<V, decltype(&pred_f)>) == 5*ptr);\n-static_assert(sizeof(ranges::transform_view<V, decltype(&func_f)>) == 4*ptr);\n+static_assert(sizeof(ranges::filter_view<V, decltype(&pred_f)>) == 4*ptr);\n+static_assert(sizeof(ranges::take_while_view<V, decltype(&pred_f)>) == 3*ptr);\n+static_assert(sizeof(ranges::drop_while_view<V, decltype(&pred_f)>) == 4*ptr);\n+static_assert(sizeof(ranges::transform_view<V, decltype(&func_f)>) == 3*ptr);\n \n-static_assert(sizeof(ranges::filter_view<V, decltype(pred_l)>) == 4*ptr);\n+static_assert(sizeof(ranges::filter_view<V, decltype(pred_l)>) == 3*ptr);\n static_assert(sizeof(ranges::take_while_view<V, decltype(pred_l)>) == 3*ptr);\n-static_assert(sizeof(ranges::drop_while_view<V, decltype(pred_l)>) == 4*ptr);\n+static_assert(sizeof(ranges::drop_while_view<V, decltype(pred_l)>) == 3*ptr);\n static_assert(sizeof(ranges::transform_view<V, decltype(func_l)>) == 3*ptr);\n \n-static_assert(sizeof(ranges::split_view<V, std::string_view>) == 5*ptr);\n+static_assert(sizeof(ranges::split_view<V, std::string_view>) == 4*ptr);\n \n static_assert\n- (sizeof(ranges::reverse_view<ranges::filter_view<V, decltype(pred_l)>>) == 5*ptr);\n+ (sizeof(ranges::reverse_view<ranges::filter_view<V, decltype(pred_l)>>) == 4*ptr);"}]}