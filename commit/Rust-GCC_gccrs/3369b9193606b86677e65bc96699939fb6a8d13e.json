{"sha": "3369b9193606b86677e65bc96699939fb6a8d13e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM2OWI5MTkzNjA2Yjg2Njc3ZTY1YmM5NjY5OTkzOWZiNmE4ZDEzZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-10-09T19:22:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-10-09T19:22:53Z"}, "message": "semantics.c (check_constexpr_ctor_body_1): New.\n\n/cp\n2014-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* semantics.c (check_constexpr_ctor_body_1): New.\n\t(check_constexpr_ctor_body): Use it; add bool parameter.\n\t(build_data_member_initialization): Handle BIND_EXPR and\n\tUSING_STMT in the main conditional.\n\t(build_constexpr_constructor_member_initializers): Do not\n\thandle BIND_EXPR here.\n\t(constexpr_fn_retval): Handle BIND_EXPR in the switch.\n\t(massage_constexpr_body): Don't do it here.\n\t* parser.c (cp_parser_ctor_initializer_opt_and_function_body):\n\tAdjust check_constexpr_ctor_body call.\n\t(cp_parser_compound_statement): Do not pedwarn for compound-statement\n\tin constexpr function in C++14 mode.\n\t* cp-tree.h (check_constexpr_ctor_body): Update declaration.\n\n/testsuite\n2014-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/constexpr-using3.C: New.\n\t* g++.dg/cpp1y/constexpr-local-compound1.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-type-def-compound1.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-local1.C: Extend.\n\t* g++.dg/cpp0x/constexpr-compound.C: Specify expected error.\n\nFrom-SVN: r216049", "tree": {"sha": "4553766deb632f48b011e507c8e87b13c5f4fcbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4553766deb632f48b011e507c8e87b13c5f4fcbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3369b9193606b86677e65bc96699939fb6a8d13e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3369b9193606b86677e65bc96699939fb6a8d13e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3369b9193606b86677e65bc96699939fb6a8d13e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3369b9193606b86677e65bc96699939fb6a8d13e/comments", "author": null, "committer": null, "parents": [{"sha": "5f60643158669361212ef79bfec16e8c73f4c138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f60643158669361212ef79bfec16e8c73f4c138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f60643158669361212ef79bfec16e8c73f4c138"}], "stats": {"total": 219, "additions": 189, "deletions": 30}, "files": [{"sha": "84996a45cba69c900cfda5a75289997d85be88e3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3369b9193606b86677e65bc96699939fb6a8d13e", "patch": "@@ -1,3 +1,19 @@\n+2014-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* semantics.c (check_constexpr_ctor_body_1): New.\n+\t(check_constexpr_ctor_body): Use it; add bool parameter.\n+\t(build_data_member_initialization): Handle BIND_EXPR and\n+\tUSING_STMT in the main conditional.\n+\t(build_constexpr_constructor_member_initializers): Do not\n+\thandle BIND_EXPR here.\n+\t(constexpr_fn_retval): Handle BIND_EXPR in the switch.\n+\t(massage_constexpr_body): Don't do it here.\n+\t* parser.c (cp_parser_ctor_initializer_opt_and_function_body):\n+\tAdjust check_constexpr_ctor_body call.\n+\t(cp_parser_compound_statement): Do not pedwarn for compound-statement\n+\tin constexpr function in C++14 mode.\n+\t* cp-tree.h (check_constexpr_ctor_body): Update declaration.\n+\n 2014-10-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/63309"}, {"sha": "3787c4a3f250d7ab322bdd67a808b1783b1da2a1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3369b9193606b86677e65bc96699939fb6a8d13e", "patch": "@@ -5823,7 +5823,7 @@ extern void finish_handler\t\t\t(tree);\n extern void finish_cleanup\t\t\t(tree, tree);\n extern bool literal_type_p (tree);\n extern tree register_constexpr_fundef (tree, tree);\n-extern bool check_constexpr_ctor_body (tree, tree);\n+extern bool check_constexpr_ctor_body (tree, tree, bool);\n extern tree ensure_literal_type_for_constexpr_object (tree);\n extern bool potential_constant_expression (tree);\n extern bool potential_rvalue_constant_expression (tree);"}, {"sha": "c6218af21e9406a163dbbffd3273b6ca91484032", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3369b9193606b86677e65bc96699939fb6a8d13e", "patch": "@@ -9891,7 +9891,7 @@ cp_parser_compound_statement (cp_parser *parser, tree in_statement_expr,\n   if (!cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE))\n     return error_mark_node;\n   if (DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n-      && !function_body)\n+      && !function_body && cxx_dialect < cxx14)\n     pedwarn (input_location, OPT_Wpedantic,\n \t     \"compound-statement in constexpr function\");\n   /* Begin the compound-statement.  */\n@@ -19015,7 +19015,7 @@ cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser,\n   /* Parse the function-body.  */\n   cp_parser_function_body (parser, in_function_try_block);\n   if (check_body_p)\n-    check_constexpr_ctor_body (last, list);\n+    check_constexpr_ctor_body (last, list, /*complain=*/true);\n   /* Finish the function body.  */\n   finish_function_body (body);\n "}, {"sha": "3ca91d88bfef44911692adafeed2c6aed4f28527", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 51, "deletions": 24, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3369b9193606b86677e65bc96699939fb6a8d13e", "patch": "@@ -7781,8 +7781,12 @@ build_data_member_initialization (tree t, vec<constructor_elt, va_gc> **vec)\n \t wrong type, but cxx_eval_constant_expression doesn't care.  */\n       init = break_out_target_exprs (t);\n     }\n-  else if (TREE_CODE (t) == DECL_EXPR)\n-    /* Declaring a temporary, don't add it to the CONSTRUCTOR.  */\n+  else if (TREE_CODE (t) == BIND_EXPR)\n+    return build_data_member_initialization (BIND_EXPR_BODY (t), vec);\n+  else if (TREE_CODE (t) == DECL_EXPR\n+\t   || TREE_CODE (t) == USING_STMT)\n+    /* Declaring a temporary, don't add it to the CONSTRUCTOR.\n+       Likewise for using directives.  */\n     return true;\n   else\n     gcc_unreachable ();\n@@ -7835,7 +7839,7 @@ build_data_member_initialization (tree t, vec<constructor_elt, va_gc> **vec)\n   return true;\n }\n \n-/* Subroutine of check_constexpr_ctor_body and massage_constexpr_body.\n+/* Subroutine of check_constexpr_ctor_body_1 and constexpr_fn_retval.\n    In C++11 mode checks that the TYPE_DECLs in the BIND_EXPR_VARS of a \n    BIND_EXPR conform to 7.1.5/3/4 on typedef and alias declarations.  */\n \n@@ -7854,11 +7858,45 @@ check_constexpr_bind_expr_vars (tree t)\n   return true;\n }\n \n+/* Subroutine of check_constexpr_ctor_body.  */\n+\n+static bool\n+check_constexpr_ctor_body_1 (tree last, tree list)\n+{\n+  switch (TREE_CODE (list))\n+    {\n+    case DECL_EXPR:\n+      if (TREE_CODE (DECL_EXPR_DECL (list)) == USING_DECL)\n+\treturn true;\n+      if (cxx_dialect >= cxx14)\n+\treturn true;\n+      return false;\n+\n+    case CLEANUP_POINT_EXPR:\n+      return check_constexpr_ctor_body (last, TREE_OPERAND (list, 0),\n+\t\t\t\t\t/*complain=*/false);\n+\n+    case BIND_EXPR:\n+       if (!check_constexpr_bind_expr_vars (list)\n+\t   || !check_constexpr_ctor_body (last, BIND_EXPR_BODY (list),\n+\t\t\t\t\t  /*complain=*/false))\n+\t return false;\n+       return true;\n+\n+    case USING_STMT:\n+    case STATIC_ASSERT:\n+      return true;\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Make sure that there are no statements after LAST in the constructor\n    body represented by LIST.  */\n \n bool\n-check_constexpr_ctor_body (tree last, tree list)\n+check_constexpr_ctor_body (tree last, tree list, bool complain)\n {\n   bool ok = true;\n   if (TREE_CODE (list) == STATEMENT_LIST)\n@@ -7869,31 +7907,20 @@ check_constexpr_ctor_body (tree last, tree list)\n \t  tree t = tsi_stmt (i);\n \t  if (t == last)\n \t    break;\n-\t  if (TREE_CODE (t) == BIND_EXPR)\n-\t    {\n-\t      if (!check_constexpr_bind_expr_vars (t))\n-\t\t{\n-\t\t  ok = false;\n-\t\t  break;\n-\t\t}\n-\t      if (!check_constexpr_ctor_body (last, BIND_EXPR_BODY (t)))\n-\t\treturn false;\n-\t      else\n-\t\tcontinue;\n-\t    }\n-\t  if (TREE_CODE (t) != STATIC_ASSERT)\n+\t  if (!check_constexpr_ctor_body_1 (last, t))\n \t    {\n \t      ok = false;\n \t      break;\n \t    }\n \t}\n     }\n   else if (list != last\n-\t   && TREE_CODE (list) != STATIC_ASSERT)\n+\t   && !check_constexpr_ctor_body_1 (last, list))\n     ok = false;\n   if (!ok)\n     {\n-      error (\"constexpr constructor does not have empty body\");\n+      if (complain)\n+\terror (\"constexpr constructor does not have empty body\");\n       DECL_DECLARED_CONSTEXPR_P (current_function_decl) = false;\n     }\n   return ok;\n@@ -7983,8 +8010,6 @@ build_constexpr_constructor_member_initializers (tree type, tree body)\n \t     \"a function-try-block\");\n       return error_mark_node;\n     }\n-  else if (TREE_CODE (body) == BIND_EXPR)\n-    ok = build_data_member_initialization (BIND_EXPR_BODY (body), &vec);\n   else if (EXPR_P (body))\n     ok = build_data_member_initialization (body, &vec);\n   else\n@@ -8052,6 +8077,11 @@ constexpr_fn_retval (tree body)\n     case CLEANUP_POINT_EXPR:\n       return constexpr_fn_retval (TREE_OPERAND (body, 0));\n \n+    case BIND_EXPR:\n+      if (!check_constexpr_bind_expr_vars (body))\n+\treturn error_mark_node;\n+      return constexpr_fn_retval (BIND_EXPR_BODY (body));\n+\n     case USING_STMT:\n       return NULL_TREE;\n \n@@ -8076,9 +8106,6 @@ massage_constexpr_body (tree fun, tree body)\n         body = EH_SPEC_STMTS (body);\n       if (TREE_CODE (body) == MUST_NOT_THROW_EXPR)\n \tbody = TREE_OPERAND (body, 0);\n-      if (TREE_CODE (body) == BIND_EXPR\n-\t  && check_constexpr_bind_expr_vars (body))\n-\tbody = BIND_EXPR_BODY (body);\n       body = constexpr_fn_retval (body);\n     }\n   return body;"}, {"sha": "0fb4c9edef5f90aa4f7c502474c3124371ce3acb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3369b9193606b86677e65bc96699939fb6a8d13e", "patch": "@@ -1,3 +1,11 @@\n+2014-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/constexpr-using3.C: New.\n+\t* g++.dg/cpp1y/constexpr-local-compound1.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-type-def-compound1.C: Likewise.\n+\t* g++.dg/cpp1y/constexpr-local1.C: Extend.\n+\t* g++.dg/cpp0x/constexpr-compound.C: Specify expected error.\n+\n 2014-10-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/torture/float128-extendxf-underflow.c: New test."}, {"sha": "c23e1483b4b655a9153639d5437cb70f500ebb8f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-compound.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-compound.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-compound.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-compound.C?ref=3369b9193606b86677e65bc96699939fb6a8d13e", "patch": "@@ -2,8 +2,8 @@\n \n constexpr int f()\n {\n-  {\t\t\t\t// { dg-error \"\" }\n+  {\t\t\t\t// { dg-error \"compound-statement\" \"\" { target { c++11_only } } }\n     return 1;\n   }\n-  { }\t\t\t\t// { dg-error \"\" }\n+  { }\t\t\t\t// { dg-error \"compound-statement\" \"\" { target { c++11_only } } }\n }"}, {"sha": "88a14fda10ec5da169670e73bacb18ddf2471729", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-using3.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-using3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-using3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-using3.C?ref=3369b9193606b86677e65bc96699939fb6a8d13e", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-pedantic\" }\n+\n+namespace ns { typedef int T; }\n+\n+constexpr int Test1(int x) { using ns::T; typedef T U; return U(x); }\n+constexpr int Test2(int x) { using namespace ns; typedef T U; return U(x); }\n+constexpr int Test3(int x) { { using ns::T; typedef T U; return U(x); } }  // { dg-warning \"compound-statement\" \"\" { target { c++11_only } } }\n+constexpr int Test4(int x) { { using namespace ns; typedef T U; return T(x); } }  // { dg-warning \"compound-statement\" \"\" { target { c++11_only } } }\n+\n+struct S1\n+{\n+  constexpr S1() { using ns::T; typedef T U; }\n+};\n+\n+struct S2\n+{\n+  constexpr S2() { using namespace ns; typedef T U; }\n+};\n+\n+struct S3\n+{\n+  constexpr S3() { { using ns::T; typedef T U; } }  // { dg-warning \"compound-statement\" \"\" { target { c++11_only } } }\n+};\n+\n+struct S4\n+{\n+  constexpr S4() { { using namespace ns; typedef T U; } }  // { dg-warning \"compound-statement\" \"\" { target { c++11_only } } }\n+};"}, {"sha": "b72d13569a40e8a93d676177d7ca9d52d46fc33e", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-local-compound1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-local-compound1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-local-compound1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-local-compound1.C?ref=3369b9193606b86677e65bc96699939fb6a8d13e", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++14 } }\n+\n+#define SA(X) static_assert((X),#X)\n+\n+constexpr int f(int i) { { int j = i+1; return j; } }\n+\n+constexpr int i = f(41);\n+\n+struct S\n+{\n+  constexpr S() { { constexpr int j = 17; SA(j == 17); } }\n+};\n+\n+SA(i==42);"}, {"sha": "8412f63ded681d57a0b16663742b3117d662452b", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-local1.C", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-local1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-local1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-local1.C?ref=3369b9193606b86677e65bc96699939fb6a8d13e", "patch": "@@ -1,9 +1,14 @@\n // { dg-do compile { target c++14 } }\n \n+#define SA(X) static_assert((X),#X)\n+\n constexpr int f(int i) { int j = i+1; return j; }\n \n constexpr int i = f(41);\n \n-#define SA(X) static_assert((X),#X)\n+struct S\n+{\n+  constexpr S() { constexpr int j = 17; SA(j == 17); }\n+};\n \n SA(i==42);"}, {"sha": "aace61025569c512be353862525bfa1d3db3e026", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-type-def-compound1.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-type-def-compound1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3369b9193606b86677e65bc96699939fb6a8d13e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-type-def-compound1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-type-def-compound1.C?ref=3369b9193606b86677e65bc96699939fb6a8d13e", "patch": "@@ -0,0 +1,60 @@\n+// PR c++/55250\n+// { dg-do compile { target c++14 } }\n+\n+#define SA(X) static_assert((X),#X)\n+\n+constexpr int Test1(int x) { { enum E { y = 1 }; return x + y; } }\n+\n+constexpr int Test2(int x) { { struct T { constexpr operator int() { return 1; } }; return x + T(); } }\n+\n+constexpr int Test3(int x) { { typedef enum E { y = 1 } EE; return x + EE::y; } }\n+\n+constexpr int Test4(int x) { { typedef struct T { constexpr operator int() { return 1; } } TT; return x + TT(); } }\n+\n+constexpr int Test5(int x) { { using EE = enum E { y = 1 }; return x + EE::y; } }\n+\n+constexpr int Test6(int x) { { using TT = struct T { constexpr operator int() { return 1; } }; return x + TT(); } }\n+\n+SA(Test1(2) == 3);\n+SA(Test2(2) == 3);\n+SA(Test3(2) == 3);\n+SA(Test4(2) == 3);\n+SA(Test5(2) == 3);\n+SA(Test6(2) == 3);\n+\n+struct S1\n+{\n+  constexpr S1() { { enum E { y = 1 }; SA(y == 1); } }\n+};\n+\n+struct S2\n+{\n+  constexpr S2() { { struct T { constexpr operator int() { return 1; } }; SA(T() == 1); } }\n+};\n+\n+struct S3\n+{\n+  constexpr S3() { { typedef enum E { y = 1} EE; SA(EE::y == 1); } }\n+};\n+\n+struct S4\n+{\n+  constexpr S4() { { typedef struct T { constexpr operator int() { return 1; } } TT; SA(TT() == 1); } }\n+};\n+\n+struct S5\n+{\n+  constexpr S5() { { using EE = enum E { y = 1}; SA(EE::y == 1); } }\n+};\n+\n+struct S6\n+{\n+  constexpr S6() { { using TT = struct T { constexpr operator int() { return 1; } }; SA(TT() == 1); } }\n+};\n+\n+S1 s1;\n+S2 s2;\n+S3 s3;\n+S4 s4;\n+S5 s5;\n+S6 s6;"}]}