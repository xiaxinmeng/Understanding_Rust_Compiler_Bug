{"sha": "737faf1404678b40cb1f5dcf2ca816d2872fb347", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM3ZmFmMTQwNDY3OGI0MGNiMWY1ZGNmMmNhODE2ZDI4NzJmYjM0Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-03-08T23:05:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-08T23:05:30Z"}, "message": "dwarf2out.c (dw_fde_struct): Add 'nothrow'.\n\n        * dwarf2out.c (dw_fde_struct): Add 'nothrow'.\n        (dwarf2out_begin_prologue): Set it.\n        (output_call_frame_info): Don't emit EH unwind info for leaves.\n\nFrom-SVN: r32434", "tree": {"sha": "9cd029cae289371cef51ff6c9c21a855f0f74e53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cd029cae289371cef51ff6c9c21a855f0f74e53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/737faf1404678b40cb1f5dcf2ca816d2872fb347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737faf1404678b40cb1f5dcf2ca816d2872fb347", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737faf1404678b40cb1f5dcf2ca816d2872fb347", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737faf1404678b40cb1f5dcf2ca816d2872fb347/comments", "author": null, "committer": null, "parents": [{"sha": "602b1b13d794eb93a93c5fd52bfd4191c8dae9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/602b1b13d794eb93a93c5fd52bfd4191c8dae9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/602b1b13d794eb93a93c5fd52bfd4191c8dae9c0"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "d8b55f5e5755ce62ae625778e00d2235cab05c27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737faf1404678b40cb1f5dcf2ca816d2872fb347/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737faf1404678b40cb1f5dcf2ca816d2872fb347/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=737faf1404678b40cb1f5dcf2ca816d2872fb347", "patch": "@@ -1,5 +1,9 @@\n 2000-03-08  Jason Merrill  <jason@casey.cygnus.com>\n \n+\t* dwarf2out.c (dw_fde_struct): Add 'nothrow'.\n+\t(dwarf2out_begin_prologue): Set it.\n+\t(output_call_frame_info): Don't emit EH unwind info for leaves.\n+\n \t* flow.c (count_basic_blocks, find_basic_blocks_1): A rethrow\n \tcan occur outside of an EH region.\n \t* except.c: Correct comments about rethrow behavior."}, {"sha": "20e8a1be4bd0a7a979db79bb6576c6c29d356830", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/737faf1404678b40cb1f5dcf2ca816d2872fb347/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/737faf1404678b40cb1f5dcf2ca816d2872fb347/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=737faf1404678b40cb1f5dcf2ca816d2872fb347", "patch": "@@ -129,6 +129,7 @@ typedef struct dw_fde_struct\n   char *dw_fde_current_label;\n   char *dw_fde_end;\n   dw_cfi_ref dw_fde_cfi;\n+  int nothrow;\n }\n dw_fde_node;\n \n@@ -1624,6 +1625,17 @@ output_call_frame_info (for_eh)\n   /* Do we want to include a pointer to the exception table?  */\n   int eh_ptr = for_eh && exception_table_p ();\n \n+  /* If we don't have any functions we'll want to unwind out of, don't\n+     emit any EH unwind information.  */\n+  if (for_eh)\n+    {\n+      for (i = 0; i < fde_table_in_use; ++i)\n+\tif (! fde_table[i].nothrow)\n+\t  goto found;\n+      return;\n+    found:;\n+    }\n+\n   fputc ('\\n', asm_out_file);\n \n   /* We're going to be generating comments, so turn on app.  */\n@@ -1756,6 +1768,10 @@ output_call_frame_info (for_eh)\n     {\n       fde = &fde_table[i];\n \n+      /* Don't emit EH unwind info for leaf functions.  */\n+      if (for_eh && fde->nothrow)\n+\tcontinue;\n+\n       ASM_GENERATE_INTERNAL_LABEL (l1, FDE_AFTER_SIZE_LABEL, for_eh + i*2);\n       ASM_GENERATE_INTERNAL_LABEL (l2, FDE_END_LABEL, for_eh + i*2);\n #ifdef ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL\n@@ -1874,6 +1890,9 @@ dwarf2out_begin_prologue ()\n   fde->dw_fde_end = NULL;\n   fde->dw_fde_cfi = NULL;\n \n+  /* Normally, only calls can throw, so a leaf function will never throw.  */\n+  fde->nothrow = (current_function_is_leaf && !asynchronous_exceptions);\n+\n   args_size = old_args_size = 0;\n }\n "}]}