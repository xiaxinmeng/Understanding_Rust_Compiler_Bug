{"sha": "88a5cdb87fee7f87987acd4863ecac2492b06d44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhNWNkYjg3ZmVlN2Y4Nzk4N2FjZDQ4NjNlY2FjMjQ5MmIwNmQ0NA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-06-09T23:41:21Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-06-09T23:41:21Z"}, "message": "x\n\nFrom-SVN: r14210", "tree": {"sha": "e6d725468f483644f0e4e3f2281f31a3e5cecda9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6d725468f483644f0e4e3f2281f31a3e5cecda9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88a5cdb87fee7f87987acd4863ecac2492b06d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a5cdb87fee7f87987acd4863ecac2492b06d44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a5cdb87fee7f87987acd4863ecac2492b06d44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a5cdb87fee7f87987acd4863ecac2492b06d44/comments", "author": null, "committer": null, "parents": [{"sha": "a112a4d6ac4345b2f2ba14e683329fa571ef4144", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a112a4d6ac4345b2f2ba14e683329fa571ef4144", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a112a4d6ac4345b2f2ba14e683329fa571ef4144"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "e8ef497176fa37773f2382dccb32fd777f53503c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a5cdb87fee7f87987acd4863ecac2492b06d44/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a5cdb87fee7f87987acd4863ecac2492b06d44/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=88a5cdb87fee7f87987acd4863ecac2492b06d44", "patch": "@@ -5498,14 +5498,21 @@ fold (expr)\n \t\t  return pedantic_non_lvalue (convert (type, arg1));\n \t\tcase LE_EXPR:\n \t\tcase LT_EXPR:\n-\t\t  return pedantic_non_lvalue\n-\t\t    (convert (type, (fold (build (MIN_EXPR, comp_type,\n-\t\t\t\t\t\t  comp_op0, comp_op1)))));\n+\t\t  /* In C++ a ?: expression can be an lvalue, so we can't\n+\t\t     do this; we would lose the distinction between\n+\t\t     LT and LE.  */\n+\t\t  if (pedantic_lvalues)\n+\t\t    return pedantic_non_lvalue\n+\t\t      (convert (type, (fold (build (MIN_EXPR, comp_type,\n+\t\t\t\t\t\t    comp_op0, comp_op1)))));\n+\t\t  break;\n \t\tcase GE_EXPR:\n \t\tcase GT_EXPR:\n-\t\t  return pedantic_non_lvalue\n-\t\t    (convert (type, fold (build (MAX_EXPR, comp_type,\n-\t\t\t\t\t\t comp_op0, comp_op1))));\n+\t\t  if (pedantic_lvalues)\n+\t\t    return pedantic_non_lvalue\n+\t\t      (convert (type, fold (build (MAX_EXPR, comp_type,\n+\t\t\t\t\t\t   comp_op0, comp_op1))));\n+\t\t  break;\n \t\t}\n \t    }\n "}]}