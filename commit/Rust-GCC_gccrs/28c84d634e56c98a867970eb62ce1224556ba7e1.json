{"sha": "28c84d634e56c98a867970eb62ce1224556ba7e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjODRkNjM0ZTU2Yzk4YTg2Nzk3MGViNjJjZTEyMjQ1NTZiYTdlMQ==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2006-02-13T10:29:31Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2006-02-13T10:29:31Z"}, "message": "re PR c++/26151 (duplicate 'duplicate' diagnostic)\n\n\tPR c++/26151\n\t* parser.c (cp_parser_decl_specifier_seq): Check for duplicate\n\tdecl-specifiers.  Remove extra check for duplicate 'friend'.\n\t* decl.c (grokdeclarator): Remove check for duplicate\n\tdecl-specifiers.  Set longlong together with long_p.\n\nFrom-SVN: r110911", "tree": {"sha": "b0b40c8f3f492f75c60bf362ef71ada5b2c54f0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0b40c8f3f492f75c60bf362ef71ada5b2c54f0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28c84d634e56c98a867970eb62ce1224556ba7e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c84d634e56c98a867970eb62ce1224556ba7e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c84d634e56c98a867970eb62ce1224556ba7e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c84d634e56c98a867970eb62ce1224556ba7e1/comments", "author": null, "committer": null, "parents": [{"sha": "5142e08b2f932ed958d703255ba5059b9192b037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5142e08b2f932ed958d703255ba5059b9192b037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5142e08b2f932ed958d703255ba5059b9192b037"}], "stats": {"total": 89, "additions": 47, "deletions": 42}, "files": [{"sha": "fc53be07e7cd813d0413e0dd1c91caa1880969af", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c84d634e56c98a867970eb62ce1224556ba7e1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c84d634e56c98a867970eb62ce1224556ba7e1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=28c84d634e56c98a867970eb62ce1224556ba7e1", "patch": "@@ -1,3 +1,11 @@\n+2006-02-13  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\tPR c++/26151\n+\t* parser.c (cp_parser_decl_specifier_seq): Check for duplicate\n+\tdecl-specifiers.  Remove extra check for duplicate 'friend'.\n+\t* decl.c (grokdeclarator): Remove check for duplicate\n+\tdecl-specifiers.  Set longlong together with long_p.\n+\n 2006-02-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/24996"}, {"sha": "b00ac7a9ba90e5aff1f9abb5536e4cd3f6352e14", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c84d634e56c98a867970eb62ce1224556ba7e1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c84d634e56c98a867970eb62ce1224556ba7e1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=28c84d634e56c98a867970eb62ce1224556ba7e1", "patch": "@@ -6662,7 +6662,6 @@ grokdeclarator (const cp_declarator *declarator,\n      this value will be NULL_TREE, even if the entity is located at\n      namespace scope.  */\n   tree in_namespace = NULL_TREE;\n-  cp_decl_spec ds;\n   cp_storage_class storage_class;\n   bool unsigned_p, signed_p, short_p, long_p, thread_p;\n   bool type_was_error_mark_node = false;\n@@ -6671,6 +6670,7 @@ grokdeclarator (const cp_declarator *declarator,\n   unsigned_p = declspecs->specs[(int)ds_unsigned];\n   short_p = declspecs->specs[(int)ds_short];\n   long_p = declspecs->specs[(int)ds_long];\n+  longlong = declspecs->specs[(int)ds_long] >= 2;\n   thread_p = declspecs->specs[(int)ds_thread];\n \n   if (decl_context == FUNCDEF)\n@@ -6884,45 +6884,6 @@ grokdeclarator (const cp_declarator *declarator,\n   explicit_int = declspecs->explicit_int_p;\n   explicit_char = declspecs->explicit_char_p;\n \n-  /* Check for repeated decl-specifiers.  */\n-  for (ds = ds_first; ds != ds_last; ++ds)\n-    {\n-      unsigned count = declspecs->specs[(int)ds];\n-      if (count < 2)\n-\tcontinue;\n-      /* The \"long\" specifier is a special case because of\n-\t \"long long\".  */\n-      if (ds == ds_long)\n-\t{\n-\t  if (count > 2)\n-\t    error (\"%<long long long%> is too long for GCC\");\n-\t  else if (pedantic && !in_system_header && warn_long_long)\n-\t    pedwarn (\"ISO C++ does not support %<long long%>\");\n-\t  else\n-\t    longlong = 1;\n-\t}\n-      else if (declspecs->specs[(int)ds] > 1)\n-\t{\n-\t  static const char *const decl_spec_names[] = {\n-\t    \"signed\",\n-\t    \"unsigned\",\n-\t    \"short\",\n-\t    \"long\",\n-\t    \"const\",\n-\t    \"volatile\",\n-\t    \"restrict\",\n-\t    \"inline\",\n-\t    \"virtual\",\n-\t    \"explicit\",\n-\t    \"friend\",\n-\t    \"typedef\",\n-\t    \"__complex\",\n-\t    \"__thread\"\n-\t  };\n-\t  error (\"duplicate %qs\", decl_spec_names[(int)ds]);\n-\t}\n-    }\n-\n #if 0\n   /* See the code below that used this.  */\n   if (typedef_decl)"}, {"sha": "37df31160d22928afb11ca25669606ef91ed4e3b", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c84d634e56c98a867970eb62ce1224556ba7e1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c84d634e56c98a867970eb62ce1224556ba7e1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=28c84d634e56c98a867970eb62ce1224556ba7e1", "patch": "@@ -7330,6 +7330,7 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t\t\t      int* declares_class_or_enum)\n {\n   bool constructor_possible_p = !parser->in_declarator_p;\n+  cp_decl_spec ds;\n \n   /* Clear DECL_SPECS.  */\n   clear_decl_specs (decl_specs);\n@@ -7364,8 +7365,7 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t  /* decl-specifier:\n \t       friend  */\n \tcase RID_FRIEND:\n-\t  if (decl_specs->specs[(int) ds_friend]++)\n-\t    error (\"duplicate %<friend%>\");\n+\t  ++decl_specs->specs[(int) ds_friend];\n \t  /* Consume the token.  */\n \t  cp_lexer_consume_token (parser->lexer);\n \t  break;\n@@ -7531,6 +7531,42 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n       flags |= CP_PARSER_FLAGS_OPTIONAL;\n     }\n \n+  /* Check for repeated decl-specifiers.  */\n+  for (ds = ds_first; ds != ds_last; ++ds)\n+    {\n+      unsigned count = decl_specs->specs[(int)ds];\n+      if (count < 2)\n+\tcontinue;\n+      /* The \"long\" specifier is a special case because of \"long long\".  */\n+      if (ds == ds_long)\n+\t{\n+\t  if (count > 2)\n+\t    error (\"%<long long long%> is too long for GCC\");\n+\t  else if (pedantic && !in_system_header && warn_long_long)\n+\t    pedwarn (\"ISO C++ does not support %<long long%>\");\n+\t}\n+      else if (count > 1)\n+\t{\n+\t  static const char *const decl_spec_names[] = {\n+\t    \"signed\",\n+\t    \"unsigned\",\n+\t    \"short\",\n+\t    \"long\",\n+\t    \"const\",\n+\t    \"volatile\",\n+\t    \"restrict\",\n+\t    \"inline\",\n+\t    \"virtual\",\n+\t    \"explicit\",\n+\t    \"friend\",\n+\t    \"typedef\",\n+\t    \"__complex\",\n+\t    \"__thread\"\n+\t  };\n+\t  error (\"duplicate %qs\", decl_spec_names[(int)ds]);\n+\t}\n+    }\n+\n   /* Don't allow a friend specifier with a class definition.  */\n   if (decl_specs->specs[(int) ds_friend] != 0\n       && (*declares_class_or_enum & 2))"}]}