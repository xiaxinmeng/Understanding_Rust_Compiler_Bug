{"sha": "07d72e1df341f3c9a4b74c01e20b6360e2b99a59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdkNzJlMWRmMzQxZjNjOWE0Yjc0YzAxZTIwYjYzNjBlMmI5OWE1OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-03-26T19:33:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-03-26T19:33:40Z"}, "message": "ubsan.h (ubsan_create_data): Change second argument's type to const location_t *.\n\n\t* ubsan.h (ubsan_create_data): Change second argument's type\n\tto const location_t *.\n\t* ubsan.c (ubsan_source_location): If xloc.file is NULL, set it to\n\t_(\"<unknown>\").\n\t(ubsan_create_data): Change second argument to const location_t *PLOC.\n\tCreate Loc field whenever PLOC is non-NULL.\n\t(ubsan_instrument_unreachable, ubsan_expand_null_ifn,\n\tubsan_build_overflow_builtin, instrument_bool_enum_load): Adjust\n\tcallers.\nc-family/\n\t* c-ubsan.c (ubsan_instrument_division, ubsan_instrument_shift,\n\tubsan_instrument_vla, ubsan_instrument_return): Adjust\n\tubsan_create_data callers.\n\nFrom-SVN: r208849", "tree": {"sha": "7671e1cf802c65b5fe7f9759f0228d4c032719aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7671e1cf802c65b5fe7f9759f0228d4c032719aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07d72e1df341f3c9a4b74c01e20b6360e2b99a59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d72e1df341f3c9a4b74c01e20b6360e2b99a59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07d72e1df341f3c9a4b74c01e20b6360e2b99a59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed0ca1e1ea3fe3fddd94176da7c5db527996b525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed0ca1e1ea3fe3fddd94176da7c5db527996b525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed0ca1e1ea3fe3fddd94176da7c5db527996b525"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "9477cf0d1f0675f33b2f03153a6970aa21093d0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07d72e1df341f3c9a4b74c01e20b6360e2b99a59", "patch": "@@ -1,5 +1,15 @@\n 2014-03-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* ubsan.h (ubsan_create_data): Change second argument's type\n+\tto const location_t *.\n+\t* ubsan.c (ubsan_source_location): If xloc.file is NULL, set it to\n+\t_(\"<unknown>\").\n+\t(ubsan_create_data): Change second argument to const location_t *PLOC.\n+\tCreate Loc field whenever PLOC is non-NULL.\n+\t(ubsan_instrument_unreachable, ubsan_expand_null_ifn,\n+\tubsan_build_overflow_builtin, instrument_bool_enum_load): Adjust\n+\tcallers.\n+\n \tPR other/59545\n \t* real.c (real_to_integer2): Change type of low to UHWI.\n "}, {"sha": "8d67d1288b371317c1d52cd8fb4c45c78be2525f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=07d72e1df341f3c9a4b74c01e20b6360e2b99a59", "patch": "@@ -1,3 +1,9 @@\n+2014-03-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-ubsan.c (ubsan_instrument_division, ubsan_instrument_shift,\n+\tubsan_instrument_vla, ubsan_instrument_return): Adjust\n+\tubsan_create_data callers.\n+\n 2014-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/60603"}, {"sha": "dc4d98147b3292a268903f887f18350f5bca61ae", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=07d72e1df341f3c9a4b74c01e20b6360e2b99a59", "patch": "@@ -73,7 +73,7 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n      make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), op0, t);\n   tree data = ubsan_create_data (\"__ubsan_overflow_data\",\n-\t\t\t\t loc, NULL,\n+\t\t\t\t &loc, NULL,\n \t\t\t\t ubsan_type_descriptor (type, false),\n \t\t\t\t NULL_TREE);\n   data = build_fold_addr_expr_loc (loc, data);\n@@ -142,7 +142,7 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n      make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), op0, t);\n   tree data = ubsan_create_data (\"__ubsan_shift_data\",\n-\t\t\t\t loc, NULL,\n+\t\t\t\t &loc, NULL,\n \t\t\t\t ubsan_type_descriptor (type0, false),\n \t\t\t\t ubsan_type_descriptor (type1, false),\n \t\t\t\t NULL_TREE);\n@@ -169,7 +169,7 @@ ubsan_instrument_vla (location_t loc, tree size)\n \n   t = fold_build2 (LE_EXPR, boolean_type_node, size, build_int_cst (type, 0));\n   tree data = ubsan_create_data (\"__ubsan_vla_data\",\n-\t\t\t\t loc, NULL,\n+\t\t\t\t &loc, NULL,\n \t\t\t\t ubsan_type_descriptor (type, false),\n \t\t\t\t NULL_TREE);\n   data = build_fold_addr_expr_loc (loc, data);\n@@ -185,7 +185,7 @@ ubsan_instrument_vla (location_t loc, tree size)\n tree\n ubsan_instrument_return (location_t loc)\n {\n-  tree data = ubsan_create_data (\"__ubsan_missing_return_data\", loc,\n+  tree data = ubsan_create_data (\"__ubsan_missing_return_data\", &loc,\n \t\t\t\t NULL, NULL_TREE);\n   tree t = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_MISSING_RETURN);\n   return build_call_expr_loc (loc, t, 1, build_fold_addr_expr_loc (loc, data));"}, {"sha": "ac40c85f56baf19bac7d8ebdfca284771f8f13cd", "filename": "gcc/ubsan.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=07d72e1df341f3c9a4b74c01e20b6360e2b99a59", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssanames.h\"\n #include \"asan.h\"\n #include \"gimplify-me.h\"\n+#include \"intl.h\"\n \n /* Map from a tree to a VAR_DECL tree.  */\n \n@@ -238,6 +239,8 @@ ubsan_source_location (location_t loc)\n   tree type = ubsan_source_location_type ();\n \n   xloc = expand_location (loc);\n+  if (xloc.file == NULL)\n+    xloc.file = \"<unknown>\";\n \n   /* Fill in the values from LOC.  */\n   size_t len = strlen (xloc.file);\n@@ -404,25 +407,26 @@ ubsan_type_descriptor (tree type, bool want_pointer_type_p)\n    pointer checking.  */\n \n tree\n-ubsan_create_data (const char *name, location_t loc,\n+ubsan_create_data (const char *name, const location_t *ploc,\n \t\t   const struct ubsan_mismatch_data *mismatch, ...)\n {\n   va_list args;\n   tree ret, t;\n   tree fields[5];\n   vec<tree, va_gc> *saved_args = NULL;\n   size_t i = 0;\n+  location_t loc = UNKNOWN_LOCATION;\n \n   /* Firstly, create a pointer to type descriptor type.  */\n   tree td_type = ubsan_type_descriptor_type ();\n   TYPE_READONLY (td_type) = 1;\n   td_type = build_pointer_type (td_type);\n-  loc = LOCATION_LOCUS (loc);\n \n   /* Create the structure type.  */\n   ret = make_node (RECORD_TYPE);\n-  if (loc != UNKNOWN_LOCATION)\n+  if (ploc != NULL)\n     {\n+      loc = LOCATION_LOCUS (*ploc);\n       fields[i] = build_decl (UNKNOWN_LOCATION, FIELD_DECL, NULL_TREE,\n \t\t\t      ubsan_source_location_type ());\n       DECL_CONTEXT (fields[i]) = ret;\n@@ -481,7 +485,7 @@ ubsan_create_data (const char *name, location_t loc,\n   tree ctor = build_constructor (ret, v);\n \n   /* If desirable, set the __ubsan_source_location element.  */\n-  if (loc != UNKNOWN_LOCATION)\n+  if (ploc != NULL)\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, ubsan_source_location (loc));\n \n   size_t nelts = vec_safe_length (saved_args);\n@@ -513,7 +517,7 @@ tree\n ubsan_instrument_unreachable (location_t loc)\n {\n   initialize_sanitizer_builtins ();\n-  tree data = ubsan_create_data (\"__ubsan_unreachable_data\", loc, NULL,\n+  tree data = ubsan_create_data (\"__ubsan_unreachable_data\", &loc, NULL,\n \t\t\t\t NULL_TREE);\n   tree t = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE);\n   return build_call_expr_loc (loc, t, 1, build_fold_addr_expr_loc (loc, data));\n@@ -583,7 +587,7 @@ ubsan_expand_null_ifn (gimple_stmt_iterator gsi)\n   const struct ubsan_mismatch_data m\n     = { build_zero_cst (pointer_sized_int_node), ckind };\n   tree data = ubsan_create_data (\"__ubsan_null_data\",\n-\t\t\t\t loc, &m,\n+\t\t\t\t &loc, &m,\n \t\t\t\t ubsan_type_descriptor (TREE_TYPE (ptr), true),\n \t\t\t\t NULL_TREE);\n   data = build_fold_addr_expr_loc (loc, data);\n@@ -658,7 +662,7 @@ tree\n ubsan_build_overflow_builtin (tree_code code, location_t loc, tree lhstype,\n \t\t\t      tree op0, tree op1)\n {\n-  tree data = ubsan_create_data (\"__ubsan_overflow_data\", loc, NULL,\n+  tree data = ubsan_create_data (\"__ubsan_overflow_data\", &loc, NULL,\n \t\t\t\t ubsan_type_descriptor (lhstype, false),\n \t\t\t\t NULL_TREE);\n   enum built_in_function fn_code;\n@@ -841,7 +845,7 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n   update_stmt (stmt);\n \n   tree data = ubsan_create_data (\"__ubsan_invalid_value_data\",\n-\t\t\t\t loc, NULL,\n+\t\t\t\t &loc, NULL,\n \t\t\t\t ubsan_type_descriptor (type, false),\n \t\t\t\t NULL_TREE);\n   data = build_fold_addr_expr_loc (loc, data);"}, {"sha": "67cc6e915e3930d9649ac87d8d9c7530f22fce4a", "filename": "gcc/ubsan.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/gcc%2Fubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07d72e1df341f3c9a4b74c01e20b6360e2b99a59/gcc%2Fubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.h?ref=07d72e1df341f3c9a4b74c01e20b6360e2b99a59", "patch": "@@ -38,7 +38,7 @@ struct ubsan_mismatch_data {\n \n extern void ubsan_expand_null_ifn (gimple_stmt_iterator);\n extern tree ubsan_instrument_unreachable (location_t);\n-extern tree ubsan_create_data (const char *, location_t,\n+extern tree ubsan_create_data (const char *, const location_t *,\n \t\t\t       const struct ubsan_mismatch_data *, ...);\n extern tree ubsan_type_descriptor (tree, bool);\n extern tree ubsan_encode_value (tree, bool = false);"}]}