{"sha": "8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0YzZlMjhjZjljNTFlODViMjZlMTQzY2ZjODEwNGYxMzRjYmIyYw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2010-08-10T18:45:10Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2010-08-10T18:45:10Z"}, "message": "re PR bootstrap/45177 (cc1 runs out of memory building libgcc in ARM cross-compiler)\n\n\tPR bootstrap/45177\n\t* config/arm/arm.c (multiple_operation_profitable_p): Move xscale\n\ttest here from arm_gen_load_multiple_1.\n\t(arm_gen_load_multiple_1, arm_gen_store_multiple_1): Use\n\tmultiple_operation_profitable_p.\n\nFrom-SVN: r163077", "tree": {"sha": "ebfe1b2eaefb7d8e9915ce44623b6d7048de529e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebfe1b2eaefb7d8e9915ce44623b6d7048de529e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c/comments", "author": null, "committer": null, "parents": [{"sha": "c1510a4900e05983c03f36c7374b46bc2d2640b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1510a4900e05983c03f36c7374b46bc2d2640b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1510a4900e05983c03f36c7374b46bc2d2640b5"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "8ae881124abdbd85c751bacc539dc5b75dec79ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c", "patch": "@@ -1,3 +1,11 @@\n+2010-08-10  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\tPR bootstrap/45177\n+\t* config/arm/arm.c (multiple_operation_profitable_p): Move xscale\n+\ttest here from arm_gen_load_multiple_1.\n+\t(arm_gen_load_multiple_1, arm_gen_store_multiple_1): Use\n+\tmultiple_operation_profitable_p.\n+\n 2010-08-10  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* tree-ssa-prec. (init_pre): Call alloc_aux_for_blocks."}, {"sha": "416068d3c0131f235b8c65ffe8c97a6e5dc95b63", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8f4c6e28cf9c51e85b26e143cfc8104f134cbb2c", "patch": "@@ -9289,6 +9289,36 @@ multiple_operation_profitable_p (bool is_store ATTRIBUTE_UNUSED,\n   if (nops == 2 && arm_ld_sched && add_offset != 0)\n     return false;\n \n+  /* XScale has load-store double instructions, but they have stricter\n+     alignment requirements than load-store multiple, so we cannot\n+     use them.\n+\n+     For XScale ldm requires 2 + NREGS cycles to complete and blocks\n+     the pipeline until completion.\n+\n+\tNREGS\t\tCYCLES\n+\t  1\t\t  3\n+\t  2\t\t  4\n+\t  3\t\t  5\n+\t  4\t\t  6\n+\n+     An ldr instruction takes 1-3 cycles, but does not block the\n+     pipeline.\n+\n+\tNREGS\t\tCYCLES\n+\t  1\t\t 1-3\n+\t  2\t\t 2-6\n+\t  3\t\t 3-9\n+\t  4\t\t 4-12\n+\n+     Best case ldr will always win.  However, the more ldr instructions\n+     we issue, the less likely we are to be able to schedule them well.\n+     Using ldr instructions also increases code size.\n+\n+     As a compromise, we use ldr for counts of 1 or 2 regs, and ldm\n+     for counts of 3 or 4 regs.  */\n+  if (nops <= 2 && arm_tune_xscale && !optimize_size)\n+    return false;\n   return true;\n }\n \n@@ -9641,35 +9671,7 @@ arm_gen_load_multiple_1 (int count, int *regs, rtx *mems, rtx basereg,\n   int i = 0, j;\n   rtx result;\n \n-  /* XScale has load-store double instructions, but they have stricter\n-     alignment requirements than load-store multiple, so we cannot\n-     use them.\n-\n-     For XScale ldm requires 2 + NREGS cycles to complete and blocks\n-     the pipeline until completion.\n-\n-\tNREGS\t\tCYCLES\n-\t  1\t\t  3\n-\t  2\t\t  4\n-\t  3\t\t  5\n-\t  4\t\t  6\n-\n-     An ldr instruction takes 1-3 cycles, but does not block the\n-     pipeline.\n-\n-\tNREGS\t\tCYCLES\n-\t  1\t\t 1-3\n-\t  2\t\t 2-6\n-\t  3\t\t 3-9\n-\t  4\t\t 4-12\n-\n-     Best case ldr will always win.  However, the more ldr instructions\n-     we issue, the less likely we are to be able to schedule them well.\n-     Using ldr instructions also increases code size.\n-\n-     As a compromise, we use ldr for counts of 1 or 2 regs, and ldm\n-     for counts of 3 or 4 regs.  */\n-  if (arm_tune_xscale && count <= 2 && ! optimize_size)\n+  if (!multiple_operation_profitable_p (false, count, 0))\n     {\n       rtx seq;\n \n@@ -9721,9 +9723,7 @@ arm_gen_store_multiple_1 (int count, int *regs, rtx *mems, rtx basereg,\n   if (GET_CODE (basereg) == PLUS)\n     basereg = XEXP (basereg, 0);\n \n-  /* See arm_gen_load_multiple_1 for discussion of\n-     the pros/cons of ldm/stm usage for XScale.  */\n-  if (arm_tune_xscale && count <= 2 && ! optimize_size)\n+  if (!multiple_operation_profitable_p (false, count, 0))\n     {\n       rtx seq;\n "}]}