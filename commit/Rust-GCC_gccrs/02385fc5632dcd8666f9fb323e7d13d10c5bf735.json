{"sha": "02385fc5632dcd8666f9fb323e7d13d10c5bf735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIzODVmYzU2MzJkY2Q4NjY2ZjlmYjMyM2U3ZDEzZDEwYzViZjczNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-05-18T12:58:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-05-18T12:58:39Z"}, "message": "(EXTRA_CONSTRAINT): New macro.\n\nFrom-SVN: r14089", "tree": {"sha": "38e94e3ebd7c757c8e627e27a028fd540f19c994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38e94e3ebd7c757c8e627e27a028fd540f19c994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02385fc5632dcd8666f9fb323e7d13d10c5bf735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02385fc5632dcd8666f9fb323e7d13d10c5bf735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02385fc5632dcd8666f9fb323e7d13d10c5bf735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02385fc5632dcd8666f9fb323e7d13d10c5bf735/comments", "author": null, "committer": null, "parents": [{"sha": "6e848450718f16cd67bb8677205034c22a130cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e848450718f16cd67bb8677205034c22a130cbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e848450718f16cd67bb8677205034c22a130cbb"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "7481dc7660812031f68e5930a3e99647c2a46818", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02385fc5632dcd8666f9fb323e7d13d10c5bf735/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02385fc5632dcd8666f9fb323e7d13d10c5bf735/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=02385fc5632dcd8666f9fb323e7d13d10c5bf735", "patch": "@@ -738,6 +738,19 @@ extern enum reg_class regno_reg_class[];\n    (C) == 'H' ? (TARGET_FPA && standard_sun_fpa_constant_p (VALUE)) : 0)\n #endif /* defined SUPPORT_SUN_FPA */\n \n+/* A C expression that defines the optional machine-dependent constraint\n+   letters that can be used to segregate specific types of operands,  \n+   usually memory references, for the target machine.  It should return 1 if\n+   VALUE corresponds to the operand type represented by the constraint letter\n+   C.  If C is not defined as an extra constraint, the value returned should \n+   be 0 regardless of VALUE.  */\n+\n+/* For the m68k, `Q' means address register indirect addressing mode. */\n+\n+#define EXTRA_CONSTRAINT(OP, C)\t\\\n+  ((C) == 'Q' ? (GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == REG) : \\\n+   0 )\n+\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines"}]}