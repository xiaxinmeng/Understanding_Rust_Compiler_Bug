{"sha": "9bab2a0dc84e7c3e14cb44fcd6ac41df079baa0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhYjJhMGRjODRlN2MzZTE0Y2I0NGZjZDZhYzQxZGYwNzliYWEwZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-01T12:05:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-01T12:07:54Z"}, "message": "c++: Refactor lookup_and_check_tag\n\nIt turns out I'd already found lookup_and_check_tag's control flow\nconfusing, and had refactored it on the modules branch.  For instance,\nit continually checks 'if (decl &&$ condition)' before finally getting\nto 'else if (!decl)'.  why not just check !decl first and be done?\nWell, it is done thusly.\n\n\tgcc/cp/\n\t* decl.c (lookup_and_check_tag): Refactor.", "tree": {"sha": "84b7c7fba6fbb7d9534e06c768d8574318618a69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84b7c7fba6fbb7d9534e06c768d8574318618a69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bab2a0dc84e7c3e14cb44fcd6ac41df079baa0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bab2a0dc84e7c3e14cb44fcd6ac41df079baa0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bab2a0dc84e7c3e14cb44fcd6ac41df079baa0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bab2a0dc84e7c3e14cb44fcd6ac41df079baa0f/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "026ca1121c2f4514494c10860ef3c49f18eccf9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026ca1121c2f4514494c10860ef3c49f18eccf9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/026ca1121c2f4514494c10860ef3c49f18eccf9d"}], "stats": {"total": 116, "additions": 59, "deletions": 57}, "files": [{"sha": "d2a8d4012abde3e3bbca3a13bf1aaa3dbe88e48c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 59, "deletions": 57, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bab2a0dc84e7c3e14cb44fcd6ac41df079baa0f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bab2a0dc84e7c3e14cb44fcd6ac41df079baa0f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9bab2a0dc84e7c3e14cb44fcd6ac41df079baa0f", "patch": "@@ -14885,71 +14885,73 @@ lookup_and_check_tag (enum tag_types tag_code, tree name,\n   else\n     decl = lookup_elaborated_type (name, how);\n \n-  if (decl\n-      && (DECL_CLASS_TEMPLATE_P (decl)\n-\t  /* If scope is TAG_how::CURRENT_ONLY we're defining a class,\n-\t     so ignore a template template parameter.  */\n-\t  || (how != TAG_how::CURRENT_ONLY\n-\t      && DECL_TEMPLATE_TEMPLATE_PARM_P (decl))))\n-    decl = DECL_TEMPLATE_RESULT (decl);\n-\n-  if (decl && TREE_CODE (decl) == TYPE_DECL)\n-    {\n-      /* Look for invalid nested type:\n-\t   class C {\n-\t     class C {};\n-\t   };  */\n-      if (how == TAG_how::CURRENT_ONLY && DECL_SELF_REFERENCE_P (decl))\n-\t{\n-\t  error (\"%qD has the same name as the class in which it is \"\n-\t\t \"declared\", decl);\n-\t  return error_mark_node;\n-\t}\n-\n-      /* Two cases we need to consider when deciding if a class\n-\t template is allowed as an elaborated type specifier:\n-\t 1. It is a self reference to its own class.\n-\t 2. It comes with a template header.\n \n-\t For example:\n-\n-\t   template <class T> class C {\n-\t     class C *c1;\t\t// DECL_SELF_REFERENCE_P is true\n-\t     class D;\n-\t   };\n-\t   template <class U> class C; // template_header_p is true\n-\t   template <class T> class C<T>::D {\n-\t     class C *c2;\t\t// DECL_SELF_REFERENCE_P is true\n-\t   };  */\n-\n-      tree t = check_elaborated_type_specifier (tag_code,\n-\t\t\t\t\t\tdecl,\n-\t\t\t\t\t\ttemplate_header_p\n-\t\t\t\t\t\t| DECL_SELF_REFERENCE_P (decl));\n-      if (template_header_p && t && CLASS_TYPE_P (t)\n-\t  && (!CLASSTYPE_TEMPLATE_INFO (t)\n-\t      || (!PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (t)))))\n-\t{\n-\t  error (\"%qT is not a template\", t);\n-\t  inform (location_of (t), \"previous declaration here\");\n-\t  if (TYPE_CLASS_SCOPE_P (t)\n-\t      && CLASSTYPE_TEMPLATE_INFO (TYPE_CONTEXT (t)))\n-\t    inform (input_location,\n-\t\t    \"perhaps you want to explicitly add %<%T::%>\",\n-\t\t    TYPE_CONTEXT (t));\n-\t  t = error_mark_node;\n-\t}\n+  if (!decl)\n+    /* We found nothing.  */\n+    return NULL_TREE;\n \n-      return t;\n-    }\n-  else if (decl && TREE_CODE (decl) == TREE_LIST)\n+  if (TREE_CODE (decl) == TREE_LIST)\n     {\n       error (\"reference to %qD is ambiguous\", name);\n       print_candidates (decl);\n       return error_mark_node;\n     }\n-  else\n+\n+  if (DECL_CLASS_TEMPLATE_P (decl)\n+      /* If scope is TAG_how::CURRENT_ONLY we're defining a class,\n+\t so ignore a template template parameter.  */\n+      || (how != TAG_how::CURRENT_ONLY && DECL_TEMPLATE_TEMPLATE_PARM_P (decl)))\n+    decl = DECL_TEMPLATE_RESULT (decl);\n+\n+  if (TREE_CODE (decl) != TYPE_DECL)\n+    /* Found not-a-type.  */\n     return NULL_TREE;\n+\n+    /* Look for invalid nested type:\n+     class C {\n+     class C {};\n+     };  */\n+  if (how == TAG_how::CURRENT_ONLY && DECL_SELF_REFERENCE_P (decl))\n+    {\n+      error (\"%qD has the same name as the class in which it is \"\n+\t     \"declared\", decl);\n+      return error_mark_node;\n+    }\n+\n+  /* Two cases we need to consider when deciding if a class\n+     template is allowed as an elaborated type specifier:\n+     1. It is a self reference to its own class.\n+     2. It comes with a template header.\n+\n+     For example:\n+\n+     template <class T> class C {\n+       class C *c1;\t\t// DECL_SELF_REFERENCE_P is true\n+       class D;\n+     };\n+     template <class U> class C; // template_header_p is true\n+     template <class T> class C<T>::D {\n+       class C *c2;\t\t// DECL_SELF_REFERENCE_P is true\n+     };  */\n+\n+  tree t = check_elaborated_type_specifier (tag_code, decl,\n+\t\t\t\t\t    template_header_p\n+\t\t\t\t\t    | DECL_SELF_REFERENCE_P (decl));\n+  if (template_header_p && t && CLASS_TYPE_P (t)\n+      && (!CLASSTYPE_TEMPLATE_INFO (t)\n+\t  || (!PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (t)))))\n+    {\n+      error (\"%qT is not a template\", t);\n+      inform (location_of (t), \"previous declaration here\");\n+      if (TYPE_CLASS_SCOPE_P (t)\n+\t  && CLASSTYPE_TEMPLATE_INFO (TYPE_CONTEXT (t)))\n+\tinform (input_location,\n+\t\t\"perhaps you want to explicitly add %<%T::%>\",\n+\t\tTYPE_CONTEXT (t));\n+      return error_mark_node;\n+    }\n+\n+  return t;\n }\n \n /* Get the struct, enum or union (TAG_CODE says which) with tag NAME."}]}