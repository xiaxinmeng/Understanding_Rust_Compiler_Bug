{"sha": "12cfb4fc729b05891d1c811787132bf112e0cb5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJjZmI0ZmM3MjliMDU4OTFkMWM4MTE3ODcxMzJiZjExMmUwY2I1Zg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-01T01:42:15Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-01T01:42:15Z"}, "message": "parse.y (dump_java_tree): New function.\n\n\t* parse.y (dump_java_tree): New function.\n\t(source_end_java_method): Call it.\n\t(end_class_declaration): Likewise.\n\t* lang.c (java_decode_option): Call dump_switch_p.\n\nFrom-SVN: r48439", "tree": {"sha": "b5c86761b1b81a2eebe2397358e12c43c32b175e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5c86761b1b81a2eebe2397358e12c43c32b175e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12cfb4fc729b05891d1c811787132bf112e0cb5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12cfb4fc729b05891d1c811787132bf112e0cb5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12cfb4fc729b05891d1c811787132bf112e0cb5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12cfb4fc729b05891d1c811787132bf112e0cb5f/comments", "author": null, "committer": null, "parents": [{"sha": "f95e79cc11bd75adb2847b95d575a4f7fd3e14c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f95e79cc11bd75adb2847b95d575a4f7fd3e14c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f95e79cc11bd75adb2847b95d575a4f7fd3e14c8"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "e3ba451ad4a7e10dd3855fa8326afc41d1b0acd3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12cfb4fc729b05891d1c811787132bf112e0cb5f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12cfb4fc729b05891d1c811787132bf112e0cb5f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=12cfb4fc729b05891d1c811787132bf112e0cb5f", "patch": "@@ -1,3 +1,10 @@\n+2001-12-31  Tom Tromey  <tromey@redhat.com>\n+\n+\t* parse.y (dump_java_tree): New function.\n+\t(source_end_java_method): Call it.\n+\t(end_class_declaration): Likewise.\n+\t* lang.c (java_decode_option): Call dump_switch_p.\n+\n 2001-12-28  Tom Tromey  <tromey@redhat.com>\n \n \t* gen-table.pl: Don't process characters after \\uffff.  Added"}, {"sha": "0f62594baa5049cb2e67b815024a2892a0b2a410", "filename": "gcc/java/lang.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12cfb4fc729b05891d1c811787132bf112e0cb5f/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12cfb4fc729b05891d1c811787132bf112e0cb5f/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=12cfb4fc729b05891d1c811787132bf112e0cb5f", "patch": "@@ -340,8 +340,10 @@ java_decode_option (argc, argv)\n \t P's value is the option sans `-f'.\n \t Search for it in the table of options.  */\n       p += 2;\n-      return process_option_with_no (p, lang_f_options,\n-\t\t\t\t     ARRAY_SIZE (lang_f_options));\n+      if (process_option_with_no (p, lang_f_options,\n+\t\t\t\t  ARRAY_SIZE (lang_f_options)))\n+\treturn 1;\n+      return dump_switch_p (p);\n     }\n \n   if (strcmp (p, \"-Wall\") == 0)"}, {"sha": "e1981431fd5e0cfb640026c6b0ad4858db432d59", "filename": "gcc/java/parse.y", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12cfb4fc729b05891d1c811787132bf112e0cb5f/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12cfb4fc729b05891d1c811787132bf112e0cb5f/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=12cfb4fc729b05891d1c811787132bf112e0cb5f", "patch": "@@ -108,6 +108,7 @@ static tree resolve_package PARAMS ((tree, tree *));\n static tree lookup_package_type PARAMS ((const char *, int));\n static tree resolve_class PARAMS ((tree, tree, tree, tree));\n static void declare_local_variables PARAMS ((int, tree, tree));\n+static void dump_java_tree PARAMS ((enum tree_dump_index, tree));\n static void source_start_java_method PARAMS ((tree));\n static void source_end_java_method PARAMS ((void));\n static tree find_name_in_single_imports PARAMS ((tree));\n@@ -4060,6 +4061,9 @@ end_class_declaration (resume)\n      popped by a resume. */\n   int no_error_occurred = ctxp->next && GET_CPC () != error_mark_node;\n \n+  if (GET_CPC () != error_mark_node)\n+    dump_java_tree (TDI_class, GET_CPC ());\n+\n   java_parser_context_pop_initialized_field ();\n   POP_CPC ();\n   if (resume && no_error_occurred)\n@@ -7391,6 +7395,24 @@ end_artificial_method_body (mdecl)\n   exit_block ();\n }\n \n+/* Dump a tree of some kind.  This is a convenience wrapper for the\n+   dump_* functions in tree-dump.c.  */\n+static void\n+dump_java_tree (phase, t)\n+     enum tree_dump_index phase;\n+     tree t;\n+{\n+  FILE *stream;\n+  int flags;\n+\n+  stream = dump_begin (phase, &flags);\n+  if (stream)\n+    {\n+      dump_node (t, flags, stream);\n+      dump_end (phase, stream);\n+    }\n+}\n+\n /* Terminate a function and expand its body.  */\n \n static void\n@@ -7410,6 +7432,10 @@ source_end_java_method ()\n   if (BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (fndecl)) == empty_stmt_node)\n     BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (fndecl)) = NULL_TREE;\n \n+  /* We've generated all the trees for this function, and it has been\n+     patched.  Dump it to a file if the user requested it.  */\n+  dump_java_tree (TDI_original, fndecl);\n+\n   /* Generate function's code */\n   if (BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (fndecl))\n       && ! flag_emit_class_files"}]}