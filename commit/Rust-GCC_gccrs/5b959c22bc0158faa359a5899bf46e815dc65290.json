{"sha": "5b959c22bc0158faa359a5899bf46e815dc65290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI5NTljMjJiYzAxNThmYWEzNTlhNTg5OWJmNDZlODE1ZGM2NTI5MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-26T08:08:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-06-26T11:04:21Z"}, "message": "tree-optimization/95897 - fix fold-left SLP reduction insert place\n\nThis fixes computation of the insertion place for fold-left SLP\nreductions where the PHIs do not have vectorized stmts.  The\nSLP representation isn't perfect here thus the following.\n\n2020-06-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95897\n\t* tree-vectorizer.h (vectorizable_induction): Remove\n\tunused gimple_stmt_iterator * parameter.\n\t* tree-vect-loop.c (vectorizable_induction): Likewise.\n\t(vect_analyze_loop_operations): Adjust.\n\t* tree-vect-stmts.c (vect_analyze_stmt): Likewise.\n\t(vect_transform_stmt): Likewise.\n\t* tree-vect-slp.c (vect_schedule_slp_instance): Adjust\n\tfor fold-left reductions, clarify existing reduction case.\n\n\t* gcc.dg/vect/pr95897.c: New testcase.", "tree": {"sha": "d82541e9a266920e6b853dd68010261ae7e6a6de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d82541e9a266920e6b853dd68010261ae7e6a6de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b959c22bc0158faa359a5899bf46e815dc65290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b959c22bc0158faa359a5899bf46e815dc65290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b959c22bc0158faa359a5899bf46e815dc65290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b959c22bc0158faa359a5899bf46e815dc65290/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87fce92c5c3660a08172a9e29faf54573cedd9ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87fce92c5c3660a08172a9e29faf54573cedd9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87fce92c5c3660a08172a9e29faf54573cedd9ae"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "a17b72dd040dc0507ad6fa30905d168c84730b59", "filename": "gcc/testsuite/gcc.dg/vect/pr95897.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b959c22bc0158faa359a5899bf46e815dc65290/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr95897.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b959c22bc0158faa359a5899bf46e815dc65290/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr95897.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr95897.c?ref=5b959c22bc0158faa359a5899bf46e815dc65290", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+double foo (double x, int n)\n+{\n+  double s = 0.;\n+  for (int i = 0; i < n; ++i)\n+    {\n+      s += x;\n+      s += x;\n+      s += x;\n+    }\n+  return s;\n+}"}, {"sha": "bc913eeeb3628e2b9b29e2cbc0d573db7aac273b", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b959c22bc0158faa359a5899bf46e815dc65290/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b959c22bc0158faa359a5899bf46e815dc65290/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=5b959c22bc0158faa359a5899bf46e815dc65290", "patch": "@@ -1573,7 +1573,7 @@ vect_analyze_loop_operations (loop_vec_info loop_vinfo)\n               if (STMT_VINFO_DEF_TYPE (stmt_info) == vect_induction_def\n \t\t  && ! PURE_SLP_STMT (stmt_info))\n \t\tok = vectorizable_induction (loop_vinfo,\n-\t\t\t\t\t     stmt_info, NULL, NULL, NULL,\n+\t\t\t\t\t     stmt_info, NULL, NULL,\n \t\t\t\t\t     &cost_vec);\n \t      else if ((STMT_VINFO_DEF_TYPE (stmt_info) == vect_reduction_def\n \t\t\t|| (STMT_VINFO_DEF_TYPE (stmt_info)\n@@ -7285,7 +7285,6 @@ vect_worthwhile_without_simd_p (vec_info *vinfo, tree_code code)\n bool\n vectorizable_induction (loop_vec_info loop_vinfo,\n \t\t\tstmt_vec_info stmt_info,\n-\t\t\tgimple_stmt_iterator *gsi ATTRIBUTE_UNUSED,\n \t\t\tgimple **vec_stmt, slp_tree slp_node,\n \t\t\tstmt_vector_for_cost *cost_vec)\n {"}, {"sha": "b223956e3af494397f4efff4476e3e3e6f66f94d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b959c22bc0158faa359a5899bf46e815dc65290/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b959c22bc0158faa359a5899bf46e815dc65290/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=5b959c22bc0158faa359a5899bf46e815dc65290", "patch": "@@ -4251,8 +4251,15 @@ vect_schedule_slp_instance (vec_info *vinfo,\n       si = gsi_for_stmt (last_stmt_info->stmt);\n     }\n   else if (SLP_TREE_CHILDREN (node).is_empty ())\n-    /* This happens for reduction PHIs.  */\n-    si = gsi_for_stmt (vect_find_last_scalar_stmt_in_slp (node)->stmt);\n+    {\n+      /* This happens for reduction and induction PHIs where we do not use the\n+\t insertion iterator.  */\n+      gcc_assert (STMT_VINFO_TYPE (SLP_TREE_REPRESENTATIVE (node))\n+\t\t  == cycle_phi_info_type\n+\t\t  || (STMT_VINFO_TYPE (SLP_TREE_REPRESENTATIVE (node))\n+\t\t      == induc_vec_info_type));\n+      si = gsi_none ();\n+    }\n   else\n     {\n       /* Emit other stmts after the children vectorized defs which is\n@@ -4261,6 +4268,20 @@ vect_schedule_slp_instance (vec_info *vinfo,\n       FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n \tif (SLP_TREE_DEF_TYPE (child) == vect_internal_def)\n \t  {\n+\t    /* For fold-left reductions we are retaining the scalar\n+\t       reduction PHI but we still have SLP_TREE_NUM_VEC_STMTS\n+\t       set so the representation isn't perfect.  Resort to the\n+\t       last scalar def here.  */\n+\t    if (SLP_TREE_VEC_STMTS (child).is_empty ())\n+\t      {\n+\t\tgcc_assert (STMT_VINFO_TYPE (SLP_TREE_REPRESENTATIVE (child))\n+\t\t\t    == cycle_phi_info_type);\n+\t\tgphi *phi = as_a <gphi *>\n+\t\t\t      (vect_find_last_scalar_stmt_in_slp (child)->stmt);\n+\t\tif (!last_stmt\n+\t\t    || vect_stmt_dominates_stmt_p (last_stmt, phi))\n+\t\t  last_stmt = phi;\n+\t      }\n \t    /* We are emitting all vectorized stmts in the same place and\n \t       the last one is the last.\n \t       ???  Unless we have a load permutation applied and that"}, {"sha": "9b7b04ce2d3994c45a978dd9118549a1731a962c", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b959c22bc0158faa359a5899bf46e815dc65290/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b959c22bc0158faa359a5899bf46e815dc65290/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=5b959c22bc0158faa359a5899bf46e815dc65290", "patch": "@@ -10549,7 +10549,7 @@ vect_analyze_stmt (vec_info *vinfo,\n \t  || vectorizable_reduction (as_a <loop_vec_info> (vinfo), stmt_info,\n \t\t\t\t     node, node_instance, cost_vec)\n \t  || vectorizable_induction (as_a <loop_vec_info> (vinfo), stmt_info,\n-\t\t\t\t     NULL, NULL, node, cost_vec)\n+\t\t\t\t     NULL, node, cost_vec)\n \t  || vectorizable_shift (vinfo, stmt_info, NULL, NULL, node, cost_vec)\n \t  || vectorizable_condition (vinfo, stmt_info,\n \t\t\t\t     NULL, NULL, node, cost_vec)\n@@ -10631,7 +10631,7 @@ vect_transform_stmt (vec_info *vinfo,\n \n     case induc_vec_info_type:\n       done = vectorizable_induction (as_a <loop_vec_info> (vinfo),\n-\t\t\t\t     stmt_info, gsi, &vec_stmt, slp_node,\n+\t\t\t\t     stmt_info, &vec_stmt, slp_node,\n \t\t\t\t     NULL);\n       gcc_assert (done);\n       break;"}, {"sha": "d9f6a67264dec5ccc66b957d482e95a52cc1bf3d", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b959c22bc0158faa359a5899bf46e815dc65290/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b959c22bc0158faa359a5899bf46e815dc65290/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=5b959c22bc0158faa359a5899bf46e815dc65290", "patch": "@@ -1967,7 +1967,6 @@ extern bool vectorizable_reduction (loop_vec_info, stmt_vec_info,\n \t\t\t\t    slp_tree, slp_instance,\n \t\t\t\t    stmt_vector_for_cost *);\n extern bool vectorizable_induction (loop_vec_info, stmt_vec_info,\n-\t\t\t\t    gimple_stmt_iterator *,\n \t\t\t\t    gimple **, slp_tree,\n \t\t\t\t    stmt_vector_for_cost *);\n extern bool vect_transform_reduction (loop_vec_info, stmt_vec_info,"}]}