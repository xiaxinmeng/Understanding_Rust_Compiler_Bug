{"sha": "4fcc2065d940271f8f749853dafd78bfa3b1fc0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZjYzIwNjVkOTQwMjcxZjhmNzQ5ODUzZGFmZDc4YmZhM2IxZmMwZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2002-06-03T19:08:59Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-06-03T19:08:59Z"}, "message": "diagnostic.h (diagnostic_count): Move from output_buffer to diagnostic_context.\n\n\t* diagnostic.h (diagnostic_count): Move from output_buffer to\n\tdiagnostic_context.\n\t(diagnostic_kind_count): Adjust definition.\n\nFrom-SVN: r54218", "tree": {"sha": "3dc50d9e0ba957f233bdc11254b326ab3decc8ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dc50d9e0ba957f233bdc11254b326ab3decc8ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fcc2065d940271f8f749853dafd78bfa3b1fc0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fcc2065d940271f8f749853dafd78bfa3b1fc0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fcc2065d940271f8f749853dafd78bfa3b1fc0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fcc2065d940271f8f749853dafd78bfa3b1fc0d/comments", "author": null, "committer": null, "parents": [{"sha": "5204d66596d7864904364c8a61a1e62e81c091a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5204d66596d7864904364c8a61a1e62e81c091a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5204d66596d7864904364c8a61a1e62e81c091a1"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "82bb095c6cfc156738d18b80af41093be7332523", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fcc2065d940271f8f749853dafd78bfa3b1fc0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fcc2065d940271f8f749853dafd78bfa3b1fc0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fcc2065d940271f8f749853dafd78bfa3b1fc0d", "patch": "@@ -1,3 +1,9 @@\n+2002-06-03  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.h (diagnostic_count): Move from output_buffer to \n+\tdiagnostic_context.\n+\t(diagnostic_kind_count): Adjust definition.\n+\n Mon Jun  3 19:11:53 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* except.c (except.c): Do not rebuild CFG."}, {"sha": "aae4f56fc0bad645e4f8e25d3c29c7ae3da17325", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fcc2065d940271f8f749853dafd78bfa3b1fc0d/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fcc2065d940271f8f749853dafd78bfa3b1fc0d/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=4fcc2065d940271f8f749853dafd78bfa3b1fc0d", "patch": "@@ -90,17 +90,12 @@ typedef struct\n \n   /* A pointer to the variable argument-list for formatting.  */  \n   va_list *format_args;\n-\n-  /* The number of times we have issued diagnostics.  */\n-  int diagnostic_count[DK_LAST_DIAGNOSTIC_KIND];\n } output_state;\n \n-/* The output buffer datatype.  This is best seen as an abstract datatype.  */\n+/* The output buffer datatype.  This is best seen as an abstract datatype\n+   whose fields should not be accessed directly by clients.  */\n struct output_buffer\n {\n-  /* Internal data.  These fields should not be accessed directly by\n-     front-ends.  */\n-\n   /* The current state of the buffer.  */\n   output_state state;\n \n@@ -152,7 +147,7 @@ struct output_buffer\n /* The amount of whitespace to be emitted when starting a new line.  */\n #define output_indentation(BUFFER) (BUFFER)->state.indent_skip\n \n-/* A pointer to the formatted diagonstic message.  */\n+/* A pointer to the formatted diagnostic message.  */\n #define output_message_text(BUFFER) \\\n    ((const char *) obstack_base (&(BUFFER)->obstack))\n \n@@ -182,7 +177,7 @@ struct diagnostic_context\n      purpose of message formatting.  */\n   va_list *args_ptr;\n \n-  /* The name of the source file involved in the diiagnostic.  */     \n+  /* The name of the source file involved in the diagnostic.  */     \n   const char *file;\n \n   /* The line-location in the source file.  */\n@@ -191,6 +186,9 @@ struct diagnostic_context\n   /* Is this message a warning?  */\n   int warn;\n \n+  /* The number of times we have issued diagnostics.  */\n+  int diagnostic_count[DK_LAST_DIAGNOSTIC_KIND];\n+\n   /* This function is called before any message is printed out.  It is\n      responsible for preparing message prefix and such.  For example, it\n      might say:\n@@ -251,17 +249,16 @@ struct diagnostic_context\n \n #define diagnostic_buffer (&global_dc->buffer)\n \n-/* This diagnostic context is used by front-ends that directly output\n+/* This diagnostic_context is used by front-ends that directly output\n    diagnostic messages without going through `error', `warning',\n    and similar functions.  */\n extern diagnostic_context *global_dc;\n \n /* The total count of a KIND of diagnostics meitted so far.  */\n-#define diagnostic_kind_count(DC, DK) \\\n-   (DC)->buffer.state.diagnostic_count[(int) (DK)]\n+#define diagnostic_kind_count(DC, DK) (DC)->diagnostic_count[(int) (DK)]\n \n /* The number of errors that have been issued so far.  Ideally, these\n-   would take an output_buffer as an argument.  */\n+   would take a diagnostic_context as an argument.  */\n #define errorcount diagnostic_kind_count (global_dc, DK_ERROR)\n /* Similarly, but for warnings.  */\n #define warningcount diagnostic_kind_count (global_dc, DK_WARNING)"}]}