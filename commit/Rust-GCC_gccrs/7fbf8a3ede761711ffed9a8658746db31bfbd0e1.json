{"sha": "7fbf8a3ede761711ffed9a8658746db31bfbd0e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZiZjhhM2VkZTc2MTcxMWZmZWQ5YTg2NTg3NDZkYjMxYmZiZDBlMQ==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2014-05-28T13:37:02Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2014-05-28T13:37:02Z"}, "message": "expr.c (expand_assignment): Fold the bitpos in the to_rtx if sufficiently aligned and an offset is used at...\n\n2014-05-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * expr.c (expand_assignment): Fold the bitpos in the to_rtx if\n        sufficiently aligned and an offset is used at the same time.\n        (expand_expr_real_1): Likewise.\n\nFrom-SVN: r211020", "tree": {"sha": "cf2d6a8238ccc834c31562af45ad8fcf181e6fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf2d6a8238ccc834c31562af45ad8fcf181e6fd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fbf8a3ede761711ffed9a8658746db31bfbd0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fbf8a3ede761711ffed9a8658746db31bfbd0e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fbf8a3ede761711ffed9a8658746db31bfbd0e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fbf8a3ede761711ffed9a8658746db31bfbd0e1/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b017a17489a1e89510a224a3796275ec5cac97c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b017a17489a1e89510a224a3796275ec5cac97c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b017a17489a1e89510a224a3796275ec5cac97c4"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "7d888f8863acc823ddd9ba2c99b84b84524761ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fbf8a3ede761711ffed9a8658746db31bfbd0e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fbf8a3ede761711ffed9a8658746db31bfbd0e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fbf8a3ede761711ffed9a8658746db31bfbd0e1", "patch": "@@ -1,3 +1,9 @@\n+2014-05-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* expr.c (expand_assignment): Fold the bitpos in the to_rtx if\n+\tsufficiently aligned and an offset is used at the same time.\n+\t(expand_expr_real_1): Likewise.\n+\n 2014-05-28  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/61045"}, {"sha": "d99bc1ef9fba674a18538817457675b6813d005a", "filename": "gcc/expr.c", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fbf8a3ede761711ffed9a8658746db31bfbd0e1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fbf8a3ede761711ffed9a8658746db31bfbd0e1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7fbf8a3ede761711ffed9a8658746db31bfbd0e1", "patch": "@@ -4838,15 +4838,29 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \t  if (GET_MODE (offset_rtx) != address_mode)\n \t    offset_rtx = convert_to_mode (address_mode, offset_rtx, 0);\n \n-\t  /* The check for a constant address in TO_RTX not having VOIDmode\n-\t     is probably no longer necessary.  */\n-\t  if (MEM_P (to_rtx)\n-\t      && GET_MODE (to_rtx) == BLKmode\n-\t      && GET_MODE (XEXP (to_rtx, 0)) != VOIDmode\n+\t  /* If we have an expression in OFFSET_RTX and a non-zero\n+\t     byte offset in BITPOS, adding the byte offset before the\n+\t     OFFSET_RTX results in better intermediate code, which makes\n+\t     later rtl optimization passes perform better.\n+\n+\t     We prefer intermediate code like this:\n+\n+\t     r124:DI=r123:DI+0x18\n+\t     [r124:DI]=r121:DI\n+\n+\t     ... instead of ...\n+\n+\t     r124:DI=r123:DI+0x10\n+\t     [r124:DI+0x8]=r121:DI\n+\n+\t     This is only done for aligned data values, as these can\n+\t     be expected to result in single move instructions.  */\n+\t  if (mode1 != VOIDmode\n+\t      && bitpos != 0\n \t      && bitsize > 0\n \t      && (bitpos % bitsize) == 0\n \t      && (bitsize % GET_MODE_ALIGNMENT (mode1)) == 0\n-\t      && MEM_ALIGN (to_rtx) == GET_MODE_ALIGNMENT (mode1))\n+\t      && MEM_ALIGN (to_rtx) >= GET_MODE_ALIGNMENT (mode1))\n \t    {\n \t      to_rtx = adjust_address (to_rtx, mode1, bitpos / BITS_PER_UNIT);\n \t      bitregion_start = 0;\n@@ -10090,14 +10104,13 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    if (GET_MODE (offset_rtx) != address_mode)\n \t      offset_rtx = convert_to_mode (address_mode, offset_rtx, 0);\n \n-\t    if (GET_MODE (op0) == BLKmode\n-\t\t/* The check for a constant address in OP0 not having VOIDmode\n-\t\t   is probably no longer necessary.  */\n-\t\t&& GET_MODE (XEXP (op0, 0)) != VOIDmode\n-\t\t&& bitsize != 0\n+\t    /* See the comment in expand_assignment for the rationale.  */\n+\t    if (mode1 != VOIDmode\n+\t\t&& bitpos != 0\n+\t\t&& bitsize > 0\n \t\t&& (bitpos % bitsize) == 0\n \t\t&& (bitsize % GET_MODE_ALIGNMENT (mode1)) == 0\n-\t\t&& MEM_ALIGN (op0) == GET_MODE_ALIGNMENT (mode1))\n+\t\t&& MEM_ALIGN (op0) >= GET_MODE_ALIGNMENT (mode1))\n \t      {\n \t\top0 = adjust_address (op0, mode1, bitpos / BITS_PER_UNIT);\n \t\tbitpos = 0;"}]}