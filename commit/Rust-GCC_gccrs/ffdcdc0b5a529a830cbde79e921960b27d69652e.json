{"sha": "ffdcdc0b5a529a830cbde79e921960b27d69652e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZkY2RjMGI1YTUyOWE4MzBjYmRlNzllOTIxOTYwYjI3ZDY5NjUyZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-12-21T19:13:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-12-21T19:13:06Z"}, "message": "re PR ipa/88561 (PGO devirtualization miscompilation of firefox)\n\n\n\tPR ipa/88561\n\t* ipa-polymorphic-call.c\n\t(ipa_polymorphic_call_context::ipa_polymorphic_call_context): Handle\n\targuments of thunks correctly.\n\t(ipa_polymorphic_call_context::get_dynamic_context): Be ready for\n\tNULL instance pinter.\n\t* lto-cgraph.c (lto_output_node): Always stream thunk info.\n\nFrom-SVN: r267338", "tree": {"sha": "892ea8407db771d48dc910156b4061ed84f2e662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/892ea8407db771d48dc910156b4061ed84f2e662"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffdcdc0b5a529a830cbde79e921960b27d69652e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffdcdc0b5a529a830cbde79e921960b27d69652e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffdcdc0b5a529a830cbde79e921960b27d69652e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffdcdc0b5a529a830cbde79e921960b27d69652e/comments", "author": null, "committer": null, "parents": [{"sha": "69597e2f5d15e801cc4911e749a10b718c08fe9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69597e2f5d15e801cc4911e749a10b718c08fe9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69597e2f5d15e801cc4911e749a10b718c08fe9d"}], "stats": {"total": 178, "additions": 174, "deletions": 4}, "files": [{"sha": "b8db48863de5a18a85bfbffd64e620b0d3faaa6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdcdc0b5a529a830cbde79e921960b27d69652e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdcdc0b5a529a830cbde79e921960b27d69652e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffdcdc0b5a529a830cbde79e921960b27d69652e", "patch": "@@ -1,3 +1,13 @@\n+2018-12-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/88561\n+\t* ipa-polymorphic-call.c\n+\t(ipa_polymorphic_call_context::ipa_polymorphic_call_context): Handle\n+\targuments of thunks correctly.\n+\t(ipa_polymorphic_call_context::get_dynamic_context): Be ready for\n+\tNULL instance pinter.\n+\t* lto-cgraph.c (lto_output_node): Always stream thunk info.\n+\n 2018-12-21  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* config/s390/vector.md (\"floatv2div2df2\", \"floatunsv2div2df2\")"}, {"sha": "6e547335079418a09ddf5b0be479c82e8cdcf5f6", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdcdc0b5a529a830cbde79e921960b27d69652e/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdcdc0b5a529a830cbde79e921960b27d69652e/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=ffdcdc0b5a529a830cbde79e921960b27d69652e", "patch": "@@ -995,17 +995,34 @@ ipa_polymorphic_call_context::ipa_polymorphic_call_context (tree fndecl,\n \t{\n \t  outer_type\n \t     = TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (base_pointer)));\n+\t  cgraph_node *node = cgraph_node::get (current_function_decl);\n \t  gcc_assert (TREE_CODE (outer_type) == RECORD_TYPE\n \t\t      || TREE_CODE (outer_type) == UNION_TYPE);\n \n+\t  /* Handle the case we inlined into a thunk.  In this case\n+\t     thunk has THIS pointer of type bar, but it really receives\n+\t     address to its base type foo which sits in bar at \n+\t     0-thunk.fixed_offset.  It starts with code that adds\n+\t     think.fixed_offset to the pointer to compensate for this.\n+\n+\t     Because we walked all the way to the begining of thunk, we now\n+\t     see pointer &bar-thunk.fixed_offset and need to compensate\n+\t     for it.  */\n+\t  if (node->thunk.fixed_offset)\n+\t    offset -= node->thunk.fixed_offset * BITS_PER_UNIT;\n+\n \t  /* Dynamic casting has possibly upcasted the type\n \t     in the hiearchy.  In this case outer type is less\n \t     informative than inner type and we should forget\n \t     about it.  */\n \t  if ((otr_type\n \t       && !contains_type_p (outer_type, offset,\n \t\t\t\t    otr_type))\n-\t      || !contains_polymorphic_type_p (outer_type))\n+\t      || !contains_polymorphic_type_p (outer_type)\n+\t      /* If we compile thunk with virtual offset, the THIS pointer\n+\t\t is adjusted by unknown value.  We can't thus use outer info\n+\t\t at all.  */\n+\t      || node->thunk.virtual_offset_p)\n \t    {\n \t      outer_type = NULL;\n \t      if (instance)\n@@ -1030,7 +1047,15 @@ ipa_polymorphic_call_context::ipa_polymorphic_call_context (tree fndecl,\n \t      maybe_in_construction = false;\n \t    }\n \t  if (instance)\n-\t    *instance = base_pointer;\n+\t    {\n+\t      /* If method is expanded thunk, we need to apply thunk offset\n+\t\t to instance pointer.  */\n+\t      if (node->thunk.virtual_offset_p\n+\t\t  || node->thunk.fixed_offset)\n+\t\t*instance = NULL;\n+\t      else\n+\t        *instance = base_pointer;\n+\t    }\n \t  return;\n \t}\n       /* Non-PODs passed by value are really passed by invisible\n@@ -1547,6 +1572,9 @@ ipa_polymorphic_call_context::get_dynamic_type (tree instance,\n   HOST_WIDE_INT instance_offset = offset;\n   tree instance_outer_type = outer_type;\n \n+  if (!instance)\n+    return false;\n+\n   if (otr_type)\n     otr_type = TYPE_MAIN_VARIANT (otr_type);\n "}, {"sha": "45138fd2f0c6663f4bb53724882fb4af18e00abc", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdcdc0b5a529a830cbde79e921960b27d69652e/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdcdc0b5a529a830cbde79e921960b27d69652e/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=ffdcdc0b5a529a830cbde79e921960b27d69652e", "patch": "@@ -547,7 +547,11 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   streamer_write_bitpack (&bp);\n   streamer_write_data_stream (ob->main_stream, section, strlen (section) + 1);\n \n-  if (node->thunk.thunk_p)\n+  /* Stream thunk info always because we use it in\n+     ipa_polymorphic_call_context::ipa_polymorphic_call_context\n+     to properly interpret THIS pointers for thunks that has been converted\n+     to Gimple.  */\n+  if (node->definition)\n     {\n       streamer_write_uhwi_stream\n \t (ob->main_stream,\n@@ -1295,7 +1299,7 @@ input_node (struct lto_file_decl_data *file_data,\n   if (section)\n     node->set_section_for_node (section);\n \n-  if (node->thunk.thunk_p)\n+  if (node->definition)\n     {\n       int type = streamer_read_uhwi (ib);\n       HOST_WIDE_INT fixed_offset = streamer_read_uhwi (ib);"}, {"sha": "0018d8b3394520e0e3466e13372c59c5de8de969", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdcdc0b5a529a830cbde79e921960b27d69652e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdcdc0b5a529a830cbde79e921960b27d69652e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffdcdc0b5a529a830cbde79e921960b27d69652e", "patch": "@@ -1,3 +1,8 @@\n+2018-12-15  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/88561\n+\t* g++.dg/tree-prof/devirt.C: New testcase.\n+\n 2018-12-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/87881"}, {"sha": "05c9a26e7a4ddc272d11cb6ca4a3147e6edd3b41", "filename": "gcc/testsuite/g++.dg/tree-prof/devirt.C", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffdcdc0b5a529a830cbde79e921960b27d69652e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fdevirt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffdcdc0b5a529a830cbde79e921960b27d69652e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fdevirt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Fdevirt.C?ref=ffdcdc0b5a529a830cbde79e921960b27d69652e", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-options \"-O3 -fdump-tree-dom3\" } */\n+struct nsISupports\n+{\n+  virtual int QueryInterface (const int &aIID, void **aInstancePtr) = 0;\n+  virtual __attribute__((noinline, noclone)) unsigned AddRef (void) = 0;\n+  virtual unsigned Release (void) = 0;\n+};\n+\n+struct nsIObserver : public nsISupports\n+{\n+  virtual int Observe (nsISupports * aSubject, const char *aTopic, const unsigned short *aData) = 0;\n+};\n+\n+struct nsISupportsWeakReference : public nsISupports\n+{\n+  virtual int GetWeakReference (void **_retval) = 0;\n+};\n+\n+struct nsSupportsWeakReference : public nsISupportsWeakReference\n+{\n+  nsSupportsWeakReference () : mProxy (0) {}\n+  virtual int GetWeakReference (void **_retval) override { return 0; }\n+  ~nsSupportsWeakReference () {}\n+  void NoticeProxyDestruction () { mProxy = nullptr; }\n+  void *mProxy;\n+  void ClearWeakReferences ();\n+  bool HasWeakReferences () const { return !!mProxy; }\n+};\n+\n+struct mozIPersonalDictionary : public nsISupports\n+{\n+  virtual int Load (void) = 0;\n+  virtual int Save (void) = 0;\n+  virtual int GetWordList (void **aWordList) = 0;\n+  virtual int Check (const int &word, bool * _retval) = 0;\n+  virtual int AddWord (const int &word) = 0;\n+  virtual int RemoveWord (const int &word) = 0;\n+  virtual int IgnoreWord (const int &word) = 0;\n+  virtual int EndSession (void) = 0;\n+};\n+\n+struct mozPersonalDictionary final\n+  : public mozIPersonalDictionary, public nsIObserver, public nsSupportsWeakReference\n+{\n+  virtual int QueryInterface (const int &aIID, void **aInstancePtr) override;\n+  virtual __attribute__((noinline, noclone)) unsigned AddRef (void) override;\n+  virtual unsigned Release (void) override;\n+  unsigned long mRefCnt;\n+  virtual int Load (void) override { return 0; }\n+  virtual int Save (void) override { return 0; }\n+  virtual int GetWordList (void **aWordList) override { return 0; }\n+  virtual int Check (const int &word, bool * _retval) override { return 0; }\n+  virtual int AddWord (const int &word) override { return 0; }\n+  virtual int RemoveWord (const int &word) override { return 0; }\n+  virtual int IgnoreWord (const int &word) override { return 0; }\n+  virtual int EndSession (void) override { return 0; }\n+  virtual int Observe (nsISupports * aSubject, const char *aTopic, const unsigned short *aData) override { return 0; }\n+  mozPersonalDictionary () : mRefCnt(0) {}\n+  int Init () { return 0; }\n+  virtual ~mozPersonalDictionary () {}\n+  bool mIsLoaded;\n+  bool mSavePending;\n+  void *mFile;\n+  char mMonitor[96];\n+  char mMonitorSave[96];\n+  char mDictionaryTable[32];\n+  char mIgnoreTable[32];\n+};\n+\n+unsigned\n+mozPersonalDictionary::AddRef (void)\n+{\n+  unsigned count = ++mRefCnt;\n+  return count;\n+}\n+\n+unsigned\n+mozPersonalDictionary::Release (void)\n+{\n+  unsigned count = --mRefCnt;\n+  if (count == 0)\n+    {\n+      mRefCnt = 1;\n+      delete (this);\n+      return 0;\n+    }\n+  return count;\n+}\n+\n+int\n+mozPersonalDictionary::QueryInterface (const int &aIID, void **aInstancePtr)\n+{\n+  nsISupports *foundInterface;\n+  if (aIID == 122)\n+    foundInterface = static_cast <mozIPersonalDictionary *>(this);\n+  else\n+    foundInterface = static_cast <nsISupportsWeakReference *>(this);\n+  int status;\n+  foundInterface->AddRef ();\n+  *aInstancePtr = foundInterface;\n+  return status;\n+}\n+\n+__attribute__((noipa)) int\n+foo (nsISupports *p, const int &i)\n+{\n+  void *q;\n+  return p->QueryInterface (i, &q);\n+}\n+\n+int\n+main ()\n+{\n+  mozPersonalDictionary m;\n+  int j = 123;\n+  for (int i = 0; i < 100000; i++)\n+    foo (static_cast <nsISupportsWeakReference *>(&m), j);\n+  if (m.mRefCnt != 100000)\n+    __builtin_abort ();\n+}\n+\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times 3 \"folding virtual function call to virtual unsigned int mozPersonalDictionary::_ZThn16\" \"dom3\" } } */\n+/* { dg-final-use-not-autofdo { scan-ipa-dump-times 3 \"folding virtual function call to virtual unsigned int mozPersonalDictionary::AddRef\" \"dom3\" } } */"}]}