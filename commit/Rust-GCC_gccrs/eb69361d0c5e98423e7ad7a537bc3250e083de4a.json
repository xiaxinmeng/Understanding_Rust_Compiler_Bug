{"sha": "eb69361d0c5e98423e7ad7a537bc3250e083de4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2OTM2MWQwYzVlOTg0MjNlN2FkN2E1MzdiYzMyNTBlMDgzZGU0YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-05-17T10:51:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-05-17T10:51:42Z"}, "message": "Allow gimple_build with internal functions\n\nThis patch makes the function versions of gimple_build and\ngimple_simplify take combined_fns rather than built_in_codes,\nso that they work with internal functions too.  The old\ngimple_builds were unused, so no existing callers need\nto be updated.\n\n2018-05-17  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* gimple-fold.h (gimple_build): Make the function forms take\n\tcombined_fn rather than built_in_function.\n\t(gimple_simplify): Likewise.\n\t* gimple-match-head.c (gimple_simplify): Likewise.\n\t* gimple-fold.c (gimple_build): Likewise.\n\t* tree-vect-loop.c (get_initial_def_for_reduction): Use gimple_build\n\trather than gimple_build_call_internal.\n\t(get_initial_defs_for_reduction): Likewise.\n\t(vect_create_epilog_for_reduction): Likewise.\n\t(vectorizable_live_operation): Likewise.\n\nFrom-SVN: r260315", "tree": {"sha": "6167d8b0e00393370c16fa3632d0a6e8cb756eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6167d8b0e00393370c16fa3632d0a6e8cb756eb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb69361d0c5e98423e7ad7a537bc3250e083de4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb69361d0c5e98423e7ad7a537bc3250e083de4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb69361d0c5e98423e7ad7a537bc3250e083de4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb69361d0c5e98423e7ad7a537bc3250e083de4a/comments", "author": null, "committer": null, "parents": [{"sha": "40659769b2b49e5ebea3ceee26ee73bdc0ff1efc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40659769b2b49e5ebea3ceee26ee73bdc0ff1efc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40659769b2b49e5ebea3ceee26ee73bdc0ff1efc"}], "stats": {"total": 142, "additions": 79, "deletions": 63}, "files": [{"sha": "2f8fd3c277be9086001e85a29708b7479b8d4c70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb69361d0c5e98423e7ad7a537bc3250e083de4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb69361d0c5e98423e7ad7a537bc3250e083de4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb69361d0c5e98423e7ad7a537bc3250e083de4a", "patch": "@@ -1,3 +1,16 @@\n+2018-05-17  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gimple-fold.h (gimple_build): Make the function forms take\n+\tcombined_fn rather than built_in_function.\n+\t(gimple_simplify): Likewise.\n+\t* gimple-match-head.c (gimple_simplify): Likewise.\n+\t* gimple-fold.c (gimple_build): Likewise.\n+\t* tree-vect-loop.c (get_initial_def_for_reduction): Use gimple_build\n+\trather than gimple_build_call_internal.\n+\t(get_initial_defs_for_reduction): Likewise.\n+\t(vect_create_epilog_for_reduction): Likewise.\n+\t(vectorizable_live_operation): Likewise.\n+\n 2018-05-17  Martin Liska  <mliska@suse.cz>\n \n \t* gimple-ssa-sprintf.c (format_directive): Do not use"}, {"sha": "4d8842e7c9998592771a26dba0061cc84e8d7ce1", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb69361d0c5e98423e7ad7a537bc3250e083de4a/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb69361d0c5e98423e7ad7a537bc3250e083de4a/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=eb69361d0c5e98423e7ad7a537bc3250e083de4a", "patch": "@@ -7204,14 +7204,20 @@ gimple_build (gimple_seq *seq, location_t loc,\n    statements possibly defining it to SEQ.  */\n \n tree\n-gimple_build (gimple_seq *seq, location_t loc,\n-\t      enum built_in_function fn, tree type, tree arg0)\n+gimple_build (gimple_seq *seq, location_t loc, combined_fn fn,\n+\t      tree type, tree arg0)\n {\n   tree res = gimple_simplify (fn, type, arg0, seq, gimple_build_valueize);\n   if (!res)\n     {\n-      tree decl = builtin_decl_implicit (fn);\n-      gimple *stmt = gimple_build_call (decl, 1, arg0);\n+      gcall *stmt;\n+      if (internal_fn_p (fn))\n+\tstmt = gimple_build_call_internal (as_internal_fn (fn), 1, arg0);\n+      else\n+\t{\n+\t  tree decl = builtin_decl_implicit (as_builtin_fn (fn));\n+\t  stmt = gimple_build_call (decl, 1, arg0);\n+\t}\n       if (!VOID_TYPE_P (type))\n \t{\n \t  res = create_tmp_reg_or_ssa_name (type);\n@@ -7230,14 +7236,20 @@ gimple_build (gimple_seq *seq, location_t loc,\n    statements possibly defining it to SEQ.  */\n \n tree\n-gimple_build (gimple_seq *seq, location_t loc,\n-\t      enum built_in_function fn, tree type, tree arg0, tree arg1)\n+gimple_build (gimple_seq *seq, location_t loc, combined_fn fn,\n+\t      tree type, tree arg0, tree arg1)\n {\n   tree res = gimple_simplify (fn, type, arg0, arg1, seq, gimple_build_valueize);\n   if (!res)\n     {\n-      tree decl = builtin_decl_implicit (fn);\n-      gimple *stmt = gimple_build_call (decl, 2, arg0, arg1);\n+      gcall *stmt;\n+      if (internal_fn_p (fn))\n+\tstmt = gimple_build_call_internal (as_internal_fn (fn), 2, arg0, arg1);\n+      else\n+\t{\n+\t  tree decl = builtin_decl_implicit (as_builtin_fn (fn));\n+\t  stmt = gimple_build_call (decl, 2, arg0, arg1);\n+\t}\n       if (!VOID_TYPE_P (type))\n \t{\n \t  res = create_tmp_reg_or_ssa_name (type);\n@@ -7256,16 +7268,22 @@ gimple_build (gimple_seq *seq, location_t loc,\n    statements possibly defining it to SEQ.  */\n \n tree\n-gimple_build (gimple_seq *seq, location_t loc,\n-\t      enum built_in_function fn, tree type,\n-\t      tree arg0, tree arg1, tree arg2)\n+gimple_build (gimple_seq *seq, location_t loc, combined_fn fn,\n+\t      tree type, tree arg0, tree arg1, tree arg2)\n {\n   tree res = gimple_simplify (fn, type, arg0, arg1, arg2,\n \t\t\t      seq, gimple_build_valueize);\n   if (!res)\n     {\n-      tree decl = builtin_decl_implicit (fn);\n-      gimple *stmt = gimple_build_call (decl, 3, arg0, arg1, arg2);\n+      gcall *stmt;\n+      if (internal_fn_p (fn))\n+\tstmt = gimple_build_call_internal (as_internal_fn (fn),\n+\t\t\t\t\t   3, arg0, arg1, arg2);\n+      else\n+\t{\n+\t  tree decl = builtin_decl_implicit (as_builtin_fn (fn));\n+\t  stmt = gimple_build_call (decl, 3, arg0, arg1, arg2);\n+\t}\n       if (!VOID_TYPE_P (type))\n \t{\n \t  res = create_tmp_reg_or_ssa_name (type);"}, {"sha": "282b1d6c0b861b5a22f0628aeccfd4f69c02e2b0", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb69361d0c5e98423e7ad7a537bc3250e083de4a/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb69361d0c5e98423e7ad7a537bc3250e083de4a/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=eb69361d0c5e98423e7ad7a537bc3250e083de4a", "patch": "@@ -86,28 +86,25 @@ gimple_build (gimple_seq *seq,\n {\n   return gimple_build (seq, UNKNOWN_LOCATION, code, type, op0, op1, op2);\n }\n-extern tree gimple_build (gimple_seq *, location_t,\n-\t\t\t  enum built_in_function, tree, tree);\n+extern tree gimple_build (gimple_seq *, location_t, combined_fn, tree, tree);\n inline tree\n-gimple_build (gimple_seq *seq,\n-\t      enum built_in_function fn, tree type, tree arg0)\n+gimple_build (gimple_seq *seq, combined_fn fn, tree type, tree arg0)\n {\n   return gimple_build (seq, UNKNOWN_LOCATION, fn, type, arg0);\n }\n-extern tree gimple_build (gimple_seq *, location_t,\n-\t\t\t  enum built_in_function, tree, tree, tree);\n+extern tree gimple_build (gimple_seq *, location_t, combined_fn,\n+\t\t\t  tree, tree, tree);\n inline tree\n-gimple_build (gimple_seq *seq,\n-\t      enum built_in_function fn, tree type, tree arg0, tree arg1)\n+gimple_build (gimple_seq *seq, combined_fn fn,\n+\t      tree type, tree arg0, tree arg1)\n {\n   return gimple_build (seq, UNKNOWN_LOCATION, fn, type, arg0, arg1);\n }\n-extern tree gimple_build (gimple_seq *, location_t,\n-\t\t\t  enum built_in_function, tree, tree, tree, tree);\n+extern tree gimple_build (gimple_seq *, location_t, combined_fn,\n+\t\t\t  tree, tree, tree, tree);\n inline tree\n-gimple_build (gimple_seq *seq,\n-\t      enum built_in_function fn, tree type,\n-\t      tree arg0, tree arg1, tree arg2)\n+gimple_build (gimple_seq *seq, combined_fn fn,\n+\t      tree type, tree arg0, tree arg1, tree arg2)\n {\n   return gimple_build (seq, UNKNOWN_LOCATION, fn, type, arg0, arg1, arg2);\n }\n@@ -153,11 +150,11 @@ extern tree gimple_simplify (enum tree_code, tree, tree, tree,\n \t\t\t     gimple_seq *, tree (*)(tree));\n extern tree gimple_simplify (enum tree_code, tree, tree, tree, tree,\n \t\t\t     gimple_seq *, tree (*)(tree));\n-extern tree gimple_simplify (enum built_in_function, tree, tree,\n+extern tree gimple_simplify (combined_fn, tree, tree,\n \t\t\t     gimple_seq *, tree (*)(tree));\n-extern tree gimple_simplify (enum built_in_function, tree, tree, tree,\n+extern tree gimple_simplify (combined_fn, tree, tree, tree,\n \t\t\t     gimple_seq *, tree (*)(tree));\n-extern tree gimple_simplify (enum built_in_function, tree, tree, tree, tree,\n+extern tree gimple_simplify (combined_fn, tree, tree, tree, tree,\n \t\t\t     gimple_seq *, tree (*)(tree));\n \n #endif  /* GCC_GIMPLE_FOLD_H */"}, {"sha": "6caf1e18c243031c11de732df83adf2b1b1a23bf", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb69361d0c5e98423e7ad7a537bc3250e083de4a/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb69361d0c5e98423e7ad7a537bc3250e083de4a/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=eb69361d0c5e98423e7ad7a537bc3250e083de4a", "patch": "@@ -478,71 +478,69 @@ gimple_simplify (enum tree_code code, tree type,\n   return maybe_push_res_to_seq (rcode, type, ops, seq);\n }\n \n-/* Builtin function with one argument.  */\n+/* Builtin or internal function with one argument.  */\n \n tree\n-gimple_simplify (enum built_in_function fn, tree type,\n+gimple_simplify (combined_fn fn, tree type,\n \t\t tree arg0,\n \t\t gimple_seq *seq, tree (*valueize)(tree))\n {\n   if (constant_for_folding (arg0))\n     {\n-      tree res = fold_const_call (as_combined_fn (fn), type, arg0);\n+      tree res = fold_const_call (fn, type, arg0);\n       if (res && CONSTANT_CLASS_P (res))\n \treturn res;\n     }\n \n   code_helper rcode;\n   tree ops[3] = {};\n-  if (!gimple_simplify (&rcode, ops, seq, valueize,\n-\t\t\tas_combined_fn (fn), type, arg0))\n+  if (!gimple_simplify (&rcode, ops, seq, valueize, fn, type, arg0))\n     return NULL_TREE;\n   return maybe_push_res_to_seq (rcode, type, ops, seq);\n }\n \n-/* Builtin function with two arguments.  */\n+/* Builtin or internal function with two arguments.  */\n \n tree\n-gimple_simplify (enum built_in_function fn, tree type,\n+gimple_simplify (combined_fn fn, tree type,\n \t\t tree arg0, tree arg1,\n \t\t gimple_seq *seq, tree (*valueize)(tree))\n {\n   if (constant_for_folding (arg0)\n       && constant_for_folding (arg1))\n     {\n-      tree res = fold_const_call (as_combined_fn (fn), type, arg0, arg1);\n+      tree res = fold_const_call (fn, type, arg0, arg1);\n       if (res && CONSTANT_CLASS_P (res))\n \treturn res;\n     }\n \n   code_helper rcode;\n   tree ops[3] = {};\n-  if (!gimple_simplify (&rcode, ops, seq, valueize,\n-\t\t\tas_combined_fn (fn), type, arg0, arg1))\n+  if (!gimple_simplify (&rcode, ops, seq, valueize, fn, type, arg0, arg1))\n     return NULL_TREE;\n   return maybe_push_res_to_seq (rcode, type, ops, seq);\n }\n \n-/* Builtin function with three arguments.  */\n+/* Builtin or internal function with three arguments.  */\n \n tree\n-gimple_simplify (enum built_in_function fn, tree type,\n+gimple_simplify (combined_fn fn, tree type,\n \t\t tree arg0, tree arg1, tree arg2,\n \t\t gimple_seq *seq, tree (*valueize)(tree))\n {\n   if (constant_for_folding (arg0)\n       && constant_for_folding (arg1)\n       && constant_for_folding (arg2))\n     {\n-      tree res = fold_const_call (as_combined_fn (fn), type, arg0, arg1, arg2);\n+      tree res = fold_const_call (fn, type, arg0, arg1, arg2);\n       if (res && CONSTANT_CLASS_P (res))\n \treturn res;\n     }\n \n   code_helper rcode;\n   tree ops[3] = {};\n   if (!gimple_simplify (&rcode, ops, seq, valueize,\n-\t\t\tas_combined_fn (fn), type, arg0, arg1, arg2))\n+\t\t\tfn, type, arg0, arg1, arg2))\n     return NULL_TREE;\n   return maybe_push_res_to_seq (rcode, type, ops, seq);\n }"}, {"sha": "0caa6e4c7ddacaf66e6189f64671a946df80cd86", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb69361d0c5e98423e7ad7a537bc3250e083de4a/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb69361d0c5e98423e7ad7a537bc3250e083de4a/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=eb69361d0c5e98423e7ad7a537bc3250e083de4a", "patch": "@@ -4181,12 +4181,10 @@ get_initial_def_for_reduction (gimple *stmt, tree init_val,\n \telse if (!TYPE_VECTOR_SUBPARTS (vectype).is_constant ())\n \t  {\n \t    /* Option2 (variable length): the first element is INIT_VAL.  */\n-\t    init_def = build_vector_from_val (vectype, def_for_init);\n-\t    gcall *call = gimple_build_call_internal (IFN_VEC_SHL_INSERT,\n-\t\t\t\t\t\t      2, init_def, init_val);\n-\t    init_def = make_ssa_name (vectype);\n-\t    gimple_call_set_lhs (call, init_def);\n-\t    gimple_seq_add_stmt (&stmts, call);\n+\t    init_def = gimple_build_vector_from_val (&stmts, vectype,\n+\t\t\t\t\t\t     def_for_init);\n+\t    init_def = gimple_build (&stmts, CFN_VEC_SHL_INSERT,\n+\t\t\t\t     vectype, init_def, init_val);\n \t  }\n \telse\n \t  {\n@@ -4329,11 +4327,8 @@ get_initial_defs_for_reduction (slp_tree slp_node,\n \t\t  while (k > 0)\n \t\t    {\n \t\t      k -= 1;\n-\t\t      gcall *call = gimple_build_call_internal\n-\t\t\t(IFN_VEC_SHL_INSERT, 2, init, elts[k]);\n-\t\t      init = make_ssa_name (vector_type);\n-\t\t      gimple_call_set_lhs (call, init);\n-\t\t      gimple_seq_add_stmt (&ctor_seq, call);\n+\t\t      init = gimple_build (&ctor_seq, CFN_VEC_SHL_INSERT,\n+\t\t\t\t\t   vector_type, init, elts[k]);\n \t\t    }\n \t\t}\n \t      else\n@@ -5236,10 +5231,8 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple *stmt,\n \t\t\t\t   sel, new_phi_result, vector_identity);\n \n \t  /* Do the reduction and convert it to the appropriate type.  */\n-\t  gcall *call = gimple_build_call_internal (reduc_fn, 1, vec);\n-\t  tree scalar = make_ssa_name (TREE_TYPE (vectype));\n-\t  gimple_call_set_lhs (call, scalar);\n-\t  gimple_seq_add_stmt (&seq, call);\n+\t  tree scalar = gimple_build (&seq, as_combined_fn (reduc_fn),\n+\t\t\t\t      TREE_TYPE (vectype), vec);\n \t  scalar = gimple_convert (&seq, scalar_type, scalar);\n \t  scalar_results.safe_push (scalar);\n \t}\n@@ -8054,13 +8047,10 @@ vectorizable_live_operation (gimple *stmt,\n \t the loop mask for the final iteration.  */\n       gcc_assert (ncopies == 1 && !slp_node);\n       tree scalar_type = TREE_TYPE (STMT_VINFO_VECTYPE (stmt_info));\n-      tree scalar_res = make_ssa_name (scalar_type);\n       tree mask = vect_get_loop_mask (gsi, &LOOP_VINFO_MASKS (loop_vinfo),\n \t\t\t\t      1, vectype, 0);\n-      gcall *new_stmt = gimple_build_call_internal (IFN_EXTRACT_LAST,\n-\t\t\t\t\t\t    2, mask, vec_lhs);\n-      gimple_call_set_lhs (new_stmt, scalar_res);\n-      gimple_seq_add_stmt (&stmts, new_stmt);\n+      tree scalar_res = gimple_build (&stmts, CFN_EXTRACT_LAST,\n+\t\t\t\t      scalar_type, mask, vec_lhs);\n \n       /* Convert the extracted vector element to the required scalar type.  */\n       new_tree = gimple_convert (&stmts, lhs_type, scalar_res);"}]}