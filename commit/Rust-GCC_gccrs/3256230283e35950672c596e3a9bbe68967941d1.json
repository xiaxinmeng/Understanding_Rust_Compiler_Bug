{"sha": "3256230283e35950672c596e3a9bbe68967941d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1NjIzMDI4M2UzNTk1MDY3MmM1OTZlM2E5YmJlNjg5Njc5NDFkMQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2003-08-14T18:06:12Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2003-08-14T18:06:12Z"}, "message": "pa.c (pa_adjust_insn_length): Delete adjustment for delay slot in direct calls.\n\n\t* pa.c (pa_adjust_insn_length): Delete adjustment for delay slot in\n\tdirect calls.\n\t(attr_length_call): Include it here.  Improve length estimate for\n\tlocal calls.\n\t(output_call): Use targetm.binds_local_p.\n\nFrom-SVN: r70441", "tree": {"sha": "cdd7610dcd50fe973582972d66a316d8c780186c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd7610dcd50fe973582972d66a316d8c780186c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3256230283e35950672c596e3a9bbe68967941d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3256230283e35950672c596e3a9bbe68967941d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3256230283e35950672c596e3a9bbe68967941d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3256230283e35950672c596e3a9bbe68967941d1/comments", "author": null, "committer": null, "parents": [{"sha": "daa027cc473c361231dd4aa9f362674fe2c9a0fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa027cc473c361231dd4aa9f362674fe2c9a0fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa027cc473c361231dd4aa9f362674fe2c9a0fb"}], "stats": {"total": 130, "additions": 71, "deletions": 59}, "files": [{"sha": "565fc992b20f128c36db4a50cac8a427f8def97e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3256230283e35950672c596e3a9bbe68967941d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3256230283e35950672c596e3a9bbe68967941d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3256230283e35950672c596e3a9bbe68967941d1", "patch": "@@ -1,3 +1,11 @@\n+2003-08-14  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (pa_adjust_insn_length): Delete adjustment for delay slot in\n+\tdirect calls.\n+\t(attr_length_call): Include it here.  Improve length estimate for\n+\tlocal calls.\n+\t(output_call): Use targetm.binds_local_p.\n+\n 2003-08-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (CASE_MATHFN): New helper macro."}, {"sha": "88c3d087709f3fbc3ea6a542434f8b405851ff37", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 63, "deletions": 59, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3256230283e35950672c596e3a9bbe68967941d1/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3256230283e35950672c596e3a9bbe68967941d1/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3256230283e35950672c596e3a9bbe68967941d1", "patch": "@@ -4417,23 +4417,9 @@ pa_adjust_insn_length (insn, length)\n {\n   rtx pat = PATTERN (insn);\n \n-  /* Call insns which are *not* indirect and have unfilled delay slots.  */\n-  if (GET_CODE (insn) == CALL_INSN)\n-    {\n-\n-      if (GET_CODE (XVECEXP (pat, 0, 0)) == CALL\n-\t  && GET_CODE (XEXP (XEXP (XVECEXP (pat, 0, 0), 0), 0)) == SYMBOL_REF)\n-\treturn 4;\n-      else if (GET_CODE (XVECEXP (pat, 0, 0)) == SET\n-\t       && GET_CODE (XEXP (XEXP (XEXP (XVECEXP (pat, 0, 0), 1), 0), 0))\n-\t\t  == SYMBOL_REF)\n-\treturn 4;\n-      else\n-\treturn 0;\n-    }\n-  /* Jumps inside switch tables which have unfilled delay slots\n-     also need adjustment.  */\n-  else if (GET_CODE (insn) == JUMP_INSN\n+  /* Jumps inside switch tables which have unfilled delay slots need\n+     adjustment.  */\n+  if (GET_CODE (insn) == JUMP_INSN\n \t   && simplejump_p (insn)\n \t   && GET_MODE (insn) == SImode)\n     return 4;\n@@ -6758,77 +6744,95 @@ output_millicode_call (insn, call_dest)\n \n /* Return the attribute length of the call instruction INSN.  The SIBCALL\n    flag indicates whether INSN is a regular call or a sibling call.  The\n-   length returned must be longer than the code generated by output_call.\n-   When the target supports jumps in the delay slot, we need an extra\n-   four bytes to handle the situation where the jump can't reach its\n-   destination.  */\n+   length returned must be longer than the code actually generated by\n+   output_call.  Since branch shortening is done before delay branch\n+   sequencing, there is no way to determine whether or not the delay\n+   slot will be filled during branch shortening.  Even when the delay\n+   slot is filled, we may have to add a nop if the delay slot contains\n+   a branch that can't reach its target.  Thus, we always have to include\n+   the delay slot in the length estimate.  This used to be done in\n+   pa_adjust_insn_length but we do it here now as some sequences always\n+   fill the delay slot and we can save four bytes in the estimate for\n+   these sequences.  */\n \n int\n attr_length_call (insn, sibcall)\n      rtx insn;\n      int sibcall;\n {\n+  int local_call;\n+  rtx call_dest;\n+  tree call_decl;\n+  int length = 0;\n+  rtx pat = PATTERN (insn);\n   unsigned long distance = -1;\n-  unsigned long total = IN_NAMED_SECTION_P (cfun->decl) ? 0 : total_code_bytes;\n \n   if (INSN_ADDRESSES_SET_P ())\n     {\n+      unsigned long total;\n+\n+      total = IN_NAMED_SECTION_P (cfun->decl) ? 0 : total_code_bytes;\n       distance = (total + insn_current_reference_address (insn));\n       if (distance < total)\n \tdistance = -1;\n     }\n \n-  if (TARGET_64BIT)\n-    {\n-      if (!TARGET_LONG_CALLS\n-\t  && ((!sibcall && distance < 7600000) || distance < 240000))\n-\treturn 8;\n-\n-      return (sibcall ? 28 : 24);\n-    }\n+  /* Determine if this is a local call.  */\n+  if (GET_CODE (XVECEXP (pat, 0, 0)) == CALL)\n+    call_dest = XEXP (XEXP (XVECEXP (pat, 0, 0), 0), 0);\n   else\n-    {\n-      if (!TARGET_LONG_CALLS\n-\t  && ((TARGET_PA_20 && !sibcall && distance < 7600000)\n-\t      || distance < 240000))\n-\treturn 8;\n+    call_dest = XEXP (XEXP (XEXP (XVECEXP (pat, 0, 0), 1), 0), 0);\n \n-      if (TARGET_LONG_ABS_CALL && !flag_pic)\n-\treturn 16;\n+  call_decl = SYMBOL_REF_DECL (call_dest);\n+  local_call = call_decl && (*targetm.binds_local_p) (call_decl);\n \n-      if ((TARGET_SOM && TARGET_LONG_PIC_SDIFF_CALL)\n-\t  || (TARGET_GAS && TARGET_LONG_PIC_PCREL_CALL))\n-\t{\n-\t  if (TARGET_PA_20)\n-\t    return 20;\n+  /* pc-relative branch.  */\n+  if (!TARGET_LONG_CALLS\n+      && ((TARGET_PA_20 && !sibcall && distance < 7600000)\n+\t  || distance < 240000))\n+    length += 8;\n \n-\t  return 28;\n-\t}\n-      else\n-\t{\n-\t  int length = 28;\n+  /* 64-bit plabel sequence.  */\n+  else if (TARGET_64BIT && !local_call)\n+    length += sibcall ? 28 : 24;\n \n-\t  if (TARGET_SOM)\n-\t    length += length_fp_args (insn);\n+  /* non-pic long absolute branch sequence.  */\n+  else if ((TARGET_LONG_ABS_CALL || local_call) && !flag_pic)\n+    length += 12;\n \n-\t  if (flag_pic)\n-\t    length += 4;\n+  /* long pc-relative branch sequence.  */\n+  else if ((TARGET_SOM && TARGET_LONG_PIC_SDIFF_CALL)\n+\t   || (TARGET_64BIT && !TARGET_GAS)\n+\t   || (TARGET_GAS && (TARGET_LONG_PIC_PCREL_CALL || local_call)))\n+    {\n+      length += 20;\n \n-\t  if (!sibcall)\n-\t    length += 4;\n+      if (!TARGET_PA_20 && !TARGET_NO_SPACE_REGS)\n+\tlength += 8;\n+    }\n \n-\t  if (TARGET_PA_20)\n-\t    return length;\n+  /* 32-bit plabel sequence.  */\n+  else\n+    {\n+      length += 32;\n \n-\t  if (!TARGET_NO_SPACE_REGS)\n-\t    length += 8;\n+      if (TARGET_SOM)\n+\tlength += length_fp_args (insn);\n+\n+      if (flag_pic)\n+\tlength += 4;\n \n+      if (!TARGET_PA_20)\n+\t{\n \t  if (!sibcall)\n \t    length += 8;\n \n-\t  return length;\n+\t  if (!TARGET_NO_SPACE_REGS)\n+\t    length += 8;\n \t}\n     }\n+\n+  return length;\n }\n \n /* INSN is a function call.  It may have an unconditional jump\n@@ -6846,7 +6850,7 @@ output_call (insn, call_dest, sibcall)\n   int delay_slot_filled = 0;\n   int seq_length = dbr_sequence_length ();\n   tree call_decl = SYMBOL_REF_DECL (call_dest);\n-  int local_call = call_decl && !TREE_PUBLIC (call_decl);\n+  int local_call = call_decl && (*targetm.binds_local_p) (call_decl);\n   rtx xoperands[2];\n \n   xoperands[0] = call_dest;"}]}