{"sha": "97ecdb46b1261d34e015df1f6eff20e069ca9bbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdlY2RiNDZiMTI2MWQzNGUwMTVkZjFmNmVmZjIwZTA2OWNhOWJiZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-03-03T14:32:15Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-03-03T14:32:15Z"}, "message": "re PR target/70021 (Test miscompiled with -O3 option for -march=core-avx2.)\n\n\tPR target/70021\n\t* tree-vect-stmts.c (vect_mark_relevant): Remove USED_IN_PATTERN\n\targument, if STMT_VINFO_IN_PATTERN_P (stmt_info), always mark\n\tthe pattern no matter if it is used just by non-pattern, pattern\n\tor mix thereof.\n\t(process_use, vect_mark_stmts_to_be_vectorized): Adjust callers.\n\t* tree-vect-patterns.c (vect_recog_vector_vector_shift_pattern): If\n\toprnd1 def_stmt is in pattern, don't look through it.\n\n\t* gcc.dg/vect/pr70021.c: New test.\n\t* gcc.target/i386/pr70021.c: New test.\n\nFrom-SVN: r233940", "tree": {"sha": "b2ed079d2bf0a2a11cb909b2bfd5b1e6bf1409a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2ed079d2bf0a2a11cb909b2bfd5b1e6bf1409a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ecdb46b1261d34e015df1f6eff20e069ca9bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ecdb46b1261d34e015df1f6eff20e069ca9bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ecdb46b1261d34e015df1f6eff20e069ca9bbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc33dc51d905126cec9810da3b1c523ce73d0dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc33dc51d905126cec9810da3b1c523ce73d0dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc33dc51d905126cec9810da3b1c523ce73d0dc1"}], "stats": {"total": 180, "additions": 119, "deletions": 61}, "files": [{"sha": "fb5e396a448f6e64881356e7c33c0e0954ffa913", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97ecdb46b1261d34e015df1f6eff20e069ca9bbf", "patch": "@@ -1,3 +1,14 @@\n+2016-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70021\n+\t* tree-vect-stmts.c (vect_mark_relevant): Remove USED_IN_PATTERN\n+\targument, if STMT_VINFO_IN_PATTERN_P (stmt_info), always mark\n+\tthe pattern no matter if it is used just by non-pattern, pattern\n+\tor mix thereof.\n+\t(process_use, vect_mark_stmts_to_be_vectorized): Adjust callers.\n+\t* tree-vect-patterns.c (vect_recog_vector_vector_shift_pattern): If\n+\toprnd1 def_stmt is in pattern, don't look through it.\n+\n 2016-03-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/70050"}, {"sha": "5ffe64f65f3fd3af6865a18635983606135702fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97ecdb46b1261d34e015df1f6eff20e069ca9bbf", "patch": "@@ -1,3 +1,9 @@\n+2016-03-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70021\n+\t* gcc.dg/vect/pr70021.c: New test.\n+\t* gcc.target/i386/pr70021.c: New test.\n+\n 2016-03-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/70050"}, {"sha": "b147fa1598f29a96f1df78575d5eed23882e7277", "filename": "gcc/testsuite/gcc.dg/vect/pr70021.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr70021.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr70021.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr70021.c?ref=97ecdb46b1261d34e015df1f6eff20e069ca9bbf", "patch": "@@ -0,0 +1,40 @@\n+/* PR target/70021 */\n+/* { dg-do run } */\n+\n+#include \"tree-vect.h\"\n+\n+#define N 160\n+int a[N];\n+unsigned long long int b[N], c[N], d[N], e[N];\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i += 4)\n+    {\n+      unsigned long long int f = (_Bool) b[i];\n+      unsigned long long int g = c[i] != d[i];\n+      e[i] = g ^ (a[i] & (g << f));\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  check_vect ();\n+  for (i = 0; i < N; ++i)\n+    {\n+      a[i] = 1618000128;\n+      b[i] = 10919594786573202791ULL;\n+      c[i] = 2593730175074624973ULL;\n+      d[i] = 7447894520878803661ULL;\n+      e[i] = 14234165565810642243ULL;\n+    }\n+  foo ();\n+  for (i = 0; i < N; ++i)\n+    if (e[i] != ((i & 3) ? 14234165565810642243ULL : 1ULL))\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "de6da3451192fce5dcf032815e84eb3ba0c3f6a4", "filename": "gcc/testsuite/gcc.target/i386/pr70021.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70021.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70021.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70021.c?ref=97ecdb46b1261d34e015df1f6eff20e069ca9bbf", "patch": "@@ -0,0 +1,42 @@\n+/* PR target/70021 */\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -ftree-vectorize -mavx2 -fdump-tree-vect-details\" } */\n+\n+#include \"avx2-check.h\"\n+\n+#define N 160\n+int a[N];\n+unsigned long long int b[N], c[N], d[N], e[N];\n+\n+__attribute__((noinline, noclone)) void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i += 4)\n+    {\n+      unsigned long long int f = (_Bool) b[i];\n+      unsigned long long int g = c[i] != d[i];\n+      e[i] = g ^ (a[i] & (g << f));\n+    }\n+}\n+\n+void\n+avx2_test ()\n+{\n+  int i;\n+  for (i = 0; i < N; ++i)\n+    {\n+      a[i] = 1618000128;\n+      b[i] = 10919594786573202791ULL;\n+      c[i] = 2593730175074624973ULL;\n+      d[i] = 7447894520878803661ULL;\n+      e[i] = 14234165565810642243ULL;\n+    }\n+  foo ();\n+  for (i = 0; i < N; ++i)\n+    if (e[i] != ((i & 3) ? 14234165565810642243ULL : 1ULL))\n+      __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" } } */"}, {"sha": "4b3065ebb78dee10ee5a3d82ce8a1ddb053d52cc", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=97ecdb46b1261d34e015df1f6eff20e069ca9bbf", "patch": "@@ -2090,7 +2090,8 @@ vect_recog_vector_vector_shift_pattern (vec<gimple *> *stmts,\n     return NULL;\n \n   tree def = NULL_TREE;\n-  if (gimple_assign_cast_p (def_stmt))\n+  stmt_vec_info def_vinfo = vinfo_for_stmt (def_stmt);\n+  if (!STMT_VINFO_IN_PATTERN_P (def_vinfo) && gimple_assign_cast_p (def_stmt))\n     {\n       tree rhs1 = gimple_assign_rhs1 (def_stmt);\n       if (TYPE_MODE (TREE_TYPE (rhs1)) == TYPE_MODE (TREE_TYPE (oprnd0))"}, {"sha": "6ac273dc63dc1adc1d1a0e286bf6054984b21327", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 18, "deletions": 60, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ecdb46b1261d34e015df1f6eff20e069ca9bbf/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=97ecdb46b1261d34e015df1f6eff20e069ca9bbf", "patch": "@@ -181,8 +181,7 @@ create_array_ref (tree type, tree ptr, struct data_reference *first_dr)\n \n static void\n vect_mark_relevant (vec<gimple *> *worklist, gimple *stmt,\n-\t\t    enum vect_relevant relevant, bool live_p,\n-\t\t    bool used_in_pattern)\n+\t\t    enum vect_relevant relevant, bool live_p)\n {\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   enum vect_relevant save_relevant = STMT_VINFO_RELEVANT (stmt_info);\n@@ -202,62 +201,22 @@ vect_mark_relevant (vec<gimple *> *worklist, gimple *stmt,\n      stmt itself should be marked.  */\n   if (STMT_VINFO_IN_PATTERN_P (stmt_info))\n     {\n-      bool found = false;\n-      if (!used_in_pattern)\n-        {\n-          imm_use_iterator imm_iter;\n-          use_operand_p use_p;\n-          gimple *use_stmt;\n-          tree lhs;\n-\t  loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n-\t  struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n-\n-          if (is_gimple_assign (stmt))\n-            lhs = gimple_assign_lhs (stmt);\n-          else\n-            lhs = gimple_call_lhs (stmt);\n-\n-          /* This use is out of pattern use, if LHS has other uses that are\n-             pattern uses, we should mark the stmt itself, and not the pattern\n-             stmt.  */\n-\t  if (lhs && TREE_CODE (lhs) == SSA_NAME)\n-\t    FOR_EACH_IMM_USE_FAST (use_p, imm_iter, lhs)\n-\t      {\n-\t\tif (is_gimple_debug (USE_STMT (use_p)))\n-\t\t  continue;\n-\t\tuse_stmt = USE_STMT (use_p);\n-\n-\t\tif (!flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n-\t\t  continue;\n-\n-\t\tif (vinfo_for_stmt (use_stmt)\n-\t\t    && STMT_VINFO_IN_PATTERN_P (vinfo_for_stmt (use_stmt)))\n-\t\t  {\n-\t\t    found = true;\n-\t\t    break;\n-\t\t  }\n-\t      }\n-        }\n+      /* This is the last stmt in a sequence that was detected as a\n+\t pattern that can potentially be vectorized.  Don't mark the stmt\n+\t as relevant/live because it's not going to be vectorized.\n+\t Instead mark the pattern-stmt that replaces it.  */\n \n-      if (!found)\n-        {\n-          /* This is the last stmt in a sequence that was detected as a\n-             pattern that can potentially be vectorized.  Don't mark the stmt\n-             as relevant/live because it's not going to be vectorized.\n-             Instead mark the pattern-stmt that replaces it.  */\n-\n-          pattern_stmt = STMT_VINFO_RELATED_STMT (stmt_info);\n+      pattern_stmt = STMT_VINFO_RELATED_STMT (stmt_info);\n \n-          if (dump_enabled_p ())\n-            dump_printf_loc (MSG_NOTE, vect_location,\n-                             \"last stmt in pattern. don't mark\"\n-                             \" relevant/live.\\n\");\n-          stmt_info = vinfo_for_stmt (pattern_stmt);\n-          gcc_assert (STMT_VINFO_RELATED_STMT (stmt_info) == stmt);\n-          save_relevant = STMT_VINFO_RELEVANT (stmt_info);\n-          save_live_p = STMT_VINFO_LIVE_P (stmt_info);\n-          stmt = pattern_stmt;\n-        }\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t \"last stmt in pattern. don't mark\"\n+\t\t\t \" relevant/live.\\n\");\n+      stmt_info = vinfo_for_stmt (pattern_stmt);\n+      gcc_assert (STMT_VINFO_RELATED_STMT (stmt_info) == stmt);\n+      save_relevant = STMT_VINFO_RELEVANT (stmt_info);\n+      save_live_p = STMT_VINFO_LIVE_P (stmt_info);\n+      stmt = pattern_stmt;\n     }\n \n   STMT_VINFO_LIVE_P (stmt_info) |= live_p;\n@@ -572,8 +531,7 @@ process_use (gimple *stmt, tree use, loop_vec_info loop_vinfo, bool live_p,\n         }\n     }\n \n-  vect_mark_relevant (worklist, def_stmt, relevant, live_p,\n-                      is_pattern_stmt_p (stmt_vinfo));\n+  vect_mark_relevant (worklist, def_stmt, relevant, live_p);\n   return true;\n }\n \n@@ -630,7 +588,7 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n \t    }\n \n \t  if (vect_stmt_relevant_p (phi, loop_vinfo, &relevant, &live_p))\n-\t    vect_mark_relevant (&worklist, phi, relevant, live_p, false);\n+\t    vect_mark_relevant (&worklist, phi, relevant, live_p);\n \t}\n       for (si = gsi_start_bb (bb); !gsi_end_p (si); gsi_next (&si))\n \t{\n@@ -642,7 +600,7 @@ vect_mark_stmts_to_be_vectorized (loop_vec_info loop_vinfo)\n \t    }\n \n \t  if (vect_stmt_relevant_p (stmt, loop_vinfo, &relevant, &live_p))\n-            vect_mark_relevant (&worklist, stmt, relevant, live_p, false);\n+\t    vect_mark_relevant (&worklist, stmt, relevant, live_p);\n \t}\n     }\n "}]}