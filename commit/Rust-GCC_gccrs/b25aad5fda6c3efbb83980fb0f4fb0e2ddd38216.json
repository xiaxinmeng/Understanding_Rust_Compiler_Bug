{"sha": "b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1YWFkNWZkYTZjM2VmYmI4Mzk4MGZiMGY0ZmIwZTJkZGQzODIxNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-05-03T21:15:28Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-05-03T21:15:28Z"}, "message": "PR c++/66561 - __builtin_LINE at al. should yield constant expressions\n\nPR c++/66561 - __builtin_LINE at al. should yield constant expressions\nPR c++/66639 - declare __func__, __FUNCTION__ & __PRETTY_FUNCTION__ constexpr\n\ngcc/testsuite/ChangeLog:\n2016-05-03  Martin Sebor  <msebor@redhat.com>\n\n\tPR c++/66561\n\t* c-c++-common/builtin_location.c: New test.\n\t* g++.dg/cpp1y/builtin_location.C: New test.\n\ngcc/cp/ChangeLog:\n2016-05-03  Martin Sebor  <msebor@redhat.com>\n\n\tPR c++/66561\n\t* tree.c (builtin_valid_in_constant_expr_p): Treat BUILT_IN_FILE,\n\tBUILT_IN_FUNCTION, and BUILT_IN_LINE as constant expressions.\n\ngcc/ChangeLog:\n2016-05-03  Martin Sebor  <msebor@redhat.com>\n\n\tPR c++/66561\n\t* builtins.c (fold_builtin_FILE): New function.\n\t(fold_builtin_FUNCTION, fold_builtin_LINE): New functions.\n\t(fold_builtin_0): Call them.\n\t* gimplify.c (gimplify_call_expr): Remove the handling of\n\tBUILT_IN_FILE, BUILT_IN_FUNCTION, and BUILT_IN_LINE.\n\n\tPR c++/66561\n\t* doc/extend.texi (Other Builtins): Update __builtin_FILE,\n\t__builtin_FUNCTION, and __builtin_LINE to reflect they yield\n\tconstants.\n\n\tPR c++/66639\n\t* doc/extend.texi (Function Names as Strings): Update __func__,\n\t__FUNCTION__, __PRETTY_FUNCTION__ to reflect they evaluate to\n\tconstants.\n\nFrom-SVN: r235845", "tree": {"sha": "0909668e48da930feebd5b9147810cbe08e38f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0909668e48da930feebd5b9147810cbe08e38f6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9663f8f74821638d2f2ef1a333ec4e937c3c6040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9663f8f74821638d2f2ef1a333ec4e937c3c6040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9663f8f74821638d2f2ef1a333ec4e937c3c6040"}], "stats": {"total": 408, "additions": 366, "deletions": 42}, "files": [{"sha": "36b57ac9620f19d9a7f264733cc1bb4843d82f27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "patch": "@@ -1,3 +1,22 @@\n+2016-05-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/66561\n+\t* builtins.c (fold_builtin_FILE): New function.\n+\t(fold_builtin_FUNCTION, fold_builtin_LINE): New functions.\n+\t(fold_builtin_0): Call them.\n+\t* gimplify.c (gimplify_call_expr): Remove the handling of\n+\tBUILT_IN_FILE, BUILT_IN_FUNCTION, and BUILT_IN_LINE.\n+\n+\tPR c++/66561\n+\t* doc/extend.texi (Other Builtins): Update __builtin_FILE,\n+\t__builtin_FUNCTION, and __builtin_LINE to reflect they yield\n+\tconstants.\n+\n+\tPR c++/66639\n+\t* doc/extend.texi (Function Names as Strings): Update __func__,\n+\t__FUNCTION__, __PRETTY_FUNCTION__ to reflect they evaluate to\n+\tconstants.\n+\n 2016-05-03  Jakub Jelinek  <jakub@redhat.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "476feb1eb164e4c5cdd22e2526bd1786f115dca6", "filename": "gcc/builtins.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "patch": "@@ -8011,6 +8011,39 @@ fold_builtin_arith_overflow (location_t loc, enum built_in_function fcode,\n   return build2_loc (loc, COMPOUND_EXPR, boolean_type_node, store, ovfres);\n }\n \n+/* Fold a call to __builtin_FILE to a constant string.  */\n+\n+static inline tree\n+fold_builtin_FILE (location_t loc)\n+{\n+  if (const char *fname = LOCATION_FILE (loc))\n+    return build_string_literal (strlen (fname) + 1, fname);\n+\n+  return build_string_literal (1, \"\");\n+}\n+\n+/* Fold a call to __builtin_FUNCTION to a constant string.  */\n+\n+static inline tree\n+fold_builtin_FUNCTION ()\n+{\n+  if (current_function_decl)\n+    {\n+      const char *name = IDENTIFIER_POINTER (DECL_NAME (current_function_decl));\n+      return build_string_literal (strlen (name) + 1, name);\n+    }\n+\n+  return build_string_literal (1, \"\");\n+}\n+\n+/* Fold a call to __builtin_LINE to an integer constant.  */\n+\n+static inline tree\n+fold_builtin_LINE (location_t loc, tree type)\n+{\n+  return build_int_cst (type, LOCATION_LINE (loc));\n+}\n+\n /* Fold a call to built-in function FNDECL with 0 arguments.\n    This function returns NULL_TREE if no simplification was possible.  */\n \n@@ -8021,6 +8054,15 @@ fold_builtin_0 (location_t loc, tree fndecl)\n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n   switch (fcode)\n     {\n+    case BUILT_IN_FILE:\n+      return fold_builtin_FILE (loc);\n+\n+    case BUILT_IN_FUNCTION:\n+      return fold_builtin_FUNCTION ();\n+\n+    case BUILT_IN_LINE:\n+      return fold_builtin_LINE (loc, type);\n+\n     CASE_FLT_FN (BUILT_IN_INF):\n     case BUILT_IN_INFD32:\n     case BUILT_IN_INFD64:"}, {"sha": "b7375189214821074cf25252f2735df3ed9b877c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "patch": "@@ -1,3 +1,9 @@\n+2016-05-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/66561\n+\t* tree.c (builtin_valid_in_constant_expr_p): Treat BUILT_IN_FILE,\n+\tBUILT_IN_FUNCTION, and BUILT_IN_LINE as constant expressions.\n+\n 2016-05-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70859"}, {"sha": "57fc5c1c54c388eee8960f2421a74d7031ade1e6", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "patch": "@@ -346,10 +346,16 @@ builtin_valid_in_constant_expr_p (const_tree decl)\n     return false;\n   switch (DECL_FUNCTION_CODE (decl))\n     {\n-    case BUILT_IN_CONSTANT_P:\n-    case BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE:\n+      /* These always have constant results like the corresponding\n+\t macros/symbol.  */\n+    case BUILT_IN_FILE:\n+    case BUILT_IN_FUNCTION:\n+    case BUILT_IN_LINE:\n+\n       /* These have constant results even if their operands are\n \t non-constant.  */\n+    case BUILT_IN_CONSTANT_P:\n+    case BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE:\n       return true;\n     default:\n       return false;"}, {"sha": "802845dc66f3c819186b57062be1d121900e1869", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 52, "deletions": 21, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "patch": "@@ -8929,9 +8929,11 @@ This extension is not supported by GNU C++.\n @cindex @code{__FUNCTION__} identifier\n @cindex @code{__PRETTY_FUNCTION__} identifier\n \n-GCC provides three magic variables that hold the name of the current\n-function, as a string.  The first of these is @code{__func__}, which\n-is part of the C99 standard:\n+GCC provides three magic constants that hold the name of the current\n+function as a string.  In C++11 and later modes, all three are treated\n+as constant expressions and can be used in @code{constexpr} constexts.\n+The first of these constants is @code{__func__}, which is part of\n+the C99 standard:\n \n The identifier @code{__func__} is implicitly declared by the translator\n as if, immediately following the opening brace of each function\n@@ -8943,20 +8945,21 @@ static const char __func__[] = \"function-name\";\n \n @noindent\n appeared, where function-name is the name of the lexically-enclosing\n-function.  This name is the unadorned name of the function.\n+function.  This name is the unadorned name of the function.  As an\n+extension, at file (or, in C++, namespace scope), @code{__func__}\n+evaluates to the empty string.\n \n @code{__FUNCTION__} is another name for @code{__func__}, provided for\n backward compatibility with old versions of GCC.\n \n In C, @code{__PRETTY_FUNCTION__} is yet another name for\n-@code{__func__}.  However, in C++, @code{__PRETTY_FUNCTION__} contains\n-the type signature of the function as well as its bare name.  For\n-example, this program:\n+@code{__func__}, except that at file (or, in C++, namespace scope),\n+it evaluates to the string @code{\"top level\"}.  In addition, in C++,\n+@code{__PRETTY_FUNCTION__} contains the signature of the function as\n+well as its bare name.  For example, this program:\n \n @smallexample\n-extern \"C\" @{\n-extern int printf (char *, ...);\n-@}\n+extern \"C\" int printf (const char *, ...);\n \n class a @{\n  public:\n@@ -8985,7 +8988,7 @@ __PRETTY_FUNCTION__ = void a::sub(int)\n @end smallexample\n \n These identifiers are variables, not preprocessor macros, and may not\n-be used to initialize @code{char} arrays or be concatenated with other string\n+be used to initialize @code{char} arrays or be concatenated with string\n literals.\n \n @node Return Address\n@@ -11091,22 +11094,50 @@ means that the compiler can assume for @code{x}, set to @code{arg}, that\n @end deftypefn\n \n @deftypefn {Built-in Function} int __builtin_LINE ()\n-This function is the equivalent to the preprocessor @code{__LINE__}\n-macro and returns the line number of the invocation of the built-in.\n-In a C++ default argument for a function @var{F}, it gets the line number of\n-the call to @var{F}.\n+This function is the equivalent of the preprocessor @code{__LINE__}\n+macro and returns a constant integer expression that evaluates to\n+the line number of the invocation of the built-in.  When used as a C++\n+default argument for a function @var{F}, it returns the line number\n+of the call to @var{F}.\n @end deftypefn\n \n @deftypefn {Built-in Function} {const char *} __builtin_FUNCTION ()\n-This function is the equivalent to the preprocessor @code{__FUNCTION__}\n-macro and returns the function name the invocation of the built-in is in.\n+This function is the equivalent of the @code{__FUNCTION__} symbol\n+and returns an address constant pointing to the name of the function\n+from which the built-in was invoked, or the empty string if\n+the invocation is not at function scope.  When used as a C++ default\n+argument for a function @var{F}, it returns the name of @var{F}'s\n+caller or the empty string if the call was not made at function\n+scope.\n @end deftypefn\n \n @deftypefn {Built-in Function} {const char *} __builtin_FILE ()\n-This function is the equivalent to the preprocessor @code{__FILE__}\n-macro and returns the file name the invocation of the built-in is in.\n-In a C++ default argument for a function @var{F}, it gets the file name of\n-the call to @var{F}.\n+This function is the equivalent of the preprocessor @code{__FILE__}\n+macro and returns an address constant pointing to the file name\n+containing the invocation of the built-in, or the empty string if\n+the invocation is not at function scope.  When used as a C++ default\n+argument for a function @var{F}, it returns the file name of the call\n+to @var{F} or the empty string if the call was not made at function\n+scope.\n+\n+For example, in the following, each call to function @code{foo} will\n+print a line similar to @code{\"file.c:123: foo: message\"} with the name\n+of the file and the line number of the @code{printf} call, the name of\n+the function @code{foo}, followed by the word @code{message}.\n+\n+@smallexample\n+const char*\n+function (const char *func = __builtin_FUNCTION ())\n+@{\n+  return func;\n+@}\n+\n+void foo (void)\n+@{\n+  printf (\"%s:%i: %s: message\\n\", file (), line (), function ());\n+@}\n+@end smallexample\n+\n @end deftypefn\n \n @deftypefn {Built-in Function} void __builtin___clear_cache (char *@var{begin}, char *@var{end})"}, {"sha": "f13980d80bed90ac1b772e9eb91ae1538b2569cb", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "patch": "@@ -2437,25 +2437,7 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n \t    }\n \t  break;\n \t}\n-      case BUILT_IN_LINE:\n-\t{\n-\t  *expr_p = build_int_cst (TREE_TYPE (*expr_p),\n-\t\t\t\t   LOCATION_LINE (EXPR_LOCATION (*expr_p)));\n-\t  return GS_OK;\n-\t}\n-      case BUILT_IN_FILE:\n-\t{\n-\t  const char *locfile = LOCATION_FILE (EXPR_LOCATION (*expr_p));\n-\t  *expr_p = build_string_literal (strlen (locfile) + 1, locfile);\n-\t  return GS_OK;\n-\t}\n-      case BUILT_IN_FUNCTION:\n-\t{\n-\t  const char *function;\n-\t  function = IDENTIFIER_POINTER (DECL_NAME (current_function_decl));\n-\t  *expr_p = build_string_literal (strlen (function) + 1, function);\n-\t  return GS_OK;\n-\t}\n+\n       default:\n         ;\n       }"}, {"sha": "b83de7369fd58c53a4668f193e3df96eb45fe968", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "patch": "@@ -1,3 +1,9 @@\n+2016-05-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/66561\n+\t* c-c++-common/builtin_location.c: New test.\n+\t* g++.dg/cpp1y/builtin_location.C: New test.\n+\n 2016-05-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70859"}, {"sha": "f3bcd17d84d8139f8ae9ffd55fe2dda5090819f1", "filename": "gcc/testsuite/c-c++-common/builtin_location.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin_location.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin_location.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin_location.c?ref=b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "patch": "@@ -0,0 +1,57 @@\n+/* PR c++/66561 - __builtin_LINE at al. should yield constant expressions */\n+/* { dg-do compile } */\n+\n+#if __cplusplus >= 201103L\n+#  define Assert(expr) static_assert ((expr), #expr)\n+#elif __STDC_VERSION__ >= 201112L\n+#  define Assert(expr) _Static_assert ((expr), #expr)\n+#else\n+#  define CONCAT(a, b)  a ## b\n+#  define CAT(a, b)     CONCAT (a, b)\n+#  define Assert(expr)  typedef int CAT (Assert_, __LINE__) [1 - 2 * !(expr)]\n+#endif\n+\n+/* Verify (in C) that __builtin_FILE() yields an address constant.\n+   This test is ineffective in C++ where initializers of global\n+   objects need not be constant expressions.  */\n+const char* const file = __builtin_FILE ();\n+\n+/* Verify (in C) that __builtin_FUNCTION() yields an address constant.  */\n+const char* const function = __builtin_FUNCTION ();\n+\n+/* Also verify that __builtin_constant_p() returns true for both.  */\n+Assert (__builtin_constant_p (__builtin_FILE ()));\n+Assert (__builtin_constant_p (__builtin_FUNCTION ()));\n+\t\n+/* Verify (in both C and C++ 11 and later) that both __builtin_FILE ()\n+   and __builtin_FUNCTION() yield an address constant by making use\n+   of a GCC extension that allows operands of arithmetic constant\n+   expressions to be address constants.  (Subtracting two literals\n+   from one another is undefined in both C and C++ and should be\n+   diagnosed.  See c/70772.)  */\n+\n+#pragma GCC diagnostic push  \n+#pragma GCC diagnostic ignored \"-Waddress\"\n+\n+enum E0 {\n+  e0 = __FILE__ - __FILE__,\n+  e1 = __builtin_FILE () - __builtin_FILE (),\n+\n+#if !__cplusplus || __cplusplus >= 201103L\n+  /* Skip this test in C++ 98 where GCC rejects __FUNCTION__ in constant\n+     expressions.  */\n+  e2 = __FUNCTION__ - __FUNCTION__,\n+  e3 = __builtin_FUNCTION () - __builtin_FUNCTION ()\n+\n+#endif\n+};\n+\n+#pragma GCC diagnostic pop\n+\n+/* Verify that __builtin_LINE () yields an integer constant expression.  */\n+#line 13\n+int a [__builtin_LINE ()][__builtin_LINE ()];\n+enum F { f0 = __builtin_LINE () };\n+struct S { unsigned bitfield: __builtin_LINE (); } s;\n+\n+Assert (__builtin_constant_p (__builtin_LINE ()));"}, {"sha": "b3b9b435b2c599e6ab98a753de8d03cd543b1db1", "filename": "gcc/testsuite/g++.dg/cpp1y/builtin_location.C", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fbuiltin_location.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fbuiltin_location.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fbuiltin_location.C?ref=b25aad5fda6c3efbb83980fb0f4fb0e2ddd38216", "patch": "@@ -0,0 +1,175 @@\n+// PR c++/66561 - __builtin_LINE at al. should yield constant expressions\n+// { dg-do compile { target c++11 } }\n+#define A(expr) static_assert ((expr), #expr)\n+\n+#define FILE_1 \"file_name.suffix\"\n+#define FILE_2 \"some_other_file_name.suffix\"\n+\n+#line 1 FILE_1\n+constexpr const char*\n+file1 ()\n+{\n+#if __cplusplus >= 201402L\n+  // Do extra checking in C++ 14 and later.\n+  constexpr const char *f1 = __FILE__;\n+  constexpr const char *f2 = __builtin_FILE ();\n+  A (0 == __builtin_strcmp (f1, f2));\n+  return f1;\n+#else\n+  // In C++ 11, a constexpr function body must consist of a single\n+  // return statement and no declaratations.\n+  return __builtin_FILE ();\n+#endif  \n+}\n+\n+#line 1 FILE_2\n+constexpr const char*\n+file2 ()\n+{\n+#if __cplusplus >= 201402L\n+  constexpr const char *f1 = __FILE__;\n+  constexpr const char *f2 = __builtin_FILE ();\n+  A (0 == __builtin_strcmp (f1, f2));\n+  return f1;\n+#else\n+  return __builtin_FILE ();\n+#endif\n+}\n+\n+#line 1 \"bogus file name\"\n+constexpr const char*\n+this_file (const char *fname = __builtin_FILE ())\n+{\n+  return fname;\n+}\n+\n+constexpr const char*\n+function ()\n+{\n+#if __cplusplus >= 201402L\n+  constexpr const char *f1 = __FUNCTION__;\n+  constexpr const char *f2 = __builtin_FUNCTION ();\n+  A (0 == __builtin_strcmp (f1, f2));\n+  return f1;\n+#else\n+  return __builtin_FUNCTION ();\n+#endif\n+}\n+\n+constexpr const char*\n+this_function (const char *func = __builtin_FUNCTION ())\n+{\n+  return func;\n+}\n+\n+constexpr int\n+line ()\n+{\n+#if __cplusplus >= 201402L\n+#line 123\n+  constexpr int n1 = __LINE__;\n+  constexpr int n2 = __builtin_LINE ();\n+  A (123 == n1);\n+  A (n1 + 1 == n2);\n+  return n2;\n+#else\n+#line 123\n+  // Newline.\n+  return __builtin_LINE ();\n+#endif\n+}\n+\n+constexpr int\n+this_line (int line = __builtin_LINE ())\n+{\n+  return line;\n+}\n+\n+\n+// Exercise __builtin_FILE().\n+#line 1 \"foobar\"\n+constexpr const char* f1 = file1 ();\n+A (0 == __builtin_strcmp (f1, FILE_1));\n+\n+#line 2 \"foobar\"\n+constexpr const char* f2 = file2 ();\n+A (0 == __builtin_strcmp (f2, FILE_2));\n+\n+#define FILE_3 \"this_file_name_right_here.this_suffix\"\n+#line 1 FILE_3\n+constexpr const char* f3 = this_file ();\n+A (0 == __builtin_strcmp (f3, FILE_3));\n+\n+#define FILE_4 \"next_file_name.another_suffix\"\n+#line 1 \"foobar\"\n+constexpr const char* f4 = this_file\n+  (\n+#line 1 FILE_4\n+   )\n+#line 1 \"foobar\"\n+  ;\n+A (0 == __builtin_strcmp (f4, FILE_4));\n+\n+\n+// Exercise __builtin_FUNCTION().\n+\n+// Verify that __builtin_FUNCTION() returns the name of the function\n+// in which it is called.\n+constexpr const char* fun1 = function ();\n+A (0 == __builtin_strcmp (fun1, \"function\"));\n+\n+// Verify that __builtin_FUNCTION() returns the empty string when\n+// it's invoked to set the default argument value in a function\n+// called at file scope.\n+constexpr const char* fun2 = this_function ();\n+A (0 == __builtin_strcmp (fun2, \"\"));\n+\n+constexpr const char*\n+named_function ()\n+{\n+  return this_function ();\n+}\n+\n+constexpr const char* fun3 = named_function ();\n+A (0 == __builtin_strcmp (fun3, \"named_function\"));\n+\n+\n+// Exercise __builtin_LINE().\n+// Verify the line numbe returned by the built-in.\n+#line 4\n+constexpr int n1 = __builtin_LINE ();\n+A (n1 == 4);\n+\n+// Verify the line number obtained by a constexpr function.\n+#line 5\n+constexpr int n2 = line ();\n+A (n2 == 124);\n+\n+// Verify the line number determined by the default argument.\n+#line 6\n+constexpr int n3 = this_line ();\n+A (n3 == 6);\n+\n+// Verify that the line number accounts for each of the calls.\n+#line 7\n+constexpr int n4 = this_line () + this_line ();\n+A (n4 == 14);\n+\n+// Verify that the line number accounts for each of the calls when\n+// split over multiple lines.\n+#line 1\n+constexpr int n5 = this_line ()\n+#line 8\n+  + this_line ();\n+A (n5 == 9);\n+\n+// Verify that the line number corresponds to the closing parenthesis\n+// of the function call.\n+#line 1\n+constexpr int n6 = this_line\n+  (\n+#line 99\n+   )\n+#line 1\n+  ;\n+A (n6 == 99);"}]}