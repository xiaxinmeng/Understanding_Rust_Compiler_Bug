{"sha": "6aa10371a56f91774a606507b1a65ceae8eccdbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFhMTAzNzFhNTZmOTE3NzRhNjA2NTA3YjFhNjVjZWFlOGVjY2RiYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-14T10:08:06Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-14T10:08:06Z"}, "message": "(finish_{decl,struct,enum}): Call tree_int_cst_sgn.\n\nFrom-SVN: r6775", "tree": {"sha": "a5f7e182d8e2d0e8b4e8e110cb045d64ebee0ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5f7e182d8e2d0e8b4e8e110cb045d64ebee0ab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aa10371a56f91774a606507b1a65ceae8eccdbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa10371a56f91774a606507b1a65ceae8eccdbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa10371a56f91774a606507b1a65ceae8eccdbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa10371a56f91774a606507b1a65ceae8eccdbc/comments", "author": null, "committer": null, "parents": [{"sha": "6d9cb074bfb64a74b0e4b64932093bde27cb3830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9cb074bfb64a74b0e4b64932093bde27cb3830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9cb074bfb64a74b0e4b64932093bde27cb3830"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "7efb423bc16c5af907f5d1f75a5a56542f0a1948", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa10371a56f91774a606507b1a65ceae8eccdbc/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa10371a56f91774a606507b1a65ceae8eccdbc/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6aa10371a56f91774a606507b1a65ceae8eccdbc", "patch": "@@ -3461,9 +3461,8 @@ finish_decl (decl, init, asmspec_tree)\n \t}\n \n       if (pedantic && TYPE_DOMAIN (type) != 0\n-\t  && tree_int_cst_lt (TYPE_MAX_VALUE (TYPE_DOMAIN (type)),\n-\t\t\t      integer_zero_node))\n-\terror_with_decl (decl, \"zero-size array `%s'\");\n+\t  && tree_int_cst_sgn (TYPE_MAX_VALUE (TYPE_DOMAIN (type))) <= 0)\n+\terror_with_decl (decl, \"zero or negative size array `%s'\");\n \n       layout_decl (decl, 0);\n     }\n@@ -5276,7 +5275,7 @@ finish_struct (t, fieldlist)\n \t{\n \t  unsigned HOST_WIDE_INT width = TREE_INT_CST_LOW (DECL_INITIAL (x));\n \n-\t  if (tree_int_cst_lt (DECL_INITIAL (x), integer_zero_node))\n+\t  if (tree_int_cst_sgn (DECL_INITIAL (x)) < 0)\n \t    {\n \t      DECL_INITIAL (x) = NULL;\n \t      error_with_decl (x, \"negative width in bit-field `%s'\");\n@@ -5622,7 +5621,7 @@ finish_enum (enumtype, values)\n   layout_type (enumtype);\n \n   /* An enum can have some negative values; then it is signed.  */\n-  TREE_UNSIGNED (enumtype) = ! tree_int_cst_lt (minnode, integer_zero_node);\n+  TREE_UNSIGNED (enumtype) = tree_int_cst_sgn (minnode) >= 0;\n \n   /* Change the type of the enumerators to be the enum type.\n      Formerly this was done only for enums that fit in an int,"}]}