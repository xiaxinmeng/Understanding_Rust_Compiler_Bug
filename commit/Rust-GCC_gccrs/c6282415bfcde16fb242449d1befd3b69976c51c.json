{"sha": "c6282415bfcde16fb242449d1befd3b69976c51c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyODI0MTViZmNkZTE2ZmIyNDI0NDlkMWJlZmQzYjY5OTc2YzUxYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-10-09T20:23:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-10-09T20:23:05Z"}, "message": "misc.c: Delete prototypes.\n\n\t* gcc-interface/misc.c: Delete prototypes.\n\t(gnat_init_options): Use local variable.\n\t(lang_hooks): Move to the end of the file.\n\nFrom-SVN: r165237", "tree": {"sha": "3b075b54f81d6749a8d9a6768cac4b6d26f875d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b075b54f81d6749a8d9a6768cac4b6d26f875d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6282415bfcde16fb242449d1befd3b69976c51c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6282415bfcde16fb242449d1befd3b69976c51c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6282415bfcde16fb242449d1befd3b69976c51c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6282415bfcde16fb242449d1befd3b69976c51c/comments", "author": null, "committer": null, "parents": [{"sha": "6176c2a993ffb40b937e30bbce1f7cce171c92ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6176c2a993ffb40b937e30bbce1f7cce171c92ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6176c2a993ffb40b937e30bbce1f7cce171c92ec"}], "stats": {"total": 189, "additions": 87, "deletions": 102}, "files": [{"sha": "ab083100fd5bdc0598dec07c3a2bbabca2e58465", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6282415bfcde16fb242449d1befd3b69976c51c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6282415bfcde16fb242449d1befd3b69976c51c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c6282415bfcde16fb242449d1befd3b69976c51c", "patch": "@@ -1,3 +1,9 @@\n+2010-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/misc.c: Delete prototypes.\n+\t(gnat_init_options): Use local variable.\n+\t(lang_hooks): Move to the end of the file.\n+\n 2010-10-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc-interface/misc.c (gnat_init_options_struct): New.  Split out"}, {"sha": "07b3acfae4ea11f5e28259ea73ba7b6b949615b4", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 81, "deletions": 102, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6282415bfcde16fb242449d1befd3b69976c51c/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6282415bfcde16fb242449d1befd3b69976c51c/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=c6282415bfcde16fb242449d1befd3b69976c51c", "patch": "@@ -23,10 +23,6 @@\n  *                                                                          *\n  ****************************************************************************/\n \n-/* This file contains parts of the compiler that are required for interfacing\n-   with GCC but otherwise do nothing and parts of Gigi that need to know\n-   about GIMPLE.  */\n-\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n@@ -60,100 +56,17 @@\n #include \"ada-tree.h\"\n #include \"gigi.h\"\n \n-static bool gnat_init\t\t\t(void);\n-static unsigned int gnat_option_lang_mask (void);\n-static void gnat_init_options_struct\t(struct gcc_options *);\n-static void gnat_init_options\t\t(unsigned int,\n-\t\t\t\t\t struct cl_decoded_option *);\n-static bool gnat_handle_option\t\t(size_t, const char *, int, int,\n-\t\t\t\t\t const struct cl_option_handlers *);\n-static bool gnat_post_options\t\t(const char **);\n-static alias_set_type gnat_get_alias_set (tree);\n-static void gnat_print_decl\t\t(FILE *, tree, int);\n-static void gnat_print_type\t\t(FILE *, tree, int);\n-static const char *gnat_printable_name\t(tree, int);\n-static const char *gnat_dwarf_name\t(tree, int);\n-static bool gnat_type_hash_eq\t\t(const_tree, const_tree);\n-static tree gnat_return_tree\t\t(tree);\n-static void gnat_parse_file\t\t(int);\n-static void internal_error_function\t(diagnostic_context *,\n-\t\t\t\t\t const char *, va_list *);\n-static tree gnat_type_max_size\t\t(const_tree);\n-static void gnat_get_subrange_bounds\t(const_tree, tree *, tree *);\n-static tree gnat_eh_personality\t\t(void);\n-\n-/* Definitions for our language-specific hooks.  */\n-\n-#undef  LANG_HOOKS_NAME\n-#define LANG_HOOKS_NAME\t\t\t\"GNU Ada\"\n-#undef  LANG_HOOKS_IDENTIFIER_SIZE\n-#define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct tree_identifier)\n-#undef  LANG_HOOKS_INIT\n-#define LANG_HOOKS_INIT\t\t\tgnat_init\n-#undef  LANG_HOOKS_OPTION_LANG_MASK\n-#define LANG_HOOKS_OPTION_LANG_MASK\tgnat_option_lang_mask\n-#undef  LANG_HOOKS_INIT_OPTIONS_STRUCT\n-#define LANG_HOOKS_INIT_OPTIONS_STRUCT\tgnat_init_options_struct\n-#undef  LANG_HOOKS_INIT_OPTIONS\n-#define LANG_HOOKS_INIT_OPTIONS\t\tgnat_init_options\n-#undef  LANG_HOOKS_HANDLE_OPTION\n-#define LANG_HOOKS_HANDLE_OPTION\tgnat_handle_option\n-#undef  LANG_HOOKS_POST_OPTIONS\n-#define LANG_HOOKS_POST_OPTIONS\t\tgnat_post_options\n-#undef  LANG_HOOKS_PARSE_FILE\n-#define LANG_HOOKS_PARSE_FILE\t\tgnat_parse_file\n-#undef  LANG_HOOKS_TYPE_HASH_EQ\n-#define LANG_HOOKS_TYPE_HASH_EQ\t\tgnat_type_hash_eq\n-#undef  LANG_HOOKS_GETDECLS\n-#define LANG_HOOKS_GETDECLS\t\tlhd_return_null_tree_v\n-#undef  LANG_HOOKS_PUSHDECL\n-#define LANG_HOOKS_PUSHDECL\t\tgnat_return_tree\n-#undef  LANG_HOOKS_WRITE_GLOBALS\n-#define LANG_HOOKS_WRITE_GLOBALS\tgnat_write_global_declarations\n-#undef  LANG_HOOKS_GET_ALIAS_SET\n-#define LANG_HOOKS_GET_ALIAS_SET\tgnat_get_alias_set\n-#undef  LANG_HOOKS_PRINT_DECL\n-#define LANG_HOOKS_PRINT_DECL\t\tgnat_print_decl\n-#undef  LANG_HOOKS_PRINT_TYPE\n-#define LANG_HOOKS_PRINT_TYPE\t\tgnat_print_type\n-#undef  LANG_HOOKS_TYPE_MAX_SIZE\n-#define LANG_HOOKS_TYPE_MAX_SIZE\tgnat_type_max_size\n-#undef  LANG_HOOKS_DECL_PRINTABLE_NAME\n-#define LANG_HOOKS_DECL_PRINTABLE_NAME\tgnat_printable_name\n-#undef  LANG_HOOKS_DWARF_NAME\n-#define LANG_HOOKS_DWARF_NAME\t\tgnat_dwarf_name\n-#undef  LANG_HOOKS_GIMPLIFY_EXPR\n-#define LANG_HOOKS_GIMPLIFY_EXPR\tgnat_gimplify_expr\n-#undef  LANG_HOOKS_TYPE_FOR_MODE\n-#define LANG_HOOKS_TYPE_FOR_MODE\tgnat_type_for_mode\n-#undef  LANG_HOOKS_TYPE_FOR_SIZE\n-#define LANG_HOOKS_TYPE_FOR_SIZE\tgnat_type_for_size\n-#undef  LANG_HOOKS_TYPES_COMPATIBLE_P\n-#define LANG_HOOKS_TYPES_COMPATIBLE_P\tgnat_types_compatible_p\n-#undef  LANG_HOOKS_GET_SUBRANGE_BOUNDS\n-#define LANG_HOOKS_GET_SUBRANGE_BOUNDS  gnat_get_subrange_bounds\n-#undef  LANG_HOOKS_ATTRIBUTE_TABLE\n-#define LANG_HOOKS_ATTRIBUTE_TABLE\tgnat_internal_attribute_table\n-#undef  LANG_HOOKS_BUILTIN_FUNCTION\n-#define LANG_HOOKS_BUILTIN_FUNCTION\tgnat_builtin_function\n-#undef  LANG_HOOKS_EH_PERSONALITY\n-#define LANG_HOOKS_EH_PERSONALITY\tgnat_eh_personality\n-#undef  LANG_HOOKS_DEEP_UNSHARING\n-#define LANG_HOOKS_DEEP_UNSHARING\ttrue\n-\n-struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n-\n /* This symbol needs to be defined for the front-end.  */\n void *callgraph_info_file = NULL;\n \n-/* How much we want of our DWARF extensions.  Some of our dwarf+ extensions\n+/* How much we want of our DWARF extensions.  Some of our DWARF extensions\n    are incompatible with regular GDB versions, so we must make sure to only\n    produce them on explicit request.  This is eventually reflected into the\n    use_gnu_debug_info_extensions common flag for later processing.  */\n static int gnat_dwarf_extensions = 0;\n \n-/* Command-line argc and argv.  These variables are global\n-   since they are imported in back_end.adb.  */\n+/* Command-line argc and argv.  These variables are global since they are\n+   imported in back_end.adb.  */\n unsigned int save_argc;\n const char **save_argv;\n \n@@ -162,10 +75,10 @@ extern int gnat_argc;\n extern char **gnat_argv;\n \n /* Declare functions we use as part of startup.  */\n-extern void __gnat_initialize           (void *);\n-extern void __gnat_install_SEH_handler  (void *);\n-extern void adainit\t\t        (void);\n-extern void _ada_gnat1drv\t        (void);\n+extern void __gnat_initialize (void *);\n+extern void __gnat_install_SEH_handler (void *);\n+extern void adainit (void);\n+extern void _ada_gnat1drv (void);\n \n /* The parser for the language.  For us, we process the GNAT tree.  */\n \n@@ -276,32 +189,34 @@ gnat_init_options (unsigned int decoded_options_count,\n {\n   /* Reconstruct an argv array for use of back_end.adb.\n \n-     ??? back_end.adb should not rely on this; instead, it should work\n-     with decoded options without such reparsing, to ensure\n-     consistency in how options are decoded.  */\n+     ??? back_end.adb should not rely on this; instead, it should work with\n+     decoded options without such reparsing, to ensure consistency in how\n+     options are decoded.  */\n   unsigned int i;\n \n   save_argv = XNEWVEC (const char *, 2 * decoded_options_count + 1);\n   save_argc = 0;\n   for (i = 0; i < decoded_options_count; i++)\n     {\n+      size_t num_elements = decoded_options[i].canonical_option_num_elements;\n+\n       if (decoded_options[i].errors\n \t  || decoded_options[i].opt_index == OPT_SPECIAL_unknown\n-\t  || decoded_options[i].canonical_option_num_elements == 0)\n+\t  || num_elements == 0)\n \tcontinue;\n+\n       if (decoded_options[i].opt_index == OPT_I)\n \t{\n-\t  gcc_assert (decoded_options[i].canonical_option_num_elements == 2);\n+\t  gcc_assert (num_elements == 2);\n \t  save_argv[save_argc++]\n \t    = concat (decoded_options[i].canonical_option[0],\n \t\t      decoded_options[i].canonical_option[1], NULL);\n \t}\n       else\n \t{\n-\t  gcc_assert (decoded_options[i].canonical_option_num_elements >= 1\n-\t\t      && decoded_options[i].canonical_option_num_elements <= 2);\n+\t  gcc_assert (num_elements >= 1 && num_elements <= 2);\n \t  save_argv[save_argc++] = decoded_options[i].canonical_option[0];\n-\t  if (decoded_options[i].canonical_option_num_elements >= 2)\n+\t  if (num_elements >= 2)\n \t    save_argv[save_argc++] = decoded_options[i].canonical_option[1];\n \t}\n     }\n@@ -492,6 +407,7 @@ gnat_init_gcc_eh (void)\n   flag_non_call_exceptions = 1;\n \n   init_eh ();\n+\n #ifdef DWARF2_UNWIND_INFO\n   if (!dwarf2out_frame_initialized && dwarf2out_do_frame ())\n     dwarf2out_frame_init ();\n@@ -780,6 +696,8 @@ fp_size_to_prec (int size)\n \n static GTY(()) tree gnat_eh_personality_decl;\n \n+/* Return the GNAT personality function decl.  */\n+\n static tree\n gnat_eh_personality (void)\n {\n@@ -792,4 +710,65 @@ gnat_eh_personality (void)\n   return gnat_eh_personality_decl;\n }\n \n+/* Definitions for our language-specific hooks.  */\n+\n+#undef  LANG_HOOKS_NAME\n+#define LANG_HOOKS_NAME\t\t\t\"GNU Ada\"\n+#undef  LANG_HOOKS_IDENTIFIER_SIZE\n+#define LANG_HOOKS_IDENTIFIER_SIZE\tsizeof (struct tree_identifier)\n+#undef  LANG_HOOKS_INIT\n+#define LANG_HOOKS_INIT\t\t\tgnat_init\n+#undef  LANG_HOOKS_OPTION_LANG_MASK\n+#define LANG_HOOKS_OPTION_LANG_MASK\tgnat_option_lang_mask\n+#undef  LANG_HOOKS_INIT_OPTIONS_STRUCT\n+#define LANG_HOOKS_INIT_OPTIONS_STRUCT\tgnat_init_options_struct\n+#undef  LANG_HOOKS_INIT_OPTIONS\n+#define LANG_HOOKS_INIT_OPTIONS\t\tgnat_init_options\n+#undef  LANG_HOOKS_HANDLE_OPTION\n+#define LANG_HOOKS_HANDLE_OPTION\tgnat_handle_option\n+#undef  LANG_HOOKS_POST_OPTIONS\n+#define LANG_HOOKS_POST_OPTIONS\t\tgnat_post_options\n+#undef  LANG_HOOKS_PARSE_FILE\n+#define LANG_HOOKS_PARSE_FILE\t\tgnat_parse_file\n+#undef  LANG_HOOKS_TYPE_HASH_EQ\n+#define LANG_HOOKS_TYPE_HASH_EQ\t\tgnat_type_hash_eq\n+#undef  LANG_HOOKS_GETDECLS\n+#define LANG_HOOKS_GETDECLS\t\tlhd_return_null_tree_v\n+#undef  LANG_HOOKS_PUSHDECL\n+#define LANG_HOOKS_PUSHDECL\t\tgnat_return_tree\n+#undef  LANG_HOOKS_WRITE_GLOBALS\n+#define LANG_HOOKS_WRITE_GLOBALS\tgnat_write_global_declarations\n+#undef  LANG_HOOKS_GET_ALIAS_SET\n+#define LANG_HOOKS_GET_ALIAS_SET\tgnat_get_alias_set\n+#undef  LANG_HOOKS_PRINT_DECL\n+#define LANG_HOOKS_PRINT_DECL\t\tgnat_print_decl\n+#undef  LANG_HOOKS_PRINT_TYPE\n+#define LANG_HOOKS_PRINT_TYPE\t\tgnat_print_type\n+#undef  LANG_HOOKS_TYPE_MAX_SIZE\n+#define LANG_HOOKS_TYPE_MAX_SIZE\tgnat_type_max_size\n+#undef  LANG_HOOKS_DECL_PRINTABLE_NAME\n+#define LANG_HOOKS_DECL_PRINTABLE_NAME\tgnat_printable_name\n+#undef  LANG_HOOKS_DWARF_NAME\n+#define LANG_HOOKS_DWARF_NAME\t\tgnat_dwarf_name\n+#undef  LANG_HOOKS_GIMPLIFY_EXPR\n+#define LANG_HOOKS_GIMPLIFY_EXPR\tgnat_gimplify_expr\n+#undef  LANG_HOOKS_TYPE_FOR_MODE\n+#define LANG_HOOKS_TYPE_FOR_MODE\tgnat_type_for_mode\n+#undef  LANG_HOOKS_TYPE_FOR_SIZE\n+#define LANG_HOOKS_TYPE_FOR_SIZE\tgnat_type_for_size\n+#undef  LANG_HOOKS_TYPES_COMPATIBLE_P\n+#define LANG_HOOKS_TYPES_COMPATIBLE_P\tgnat_types_compatible_p\n+#undef  LANG_HOOKS_GET_SUBRANGE_BOUNDS\n+#define LANG_HOOKS_GET_SUBRANGE_BOUNDS  gnat_get_subrange_bounds\n+#undef  LANG_HOOKS_ATTRIBUTE_TABLE\n+#define LANG_HOOKS_ATTRIBUTE_TABLE\tgnat_internal_attribute_table\n+#undef  LANG_HOOKS_BUILTIN_FUNCTION\n+#define LANG_HOOKS_BUILTIN_FUNCTION\tgnat_builtin_function\n+#undef  LANG_HOOKS_EH_PERSONALITY\n+#define LANG_HOOKS_EH_PERSONALITY\tgnat_eh_personality\n+#undef  LANG_HOOKS_DEEP_UNSHARING\n+#define LANG_HOOKS_DEEP_UNSHARING\ttrue\n+\n+struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n+\n #include \"gt-ada-misc.h\""}]}