{"sha": "28a5d5c365044710ba32510b9bec67dd40562154", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhhNWQ1YzM2NTA0NDcxMGJhMzI1MTBiOWJlYzY3ZGQ0MDU2MjE1NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-23T20:45:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-24T17:34:02Z"}, "message": "c++: Unshare expressions from constexpr cache.\n\nAnother place we need to unshare cached expressions.\n\n\tPR c++/92852 - ICE with generic lambda and reference var.\n\t* constexpr.c (maybe_constant_value): Likewise.", "tree": {"sha": "0f1d332f9ea3b9b71905c754e94626b25ff471aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f1d332f9ea3b9b71905c754e94626b25ff471aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28a5d5c365044710ba32510b9bec67dd40562154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a5d5c365044710ba32510b9bec67dd40562154", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a5d5c365044710ba32510b9bec67dd40562154", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a5d5c365044710ba32510b9bec67dd40562154/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ad405c430f40424a53fc93e5ea12b91453e1daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad405c430f40424a53fc93e5ea12b91453e1daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad405c430f40424a53fc93e5ea12b91453e1daf"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "b1c9e2c632571523459341517077b24d547b8c44", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a5d5c365044710ba32510b9bec67dd40562154/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a5d5c365044710ba32510b9bec67dd40562154/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=28a5d5c365044710ba32510b9bec67dd40562154", "patch": "@@ -1,3 +1,8 @@\n+2020-01-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92852 - ICE with generic lambda and reference var.\n+\t* constexpr.c (maybe_constant_value): Likewise.\n+\n 2020-01-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/92804"}, {"sha": "8e8806345c1d94231120bd94da809d9328f5c078", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a5d5c365044710ba32510b9bec67dd40562154/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a5d5c365044710ba32510b9bec67dd40562154/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=28a5d5c365044710ba32510b9bec67dd40562154", "patch": "@@ -6598,7 +6598,7 @@ maybe_constant_value (tree t, tree decl, bool manifestly_const_eval)\n   if (cv_cache == NULL)\n     cv_cache = hash_map<tree, tree>::create_ggc (101);\n   if (tree *cached = cv_cache->get (t))\n-    return *cached;\n+    return unshare_expr_without_location (*cached);\n \n   r = cxx_eval_outermost_constant_expr (t, true, true, false, false, decl);\n   gcc_checking_assert (r == t"}, {"sha": "a96fa1ce237c32893de3fea03ef0a4b065dae524", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-ref1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a5d5c365044710ba32510b9bec67dd40562154/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-ref1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a5d5c365044710ba32510b9bec67dd40562154/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-ref1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-ref1.C?ref=28a5d5c365044710ba32510b9bec67dd40562154", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/92852\n+// { dg-do compile { target c++14 } }\n+\n+struct S { int operator<<(const int &); } glob;\n+void foo()\n+{\n+  S& message_stream = glob;\n+  auto format = [&message_stream](auto && x)\n+\t\t{ message_stream << x ; };\n+  format(3);\n+  format(4u);\n+}"}, {"sha": "35413c79a9daf32906cd1bd34a008ac0037b7f8f", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp48.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a5d5c365044710ba32510b9bec67dd40562154/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a5d5c365044710ba32510b9bec67dd40562154/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp48.C?ref=28a5d5c365044710ba32510b9bec67dd40562154", "patch": "@@ -18,7 +18,7 @@ f2 ()\n {\n   S v {1, 2};\n   auto& [s, t] = v;\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n-  return s;\t\t// { dg-warning \"reference to local variable 'v' returned\" \"\" { target *-*-* } .-1 }\n+  return s;\t\t// { dg-warning \"reference to local variable 'v' returned\" }\n }\n \n int &\n@@ -33,7 +33,7 @@ f4 ()\n {\n   int a[3] = {1, 2, 3};\n   auto& [s, t, u] = a;\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n-  return s;\t\t// { dg-warning \"reference to local variable 'a' returned\" \"\" { target *-*-* } .-1 }\n+  return s;\t\t// { dg-warning \"reference to local variable 'a' returned\" }\n }\n \n int &\n@@ -78,7 +78,7 @@ f10 ()\n {\n   S v {1, 2};\n   auto& [s, t] = v;\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n-  return &s;\t\t// { dg-warning \"address of local variable 'v' returned\" \"\" { target *-*-* } .-1 }\n+  return &s;\t\t// { dg-warning \"address of local variable 'v' returned\" }\n }\n \n int *\n@@ -93,7 +93,7 @@ f12 ()\n {\n   int a[3] = {1, 2, 3};\n   auto& [s, t, u] = a;\t// { dg-warning \"structured bindings only available with\" \"\" { target c++14_down } }\n-  return &s;\t\t// { dg-warning \"address of local variable 'a' returned\" \"\" { target *-*-* } .-1 }\n+  return &s;\t\t// { dg-warning \"address of local variable 'a' returned\" }\n }\n \n int *"}]}