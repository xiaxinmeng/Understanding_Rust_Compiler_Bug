{"sha": "b533084d756a2696a3eb6521810e0a0b2182a8e8", "node_id": "C_kwDOANBUbNoAKGI1MzMwODRkNzU2YTI2OTZhM2ViNjUyMTgxMGUwYTBiMjE4MmE4ZTg", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-01-30T23:18:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-01-31T23:08:51Z"}, "message": "c++: aggregate base and TARGET_EXPR_ELIDING_P [PR108559]\n\nWe also need to split up a CONSTRUCTOR in cp_genericize_init if we need to\nadd extra copy constructor calls to deal with CWG2403.\n\n\tPR c++/108559\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.cc (any_non_eliding_target_exprs): New.\n\t(cp_genericize_init): Check it.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/aggr-base13.C: New test.", "tree": {"sha": "b032ee4a59024d0787728abeca8a780ae3d35453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b032ee4a59024d0787728abeca8a780ae3d35453"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b533084d756a2696a3eb6521810e0a0b2182a8e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b533084d756a2696a3eb6521810e0a0b2182a8e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b533084d756a2696a3eb6521810e0a0b2182a8e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b533084d756a2696a3eb6521810e0a0b2182a8e8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9fbc6687faa09bf045c0fcee7960b7fef796fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fbc6687faa09bf045c0fcee7960b7fef796fcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fbc6687faa09bf045c0fcee7960b7fef796fcc"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "9929d29981a227d0b46aa9707717435ce67ef106", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b533084d756a2696a3eb6521810e0a0b2182a8e8/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b533084d756a2696a3eb6521810e0a0b2182a8e8/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=b533084d756a2696a3eb6521810e0a0b2182a8e8", "patch": "@@ -893,6 +893,21 @@ omp_cxx_notice_variable (struct cp_genericize_omp_taskreg *omp_ctx, tree decl)\n     }\n }\n \n+/* True if any of the element initializers in CTOR are TARGET_EXPRs that are\n+   not expected to elide, e.g. because unsafe_copy_elision_p is true.  */\n+\n+static bool\n+any_non_eliding_target_exprs (tree ctor)\n+{\n+  for (const constructor_elt &e : *CONSTRUCTOR_ELTS (ctor))\n+    {\n+      if (TREE_CODE (e.value) == TARGET_EXPR\n+\t  && !TARGET_EXPR_ELIDING_P (e.value))\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n /* If we might need to clean up a partially constructed object, break down the\n    CONSTRUCTOR with split_nonconstant_init.  Also expand VEC_INIT_EXPR at this\n    point.  If initializing TO with FROM is non-trivial, overwrite *REPLACE with\n@@ -904,10 +919,11 @@ cp_genericize_init (tree *replace, tree from, tree to)\n   tree init = NULL_TREE;\n   if (TREE_CODE (from) == VEC_INIT_EXPR)\n     init = expand_vec_init_expr (to, from, tf_warning_or_error);\n-  else if (flag_exceptions\n-\t   && TREE_CODE (from) == CONSTRUCTOR\n+  else if (TREE_CODE (from) == CONSTRUCTOR\n \t   && TREE_SIDE_EFFECTS (from)\n-\t   && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (from)))\n+\t   && ((flag_exceptions\n+\t\t&& TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (from)))\n+\t       || any_non_eliding_target_exprs (from)))\n     {\n       to = cp_stabilize_reference (to);\n       replace_placeholders (from, to);"}, {"sha": "c4c7ee0e8f0cf0136f871c45afd8e76d9c1e2338", "filename": "gcc/testsuite/g++.dg/cpp1z/aggr-base13.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b533084d756a2696a3eb6521810e0a0b2182a8e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b533084d756a2696a3eb6521810e0a0b2182a8e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Faggr-base13.C?ref=b533084d756a2696a3eb6521810e0a0b2182a8e8", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/108559\n+// { dg-do compile { target c++17 } }\n+\n+struct A {\n+  int g = 0;\n+\n+  A() {}\n+  A(const A&) {}\n+};\n+\n+struct B : A {};\n+\n+A u() { return A{}; }\n+\n+int bug() { return B{u()}.g; }\n+\n+int main() {\n+  return 0;\n+}"}]}