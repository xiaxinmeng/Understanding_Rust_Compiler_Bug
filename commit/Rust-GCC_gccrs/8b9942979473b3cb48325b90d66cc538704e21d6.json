{"sha": "8b9942979473b3cb48325b90d66cc538704e21d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI5OTQyOTc5NDczYjNjYjQ4MzI1YjkwZDY2Y2M1Mzg3MDRlMjFkNg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-08-14T13:39:50Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-14T13:39:50Z"}, "message": "sse.md (define_mode_attr avx512): New.\n\ngcc/\n        * config/i386/sse.md (define_mode_attr avx512): New.\n\t(define_mode_attr sse2_avx_avx512f): Allow V8HI, V16HI, V32HI, V2DI,\n\tV4DI modes.\n\t(define_mode_attr sse2_avx2): Allow V64QI, V32HI, V4TI modes.\n\t(define_mode_attr ssse3_avx2): Ditto.\n\t(define_mode_attr sse4_1_avx2): Allow V64QI, V32HI, V8DI modes.\n\t(define_mode_attr avx2_avx512bw): New.\n\t(define_mode_attr ssedoublemodelower): New.\n\t(define_mode_attr ssedoublemode): Allow V8SF, V8SI, V4DI, V4DF, V4SI,\n\tV32HI, V64QI modes.\n\t(define_mode_attr ssebytemode): Allow V8DI modes.\n\t(define_mode_attr sseinsnmode): Allow V4TI, V32HI, V64QI modes.\n\t(define_mode_attr sseintvecmodelower): Allow V8DF, V4TI modes.\n\t(define_mode_attr ssePSmode2): New.\n\t(define_mode_attr ssescalarsize): Allow V64QI, V32QI, V16QI, V8HI,\n\tV16HI, V32HI modes.\n\t(define_mode_attr dbpsadbwmode): New.\n\t(define_mode_attr bcstscalarsuff): Allow V64QI, V32QI, V16QI, V32HI,\n\tV16HI, V8HI, V8SI, V4SI, V4DI, V2DI, V8SF, V4SF, V4DF, V2DF modes.\n\t(vi8_sse4_1_avx2_avx512): New.\n\t(define_insn <sse4_1_avx2>_movntdqa): Use <vi8_sse4_1_avx2_avx512>\n\tmode attribute.\n\t(define_mode_attr blendbits): Move before its immediate use.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r213966", "tree": {"sha": "0a823e458dd21a61a15669ed150f8d6ccd66109f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a823e458dd21a61a15669ed150f8d6ccd66109f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b9942979473b3cb48325b90d66cc538704e21d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9942979473b3cb48325b90d66cc538704e21d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9942979473b3cb48325b90d66cc538704e21d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9942979473b3cb48325b90d66cc538704e21d6/comments", "author": null, "committer": null, "parents": [{"sha": "2534573e53e3161c02ef229411270e49d6a20f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2534573e53e3161c02ef229411270e49d6a20f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2534573e53e3161c02ef229411270e49d6a20f20"}], "stats": {"total": 120, "additions": 98, "deletions": 22}, "files": [{"sha": "37525c6db983b60b33eaa4c6e1a4879ade35731c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9942979473b3cb48325b90d66cc538704e21d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9942979473b3cb48325b90d66cc538704e21d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b9942979473b3cb48325b90d66cc538704e21d6", "patch": "@@ -1,3 +1,36 @@\n+2014-08-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+        * config/i386/sse.md (define_mode_attr avx512): New.\n+\t(define_mode_attr sse2_avx_avx512f): Allow V8HI, V16HI, V32HI, V2DI,\n+\tV4DI modes.\n+\t(define_mode_attr sse2_avx2): Allow V64QI, V32HI, V4TI modes.\n+\t(define_mode_attr ssse3_avx2): Ditto.\n+\t(define_mode_attr sse4_1_avx2): Allow V64QI, V32HI, V8DI modes.\n+\t(define_mode_attr avx2_avx512bw): New.\n+\t(define_mode_attr ssedoublemodelower): New.\n+\t(define_mode_attr ssedoublemode): Allow V8SF, V8SI, V4DI, V4DF, V4SI,\n+\tV32HI, V64QI modes.\n+\t(define_mode_attr ssebytemode): Allow V8DI modes.\n+\t(define_mode_attr sseinsnmode): Allow V4TI, V32HI, V64QI modes.\n+\t(define_mode_attr sseintvecmodelower): Allow V8DF, V4TI modes.\n+\t(define_mode_attr ssePSmode2): New.\n+\t(define_mode_attr ssescalarsize): Allow V64QI, V32QI, V16QI, V8HI,\n+\tV16HI, V32HI modes.\n+\t(define_mode_attr dbpsadbwmode): New.\n+\t(define_mode_attr bcstscalarsuff): Allow V64QI, V32QI, V16QI, V32HI,\n+\tV16HI, V8HI, V8SI, V4SI, V4DI, V2DI, V8SF, V4SF, V4DF, V2DF modes.\n+\t(vi8_sse4_1_avx2_avx512): New.\n+\t(define_insn <sse4_1_avx2>_movntdqa): Use <vi8_sse4_1_avx2_avx512>\n+\tmode attribute.\n+\t(define_mode_attr blendbits): Move before its immediate use.\n+\n 2014-08-14  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "88fe605dee9bb81498edc50ffbbd7b3abcd4a3c5", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 65, "deletions": 22, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9942979473b3cb48325b90d66cc538704e21d6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9942979473b3cb48325b90d66cc538704e21d6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8b9942979473b3cb48325b90d66cc538704e21d6", "patch": "@@ -331,32 +331,41 @@\n    (V4SI \"TARGET_AVX2\") (V2DI \"TARGET_AVX2\")\n    (V8SI \"TARGET_AVX2\") (V4DI \"TARGET_AVX2\")])\n \n+(define_mode_attr avx512\n+  [(V16QI \"avx512vl\") (V32QI \"avx512vl\") (V64QI \"avx512bw\")\n+   (V8HI  \"avx512vl\") (V16HI  \"avx512vl\") (V32HI \"avx512bw\")\n+   (V4SI  \"avx512vl\") (V8SI  \"avx512vl\") (V16SI \"avx512f\")\n+   (V2DI  \"avx512vl\") (V4DI  \"avx512vl\") (V8DI \"avx512f\")\n+   (V4SF \"avx512vl\") (V8SF \"avx512vl\") (V16SF \"avx512f\")\n+   (V2DF \"avx512vl\") (V4DF \"avx512vl\") (V8DF \"avx512f\")])\n+\n (define_mode_attr sse2_avx_avx512f\n   [(V16QI \"sse2\") (V32QI \"avx\") (V64QI \"avx512f\")\n+   (V8HI  \"avx512vl\") (V16HI  \"avx512vl\") (V32HI \"avx512bw\")\n    (V4SI  \"sse2\") (V8SI  \"avx\") (V16SI \"avx512f\")\n-   (V8DI \"avx512f\")\n+   (V2DI  \"avx512vl\") (V4DI  \"avx512vl\") (V8DI \"avx512f\")\n    (V16SF \"avx512f\") (V8SF \"avx\") (V4SF \"avx\")\n    (V8DF \"avx512f\") (V4DF \"avx\") (V2DF \"avx\")])\n \n (define_mode_attr sse2_avx2\n-  [(V16QI \"sse2\") (V32QI \"avx2\")\n-   (V8HI \"sse2\") (V16HI \"avx2\")\n+  [(V16QI \"sse2\") (V32QI \"avx2\") (V64QI \"avx512bw\")\n+   (V8HI \"sse2\") (V16HI \"avx2\") (V32HI \"avx512bw\")\n    (V4SI \"sse2\") (V8SI \"avx2\") (V16SI \"avx512f\")\n    (V2DI \"sse2\") (V4DI \"avx2\") (V8DI \"avx512f\")\n-   (V1TI \"sse2\") (V2TI \"avx2\")])\n+   (V1TI \"sse2\") (V2TI \"avx2\") (V4TI \"avx512bw\")])\n \n (define_mode_attr ssse3_avx2\n-   [(V16QI \"ssse3\") (V32QI \"avx2\")\n-    (V4HI \"ssse3\") (V8HI \"ssse3\") (V16HI \"avx2\")\n+   [(V16QI \"ssse3\") (V32QI \"avx2\") (V64QI \"avx512bw\")\n+    (V4HI \"ssse3\") (V8HI \"ssse3\") (V16HI \"avx2\") (V32HI \"avx512bw\")\n     (V4SI \"ssse3\") (V8SI \"avx2\")\n     (V2DI \"ssse3\") (V4DI \"avx2\")\n-    (TI \"ssse3\") (V2TI \"avx2\")])\n+    (TI \"ssse3\") (V2TI \"avx2\") (V4TI \"avx512bw\")])\n \n (define_mode_attr sse4_1_avx2\n-   [(V16QI \"sse4_1\") (V32QI \"avx2\")\n-    (V8HI \"sse4_1\") (V16HI \"avx2\")\n+   [(V16QI \"sse4_1\") (V32QI \"avx2\") (V64QI \"avx512bw\")\n+    (V8HI \"sse4_1\") (V16HI \"avx2\") (V32HI \"avx512bw\")\n     (V4SI \"sse4_1\") (V8SI \"avx2\") (V16SI \"avx512f\")\n-    (V2DI \"sse4_1\") (V4DI \"avx2\") (V8DI \"avx512f\")])\n+    (V2DI \"sse4_1\") (V4DI \"avx2\") (V8DI \"avx512dq\")])\n \n (define_mode_attr avx_avx2\n   [(V4SF \"avx\") (V2DF \"avx\")\n@@ -376,6 +385,13 @@\n    (V8SF \"avx2\") (V16SF \"avx512f\")\n    (V4DF \"avx2\") (V8DF \"avx512f\")])\n \n+(define_mode_attr avx2_avx512bw\n+  [(V4SI \"avx2\") (V8SI \"avx2\") (V16SI \"avx512f\")\n+   (V2DI \"avx2\") (V4DI \"avx2\") (V8DI \"avx512f\")\n+   (V4SF \"avx2\") (V8SF \"avx2\") (V16SF \"avx512f\")\n+   (V2DF \"avx2\") (V4DF \"avx2\") (V8DF \"avx512f\")\n+   (V8HI \"avx512vl\") (V16HI \"avx512vl\") (V32HI \"avx512bw\")])\n+\n (define_mode_attr shuffletype\n   [(V16SF \"f\") (V16SI \"i\") (V8DF \"f\") (V8DI \"i\")\n   (V8SF \"f\") (V8SI \"i\") (V4DF \"f\") (V4DI \"i\")\n@@ -386,13 +402,19 @@\n (define_mode_attr ssequartermode\n   [(V16SF \"V4SF\") (V8DF \"V2DF\") (V16SI \"V4SI\") (V8DI \"V2DI\")])\n \n+(define_mode_attr ssedoublemodelower\n+  [(V16QI \"v16hi\") (V32QI \"v32hi\") (V64QI \"v64hi\")\n+   (V8HI \"v8si\")   (V16HI \"v16si\") (V32HI \"v32si\")\n+   (V4SI \"v4di\")   (V8SI \"v8di\")   (V16SI \"v16di\")])\n+\n (define_mode_attr ssedoublemode\n   [(V16SF \"V32SF\") (V16SI \"V32SI\") (V8DI \"V16DI\") (V8DF \"V16DF\")\n-   (V16HI \"V16SI\") (V8HI \"V8SI\") (V4HI \"V4SI\")\n-   (V32QI \"V32HI\") (V16QI \"V16HI\")])\n+   (V8SF \"V16SF\") (V8SI \"V16SI\") (V4DI \"V8DI\") (V4DF \"V8DF\")\n+   (V16HI \"V16SI\") (V8HI \"V8SI\") (V4HI \"V4SI\") (V4SI \"V4DI\")\n+   (V32HI \"V32SI\") (V32QI \"V32HI\") (V16QI \"V16HI\") (V64QI \"V64HI\")])\n \n (define_mode_attr ssebytemode\n-  [(V4DI \"V32QI\") (V2DI \"V16QI\")])\n+  [(V8DI \"V64QI\") (V4DI \"V32QI\") (V2DI \"V16QI\")])\n \n ;; All 128bit vector integer modes\n (define_mode_iterator VI_128 [V16QI V8HI V4SI V2DI])\n@@ -461,7 +483,7 @@\n \n ;; SSE instruction mode\n (define_mode_attr sseinsnmode\n-  [(V64QI \"XI\") (V32HI \"XI\") (V16SI \"XI\") (V8DI \"XI\")\n+  [(V64QI \"XI\") (V32HI \"XI\") (V16SI \"XI\") (V8DI \"XI\") (V4TI \"XI\")\n    (V32QI \"OI\") (V16HI \"OI\") (V8SI \"OI\") (V4DI \"OI\") (V2TI \"OI\")\n    (V16QI \"TI\") (V8HI \"TI\") (V4SI \"TI\") (V2DI \"TI\") (V1TI \"TI\")\n    (V16SF \"V16SF\") (V8DF \"V8DF\")\n@@ -487,10 +509,11 @@\n    (V8SI  \"V8SI\")  (V4DI  \"V4DI\")\n    (V4SI  \"V4SI\")  (V2DI  \"V2DI\")\n    (V16HI \"V16HI\") (V8HI  \"V8HI\")\n+   (V32HI \"V32HI\") (V64QI \"V64QI\")\n    (V32QI \"V32QI\") (V16QI \"V16QI\")])\n \n (define_mode_attr sseintvecmodelower\n-  [(V16SF \"v16si\")\n+  [(V16SF \"v16si\") (V8DF \"v8di\")\n    (V8SF \"v8si\") (V4DF \"v4di\")\n    (V4SF \"v4si\") (V2DF \"v2di\")\n    (V8SI \"v8si\") (V4DI \"v4di\")\n@@ -522,10 +545,13 @@\n    (V32HI \"V16SF\") (V16HI \"V8SF\") (V8HI \"V4SF\")\n    (V8SI \"V8SF\") (V4SI \"V4SF\")\n    (V4DI \"V8SF\") (V2DI \"V4SF\")\n-   (V2TI \"V8SF\") (V1TI \"V4SF\")\n+   (V4TI \"V16SF\") (V2TI \"V8SF\") (V1TI \"V4SF\")\n    (V8SF \"V8SF\") (V4SF \"V4SF\")\n    (V4DF \"V8SF\") (V2DF \"V4SF\")])\n \n+(define_mode_attr ssePSmode2\n+  [(V8DI \"V8SF\") (V4DI \"V4SF\")])\n+\n ;; Mapping of vector modes back to the scalar modes\n (define_mode_attr ssescalarmode\n   [(V64QI \"QI\") (V32QI \"QI\") (V16QI \"QI\")\n@@ -570,6 +596,7 @@\n \n (define_mode_attr ssescalarsize\n   [(V8DI  \"64\") (V4DI  \"64\") (V2DI  \"64\")\n+   (V64QI \"8\") (V32QI \"8\") (V16QI \"8\")\n    (V32HI \"16\") (V16HI \"16\") (V8HI \"16\")\n    (V16SI \"32\") (V8SI \"32\") (V4SI \"32\")\n    (V16SF \"32\") (V8DF \"64\")])\n@@ -581,7 +608,10 @@\n    (V8DI  \"p\") (V8DF  \"\")\n    (V4SI  \"p\") (V4SF  \"\")\n    (V8SI  \"p\") (V8SF  \"\")\n-   (V16SI \"p\") (V16SF \"\")])\n+   (V16SI \"p\") (V16SF \"\")\n+   (V16QI \"p\") (V8HI \"p\")\n+   (V32QI \"p\") (V16HI \"p\")\n+   (V64QI \"p\") (V32HI \"p\")])\n \n ;; SSE scalar suffix for vector modes\n (define_mode_attr ssescalarmodesuffix\n@@ -622,13 +652,18 @@\n ;; Mix-n-match\n (define_mode_iterator AVX256MODE2P [V8SI V8SF V4DF])\n \n-;; Mapping of immediate bits for blend instructions\n-(define_mode_attr blendbits\n-  [(V8SF \"255\") (V4SF \"15\") (V4DF \"15\") (V2DF \"3\")])\n+;; Mapping for dbpsabbw modes\n+(define_mode_attr dbpsadbwmode\n+  [(V32HI \"V64QI\") (V16HI \"V32QI\") (V8HI \"V16QI\")])\n \n ;; Mapping suffixes for broadcast\n (define_mode_attr bcstscalarsuff\n-  [(V16SI \"d\") (V16SF \"ss\") (V8DI \"q\") (V8DF \"sd\")])\n+  [(V64QI \"b\")  (V32QI \"b\") (V16QI \"b\")\n+   (V32HI \"w\")  (V16HI \"w\") (V8HI \"w\")\n+   (V16SI \"d\")  (V8SI \"d\")  (V4SI \"d\")\n+   (V8DI \"q\")   (V4DI \"q\")  (V2DI \"q\")\n+   (V16SF \"ss\") (V8SF \"ss\") (V4SF \"ss\")\n+   (V8DF \"sd\")  (V4DF \"sd\") (V2DF \"sd\")])\n \n ;; Include define_subst patterns for instructions with mask\n (include \"subst.md\")\n@@ -11583,6 +11618,10 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n+;; Mapping of immediate bits for blend instructions\n+(define_mode_attr blendbits\n+  [(V8SF \"255\") (V4SF \"15\") (V4DF \"15\") (V2DF \"3\")])\n+\n (define_insn \"<sse4_1>_blend<ssemodesuffix><avxsizesuffix>\"\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:VF_128_256\n@@ -11641,7 +11680,11 @@\n    (set_attr \"btver2_decode\" \"vector,vector\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"<sse4_1_avx2>_movntdqa\"\n+;; Mode attribute used by `vmovntdqa' pattern\n+(define_mode_attr vi8_sse4_1_avx2_avx512\n+   [(V2DI \"sse4_1\") (V4DI \"avx2\") (V8DI \"avx512f\")])\n+\n+(define_insn \"<vi8_sse4_1_avx2_avx512>_movntdqa\"\n   [(set (match_operand:VI8_AVX2_AVX512F 0 \"register_operand\" \"=x, v\")\n \t(unspec:VI8_AVX2_AVX512F [(match_operand:VI8_AVX2_AVX512F 1 \"memory_operand\" \"m, m\")]\n \t\t     UNSPEC_MOVNTDQA))]"}]}