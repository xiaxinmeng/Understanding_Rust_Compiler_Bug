{"sha": "d9aa6e11227c6e21b9ef8e932ba734c73e29eaac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlhYTZlMTEyMjdjNmUyMWI5ZWY4ZTkzMmJhNzM0YzczZTI5ZWFhYw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-09-10T12:33:59Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-09-10T12:33:59Z"}, "message": "[AArch64 Testsuite] Add a test of the vldN_lane intrinsic\n\n        * gcc.target/aarch64/vldN_lane_1.c: New test.\n\nFrom-SVN: r215126", "tree": {"sha": "d5b5118a0ddbdc7db9ef09034b3c91a9e136f282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5b5118a0ddbdc7db9ef09034b3c91a9e136f282"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9aa6e11227c6e21b9ef8e932ba734c73e29eaac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9aa6e11227c6e21b9ef8e932ba734c73e29eaac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9aa6e11227c6e21b9ef8e932ba734c73e29eaac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9aa6e11227c6e21b9ef8e932ba734c73e29eaac/comments", "author": null, "committer": null, "parents": [{"sha": "77b7d74bf69cc11794079801e9c4b7bdaa7c4b16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b7d74bf69cc11794079801e9c4b7bdaa7c4b16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b7d74bf69cc11794079801e9c4b7bdaa7c4b16"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "288f3356de13982678276d2e5a6aa71960335652", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9aa6e11227c6e21b9ef8e932ba734c73e29eaac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9aa6e11227c6e21b9ef8e932ba734c73e29eaac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9aa6e11227c6e21b9ef8e932ba734c73e29eaac", "patch": "@@ -1,3 +1,7 @@\n+2014-09-10  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/vldN_lane_1.c: New test.\n+\n 2014-09-10  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61654"}, {"sha": "e450b7b2b961db56acf5ef5b88e0dc185e81e754", "filename": "gcc/testsuite/gcc.target/aarch64/vldN_lane_1.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9aa6e11227c6e21b9ef8e932ba734c73e29eaac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9aa6e11227c6e21b9ef8e932ba734c73e29eaac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvldN_lane_1.c?ref=d9aa6e11227c6e21b9ef8e932ba734c73e29eaac", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+#define VARIANTS(VARIANT, STRUCT)\t\\\n+VARIANT (uint8, , 8, _u8, 6, STRUCT)\t\\\n+VARIANT (uint16, , 4, _u16, 3, STRUCT)\t\\\n+VARIANT (uint32, , 2, _u32, 1, STRUCT)\t\\\n+VARIANT (uint64, , 1, _u64, 0, STRUCT)\t\\\n+VARIANT (int8, , 8, _s8, 5, STRUCT)\t\\\n+VARIANT (int16, , 4, _s16, 2, STRUCT)\t\\\n+VARIANT (int32, , 2, _s32, 0, STRUCT)\t\\\n+VARIANT (int64, , 1, _s64, 0, STRUCT)\t\\\n+VARIANT (poly8, , 8, _p8, 7, STRUCT)\t\\\n+VARIANT (poly16, , 4, _p16, 1, STRUCT)\t\\\n+VARIANT (float32, , 2, _f32, 1, STRUCT)\t\\\n+VARIANT (float64, , 1, _f64, 0, STRUCT)\t\\\n+VARIANT (uint8, q, 16, _u8, 14, STRUCT)\t\\\n+VARIANT (uint16, q, 8, _u16, 4, STRUCT)\t\\\n+VARIANT (uint32, q, 4, _u32, 3, STRUCT)\t\\\n+VARIANT (uint64, q, 2, _u64, 0, STRUCT)\t\\\n+VARIANT (int8, q, 16, _s8, 13, STRUCT)\t\\\n+VARIANT (int16, q, 8, _s16, 6, STRUCT)\t\\\n+VARIANT (int32, q, 4, _s32, 2, STRUCT)\t\\\n+VARIANT (int64, q, 2, _s64, 1, STRUCT)\t\\\n+VARIANT (poly8, q, 16, _p8, 12, STRUCT)\t\\\n+VARIANT (poly16, q, 8, _p16, 5, STRUCT)\t\\\n+VARIANT (float32, q, 4, _f32, 1, STRUCT)\\\n+VARIANT (float64, q, 2, _f64, 0, STRUCT)\n+\n+#define TESTMETH(BASE, Q, ELTS, SUFFIX, LANE, STRUCT)\t\t\t\\\n+int\t\t\t\t\t\t\t\t\t\\\n+test_vld##STRUCT##Q##_lane##SUFFIX (const BASE##_t *data,\t\t\\\n+\t\t\t\t     const BASE##_t *overwrite)\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  BASE##x##ELTS##x##STRUCT##_t vectors;\t\t\t\t\t\\\n+  BASE##_t temp[ELTS];\t\t\t\t\t\t\t\\\n+  int i,j;\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < STRUCT; i++, data += ELTS)\t\t\t\t\\\n+    vectors.val[i] = vld1##Q##SUFFIX (data);\t\t\t\t\\\n+  vectors = vld##STRUCT##Q##_lane##SUFFIX (overwrite, vectors, LANE);\t\\\n+  while (--i >= 0)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      vst1##Q##SUFFIX (temp, vectors.val[i]);\t\t\t\t\\\n+      data -= ELTS; /* Point at value loaded before vldN_lane.  */\t\\\n+      for (j = 0; j < ELTS; j++)\t\t\t\t\t\\\n+        if (temp[j] != (j == LANE ? overwrite[i] : data[j]))\t\t\\\n+          return 1;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  return 0;\t\t\t\t\t\t\t\t\\\n+}\n+\n+\n+/* Tests of vld2_dup and vld2q_dup.  */\n+VARIANTS (TESTMETH, 2)\n+/* Tests of vld3_dup and vld3q_dup.  */\n+VARIANTS (TESTMETH, 3)\n+/* Tests of vld4_dup and vld4q_dup.  */\n+VARIANTS (TESTMETH, 4)\n+\n+#define CHECK(BASE, Q, ELTS, SUFFIX, LANE, STRUCT)\t\t\t\\\n+  if (test_vld##STRUCT##Q##_lane##SUFFIX ((const BASE##_t *)orig_data,\t\\\n+\t\t\t\t\t\tBASE##_data) != 0)\t\\\n+    abort ();\n+\n+int\n+main (int argc, char **argv)\n+{\n+  /* Original data for all vector formats.  */\n+  uint64_t orig_data[8] = {0x1234567890abcdefULL, 0x13579bdf02468aceULL,\n+\t\t\t   0x012389ab4567cdefULL, 0xfeeddadacafe0431ULL,\n+\t\t\t   0x1032547698badcfeULL, 0xbadbadbadbad0badULL,\n+\t\t\t   0x0102030405060708ULL, 0x0f0e0d0c0b0a0908ULL};\n+\n+  /* Data with which vldN_lane will overwrite some of previous.  */\n+  uint8_t uint8_data[4] = { 7, 11, 13, 17 };\n+  uint16_t uint16_data[4] = { 257, 263, 269, 271 };\n+  uint32_t uint32_data[4] = { 65537, 65539, 65543, 65551 };\n+  uint64_t uint64_data[4] = { 0xdeadbeefcafebabeULL, 0x0123456789abcdefULL,\n+\t\t\t      0xfedcba9876543210LL, 0xdeadbabecafebeefLL };\n+  int8_t int8_data[4] = { -1, 3, -5, 7 };\n+  int16_t int16_data[4] = { 257, -259, 261, -263 };\n+  int32_t int32_data[4] = { 123456789, -987654321, -135792468, 975318642 };\n+  int64_t *int64_data = (int64_t *)uint64_data;\n+  poly8_t poly8_data[4] = { 0, 7, 13, 18, };\n+  poly16_t poly16_data[4] = { 11111, 2222, 333, 44 };\n+  float32_t float32_data[4] = { 3.14159, 2.718, 1.414, 100.0 };\n+  float64_t float64_data[4] = { 1.010010001, 12345.6789, -9876.54321, 1.618 };\n+\n+  VARIANTS (CHECK, 2);\n+  VARIANTS (CHECK, 3);\n+  VARIANTS (CHECK, 4);\n+  return 0;\n+}"}]}