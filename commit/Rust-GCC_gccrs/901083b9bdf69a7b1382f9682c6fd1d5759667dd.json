{"sha": "901083b9bdf69a7b1382f9682c6fd1d5759667dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAxMDgzYjliZGY2OWE3YjEzODJmOTY4MmM2ZmQxZDU3NTk2NjdkZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-09-18T18:12:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-09-18T18:12:38Z"}, "message": "tree-vect-loop.c (vect_is_simple_reduction): Remove operand swapping.\n\n2019-09-18  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (vect_is_simple_reduction): Remove operand\n\tswapping.\n\t(vectorize_fold_left_reduction): Remove assert.\n\t(vectorizable_reduction): Also expect COND_EXPR non-reduction\n\toperand in position 2.  Remove assert.\n\nFrom-SVN: r275898", "tree": {"sha": "9c77cde3f7751a290ea654e59247df13d68e5f01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c77cde3f7751a290ea654e59247df13d68e5f01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/901083b9bdf69a7b1382f9682c6fd1d5759667dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901083b9bdf69a7b1382f9682c6fd1d5759667dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901083b9bdf69a7b1382f9682c6fd1d5759667dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901083b9bdf69a7b1382f9682c6fd1d5759667dd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f1628c9df05591721192193f6364e316e45c6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1628c9df05591721192193f6364e316e45c6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1628c9df05591721192193f6364e316e45c6c1"}], "stats": {"total": 69, "additions": 12, "deletions": 57}, "files": [{"sha": "13d5cb95988511b6fce66928b2684de867613f3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901083b9bdf69a7b1382f9682c6fd1d5759667dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901083b9bdf69a7b1382f9682c6fd1d5759667dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=901083b9bdf69a7b1382f9682c6fd1d5759667dd", "patch": "@@ -1,3 +1,11 @@\n+2019-09-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vect_is_simple_reduction): Remove operand\n+\tswapping.\n+\t(vectorize_fold_left_reduction): Remove assert.\n+\t(vectorizable_reduction): Also expect COND_EXPR non-reduction\n+\toperand in position 2.  Remove assert.\n+\n 2019-09-18  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/arm/arm.md (arm_mulsi3): Remove pattern."}, {"sha": "bcd96394841cb07c4c41ef177f6ca53404536105", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 57, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901083b9bdf69a7b1382f9682c6fd1d5759667dd/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901083b9bdf69a7b1382f9682c6fd1d5759667dd/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=901083b9bdf69a7b1382f9682c6fd1d5759667dd", "patch": "@@ -3280,56 +3280,8 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \t  || !flow_bb_inside_loop_p (loop, gimple_bb (def2_info->stmt))\n \t  || vect_valid_reduction_input_p (def2_info)))\n     {\n-      if (! nested_in_vect_loop && orig_code != MINUS_EXPR)\n-\t{\n-\t  /* Check if we can swap operands (just for simplicity - so that\n-\t     the rest of the code can assume that the reduction variable\n-\t     is always the last (second) argument).  */\n-\t  if (code == COND_EXPR)\n-\t    {\n-\t      /* Swap cond_expr by inverting the condition.  */\n-\t      tree cond_expr = gimple_assign_rhs1 (def_stmt);\n-\t      enum tree_code invert_code = ERROR_MARK;\n-\t      enum tree_code cond_code = TREE_CODE (cond_expr);\n-\n-\t      if (TREE_CODE_CLASS (cond_code) == tcc_comparison)\n-\t\t{\n-\t\t  bool honor_nans = HONOR_NANS (TREE_OPERAND (cond_expr, 0));\n-\t\t  invert_code = invert_tree_comparison (cond_code, honor_nans);\n-\t\t}\n-\t      if (invert_code != ERROR_MARK)\n-\t\t{\n-\t\t  TREE_SET_CODE (cond_expr, invert_code);\n-\t\t  swap_ssa_operands (def_stmt,\n-\t\t\t\t     gimple_assign_rhs2_ptr (def_stmt),\n-\t\t\t\t     gimple_assign_rhs3_ptr (def_stmt));\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  if (dump_enabled_p ())\n-\t\t    report_vect_op (MSG_NOTE, def_stmt,\n-\t\t\t\t    \"detected reduction: cannot swap operands \"\n-\t\t\t\t    \"for cond_expr\");\n-\t\t  return NULL;\n-\t\t}\n-\t    }\n-\t  else\n-\t    swap_ssa_operands (def_stmt, gimple_assign_rhs1_ptr (def_stmt),\n-\t\t\t       gimple_assign_rhs2_ptr (def_stmt));\n-\n-\t  if (dump_enabled_p ())\n-\t    report_vect_op (MSG_NOTE, def_stmt,\n-\t\t\t    \"detected reduction: need to swap operands: \");\n-\n-\t  if (CONSTANT_CLASS_P (gimple_assign_rhs1 (def_stmt)))\n-\t    LOOP_VINFO_OPERANDS_SWAPPED (loop_info) = true;\n-        }\n-      else\n-        {\n-          if (dump_enabled_p ())\n-            report_vect_op (MSG_NOTE, def_stmt, \"detected reduction: \");\n-        }\n-\n+      if (dump_enabled_p ())\n+\treport_vect_op (MSG_NOTE, def_stmt, \"detected reduction: \");\n       return def_stmt_info;\n     }\n \n@@ -5969,7 +5921,6 @@ vectorize_fold_left_reduction (stmt_vec_info stmt_info,\n   gcc_assert (!nested_in_vect_loop_p (loop, stmt_info));\n   gcc_assert (ncopies == 1);\n   gcc_assert (TREE_CODE_LENGTH (code) == binary_op);\n-  gcc_assert (reduc_index == (code == MINUS_EXPR ? 0 : 1));\n   gcc_assert (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n \t      == FOLD_LEFT_REDUCTION);\n \n@@ -6542,9 +6493,9 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t  reduc_index = i;\n \t}\n \n-      if (i == 1 && code == COND_EXPR)\n+      if (code == COND_EXPR)\n \t{\n-\t  /* Record how value of COND_EXPR is defined.  */\n+\t  /* Record how the non-reduction-def value of COND_EXPR is defined.  */\n \t  if (dt == vect_constant_def)\n \t    {\n \t      cond_reduc_dt = dt;\n@@ -6622,10 +6573,6 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t  return false;\n \t}\n \n-      /* vect_is_simple_reduction ensured that operand 2 is the\n-\t loop-carried operand.  */\n-      gcc_assert (reduc_index == 2);\n-\n       /* Loop peeling modifies initial value of reduction PHI, which\n \t makes the reduction stmt to be transformed different to the\n \t original stmt analyzed.  We need to record reduction code for"}]}