{"sha": "f4a33d37279965f2ac958547862e9c46841bf223", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRhMzNkMzcyNzk5NjVmMmFjOTU4NTQ3ODYyZTljNDY4NDFiZjIyMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:13:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:13:11Z"}, "message": "iq2000.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n\n\t* config/iq2000/iq2000.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n\t(TARGET_TRAMPOLINE_INIT): New.\n\t(iq2000_asm_trampoline_template, iq2000_trampoline_init): New.\n\t* config/iq2000/iq2000.h (TRAMPOLINE_TEMPLATE): Move code to\n\tiq2000_asm_trampoline_template.\n\t(INITIALIZE_TRAMPOLINE): Move code to iq2000_trampoline_init.\n\t(TRAMPOLINE_CODE_SIZE): New.\n\t(TRAMPOLINE_SIZE): Use it.\n\t(TRAMPOLINE_ALIGNMENT): Follow Pmode.\n\nFrom-SVN: r151995", "tree": {"sha": "9c154cfdf4312c9e311f8012260feced42d742c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c154cfdf4312c9e311f8012260feced42d742c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4a33d37279965f2ac958547862e9c46841bf223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a33d37279965f2ac958547862e9c46841bf223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a33d37279965f2ac958547862e9c46841bf223", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a33d37279965f2ac958547862e9c46841bf223/comments", "author": null, "committer": null, "parents": [{"sha": "2a1211e51ba34fb4549c9f718c025474f0ff5ed6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1211e51ba34fb4549c9f718c025474f0ff5ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1211e51ba34fb4549c9f718c025474f0ff5ed6"}], "stats": {"total": 100, "additions": 63, "deletions": 37}, "files": [{"sha": "6add78398c19a4ae1c84836bc42dcbfe59ccda20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a33d37279965f2ac958547862e9c46841bf223/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a33d37279965f2ac958547862e9c46841bf223/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4a33d37279965f2ac958547862e9c46841bf223", "patch": "@@ -114,6 +114,16 @@\n \tmake static; adjust for hook parameters.\n \t* config/ia64/ia64.h (INITIALIZE_TRAMPOLINE): Remove.\n \n+\t* config/iq2000/iq2000.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n+\t(TARGET_TRAMPOLINE_INIT): New.\n+\t(iq2000_asm_trampoline_template, iq2000_trampoline_init): New.\n+\t* config/iq2000/iq2000.h (TRAMPOLINE_TEMPLATE): Move code to\n+\tiq2000_asm_trampoline_template.\n+\t(INITIALIZE_TRAMPOLINE): Move code to iq2000_trampoline_init.\n+\t(TRAMPOLINE_CODE_SIZE): New.\n+\t(TRAMPOLINE_SIZE): Use it.\n+\t(TRAMPOLINE_ALIGNMENT): Follow Pmode.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "2e2f29aaeb79cbd5478d773485fa395228d43396", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a33d37279965f2ac958547862e9c46841bf223/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a33d37279965f2ac958547862e9c46841bf223/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=f4a33d37279965f2ac958547862e9c46841bf223", "patch": "@@ -166,6 +166,8 @@ static int  iq2000_arg_partial_bytes  (CUMULATIVE_ARGS *, enum machine_mode,\n static void iq2000_va_start\t      (tree, rtx);\n static bool iq2000_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool iq2000_can_eliminate      (const int, const int);\n+static void iq2000_asm_trampoline_template (FILE *);\n+static void iq2000_trampoline_init    (rtx, tree, rtx);\n \n #undef  TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS \t\tiq2000_init_builtins\n@@ -218,6 +220,11 @@ static bool iq2000_can_eliminate      (const int, const int);\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE            iq2000_can_eliminate\n \n+#undef  TARGET_ASM_TRAMPOLINE_TEMPLATE\n+#define TARGET_ASM_TRAMPOLINE_TEMPLATE\tiq2000_asm_trampoline_template\n+#undef  TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT\t\tiq2000_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return nonzero if we split the address into high and low parts.  */\n@@ -3410,4 +3417,47 @@ iq2000_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int * total,\n   return true;\n }\n \n+/* Worker for TARGET_ASM_TRAMPOLINE_TEMPLATE.  */\n+\n+static void\n+iq2000_asm_trampoline_template (FILE *f)\n+{\n+  fprintf (f, \"\\t.word\\t0x03e00821\\t\\t# move   $1,$31\\n\");\n+  fprintf (f, \"\\t.word\\t0x04110001\\t\\t# bgezal $0,.+8\\n\");\n+  fprintf (f, \"\\t.word\\t0x00000000\\t\\t# nop\\n\");\n+  if (Pmode == DImode)\n+    {\n+      fprintf (f, \"\\t.word\\t0xdfe30014\\t\\t# ld     $3,20($31)\\n\");\n+      fprintf (f, \"\\t.word\\t0xdfe2001c\\t\\t# ld     $2,28($31)\\n\");\n+    }\n+  else\n+    {\n+      fprintf (f, \"\\t.word\\t0x8fe30014\\t\\t# lw     $3,20($31)\\n\");\n+      fprintf (f, \"\\t.word\\t0x8fe20018\\t\\t# lw     $2,24($31)\\n\");\n+    }\n+  fprintf (f, \"\\t.word\\t0x0060c821\\t\\t# move   $25,$3 (abicalls)\\n\");\n+  fprintf (f, \"\\t.word\\t0x00600008\\t\\t# jr     $3\\n\");\n+  fprintf (f, \"\\t.word\\t0x0020f821\\t\\t# move   $31,$1\\n\");\n+  fprintf (f, \"\\t.word\\t0x00000000\\t\\t# <function address>\\n\");\n+  fprintf (f, \"\\t.word\\t0x00000000\\t\\t# <static chain value>\\n\");\n+}\n+\n+/* Worker for TARGET_TRAMPOLINE_INIT.  */\n+\n+static void\n+iq2000_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n+{\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx mem;\n+\n+  emit_block_move (m_tramp, assemble_trampoline_template (),\n+\t\t   GEN_INT (TRAMPOLINE_CODE_SIZE), BLOCK_OP_NORMAL);\n+\n+  mem = adjust_address (m_tramp, Pmode, TRAMPOLINE_CODE_SIZE);\n+  emit_move_insn (mem, fnaddr);\n+  mem = adjust_address (m_tramp, Pmode,\n+\t\t\tTRAMPOLINE_CODE_SIZE + GET_MODE_SIZE (Pmode));\n+  emit_move_insn (mem, chain_value);\n+}\n+\n #include \"gt-iq2000.h\""}, {"sha": "4dadbdb547239018f693891c22a63fa6cb0c4a2b", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4a33d37279965f2ac958547862e9c46841bf223/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4a33d37279965f2ac958547862e9c46841bf223/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=f4a33d37279965f2ac958547862e9c46841bf223", "patch": "@@ -469,43 +469,9 @@ typedef struct iq2000_args\n \f\n /* Trampolines for Nested Functions.  */\n \n-/* A C statement to output, on the stream FILE, assembler code for a\n-   block of data that contains the constant parts of a trampoline.\n-   This code should not include a label--the label is taken care of\n-   automatically.  */\n-\n-#define TRAMPOLINE_TEMPLATE(STREAM)\t\t\t\t\t \\\n-{\t\t\t\t\t\t\t\t\t \\\n-  fprintf (STREAM, \"\\t.word\\t0x03e00821\\t\\t# move   $1,$31\\n\");\t\t\\\n-  fprintf (STREAM, \"\\t.word\\t0x04110001\\t\\t# bgezal $0,.+8\\n\");\t\t\\\n-  fprintf (STREAM, \"\\t.word\\t0x00000000\\t\\t# nop\\n\");\t\t\t\\\n-  if (Pmode == DImode)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.word\\t0xdfe30014\\t\\t# ld     $3,20($31)\\n\");\t\\\n-      fprintf (STREAM, \"\\t.word\\t0xdfe2001c\\t\\t# ld     $2,28($31)\\n\");\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.word\\t0x8fe30014\\t\\t# lw     $3,20($31)\\n\");\t\\\n-      fprintf (STREAM, \"\\t.word\\t0x8fe20018\\t\\t# lw     $2,24($31)\\n\");\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  fprintf (STREAM, \"\\t.word\\t0x0060c821\\t\\t# move   $25,$3 (abicalls)\\n\"); \\\n-  fprintf (STREAM, \"\\t.word\\t0x00600008\\t\\t# jr     $3\\n\");\t\t\\\n-  fprintf (STREAM, \"\\t.word\\t0x0020f821\\t\\t# move   $31,$1\\n\");\t\t\\\n-  fprintf (STREAM, \"\\t.word\\t0x00000000\\t\\t# <function address>\\n\"); \\\n-  fprintf (STREAM, \"\\t.word\\t0x00000000\\t\\t# <static chain value>\\n\"); \\\n-}\n-\n-#define TRAMPOLINE_SIZE (40)\n-\n-#define TRAMPOLINE_ALIGNMENT 32\n-\n-#define INITIALIZE_TRAMPOLINE(ADDR, FUNC, CHAIN)\t\t\t    \\\n-{\t\t\t\t\t\t\t\t\t    \\\n-  rtx addr = ADDR;\t\t\t\t\t\t\t    \\\n-    emit_move_insn (gen_rtx_MEM (SImode, plus_constant (addr, 32)), FUNC); \\\n-    emit_move_insn (gen_rtx_MEM (SImode, plus_constant (addr, 36)), CHAIN);\\\n-}\n+#define TRAMPOLINE_CODE_SIZE  (8*4)\n+#define TRAMPOLINE_SIZE       (TRAMPOLINE_CODE_SIZE + 2*GET_MODE_SIZE (Pmode))\n+#define TRAMPOLINE_ALIGNMENT  GET_MODE_ALIGNMENT (Pmode)\n \n \f\n /* Addressing Modes.  */"}]}