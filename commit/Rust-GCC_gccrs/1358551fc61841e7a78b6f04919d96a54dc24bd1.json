{"sha": "1358551fc61841e7a78b6f04919d96a54dc24bd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1ODU1MWZjNjE4NDFlN2E3OGI2ZjA0OTE5ZDk2YTU0ZGMyNGJkMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-28T03:46:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-12-28T03:46:20Z"}, "message": "compiler: Prohibit comparisons of funcs, maps, and slices to non-nil.\n\nFrom-SVN: r182703", "tree": {"sha": "0620cac8fee9b74e18be59d7bcc70a0982606b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0620cac8fee9b74e18be59d7bcc70a0982606b41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1358551fc61841e7a78b6f04919d96a54dc24bd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1358551fc61841e7a78b6f04919d96a54dc24bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1358551fc61841e7a78b6f04919d96a54dc24bd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1358551fc61841e7a78b6f04919d96a54dc24bd1/comments", "author": null, "committer": null, "parents": [{"sha": "9437ab32a5b5d62b625680eaca90b189f8728ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9437ab32a5b5d62b625680eaca90b189f8728ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9437ab32a5b5d62b625680eaca90b189f8728ec5"}], "stats": {"total": 185, "additions": 25, "deletions": 160}, "files": [{"sha": "dfe9b5167bb97d03ff7512a384948c8c7cc61cd1", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=1358551fc61841e7a78b6f04919d96a54dc24bd1", "patch": "@@ -6052,11 +6052,11 @@ Binary_expression::do_determine_type(const Type_context* context)\n }\n \n // Report an error if the binary operator OP does not support TYPE.\n-// Return whether the operation is OK.  This should not be used for\n-// shift.\n+// OTYPE is the type of the other operand.  Return whether the\n+// operation is OK.  This should not be used for shift.\n \n bool\n-Binary_expression::check_operator_type(Operator op, Type* type,\n+Binary_expression::check_operator_type(Operator op, Type* type, Type* otype,\n \t\t\t\t       Location location)\n {\n   switch (op)\n@@ -6092,6 +6092,16 @@ Binary_expression::check_operator_type(Operator op, Type* type,\n \t\t    \"or function type\"));\n \t  return false;\n \t}\n+      if ((type->is_slice_type()\n+\t   || type->map_type() != NULL\n+\t   || type->function_type() != NULL)\n+\t  && !otype->is_nil_type())\n+\t{\n+\t  error_at(location,\n+\t\t   (\"slice, map, and function types may only \"\n+\t\t    \"be compared to nil\"));\n+\t  return false;\n+\t}\n       break;\n \n     case OPERATOR_LT:\n@@ -6189,8 +6199,10 @@ Binary_expression::do_check_types(Gogo*)\n \t  return;\n \t}\n       if (!Binary_expression::check_operator_type(this->op_, left_type,\n+\t\t\t\t\t\t  right_type,\n \t\t\t\t\t\t  this->location())\n \t  || !Binary_expression::check_operator_type(this->op_, right_type,\n+\t\t\t\t\t\t     left_type,\n \t\t\t\t\t\t     this->location()))\n \t{\n \t  this->set_is_error();\n@@ -6205,6 +6217,7 @@ Binary_expression::do_check_types(Gogo*)\n \t  return;\n \t}\n       if (!Binary_expression::check_operator_type(this->op_, left_type,\n+\t\t\t\t\t\t  right_type,\n \t\t\t\t\t\t  this->location()))\n \t{\n \t  this->set_is_error();"}, {"sha": "4e06b246d18d46c724a75a5c25e7fe5393783c6d", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=1358551fc61841e7a78b6f04919d96a54dc24bd1", "patch": "@@ -1147,9 +1147,9 @@ class Binary_expression : public Expression\n   do_import(Import*);\n \n   // Report an error if OP can not be applied to TYPE.  Return whether\n-  // it can.\n+  // it can.  OTYPE is the type of the other operand.\n   static bool\n-  check_operator_type(Operator op, Type* type, Location);\n+  check_operator_type(Operator op, Type* type, Type* otype, Location);\n \n  protected:\n   int"}, {"sha": "d1901e17e714651002c9741f848d6a8e1ddb31ad", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=1358551fc61841e7a78b6f04919d96a54dc24bd1", "patch": "@@ -1235,8 +1235,6 @@ Type::type_functions(const char** hash_fn, const char** equal_fn) const\n     case Type::TYPE_FLOAT:\n     case Type::TYPE_COMPLEX:\n     case Type::TYPE_POINTER:\n-    case Type::TYPE_FUNCTION:\n-    case Type::TYPE_MAP:\n     case Type::TYPE_CHANNEL:\n       *hash_fn = \"__go_type_hash_identity\";\n       *equal_fn = \"__go_type_equal_identity\";\n@@ -1249,6 +1247,8 @@ Type::type_functions(const char** hash_fn, const char** equal_fn) const\n \n     case Type::TYPE_STRUCT:\n     case Type::TYPE_ARRAY:\n+    case Type::TYPE_FUNCTION:\n+    case Type::TYPE_MAP:\n       // These types can not be hashed or compared.\n       *hash_fn = \"__go_type_hash_error\";\n       *equal_fn = \"__go_type_equal_error\";\n@@ -4731,7 +4731,9 @@ bool\n Map_type::do_verify()\n {\n   if (this->key_type_->struct_type() != NULL\n-      || this->key_type_->array_type() != NULL)\n+      || this->key_type_->array_type() != NULL\n+      || this->key_type_->function_type() != NULL\n+      || this->key_type_->map_type() != NULL)\n     {\n       error_at(this->location_, \"invalid map key type\");\n       return false;"}, {"sha": "191514def49e2b862633fad07f68bb30aa247234", "filename": "gcc/testsuite/go.test/test/closure.go", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosure.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosure.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosure.go?ref=1358551fc61841e7a78b6f04919d96a54dc24bd1", "patch": "@@ -76,7 +76,6 @@ func h() {\n \n func newfunc() func(int) int { return func(x int) int { return x } }\n \n-\n func main() {\n \tgo f()\n \tcheck([]int{1, 4, 5, 4})\n@@ -90,10 +89,6 @@ func main() {\n \tcheck([]int{100, 200, 101, 201, 500, 101, 201, 500})\n \n \tx, y := newfunc(), newfunc()\n-\tif x == y {\n-\t\tprintln(\"newfunc returned same func\")\n-\t\tpanic(\"fail\")\n-\t}\n \tif x(1) != 1 || y(2) != 2 {\n \t\tprintln(\"newfunc returned broken funcs\")\n \t\tpanic(\"fail\")"}, {"sha": "698544c58219413651c0533fc7a36e457b45c1a3", "filename": "gcc/testsuite/go.test/test/cmp1.go", "status": "removed", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9437ab32a5b5d62b625680eaca90b189f8728ec5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9437ab32a5b5d62b625680eaca90b189f8728ec5/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp1.go?ref=9437ab32a5b5d62b625680eaca90b189f8728ec5", "patch": "@@ -1,130 +0,0 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-func use(bool) {}\n-\n-func stringptr(s string) uintptr { return *(*uintptr)(unsafe.Pointer(&s)) }\n-\n-func isfalse(b bool) {\n-\tif b {\n-\t\t// stack will explain where\n-\t\tpanic(\"wanted false, got true\")\n-\t}\n-}\n-\n-func istrue(b bool) {\n-\tif !b {\n-\t\t// stack will explain where\n-\t\tpanic(\"wanted true, got false\")\n-\t}\n-}\n-\n-type T *int\n-\n-func main() {\n-\tvar a []int\n-\tvar b map[string]int\n-\n-\tvar c string = \"hello\"\n-\tvar d string = \"hel\" // try to get different pointer\n-\td = d + \"lo\"\n-\tif stringptr(c) == stringptr(d) {\n-\t\tpanic(\"compiler too smart -- got same string\")\n-\t}\n-\n-\tvar e = make(chan int)\n-\n-\tvar ia interface{} = a\n-\tvar ib interface{} = b\n-\tvar ic interface{} = c\n-\tvar id interface{} = d\n-\tvar ie interface{} = e\n-\n-\t// these comparisons are okay because\n-\t// string compare is okay and the others\n-\t// are comparisons where the types differ.\n-\tisfalse(ia == ib)\n-\tisfalse(ia == ic)\n-\tisfalse(ia == id)\n-\tisfalse(ib == ic)\n-\tisfalse(ib == id)\n-\tistrue(ic == id)\n-\tistrue(ie == ie)\n-\t\n-\t// these are okay because one side of the\n-\t// comparison need only be assignable to the other.\n-\tisfalse(a == ib)\n-\tisfalse(a == ic)\n-\tisfalse(a == id)\n-\tisfalse(b == ic)\n-\tisfalse(b == id)\n-\tistrue(c == id)\n-\tistrue(e == ie)\n-\n-\tisfalse(ia == b)\n-\tisfalse(ia == c)\n-\tisfalse(ia == d)\n-\tisfalse(ib == c)\n-\tisfalse(ib == d)\n-\tistrue(ic == d)\n-\tistrue(ie == e)\n-\n-\t// 6g used to let this go through as true.\n-\tvar g uint64 = 123\n-\tvar h int64 = 123\n-\tvar ig interface{} = g\n-\tvar ih interface{} = h\n-\tisfalse(ig == ih)\n-\n-\t// map of interface should use == on interface values,\n-\t// not memory.\n-\t// TODO: should m[c], m[d] be valid here?\n-\tvar m = make(map[interface{}]int)\n-\tm[ic] = 1\n-\tm[id] = 2\n-\tif m[ic] != 2 {\n-\t\tprintln(\"m[ic] = \", m[ic])\n-\t\tpanic(\"bad m[ic]\")\n-\t}\n-\t\n-\t// non-interface comparisons\n-\t{\n-\t\tc := make(chan int)\n-\t\tc1 := (<-chan int)(c)\n-\t\tc2 := (chan<- int)(c)\n-\t\tistrue(c == c1)\n-\t\tistrue(c == c2)\n-\t\tistrue(c1 == c)\n-\t\tistrue(c2 == c)\n-\t\t\n-\t\td := make(chan int)\n-\t\tisfalse(c == d)\n-\t\tisfalse(d == c)\n-\t\tisfalse(d == c1)\n-\t\tisfalse(d == c2)\n-\t\tisfalse(c1 == d)\n-\t\tisfalse(c2 == d)\n-\t}\n-\n-\t// named types vs not\n-\t{\n-\t\tvar x = new(int)\n-\t\tvar y T\n-\t\tvar z T = x\n-\t\t\n-\t\tisfalse(x == y)\n-\t\tistrue(x == z)\n-\t\tisfalse(y == z)\n-\n-\t\tisfalse(y == x)\n-\t\tistrue(z == x)\n-\t\tisfalse(z == y)\n-\t}\n-}"}, {"sha": "7eed8fb7abc2c0824b8ffdb57c33a17a5442afc9", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug285.go", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug285.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug285.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug285.go?ref=1358551fc61841e7a78b6f04919d96a54dc24bd1", "patch": "@@ -45,20 +45,6 @@ func main() {\n \tmp[p] = 42\n \tmp[&T{7}] = 42\n \n-\ttype F func(x int)\n-\tf := func(x int) {}\n-\tmf := make(map[F]int)\n-\tmf[nil] = 42\n-\tmf[f] = 42\n-\tmf[func(x int) {}] = 42\n-\n-\ttype M map[int]int\n-\tm := make(M)\n-\tmm := make(map[M]int)\n-\tmm[nil] = 42\n-\tmm[m] = 42\n-\tmm[make(M)] = 42\n-\n \ttype C chan int\n \tc := make(C)\n \tmc := make(map[C]int)"}, {"sha": "aa911f9b621807dbf12f0f31f1814203a6d8db8e", "filename": "gcc/testsuite/go.test/test/typeswitch.go", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftypeswitch.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1358551fc61841e7a78b6f04919d96a54dc24bd1/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftypeswitch.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftypeswitch.go?ref=1358551fc61841e7a78b6f04919d96a54dc24bd1", "patch": "@@ -82,9 +82,9 @@ func main() {\n \t\tcase []int:\n \t\t\tassert(x[3] == 3 && i == Array, \"array\")\n \t\tcase map[string]int:\n-\t\t\tassert(x == m && i == Map, \"map\")\n+\t\t\tassert(x != nil && i == Map, \"map\")\n \t\tcase func(i int) interface{}:\n-\t\t\tassert(x == f && i == Func, \"fun\")\n+\t\t\tassert(x != nil && i == Func, \"fun\")\n \t\tdefault:\n \t\t\tassert(false, \"unknown\")\n \t\t}\n@@ -111,5 +111,4 @@ func main() {\n \tdefault:\n \t\tassert(false, \"switch 4 unknown\")\n \t}\n-\n }"}]}