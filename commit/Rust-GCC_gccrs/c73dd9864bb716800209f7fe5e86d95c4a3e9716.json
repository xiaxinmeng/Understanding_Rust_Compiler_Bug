{"sha": "c73dd9864bb716800209f7fe5e86d95c4a3e9716", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczZGQ5ODY0YmI3MTY4MDAyMDlmN2ZlNWU4NmQ5NWM0YTNlOTcxNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2016-08-11T17:36:52Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-08-11T17:36:52Z"}, "message": "Support TImode CONST_WIDE_INT store in 64-bit STV\n\nSupport TImode CONST_WIDE_INT store generated from piecewise store.\nNeed to verify performance impact before enabling TImode CONST_INT\nstore for __int128.\n\ngcc/\n\n\t* config/i386/i386.c (timode_scalar_to_vector_candidate_p): Allow\n\tTImode CONST_WIDE_INT store.\n\t(timode_scalar_chain::convert_insn): Handle CONST_WIDE_INT store.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/pieces-strcpy-1.c: New test.\n\t* gcc.target/i386/pieces-strcpy-2.c: Likewise.\n\nFrom-SVN: r239383", "tree": {"sha": "7d56c0e50e0dd66c8dfb2d8b952c2b03f83dc0fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d56c0e50e0dd66c8dfb2d8b952c2b03f83dc0fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c73dd9864bb716800209f7fe5e86d95c4a3e9716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73dd9864bb716800209f7fe5e86d95c4a3e9716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73dd9864bb716800209f7fe5e86d95c4a3e9716", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73dd9864bb716800209f7fe5e86d95c4a3e9716/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "385ed708b272bb4b53aeda3081960f63ac56d7b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385ed708b272bb4b53aeda3081960f63ac56d7b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385ed708b272bb4b53aeda3081960f63ac56d7b0"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "97c99c77d12349b022d59538addd63de85badbdc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73dd9864bb716800209f7fe5e86d95c4a3e9716/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73dd9864bb716800209f7fe5e86d95c4a3e9716/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c73dd9864bb716800209f7fe5e86d95c4a3e9716", "patch": "@@ -1,3 +1,9 @@\n+2015-08-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (timode_scalar_to_vector_candidate_p): Allow\n+\tTImode CONST_WIDE_INT store.\n+\t(timode_scalar_chain::convert_insn): Handle CONST_WIDE_INT store.\n+\n 2015-08-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.h (MOVE_MAX_PIECES): Use TImode in 64-bit"}, {"sha": "d086edea8142d3953ad0b11f73861943b38e690a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73dd9864bb716800209f7fe5e86d95c4a3e9716/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73dd9864bb716800209f7fe5e86d95c4a3e9716/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c73dd9864bb716800209f7fe5e86d95c4a3e9716", "patch": "@@ -2862,9 +2862,12 @@ timode_scalar_to_vector_candidate_p (rtx_insn *insn)\n \n   if (MEM_P (dst))\n     {\n-      /* Check for store.  Only support store from register or standard\n-\t SSE constants.  Memory must be aligned or unaligned store is\n-\t optimal.  */\n+      /* Check for store.  Memory must be aligned or unaligned store\n+\t is optimal.  Only support store from register, standard SSE\n+\t constant or CONST_WIDE_INT generated from piecewise store.\n+\n+\t ??? Verify performance impact before enabling CONST_INT for\n+\t __int128 store.  */\n       if (misaligned_operand (dst, TImode)\n \t  && !TARGET_SSE_UNALIGNED_STORE_OPTIMAL)\n \treturn false;\n@@ -2875,6 +2878,7 @@ timode_scalar_to_vector_candidate_p (rtx_insn *insn)\n \t  return false;\n \n \tcase REG:\n+\tcase CONST_WIDE_INT:\n \t  return true;\n \n \tcase CONST_INT:\n@@ -3868,6 +3872,19 @@ timode_scalar_chain::convert_insn (rtx_insn *insn)\n       PUT_MODE (src, V1TImode);\n       break;\n \n+    case CONST_WIDE_INT:\n+      if (NONDEBUG_INSN_P (insn))\n+\t{\n+\t  /* Since there are no instructions to store 128-bit constant,\n+\t     temporary register usage is required.  */\n+\t  rtx tmp = gen_reg_rtx (V1TImode);\n+\t  src = gen_rtx_CONST_VECTOR (V1TImode, gen_rtvec (1, src));\n+\t  src = validize_mem (force_const_mem (V1TImode, src));\n+\t  emit_conversion_insns (gen_rtx_SET (dst, tmp), insn);\n+\t  dst = tmp;\n+\t}\n+      break;\n+\n     case CONST_INT:\n       switch (standard_sse_constant_p (src, TImode))\n \t{"}, {"sha": "f33636aadd11aa6bee725e1416a6b64edabb827e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73dd9864bb716800209f7fe5e86d95c4a3e9716/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73dd9864bb716800209f7fe5e86d95c4a3e9716/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c73dd9864bb716800209f7fe5e86d95c4a3e9716", "patch": "@@ -1,3 +1,8 @@\n+2015-08-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/pieces-strcpy-1.c: New test.\n+\t* gcc.target/i386/pieces-strcpy-2.c: Likewise.\n+\n 2016-08-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/72868"}, {"sha": "64b732930400d8bc104614f17b11b94165613fc6", "filename": "gcc/testsuite/gcc.target/i386/pieces-strcpy-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73dd9864bb716800209f7fe5e86d95c4a3e9716/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-strcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73dd9864bb716800209f7fe5e86d95c4a3e9716/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-strcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-strcpy-1.c?ref=c73dd9864bb716800209f7fe5e86d95c4a3e9716", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=generic\" } */\n+\n+extern char *strcpy (char *, const char *);\n+\n+void\n+foo (char *s)\n+{\n+  strcpy (s,\n+\t  \"1234567890abcdef123456abcdef5678123456abcdef567abcdef678\"\n+\t  \"1234567\");\n+}\n+\n+/* { dg-final { scan-assembler-times \"movdqa\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */"}, {"sha": "742125595080bf8961ab6f02fb063634d95c2b69", "filename": "gcc/testsuite/gcc.target/i386/pieces-strcpy-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c73dd9864bb716800209f7fe5e86d95c4a3e9716/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-strcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c73dd9864bb716800209f7fe5e86d95c4a3e9716/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-strcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-strcpy-2.c?ref=c73dd9864bb716800209f7fe5e86d95c4a3e9716", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx2 -mavx -mtune=sandybridge\" } */\n+\n+extern char *strcpy (char *, const char *);\n+\n+void\n+foo (char *s)\n+{\n+  strcpy (s,\n+\t  \"1234567890abcdef123456abcdef5678123456abcdef567abcdef678\"\n+\t  \"1234567\");\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */"}]}