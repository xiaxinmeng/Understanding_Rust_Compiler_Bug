{"sha": "f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU1NmQ2YjVkMTkzZGMyM2QyZTY1YzVjMDZlZTYyYWQ1ZjI1ZTU5YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-10-04T19:52:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-10-04T19:52:44Z"}, "message": "i386.md (*fop_<X87MODEF:mode>_2_i387): Macroize insn from *fop_<MODEF:mode>_2_i387 and *fop_xf_2_i387 using X87MODEF...\n\n\t* config/i386/i386.md (*fop_<X87MODEF:mode>_2_i387): Macroize insn\n\tfrom *fop_<MODEF:mode>_2_i387 and *fop_xf_2_i387 using\n\tX87MODEF mode iterator.\n\t(*fop_<X87MODEF:mode>_3_i387): Macroize insn from\n\t*fop_<MODEF:mode>_3_i387 and *fop_xf_3_i387 using\n\tX87MODEF mode iterator.\n\nFrom-SVN: r264855", "tree": {"sha": "d85874bb51e51b86206d0e9ebfe4cbfa4b12975d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d85874bb51e51b86206d0e9ebfe4cbfa4b12975d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cff06522fce85a76296f6d891830a56f1feebc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cff06522fce85a76296f6d891830a56f1feebc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cff06522fce85a76296f6d891830a56f1feebc1"}], "stats": {"total": 296, "additions": 133, "deletions": 163}, "files": [{"sha": "9504cfe74e27bd521a69cda79abebc8e011f7896", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a", "patch": "@@ -1,3 +1,12 @@\n+2018-10-04  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*fop_<X87MODEF:mode>_2_i387): Macroize insn\n+\tfrom *fop_<MODEF:mode>_2_i387 and *fop_xf_2_i387 using\n+\tX87MODEF mode iterator.\n+\t(*fop_<X87MODEF:mode>_3_i387): Macroize insn from\n+\t*fop_<MODEF:mode>_3_i387 and *fop_xf_3_i387 using\n+\tX87MODEF mode iterator.\n+\n 2018-10-04  Vinay Kumar  <vinay.kumar@blackfigtech.com>\n \n \t* doc/invoke.texi (-Wno-prio-ctor-dtor): Document new warning"}, {"sha": "122e57f98cc4454566fc80140ef40988a4b8208b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 124, "deletions": 163, "changes": 287, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f556d6b5d193dc23d2e65c5c06ee62ad5f25e59a", "patch": "@@ -14732,6 +14732,20 @@\n ;; Gcc is slightly more smart about handling normal two address instructions\n ;; so use special patterns for add and mull.\n \n+(define_insn \"*fop_xf_comm_i387\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(match_operator:XF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:XF 1 \"register_operand\" \"%0\")\n+\t\t\t (match_operand:XF 2 \"register_operand\" \"f\")]))]\n+  \"TARGET_80387\n+   && COMMUTATIVE_ARITH_P (operands[3])\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\")\n+\t(if_then_else (match_operand:XF 3 \"mult_operator\")\n+\t   (const_string \"fmul\")\n+\t   (const_string \"fop\")))\n+   (set_attr \"mode\" \"XF\")])\n+\n (define_insn \"*fop_<mode>_comm\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x,v\")\n \t(match_operator:MODEF 3 \"binary_fp_operator\"\n@@ -14780,6 +14794,20 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"*fop_xf_1_i387\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n+\t(match_operator:XF 3 \"binary_fp_operator\"\n+\t\t\t[(match_operand:XF 1 \"register_operand\" \"0,f\")\n+\t\t\t (match_operand:XF 2 \"register_operand\" \"f,0\")]))]\n+  \"TARGET_80387\n+   && !COMMUTATIVE_ARITH_P (operands[3])\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\")\n+\t(if_then_else (match_operand:XF 3 \"div_operator\")\n+\t   (const_string \"fdiv\")\n+\t   (const_string \"fop\")))\n+   (set_attr \"mode\" \"XF\")])\n+\n (define_insn \"*fop_<mode>_1\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,f,x,v\")\n \t(match_operator:MODEF 3 \"binary_fp_operator\"\n@@ -14816,49 +14844,65 @@\n \t (symbol_ref \"true\")\n \t (symbol_ref \"false\"))))])\n \n-;; ??? Add SSE splitters for these!\n-(define_insn \"*fop_<MODEF:mode>_2_i387\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f\")\n-\t(match_operator:MODEF 3 \"binary_fp_operator\"\n-\t  [(float:MODEF\n+(define_insn \"*fop_<X87MODEF:mode>_2_i387\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n+\t(match_operator:X87MODEF 3 \"binary_fp_operator\"\n+\t  [(float:X87MODEF\n \t     (match_operand:SWI24 1 \"nonimmediate_operand\" \"m\"))\n-\t   (match_operand:MODEF 2 \"register_operand\" \"0\")]))]\n-  \"TARGET_80387 && X87_ENABLE_FLOAT (<MODEF:MODE>mode, <SWI24:MODE>mode)\n-   && !(SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH)\n+\t   (match_operand:X87MODEF 2 \"register_operand\" \"0\")]))]\n+  \"TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, <SWI24:MODE>mode)\n+   && !(SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH)\n    && (TARGET_USE_<SWI24:MODE>MODE_FIOP\n        || optimize_function_for_size_p (cfun))\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n-        (cond [(match_operand:MODEF 3 \"mult_operator\")\n-                 (const_string \"fmul\")\n-               (match_operand:MODEF 3 \"div_operator\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n+\t(cond [(match_operand:X87MODEF 3 \"mult_operator\")\n+\t\t (const_string \"fmul\")\n+\t       (match_operand:X87MODEF 3 \"div_operator\")\n+\t\t (const_string \"fdiv\")\n+\t      ]\n+\t      (const_string \"fop\")))\n    (set_attr \"fp_int_src\" \"true\")\n    (set_attr \"mode\" \"<SWI24:MODE>\")])\n \n-(define_insn \"*fop_<MODEF:mode>_3_i387\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=f\")\n-\t(match_operator:MODEF 3 \"binary_fp_operator\"\n-\t  [(match_operand:MODEF 1 \"register_operand\" \"0\")\n-\t   (float:MODEF\n+(define_insn \"*fop_<X87MODEF:mode>_3_i387\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f\")\n+\t(match_operator:X87MODEF 3 \"binary_fp_operator\"\n+\t  [(match_operand:X87MODEF 1 \"register_operand\" \"0\")\n+\t   (float:X87MODEF\n \t     (match_operand:SWI24 2 \"nonimmediate_operand\" \"m\"))]))]\n-  \"TARGET_80387 && X87_ENABLE_FLOAT (<MODEF:MODE>mode, <SWI24:MODE>mode)\n-   && !(SSE_FLOAT_MODE_P (<MODEF:MODE>mode) && TARGET_SSE_MATH)\n+  \"TARGET_80387 && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, <SWI24:MODE>mode)\n+   && !(SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH)\n    && (TARGET_USE_<SWI24:MODE>MODE_FIOP\n        || optimize_function_for_size_p (cfun))\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n-        (cond [(match_operand:MODEF 3 \"mult_operator\")\n-                 (const_string \"fmul\")\n-               (match_operand:MODEF 3 \"div_operator\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n+\t(cond [(match_operand:X87MODEF 3 \"mult_operator\")\n+\t\t (const_string \"fmul\")\n+\t       (match_operand:X87MODEF 3 \"div_operator\")\n+\t\t (const_string \"fdiv\")\n+\t      ]\n+\t      (const_string \"fop\")))\n    (set_attr \"fp_int_src\" \"true\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*fop_xf_4_i387\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n+\t(match_operator:XF 3 \"binary_fp_operator\"\n+\t   [(float_extend:XF\n+\t      (match_operand:MODEF 1 \"nonimmediate_operand\" \"fm,0\"))\n+\t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n+  \"TARGET_80387\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\")\n+\t(cond [(match_operand:XF 3 \"mult_operator\")\n+\t\t (const_string \"fmul\")\n+\t       (match_operand:XF 3 \"div_operator\")\n+\t\t (const_string \"fdiv\")\n+\t      ]\n+\t      (const_string \"fop\")))\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"*fop_df_4_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n@@ -14869,151 +14913,49 @@\n    && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n-        (cond [(match_operand:DF 3 \"mult_operator\")\n-                 (const_string \"fmul\")\n-               (match_operand:DF 3 \"div_operator\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n+\t(cond [(match_operand:DF 3 \"mult_operator\")\n+\t\t (const_string \"fmul\")\n+\t       (match_operand:DF 3 \"div_operator\")\n+\t\t (const_string \"fdiv\")\n+\t      ]\n+\t      (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_df_5_i387\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:DF 3 \"binary_fp_operator\"\n-\t  [(match_operand:DF 1 \"register_operand\" \"0,f\")\n-\t   (float_extend:DF\n-\t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"TARGET_80387 && X87_ENABLE_ARITH (DFmode)\n-   && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n+(define_insn \"*fop_xf_5_i387\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n+\t(match_operator:XF 3 \"binary_fp_operator\"\n+\t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n+\t   (float_extend:XF\n+\t     (match_operand:MODEF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n+  \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n-        (cond [(match_operand:DF 3 \"mult_operator\")\n-                 (const_string \"fmul\")\n-               (match_operand:DF 3 \"div_operator\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"mode\" \"SF\")])\n+\t(cond [(match_operand:XF 3 \"mult_operator\")\n+\t\t (const_string \"fmul\")\n+\t       (match_operand:XF 3 \"div_operator\")\n+\t\t (const_string \"fdiv\")\n+\t      ]\n+\t      (const_string \"fop\")))\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*fop_df_6_i387\"\n+(define_insn \"*fop_df_5_i387\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_fp_operator\"\n-\t  [(float_extend:DF\n-\t    (match_operand:SF 1 \"register_operand\" \"0,f\"))\n+\t  [(match_operand:DF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:DF\n \t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n   \"TARGET_80387 && X87_ENABLE_ARITH (DFmode)\n    && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n-        (cond [(match_operand:DF 3 \"mult_operator\")\n-                 (const_string \"fmul\")\n-               (match_operand:DF 3 \"div_operator\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n+\t(cond [(match_operand:DF 3 \"mult_operator\")\n+\t\t (const_string \"fmul\")\n+\t       (match_operand:DF 3 \"div_operator\")\n+\t\t (const_string \"fdiv\")\n+\t      ]\n+\t      (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_xf_comm_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(match_operator:XF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:XF 1 \"register_operand\" \"%0\")\n-\t\t\t (match_operand:XF 2 \"register_operand\" \"f\")]))]\n-  \"TARGET_80387\n-   && COMMUTATIVE_ARITH_P (operands[3])\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\")\n-        (if_then_else (match_operand:XF 3 \"mult_operator\")\n-           (const_string \"fmul\")\n-           (const_string \"fop\")))\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*fop_xf_1_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:XF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:XF 1 \"register_operand\" \"0,f\")\n-\t\t\t (match_operand:XF 2 \"register_operand\" \"f,0\")]))]\n-  \"TARGET_80387\n-   && !COMMUTATIVE_ARITH_P (operands[3])\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\")\n-        (if_then_else (match_operand:XF 3 \"div_operator\")\n-           (const_string \"fdiv\")\n-           (const_string \"fop\")))\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*fop_xf_2_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(match_operator:XF 3 \"binary_fp_operator\"\n-\t  [(float:XF\n-\t     (match_operand:SWI24 1 \"nonimmediate_operand\" \"m\"))\n-\t   (match_operand:XF 2 \"register_operand\" \"0\")]))]\n-  \"TARGET_80387\n-   && (TARGET_USE_<MODE>MODE_FIOP || optimize_function_for_size_p (cfun))\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\")\n-        (cond [(match_operand:XF 3 \"mult_operator\")\n-                 (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*fop_xf_3_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(match_operator:XF 3 \"binary_fp_operator\"\n-\t  [(match_operand:XF 1 \"register_operand\" \"0\")\n-\t   (float:XF\n-\t     (match_operand:SWI24 2 \"nonimmediate_operand\" \"m\"))]))]\n-  \"TARGET_80387\n-   && (TARGET_USE_<MODE>MODE_FIOP || optimize_function_for_size_p (cfun))\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\")\n-        (cond [(match_operand:XF 3 \"mult_operator\")\n-                 (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*fop_xf_4_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:XF 3 \"binary_fp_operator\"\n-\t   [(float_extend:XF\n-\t      (match_operand:MODEF 1 \"nonimmediate_operand\" \"fm,0\"))\n-\t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\")\n-        (cond [(match_operand:XF 3 \"mult_operator\")\n-                 (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*fop_xf_5_i387\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:XF 3 \"binary_fp_operator\"\n-\t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n-\t   (float_extend:XF\n-\t     (match_operand:MODEF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\")\n-        (cond [(match_operand:XF 3 \"mult_operator\")\n-                 (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*fop_xf_6_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n@@ -15024,13 +14966,32 @@\n   \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\")\n-        (cond [(match_operand:XF 3 \"mult_operator\")\n-                 (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\")\n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n+\t(cond [(match_operand:XF 3 \"mult_operator\")\n+\t\t (const_string \"fmul\")\n+\t       (match_operand:XF 3 \"div_operator\")\n+\t\t (const_string \"fdiv\")\n+\t      ]\n+\t      (const_string \"fop\")))\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*fop_df_6_i387\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n+\t(match_operator:DF 3 \"binary_fp_operator\"\n+\t  [(float_extend:DF\n+\t    (match_operand:SF 1 \"register_operand\" \"0,f\"))\n+\t   (float_extend:DF\n+\t    (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n+  \"TARGET_80387 && X87_ENABLE_ARITH (DFmode)\n+   && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\"\n+  \"* return output_387_binary_op (insn, operands);\"\n+  [(set (attr \"type\")\n+\t(cond [(match_operand:DF 3 \"mult_operator\")\n+\t\t (const_string \"fmul\")\n+\t       (match_operand:DF 3 \"div_operator\")\n+\t\t (const_string \"fdiv\")\n+\t      ]\n+\t      (const_string \"fop\")))\n+   (set_attr \"mode\" \"SF\")])\n \f\n ;; FPU special functions.\n "}]}