{"sha": "7cd7dbdadf181dd79a933fee387364b24558058e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NkN2RiZGFkZjE4MWRkNzlhOTMzZmVlMzg3MzY0YjI0NTU4MDU4ZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-09-21T15:52:31Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-09-21T15:52:31Z"}, "message": "[demangler PATCH]: Revert and update generic lambda demangling\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-09/msg01482.html\n\tPR demangler/82195\n\t* cp-demangle.c (d_name): Revert addition of 'toplevel' parm.\n\t(has_return_type): Recurse for DEMANGLE_COMPONENT_LOCAL_NAME.\n\t(d_encoding): Revert d_name change.  Use is_fnqual_component_type\n\tto strip modifiers that do not belong.\n\t(d_special_name, d_class_enum_type): Revert d_name call change.\n\t(d_expresion_1): Commonize DEMANGLE_COMPONENT_UNARY building.\n\t(d_local_name): Revert parsing of a function type.\n\t(d_print_comp_inner): An inner LOCAL_NAME might contain a\n\tTEMPLATE.\n\t* testsuite/demangle-expected: Add & adjust tests\n\nFrom-SVN: r253075", "tree": {"sha": "76815fdc44e1920f707fea268d10bbd21d9c55fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76815fdc44e1920f707fea268d10bbd21d9c55fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cd7dbdadf181dd79a933fee387364b24558058e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd7dbdadf181dd79a933fee387364b24558058e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cd7dbdadf181dd79a933fee387364b24558058e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd7dbdadf181dd79a933fee387364b24558058e/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f17aba3c82d9c316ab550b81cf9c7f141b31b999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f17aba3c82d9c316ab550b81cf9c7f141b31b999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f17aba3c82d9c316ab550b81cf9c7f141b31b999"}], "stats": {"total": 162, "additions": 85, "deletions": 77}, "files": [{"sha": "1c92338d33bed819562c6b20c01738e63dccc1db", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd7dbdadf181dd79a933fee387364b24558058e/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd7dbdadf181dd79a933fee387364b24558058e/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=7cd7dbdadf181dd79a933fee387364b24558058e", "patch": "@@ -1,3 +1,17 @@\n+2017-09-21  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR demangler/82195\n+\t* cp-demangle.c (d_name): Revert addition of 'toplevel' parm.\n+\t(has_return_type): Recurse for DEMANGLE_COMPONENT_LOCAL_NAME.\n+\t(d_encoding): Revert d_name change.  Use is_fnqual_component_type\n+\tto strip modifiers that do not belong.\n+\t(d_special_name, d_class_enum_type): Revert d_name call change.\n+\t(d_expresion_1): Commonize DEMANGLE_COMPONENT_UNARY building.\n+\t(d_local_name): Revert parsing of a function type.\n+\t(d_print_comp_inner): An inner LOCAL_NAME might contain a\n+\tTEMPLATE.\n+\t* testsuite/demangle-expected: Add & adjust tests\n+\n 2017-09-15  Nathan Sidwell  <nathan@acm.org>\n \n \tPR demangler/82195"}, {"sha": "ae3469d08b2d16bf49d555aec3438b34f69227e8", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 60, "deletions": 71, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd7dbdadf181dd79a933fee387364b24558058e/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd7dbdadf181dd79a933fee387364b24558058e/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=7cd7dbdadf181dd79a933fee387364b24558058e", "patch": "@@ -425,7 +425,7 @@ is_ctor_dtor_or_conversion (struct demangle_component *);\n \n static struct demangle_component *d_encoding (struct d_info *, int);\n \n-static struct demangle_component *d_name (struct d_info *, int);\n+static struct demangle_component *d_name (struct d_info *);\n \n static struct demangle_component *d_nested_name (struct d_info *);\n \n@@ -484,7 +484,7 @@ static struct demangle_component *d_expression (struct d_info *);\n \n static struct demangle_component *d_expr_primary (struct d_info *);\n \n-static struct demangle_component *d_local_name (struct d_info *, int);\n+static struct demangle_component *d_local_name (struct d_info *);\n \n static int d_discriminator (struct d_info *);\n \n@@ -1259,6 +1259,8 @@ has_return_type (struct demangle_component *dc)\n     {\n     default:\n       return 0;\n+    case DEMANGLE_COMPONENT_LOCAL_NAME:\n+      return has_return_type (d_right (dc));\n     case DEMANGLE_COMPONENT_TEMPLATE:\n       return ! is_ctor_dtor_or_conversion (d_left (dc));\n     FNQUAL_COMPONENT_CASE:\n@@ -1301,48 +1303,50 @@ static struct demangle_component *\n d_encoding (struct d_info *di, int top_level)\n {\n   char peek = d_peek_char (di);\n+  struct demangle_component *dc;\n \n   if (peek == 'G' || peek == 'T')\n-    return d_special_name (di);\n+    dc = d_special_name (di);\n   else\n     {\n-      struct demangle_component *dc, *dcr;\n-\n-      dc = d_name (di, top_level);\n+      dc = d_name (di);\n \n-      if (dc != NULL && top_level && (di->options & DMGL_PARAMS) == 0)\n+      if (!dc)\n+\t/* Failed already.  */;\n+      else if (top_level && (di->options & DMGL_PARAMS) == 0)\n \t{\n \t  /* Strip off any initial CV-qualifiers, as they really apply\n \t     to the `this' parameter, and they were not output by the\n \t     v2 demangler without DMGL_PARAMS.  */\n-\t  while (dc->type == DEMANGLE_COMPONENT_RESTRICT_THIS\n-\t\t || dc->type == DEMANGLE_COMPONENT_VOLATILE_THIS\n-\t\t || dc->type == DEMANGLE_COMPONENT_CONST_THIS\n-\t\t || dc->type == DEMANGLE_COMPONENT_REFERENCE_THIS\n-\t\t || dc->type == DEMANGLE_COMPONENT_RVALUE_REFERENCE_THIS)\n+\t  while (is_fnqual_component_type (dc->type))\n \t    dc = d_left (dc);\n \n \t  /* If the top level is a DEMANGLE_COMPONENT_LOCAL_NAME, then\n \t     there may be function-qualifiers on its right argument which\n \t     really apply here; this happens when parsing a class\n \t     which is local to a function.  */\n \t  if (dc->type == DEMANGLE_COMPONENT_LOCAL_NAME)\n+\t    while (is_fnqual_component_type (d_right (dc)->type))\n+\t      d_right (dc) = d_left (d_right (dc));\n+\t}\n+      else\n+\t{\n+\t  peek = d_peek_char (di);\n+\t  if (peek != '\\0' && peek != 'E')\n \t    {\n-\t      dcr = d_right (dc);\n-\t      while (is_fnqual_component_type (dcr->type))\n-\t\tdcr = d_left (dcr);\n-\t      dc->u.s_binary.right = dcr;\n-\t    }\n+\t      struct demangle_component *ftype;\n \n-\t  return dc;\n+\t      ftype = d_bare_function_type (di, has_return_type (dc));\n+\t      if (ftype)\n+\t\tdc = d_make_comp (di, DEMANGLE_COMPONENT_TYPED_NAME,\n+\t\t\t\t  dc, ftype);\n+\t      else\n+\t\tdc = NULL;\n+\t    }\n \t}\n-\n-      peek = d_peek_char (di);\n-      if (dc == NULL || peek == '\\0' || peek == 'E')\n-\treturn dc;\n-      dcr = d_bare_function_type (di, has_return_type (dc));\n-      return d_make_comp (di, DEMANGLE_COMPONENT_TYPED_NAME, dc, dcr);\n     }\n+\n+  return dc;\n }\n \n /* <tagged-name> ::= <name> B <source-name> */\n@@ -1383,7 +1387,7 @@ d_abi_tags (struct d_info *di, struct demangle_component *dc)\n */\n \n static struct demangle_component *\n-d_name (struct d_info *di, int top_level)\n+d_name (struct d_info *di)\n {\n   char peek = d_peek_char (di);\n   struct demangle_component *dc;\n@@ -1394,7 +1398,7 @@ d_name (struct d_info *di, int top_level)\n       return d_nested_name (di);\n \n     case 'Z':\n-      return d_local_name (di, top_level);\n+      return d_local_name (di);\n \n     case 'U':\n       return d_unqualified_name (di);\n@@ -2079,11 +2083,11 @@ d_special_name (struct d_info *di)\n \n \tcase 'H':\n \t  return d_make_comp (di, DEMANGLE_COMPONENT_TLS_INIT,\n-\t\t\t      d_name (di, 0), NULL);\n+\t\t\t      d_name (di), NULL);\n \n \tcase 'W':\n \t  return d_make_comp (di, DEMANGLE_COMPONENT_TLS_WRAPPER,\n-\t\t\t      d_name (di, 0), NULL);\n+\t\t\t      d_name (di), NULL);\n \n \tdefault:\n \t  return NULL;\n@@ -2095,11 +2099,11 @@ d_special_name (struct d_info *di)\n \t{\n \tcase 'V':\n \t  return d_make_comp (di, DEMANGLE_COMPONENT_GUARD,\n-\t\t\t      d_name (di, 0), NULL);\n+\t\t\t      d_name (di), NULL);\n \n \tcase 'R':\n \t  {\n-\t    struct demangle_component *name = d_name (di, 0);\n+\t    struct demangle_component *name = d_name (di);\n \t    return d_make_comp (di, DEMANGLE_COMPONENT_REFTEMP, name,\n \t\t\t\td_number_component (di));\n \t  }\n@@ -2935,7 +2939,7 @@ d_bare_function_type (struct d_info *di, int has_return_type)\n static struct demangle_component *\n d_class_enum_type (struct d_info *di)\n {\n-  return d_name (di, 0);\n+  return d_name (di);\n }\n \n /* <array-type> ::= A <(positive dimension) number> _ <(element) type>\n@@ -3380,13 +3384,10 @@ d_expression_1 (struct d_info *di)\n \n \t    if (suffix)\n \t      /* Indicate the suffix variant for d_print_comp.  */\n-\t      return d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op,\n-\t\t\t\t  d_make_comp (di,\n-\t\t\t\t\t       DEMANGLE_COMPONENT_BINARY_ARGS,\n-\t\t\t\t\t       operand, operand));\n-\t    else\n-\t      return d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op,\n-\t\t\t\t  operand);\n+\t      operand = d_make_comp (di, DEMANGLE_COMPONENT_BINARY_ARGS,\n+\t\t\t\t     operand, operand);\n+\n+\t    return d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op, operand);\n \t  }\n \tcase 2:\n \t  {\n@@ -3568,7 +3569,7 @@ d_expr_primary (struct d_info *di)\n */\n \n static struct demangle_component *\n-d_local_name (struct d_info *di, int top_level)\n+d_local_name (struct d_info *di)\n {\n   struct demangle_component *function;\n   struct demangle_component *name;\n@@ -3577,6 +3578,8 @@ d_local_name (struct d_info *di, int top_level)\n     return NULL;\n \n   function = d_encoding (di, 0);\n+  if (!function)\n+    return NULL;\n \n   if (! d_check_char (di, 'E'))\n     return NULL;\n@@ -3601,26 +3604,14 @@ d_local_name (struct d_info *di, int top_level)\n \t    return NULL;\n \t}\n \n-      name = d_name (di, 0);\n+      name = d_name (di);\n \n       if (name\n \t  /* Lambdas and unnamed types have internal discriminators\n \t     and are not functions.  */\n \t  && name->type != DEMANGLE_COMPONENT_LAMBDA\n \t  && name->type != DEMANGLE_COMPONENT_UNNAMED_TYPE)\n \t{\n-\t  if (!top_level\n-\t      && d_peek_char (di) != 0 /* Not end of string.  */\n-\t      && d_peek_char (di) != 'E' /* Not end of nested encoding.  */\n-\t      && d_peek_char (di) != '_') /* Not discriminator.  */\n-\t    {\n-\t      struct demangle_component *args;\n-\n-\t      args = d_bare_function_type (di, has_return_type (name));\n-\t      name = d_make_comp (di, DEMANGLE_COMPONENT_TYPED_NAME,\n-\t\t\t\t  name, args);\n-\t    }\n-\n \t  /* Read and ignore an optional discriminator.  */\n \t  if (! d_discriminator (di))\n \t    return NULL;\n@@ -4710,32 +4701,21 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \t    return;\n \t  }\n \n-\t/* If typed_name is a template, then it applies to the\n-\t   function type as well.  */\n-\tif (typed_name->type == DEMANGLE_COMPONENT_TEMPLATE)\n-\t  {\n-\t    dpt.next = dpi->templates;\n-\t    dpi->templates = &dpt;\n-\t    dpt.template_decl = typed_name;\n-\t  }\n-\n \t/* If typed_name is a DEMANGLE_COMPONENT_LOCAL_NAME, then\n \t   there may be CV-qualifiers on its right argument which\n-\t   really apply here; this happens when parsing a class which\n+\t   really apply here; this happens when parsing a class that\n \t   is local to a function.  */\n \tif (typed_name->type == DEMANGLE_COMPONENT_LOCAL_NAME)\n \t  {\n-\t    struct demangle_component *local_name;\n-\n-\t    local_name = d_right (typed_name);\n-\t    if (local_name->type == DEMANGLE_COMPONENT_DEFAULT_ARG)\n-\t      local_name = local_name->u.s_unary_num.sub;\n-\t    if (local_name == NULL)\n+\t    typed_name = d_right (typed_name);\n+\t    if (typed_name->type == DEMANGLE_COMPONENT_DEFAULT_ARG)\n+\t      typed_name = typed_name->u.s_unary_num.sub;\n+\t    if (typed_name == NULL)\n \t      {\n \t\td_print_error (dpi);\n \t\treturn;\n \t      }\n-\t    while (is_fnqual_component_type (local_name->type))\n+\t    while (is_fnqual_component_type (typed_name->type))\n \t      {\n \t\tif (i >= sizeof adpm / sizeof adpm[0])\n \t\t  {\n@@ -4747,15 +4727,24 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \t\tadpm[i].next = &adpm[i - 1];\n \t\tdpi->modifiers = &adpm[i];\n \n-\t\tadpm[i - 1].mod = local_name;\n+\t\tadpm[i - 1].mod = typed_name;\n \t\tadpm[i - 1].printed = 0;\n \t\tadpm[i - 1].templates = dpi->templates;\n \t\t++i;\n \n-\t\tlocal_name = d_left (local_name);\n+\t\ttyped_name = d_left (typed_name);\n \t      }\n \t  }\n \n+\t/* If typed_name is a template, then it applies to the\n+\t   function type as well.  */\n+\tif (typed_name->type == DEMANGLE_COMPONENT_TEMPLATE)\n+\t  {\n+\t    dpt.next = dpi->templates;\n+\t    dpi->templates = &dpt;\n+\t    dpt.template_decl = typed_name;\n+\t  }\n+\n \td_print_comp (dpi, options, d_right (dc));\n \n \tif (typed_name->type == DEMANGLE_COMPONENT_TEMPLATE)"}, {"sha": "993435fb0acfa0b3d12ee5dc8dc65216384fa198", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cd7dbdadf181dd79a933fee387364b24558058e/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cd7dbdadf181dd79a933fee387364b24558058e/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=7cd7dbdadf181dd79a933fee387364b24558058e", "patch": "@@ -4739,14 +4739,19 @@ __thunk_4294967297__$_1x\n # demangler/82195 members of lambdas\n --no-params\n _ZZZ3FoovENKUlT_E_clIiEEfS_EN5Local2fnEv\n-Foo()::float {lambda(auto:1)#1}::operator()<int>(int) const::Local::fn()\n-Foo()::float {lambda(auto:1)#1}::operator()<int>(int) const::Local::fn\n+float Foo()::{lambda(auto:1)#1}::operator()<int>(int) const::Local::fn()\n+float Foo()::{lambda(auto:1)#1}::operator()<int>(int) const::Local::fn\n --no-params\n _Z7CaptureIZZ3FoovENKUlT_E_clIiEEvS0_EUlvE_EvOS0_\n-void Capture<Foo()::void {lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>(Foo()::void {lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}&&)\n-Capture<Foo()::void {lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>\n+void Capture<void Foo()::{lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>(void Foo()::{lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}&&)\n+Capture<void Foo()::{lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>\n --no-params\n _Z4FrobIZZ3FoovENKUlT_E_clIiEEvS0_EUlvE_Evv\n-void Frob<Foo()::void {lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>()\n-Frob<Foo()::void {lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>\n+void Frob<void Foo()::{lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>()\n+Frob<void Foo()::{lambda(auto:1)#1}::operator()<int>(int) const::{lambda()#1}>\n #\n+# A lambda {local-class::member-fn}\n+--no-params\n+_ZZ3FoovENKUlT_E_clIiEEfS_\n+float Foo()::{lambda(auto:1)#1}::operator()<int>(int) const\n+Foo()::{lambda(auto:1)#1}::operator()<int>"}]}