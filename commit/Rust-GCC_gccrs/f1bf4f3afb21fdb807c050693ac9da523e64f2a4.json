{"sha": "f1bf4f3afb21fdb807c050693ac9da523e64f2a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFiZjRmM2FmYjIxZmRiODA3YzA1MDY5M2FjOWRhNTIzZTY0ZjJhNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-04T10:55:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-04T10:55:25Z"}, "message": "re PR tree-optimization/56837 (-ftree-loop-distribute-patterns generates incorrect code)\n\n2013-04-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56837\n\t* tree-loop-distribution.c (classify_partition): For non-zero\n\tvalues require that the value has the same precision as its\n\tmode to be useful as memset value.\n\n\t* g++.dg/torture/pr56837.C: New testcase.\n\nFrom-SVN: r197476", "tree": {"sha": "4de685c6f239c04550d50264c0cd2569faa2cb2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4de685c6f239c04550d50264c0cd2569faa2cb2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1bf4f3afb21fdb807c050693ac9da523e64f2a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1bf4f3afb21fdb807c050693ac9da523e64f2a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1bf4f3afb21fdb807c050693ac9da523e64f2a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1bf4f3afb21fdb807c050693ac9da523e64f2a4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2d50082803f9338b666998cf15f50d6f2d43284d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d50082803f9338b666998cf15f50d6f2d43284d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d50082803f9338b666998cf15f50d6f2d43284d"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "8c281007632695f40f404f8bee278c0f8cfcd11f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf4f3afb21fdb807c050693ac9da523e64f2a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf4f3afb21fdb807c050693ac9da523e64f2a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1bf4f3afb21fdb807c050693ac9da523e64f2a4", "patch": "@@ -1,3 +1,10 @@\n+2013-04-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56837\n+\t* tree-loop-distribution.c (classify_partition): For non-zero\n+\tvalues require that the value has the same precision as its\n+\tmode to be useful as memset value.\n+\n 2013-04-03  Nick Clifton  <nickc@redhat.com>\n \n \t* config/v850/v850e3v5.md (fmasf4): Use fmaf.s on E3V5"}, {"sha": "a8ecc418f4635d8d1b0a26d4ea0213960d964204", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf4f3afb21fdb807c050693ac9da523e64f2a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf4f3afb21fdb807c050693ac9da523e64f2a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1bf4f3afb21fdb807c050693ac9da523e64f2a4", "patch": "@@ -1,3 +1,8 @@\n+2013-04-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56837\n+\t* g++.dg/torture/pr56837.C: New testcase.\n+\n 2013-04-04  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/50269"}, {"sha": "d007122804716604b68b2cc64266baf4866d7919", "filename": "gcc/testsuite/g++.dg/torture/pr56837.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf4f3afb21fdb807c050693ac9da523e64f2a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr56837.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf4f3afb21fdb807c050693ac9da523e64f2a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr56837.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr56837.C?ref=f1bf4f3afb21fdb807c050693ac9da523e64f2a4", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do run }\n+// { dg-options \"-ftree-loop-distribute-patterns\" }\n+\n+extern \"C\" void abort (void);\n+extern \"C\" int memcmp (const void *, const void *, __SIZE_TYPE__);\n+\n+bool b1[8];\n+bool b2[8] = { true, true, true, true, true, true, true, true };\n+\n+int main()\n+{\n+  unsigned int i;\n+  for(i=0 ; i < 8; i++)\n+    b1[i] = true;\n+\n+  if (memcmp (b1, b2, 8) != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "101efbed0a5477962526b721260718137901cb7b", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bf4f3afb21fdb807c050693ac9da523e64f2a4/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bf4f3afb21fdb807c050693ac9da523e64f2a4/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=f1bf4f3afb21fdb807c050693ac9da523e64f2a4", "patch": "@@ -942,13 +942,17 @@ classify_partition (loop_p loop, struct graph *rdg, partition_t partition)\n       gimple stmt = DR_STMT (single_store);\n       tree rhs = gimple_assign_rhs1 (stmt);\n       if (!(integer_zerop (rhs)\n-\t    || integer_all_onesp (rhs)\n \t    || real_zerop (rhs)\n \t    || (TREE_CODE (rhs) == CONSTRUCTOR\n \t\t&& !TREE_CLOBBER_P (rhs))\n-\t    || (INTEGRAL_TYPE_P (TREE_TYPE (rhs))\n-\t\t&& (TYPE_MODE (TREE_TYPE (gimple_assign_lhs (stmt)))\n-\t\t    == TYPE_MODE (unsigned_char_type_node)))))\n+\t    || ((integer_all_onesp (rhs)\n+\t\t || (INTEGRAL_TYPE_P (TREE_TYPE (rhs))\n+\t\t     && (TYPE_MODE (TREE_TYPE (rhs))\n+\t\t\t == TYPE_MODE (unsigned_char_type_node))))\n+\t\t/* For stores of a non-zero value require that the precision\n+\t\t   of the value matches its actual size.  */\n+\t\t&& (TYPE_PRECISION (TREE_TYPE (rhs))\n+\t\t    == GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (rhs)))))))\n \treturn;\n       if (TREE_CODE (rhs) == SSA_NAME\n \t  && !SSA_NAME_IS_DEFAULT_DEF (rhs)"}]}