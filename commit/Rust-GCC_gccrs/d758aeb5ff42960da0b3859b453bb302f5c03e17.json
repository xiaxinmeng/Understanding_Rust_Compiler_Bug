{"sha": "d758aeb5ff42960da0b3859b453bb302f5c03e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc1OGFlYjVmZjQyOTYwZGEwYjM4NTliNDUzYmIzMDJmNWMwM2UxNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-09-07T23:02:56Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-09-07T23:02:56Z"}, "message": "Correct libgcc complex multiply excess precision handling (PR libgcc/77519).\n\nlibgcc complex multiply is meant to eliminate excess\nprecision from certain internal values by forcing them to memory in\nexactly those cases where the type has excess precision.  But in\nhttps://gcc.gnu.org/ml/gcc-patches/2014-09/msg01894.html I\naccidentally inverted the logic so that values get forced to memory in\nexactly the cases where it's not needed.  (This is a pessimization in\nthe no-excess-precision case, in principle could lead to bad results\ndepending on code generation in the excess-precision case.  Note: I do\nnot have a test demonstrating bad results.)\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.  Code size\nwent down on x86_64 as expected; old sizes:\n\n   text    data     bss     dec     hex filename\n    887       0       0     887     377 _muldc3.o\n    810       0       0     810     32a _mulsc3.o\n   2032       0       0    2032     7f0 _multc3.o\n    983       0       0     983     3d7 _mulxc3.o\n\nNew sizes:\n\n    847       0       0     847     34f _muldc3.o\n    770       0       0     770     302 _mulsc3.o\n   2032       0       0    2032     7f0 _multc3.o\n    951       0       0     951     3b7 _mulxc3.o\n\n\tPR libgcc/77519\n\t* libgcc2.c (NOTRUNC): Invert settings.\n\nFrom-SVN: r240033", "tree": {"sha": "b2d035589299cc6d5f834625b1830b4412fe7a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d035589299cc6d5f834625b1830b4412fe7a20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d758aeb5ff42960da0b3859b453bb302f5c03e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d758aeb5ff42960da0b3859b453bb302f5c03e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d758aeb5ff42960da0b3859b453bb302f5c03e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d758aeb5ff42960da0b3859b453bb302f5c03e17/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34718542cb800bc0d8f0189033912f2817198bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34718542cb800bc0d8f0189033912f2817198bdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34718542cb800bc0d8f0189033912f2817198bdc"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "acbe274200d8befd3009722425837f5212955955", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d758aeb5ff42960da0b3859b453bb302f5c03e17/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d758aeb5ff42960da0b3859b453bb302f5c03e17/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d758aeb5ff42960da0b3859b453bb302f5c03e17", "patch": "@@ -1,3 +1,8 @@\n+2016-09-07  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR libgcc/77519\n+\t* libgcc2.c (NOTRUNC): Invert settings.\n+\n 2016-09-06  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/77378"}, {"sha": "4f0e19901dc513f0f560b2129aa927809c5f28d0", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d758aeb5ff42960da0b3859b453bb302f5c03e17/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d758aeb5ff42960da0b3859b453bb302f5c03e17/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=d758aeb5ff42960da0b3859b453bb302f5c03e17", "patch": "@@ -1866,25 +1866,25 @@ NAME (TYPE x, int m)\n # define CTYPE\tSCtype\n # define MODE\tsc\n # define CEXT\t__LIBGCC_SF_FUNC_EXT__\n-# define NOTRUNC __LIBGCC_SF_EXCESS_PRECISION__\n+# define NOTRUNC (!__LIBGCC_SF_EXCESS_PRECISION__)\n #elif defined(L_muldc3) || defined(L_divdc3)\n # define MTYPE\tDFtype\n # define CTYPE\tDCtype\n # define MODE\tdc\n # define CEXT\t__LIBGCC_DF_FUNC_EXT__\n-# define NOTRUNC __LIBGCC_DF_EXCESS_PRECISION__\n+# define NOTRUNC (!__LIBGCC_DF_EXCESS_PRECISION__)\n #elif defined(L_mulxc3) || defined(L_divxc3)\n # define MTYPE\tXFtype\n # define CTYPE\tXCtype\n # define MODE\txc\n # define CEXT\t__LIBGCC_XF_FUNC_EXT__\n-# define NOTRUNC __LIBGCC_XF_EXCESS_PRECISION__\n+# define NOTRUNC (!__LIBGCC_XF_EXCESS_PRECISION__)\n #elif defined(L_multc3) || defined(L_divtc3)\n # define MTYPE\tTFtype\n # define CTYPE\tTCtype\n # define MODE\ttc\n # define CEXT\t__LIBGCC_TF_FUNC_EXT__\n-# define NOTRUNC __LIBGCC_TF_EXCESS_PRECISION__\n+# define NOTRUNC (!__LIBGCC_TF_EXCESS_PRECISION__)\n #else\n # error\n #endif"}]}