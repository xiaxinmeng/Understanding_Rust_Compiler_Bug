{"sha": "c6d27333f81c40ab898af772035f169815c8d3bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkMjczMzNmODFjNDBhYjg5OGFmNzcyMDM1ZjE2OTgxNWM4ZDNiZA==", "commit": {"author": {"name": "David Wohlferd", "email": "dw@LimeGreenSocks.com", "date": "2014-07-19T10:55:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-07-19T10:55:28Z"}, "message": "* gnat_rm.texi (Machine Code Insertions): Clean up.\n\nFrom-SVN: r212844", "tree": {"sha": "f14f9247389c93f048112429e7e5221cf3e7ab9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14f9247389c93f048112429e7e5221cf3e7ab9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d27333f81c40ab898af772035f169815c8d3bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d27333f81c40ab898af772035f169815c8d3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d27333f81c40ab898af772035f169815c8d3bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d27333f81c40ab898af772035f169815c8d3bd/comments", "author": null, "committer": null, "parents": [{"sha": "49cc765db35a5a21cab2aece27a44983fa70b94b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49cc765db35a5a21cab2aece27a44983fa70b94b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49cc765db35a5a21cab2aece27a44983fa70b94b"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "e9413d4097fa6ef3177f5eb7335ea85318acc886", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d27333f81c40ab898af772035f169815c8d3bd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d27333f81c40ab898af772035f169815c8d3bd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c6d27333f81c40ab898af772035f169815c8d3bd", "patch": "@@ -1,3 +1,7 @@\n+2014-07-19  David Wohlferd  <dw@LimeGreenSocks.com>\n+\n+\t* gnat_rm.texi (Machine Code Insertions): Clean up.\n+\n 2014-07-18  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch7.adb: Minor reformatting."}, {"sha": "00e6734ea365abc9a9e7927b46b55f55909dc48b", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d27333f81c40ab898af772035f169815c8d3bd/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d27333f81c40ab898af772035f169815c8d3bd/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c6d27333f81c40ab898af772035f169815c8d3bd", "patch": "@@ -20556,16 +20556,15 @@ including machine instructions in a subprogram.\n The two features are similar, and both are closely related to the mechanism\n provided by the asm instruction in the GNU C compiler.  Full understanding\n and use of the facilities in this package requires understanding the asm\n-instruction, see @ref{Extended Asm,, Assembler Instructions with C Expression\n-Operands, gcc, Using the GNU Compiler Collection (GCC)}.\n+instruction, see @ref{Extended Asm,,, gcc, Using the GNU Compiler \n+Collection (GCC)}.\n \n Calls to the function @code{Asm} and the procedure @code{Asm} have identical\n semantic restrictions and effects as described below.  Both are provided so\n that the procedure call can be used as a statement, and the function call\n can be used to form a code_statement.\n \n-The first example given in the GCC documentation is the C @code{asm}\n-instruction:\n+Consider this C @code{asm} instruction:\n @smallexample\n    asm (\"fsinx %1 %0\" : \"=f\" (result) : \"f\" (angle));\n @end smallexample\n@@ -20591,12 +20590,15 @@ The @code{Asm_Output} attribute denotes a function that takes two\n parameters.  The first is a string, the second is the name of a variable\n of the type designated by the attribute prefix.  The first (string)\n argument is required to be a static expression and designates the\n-constraint for the parameter (e.g.@: what kind of register is\n-required).  The second argument is the variable to be updated with the\n+constraint (@pxref{Constraints,,, gcc, Using the GNU Compiler \n+Collection (GCC)})\n+for the parameter (e.g.@: what kind of register is required).  The second\n+argument is the variable to be written or updated with the\n result.  The possible values for constraint are the same as those used in\n the RTL, and are dependent on the configuration file used to build the\n GCC back end.  If there are no output operands, then this argument may\n either be omitted, or explicitly given as @code{No_Output_Operands}.\n+No support is provided for GNU C's symbolic names for output parameters.\n \n The second argument of @code{@var{my_float}'Asm_Output} functions as\n though it were an @code{out} parameter, which is a little curious, but\n@@ -20613,8 +20615,9 @@ type designated by the prefix.  The first (string) argument is required\n to be a static expression, and is the constraint for the parameter,\n (e.g.@: what kind of register is required).  The second argument is the\n value to be used as the input argument.  The possible values for the\n-constant are the same as those used in the RTL, and are dependent on\n+constraint are the same as those used in the RTL, and are dependent on\n the configuration file used to built the GCC back end.\n+No support is provided for GNU C's symbolic names for input parameters.\n \n If there are no input operands, this argument may either be omitted, or\n explicitly given as @code{No_Input_Operands}.  The fourth argument, not\n@@ -20624,19 +20627,22 @@ expression, and is a space or comma separated list of names of registers\n that must be considered destroyed as a result of the @code{Asm} call.  If\n this argument is the null string (the default value), then the code\n generator assumes that no additional registers are destroyed.\n+In addition to registers, the special clobbers @code{memory} and \n+@code{cc} as described in the GNU C docs are both supported.\n \n The fifth argument, not present in the above example, called the\n @dfn{volatile} argument, is by default @code{False}.  It can be set to\n the literal value @code{True} to indicate to the code generator that all\n optimizations with respect to the instruction specified should be\n-suppressed, and that in particular, for an instruction that has outputs,\n-the instruction will still be generated, even if none of the outputs are\n-used.  @xref{Extended Asm,, Assembler Instructions with C Expression Operands,\n+suppressed, and in particular an instruction that has outputs\n+will still be generated, even if none of the outputs are\n+used.  @xref{Volatile,,,\n gcc, Using the GNU Compiler Collection (GCC)}, for the full description.\n Generally it is strongly advisable to use Volatile for any ASM statement\n-that is missing either input or output operands, or when two or more ASM\n-statements appear in sequence, to avoid unwanted optimizations. A warning\n-is generated if this advice is not followed.\n+that is missing either input or output operands or to avoid unwanted \n+optimizations. A warning is generated if this advice is not followed.\n+\n+No support is provided for GNU C's @code{asm goto} feature.\n \n The @code{Asm} subprograms may be used in two ways.  First the procedure\n forms can be used anywhere a procedure call would be valid, and\n@@ -20662,7 +20668,7 @@ and more flexible.  The code statement form is provided to meet the RM\n suggestion that such a facility should be made available.  The following\n is the exact syntax of the call to @code{Asm}. As usual, if named notation\n is used, the arguments may be given in arbitrary order, following the\n-normal rules for use of positional and named arguments)\n+normal rules for use of positional and named arguments:\n \n @smallexample\n ASM_CALL ::= Asm ("}]}