{"sha": "28aa63232068fa0adb8911b1987ff9efa0101750", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhhYTYzMjMyMDY4ZmEwYWRiODkxMWIxOTg3ZmY5ZWZhMDEwMTc1MA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2018-09-12T07:04:19Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2018-09-12T07:04:19Z"}, "message": "tree-vrp.c (vrp_shift_undefined_p): Remove.\n\n\t* tree-vrp.c (vrp_shift_undefined_p): Remove.\n\t(extract_range_from_binary_expr_1: Call\n\twide_int_range_shift_undefined_p instead of vrp_shift_undefined_p.\n\t* wide-int-range.h (wide_int_range_shift_undefined_p): Do not\n\tdepend on sign.\n\nFrom-SVN: r264228", "tree": {"sha": "8f15a200648baa936a0018cd2c49ea033a8358e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f15a200648baa936a0018cd2c49ea033a8358e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28aa63232068fa0adb8911b1987ff9efa0101750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28aa63232068fa0adb8911b1987ff9efa0101750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28aa63232068fa0adb8911b1987ff9efa0101750", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28aa63232068fa0adb8911b1987ff9efa0101750/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb753cad995b2a0f98a566cc710feef45e1b46b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb753cad995b2a0f98a566cc710feef45e1b46b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb753cad995b2a0f98a566cc710feef45e1b46b3"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "e3ed7071edc855cbf9cde73fef2216ddc7d977db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28aa63232068fa0adb8911b1987ff9efa0101750/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28aa63232068fa0adb8911b1987ff9efa0101750/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28aa63232068fa0adb8911b1987ff9efa0101750", "patch": "@@ -1,3 +1,11 @@\n+2018-09-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-vrp.c (vrp_shift_undefined_p): Remove.\n+\t(extract_range_from_binary_expr_1: Call\n+\twide_int_range_shift_undefined_p instead of vrp_shift_undefined_p.\n+\t* wide-int-range.h (wide_int_range_shift_undefined_p): Do not\n+\tdepend on sign.\n+\n 2018-09-12  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gimple-ssa-warn-alloca.c"}, {"sha": "d26011a9e66394456cd45ae88f5ff54d6a0c46d1", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28aa63232068fa0adb8911b1987ff9efa0101750/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28aa63232068fa0adb8911b1987ff9efa0101750/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=28aa63232068fa0adb8911b1987ff9efa0101750", "patch": "@@ -1018,17 +1018,6 @@ extract_range_into_wide_ints (const value_range *vr,\n     }\n }\n \n-/* Value range wrapper for wide_int_range_shift_undefined_p.  */\n-\n-static inline bool\n-vrp_shift_undefined_p (const value_range &shifter, unsigned prec)\n-{\n-  tree type = TREE_TYPE (shifter.min);\n-  return wide_int_range_shift_undefined_p (TYPE_SIGN (type), prec,\n-\t\t\t\t\t   wi::to_wide (shifter.min),\n-\t\t\t\t\t   wi::to_wide (shifter.max));\n-}\n-\n /* Value range wrapper for wide_int_range_multiplicative_op:\n \n      *VR = *VR0 .CODE. *VR1.  */\n@@ -1549,7 +1538,9 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t   || code == LSHIFT_EXPR)\n     {\n       if (range_int_cst_p (&vr1)\n-\t  && !vrp_shift_undefined_p (vr1, prec))\n+\t  && !wide_int_range_shift_undefined_p (prec,\n+\t\t\t\t\t\twi::to_wide (vr1.min),\n+\t\t\t\t\t\twi::to_wide (vr1.max)))\n \t{\n \t  if (code == RSHIFT_EXPR)\n \t    {"}, {"sha": "e9ee418e5b2789b30baf14e7e96b2a5621c7b088", "filename": "gcc/wide-int-range.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28aa63232068fa0adb8911b1987ff9efa0101750/gcc%2Fwide-int-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28aa63232068fa0adb8911b1987ff9efa0101750/gcc%2Fwide-int-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-range.h?ref=28aa63232068fa0adb8911b1987ff9efa0101750", "patch": "@@ -131,7 +131,7 @@ extern bool wide_int_range_div (wide_int &wmin, wide_int &wmax,\n /* Return TRUE if shifting by range [MIN, MAX] is undefined behavior.  */\n \n inline bool\n-wide_int_range_shift_undefined_p (signop sign, unsigned prec,\n+wide_int_range_shift_undefined_p (unsigned prec,\n \t\t\t\t  const wide_int &min, const wide_int &max)\n {\n   /* ?? Note: The original comment said this only applied to\n@@ -142,7 +142,7 @@ wide_int_range_shift_undefined_p (signop sign, unsigned prec,\n      behavior from the shift operation.  We cannot even trust\n      SHIFT_COUNT_TRUNCATED at this stage, because that applies to rtl\n      shifts, and the operation at the tree level may be widened.  */\n-  return wi::lt_p (min, 0, sign) || wi::ge_p (max, prec, sign);\n+  return wi::sign_mask (min) || wi::ge_p (max, prec, UNSIGNED);\n }\n \n /* Calculate MIN/MAX_EXPR of two ranges and store the result in [MIN, MAX].  */"}]}