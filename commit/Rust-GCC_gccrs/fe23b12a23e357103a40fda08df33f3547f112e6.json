{"sha": "fe23b12a23e357103a40fda08df33f3547f112e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUyM2IxMmEyM2UzNTcxMDNhNDBmZGEwOGRmMzNmMzU0N2YxMTJlNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-02-02T02:07:09Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-02-02T02:07:09Z"}, "message": "PR c++/84160 - ICE with nested variadic capture.\n\n\t* lambda.c (is_capture_proxy_with_ref): New.\n\t(insert_capture_proxy): Don't set DECL_CAPTURED_VARIABLE from a\n\tCOMPONENT_REF.\n\t* expr.c (mark_use): Use is_capture_proxy_with_ref.\n\t* constexpr.c (potential_constant_expression_1): Likewise.\n\t* semantics.c (process_outer_var_ref): Likewise.\n\nFrom-SVN: r257325", "tree": {"sha": "1eeccbcc99f8325a3a6b6c4e7886433ffdff17e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eeccbcc99f8325a3a6b6c4e7886433ffdff17e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe23b12a23e357103a40fda08df33f3547f112e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe23b12a23e357103a40fda08df33f3547f112e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe23b12a23e357103a40fda08df33f3547f112e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe23b12a23e357103a40fda08df33f3547f112e6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60a57222fe2166519b54641766bccab92fa15606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60a57222fe2166519b54641766bccab92fa15606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60a57222fe2166519b54641766bccab92fa15606"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "728597599c5a3d30a6754ff80a901c4a39606307", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe23b12a23e357103a40fda08df33f3547f112e6", "patch": "@@ -1,3 +1,13 @@\n+2018-02-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/84160 - ICE with nested variadic capture.\n+\t* lambda.c (is_capture_proxy_with_ref): New.\n+\t(insert_capture_proxy): Don't set DECL_CAPTURED_VARIABLE from a\n+\tCOMPONENT_REF.\n+\t* expr.c (mark_use): Use is_capture_proxy_with_ref.\n+\t* constexpr.c (potential_constant_expression_1): Likewise.\n+\t* semantics.c (process_outer_var_ref): Likewise.\n+\n 2018-02-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/84125"}, {"sha": "171c389515a40ce3816d5d33767547b77257946a", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=fe23b12a23e357103a40fda08df33f3547f112e6", "patch": "@@ -5369,7 +5369,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case VAR_DECL:\n       if (DECL_HAS_VALUE_EXPR_P (t))\n \t{\n-\t  if (now && is_normal_capture_proxy (t))\n+\t  if (now && is_capture_proxy_with_ref (t))\n \t    {\n \t      /* -- in a lambda-expression, a reference to this or to a\n \t\t variable with automatic storage duration defined outside that"}, {"sha": "a53f4fd9c03a13eb0303a77f433695d406e773c3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fe23b12a23e357103a40fda08df33f3547f112e6", "patch": "@@ -6901,6 +6901,7 @@ extern void insert_capture_proxy\t\t(tree);\n extern void insert_pending_capture_proxies\t(void);\n extern bool is_capture_proxy\t\t\t(tree);\n extern bool is_normal_capture_proxy             (tree);\n+extern bool is_capture_proxy_with_ref           (tree);\n extern void register_capture_members\t\t(tree);\n extern tree lambda_expr_this_capture            (tree, bool);\n extern void maybe_generic_this_capture\t\t(tree, tree);"}, {"sha": "b2c8cfaf88c7ee1f0620ef60cd059e8fb8eaa96f", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=fe23b12a23e357103a40fda08df33f3547f112e6", "patch": "@@ -111,7 +111,7 @@ mark_use (tree expr, bool rvalue_p, bool read_p,\n     {\n     case VAR_DECL:\n     case PARM_DECL:\n-      if (rvalue_p && is_normal_capture_proxy (expr))\n+      if (rvalue_p && is_capture_proxy_with_ref (expr))\n \t{\n \t  /* Look through capture by copy.  */\n \t  tree cap = DECL_CAPTURED_VARIABLE (expr);\n@@ -154,7 +154,7 @@ mark_use (tree expr, bool rvalue_p, bool read_p,\n \t{\n \t  /* Try to look through the reference.  */\n \t  tree ref = TREE_OPERAND (expr, 0);\n-\t  if (rvalue_p && is_normal_capture_proxy (ref))\n+\t  if (rvalue_p && is_capture_proxy_with_ref (ref))\n \t    {\n \t      /* Look through capture by reference.  */\n \t      tree cap = DECL_CAPTURED_VARIABLE (ref);"}, {"sha": "ff8236ad316c453ff2f2f7866f69718e1ce016db", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=fe23b12a23e357103a40fda08df33f3547f112e6", "patch": "@@ -290,13 +290,24 @@ is_normal_capture_proxy (tree decl)\n   return DECL_NORMAL_CAPTURE_P (val);\n }\n \n+/* Returns true iff DECL is a capture proxy for which we can use\n+   DECL_CAPTURED_VARIABLE.  In effect, this is a normal proxy other than a\n+   nested capture of a function parameter pack.  */\n+\n+bool\n+is_capture_proxy_with_ref (tree var)\n+{\n+  return (is_normal_capture_proxy (var) && DECL_LANG_SPECIFIC (var)\n+\t  && DECL_CAPTURED_VARIABLE (var));\n+}\n+\n /* VAR is a capture proxy created by build_capture_proxy; add it to the\n    current function, which is the operator() for the appropriate lambda.  */\n \n void\n insert_capture_proxy (tree var)\n {\n-  if (is_normal_capture_proxy (var))\n+  if (is_capture_proxy_with_ref (var))\n     {\n       tree cap = DECL_CAPTURED_VARIABLE (var);\n       if (CHECKING_P)\n@@ -443,11 +454,20 @@ build_capture_proxy (tree member, tree init)\n \t    init = TREE_OPERAND (init, 0);\n \t  STRIP_NOPS (init);\n \t}\n-      gcc_assert (VAR_P (init) || TREE_CODE (init) == PARM_DECL);\n-      while (is_normal_capture_proxy (init))\n-\tinit = DECL_CAPTURED_VARIABLE (init);\n-      retrofit_lang_decl (var);\n-      DECL_CAPTURED_VARIABLE (var) = init;\n+\n+      if (TREE_CODE (init) == COMPONENT_REF)\n+\t/* We're capturing a capture of a function parameter pack, and have\n+\t   lost track of the original variable.  It's not important to have\n+\t   DECL_CAPTURED_VARIABLE in this case, since a function parameter pack\n+\t   isn't a constant variable, so don't bother trying to set it.  */;\n+      else\n+\t{\n+\t  gcc_assert (VAR_P (init) || TREE_CODE (init) == PARM_DECL);\n+\t  while (is_normal_capture_proxy (init))\n+\t    init = DECL_CAPTURED_VARIABLE (init);\n+\t  retrofit_lang_decl (var);\n+\t  DECL_CAPTURED_VARIABLE (var) = init;\n+\t}\n     }\n \n   if (name == this_identifier)"}, {"sha": "ea92da376257ebef5f41d8d2b60e65fd9575028d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=fe23b12a23e357103a40fda08df33f3547f112e6", "patch": "@@ -3321,7 +3321,7 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain, bool odr_use)\n     {\n       /* Check whether we've already built a proxy.  */\n       tree var = decl;\n-      while (is_normal_capture_proxy (var))\n+      while (is_capture_proxy_with_ref (var))\n \tvar = DECL_CAPTURED_VARIABLE (var);\n       tree d = retrieve_local_specialization (var);\n "}, {"sha": "d9707d05c70df79eb1c01399b367d617a0d2ec55", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-variadic6.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe23b12a23e357103a40fda08df33f3547f112e6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic6.C?ref=fe23b12a23e357103a40fda08df33f3547f112e6", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/84160\n+// { dg-do compile { target c++11 } }\n+\n+template < typename ... T > void f (T ... a) \n+{\n+  [a ...] { [a ...] {}; };\n+}\n+\n+void g ()\n+{\n+  f < int > (0);\n+}"}]}