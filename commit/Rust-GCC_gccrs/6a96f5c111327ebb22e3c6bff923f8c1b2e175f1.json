{"sha": "6a96f5c111327ebb22e3c6bff923f8c1b2e175f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE5NmY1YzExMTMyN2ViYjIyZTNjNmJmZjkyM2Y4YzFiMmUxNzVmMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenth@gcc.gnu.org", "date": "2005-02-07T13:24:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-02-07T13:24:38Z"}, "message": "re PR middle-end/19775 (sqrt(pow(x,y)) != pow(x,y*0.5) (with -ffast-math))\n\n2005-02-07  Richard Guenther  <rguenth@gcc.gnu.org>\n\n\tPR middle-end/19775\n\t* builtins.c (fold_builtin_sqrt): Transform\n\tsqrt(pow(x,y)) to pow(fabs(x),y*0.5), not\n\tpow(x,y*0.5).\n\n\t* gcc.dg/torture/builtin-power-1.c: Disable test for\n\tinvalid transformation.\n\t* gcc.dg/builtins-10.c: Likewise.  Disable one test we\n\tno longer optimize.\n\t* gcc.dg/builtins-47.c: New testcase.\n\nFrom-SVN: r94701", "tree": {"sha": "f3c9b917a0f61ec5e98c3b1be02adc081d56f541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3c9b917a0f61ec5e98c3b1be02adc081d56f541"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/comments", "author": null, "committer": null, "parents": [{"sha": "48c4e71107bd32507fe3a52c85601fce53a4b1ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c4e71107bd32507fe3a52c85601fce53a4b1ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c4e71107bd32507fe3a52c85601fce53a4b1ef"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "dec53756db9ffff6d58eda8e2184d54ca4f06c97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a96f5c111327ebb22e3c6bff923f8c1b2e175f1", "patch": "@@ -1,3 +1,10 @@\n+2005-02-07  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\tPR middle-end/19775\n+\t* builtins.c (fold_builtin_sqrt): Transform\n+\tsqrt(pow(x,y)) to pow(fabs(x),y*0.5), not\n+\tpow(x,y*0.5).\n+\n 2005-02-07  Leehod Baruch  <leehod@il.ibm.com>\n \t    Dorit Naishlos  <dorit@il.ibm.com>\n "}, {"sha": "09c5b6b795e7e8e1083b0a6adcd88c4640741bca", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6a96f5c111327ebb22e3c6bff923f8c1b2e175f1", "patch": "@@ -6186,7 +6186,7 @@ fold_builtin_sqrt (tree arglist, tree type)\n \t}\n     }\n \n-  /* Optimize sqrt(pow(x,y)) = pow(x,y*0.5).  */\n+  /* Optimize sqrt(pow(x,y)) = pow(|x|,y*0.5).  */\n   if (flag_unsafe_math_optimizations\n       && (fcode == BUILT_IN_POW\n \t  || fcode == BUILT_IN_POWF\n@@ -6195,8 +6195,11 @@ fold_builtin_sqrt (tree arglist, tree type)\n       tree powfn = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n       tree arg0 = TREE_VALUE (TREE_OPERAND (arg, 1));\n       tree arg1 = TREE_VALUE (TREE_CHAIN (TREE_OPERAND (arg, 1)));\n-      tree narg1 = fold (build2 (MULT_EXPR, type, arg1,\n-\t\t\t\t build_real (type, dconsthalf)));\n+      tree narg1;\n+      if (!tree_expr_nonnegative_p (arg0))\n+\targ0 = build1 (ABS_EXPR, type, arg0);\n+      narg1 = fold (build2 (MULT_EXPR, type, arg1,\n+\t\t\t    build_real (type, dconsthalf)));\n       arglist = tree_cons (NULL_TREE, arg0,\n \t\t\t   build_tree_list (NULL_TREE, narg1));\n       return build_function_call_expr (powfn, arglist);"}, {"sha": "4e93d07fdd0d376d7528d24c962966d2aeed6534", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a96f5c111327ebb22e3c6bff923f8c1b2e175f1", "patch": "@@ -1,3 +1,12 @@\n+2005-02-07  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\tPR middle-end/19775\n+\t* gcc.dg/torture/builtin-power-1.c: Disable test for\n+\tinvalid transformation.\n+\t* gcc.dg/builtins-10.c: Likewise.  Disable one test we\n+\tno longer optimize.\n+\t* gcc.dg/builtins-47.c: New testcase.\n+\n 2005-02-07  Leehod Baruch  <leehod@il.ibm.com> \n \t    Dorit Naishlos  <dorit@il.ibm.com>\n \t"}, {"sha": "53158a0f8523071a21ebcfab8182d3d517abe4c5", "filename": "gcc/testsuite/gcc.dg/builtins-10.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-10.c?ref=6a96f5c111327ebb22e3c6bff923f8c1b2e175f1", "patch": "@@ -14,11 +14,12 @@ extern double exp(double);\n extern double log(double);\n extern double sqrt(double);\n extern double pow(double,double);\n+extern double fabs(double);\n \n void test(double x)\n {\n-  if (sqrt(pow(x,4.0)) != x*x)\n-    link_error ();\n+  /*if (sqrt(pow(x,4.0)) != x*x)\n+    link_error (); */\n \n   if (pow(sqrt(x),4.0) != x*x)\n     link_error ();\n@@ -29,7 +30,7 @@ void test(double x)\n \n void test2(double x, double y, double z)\n {\n-  if (sqrt(pow(x,y)) != pow(x,y*0.5))\n+  if (sqrt(pow(x,y)) != pow(fabs(x),y*0.5))\n     link_error ();\n \n   if (log(pow(x,y)) != y*log(x))"}, {"sha": "19ae97367702db4523e13ad18806691fb4687a42", "filename": "gcc/testsuite/gcc.dg/builtins-47.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-47.c?ref=6a96f5c111327ebb22e3c6bff923f8c1b2e175f1", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-ffast-math -fdump-tree-gimple\" } */\n+\n+extern double sqrt (double);\n+extern double pow (double, double);\n+extern void abort (void);\n+\n+int main ()\n+{\n+  double x = -1.0;\n+  if (sqrt (pow (x, 2)) != 1.0)\n+    abort();\n+  if (sqrt (x*x) != 1.0)\n+    abort();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"sqrt\" 0 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"pow\" 0 \"gimple\" } } */\n+"}, {"sha": "7cdc00c23fb0eb40db2dad89f7073037822013cc", "filename": "gcc/testsuite/gcc.dg/torture/builtin-power-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-power-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a96f5c111327ebb22e3c6bff923f8c1b2e175f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-power-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-power-1.c?ref=6a96f5c111327ebb22e3c6bff923f8c1b2e175f1", "patch": "@@ -63,7 +63,7 @@ void test(double d1, double d2, double d3,\n      || FN##l(powl(ld1,ld2)) != powl(ld1,ld2/N)) \\\n     link_failure_##FN##_pow()\n \n-  ROOT_POW(sqrt,2);\n+  /*ROOT_POW(sqrt,2); Invalid. */\n   /*ROOT_POW(cbrt,3); Intentionally not implemented.  */\n \n   /* Test pow(pow(x,y),z) -> pow(x,y*z).  */"}]}