{"sha": "36ec54aac7da134441c83248e14825381b8d6f17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlYzU0YWFjN2RhMTM0NDQxYzgzMjQ4ZTE0ODI1MzgxYjhkNmYxNw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-11-28T11:36:28Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-11-28T11:37:17Z"}, "message": "Generate correct fn specs for some Fortran library functions.\n\nThis patch works by generating the correct fn spec from the\nactual arguments in specific_intrinsic_symbol, and by passing this\ndown via gfc_get_extern_function_decl to gfc_get_function_type.\nCSHIFT remains to be done.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/97454\n\t* trans-decl.c (gfc_get_extern_function_decl): Add argument\n\tfnspec.\n\t* trans-intrinsic.c (MAX_SPEC_ARG): Define.\n\t(intrinsic_fnspec): New function.\n\t(ADD_CHAR): Define.\n\t(specific_intrinsic_symbol): Adjust comment. Pass\n\tfn spec to gfc_get_extern_function_decl.\n\t(gfc_conv_intrinsic_funcall): Add ANY, ALL, NORM2, PRODUCT\n\tand SUM intrnisic. Add FIXME for cshift et al.\n\t* trans-types.c\t(gfc_get_function_type): Add fnspec argument,\n\thandle it.\n\t* trans-types.h (gfc_get_function_type): Add optinal fnspec\n\targument.\n\t* trans.h (gfc_get_extern_function_decl): Likewise.", "tree": {"sha": "f4e6da6e8acbd45a79a2a888475ad57e7c1549b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4e6da6e8acbd45a79a2a888475ad57e7c1549b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36ec54aac7da134441c83248e14825381b8d6f17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ec54aac7da134441c83248e14825381b8d6f17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ec54aac7da134441c83248e14825381b8d6f17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ec54aac7da134441c83248e14825381b8d6f17/comments", "author": null, "committer": null, "parents": [{"sha": "e87559d202d90e614315203f38f9aa2f5881d36e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87559d202d90e614315203f38f9aa2f5881d36e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e87559d202d90e614315203f38f9aa2f5881d36e"}], "stats": {"total": 108, "additions": 98, "deletions": 10}, "files": [{"sha": "b556e7598a0a97696435d3c859492369e26d7953", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec54aac7da134441c83248e14825381b8d6f17/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec54aac7da134441c83248e14825381b8d6f17/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=36ec54aac7da134441c83248e14825381b8d6f17", "patch": "@@ -2075,7 +2075,8 @@ get_proc_pointer_decl (gfc_symbol *sym)\n /* Get a basic decl for an external function.  */\n \n tree\n-gfc_get_extern_function_decl (gfc_symbol * sym, gfc_actual_arglist *actual_args)\n+gfc_get_extern_function_decl (gfc_symbol * sym, gfc_actual_arglist *actual_args,\n+\t\t\t      const char *fnspec)\n {\n   tree type;\n   tree fndecl;\n@@ -2287,7 +2288,8 @@ gfc_get_extern_function_decl (gfc_symbol * sym, gfc_actual_arglist *actual_args)\n       mangled_name = gfc_sym_mangled_function_id (sym);\n     }\n \n-  type = gfc_get_function_type (sym, actual_args);\n+  type = gfc_get_function_type (sym, actual_args, fnspec);\n+\n   fndecl = build_decl (input_location,\n \t\t       FUNCTION_DECL, name, type);\n "}, {"sha": "bcc13ce79c625fed9d2ff91ee0969fdb3535b443", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 75, "deletions": 4, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec54aac7da134441c83248e14825381b8d6f17/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec54aac7da134441c83248e14825381b8d6f17/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=36ec54aac7da134441c83248e14825381b8d6f17", "patch": "@@ -40,6 +40,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"trans-types.h\"\n #include \"trans-array.h\"\n #include \"dependency.h\"\t/* For CAF array alias analysis.  */\n+#include \"attribs.h\"\n+\n /* Only for gfc_trans_assign and gfc_trans_pointer_assign.  */\n \n /* This maps Fortran intrinsic math functions to external library or GCC\n@@ -4257,10 +4259,69 @@ remove_empty_actual_arguments (gfc_actual_arglist **ap)\n     }\n }\n \n+#define MAX_SPEC_ARG 12\n+\n+/* Make up an fn spec that's right for intrinsic functions that we\n+   want to call.  */\n+\n+static char *\n+intrinsic_fnspec (gfc_expr *expr)\n+{\n+  static char fnspec_buf[MAX_SPEC_ARG*2+1];\n+  char *fp;\n+  int i;\n+  int num_char_args;\n+\n+#define ADD_CHAR(c) do { *fp++ = c; *fp++ = ' '; } while(0)\n+\n+  /* Set the fndecl.  */\n+  fp = fnspec_buf;\n+  /* Function return value.  FIXME: Check if the second letter could\n+     be something other than a space, for further optimization.  */\n+  ADD_CHAR ('.');\n+  if (expr->rank == 0)\n+    {\n+      if (expr->ts.type == BT_CHARACTER)\n+\t{\n+\t  ADD_CHAR ('w');  /* Address of character.  */\n+\t  ADD_CHAR ('.');  /* Length of character.  */\n+\t}\n+    }\n+  else\n+    ADD_CHAR ('w');  /* Return value is a descriptor.  */\n+\n+  num_char_args = 0;\n+  for (gfc_actual_arglist *a = expr->value.function.actual; a; a = a->next)\n+    {\n+      if (a->expr == NULL)\n+\tcontinue;\n+\n+      if (a->name && strcmp (a->name,\"%VAL\") == 0)\n+\tADD_CHAR ('.');\n+      else\n+\t{\n+\t  if (a->expr->rank > 0)\n+\t    ADD_CHAR ('r');\n+\t  else\n+\t    ADD_CHAR ('R');\n+\t}\n+      num_char_args += a->expr->ts.type == BT_CHARACTER;\n+      gcc_assert (fp - fnspec_buf + num_char_args <= MAX_SPEC_ARG*2);\n+    }\n+\n+  for (i = 0; i < num_char_args; i++)\n+    ADD_CHAR ('.');\n+\n+  *fp = '\\0';\n+  return fnspec_buf;\n+}\n+\n+#undef MAX_SPEC_ARG\n+#undef ADD_CHAR\n+\n /* Generate the right symbol for the specific intrinsic function and\n  modify the expr accordingly.  This assumes that absent optional\n- arguments should be removed.  FIXME: This should be extended for\n- procedures which do not ignore optional arguments (PR 97454).  */\n+ arguments should be removed.  */\n \n gfc_symbol *\n specific_intrinsic_symbol (gfc_expr *expr)\n@@ -4278,14 +4339,19 @@ specific_intrinsic_symbol (gfc_expr *expr)\n       gfc_copy_formal_args_intr (sym, expr->value.function.isym,\n \t\t\t\t expr->value.function.actual, true);\n       sym->backend_decl\n-\t= gfc_get_extern_function_decl (sym, expr->value.function.actual);\n+\t= gfc_get_extern_function_decl (sym, expr->value.function.actual,\n+\t\t\t\t\tintrinsic_fnspec (expr));\n     }\n+\n   remove_empty_actual_arguments (&(expr->value.function.actual));\n \n   return sym;\n }\n \n-/* Generate a call to an external intrinsic function.  */\n+/* Generate a call to an external intrinsic function.  FIXME: So far,\n+   this only works for functions which are called with well-defined\n+   types; CSHIFT and friends will come later.  */\n+\n static void\n gfc_conv_intrinsic_funcall (gfc_se * se, gfc_expr * expr)\n {\n@@ -4302,11 +4368,16 @@ gfc_conv_intrinsic_funcall (gfc_se * se, gfc_expr * expr)\n \n   switch (expr->value.function.isym->id)\n     {\n+    case GFC_ISYM_ANY:\n+    case GFC_ISYM_ALL:\n     case GFC_ISYM_FINDLOC:\n     case GFC_ISYM_MAXLOC:\n     case GFC_ISYM_MINLOC:\n     case GFC_ISYM_MAXVAL:\n     case GFC_ISYM_MINVAL:\n+    case GFC_ISYM_NORM2:\n+    case GFC_ISYM_PRODUCT:\n+    case GFC_ISYM_SUM:\n       specific_symbol = true;\n       break;\n     default:"}, {"sha": "281cc7d34ab4fded5579571e6f0338a60fd3c46c", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec54aac7da134441c83248e14825381b8d6f17/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec54aac7da134441c83248e14825381b8d6f17/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=36ec54aac7da134441c83248e14825381b8d6f17", "patch": "@@ -3009,7 +3009,8 @@ create_fn_spec (gfc_symbol *sym, tree fntype)\n }\n \n tree\n-gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args)\n+gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args,\n+\t\t       const char *fnspec)\n {\n   tree type;\n   vec<tree, va_gc> *typelist = NULL;\n@@ -3193,7 +3194,19 @@ gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args)\n     type = build_varargs_function_type_vec (type, typelist);\n   else\n     type = build_function_type_vec (type, typelist);\n-  type = create_fn_spec (sym, type);\n+\n+  /* If we were passed an fn spec, add it here, otherwise determine it from\n+     the formal arguments.  */\n+  if (fnspec)\n+    {\n+      tree tmp;\n+      int spec_len = strlen (fnspec);\n+      tmp = build_tree_list (NULL_TREE, build_string (spec_len, fnspec));\n+      tmp = tree_cons (get_identifier (\"fn spec\"), tmp, TYPE_ATTRIBUTES (type));\n+      type = build_type_attribute_variant (type, tmp);\n+    }\n+  else\n+    type = create_fn_spec (sym, type);\n \n   return type;\n }"}, {"sha": "1b59287996b1953095fa9665e4446efc9e429f41", "filename": "gcc/fortran/trans-types.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec54aac7da134441c83248e14825381b8d6f17/gcc%2Ffortran%2Ftrans-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec54aac7da134441c83248e14825381b8d6f17/gcc%2Ffortran%2Ftrans-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.h?ref=36ec54aac7da134441c83248e14825381b8d6f17", "patch": "@@ -88,7 +88,8 @@ tree gfc_sym_type (gfc_symbol *);\n tree gfc_typenode_for_spec (gfc_typespec *, int c = 0);\n int gfc_copy_dt_decls_ifequal (gfc_symbol *, gfc_symbol *, bool);\n \n-tree gfc_get_function_type (gfc_symbol *, gfc_actual_arglist *args = NULL);\n+tree gfc_get_function_type (gfc_symbol *, gfc_actual_arglist *args = NULL,\n+\t\t\t    const char *fnspec = NULL);\n \n tree gfc_type_for_size (unsigned, int);\n tree gfc_type_for_mode (machine_mode, int);"}, {"sha": "6e417c43e8c11c0d97f9cef3b08c4943b46a54be", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec54aac7da134441c83248e14825381b8d6f17/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec54aac7da134441c83248e14825381b8d6f17/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=36ec54aac7da134441c83248e14825381b8d6f17", "patch": "@@ -608,7 +608,8 @@ tree gfc_get_label_decl (gfc_st_label *);\n \n /* Return the decl for an external function.  */\n tree gfc_get_extern_function_decl (gfc_symbol *,\n-\t\t\t\t   gfc_actual_arglist *args = NULL);\n+\t\t\t\t   gfc_actual_arglist *args = NULL,\n+\t\t\t\t   const char *fnspec = NULL);\n \n /* Return the decl for a function.  */\n tree gfc_get_function_decl (gfc_symbol *);"}]}