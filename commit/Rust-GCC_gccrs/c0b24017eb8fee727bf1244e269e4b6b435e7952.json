{"sha": "c0b24017eb8fee727bf1244e269e4b6b435e7952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBiMjQwMTdlYjhmZWU3MjdiZjEyNDRlMjY5ZTRiNmI0MzVlNzk1Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-10-25T21:53:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-10-25T21:53:21Z"}, "message": "re PR middle-end/82062 (simple conditional expressions no longer folded)\n\n\tPR middle-end/82062\n\t* fold-const.c (operand_equal_for_comparison_p): Also return true\n\tif ARG0 is a simple variant of ARG1 with narrower precision.\n\t(fold_ternary_loc): Always pass unstripped operands to the predicate.\n\nFrom-SVN: r254089", "tree": {"sha": "d798c4a380498017a30d56af6f0e4f30dd6187b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d798c4a380498017a30d56af6f0e4f30dd6187b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0b24017eb8fee727bf1244e269e4b6b435e7952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b24017eb8fee727bf1244e269e4b6b435e7952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0b24017eb8fee727bf1244e269e4b6b435e7952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b24017eb8fee727bf1244e269e4b6b435e7952/comments", "author": null, "committer": null, "parents": [{"sha": "a2af967e9718d3d15461dbc5c52008ceab63a2f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2af967e9718d3d15461dbc5c52008ceab63a2f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2af967e9718d3d15461dbc5c52008ceab63a2f0"}], "stats": {"total": 74, "additions": 67, "deletions": 7}, "files": [{"sha": "796a7e8cee9384823cd1500724f26f0288f85e99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b24017eb8fee727bf1244e269e4b6b435e7952/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b24017eb8fee727bf1244e269e4b6b435e7952/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0b24017eb8fee727bf1244e269e4b6b435e7952", "patch": "@@ -1,4 +1,11 @@\n-2017-10-23  Jan Hubicka  <hubicka@ucw.cz>\n+2017-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/82062\n+\t* fold-const.c (operand_equal_for_comparison_p): Also return true\n+\tif ARG0 is a simple variant of ARG1 with narrower precision.\n+\t(fold_ternary_loc): Always pass unstripped operands to the predicate.\n+\n+2017-10-25  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* i386.c (ix86_builtin_vectorization_cost): Compute scatter/gather\n \tcost correctly."}, {"sha": "9db5aeb842583854fa5f85aba0d4f97d28f774e3", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b24017eb8fee727bf1244e269e4b6b435e7952/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b24017eb8fee727bf1244e269e4b6b435e7952/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c0b24017eb8fee727bf1244e269e4b6b435e7952", "patch": "@@ -3366,7 +3366,8 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n #undef OP_SAME_WITH_NULL\n }\n \f\n-/* Similar to operand_equal_p, but strip nops first.  */\n+/* Similar to operand_equal_p, but see if ARG0 might be a variant of ARG1\n+   with a different signedness or a narrower precision.  */\n \n static bool\n operand_equal_for_comparison_p (tree arg0, tree arg1)\n@@ -3381,9 +3382,20 @@ operand_equal_for_comparison_p (tree arg0, tree arg1)\n   /* Discard any conversions that don't change the modes of ARG0 and ARG1\n      and see if the inner values are the same.  This removes any\n      signedness comparison, which doesn't matter here.  */\n-  STRIP_NOPS (arg0);\n-  STRIP_NOPS (arg1);\n-  if (operand_equal_p (arg0, arg1, 0))\n+  tree op0 = arg0;\n+  tree op1 = arg1;\n+  STRIP_NOPS (op0);\n+  STRIP_NOPS (op1);\n+  if (operand_equal_p (op0, op1, 0))\n+    return true;\n+\n+  /* Discard a single widening conversion from ARG1 and see if the inner\n+     value is the same as ARG0.  */\n+  if (CONVERT_EXPR_P (arg1)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (arg1, 0)))\n+      && TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg1, 0)))\n+         < TYPE_PRECISION (TREE_TYPE (arg1))\n+      && operand_equal_p (arg0, TREE_OPERAND (arg1, 0), 0))\n     return true;\n \n   return false;\n@@ -11169,8 +11181,8 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \n          Also try swapping the arguments and inverting the conditional.  */\n       if (COMPARISON_CLASS_P (arg0)\n-\t  && operand_equal_for_comparison_p (TREE_OPERAND (arg0, 0), arg1)\n-\t  && !HONOR_SIGNED_ZEROS (element_mode (arg1)))\n+\t  && operand_equal_for_comparison_p (TREE_OPERAND (arg0, 0), op1)\n+\t  && !HONOR_SIGNED_ZEROS (element_mode (op1)))\n \t{\n \t  tem = fold_cond_expr_with_comparison (loc, type, arg0, op1, op2);\n \t  if (tem)"}, {"sha": "443e7c7df0675d89d6fb93b5f518f4ac521a94ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b24017eb8fee727bf1244e269e4b6b435e7952/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b24017eb8fee727bf1244e269e4b6b435e7952/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0b24017eb8fee727bf1244e269e4b6b435e7952", "patch": "@@ -1,3 +1,9 @@\n+2017-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/fold-cond_expr-1.c: Rename to...\n+\t* gcc.dg/fold-cond-2.c: ...this.\n+\t* gcc.dg/fold-cond-3.c: New test.\n+\n 2017-10-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82436"}, {"sha": "68ec75480ada80e2314db4e2239a67c3e6798634", "filename": "gcc/testsuite/gcc.dg/fold-cond-2.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b24017eb8fee727bf1244e269e4b6b435e7952/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cond-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b24017eb8fee727bf1244e269e4b6b435e7952/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cond-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cond-2.c?ref=c0b24017eb8fee727bf1244e269e4b6b435e7952", "previous_filename": "gcc/testsuite/gcc.dg/fold-cond_expr-1.c"}, {"sha": "fe0ba65ebac0b3d8aa3cd643cb87a8e1ab6f2d43", "filename": "gcc/testsuite/gcc.dg/fold-cond-3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b24017eb8fee727bf1244e269e4b6b435e7952/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cond-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b24017eb8fee727bf1244e269e4b6b435e7952/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cond-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-cond-3.c?ref=c0b24017eb8fee727bf1244e269e4b6b435e7952", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-original\" } */\n+\n+unsigned long f1 (int x)\n+{\n+  return x > 0 ? (unsigned long) x : 0;\n+}\n+\n+unsigned long f2 (int x, int y)\n+{\n+  return x > y ? (unsigned long) x : (unsigned long) y;\n+}\n+\n+unsigned long f3 (int x)\n+{\n+  return x < 0 ? (unsigned long) x : 0;\n+}\n+\n+unsigned long f4 (int x, int y)\n+{\n+  return x < y ? (unsigned long) x : (unsigned long) y;\n+}\n+\n+unsigned long f5 (unsigned int x, unsigned int y)\n+{\n+  return x > y ? (unsigned long) x : (unsigned long) y;\n+}\n+\n+unsigned long f6 (unsigned int x, unsigned int y)\n+{\n+  return x < y ? (unsigned long) x : (unsigned long) y;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"MAX_EXPR\" 3 \"original\"} } */\n+/* { dg-final { scan-tree-dump-times \"MIN_EXPR\" 3 \"original\"} } */"}]}