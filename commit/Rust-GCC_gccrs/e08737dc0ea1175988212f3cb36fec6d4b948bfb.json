{"sha": "e08737dc0ea1175988212f3cb36fec6d4b948bfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4NzM3ZGMwZWExMTc1OTg4MjEyZjNjYjM2ZmVjNmQ0Yjk0OGJmYg==", "commit": {"author": {"name": "Phil Edwards", "email": "phil@codesourcery.com", "date": "2003-09-19T17:50:26Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-09-19T17:50:26Z"}, "message": "install.texi: Document the multiple testsuite options.\n\n2003-09-19  Phil Edwards  <phil@codesourcery.com>\n\n\t* doc/install.texi:  Document the multiple testsuite options.\n\nFrom-SVN: r71582", "tree": {"sha": "5a861ef9ca7570115468dac0e067f25e6379c7c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a861ef9ca7570115468dac0e067f25e6379c7c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e08737dc0ea1175988212f3cb36fec6d4b948bfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08737dc0ea1175988212f3cb36fec6d4b948bfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08737dc0ea1175988212f3cb36fec6d4b948bfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08737dc0ea1175988212f3cb36fec6d4b948bfb/comments", "author": null, "committer": null, "parents": [{"sha": "6a1dbbafd82fca442c0adbd449eaa38b38ea50cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1dbbafd82fca442c0adbd449eaa38b38ea50cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1dbbafd82fca442c0adbd449eaa38b38ea50cb"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "5aa6ebcdd3a1e68321bf3e5d33f34dde1e349954", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08737dc0ea1175988212f3cb36fec6d4b948bfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08737dc0ea1175988212f3cb36fec6d4b948bfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e08737dc0ea1175988212f3cb36fec6d4b948bfb", "patch": "@@ -1,3 +1,7 @@\n+2003-09-19  Phil Edwards  <phil@codesourcery.com>\n+\n+\t* doc/install.texi:  Document the multiple testsuite options.\n+\n 2003-09-19  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Specific): Add the specific versions of GCC"}, {"sha": "ab2efa4d73989df582abbe5063131a9d35dd5df8", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08737dc0ea1175988212f3cb36fec6d4b948bfb/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08737dc0ea1175988212f3cb36fec6d4b948bfb/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e08737dc0ea1175988212f3cb36fec6d4b948bfb", "patch": "@@ -1514,12 +1514,82 @@ To get a list of the possible @file{*.exp} files, pipe the\n output of @samp{make check} into a file and look at the\n @samp{Running @dots{}  .exp} lines.\n \n+@section Passing options and running multiple testsuites\n+\n+You can pass multiple options to the testsuite using the\n+@samp{--target_board} option of DejaGNU, either passed as part of\n+@samp{RUNTESTFLAGS}, or directly to @command{runtest} if you prefer to\n+work outside the makefiles.  For example,\n+\n+@example\n+    make check-g++ RUNTESTFLAGS=\"--target_board=unix/-O3/-fno-strength-reduce\"\n+@end example\n+\n+will run the standard @command{g++} testsuites (``unix'' is the target name\n+for a standard native testsuite situation), passing\n+@samp{-O3 -fno-strength-reduce} to the compiler on every test, i.e.,\n+slashes separate options.\n+\n+You can run the testsuites multiple times using combinations of options\n+with a syntax similar to the brace expansion of popular shells:\n+\n+@example\n+    @dots{}\"--target_board=arm-sim@{-mhard-float,-msoft-float@}@{-O1,-O2,-O3,@}\"\n+@end example\n+\n+(Note the empty option caused by the trailing comma in the final group.)\n+The following will run each testsuite eight times using the @samp{arm-sim}\n+target, as if you had specified all possible combinations yourself:\n+\n+@example\n+    --target_board=arm-sim/-mhard-float/-O1\n+    --target_board=arm-sim/-mhard-float/-O2\n+    --target_board=arm-sim/-mhard-float/-O3\n+    --target_board=arm-sim/-mhard-float\n+    --target_board=arm-sim/-msoft-float/-O1\n+    --target_board=arm-sim/-msoft-float/-O2\n+    --target_board=arm-sim/-msoft-float/-O3\n+    --target_board=arm-sim/-msoft-float\n+@end example\n+\n+They can be combined as many times as you wish, in arbitrary ways.  This\n+list:\n+\n+@example\n+    @dots{}\"--target_board=unix/-Wextra@{-O3,-fno-strength-reduce@}@{-fomit-frame-pointer,@}\"\n+@end example\n+\n+will generate four combinations, all involving @samp{-Wextra}.\n+\n+The disadvantage to this method is that the testsuites are run in serial,\n+which is a waste on multiprocessor systems.  For users with GNU Make and\n+a shell which performs brace expansion, you can run the testsuites in\n+parallel by having the shell perform the combinations and @command{make}\n+do the parallel runs.  Instead of using @samp{--target_board}, use a\n+special makefile target:\n+\n+@example\n+    make -j@var{N} check-@var{testsuite}//@var{test-target}/@var{option1}/@var{option2}/@dots{}\n+@end example\n+\n+For example,\n+\n+@example\n+    make -j3 check-gcc//sh-hms-sim/@{-m1,-m2,-m3,-m3e,-m4@}/@{,-nofpu@}\n+@end example\n+\n+will run three concurrent ``make-gcc'' testsuites, eventually testing all\n+ten combinations as described above.  Note that this is currently only\n+supported in the @file{gcc} subdirectory.  (To see how this works, try\n+typing @command{echo} before the example given here.)\n+\n+\n+@section Additional testing for Java Class Libraries\n+\n The Java runtime tests can be executed via @samp{make check}\n in the @file{@var{target}/libjava/testsuite} directory in\n the build tree.\n \n-@section Additional testing for Java Class Libraries\n-\n The @uref{http://sources.redhat.com/mauve/,,Mauve Project} provides\n a suite of tests for the Java Class Libraries.  This suite can be run\n as part of libgcj testing by placing the Mauve tree within the libjava"}]}