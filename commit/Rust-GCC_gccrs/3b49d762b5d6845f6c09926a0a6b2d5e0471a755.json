{"sha": "3b49d762b5d6845f6c09926a0a6b2d5e0471a755", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I0OWQ3NjJiNWQ2ODQ1ZjZjMDk5MjZhMGE2YjJkNWUwNDcxYTc1NQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@cs.tamu.edu", "date": "2010-10-27T19:04:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-10-27T19:04:06Z"}, "message": "class.c (check_bases): Propagate non-literality.\n\n\t* class.c (check_bases): Propagate non-literality.\n\t(check_field_decls): Likewise.\n\t(finalize_literal_type_property): New.\n\t(check_bases_and_members): Call it.\n\t* cp-tree.h (TYPE_HAS_CONSTEXPR_CTOR): New.\n\t(lang_type_class): Add has_constexpr_ctor field.\n\t(DECL_DECLARED_CONSTEXPR_P): Strip template.\n\t* decl.c (grok_special_member_properties): Set\n\tTYPE_HAS_CONSTEXPR_CTOR.\n\nCo-Authored-By: Jason Merrill <jason@redhat.com>\n\nFrom-SVN: r166012", "tree": {"sha": "20c0a5070bcb65304f258d5cd324f9c98af07721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20c0a5070bcb65304f258d5cd324f9c98af07721"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b49d762b5d6845f6c09926a0a6b2d5e0471a755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b49d762b5d6845f6c09926a0a6b2d5e0471a755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b49d762b5d6845f6c09926a0a6b2d5e0471a755", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/comments", "author": null, "committer": null, "parents": [{"sha": "61f8d16512a62120c29e1cc82cddbc4d3816a1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f8d16512a62120c29e1cc82cddbc4d3816a1c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f8d16512a62120c29e1cc82cddbc4d3816a1c4"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "95a2f8b55ee5de6b250a8e4f4a13d59c0a69c07e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3b49d762b5d6845f6c09926a0a6b2d5e0471a755", "patch": "@@ -1,3 +1,16 @@\n+2010-10-27  Gabriel Dos Reis  <gdr@cse.tamu.edu>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\t* class.c (check_bases): Propagate non-literality.\n+\t(check_field_decls): Likewise.\n+\t(finalize_literal_type_property): New.\n+\t(check_bases_and_members): Call it.\n+\t* cp-tree.h (TYPE_HAS_CONSTEXPR_CTOR): New.\n+\t(lang_type_class): Add has_constexpr_ctor field.\n+\t(DECL_DECLARED_CONSTEXPR_P): Strip template.\n+\t* decl.c (grok_special_member_properties): Set\n+\tTYPE_HAS_CONSTEXPR_CTOR.\n+\n 2010-10-27  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (build_integral_nontype_arg_conv): New."}, {"sha": "00af0aee9f4ab92208151f1367df9167d3d7b450", "filename": "gcc/cp/class.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3b49d762b5d6845f6c09926a0a6b2d5e0471a755", "patch": "@@ -1269,6 +1269,10 @@ check_bases (tree t,\n \n       gcc_assert (COMPLETE_TYPE_P (basetype));\n \n+      /* If any base class is non-literal, so is the derived class.  */\n+      if (!CLASSTYPE_LITERAL_P (basetype))\n+        CLASSTYPE_LITERAL_P (t) = false;\n+\n       /* Effective C++ rule 14.  We only need to check TYPE_POLYMORPHIC_P\n \t here because the case of virtual functions but non-virtual\n \t dtor is handled in finish_struct_1.  */\n@@ -3051,6 +3055,11 @@ check_field_decls (tree t, tree *access_decls,\n       if (TREE_PRIVATE (x) || TREE_PROTECTED (x))\n \tCLASSTYPE_NON_AGGREGATE (t) = 1;\n \n+      /* If at least one non-static data member is non-literal, the whole\n+         class becomes non-literal.  */\n+      if (!literal_type_p (type))\n+        CLASSTYPE_LITERAL_P (t) = false;\n+\n       /* A standard-layout class is a class that:\n \t ...\n \t has the same access control (Clause 11) for all non-static data members,\n@@ -4455,6 +4464,41 @@ type_requires_array_cookie (tree type)\n   return has_two_argument_delete_p;\n }\n \n+/* Finish computing the `literal type' property of class type T.\n+\n+   At this point, we have already processed base classes and\n+   non-static data members.  We need to check whether the copy\n+   constructor is trivial, the destructor is trivial, and there\n+   is a trivial default constructor or at least one constexpr\n+   constructor other than the copy constructor.  */\n+\n+static void\n+finalize_literal_type_property (tree t)\n+{\n+  if (cxx_dialect < cxx0x\n+      || TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t)\n+      /* FIXME These constraints seem unnecessary; remove from standard.\n+\t || !TYPE_HAS_TRIVIAL_COPY_CTOR (t)\n+\t || TYPE_HAS_COMPLEX_MOVE_CTOR (t)*/ )\n+    CLASSTYPE_LITERAL_P (t) = false;\n+  else if (CLASSTYPE_LITERAL_P (t) && !TYPE_HAS_TRIVIAL_DFLT (t)\n+\t   && !TYPE_HAS_CONSTEXPR_CTOR (t))\n+    CLASSTYPE_LITERAL_P (t) = false;\n+\n+  if (!CLASSTYPE_LITERAL_P (t) && !CLASSTYPE_TEMPLATE_INSTANTIATION (t))\n+    {\n+      tree fn;\n+      for (fn = TYPE_METHODS (t); fn; fn = DECL_CHAIN (fn))\n+\tif (DECL_DECLARED_CONSTEXPR_P (fn)\n+\t    && DECL_NONSTATIC_MEMBER_FUNCTION_P (fn)\n+\t    && !DECL_CONSTRUCTOR_P (fn))\n+\t  {\n+\t    error (\"enclosing class of %q+D is not a literal type\", fn);\n+\t    DECL_DECLARED_CONSTEXPR_P (fn) = false;\n+\t  }\n+    }\n+}\n+\n /* Check the validity of the bases and members declared in T.  Add any\n    implicitly-generated functions (like copy-constructors and\n    assignment operators).  Compute various flag bits (like\n@@ -4611,6 +4655,10 @@ check_bases_and_members (tree t)\n       CLASSTYPE_NON_AGGREGATE (t) = 1;\n     }\n \n+  /* Compute the 'literal type' property before we\n+     do anything with non-static member functions.  */\n+  finalize_literal_type_property (t);\n+\n   /* Create the in-charge and not-in-charge variants of constructors\n      and destructors.  */\n   clone_constructors_and_destructors (t);\n@@ -5445,6 +5493,7 @@ finish_struct_1 (tree t)\n   CLASSTYPE_EMPTY_P (t) = 1;\n   CLASSTYPE_NEARLY_EMPTY_P (t) = 1;\n   CLASSTYPE_CONTAINS_EMPTY_CLASS_P (t) = 0;\n+  CLASSTYPE_LITERAL_P (t) = true;\n \n   /* Do end-of-class semantic processing: checking the validity of the\n      bases and members and add implicitly generated methods.  */"}, {"sha": "8c0c9b13fd2120f6bd2a0e1478850a351e0ed94f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3b49d762b5d6845f6c09926a0a6b2d5e0471a755", "patch": "@@ -1324,6 +1324,7 @@ struct GTY(()) lang_type_class {\n   unsigned lazy_move_assign : 1;\n   unsigned has_complex_move_ctor : 1;\n   unsigned has_complex_move_assign : 1;\n+  unsigned has_constexpr_ctor : 1;\n \n   /* When adding a flag here, consider whether or not it ought to\n      apply to a template instance if it applies to the template.  If\n@@ -1332,7 +1333,7 @@ struct GTY(()) lang_type_class {\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 4;\n+  unsigned dummy : 3;\n \n   tree primary_base;\n   VEC(tree_pair_s,gc) *vcall_indices;\n@@ -1457,6 +1458,12 @@ struct GTY((variable_size)) lang_type {\n #define TYPE_HAS_LIST_CTOR(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->has_list_ctor)\n \n+/* Nonzero if this class has a constexpr constructor other than a copy/move\n+   constructor.  Note that a class can have constexpr constructors for\n+   static initialization even if it isn't a literal class.  */\n+#define TYPE_HAS_CONSTEXPR_CTOR(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->has_constexpr_ctor)\n+\n /* Nonzero if this class defines an overloaded operator new.  (An\n    operator new [] doesn't count.)  */\n #define TYPE_HAS_NEW_OPERATOR(NODE) \\\n@@ -2334,7 +2341,7 @@ struct GTY((variable_size)) lang_decl {\n \n /* True if DECL is declared 'constexpr'.  */\n #define DECL_DECLARED_CONSTEXPR_P(DECL) \\\n-  DECL_LANG_FLAG_8 (VAR_OR_FUNCTION_DECL_CHECK (DECL))\n+  DECL_LANG_FLAG_8 (VAR_OR_FUNCTION_DECL_CHECK (STRIP_TEMPLATE (DECL)))\n \n /* Nonzero if this DECL is the __PRETTY_FUNCTION__ variable in a\n    template function.  */"}, {"sha": "e27a64d8170a04b37718fa10034e6de12653596d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3b49d762b5d6845f6c09926a0a6b2d5e0471a755", "patch": "@@ -10292,6 +10292,10 @@ grok_special_member_properties (tree decl)\n \tTYPE_HAS_COMPLEX_MOVE_CTOR (class_type) = 1;\n       else if (is_list_ctor (decl))\n \tTYPE_HAS_LIST_CTOR (class_type) = 1;\n+\n+      if (DECL_DECLARED_CONSTEXPR_P (decl)\n+\t  && !copy_fn_p (decl) && !move_fn_p (decl))\n+\tTYPE_HAS_CONSTEXPR_CTOR (class_type) = 1;\n     }\n   else if (DECL_OVERLOADED_OPERATOR_P (decl) == NOP_EXPR)\n     {"}, {"sha": "4e73068324f4e8993651e2a6eba54349b6b4d6c9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b49d762b5d6845f6c09926a0a6b2d5e0471a755/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3b49d762b5d6845f6c09926a0a6b2d5e0471a755", "patch": "@@ -5245,6 +5245,7 @@ float_const_decimal64_p (void)\n   return 0;\n }\n \n+\f\n /* Return true if T is a literal type.   */\n \n bool\n@@ -5259,7 +5260,6 @@ literal_type_p (tree t)\n   return false;\n }\n \n-\n /* If DECL is a variable declared `constexpr', require its type\n    be literal.  Return the DECL if OK, otherwise NULL.  */\n "}]}