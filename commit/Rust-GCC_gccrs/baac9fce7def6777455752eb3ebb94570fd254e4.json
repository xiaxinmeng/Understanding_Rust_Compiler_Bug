{"sha": "baac9fce7def6777455752eb3ebb94570fd254e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFhYzlmY2U3ZGVmNjc3NzQ1NTc1MmViM2ViYjk0NTcwZmQyNTRlNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-04-06T06:08:17Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-04-06T06:08:17Z"}, "message": "Warn when using backward headers.\n\n\n2001-04-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tWarn when using backward headers.\n\t* include/backward/algo.h: Include warning file.\n\t* include/backward/vector.h: Same.\n\t* include/backward/tree.h: Same.\n\t* include/backward/tempbuf.h: Same.\n\t* include/backward/strstream: Same.\n\t* include/backward/streambuf.h: Same.\n\t* include/backward/stream.h: Same.\n\t* include/backward/stack.h: Same.\n\t* include/backward/slist.h: Same.\n\t* include/backward/set.h: Same.\n\t* include/backward/rope.h:\n\t* include/backward/queue.h: Same.\n\t* include/backward/pair.h: Same.\n\t* include/backward/ostream.h: Same.\n\t* include/backward/new.h: Same.\n\t* include/backward/multiset.h: Same.\n\t* include/backward/multimap.h: Same.\n\t* include/backward/map.h: Same.\n\t* include/backward/list.h: Same.\n\t* include/backward/iterator.h: Same.\n\t* include/backward/istream.h: Same.\n\t* include/backward/iostream.h:\n\t* include/backward/iomanip.h:\n\t* include/backward/heap.h: Same.\n\t* include/backward/hashtable.h:\n\t* include/backward/hash_set.h:\n\t* include/backward/hash_map.h:\n\t* include/backward/function.h:\n\t* include/backward/fstream.h:\n\t* include/backward/deque.h:\n\t* include/backward/defalloc.h: Same.\n\t* include/backward/complex.h: Same.\n\t* include/backward/bvector.h:\n\t* include/backward/alloc.h:\n\t* include/backward/algobase.h: Same.\n\n\t* include/backward/backward_warning.h: New file.\n\t* src/Makefile.am (backward_headers): Add backward_warning.h\n\t* src/Makefile.in: Regenerate.\n\n2001-04-05  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/Makefile.am (myinstalldirs): Make sure backward directory is\n\tcreated.\n\t(myinstallheaders): Install backward headers in backward directory.\n\t* src/Makefile.in: Regenerate.\n\nFrom-SVN: r41139", "tree": {"sha": "d022742d81c0c21615e2eb388ee3196a0bfed163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d022742d81c0c21615e2eb388ee3196a0bfed163"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baac9fce7def6777455752eb3ebb94570fd254e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baac9fce7def6777455752eb3ebb94570fd254e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baac9fce7def6777455752eb3ebb94570fd254e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baac9fce7def6777455752eb3ebb94570fd254e4/comments", "author": null, "committer": null, "parents": [{"sha": "7c0927142c51ad22532fb77f0a8027836cd1f8e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c0927142c51ad22532fb77f0a8027836cd1f8e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c0927142c51ad22532fb77f0a8027836cd1f8e9"}], "stats": {"total": 452, "additions": 190, "deletions": 262}, "files": [{"sha": "554fbeeeae44c491937760e91786f251a1dfce6b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -1,3 +1,53 @@\n+2001-04-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tWarn when using backward headers.\n+\t* include/backward/algo.h: Include warning file.\t\n+\t* include/backward/vector.h: Same.\n+\t* include/backward/tree.h: Same.\n+\t* include/backward/tempbuf.h: Same.\n+\t* include/backward/strstream: Same.\n+\t* include/backward/streambuf.h: Same.\n+\t* include/backward/stream.h: Same.\n+\t* include/backward/stack.h: Same.\n+\t* include/backward/slist.h: Same.\n+\t* include/backward/set.h: Same.\n+\t* include/backward/rope.h: \n+\t* include/backward/queue.h: Same.\n+\t* include/backward/pair.h: Same.\n+\t* include/backward/ostream.h: Same.\n+\t* include/backward/new.h: Same.\n+\t* include/backward/multiset.h: Same.\n+\t* include/backward/multimap.h: Same.\n+\t* include/backward/map.h: Same.\n+\t* include/backward/list.h: Same.\n+\t* include/backward/iterator.h: Same.\n+\t* include/backward/istream.h: Same.\n+\t* include/backward/iostream.h: \n+\t* include/backward/iomanip.h: \n+\t* include/backward/heap.h: Same.\n+\t* include/backward/hashtable.h: \n+\t* include/backward/hash_set.h: \n+\t* include/backward/hash_map.h: \n+\t* include/backward/function.h: \n+\t* include/backward/fstream.h: \n+\t* include/backward/deque.h: \n+\t* include/backward/defalloc.h: Same.\n+\t* include/backward/complex.h: Same.\n+\t* include/backward/bvector.h: \n+\t* include/backward/alloc.h: \n+\t* include/backward/algobase.h: Same.\n+\n+\t* include/backward/backward_warning.h: New file.\n+\t* src/Makefile.am (backward_headers): Add backward_warning.h\n+\t* src/Makefile.in: Regenerate.\n+\n+2001-04-05  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/Makefile.am (myinstalldirs): Make sure backward directory is\n+\tcreated.\n+\t(myinstallheaders): Install backward headers in backward directory.\n+\t* src/Makefile.in: Regenerate.\n+\t\n 2001-04-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPrepare for libstdc++-2.92."}, {"sha": "6fb1b8f22ccee649b2c6b771845acbab794ac3a7", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -135,48 +135,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS = \\\n-\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n-\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n-\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n-\t\"CFLAGS=$(CFLAGS)\" \\\n-\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n-\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n-\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n-\t\"INSTALL=$(INSTALL)\" \\\n-\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n-\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n-\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n-\t\"LDFLAGS=$(LDFLAGS)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n-\t\"MAKE=$(MAKE)\" \\\n-\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n-\t\"SHELL=$(SHELL)\" \\\n-\t\"EXPECT=$(EXPECT)\" \\\n-\t\"RUNTEST=$(RUNTEST)\" \\\n-\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n-\t\"exec_prefix=$(exec_prefix)\" \\\n-\t\"infodir=$(infodir)\" \\\n-\t\"libdir=$(libdir)\" \\\n-\t\"includedir=$(includedir)\" \\\n-\t\"prefix=$(prefix)\" \\\n-\t\"tooldir=$(tooldir)\" \\\n-\t\"AR=$(AR)\" \\\n-\t\"AS=$(AS)\" \\\n-\t\"CC=$(CC)\" \\\n-\t\"CXX=$(CXX)\" \\\n-\t\"LD=$(LD)\" \\\n-\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n-\t\"PICFLAG=$(PICFLAG)\" \\\n-\t\"RANLIB=$(RANLIB)\" \\\n-\t\"NM=$(NM)\" \\\n-\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n-\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n-\t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h"}, {"sha": "20a2dd2d38054f9b3e755c6298e071199dc1b278", "filename": "libstdc++-v3/include/backward/algo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgo.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_ALGO_H\n #define _CPP_BACKWARD_ALGO_H 1\n \n+#include \"backward_warning.h\"\n #include \"algobase.h\"\n #include \"tempbuf.h\"\n #include \"iterator.h\""}, {"sha": "f9adcc036ae9ca5409920e5f147abbbc9a829de9", "filename": "libstdc++-v3/include/backward/algobase.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falgobase.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -26,6 +26,7 @@\n #ifndef _CPP_BACKWARD_ALGOBASE_H\n #define _CPP_BACKWARD_ALGOBASE_H 1\n \n+#include \"backward_warning.h\"\n #include \"pair.h\"\n #include \"iterator.h\"\n #include <bits/stl_algobase.h>"}, {"sha": "54a6fb17a401b3560dea5352a72940b43537af8d", "filename": "libstdc++-v3/include/backward/alloc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -14,6 +14,7 @@\n #ifndef _CPP_BACKWARD_ALLOC_H\n #define _CPP_BACKWARD_ALLOC_H 1\n \n+#include \"backward_warning.h\"\n #include <bits/c++config.h>\n #include <bits/stl_alloc.h>\n "}, {"sha": "973dee00314db6c675254818c52e43ffc26ab1ab", "filename": "libstdc++-v3/include/backward/backward_warning.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbackward_warning.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#ifndef _CPP_BACKWARD_BACKWARD_WARNING_H\n+#define _CPP_BACKWARD_BACKWARD_WARNING_H 1\n+\n+#ifdef __DEPRECATED\n+# warning \"This file includes at least one deprecated or antiquated header.\"\n+# warning \"Please use the <X> file instead of <X.h> file for \"C++\" includes\"\n+# warning \"and use the <cX> file instead of <X.h> file for \"C\" includes.\"\n+# warning \"To disable this warning use -Wno-deprecated.\"\n+#endif\n+\n+#endif"}, {"sha": "8a1ab0d393d4b5087b80015727b2e523b7483ffa", "filename": "libstdc++-v3/include/backward/bvector.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fbvector.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -28,6 +28,7 @@\n #define __SGI_STL_BVECTOR_H\n \n \n+#include \"backward_warning.h\"\n #include <bits/std_vector.h>\n \n using std::bit_vector;"}, {"sha": "c7e1d1c1bec7cb89c890dc58ebaa2a1ea7966157", "filename": "libstdc++-v3/include/backward/complex.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -28,6 +28,7 @@\n #ifndef _CPP_BACKWARD_COMPLEX_H\n #define _CPP_BACKWARD_COMPLEX_H 1\n \n+#include \"backward_warning.h\"\n #include <bits/std_complex.h>\n \n using std::complex;"}, {"sha": "5f4428f9e08389b2c1f9e724bad7ab39a376fa27", "filename": "libstdc++-v3/include/backward/defalloc.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdefalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdefalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdefalloc.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -26,6 +26,7 @@\n #ifndef _CPP_BACKWARD_DEFALLOC_H\n #define _CPP_BACKWARD_DEFALLOC_H 1\n \n+#include \"backward_warning.h\"\n #include \"new.h\"\n #include <stddef.h>\n #include <stdlib.h>"}, {"sha": "81284518e501352c9b1428787236fa067e9be570", "filename": "libstdc++-v3/include/backward/deque.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fdeque.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_DEQUE_H\n #define _CPP_BACKWARD_DEQUE_H 1\n \n+#include \"backward_warning.h\"\n #include \"algobase.h\"\n #include \"alloc.h\"\n #include <bits/std_deque.h>"}, {"sha": "4f03e4c6c845bac817ce5ea01cde4ea3f62a2e3a", "filename": "libstdc++-v3/include/backward/fstream.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,6 +28,7 @@\n #ifndef _CPP_BACKWARD_FSTREAM_H\n #define _CPP_BACKWARD_FSTREAM_H 1\n \n+#include \"backward_warning.h\"\n #include <bits/std_fstream.h>\n \n using std::filebuf;"}, {"sha": "a49c36ba1cd3207e7f4a3cadecf03d65e2092d68", "filename": "libstdc++-v3/include/backward/function.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_FUNCTION_H\n #define _CPP_BACKWARD_FUNCTION_H 1\n \n+#include \"backward_warning.h\"\n #include <bits/c++config.h>\n #include <stddef.h>\n #include <bits/stl_function.h>"}, {"sha": "b5d0da2d53dd67d35e2b75a1aa3618684772b218", "filename": "libstdc++-v3/include/backward/hash_map.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_map.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_HASH_MAP_H\n #define _CPP_BACKWARD_HASH_MAP_H 1\n \n+#include \"backward_warning.h\"\n #include \"algobase.h\"\n #include <ext/hash_map>\n "}, {"sha": "b09ba41d066ee4e2ea45c8e92b3d55efb646d010", "filename": "libstdc++-v3/include/backward/hash_set.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhash_set.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_HASH_SET_H\n #define _CPP_BACKWARD_HASH_SET_H 1\n \n+#include \"backward_warning.h\"\n #include \"algobase.h\"\n #include <ext/hash_set>\n "}, {"sha": "d5d138efa5ec786c374c4ad36f8a963c770a1e2f", "filename": "libstdc++-v3/include/backward/hashtable.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fhashtable.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -31,6 +31,7 @@\n #ifndef _CPP_BACKWARD_HASHTABLE_H\n #define _CPP_BACKWARD_HASHTABLE_H 1\n \n+#include \"backward_warning.h\"\n #include <ext/stl_hashtable.h>\n #include \"algo.h\"\n #include \"alloc.h\""}, {"sha": "eb0161b3ec0e5f055b2b90dc3ff974f63be320aa", "filename": "libstdc++-v3/include/backward/heap.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -26,6 +26,7 @@\n #ifndef _CPP_BACKWARD_HEAP_H\n #define _CPP_BACKWARD_HEAP_H 1\n \n+#include \"backward_warning.h\"\n #include <bits/c++config.h>\n #include <bits/stl_heap.h>\n "}, {"sha": "dad183edde16f1b741f033ded538750de2adb0fe", "filename": "libstdc++-v3/include/backward/iomanip.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -28,6 +28,7 @@\n #ifndef _CPP_BACKWARD_IOMANIP_H\n #define _CPP_BACKWARD_IOMANIP_H 1\n \n+#include \"backward_warning.h\"\n #include \"iostream.h\"\n #include <bits/std_iomanip.h>\n "}, {"sha": "0d258af1434b34abb217d8468cbb39f1c671cc75", "filename": "libstdc++-v3/include/backward/iostream.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -28,6 +28,7 @@\n #ifndef _CPP_BACKWARD_IOSTREAM_H\n #define _CPP_BACKWARD_IOSTREAM_H 1\n \n+#include \"backward_warning.h\"\n #include <bits/std_iostream.h>\n \n using std::iostream;"}, {"sha": "059e7742e2fa0dafc7a5053befe0196011b3df7a", "filename": "libstdc++-v3/include/backward/istream.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -28,6 +28,7 @@\n #ifndef _CPP_BACKWARD_ISTREAM_H\n #define _CPP_BACKWARD_ISTREAM_H 1\n \n+#include \"backward_warning.h\"\n #include \"iostream.h\"\n \n #endif"}, {"sha": "eea2c01c960c0e03b78f15a745ba88a6ba2f6659", "filename": "libstdc++-v3/include/backward/iterator.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiterator.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_ITERATOR_H\n #define _CPP_BACKWARD_ITERATOR_H 1\n \n+#include \"backward_warning.h\"\n #include \"function.h\"\n #include <stddef.h>\n #include \"iostream.h\""}, {"sha": "27d3cd3c0f5d3c91401f02c74a3be9a1fb1be6e8", "filename": "libstdc++-v3/include/backward/list.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Flist.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_LIST_H\n #define _CPP_BACKWARD_LIST_H 1\n \n+#include \"backward_warning.h\"\n #include \"algobase.h\"\n #include \"alloc.h\"\n #include <bits/std_list.h>"}, {"sha": "911f59e51e4bb39d30dd182d97a6f02ded216073", "filename": "libstdc++-v3/include/backward/map.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmap.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_MAP_H\n #define _CPP_BACKWARD_MAP_H 1\n \n+#include \"backward_warning.h\"\n #include \"tree.h\"\n #include <bits/std_map.h>\n "}, {"sha": "1ecbb8152c45941c295d417f3bf89a3fbe526601", "filename": "libstdc++-v3/include/backward/multimap.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultimap.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_MULTIMAP_H\n #define _CPP_BACKWARD_MULTIMAP_H 1\n \n+#include \"backward_warning.h\"\n #include \"tree.h\"\n #include <bits/std_map.h>\n "}, {"sha": "19a2f4cb0a00ba0b337cb9cf413e209d8605a096", "filename": "libstdc++-v3/include/backward/multiset.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fmultiset.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_MULTISET_H\n #define _CPP_BACKWARD_MULTISET_H 1\n \n+#include \"backward_warning.h\"\n #include \"tree.h\"\n #include <bits/std_set.h>\n "}, {"sha": "8e4c5c939975d351702dbfb7bf2f8eba142f2cb6", "filename": "libstdc++-v3/include/backward/new.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -30,6 +30,7 @@\n #ifndef _CPP_BACKWARD_NEW_H\n #define _CPP_BACKWARD_NEW_H 1\n \n+#include \"backward_warning.h\"\n #include <new>\n \n using std::bad_alloc;"}, {"sha": "4c74756192ea64097d0a9ba85fbe0edc37509cb2", "filename": "libstdc++-v3/include/backward/ostream.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -28,6 +28,7 @@\n #ifndef _CPP_BACKWARD_OSTREAM_H\n #define _CPP_BACKWARD_OSTREAM_H 1\n \n+#include \"backward_warning.h\"\n #include \"iostream.h\"\n \n #endif "}, {"sha": "b0ce3cc5a3af0aad8ca238f52bc520d9a9c55f1d", "filename": "libstdc++-v3/include/backward/pair.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_PAIR_H\n #define _CPP_BACKWARD_PAIR_H 1\n \n+#include \"backward_warning.h\"\n #include <bits/c++config.h>\n #include <bits/stl_pair.h>\n "}, {"sha": "6eaf246a18b3d5ff0b4d58d9c78f23453edc27a4", "filename": "libstdc++-v3/include/backward/queue.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fqueue.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -28,6 +28,7 @@\n #ifndef _CPP_BACKWARD_QUEUE_H\n #define _CPP_BACKWARD_QUEUE_H 1\n \n+#include \"backward_warning.h\"\n #include <bits/std_queue.h>\n \n using std::queue;"}, {"sha": "abbef9efd6fe5b1fab7accf7916245a97142339b", "filename": "libstdc++-v3/include/backward/rope.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Frope.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -14,6 +14,7 @@\n #ifndef _CPP_BACKWARD_ROPE_H\n #define _CPP_BACKWARD_ROPE_H 1\n \n+#include \"backward_warning.h\"\n #include \"hashtable.h\"   \n #include <ext/rope>\n "}, {"sha": "68d3c4cb935ad2f6d6dcd620932c3cd8c60496ae", "filename": "libstdc++-v3/include/backward/set.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fset.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_SET_H\n #define _CPP_BACKWARD_SET_H 1\n \n+#include \"backward_warning.h\"\n #include \"tree.h\"\n #include <bits/std_set.h>\n "}, {"sha": "b643740ba7532fdd7b5bdf79c5afa576d662cf5c", "filename": "libstdc++-v3/include/backward/slist.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fslist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fslist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fslist.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -15,6 +15,7 @@\n #ifndef _CPP_BACKWARD_SLIST_H\n #define _CPP_BACKWARD_SLIST_H 1\n \n+#include \"backward_warning.h\"\n #include <ext/slist>\n \n using std::slist;"}, {"sha": "48342365b516591ad2eb9e8b939a6822accf627b", "filename": "libstdc++-v3/include/backward/stack.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstack.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_STACK_H\n #define _CPP_BACKWARD_STACK_H 1\n \n+#include \"backward_warning.h\"\n #include \"vector.h\"\n #include \"deque.h\"\n #include \"heap.h\""}, {"sha": "21a851decd8a90cc66dabfdca95df54c86382102", "filename": "libstdc++-v3/include/backward/stream.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -28,6 +28,7 @@\n #ifndef _CPP_BACKWARD_STREAM_H\n #define _CPP_BACKWARD_STREAM_H 1\n \n+#include \"backward_warning.h\"\n #include \"iostream.h\"\n \n #endif "}, {"sha": "3965816dc451ac36e117e197963301528a5cfe61", "filename": "libstdc++-v3/include/backward/streambuf.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -28,6 +28,7 @@\n #ifndef _CPP_BACKWARD_STREAMBUF_H\n #define _CPP_BACKWARD_STREAMBUF_H 1\n \n+#include \"backward_warning.h\"\n #include <bits/std_streambuf.h>\n \n using std::streambuf;"}, {"sha": "ed9a6b84418350cfcac11506c970949c53f15aad", "filename": "libstdc++-v3/include/backward/strstream", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -19,10 +19,7 @@\n #ifndef __SGI_STL_STRSTREAM\n #define __SGI_STL_STRSTREAM\n \n-#if defined(__sgi) && !defined(__GNUC__) && !defined(_STANDARD_C_PLUS_PLUS)\n-#error This header file requires the -LANG:std option\n-#endif\n-\n+#include \"backward_warning.h\"\n #include <bits/std_iosfwd.h>\n #include <bits/std_ios.h>\n #include <bits/std_istream.h>"}, {"sha": "afb81bf64d4e79c03a087b496287c24e9dcd2094", "filename": "libstdc++-v3/include/backward/tempbuf.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftempbuf.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_TEMPBUF_H\n #define _CPP_BACKWARD_TEMPBUF_H 1\n \n+#include \"backward_warning.h\"\n #include \"pair.h\"\n #include \"iterator.h\"\n #include <limits.h>"}, {"sha": "9c732236f1a21b04bde10e78d79cfa32927b0938", "filename": "libstdc++-v3/include/backward/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ftree.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -16,6 +16,7 @@\n #ifndef _CPP_EXT_TREE\n #define _CPP_EXT_TREE 1\n \n+#include \"backward_warning.h\"\n #include <bits/stl_tree.h>\n \n using std::rb_tree;"}, {"sha": "cea51ebc195fd38649f5a57c5b5f6be985794242", "filename": "libstdc++-v3/include/backward/vector.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fvector.h?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -27,6 +27,7 @@\n #ifndef _CPP_BACKWARD_VECTOR_H\n #define _CPP_BACKWARD_VECTOR_H 1\n \n+#include \"backward_warning.h\"\n #include \"algobase.h\"\n #include \"alloc.h\"  \n #include <bits/std_vector.h>"}, {"sha": "07b420558db6b268f9728ae3f68a6ae4c17b56ba", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -111,7 +111,7 @@ xcompiling = @xcompiling@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -123,21 +123,14 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers = \\\n-        libio.h libioP.h iolibio.h\n+libio_headers =          libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n-@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n-@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "4aa5b2a1d8fd8d3a1b3eff624c638dfb14f8748c", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -114,24 +114,18 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes = \\\n-\thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n \n \n-EXTRA_DIST = \\\n-\thypot.c hypotf.c atan2f.c expf.c \\\n-\t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST =  \thypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD = \\\n-\t@LIBMATHOBJS@ \\\n-\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES = \\\n-\tsignbit.c signbitf.c\n+libmath_la_SOURCES =  \tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -145,9 +139,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n-\t$(TOPLEVEL_INCLUDES) \n+INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "edeec53e47e77659553eb1686f56b8db57936179", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 12, "deletions": 48, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -129,13 +129,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -147,38 +145,13 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t $(LIBSUPCXX_INCLUDES)\n-\n-\n-headers = \\\n-\texception new typeinfo cxxabi.h exception_defines.h \n-\n-\n-sources = \\\n-\tdel_op.cc \\\n-\tdel_opnt.cc \\\n-\tdel_opv.cc \\\n-\tdel_opvnt.cc \\\n-\teh_alloc.cc \\\n-\teh_aux_runtime.cc \\\n-\teh_catch.cc \\\n-\teh_exception.cc \\\n-\teh_globals.cc \\\n-\teh_personality.cc \\\n-\teh_terminate.cc \\\n-\teh_throw.cc \\\n-\tnew_handler.cc \\\n-\tnew_op.cc \\\n-\tnew_opnt.cc \\\n-\tnew_opv.cc \\\n-\tnew_opvnt.cc \\\n-\tpure.cc \\\n-\ttinfo.cc \\\n-\ttinfo2.cc \\\n-\tvec.cc\n+INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n+\n+\n+headers =  \texception new typeinfo cxxabi.h exception_defines.h \n+\n+\n+sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \teh_alloc.cc \teh_aux_runtime.cc \teh_catch.cc \teh_exception.cc \teh_globals.cc \teh_personality.cc \teh_terminate.cc \teh_throw.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -194,12 +167,7 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -223,9 +191,7 @@ AM_CXXFLAGS = \\\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-               --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -234,9 +200,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared \\\n-          --mode=link $(CXX) \\\n-          @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --tag disable-shared           --mode=link $(CXX)           @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "055c7cd25dbad2d5d1e48315e517b347c0019b88", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.80 2001/03/31 20:15:43 bkoz Exp $\n+## $Id: Makefile.am,v 1.81 2001/04/03 00:26:58 pme Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -110,7 +110,7 @@ backward_headers = \\\n \tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \\\n \tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \\\n \tbackward/vector.h backward/fstream.h backward/strstream.h \\\n-\tbackward/strstream\n+\tbackward/strstream backward/backward_warning.h\n \n ext_headers = \\\n \text/rope ext/ropeimpl.h ext/stl_rope.h \\\n@@ -234,6 +234,7 @@ install-data-local: myinstalldirs myinstallheaders\n # NB: installation of shadow header directories is not attempted.\n myinstalldirs:\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n+\t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/backward; \\\n \t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/bits; \\\n \t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/ext; \\\n \t$(mkinstalldirs) $(DESTDIR)$(gxx_target_include_dir)/bits; \\\n@@ -248,19 +249,19 @@ c_incdir = @C_INCLUDE_DIR@\n myinstallheaders: \n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(base_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/\";\\\n \t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/; \\\n \tdone; \\\n \tfor i in $(ext_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/\"; \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/\";\\\n \t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/; \\\n \tdone; \\\n \tfor i in $(backward_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)\"; \\\n-\t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir); \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/backward/\";\\\n+\t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/backward/; \\\n \tdone; \\\n \tfor i in $(c_base_headers); do \\\n-\techo \"$(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n+\techo \"$(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/\";\\\n \t  $(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/; \\\n \tdone; \\\n \tfor i in $(std_headers); do \\"}, {"sha": "21c3b02d0f510af54aa8ddad851494b8218328fe", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 33, "deletions": 129, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -121,13 +121,11 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) -fdiagnostics-show-location=once\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -139,132 +137,44 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n-\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n-\t$(TOPLEVEL_INCLUDES)\n-\n-\n-base_headers = \\\n-\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n-\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n-\tbits/basic_string.tcc \\\n-\tbits/generic_shadow.h bits/std_utility.h \\\n-\tbits/std_complex.h \\\n-\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n-\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n-\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n-\tbits/std_fstream.h bits/std_iomanip.h \\\n-\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n-\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n-\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n-\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n-\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n-\tbits/streambuf.tcc bits/basic_file.h \\\n-\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n-\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n-\tbits/stl_threads.h \\\n-\tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \\\n-\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n-\tbits/std_iterator.h bits/std_list.h \\\n-\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n-\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n-\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n-\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n-\tbits/stl_deque.h bits/stl_function.h \\\n-\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n-\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n-\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n-\tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \\\n-\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n-\tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \\\n-\tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n-\n-\n-backward_headers = \\\n-\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n-\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n-\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n-\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n-\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n-\tbackward/hashtable.h backward/heap.h backward/iostream.h \\\n-\tbackward/iterator.h backward/list.h backward/map.h \\\n-\tbackward/multimap.h backward/new.h backward/multiset.h \\\n-\tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \\\n-\tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \\\n-\tbackward/vector.h backward/fstream.h backward/strstream.h \\\n-\tbackward/strstream\n-\n-\n-ext_headers = \\\n-\text/rope ext/ropeimpl.h ext/stl_rope.h \\\n-\text/slist ext/hash_map ext/hash_set \\\n-\text/stl_hashtable.h ext/stl_hash_fun.h \n-\n-\n-c_base_headers = \\\n-\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n-\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n-\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n-\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n-\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n-\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n-@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n+INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\n+\n+\n+base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h \tbits/stl_iterator_base_types.h bits/stl_iterator_base_funcs.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h bits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/stl_bvector.h bits/type_traits.h bits/std_algorithm.h \tbits/stl_construct.h bits/boost_concept_check.h bits/concept_check.h\n+\n+\n+backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iostream.h \tbackward/iterator.h backward/list.h backward/map.h \tbackward/multimap.h backward/new.h backward/multiset.h \tbackward/pair.h backward/queue.h backward/rope.h backward/set.h \tbackward/slist.h backward/stack.h backward/tempbuf.h backward/tree.h \tbackward/vector.h backward/fstream.h backward/strstream.h \tbackward/strstream backward/backward_warning.h\n+\n+\n+ext_headers =  \text/rope ext/ropeimpl.h ext/stl_rope.h \text/slist ext/hash_map ext/hash_set \text/stl_hashtable.h ext/stl_hash_fun.h \n+\n+\n+c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers = \\\n-\talgorithm bitset complex deque fstream functional \\\n-\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n-\tmap memory numeric ostream queue set sstream stack stdexcept \\\n-\tstreambuf string utility valarray vector \\\n-\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n-\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n-\tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n-@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers = \\\n-\tbits/std_limits.h \\\n-\tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \\\n-\tbits/basic_file_model.h \\\n-\tbits/atomicity.h bits/os_defines.h \\\n-\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \tbits/basic_file_model.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources = \\\n-\tlimitsMEMBERS.cc \\\n-\tstdexcept.cc functexcept.cc bitset.cc \\\n-\tglobals.cc \\\n-\tbasic_file.cc ios.cc complex_io.cc strstream.cc \\\n-\tc++locale.cc locale.cc localename.cc codecvt.cc \\\n-\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \\\n-\tstring-inst.cc wstring-inst.cc \n+sources =  \tlimitsMEMBERS.cc \tstdexcept.cc functexcept.cc bitset.cc \tglobals.cc \tbasic_file.cc ios.cc complex_io.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc \tstring-inst.cc wstring-inst.cc \n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n libstdc___la_SOURCES = $(sources)\n \n-libstdc___la_LIBADD = \\\n-\t../libmath/libmath.la @libio_la@ \\\n-\t../libsupc++/libsupc++convenience.la\n+libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # Check for various configure bits that change where the headers get installed.\n@@ -287,12 +197,7 @@ c_incdir = @C_INCLUDE_DIR@\n # The no-implicit-templates flag will generate unresolved references to\n # the concept-checking symbols.  So we must disable the checks while\n # actually building the library.\n-AM_CXXFLAGS = \\\n-\t-fno-implicit-templates -D_GLIBCPP_NO_CONCEPT_CHECKS \\\n-\t$(LIBSUPCXX_CXXFLAGS) \\\n-\t$(WARN_CXXFLAGS) \\\n-\t$(OPTIMIZE_CXXFLAGS) \\\n-\t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS =  \t-fno-implicit-templates -D_GLIBCPP_NO_CONCEPT_CHECKS \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -313,8 +218,7 @@ AM_CXXFLAGS = \\\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n@@ -323,8 +227,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n # course is problematic at this point.  So, we get the top-level\n # directory to configure libstdc++-v3 to use gcc as the C++\n # compilation driver.\n-CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \\\n-\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --tag CXX --mode=link $(CXX) \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -602,26 +505,27 @@ install-data-local: myinstalldirs myinstallheaders\n # NB: installation of shadow header directories is not attempted.\n myinstalldirs:\n \tif test -z \"$(MULTISUBDIR)\"; then \\\n+\t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/backward; \\\n \t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/bits; \\\n \t$(mkinstalldirs) $(DESTDIR)$(gxx_include_dir)/ext; \\\n \t$(mkinstalldirs) $(DESTDIR)$(gxx_target_include_dir)/bits; \\\n \tfi\n myinstallheaders: \n \tif test -z \"$(MULTISUBDIR)\"; then \\\n \tfor i in $(base_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/\";\\\n \t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/bits/; \\\n \tdone; \\\n \tfor i in $(ext_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/\"; \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/\";\\\n \t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/ext/; \\\n \tdone; \\\n \tfor i in $(backward_headers); do \\\n-\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)\"; \\\n-\t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir); \\\n+\techo \"$(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/backward/\";\\\n+\t  $(INSTALL_DATA) $(src_incdir)/$$i $(gxx_include_dir)/backward/; \\\n \tdone; \\\n \tfor i in $(c_base_headers); do \\\n-\techo \"$(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/\"; \\\n+\techo \"$(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/\";\\\n \t  $(INSTALL_DATA) $(c_incdir)/$$i $(gxx_include_dir)/bits/; \\\n \tdone; \\\n \tfor i in $(std_headers); do \\"}, {"sha": "05570cefc1247736bddae8e446af054e5f206c4b", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baac9fce7def6777455752eb3ebb94570fd254e4/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=baac9fce7def6777455752eb3ebb94570fd254e4", "patch": "@@ -118,14 +118,10 @@ AUTOMAKE_OPTIONS = foreign dejagnu no-installinfo\n \n DEJATOOL = libstdc++\n \n-EXPECT = `if [ -f $(top_builddir)/../expect/expect ] ; then \\\n-            echo $(top_builddir)/../expect/expect ; \\\n-          else echo expect ; fi`\n+EXPECT = `if [ -f $(top_builddir)/../expect/expect ] ; then             echo $(top_builddir)/../expect/expect ;           else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f $(top_srcdir)/../dejagnu/runtest ] ; then \\\n-\t       echo $(top_srcdir)/../dejagnu/runtest ; \\\n-\t    else echo runtest; fi`\n+RUNTEST = `if [ -f $(top_srcdir)/../dejagnu/runtest ] ; then \t       echo $(top_srcdir)/../dejagnu/runtest ; \t    else echo runtest; fi`\n \n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}]}