{"sha": "49cefcf3f084dabc327914269e5787bac8b20f46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDljZWZjZjNmMDg0ZGFiYzMyNzkxNDI2OWU1Nzg3YmFjOGIyMGY0Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-12-18T15:34:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-12-18T15:34:43Z"}, "message": "LWG 3040: define starts_with/ends_with as proposed\n\n\t* include/std/string_view [__cplusplus > 201703L]\n\t(basic_string_view::starts_with(basic_string_view)): Implement\n\tproposed resolution of LWG 3040 to avoid redundant length check.\n\t(basic_string_view::starts_with(_CharT)): Implement proposed\n\tresolution of LWG 3040 to check at most one character.\n\t(basic_string_view::ends_with(_CharT)): Likewise.\n\nFrom-SVN: r267234", "tree": {"sha": "406e57c2a1a44b52f46558830652c1be3689479e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/406e57c2a1a44b52f46558830652c1be3689479e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49cefcf3f084dabc327914269e5787bac8b20f46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49cefcf3f084dabc327914269e5787bac8b20f46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49cefcf3f084dabc327914269e5787bac8b20f46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49cefcf3f084dabc327914269e5787bac8b20f46/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34a9bcaf8b71771f93fe1f09e0c060767bcb7601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34a9bcaf8b71771f93fe1f09e0c060767bcb7601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34a9bcaf8b71771f93fe1f09e0c060767bcb7601"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "e25b9ce8f79d2ffa93ef1da02674da1140f779b0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49cefcf3f084dabc327914269e5787bac8b20f46/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49cefcf3f084dabc327914269e5787bac8b20f46/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=49cefcf3f084dabc327914269e5787bac8b20f46", "patch": "@@ -1,3 +1,12 @@\n+2018-12-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/string_view [__cplusplus > 201703L]\n+\t(basic_string_view::starts_with(basic_string_view)): Implement\n+\tproposed resolution of LWG 3040 to avoid redundant length check.\n+\t(basic_string_view::starts_with(_CharT)): Implement proposed\n+\tresolution of LWG 3040 to check at most one character.\n+\t(basic_string_view::ends_with(_CharT)): Likewise.\n+\n 2018-12-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/71044"}, {"sha": "ac84b24314e10909e89715c5dc4b14e7f05bce11", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49cefcf3f084dabc327914269e5787bac8b20f46/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49cefcf3f084dabc327914269e5787bac8b20f46/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=49cefcf3f084dabc327914269e5787bac8b20f46", "patch": "@@ -389,14 +389,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus > 201703L\n       constexpr bool\n       starts_with(basic_string_view __x) const noexcept\n-      {\n-\treturn this->size() >= __x.size()\n-\t    && this->compare(0, __x.size(), __x) == 0;\n-      }\n+      { return this->substr(0, __x.size()) == __x; }\n \n       constexpr bool\n       starts_with(_CharT __x) const noexcept\n-      { return this->starts_with(basic_string_view(&__x, 1)); }\n+      { return !this->empty() && traits_type::eq(this->front(), __x); }\n \n       constexpr bool\n       starts_with(const _CharT* __x) const noexcept\n@@ -411,7 +408,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr bool\n       ends_with(_CharT __x) const noexcept\n-      { return this->ends_with(basic_string_view(&__x, 1)); }\n+      { return !this->empty() && traits_type::eq(this->back(), __x); }\n \n       constexpr bool\n       ends_with(const _CharT* __x) const noexcept"}]}