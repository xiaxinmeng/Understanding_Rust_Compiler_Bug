{"sha": "fa7675df86ad2f22d0d349708da5cd363ed03f0f", "node_id": "C_kwDOANBUbNoAKGZhNzY3NWRmODZhZDJmMjJkMGQzNDk3MDhkYTVjZDM2M2VkMDNmMGY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-15T16:10:54Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-04-06T08:47:24Z"}, "message": "gccrs: ast: Refactor TraitItem to keep Location info\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast.h: Keep location in TraitItem base class\n\t* ast/rust-item.h (class TraitItemFunc): Use base class location instead.\n\t(class TraitItemMethod): Likewise.\n\t(class TraitItemConst): Likewise.\n\t(class TraitItemType): Likewise.\n\t* ast/rust-macro.h: Likewise.", "tree": {"sha": "5754b5afdad521494c2669c13cf5b83d417ff985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5754b5afdad521494c2669c13cf5b83d417ff985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa7675df86ad2f22d0d349708da5cd363ed03f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7675df86ad2f22d0d349708da5cd363ed03f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa7675df86ad2f22d0d349708da5cd363ed03f0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa7675df86ad2f22d0d349708da5cd363ed03f0f/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b342e11627f2050cb0ecfe52d79de2060795b50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b342e11627f2050cb0ecfe52d79de2060795b50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b342e11627f2050cb0ecfe52d79de2060795b50"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "585bdb09e68ab9f97117620943619caa16642d0c", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7675df86ad2f22d0d349708da5cd363ed03f0f/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7675df86ad2f22d0d349708da5cd363ed03f0f/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=fa7675df86ad2f22d0d349708da5cd363ed03f0f", "patch": "@@ -1358,12 +1358,15 @@ class LifetimeParam : public GenericParam\n class TraitItem\n {\n protected:\n-  TraitItem () : node_id (Analysis::Mappings::get ()->get_next_node_id ()) {}\n+  TraitItem (Location locus)\n+    : node_id (Analysis::Mappings::get ()->get_next_node_id ()), locus (locus)\n+  {}\n \n   // Clone function implementation as pure virtual method\n   virtual TraitItem *clone_trait_item_impl () const = 0;\n \n   NodeId node_id;\n+  Location locus;\n \n public:\n   virtual ~TraitItem () {}\n@@ -1382,6 +1385,7 @@ class TraitItem\n   virtual bool is_marked_for_strip () const = 0;\n \n   NodeId get_node_id () const { return node_id; }\n+  Location get_locus () const { return locus; }\n };\n \n /* Abstract base class for items used within an inherent impl block (the impl"}, {"sha": "16209613881111eb3f87fa7ec390294302959967", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7675df86ad2f22d0d349708da5cd363ed03f0f/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7675df86ad2f22d0d349708da5cd363ed03f0f/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=fa7675df86ad2f22d0d349708da5cd363ed03f0f", "patch": "@@ -2908,22 +2908,21 @@ class TraitItemFunc : public TraitItem\n   std::vector<Attribute> outer_attrs;\n   TraitFunctionDecl decl;\n   std::unique_ptr<BlockExpr> block_expr;\n-  Location locus;\n \n public:\n   // Returns whether function has a definition or is just a declaration.\n   bool has_definition () const { return block_expr != nullptr; }\n \n   TraitItemFunc (TraitFunctionDecl decl, std::unique_ptr<BlockExpr> block_expr,\n \t\t std::vector<Attribute> outer_attrs, Location locus)\n-    : TraitItem (), outer_attrs (std::move (outer_attrs)),\n-      decl (std::move (decl)), block_expr (std::move (block_expr)),\n-      locus (locus)\n+    : TraitItem (locus), outer_attrs (std::move (outer_attrs)),\n+      decl (std::move (decl)), block_expr (std::move (block_expr))\n   {}\n \n   // Copy constructor with clone\n   TraitItemFunc (TraitItemFunc const &other)\n-    : outer_attrs (other.outer_attrs), decl (other.decl), locus (other.locus)\n+    : TraitItem (other.locus), outer_attrs (other.outer_attrs),\n+      decl (other.decl)\n   {\n     node_id = other.node_id;\n \n@@ -2956,8 +2955,6 @@ class TraitItemFunc : public TraitItem\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (ASTVisitor &vis) override;\n \n   // Invalid if trait decl is empty, so base stripping on that.\n@@ -3128,22 +3125,21 @@ class TraitItemMethod : public TraitItem\n   std::vector<Attribute> outer_attrs;\n   TraitMethodDecl decl;\n   std::unique_ptr<BlockExpr> block_expr;\n-  Location locus;\n \n public:\n   // Returns whether method has a definition or is just a declaration.\n   bool has_definition () const { return block_expr != nullptr; }\n \n   TraitItemMethod (TraitMethodDecl decl, std::unique_ptr<BlockExpr> block_expr,\n \t\t   std::vector<Attribute> outer_attrs, Location locus)\n-    : TraitItem (), outer_attrs (std::move (outer_attrs)),\n-      decl (std::move (decl)), block_expr (std::move (block_expr)),\n-      locus (locus)\n+    : TraitItem (locus), outer_attrs (std::move (outer_attrs)),\n+      decl (std::move (decl)), block_expr (std::move (block_expr))\n   {}\n \n   // Copy constructor with clone\n   TraitItemMethod (TraitItemMethod const &other)\n-    : outer_attrs (other.outer_attrs), decl (other.decl), locus (other.locus)\n+    : TraitItem (other.locus), outer_attrs (other.outer_attrs),\n+      decl (other.decl)\n   {\n     node_id = other.node_id;\n \n@@ -3176,8 +3172,6 @@ class TraitItemMethod : public TraitItem\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (ASTVisitor &vis) override;\n \n   // Invalid if trait decl is empty, so base stripping on that.\n@@ -3219,23 +3213,21 @@ class TraitItemConst : public TraitItem\n   // bool has_expression;\n   std::unique_ptr<Expr> expr;\n \n-  Location locus;\n-\n public:\n   // Whether the constant item has an associated expression.\n   bool has_expression () const { return expr != nullptr; }\n \n   TraitItemConst (Identifier name, std::unique_ptr<Type> type,\n \t\t  std::unique_ptr<Expr> expr,\n \t\t  std::vector<Attribute> outer_attrs, Location locus)\n-    : TraitItem (), outer_attrs (std::move (outer_attrs)),\n-      name (std::move (name)), type (std::move (type)), expr (std::move (expr)),\n-      locus (locus)\n+    : TraitItem (locus), outer_attrs (std::move (outer_attrs)),\n+      name (std::move (name)), type (std::move (type)), expr (std::move (expr))\n   {}\n \n   // Copy constructor with clones\n   TraitItemConst (TraitItemConst const &other)\n-    : outer_attrs (other.outer_attrs), name (other.name), locus (other.locus)\n+    : TraitItem (other.locus), outer_attrs (other.outer_attrs),\n+      name (other.name)\n   {\n     node_id = other.node_id;\n \n@@ -3328,23 +3320,21 @@ class TraitItemType : public TraitItem\n   std::vector<std::unique_ptr<TypeParamBound>>\n     type_param_bounds; // inlined form\n \n-  Location locus;\n-\n public:\n   // Returns whether trait item type has type param bounds.\n   bool has_type_param_bounds () const { return !type_param_bounds.empty (); }\n \n   TraitItemType (Identifier name,\n \t\t std::vector<std::unique_ptr<TypeParamBound>> type_param_bounds,\n \t\t std::vector<Attribute> outer_attrs, Location locus)\n-    : TraitItem (), outer_attrs (std::move (outer_attrs)),\n-      name (std::move (name)),\n-      type_param_bounds (std::move (type_param_bounds)), locus (locus)\n+    : TraitItem (locus), outer_attrs (std::move (outer_attrs)),\n+      name (std::move (name)), type_param_bounds (std::move (type_param_bounds))\n   {}\n \n   // Copy constructor with vector clone\n   TraitItemType (TraitItemType const &other)\n-    : outer_attrs (other.outer_attrs), name (other.name), locus (other.locus)\n+    : TraitItem (other.locus), outer_attrs (other.outer_attrs),\n+      name (other.name)\n   {\n     node_id = other.node_id;\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n@@ -3374,8 +3364,6 @@ class TraitItemType : public TraitItem\n \n   std::string as_string () const override;\n \n-  Location get_locus () const { return locus; }\n-\n   void accept_vis (ASTVisitor &vis) override;\n \n   // Invalid if name is empty, so base stripping on that."}, {"sha": "be8ed5609137e06b26ca0b60a27b1a063295b907", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa7675df86ad2f22d0d349708da5cd363ed03f0f/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa7675df86ad2f22d0d349708da5cd363ed03f0f/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=fa7675df86ad2f22d0d349708da5cd363ed03f0f", "patch": "@@ -723,18 +723,18 @@ class MacroInvocation : public TypeNoBounds,\n     MacroInvocData invoc_data, std::vector<Attribute> outer_attrs,\n     Location locus, bool is_semi_coloned,\n     std::vector<std::unique_ptr<MacroInvocation>> &&pending_eager_invocs)\n-    : outer_attrs (std::move (outer_attrs)), locus (locus),\n+    : TraitItem (locus), outer_attrs (std::move (outer_attrs)), locus (locus),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ()),\n       invoc_data (std::move (invoc_data)), is_semi_coloned (is_semi_coloned),\n       kind (kind), builtin_kind (builtin_kind),\n       pending_eager_invocs (std::move (pending_eager_invocs))\n   {}\n \n   MacroInvocation (const MacroInvocation &other)\n-    : outer_attrs (other.outer_attrs), locus (other.locus),\n-      node_id (other.node_id), invoc_data (other.invoc_data),\n-      is_semi_coloned (other.is_semi_coloned), kind (other.kind),\n-      builtin_kind (other.builtin_kind)\n+    : TraitItem (other.locus), outer_attrs (other.outer_attrs),\n+      locus (other.locus), node_id (other.node_id),\n+      invoc_data (other.invoc_data), is_semi_coloned (other.is_semi_coloned),\n+      kind (other.kind), builtin_kind (other.builtin_kind)\n   {\n     if (other.kind == InvocKind::Builtin)\n       for (auto &pending : other.pending_eager_invocs)"}]}