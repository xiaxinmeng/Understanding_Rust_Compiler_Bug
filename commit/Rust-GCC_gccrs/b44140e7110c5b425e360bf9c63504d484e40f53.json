{"sha": "b44140e7110c5b425e360bf9c63504d484e40f53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ0MTQwZTcxMTBjNWI0MjVlMzYwYmY5YzYzNTA0ZDQ4NGU0MGY1Mw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-05-04T00:33:48Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-05-04T00:33:48Z"}, "message": "rs6000.c (altivec_expand_binop_builtin): Error out when we get an out of range literal.\n\n2002-05-03  Aldy Hernandez  <aldyh@redhat.com>\n\n        * config/rs6000/rs6000.c (altivec_expand_binop_builtin): Error out\n        when we get an out of range literal.\n        (altivec_expand_ternop_builtin): Same.\n        (altivec_expand_unop_builtin): Same.\n        (altivec_expand_builtin): Same, for dss.\n        (altivec_expand_builtin): Use trees instead of rtl when\n        determining literal argument validity.\n\nFrom-SVN: r53135", "tree": {"sha": "040a4deab056957a571be4897e2266a800d29b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/040a4deab056957a571be4897e2266a800d29b31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b44140e7110c5b425e360bf9c63504d484e40f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44140e7110c5b425e360bf9c63504d484e40f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b44140e7110c5b425e360bf9c63504d484e40f53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44140e7110c5b425e360bf9c63504d484e40f53/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaaed752284e25ca392fea2ee5ca7c9bc988fe88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaaed752284e25ca392fea2ee5ca7c9bc988fe88"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "2be52c9808ab5571b6a55ecf80b2c7e8d5485b03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44140e7110c5b425e360bf9c63504d484e40f53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44140e7110c5b425e360bf9c63504d484e40f53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b44140e7110c5b425e360bf9c63504d484e40f53", "patch": "@@ -1,3 +1,13 @@\n+2002-05-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * config/rs6000/rs6000.c (altivec_expand_binop_builtin): Error out\n+        when we get an out of range literal.\n+        (altivec_expand_ternop_builtin): Same.\n+        (altivec_expand_unop_builtin): Same.\n+        (altivec_expand_builtin): Same, for dss.\n+        (altivec_expand_builtin): Use trees instead of rtl when\n+        determining literal argument validity.\n+\n 2002-05-03  David S. Miller  <davem@redhat.com>\n \n \tDelete cycle display scheduling hook."}, {"sha": "2fceccf80cab273d39ab52f8a68d2e25585ae9bb", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b44140e7110c5b425e360bf9c63504d484e40f53/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b44140e7110c5b425e360bf9c63504d484e40f53/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b44140e7110c5b425e360bf9c63504d484e40f53", "patch": "@@ -3551,6 +3551,22 @@ altivec_expand_unop_builtin (icode, arglist, target)\n   if (arg0 == error_mark_node)\n     return NULL_RTX;\n \n+  switch (icode)\n+    {\n+      /* Only allow 5-bit *signed* literals.  */\n+    case CODE_FOR_altivec_vspltisb:\n+    case CODE_FOR_altivec_vspltish:\n+    case CODE_FOR_altivec_vspltisw:\n+      if (GET_CODE (op0) != CONST_INT\n+\t  || INTVAL (op0) > 0x1f\n+\t  || INTVAL (op0) < -0x1f)\n+\t{\n+\t  error (\"argument 1 must be a 5-bit signed literal\");\n+\t  return NULL_RTX;\n+\t}\n+      break;\n+    }\n+\n   if (target == 0\n       || GET_MODE (target) != tmode\n       || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n@@ -3621,6 +3637,25 @@ altivec_expand_binop_builtin (icode, arglist, target)\n   if (arg0 == error_mark_node || arg1 == error_mark_node)\n     return NULL_RTX;\n \n+  switch (icode)\n+    {\n+      /* Only allow 5-bit unsigned literals.  */\n+    case CODE_FOR_altivec_vcfux:\n+    case CODE_FOR_altivec_vcfsx:\n+    case CODE_FOR_altivec_vctsxs:\n+    case CODE_FOR_altivec_vctuxs:\n+    case CODE_FOR_altivec_vspltb:\n+    case CODE_FOR_altivec_vsplth:\n+    case CODE_FOR_altivec_vspltw:\n+      if (TREE_CODE (arg1) != INTEGER_CST\n+\t  || TREE_INT_CST_LOW (arg1) & ~0x1f)\n+\t{\n+\t  error (\"argument 2 must be a 5-bit unsigned literal\");\n+\t  return NULL_RTX;\n+\t}\n+      break;\n+    }\n+\n   if (target == 0\n       || GET_MODE (target) != tmode\n       || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n@@ -3779,6 +3814,22 @@ altivec_expand_ternop_builtin (icode, arglist, target)\n       || arg2 == error_mark_node)\n     return NULL_RTX;\n \n+  switch (icode)\n+    {\n+      /* Only allow 4-bit unsigned literals.  */\n+    case CODE_FOR_altivec_vsldoi_4sf:\n+    case CODE_FOR_altivec_vsldoi_4si:\n+    case CODE_FOR_altivec_vsldoi_8hi:\n+    case CODE_FOR_altivec_vsldoi_16qi:\n+      if (TREE_CODE (arg2) != INTEGER_CST\n+\t  || TREE_INT_CST_LOW (arg2) & ~0xf)\n+\t{\n+\t  error (\"argument 3 must be a 4-bit unsigned literal\");\n+\t  return NULL_RTX;\n+\t}\n+      break;\n+    }\n+\n   if (target == 0\n       || GET_MODE (target) != tmode\n       || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n@@ -4034,6 +4085,13 @@ altivec_expand_builtin (exp, target)\n       if (arg0 == error_mark_node)\n \treturn NULL_RTX;\n \n+      if (TREE_CODE (arg0) != INTEGER_CST\n+\t  || TREE_INT_CST_LOW (arg0) & ~0x3)\n+\t{\n+\t  error (\"argument to dss must be a 2-bit unsigned literal\");\n+\t  return NULL_RTX;\n+\t}\n+\n       if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n \top0 = copy_to_mode_reg (mode0, op0);\n \n@@ -4062,17 +4120,18 @@ altivec_expand_builtin (exp, target)\n \t    || arg2 == error_mark_node)\n \t  return NULL_RTX;\n \n+      if (TREE_CODE (arg2) != INTEGER_CST\n+\t  || TREE_INT_CST_LOW (arg2) & ~0x3)\n+\t{\n+\t  error (\"argument to `%s' must be a 2-bit unsigned literal\", d->name);\n+\t  return NULL_RTX;\n+\t}\n+\n \tif (! (*insn_data[d->icode].operand[0].predicate) (op0, mode0))\n \t  op0 = copy_to_mode_reg (mode0, op0);\n \tif (! (*insn_data[d->icode].operand[1].predicate) (op1, mode1))\n \t  op1 = copy_to_mode_reg (mode1, op1);\n \n-\tif (GET_CODE (op2) != CONST_INT || INTVAL (op2) > 3)\n-\t  {\n-\t    error (\"argument 3 of `%s' must be a 2-bit literal\", d->name);\n-\t    return NULL_RTX;\n-\t  }\n-\n \tpat = GEN_FCN (d->icode) (op0, op1, op2);\n \tif (pat != 0)\n \t  emit_insn (pat);"}]}