{"sha": "ac59ad4efc2f01ea4aaae648d59195616e3fa894", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM1OWFkNGVmYzJmMDFlYTRhYWFlNjQ4ZDU5MTk1NjE2ZTNmYTg5NA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-02-26T15:59:45Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-02-26T15:59:45Z"}, "message": "[AArch64] PR target/69613: Return zero TARGET_SHIFT_TRUNCATION_MASK when SHIFT_COUNT_TRUNCATED is false\n\n\tPR target/69613\n\t* config/aarch64/aarch64.c (aarch64_shift_truncation_mask):\n\tReturn 0 if !SHIFT_COUNT_TRUNCATED.\n\n\t* gcc.dg/torture/pr69613.c: New test.\n\nFrom-SVN: r233744", "tree": {"sha": "35b93605bdf6ac75d8b97fb13a2d8d48cd442ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35b93605bdf6ac75d8b97fb13a2d8d48cd442ea6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac59ad4efc2f01ea4aaae648d59195616e3fa894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac59ad4efc2f01ea4aaae648d59195616e3fa894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac59ad4efc2f01ea4aaae648d59195616e3fa894", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac59ad4efc2f01ea4aaae648d59195616e3fa894/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2ad54a07a7336103ff30140b591b4d6eb348dfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ad54a07a7336103ff30140b591b4d6eb348dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ad54a07a7336103ff30140b591b4d6eb348dfd"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "916c381529a8daafe114b62055488fac114806d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac59ad4efc2f01ea4aaae648d59195616e3fa894/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac59ad4efc2f01ea4aaae648d59195616e3fa894/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac59ad4efc2f01ea4aaae648d59195616e3fa894", "patch": "@@ -1,3 +1,9 @@\n+2016-02-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/69613\n+\t* config/aarch64/aarch64.c (aarch64_shift_truncation_mask):\n+\tReturn 0 if !SHIFT_COUNT_TRUNCATED.\n+\n 2016-02-26  Jakub Jelinek  <jakub@redhat.com>\n \t    Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "30d6f4176b8a03533780a260216297e547af8938", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac59ad4efc2f01ea4aaae648d59195616e3fa894/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac59ad4efc2f01ea4aaae648d59195616e3fa894/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ac59ad4efc2f01ea4aaae648d59195616e3fa894", "patch": "@@ -11154,7 +11154,8 @@ static unsigned HOST_WIDE_INT\n aarch64_shift_truncation_mask (machine_mode mode)\n {\n   return\n-    (aarch64_vector_mode_supported_p (mode)\n+    (!SHIFT_COUNT_TRUNCATED\n+     || aarch64_vector_mode_supported_p (mode)\n      || aarch64_vect_struct_mode_p (mode)) ? 0 : (GET_MODE_BITSIZE (mode) - 1);\n }\n "}, {"sha": "d5b890ddc1fd4bb3fdbd11d4ae4de219e9803662", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac59ad4efc2f01ea4aaae648d59195616e3fa894/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac59ad4efc2f01ea4aaae648d59195616e3fa894/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac59ad4efc2f01ea4aaae648d59195616e3fa894", "patch": "@@ -1,3 +1,8 @@\n+2016-02-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/69613\n+\t* gcc.dg/torture/pr69613.c: New test.\n+\n 2016-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/69891"}, {"sha": "44f2b0cc91ac4b12c4d255b608f95bc8bf016923", "filename": "gcc/testsuite/gcc.dg/torture/pr69613.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac59ad4efc2f01ea4aaae648d59195616e3fa894/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69613.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac59ad4efc2f01ea4aaae648d59195616e3fa894/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69613.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69613.c?ref=ac59ad4efc2f01ea4aaae648d59195616e3fa894", "patch": "@@ -0,0 +1,40 @@\n+/* PR target/69613.  */\n+/* { dg-do run { target int128 } } */\n+/* { dg-additional-options \"-mavx\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+typedef unsigned short u16;\n+typedef unsigned short v32u16 __attribute__ ((vector_size (32)));\n+typedef unsigned int u32;\n+typedef unsigned int v32u32 __attribute__ ((vector_size (32)));\n+typedef unsigned long long u64;\n+typedef unsigned long long v32u64 __attribute__ ((vector_size (32)));\n+typedef unsigned __int128 u128;\n+typedef unsigned __int128 v32u128 __attribute__ ((vector_size (32)));\n+\n+u128 __attribute__ ((noinline, noclone))\n+foo (u32 u32_0, u64 u64_1, u128 u128_1, v32u16 v32u16_0, v32u128 v32u128_0,\n+     v32u16 v32u16_1, v32u32 v32u32_1, v32u64 v32u64_1, v32u128 v32u128_1)\n+{\n+  u128 temp = (v32u128_1[0] << ((-u32_0) & 127));\n+  u32 t2 = (u32_0 & 127);\n+  v32u128_1[0] = (v32u128_1[0] >> t2);\n+\n+  v32u128_1[0] ^= temp;\n+  v32u128_1 |= (v32u128){ v32u128_0[1] };\n+\n+  return u64_1 + u128_1 + v32u16_0[0] + v32u16_0[1] + v32u16_1[11]\n+\t + v32u16_1[12] + v32u16_1[13] + v32u32_1[0] + v32u32_1[1]\n+\t + v32u32_1[2] + v32u64_1[1] + v32u64_1[2] + v32u64_1[3] + v32u128_1[0]\n+\t + v32u128_1[1];\n+}\n+\n+int\n+main ()\n+{\n+  u128 x\n+      = foo (1, 1, 1, (v32u16){ 1, 1, 1 }, (v32u128){ 1 }, (v32u16){ 1, 1, 1 },\n+\t     (v32u32){ 1 }, (v32u64){ 1, 1, 1 }, (v32u128){ -1 });\n+  if (x != 6)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}