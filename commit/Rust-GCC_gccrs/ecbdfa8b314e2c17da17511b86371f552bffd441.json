{"sha": "ecbdfa8b314e2c17da17511b86371f552bffd441", "node_id": "C_kwDOANBUbNoAKGVjYmRmYThiMzE0ZTJjMTdkYTE3NTExYjg2MzcxZjU1MmJmZmQ0NDE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-15T15:57:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-15T20:04:36Z"}, "message": "libstdc++: Tweak TSan annotations for std::atomic<shared_ptr<T>>\n\nDo not use the __tsan_mutex_not_static flag for annotation functions\nwhere it's not a valid flag.  Also use the try_lock and try_lock_failed\nflags to more precisely annotate the CAS loop used to acquire a lock.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/shared_ptr_atomic.h (_GLIBCXX_TSAN_MUTEX_PRE_LOCK):\n\tReplace with ...\n\t(_GLIBCXX_TSAN_MUTEX_TRY_LOCK): ... this, add try_lock flag.\n\t(_GLIBCXX_TSAN_MUTEX_TRY_LOCK_FAILED): New macro using\n\ttry_lock_failed flag\n\t(_GLIBCXX_TSAN_MUTEX_POST_LOCK): Rename to ...\n\t(_GLIBCXX_TSAN_MUTEX_LOCKED): ... this.\n\t(_GLIBCXX_TSAN_MUTEX_PRE_UNLOCK): Remove invalid flag.\n\t(_GLIBCXX_TSAN_MUTEX_POST_UNLOCK): Remove invalid flag.\n\t(_Sp_atomic::_Atomic_count::lock): Use new macros.", "tree": {"sha": "caf0b2257c147e4c66f393c2f204f6e62800a994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caf0b2257c147e4c66f393c2f204f6e62800a994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecbdfa8b314e2c17da17511b86371f552bffd441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbdfa8b314e2c17da17511b86371f552bffd441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbdfa8b314e2c17da17511b86371f552bffd441", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbdfa8b314e2c17da17511b86371f552bffd441/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29b39d4b0e44d350a35e5f25d9faeb9f9aac38e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b39d4b0e44d350a35e5f25d9faeb9f9aac38e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b39d4b0e44d350a35e5f25d9faeb9f9aac38e4"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "55d193d4bda7c3c19e4ce1c66bff4ed4bc66e579", "filename": "libstdc++-v3/include/bits/shared_ptr_atomic.h", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecbdfa8b314e2c17da17511b86371f552bffd441/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecbdfa8b314e2c17da17511b86371f552bffd441/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_atomic.h?ref=ecbdfa8b314e2c17da17511b86371f552bffd441", "patch": "@@ -32,24 +32,26 @@\n \n #include <bits/atomic_base.h>\n \n+// Annotations for the custom locking in atomic<shared_ptr<T>>.\n #if defined _GLIBCXX_TSAN && __has_include(<sanitizer/tsan_interface.h>)\n #include <sanitizer/tsan_interface.h>\n #define _GLIBCXX_TSAN_MUTEX_DESTROY(X) \\\n   __tsan_mutex_destroy(X, __tsan_mutex_not_static)\n-#define _GLIBCXX_TSAN_MUTEX_PRE_LOCK(X) \\\n-  __tsan_mutex_pre_lock(X, __tsan_mutex_not_static)\n-#define _GLIBCXX_TSAN_MUTEX_POST_LOCK(X) \\\n+#define _GLIBCXX_TSAN_MUTEX_TRY_LOCK(X) \\\n+  __tsan_mutex_pre_lock(X, __tsan_mutex_not_static|__tsan_mutex_try_lock)\n+#define _GLIBCXX_TSAN_MUTEX_TRY_LOCK_FAILED(X) __tsan_mutex_post_lock(X, \\\n+    __tsan_mutex_not_static|__tsan_mutex_try_lock_failed, 0)\n+#define _GLIBCXX_TSAN_MUTEX_LOCKED(X) \\\n   __tsan_mutex_post_lock(X, __tsan_mutex_not_static, 0)\n-#define _GLIBCXX_TSAN_MUTEX_PRE_UNLOCK(X) \\\n-  __tsan_mutex_pre_unlock(X, __tsan_mutex_not_static)\n-#define _GLIBCXX_TSAN_MUTEX_POST_UNLOCK(X) \\\n-  __tsan_mutex_post_unlock(X, __tsan_mutex_not_static)\n+#define _GLIBCXX_TSAN_MUTEX_PRE_UNLOCK(X) __tsan_mutex_pre_unlock(X, 0)\n+#define _GLIBCXX_TSAN_MUTEX_POST_UNLOCK(X) __tsan_mutex_post_unlock(X, 0)\n #define _GLIBCXX_TSAN_MUTEX_PRE_SIGNAL(X) __tsan_mutex_pre_signal(X, 0)\n #define _GLIBCXX_TSAN_MUTEX_POST_SIGNAL(X) __tsan_mutex_post_signal(X, 0)\n #else\n #define _GLIBCXX_TSAN_MUTEX_DESTROY(X)\n-#define _GLIBCXX_TSAN_MUTEX_PRE_LOCK(X)\n-#define _GLIBCXX_TSAN_MUTEX_POST_LOCK(X)\n+#define _GLIBCXX_TSAN_MUTEX_TRY_LOCK(X)\n+#define _GLIBCXX_TSAN_MUTEX_TRY_LOCK_FAILED(X)\n+#define _GLIBCXX_TSAN_MUTEX_LOCKED(X)\n #define _GLIBCXX_TSAN_MUTEX_PRE_UNLOCK(X)\n #define _GLIBCXX_TSAN_MUTEX_POST_UNLOCK(X)\n #define _GLIBCXX_TSAN_MUTEX_PRE_SIGNAL(X)\n@@ -431,19 +433,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      __current = _M_val.load(memory_order_relaxed);\n \t    }\n \n-\t  _GLIBCXX_TSAN_MUTEX_PRE_LOCK(&_M_val);\n+\t  _GLIBCXX_TSAN_MUTEX_TRY_LOCK(&_M_val);\n \n \t  while (!_M_val.compare_exchange_strong(__current,\n \t\t\t\t\t\t __current | _S_lock_bit,\n \t\t\t\t\t\t __o,\n \t\t\t\t\t\t memory_order_relaxed))\n \t    {\n+\t      _GLIBCXX_TSAN_MUTEX_TRY_LOCK_FAILED(&_M_val);\n #if __cpp_lib_atomic_wait\n \t      __detail::__thread_relax();\n #endif\n \t      __current = __current & ~_S_lock_bit;\n+\t      _GLIBCXX_TSAN_MUTEX_TRY_LOCK(&_M_val);\n \t    }\n-\t  _GLIBCXX_TSAN_MUTEX_POST_LOCK(&_M_val);\n+\t  _GLIBCXX_TSAN_MUTEX_LOCKED(&_M_val);\n \t  return reinterpret_cast<pointer>(__current);\n \t}\n "}]}