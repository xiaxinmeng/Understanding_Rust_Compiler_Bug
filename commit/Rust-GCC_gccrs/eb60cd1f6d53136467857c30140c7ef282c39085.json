{"sha": "eb60cd1f6d53136467857c30140c7ef282c39085", "node_id": "C_kwDOANBUbNoAKGViNjBjZDFmNmQ1MzEzNjQ2Nzg1N2MzMDE0MGM3ZWYyODJjMzkwODU", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-05-09T13:47:37Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-09T16:22:28Z"}, "message": "gccrs: add missing coercion site code generation for block tail\n\nFixes #2179\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-base.cc (HIRCompileBase::compile_function_body):\n\tadd missing coercion_site codegen\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/execute/torture/issue-2179.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "9f3b79174d1ab64943f345e411517ac2f9dda4de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f3b79174d1ab64943f345e411517ac2f9dda4de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb60cd1f6d53136467857c30140c7ef282c39085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb60cd1f6d53136467857c30140c7ef282c39085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb60cd1f6d53136467857c30140c7ef282c39085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb60cd1f6d53136467857c30140c7ef282c39085/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ff31ac29db3bdc208083461e8b7a20f7128dd42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff31ac29db3bdc208083461e8b7a20f7128dd42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff31ac29db3bdc208083461e8b7a20f7128dd42"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "9d27e23cdc9ba9f51082fd07ab05d715db9274dd", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb60cd1f6d53136467857c30140c7ef282c39085/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb60cd1f6d53136467857c30140c7ef282c39085/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=eb60cd1f6d53136467857c30140c7ef282c39085", "patch": "@@ -489,6 +489,19 @@ HIRCompileBase::compile_function_body (tree fndecl,\n       // we can only return this if non unit value return type\n       if (!fn_return_ty->is_unit ())\n \t{\n+\t  HirId id = function_body.get_mappings ().get_hirid ();\n+\t  Location lvalue_locus = function_body.get_locus ();\n+\t  Location rvalue_locus = locus;\n+\n+\t  TyTy::BaseType *expected = fn_return_ty;\n+\t  TyTy::BaseType *actual = nullptr;\n+\t  bool ok = ctx->get_tyctx ()->lookup_type (\n+\t    function_body.expr->get_mappings ().get_hirid (), &actual);\n+\t  rust_assert (ok);\n+\n+\t  return_value = coercion_site (id, return_value, actual, expected,\n+\t\t\t\t\tlvalue_locus, rvalue_locus);\n+\n \t  tree return_stmt\n \t    = ctx->get_backend ()->return_statement (fndecl, return_value,\n \t\t\t\t\t\t     locus);"}, {"sha": "53bacaaf2c18f4129300bb464d129f7f93393310", "filename": "gcc/testsuite/rust/execute/torture/issue-2179.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb60cd1f6d53136467857c30140c7ef282c39085/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-2179.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb60cd1f6d53136467857c30140c7ef282c39085/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-2179.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-2179.rs?ref=eb60cd1f6d53136467857c30140c7ef282c39085", "patch": "@@ -0,0 +1,29 @@\n+// { dg-output \"123\\n\" }\n+trait A {\n+    fn get_int(&self) -> i32;\n+}\n+\n+impl A for i32 {\n+    fn get_int(&self) -> i32 {\n+        *self\n+    }\n+}\n+\n+fn get_dyn_a(x: &i32) -> &dyn A {\n+    x\n+}\n+\n+extern \"C\" {\n+    fn printf(s: *const i8, ...) -> i32;\n+}\n+\n+fn main() -> i32 {\n+    let x = 123;\n+    let y = get_dyn_a(&x);\n+    let value = y.get_int();\n+    let fmt_string = \"%d\\n\\0\" as *const str as *const i8;\n+    unsafe {\n+        printf(fmt_string, value);\n+    }\n+    return 0;\n+}"}]}