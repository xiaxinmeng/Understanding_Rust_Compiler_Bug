{"sha": "4170a0f021faa12541dc02838d928844ce8351f8", "node_id": "C_kwDOANBUbNoAKDQxNzBhMGYwMjFmYWExMjU0MWRjMDI4MzhkOTI4ODQ0Y2U4MzUxZjg", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-03T23:26:41Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T02:59:12Z"}, "message": "RISC-V: Add vnot.v C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vnot_v-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnot_v_tumu-3.C: New test.", "tree": {"sha": "c8d0efee88fe58a01783d2e386707cd426a9ca9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8d0efee88fe58a01783d2e386707cd426a9ca9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4170a0f021faa12541dc02838d928844ce8351f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4170a0f021faa12541dc02838d928844ce8351f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4170a0f021faa12541dc02838d928844ce8351f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4170a0f021faa12541dc02838d928844ce8351f8/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "779e441103e834c9b973ae25956e4546543aec0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779e441103e834c9b973ae25956e4546543aec0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/779e441103e834c9b973ae25956e4546543aec0a"}], "stats": {"total": 2862, "additions": 2862, "deletions": 0}, "files": [{"sha": "23e6f92c8c9b939510dda7cd78825b0b5c07327b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v-1.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-1.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot(vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot(vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot(vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot(vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot(vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot(vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot(vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot(vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot(vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot(vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot(vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot(vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot(vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot(vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot(vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot(vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot(vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot(vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot(vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot(vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot(vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot(vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnot(vbool64_t mask,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot(vbool32_t mask,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot(vbool16_t mask,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot(vbool8_t mask,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot(vbool4_t mask,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot(vbool2_t mask,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot(vbool1_t mask,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot(vbool64_t mask,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot(vbool32_t mask,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot(vbool16_t mask,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot(vbool8_t mask,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot(vbool4_t mask,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot(vbool2_t mask,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot(vbool64_t mask,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot(vbool32_t mask,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot(vbool16_t mask,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot(vbool8_t mask,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot(vbool4_t mask,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot(vbool64_t mask,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot(vbool32_t mask,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot(vbool16_t mask,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot(vbool8_t mask,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "35426a06531ce1e48e1cdd702141ef30cf813b38", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v-2.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-2.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot(vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot(vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot(vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot(vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot(vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot(vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot(vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot(vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot(vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot(vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot(vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot(vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot(vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot(vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot(vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot(vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot(vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot(vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot(vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot(vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot(vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot(vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnot(vbool64_t mask,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot(vbool32_t mask,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot(vbool16_t mask,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot(vbool8_t mask,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot(vbool4_t mask,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot(vbool2_t mask,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot(vbool1_t mask,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot(vbool64_t mask,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot(vbool32_t mask,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot(vbool16_t mask,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot(vbool8_t mask,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot(vbool4_t mask,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot(vbool2_t mask,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot(vbool64_t mask,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot(vbool32_t mask,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot(vbool16_t mask,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot(vbool8_t mask,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot(vbool4_t mask,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot(vbool64_t mask,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot(vbool32_t mask,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot(vbool16_t mask,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot(vbool8_t mask,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "42fd5054ea01d792367ec4ab0f27dc3466f2e083", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v-3.C", "status": "added", "additions": 314, "deletions": 0, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v-3.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,314 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot(vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot(vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot(vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot(vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot(vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot(vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot(vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot(vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot(vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot(vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot(vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot(vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot(vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot(vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot(vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot(vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot(vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot(vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot(vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot(vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot(vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot(vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(op1,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnot(vbool64_t mask,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot(vbool32_t mask,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot(vbool16_t mask,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot(vbool8_t mask,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot(vbool4_t mask,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot(vbool2_t mask,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot(vbool1_t mask,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot(vbool64_t mask,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot(vbool32_t mask,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot(vbool16_t mask,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot(vbool8_t mask,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot(vbool4_t mask,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot(vbool2_t mask,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot(vbool64_t mask,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot(vbool32_t mask,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot(vbool16_t mask,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot(vbool8_t mask,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot(vbool4_t mask,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot(vbool64_t mask,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot(vbool32_t mask,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot(vbool16_t mask,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot(vbool8_t mask,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot(mask,op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3fcbf02aed55b3b1ea0f53fb187a5252fc18b287", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_mu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-1.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "5dde6117a43467da6bcc88f295652b1875f63d7d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_mu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-2.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c3637b98b6616d4a8fd2a774dde621fd59d1c5ff", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_mu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_mu-3.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_mu(mask,merge,op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "25fb8e93c91f8d29ac404b16627d49d0d8128ad2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_tu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-1.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_tu(vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_tu(vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_tu(vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_tu(vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_tu(vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_tu(vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_tu(vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_tu(vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_tu(vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_tu(vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_tu(vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_tu(vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_tu(vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_tu(vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_tu(vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_tu(vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_tu(vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_tu(vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_tu(vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_tu(vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_tu(vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_tu(vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "b05b86fce83a88e3371e1859fb2b788cb56f3cbc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_tu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-2.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_tu(vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_tu(vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_tu(vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_tu(vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_tu(vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_tu(vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_tu(vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_tu(vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_tu(vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_tu(vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_tu(vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_tu(vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_tu(vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_tu(vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_tu(vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_tu(vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_tu(vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_tu(vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_tu(vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_tu(vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_tu(vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_tu(vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "7048f9ecc99e8c8e4ffe454683440719777093e1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_tu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tu-3.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_tu(vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_tu(vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_tu(vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_tu(vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_tu(vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_tu(vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_tu(vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_tu(vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_tu(vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_tu(vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_tu(vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_tu(vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_tu(vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_tu(vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_tu(vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_tu(vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_tu(vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_tu(vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_tu(vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_tu(vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_tu(vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_tu(vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tu(merge,op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "151f6559f9f333ac4ebe5cbe029ee320342a7dd4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_tum-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-1.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "a9d767d88f4eb0eb21fbc9716a80d0dff23d9301", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_tum-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-2.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1d39bcc7349c0ebcd6613b699a3504ef9d982f8b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_tum-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tum-3.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tum(mask,merge,op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "9dfe96a8474cf51c0b05ee6cde28ce8bfcf437c2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_tumu-1.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-1.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "223b7ce38659a626007152690fb31325f0b6a85a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_tumu-2.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-2.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "492595d74b1e09881fb3c09072ce25be25f98e6a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnot_v_tumu-3.C", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4170a0f021faa12541dc02838d928844ce8351f8/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnot_v_tumu-3.C?ref=4170a0f021faa12541dc02838d928844ce8351f8", "patch": "@@ -0,0 +1,160 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnot_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnot_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnot_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnot_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnot_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnot_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vnot_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnot_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnot_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnot_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnot_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnot_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vnot_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnot_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnot_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnot_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnot_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vnot_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vnot_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vnot_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vnot_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vnot_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,size_t vl)\n+{\n+    return __riscv_vnot_tumu(mask,merge,op1,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vnot\\.v\\s+v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}]}