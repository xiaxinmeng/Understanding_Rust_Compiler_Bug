{"sha": "36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYwNTRmYWJmNWI3YjQ3ZmZhOGM3YzZmOTNjNDM2ZGQ4ZThjODA3Yw==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-05-01T15:37:52Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-05-01T15:37:52Z"}, "message": "[AArch64] Refactor reduc_<su>plus patterns.\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_gimple_fold_builtin.c): Fold more modes for reduc_splus_.\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(reduc_splus_): Add new modes.\n\t(reduc_uplus_): New.\n\t* config/aarch64/aarch64-simd.md (aarch64_addvv4sf): Remove.\n\t(reduc_uplus_v4sf): Likewise.\n\t(reduc_splus_v4sf): Likewise.\n\t(aarch64_addv<mode>): Likewise.\n\t(reduc_uplus_<mode>): Likewise.\n\t(reduc_splus_<mode>): Likewise.\n\t(aarch64_addvv2di): Likewise.\n\t(reduc_uplus_v2di): Likewise.\n\t(reduc_splus_v2di): Likewise.\n\t(aarch64_addvv2si): Likewise.\n\t(reduc_uplus_v2si): Likewise.\n\t(reduc_splus_v2si): Likewise.\n\t(reduc_<sur>plus_<mode>): New.\n\t(reduc_<sur>plus_v2di): Likewise.\n\t(reduc_<sur>plus_v2si): Likewise.\n\t(reduc_<sur>plus_v4sf): Likewise.\n\t(aarch64_addpv4sf): Likewise.\n\t* config/aarch64/arm_neon.h\n\t(vaddv<q>_<s,u,f><8, 16, 32, 64): Rewrite using builtins.\n\t* config/aarch64/iterators.md (unspec): Remove UNSPEC_ADDV,\n\tadd UNSPEC_SADDV, UNSPEC_UADDV.\n\t(SUADDV): New.\n\t(sur): Add UNSPEC_SADDV, UNSPEC_UADDV.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vect-vaddv.c: New.\n\nFrom-SVN: r198500", "tree": {"sha": "683e38183557a74cc9a0e030ad6dd01a5136bc41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/683e38183557a74cc9a0e030ad6dd01a5136bc41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6dce23a8ae9579e12e73201802ef553c13c4f023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dce23a8ae9579e12e73201802ef553c13c4f023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dce23a8ae9579e12e73201802ef553c13c4f023"}], "stats": {"total": 557, "additions": 303, "deletions": 254}, "files": [{"sha": "f21e90bb1bbe244e4ed2db549aa04e9b8f3e63ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "patch": "@@ -1,3 +1,34 @@\n+2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_gimple_fold_builtin.c): Fold more modes for reduc_splus_.\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(reduc_splus_): Add new modes.\n+\t(reduc_uplus_): New.\n+\t* config/aarch64/aarch64-simd.md (aarch64_addvv4sf): Remove.\n+\t(reduc_uplus_v4sf): Likewise.\n+\t(reduc_splus_v4sf): Likewise.\n+\t(aarch64_addv<mode>): Likewise.\n+\t(reduc_uplus_<mode>): Likewise.\n+\t(reduc_splus_<mode>): Likewise.\n+\t(aarch64_addvv2di): Likewise.\n+\t(reduc_uplus_v2di): Likewise.\n+\t(reduc_splus_v2di): Likewise.\n+\t(aarch64_addvv2si): Likewise.\n+\t(reduc_uplus_v2si): Likewise.\n+\t(reduc_splus_v2si): Likewise.\n+\t(reduc_<sur>plus_<mode>): New.\n+\t(reduc_<sur>plus_v2di): Likewise.\n+\t(reduc_<sur>plus_v2si): Likewise.\n+\t(reduc_<sur>plus_v4sf): Likewise.\n+\t(aarch64_addpv4sf): Likewise.\n+\t* config/aarch64/arm_neon.h\n+\t(vaddv<q>_<s,u,f><8, 16, 32, 64): Rewrite using builtins.\n+\t* config/aarch64/iterators.md (unspec): Remove UNSPEC_ADDV,\n+\tadd UNSPEC_SADDV, UNSPEC_UADDV.\n+\t(SUADDV): New.\n+\t(sur): Add UNSPEC_SADDV, UNSPEC_UADDV.\n+\n 2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/arm_neon.h"}, {"sha": "4fdfe247a215708568494b29ae612b7ff2641590", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "patch": "@@ -1365,7 +1365,7 @@ aarch64_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \n \t  switch (fcode)\n \t    {\n-\t      BUILTIN_VDQF (UNOP, addv, 0)\n+\t      BUILTIN_VALL (UNOP, reduc_splus_, 10)\n \t\tnew_stmt = gimple_build_assign_with_ops (\n \t\t\t\t\t\tREDUC_PLUS_EXPR,\n \t\t\t\t\t\tgimple_call_lhs (stmt),"}, {"sha": "e4201732bcd0a15657ea77101c9525e9ae544783", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "patch": "@@ -234,8 +234,9 @@\n   BUILTIN_VSDQ_I_DI (BINOP, cmgtu, 0)\n   BUILTIN_VSDQ_I_DI (BINOP, cmtst, 0)\n \n-  /* Implemented by aarch64_addv<mode>.  */\n-  BUILTIN_VDQF (UNOP, addv, 0)\n+  /* Implemented by reduc_<sur>plus_<mode>.  */\n+  BUILTIN_VALL (UNOP, reduc_splus_, 10)\n+  BUILTIN_VDQ (UNOP, reduc_uplus_, 10)\n \n   /* Implemented by reduc_<maxmin_uns>_<mode>.  */\n   BUILTIN_VDQIF (UNOP, reduc_smax_, 10)"}, {"sha": "13384aa85af3c95ad8c86d6d0e8df5f3f88844ce", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 35, "deletions": 121, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "patch": "@@ -1438,156 +1438,70 @@\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n-;; FP 'across lanes' add.\n+;; 'across lanes' add.\n \n-(define_insn \"aarch64_addpv4sf\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n-       (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_FADDV))]\n- \"TARGET_SIMD\"\n- \"faddp\\\\t%0.4s, %1.4s, %1.4s\"\n-  [(set_attr \"simd_type\" \"simd_fadd\")\n-   (set_attr \"simd_mode\" \"V4SF\")]\n-)\n-\n-(define_expand \"reduc_uplus_v4sf\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n-       (match_operand:V4SF 1 \"register_operand\" \"w\"))]\n- \"TARGET_SIMD\"\n-{\n-  rtx tmp = gen_reg_rtx (V4SFmode);\n-  emit_insn (gen_aarch64_addpv4sf (tmp, operands[1]));\n-  emit_insn (gen_aarch64_addpv4sf (operands[0], tmp));\n-  DONE;\n-})\n-\n-(define_expand \"reduc_splus_v4sf\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n-       (match_operand:V4SF 1 \"register_operand\" \"w\"))]\n- \"TARGET_SIMD\"\n-{\n-  rtx tmp = gen_reg_rtx (V4SFmode);\n-  emit_insn (gen_aarch64_addpv4sf (tmp, operands[1]));\n-  emit_insn (gen_aarch64_addpv4sf (operands[0], tmp));\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_addvv4sf\"\n- [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n-\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n-\t\t     UNSPEC_FADDV))]\n- \"TARGET_SIMD\"\n-{\n-  emit_insn (gen_reduc_splus_v4sf (operands[0], operands[1]));\n-  DONE;\n-})\n-\n-(define_insn \"aarch64_addv<mode>\"\n- [(set (match_operand:V2F 0 \"register_operand\" \"=w\")\n-       (unspec:V2F [(match_operand:V2F 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_FADDV))]\n- \"TARGET_SIMD\"\n- \"faddp\\\\t%<Vetype>0, %1.<Vtype>\"\n-  [(set_attr \"simd_type\" \"simd_fadd\")\n-   (set_attr \"simd_mode\" \"<MODE>\")]\n-)\n-\n-(define_expand \"reduc_uplus_<mode>\"\n- [(set (match_operand:V2F 0 \"register_operand\" \"=w\")\n-       (unspec:V2F [(match_operand:V2F 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_FADDV))]\n- \"TARGET_SIMD\"\n- \"\"\n-)\n-\n-(define_expand \"reduc_splus_<mode>\"\n- [(set (match_operand:V2F 0 \"register_operand\" \"=w\")\n-       (unspec:V2F [(match_operand:V2F 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_FADDV))]\n- \"TARGET_SIMD\"\n- \"\"\n-)\n-\n-;; Reduction across lanes.\n-\n-(define_insn \"aarch64_addv<mode>\"\n+(define_insn \"reduc_<sur>plus_<mode>\"\n  [(set (match_operand:VDQV 0 \"register_operand\" \"=w\")\n        (unspec:VDQV [(match_operand:VDQV 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_ADDV))]\n+\t\t    SUADDV))]\n  \"TARGET_SIMD\"\n  \"addv\\\\t%<Vetype>0, %1.<Vtype>\"\n   [(set_attr \"simd_type\" \"simd_addv\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n-(define_expand \"reduc_splus_<mode>\"\n- [(set (match_operand:VDQV 0 \"register_operand\" \"=w\")\n-       (unspec:VDQV [(match_operand:VDQV 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_ADDV))]\n- \"TARGET_SIMD\"\n- \"\"\n-)\n-\n-(define_expand \"reduc_uplus_<mode>\"\n- [(set (match_operand:VDQV 0 \"register_operand\" \"=w\")\n-       (unspec:VDQV [(match_operand:VDQV 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_ADDV))]\n- \"TARGET_SIMD\"\n- \"\"\n-)\n-\n-(define_insn \"aarch64_addvv2di\"\n+(define_insn \"reduc_<sur>plus_v2di\"\n  [(set (match_operand:V2DI 0 \"register_operand\" \"=w\")\n        (unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_ADDV))]\n+\t\t    SUADDV))]\n  \"TARGET_SIMD\"\n  \"addp\\\\t%d0, %1.2d\"\n-  [(set_attr \"simd_type\" \"simd_add\")\n+  [(set_attr \"simd_type\" \"simd_addv\")\n    (set_attr \"simd_mode\" \"V2DI\")]\n )\n \n-(define_expand \"reduc_uplus_v2di\"\n- [(set (match_operand:V2DI 0 \"register_operand\" \"=w\")\n-       (unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_ADDV))]\n- \"TARGET_SIMD\"\n- \"\"\n-)\n-\n-(define_expand \"reduc_splus_v2di\"\n- [(set (match_operand:V2DI 0 \"register_operand\" \"=w\")\n-       (unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_ADDV))]\n- \"TARGET_SIMD\"\n- \"\"\n-)\n-\n-(define_insn \"aarch64_addvv2si\"\n+(define_insn \"reduc_<sur>plus_v2si\"\n  [(set (match_operand:V2SI 0 \"register_operand\" \"=w\")\n        (unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_ADDV))]\n+\t\t    SUADDV))]\n  \"TARGET_SIMD\"\n  \"addp\\\\t%0.2s, %1.2s, %1.2s\"\n-  [(set_attr \"simd_type\" \"simd_add\")\n+  [(set_attr \"simd_type\" \"simd_addv\")\n    (set_attr \"simd_mode\" \"V2SI\")]\n )\n \n-(define_expand \"reduc_uplus_v2si\"\n- [(set (match_operand:V2SI 0 \"register_operand\" \"=w\")\n-       (unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_ADDV))]\n+(define_insn \"reduc_<sur>plus_<mode>\"\n+ [(set (match_operand:V2F 0 \"register_operand\" \"=w\")\n+       (unspec:V2F [(match_operand:V2F 1 \"register_operand\" \"w\")]\n+\t\t    SUADDV))]\n  \"TARGET_SIMD\"\n- \"\"\n+ \"faddp\\\\t%<Vetype>0, %1.<Vtype>\"\n+  [(set_attr \"simd_type\" \"simd_fadd\")\n+   (set_attr \"simd_mode\" \"<MODE>\")]\n )\n \n-(define_expand \"reduc_splus_v2si\"\n- [(set (match_operand:V2SI 0 \"register_operand\" \"=w\")\n-       (unspec:V2SI [(match_operand:V2SI 1 \"register_operand\" \"w\")]\n-\t\t    UNSPEC_ADDV))]\n+(define_insn \"aarch64_addpv4sf\"\n+ [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+       (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"w\")]\n+\t\t    UNSPEC_FADDV))]\n  \"TARGET_SIMD\"\n- \"\"\n+ \"faddp\\\\t%0.4s, %1.4s, %1.4s\"\n+  [(set_attr \"simd_type\" \"simd_fadd\")\n+   (set_attr \"simd_mode\" \"V4SF\")]\n )\n \n+(define_expand \"reduc_<sur>plus_v4sf\"\n+ [(set (match_operand:V4SF 0 \"register_operand\")\n+       (unspec:V4SF [(match_operand:V4SF 1 \"register_operand\")]\n+\t\t    SUADDV))]\n+ \"TARGET_SIMD\"\n+{\n+  rtx tmp = gen_reg_rtx (V4SFmode);\n+  emit_insn (gen_aarch64_addpv4sf (tmp, operands[1]));\n+  emit_insn (gen_aarch64_addpv4sf (operands[0], tmp));\n+  DONE;\n+})\n+\n ;; 'across lanes' max and min ops.\n \n (define_insn \"reduc_<maxmin_uns>_<mode>\""}, {"sha": "608db35b3dd98aa925ba2d448d708162a0233b20", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 96, "deletions": 129, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "patch": "@@ -4655,116 +4655,6 @@ vaddlvq_u32 (uint32x4_t a)\n   return result;\n }\n \n-__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n-vaddv_s8 (int8x8_t a)\n-{\n-  int8_t result;\n-  __asm__ (\"addv %b0,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n-vaddv_s16 (int16x4_t a)\n-{\n-  int16_t result;\n-  __asm__ (\"addv %h0,%1.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n-vaddv_u8 (uint8x8_t a)\n-{\n-  uint8_t result;\n-  __asm__ (\"addv %b0,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n-vaddv_u16 (uint16x4_t a)\n-{\n-  uint16_t result;\n-  __asm__ (\"addv %h0,%1.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n-vaddvq_s8 (int8x16_t a)\n-{\n-  int8_t result;\n-  __asm__ (\"addv %b0,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n-vaddvq_s16 (int16x8_t a)\n-{\n-  int16_t result;\n-  __asm__ (\"addv %h0,%1.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n-vaddvq_s32 (int32x4_t a)\n-{\n-  int32_t result;\n-  __asm__ (\"addv %s0,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n-vaddvq_u8 (uint8x16_t a)\n-{\n-  uint8_t result;\n-  __asm__ (\"addv %b0,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n-vaddvq_u16 (uint16x8_t a)\n-{\n-  uint16_t result;\n-  __asm__ (\"addv %h0,%1.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-vaddvq_u32 (uint32x4_t a)\n-{\n-  uint32_t result;\n-  __asm__ (\"addv %s0,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vbsl_f32 (uint32x2_t a, float32x2_t b, float32x2_t c)\n {\n@@ -16995,22 +16885,6 @@ vaddlv_u32 (uint32x2_t a)\n   return result;\n }\n \n-__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n-vaddv_s32 (int32x2_t a)\n-{\n-  int32_t result;\n-  __asm__ (\"addp %0.2s, %1.2s, %1.2s\" : \"=w\"(result) : \"w\"(a) : );\n-  return result;\n-}\n-\n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n-vaddv_u32 (uint32x2_t a)\n-{\n-  uint32_t result;\n-  __asm__ (\"addp %0.2s, %1.2s, %1.2s\" : \"=w\"(result) : \"w\"(a) : );\n-  return result;\n-}\n-\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vpaddd_s64 (int64x2_t __a)\n {\n@@ -18026,24 +17900,117 @@ vaddd_u64 (uint64x1_t __a, uint64x1_t __b)\n   return __a + __b;\n }\n \n+/* vaddv */\n+\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vaddv_s8 (int8x8_t __a)\n+{\n+  return vget_lane_s8 (__builtin_aarch64_reduc_splus_v8qi (__a), 0);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vaddv_s16 (int16x4_t __a)\n+{\n+  return vget_lane_s16 (__builtin_aarch64_reduc_splus_v4hi (__a), 0);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vaddv_s32 (int32x2_t __a)\n+{\n+  return vget_lane_s32 (__builtin_aarch64_reduc_splus_v2si (__a), 0);\n+}\n+\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vaddv_u8 (uint8x8_t __a)\n+{\n+  return vget_lane_u8 ((uint8x8_t)\n+\t\t__builtin_aarch64_reduc_uplus_v8qi ((int8x8_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vaddv_u16 (uint16x4_t __a)\n+{\n+  return vget_lane_u16 ((uint16x4_t)\n+\t\t__builtin_aarch64_reduc_uplus_v4hi ((int16x4_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vaddv_u32 (uint32x2_t __a)\n+{\n+  return vget_lane_u32 ((uint32x2_t)\n+\t\t__builtin_aarch64_reduc_uplus_v2si ((int32x2_t) __a), 0);\n+}\n+\n+__extension__ static __inline int8_t __attribute__ ((__always_inline__))\n+vaddvq_s8 (int8x16_t __a)\n+{\n+  return vgetq_lane_s8 (__builtin_aarch64_reduc_splus_v16qi (__a), 0);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vaddvq_s16 (int16x8_t __a)\n+{\n+  return vgetq_lane_s16 (__builtin_aarch64_reduc_splus_v8hi (__a), 0);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vaddvq_s32 (int32x4_t __a)\n+{\n+  return vgetq_lane_s32 (__builtin_aarch64_reduc_splus_v4si (__a), 0);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vaddvq_s64 (int64x2_t __a)\n+{\n+  return vgetq_lane_s64 (__builtin_aarch64_reduc_splus_v2di (__a), 0);\n+}\n+\n+__extension__ static __inline uint8_t __attribute__ ((__always_inline__))\n+vaddvq_u8 (uint8x16_t __a)\n+{\n+  return vgetq_lane_u8 ((uint8x16_t)\n+\t\t__builtin_aarch64_reduc_uplus_v16qi ((int8x16_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vaddvq_u16 (uint16x8_t __a)\n+{\n+  return vgetq_lane_u16 ((uint16x8_t)\n+\t\t__builtin_aarch64_reduc_uplus_v8hi ((int16x8_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vaddvq_u32 (uint32x4_t __a)\n+{\n+  return vgetq_lane_u32 ((uint32x4_t)\n+\t\t__builtin_aarch64_reduc_uplus_v4si ((int32x4_t) __a), 0);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vaddvq_u64 (uint64x2_t __a)\n+{\n+  return vgetq_lane_u64 ((uint64x2_t)\n+\t\t__builtin_aarch64_reduc_uplus_v2di ((int64x2_t) __a), 0);\n+}\n+\n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vaddv_f32 (float32x2_t __a)\n {\n-  float32x2_t t = __builtin_aarch64_addvv2sf (__a);\n+  float32x2_t t = __builtin_aarch64_reduc_splus_v2sf (__a);\n   return vget_lane_f32 (t, 0);\n }\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))\n vaddvq_f32 (float32x4_t __a)\n {\n-  float32x4_t t = __builtin_aarch64_addvv4sf (__a);\n+  float32x4_t t = __builtin_aarch64_reduc_splus_v4sf (__a);\n   return vgetq_lane_f32 (t, 0);\n }\n \n __extension__ static __inline float64_t __attribute__ ((__always_inline__))\n vaddvq_f64 (float64x2_t __a)\n {\n-  float64x2_t t = __builtin_aarch64_addvv2df (__a);\n+  float64x2_t t = __builtin_aarch64_reduc_splus_v2df (__a);\n   return vgetq_lane_f64 (t, 0);\n }\n "}, {"sha": "5945d23436d7cae1192459ec0d4fd39ec9ea1d68", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "patch": "@@ -170,7 +170,8 @@\n     UNSPEC_FMINNMV\t; Used in aarch64-simd.md.\n     UNSPEC_FMINV\t; Used in aarch64-simd.md.\n     UNSPEC_FADDV\t; Used in aarch64-simd.md.\n-    UNSPEC_ADDV\t\t; Used in aarch64-simd.md.\n+    UNSPEC_SADDV\t; Used in aarch64-simd.md.\n+    UNSPEC_UADDV\t; Used in aarch64-simd.md.\n     UNSPEC_SMAXV\t; Used in aarch64-simd.md.\n     UNSPEC_SMINV\t; Used in aarch64-simd.md.\n     UNSPEC_UMAXV\t; Used in aarch64-simd.md.\n@@ -686,6 +687,8 @@\n (define_int_iterator FMAXMINV [UNSPEC_FMAXV UNSPEC_FMINV\n \t\t\t       UNSPEC_FMAXNMV UNSPEC_FMINNMV])\n \n+(define_int_iterator SUADDV [UNSPEC_SADDV UNSPEC_UADDV])\n+\n (define_int_iterator HADDSUB [UNSPEC_SHADD UNSPEC_UHADD\n \t\t\t      UNSPEC_SRHADD UNSPEC_URHADD\n \t\t\t      UNSPEC_SHSUB UNSPEC_UHSUB\n@@ -777,6 +780,7 @@\n \t\t      (UNSPEC_SUBHN2 \"\") (UNSPEC_RSUBHN2 \"r\")\n \t\t      (UNSPEC_SQXTN \"s\") (UNSPEC_UQXTN \"u\")\n \t\t      (UNSPEC_USQADD \"us\") (UNSPEC_SUQADD \"su\")\n+\t\t      (UNSPEC_SADDV \"s\") (UNSPEC_UADDV \"u\")\n \t\t      (UNSPEC_SSLI  \"s\") (UNSPEC_USLI  \"u\")\n \t\t      (UNSPEC_SSRI  \"s\") (UNSPEC_USRI  \"u\")\n \t\t      (UNSPEC_USRA  \"u\") (UNSPEC_SSRA  \"s\")"}, {"sha": "b02d20a54efea8474b0a043e9bb6143bd9e55c94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "patch": "@@ -1,3 +1,7 @@\n+2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/vect-vaddv.c: New.\n+\n 2013-05-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/vect-vmaxv.c: New."}, {"sha": "7db12047e29c8271c7a6ced413cdb933ee039f51", "filename": "gcc/testsuite/gcc.target/aarch64/vect-vaddv.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vaddv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vaddv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vaddv.c?ref=36054fabf5b7b47ffa8c7c6f93c436dd8e8c807c", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps -ffast-math\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+extern float fabsf (float);\n+extern double fabs (double);\n+\n+#define NUM_TESTS 16\n+#define DELTA 0.000001\n+\n+int8_t input_int8[] = {1, 56, 2, -9, -90, 23, 54, 76,\n+\t\t       -4, 34, 110, -110, 6, 4, 75, -34};\n+int16_t input_int16[] = {1, 56, 2, -9, -90, 23, 54, 76,\n+\t\t\t -4, 34, 110, -110, 6, 4, 75, -34};\n+int32_t input_int32[] = {1, 56, 2, -9, -90, 23, 54, 76,\n+\t\t\t -4, 34, 110, -110, 6, 4, 75, -34};\n+int64_t input_int64[] = {1, 56, 2, -9, -90, 23, 54, 76,\n+\t\t\t -4, 34, 110, -110, 6, 4, 75, -34};\n+\n+uint8_t input_uint8[] = {1, 56, 2, 9, 90, 23, 54, 76,\n+\t\t\t 4, 34, 110, 110, 6, 4, 75, 34};\n+uint16_t input_uint16[] = {1, 56, 2, 9, 90, 23, 54, 76,\n+\t\t\t   4, 34, 110, 110, 6, 4, 75, 34};\n+uint32_t input_uint32[] = {1, 56, 2, 9, 90, 23, 54, 76,\n+\t\t\t   4, 34, 110, 110, 6, 4, 75, 34};\n+\n+uint64_t input_uint64[] = {1, 56, 2, 9, 90, 23, 54, 76,\n+\t\t\t   4, 34, 110, 110, 6, 4, 75, 34};\n+\n+float input_float32[] = {0.1f, -0.1f, 0.4f, 10.3f,\n+\t\t\t 200.0f, -800.0f, -13.0f, -0.5f,\n+\t\t\t 7.9f, -870.0f, 10.4f, 310.11f,\n+\t\t\t 0.0f, -865.0f, -2213.0f, -1.5f};\n+\n+double input_float64[] = {0.1, -0.1, 0.4, 10.3,\n+\t\t\t  200.0, -800.0, -13.0, -0.5,\n+\t\t\t  7.9, -870.0, 10.4, 310.11,\n+\t\t\t  0.0, -865.0, -2213.0, -1.5};\n+\n+#define EQUALF(a, b) (fabsf (a - b) < DELTA)\n+#define EQUALD(a, b) (fabs (a - b) < DELTA)\n+#define EQUALL(a, b) (a == b)\n+\n+#define TEST(SUFFIX, Q, TYPE, LANES, FLOAT)\t\t\t\t\\\n+int\t\t\t\t\t\t\t\t\t\\\n+test_vaddv##SUFFIX##_##TYPE##x##LANES##_t (void)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int i, j;\t\t\t\t\t\t\t\t\\\n+  int moves = (NUM_TESTS - LANES) + 1;\t\t\t\t\t\\\n+  TYPE##_t out_l[NUM_TESTS];\t\t\t\t\t\t\\\n+  TYPE##_t out_v[NUM_TESTS];\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Calculate linearly.  */\t\t\t\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      out_l[i] = input_##TYPE[i];\t\t\t\t\t\\\n+      for (j = 1; j < LANES; j++)\t\t\t\t\t\\\n+\tout_l[i] += input_##TYPE[i + j];\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Calculate using vector reduction intrinsics.  */\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      TYPE##x##LANES##_t t1 = vld1##Q##_##SUFFIX (input_##TYPE + i);\t\\\n+      out_v[i] = vaddv##Q##_##SUFFIX (t1);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Compare.  */\t\t\t\t\t\t\t\\\n+  for (i = 0; i < moves; i++)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (!EQUAL##FLOAT (out_v[i], out_l[i]))\t\t\t\t\\\n+\treturn 0;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  return 1;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define BUILD_VARIANTS(TYPE, STYPE, W32, W64, F)\t\\\n+TEST (STYPE,  , TYPE, W32, F)\t\t\t\t\\\n+TEST (STYPE, q, TYPE, W64, F)\t\t\t\t\\\n+\n+BUILD_VARIANTS (int8, s8, 8, 16, L)\n+BUILD_VARIANTS (uint8, u8, 8, 16, L)\n+/* { dg-final { scan-assembler \"addv\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.8b\" } } */\n+/* { dg-final { scan-assembler \"addv\\\\tb\\[0-9\\]+, v\\[0-9\\]+\\.16b\" } } */\n+BUILD_VARIANTS (int16, s16, 4, 8, L)\n+BUILD_VARIANTS (uint16, u16, 4, 8, L)\n+/* { dg-final { scan-assembler \"addv\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.4h\" } } */\n+/* { dg-final { scan-assembler \"addv\\\\th\\[0-9\\]+, v\\[0-9\\]+\\.8h\" } } */\n+BUILD_VARIANTS (int32, s32, 2, 4, L)\n+BUILD_VARIANTS (uint32, u32, 2, 4, L)\n+/* { dg-final { scan-assembler \"addp\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"addv\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.4s\" } } */\n+TEST (s64, q, int64, 2, D)\n+TEST (u64, q, uint64, 2, D)\n+/* { dg-final { scan-assembler \"addp\\\\td\\[0-9\\]+\\, v\\[0-9\\]+\\.2d\" } } */\n+\n+BUILD_VARIANTS (float32, f32, 2, 4, F)\n+/* { dg-final { scan-assembler \"faddp\\\\ts\\[0-9\\]+, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"faddp\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n+TEST (f64, q, float64, 2, D)\n+/* { dg-final { scan-assembler \"faddp\\\\td\\[0-9\\]+\\, v\\[0-9\\]+\\.2d\" } } */\n+\n+#undef TEST\n+#define TEST(SUFFIX, Q, TYPE, LANES, FLOAT)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  if (!test_vaddv##SUFFIX##_##TYPE##x##LANES##_t ())\t\\\n+    abort ();\t\t\t\t\t\t\\\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+BUILD_VARIANTS (int8, s8, 8, 16, L)\n+BUILD_VARIANTS (uint8, u8, 8, 16, L)\n+BUILD_VARIANTS (int16, s16, 4, 8, L)\n+BUILD_VARIANTS (uint16, u16, 4, 8, L)\n+BUILD_VARIANTS (int32, s32, 2, 4, L)\n+BUILD_VARIANTS (uint32, u32, 2, 4, L)\n+\n+BUILD_VARIANTS (float32, f32, 2, 4, F)\n+TEST (f64, q, float64, 2, D)\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}