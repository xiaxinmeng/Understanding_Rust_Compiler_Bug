{"sha": "ba123b0de58bd9c7dbc2b745a82e7f28c6123af9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExMjNiMGRlNThiZDljN2RiYzJiNzQ1YTgyZTdmMjhjNjEyM2FmOQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-05-16T08:55:04Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-05-16T08:55:04Z"}, "message": "[AArch64 costs 7/18] Improve SET cost.\n\ngcc/\n\n\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Improve costing\n\tfor SET RTX.\n\n\nCo-Authored-By: Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n\nFrom-SVN: r210499", "tree": {"sha": "e68f24f928a7b00168e03ab9805ef88b507641ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e68f24f928a7b00168e03ab9805ef88b507641ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba123b0de58bd9c7dbc2b745a82e7f28c6123af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba123b0de58bd9c7dbc2b745a82e7f28c6123af9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba123b0de58bd9c7dbc2b745a82e7f28c6123af9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba123b0de58bd9c7dbc2b745a82e7f28c6123af9/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7fc5ef02f4a8071a6d323bc998cdb641e6070371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc5ef02f4a8071a6d323bc998cdb641e6070371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fc5ef02f4a8071a6d323bc998cdb641e6070371"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "908e950295aee0614421b7003871e463414fce62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba123b0de58bd9c7dbc2b745a82e7f28c6123af9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba123b0de58bd9c7dbc2b745a82e7f28c6123af9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba123b0de58bd9c7dbc2b745a82e7f28c6123af9", "patch": "@@ -1,3 +1,9 @@\n+2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n+\t    Philip Tomsich  <philipp.tomsich@theobroma-systems.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Improve costing\n+\tfor SET RTX.\n+\n 2014-05-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_rtx_costs): Set default costs."}, {"sha": "92fbd4d0f1c89293deb2ee8cb31c9481e41467f0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba123b0de58bd9c7dbc2b745a82e7f28c6123af9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba123b0de58bd9c7dbc2b745a82e7f28c6123af9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ba123b0de58bd9c7dbc2b745a82e7f28c6123af9", "patch": "@@ -4861,6 +4861,8 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n   switch (code)\n     {\n     case SET:\n+      /* The cost depends entirely on the operands to SET.  */\n+      *cost = 0;\n       op0 = SET_DEST (x);\n       op1 = SET_SRC (x);\n \n@@ -4870,23 +4872,33 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t  if (speed)\n \t    *cost += extra_cost->ldst.store;\n \n-\t  if (op1 != const0_rtx)\n-\t    *cost += rtx_cost (op1, SET, 1, speed);\n+\t  *cost += rtx_cost (op1, SET, 1, speed);\n \t  return true;\n \n \tcase SUBREG:\n \t  if (! REG_P (SUBREG_REG (op0)))\n \t    *cost += rtx_cost (SUBREG_REG (op0), SET, 0, speed);\n+\n \t  /* Fall through.  */\n \tcase REG:\n-\t  /* Cost is just the cost of the RHS of the set.  */\n-\t  *cost += rtx_cost (op1, SET, 1, true);\n+\t  /* const0_rtx is in general free, but we will use an\n+\t     instruction to set a register to 0.  */\n+          if (REG_P (op1) || op1 == const0_rtx)\n+            {\n+              /* The cost is 1 per register copied.  */\n+              int n_minus_1 = (GET_MODE_SIZE (GET_MODE (op0)) - 1)\n+\t\t\t      / UNITS_PER_WORD;\n+              *cost = COSTS_N_INSNS (n_minus_1 + 1);\n+            }\n+          else\n+\t    /* Cost is just the cost of the RHS of the set.  */\n+\t    *cost += rtx_cost (op1, SET, 1, speed);\n \t  return true;\n \n-\tcase ZERO_EXTRACT:  /* Bit-field insertion.  */\n+\tcase ZERO_EXTRACT:\n \tcase SIGN_EXTRACT:\n-\t  /* Strip any redundant widening of the RHS to meet the width of\n-\t     the target.  */\n+\t  /* Bit-field insertion.  Strip any redundant widening of\n+\t     the RHS to meet the width of the target.  */\n \t  if (GET_CODE (op1) == SUBREG)\n \t    op1 = SUBREG_REG (op1);\n \t  if ((GET_CODE (op1) == ZERO_EXTEND\n@@ -4895,10 +4907,25 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t      && (GET_MODE_BITSIZE (GET_MODE (XEXP (op1, 0)))\n \t\t  >= INTVAL (XEXP (op0, 1))))\n \t    op1 = XEXP (op1, 0);\n-\t  *cost += rtx_cost (op1, SET, 1, speed);\n+\n+          if (CONST_INT_P (op1))\n+            {\n+              /* MOV immediate is assumed to always be cheap.  */\n+              *cost = COSTS_N_INSNS (1);\n+            }\n+          else\n+            {\n+              /* BFM.  */\n+\t      if (speed)\n+\t\t*cost += extra_cost->alu.bfi;\n+              *cost += rtx_cost (op1, (enum rtx_code) code, 1, speed);\n+            }\n+\n \t  return true;\n \n \tdefault:\n+\t  /* We can't make sense of this, assume default cost.  */\n+          *cost = COSTS_N_INSNS (1);\n \t  break;\n \t}\n       return false;"}]}