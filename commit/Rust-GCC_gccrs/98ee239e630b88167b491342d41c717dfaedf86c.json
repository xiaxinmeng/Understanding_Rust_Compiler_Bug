{"sha": "98ee239e630b88167b491342d41c717dfaedf86c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThlZTIzOWU2MzBiODgxNjdiNDkxMzQyZDQxYzcxN2RmYWVkZjg2Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-17T18:37:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-17T18:37:13Z"}, "message": "(HAVE_ATEXIT): Define.\n\nFrom-SVN: r10143", "tree": {"sha": "d4f1553933030811ae75fee355c5c1e9ff5f0101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4f1553933030811ae75fee355c5c1e9ff5f0101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ee239e630b88167b491342d41c717dfaedf86c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ee239e630b88167b491342d41c717dfaedf86c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ee239e630b88167b491342d41c717dfaedf86c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ee239e630b88167b491342d41c717dfaedf86c/comments", "author": null, "committer": null, "parents": [{"sha": "fb695d4a371d266b283f0d1657520ad034c00ddc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb695d4a371d266b283f0d1657520ad034c00ddc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb695d4a371d266b283f0d1657520ad034c00ddc"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "99b5efe3575c7060d665a3acd8c167eac55d6353", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ee239e630b88167b491342d41c717dfaedf86c/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ee239e630b88167b491342d41c717dfaedf86c/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=98ee239e630b88167b491342d41c717dfaedf86c", "patch": "@@ -1,5 +1,5 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n-   Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1994, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -317,6 +317,9 @@ const_section ()\t\t\t\t\t\\\n   fputc ('\\n', (FILE));\t\t\t\t\t\t\t\\\n }\n \n+/* True for VMS V4.6 and later.  */\n+#define HAVE_ATEXIT\n+\n /* The following definitions are used in libgcc2.c with the __main\n    function.  The _SHR symbol is used when the sharable image library\n    for libg++ is used - this is picked up automatically by the linker\n@@ -335,25 +338,22 @@ const_section ()\t\t\t\t\t\\\n #define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   func_ptr *p;\t\t\t\t\t\t\t\t\\\n-  extern func_ptr __CTOR_LIST__[1];\t\t\t\t\t\\\n-  extern func_ptr __CTOR_LIST_END__[1];\t\t\t\t\t\\\n-  extern func_ptr __CTOR_LIST_SHR__[1];\t\t\t\t\t\\\n-  extern func_ptr __CTOR_LIST_SHR_END__[1];\t\t\t\t\\\n-  if( &__CTOR_LIST_SHR__[0] != &__CTOR_LIST__[1])\t\t\t\\\n-  for (p = __CTOR_LIST_SHR__ + 1; p < __CTOR_LIST_SHR_END__ ; p++ )\t\\\n-    if (*p) (*p) ();\t\t\t\t\t\t\t\\\n+  extern func_ptr __CTOR_LIST__[1], __CTOR_LIST_END__[1];\t\t\\\n+  extern func_ptr __CTOR_LIST_SHR__[1], __CTOR_LIST_SHR_END__[1];\t\\\n+  if (&__CTOR_LIST_SHR__[0] != &__CTOR_LIST__[1])\t\t\t\\\n+    for (p = __CTOR_LIST_SHR__ + 1; p < __CTOR_LIST_SHR_END__ ; p++ )\t\\\n+      if (*p) (*p) ();\t\t\t\t\t\t\t\\\n   for (p = __CTOR_LIST__ + 1; p < __CTOR_LIST_END__ ; p++ )\t\t\\\n     if (*p) (*p) ();\t\t\t\t\t\t\t\\\n-  atexit (__do_global_dtors);\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n+  do {\t/* arrange for `return' from main() to pass through exit() */\t\\\n       __label__ foo;\t\t\t\t\t\t\t\\\n       int *callers_caller_fp = (int *) __builtin_frame_address (3);\t\\\n       register int retval asm (\"r0\");\t\t\t\t\t\\\n       callers_caller_fp[4] = (int) && foo;\t\t\t\t\\\n-      return;\t\t\t\t\t\t\t\t\\\n+      break;\t\t/* out of do-while block */\t\t\t\\\n     foo:\t\t\t\t\t\t\t\t\\\n       exit (retval);\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+  } while (0);\t\t\t\t\t\t\t\t\\\n } while (0)\n \n #define __DTOR_LIST__ __gxx_clean_0\n@@ -365,15 +365,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define DO_GLOBAL_DTORS_BODY\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   func_ptr *p;\t\t\t\t\t\t\t\t\\\n-  extern func_ptr __DTOR_LIST__[1];\t\t\t\t\t\\\n-  extern func_ptr __DTOR_LIST_END__[1];\t\t\t\t\t\\\n-  extern func_ptr __DTOR_LIST_SHR__[1];\t\t\t\t\t\\\n-  extern func_ptr __DTOR_LIST_SHR_END__[1];\t\t\t\t\\\n+  extern func_ptr __DTOR_LIST__[1], __DTOR_LIST_END__[1];\t\t\\\n+  extern func_ptr __DTOR_LIST_SHR__[1], __DTOR_LIST_SHR_END__[1];\t\\\n   for (p = __DTOR_LIST__ + 1; p < __DTOR_LIST_END__ ; p++ )\t\t\\\n     if (*p) (*p) ();\t\t\t\t\t\t\t\\\n-  if( &__DTOR_LIST_SHR__[0] != &__DTOR_LIST__[1])\t\t\t\\\n-  for (p = __DTOR_LIST_SHR__ + 1; p < __DTOR_LIST_SHR_END__ ; p++ )\t\\\n-    if (*p) (*p) ();\t\t\t\t\t\t\t\\\n+  if (&__DTOR_LIST_SHR__[0] != &__DTOR_LIST__[1])\t\t\t\\\n+    for (p = __DTOR_LIST_SHR__ + 1; p < __DTOR_LIST_SHR_END__ ; p++ )\t\\\n+      if (*p) (*p) ();\t\t\t\t\t\t\t\\\n } while (0)\n \n #endif /* L__main */"}]}