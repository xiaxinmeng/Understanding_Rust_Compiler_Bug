{"sha": "e1dfac7e71056e879f101fef1c5ecb8ff6be1a1f", "node_id": "C_kwDOANBUbNoAKGUxZGZhYzdlNzEwNTZlODc5ZjEwMWZlZjFjNWVjYjhmZjZiZTFhMWY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-09T12:40:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-02-15T07:28:08Z"}, "message": "target/108738 - optimize bit operations in STV\n\nThe following does low-hanging optimizations, combining bitmap\ntest and set and removing redundant operations.\n\n\tPR target/108738\n\t* config/i386/i386-features.cc (scalar_chain::add_to_queue):\n\tCombine bitmap test and set.\n\t(scalar_chain::add_insn): Likewise.\n\t(scalar_chain::analyze_register_chain): Remove redundant\n\tattempt to add to queue and instead strengthen assert.\n\tSink common attempts to mark the def dual-mode.\n\t(scalar_chain::add_to_queue): Remove redundant insn bitmap\n\tcheck.", "tree": {"sha": "d0da64355f5c3ddaa408ccbdbf097d7404fcae09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0da64355f5c3ddaa408ccbdbf097d7404fcae09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1dfac7e71056e879f101fef1c5ecb8ff6be1a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1dfac7e71056e879f101fef1c5ecb8ff6be1a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1dfac7e71056e879f101fef1c5ecb8ff6be1a1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1dfac7e71056e879f101fef1c5ecb8ff6be1a1f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec23e9e25eb64bb066dc408fd498861b8587bec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23e9e25eb64bb066dc408fd498861b8587bec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec23e9e25eb64bb066dc408fd498861b8587bec8"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "eff913010091192e5837f16e1dfc54f6711d287d", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1dfac7e71056e879f101fef1c5ecb8ff6be1a1f/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1dfac7e71056e879f101fef1c5ecb8ff6be1a1f/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=e1dfac7e71056e879f101fef1c5ecb8ff6be1a1f", "patch": "@@ -314,14 +314,12 @@ scalar_chain::~scalar_chain ()\n void\n scalar_chain::add_to_queue (unsigned insn_uid)\n {\n-  if (bitmap_bit_p (insns, insn_uid)\n-      || bitmap_bit_p (queue, insn_uid))\n+  if (!bitmap_set_bit (queue, insn_uid))\n     return;\n \n   if (dump_file)\n     fprintf (dump_file, \"  Adding insn %d into chain's #%d queue\\n\",\n \t     insn_uid, chain_id);\n-  bitmap_set_bit (queue, insn_uid);\n }\n \n /* For DImode conversion, mark register defined by DEF as requiring\n@@ -362,10 +360,9 @@ void\n scalar_chain::analyze_register_chain (bitmap candidates, df_ref ref)\n {\n   df_link *chain;\n+  bool mark_def = false;\n \n-  gcc_assert (bitmap_bit_p (insns, DF_REF_INSN_UID (ref))\n-\t      || bitmap_bit_p (candidates, DF_REF_INSN_UID (ref)));\n-  add_to_queue (DF_REF_INSN_UID (ref));\n+  gcc_checking_assert (bitmap_bit_p (insns, DF_REF_INSN_UID (ref)));\n \n   for (chain = DF_REF_CHAIN (ref); chain; chain = chain->next)\n     {\n@@ -398,24 +395,25 @@ scalar_chain::analyze_register_chain (bitmap candidates, df_ref ref)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"  r%d use in insn %d isn't convertible\\n\",\n \t\t     DF_REF_REGNO (chain->ref), uid);\n-\t  mark_dual_mode_def (ref);\n+\t  mark_def = true;\n \t}\n     }\n+\n+  if (mark_def)\n+    mark_dual_mode_def (ref);\n }\n \n /* Add instruction into a chain.  */\n \n void\n scalar_chain::add_insn (bitmap candidates, unsigned int insn_uid)\n {\n-  if (bitmap_bit_p (insns, insn_uid))\n+  if (!bitmap_set_bit (insns, insn_uid))\n     return;\n \n   if (dump_file)\n     fprintf (dump_file, \"  Adding insn %d to chain #%d\\n\", insn_uid, chain_id);\n \n-  bitmap_set_bit (insns, insn_uid);\n-\n   rtx_insn *insn = DF_INSN_UID_GET (insn_uid)->insn;\n   rtx def_set = single_set (insn);\n   if (def_set && REG_P (SET_DEST (def_set))"}]}