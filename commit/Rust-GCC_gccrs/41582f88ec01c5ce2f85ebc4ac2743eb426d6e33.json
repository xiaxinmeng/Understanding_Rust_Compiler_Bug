{"sha": "41582f88ec01c5ce2f85ebc4ac2743eb426d6e33", "node_id": "C_kwDOANBUbNoAKDQxNTgyZjg4ZWMwMWM1Y2UyZjg1ZWJjNGFjMjc0M2ViNDI2ZDZlMzM", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-02-09T22:56:58Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-02-10T00:49:33Z"}, "message": "[COMMITTED] Fix PR aarch64/104474: ICE with vector float initializers and non-consts.\n\nThe problem here is that the aarch64 back-end was placing const0_rtx\ninto the constant vector RTL even if the mode was a floating point mode.\nThe fix is instead to use CONST0_RTX and pass the mode to select the\ncorrect zero (either const_int or const_double).\n\nCommitted as obvious after a bootstrap/test on aarch64-linux-gnu with\nno regressions.\n\n\tPR target/104474\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.cc\n\t(aarch64_sve_expand_vector_init_handle_trailing_constants):\n\tUse CONST0_RTX instead of const0_rtx for the non-constant elements.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/sve/pr104474-1.c: New test.\n\t* gcc.target/aarch64/sve/pr104474-2.c: New test.\n\t* gcc.target/aarch64/sve/pr104474-3.c: New test.", "tree": {"sha": "f49af1bf19ee7e39701cc7a3471491a49836b3b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f49af1bf19ee7e39701cc7a3471491a49836b3b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3adf509fe6feca9442fb36c35dd9a81a3a369d08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adf509fe6feca9442fb36c35dd9a81a3a369d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3adf509fe6feca9442fb36c35dd9a81a3a369d08"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "e3f18fbe7dac51d9fa6c89ec9d15d4986379761a", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=41582f88ec01c5ce2f85ebc4ac2743eb426d6e33", "patch": "@@ -21164,7 +21164,7 @@ aarch64_sve_expand_vector_init_handle_trailing_constants\n \t{\n \t  rtx x = builder.elt (i + nelts_reqd - n_trailing_constants);\n \t  if (!valid_for_const_vector_p (elem_mode, x))\n-\t    x = const0_rtx;\n+\t    x = CONST0_RTX (elem_mode);\n \t  v.quick_push (x);\n \t}\n       rtx const_vec = v.build ();"}, {"sha": "9e5bfe64467dd3158526cbdfa3fa40476c313a67", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr104474-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr104474-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr104474-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr104474-1.c?ref=41582f88ec01c5ce2f85ebc4ac2743eb426d6e33", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-mcpu=neoverse-512tvb -frounding-math -msve-vector-bits=512\" } */\n+\n+typedef float __attribute__((__vector_size__ (64))) F;\n+\n+F\n+foo (void)\n+{\n+  return (F){68435453, 0, 0, 0, 0, 0, 0, 5, 0, 431144844};\n+}"}, {"sha": "02a4b6a8fdc75603d1099bc87977bc8a2bcbfe56", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr104474-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr104474-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr104474-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr104474-2.c?ref=41582f88ec01c5ce2f85ebc4ac2743eb426d6e33", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-mcpu=neoverse-512tvb -msve-vector-bits=512\" } */\n+\n+typedef float __attribute__((__vector_size__ (64))) F;\n+\n+F\n+foo (float t)\n+{\n+  return (F){t, 0, 0, 0, 0, 0, 0, 5, 0, t};\n+}"}, {"sha": "7bed0142968fc3d6bd07e72100ceb2da7e2cb72d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr104474-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr104474-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41582f88ec01c5ce2f85ebc4ac2743eb426d6e33/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr104474-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr104474-3.c?ref=41582f88ec01c5ce2f85ebc4ac2743eb426d6e33", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-mcpu=neoverse-v1 -frounding-math -msve-vector-bits=256\" } */\n+\n+typedef _Float16 __attribute__((__vector_size__ (32))) F;\n+\n+F\n+foo (void)\n+{\n+  return (F){0, 6270, 0, 0, 0, 0, 0, 0, 3229, 0, 40};\n+}"}]}