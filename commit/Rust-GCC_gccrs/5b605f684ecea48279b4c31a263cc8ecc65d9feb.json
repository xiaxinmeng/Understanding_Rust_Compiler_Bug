{"sha": "5b605f684ecea48279b4c31a263cc8ecc65d9feb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI2MDVmNjg0ZWNlYTQ4Mjc5YjRjMzFhMjYzY2M4ZWNjNjVkOWZlYg==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-07-09T07:13:10Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-07-09T07:13:10Z"}, "message": "44th Cygnus<->FSF merge\n\nFrom-SVN: r7693", "tree": {"sha": "d8393eef1445541870011cf311e5e91315809004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8393eef1445541870011cf311e5e91315809004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b605f684ecea48279b4c31a263cc8ecc65d9feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b605f684ecea48279b4c31a263cc8ecc65d9feb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b605f684ecea48279b4c31a263cc8ecc65d9feb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b605f684ecea48279b4c31a263cc8ecc65d9feb/comments", "author": null, "committer": null, "parents": [{"sha": "971ba70d62f95c693c74f15ed355b02f722ee66c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971ba70d62f95c693c74f15ed355b02f722ee66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/971ba70d62f95c693c74f15ed355b02f722ee66c"}], "stats": {"total": 255, "additions": 146, "deletions": 109}, "files": [{"sha": "02fa9f7484354764bfbf5ec3778811112b632933", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5b605f684ecea48279b4c31a263cc8ecc65d9feb", "patch": "@@ -1,3 +1,30 @@\n+Fri Jul  8 17:41:46 1994  Mike Stump  (mrs@cygnus.com)\n+\n+\t* decl.c (cplus_expand_expr_stmt): Wrap statement expressions inside\n+\tCLEANUP_POINT_EXPRs so that the stack slots can be reused.\n+\n+Fri Jul  8 12:59:38 1994  Jason Merrill  (jason@deneb.cygnus.com)\n+\n+\t* method.c (hack_identifier): Fix for new overloading.\n+\n+\t* typeck.c (build_binary_op_nodefault): Don't mess with division by\n+        zero.\n+\n+Fri Jul  8 13:20:28 1994  Gerald Baumgartner  (gb@cs.purdue.edu)\n+\n+\t* decl2.c (finish_file): Only call walk_sigtables, if\n+\tflag_handle_signatures is turned on, don't waste time otherwise.\n+\n+Fri Jul  8 02:27:41 1994  Jason Merrill  (jason@deneb.cygnus.com)\n+\n+\t* decl.c (push_overloaded_decl): Don't create overloads of one when\n+\tshadowing a class type.\n+\t* typeck.c (build_x_function_call): Complain about overloads of one\n+\n+\t* decl.c (grokdeclarator): Don't try to treat a char* as a tree.\n+\t(grokdeclarator): Fix setting of TREE_STATIC.\n+\t(start_decl): Clear DECL_IN_AGGR_P after calling duplicate_decls.\n+\n Thu Jul  7 22:20:46 1994  Gerald Baumgartner  (gb@andros.cygnus.com)\n \n \t* cp-tree.h (walk_sigtables): Created extern declaration.\n@@ -10,6 +37,22 @@ Thu Jul  7 22:20:46 1994  Gerald Baumgartner  (gb@andros.cygnus.com)\n \t* sig.c (build_signature_table_constructor): Mark class member\n \tfunction pointed to from signature table entry as addressable.\n \n+Thu Jul  7 13:39:37 1994  Jason Merrill  (jason@deneb.cygnus.com)\n+\n+\t* decl.c (start_decl): Check new decl of static member variable\n+\tagainst the declaration in the class here.\n+\t(grokvardecl): Instead of here.\n+\n+\t* class.c (prepare_fresh_vtable): Call import_export_vtable if not\n+\t-fvtable-thunks.\n+\t(build_vtable): Ditto.\n+\n+\t* decl2.c (import_export_vtable): Move logic for deciding the\n+\tinterface of a template class from here.\n+\t(import_export_template): To here.\n+\t(finish_vtable_vardecl): Call import_export_template before\n+\timport_export_vtable.\n+\n Wed Jul  6 20:25:48 1994  Mike Stump  (mrs@cygnus.com)\n \n \t* except.c (init_exception_processing): Setup interim_eh_hook to\n@@ -31,6 +74,22 @@ Wed Jul  6 17:55:32 1994  Per Bothner  (bothner@kalessin.cygnus.com)\n \t* decl2.c (mark_vtable_entries):  If -ftable-thunks, set the\n \tvtable entry properly to abort.\n \n+Tue Jul  5 14:07:54 1994  Jason Merrill  (jason@deneb.cygnus.com)\n+\n+\t* typeck.c (build_binary_op_nodefault): Downgrade division by zero\n+\terrors to warnings.\n+\n+\t* call.c (build_overload_call_real): Handle fnname being a list of\n+\tfunctions.\n+\t* typeck.c (build_x_function_call): Pass list of functions to\n+\tbuild_overload_call, not just the name.\n+\t* tree.c (count_functions): Complain when called for invalid\n+\targument.\n+\n+\t* decl.c (grokdeclarator): Fix settings of TREE_STATIC, TREE_PUBLIC\n+\tand DECL_EXTERNAL on static members and initialized const members.\n+\t* decl2.c (grokfield): Reflect this change.\n+\n Fri Jul  1 09:35:51 1994  Jason Merrill  (jason@deneb.cygnus.com)\n \n \t* parse.y (init): ANSI C++ does not forbid { }."}, {"sha": "3392a7a2576308154b79fc0703c9e96414ee4c9d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5b605f684ecea48279b4c31a263cc8ecc65d9feb", "patch": "@@ -2680,7 +2680,16 @@ build_overload_call_real (fnname, parms, flags, final_cp, buildxxx)\n   else\n     parmtypes = void_list_node;\n \n-  functions = lookup_name_nonclass (fnname);\n+  if (is_overloaded_fn (fnname))\n+    {\n+      functions = fnname;\n+      if (TREE_CODE (fnname) == TREE_LIST)\n+\tfnname = TREE_PURPOSE (functions);\n+      else if (TREE_CODE (fnname) == FUNCTION_DECL)\n+\tfnname = DECL_NAME (functions);\n+    }\n+  else \n+    functions = lookup_name_nonclass (fnname);\n \n   if (functions == NULL_TREE)\n     {"}, {"sha": "e715c89e28f70471d646bc034175aa026672b3a8", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5b605f684ecea48279b4c31a263cc8ecc65d9feb", "patch": "@@ -547,10 +547,9 @@ build_vtable (binfo, type)\n   n_vtable_elems += list_length (virtuals);\n #endif\n \n-#if 0\t\t\t\t/* Now done from finish_vtable_vardecl */\n   /* Set TREE_PUBLIC and TREE_EXTERN as appropriate.  */\n-  import_export_vtable (decl, type);\n-#endif\n+  if (! flag_vtable_thunks)\n+    import_export_vtable (decl, type);\n \n   IDENTIFIER_GLOBAL_VALUE (name) = decl = pushdecl_top_level (decl);\n   /* Initialize the association list for this type, based\n@@ -688,10 +687,9 @@ prepare_fresh_vtable (binfo, for_type)\n   n_vtable_elems += list_length (BINFO_VIRTUALS (binfo));\n #endif\n \n-#if 0 /* Now done in finish_vtable_vardecl */\n   /* Set TREE_PUBLIC and TREE_EXTERN as appropriate.  */\n-  import_export_vtable (new_decl, for_type);\n-#endif\n+  if (! flag_vtable_thunks)\n+    import_export_vtable (new_decl, for_type);\n \n   if (TREE_VIA_VIRTUAL (binfo))\n     my_friendly_assert (binfo == binfo_member (BINFO_TYPE (binfo),"}, {"sha": "f3cc1b9f6f1a42ca7344001f4d3af06d23e2116b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 34, "deletions": 60, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5b605f684ecea48279b4c31a263cc8ecc65d9feb", "patch": "@@ -3250,6 +3250,7 @@ push_overloaded_decl (decl, forgettable)\n \t  tree t = TREE_TYPE (old);\n \t  if (IS_AGGR_TYPE (t) && warn_shadow)\n \t    cp_warning (\"`%#D' hides constructor for `%#T'\", decl, t);\n+\t  old = NULL_TREE;\n \t}\n       else if (is_overloaded_fn (old))\n         {\n@@ -5263,17 +5264,6 @@ start_decl (declarator, declspecs, initialized, raises)\n       decl = d;\n     }\n \n-  if (context && TYPE_SIZE (context) != NULL_TREE)\n-    {\n-      /* If it was not explicitly declared `extern',\n-\t revoke any previous claims of DECL_EXTERNAL.  */\n-      if (DECL_THIS_EXTERN (decl) == 0)\n-\tDECL_EXTERNAL (decl) = 0;\n-      if (DECL_LANG_SPECIFIC (decl))\n-\tDECL_IN_AGGR_P (decl) = 0;\n-      pushclass (context, 2);\n-    }\n-\n   /* If this type of object needs a cleanup, and control may\n      jump past it, make a new binding level so that it is cleaned\n      up only when it is initialized first.  */\n@@ -5365,9 +5355,30 @@ start_decl (declarator, declspecs, initialized, raises)\n       DECL_INITIAL (decl) = error_mark_node;\n     }\n \n+  if (context && TYPE_SIZE (context) != NULL_TREE)\n+    {\n+      if (TREE_CODE (decl) == VAR_DECL)\n+\t{\n+\t  tree field = lookup_field (context, DECL_NAME (decl), 0, 0);\n+\t  if (field == NULL_TREE || TREE_CODE (field) != VAR_DECL)\n+\t    cp_error (\"`%#D' is not a static member of `%#T'\", decl, context);\n+\t  else if (duplicate_decls (decl, field))\n+\t    decl = field;\n+\t}\n+      \n+      /* If it was not explicitly declared `extern',\n+\t revoke any previous claims of DECL_EXTERNAL.  */\n+      if (DECL_THIS_EXTERN (decl) == 0)\n+\tDECL_EXTERNAL (decl) = 0;\n+      if (DECL_LANG_SPECIFIC (decl))\n+\tDECL_IN_AGGR_P (decl) = 0;\n+      pushclass (context, 2);\n+    }\n+\n   /* Add this decl to the current binding level, but not if it\n      comes from another scope, e.g. a static member variable.\n      TEM may equal DECL or it may be a previous decl of the same name.  */\n+  \n   if ((TREE_CODE (decl) != PARM_DECL && DECL_CONTEXT (decl) != NULL_TREE)\n       || (TREE_CODE (decl) == TEMPLATE_DECL && !global_bindings_p ())\n       || TREE_CODE (type) == LANG_TYPE)\n@@ -6779,47 +6790,11 @@ grokvardecl (type, declarator, specbits, initialized)\n     {\n       /* If you declare a static member so that it\n \t can be initialized, the code will reach here.  */\n-      tree field = lookup_field (TYPE_OFFSET_BASETYPE (type),\n-\t\t\t\t declarator, 0, 0);\n-      if (field == NULL_TREE || TREE_CODE (field) != VAR_DECL)\n-\t{\n-\t  tree basetype = TYPE_OFFSET_BASETYPE (type);\n-\t  error (\"`%s' is not a static member of class `%s'\",\n-\t\t IDENTIFIER_POINTER (declarator),\n-\t\t TYPE_NAME_STRING (basetype));\n-\t  type = TREE_TYPE (type);\n-\t  decl = build_lang_field_decl (VAR_DECL, declarator, type);\n-\t  DECL_CONTEXT (decl) = basetype;\n-\t  DECL_CLASS_CONTEXT (decl) = basetype;\n-\t}\n-      else\n-\t{\n-\t  tree f_type = TREE_TYPE (field);\n-\t  tree o_type = TREE_TYPE (type);\n-\n-\t  if (TYPE_SIZE (f_type) == NULL_TREE)\n-\t    {\n-\t      if (TREE_CODE (f_type) != TREE_CODE (o_type)\n-\t\t  || (TREE_CODE (f_type) == ARRAY_TYPE\n-\t\t      && TREE_TYPE (f_type) != TREE_TYPE (o_type)))\n-\t\terror (\"redeclaration of type for `%s'\",\n-\t\t       IDENTIFIER_POINTER (declarator));\n-\t      else if (TYPE_SIZE (o_type) != NULL_TREE)\n-\t\tTREE_TYPE (field) = type;\n-\t    }\n-\t  else if (f_type != o_type)\n-\t    error (\"redeclaration of type for `%s'\",\n-\t\t   IDENTIFIER_POINTER (declarator));\n-\t  decl = field;\n-\t  if (initialized && DECL_INITIAL (decl)\n-\t      /* Complain about multiply-initialized\n-\t\t member variables, but don't be faked\n-\t\t out if initializer is empty.  */\n-\t      && ! EMPTY_CONSTRUCTOR_P (DECL_INITIAL (decl)))\n-\t    error_with_aggr_type (DECL_CONTEXT (decl),\n-\t\t\t\t  \"multiple initializations of static member `%s::%s'\",\n-\t\t\t\t  IDENTIFIER_POINTER (DECL_NAME (decl)));\n-\t}\n+      tree basetype = TYPE_OFFSET_BASETYPE (type);\n+      type = TREE_TYPE (type);\n+      decl = build_lang_field_decl (VAR_DECL, declarator, type);\n+      DECL_CONTEXT (decl) = basetype;\n+      DECL_CLASS_CONTEXT (decl) = basetype;\n     }\n   else\n     decl = build_decl (VAR_DECL, declarator, type);\n@@ -6837,7 +6812,7 @@ grokvardecl (type, declarator, specbits, initialized)\n     {\n       TREE_PUBLIC (decl) = 1;\n       TREE_STATIC (decl) = 1;\n-      DECL_EXTERNAL (decl) = !initialized;\n+      DECL_EXTERNAL (decl) = 0;\n     }\n   /* At top level, either `static' or no s.c. makes a definition\n      (perhaps tentative), and absence of `static' makes it public.  */\n@@ -8400,15 +8375,15 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, raises)\n \t\t\t\t\t\t      TREE_TYPE (type), TYPE_ARG_TYPES (type));\n \t\t    else\n \t\t      {\n-\t\t\tcp_error (\"cannot declare member function `%T::%D' within `%T'\",\n+\t\t\tcp_error (\"cannot declare member function `%T::%s' within `%T'\",\n \t\t\t\t  ctype, name, current_class_type);\n \t\t\treturn void_type_node;\n \t\t      }\n \t\t  }\n \t\telse if (TYPE_MAIN_VARIANT (ctype) == current_class_type)\n \t\t  {\n \t\t    if (extra_warnings)\n-\t\t      cp_warning (\"redundant qualification `%T' on member `%D' ignored\",\n+\t\t      cp_warning (\"redundant qualification `%T' on member `%s' ignored\",\n \t\t\t\t  ctype, name);\n \t\t    type = build_offset_type (ctype, type);\n \t\t  }\n@@ -8920,11 +8895,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, raises)\n \t\t   This VAR_DECL is built by build_lang_field_decl.\n \t\t   All other VAR_DECLs are built by build_decl.  */\n \t\tdecl = build_lang_field_decl (VAR_DECL, declarator, type);\n-\t\tif (staticp || TREE_CODE (type) == ARRAY_TYPE)\n-\t\t  TREE_STATIC (decl) = 1;\n-\t\t/* In class context, static means public access.  */\n-\t\tTREE_PUBLIC (decl) = 1;\n-\t\tDECL_EXTERNAL (decl) = !!staticp;\n+\t\tTREE_STATIC (decl) = 1;\n+\t\t/* In class context, 'static' means public access.  */\n+\t\tTREE_PUBLIC (decl) = DECL_EXTERNAL (decl) = !!staticp;\n \t      }\n \t    else\n \t      {\n@@ -11980,6 +11953,7 @@ cplus_expand_expr_stmt (exp)\n \t  warning (\"at this point in file\");\n \t}\n \n+      exp = build1 (CLEANUP_POINT_EXPR, TREE_TYPE (exp), exp);\n       expand_expr_stmt (break_out_cleanups (exp));\n     }\n "}, {"sha": "2b9f8a7d0b737c397c88b0b0a0d5db06c35a2973", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5b605f684ecea48279b4c31a263cc8ecc65d9feb", "patch": "@@ -1244,7 +1244,7 @@ grokfield (declarator, declspecs, raises, init, asmspec_tree)\n \t  grok_function_init (value, init);\n \t  init = NULL_TREE;\n \t}\n-      else if (pedantic && ! TREE_STATIC (value))\n+      else if (pedantic && TREE_CODE (value) != VAR_DECL)\n \t/* Already complained in grokdeclarator.  */\n \tinit = NULL_TREE;\n       else\n@@ -1296,7 +1296,7 @@ grokfield (declarator, declspecs, raises, init, asmspec_tree)\n \t fill in the value of our TREE_CHAIN.  Instead, we\n \t modify finish_decl to do the right thing, namely, to\n \t put this decl out straight away.  */\n-      if (TREE_STATIC (value))\n+      if (TREE_PUBLIC (value))\n \t{\n \t  /* current_class_type can be NULL_TREE in case of error.  */\n \t  if (asmspec == 0 && current_class_type)\n@@ -2335,22 +2335,13 @@ mark_vtable_entries (decl)\n    Note that anything public is tagged TREE_PUBLIC, whether\n    it's public in this file or in another one.  */\n \n-static void\n+void\n import_export_vtable (decl, type)\n   tree decl, type;\n {\n   if (write_virtuals >= 2\n       || CLASSTYPE_TEMPLATE_INSTANTIATION (type))\n     {\n-      if (CLASSTYPE_IMPLICIT_INSTANTIATION (type)\n-\t  && ! flag_implicit_templates\n-\t  && CLASSTYPE_INTERFACE_UNKNOWN (type))\n-\t{\n-\t  SET_CLASSTYPE_INTERFACE_KNOWN (type);\n-\t  CLASSTYPE_INTERFACE_ONLY (type) = 1;\n-\t  CLASSTYPE_VTABLE_NEEDS_WRITING (type) = 0;\n-\t}\n-\n       if (CLASSTYPE_INTERFACE_KNOWN (type))\n \t{\n \t  TREE_PUBLIC (decl) = 1;\n@@ -2365,11 +2356,26 @@ import_export_vtable (decl, type)\n     }\n }\n \n+static void\n+import_export_template (type)\n+     tree type;\n+{\n+  if (CLASSTYPE_IMPLICIT_INSTANTIATION (type)\n+      && ! flag_implicit_templates\n+      && CLASSTYPE_INTERFACE_UNKNOWN (type))\n+    {\n+      SET_CLASSTYPE_INTERFACE_KNOWN (type);\n+      CLASSTYPE_INTERFACE_ONLY (type) = 1;\n+      CLASSTYPE_VTABLE_NEEDS_WRITING (type) = 0;\n+    }\n+}\n+    \n static void\n finish_vtable_vardecl (prev, vars)\n      tree prev, vars;\n {\n   tree ctype = DECL_CONTEXT (vars);\n+  import_export_template (ctype);\n   import_export_vtable (vars, ctype);\n \n   if (flag_vtable_thunks && !CLASSTYPE_INTERFACE_KNOWN (ctype))\n@@ -2798,7 +2804,8 @@ finish_file ()\n #endif\n \n   walk_vtables ((void (*)())0, finish_vtable_vardecl);\n-  walk_sigtables ((void (*)())0, finish_sigtable_vardecl);\n+  if (flag_handle_signatures)\n+    walk_sigtables ((void (*)())0, finish_sigtable_vardecl);\n \n   for (vars = getdecls (); vars; vars = TREE_CHAIN (vars))\n     {"}, {"sha": "e5d72b56176f29db67ecb5f2fd566ef387643469", "filename": "gcc/cp/method.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=5b605f684ecea48279b4c31a263cc8ecc65d9feb", "patch": "@@ -1460,12 +1460,12 @@ hack_identifier (value, name, yychar)\n \n   if (TREE_CODE (value) == TREE_LIST)\n     {\n-      tree t = value;\n-      while (t && TREE_CODE (t) == TREE_LIST)\n+      tree t = get_first_fn (value);\n+      while (t)\n \t{\n-\t  assemble_external (TREE_VALUE (t));\n+\t  assemble_external (t);\n \t  TREE_USED (t) = 1;\n-\t  t = TREE_CHAIN (t);\n+\t  t = DECL_CHAIN (t);\n \t}\n     }\n   else"}, {"sha": "32567446fc0d3c396f0ba43318f0f4e95de2bb04", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5b605f684ecea48279b4c31a263cc8ecc65d9feb", "patch": "@@ -1289,8 +1289,10 @@ count_functions (t)\n {\n   if (TREE_CODE (t) == FUNCTION_DECL)\n     return 1;\n+  else if (TREE_CODE (t) == TREE_LIST)\n+    return decl_list_length (TREE_VALUE (t));\n \n-  return decl_list_length (TREE_VALUE (t));\n+  my_friendly_abort (359);\n }\n \n /* Like value_member, but for DECL_CHAINs.  */"}, {"sha": "fe8e7ba624c7ff5f9de9a2901b0134f0ddef2967", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5b605f684ecea48279b4c31a263cc8ecc65d9feb", "patch": "@@ -2076,16 +2076,16 @@ build_x_function_call (function, params, decl)\n \t}\n       else\n \t{\n-\t  tree id = TREE_PURPOSE (function);\n-\t  function = TREE_VALUE (function);\n+\t  tree val = TREE_VALUE (function);\n \n-\t  if (TREE_CODE (function) == TEMPLATE_DECL)\n+\t  if (TREE_CODE (val) == TEMPLATE_DECL)\n \t    return build_overload_call_maybe\n-\t      (id, params, LOOKUP_COMPLAIN, (struct candidate *)0);\n-\t  else if (DECL_CHAIN (function) != NULL_TREE)\n+\t      (function, params, LOOKUP_COMPLAIN, (struct candidate *)0);\n+\t  else if (DECL_CHAIN (val) != NULL_TREE)\n \t    return build_overload_call\n-\t      (id, params, LOOKUP_COMPLAIN, (struct candidate *)0);\n-\t  /* else fall out */\n+\t      (function, params, LOOKUP_COMPLAIN, (struct candidate *)0);\n+\t  else\n+\t    my_friendly_abort (360);\n \t}\n     }\n \n@@ -2893,15 +2893,9 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \t  && (code1 == INTEGER_TYPE || code1 == REAL_TYPE))\n \t{\n \t  if (TREE_CODE (op1) == INTEGER_CST && integer_zerop (op1))\n-\t    {\n-\t      error (\"division by zero\");\n-\t      op1 = integer_one_node;\n-\t    }\n+\t    cp_warning (\"division by zero in `%E / 0'\", op0);\n \t  else if (TREE_CODE (op1) == REAL_CST && real_zerop (op1))\n-\t    {\n-\t      error (\"division by zero\");\n-\t      op1 = build_real (TREE_TYPE (op1), dconst1);\n-\t    }\n+\t    cp_warning (\"division by zero in `%E / 0.'\", op0);\n \t      \n \t  if (!(code0 == INTEGER_TYPE && code1 == INTEGER_TYPE))\n \t    resultcode = RDIV_EXPR;\n@@ -2954,15 +2948,9 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n     case TRUNC_MOD_EXPR:\n     case FLOOR_MOD_EXPR:\n       if (code1 == INTEGER_TYPE && integer_zerop (op1))\n-\t{\n-\t  error (\"division by zero\");\n-\t  op1 = integer_one_node;\n-\t}\n+\tcp_warning (\"division by zero in `%E % 0'\", op0);\n       else if (code1 == REAL_TYPE && real_zerop (op1))\n-\t{\n-\t  error (\"division by zero\");\n-\t  op1 = build_real (TREE_TYPE (op1), dconst1);\n-\t}\n+\tcp_warning (\"division by zero in `%E % 0.'\", op0);\n       \n       if (code0 == INTEGER_TYPE && code1 == INTEGER_TYPE)\n \t{"}, {"sha": "871173f12e34332fbbb1b1af65d6315653ad4256", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b605f684ecea48279b4c31a263cc8ecc65d9feb/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=5b605f684ecea48279b4c31a263cc8ecc65d9feb", "patch": "@@ -329,7 +329,7 @@ ack (s, v, v2)\n    silly.  So instead, we just do the equivalent of a call to fatal in the\n    same situation (call exit).  */\n \n-/* First used: 0 (reserved), Last used: 358.  Free:  */\n+/* First used: 0 (reserved), Last used: 360.  Free:  */\n \n static int abortcount = 0;\n "}]}