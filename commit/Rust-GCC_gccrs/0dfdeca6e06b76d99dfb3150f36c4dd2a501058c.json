{"sha": "0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRmZGVjYTZlMDZiNzZkOTlkZmIzMTUwZjM2YzRkZDJhNTAxMDU4Yw==", "commit": {"author": {"name": "Benjamin Chelf", "email": "chelf@codesourcery.com", "date": "2000-07-10T10:56:23Z"}, "committer": {"name": "Ben Chelf", "email": "chelf@gcc.gnu.org", "date": "2000-07-10T10:56:23Z"}, "message": "c-common.h (build_stmt): Declare.\n\n2000-07-10  Benjamin Chelf  <chelf@codesourcery.com>\n\n\t* c-common.h (build_stmt): Declare.\n\t(build_continue_stmt): Likewise.\n\t(build_break_stmt): Likewise.\n\t(build_return_stmt): Likewise.\n\n\t* c-decl.c (do_case): Rewrite to do what previously done in\n\tc-parse.in.\n\n\t* c-semantics.c (build_stmt): Define.\n\t(build_return_stmt): Likewise.\n\t(build_break_stmt): Likewise.\n\t(build_continue_stmt): Likewise.\n\t(build_case_label): Likewise.\n\n\t* c-parse.in (BREAK): Change to build tree, then generate RTL.\n\t(CONTINUE): Likewise.\n\t(RETURN): Likewise.\n\t(CASE): Likewise.\n\t(DEFAULT): Likewise.\n\n\t* c-parse.y: Regenerate.\n\t* c-pasre.c: Likewise.\n\n\t* cp/semantics.c (finish_for_stmt): Remove call to emit_line_note.\n\t(finish_continue_stmt): Likewise.\n\t(begin_for_stmt): Remove call to note_level_for_for.\n\t(finish_goto_stmt): Change call from build_min_nt\n\tto build_stmt.\n\t(finish_expr_stmt): Likewise.\n\t(begin_if_stmt): Likewise.\n\t(begin_while_stmt): Likewise.\n\t(finish_while_stmt): Likewise.\n\t(finish_return_stmt): Likewise.\n\t(begin_for_stmt): Likewise.\n\t(finish_for_stmt): Likewise.\n\t(finish_break_stmt): Likewise.\n\t(begin_switch_stmt): Likewise.\n\t(finish_case_label): Likewise.\n\t(genrtl_try_block): Likewise.\n\t(begin_try_block): Likewise.\n\t(begin_handler): Likewise.\n\t(begin_compound_stmt): Likewise.\n\t(finish_asm_stmt): Likewise.\n\t(finish_label_stmt): Likewise.\n\t(add_decl_stmt): Likewise.\n\t(finish_subobject): Likewise.\n\t(finish_decl_cleanup): Likewise.\n\t(finish_named_return_value): Likewise.\n\t(setup_vtbl_ptr): Likewise.\n\t(add_scope_stmt): Likewise.\n\t* cp/decl.c (finish_constructor_body): Likewise.\n\t(finish_destructor_body): Likewise.\n\t* cp/optimize.c (copy_body_r): Likewise.\n\t(initialize_inlined_parameters): Likewise.\n\t(declare_return_variable): Likewise.\n\t(expand_call_inline): Likewise.\n\nFrom-SVN: r34943", "tree": {"sha": "8641e231837656bb79d18970254d75daaf2bb9f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8641e231837656bb79d18970254d75daaf2bb9f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/comments", "author": null, "committer": null, "parents": [{"sha": "f12eef581848449cc0099e63b8e2e20f8979e191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12eef581848449cc0099e63b8e2e20f8979e191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12eef581848449cc0099e63b8e2e20f8979e191"}], "stats": {"total": 386, "additions": 256, "deletions": 130}, "files": [{"sha": "5c3501cc095201999aab3d61f79c3415018aaa87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "patch": "@@ -1,3 +1,28 @@\n+2000-07-10  Benjamin Chelf  <chelf@codesourcery.com>\n+\n+\t* c-common.h (build_stmt): Declare.\n+\t(build_continue_stmt): Likewise.\n+\t(build_break_stmt): Likewise.\n+\t(build_return_stmt): Likewise.\n+\n+\t* c-decl.c (do_case): Rewrite to do what previously done in\n+\tc-parse.in.\n+\n+\t* c-semantics.c (build_stmt): Define.\n+\t(build_return_stmt): Likewise.\n+\t(build_break_stmt): Likewise.\n+\t(build_continue_stmt): Likewise.\n+\t(build_case_label): Likewise.\n+\n+\t* c-parse.in (BREAK): Change to build tree, then generate RTL.\n+\t(CONTINUE): Likewise.\n+\t(RETURN): Likewise.\n+\t(CASE): Likewise.\n+\t(DEFAULT): Likewise.\n+\n+\t* c-parse.y: Regenerate.\n+\t* c-pasre.c: Likewise.\n+\t\n 2000-07-09  Jason Merrill  <jason@redhat.com>\n \n \t* expr.c (expand_expr): Bail earlier if we get an error_mark_node."}, {"sha": "b65b495218a0301a81978fc258687d58370af154", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "patch": "@@ -457,7 +457,11 @@ extern tree lang_expand_stmt                    PARAMS ((tree));\n extern void c_expand_return\t\t\tPARAMS ((tree));\n extern tree c_expand_start_case\t\t\tPARAMS ((tree));\n extern void do_case\t\t\t\tPARAMS ((tree, tree));\n+extern tree build_stmt                          PARAMS ((enum tree_code, ...));\n extern tree build_case_label                    PARAMS ((tree, tree));\n+extern tree build_continue_stmt                 PARAMS ((void));\n+extern tree build_break_stmt                    PARAMS ((void));\n+extern tree build_return_stmt                   PARAMS ((tree));\n \n #define COMPOUND_STMT_NO_SCOPE(NODE)\tTREE_LANG_FLAG_0 (NODE)\n "}, {"sha": "239bf1327fd4d7cd2e54df4ca6948532b7b73129", "filename": "gcc/c-decl.c", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "patch": "@@ -6841,7 +6841,62 @@ do_case (low_value, high_value)\n      tree low_value;\n      tree high_value;\n {\n-  abort ();\n+  tree value1 = NULL_TREE, value2 = NULL_TREE, label;\n+\n+  if (low_value != NULL_TREE)\n+    value1 = check_case_value (low_value);\n+  if (high_value != NULL_TREE)\n+    value2 = check_case_value (high_value);\n+\n+  label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n+  \n+  if (pedantic && (high_value != NULL_TREE))\n+    pedwarn (\"ANSI C forbids case ranges\");\n+\n+  if (value1 != error_mark_node && value2 != error_mark_node)\n+    {\n+      tree duplicate;\n+      int success;\n+      \n+      if (high_value == NULL_TREE && value1 != NULL_TREE &&\n+\t  pedantic && ! INTEGRAL_TYPE_P (TREE_TYPE (value1)))\n+\tpedwarn (\"label must have integral type in ANSI C\");\n+      \n+      if (low_value == NULL_TREE)\n+\tsuccess = pushcase (NULL_TREE, 0, label, &duplicate);\n+      else if (high_value == NULL_TREE)\n+\tsuccess = pushcase (value1, convert_and_check, label,\n+\t\t\t    &duplicate);\n+      else\n+\tsuccess = pushcase_range (value1, value2, convert_and_check,\n+\t\t\t\t  label, &duplicate);\n+      \n+      if (success == 1)\n+\t{\n+\t  if (low_value == NULL_TREE)\n+\t    error (\"default label not within a switch statement\");\n+\t  else\n+\t    error (\"case label not within a switch statement\");\n+\t}\n+      else if (success == 2) {\n+\tif (low_value == NULL_TREE) \n+\t  {\n+\t    error (\"multiple default labels in one switch\");\n+\t    error_with_decl (duplicate, \"this is the first default label\");\n+\t  }\n+\telse\n+\t  error (\"dupicate case value\");\n+\tif (high_value != NULL_TREE)\n+\t  error_with_decl (duplicate, \"this is the first entry for that value\");\n+      }\n+      else if (low_value != NULL_TREE) \n+\t{\n+\t  if (success == 3)\n+\t    warning (\"case value out of range\");\n+\t  else if (success == 5)\n+\t    error (\"case label within scope of cleanup or variable array\");\n+\t}\n+    }\n }\n \n /* Language specific handler of tree nodes used when generating RTL\n@@ -6863,3 +6918,4 @@ set_current_function_name_declared (i)\n {\n   abort ();\n }\n+"}, {"sha": "646183cc340ce4efbba1b31c731d2396acdf0271", "filename": "gcc/c-parse.in", "status": "modified", "additions": 24, "deletions": 85, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "patch": "@@ -1843,23 +1843,21 @@ stmt:\n \t  lineno_labeled_stmt\n \t\t{ expand_end_case ($3); }\n \t| BREAK ';'\n-\t\t{ stmt_count++;\n-\t\t  emit_line_note ($<filename>-1, $<lineno>0);\n-\t\t  if ( ! expand_exit_something ())\n-\t\t    error (\"break statement not within loop or switch\"); }\n+\t        { tree break_stmt = build_break_stmt ();\n+\t\t  stmt_count++;\n+\t\t  genrtl_break_stmt (); }\n \t| CONTINUE ';'\n-\t\t{ stmt_count++;\n-\t\t  emit_line_note ($<filename>-1, $<lineno>0);\n-\t\t  if (! expand_continue_loop (NULL_PTR))\n-\t\t    error (\"continue statement not within a loop\"); }\n+                { tree continue_stmt = build_continue_stmt ();\n+                  stmt_count++;\n+\t\t  genrtl_continue_stmt (); }\n \t| RETURN ';'\n-\t\t{ stmt_count++;\n-\t\t  emit_line_note ($<filename>-1, $<lineno>0);\n-\t\t  c_expand_return (NULL_TREE); }\n+                { tree return_stmt = build_return_stmt (NULL_TREE);\n+                  stmt_count++;\n+\t\t  genrtl_return_stmt (RETURN_EXPR(return_stmt)); }\n \t| RETURN expr ';'\n-\t\t{ stmt_count++;\n-\t\t  emit_line_note ($<filename>-1, $<lineno>0);\n-\t\t  c_expand_return ($2); }\n+                { tree return_stmt = build_return_stmt ($2);\n+                  stmt_count++;\n+\t\t  genrtl_return_stmt (RETURN_EXPR(return_stmt)); }\n \t| ASM_KEYWORD maybe_type_qual '(' expr ')' ';'\n \t\t{ stmt_count++;\n \t\t  emit_line_note ($<filename>-1, $<lineno>0);\n@@ -1971,82 +1969,23 @@ all_iter_stmt_with_decl:\n    also at the end of a compound statement.  */\n \n label:\t  CASE expr_no_commas ':'\n-\t\t{ register tree value = check_case_value ($2);\n-\t\t  register tree label\n-\t\t    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n-\n+                { tree case_label_tree = build_case_label ($2, NULL_TREE);\n \t\t  stmt_count++;\n-\n-\t\t  if (value != error_mark_node)\n-\t\t    {\n-\t\t      tree duplicate;\n-\t\t      int success;\n-\n-\t\t      if (pedantic && ! INTEGRAL_TYPE_P (TREE_TYPE (value)))\n-\t\t\tpedwarn (\"label must have integral type in ANSI C\");\n-\n-\t\t      success = pushcase (value, convert_and_check,\n-\t\t\t\t\t  label, &duplicate);\n-\n-\t\t      if (success == 1)\n-\t\t\terror (\"case label not within a switch statement\");\n-\t\t      else if (success == 2)\n-\t\t\t{\n-\t\t\t  error (\"duplicate case value\");\n-\t\t\t  error_with_decl (duplicate, \"this is the first entry for that value\");\n-\t\t\t}\n-\t\t      else if (success == 3)\n-\t\t\twarning (\"case value out of range\");\n-\t\t      else if (success == 5)\n-\t\t\terror (\"case label within scope of cleanup or variable array\");\n-\t\t    }\n-\t\t  position_after_white_space (); }\n+\t\t  genrtl_case_label(CASE_LOW(case_label_tree), CASE_HIGH(case_label_tree));\n+\t\t  position_after_white_space ();\n+\t\t}\n \t| CASE expr_no_commas ELLIPSIS expr_no_commas ':'\n-\t\t{ register tree value1 = check_case_value ($2);\n-\t\t  register tree value2 = check_case_value ($4);\n-\t\t  register tree label\n-\t\t    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n-\n-\t\t  if (pedantic)\n-\t\t    pedwarn (\"ANSI C forbids case ranges\");\n+                { tree case_label_tree = build_case_label ($2, $4);\n \t\t  stmt_count++;\n-\n-\t\t  if (value1 != error_mark_node && value2 != error_mark_node)\n-\t\t    {\n-\t\t      tree duplicate;\n-\t\t      int success = pushcase_range (value1, value2,\n-\t\t\t\t\t\t    convert_and_check, label,\n-\t\t\t\t\t\t    &duplicate);\n-\t\t      if (success == 1)\n-\t\t\terror (\"case label not within a switch statement\");\n-\t\t      else if (success == 2)\n-\t\t\t{\n-\t\t\t  error (\"duplicate case value\");\n-\t\t\t  error_with_decl (duplicate, \"this is the first entry for that value\");\n-\t\t\t}\n-\t\t      else if (success == 3)\n-\t\t\twarning (\"case value out of range\");\n-\t\t      else if (success == 4)\n-\t\t\twarning (\"empty case range\");\n-\t\t      else if (success == 5)\n-\t\t\terror (\"case label within scope of cleanup or variable array\");\n-\t\t    }\n-\t\t  position_after_white_space (); }\n+\t\t  genrtl_case_label(CASE_LOW(case_label_tree), CASE_HIGH(case_label_tree));\n+\t\t  position_after_white_space ();\n+\t\t}\n \t| DEFAULT ':'\n-\t\t{\n-\t\t  tree duplicate;\n-\t\t  register tree label\n-\t\t    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n-\t\t  int success = pushcase (NULL_TREE, 0, label, &duplicate);\n+                { tree case_label_tree = build_case_label (NULL_TREE, NULL_TREE);\n \t\t  stmt_count++;\n-\t\t  if (success == 1)\n-\t\t    error (\"default label not within a switch statement\");\n-\t\t  else if (success == 2)\n-\t\t    {\n-\t\t      error (\"multiple default labels in one switch\");\n-\t\t      error_with_decl (duplicate, \"this is the first default label\");\n-\t\t    }\n-\t\t  position_after_white_space (); }\n+\t\t  genrtl_case_label(CASE_LOW(case_label_tree), CASE_HIGH(case_label_tree));\n+\t\t  position_after_white_space ();\n+\t\t}\n \t| identifier ':' maybe_attribute\n \t\t{ tree label = define_label (input_filename, lineno, $1);\n \t\t  stmt_count++;"}, {"sha": "fb669b33d4b7e03c4cc57074591b67c58c0121f5", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "patch": "@@ -36,6 +36,38 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"timevar.h\"\n \n+/* Build a generic statement based on the given type of node and\n+   arguments. Similar to `build_nt', except that we set\n+   TREE_COMPLEXITY to be the current line number.  */\n+\n+tree\n+build_stmt VPARAMS ((enum tree_code code, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  enum tree_code code;\n+#endif\n+  va_list p;\n+  register tree t;\n+  register int length;\n+  register int i;\n+\n+  VA_START (p, code);\n+\n+#ifndef ANSI_PROTOTYPES\n+  code = va_arg (p, enum tree_code);\n+#endif\n+\n+  t = make_node (code);\n+  length = TREE_CODE_LENGTH (code);\n+  TREE_COMPLEXITY (t) = lineno;\n+\n+  for (i = 0; i < length; i++)\n+    TREE_OPERAND (t, i) = va_arg (p, tree);\n+\n+  va_end (p);\n+  return t;\n+}\n+\n /* Some statements, like for-statements or if-statements, require a\n    condition.  This condition can be a declaration.  If T is such a\n    declaration it is processed, and an expression appropriate to use\n@@ -276,6 +308,15 @@ genrtl_do_stmt (t)\n   expand_end_loop ();\n }\n \n+/* Build the node for a return statement and return it. */\n+\n+tree\n+build_return_stmt (expr)\n+     tree expr;\n+{\n+  return (build_stmt (RETURN_STMT, expr));\n+}\n+\n /* Generate the RTL for EXPR, which is a RETURN_STMT. */\n \n void\n@@ -319,6 +360,14 @@ genrtl_for_stmt (t)\n   expand_end_loop ();\n }\n \n+/* Build a break statement node and return it. */\n+\n+tree\n+build_break_stmt ()\n+{\n+  return (build_stmt (BREAK_STMT));\n+}\n+\n /* Generate the RTL for a BREAK_STMT. */\n \n void\n@@ -329,6 +378,14 @@ genrtl_break_stmt ()\n     error (\"break statement not within loop or switch\");\n }\n \n+/* Build a continue statement node and return it. */\n+\n+tree\n+build_continue_stmt ()\n+{\n+  return (build_stmt (CONTINUE_STMT));\n+}\n+\n /* Generate the RTL for a CONTINUE_STMT. */\n \n void\n@@ -388,6 +445,17 @@ genrtl_switch_stmt (t)\n   expand_end_case (cond);\n }\n \n+/* Create a CASE_LABEL tree node and return it. */\n+\n+tree\n+build_case_label (low_value, high_value)\n+     tree low_value;\n+     tree high_value;\n+{\n+  return build_stmt (CASE_LABEL, low_value, high_value);\n+}\n+\n+\n /* Generate the RTL for a CASE_LABEL. */\n \n void "}, {"sha": "0fe79fea7ba325215e71ddbb3ac5ca4a5e5cf625", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "patch": "@@ -1,3 +1,39 @@\n+2000-07-10  Benjamin Chelf  <chelf@codesourcery.com>\n+\n+\t* semantics.c (finish_for_stmt): Remove call to emit_line_note.\n+\t(finish_continue_stmt): Likewise.\n+\t(begin_for_stmt): Remove call to note_level_for_for.\n+\t(finish_goto_stmt): Change call from build_min_nt\n+\tto build_stmt.\n+\t(finish_expr_stmt): Likewise.\n+\t(begin_if_stmt): Likewise.\n+\t(begin_while_stmt): Likewise.\n+\t(finish_while_stmt): Likewise.\n+\t(finish_return_stmt): Likewise.\n+\t(begin_for_stmt): Likewise.\n+\t(finish_for_stmt): Likewise.\n+\t(finish_break_stmt): Likewise.\n+\t(begin_switch_stmt): Likewise.\n+\t(finish_case_label): Likewise.\n+\t(genrtl_try_block): Likewise.\n+\t(begin_try_block): Likewise.\n+\t(begin_handler): Likewise.\n+\t(begin_compound_stmt): Likewise.\n+\t(finish_asm_stmt): Likewise.\n+\t(finish_label_stmt): Likewise.\n+\t(add_decl_stmt): Likewise.\n+\t(finish_subobject): Likewise.\n+\t(finish_decl_cleanup): Likewise.\n+\t(finish_named_return_value): Likewise.\n+\t(setup_vtbl_ptr): Likewise.\n+\t(add_scope_stmt): Likewise.\n+\t* decl.c (finish_constructor_body): Likewise.\n+\t(finish_destructor_body): Likewise.\n+\t* optimize.c (copy_body_r): Likewise.\n+\t(initialize_inlined_parameters): Likewise.\n+\t(declare_return_variable): Likewise.\n+\t(expand_call_inline): Likewise.\n+\t\n 2000-07-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* semantics.c (expand_body): Sync interface information"}, {"sha": "1f49ae637c57fd16a219b0fde9335bf4e2ad1245", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "patch": "@@ -14097,7 +14097,7 @@ finish_constructor_body ()\n {\n   /* Any return from a constructor will end up here.  */\n   if (ctor_label)\n-    add_tree (build_min_nt (LABEL_STMT, ctor_label));\n+    add_tree (build_stmt (LABEL_STMT, ctor_label));\n \n   /* Clear CTOR_LABEL so that finish_return_stmt knows to really\n      generate the return, rather than a goto to CTOR_LABEL.  */\n@@ -14106,7 +14106,7 @@ finish_constructor_body ()\n      constructor to a return of `this'.  */\n   finish_return_stmt (NULL_TREE);\n   /* Mark the end of the constructor.  */\n-  add_tree (build_min_nt (CTOR_STMT));\n+  add_tree (build_stmt (CTOR_STMT));\n }\n \n /* At the end of every destructor we generate code to restore virtual\n@@ -14125,7 +14125,7 @@ finish_destructor_body ()\n   compound_stmt = begin_compound_stmt (/*has_no_scope=*/0);\n \n   /* Any return from a destructor will end up here.  */\n-  add_tree (build_min_nt (LABEL_STMT, dtor_label));\n+  add_tree (build_stmt (LABEL_STMT, dtor_label));\n \n   /* Generate the code to call destructor on base class.  If this\n      destructor belongs to a class with virtual functions, then set"}, {"sha": "1f87c9c2535f3b32d8653c5854bf91e74f6f47a9", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "patch": "@@ -279,16 +279,16 @@ copy_body_r (tp, walk_subtrees, data)\n       tree goto_stmt;\n \n       /* Build the GOTO_STMT.  */\n-      goto_stmt = build_min_nt (GOTO_STMT, id->ret_label);\n+      goto_stmt = build_stmt (GOTO_STMT, id->ret_label);\n       TREE_CHAIN (goto_stmt) = TREE_CHAIN (return_stmt);\n \n       /* If we're returning something, just turn that into an\n \t assignment into the equivalent of the original \n \t RESULT_DECL.  */\n       if (RETURN_EXPR (return_stmt))\n \t{\n-\t  *tp = build_min_nt (EXPR_STMT, \n-\t\t\t      RETURN_EXPR (return_stmt));\n+\t  *tp = build_stmt (EXPR_STMT, \n+\t\t\t    RETURN_EXPR (return_stmt));\n \t  /* And then jump to the end of the function.  */\n \t  TREE_CHAIN (*tp) = goto_stmt;\n \t}\n@@ -431,7 +431,7 @@ initialize_inlined_parameters (id, args, fn)\n \t\t\t (splay_tree_value) var);\n \n       /* Declare this new variable.  */\n-      init_stmt = build_min_nt (DECL_STMT, var);\n+      init_stmt = build_stmt (DECL_STMT, var);\n       TREE_CHAIN (init_stmt) = init_stmts;\n       init_stmts = init_stmt;\n \n@@ -444,9 +444,9 @@ initialize_inlined_parameters (id, args, fn)\n \tDECL_INITIAL (var) = value;\n       else\n \t{\n-\t  init_stmt = build_min_nt (EXPR_STMT,\n-\t\t\t\t    build (INIT_EXPR, TREE_TYPE (p),\n-\t\t\t\t\t   var, value));\n+\t  init_stmt = build_stmt (EXPR_STMT,\n+\t\t\t\t  build (INIT_EXPR, TREE_TYPE (p),\n+\t\t\t\t\t var, value));\n \t  /* Add this initialization to the list.  Note that we want the\n \t     declaration *after* the initialization because we are going\n \t     to reverse all the initialization statements below.  */\n@@ -515,12 +515,12 @@ declare_return_variable (id, use_stmt)\n \t\t     (splay_tree_value) var);\n \n   /* Build the USE_STMT.  */\n-  *use_stmt = build_min_nt (EXPR_STMT, var);\n+  *use_stmt = build_stmt (EXPR_STMT, var);\n \n   /* Build the declaration statement if FN does not return an\n      aggregate.  */\n   if (!aggregate_return_p)\n-    return build_min_nt (DECL_STMT, var);\n+    return build_stmt (DECL_STMT, var);\n   /* If FN does return an aggregate, there's no need to declare the\n      return variable; we're using a variable in our caller's frame.  */\n   else\n@@ -704,7 +704,7 @@ expand_call_inline (tp, walk_subtrees, data)\n   /* Create a block to put the parameters in.  We have to do this\n      after the parameters have been remapped because remapping\n      parameters is different from remapping ordinary variables.  */\n-  scope_stmt = build_min_nt (SCOPE_STMT, DECL_INITIAL (fn));\n+  scope_stmt = build_stmt (SCOPE_STMT, DECL_INITIAL (fn));\n   SCOPE_BEGIN_P (scope_stmt) = 1;\n   SCOPE_NO_CLEANUPS_P (scope_stmt) = 1;\n   remap_block (scope_stmt, DECL_ARGUMENTS (fn), id);\n@@ -729,7 +729,7 @@ expand_call_inline (tp, walk_subtrees, data)\n   *inlined_body = copy_body (id);\n \n   /* Close the block for the parameters.  */\n-  scope_stmt = build_min_nt (SCOPE_STMT, DECL_INITIAL (fn));\n+  scope_stmt = build_stmt (SCOPE_STMT, DECL_INITIAL (fn));\n   SCOPE_NO_CLEANUPS_P (scope_stmt) = 1;\n   my_friendly_assert (DECL_INITIAL (fn) \n \t\t      && TREE_CODE (DECL_INITIAL (fn)) == BLOCK,\n@@ -743,7 +743,7 @@ expand_call_inline (tp, walk_subtrees, data)\n      may cause RTL to be generated.  */\n   STMT_EXPR_STMT (expr)\n     = chainon (STMT_EXPR_STMT (expr), \n-\t       build_min_nt (LABEL_STMT, id->ret_label));\n+\t       build_stmt (LABEL_STMT, id->ret_label));\n \n   /* Finally, mention the returned value so that the value of the\n      statement-expression is the returned value of the function.  */"}, {"sha": "f8d39bff600b2263b0c4247598899e8bb2fad331", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dfdeca6e06b76d99dfb3150f36c4dd2a501058c/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0dfdeca6e06b76d99dfb3150f36c4dd2a501058c", "patch": "@@ -206,7 +206,7 @@ finish_goto_stmt (destination)\n   \n   check_goto (destination);\n \n-  add_tree (build_min_nt (GOTO_STMT, destination));\n+  add_tree (build_stmt (GOTO_STMT, destination));\n }\n \n /* COND is the condition-expression for an if, while, etc.,\n@@ -250,7 +250,7 @@ finish_expr_stmt (expr)\n       if (!processing_template_decl)\n \texpr = break_out_cleanups (expr);\n       \n-      add_tree (build_min_nt (EXPR_STMT, expr));\n+      add_tree (build_stmt (EXPR_STMT, expr));\n     }\n \n   finish_stmt ();\n@@ -269,7 +269,7 @@ begin_if_stmt ()\n {\n   tree r;\n   do_pushlevel ();\n-  r = build_min_nt (IF_STMT, NULL_TREE, NULL_TREE, NULL_TREE);\n+  r = build_stmt (IF_STMT, NULL_TREE, NULL_TREE, NULL_TREE);\n   add_tree (r);\n   return r;\n }\n@@ -344,7 +344,7 @@ tree\n begin_while_stmt ()\n {\n   tree r;\n-  r = build_min_nt (WHILE_STMT, NULL_TREE, NULL_TREE);\n+  r = build_stmt (WHILE_STMT, NULL_TREE, NULL_TREE);\n   add_tree (r);\n   do_pushlevel ();\n   return r;\n@@ -380,7 +380,7 @@ finish_while_stmt (while_stmt)\n tree\n begin_do_stmt ()\n {\n-  tree r = build_min_nt (DO_STMT, NULL_TREE, NULL_TREE);\n+  tree r = build_stmt (DO_STMT, NULL_TREE, NULL_TREE);\n   add_tree (r);\n   return r;\n }\n@@ -439,7 +439,7 @@ finish_return_stmt (expr)\n \t  return;\n \t}\n     }\n-  add_tree (build_min_nt (RETURN_STMT, expr));\n+  add_tree (build_stmt (RETURN_STMT, expr));\n   finish_stmt ();\n }\n \n@@ -450,8 +450,8 @@ begin_for_stmt ()\n {\n   tree r;\n \n-  r = build_min_nt (FOR_STMT, NULL_TREE, NULL_TREE, \n-\t\t    NULL_TREE, NULL_TREE);\n+  r = build_stmt (FOR_STMT, NULL_TREE, NULL_TREE, \n+\t\t  NULL_TREE, NULL_TREE);\n   NEW_FOR_SCOPE_P (r) = flag_new_for_scope > 0;\n   add_tree (r);\n   if (NEW_FOR_SCOPE_P (r))\n@@ -520,17 +520,15 @@ finish_for_stmt (for_stmt)\n void\n finish_break_stmt ()\n {\n-  emit_line_note (input_filename, lineno);\n-  add_tree (build_min_nt (BREAK_STMT));\n+  add_tree (build_stmt (BREAK_STMT));\n }\n \n /* Finish a continue-statement.  */\n \n void\n finish_continue_stmt ()\n {\n-  emit_line_note (input_filename, lineno);\n-  add_tree (build_min_nt (CONTINUE_STMT));\n+  add_tree (build_stmt (CONTINUE_STMT));\n }\n \n /* Begin a switch-statement.  Returns a new SWITCH_STMT if\n@@ -540,7 +538,7 @@ tree\n begin_switch_stmt ()\n {\n   tree r;\n-  r = build_min_nt (SWITCH_STMT, NULL_TREE, NULL_TREE);\n+  r = build_stmt (SWITCH_STMT, NULL_TREE, NULL_TREE);\n   add_tree (r);\n   do_pushlevel ();\n   return r;\n@@ -594,7 +592,7 @@ finish_case_label (low_value, high_value)\n {\n   /* Add a representation for the case label to the statement\n      tree.  */\n-  add_tree (build_min_nt (CASE_LABEL, low_value, high_value));\n+  add_tree (build_stmt (CASE_LABEL, low_value, high_value));\n   /* And warn about crossing initializations, etc.  */\n   if (!processing_template_decl)\n     define_case_label ();\n@@ -649,7 +647,7 @@ void genrtl_try_block (t)\n tree\n begin_try_block ()\n {\n-  tree r = build_min_nt (TRY_BLOCK, NULL_TREE, NULL_TREE);\n+  tree r = build_stmt (TRY_BLOCK, NULL_TREE, NULL_TREE);\n   add_tree (r);\n   return r;\n }\n@@ -659,7 +657,7 @@ begin_try_block ()\n tree\n begin_function_try_block ()\n {\n-  tree r = build_min_nt (TRY_BLOCK, NULL_TREE, NULL_TREE);\n+  tree r = build_stmt (TRY_BLOCK, NULL_TREE, NULL_TREE);\n   FN_TRY_BLOCK_P (r) = 1;\n   add_tree (r);\n   return r;\n@@ -761,7 +759,7 @@ tree\n begin_handler ()\n {\n   tree r;\n-  r = build_min_nt (HANDLER, NULL_TREE, NULL_TREE);\n+  r = build_stmt (HANDLER, NULL_TREE, NULL_TREE);\n   add_tree (r);\n   do_pushlevel ();\n   return r;\n@@ -857,7 +855,7 @@ begin_compound_stmt (has_no_scope)\n   tree r; \n   int is_try = 0;\n \n-  r = build_min_nt (COMPOUND_STMT, NULL_TREE);\n+  r = build_stmt (COMPOUND_STMT, NULL_TREE);\n \n   if (last_tree && TREE_CODE (last_tree) == TRY_BLOCK)\n     is_try = 1;\n@@ -872,7 +870,7 @@ begin_compound_stmt (has_no_scope)\n     {\n       do_pushlevel ();\n       if (is_try)\n-\tnote_level_for_eh ();\n+      \tnote_level_for_eh ();\n     }\n   else\n     /* Normally, we try hard to keep the BLOCK for a\n@@ -955,9 +953,9 @@ finish_asm_stmt (cv_qualifier, string, output_operands,\n     for (t = input_operands; t; t = TREE_CHAIN (t))\n       TREE_VALUE (t) = decay_conversion (TREE_VALUE (t));\n \n-  r = build_min_nt (ASM_STMT, cv_qualifier, string,\n-\t\t    output_operands, input_operands,\n-\t\t    clobbers);\n+  r = build_stmt (ASM_STMT, cv_qualifier, string,\n+\t\t  output_operands, input_operands,\n+\t\t  clobbers);\n   add_tree (r);\n }\n \n@@ -968,7 +966,7 @@ finish_label_stmt (name)\n      tree name;\n {\n   tree decl = define_label (input_filename, lineno, name);\n-  add_tree (build_min_nt (LABEL_STMT, decl));\n+  add_tree (build_stmt (LABEL_STMT, decl));\n }\n \n /* Finish a series of declarations for local labels.  G++ allows users\n@@ -993,7 +991,7 @@ add_decl_stmt (decl)\n   tree decl_stmt;\n \n   /* We need the type to last until instantiation time.  */\n-  decl_stmt = build_min_nt (DECL_STMT, decl);\n+  decl_stmt = build_stmt (DECL_STMT, decl);\n   add_tree (decl_stmt); \n }\n \n@@ -1014,7 +1012,7 @@ void\n finish_subobject (cleanup)\n      tree cleanup;\n {\n-  tree r = build_min_nt (SUBOBJECT, cleanup);\n+  tree r = build_stmt (SUBOBJECT, cleanup);\n   add_tree (r);\n }\n \n@@ -1025,7 +1023,7 @@ finish_decl_cleanup (decl, cleanup)\n      tree decl;\n      tree cleanup;\n {\n-  add_tree (build_min_nt (CLEANUP_STMT, decl, cleanup));\n+  add_tree (build_stmt (CLEANUP_STMT, decl, cleanup));\n }\n \n /* Generate the RTL for a RETURN_INIT. */\n@@ -1125,7 +1123,7 @@ finish_named_return_value (return_id, init)\n       DECL_INITIAL (decl) = init;\n       if (doing_semantic_analysis_p ())\n \tpushdecl (decl);\n-      add_tree (build_min_nt (RETURN_INIT, return_id, init));\n+      add_tree (build_stmt (RETURN_INIT, return_id, init));\n     }\n \n   /* Don't use tree-inlining for functions with named return values.\n@@ -1219,7 +1217,7 @@ setup_vtbl_ptr (member_init_list, base_init_list)\n \t  tree ctor_stmt;\n \n \t  /* Mark the beginning of the constructor.  */\n-\t  ctor_stmt = build_min_nt (CTOR_STMT);\n+\t  ctor_stmt = build_stmt (CTOR_STMT);\n \t  CTOR_BEGIN_P (ctor_stmt) = 1;\n \t  add_tree (ctor_stmt);\n \t  \n@@ -1299,7 +1297,7 @@ add_scope_stmt (begin_p, partial_p)\n   tree top;\n \n   /* Build the statement.  */\n-  ss = build_min_nt (SCOPE_STMT, NULL_TREE);\n+  ss = build_stmt (SCOPE_STMT, NULL_TREE);\n   SCOPE_BEGIN_P (ss) = begin_p;\n   SCOPE_PARTIAL_P (ss) = partial_p;\n "}]}