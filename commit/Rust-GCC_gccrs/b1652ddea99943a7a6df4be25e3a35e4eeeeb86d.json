{"sha": "b1652ddea99943a7a6df4be25e3a35e4eeeeb86d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE2NTJkZGVhOTk5NDNhN2E2ZGY0YmUyNWUzYTM1ZTRlZWVlYjg2ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-01-27T11:40:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-01-27T11:40:04Z"}, "message": "re PR tree-optimization/69399 (wrong code with -O and int128)\n\n\tPR tree-optimization/69399\n\t* wide-int.h (wi::lrshift): For larger precisions, only\n\tuse fast path if shift is known to be < HOST_BITS_PER_WIDE_INT.\n\n\t* gcc.dg/torture/pr69399.c: New test.\n\nFrom-SVN: r232869", "tree": {"sha": "bce699e60643f9feadb835a3de8da891519c2eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bce699e60643f9feadb835a3de8da891519c2eca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfa654c8cf28dc2f85ccb45b85de3ee26edcc580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa654c8cf28dc2f85ccb45b85de3ee26edcc580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa654c8cf28dc2f85ccb45b85de3ee26edcc580"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "12a2583610d5ad5a10eda885ecda71d67bcab01f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1652ddea99943a7a6df4be25e3a35e4eeeeb86d", "patch": "@@ -1,3 +1,9 @@\n+2016-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/69399\n+\t* wide-int.h (wi::lrshift): For larger precisions, only\n+\tuse fast path if shift is known to be < HOST_BITS_PER_WIDE_INT.\n+\n 2016-01-27  Claudiu Zissulescu  <claziss@synopsys.com>\n \n         * config/arc/predicates.md (proper_comparison_operator): Reject"}, {"sha": "aa3d51bbe456d1fe9d6a8f2e7bc0d75e1f1005f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b1652ddea99943a7a6df4be25e3a35e4eeeeb86d", "patch": "@@ -1,3 +1,8 @@\n+2016-01-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/69399\n+\t* gcc.dg/torture/pr69399.c: New test.\n+\n 2016-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/tree-ssa/ssa-dom-cse-2.c: XFAIL on SPARC 64-bit."}, {"sha": "24fa48c7d7401b40f430390644be29df530963c9", "filename": "gcc/testsuite/gcc.dg/torture/pr69399.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69399.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69399.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69399.c?ref=b1652ddea99943a7a6df4be25e3a35e4eeeeb86d", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target int128 } } */\n+\n+static unsigned __attribute__((noinline, noclone))\n+foo (unsigned long long u)\n+{\n+  unsigned __int128 v = u | 0xffffff81U;\n+  v >>= 64;\n+  return v;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned x = foo (27);\n+  if (x != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "fa133f0561ad04cb584d3b219ab28a115985118f", "filename": "gcc/wide-int.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d/gcc%2Fwide-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1652ddea99943a7a6df4be25e3a35e4eeeeb86d/gcc%2Fwide-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int.h?ref=b1652ddea99943a7a6df4be25e3a35e4eeeeb86d", "patch": "@@ -2909,7 +2909,9 @@ wi::lrshift (const T1 &x, const T2 &y)\n \t For variable-precision integers like wide_int, handle HWI\n \t and sub-HWI integers inline.  */\n       if (STATIC_CONSTANT_P (xi.precision > HOST_BITS_PER_WIDE_INT)\n-\t  ? xi.len == 1 && xi.val[0] >= 0\n+\t  ? (shift < HOST_BITS_PER_WIDE_INT\n+\t     && xi.len == 1\n+\t     && xi.val[0] >= 0)\n \t  : xi.precision <= HOST_BITS_PER_WIDE_INT)\n \t{\n \t  val[0] = xi.to_uhwi () >> shift;"}]}