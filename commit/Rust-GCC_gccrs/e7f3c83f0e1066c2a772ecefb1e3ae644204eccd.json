{"sha": "e7f3c83f0e1066c2a772ecefb1e3ae644204eccd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmM2M4M2YwZTEwNjZjMmE3NzJlY2VmYjFlM2FlNjQ0MjA0ZWNjZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-13T10:45:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-13T10:45:11Z"}, "message": "Treat QUAL_UNION_TYPE like UNION_TYPE when seeing if aggregate.\n\n(get_inner_reference): Don't blow up if a FIELD_DECL hasn't been\nfilled in.\n(expand_expr, case COMPONENT_REF): Likewise.\n\nFrom-SVN: r4117", "tree": {"sha": "4d4127522ae6a6b536fed483dff89744fb0dc478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d4127522ae6a6b536fed483dff89744fb0dc478"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f3c83f0e1066c2a772ecefb1e3ae644204eccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f3c83f0e1066c2a772ecefb1e3ae644204eccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f3c83f0e1066c2a772ecefb1e3ae644204eccd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f3c83f0e1066c2a772ecefb1e3ae644204eccd/comments", "author": null, "committer": null, "parents": [{"sha": "3635a54b1af65b5ced2391cdc16ceccbee2018c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3635a54b1af65b5ced2391cdc16ceccbee2018c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3635a54b1af65b5ced2391cdc16ceccbee2018c8"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "7926a9e17d45de3277bc14464fc6593beb71ecdb", "filename": "gcc/expr.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f3c83f0e1066c2a772ecefb1e3ae644204eccd/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f3c83f0e1066c2a772ecefb1e3ae644204eccd/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e7f3c83f0e1066c2a772ecefb1e3ae644204eccd", "patch": "@@ -2805,6 +2805,12 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t\t      ? DECL_FIELD_BITPOS (TREE_OPERAND (exp, 1))\n \t\t      : TREE_OPERAND (exp, 2));\n \n+\t  /* If this field hasn't been filled in yet, don't go\n+\t     past it.  This should only happen when folding expressions\n+\t     made during type construction.  */\n+\t  if (pos == 0)\n+\t    break;\n+\n \t  if (TREE_CODE (pos) == PLUS_EXPR)\n \t    {\n \t      tree constant, var;\n@@ -2885,7 +2891,7 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \n   /* If this was a bit-field, see if there is a mode that allows direct\n      access in case EXP is in memory.  */\n-  if (mode == VOIDmode && *pbitpos % *pbitsize == 0)\n+  if (mode == VOIDmode && *pbitsize != 0 && *pbitpos % *pbitsize == 0)\n     {\n       mode = mode_for_size (*pbitsize, MODE_INT, 0);\n       if (mode == BLKmode)\n@@ -3620,7 +3626,8 @@ expand_expr (exp, target, tmode, modifier)\n \t\t  enum tree_code c = TREE_CODE (type);\n \t\t  target\n \t\t    = assign_stack_temp (mode, int_size_in_bytes (type), 0);\n-\t\t  if (c == RECORD_TYPE || c == UNION_TYPE || c == ARRAY_TYPE)\n+\t\t  if (c == RECORD_TYPE || c == UNION_TYPE\n+\t\t      || c == QUAL_UNION_TYPE || c == ARRAY_TYPE)\n \t\t    MEM_IN_STRUCT_P (target) = 1;\n \t\t}\n \t    }\n@@ -3666,11 +3673,13 @@ expand_expr (exp, target, tmode, modifier)\n \t    || TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE\n \t    || TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE\n \t    || TREE_CODE (TREE_TYPE (exp)) == UNION_TYPE\n+\t    || TREE_CODE (TREE_TYPE (exp)) == QUAL_UNION_TYPE\n \t    || (TREE_CODE (exp1) == ADDR_EXPR\n \t\t&& (exp2 = TREE_OPERAND (exp1, 0))\n \t\t&& (TREE_CODE (TREE_TYPE (exp2)) == ARRAY_TYPE\n \t\t    || TREE_CODE (TREE_TYPE (exp2)) == RECORD_TYPE\n-\t\t    || TREE_CODE (TREE_TYPE (exp2)) == UNION_TYPE)))\n+\t\t    || TREE_CODE (TREE_TYPE (exp2)) == UNION_TYPE\n+\t\t    || TREE_CODE (TREE_TYPE (exp2)) == QUAL_UNION_TYPE)))\n \t  MEM_IN_STRUCT_P (temp) = 1;\n \tMEM_VOLATILE_P (temp) = TREE_THIS_VOLATILE (exp);\n #if 0 /* It is incorrect to set RTX_UNCHANGING_P here, because the fact that\n@@ -3848,6 +3857,12 @@ expand_expr (exp, target, tmode, modifier)\n \ttree tem = get_inner_reference (exp, &bitsize, &bitpos, &offset,\n \t\t\t\t\t&mode1, &unsignedp, &volatilep);\n \n+\t/* If we got back the original object, something is wrong.  Perhaps\n+\t   we are evaluating an expression too early.  In any event, don't\n+\t   infinitely recurse.  */\n+\tif (tem == exp)\n+\t  abort ();\n+\n \t/* In some cases, we will be offsetting OP0's address by a constant.\n \t   So get it as a sum, if possible.  If we will be using it\n \t   directly in an insn, we validate it.  */\n@@ -5867,7 +5882,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t    return GEN_INT (method_type_class);\n \t  if (code == RECORD_TYPE)\n \t    return GEN_INT (record_type_class);\n-\t  if (code == UNION_TYPE)\n+\t  if (code == UNION_TYPE || code == QUAL_UNION_TYPE)\n \t    return GEN_INT (union_type_class);\n \t  if (code == ARRAY_TYPE)\n \t    return GEN_INT (array_type_class);"}]}