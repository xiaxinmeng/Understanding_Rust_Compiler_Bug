{"sha": "d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0ZGNlYjVmZjE2NjhlNmU0YmI1MTc3ZjlmNjE5ZjVlNWZmZmE4Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-12-01T13:48:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-01T13:48:52Z"}, "message": "re PR middle-end/37908 (atomic NAND op generate wrong code; __sync_nand_and_fetch, __sync_fetch_and_nand)\n\n\tPR middle-end/37908\n\t* config/alpha/alpha.c (alpha_split_atomic_op): Properly handle NAND\n\tcase by calculating ~(new_reg & val) instead of (~new_reg & val).\n\t* config/alpha/sync.md (sync_nand<mode>): Change insn RTX\n\tto (not:I48MODE (and:I48MODE (...))).\n\t(sync_old_nand<mode>): Ditto.\n\t(sync_new_nand<mode>): Ditto.\n\nFrom-SVN: r142313", "tree": {"sha": "c667331d49e01b6b4de3bf8926b7b75e73632ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c667331d49e01b6b4de3bf8926b7b75e73632ccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "82da5df425d99822c52ce00a4f4b1975cf0025f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82", "patch": "@@ -1,3 +1,13 @@\n+2008-12-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR middle-end/37908\n+\t* config/alpha/alpha.c (alpha_split_atomic_op): Properly handle NAND\n+\tcase by calculating ~(new_reg & val) instead of (~new_reg & val).\n+\t* config/alpha/sync.md (sync_nand<mode>): Change insn RTX\n+\tto (not:I48MODE (and:I48MODE (...))).\n+\t(sync_old_nand<mode>): Ditto.\n+\t(sync_new_nand<mode>): Ditto.\n+\n 2008-12-01  Nick Clifton  <nickc@redhat.com>\n \n \t* config/stormy16/stormy16.md (CARRY_REG): New constant.\n@@ -365,7 +375,7 @@\n 2008-11-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR middle-end/37908\n-\t* config/ia64/ia64.c (ia64_expand_atomic_ope): Properly handle NAND\n+\t* config/ia64/ia64.c (ia64_expand_atomic_op): Properly handle NAND\n \tcase by calculating ~(new_reg & val) instead of (~new_reg & val).\n \t* config/ia64/sync.md (sync_nand<mode>): Change insn RTX\n \tto (not:IMODE (and:IMODE (...)))."}, {"sha": "d11948772fb687aa3aae631c72a4416785727c9d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82", "patch": "@@ -4466,7 +4466,12 @@ alpha_split_atomic_op (enum rtx_code code, rtx mem, rtx val,\n   emit_load_locked (mode, before, mem);\n \n   if (code == NOT)\n-    x = gen_rtx_AND (mode, gen_rtx_NOT (mode, before), val);\n+    {\n+      x = gen_rtx_AND (mode, before, val);\n+      emit_insn (gen_rtx_SET (VOIDmode, val, x));\n+\n+      x = gen_rtx_NOT (mode, val);\n+    }\n   else\n     x = gen_rtx_fmt_ee (code, mode, before, val);\n   if (after)"}, {"sha": "fe8301f344b4a65be85bb6b83b03384b0c9834b4", "filename": "gcc/config/alpha/sync.md", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82/gcc%2Fconfig%2Falpha%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82/gcc%2Fconfig%2Falpha%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fsync.md?ref=d04dceb5ff1668e6e4bb5177f9f619f5e5fffa82", "patch": "@@ -89,8 +89,9 @@\n (define_insn_and_split \"sync_nand<mode>\"\n   [(set (match_operand:I48MODE 0 \"memory_operand\" \"+m\")\n \t(unspec:I48MODE\n-\t  [(and:I48MODE (not:I48MODE (match_dup 0))\n-\t     (match_operand:I48MODE 1 \"register_operand\" \"r\"))]\n+\t  [(not:I48MODE\n+\t     (and:I48MODE (match_dup 0)\n+\t       (match_operand:I48MODE 1 \"register_operand\" \"r\")))]\n \t  UNSPEC_ATOMIC))\n    (clobber (match_scratch:I48MODE 2 \"=&r\"))]\n   \"\"\n@@ -129,8 +130,9 @@\n \t(match_operand:I48MODE 1 \"memory_operand\" \"+m\"))\n    (set (match_dup 1)\n \t(unspec:I48MODE\n-\t  [(and:I48MODE (not:I48MODE (match_dup 1))\n-\t     (match_operand:I48MODE 2 \"register_operand\" \"r\"))]\n+\t  [(not:I48MODE\n+\t     (and:I48MODE (match_dup 1)\n+\t       (match_operand:I48MODE 2 \"register_operand\" \"r\")))]\n \t  UNSPEC_ATOMIC))\n    (clobber (match_scratch:I48MODE 3 \"=&r\"))]\n   \"\"\n@@ -167,12 +169,12 @@\n \n (define_insn_and_split \"sync_new_nand<mode>\"\n   [(set (match_operand:I48MODE 0 \"register_operand\" \"=&r\")\n-\t(and:I48MODE \n-\t  (not:I48MODE (match_operand:I48MODE 1 \"memory_operand\" \"+m\"))\n-\t  (match_operand:I48MODE 2 \"register_operand\" \"r\")))\n+\t(not:I48MODE\n+\t  (and:I48MODE (match_operand:I48MODE 1 \"memory_operand\" \"+m\")\n+\t    (match_operand:I48MODE 2 \"register_operand\" \"r\"))))\n    (set (match_dup 1)\n \t(unspec:I48MODE\n-\t  [(and:I48MODE (not:I48MODE (match_dup 1)) (match_dup 2))]\n+\t  [(not:I48MODE (and:I48MODE (match_dup 1) (match_dup 2)))]\n \t  UNSPEC_ATOMIC))\n    (clobber (match_scratch:I48MODE 3 \"=&r\"))]\n   \"\""}]}