{"sha": "e889f41a2b4cbf5c292e20c647beecc9047bd3b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg4OWY0MWEyYjRjYmY1YzI5MmUyMGM2NDdiZWVjYzkwNDdiZDNiMg==", "commit": {"author": {"name": "Jeffrey D. Oldham", "email": "oldham@codesourcery.com", "date": "2001-02-21T19:54:18Z"}, "committer": {"name": "Jeffrey D. Oldham", "email": "oldham@gcc.gnu.org", "date": "2001-02-21T19:54:18Z"}, "message": "gcc.c: Add comment explaining how to add a command-line option.\n\n2001-02-21  Jeffrey D. Oldham  <oldham@codesourcery.com>\n\n\t* gcc.c: Add comment explaining how to add a command-line option.\n\tAdd title to specs language comment.\n\nFrom-SVN: r39960", "tree": {"sha": "9636b9beccdea64e0d03309637f8911054204951", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9636b9beccdea64e0d03309637f8911054204951"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e889f41a2b4cbf5c292e20c647beecc9047bd3b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e889f41a2b4cbf5c292e20c647beecc9047bd3b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e889f41a2b4cbf5c292e20c647beecc9047bd3b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e889f41a2b4cbf5c292e20c647beecc9047bd3b2/comments", "author": null, "committer": null, "parents": [{"sha": "7521b91323ebe096252621fe4d45281ef8e9670e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7521b91323ebe096252621fe4d45281ef8e9670e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7521b91323ebe096252621fe4d45281ef8e9670e"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "569002a0a14d98c2f8d913e01e261420b1cd0c5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e889f41a2b4cbf5c292e20c647beecc9047bd3b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e889f41a2b4cbf5c292e20c647beecc9047bd3b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e889f41a2b4cbf5c292e20c647beecc9047bd3b2", "patch": "@@ -1,3 +1,8 @@\n+2001-02-21  Jeffrey D. Oldham  <oldham@codesourcery.com>\n+\n+\t* gcc.c: Add comment explaining how to add a command-line option.\n+\tAdd title to specs language comment.\n+\n 2001-02-21  Jeffrey Oldham  <oldham@codesourcery.com>\n \n \t* gcc.c (cc1_options): Add \"-param\"."}, {"sha": "f4010431f810cef93dbcb3a84d5387be33dd5ebb", "filename": "gcc/gcc.c", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e889f41a2b4cbf5c292e20c647beecc9047bd3b2/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e889f41a2b4cbf5c292e20c647beecc9047bd3b2/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=e889f41a2b4cbf5c292e20c647beecc9047bd3b2", "patch": "@@ -32,6 +32,44 @@ CC recognizes how to compile each input file by suffixes in the file names.\n Once it knows which kind of compilation to perform, the procedure for\n compilation is specified by a string called a \"spec\".  */\n \n+/* A Short Introduction to Adding a Command-Line Option.\n+\n+   Before adding a command-line option, consider if it is really\n+   necessary.  Each additional command-line option adds complexity and\n+   is difficult to remove in subsequent versions.\n+\n+   In the following, consider adding the command-line argument\n+   `--bar'.\n+\n+   1. Each command-line option is specified in the specs file.  The\n+   notation is described below in the comment entitled \"The Specs\n+   Language\".  Read it.\n+\n+   2. In this file, add an entry to \"option_map\" equating the long\n+   `--' argument version and any shorter, single letter version.  Read\n+   the comments in the declaration of \"struct option_map\" for an\n+   explanation.  Do not omit the first `-'.\n+\n+   3. Look in the \"specs\" file to determine which program or option\n+   list should be given the argument, e.g., \"cc1_options\".  Add the\n+   appropriate syntax for the shorter option version to the\n+   corresponding \"const char *\" entry in this file.  Omit the first\n+   `-' from the option.  For example, use `-bar', rather than `--bar'.\n+\n+   4. If the argument takes an argument, e.g., `--baz argument1',\n+   modify either DEFAULT_SWITCH_TAKES_ARG or\n+   DEFAULT_WORD_SWITCH_TAKES_ARG in this file.  Omit the first `-'\n+   from `--baz'.\n+\n+   5. Document the option in this file's display_help().  If the\n+   option is passed to a subprogram, modify its corresponding\n+   function, e.g., cppinit.c:print_help() or toplev.c:display_help(),\n+   instead.\n+\n+   6. Compile and test.  Make sure that your new specs file is being\n+   read.  For example, use a debugger to investigate the value of\n+   \"specs_file\" in main().  */\n+\n #include \"config.h\"\n #include \"system.h\"\n #include <signal.h>\n@@ -272,7 +310,9 @@ static void init_gcc_specs              PARAMS ((struct obstack *,\n \t\t\t\t\t\t const char *,\n \t\t\t\t\t\t const char *));\n \f\n-/* Specs are strings containing lines, each of which (if not blank)\n+/* The Specs Language\n+\n+Specs are strings containing lines, each of which (if not blank)\n is made up of a program name, and arguments separated by spaces.\n The program name must be exact and start from root, since no path\n is searched and it is unreliable to depend on the current working directory."}]}