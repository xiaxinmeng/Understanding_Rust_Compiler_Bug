{"sha": "d56fbda96a7c34ad897b9cc871242047fe19393c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU2ZmJkYTk2YTdjMzRhZDg5N2I5Y2M4NzEyNDIwNDdmZTE5MzkzYw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-12-23T10:35:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-03T09:28:21Z"}, "message": "[Ada] Code and style cleanups for CUDA\n\ngcc/ada/\n\n\t* exp_prag.adb (Expand_Pragma_CUDA_Execute): Refill comments;\n\tremove periods after single-line comments; use procedural\n\tvariant of Next_Entity.\n\t* gnat_cuda.adb: Refill comments; remove periods after\n\tsingle-line comments; replace calls to UI_From_Int with\n\tconstants; change iteration bounds so they match the comments.\n\t* sem_prag.adb (Analyze_Pragma): Add checks for malformed pragma\n\tCUDA_Kernel aggregate; simplify processing of pragma CUDA_Global\n\twith Check_Arg_Count; sync comment with code for CUDA_Global.", "tree": {"sha": "00e553f774c6f5186c8213c090de80aba06a84a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00e553f774c6f5186c8213c090de80aba06a84a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d56fbda96a7c34ad897b9cc871242047fe19393c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56fbda96a7c34ad897b9cc871242047fe19393c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d56fbda96a7c34ad897b9cc871242047fe19393c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d56fbda96a7c34ad897b9cc871242047fe19393c/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56adf813f4e23d95d92385dee9b31e5e0d476abd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56adf813f4e23d95d92385dee9b31e5e0d476abd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56adf813f4e23d95d92385dee9b31e5e0d476abd"}], "stats": {"total": 85, "additions": 42, "deletions": 43}, "files": [{"sha": "ca1b08474b4107e81058d44c54d0d09bae699546", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56fbda96a7c34ad897b9cc871242047fe19393c/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56fbda96a7c34ad897b9cc871242047fe19393c/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=d56fbda96a7c34ad897b9cc871242047fe19393c", "patch": "@@ -771,7 +771,7 @@ package body Exp_Prag is\n       function Get_Nth_Arg_Type\n          (Subprogram : Entity_Id;\n           N          : Positive) return Entity_Id;\n-      --  Returns the type of the Nth argument of Subprogram.\n+      --  Returns the type of the Nth argument of Subprogram\n \n       function To_Addresses (Elmts : Elist_Id) return List_Id;\n       --  Returns a new list containing each element of Elmts wrapped in an\n@@ -821,9 +821,9 @@ package body Exp_Prag is\n          Init_Val : Node_Id) return Node_Id\n       is\n          --  Expressions for each component of the returned Dim3\n-         Dim_X    : Node_Id;\n-         Dim_Y    : Node_Id;\n-         Dim_Z    : Node_Id;\n+         Dim_X : Node_Id;\n+         Dim_Y : Node_Id;\n+         Dim_Z : Node_Id;\n \n          --  Type of CUDA.Internal.Dim3 - inferred from\n          --  RE_Push_Call_Configuration to avoid needing changes in GNAT when\n@@ -835,12 +835,13 @@ package body Exp_Prag is\n          First_Component  : Entity_Id := First_Entity (RTE (RE_Dim3));\n          Second_Component : Entity_Id := Next_Entity (First_Component);\n          Third_Component  : Entity_Id := Next_Entity (Second_Component);\n+\n       begin\n \n-         --  Sem_prag.adb ensured that Init_Val is either a Dim3, an\n-         --  aggregate of three Any_Integers or Any_Integer.\n+         --  Sem_prag.adb ensured that Init_Val is either a Dim3, an aggregate\n+         --  of three Any_Integers or Any_Integer.\n \n-         --  If Init_Val is a Dim3, use each of its components.\n+         --  If Init_Val is a Dim3, use each of its components\n \n          if Etype (Init_Val) = RTE (RE_Dim3) then\n             Dim_X := Make_Selected_Component (Loc,\n@@ -862,7 +863,7 @@ package body Exp_Prag is\n                Dim_Y := Next (Dim_X);\n                Dim_Z := Next (Dim_Y);\n \n-            --  Otherwise, we know it is an integer and the rest defaults to 1.\n+            --  Otherwise, we know it is an integer and the rest defaults to 1\n \n             else\n                Dim_X := Init_Val;\n@@ -1011,14 +1012,13 @@ package body Exp_Prag is\n             Default_Val => Make_Null (Loc));\n       end Build_Stream_Declaration;\n \n-      ------------------------\n-      -- Etype_Or_Dim3  --\n-      ------------------------\n+      -------------------\n+      -- Etype_Or_Dim3 --\n+      -------------------\n \n       function Etype_Or_Dim3 (N : Node_Id) return Node_Id is\n       begin\n-         if Nkind (N) = N_Aggregate and then Is_Composite_Type (Etype (N))\n-         then\n+         if Nkind (N) = N_Aggregate and then Is_Composite_Type (Etype (N)) then\n             return New_Occurrence_Of (RTE (RE_Dim3), Sloc (N));\n          end if;\n \n@@ -1036,7 +1036,7 @@ package body Exp_Prag is\n          Argument : Entity_Id := First_Entity (Subprogram);\n       begin\n          for J in 2 .. N loop\n-            Argument := Next_Entity (Argument);\n+            Next_Entity (Argument);\n          end loop;\n \n          return Etype (Argument);\n@@ -1098,8 +1098,7 @@ package body Exp_Prag is\n         Object_Definition   => Etype_Or_Dim3 (Block_Dimensions),\n         Expression          => Block_Dimensions);\n \n-      --  List holding the entities of the copies of Procedure_Call's\n-      --  arguments.\n+      --  List holding the entities of the copies of Procedure_Call's arguments\n \n       Kernel_Arg_Copies : constant Elist_Id := New_Elmt_List;\n \n@@ -1114,7 +1113,7 @@ package body Exp_Prag is\n       Pop_Call           : Node_Id;\n       Push_Call          : Node_Id;\n \n-      --  Declaration of all temporaries required for CUDA API Calls.\n+      --  Declaration of all temporaries required for CUDA API Calls\n \n       Blk_Decls  : constant List_Id := New_List;\n "}, {"sha": "6670bb89dab8de7aa412bb02feab6bfceb448a41", "filename": "gcc/ada/gnat_cuda.adb", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56fbda96a7c34ad897b9cc871242047fe19393c/gcc%2Fada%2Fgnat_cuda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56fbda96a7c34ad897b9cc871242047fe19393c/gcc%2Fada%2Fgnat_cuda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_cuda.adb?ref=d56fbda96a7c34ad897b9cc871242047fe19393c", "patch": "@@ -68,8 +68,8 @@ package body GNAT_CUDA is\n \n    function Get_CUDA_Kernels (Pack_Id : Entity_Id) return Elist_Id;\n    --  Returns an Elist of all procedures marked with pragma CUDA_Global that\n-   --  are declared within package body Pack_Body. Returns No_Elist if\n-   --  Pack_Id does not contain such procedures.\n+   --  are declared within package body Pack_Body. Returns No_Elist if Pack_Id\n+   --  does not contain such procedures.\n \n    procedure Set_CUDA_Kernels\n      (Pack_Id : Entity_Id;\n@@ -249,7 +249,7 @@ package body GNAT_CUDA is\n          --  function.\n \n          New_Stmt : Node_Id;\n-         --  Temporary variable to hold the various newly-created nodes.\n+         --  Temporary variable to hold the various newly-created nodes\n \n          Kernel_Elmt : Elmt_Id;\n          Kernel_Id   : Entity_Id;\n@@ -266,8 +266,7 @@ package body GNAT_CUDA is\n          while Present (Kernel_Elmt) loop\n             Kernel_Id := Node (Kernel_Elmt);\n \n-            New_Stmt :=\n-              Build_Kernel_Name_Declaration (Kernel_Id);\n+            New_Stmt := Build_Kernel_Name_Declaration (Kernel_Id);\n             Append (New_Stmt, Pack_Decls);\n             Analyze (New_Stmt);\n \n@@ -366,7 +365,7 @@ package body GNAT_CUDA is\n                Make_Aggregate (Loc,\n                  Expressions => New_List (\n                    Make_Integer_Literal (Loc, UI_From_Int (16#466243b1#)),\n-                   Make_Integer_Literal (Loc, UI_From_Int (1)),\n+                   Make_Integer_Literal (Loc, Uint_1),\n                    Make_Attribute_Reference (Loc,\n                      Prefix         => New_Occurrence_Of (Bin_Id, Loc),\n                      Attribute_Name => Name_Address),\n@@ -452,39 +451,39 @@ package body GNAT_CUDA is\n       is\n          Args : constant List_Id := New_List;\n       begin\n-         --  First argument: the handle of the fat binary.\n+         --  First argument: the handle of the fat binary\n \n          Append (New_Occurrence_Of (Bin, Loc), Args);\n \n-         --  Second argument: the host address of the function that is\n-         --  marked with CUDA_Global.\n+         --  Second argument: the host address of the function that is marked\n+         --  with CUDA_Global.\n \n          Append_To (Args,\n            Make_Attribute_Reference (Loc,\n              Prefix         => New_Occurrence_Of (Kernel, Loc),\n              Attribute_Name => Name_Address));\n \n-         --  Third argument, the name of the function on the host.\n+         --  Third argument, the name of the function on the host\n \n          Append (New_Occurrence_Of (Kernel_Name, Loc), Args);\n \n-         --  Fourth argument, the name of the function on the device.\n+         --  Fourth argument, the name of the function on the device\n \n          Append (New_Occurrence_Of (Kernel_Name, Loc), Args);\n \n          --  Fith argument: -1. Meaning unknown - this has been copied from\n          --  LLVM.\n \n-         Append (Make_Integer_Literal (Loc, UI_From_Int (-1)), Args);\n+         Append (Make_Integer_Literal (Loc, Uint_Minus_1), Args);\n \n-         --  Args 6, 7, 8, 9, 10: Null pointers. Again, meaning unknown.\n+         --  Args 6, 7, 8, 9, 10: Null pointers. Again, meaning unknown\n \n-         for Arg_Count in 1 .. 5 loop\n+         for Arg_Count in 6 .. 10 loop\n             Append_To (Args, New_Occurrence_Of (RTE (RE_Null_Address), Loc));\n          end loop;\n \n-         --  Build the call to CUDARegisterFunction, passing the argument\n-         --  list we just built.\n+         --  Build the call to CUDARegisterFunction, passing the argument list\n+         --  we just built.\n \n          return\n            Make_Procedure_Call_Statement (Loc,\n@@ -498,21 +497,21 @@ package body GNAT_CUDA is\n       Loc : constant Source_Ptr := Sloc (N);\n \n       Spec_Id : constant Node_Id := Corresponding_Spec (N);\n-      --  The specification of the package we're adding a cuda init func to.\n+      --  The specification of the package we're adding a cuda init func to\n \n       Pack_Decls : constant List_Id := Declarations (N);\n \n       CUDA_Node_List : constant Elist_Id := Get_CUDA_Kernels (Spec_Id);\n-      --  CUDA nodes that belong to the package.\n+      --  CUDA nodes that belong to the package\n \n       CUDA_Init_Func : Entity_Id;\n-      --  Entity of the cuda init func.\n+      --  Entity of the cuda init func\n \n       Fat_Binary : Entity_Id;\n-      --  Entity of the fat binary of N. Bound to said fat binary by a pragma.\n+      --  Entity of the fat binary of N. Bound to said fat binary by a pragma\n \n       Fat_Binary_Handle : Entity_Id;\n-      --  Entity of the result of passing the fat binary wrapper to.\n+      --  Entity of the result of passing the fat binary wrapper to\n       --  CUDA.Register_Fat_Binary.\n \n       Fat_Binary_Wrapper : Entity_Id;"}, {"sha": "7647b6dacb50aa4472a79fae5ffdfdea1416529b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d56fbda96a7c34ad897b9cc871242047fe19393c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d56fbda96a7c34ad897b9cc871242047fe19393c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d56fbda96a7c34ad897b9cc871242047fe19393c", "patch": "@@ -14725,6 +14725,8 @@ package body Sem_Prag is\n                end if;\n \n                if Nkind (N) = N_Aggregate\n+                 and then not Null_Record_Present (N)\n+                 and then No (Component_Associations (N))\n                  and then List_Length (Expressions (N)) = 3\n                then\n                   Expr := First (Expressions (N));\n@@ -14746,7 +14748,7 @@ package body Sem_Prag is\n             Shared_Memory    : Node_Id;\n             Stream           : Node_Id;\n \n-            --  Start of processing for CUDA_Execute\n+         --  Start of processing for CUDA_Execute\n \n          begin\n             GNAT_Pragma;\n@@ -14755,7 +14757,7 @@ package body Sem_Prag is\n \n             Analyze_And_Resolve (Kernel_Call);\n             if Nkind (Kernel_Call) /= N_Function_Call\n-               or else Etype (Kernel_Call) /= Standard_Void_Type\n+              or else Etype (Kernel_Call) /= Standard_Void_Type\n             then\n                --  In `pragma CUDA_Execute (Kernel_Call (...), ...)`,\n                --  GNAT sees Kernel_Call as an N_Function_Call since\n@@ -14796,16 +14798,15 @@ package body Sem_Prag is\n          -- CUDA_Global --\n          -----------------\n \n-         --  pragma CUDA_Global (IDENTIFIER);\n+         --  pragma CUDA_Global ([Entity =>] IDENTIFIER);\n \n          when Pragma_CUDA_Global => CUDA_Global : declare\n             Arg_Node    : Node_Id;\n             Kernel_Proc : Entity_Id;\n             Pack_Id     : Entity_Id;\n          begin\n             GNAT_Pragma;\n-            Check_At_Least_N_Arguments (1);\n-            Check_At_Most_N_Arguments (1);\n+            Check_Arg_Count (1);\n             Check_Optional_Identifier (Arg1, Name_Entity);\n             Check_Arg_Is_Local_Name (Arg1);\n "}]}