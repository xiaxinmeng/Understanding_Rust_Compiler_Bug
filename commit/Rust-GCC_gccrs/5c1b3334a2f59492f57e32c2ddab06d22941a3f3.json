{"sha": "5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMxYjMzMzRhMmY1OTQ5MmY1N2UzMmMyZGRhYjA2ZDIyOTQxYTNmMw==", "commit": {"author": {"name": "Vladislav Ivanishin", "email": "vlad@ispras.ru", "date": "2019-04-29T19:47:17Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-04-29T19:47:17Z"}, "message": "tree-ssa-uninit.c (is_pred_expr_subset_of): Correctly handle cases where cond2 is NE_EXPR.\n\n\t* tree-ssa-uninit.c (is_pred_expr_subset_of): Correctly handle cases\n\twhere cond2 is NE_EXPR.\n\t(is_value_included_in): Update comment.\n\n        * gcc.dg/uninit-25-gimple.c: New test.\n        * gcc.dg/uninit-25.c: New test.\n        * gcc.dg/uninit-26.c: New test.\n        * gcc.dg/uninit-27-gimple.c: New test.\n\nFrom-SVN: r270660", "tree": {"sha": "d4b1b9cbc6efbdfe196d089bc4d58fe9686df6d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4b1b9cbc6efbdfe196d089bc4d58fe9686df6d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/comments", "author": {"login": "ivladak", "id": 3601329, "node_id": "MDQ6VXNlcjM2MDEzMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/3601329?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivladak", "html_url": "https://github.com/ivladak", "followers_url": "https://api.github.com/users/ivladak/followers", "following_url": "https://api.github.com/users/ivladak/following{/other_user}", "gists_url": "https://api.github.com/users/ivladak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivladak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivladak/subscriptions", "organizations_url": "https://api.github.com/users/ivladak/orgs", "repos_url": "https://api.github.com/users/ivladak/repos", "events_url": "https://api.github.com/users/ivladak/events{/privacy}", "received_events_url": "https://api.github.com/users/ivladak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95c33590c88563c03e20618af60ed18eda3013aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c33590c88563c03e20618af60ed18eda3013aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c33590c88563c03e20618af60ed18eda3013aa"}], "stats": {"total": 152, "additions": 149, "deletions": 3}, "files": [{"sha": "8bb8dcfee1e5d207a3f434e66985ad75dcd2e9a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "patch": "@@ -1,3 +1,9 @@\n+2019-04-29  Vladislav Ivanishin  <vlad@ispras.ru>\n+\n+\t* tree-ssa-uninit.c (is_pred_expr_subset_of): Correctly handle cases\n+\twhere cond2 is NE_EXPR.\n+\t(is_value_included_in): Update comment.\n+\n 2019-04-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90278"}, {"sha": "d64281548b4f62229f6ec5427bcd0ae83a167804", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "patch": "@@ -1,3 +1,10 @@\n+2019-04-29  Vladislav Ivanishin  <vlad@ispras.ru>\n+\n+        * gcc.dg/uninit-25-gimple.c: New test.\n+        * gcc.dg/uninit-25.c: New test.\n+        * gcc.dg/uninit-26.c: New test.\n+        * gcc.dg/uninit-27-gimple.c: New test.\n+\n 2019-04-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90278"}, {"sha": "0c0acd6b83e46c4d4706eb83dc65d644263c5abf", "filename": "gcc/testsuite/gcc.dg/uninit-25-gimple.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-25-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-25-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-25-gimple.c?ref=5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple -O -Wmaybe-uninitialized\" } */\n+\n+unsigned int __GIMPLE (ssa,startwith(\"uninit1\"))\n+foo (unsigned int v)\n+{\n+  unsigned int undef;        /* { dg-warning \"may be used uninitialized\" } */\n+  unsigned int _2;\n+  unsigned int _9;\n+  unsigned int _10;\n+\n+  __BB(2):\n+  if (v_4(D) != 1u)\n+    goto __BB3;\n+  else\n+    goto __BB4;\n+\n+  __BB(3):\n+  undef_8 = 8u; // 'undef' is defined conditionally (under 'v != 1' predicate)\n+  goto __BB4;\n+\n+  __BB(4):\n+  // An undef value flows into a phi.\n+  undef_1 = __PHI (__BB2: undef_5(D), __BB3: undef_8);\n+  if (v_4(D) != 2u) // This condition is neither a superset nor a subset of 'v != 1'.\n+    goto __BB5;\n+  else\n+    goto __BB6;\n+\n+  __BB(5):\n+  _9 = undef_1; // The phi value is used here (under 'v != 2' predicate).\n+  goto __BB7;\n+\n+  __BB(6):\n+  _10 = v_4(D);\n+  goto __BB7;\n+\n+  __BB(7):\n+  _2 = __PHI (__BB5: _9, __BB6: _10);\n+  return _2;\n+}"}, {"sha": "ffffce3f91c0dd06f931b876bb13d7a317b0d88e", "filename": "gcc/testsuite/gcc.dg/uninit-25.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-25.c?ref=5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wmaybe-uninitialized\" } */\n+\n+extern unsigned bar (void);\n+extern void quux (void);\n+\n+unsigned foo (unsigned v)\n+{\n+  unsigned u;\n+  if (v != 1)\n+    u = bar ();\n+\n+  // Prevent the \"dom\" pass from changing the CFG layout based on the inference\n+  // 'if (v != 1) is false then (v != 2) is true'.  (Now it would have to\n+  // duplicate the loop in order to do so, which is deemed expensive.)\n+  for (int i = 0; i < 10; i++)\n+    quux ();\n+\n+  if (v != 2)\n+    return u;       /* { dg-warning \"may be used uninitialized\" } */\n+\n+  return 0;\n+}"}, {"sha": "60ac48cdc50b0278bc91a03f329cea8e344152c4", "filename": "gcc/testsuite/gcc.dg/uninit-26.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-26.c?ref=5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wmaybe-uninitialized\" } */\n+\n+extern unsigned bar (void);\n+extern void quux (void);\n+\n+unsigned foo (unsigned v)\n+{\n+  unsigned u;\n+  if (v != 100)\n+    u = bar ();\n+\n+  // Prevent the \"dom\" pass from changing the CFG layout based on the inference\n+  // 'if (v != 100) is false then (v < 105) is true'.  (Now it would have to\n+  // duplicate the loop in order to do so, which is deemed expensive.)\n+  for (int i = 0; i < 10; i++)\n+    quux ();\n+\n+  if (v < 105) /* v == 100 falls into this range.  */\n+    return u;       /* { dg-warning \"may be used uninitialized\" }  */\n+\n+  return 0;\n+}"}, {"sha": "f75469d8ef843faa78a4b0b3e2c2eb256a0ffa12", "filename": "gcc/testsuite/gcc.dg/uninit-27-gimple.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-27-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-27-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-27-gimple.c?ref=5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple -O -Wmaybe-uninitialized\" } */\n+\n+unsigned int __GIMPLE (ssa,startwith(\"uninit1\"))\n+foo (unsigned int v)\n+{\n+  unsigned int undef;        /* { dg-bogus \"may be used uninitialized\" } */\n+  unsigned int _2;\n+  unsigned int _9;\n+  unsigned int _10;\n+\n+  __BB(2):\n+  if (v_4(D) != 100u)\n+    goto __BB3;\n+  else\n+    goto __BB4;\n+\n+  __BB(3):\n+  undef_8 = 8u; // 'undef' is defined conditionally (under 'v != 100' predicate)\n+  goto __BB4;\n+\n+  __BB(4):\n+  // An undef value flows into a phi.\n+  undef_1 = __PHI (__BB2: undef_5(D), __BB3: undef_8);\n+  if (v_4(D) < 100u)\n+    goto __BB5;\n+  else\n+    goto __BB6;\n+\n+  __BB(5):\n+  _9 = undef_1; // The phi value is used here (under 'v < 100' predicate).\n+  goto __BB7;\n+\n+  __BB(6):\n+  _10 = v_4(D);\n+  goto __BB7;\n+\n+  __BB(7):\n+  _2 = __PHI (__BB5: _9, __BB6: _10);\n+  return _2;\n+}"}, {"sha": "831587854c66d091ec3e1acc21c49d981b0141bf", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1b3334a2f59492f57e32c2ddab06d22941a3f3/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=5c1b3334a2f59492f57e32c2ddab06d22941a3f3", "patch": "@@ -1011,8 +1011,7 @@ get_cmp_code (enum tree_code orig_cmp_code, bool swap_cond, bool invert)\n   return tc;\n }\n \n-/* Returns true if VAL falls in the range defined by BOUNDARY and CMPC, i.e.\n-   all values in the range satisfies (x CMPC BOUNDARY) == true.  */\n+/* Returns whether VAL CMPC BOUNDARY is true.  */\n \n static bool\n is_value_included_in (tree val, tree boundary, enum tree_code cmpc)\n@@ -1488,11 +1487,17 @@ is_pred_expr_subset_of (pred_info expr1, pred_info expr2)\n   if (expr2.invert)\n     code2 = invert_tree_comparison (code2, false);\n \n+  if (code2 == NE_EXPR && code1 == NE_EXPR)\n+    return false;\n+\n+  if (code2 == NE_EXPR)\n+    return !is_value_included_in (expr2.pred_rhs, expr1.pred_rhs, code1);\n+\n   if ((code1 == EQ_EXPR || code1 == BIT_AND_EXPR) && code2 == BIT_AND_EXPR)\n     return (wi::to_wide (expr1.pred_rhs)\n \t    == (wi::to_wide (expr1.pred_rhs) & wi::to_wide (expr2.pred_rhs)));\n \n-  if (code1 != code2 && code2 != NE_EXPR)\n+  if (code1 != code2)\n     return false;\n \n   if (is_value_included_in (expr1.pred_rhs, expr2.pred_rhs, code2))"}]}