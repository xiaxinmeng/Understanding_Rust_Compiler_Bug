{"sha": "15a5b8a22ae6091ce9a3ff5431580d39cdc180d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVhNWI4YTIyYWU2MDkxY2U5YTNmZjU0MzE1ODBkMzljZGMxODBkNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-09T00:27:40Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-09T00:27:40Z"}, "message": "(dbxout_type_fields): Handle nameless subrecords for Pascal.\n\n(dbxout_type): Handle CHAR_TYPE, BOOLEAN_TYPE. FILE_TYPE, SET_TYPE.\n\nFrom-SVN: r2079", "tree": {"sha": "5c2db9980767d46dce6baab84201f823b2452d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c2db9980767d46dce6baab84201f823b2452d89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15a5b8a22ae6091ce9a3ff5431580d39cdc180d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a5b8a22ae6091ce9a3ff5431580d39cdc180d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15a5b8a22ae6091ce9a3ff5431580d39cdc180d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a5b8a22ae6091ce9a3ff5431580d39cdc180d6/comments", "author": null, "committer": null, "parents": [{"sha": "1b6374aa53737ea2a1087b04fde561576e221768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b6374aa53737ea2a1087b04fde561576e221768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b6374aa53737ea2a1087b04fde561576e221768"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "ba1a550e993f25b28c9320bbc453a6ea2aafad8c", "filename": "gcc/dbxout.c", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15a5b8a22ae6091ce9a3ff5431580d39cdc180d6/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15a5b8a22ae6091ce9a3ff5431580d39cdc180d6/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=15a5b8a22ae6091ce9a3ff5431580d39cdc180d6", "patch": "@@ -561,12 +561,14 @@ dbxout_type_fields (type)\n      tree type;\n {\n   tree tem;\n+  /* Output the name, type, position (in bits), size (in bits) of each\n+     field.  */\n   for (tem = TYPE_FIELDS (type); tem; tem = TREE_CHAIN (tem))\n     {\n-      /* Output the name, type, position (in bits), size (in bits)\n-\t of each field.  */\n+      /* For nameless subunions and subrecords, treat their fields as ours.  */\n       if (DECL_NAME (tem) == NULL_TREE\n-\t  && TREE_CODE (TREE_TYPE (tem)) == UNION_TYPE)\n+\t  && (TREE_CODE (TREE_TYPE (tem)) == UNION_TYPE\n+\t      || TREE_CODE (TREE_TYPE (tem)) == RECORD_TYPE))\n \tdbxout_type_fields (TREE_TYPE (tem));\n       /* Omit here local type decls until we know how to support them.  */\n       else if (TREE_CODE (tem) == TYPE_DECL)\n@@ -989,6 +991,44 @@ dbxout_type (type, full, show_arg_types)\n       CHARS (16);\n       break;\n \n+    case CHAR_TYPE:\n+\t/* Output the type `char' as a subrange of itself.\n+\t   That is what pcc seems to do.  */\n+      fprintf (asmfile, \"r%d;0;%d;\", TYPE_SYMTAB_ADDRESS (char_type_node),\n+\t       TREE_UNSIGNED (type) ? 255 : 127);\n+      CHARS (9);\n+      break;\n+\n+    case BOOLEAN_TYPE:\t/* Define as enumeral type (False, True) */\n+      fprintf (asmfile, \"eFalse:0,True:1,;\");\n+      CHARS (17);\n+      break;\n+\n+    case FILE_TYPE:\n+      putc ('d', asmfile);\n+      CHARS (1);\n+      dbxout_type (TREE_TYPE (type), 0);\n+      break;\n+\n+    case COMPLEX_TYPE:\n+      /* Differs from the REAL_TYPE by its new data type number */\n+\n+      if (TREE_CODE (TREE_TYPE (type)) == REAL_TYPE)\n+\t{\n+\t  fprintf (asmfile, \"r%d;%d;0;\",\n+\t\t   TYPE_SYMTAB_ADDRESS (type),\n+\t\t   TREE_INT_CST_LOW (size_in_bytes (TREE_TYPE (type))));\n+\t  CHARS (15);\t\t/* The number is propably incorrect here */\n+\t} else\n+\t  abort (); /* What to do with CSImode complex? */\n+      break;\n+\n+    case SET_TYPE:\n+      putc ('S', asmfile);\n+      CHARS (1);\n+      dbxout_type (TREE_TYPE (type), 0);\n+      break;\n+\n     case ARRAY_TYPE:\n       /* Output \"a\" followed by a range type definition\n \t for the index type of the array"}]}