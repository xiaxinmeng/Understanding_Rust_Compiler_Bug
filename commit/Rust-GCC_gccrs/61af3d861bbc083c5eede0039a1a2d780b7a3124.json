{"sha": "61af3d861bbc083c5eede0039a1a2d780b7a3124", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFhZjNkODYxYmJjMDgzYzVlZWRlMDAzOWExYTJkNzgwYjdhMzEyNA==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2004-05-07T04:57:57Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2004-05-07T04:57:57Z"}, "message": "SimpleTimeZone.java (startTimeMode, [...]): New members.\n\n2004-05-07  Jerry Quinn  <jlquinn@optonline.net>\n\n\t* java/util/SimpleTimeZone.java (startTimeMode, endTimeMode,\n        WALL_TIME, STANDARD_TIME, UTC_TIME): New members.\n\t(SimpleTimeZone): Tweak docs.  Add new variation.\n\t(setStartRule,setEndRule): Add new variations.  Use\n        startTimeMode and endTimeMode.\n\nFrom-SVN: r81605", "tree": {"sha": "339d10d14b4afc1dfa5c8c7e8efd50f4fdbaf30e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/339d10d14b4afc1dfa5c8c7e8efd50f4fdbaf30e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61af3d861bbc083c5eede0039a1a2d780b7a3124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61af3d861bbc083c5eede0039a1a2d780b7a3124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61af3d861bbc083c5eede0039a1a2d780b7a3124", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61af3d861bbc083c5eede0039a1a2d780b7a3124/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c37cc018f074e5e07cf3325925f295de4dae7f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37cc018f074e5e07cf3325925f295de4dae7f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37cc018f074e5e07cf3325925f295de4dae7f1b"}], "stats": {"total": 246, "additions": 239, "deletions": 7}, "files": [{"sha": "ceaaa7b49c811a785f8bd548120824d726619a8f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61af3d861bbc083c5eede0039a1a2d780b7a3124/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61af3d861bbc083c5eede0039a1a2d780b7a3124/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=61af3d861bbc083c5eede0039a1a2d780b7a3124", "patch": "@@ -1,3 +1,16 @@\n+2004-05-07  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* java/util/SimpleTimeZone.java (startTimeMode, endTimeMode,\n+        WALL_TIME, STANDARD_TIME, UTC_TIME): New members.\n+\t(SimpleTimeZone): Tweak docs.  Add new variation.\n+\t(setStartRule,setEndRule): Add new variations.  Use\n+        startTimeMode and endTimeMode.\n+\n+2004-05-07  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* java/util/Calendar.java (getActualMinimum,\n+        getActualMaximum):  Remove abstract.  Implement.\n+\n 2004-05-06  Bryce McKinlay  <mckinlay@redhat.com>\n \n \tRun the jni tests using the interpreter."}, {"sha": "71f92e88f34a81b80d0370723d441ef85175f936", "filename": "libjava/java/util/SimpleTimeZone.java", "status": "modified", "additions": 226, "deletions": 7, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61af3d861bbc083c5eede0039a1a2d780b7a3124/libjava%2Fjava%2Futil%2FSimpleTimeZone.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61af3d861bbc083c5eede0039a1a2d780b7a3124/libjava%2Fjava%2Futil%2FSimpleTimeZone.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FSimpleTimeZone.java?ref=61af3d861bbc083c5eede0039a1a2d780b7a3124", "patch": "@@ -1,5 +1,5 @@\n /* java.util.SimpleTimeZone\n-   Copyright (C) 1998, 1999, 2000, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -146,7 +146,15 @@ public class SimpleTimeZone extends TimeZone\n    * @serial\n    */\n   private int startTime;\n-   \n+\n+  /**\n+   * This variable specifies the mode that startTime is specified in.  By\n+   * default it is WALL_TIME, but can also be STANDARD_TIME or UTC_TIME.  For\n+   * startTime, STANDARD_TIME and WALL_TIME are equivalent.\n+   * @serial\n+   */\n+  private int startTimeMode = WALL_TIME;\n+\n   /**\n    * The month in which daylight savings ends.  This is one of the\n    * constants Calendar.JANUARY, ..., Calendar.DECEMBER.  \n@@ -185,6 +193,13 @@ public class SimpleTimeZone extends TimeZone\n    */\n   private int endTime;\n \n+  /**\n+   * This variable specifies the mode that endTime is specified in.  By\n+   * default it is WALL_TIME, but can also be STANDARD_TIME or UTC_TIME.\n+   * @serial\n+   */\n+  private int endTimeMode = WALL_TIME;\n+\n   /**\n    * This variable points to a deprecated array from JDK 1.1.  It is\n    * ignored in JDK 1.2 but streamed out for compatibility with JDK 1.1.\n@@ -223,6 +238,23 @@ public class SimpleTimeZone extends TimeZone\n \n   private static final long serialVersionUID = -403250971215465050L;\n \n+  /**\n+   * Constant to indicate that start and end times are specified in standard\n+   * time, without adjusting for daylight savings.\n+   */\n+  public static final int STANDARD_TIME = 1;\n+\n+  /**\n+   * Constant to indicate that start and end times are specified in wall\n+   * time, adjusting for daylight savings.  This is the default.\n+   */\n+  public static final int WALL_TIME = 0;\n+\n+  /**\n+   * Constant to indicate that start and end times are specified in UTC.\n+   */\n+  public static final int UTC_TIME = 2;\n+\n   /**\n    * Create a <code>SimpleTimeZone</code> with the given time offset\n    * from GMT and without daylight savings.  \n@@ -283,7 +315,10 @@ public SimpleTimeZone(int rawOffset, String id)\n    * @param endday A day in month or a day of week number, as \n    * described above.\n    * @param endDayOfWeek The end rule day of week; see above.\n-   * @param endTime A time in millis in standard time.  */\n+   * @param endTime A time in millis in standard time.\n+   * @throws IllegalArgumentException if parameters are invalid or out of\n+   * range.\n+   */\n   public SimpleTimeZone(int rawOffset, String id,\n \t\t\tint startMonth, int startDayOfWeekInMonth,\n \t\t\tint startDayOfWeek, int startTime,\n@@ -310,6 +345,7 @@ public SimpleTimeZone(int rawOffset, String id,\n    *\n    * @param dstSavings the amount of savings for daylight savings\n    * time in milliseconds.  This must be positive.\n+   * @since 1.2\n    */\n   public SimpleTimeZone(int rawOffset, String id,\n \t\t\tint startMonth, int startDayOfWeekInMonth,\n@@ -324,6 +360,51 @@ public SimpleTimeZone(int rawOffset, String id,\n     this.dstSavings = dstSavings;\n   }\n \n+  /**\n+   * This constructs a new SimpleTimeZone that supports a daylight savings\n+   * rule.  The parameter are the same as for the constructor above, except\n+   * there are the additional startTimeMode, endTimeMode, and dstSavings\n+   * parameters.\n+   *\n+   * @param startTimeMode the mode that start times are specified in.  One of\n+   * WALL_TIME, STANDARD_TIME, or UTC_TIME.\n+   * @param endTimeMode the mode that end times are specified in.  One of\n+   * WALL_TIME, STANDARD_TIME, or UTC_TIME.\n+   * @param dstSavings the amount of savings for daylight savings\n+   * time in milliseconds.  This must be positive.\n+   * @throws IllegalArgumentException if parameters are invalid or out of\n+   * range.\n+   * @since 1.4\n+   */\n+  public SimpleTimeZone(int rawOffset, String id,\n+\t\t\tint startMonth, int startDayOfWeekInMonth,\n+\t\t\tint startDayOfWeek, int startTime, int startTimeMode,\n+\t\t\tint endMonth, int endDayOfWeekInMonth,\n+\t\t\tint endDayOfWeek, int endTime, int endTimeMode,\n+\t\t\tint dstSavings)\n+  {\n+    this.rawOffset = rawOffset;\n+    setID(id);\n+    useDaylight = true;\n+\n+    if (startTimeMode < WALL_TIME || startTimeMode > UTC_TIME)\n+      throw new IllegalArgumentException(\"startTimeMode must be one of WALL_TIME, STANDARD_TIME, or UTC_TIME\");\n+    if (endTimeMode < WALL_TIME || endTimeMode > UTC_TIME)\n+      throw new IllegalArgumentException(\"endTimeMode must be one of WALL_TIME, STANDARD_TIME, or UTC_TIME\");\n+    this.startTimeMode = startTimeMode;\n+    this.endTimeMode = endTimeMode;\n+\n+    setStartRule(startMonth, startDayOfWeekInMonth,\n+\t\t startDayOfWeek, startTime);\n+    setEndRule(endMonth, endDayOfWeekInMonth, endDayOfWeek, endTime);\n+    if (startMonth == endMonth)\n+      throw new IllegalArgumentException\n+\t(\"startMonth and endMonth must be different\");\n+    this.startYear = 0;\n+\n+    this.dstSavings = dstSavings;\n+  }\n+\n   /**\n    * Sets the first year, where daylight savings applies.  The daylight\n    * savings rule never apply for years in the BC era.  Note that this\n@@ -400,18 +481,85 @@ public void setStartRule(int month, int day, int dayOfWeek, int time)\n     // of this method.\n     this.startDay = Math.abs(day);\n     this.startDayOfWeek = Math.abs(dayOfWeek);\n-    this.startTime = time;\n+    if (this.startTimeMode == WALL_TIME || this.startTimeMode == STANDARD_TIME)\n+      this.startTime = time;\n+    else\n+      // Convert from UTC to STANDARD\n+      this.startTime = time + this.rawOffset;\n+    useDaylight = true;\n+  }\n+\n+  /**\n+   * Sets the daylight savings start rule.  You must also set the\n+   * end rule with <code>setEndRule</code> or the result of\n+   * getOffset is undefined.  For the parameters see the ten-argument\n+   * constructor above.\n+   *\n+   * Note that this API isn't incredibly well specified.  It appears that the\n+   * after flag must override the parameters, since normally, the day and\n+   * dayofweek can select this.  I.e., if day < 0 and dayOfWeek < 0, on or\n+   * before mode is chosen.  But if after == true, this implementation\n+   * overrides the signs of the other arguments.  And if dayOfWeek == 0, it\n+   * falls back to the behavior in the other APIs.  I guess this should be\n+   * checked against Sun's implementation.\n+   *\n+   * @param month The month where daylight savings start, zero\n+   * based.  You should use the constants in Calendar.\n+   * @param day A day of month or day of week in month.\n+   * @param dayOfWeek The day of week where daylight savings start.\n+   * @param time The time in milliseconds standard time where daylight\n+   * savings start.\n+   * @param after If true, day and dayOfWeek specify first day of week on or\n+   * after day, else first day of week on or before.\n+   * @since 1.2\n+   * @see SimpleTimeZone\n+   */\n+  public void setStartRule(int month, int day, int dayOfWeek, int time, boolean after)\n+  {\n+    // FIXME: XXX: Validate that checkRule and offset processing work with on\n+    // or before mode.\n+    this.startDay = after ? Math.abs(day) : -Math.abs(day);\n+    this.startDayOfWeek = after ? Math.abs(dayOfWeek) : -Math.abs(dayOfWeek);\n+    this.startMode = (dayOfWeek != 0) ? (after ? DOW_GE_DOM_MODE : DOW_LE_DOM_MODE)\n+      : checkRule(month, day, dayOfWeek);\n+    this.startDay = Math.abs(this.startDay);\n+    this.startDayOfWeek = Math.abs(this.startDayOfWeek);\n+\n+    this.startMonth = month;\n+\n+    if (this.startTimeMode == WALL_TIME || this.startTimeMode == STANDARD_TIME)\n+      this.startTime = time;\n+    else\n+      // Convert from UTC to STANDARD\n+      this.startTime = time + this.rawOffset;\n     useDaylight = true;\n   }\n \n+  /**\n+   * Sets the daylight savings start rule.  You must also set the\n+   * end rule with <code>setEndRule</code> or the result of\n+   * getOffset is undefined.  For the parameters see the ten-argument\n+   * constructor above.\n+   *\n+   * @param month The month where daylight savings start, zero\n+   * based.  You should use the constants in Calendar.\n+   * @param day A day of month or day of week in month.\n+   * @param time The time in milliseconds standard time where daylight\n+   * savings start.\n+   * @see SimpleTimeZone\n+   * @since 1.2\n+   */\n+  public void setStartRule(int month, int day, int time)\n+  {\n+    setStartRule(month, day, 0, time);\n+  }\n+\n   /**\n    * Sets the daylight savings end rule.  You must also set the\n    * start rule with <code>setStartRule</code> or the result of\n    * getOffset is undefined. For the parameters see the ten-argument\n    * constructor above.\n    *\n-   * @param rawOffset The time offset from GMT.\n-   * @param id  The identifier of this time zone.\n    * @param month The end month of daylight savings.\n    * @param day A day in month, or a day of week in month.\n    * @param dayOfWeek A day of week, when daylight savings ends.\n@@ -426,10 +574,81 @@ public void setEndRule(int month, int day, int dayOfWeek, int time)\n     // of this method.\n     this.endDay = Math.abs(day);\n     this.endDayOfWeek = Math.abs(dayOfWeek);\n-    this.endTime = time;\n+    if (this.endTimeMode == WALL_TIME)\n+      this.endTime = time;\n+    else if (this.endTimeMode == STANDARD_TIME)\n+      // Convert from STANDARD to DST\n+      this.endTime = time + this.dstSavings;\n+    else\n+      // Convert from UTC to DST\n+      this.endTime = time + this.rawOffset + this.dstSavings;\n+    useDaylight = true;\n+  }\n+\n+  /**\n+   * Sets the daylight savings end rule.  You must also set the\n+   * start rule with <code>setStartRule</code> or the result of\n+   * getOffset is undefined. For the parameters see the ten-argument\n+   * constructor above.\n+   *\n+   * Note that this API isn't incredibly well specified.  It appears that the\n+   * after flag must override the parameters, since normally, the day and\n+   * dayofweek can select this.  I.e., if day < 0 and dayOfWeek < 0, on or\n+   * before mode is chosen.  But if after == true, this implementation\n+   * overrides the signs of the other arguments.  And if dayOfWeek == 0, it\n+   * falls back to the behavior in the other APIs.  I guess this should be\n+   * checked against Sun's implementation.\n+   *\n+   * @param month The end month of daylight savings.\n+   * @param day A day in month, or a day of week in month.\n+   * @param dayOfWeek A day of week, when daylight savings ends.\n+   * @param time A time in millis in standard time.\n+   * @param after If true, day and dayOfWeek specify first day of week on or\n+   * after day, else first day of week on or before.\n+   * @since 1.2\n+   * @see #setStartRule\n+   */\n+  public void setEndRule(int month, int day, int dayOfWeek, int time, boolean after)\n+  {\n+    // FIXME: XXX: Validate that checkRule and offset processing work with on\n+    // or before mode.\n+    this.endDay = after ? Math.abs(day) : -Math.abs(day);\n+    this.endDayOfWeek = after ? Math.abs(dayOfWeek) : -Math.abs(dayOfWeek);\n+    this.endMode = (dayOfWeek != 0) ? (after ? DOW_GE_DOM_MODE : DOW_LE_DOM_MODE)\n+      : checkRule(month, day, dayOfWeek);\n+    this.endDay = Math.abs(this.endDay);\n+    this.endDayOfWeek = Math.abs(endDayOfWeek);\n+\n+    this.endMonth = month;\n+\n+    if (this.endTimeMode == WALL_TIME)\n+      this.endTime = time;\n+    else if (this.endTimeMode == STANDARD_TIME)\n+      // Convert from STANDARD to DST\n+      this.endTime = time + this.dstSavings;\n+    else\n+      // Convert from UTC to DST\n+      this.endTime = time + this.rawOffset + this.dstSavings;\n     useDaylight = true;\n   }\n \n+  /**\n+   * Sets the daylight savings end rule.  You must also set the\n+   * start rule with <code>setStartRule</code> or the result of\n+   * getOffset is undefined. For the parameters see the ten-argument\n+   * constructor above.\n+   *\n+   * @param month The end month of daylight savings.\n+   * @param day A day in month, or a day of week in month.\n+   * @param dayOfWeek A day of week, when daylight savings ends.\n+   * @param time A time in millis in standard time.\n+   * @see #setStartRule\n+   */\n+  public void setEndRule(int month, int day, int time)\n+  {\n+    setEndRule(month, day, 0, time);\n+  }\n+\n   /**\n    * Gets the time zone offset, for current date, modified in case of \n    * daylight savings.  This is the offset to add to UTC to get the local"}]}