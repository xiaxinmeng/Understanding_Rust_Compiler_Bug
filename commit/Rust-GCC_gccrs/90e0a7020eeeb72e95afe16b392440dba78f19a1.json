{"sha": "90e0a7020eeeb72e95afe16b392440dba78f19a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlMGE3MDIwZWVlYjcyZTk1YWZlMTZiMzkyNDQwZGJhNzhmMTlhMQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2015-04-07T03:36:05Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2015-04-07T03:36:05Z"}, "message": "re PR target/65614 (PowerPC VSX systems should use XSCPSGNDP to copy scalar fp data to/from Altivec registers)\n\n[gcc]\n2015-04-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/65614\n\t* config/rs6000/rs6000.c (struct processor_costs): Add cost field\n\tfor SF->DF conversions to make FLOAT_EXTEND more expensive, so\n\tthat LFD is used to load double constants instead of LFS.  Add\n\tdefaults for all costs structures.  Add comments for missing\n\tinitialization fields.\n\t(size32_cost): Likewise.\n\t(size64_cost): Likewise.\n\t(rs64a_cost): Likewise.\n\t(mpccore_cost): Likewise.\n\t(ppc403_cost): Likewise.\n\t(ppc405_cost): Likewise.\n\t(ppc440_cost): Likewise.\n\t(ppc476_cost): Likewise.\n\t(ppc601_cost): Likewise.\n\t(ppc603_cost): Likewise.\n\t(ppc604_cost): Likewise.\n\t(ppc604e_cost): Likewise.\n\t(ppc620_cost): Likewise.\n\t(ppc630_cost): Likewise.\n\t(ppccell_cost): Likewise.\n\t(ppc750_cost): Likewise.\n\t(ppc7450_cost): Likewise.\n\t(ppc8540_cost): Likewise.\n\t(ppce300c2c3_cost): Likewise.\n\t(ppce500mc_cost): Likewise.\n\t(ppce500mc64_cost): Likewise.\n\t(ppce5500_cost): Likewise.\n\t(ppce6500_cost): Likewise.\n\t(titan_cost): Likewise.\n\t(power4_cost): Likewise.\n\t(power6_cost): Likewise.\n\t(power7_cost): Likewise.\n\t(power8_cost): Likewise.\n\t(ppca2_cost): Likewise.\n\t(rs6000_rtx_costs): Make FLOAT_EXTEND use SFDF_convert field.\n\n\t* config/rs6000/rs6000.md (extendsfdf2_fpr): Generate XSCPSGNDP\n\tinstead of XXLOR to copy SFmode to clear out dirty bits created\n\twhen SFmode denormals are generated.\n\t(mov<mode>_hardfloat, FMOVE32 case): Likewise.\n\t(truncdfsf2_fpr): Add support for ISA 2.07 XSRSP instruction.\n\n[gcc/testsuite]\n2015-04-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/65614\n\t* gcc.target/powerpc/compress-float-ppc-pic.c: Run test on power5\n\tto get floating point compression.\n\t* gcc.target/powerpc/compress-foat-ppc.c: Likewise.\n\nFrom-SVN: r221888", "tree": {"sha": "bbc99094a05e223b0369ecd5f3e1d21e1ffd820b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbc99094a05e223b0369ecd5f3e1d21e1ffd820b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90e0a7020eeeb72e95afe16b392440dba78f19a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e0a7020eeeb72e95afe16b392440dba78f19a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90e0a7020eeeb72e95afe16b392440dba78f19a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90e0a7020eeeb72e95afe16b392440dba78f19a1/comments", "author": null, "committer": null, "parents": [{"sha": "68b3d8c98793a7b58871aa91f2ad9b511fe63209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b3d8c98793a7b58871aa91f2ad9b511fe63209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68b3d8c98793a7b58871aa91f2ad9b511fe63209"}], "stats": {"total": 124, "additions": 106, "deletions": 18}, "files": [{"sha": "c060283c73f655ba08cba56f9b12c0a6908b640f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90e0a7020eeeb72e95afe16b392440dba78f19a1", "patch": "@@ -1,3 +1,48 @@\n+2015-04-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/65614\n+\t* config/rs6000/rs6000.c (struct processor_costs): Add cost field\n+\tfor SF->DF conversions to make FLOAT_EXTEND more expensive, so\n+\tthat LFD is used to load double constants instead of LFS.  Add\n+\tdefaults for all costs structures.  Add comments for missing\n+\tinitialization fields.\n+\t(size32_cost): Likewise.\n+\t(size64_cost): Likewise.\n+\t(rs64a_cost): Likewise.\n+\t(mpccore_cost): Likewise.\n+\t(ppc403_cost): Likewise.\n+\t(ppc405_cost): Likewise.\n+\t(ppc440_cost): Likewise.\n+\t(ppc476_cost): Likewise.\n+\t(ppc601_cost): Likewise.\n+\t(ppc603_cost): Likewise.\n+\t(ppc604_cost): Likewise.\n+\t(ppc604e_cost): Likewise.\n+\t(ppc620_cost): Likewise.\n+\t(ppc630_cost): Likewise.\n+\t(ppccell_cost): Likewise.\n+\t(ppc750_cost): Likewise.\n+\t(ppc7450_cost): Likewise.\n+\t(ppc8540_cost): Likewise.\n+\t(ppce300c2c3_cost): Likewise.\n+\t(ppce500mc_cost): Likewise.\n+\t(ppce500mc64_cost): Likewise.\n+\t(ppce5500_cost): Likewise.\n+\t(ppce6500_cost): Likewise.\n+\t(titan_cost): Likewise.\n+\t(power4_cost): Likewise.\n+\t(power6_cost): Likewise.\n+\t(power7_cost): Likewise.\n+\t(power8_cost): Likewise.\n+\t(ppca2_cost): Likewise.\n+\t(rs6000_rtx_costs): Make FLOAT_EXTEND use SFDF_convert field.\n+\n+\t* config/rs6000/rs6000.md (extendsfdf2_fpr): Generate XSCPSGNDP\n+\tinstead of XXLOR to copy SFmode to clear out dirty bits created\n+\twhen SFmode denormals are generated.\n+\t(mov<mode>_hardfloat, FMOVE32 case): Likewise.\n+\t(truncdfsf2_fpr): Add support for ISA 2.07 XSRSP instruction.\n+\n 2015-04-06  Evandro Menezes  <e.menezes@samsung.com>\n \n \t* doc/invoke.texi (AARCH64/mtune): Add exynos-m1 as an option."}, {"sha": "4bb42213c87370b1b417de4e461af325eab74e95", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=90e0a7020eeeb72e95afe16b392440dba78f19a1", "patch": "@@ -457,6 +457,7 @@ struct processor_costs {\n   const int l2_cache_size;\t/* size of l2 cache, in kilobytes.  */\n   const int simultaneous_prefetches; /* number of parallel prefetch\n \t\t\t\t\toperations.  */\n+  const int sfdf_convert;\t/* cost of SF->DF conversion.  */\n };\n \n const struct processor_costs *rs6000_cost;\n@@ -476,10 +477,11 @@ struct processor_costs size32_cost = {\n   COSTS_N_INSNS (1),    /* dmul */\n   COSTS_N_INSNS (1),    /* sdiv */\n   COSTS_N_INSNS (1),    /* ddiv */\n-  32,\n-  0,\n-  0,\n-  0,\n+  32,\t\t\t/* cache line size */\n+  0,\t\t\t/* l1 cache */\n+  0,\t\t\t/* l2 cache */\n+  0,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction size costs on 64bit processors.  */\n@@ -495,10 +497,11 @@ struct processor_costs size64_cost = {\n   COSTS_N_INSNS (1),    /* dmul */\n   COSTS_N_INSNS (1),    /* sdiv */\n   COSTS_N_INSNS (1),    /* ddiv */\n-  128,\n-  0,\n-  0,\n-  0,\n+  128,\t\t\t/* cache line size */\n+  0,\t\t\t/* l1 cache */\n+  0,\t\t\t/* l2 cache */\n+  0,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on RS64A processors.  */\n@@ -518,6 +521,7 @@ struct processor_costs rs64a_cost = {\n   128,\t\t\t/* l1 cache */\n   2048,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on MPCCORE processors.  */\n@@ -537,6 +541,7 @@ struct processor_costs mpccore_cost = {\n   4,\t\t\t/* l1 cache */\n   16,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC403 processors.  */\n@@ -556,6 +561,7 @@ struct processor_costs ppc403_cost = {\n   4,\t\t\t/* l1 cache */\n   16,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC405 processors.  */\n@@ -575,6 +581,7 @@ struct processor_costs ppc405_cost = {\n   16,\t\t\t/* l1 cache */\n   128,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC440 processors.  */\n@@ -594,6 +601,7 @@ struct processor_costs ppc440_cost = {\n   32,\t\t\t/* l1 cache */\n   256,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC476 processors.  */\n@@ -613,6 +621,7 @@ struct processor_costs ppc476_cost = {\n   32,\t\t\t/* l1 cache */\n   512,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC601 processors.  */\n@@ -632,6 +641,7 @@ struct processor_costs ppc601_cost = {\n   32,\t\t\t/* l1 cache */\n   256,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC603 processors.  */\n@@ -651,6 +661,7 @@ struct processor_costs ppc603_cost = {\n   8,\t\t\t/* l1 cache */\n   64,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC604 processors.  */\n@@ -670,6 +681,7 @@ struct processor_costs ppc604_cost = {\n   16,\t\t\t/* l1 cache */\n   512,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC604e processors.  */\n@@ -689,6 +701,7 @@ struct processor_costs ppc604e_cost = {\n   32,\t\t\t/* l1 cache */\n   1024,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC620 processors.  */\n@@ -708,6 +721,7 @@ struct processor_costs ppc620_cost = {\n   32,\t\t\t/* l1 cache */\n   1024,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC630 processors.  */\n@@ -727,6 +741,7 @@ struct processor_costs ppc630_cost = {\n   64,\t\t\t/* l1 cache */\n   1024,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on Cell processor.  */\n@@ -747,6 +762,7 @@ struct processor_costs ppccell_cost = {\n   32,\t\t\t/* l1 cache */\n   512,\t\t\t/* l2 cache */\n   6,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC750 and PPC7400 processors.  */\n@@ -766,6 +782,7 @@ struct processor_costs ppc750_cost = {\n   32,\t\t\t/* l1 cache */\n   512,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC7450 processors.  */\n@@ -785,6 +802,7 @@ struct processor_costs ppc7450_cost = {\n   32,\t\t\t/* l1 cache */\n   1024,\t\t\t/* l2 cache */\n   1,\t\t\t/* streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPC8540 processors.  */\n@@ -804,6 +822,7 @@ struct processor_costs ppc8540_cost = {\n   32,\t\t\t/* l1 cache */\n   256,\t\t\t/* l2 cache */\n   1,\t\t\t/* prefetch streams /*/\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on E300C2 and E300C3 cores.  */\n@@ -823,6 +842,7 @@ struct processor_costs ppce300c2c3_cost = {\n   16,\t\t\t/* l1 cache */\n   16,\t\t\t/* l2 cache */\n   1,\t\t\t/* prefetch streams /*/\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPCE500MC processors.  */\n@@ -842,6 +862,7 @@ struct processor_costs ppce500mc_cost = {\n   32,\t\t\t/* l1 cache */\n   128,\t\t\t/* l2 cache */\n   1,\t\t\t/* prefetch streams /*/\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPCE500MC64 processors.  */\n@@ -861,6 +882,7 @@ struct processor_costs ppce500mc64_cost = {\n   32,\t\t\t/* l1 cache */\n   128,\t\t\t/* l2 cache */\n   1,\t\t\t/* prefetch streams /*/\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPCE5500 processors.  */\n@@ -880,6 +902,7 @@ struct processor_costs ppce5500_cost = {\n   32,\t\t\t/* l1 cache */\n   128,\t\t\t/* l2 cache */\n   1,\t\t\t/* prefetch streams /*/\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on PPCE6500 processors.  */\n@@ -899,6 +922,7 @@ struct processor_costs ppce6500_cost = {\n   32,\t\t\t/* l1 cache */\n   128,\t\t\t/* l2 cache */\n   1,\t\t\t/* prefetch streams /*/\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on AppliedMicro Titan processors.  */\n@@ -918,6 +942,7 @@ struct processor_costs titan_cost = {\n   32,\t\t\t/* l1 cache */\n   512,\t\t\t/* l2 cache */\n   1,\t\t\t/* prefetch streams /*/\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on POWER4 and POWER5 processors.  */\n@@ -937,6 +962,7 @@ struct processor_costs power4_cost = {\n   32,\t\t\t/* l1 cache */\n   1024,\t\t\t/* l2 cache */\n   8,\t\t\t/* prefetch streams /*/\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on POWER6 processors.  */\n@@ -956,6 +982,7 @@ struct processor_costs power6_cost = {\n   64,\t\t\t/* l1 cache */\n   2048,\t\t\t/* l2 cache */\n   16,\t\t\t/* prefetch streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n /* Instruction costs on POWER7 processors.  */\n@@ -975,6 +1002,7 @@ struct processor_costs power7_cost = {\n   32,\t\t\t/* l1 cache */\n   256,\t\t\t/* l2 cache */\n   12,\t\t\t/* prefetch streams */\n+  COSTS_N_INSNS (3),\t/* SF->DF convert */\n };\n \n /* Instruction costs on POWER8 processors.  */\n@@ -994,6 +1022,7 @@ struct processor_costs power8_cost = {\n   32,\t\t\t/* l1 cache */\n   256,\t\t\t/* l2 cache */\n   12,\t\t\t/* prefetch streams */\n+  COSTS_N_INSNS (3),\t/* SF->DF convert */\n };\n \n /* Instruction costs on POWER A2 processors.  */\n@@ -1013,6 +1042,7 @@ struct processor_costs ppca2_cost = {\n   16,\t\t\t/* l1 cache */\n   2048,\t\t\t/* l2 cache */\n   16,\t\t\t/* prefetch streams */\n+  0,\t\t\t/* SF->DF convert */\n };\n \n \f\n@@ -30480,7 +30510,7 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n \n     case FLOAT_EXTEND:\n       if (mode == DFmode)\n-\t*total = 0;\n+\t*total = rs6000_cost->sfdf_convert;\n       else\n \t*total = rs6000_cost->fp;\n       return false;"}, {"sha": "0178bf45b001332456ddd8e5ca895ea46323ab2b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=90e0a7020eeeb72e95afe16b392440dba78f19a1", "patch": "@@ -5222,15 +5222,15 @@\n    fmr %0,%1\n    lfs%U1%X1 %0,%1\n    #\n-   xxlor %x0,%x1,%x1\n+   xscpsgndp %x0,%x1,%x1\n    lxsspx %x0,%y1\"\n   \"&& reload_completed && REG_P (operands[1]) && REGNO (operands[0]) == REGNO (operands[1])\"\n   [(const_int 0)]\n {\n   emit_note (NOTE_INSN_DELETED);\n   DONE;\n }\n-  [(set_attr \"type\" \"fp,fp,fpload,fp,vecsimple,fpload\")])\n+  [(set_attr \"type\" \"fp,fp,fpload,fp,fp,fpload\")])\n \n (define_expand \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n@@ -5239,10 +5239,12 @@\n   \"\")\n \n (define_insn \"*truncdfsf2_fpr\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"d\")))]\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wy\")\n+\t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"d,ws\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n-  \"frsp %0,%1\"\n+  \"@\n+   frsp %0,%1\n+   xsrsp %x0,%x1\"\n   [(set_attr \"type\" \"fp\")])\n \n ;; This expander is here to avoid FLOAT_WORDS_BIGENDIAN tests in\n@@ -8058,7 +8060,7 @@\n    lwz%U1%X1 %0,%1\n    stw%U0%X0 %1,%0\n    fmr %0,%1\n-   xxlor %x0,%x1,%x1\n+   xscpsgndp %x0,%x1,%x1\n    xxlxor %x0,%x0,%x0\n    li %0,0\n    <f32_li>\n@@ -8070,7 +8072,7 @@\n    mt%0 %1\n    mf%1 %0\n    nop\"\n-  [(set_attr \"type\" \"*,load,store,fp,vecsimple,vecsimple,integer,fpload,fpstore,fpload,fpstore,mftgpr,mffgpr,mtjmpr,mfjmpr,*\")\n+  [(set_attr \"type\" \"*,load,store,fp,fp,vecsimple,integer,fpload,fpstore,fpload,fpstore,mftgpr,mffgpr,mtjmpr,mfjmpr,*\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"*mov<mode>_softfloat\""}, {"sha": "2c01f72e0cabc7e40777a3ae5aced7bf22f0fc8a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90e0a7020eeeb72e95afe16b392440dba78f19a1", "patch": "@@ -1,3 +1,10 @@\n+2015-04-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/65614\n+\t* gcc.target/powerpc/compress-float-ppc-pic.c: Run test on power5\n+\tto get floating point compression.\n+\t* gcc.target/powerpc/compress-foat-ppc.c: Likewise.\n+\n 2015-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/61977"}, {"sha": "1c8814bcb93a707973deb189cbb1ff5b0c806ac5", "filename": "gcc/testsuite/gcc.target/powerpc/compress-float-ppc-pic.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcompress-float-ppc-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcompress-float-ppc-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcompress-float-ppc-pic.c?ref=90e0a7020eeeb72e95afe16b392440dba78f19a1", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile { target powerpc_fprs } } */\n-/* { dg-options \"-O2 -fpic\" } */\n+/* { dg-options \"-O2 -fpic -mcpu=power5\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power5\" } } */\n+\n double foo (double x) {\n   return x + 1.75;\n }"}, {"sha": "290ab2be12199b36f6b6adc557823fad51b93c7f", "filename": "gcc/testsuite/gcc.target/powerpc/compress-float-ppc.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcompress-float-ppc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90e0a7020eeeb72e95afe16b392440dba78f19a1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcompress-float-ppc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcompress-float-ppc.c?ref=90e0a7020eeeb72e95afe16b392440dba78f19a1", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile { target powerpc_fprs } } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -mcpu=power5\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power5\" } } */\n+\n double foo (double x) {\n   return x + 1.75;\n }"}]}