{"sha": "37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdmZTBiYzU2YjNjZmVkNWJlZTY1ZjUxYzg1YTRlOTk3NGZjMmRiNQ==", "commit": {"author": {"name": "Roland McGrath", "email": "roland@gcc.gnu.org", "date": "1993-03-06T08:07:57Z"}, "committer": {"name": "Roland McGrath", "email": "roland@gcc.gnu.org", "date": "1993-03-06T08:07:57Z"}, "message": "entered into RCS\n\nFrom-SVN: r3664", "tree": {"sha": "4e49ae0fad693b5531cf90c03b90f0af32980f48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e49ae0fad693b5531cf90c03b90f0af32980f48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5/comments", "author": null, "committer": null, "parents": [{"sha": "86d38d25ba2f6583291319bae57481a75aed48bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d38d25ba2f6583291319bae57481a75aed48bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d38d25ba2f6583291319bae57481a75aed48bd"}], "stats": {"total": 249, "additions": 249, "deletions": 0}, "files": [{"sha": "e0454e41ec64d18126da868a25a7b6f66e8e7220", "filename": "gcc/config/i386/sco4dbx.h", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5/gcc%2Fconfig%2Fi386%2Fsco4dbx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5/gcc%2Fconfig%2Fi386%2Fsco4dbx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco4dbx.h?ref=37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5", "patch": "@@ -0,0 +1,80 @@\n+/* Definitions for Intel 386 running SCO Unix System V 3.2 Version 4.s,\n+   using dbx-in-coff encapsulation.\n+   Copyright (C) 1992 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+/* Mostly it's like earlier SCO UNIX.  */\n+\n+#include \"i386/scodbx.h\"\n+\n+/* Use crt1.o as a startup file and crtn.o as a closing file.  */\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \\\n+ \"%{!r:%{!z:gcc.ifile%s}%{z:gccz.ifile%s}}\\\n+  %{scoxpg3:%{p:mcrt1X.o%s}%{!p:crt1X.o%s}} \\\n+  %{!scoxpg3:\\\n+   %{posix:%{p:mcrt1P.o%s}%{!p:crt1P.o%s}} \\\n+   %{!posix:\\\n+    %{ansi:%{p:mcrt1A.o%s}%{!p:crt1A.o%s}} \\\n+    %{!ansi:%{pg:gcrt1.o%s}%{!pg:%{p:mcrt1.o%s}%{!p:crt1.o%s}}}}}\"\n+\n+#undef ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+ \"%{scoxpg3:crtnX.o%s} \\\n+  %{!scoxpg3:\\\n+   %{posix:crtnP.o%s} \\\n+   %{!posix:\\\n+    %{ansi:crtnA.o%s} \\\n+    %{!ansi:crtn.o%s}}}\"\n+\n+/* Library spec.  */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \\\n+ \"%{p:-L/usr/lib/libp}%{pg:-L/usr/lib/libp} \\\n+ %{scoxpg3:-lcX -lcP -lcA} \\\n+ %{!scoxpg3:\\\n+  %{posix:-lcP -lcA} \\\n+  %{!posix:\\\n+   %{ansi:-lcA} \\\n+   %{!ansi:%{scointl:-lintl} -lc}}}\"\n+\n+/* Macros, macros everywhere:\n+   Specify predefined symbols in preprocessor.  */\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Di386 -Dunix\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \\\n+ \"-D_M_I386 -D_M_I86 -D_M_I86SM -D_M_SDATA -D_M_STEXT \\\n+  -D_M_UNIX -D_M_XENIX \\\n+  -D_M_SYS5 -D_M_SYSV -D_M_SYS3 -D_M_SYSIII \\\n+  -D_M_COFF -D_M_BITFIELDS -D_M_WORDSWAP \\\n+  %{scoxpg3:-D_XOPEN_SOURCE -D_STRICT_NAMES} \\\n+  %{!scoxpg3:%{posix:-D_POSIX_SOURCE -D_STRICT_NAMES}} \\\n+  %{!scoxpg3:%{!posix:\\\n+    %{ansi:-D_STRICT_NAMES}%{!ansi:\\\n+    -DM_I386 -DM_I86 -DM_I86SM -DM_SDATA -DM_STEXT \\\n+    -DM_UNIX -DM_XENIX \\\n+    -DM_SYS5 -DM_SYSV -DM_SYS3 -DM_SYSIII \\\n+    -DM_COFF -DM_BITFIELDS -DM_WORDSWAP \\\n+    %{scointl:-D_M_INTERNAT -DM_INTERNAT} \\\n+    %{traditional:-D_KR -D_SVID -D_NO_PROTOTYPE}}}}\""}, {"sha": "f0bb3a0f8dc0e493b1564b3598147961bc7b3e7b", "filename": "gcc/config/i386/svr3.ifile", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5/gcc%2Fconfig%2Fi386%2Fsvr3.ifile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5/gcc%2Fconfig%2Fi386%2Fsvr3.ifile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3.ifile?ref=37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5", "patch": "@@ -0,0 +1,45 @@\n+/*\n+ *      svr3.ifile - for collectless G++ on i386 System V.\n+ *\tLeaves memory configured at address 0.\n+ *\t\n+ *      Install this file as $prefix/gcc-lib/TARGET/VERSION/gcc.ifile\n+ *\n+ *\tBLOCK to an offset that leaves room for many headers ( the value\n+ *\there allows for a file header, an outheader, and up to 11 section \n+ *\theaders on most systems.\n+ *\tBIND to an address that includes page 0 in mapped memory. The value\n+ *\tused for BLOCK should be or'd into this value. Here I'm setting BLOCK\n+ *\tto 0x200 and BIND to ( value_used_for(BLOCK) )\n+ *\tIf you are using shared libraries, watch that you don't overlap the\n+ *\taddress ranges assigned for shared libs.\n+ *\n+ *\tGROUP BIND to a location in the next segment.  Here, the only value\n+ *\tthat you should change (I think) is that within NEXT, which I've set\n+ *\tto my hardware segment size. You can always use a larger size, but not\n+ *\ta smaller one.\n+ */\n+SECTIONS\n+{\n+\t.text BIND(0x000200) BLOCK (0x200) :\n+\t{\n+\t\t /* plenty for room for headers */\n+\t\t*(.init)\n+\t\t*(.text)\n+\t\tvfork = fork; /* I got tired of editing peoples sloppy code */\n+\t\t*(.fini)\n+\t}\n+\tGROUP BIND( NEXT(0x400000) + (ADDR(.text) + (SIZEOF(.text)) % 0x1000)):\n+\t{\n+\t\t\t.data : {\n+\t\t\t\t__CTOR_LIST__ = . ; \n+\t\t\t\t. += 4 ;\t/* leading NULL */\n+\t\t\t\t*(.ctor) \n+\t\t\t\t. += 4 ;\t/* trailing NULL */\n+\t\t\t\t__DTOR_LIST__ = . ;\n+\t\t\t\t. += 4 ;\t/* leading NULL */\n+\t\t\t\t*(.dtor) \n+\t\t\t\t. += 4 ; \t/* trailing NULL */\n+\t\t\t }\n+\t\t\t.bss : { }\n+\t}\n+}"}, {"sha": "4fdbb937c57bea13d474216c63aed83c8da5cb61", "filename": "gcc/config/i386/svr3z.ifile", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5/gcc%2Fconfig%2Fi386%2Fsvr3z.ifile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5/gcc%2Fconfig%2Fi386%2Fsvr3z.ifile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3z.ifile?ref=37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5", "patch": "@@ -0,0 +1,45 @@\n+/*\n+ *      svr3z.ifile - for collectless G++ on i386 System V.\n+ *\tLeaves memory unconfigured at address 0.\n+ *\t\n+ *      Install this file as $prefix/gcc-lib/TARGET/VERSION/gccz.ifile\n+ *\n+ *\tBLOCK to an offset that leaves room for many headers ( the value\n+ *\there allows for a file header, an outheader, and up to 11 section \n+ *\theaders on most systems.\n+ *\tBIND to an address that excludes page 0 from being mapped. The value\n+ *\tused for BLOCK should be or'd into this value. Here I'm setting BLOCK\n+ *\tto 0x200 and BIND to ( 0x400000 | value_used_for(BLOCK) )\n+ *\tIf you are using shared libraries, watch that you don't overlap the\n+ *\taddress ranges assigned for shared libs.\n+ *\n+ *\tGROUP BIND to a location in the next segment.  Here, the only value\n+ *\tthat you should change (I think) is that within NEXT, which I've set\n+ *\tto my hardware segment size. You can always use a larger size, but not\n+ *\ta smaller one.\n+ */\n+SECTIONS\n+{\n+\t.text BIND(0x400200) BLOCK (0x200) :\n+\t{\n+\t\t /* plenty for room for headers */\n+\t\t*(.init)\n+\t\t*(.text)\n+\t\tvfork = fork; /* I got tired of editing peoples sloppy code */\n+\t\t*(.fini)\n+\t}\n+\tGROUP BIND( NEXT(0x400000) + (ADDR(.text) + (SIZEOF(.text)) % 0x1000)):\n+\t{\n+\t\t\t.data : {\n+\t\t\t\t__CTOR_LIST__ = . ; \n+\t\t\t\t. += 4 ;\t/* leading NULL */\n+\t\t\t\t*(.ctor) \n+\t\t\t\t. += 4 ;\t/* trailing NULL */\n+\t\t\t\t__DTOR_LIST__ = . ;\n+\t\t\t\t. += 4 ;\t/* leading NULL */\n+\t\t\t\t*(.dtor) \n+\t\t\t\t. += 4 ; \t/* trailing NULL */\n+\t\t\t }\n+\t\t\t.bss : { }\n+\t}\n+}"}, {"sha": "18053ece8354fd4eef0e47a47fd9401e612fe841", "filename": "gcc/config/i386/v3gas.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5/gcc%2Fconfig%2Fi386%2Fv3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5/gcc%2Fconfig%2Fi386%2Fv3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fv3gas.h?ref=37fe0bc56b3cfed5bee65f51c85a4e9974fc2db5", "patch": "@@ -0,0 +1,79 @@\n+/* Definitions for Intel 386 running system V, using gas.\n+   Copyright (C) 1992 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"gas.h\"\n+\n+/* Add stuff that normally comes from i386v.h */\n+\n+/* longjmp may fail to restore the registers if called from the same\n+   function that called setjmp.  To compensate, the compiler avoids\n+   putting variables in registers in functions that use both setjmp\n+   and longjmp.  */\n+\n+#define NON_SAVING_SETJMP \\\n+  (current_function_calls_setjmp && current_function_calls_longjmp)\n+\n+/* longjmp may fail to restore the stack pointer if the saved frame\n+   pointer is the same as the caller's frame pointer.  Requiring a frame\n+   pointer in any function that calls setjmp or longjmp avoids this\n+   problem, unless setjmp and longjmp are called from the same function.\n+   Since a frame pointer will be required in such a function, it is OK\n+   that the stack pointer is not restored.  */\n+\n+#undef FRAME_POINTER_REQUIRED\n+#define FRAME_POINTER_REQUIRED \\\n+  (current_function_calls_setjmp || current_function_calls_longjmp)\n+\n+/* Modify ASM_OUTPUT_LOCAL slightly to test -msvr3-shlib, adapted to gas  */\n+#undef ASM_OUTPUT_LOCAL\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    int align = exact_log2 (ROUNDED);\t\t\t\\\n+    if (align > 2) align = 2;\t\t\t\t\\\n+    if (TARGET_SVR3_SHLIB)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tdata_section ();\t\t\t\t\\\n+\tASM_OUTPUT_ALIGN ((FILE), align == -1 ? 2 : align); \\\n+\tASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\\\n+\tfprintf ((FILE), \"\\t.set .,.+%u\\n\", (ROUNDED));\t\\\n+      }\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tfputs (\".lcomm \", (FILE));\t\t\t\\\n+\tassemble_name ((FILE), (NAME));\t\t\t\\\n+\tfprintf ((FILE), \",%u\\n\", (ROUNDED));\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Add stuff that normally comes from i386v.h via svr3.h */\n+\n+/* Define the actual types of some ANSI-mandated types.  These\n+   definitions should work for most SVR3 systems.  */\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD"}]}