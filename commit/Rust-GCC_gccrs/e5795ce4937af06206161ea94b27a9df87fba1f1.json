{"sha": "e5795ce4937af06206161ea94b27a9df87fba1f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3OTVjZTQ5MzdhZjA2MjA2MTYxZWE5NGIyN2E5ZGY4N2ZiYTFmMQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-05-10T20:05:26Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-05-10T20:05:26Z"}, "message": "stl_algobase.h (std::__iter_swap<false>): Remove _GLIBCXX_MOVE usage.\n\n2017-05-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_algobase.h (std::__iter_swap<false>): Remove\n\t_GLIBCXX_MOVE usage.\n\nFrom-SVN: r247855", "tree": {"sha": "baaa502a316f782d36c2654ac3fedc74f23abb23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baaa502a316f782d36c2654ac3fedc74f23abb23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5795ce4937af06206161ea94b27a9df87fba1f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5795ce4937af06206161ea94b27a9df87fba1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5795ce4937af06206161ea94b27a9df87fba1f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5795ce4937af06206161ea94b27a9df87fba1f1/comments", "author": null, "committer": null, "parents": [{"sha": "d45d628294574fd6696ab54fdb543485db6e65f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d45d628294574fd6696ab54fdb543485db6e65f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d45d628294574fd6696ab54fdb543485db6e65f9"}], "stats": {"total": 169, "additions": 87, "deletions": 82}, "files": [{"sha": "57b1bdd3489a7f9788ebb5b255f7f981d94c4d8b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5795ce4937af06206161ea94b27a9df87fba1f1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5795ce4937af06206161ea94b27a9df87fba1f1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e5795ce4937af06206161ea94b27a9df87fba1f1", "patch": "@@ -1,3 +1,8 @@\n+2017-05-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_algobase.h (std::__iter_swap<false>): Remove\n+\t_GLIBCXX_MOVE usage.\n+\n 2017-05-09  Jason Merrill  <jason@redhat.com>\n \n \t* testsuite/24_iterators/container_access.cc (test03): Make il3 static."}, {"sha": "0a49e6ff66c1bed70bfa7d2e884d11ae14d8375b", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 82, "deletions": 82, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5795ce4937af06206161ea94b27a9df87fba1f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5795ce4937af06206161ea94b27a9df87fba1f1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=e5795ce4937af06206161ea94b27a9df87fba1f1", "patch": "@@ -67,7 +67,7 @@\n #include <bits/stl_iterator.h>\n #include <bits/concept_check.h>\n #include <debug/debug.h>\n-#include <bits/move.h> // For std::swap and _GLIBCXX_MOVE\n+#include <bits/move.h> // For std::swap\n #include <bits/predefined_ops.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -82,26 +82,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __iter_swap\n     {\n       template<typename _ForwardIterator1, typename _ForwardIterator2>\n-        static void\n-        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n-        {\n-          typedef typename iterator_traits<_ForwardIterator1>::value_type\n-            _ValueType1;\n-          _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);\n-          *__a = _GLIBCXX_MOVE(*__b);\n-          *__b = _GLIBCXX_MOVE(__tmp);\n+\tstatic void\n+\titer_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n+\t{\n+\t  typedef typename iterator_traits<_ForwardIterator1>::value_type\n+\t    _ValueType1;\n+\t  _ValueType1 __tmp = *__a;\n+\t  *__a = *__b;\n+\t  *__b = __tmp;\n \t}\n     };\n \n   template<>\n     struct __iter_swap<true>\n     {\n       template<typename _ForwardIterator1, typename _ForwardIterator2>\n-        static void \n-        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n-        {\n-          swap(*__a, *__b);\n-        }\n+\tstatic void\n+\titer_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)\n+\t{\n+\t  swap(*__a, *__b);\n+\t}\n     };\n #endif\n \n@@ -287,9 +287,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move\n     {\n       template<typename _II, typename _OI>\n-        static _OI\n-        __copy_m(_II __first, _II __last, _OI __result)\n-        {\n+\tstatic _OI\n+\t__copy_m(_II __first, _II __last, _OI __result)\n+\t{\n \t  for (; __first != __last; ++__result, (void)++__first)\n \t    *__result = *__first;\n \t  return __result;\n@@ -301,9 +301,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move<true, false, _Category>\n     {\n       template<typename _II, typename _OI>\n-        static _OI\n-        __copy_m(_II __first, _II __last, _OI __result)\n-        {\n+\tstatic _OI\n+\t__copy_m(_II __first, _II __last, _OI __result)\n+\t{\n \t  for (; __first != __last; ++__result, (void)++__first)\n \t    *__result = std::move(*__first);\n \t  return __result;\n@@ -315,9 +315,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move<false, false, random_access_iterator_tag>\n     {\n       template<typename _II, typename _OI>\n-        static _OI\n-        __copy_m(_II __first, _II __last, _OI __result)\n-        { \n+\tstatic _OI\n+\t__copy_m(_II __first, _II __last, _OI __result)\n+\t{\n \t  typedef typename iterator_traits<_II>::difference_type _Distance;\n \t  for(_Distance __n = __last - __first; __n > 0; --__n)\n \t    {\n@@ -334,9 +334,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move<true, false, random_access_iterator_tag>\n     {\n       template<typename _II, typename _OI>\n-        static _OI\n-        __copy_m(_II __first, _II __last, _OI __result)\n-        { \n+\tstatic _OI\n+\t__copy_m(_II __first, _II __last, _OI __result)\n+\t{\n \t  typedef typename iterator_traits<_II>::difference_type _Distance;\n \t  for(_Distance __n = __last - __first; __n > 0; --__n)\n \t    {\n@@ -353,9 +353,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move<_IsMove, true, random_access_iterator_tag>\n     {\n       template<typename _Tp>\n-        static _Tp*\n-        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)\n-        {\n+\tstatic _Tp*\n+\t__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)\n+\t{\n #if __cplusplus >= 201103L\n \t  using __assignable = conditional<_IsMove,\n \t\t\t\t\t   is_move_assignable<_Tp>,\n@@ -378,12 +378,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;\n       typedef typename iterator_traits<_II>::iterator_category _Category;\n       const bool __simple = (__is_trivial(_ValueTypeI)\n-\t                     && __is_pointer<_II>::__value\n-\t                     && __is_pointer<_OI>::__value\n+\t\t\t     && __is_pointer<_II>::__value\n+\t\t\t     && __is_pointer<_OI>::__value\n \t\t\t     && __are_same<_ValueTypeI, _ValueTypeO>::__value);\n \n       return std::__copy_move<_IsMove, __simple,\n-\t                      _Category>::__copy_m(__first, __last, __result);\n+\t\t\t      _Category>::__copy_m(__first, __last, __result);\n     }\n \n   // Helpers for streambuf iterators (either istream or ostream).\n@@ -398,13 +398,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class ostreambuf_iterator;\n \n   template<bool _IsMove, typename _CharT>\n-    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n \t     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type\n     __copy_move_a2(_CharT*, _CharT*,\n \t\t   ostreambuf_iterator<_CharT, char_traits<_CharT> >);\n \n   template<bool _IsMove, typename _CharT>\n-    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, \n+    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,\n \t     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type\n     __copy_move_a2(const _CharT*, const _CharT*,\n \t\t   ostreambuf_iterator<_CharT, char_traits<_CharT> >);\n@@ -497,9 +497,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move_backward\n     {\n       template<typename _BI1, typename _BI2>\n-        static _BI2\n-        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n-        {\n+\tstatic _BI2\n+\t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n+\t{\n \t  while (__first != __last)\n \t    *--__result = *--__last;\n \t  return __result;\n@@ -511,9 +511,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move_backward<true, false, _Category>\n     {\n       template<typename _BI1, typename _BI2>\n-        static _BI2\n-        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n-        {\n+\tstatic _BI2\n+\t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n+\t{\n \t  while (__first != __last)\n \t    *--__result = std::move(*--__last);\n \t  return __result;\n@@ -525,9 +525,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move_backward<false, false, random_access_iterator_tag>\n     {\n       template<typename _BI1, typename _BI2>\n-        static _BI2\n-        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n-        {\n+\tstatic _BI2\n+\t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n+\t{\n \t  typename iterator_traits<_BI1>::difference_type __n;\n \t  for (__n = __last - __first; __n > 0; --__n)\n \t    *--__result = *--__last;\n@@ -540,9 +540,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move_backward<true, false, random_access_iterator_tag>\n     {\n       template<typename _BI1, typename _BI2>\n-        static _BI2\n-        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n-        {\n+\tstatic _BI2\n+\t__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)\n+\t{\n \t  typename iterator_traits<_BI1>::difference_type __n;\n \t  for (__n = __last - __first; __n > 0; --__n)\n \t    *--__result = std::move(*--__last);\n@@ -555,9 +555,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>\n     {\n       template<typename _Tp>\n-        static _Tp*\n-        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)\n-        {\n+\tstatic _Tp*\n+\t__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)\n+\t{\n #if __cplusplus >= 201103L\n \t  using __assignable = conditional<_IsMove,\n \t\t\t\t\t   is_move_assignable<_Tp>,\n@@ -580,12 +580,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename iterator_traits<_BI2>::value_type _ValueType2;\n       typedef typename iterator_traits<_BI1>::iterator_category _Category;\n       const bool __simple = (__is_trivial(_ValueType1)\n-\t                     && __is_pointer<_BI1>::__value\n-\t                     && __is_pointer<_BI2>::__value\n+\t\t\t     && __is_pointer<_BI1>::__value\n+\t\t\t     && __is_pointer<_BI2>::__value\n \t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);\n \n       return std::__copy_move_backward<_IsMove, __simple,\n-\t                               _Category>::__copy_move_b(__first,\n+\t\t\t\t       _Category>::__copy_move_b(__first,\n \t\t\t\t\t\t\t\t __last,\n \t\t\t\t\t\t\t\t __result);\n     }\n@@ -684,7 +684,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       for (; __first != __last; ++__first)\n \t*__first = __value;\n     }\n-    \n+\n   template<typename _ForwardIterator, typename _Tp>\n     inline typename\n     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type\n@@ -793,9 +793,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __equal\n     {\n       template<typename _II1, typename _II2>\n-        static bool\n-        equal(_II1 __first1, _II1 __last1, _II2 __first2)\n-        {\n+\tstatic bool\n+\tequal(_II1 __first1, _II1 __last1, _II2 __first2)\n+\t{\n \t  for (; __first1 != __last1; ++__first1, (void)++__first2)\n \t    if (!(*__first1 == *__first2))\n \t      return false;\n@@ -807,9 +807,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __equal<true>\n     {\n       template<typename _Tp>\n-        static bool\n-        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)\n-        {\n+\tstatic bool\n+\tequal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)\n+\t{\n \t  if (const size_t __len = (__last1 - __first1))\n \t    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);\n \t  return true;\n@@ -824,8 +824,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename iterator_traits<_II2>::value_type _ValueType2;\n       const bool __simple = ((__is_integer<_ValueType1>::__value\n \t\t\t      || __is_pointer<_ValueType1>::__value)\n-\t                     && __is_pointer<_II1>::__value\n-\t                     && __is_pointer<_II2>::__value\n+\t\t\t     && __is_pointer<_II1>::__value\n+\t\t\t     && __is_pointer<_II2>::__value\n \t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);\n \n       return std::__equal<__simple>::equal(__first1, __last1, __first2);\n@@ -835,24 +835,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __lc_rai\n     {\n       template<typename _II1, typename _II2>\n-        static _II1\n-        __newlast1(_II1, _II1 __last1, _II2, _II2)\n-        { return __last1; }\n+\tstatic _II1\n+\t__newlast1(_II1, _II1 __last1, _II2, _II2)\n+\t{ return __last1; }\n \n       template<typename _II>\n-        static bool\n-        __cnd2(_II __first, _II __last)\n-        { return __first != __last; }\n+\tstatic bool\n+\t__cnd2(_II __first, _II __last)\n+\t{ return __first != __last; }\n     };\n \n   template<>\n     struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>\n     {\n       template<typename _RAI1, typename _RAI2>\n-        static _RAI1\n-        __newlast1(_RAI1 __first1, _RAI1 __last1,\n+\tstatic _RAI1\n+\t__newlast1(_RAI1 __first1, _RAI1 __last1,\n \t\t   _RAI2 __first2, _RAI2 __last2)\n-        {\n+\t{\n \t  const typename iterator_traits<_RAI1>::difference_type\n \t    __diff1 = __last1 - __first1;\n \t  const typename iterator_traits<_RAI2>::difference_type\n@@ -861,9 +861,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _RAI>\n-        static bool\n-        __cnd2(_RAI, _RAI)\n-        { return true; }\n+\tstatic bool\n+\t__cnd2(_RAI, _RAI)\n+\t{ return true; }\n     };\n \n   template<typename _II1, typename _II2, typename _Compare>\n@@ -892,7 +892,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __lexicographical_compare\n     {\n       template<typename _II1, typename _II2>\n-        static bool __lc(_II1, _II1, _II2, _II2);\n+\tstatic bool __lc(_II1, _II1, _II2, _II2);\n     };\n \n   template<bool _BoolType>\n@@ -910,8 +910,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __lexicographical_compare<true>\n     {\n       template<typename _Tp, typename _Up>\n-        static bool\n-        __lc(const _Tp* __first1, const _Tp* __last1,\n+\tstatic bool\n+\t__lc(const _Tp* __first1, const _Tp* __last1,\n \t     const _Up* __first2, const _Up* __last2)\n \t{\n \t  const size_t __len1 = __last1 - __first1;\n@@ -975,7 +975,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @param  __last    Another iterator.\n    *  @param  __val     The search term.\n    *  @return         An iterator pointing to the first element <em>not less\n-   *                  than</em> @a val, or end() if every element is less than \n+   *                  than</em> @a val, or end() if every element is less than\n    *                  @a val.\n    *  @ingroup binary_search_algorithms\n   */\n@@ -1257,10 +1257,10 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t       _InputIterator2 __first2, _BinaryPredicate __binary_pred)\n     {\n       while (__first1 != __last1 && __binary_pred(__first1, __first2))\n-        {\n+\t{\n \t  ++__first1;\n \t  ++__first2;\n-        }\n+\t}\n       return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n@@ -1336,10 +1336,10 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n     {\n       while (__first1 != __last1 && __first2 != __last2\n \t     && __binary_pred(__first1, __first2))\n-        {\n+\t{\n \t  ++__first1;\n \t  ++__first2;\n-        }\n+\t}\n       return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n@@ -1415,7 +1415,7 @@ _GLIBCXX_END_NAMESPACE_ALGO\n \n // NB: This file is included within many other C++ includes, as a way\n // of getting the base algorithms. So, make sure that parallel bits\n-// come in too if requested. \n+// come in too if requested.\n #ifdef _GLIBCXX_PARALLEL\n # include <parallel/algobase.h>\n #endif"}]}