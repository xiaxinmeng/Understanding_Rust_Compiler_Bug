{"sha": "17ba0ad5294f51c15dcf1e1a176b6f15d71e905e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdiYTBhZDUyOTRmNTFjMTVkY2YxZTFhMTc2YjZmMTVkNzFlOTA1ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-02-08T11:24:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-07T09:29:17Z"}, "message": "[Ada] Fix type mismatch warnings during LTO bootstrap #6\n\ngcc/ada/\n\n\t* gcc-interface/gigi.h (enum standard_datatype): Remove\n\tADT_exception_data_name_id and add ADT_not_handled_by_others_name_id.\n\t(exception_data_name_id): Delete.\n\t(not_handled_by_others_name_id): New macro.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Exception>: Remove old\n\tkludge for exceptions.\n\t<E_Record_Type>: Likewise.\n\t(gnat_to_gnu_field): Force character type on Not_Handled_By_Others.\n\t* gcc-interface/misc.c (gnat_argv): Change type to char **.\n\t(gnat_init_options): Adjust accordingly.\n\t* gcc-interface/trans.c (gigi): Set not_handled_by_others_name_id\n\tand use it to set not_handled_by_others_decl.\n\t(Exception_Handler_to_gnu_fe_sjlj): Fix indentation.", "tree": {"sha": "26257f4fa781d284ca13b493395332347f0b3fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26257f4fa781d284ca13b493395332347f0b3fd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d40dc31924972f90cef920a8f76b3042aefc065d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40dc31924972f90cef920a8f76b3042aefc065d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40dc31924972f90cef920a8f76b3042aefc065d"}], "stats": {"total": 69, "additions": 26, "deletions": 43}, "files": [{"sha": "232b552a60ca43fd3381f56a99028440e16d89c8", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 9, "deletions": 25, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=17ba0ad5294f51c15dcf1e1a176b6f15d71e905e", "patch": "@@ -736,16 +736,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tif (foreign && Is_Descendant_Of_Address (Underlying_Type (gnat_type)))\n \t  gnu_type = ptr_type_node;\n \telse\n-\t  {\n-\t    gnu_type = gnat_to_gnu_type (gnat_type);\n-\n-\t    /* If this is a standard exception definition, use the standard\n-\t       exception type.  This is necessary to make sure that imported\n-\t       and exported views of exceptions are merged in LTO mode.  */\n-\t    if (TREE_CODE (TYPE_NAME (gnu_type)) == TYPE_DECL\n-\t\t&& DECL_NAME (TYPE_NAME (gnu_type)) == exception_data_name_id)\n-\t      gnu_type = except_type_node;\n-\t  }\n+\t  gnu_type = gnat_to_gnu_type (gnat_type);\n \n \t/* For a debug renaming declaration, build a debug-only entity.  */\n \tif (Present (Debug_Renaming_Link (gnat_entity)))\n@@ -3404,21 +3395,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n \t/* Fill in locations of fields.  */\n \tannotate_rep (gnat_entity, gnu_type);\n-\n-\t/* If this is a record type associated with an exception definition,\n-\t   equate its fields to those of the standard exception type.  This\n-\t   will make it possible to convert between them.  */\n-\tif (gnu_entity_name == exception_data_name_id)\n-\t  {\n-\t    tree gnu_std_field;\n-\t    for (gnu_field = TYPE_FIELDS (gnu_type),\n-\t\t gnu_std_field = TYPE_FIELDS (except_type_node);\n-\t\t gnu_field;\n-\t\t gnu_field = DECL_CHAIN (gnu_field),\n-\t\t gnu_std_field = DECL_CHAIN (gnu_std_field))\n-\t      SET_DECL_ORIGINAL_FIELD_TO_FIELD (gnu_field, gnu_std_field);\n-\t    gcc_assert (!gnu_std_field);\n-\t  }\n       }\n       break;\n \n@@ -7126,6 +7102,14 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n   tree gnu_field, gnu_size, gnu_pos;\n   bool is_bitfield;\n \n+  /* Force the type of the Not_Handled_By_Others field to be that of the\n+     field in struct Exception_Data declared in raise.h instead of using\n+     the declared boolean type.  We need to do that because there is no\n+     easy way to make use of a C compatible boolean type for the latter.  */\n+  if (gnu_field_id == not_handled_by_others_name_id\n+      && gnu_field_type == boolean_type_node)\n+    gnu_field_type = char_type_node;\n+\n   /* The qualifier to be used in messages.  */\n   if (is_aliased)\n     field_s = \"aliased&\";"}, {"sha": "49b85a4b161f35bb47c6cab665bee17d2c02ee3f", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=17ba0ad5294f51c15dcf1e1a176b6f15d71e905e", "patch": "@@ -396,8 +396,8 @@ enum standard_datatypes\n   /* Identifier for the name of the _Parent field in tagged record types.  */\n   ADT_parent_name_id,\n \n-  /* Identifier for the name of the Exception_Data type.  */\n-  ADT_exception_data_name_id,\n+  /* Identifier for the name of the Not_Handled_By_Others field.  */\n+  ADT_not_handled_by_others_name_id,\n \n   /* Types and decls used by the SJLJ exception mechanism.  */\n   ADT_jmpbuf_type,\n@@ -467,7 +467,8 @@ extern GTY(()) tree gnat_raise_decls_ext[(int) LAST_REASON_CODE + 1];\n #define mulv64_decl gnat_std_decls[(int) ADT_mulv64_decl]\n #define mulv128_decl gnat_std_decls[(int) ADT_mulv128_decl]\n #define parent_name_id gnat_std_decls[(int) ADT_parent_name_id]\n-#define exception_data_name_id gnat_std_decls[(int) ADT_exception_data_name_id]\n+#define not_handled_by_others_name_id \\\n+\t  gnat_std_decls[(int) ADT_not_handled_by_others_name_id]\n #define jmpbuf_type gnat_std_decls[(int) ADT_jmpbuf_type]\n #define jmpbuf_ptr_type gnat_std_decls[(int) ADT_jmpbuf_ptr_type]\n #define get_jmpbuf_decl gnat_std_decls[(int) ADT_get_jmpbuf_decl]"}, {"sha": "f302cf0a6f02f3d8db54b9453b44a588653a05cd", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=17ba0ad5294f51c15dcf1e1a176b6f15d71e905e", "patch": "@@ -63,7 +63,7 @@ const char **save_argv;\n \n /* GNAT argc and argv generated by the binder for all Ada programs.  */\n extern int gnat_argc;\n-extern const char **gnat_argv;\n+extern char **gnat_argv;\n \n /* Ada code requires variables for these settings rather than elements\n    of the global_options structure because they are imported.  */\n@@ -241,7 +241,7 @@ gnat_init_options (unsigned int decoded_options_count,\n   save_argv[save_argc] = NULL;\n \n   /* Pass just the name of the command through the regular channel.  */\n-  gnat_argv = (const char **) xmalloc (sizeof (char *));\n+  gnat_argv = (char **) xmalloc (sizeof (char *));\n   gnat_argv[0] = xstrdup (save_argv[0]);\n   gnat_argc = 1;\n }"}, {"sha": "9aeaf0381181a0b2ef8801248d10d7819a00a557", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ba0ad5294f51c15dcf1e1a176b6f15d71e905e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=17ba0ad5294f51c15dcf1e1a176b6f15d71e905e", "patch": "@@ -461,13 +461,20 @@ gigi (Node_Id gnat_root,\n   /* Name of the _Parent field in tagged record types.  */\n   parent_name_id = get_identifier (Get_Name_String (Name_uParent));\n \n-  /* Name of the Exception_Data type defined in System.Standard_Library.  */\n-  exception_data_name_id\n-    = get_identifier (\"system__standard_library__exception_data\");\n+  /* Name of the Not_Handled_By_Others field in exception record types.  */\n+  not_handled_by_others_name_id = get_identifier (\"not_handled_by_others\");\n \n   /* Make the types and functions used for exception processing.  */\n   except_type_node = gnat_to_gnu_type (Base_Type (standard_exception_type));\n \n+  for (t = TYPE_FIELDS (except_type_node); t; t = DECL_CHAIN (t))\n+    if (DECL_NAME (t) == not_handled_by_others_name_id)\n+      {\n+\tnot_handled_by_others_decl = t;\n+\tbreak;\n+      }\n+  gcc_assert (DECL_P (not_handled_by_others_decl));\n+\n   jmpbuf_type\n     = build_array_type (gnat_type_for_mode (Pmode, 0),\n \t\t\tbuild_index_type (size_int (5)));\n@@ -495,15 +502,6 @@ gigi (Node_Id gnat_root,\n \t\t\t\t NULL_TREE),\n        NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n \n-  not_handled_by_others_decl = get_identifier (\"not_handled_by_others\");\n-  for (t = TYPE_FIELDS (except_type_node); t; t = DECL_CHAIN (t))\n-    if (DECL_NAME (t) == not_handled_by_others_decl)\n-      {\n-\tnot_handled_by_others_decl = t;\n-\tbreak;\n-      }\n-  gcc_assert (DECL_P (not_handled_by_others_decl));\n-\n   /* setjmp returns an integer and has one operand, which is a pointer to\n      a jmpbuf.  */\n   setjmp_decl\n@@ -5596,7 +5594,7 @@ Exception_Handler_to_gnu_fe_sjlj (Node_Id gnat_node)\n \t       gnu_except_ptr_stack->last (),\n \t       convert (TREE_TYPE (gnu_except_ptr_stack->last ()),\n \t\t\tbuild_unary_op (ADDR_EXPR, NULL_TREE, gnu_expr)));\n-}\n+\t}\n       else\n \tgcc_unreachable ();\n "}]}