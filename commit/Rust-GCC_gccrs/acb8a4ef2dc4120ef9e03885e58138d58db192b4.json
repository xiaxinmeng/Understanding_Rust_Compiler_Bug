{"sha": "acb8a4ef2dc4120ef9e03885e58138d58db192b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiOGE0ZWYyZGM0MTIwZWY5ZTAzODg1ZTU4MTM4ZDU4ZGIxOTJiNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-05-04T18:07:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-04T18:07:10Z"}, "message": "stl_memory.h: Rename to stl_auto_ptr.h.\n\n2007-05-04  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_memory.h: Rename to stl_auto_ptr.h.\n\t(__get_temporary_buffer, get_temporary_buffer,\n\treturn_temporary_buffer): Move...\n\t* include/bits/stl_tempbuf.h: ... here.\n\t* include/std/memory: Adjust includes.\n\t* testsuite/20_util/auto_ptr/assign_neg.cc: Adjust dg-error line\n\tnumbers.\n\t* include/Makefile.am: Adjust.\n\t* include/Makefile.in: Regenerate.\n\n\t* testsuite/util/testsuite_iterators.h: Do not include the entire\n\t<iterator>.\n\t* include/bits/stl_iterator_base_types.h: Adjust includes.\n\t* testsuite/25_algorithms/unique_copy/2.cc: Include <functional>.\n\nFrom-SVN: r124438", "tree": {"sha": "30d90c7d2c5cd8fa787229dc1434e823b72f2462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30d90c7d2c5cd8fa787229dc1434e823b72f2462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acb8a4ef2dc4120ef9e03885e58138d58db192b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb8a4ef2dc4120ef9e03885e58138d58db192b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb8a4ef2dc4120ef9e03885e58138d58db192b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb8a4ef2dc4120ef9e03885e58138d58db192b4/comments", "author": null, "committer": null, "parents": [{"sha": "dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcdc26dfd5606c0837de979ddd9b2d6c960f5102"}], "stats": {"total": 195, "additions": 109, "deletions": 86}, "files": [{"sha": "70d304c7aca50e9a8948f57e421c309f08165ada", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=acb8a4ef2dc4120ef9e03885e58138d58db192b4", "patch": "@@ -1,3 +1,20 @@\n+2007-05-04  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_memory.h: Rename to stl_auto_ptr.h.\n+\t(__get_temporary_buffer, get_temporary_buffer,\n+\treturn_temporary_buffer): Move...\n+\t* include/bits/stl_tempbuf.h: ... here.\n+\t* include/std/memory: Adjust includes.\n+\t* testsuite/20_util/auto_ptr/assign_neg.cc: Adjust dg-error line\n+\tnumbers.\n+\t* include/Makefile.am: Adjust.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* testsuite/util/testsuite_iterators.h: Do not include the entire\n+\t<iterator>.\n+\t* include/bits/stl_iterator_base_types.h: Adjust includes.\n+\t* testsuite/25_algorithms/unique_copy/2.cc: Include <functional>.\n+\n 2007-05-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* libsupc++/atexit_arm.cc: New file."}, {"sha": "cfa995e40001b36b1883f6fc33f487d8c70e7321", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=acb8a4ef2dc4120ef9e03885e58138d58db192b4", "patch": "@@ -115,7 +115,7 @@ bits_headers = \\\n \t${bits_srcdir}/stl_iterator_base_types.h \\\n \t${bits_srcdir}/stl_list.h \\\n \t${bits_srcdir}/stl_map.h \\\n-\t${bits_srcdir}/stl_memory.h \\\n+\t${bits_srcdir}/stl_auto_ptr.h \\\n \t${bits_srcdir}/stl_multimap.h \\\n \t${bits_srcdir}/stl_multiset.h \\\n \t${bits_srcdir}/stl_numeric.h \\"}, {"sha": "c14ac8bbe2359c7b59714d5ee1d5e92687c23916", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=acb8a4ef2dc4120ef9e03885e58138d58db192b4", "patch": "@@ -349,7 +349,7 @@ bits_headers = \\\n \t${bits_srcdir}/stl_iterator_base_types.h \\\n \t${bits_srcdir}/stl_list.h \\\n \t${bits_srcdir}/stl_map.h \\\n-\t${bits_srcdir}/stl_memory.h \\\n+\t${bits_srcdir}/stl_auto_ptr.h \\\n \t${bits_srcdir}/stl_multimap.h \\\n \t${bits_srcdir}/stl_multiset.h \\\n \t${bits_srcdir}/stl_numeric.h \\"}, {"sha": "6e0f9c7e2ae2dc9c5f675fab344cec057d2a8482", "filename": "libstdc++-v3/include/bits/stl_auto_ptr.h", "status": "renamed", "additions": 6, "deletions": 72, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_auto_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_auto_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_auto_ptr.h?ref=acb8a4ef2dc4120ef9e03885e58138d58db192b4", "patch": "@@ -1,4 +1,4 @@\n-// Memory implementation -*- C++ -*-\n+// auto_ptr implementation -*- C++ -*-\n \n // Copyright (C) 2007 Free Software Foundation, Inc.\n //\n@@ -27,85 +27,19 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-/** @file stl_memory.h\n+/** @file stl_auto_ptr.h\n  *  This is an internal header file, included by other library headers.\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _STL_MEMORY_H\n-#define _STL_MEMORY_H 1\n+#ifndef _STL_AUTO_PTR_H\n+#define _STL_AUTO_PTR_H 1\n \n-#include <bits/stl_algobase.h>\n-#include <bits/allocator.h>\n-#include <bits/stl_construct.h>\n-#include <bits/stl_uninitialized.h>\n-#include <bits/stl_raw_storage_iter.h>\n+#include <bits/c++config.h>\n #include <debug/debug.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  /**\n-   *  @if maint\n-   *  This is a helper function.  The unused second parameter exists to\n-   *  permit the real get_temporary_buffer to use template parameter deduction.\n-   *\n-   *  XXX This should perhaps use the pool.\n-   *  @endif\n-   */\n-  template<typename _Tp>\n-    pair<_Tp*, ptrdiff_t>\n-    __get_temporary_buffer(ptrdiff_t __len, _Tp*)\n-    {\n-      const ptrdiff_t __max =\n-\t__gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);\n-      if (__len > __max)\n-\t__len = __max;\n-      \n-      while (__len > 0) \n-\t{\n-\t  _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp), \n-\t\t\t\t\t\t\tnothrow));\n-\t  if (__tmp != 0)\n-\t    return pair<_Tp*, ptrdiff_t>(__tmp, __len);\n-\t  __len /= 2;\n-\t}\n-      return pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);\n-    }\n-\n-  /**\n-   *  @brief Allocates a temporary buffer.\n-   *  @param  len  The number of objects of type Tp.\n-   *  @return See full description.\n-   *\n-   *  Reinventing the wheel, but this time with prettier spokes!\n-   *\n-   *  This function tries to obtain storage for @c len adjacent Tp\n-   *  objects.  The objects themselves are not constructed, of course.\n-   *  A pair<> is returned containing \"the buffer s address and\n-   *  capacity (in the units of sizeof(Tp)), or a pair of 0 values if\n-   *  no storage can be obtained.\"  Note that the capacity obtained\n-   *  may be less than that requested if the memory is unavailable;\n-   *  you should compare len with the .second return value.\n-   *\n-   * Provides the nothrow exception guarantee.\n-   */\n-  template<typename _Tp>\n-    inline pair<_Tp*, ptrdiff_t>\n-    get_temporary_buffer(ptrdiff_t __len)\n-    { return std::__get_temporary_buffer(__len, static_cast<_Tp*>(0)); }\n-\n-  /**\n-   *  @brief The companion to get_temporary_buffer().\n-   *  @param  p  A buffer previously allocated by get_temporary_buffer.\n-   *  @return   None.\n-   *\n-   *  Frees the memory pointed to by p.\n-   */\n-  template<typename _Tp>\n-    void\n-    return_temporary_buffer(_Tp* __p)\n-    { ::operator delete(__p, nothrow); }\n-\n   /**\n    *  A wrapper class to provide auto_ptr with reference semantics.\n    *  For example, an auto_ptr can be assigned (or constructed from)\n@@ -364,4 +298,4 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n-#endif /* _STL_MEMORY_H */\n+#endif /* _STL_AUTO_PTR_H */", "previous_filename": "libstdc++-v3/include/bits/stl_memory.h"}, {"sha": "1b746692eebb18e0409bc16bef5bb2492e0e3f44", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=acb8a4ef2dc4120ef9e03885e58138d58db192b4", "patch": "@@ -1,6 +1,7 @@\n // Types used in iterator implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,6 +67,9 @@\n \n #pragma GCC system_header\n \n+#include <bits/c++config.h>\n+#include <cstddef>\n+\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   //@{"}, {"sha": "46c733feb5c3b845f01e1015399ab0b30e53cf40", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=acb8a4ef2dc4120ef9e03885e58138d58db192b4", "patch": "@@ -62,10 +62,73 @@\n #ifndef _TEMPBUF_H\n #define _TEMPBUF_H 1\n \n-#include <bits/stl_memory.h>\n+#include <bits/stl_algobase.h>\n+#include <bits/stl_construct.h>\n+#include <bits/stl_uninitialized.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n+  /**\n+   *  @if maint\n+   *  This is a helper function.  The unused second parameter exists to\n+   *  permit the real get_temporary_buffer to use template parameter deduction.\n+   *  @endif\n+   */\n+  template<typename _Tp>\n+    pair<_Tp*, ptrdiff_t>\n+    __get_temporary_buffer(ptrdiff_t __len, _Tp*)\n+    {\n+      const ptrdiff_t __max =\n+\t__gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);\n+      if (__len > __max)\n+\t__len = __max;\n+      \n+      while (__len > 0) \n+\t{\n+\t  _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp), \n+\t\t\t\t\t\t\tstd::nothrow));\n+\t  if (__tmp != 0)\n+\t    return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);\n+\t  __len /= 2;\n+\t}\n+      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);\n+    }\n+\n+  /**\n+   *  @brief Allocates a temporary buffer.\n+   *  @param  len  The number of objects of type Tp.\n+   *  @return See full description.\n+   *\n+   *  Reinventing the wheel, but this time with prettier spokes!\n+   *\n+   *  This function tries to obtain storage for @c len adjacent Tp\n+   *  objects.  The objects themselves are not constructed, of course.\n+   *  A pair<> is returned containing \"the buffer s address and\n+   *  capacity (in the units of sizeof(Tp)), or a pair of 0 values if\n+   *  no storage can be obtained.\"  Note that the capacity obtained\n+   *  may be less than that requested if the memory is unavailable;\n+   *  you should compare len with the .second return value.\n+   *\n+   * Provides the nothrow exception guarantee.\n+   */\n+  template<typename _Tp>\n+    inline pair<_Tp*, ptrdiff_t>\n+    get_temporary_buffer(ptrdiff_t __len)\n+    { return std::__get_temporary_buffer(__len, static_cast<_Tp*>(0)); }\n+\n+  /**\n+   *  @brief The companion to get_temporary_buffer().\n+   *  @param  p  A buffer previously allocated by get_temporary_buffer.\n+   *  @return   None.\n+   *\n+   *  Frees the memory pointed to by p.\n+   */\n+  template<typename _Tp>\n+    void\n+    return_temporary_buffer(_Tp* __p)\n+    { ::operator delete(__p, nothrow); }\n+\n+\n   /**\n    *  @if maint\n    *  This class is used in two places: stl_algo.h and ext/memory,\n@@ -131,7 +194,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator=(const _Temporary_buffer&);\n     };\n \n-\n   template<typename _ForwardIterator, typename _Tp>\n     _Temporary_buffer<_ForwardIterator, _Tp>::\n     _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)\n@@ -140,8 +202,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       try\n \t{\n-\t  pair<pointer, size_type> __p(get_temporary_buffer<\n-\t\t\t\t       value_type>(_M_original_len));\n+\t  std::pair<pointer, size_type> __p(std::get_temporary_buffer<\n+\t\t\t\t\t    value_type>(_M_original_len));\n \t  _M_buffer = __p.first;\n \t  _M_len = __p.second;\n \t  if (!__is_pod(_Tp) && _M_len > 0)"}, {"sha": "28b8d85d0e256f53c755fb369188b3f10733657b", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=acb8a4ef2dc4120ef9e03885e58138d58db192b4", "patch": "@@ -51,8 +51,13 @@\n \n #pragma GCC system_header\n \n-#include <bits/c++config.h>\n-#include <bits/stl_memory.h>\n+#include <bits/stl_algobase.h>\n+#include <bits/allocator.h>\n+#include <bits/stl_construct.h>\n+#include <bits/stl_uninitialized.h>\n+#include <bits/stl_tempbuf.h>\n+#include <bits/stl_auto_ptr.h>\n+#include <bits/stl_raw_storage_iter.h>\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n # include <tr1/memory>"}, {"sha": "ffca8986fadb0b2bc60545c005da6f98f896e9c9", "filename": "libstdc++-v3/testsuite/20_util/auto_ptr/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fauto_ptr%2Fassign_neg.cc?ref=acb8a4ef2dc4120ef9e03885e58138d58db192b4", "patch": "@@ -46,5 +46,5 @@ main()\n   test01();\n   return 0;\n }\n-// { dg-error \"candidates\" \"\" { target *-*-* } 207 } \n-// { dg-error \"::auto_ptr\" \"\" { target *-*-* } 337 } \n+// { dg-error \"candidates\" \"\" { target *-*-* } 141 } \n+// { dg-error \"::auto_ptr\" \"\" { target *-*-* } 271 } "}, {"sha": "2c67cee1e6094149c82e22d7d78fed4a8ec9396a", "filename": "libstdc++-v3/testsuite/25_algorithms/unique_copy/2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F2.cc?ref=acb8a4ef2dc4120ef9e03885e58138d58db192b4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -19,6 +19,7 @@\n // 25.2.8 [lib.alg.unique]\n \n #include <algorithm>\n+#include <functional>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "073be0beb9465504fddd4b68bb9f49543f09d849", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb8a4ef2dc4120ef9e03885e58138d58db192b4/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=acb8a4ef2dc4120ef9e03885e58138d58db192b4", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*-\n // Iterator Wrappers for the C++ library testsuite. \n //\n-// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,7 +37,7 @@\n // test_container, which is given two pointers to T and an iterator type.\n \n #include <testsuite_hooks.h>\n-#include <iterator>\n+#include <bits/stl_iterator_base_types.h>\n \n #ifndef _TESTSUITE_ITERATORS\n #define _TESTSUITE_ITERATORS"}]}