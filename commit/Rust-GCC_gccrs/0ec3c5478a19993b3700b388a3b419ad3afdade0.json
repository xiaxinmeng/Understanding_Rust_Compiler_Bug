{"sha": "0ec3c5478a19993b3700b388a3b419ad3afdade0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVjM2M1NDc4YTE5OTkzYjM3MDBiMzg4YTNiNDE5YWQzYWZkYWRlMA==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-05-06T00:15:47Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-05-06T00:15:47Z"}, "message": "InflaterInputStream.java: New stub class.\n\n\ufffd\n\t* InflaterInputStream.java:  New stub class.\n\t* ZipInputStream.java:  New class.  Partly works.\n\t* ZipConstants.java:  Add two (internal) constants.\n\t* ZipEntry.java (timeFromDOS):  New static (non-public) method.\n\t* ZipFile.java:  Make it mostly work, except for compression.\n\t* ZipOutputStream.java:  Start implementation.\n\nFrom-SVN: r26795", "tree": {"sha": "575a1cf180a50acdf7addeef236bbe8d1a6a7f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/575a1cf180a50acdf7addeef236bbe8d1a6a7f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ec3c5478a19993b3700b388a3b419ad3afdade0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec3c5478a19993b3700b388a3b419ad3afdade0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec3c5478a19993b3700b388a3b419ad3afdade0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec3c5478a19993b3700b388a3b419ad3afdade0/comments", "author": null, "committer": null, "parents": [{"sha": "f7f65c793e4dc8760ba3860b4d3c1f69971a8302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f65c793e4dc8760ba3860b4d3c1f69971a8302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7f65c793e4dc8760ba3860b4d3c1f69971a8302"}], "stats": {"total": 158, "additions": 152, "deletions": 6}, "files": [{"sha": "9085ec9c88ba6089bba5a17bbe228fb382e507b2", "filename": "libjava/java/util/zip/ZipFile.java", "status": "modified", "additions": 105, "deletions": 6, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec3c5478a19993b3700b388a3b419ad3afdade0/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec3c5478a19993b3700b388a3b419ad3afdade0/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipFile.java?ref=0ec3c5478a19993b3700b388a3b419ad3afdade0", "patch": "@@ -9,23 +9,91 @@\n package java.util.zip;\n import java.io.*;\n \n-/** JUST AN INCOMPLETE STUB! */\n+/** UNFINISHED, but can read non-comrepssed .zip archives. */\n \n public class ZipFile implements ZipConstants\n {\n \n-  String name;\n   ZipEntry entries;\n+  int numEntries;\n+  RandomAccessFile file;\n+  String name;\n \n   public ZipFile (String fname) throws IOException\n   {\n+    file = new RandomAccessFile(fname, \"r\");\n     name = fname;\n-    // FIXME\n   }\n \n   public ZipFile (File f) throws IOException\n   {\n-    this(f.getPath());\n+    file = new RandomAccessFile(f, \"r\");\n+    name = f.getName();\n+  }\n+\n+  void readDirectory () throws IOException\n+  {\n+    long size = file.length ();\n+    if (size < ZipConstants.END_CENTRAL_DIR_SIZE)\n+      throw new IOException (\"zipfile too short\");\n+    // We do not handle a \"zipfile comment\", which the appnote says can\n+    // be at the end of a .zip file.  We could handle this by seeking\n+    // to the beginning and reading forwards.\n+    file.seek(size - ZipConstants.END_CENTRAL_DIR_SIZE);\n+    if (file.read() != 'P'\n+\t|| file.read() != 'K'\n+\t|| file.read() != '\\005'\n+\t|| file.read() != '\\006')\n+      throw new IOException(\"not a valid zipfile\");\n+    file.skipBytes(6);\n+    numEntries = readu2();\n+    int dir_size = read4 ();  // Read \"size of the central directory\".\n+    file.seek(size - (dir_size + ZipConstants.END_CENTRAL_DIR_SIZE));\n+\n+    ZipEntry last = null;\n+    for (int i = 0;  i < numEntries;  i++)\n+      {\n+\tfile.skipBytes(10);\n+\tint method = readu2();\n+\tint modtime = readu2();\n+\tint moddate = readu2();\n+\tint crc = read4();\n+\tint compressedSize = read4();\n+\tint uncompressedSize = read4();\n+\tint filenameLength = readu2();\n+\tint extraLength = readu2();\n+\tint commentLength = readu2();\n+\tint diskNumberStart = readu2();\n+\tint intAttributes = readu2();\n+\tint extAttributes = read4();\n+\tint relativeOffset = read4();\n+\tbyte[] bname = new byte[filenameLength];\n+\tfile.readFully(bname);\n+\tZipEntry entry = new ZipEntry(new String(bname, \"8859_1\"));\n+\tif (extraLength > 0)\n+\t  {\n+\t    byte[] bextra = new byte[extraLength];\n+\t    file.readFully(bextra);\n+\t    entry.extra = bextra;\n+\t  }\n+\tif (commentLength > 0)\n+\t  {\n+\t    byte[] bcomment = new byte[commentLength];\n+\t    file.readFully(bcomment);\n+\t    entry.comment = new String(bcomment, \"8859_1\");\n+\t  }\n+\tentry.compressedSize = compressedSize;\n+\tentry.size = uncompressedSize;\n+\tentry.crc = (long) crc & 0xffffffffL;\n+\tentry.method = method;\n+\tentry.relativeOffset = relativeOffset;\n+\tentry.time = ZipEntry.timeFromDOS(moddate, modtime);\n+\tif (last == null)\n+\t  entries = entry;\n+\telse\n+\t  last.next = entry;\n+\tlast = entry;\n+      }\n   }\n \n   public java.util.Enumeration entries()\n@@ -35,7 +103,10 @@ public java.util.Enumeration entries()\n \n   public void close() throws IOException\n   {\n-    // FIXME\n+    //  FIXME - check this\n+    file.close();\n+    entries = null;\n+    numEntries = 0;\n   }\n \n   public ZipEntry getEntry(String name)\n@@ -50,10 +121,38 @@ public ZipEntry getEntry(String name)\n \n   public InputStream getInputStream(ZipEntry ze)  throws IOException\n   {\n-    return null; // FIXME\n+    // FIXME - does not handle compression!\n+    byte[] buffer = new byte[(int) ze.getSize()];\n+    int data_offset = ZipConstants.LOCAL_FILE_HEADER_SIZE + name.length();\n+    if (ze.extra != null)\n+      data_offset += ze.extra.length;\n+    file.seek(ze.relativeOffset + data_offset);\n+    file.readFully(buffer);\n+    return new ByteArrayInputStream(buffer);\n   }\n \n   public String getName () { return name; }\n+\n+  private int readu2 () throws IOException\n+  {\n+    int byte0 = file.read();\n+    int byte1 = file.read();\n+    if (byte0 < 0 || byte1 < 0)\n+      throw new EOFException(\".zip archive ended prematurely\");\n+    return ((byte1 & 0xFF) << 8) | (byte0 & 0xFF);\n+  }\n+\n+  private int read4 () throws IOException\n+  {\n+    int byte0 = file.read();\n+    int byte1 = file.read();\n+    int byte2 = file.read();\n+    int byte3 = file.read();\n+    if (byte3 < 0)\n+      throw new EOFException(\".zip archive ended prematurely\");\n+    return ((byte3 & 0xFF) << 24) + ((byte2 & 0xFF) << 16)\n+      + ((byte1 & 0xFF) << 8) + (byte0 & 0xFF);\n+  }\n }\n \n class ZipEnumeration implements java.util.Enumeration"}, {"sha": "18f4d388652e001625c38791e2a457df2a565013", "filename": "libjava/java/util/zip/ZipOutputStream.java", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ec3c5478a19993b3700b388a3b419ad3afdade0/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ec3c5478a19993b3700b388a3b419ad3afdade0/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java?ref=0ec3c5478a19993b3700b388a3b419ad3afdade0", "patch": "@@ -14,13 +14,60 @@\n public class ZipOutputStream extends DeflaterOutputStream\n   implements ZipConstants\n {\n+  ZipEntry current;\n+  int method = DEFLATED;\n+  int level = 3;  // FIXME - should be DEFAULT_COMPRESSION\n+  String comment;\n+\n+  public static final int STORED = 0;\n+  public static final int DEFLATED = 8;\n+\n   public ZipOutputStream (OutputStream out)\n   {\n     super(out);\n   }\n \n+  public void setLevel (int level) { this.level = level; }\n+  public void setMethod (int method) { this.method = method; }\n+  public void setComment(String comment) { this.comment = comment; }\n+\n   public void putNextEntry (ZipEntry entry) throws IOException\n   {\n+    put4(0x04034b50);\n+    put2(0);  // version - FIXME\n+    put2(0);  // bits - FIXME\n+    if (entry.method < 0 )\n+      entry.method = method;\n+    put2(entry.method);\n+    put2(0);  // time - FIXME\n+    put2(0);  // date - FIXME\n+    put4((int) entry.crc);\n+    put4((int) entry.compressedSize); // FIXME\n+    put4((int) entry.size); // FIXME\n+    put2(entry.name.length());\n+    put2(entry.extra == null ? 0 : entry.extra.length);\n+    byte[] name = entry.name.getBytes(\"8859_1\");\n+    out.write(name);\n+    if (entry.extra != null)\n+      out.write(entry.extra);\n     throw new Error (\"java.util.zip.ZipOutputStream.putNextEntry:  not implemented\");\n   }\n+\n+  public void closeEntry ()  throws IOException\n+  {\n+  }\n+\n+  private void put2 (int i)  throws IOException\n+  {\n+    out.write (i);\n+    out.write (i >> 8);\n+  }\n+\n+  private void put4 (int i)  throws IOException\n+  {\n+    out.write (i);\n+    out.write (i >> 8);\n+    out.write (i >> 16);\n+    out.write (i >> 24);\n+  }\n }"}]}