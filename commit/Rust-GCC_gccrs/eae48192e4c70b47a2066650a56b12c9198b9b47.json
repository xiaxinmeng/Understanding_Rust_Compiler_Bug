{"sha": "eae48192e4c70b47a2066650a56b12c9198b9b47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlNDgxOTJlNGM3MGI0N2EyMDY2NjUwYTU2YjEyYzkxOThiOWI0Nw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-03-01T09:24:29Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-03-01T09:24:29Z"}, "message": "S/390: Get rid of Y constraint in tabort.\n\nThis removes the Y constraint from the tabort pattern definition.  In\nthis case it is easier without using substitutions.\n\ngcc/ChangeLog:\n\n2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.md (\"*tabort_1\"): Change predicate to\n\tnonmemory_operand.  Add a second alternative to cover\n\tregister as well as const int operands.\n\t(\"*tabort_1_plus\"): New pattern definition.\n\nFrom-SVN: r233846", "tree": {"sha": "353b1fe4237ab94160fa971d36a00650ad2e8678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/353b1fe4237ab94160fa971d36a00650ad2e8678"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eae48192e4c70b47a2066650a56b12c9198b9b47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae48192e4c70b47a2066650a56b12c9198b9b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae48192e4c70b47a2066650a56b12c9198b9b47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae48192e4c70b47a2066650a56b12c9198b9b47/comments", "author": null, "committer": null, "parents": [{"sha": "a9fcf821ebc87275f31d4f145b6cb85f1bb79237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fcf821ebc87275f31d4f145b6cb85f1bb79237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fcf821ebc87275f31d4f145b6cb85f1bb79237"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "1699e1cd710e0df9e1014211bb0c87540b0e94d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae48192e4c70b47a2066650a56b12c9198b9b47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae48192e4c70b47a2066650a56b12c9198b9b47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eae48192e4c70b47a2066650a56b12c9198b9b47", "patch": "@@ -1,3 +1,10 @@\n+2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.md (\"*tabort_1\"): Change predicate to\n+\tnonmemory_operand.  Add a second alternative to cover\n+\tregister as well as const int operands.\n+\t(\"*tabort_1_plus\"): New pattern definition.\n+\n 2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.md (\"*ashrdi3_cc_31\")"}, {"sha": "ca58c42fe4c850c6c43541140f3e1298f53400e7", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae48192e4c70b47a2066650a56b12c9198b9b47/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae48192e4c70b47a2066650a56b12c9198b9b47/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=eae48192e4c70b47a2066650a56b12c9198b9b47", "patch": "@@ -10698,7 +10698,7 @@\n ; Transaction abort\n \n (define_expand \"tabort\"\n-  [(unspec_volatile [(match_operand:SI 0 \"shift_count_or_setmem_operand\" \"\")]\n+  [(unspec_volatile [(match_operand:SI 0 \"nonmemory_operand\" \"\")]\n \t\t    UNSPECV_TABORT)]\n   \"TARGET_HTM && operands != NULL\"\n {\n@@ -10713,12 +10713,21 @@\n })\n \n (define_insn \"*tabort_1\"\n-  [(unspec_volatile [(match_operand:SI 0 \"shift_count_or_setmem_operand\" \"Y\")]\n+  [(unspec_volatile [(match_operand:SI 0 \"nonmemory_operand\" \"aJ\")]\n \t\t    UNSPECV_TABORT)]\n   \"TARGET_HTM && operands != NULL\"\n   \"tabort\\t%Y0\"\n   [(set_attr \"op_type\" \"S\")])\n \n+(define_insn \"*tabort_1_plus\"\n+  [(unspec_volatile [(plus:SI (match_operand:SI 0 \"register_operand\"  \"a\")\n+\t\t\t      (match_operand:SI 1 \"const_int_operand\" \"J\"))]\n+\t\t    UNSPECV_TABORT)]\n+  \"TARGET_HTM && operands != NULL\n+   && CONST_OK_FOR_CONSTRAINT_P (INTVAL (operands[1]), 'J', \\\"J\\\")\"\n+  \"tabort\\t%1(%0)\"\n+  [(set_attr \"op_type\" \"S\")])\n+\n ; Transaction extract nesting depth\n \n (define_insn \"etnd\""}]}