{"sha": "68df9882b223146ffac2b3b5a939cfc090b72e5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkZjk4ODJiMjIzMTQ2ZmZhYzJiM2I1YTkzOWNmYzA5MGI3MmU1Zg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-01-08T22:11:24Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-01-08T22:11:24Z"}, "message": "quad-float128.h (IBM128_TYPE): Explicitly use __ibm128, instead of trying to use long double.\n\n2018-01-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/quad-float128.h (IBM128_TYPE): Explicitly use\n\t__ibm128, instead of trying to use long double.\n\t(CVT_FLOAT128_TO_IBM128): Use TFtype instead of __float128 to\n\taccomidate -mabi=ieeelongdouble multilibs.\n\t(CVT_IBM128_TO_FLOAT128): Likewise.\n\t* config/rs6000/ibm-ldouble.c (IBM128_TYPE): New macro to define\n\tthe appropriate IBM extended double type.\n\t(__gcc_qadd): Change all occurances of long double to IBM128_TYPE.\n\t(__gcc_qsub): Likewise.\n\t(__gcc_qmul): Likewise.\n\t(__gcc_qdiv): Likewise.\n\t(pack_ldouble): Likewise.\n\t(__gcc_qneg): Likewise.\n\t(__gcc_qeq): Likewise.\n\t(__gcc_qne): Likewise.\n\t(__gcc_qge): Likewise.\n\t(__gcc_qle): Likewise.\n\t(__gcc_stoq): Likewise.\n\t(__gcc_dtoq): Likewise.\n\t(__gcc_itoq): Likewise.\n\t(__gcc_utoq): Likewise.\n\t(__gcc_qunord): Likewise.\n\t* config/rs6000/_mulkc3.c (toplevel): Include soft-fp.h and\n\tquad-float128.h for the definitions.\n\t(COPYSIGN): Use the f128 version instead of the q version.\n\t(INFINITY): Likewise.\n\t(__mulkc3): Use TFmode/TCmode for float128 scalar/complex types.\n\t* config/rs6000/_divkc3.c (toplevel): Include soft-fp.h and\n\tquad-float128.h for the definitions.\n\t(COPYSIGN): Use the f128 version instead of the q version.\n\t(INFINITY): Likewise.\n\t(FABS): Likewise.\n\t(__divkc3): Use TFmode/TCmode for float128 scalar/complex types.\n\t* config/rs6000/extendkftf2-sw.c (__extendkftf2_sw): Likewise.\n\t* config/rs6000/trunctfkf2-sw.c (__trunctfkf2_sw): Likewise.\n\nFrom-SVN: r256354", "tree": {"sha": "50f68db06b76b930227d413a95ad13f95edf55d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50f68db06b76b930227d413a95ad13f95edf55d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68df9882b223146ffac2b3b5a939cfc090b72e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68df9882b223146ffac2b3b5a939cfc090b72e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68df9882b223146ffac2b3b5a939cfc090b72e5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68df9882b223146ffac2b3b5a939cfc090b72e5f/comments", "author": null, "committer": null, "parents": [{"sha": "d5eea0f7cc49d3b96b90037e30d437f4ceb6a271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5eea0f7cc49d3b96b90037e30d437f4ceb6a271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5eea0f7cc49d3b96b90037e30d437f4ceb6a271"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "25625efaf330f7081e8aa334ac390d2412483770", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68df9882b223146ffac2b3b5a939cfc090b72e5f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68df9882b223146ffac2b3b5a939cfc090b72e5f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=68df9882b223146ffac2b3b5a939cfc090b72e5f", "patch": "@@ -1,3 +1,41 @@\n+2018-01-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/quad-float128.h (IBM128_TYPE): Explicitly use\n+\t__ibm128, instead of trying to use long double.\n+\t(CVT_FLOAT128_TO_IBM128): Use TFtype instead of __float128 to\n+\taccomidate -mabi=ieeelongdouble multilibs.\n+\t(CVT_IBM128_TO_FLOAT128): Likewise.\n+\t* config/rs6000/ibm-ldouble.c (IBM128_TYPE): New macro to define\n+\tthe appropriate IBM extended double type.\n+\t(__gcc_qadd): Change all occurances of long double to IBM128_TYPE.\n+\t(__gcc_qsub): Likewise.\n+\t(__gcc_qmul): Likewise.\n+\t(__gcc_qdiv): Likewise.\n+\t(pack_ldouble): Likewise.\n+\t(__gcc_qneg): Likewise.\n+\t(__gcc_qeq): Likewise.\n+\t(__gcc_qne): Likewise.\n+\t(__gcc_qge): Likewise.\n+\t(__gcc_qle): Likewise.\n+\t(__gcc_stoq): Likewise.\n+\t(__gcc_dtoq): Likewise.\n+\t(__gcc_itoq): Likewise.\n+\t(__gcc_utoq): Likewise.\n+\t(__gcc_qunord): Likewise.\n+\t* config/rs6000/_mulkc3.c (toplevel): Include soft-fp.h and\n+\tquad-float128.h for the definitions.\n+\t(COPYSIGN): Use the f128 version instead of the q version.\n+\t(INFINITY): Likewise.\n+\t(__mulkc3): Use TFmode/TCmode for float128 scalar/complex types.\n+\t* config/rs6000/_divkc3.c (toplevel): Include soft-fp.h and\n+\tquad-float128.h for the definitions.\n+\t(COPYSIGN): Use the f128 version instead of the q version.\n+\t(INFINITY): Likewise.\n+\t(FABS): Likewise.\n+\t(__divkc3): Use TFmode/TCmode for float128 scalar/complex types.\n+\t* config/rs6000/extendkftf2-sw.c (__extendkftf2_sw): Likewise.\n+\t* config/rs6000/trunctfkf2-sw.c (__trunctfkf2_sw): Likewise.\n+\n 2018-01-05  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config.host (epiphany-*-elf*): Add (epiphany-*-rtems*)"}]}