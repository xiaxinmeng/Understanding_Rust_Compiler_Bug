{"sha": "829bde683caaddfd6cb4496a846dafe8ffb6340b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI5YmRlNjgzY2FhZGRmZDZjYjQ0OTZhODQ2ZGFmZThmZmI2MzQwYg==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2004-03-19T20:07:54Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2004-03-19T20:07:54Z"}, "message": "avr.md (\"call_insn\"): Handle explicit integer specially.\n\n\t* config/avr/avr.md (\"call_insn\"): Handle explicit integer\n\tspecially.\n\t(call_value_insn): Likewise.\n\nFrom-SVN: r79697", "tree": {"sha": "7c5e497149e34008ed9322c348b29c12334db703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c5e497149e34008ed9322c348b29c12334db703"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/829bde683caaddfd6cb4496a846dafe8ffb6340b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829bde683caaddfd6cb4496a846dafe8ffb6340b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/829bde683caaddfd6cb4496a846dafe8ffb6340b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/829bde683caaddfd6cb4496a846dafe8ffb6340b/comments", "author": null, "committer": null, "parents": [{"sha": "9d2a492d5d8faee8f8d6b1b07c8b7b328b4dbb04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2a492d5d8faee8f8d6b1b07c8b7b328b4dbb04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2a492d5d8faee8f8d6b1b07c8b7b328b4dbb04"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "e04f07bfbf11059dc172ad092f8a242e06e1a92a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829bde683caaddfd6cb4496a846dafe8ffb6340b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829bde683caaddfd6cb4496a846dafe8ffb6340b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=829bde683caaddfd6cb4496a846dafe8ffb6340b", "patch": "@@ -1,3 +1,9 @@\n+2004-03-19  Denis Chertykov  <denisc@overta.ru>\n+\n+\t* config/avr/avr.md (\"call_insn\"): Handle explicit integer\n+\tspecially.\n+\t(call_value_insn): Likewise.\n+\n 2004-03-19  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree.c (substitute_in_expr): Rewrite to simplify and be more generic."}, {"sha": "22da0b10250127b25ea9f874f5ac4f1dc3f87fc9", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/829bde683caaddfd6cb4496a846dafe8ffb6340b/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/829bde683caaddfd6cb4496a846dafe8ffb6340b/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=829bde683caaddfd6cb4496a846dafe8ffb6340b", "patch": "@@ -2086,8 +2086,8 @@\n   \"\")\n \n (define_insn \"call_insn\"\n-  [(call (mem:HI (match_operand:HI 0 \"nonmemory_operand\" \"!z,*r,i\"))\n-         (match_operand:HI 1 \"general_operand\" \"X,X,X\"))]\n+  [(call (mem:HI (match_operand:HI 0 \"nonmemory_operand\" \"!z,*r,s,n\"))\n+         (match_operand:HI 1 \"general_operand\" \"X,X,X,X\"))]\n ;; We don't need in saving Z register because r30,r31 is a call used registers\n   ;; Operand 1 not used on the AVR.\n   \"(register_operand (operands[0], HImode) || CONSTANT_P (operands[0]))\"\n@@ -2104,27 +2104,31 @@\n \t\tAS2 (mov, r31, %B0) CR_TAB\n \t\t\\\"icall\\\");\n     }\n-  return AS1(%~call,%c0);\n+  else if (which_alternative==2)\n+    return AS1(%~call,%c0);\n+  return (AS2 (ldi,r30,lo8(%0)) CR_TAB\n+          AS2 (ldi,r31,hi8(%0)) CR_TAB\n+          \\\"icall\\\");\n }\"\n-  [(set_attr \"cc\" \"clobber,clobber,clobber\")\n+  [(set_attr \"cc\" \"clobber,clobber,clobber,clobber\")\n    (set_attr_alternative \"length\"\n \t\t\t [(const_int 1)\n \t\t\t  (if_then_else (eq_attr \"mcu_enhanced\" \"yes\")\n \t\t\t\t\t(const_int 2)\n \t\t\t\t\t(const_int 3))\n \t\t\t  (if_then_else (eq_attr \"mcu_mega\" \"yes\")\n \t\t\t\t\t(const_int 2)\n-\t\t\t\t\t(const_int 1))])])\n+\t\t\t\t\t(const_int 1))\n+\t\t\t  (const_int 3)])])\n \n (define_insn \"call_value_insn\"\n-  [(set (match_operand 0 \"register_operand\" \"=r,r,r\")\n-        (call (mem:HI (match_operand:HI 1 \"nonmemory_operand\" \"!z,*r,i\"))\n+  [(set (match_operand 0 \"register_operand\" \"=r,r,r,r\")\n+        (call (mem:HI (match_operand:HI 1 \"nonmemory_operand\" \"!z,*r,s,n\"))\n ;; We don't need in saving Z register because r30,r31 is a call used registers\n-              (match_operand:HI 2 \"general_operand\" \"X,X,X\")))]\n+              (match_operand:HI 2 \"general_operand\" \"X,X,X,X\")))]\n   ;; Operand 2 not used on the AVR.\n   \"(register_operand (operands[0], VOIDmode) || CONSTANT_P (operands[0]))\"\n-  \"*\n-{\n+  \"*{\n   if (which_alternative==0)\n      return \\\"icall\\\";\n   else if (which_alternative==1)\n@@ -2137,17 +2141,22 @@\n \t\tAS2 (mov, r31, %B1) CR_TAB\n \t\t\\\"icall\\\");\n     }\n-  return AS1(%~call,%c1);\n+  else if (which_alternative==2)\n+    return AS1(%~call,%c1);\n+  return (AS2 (ldi, r30, lo8(%1)) CR_TAB\n+          AS2 (ldi, r31, hi8(%1)) CR_TAB\n+          \\\"icall\\\");\n }\"\n-  [(set_attr \"cc\" \"clobber,clobber,clobber\")\n+  [(set_attr \"cc\" \"clobber,clobber,clobber,clobber\")\n    (set_attr_alternative \"length\"\n \t\t\t [(const_int 1)\n \t\t\t  (if_then_else (eq_attr \"mcu_enhanced\" \"yes\")\n \t\t\t\t\t(const_int 2)\n \t\t\t\t\t(const_int 3))\n \t\t\t  (if_then_else (eq_attr \"mcu_mega\" \"yes\")\n \t\t\t\t\t(const_int 2)\n-\t\t\t\t\t(const_int 1))])])\n+\t\t\t\t\t(const_int 1))\n+\t\t\t  (const_int 3)])])\n \n (define_insn \"return\"\n   [(return)]"}]}