{"sha": "76335fefffd0708a102ae66e67b8d5e8c0ae6dac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYzMzVmZWZmZmQwNzA4YTEwMmFlNjZlNjdiOGQ1ZThjMGFlNmRhYw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-12-28T07:51:17Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-12-28T07:51:17Z"}, "message": "vax.c (vax_address_cost, [...]): Correct casts.\n\n\t* vax.c (vax_address_cost, vax_rtx_cost): Correct casts.\n\t(vax_rtx_cost): Handle small offsets for both PLUS and MINUS.\n\nFrom-SVN: r92667", "tree": {"sha": "9e9f425e99237648c78a8836866bd571eb8cf073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e9f425e99237648c78a8836866bd571eb8cf073"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76335fefffd0708a102ae66e67b8d5e8c0ae6dac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76335fefffd0708a102ae66e67b8d5e8c0ae6dac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76335fefffd0708a102ae66e67b8d5e8c0ae6dac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76335fefffd0708a102ae66e67b8d5e8c0ae6dac/comments", "author": null, "committer": null, "parents": [{"sha": "685c2171c1b55fdac1bd276c54d9bea41d872373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685c2171c1b55fdac1bd276c54d9bea41d872373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/685c2171c1b55fdac1bd276c54d9bea41d872373"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "f1f57cb7946feae05543b77028d38e004742d9d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76335fefffd0708a102ae66e67b8d5e8c0ae6dac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76335fefffd0708a102ae66e67b8d5e8c0ae6dac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76335fefffd0708a102ae66e67b8d5e8c0ae6dac", "patch": "@@ -1,3 +1,8 @@\n+2004-12-27 John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* vax.c (vax_address_cost, vax_rtx_cost): Correct casts.\n+\t(vax_rtx_cost): Handle small offsets for both PLUS and MINUS.\n+\n 2004-12-27  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (thread_across_edge): Remove broken code to"}, {"sha": "ca5fb6ac6298632216d2c6f545f709a5da36c94f", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76335fefffd0708a102ae66e67b8d5e8c0ae6dac/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76335fefffd0708a102ae66e67b8d5e8c0ae6dac/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=76335fefffd0708a102ae66e67b8d5e8c0ae6dac", "patch": "@@ -474,7 +474,7 @@ vax_address_cost_1 (register rtx addr)\n     case CONST_INT:\n       /* byte offsets cost nothing (on a VAX 2, they cost 1 cycle) */\n       if (offset == 0)\n-\toffset = (unsigned)(INTVAL(addr)+128) > 256;\n+\toffset = (unsigned HOST_WIDE_INT)(INTVAL(addr)+128) > 256;\n       break;\n     case CONST:\n     case SYMBOL_REF:\n@@ -644,13 +644,13 @@ vax_rtx_costs_1 (register rtx x, enum rtx_code code, enum rtx_code outer_code)\n \tfmt = \"e\";\t/* all constant rotate counts are short */\n       break;\n     case PLUS:\n-      /* Check for small negative integer operand: subl2 can be used with\n-\t a short positive constant instead.  */\n-      if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n-\tif ((unsigned)(INTVAL (XEXP (x, 1)) + 63) < 127)\n-\t  fmt = \"e\";\n     case MINUS:\n       c = (mode == DFmode) ? 13 : 8;\t/* 6/8 on VAX 9000, 16/15 on VAX 2 */\n+      /* Small integer operands can use subl2 and addl2.  */\n+      if ((GET_CODE (XEXP (x, 1)) == CONST_INT)\n+\t  && (unsigned HOST_WIDE_INT)(INTVAL (XEXP (x, 1)) + 63) < 127)\n+\tfmt = \"e\";\n+      break;\n     case IOR:\n     case XOR:\n       c = 3;\n@@ -660,7 +660,7 @@ vax_rtx_costs_1 (register rtx x, enum rtx_code code, enum rtx_code outer_code)\n       c = 3;\n       if (GET_CODE (XEXP (x, 0)) == CONST_INT)\n \t{\n-\t  if ((unsigned)~INTVAL (XEXP (x, 0)) > 63)\n+\t  if ((unsigned HOST_WIDE_INT)~INTVAL (XEXP (x, 0)) > 63)\n \t    c = 4;\n \t  fmt = \"e\";\n \t  i = 1;\n@@ -713,7 +713,8 @@ vax_rtx_costs_1 (register rtx x, enum rtx_code code, enum rtx_code outer_code)\n       switch (code)\n \t{\n \tcase CONST_INT:\n-\t  if ((unsigned)INTVAL (op) > 63 && GET_MODE (x) != QImode)\n+\t  if ((unsigned HOST_WIDE_INT)INTVAL (op) > 63\n+\t      && GET_MODE (x) != QImode)\n \t    c += 1;\t\t/* 2 on VAX 2 */\n \t  break;\n \tcase CONST:"}]}