{"sha": "676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc2OTk3Y2ZkMmM3MmZlN2E1ZmE4MTVkNzhlOGE3MzUxMDcyYzdkNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-06-12T03:06:30Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-12T03:06:30Z"}, "message": "c-common.c (builtin_define_type_max): New.\n\n        * c-common.c (builtin_define_type_max): New.\n        (cb_register_builtins): Define __SCHAR_MAX__, __SHRT_MAX__,\n        __INT_MAX__, __LONG_MAX__, __LONG_LONG_MAX__, __CHAR_BIT__.\n\n        From Joseph S. Myers:\n        * glimits.h: Rewrite to expect the double underscore definitions\n        from the compiler.\n\n        * config/alpha/unicosmk.h, config/avr/avr.h, config/h8300/h8300.h,\n        config/i386/linux64.h, config/ia64/aix.h, config/ia64/hpux.h,\n        config/ia64/ia64.h, config/m68hc11/m68hc11.h, config/m68hc11/m68hc12.h,\n        config/mips/mips.h, config/mmix/mmix.h, config/mn10200/mn10200.h,\n        config/pa/pa.h, config/rs6000/aix43.h, config/rs6000/aix51.h,\n        config/rs6000/linux64.h, config/s390/linux.h, config/sh/sh.h,\n        config/stormy16/stormy16.h: Don't define any of __SHRT_MAX__,\n        __INT_MAX__, __LONG_MAX__, or __LONG_LONG_MAX__.\n\nFrom-SVN: r54544", "tree": {"sha": "a51f218e63a3e610ab83885e2934f450d9444946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a51f218e63a3e610ab83885e2934f450d9444946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/comments", "author": null, "committer": null, "parents": [{"sha": "116b7a5ea82b371a114209bd6b277e72ece51bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116b7a5ea82b371a114209bd6b277e72ece51bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116b7a5ea82b371a114209bd6b277e72ece51bc1"}], "stats": {"total": 261, "additions": 152, "deletions": 109}, "files": [{"sha": "85306407035e2fdea3b797e53930f197ba946a15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -1,3 +1,22 @@\n+2002-06-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (builtin_define_type_max): New.\n+\t(cb_register_builtins): Define __SCHAR_MAX__, __SHRT_MAX__,\n+\t__INT_MAX__, __LONG_MAX__, __LONG_LONG_MAX__, __CHAR_BIT__.\n+\n+\tFrom Joseph S. Myers:\n+\t* glimits.h: Rewrite to expect the double underscore definitions\n+\tfrom the compiler.\n+\n+\t* config/alpha/unicosmk.h, config/avr/avr.h, config/h8300/h8300.h,\n+\tconfig/i386/linux64.h, config/ia64/aix.h, config/ia64/hpux.h,\n+\tconfig/ia64/ia64.h, config/m68hc11/m68hc11.h, config/m68hc11/m68hc12.h,\n+\tconfig/mips/mips.h, config/mmix/mmix.h, config/mn10200/mn10200.h,\n+\tconfig/pa/pa.h, config/rs6000/aix43.h, config/rs6000/aix51.h,\n+\tconfig/rs6000/linux64.h, config/s390/linux.h, config/sh/sh.h,\n+\tconfig/stormy16/stormy16.h: Don't define any of __SHRT_MAX__,\n+\t__INT_MAX__, __LONG_MAX__, or __LONG_LONG_MAX__.\n+\n 2002-06-11  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (ALPHA_BUILTIN_THREAD_POINTER): New."}, {"sha": "4b9b7cfd9705fe22b8d657a64f9d3de5e0d42e42", "filename": "gcc/c-common.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -365,6 +365,7 @@ static bool get_nonnull_operand\t\tPARAMS ((tree,\n void builtin_define_std PARAMS ((const char *));\n static void builtin_define_with_value PARAMS ((const char *, const char *,\n \t\t\t\t\t       int));\n+static void builtin_define_type_max PARAMS ((const char *, tree, int));\n \n /* Table of machine-independent attributes common to all C-like languages.  */\n const struct attribute_spec c_common_attribute_table[] =\n@@ -4346,6 +4347,19 @@ cb_register_builtins (pfile)\n   builtin_define_with_value (\"__WCHAR_TYPE__\", MODIFIED_WCHAR_TYPE, 0);\n   builtin_define_with_value (\"__WINT_TYPE__\", WINT_TYPE, 0);\n \n+  /* limits.h needs to know these.  */\n+  builtin_define_type_max (\"__SCHAR_MAX__\", signed_char_type_node, 0);\n+  builtin_define_type_max (\"__SHRT_MAX__\", short_integer_type_node, 0);\n+  builtin_define_type_max (\"__INT_MAX__\", integer_type_node, 0);\n+  builtin_define_type_max (\"__LONG_MAX__\", long_integer_type_node, 1);\n+  builtin_define_type_max (\"__LONG_LONG_MAX__\", long_long_integer_type_node, 2);\n+\n+  {\n+    char buf[8];\n+    sprintf (buf, \"%d\", (int) TYPE_PRECISION (signed_char_type_node));\n+    builtin_define_with_value (\"__CHAR_BIT__\", buf, 0);\n+  }\n+\n   /* For use in assembly language.  */\n   builtin_define_with_value (\"__REGISTER_PREFIX__\", REGISTER_PREFIX, 0);\n   builtin_define_with_value (\"__USER_LABEL_PREFIX__\", user_label_prefix, 0);\n@@ -4457,6 +4471,54 @@ builtin_define_with_value (macro, expansion, is_str)\n   cpp_define (parse_in, buf);\n }\n \n+/* Define MAX for TYPE based on the precision of the type, which is assumed\n+   to be signed.  IS_LONG is 1 for type \"long\" and 2 for \"long long\".  */\n+\n+static void\n+builtin_define_type_max (macro, type, is_long)\n+     const char *macro;\n+     tree type;\n+     int is_long;\n+{\n+  const char *value;\n+  char *buf;\n+  size_t mlen, vlen, extra;\n+\n+  /* Pre-rendering the values mean we don't have to futz with printing a\n+     multi-word decimal value.  There are also a very limited number of\n+     precisions that we support, so it's really a waste of time.  */\n+  switch (TYPE_PRECISION (type))\n+    {\n+    case 8:\n+      value = \"127\";\n+      break;\n+    case 16:\n+      value = \"32767\";\n+      break;\n+    case 32:\n+      value = \"2147483647\";\n+      break;\n+    case 64:\n+      value = \"9223372036854775807\";\n+      break;\n+    case 128:\n+      value = \"170141183460469231731687303715884105727\";\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  mlen = strlen (macro);\n+  vlen = strlen (value);\n+  extra = 2 + is_long;\n+  buf = alloca (mlen + vlen + extra);\n+\n+  sprintf (buf, \"%s=%s%s\", macro, value,\n+\t   (is_long == 1 ? \"L\" : is_long == 2 ? \"LL\" : \"\"));\n+\n+  cpp_define (parse_in, buf);\n+}\n+\n /* Front end initialization common to C, ObjC and C++.  */\n const char *\n c_common_init (filename)"}, {"sha": "cd9308c027eb07e00710a691c8e846311e2be70c", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -43,8 +43,6 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_define (\"_ADDR64\");\t\t\t\t\\\n \tbuiltin_define (\"_LD64\");\t\t\t\t\\\n \tbuiltin_define (\"__UNICOSMK__\");\t\t\t\\\n-\tbuiltin_define (\"__INT_MAX__=9223372036854775807\");\t\\\n-\tbuiltin_define (\"__SHRT_MAX__=2147483647\");\t\t\\\n     } while (0)\n \n #define SHORT_TYPE_SIZE 32"}, {"sha": "65effa66fba1cbbad0ecc29430c4ff88516a6f21", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -38,10 +38,6 @@ Boston, MA 02111-1307, USA.  */\n \tbuiltin_define (\"__AVR_MEGA__\");\t\\\n       if (TARGET_NO_INTERRUPTS)\t\t\t\\\n \tbuiltin_define (\"__NO_INTERRUPTS__\");\t\\\n-      if (TARGET_INT8)\t\t\t\t\\\n-\tbuiltin_define (\"__INT_MAX__=127\");\t\\\n-      else\t\t\t\t\t\\\n-\tbuiltin_define (\"__INT_MAX__=32767\");\t\\\n     }\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "1fa64ccf1ba5163f35120de0bef1bad3b9a364bd", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -59,12 +59,6 @@ extern const char * const *h8_reg_names;\n \t  builtin_assert (\"cpu=h8300\");\t\t\t\\\n \t  builtin_assert (\"machine=h8300\");\t\t\\\n \t}\t\t\t\t\t\t\\\n-      if (TARGET_INT32)\t\t\t\t\t\\\n-\tbuiltin_define (\"__INT_MAX__=2147483647\");\t\\\n-      else\t\t\t\t\t\t\\\n-\tbuiltin_define (\"__INT_MAX__=32767\");\t\t\\\n-      builtin_define (\"__LONG_MAX__=2147483647L\");\t\\\n-      builtin_define (\"__LONG_LONG_MAX__=2147483647L\");\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "99c381aa4ded4c2a5f48c7574cc7c018b0d5c1f9", "filename": "gcc/config/i386/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fi386%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fi386%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux64.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -27,7 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_PREDEFINES \"-D__ELF__ -Dunix -D__gnu_linux__ -Dlinux -Asystem(posix)\"\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT} %{!m32:-D__LONG_MAX__=9223372036854775807L}\"\n+#define CPP_SPEC \"%{fPIC:-D__PIC__ -D__pic__} %{fpic:-D__PIC__ -D__pic__} %{posix:-D_POSIX_SOURCE} %{pthread:-D_REENTRANT}\"\n \n /* Provide a LINK_SPEC.  Here we provide support for the special GCC\n    options -static and -shared, which allow us to link things in one"}, {"sha": "40b654836d14d7f160739b89d9aa81f33762b792", "filename": "gcc/config/ia64/aix.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fia64%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fia64%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Faix.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -81,8 +81,7 @@ Boston, MA 02111-1307, USA.  */\n %{mcpu=itanium:-D__itanium__} %{mbig-endian:-D__BIG_ENDIAN__} \\\n %{ansi:-D_ANSI_C_SOURCE} \\\n %{posix:-D_POSIX_SOURCE} \\\n-%{cpp_cpu} \\\n--D__LONG_MAX__=9223372036854775807L\"\n+%{cpp_cpu}\"\n \n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"\\\n@@ -97,7 +96,6 @@ Boston, MA 02111-1307, USA.  */\n    -D_XOPEN_SOURCE_EXTENDED=1                   \\\n    -D_LARGE_FILE_API                            \\\n    -D_ALL_SOURCE                                \\\n-   -D__LONG_MAX__=9223372036854775807L          \\\n    %{cpp_cpu}\"\n \n /* Define this for shared library support.  */"}, {"sha": "8b1867897cf358095cf5c0cdcb21f68feb786b60", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -40,7 +40,7 @@ Boston, MA 02111-1307, USA.  */\n #undef CPP_SPEC\n #define CPP_SPEC \"\\\n   %{mcpu=itanium:-D__itanium__} \\\n-  %{mlp64:-D__LP64__ -D_LP64 -D__LONG_MAX__=9223372036854775807L} \\\n+  %{mlp64:-D__LP64__ -D_LP64} \\\n   %{!ansi:%{!std=c*:%{!std=i*: -D_HPUX_SOURCE -D__STDC_EXT__}}} \\\n   -D__fpreg=long\\\\ double \\\n   -D__float80=long\\\\ double \\"}, {"sha": "83da1644e7f64fe72a341b6ba943e1c4bf4432f7", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -212,14 +212,8 @@ extern const char *ia64_tls_size_string;\n    CPP.  It can also specify how to translate options you give to GNU CC into\n    options for GNU CC to pass to the CPP.  */\n \n-/* ??? __LONG_MAX__ depends on LP64/ILP32 switch.  */\n-/* ??? An alternative is to modify glimits.h to check for __LP64__ instead\n-   of checked for CPU specific defines.  We could also get rid of all LONG_MAX\n-   defines in other tm.h files.  */\n #define CPP_SPEC \\\n-  \"%{mcpu=itanium:-D__itanium__} %{mbig-endian:-D__BIG_ENDIAN__}\t\\\n-   %(cpp_cpu)\t\\\n-   -D__LONG_MAX__=9223372036854775807L\"\n+  \"%{mcpu=itanium:-D__itanium__} %{mbig-endian:-D__BIG_ENDIAN__} %(cpp_cpu)\"\n \n /* A C string constant that tells the GNU CC driver program options to pass to\n    `cc1'.  It can also specify how to translate options you give to GNU CC into"}, {"sha": "42950e79c3cefd9eb779c7a4b745ac32b4c1501b", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -62,8 +62,8 @@ Boston, MA 02111-1307, USA.\n \n #ifndef CPP_SPEC\n #define CPP_SPEC  \\\n-\"%{mshort:-D__HAVE_SHORT_INT__ -D__INT__=16 -D__INT_MAX__=32767}\\\n- %{!mshort:-D__INT__=32 -D__INT_MAX__=2147483647}\\\n+\"%{mshort:-D__HAVE_SHORT_INT__ -D__INT__=16}\\\n+ %{!mshort:-D__INT__=32}\\\n  %{m68hc12:-Dmc6812 -DMC6812 -Dmc68hc12}\\\n  %{!m68hc12:-Dmc6811 -DMC6811 -Dmc68hc11}\\\n  %{fshort-double:-D__HAVE_SHORT_DOUBLE__}\""}, {"sha": "ba56c172993b23d55594fda6d3255566926e59ee", "filename": "gcc/config/m68hc11/m68hc12.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc12.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -29,8 +29,8 @@ Boston, MA 02111-1307, USA.  */\n #define LINK_SPEC      \"%{m68hc11:-m m68hc11elf}%{!m68hc11:-m m68hc12elf}\"\n \n #define CPP_SPEC  \\\n-\"%{mshort:-D__HAVE_SHORT_INT__ -D__INT__=16 -D__INT_MAX__=32767}\\\n- %{!mshort:-D__INT__=32 -D__INT_MAX__=2147483647}\\\n+\"%{mshort:-D__HAVE_SHORT_INT__ -D__INT__=16}\\\n+ %{!mshort:-D__INT__=32}\\\n  %{m68hc11:-Dmc6811 -DMC6811 -Dmc68hc11}\\\n  %{!m68hc11:-Dmc6812 -DMC6812 -Dmc68hc12}\\\n  %{fshort-double:-D__HAVE_SHORT_DOUBLE__}\""}, {"sha": "b68840f5e1b8e57325fbc1393b68dabaee38dd35", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -417,9 +417,6 @@ extern void\t\tsbss_section PARAMS ((void));\n       if (TARGET_SINGLE_FLOAT)\t\t\t\t\t\\\n \t  builtin_define (\"__mips_single_float\");\t\t\\\n \t\t\t\t\t\t\t\t\\\n-      if (TARGET_LONG64)\t\t\t\t\t\\\n-\t  builtin_define (\"__LONG_MAX__=9223372036854775807L\"); \\\n-\t\t\t\t\t\t\t\t\\\n       if (TARGET_BIG_ENDIAN)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  builtin_define_std (\"MIPSEB\");\t\t\t\\"}, {"sha": "17471a6e6fae8b2aca6227cf65aa3f01173b1a05", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -145,7 +145,6 @@ extern const char *mmix_cc1_ignored_option;\n     {\t\t\t\t\t\t\t\t\\\n       builtin_define (\"__mmix__\");\t\t\t\t\\\n       builtin_define (\"__MMIX__\");\t\t\t\t\\\n-      builtin_define (\"__LONG_MAX__=9223372036854775807L\");\t\\\n       if (TARGET_ABI_GNU)\t\t\t\t\t\\\n \tbuiltin_define (\"__MMIX_ABI_GNU__\");\t\t\t\\\n       else\t\t\t\t\t\t\t\\"}, {"sha": "8bf169fc97b1572b2d54c1f29bb4bb8479f337f5", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -32,7 +32,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Names to predefine in the preprocessor for this target machine.  */\n \n-#define CPP_PREDEFINES \"-D__mn10200__ -D__MN10200__ -D__LONG_MAX__=2147483647L -D__LONG_LONG_MAX__=2147483647L -D__INT_MAX__=32767\"\n+#define CPP_PREDEFINES \"-D__mn10200__ -D__MN10200__\"\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n "}, {"sha": "a9c23ac0d1ef4c072a0ba363d1b1456446b56973", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -268,7 +268,7 @@ extern int target_flags;\n #define CPP_PA10_SPEC \"\"\n #define CPP_PA11_SPEC \"-D_PA_RISC1_1 -D__hp9000s700\"\n #define CPP_PA20_SPEC \"-D_PA_RISC2_0 -D__hp9000s800\"\n-#define CPP_64BIT_SPEC \"-D__LP64__ -D__LONG_MAX__=9223372036854775807L\"\n+#define CPP_64BIT_SPEC \"-D__LP64__\"\n \n #if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_11) == 0\n #define CPP_CPU_DEFAULT_SPEC \"%(cpp_pa10)\""}, {"sha": "ddf9857d9c20c52e78509545d0dcce78cd7a742d", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -103,7 +103,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n    %{ansi: -D_ANSI_C_SOURCE}\\\n-   %{maix64: -D__64BIT__ -D__LONG_MAX__=9223372036854775807L}\\\n+   %{maix64: -D__64BIT__}\\\n    %{mpe: -I/usr/lpp/ppe.poe/include}\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n@@ -114,9 +114,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   \"-D_XOPEN_SOURCE=500\t\t\t\t\\\n    -D_XOPEN_SOURCE_EXTENDED=1\t\t\t\\\n    -D_LARGE_FILE_API\t\t\t\t\\\n-   -D_ALL_SOURCE                                \\\n-   %{maix64: -D__64BIT__ -D__LONG_MAX__=9223372036854775807L}\\\n-   %{mpe: -I/usr/lpp/ppe.poe/include}\\\n+   -D_ALL_SOURCE\t\t\t\t\\\n+   %{maix64: -D__64BIT__}\t\t\t\\\n+   %{mpe: -I/usr/lpp/ppe.poe/include}\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #undef TARGET_DEFAULT"}, {"sha": "2f0d68274f95ce972f6de80a11873d2664a5aeb7", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -101,22 +101,22 @@ do {\t\t\t\t\t\t\t\t\t\\\n -D_AIX -D_AIX32 -D_AIX41 -D_AIX43 -D_AIX51 -Asystem=unix -Asystem=aix\"\n \n #undef CPP_SPEC\n-#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n-  %{ansi: -D_ANSI_C_SOURCE}\\\n-  %{maix64: -D__64BIT__ -D__LONG_MAX__=9223372036854775807L}\n-  %{mpe: -I/usr/lpp/ppe.poe/include}\\\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n+  %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n+  %{maix64: -D__64BIT__}\t\t\t\\\n+  %{mpe: -I/usr/lpp/ppe.poe/include}\t\t\\\n   %{pthread: -D_THREAD_SAFE}\"\n \n /* The GNU C++ standard library requires that these macros be \n    defined.  */\n #undef CPLUSPLUS_CPP_SPEC                       \n-#define CPLUSPLUS_CPP_SPEC                      \\\n-  \"-D_XOPEN_SOURCE=500                          \\\n-   -D_XOPEN_SOURCE_EXTENDED=1                   \\\n-   -D_LARGE_FILE_API                            \\\n-   -D_ALL_SOURCE                                \\\n-   %{maix64: -D__64BIT__ -D__LONG_MAX__=9223372036854775807L}\n-   %{mpe: -I/usr/lpp/ppe.poe/include}\\\n+#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+  \"-D_XOPEN_SOURCE=500\t\t\t\t\\\n+   -D_XOPEN_SOURCE_EXTENDED=1\t\t\t\\\n+   -D_LARGE_FILE_API\t\t\t\t\\\n+   -D_ALL_SOURCE\t\t\t\t\\\n+   %{maix64: -D__64BIT__}\t\t\t\\\n+   %{mpe: -I/usr/lpp/ppe.poe/include}\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #undef TARGET_DEFAULT"}, {"sha": "eaa962d024df32713ab52cc2dfc9b80f55d1913b", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -110,7 +110,6 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_PREDEFINES \\\n  \"-D_PPC_ -D__PPC__ -D_PPC64_ -D__PPC64__ -D__powerpc__ -D__powerpc64__ \\\n   -D_PIC_ -D__PIC__ -D__ELF__ \\\n-  -D__LONG_MAX__=9223372036854775807L \\\n   -Acpu=powerpc64 -Amachine=powerpc64\"\n \n #undef  CPP_OS_DEFAULT_SPEC"}, {"sha": "8e411b80d503049e2915fc3202fc3f7369ca2e38", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -55,7 +55,7 @@ Boston, MA 02111-1307, USA.  */\n    -Acpu(s390) -Amachine(s390) -D__s390__\"\n \n #define CPP_ARCH31_SPEC \"\"\n-#define CPP_ARCH64_SPEC \"-D__s390x__ -D__LONG_MAX__=9223372036854775807L\"\n+#define CPP_ARCH64_SPEC \"-D__s390x__\"\n \n #undef  CPP_SPEC\n #ifdef DEFAULT_TARGET_64BIT"}, {"sha": "1479c0210c40dc08501c92d49125ac8bb9e5ca38", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -65,9 +65,6 @@ do { \\\n \t\t\t\t   TARGET_SHMEDIA ? \"1\" : \"0\", 0); \\\n \tif (! TARGET_FPU_DOUBLE) \\\n \t  builtin_define (\"__SH4_NOFPU__\"); \\\n-\tif (TARGET_SHMEDIA64) \\\n-\t  builtin_define_with_value (\"__LONG_MAX__\", \\\n-\t\t\t\t     \"9223372036854775807L\", 0); \\\n       } \\\n     } \\\n   if (TARGET_HITACHI) \\"}, {"sha": "560d0d2239a352050bd5c5fb5f51cd73dee1ca86", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -67,7 +67,7 @@ Boston, MA 02111-1307, USA.  */\n \f\n /* Run-time target specifications */\n \n-#define CPP_PREDEFINES \"-Dxstormy16 -Amachine=xstormy16 -D__INT_MAX__=32767\"\n+#define CPP_PREDEFINES \"-Dxstormy16 -Amachine=xstormy16\"\n \n /* This declaration should be present.  */\n extern int target_flags;"}, {"sha": "710cbb528abbeba2bbb32bd0dcbf9c71f2e865a3", "filename": "gcc/glimits.h", "status": "modified", "additions": 44, "deletions": 54, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fglimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/676997cfd2c72fe7a5fa815d78e8a7351072c7d4/gcc%2Fglimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglimits.h?ref=676997cfd2c72fe7a5fa815d78e8a7351072c7d4", "patch": "@@ -3,7 +3,7 @@\n \n /* Number of bits in a `char'.  */\n #undef CHAR_BIT\n-#define CHAR_BIT 8\n+#define CHAR_BIT __CHAR_BIT__\n \n /* Maximum length of a multibyte character.  */\n #ifndef MB_LEN_MAX\n@@ -12,102 +12,92 @@\n \n /* Minimum and maximum values a `signed char' can hold.  */\n #undef SCHAR_MIN\n-#define SCHAR_MIN (-128)\n+#define SCHAR_MIN (-SCHAR_MAX - 1)\n #undef SCHAR_MAX\n-#define SCHAR_MAX 127\n+#define SCHAR_MAX __SCHAR_MAX__\n \n /* Maximum value an `unsigned char' can hold.  (Minimum is 0).  */\n #undef UCHAR_MAX\n-#define UCHAR_MAX 255\n+#if __SCHAR_MAX__ == __INT_MAX__\n+# define UCHAR_MAX (SCHAR_MAX * 2U + 1U)\n+#else\n+# define UCHAR_MAX (SCHAR_MAX * 2 + 1)\n+#endif\n \n /* Minimum and maximum values a `char' can hold.  */\n #ifdef __CHAR_UNSIGNED__\n-#undef CHAR_MIN\n-#define CHAR_MIN 0\n-#undef CHAR_MAX\n-#define CHAR_MAX 255\n+# undef CHAR_MIN\n+# if __SCHAR_MAX__ == __INT_MAX__\n+#  define CHAR_MIN 0U\n+# else\n+#  define CHAR_MIN 0\n+# endif\n+# undef CHAR_MAX\n+# define CHAR_MAX UCHAR_MAX\n #else\n-#undef CHAR_MIN\n-#define CHAR_MIN (-128)\n-#undef CHAR_MAX\n-#define CHAR_MAX 127\n-#endif\n-\n-#ifndef __SHRT_MAX__\n-#define __SHRT_MAX__ 32767\n+# undef CHAR_MIN\n+# define CHAR_MIN SCHAR_MIN\n+# undef CHAR_MAX\n+# define CHAR_MAX SCHAR_MAX\n #endif\n \n /* Minimum and maximum values a `signed short int' can hold.  */\n #undef SHRT_MIN\n-#define SHRT_MIN (-SHRT_MAX-1)\n+#define SHRT_MIN (-SHRT_MAX - 1)\n #undef SHRT_MAX\n #define SHRT_MAX __SHRT_MAX__\n \n-/* Minimum and maximum values a `signed int' can hold.  */\n-#ifndef __INT_MAX__\n-#define __INT_MAX__ 2147483647\n-#endif\n-#undef INT_MIN\n-#define INT_MIN (-INT_MAX-1)\n-#undef INT_MAX\n-#define INT_MAX __INT_MAX__\n-\n /* Maximum value an `unsigned short int' can hold.  (Minimum is 0).  */\n #undef USHRT_MAX\n #if __SHRT_MAX__ == __INT_MAX__\n-#define USHRT_MAX (SHRT_MAX * 2U + 1U)\n+# define USHRT_MAX (SHRT_MAX * 2U + 1U)\n #else\n-#define USHRT_MAX (SHRT_MAX * 2 + 1)\n+# define USHRT_MAX (SHRT_MAX * 2 + 1)\n #endif\n \n+/* Minimum and maximum values a `signed int' can hold.  */\n+#undef INT_MIN\n+#define INT_MIN (-INT_MAX - 1)\n+#undef INT_MAX\n+#define INT_MAX __INT_MAX__\n+\n /* Maximum value an `unsigned int' can hold.  (Minimum is 0).  */\n #undef UINT_MAX\n-#define UINT_MAX (INT_MAX * 2U + 1)\n+#define UINT_MAX (INT_MAX * 2U + 1U)\n \n /* Minimum and maximum values a `signed long int' can hold.\n    (Same as `int').  */\n-#ifndef __LONG_MAX__\n-#if defined (__alpha__) || (defined (__sparc__) && defined(__arch64__)) || defined (__sparcv9)\n-#define __LONG_MAX__ 9223372036854775807L\n-#else\n-#define __LONG_MAX__ 2147483647L\n-#endif /* __alpha__ || sparc64 */\n-#endif\n #undef LONG_MIN\n-#define LONG_MIN (-LONG_MAX-1)\n+#define LONG_MIN (-LONG_MAX - 1L)\n #undef LONG_MAX\n #define LONG_MAX __LONG_MAX__\n \n /* Maximum value an `unsigned long int' can hold.  (Minimum is 0).  */\n #undef ULONG_MAX\n-#define ULONG_MAX (LONG_MAX * 2UL + 1)\n-\n-#ifndef __LONG_LONG_MAX__\n-#define __LONG_LONG_MAX__ 9223372036854775807LL\n-#endif\n+#define ULONG_MAX (LONG_MAX * 2UL + 1UL)\n \n #if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\n /* Minimum and maximum values a `signed long long int' can hold.  */\n-#undef LLONG_MIN\n-#define LLONG_MIN (-LLONG_MAX-1)\n-#undef LLONG_MAX\n-#define LLONG_MAX __LONG_LONG_MAX__\n+# undef LLONG_MIN\n+# define LLONG_MIN (-LLONG_MAX - 1LL)\n+# undef LLONG_MAX\n+# define LLONG_MAX __LONG_LONG_MAX__\n \n /* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */\n-#undef ULLONG_MAX\n-#define ULLONG_MAX (LLONG_MAX * 2ULL + 1)\n+# undef ULLONG_MAX\n+# define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)\n #endif\n \n #if defined (__GNU_LIBRARY__) ? defined (__USE_GNU) : !defined (__STRICT_ANSI__)\n /* Minimum and maximum values a `signed long long int' can hold.  */\n-#undef LONG_LONG_MIN\n-#define LONG_LONG_MIN (-LONG_LONG_MAX-1)\n-#undef LONG_LONG_MAX\n-#define LONG_LONG_MAX __LONG_LONG_MAX__\n+# undef LONG_LONG_MIN\n+# define LONG_LONG_MIN (-LONG_LONG_MAX - 1LL)\n+# undef LONG_LONG_MAX\n+# define LONG_LONG_MAX __LONG_LONG_MAX__\n \n /* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */\n-#undef ULONG_LONG_MAX\n-#define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1)\n+# undef ULONG_LONG_MAX\n+# define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1ULL)\n #endif\n \n #endif /* _LIMITS_H___ */"}]}