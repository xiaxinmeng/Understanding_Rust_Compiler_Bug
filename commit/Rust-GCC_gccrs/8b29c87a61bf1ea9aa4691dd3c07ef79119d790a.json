{"sha": "8b29c87a61bf1ea9aa4691dd3c07ef79119d790a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIyOWM4N2E2MWJmMWVhOWFhNDY5MWRkM2MwN2VmNzkxMTlkNzkwYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-03-17T20:34:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-03-17T20:34:59Z"}, "message": "re PR debug/48163 (ICEs for cris-elf, like gcc.c-torture/compile/calls.c gcc.c-torture/execute/complex-1.c)\n\n\tPR debug/48163\n\t* var-tracking.c (prepare_call_arguments): If CALL target\n\tis a non-SYMBOL_REF CONSTANT_P, just add that into the list as\n\tpc instead of looking it up using cselib_lookup and use\n\tPmode for it if x has VOIDmode.\n\t* dwarf2out.c (gen_subprogram_die): If also both first and\n\tsecond CONCAT arguments are VOIDmode, use mode of CONCAT itself.\n\nFrom-SVN: r171114", "tree": {"sha": "fd0300df57304dd7396f7bb1e39f442d95962b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd0300df57304dd7396f7bb1e39f442d95962b51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b29c87a61bf1ea9aa4691dd3c07ef79119d790a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b29c87a61bf1ea9aa4691dd3c07ef79119d790a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b29c87a61bf1ea9aa4691dd3c07ef79119d790a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b29c87a61bf1ea9aa4691dd3c07ef79119d790a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a82ff31f392508ef56c4021a711ec08982dadf76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82ff31f392508ef56c4021a711ec08982dadf76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a82ff31f392508ef56c4021a711ec08982dadf76"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "815ab0ceee20266ef2cdc40addb01a11d94a2865", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b29c87a61bf1ea9aa4691dd3c07ef79119d790a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b29c87a61bf1ea9aa4691dd3c07ef79119d790a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b29c87a61bf1ea9aa4691dd3c07ef79119d790a", "patch": "@@ -1,5 +1,13 @@\n 2011-03-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/48163\n+\t* var-tracking.c (prepare_call_arguments): If CALL target\n+\tis a non-SYMBOL_REF CONSTANT_P, just add that into the list as\n+\tpc instead of looking it up using cselib_lookup and use\n+\tPmode for it if x has VOIDmode.\n+\t* dwarf2out.c (gen_subprogram_die): If also both first and\n+\tsecond CONCAT arguments are VOIDmode, use mode of CONCAT itself.\n+\n \tPR debug/48163\n \t* function.c (assign_parms): For data.passed_pointer parms\n \tuse MEM of data.entry_parm instead of data.entry_parm itself"}, {"sha": "74905e3f53efd309ed34c73c10f0e22aba5bbbdc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b29c87a61bf1ea9aa4691dd3c07ef79119d790a/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b29c87a61bf1ea9aa4691dd3c07ef79119d790a/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8b29c87a61bf1ea9aa4691dd3c07ef79119d790a", "patch": "@@ -19481,7 +19481,11 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t\t\t == REGNO (XEXP (XEXP (XEXP (next_arg, 0), 0), 0)))\n \t\t    next_arg = XEXP (next_arg, 1);\n \t\t  if (mode == VOIDmode)\n-\t\t    mode = GET_MODE (XEXP (XEXP (arg, 0), 0));\n+\t\t    {\n+\t\t      mode = GET_MODE (XEXP (XEXP (arg, 0), 0));\n+\t\t      if (mode == VOIDmode)\n+\t\t\tmode = GET_MODE (XEXP (arg, 0));\n+\t\t    }\n \t\t  if (GET_MODE_CLASS (mode) != MODE_INT\n \t\t      || GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE)\n \t\t    continue;"}, {"sha": "d92ca59055e841947165e1bfa6a00b472d9617bf", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b29c87a61bf1ea9aa4691dd3c07ef79119d790a/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b29c87a61bf1ea9aa4691dd3c07ef79119d790a/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=8b29c87a61bf1ea9aa4691dd3c07ef79119d790a", "patch": "@@ -5818,7 +5818,16 @@ prepare_call_arguments (basic_block bb, rtx insn)\n   if (GET_CODE (x) == CALL && MEM_P (XEXP (x, 0)))\n     {\n       x = XEXP (XEXP (x, 0), 0);\n-      if (GET_CODE (x) != SYMBOL_REF)\n+      if (GET_CODE (x) == SYMBOL_REF)\n+\t/* Don't record anything.  */;\n+      else if (CONSTANT_P (x))\n+\t{\n+\t  x = gen_rtx_CONCAT (GET_MODE (x) == VOIDmode ? Pmode : GET_MODE (x),\n+\t\t\t      pc_rtx, x);\n+\t  call_arguments\n+\t    = gen_rtx_EXPR_LIST (VOIDmode, x, call_arguments);\n+\t}\n+      else\n \t{\n \t  cselib_val *val = cselib_lookup (x, GET_MODE (x), 0, VOIDmode);\n \t  if (val && cselib_preserved_value_p (val))"}]}