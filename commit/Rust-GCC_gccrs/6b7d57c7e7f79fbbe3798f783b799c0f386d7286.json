{"sha": "6b7d57c7e7f79fbbe3798f783b799c0f386d7286", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI3ZDU3YzdlN2Y3OWZiYmUzNzk4Zjc4M2I3OTljMGYzODZkNzI4Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-10-27T22:41:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-10-27T22:41:00Z"}, "message": "mips-protos.h: Break up long lines.\n\n\t* config/mips/mips-protos.h: Break up long lines.\n\tRemove needless #ifdef/#endif blocks.\n\tDon't declare functions declared in file made by genpreds or recog.h.\n\t* config/mips/mips.c (mips_output_function_prologue): TSIZE\n\tis now HOST_WIDE_INT; delete unneeded casts.\n\t* config/mips/mips.h: Don't use #elif.\n\nFrom-SVN: r46572", "tree": {"sha": "d136296814994cd17fd9c9155809c81371f65370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d136296814994cd17fd9c9155809c81371f65370"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b7d57c7e7f79fbbe3798f783b799c0f386d7286", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b7d57c7e7f79fbbe3798f783b799c0f386d7286", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b7d57c7e7f79fbbe3798f783b799c0f386d7286", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b7d57c7e7f79fbbe3798f783b799c0f386d7286/comments", "author": null, "committer": null, "parents": [{"sha": "70072ed99ef3e03038eb3f753a74c2a679b16e31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70072ed99ef3e03038eb3f753a74c2a679b16e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70072ed99ef3e03038eb3f753a74c2a679b16e31"}], "stats": {"total": 162, "additions": 82, "deletions": 80}, "files": [{"sha": "4373a08fe298f5c51b2387b61f811ef710783885", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b7d57c7e7f79fbbe3798f783b799c0f386d7286/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b7d57c7e7f79fbbe3798f783b799c0f386d7286/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b7d57c7e7f79fbbe3798f783b799c0f386d7286", "patch": "@@ -1,5 +1,12 @@\n Sat Oct 27 17:32:04 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* config/mips/mips-protos.h: Break up long lines.\n+\tRemove needless #ifdef/#endif blocks.\n+\tDon't declare functions declared in file made by genpreds or recog.h.\n+\t* config/mips/mips.c (mips_output_function_prologue): TSIZE\n+\tis now HOST_WIDE_INT; delete unneeded casts.\n+\t* config/mips/mips.h: Don't use #elif.\n+\t\n \t* expr.c (stor_constructor_field): Always call adjust_address.\n \tCopy TARGET before changing its alias set.\n \t(store_field): Likewise, for TO_RTX."}, {"sha": "0dcfca582f38d4bc514b8892b41208663cba7084", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 54, "deletions": 70, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b7d57c7e7f79fbbe3798f783b799c0f386d7286/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b7d57c7e7f79fbbe3798f783b799c0f386d7286/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=6b7d57c7e7f79fbbe3798f783b799c0f386d7286", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes of target machine for GNU compiler.  MIPS version.\n    Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999 Free Software Foundation, Inc.\n+   1999, 2001 Free Software Foundation, Inc.\n    Contributed by A. Lichnewsky (lich@inria.inria.fr).\n    Changed by Michael Meissner\t(meissner@osf.org).\n    64 bit r4000 support by Ian Lance Taylor (ian@cygnus.com) and\n@@ -35,7 +35,9 @@ extern void\t\tiris6_asm_output_align PARAMS ((FILE *, unsigned));\n extern const char *\tcurrent_section_name PARAMS ((void));\n extern unsigned int\tcurrent_section_flags PARAMS ((void));\n extern int\t\tmips_can_use_return_insn PARAMS ((void));\n-extern void\t\tmips_declare_object PARAMS ((FILE *, const char *, const char *, const char *, int));\n+extern void\t\tmips_declare_object PARAMS ((FILE *, const char *,\n+\t\t\t\t\t\t     const char *,\n+\t\t\t\t\t\t     const char *, int));\n extern void\t\tmips_expand_epilogue PARAMS ((void));\n extern void\t\tmips_expand_prologue PARAMS ((void));\n #ifdef REAL_VALUE_TYPE\n@@ -44,105 +46,82 @@ extern void\t\tmips_output_float PARAMS ((FILE *, REAL_VALUE_TYPE));\n #endif /* REAL_VALUE_TYPE */\n extern void\t\tmips_output_filename PARAMS ((FILE *, const char *));\n extern void\t\tmips_output_lineno PARAMS ((FILE *, int));\n-extern void\t\tmips_output_ascii PARAMS ((FILE *, const char *, size_t));\n+extern void\t\tmips_output_ascii PARAMS ((FILE *, const char *,\n+\t\t\t\t\t\t   size_t));\n extern void\t\tmips_order_regs_for_local_alloc PARAMS ((void));\n extern struct rtx_def *\tmips16_gp_pseudo_reg PARAMS ((void));\n #ifdef ASM_OUTPUT_UNDEF_FUNCTION\n extern int\t\tmips_output_external_libcall PARAMS ((FILE *, const char *));\n #endif /* ASM_OUTPUT_UNDEF_FUNCTION */\n \n \n-#ifdef TREE_CODE\n-extern unsigned int\tmips_hard_regno_nregs PARAMS ((int, enum machine_mode));\n-extern struct rtx_def *\tfunction_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n-extern void\t\tfunction_arg_advance PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n-extern int\t\tfunction_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n-extern int\t\tfunction_arg_pass_by_reference PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n+extern unsigned int\tmips_hard_regno_nregs PARAMS ((int,\n+\t\t\t\t\t\t       enum machine_mode));\n+extern struct rtx_def  *function_arg PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t      enum machine_mode, tree, int));\n+extern void\t\tfunction_arg_advance PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t      enum machine_mode,\n+\t\t\t\t\t\t      tree, int));\n+extern int\t\tfunction_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t\t    enum machine_mode,\n+\t\t\t\t\t\t\t    tree, int));\n+extern int\t\tfunction_arg_pass_by_reference\n+\t\t\t\tPARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t enum machine_mode, tree, int));\n extern int\t\tmips16_constant_after_function_p PARAMS ((tree));\n-extern int\t\tmips_output_external PARAMS ((FILE *, tree, const char *));\n+extern int\t\tmips_output_external PARAMS ((FILE *, tree,\n+\t\t\t\t\t\t      const char *));\n extern tree\t\tmips_build_va_list PARAMS ((void));\n-#ifdef RTX_CODE\n extern void\t\tmips_va_start PARAMS ((int, tree, rtx));\n-#endif /* RTX_CODE */\n extern struct rtx_def  *mips_va_arg PARAMS ((tree, tree));\n extern void\t\tmips_select_section PARAMS ((tree, int));\n extern void\t\tmips_unique_section PARAMS ((tree, int));\n-#endif /* TREE_CODE */\n \n-#ifdef RTX_CODE\n-extern int\t\tarith32_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tarith_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tcmp_op PARAMS ((rtx, enum machine_mode));\n-extern int\t\ttrap_cmp_op PARAMS ((rtx, enum machine_mode));\n-extern int\t\tconst_float_1_operand PARAMS ((rtx, enum machine_mode));\n-extern void\t\texpand_block_move PARAMS ((rtx []));\n-extern int\t\tequality_op PARAMS ((rtx, enum machine_mode));\n-extern void\t\tfinal_prescan_insn PARAMS ((rtx, rtx [], int));\n-extern struct rtx_def * gen_int_relational PARAMS ((enum rtx_code, rtx, rtx, rtx,int *));\n-#ifdef TREE_CODE\n-extern void\t\tinit_cumulative_args PARAMS ((CUMULATIVE_ARGS *c, tree, rtx));\n-#endif /* TREE_CODE */\n-extern void\t\tgen_conditional_branch PARAMS ((rtx[], enum rtx_code));\n+extern void\t\texpand_block_move PARAMS ((rtx *));\n+extern void\t\tfinal_prescan_insn PARAMS ((rtx, rtx *, int));\n+extern void\t\tinit_cumulative_args PARAMS ((CUMULATIVE_ARGS *,\n+\t\t\t\t\t\t      tree, rtx));\n extern void\t\tgen_conditional_move PARAMS ((rtx *));\n extern void\t\tmips_gen_conditional_trap PARAMS ((rtx *));\n-extern int\t\tlarge_int PARAMS ((rtx, enum machine_mode));\n extern void\t\tmachine_dependent_reorg PARAMS ((rtx));\n extern int\t\tmips_address_cost PARAMS ((rtx));\n-extern int\t\tmips_const_double_ok PARAMS ((rtx, enum machine_mode));\n extern void\t\tmips_count_memory_refs PARAMS ((rtx, int));\n extern HOST_WIDE_INT\tmips_debugger_offset PARAMS ((rtx, HOST_WIDE_INT));\n extern int\t\tmips_check_split PARAMS ((rtx, enum machine_mode));\n-extern const char      *mips_fill_delay_slot PARAMS ((const char *, enum delay_type, rtx[], rtx));\n-extern const char      *mips_move_1word PARAMS ((rtx[], rtx, int));\n-extern const char      *mips_move_2words PARAMS ((rtx[], rtx));\n-extern const char      *output_block_move PARAMS ((rtx, rtx[], int, enum block_move_type));\n+extern const char      *mips_fill_delay_slot PARAMS ((const char *,\n+\t\t\t\t\t\t      enum delay_type, rtx *,\n+\t\t\t\t\t\t      rtx));\n+extern const char      *mips_move_1word PARAMS ((rtx *, rtx, int));\n+extern const char      *mips_move_2words PARAMS ((rtx *, rtx));\n+extern const char      *output_block_move PARAMS ((rtx, rtx *, int,\n+\t\t\t\t\t\t   enum block_move_type));\n extern void\t\toverride_options PARAMS ((void));\n-extern int\t\tpc_or_label_operand PARAMS ((rtx, enum machine_mode));\n extern void\t\tprint_operand_address PARAMS ((FILE *, rtx));\n extern void\t\tprint_operand PARAMS ((FILE *, rtx, int));\n-extern int\t\treg_or_0_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\ttrue_reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tsimple_memory_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tdouble_memory_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tequality_op PARAMS ((rtx, enum machine_mode));\n-extern int\t\tsmall_int PARAMS ((rtx, enum machine_mode));\n-extern int\t\tuns_arith_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tdouble_memory_operand PARAMS ((rtx,enum machine_mode));\n extern struct rtx_def *\tembedded_pic_offset PARAMS ((rtx));\n extern struct rtx_def * mips16_gp_offset PARAMS ((rtx));\n extern int\t\tmips16_gp_offset_p PARAMS ((rtx));\n-extern int\t\tmips16_constant PARAMS ((rtx, enum machine_mode, int, int));\n+extern int\t\tmips16_constant PARAMS ((rtx, enum machine_mode,\n+\t\t\t\t\t\t int, int));\n extern int\t\tbuild_mips16_call_stub PARAMS ((rtx, rtx, rtx, int));\n-extern char  \t       *mips_output_conditional_branch PARAMS ((rtx, rtx *, int, int, int, int));\n+extern char  \t       *mips_output_conditional_branch PARAMS ((rtx, rtx *,\n+\t\t\t\t\t\t\t\tint, int, int,\n+\t\t\t\t\t\t\t\tint));\n extern int              mips_adjust_insn_length PARAMS ((rtx, int));\n-extern enum reg_class\tmips_secondary_reload_class PARAMS ((enum reg_class, enum machine_mode, rtx, int));\n-extern void\t\tmips_select_rtx_section PARAMS ((enum machine_mode, rtx));\n+extern enum reg_class\tmips_secondary_reload_class PARAMS ((enum reg_class,\n+\t\t\t\t\t\t\t     enum machine_mode,\n+\t\t\t\t\t\t\t     rtx, int));\n+extern void\t\tmips_select_rtx_section PARAMS ((enum machine_mode,\n+\t\t\t\t\t\t\t rtx));\n \n-/* Recognition functions that return if a condition is true.  */\n-extern int\t\taddress_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tcall_insn_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tconst_double_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tconst_int_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tconsttable_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tgeneral_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\timmediate_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tmemory_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tnonimmediate_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tnonmemory_operand PARAMS ((rtx, enum machine_mode));\n extern int\t\tpic_address_needs_scratch PARAMS ((rtx));\n-extern int\t\tregister_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tscratch_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tmove_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tmovdi_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tse_register_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tse_reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tse_uns_arith_operand PARAMS ((rtx, enum machine_mode));\n extern int\t\tse_arith_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tse_nonmemory_operand PARAMS ((rtx, enum machine_mode));\n-extern int\t\tse_nonimmediate_operand PARAMS ((rtx, enum machine_mode));\n-extern int              mips_legitimate_address_p PARAMS ((enum machine_mode, rtx, int));\n-extern int              mips_reg_mode_ok_for_base_p PARAMS ((rtx, enum machine_mode, int));\n-extern int              extend_operator PARAMS ((rtx, enum machine_mode));\n-extern int              highpart_shift_operator PARAMS ((rtx, enum machine_mode));\n+extern int              mips_legitimate_address_p PARAMS ((enum machine_mode,\n+\t\t\t\t\t\t\t   rtx, int));\n+extern int              mips_reg_mode_ok_for_base_p PARAMS ((rtx,\n+\t\t\t\t\t\t\t     enum machine_mode,\n+\t\t\t\t\t\t\t     int));\n extern int\t\tm16_uimm3_b PARAMS ((rtx, enum machine_mode));\n extern int\t\tm16_simm4_1 PARAMS ((rtx, enum machine_mode));\n extern int\t\tm16_nsimm4_1 PARAMS ((rtx, enum machine_mode));\n@@ -161,6 +140,11 @@ extern int\t\tm16_simm8_8 PARAMS ((rtx, enum machine_mode));\n extern int\t\tm16_nsimm8_8 PARAMS ((rtx, enum machine_mode));\n extern int\t\tm16_usym8_4 PARAMS ((rtx, enum machine_mode));\n extern int\t\tm16_usym5_4 PARAMS ((rtx, enum machine_mode));\n-#endif /* RTX_CODE */\n+\n+#ifdef RTX_CODE\n+extern rtx\t\tgen_int_relational PARAMS ((enum rtx_code, rtx, rtx,\n+\t\t\t\t\t\t    rtx,int *));\n+extern void\t\tgen_conditional_branch PARAMS ((rtx *, enum rtx_code));\n+#endif\n \n #endif /* ! GCC_MIPS_PROTOS_H */"}, {"sha": "88d7751f959c1cbd2330996cdeaa1cda76a606ca", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b7d57c7e7f79fbbe3798f783b799c0f386d7286/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b7d57c7e7f79fbbe3798f783b799c0f386d7286/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=6b7d57c7e7f79fbbe3798f783b799c0f386d7286", "patch": "@@ -6955,7 +6955,7 @@ mips_output_function_prologue (file, size)\n #ifndef FUNCTION_NAME_ALREADY_DECLARED\n   const char *fnname;\n #endif\n-  long tsize = current_frame_info.total_size;\n+  HOST_WIDE_INT tsize = current_frame_info.total_size;\n \n   ASM_OUTPUT_SOURCE_FILENAME (file, DECL_SOURCE_FILE (current_function_decl));\n \n@@ -7078,11 +7078,10 @@ mips_output_function_prologue (file, size)\n \t      || GET_CODE (offset) != CONST_INT)\n \t    continue;\n \t  if (REGNO (base) == (unsigned) STACK_POINTER_REGNUM\n-\t      && (unsigned HOST_WIDE_INT) INTVAL (offset)\n-\t      == tsize + (REGNO (src) - 4) * UNITS_PER_WORD)\n+\t      && INTVAL (offset) == tsize + (REGNO (src) - 4) * UNITS_PER_WORD)\n \t    ;\n \t  else if (REGNO (base) == (unsigned) HARD_FRAME_POINTER_REGNUM\n-\t\t   && ((unsigned HOST_WIDE_INT) INTVAL (offset)\n+\t\t   && (INTVAL (offset)\n \t\t       == (tsize\n \t\t\t   + (REGNO (src) - 4) * UNITS_PER_WORD\n \t\t\t   - current_function_outgoing_args_size)))"}, {"sha": "88a23e153f92499ef75344025da7b9b8c89f5afb", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b7d57c7e7f79fbbe3798f783b799c0f386d7286/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b7d57c7e7f79fbbe3798f783b799c0f386d7286/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=6b7d57c7e7f79fbbe3798f783b799c0f386d7286", "patch": "@@ -875,31 +875,43 @@ while (0)\n %{mabi=*} \\\n %{!mabi=*:%{mips1|mips2|mips32:-mabi=32} %{!mips1:%{!mips2:%{!mips32:-mabi=64}}}}\"\n \n-#elif MIPS_ABI_DEFAULT == ABI_32\n+#else\n+#if MIPS_ABI_DEFAULT == ABI_32\n #define ABI_GAS_ASM_SPEC \"%{mabi=*} %{!mabi=*:-mabi=32}\"\n \n-#elif MIPS_ABI_DEFAULT == ABI_N32\n+#else\n+#if MIPS_ABI_DEFAULT == ABI_N32\n #define ABI_GAS_ASM_SPEC \"%{mabi=*} %{!mabi=*:-mabi=n32}\"\n \n-#elif MIPS_ABI_DEFAULT == ABI_64\n+#else\n+#if MIPS_ABI_DEFAULT == ABI_64\n #define ABI_GAS_ASM_SPEC \"%{mabi=*} %{!mabi=*:-mabi=64}\"\n \n-#elif MIPS_ABI_DEFAULT == ABI_EABI\n+#else\n+#if MIPS_ABI_DEFAULT == ABI_EABI\n #define ABI_GAS_ASM_SPEC \"%{mabi=*} %{!mabi=*:-mabi=eabi}\"\n \n-#elif MIPS_ABI_DEFAULT == ABI_O64\n+#else\n+#if MIPS_ABI_DEFAULT == ABI_O64\n #define ABI_GAS_ASM_SPEC \"\\\n %{mabi=*} \\\n %{!mabi=*:%{mips1|mips2|mips32:-mabi=32} %{!mips1:%{!mips2:%{!mips32:-mabi=o64}}}}\"\n \n-#elif MIPS_ABI_DEFAULT == ABI_MEABI\n+#else\n+#if MIPS_ABI_DEFAULT == ABI_MEABI\n #define ABI_GAS_ASM_SPEC \"\\\n %{mabi=*} \\\n %{!mabi=*:-mabi=meabi }\"\n \n #else\n  #error \"Unhandled MIPS_ABI_DEFAULT\"\n #endif\n+#endif\n+#endif\n+#endif\n+#endif\n+#endif\n+#endif\n \n \n /* TARGET_ASM_SPEC is used to select either MIPS_AS_ASM_SPEC or"}]}