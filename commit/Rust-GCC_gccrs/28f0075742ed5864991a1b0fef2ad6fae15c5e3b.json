{"sha": "28f0075742ed5864991a1b0fef2ad6fae15c5e3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhmMDA3NTc0MmVkNTg2NDk5MWExYjBmZWYyYWQ2ZmFlMTVjNWUzYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-09-10T09:08:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-09-10T09:08:20Z"}, "message": "LWG 3266. to_chars(bool) should be deleted\n\nThe standard requires overloads of std::to_chars for char and (un)signed\ninteger types. This means that our constrained function template is\nnon-conforming, because the difference is observable when using types\nthat convert to an integer (e.g. wchar_t, which promotes).\n\nAs well as defining the deleted bool overload for LWG 3266, replace the\nconstrained function template with overloads for each type.\n\n\t* include/std/charconv (to_chars): Rename to __to_chars_i. Define\n\tnon-template overloads for each signed and unsigned integer type and\n\tchar. Define deleted overload for bool (LWG 3266).\n\t* testsuite/20_util/to_chars/1_neg.cc: Remove.\n\t* testsuite/20_util/to_chars/3.cc: New test.\n\t* testsuite/20_util/to_chars/lwg3266.cc: New test.\n\nFrom-SVN: r275588", "tree": {"sha": "7e38bb48bc714023dc2a9307fdf815dc5a6ed3cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e38bb48bc714023dc2a9307fdf815dc5a6ed3cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28f0075742ed5864991a1b0fef2ad6fae15c5e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f0075742ed5864991a1b0fef2ad6fae15c5e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f0075742ed5864991a1b0fef2ad6fae15c5e3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f0075742ed5864991a1b0fef2ad6fae15c5e3b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "873140e65d4332557301db341eb40ed285e34c6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/873140e65d4332557301db341eb40ed285e34c6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/873140e65d4332557301db341eb40ed285e34c6d"}], "stats": {"total": 125, "additions": 112, "deletions": 13}, "files": [{"sha": "b7f823e4a825c66e39e5ee850287a20a9b5b4fc8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f0075742ed5864991a1b0fef2ad6fae15c5e3b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f0075742ed5864991a1b0fef2ad6fae15c5e3b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=28f0075742ed5864991a1b0fef2ad6fae15c5e3b", "patch": "@@ -1,3 +1,12 @@\n+2019-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/charconv (to_chars): Rename to __to_chars_i. Define\n+\tnon-template overloads for each signed and unsigned integer type and\n+\tchar. Define deleted overload for bool (LWG 3266).\n+\t* testsuite/20_util/to_chars/1_neg.cc: Remove.\n+\t* testsuite/20_util/to_chars/3.cc: New test.\n+\t* testsuite/20_util/to_chars/lwg3266.cc: New test.\n+\n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n \n \t* acinclude.m4: Handle uclinux*."}, {"sha": "65f183f61f40fc2f3f65563984281eb1c0ab7697", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f0075742ed5864991a1b0fef2ad6fae15c5e3b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f0075742ed5864991a1b0fef2ad6fae15c5e3b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=28f0075742ed5864991a1b0fef2ad6fae15c5e3b", "patch": "@@ -305,7 +305,7 @@ namespace __detail\n \n   template<typename _Tp>\n     __detail::__integer_to_chars_result_type<_Tp>\n-    to_chars(char* __first, char* __last, _Tp __value, int __base = 10)\n+    __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)\n     {\n       __glibcxx_assert(2 <= __base && __base <= 36);\n \n@@ -341,6 +341,43 @@ namespace __detail\n       }\n     }\n \n+#define _GLIBCXX_TO_CHARS(T) \\\n+  inline to_chars_result \\\n+  to_chars(char* __first, char* __last, T __value, int __base = 10) \\\n+  { return std::__to_chars_i<T>(__first, __last, __value, __base); }\n+_GLIBCXX_TO_CHARS(char)\n+_GLIBCXX_TO_CHARS(signed char)\n+_GLIBCXX_TO_CHARS(unsigned char)\n+_GLIBCXX_TO_CHARS(signed short)\n+_GLIBCXX_TO_CHARS(unsigned short)\n+_GLIBCXX_TO_CHARS(signed int)\n+_GLIBCXX_TO_CHARS(unsigned int)\n+_GLIBCXX_TO_CHARS(signed long)\n+_GLIBCXX_TO_CHARS(unsigned long)\n+_GLIBCXX_TO_CHARS(signed long long)\n+_GLIBCXX_TO_CHARS(unsigned long long)\n+#if defined(__GLIBCXX_TYPE_INT_N_0)\n+_GLIBCXX_TO_CHARS(signed __GLIBCXX_TYPE_INT_N_0)\n+_GLIBCXX_TO_CHARS(unsigned __GLIBCXX_TYPE_INT_N_0)\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_1)\n+_GLIBCXX_TO_CHARS(signed __GLIBCXX_TYPE_INT_N_1)\n+_GLIBCXX_TO_CHARS(unsigned __GLIBCXX_TYPE_INT_N_1)\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_2)\n+_GLIBCXX_TO_CHARS(signed __GLIBCXX_TYPE_INT_N_2)\n+_GLIBCXX_TO_CHARS(unsigned __GLIBCXX_TYPE_INT_N_2)\n+#endif\n+#if defined(__GLIBCXX_TYPE_INT_N_3)\n+_GLIBCXX_TO_CHARS(signed __GLIBCXX_TYPE_INT_N_3)\n+_GLIBCXX_TO_CHARS(unsigned __GLIBCXX_TYPE_INT_N_3)\n+#endif\n+#undef _GLIBCXX_TO_CHARS\n+\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 3266. to_chars(bool) should be deleted\n+  to_chars_result to_chars(char*, char*, bool, int = 10) = delete;\n+\n namespace __detail\n {\n   template<typename _Tp>"}, {"sha": "f8372fd701376c1f1c35eab0ff03426dd03c9ea3", "filename": "libstdc++-v3/testsuite/20_util/to_chars/3.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f0075742ed5864991a1b0fef2ad6fae15c5e3b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f0075742ed5864991a1b0fef2ad6fae15c5e3b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2F3.cc?ref=28f0075742ed5864991a1b0fef2ad6fae15c5e3b", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-string-conversions \"\" }\n+\n+#include <charconv>\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+template<typename C>\n+bool\n+check_to_chars(C val)\n+{\n+  using std::string_view;\n+\n+  char buf1[32], buf2[32], buf3[32];\n+  std::to_chars_result r1 = std::to_chars(buf1, buf1+sizeof(buf1), val);\n+  if (r1.ec != std::errc{})\n+    return false;\n+  std::to_chars_result r2 = std::to_chars(buf2, buf2+sizeof(buf2), val, 10);\n+  if (r2.ec != std::errc{})\n+    return false;\n+  if (string_view(buf1, r1.ptr - buf1) != string_view(buf2, r2.ptr - buf2))\n+    return false;\n+  std::to_chars_result r3 = std::to_chars(buf3, buf3+sizeof(buf3), (long)val);\n+  if (string_view(buf1, r1.ptr - buf1) != string_view(buf3, r3.ptr - buf3))\n+    return false;\n+  return true;\n+}\n+\n+void\n+test01()\n+{\n+  VERIFY( check_to_chars(u'\\x21') );\n+  VERIFY( check_to_chars(U'\\x21') );\n+#if _GLIBCXX_USE_WCHAR_T\n+  VERIFY( check_to_chars(L'\\x21') );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "01c2c6ccbee18b61de9f7913df46e324a4e7472e", "filename": "libstdc++-v3/testsuite/20_util/to_chars/lwg3266.cc", "status": "renamed", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f0075742ed5864991a1b0fef2ad6fae15c5e3b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flwg3266.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f0075742ed5864991a1b0fef2ad6fae15c5e3b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flwg3266.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flwg3266.cc?ref=28f0075742ed5864991a1b0fef2ad6fae15c5e3b", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2017-2019 Free Software Foundation, Inc.\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,15 +23,8 @@\n void\n test01(char* first, char* last)\n {\n-#if _GLIBCXX_USE_WCHAR_T\n-  std::to_chars(first, last, L'\\x1'); // { dg-error \"no matching\" }\n-  std::to_chars(first, last, L'\\x1', 10); // { dg-error \"no matching\" }\n-#endif\n-\n-  std::to_chars(first, last, u'\\x1'); // { dg-error \"no matching\" }\n-  std::to_chars(first, last, u'\\x1', 10); // { dg-error \"no matching\" }\n-  std::to_chars(first, last, U'\\x1'); // { dg-error \"no matching\" }\n-  std::to_chars(first, last, U'\\x1', 10); // { dg-error \"no matching\" }\n+  // LWG 3266. to_chars(bool) should be deleted\n+  char buf;\n+  std::to_chars(&buf, &buf + 1, true);\t    // { dg-error \"deleted function\" }\n+  std::to_chars(&buf, &buf + 1, false, 10); // { dg-error \"deleted function\" }\n }\n-\n-// { dg-prune-output \"enable_if\" }", "previous_filename": "libstdc++-v3/testsuite/20_util/to_chars/1_neg.cc"}]}