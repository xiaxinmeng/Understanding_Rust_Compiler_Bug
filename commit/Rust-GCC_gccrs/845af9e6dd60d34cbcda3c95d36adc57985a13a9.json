{"sha": "845af9e6dd60d34cbcda3c95d36adc57985a13a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ1YWY5ZTZkZDYwZDM0Y2JjZGEzYzk1ZDM2YWRjNTc5ODVhMTNhOQ==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-18T09:11:02Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-18T09:11:02Z"}, "message": "[multiple changes]\n\n2017-09-18  Bob Duff  <duff@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Qualified_Expression): Give an error if the type\n\tmark refers to the current instance. Set the type to Any_Type in that\n\tcase, to avoid later crashes.\n\n2017-09-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Replace_Discriminant_References): New procedure,\n\tsubsidiary of Build_Assignment, used to handle the initialization code\n\tfor a mutable record component whose default value is an aggregate that\n\tsets the values of the discriminants of the components.\n\n2017-09-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* gnat.dg/default_variants.adb: New testcase.\n\n2017-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause) <Address>: Mark\n\tthe entity as being volatile for an overlay that toggles the scalar\n\tstorage order.\n\n2017-09-18  Fedor Rybin  <frybin@adacore.com>\n\n\t* doc/gnat_ugn/gnat_utility_programs.rst: Document that gnattest\n\toptions -U main and --harness-only are not compatible.\n\nFrom-SVN: r252913", "tree": {"sha": "215409f81228d96bb783b501f1dda1a194ca0e28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/215409f81228d96bb783b501f1dda1a194ca0e28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/845af9e6dd60d34cbcda3c95d36adc57985a13a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/845af9e6dd60d34cbcda3c95d36adc57985a13a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/845af9e6dd60d34cbcda3c95d36adc57985a13a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/845af9e6dd60d34cbcda3c95d36adc57985a13a9/comments", "author": null, "committer": null, "parents": [{"sha": "d7cc5f0ebf32bdcef1a30833a00ff2dd92f00a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7cc5f0ebf32bdcef1a30833a00ff2dd92f00a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7cc5f0ebf32bdcef1a30833a00ff2dd92f00a1c"}], "stats": {"total": 144, "additions": 143, "deletions": 1}, "files": [{"sha": "5dba677203ff58446e339994f0902bb73c74ab2b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=845af9e6dd60d34cbcda3c95d36adc57985a13a9", "patch": "@@ -1,3 +1,27 @@\n+2017-09-18  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Qualified_Expression): Give an error if the type\n+\tmark refers to the current instance. Set the type to Any_Type in that\n+\tcase, to avoid later crashes.\n+\n+2017-09-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Replace_Discriminant_References): New procedure,\n+\tsubsidiary of Build_Assignment, used to handle the initialization code\n+\tfor a mutable record component whose default value is an aggregate that\n+\tsets the values of the discriminants of the components.\n+\n+2017-09-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause) <Address>: Mark\n+\tthe entity as being volatile for an overlay that toggles the scalar\n+\tstorage order.\n+\n+2017-09-18  Fedor Rybin  <frybin@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_utility_programs.rst: Document that gnattest\n+\toptions -U main and --harness-only are not compatible.\n+\n 2017-09-18  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* freeze.adb, sem_ch6.adb, sem_res.adb: Minor reformatting."}, {"sha": "91363500ab8978d3369654930a8f99a44e4d0d41", "filename": "gcc/ada/doc/gnat_ugn/gnat_utility_programs.rst", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_utility_programs.rst?ref=845af9e6dd60d34cbcda3c95d36adc57985a13a9", "patch": "@@ -4314,7 +4314,8 @@ Alternatively, you may run the script using the following command line:\n \n   :switch:`--harness-only`\n     When this option is given, ``gnattest`` creates a harness for all\n-    sources, treating them as test packages.\n+    sources, treating them as test packages. This option is not compatible with\n+    closure computation done by -U main.\n \n \n     .. index:: --separate-drivers (gnattest)"}, {"sha": "0fcf7235eee4eb5cf3ab6d96e190fcc3d6ec0518", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=845af9e6dd60d34cbcda3c95d36adc57985a13a9", "patch": "@@ -1782,13 +1782,65 @@ package body Exp_Ch3 is\n          Lhs      : Node_Id;\n          Res      : List_Id;\n \n+         function Replace_Discr_Ref (N : Node_Id) return Traverse_Result;\n+         --  Analysis of the aggregate has replaced discriminants by their\n+         --  corresponding discriminals, but these are irrelevant when the\n+         --  component has a mutable type and is initialized with an aggregate.\n+         --  Instead, they must be replaced by the values supplied in the\n+         --  aggregate, that will be assigned during the expansion of the\n+         --  assignment.\n+\n+         -----------------------\n+         -- Replace_Discr_Ref --\n+         -----------------------\n+\n+         function Replace_Discr_Ref (N : Node_Id) return Traverse_Result is\n+            Val : Node_Id;\n+         begin\n+            if Is_Entity_Name (N)\n+              and then Present (Entity (N))\n+              and then Is_Formal (Entity (N))\n+              and then Present (Discriminal_Link (Entity (N)))\n+            then\n+               Val :=\n+                  Make_Selected_Component (N_Loc,\n+                    Prefix => New_Copy_Tree (Lhs),\n+                    Selector_Name => New_Occurrence_Of\n+                      (Discriminal_Link (Entity (N)), N_Loc));\n+               if Present (Val) then\n+                  Rewrite (N, New_Copy_Tree (Val));\n+               end if;\n+            end if;\n+\n+            return OK;\n+         end Replace_Discr_Ref;\n+\n+         procedure Replace_Discriminant_References is\n+           new Traverse_Proc (Replace_Discr_Ref);\n+\n       begin\n          Lhs :=\n            Make_Selected_Component (N_Loc,\n              Prefix        => Make_Identifier (Loc, Name_uInit),\n              Selector_Name => New_Occurrence_Of (Id, N_Loc));\n          Set_Assignment_OK (Lhs);\n \n+         if Nkind (Exp) = N_Aggregate\n+           and then Has_Discriminants (Typ)\n+           and then not Is_Constrained (Base_Type (Typ))\n+         then\n+            --  The aggregate may provide new values for the discriminants\n+            --  of the component, and other components may depend on those\n+            --  discriminants. Previous analysis of those expressions have\n+            --  replaced the discriminants by the formals of the initialization\n+            --  procedure for the type, but these are irrelevant in the\n+            --  enclosing initialization procedure: those discriminant\n+            --  references must be replaced by the values provided in the\n+            --  aggregate.\n+\n+            Replace_Discriminant_References (Exp);\n+         end if;\n+\n          --  Case of an access attribute applied to the current instance.\n          --  Replace the reference to the type by a reference to the actual\n          --  object. (Note that this handles the case of the top level of"}, {"sha": "7a5c85d387faa620627f8fcaba16d790d935829b", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=845af9e6dd60d34cbcda3c95d36adc57985a13a9", "patch": "@@ -5084,6 +5084,22 @@ package body Sem_Ch13 is\n                         Register_Address_Clause_Check\n                           (N, U_Ent, No_Uint, O_Ent, Off);\n                      end if;\n+\n+                     --  If the overlay changes the storage order, mark the\n+                     --  entity as being volatile to block any optimization\n+                     --  for it since the construct is not really supported\n+                     --  by the back end.\n+\n+                     if (Is_Record_Type (Etype (U_Ent))\n+                          or else Is_Array_Type (Etype (U_Ent)))\n+                       and then (Is_Record_Type (Etype (O_Ent))\n+                                  or else Is_Array_Type (Etype (O_Ent)))\n+                       and then Reverse_Storage_Order (Etype (U_Ent))\n+                                      /= Reverse_Storage_Order (Etype (O_Ent))\n+                     then\n+                        Set_Treat_As_Volatile (U_Ent);\n+                     end if;\n+\n                   else\n                      --  If this is not an overlay, mark a variable as being\n                      --  volatile to prevent unwanted optimizations. It's a"}, {"sha": "01f5f5e7732417213ad708bc266c472ba7771209", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=845af9e6dd60d34cbcda3c95d36adc57985a13a9", "patch": "@@ -3930,6 +3930,23 @@ package body Sem_Ch4 is\n       Set_Etype (N, Any_Type);\n       Find_Type (Mark);\n       T := Entity (Mark);\n+\n+      if Nkind_In\n+        (Enclosing_Declaration (N),\n+         N_Formal_Type_Declaration,\n+         N_Full_Type_Declaration,\n+         N_Incomplete_Type_Declaration,\n+         N_Protected_Type_Declaration,\n+         N_Private_Extension_Declaration,\n+         N_Private_Type_Declaration,\n+         N_Subtype_Declaration,\n+         N_Task_Type_Declaration)\n+        and then T = Defining_Identifier (Enclosing_Declaration (N))\n+      then\n+         Error_Msg_N (\"current instance not allowed\", Mark);\n+         T := Any_Type;\n+      end if;\n+\n       Set_Etype (N, T);\n \n       if T = Any_Type then"}, {"sha": "d7e95dc7f4ef1d322468fce6590f708f76a6ae6f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=845af9e6dd60d34cbcda3c95d36adc57985a13a9", "patch": "@@ -1,3 +1,7 @@\n+2017-09-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/default_variants.adb: New testcase.\n+\n 2017-09-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/81736"}, {"sha": "2a8257e4aebebfc12ff95d65e3fba5c66a5710f9", "filename": "gcc/testsuite/gnat.dg/default_variants.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Ftestsuite%2Fgnat.dg%2Fdefault_variants.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/845af9e6dd60d34cbcda3c95d36adc57985a13a9/gcc%2Ftestsuite%2Fgnat.dg%2Fdefault_variants.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdefault_variants.adb?ref=845af9e6dd60d34cbcda3c95d36adc57985a13a9", "patch": "@@ -0,0 +1,28 @@\n+--  { dg-do compile }\n+\n+procedure Default_Variants is\n+\n+   type Variant_Kind is (A, B);\n+\n+   function Get_Default_Value (Kind : in Variant_Kind) return Natural is (10);\n+\n+   type Variant_Type (Kind : Variant_Kind := A) is\n+      record\n+         Common : Natural := Get_Default_Value (Kind);\n+         case Kind is\n+            when A =>\n+               A_Value : Integer := Integer'First;\n+            when B =>\n+               B_Value : Natural := Natural'First;\n+         end case;\n+      end record;\n+\n+   type Containing_Type is tagged\n+      record\n+         Variant_Data : Variant_Type :=\n+               (Kind => B, Common => <>, B_Value => 1);\n+      end record;\n+\n+begin\n+    null;\n+end Default_Variants;"}]}