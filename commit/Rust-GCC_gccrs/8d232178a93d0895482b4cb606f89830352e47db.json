{"sha": "8d232178a93d0895482b4cb606f89830352e47db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyMzIxNzhhOTNkMDg5NTQ4MmI0Y2I2MDZmODk4MzAzNTJlNDdkYg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2009-10-11T20:06:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-10-11T20:06:12Z"}, "message": "re PR target/33743 (unwinding through signal frames)\n\n\tPR target/33743\n\t* config/i386/sol2.h (MD_UNWIND_SUPPORT): Define.\n\t* config/i386/sol2-unwind.h: New file.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r152648", "tree": {"sha": "d1463f445379654b0a367daf3b9e0acd270002b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1463f445379654b0a367daf3b9e0acd270002b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d232178a93d0895482b4cb606f89830352e47db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d232178a93d0895482b4cb606f89830352e47db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d232178a93d0895482b4cb606f89830352e47db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d232178a93d0895482b4cb606f89830352e47db/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1d4f419ea1ead6239dc56460e22518d71ea7faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d4f419ea1ead6239dc56460e22518d71ea7faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d4f419ea1ead6239dc56460e22518d71ea7faf"}], "stats": {"total": 217, "additions": 217, "deletions": 0}, "files": [{"sha": "ef2b9a572efa61a9ed9aa6b9f6c1972156846f80", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d232178a93d0895482b4cb606f89830352e47db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d232178a93d0895482b4cb606f89830352e47db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d232178a93d0895482b4cb606f89830352e47db", "patch": "@@ -1,3 +1,10 @@\n+2009-10-11  Olivier Hainque  <hainque@adacore.com>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/33743\n+\t* config/i386/sol2.h (MD_UNWIND_SUPPORT): Define.\n+\t* config/i386/sol2-unwind.h: New file.\n+\n 2009-10-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/41665"}, {"sha": "41ffb03b6cd8e9991ed2b5a55ff7b4ee547a0fb3", "filename": "gcc/config/i386/sol2-unwind.h", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d232178a93d0895482b4cb606f89830352e47db/gcc%2Fconfig%2Fi386%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d232178a93d0895482b4cb606f89830352e47db/gcc%2Fconfig%2Fi386%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-unwind.h?ref=8d232178a93d0895482b4cb606f89830352e47db", "patch": "@@ -0,0 +1,208 @@\n+/* DWARF2 EH unwinding support for AMD x86-64 and x86.\n+   Copyright (C) 2009 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs.  */\n+\n+#include <ucontext.h>\n+\n+#ifdef __x86_64__\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR x86_64_fallback_frame_state\n+\n+static _Unwind_Reason_Code\n+x86_64_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t     _Unwind_FrameState *fs)\n+{\n+  unsigned char *pc = context->ra;\n+  mcontext_t *mctx;\n+  long new_cfa;\n+\n+  if (/* Solaris 2.10\n+\t------------\n+\t<__sighndlr+0>:      push   %rbp\n+\t<__sighndlr+1>:      mov    %rsp,%rbp\n+\t<__sighndlr+4>:      callq  *%rcx\n+\t<__sighndlr+6>:      leaveq           <--- PC\n+\t<__sighndlr+7>:      retq  */\n+      *(unsigned long *)(pc - 6) == 0xc3c9d1ffe5894855)\n+    /* We need to move up four frames (the kernel frame, the signal frame,\n+       the call_user_handler frame and the __sighndlr frame).  Two of them\n+       have the minimum stack frame size (kernel and __sighndlr frames),\n+       the signal frame has a stack frame size of 32 and there is another\n+       with a stack frame size of 112 bytes (the call_user_handler frame).\n+       The ucontext_t structure is after this offset.  */\n+    {\n+      int off = 16 + 16 + 32 + 112;\n+      mctx = &((ucontext_t *) (context->cfa + off))->uc_mcontext;\n+    }\n+  else\n+    return _URC_END_OF_STACK;\n+\n+  new_cfa = mctx->gregs[REG_RSP];\n+\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 7;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n+\n+  /* The SVR4 register numbering macros aren't usable in libgcc.  */\n+  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[0].loc.offset = (long)&mctx->gregs[REG_RAX] - new_cfa;\n+  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[1].loc.offset = (long)&mctx->gregs[REG_RDX] - new_cfa;\n+  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[2].loc.offset = (long)&mctx->gregs[REG_RCX] - new_cfa;\n+  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[3].loc.offset = (long)&mctx->gregs[REG_RBX] - new_cfa;\n+  fs->regs.reg[4].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[4].loc.offset = (long)&mctx->gregs[REG_RSI] - new_cfa;\n+  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[5].loc.offset = (long)&mctx->gregs[REG_RDI] - new_cfa;\n+  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[6].loc.offset = (long)&mctx->gregs[REG_RBP] - new_cfa;\n+  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[8].loc.offset = (long)&mctx->gregs[REG_R8] - new_cfa;\n+  fs->regs.reg[9].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[9].loc.offset = (long)&mctx->gregs[REG_R9] - new_cfa;\n+  fs->regs.reg[10].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[10].loc.offset = (long)&mctx->gregs[REG_R10] - new_cfa;\n+  fs->regs.reg[11].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[11].loc.offset = (long)&mctx->gregs[REG_R11] - new_cfa;\n+  fs->regs.reg[12].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[12].loc.offset = (long)&mctx->gregs[REG_R12] - new_cfa;\n+  fs->regs.reg[13].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[13].loc.offset = (long)&mctx->gregs[REG_R13] - new_cfa;\n+  fs->regs.reg[14].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[14].loc.offset = (long)&mctx->gregs[REG_R14] - new_cfa;\n+  fs->regs.reg[15].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[15].loc.offset = (long)&mctx->gregs[REG_R15] - new_cfa;\n+  fs->regs.reg[16].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[16].loc.offset = (long)&mctx->gregs[REG_RIP] - new_cfa;\n+  fs->retaddr_column = 16;\n+  fs->signal_frame = 1;\n+\n+  return _URC_NO_REASON;\n+}\n+\n+#else\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR x86_fallback_frame_state\n+\n+static _Unwind_Reason_Code\n+x86_fallback_frame_state (struct _Unwind_Context *context,\n+\t\t\t  _Unwind_FrameState *fs)\n+{\n+  unsigned char *pc = context->ra;\n+  mcontext_t *mctx;\n+  long new_cfa;\n+\n+  if (/* Solaris 2.8 - single thread\n+\t-------------------------\n+\t<sigacthandler+17>:  mov    0x10(%ebp),%esi\n+\t<sigacthandler+20>:  push   %esi\n+\t<sigacthandler+21>:  pushl  0xc(%ebp)\n+\t<sigacthandler+24>:  mov    0x8(%ebp),%ecx\n+\t<sigacthandler+27>:  push   %ecx\n+\t<sigacthandler+28>:  mov    offset(%ebx),%eax\n+\t<sigacthandler+34>:  call   *(%eax,%ecx,4)\n+\t<sigacthandler+37>:  add    $0xc,%esp        <--- PC\n+\t<sigacthandler+40>:  push   %esi ... */\n+      (*(unsigned long *)(pc - 20) == 0x5610758b\n+       && *(unsigned long *)(pc - 16) == 0x8b0c75ff\n+       && *(unsigned long *)(pc - 12) == 0x8b51084d\n+       && *(unsigned char *)(pc - 8)  == 0x83\n+       && *(unsigned long *)(pc - 4)  == 0x8814ff00\n+       && *(unsigned long *)(pc - 0)  == 0x560cc483)\n+\n+      || /* Solaris 2.8 - multi thread\n+\t   ---------------------------\n+\t   <__sighndlr+0>:      push   %ebp\n+\t   <__sighndlr+1>:      mov    %esp,%ebp\n+\t   <__sighndlr+3>:      pushl  0x10(%ebp)\n+\t   <__sighndlr+6>:      pushl  0xc(%ebp)\n+\t   <__sighndlr+9>:      pushl  0x8(%ebp)\n+\t   <__sighndlr+12>:     call   *0x14(%ebp)\n+\t   <__sighndlr+15>:     leave               <--- PC  */\n+\t (*(unsigned long *)(pc - 15) == 0xffec8b55\n+\t  && *(unsigned long *)(pc - 11) == 0x75ff1075\n+\t  && *(unsigned long *)(pc - 7)  == 0x0875ff0c\n+\t  && *(unsigned long *)(pc - 3)  == 0xc91455ff)\n+\n+      || /* Solaris 2.10\n+\t   ------------\n+\t   <__sighndlr+0>:      push   %ebp\n+\t   <__sighndlr+1>:      mov    %esp,%ebp\n+\t   <__sighndlr+3>:      pushl  0x10(%ebp)\n+\t   <__sighndlr+6>:      pushl  0xc(%ebp)\n+\t   <__sighndlr+9>:      pushl  0x8(%ebp)\n+\t   <__sighndlr+12>:     call   *0x14(%ebp)\n+\t   <__sighndlr+15>:     add    $0xc,%esp     <--- PC\n+\t   <__sighndlr+18>:     leave\n+\t   <__sighndlr+19>:     ret  */\n+\t (*(unsigned long *)(pc - 15) == 0xffec8b55\n+\t  && *(unsigned long *)(pc - 11) == 0x75ff1075\n+\t  && *(unsigned long *)(pc - 7)  == 0x0875ff0c\n+\t  && *(unsigned long *)(pc - 3)  == 0x831455ff\n+\t  && *(unsigned long *)(pc + 1)  == 0xc3c90cc4))\n+    {\n+      struct handler_args {\n+\tint signo;\n+\tsiginfo_t *sip;\n+\tucontext_t *ucontext;\n+      } *handler_args = context->cfa;\n+      mctx = &handler_args->ucontext->uc_mcontext;\n+    }\n+  else\n+    return _URC_END_OF_STACK;\n+\n+  new_cfa = mctx->gregs[UESP];\n+\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 4;\n+  fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n+\n+  /* The SVR4 register numbering macros aren't usable in libgcc.  */\n+  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[0].loc.offset = (long)&mctx->gregs[EAX] - new_cfa;\n+  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[3].loc.offset = (long)&mctx->gregs[EBX] - new_cfa;\n+  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[1].loc.offset = (long)&mctx->gregs[ECX] - new_cfa;\n+  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[2].loc.offset = (long)&mctx->gregs[EDX] - new_cfa;\n+  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[6].loc.offset = (long)&mctx->gregs[ESI] - new_cfa;\n+  fs->regs.reg[7].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[7].loc.offset = (long)&mctx->gregs[EDI] - new_cfa;\n+  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[5].loc.offset = (long)&mctx->gregs[EBP] - new_cfa;\n+  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[8].loc.offset = (long)&mctx->gregs[EIP] - new_cfa;\n+  fs->retaddr_column = 8;\n+  fs->signal_frame = 1;\n+\n+  return _URC_NO_REASON;\n+}\n+\n+#endif"}, {"sha": "f062280fd18f9d99b150e1f2189535359324d988", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d232178a93d0895482b4cb606f89830352e47db/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d232178a93d0895482b4cb606f89830352e47db/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=8d232178a93d0895482b4cb606f89830352e47db", "patch": "@@ -118,3 +118,5 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef TARGET_GNU_LD\n #define USE_HIDDEN_LINKONCE 0\n #endif\n+\n+#define MD_UNWIND_SUPPORT \"config/i386/sol2-unwind.h\""}]}