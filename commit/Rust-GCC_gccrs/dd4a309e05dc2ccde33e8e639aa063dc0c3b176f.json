{"sha": "dd4a309e05dc2ccde33e8e639aa063dc0c3b176f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ0YTMwOWUwNWRjMmNjZGUzM2U4ZTYzOWFhMDYzZGMwYzNiMTc2Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-05T16:56:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-05T16:56:31Z"}, "message": "Use hidden friends for directory iterator comparisons\n\nThe equality operators for directory iterators are not explicitly\nspecified in the standard, they're only required to meet the iterator\nrequirements. This means we don't need to declare them at namespace\nscope and can implement them as hidden friends.\n\nAlso add 'noexcept' to directory_iterator's dereference operators.\n\n\t* include/bits/fs_dir.h (directory_iterator::operator*)\n\t(directory_iterator::operator->): Add noexcept.\n\t(operator==, operator!=): Replace namespace-scope equality operators\n\tfor directory iterators with hidden friends.\n\nFrom-SVN: r270175", "tree": {"sha": "fcb73eaf3b2bdb495b2dcd5d39e0b1e79f9ab829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcb73eaf3b2bdb495b2dcd5d39e0b1e79f9ab829"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd4a309e05dc2ccde33e8e639aa063dc0c3b176f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4a309e05dc2ccde33e8e639aa063dc0c3b176f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4a309e05dc2ccde33e8e639aa063dc0c3b176f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4a309e05dc2ccde33e8e639aa063dc0c3b176f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67087c7e53b64dc58a2440903275bd0b9db110df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67087c7e53b64dc58a2440903275bd0b9db110df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67087c7e53b64dc58a2440903275bd0b9db110df"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "65b16d8e68be6e8824dfbeb21a9c035ee6848cf6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4a309e05dc2ccde33e8e639aa063dc0c3b176f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4a309e05dc2ccde33e8e639aa063dc0c3b176f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dd4a309e05dc2ccde33e8e639aa063dc0c3b176f", "patch": "@@ -1,5 +1,10 @@\n 2019-04-05  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/fs_dir.h (directory_iterator::operator*)\n+\t(directory_iterator::operator->): Add noexcept.\n+\t(operator==, operator!=): Replace namespace-scope equality operators\n+\tfor directory iterators with hidden friends.\n+\n \tPR libstdc++/89986\n \t* config/abi/pre/gnu.ver: Add missing exports.\n \t* testsuite/27_io/filesystem/iterators/directory_iterator.cc: Test"}, {"sha": "69f0eb825fe7d264438aba7ebe5ad21fe35c71a5", "filename": "libstdc++-v3/include/bits/fs_dir.h", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd4a309e05dc2ccde33e8e639aa063dc0c3b176f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd4a309e05dc2ccde33e8e639aa063dc0c3b176f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_dir.h?ref=dd4a309e05dc2ccde33e8e639aa063dc0c3b176f", "patch": "@@ -390,8 +390,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     directory_iterator&\n     operator=(directory_iterator&& __rhs) noexcept = default;\n \n-    const directory_entry& operator*() const;\n-    const directory_entry* operator->() const { return &**this; }\n+    const directory_entry& operator*() const noexcept;\n+    const directory_entry* operator->() const noexcept { return &**this; }\n     directory_iterator&    operator++();\n     directory_iterator&    increment(error_code& __ec);\n \n@@ -407,7 +407,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     friend bool\n     operator==(const directory_iterator& __lhs,\n-               const directory_iterator& __rhs);\n+               const directory_iterator& __rhs) noexcept\n+    {\n+      return !__rhs._M_dir.owner_before(__lhs._M_dir)\n+\t&& !__lhs._M_dir.owner_before(__rhs._M_dir);\n+    }\n+\n+    friend bool\n+    operator!=(const directory_iterator& __lhs,\n+\t       const directory_iterator& __rhs) noexcept\n+    { return !(__lhs == __rhs); }\n \n     friend class recursive_directory_iterator;\n \n@@ -422,17 +431,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   end(directory_iterator) noexcept\n   { return directory_iterator(); }\n \n-  inline bool\n-  operator==(const directory_iterator& __lhs, const directory_iterator& __rhs)\n-  {\n-    return !__rhs._M_dir.owner_before(__lhs._M_dir)\n-      && !__lhs._M_dir.owner_before(__rhs._M_dir);\n-  }\n-\n-  inline bool\n-  operator!=(const directory_iterator& __lhs, const directory_iterator& __rhs)\n-  { return !(__lhs == __rhs); }\n-\n   class recursive_directory_iterator\n   {\n   public:\n@@ -499,7 +497,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     friend bool\n     operator==(const recursive_directory_iterator& __lhs,\n-               const recursive_directory_iterator& __rhs);\n+               const recursive_directory_iterator& __rhs) noexcept\n+    {\n+      return !__rhs._M_dirs.owner_before(__lhs._M_dirs)\n+\t&& !__lhs._M_dirs.owner_before(__rhs._M_dirs);\n+    }\n+\n+    friend bool\n+    operator!=(const recursive_directory_iterator& __lhs,\n+               const recursive_directory_iterator& __rhs) noexcept\n+    { return !(__lhs == __rhs); }\n \n     struct _Dir_stack;\n     std::__shared_ptr<_Dir_stack> _M_dirs;\n@@ -513,19 +520,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   end(recursive_directory_iterator) noexcept\n   { return recursive_directory_iterator(); }\n \n-  inline bool\n-  operator==(const recursive_directory_iterator& __lhs,\n-             const recursive_directory_iterator& __rhs)\n-  {\n-    return !__rhs._M_dirs.owner_before(__lhs._M_dirs)\n-      && !__lhs._M_dirs.owner_before(__rhs._M_dirs);\n-  }\n-\n-  inline bool\n-  operator!=(const recursive_directory_iterator& __lhs,\n-             const recursive_directory_iterator& __rhs)\n-  { return !(__lhs == __rhs); }\n-\n _GLIBCXX_END_NAMESPACE_CXX11\n \n   // @} group filesystem"}]}