{"sha": "de4df14c7d6e8f5db942804e6fdc37033b46c3bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0ZGYxNGM3ZDZlOGY1ZGI5NDI4MDRlNmZkYzM3MDMzYjQ2YzNiYg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-11-02T11:14:42Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-11-02T11:14:42Z"}, "message": "improve darwin section ordering between debug/non-debug cases.\n\ngcc:\n\n\t* config/darwin.c (darwin_asm_named_section): Check for __DWARF\n\tsections and call darwin_asm_dwarf_section() to handle them.\n\t(darwin_asm_dwarf_section): New.\n\t(darwin_file_start): Remove code emitting dwarf section symbols.\n\ntestsuite:\n\n\t* g++.dg/debug/dwarf2/pubnames-1.C: Amend to check for only one instance\n\tof debug_pubnames on darwin.\n\nFrom-SVN: r166174", "tree": {"sha": "fc0bcf1ab9f91c1c880b1927fa764bec68f6d1a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc0bcf1ab9f91c1c880b1927fa764bec68f6d1a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de4df14c7d6e8f5db942804e6fdc37033b46c3bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4df14c7d6e8f5db942804e6fdc37033b46c3bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4df14c7d6e8f5db942804e6fdc37033b46c3bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4df14c7d6e8f5db942804e6fdc37033b46c3bb/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47afeed5cc59235c41c17f0c9fc7991ffc73ea1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47afeed5cc59235c41c17f0c9fc7991ffc73ea1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47afeed5cc59235c41c17f0c9fc7991ffc73ea1a"}], "stats": {"total": 153, "additions": 104, "deletions": 49}, "files": [{"sha": "a94206d9816c79b025501ec3882911f12c7590e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4df14c7d6e8f5db942804e6fdc37033b46c3bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4df14c7d6e8f5db942804e6fdc37033b46c3bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de4df14c7d6e8f5db942804e6fdc37033b46c3bb", "patch": "@@ -1,3 +1,10 @@\n+2010-11-02  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* config/darwin.c (darwin_asm_named_section): Check for __DWARF\n+\tsections and call darwin_asm_dwarf_section() to handle them.\n+\t(darwin_asm_dwarf_section): New.\n+\t(darwin_file_start): Remove code emitting dwarf section symbols.\n+\n 2010-11-02  Chung-Lin Tang <cltang@codesourcery.com>\n \n \t* Makefile.in (LIBGCC2_CFLAGS): Add -fno-stack-protector, to"}, {"sha": "210421cd2a78f95e8d5f6b86259c4f2da9152274", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 91, "deletions": 43, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4df14c7d6e8f5db942804e6fdc37033b46c3bb/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4df14c7d6e8f5db942804e6fdc37033b46c3bb/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=de4df14c7d6e8f5db942804e6fdc37033b46c3bb", "patch": "@@ -1459,6 +1459,11 @@ darwin_asm_lto_end (void)\n   saved_asm_out_file = NULL;\n }\n \n+static void\n+darwin_asm_dwarf_section (const char *name, unsigned int flags, tree decl);\n+\n+/*  Called for the TARGET_ASM_NAMED_SECTION hook.  */\n+\n void\n darwin_asm_named_section (const char *name,\n \t\t\t  unsigned int flags,\n@@ -1495,6 +1500,8 @@ darwin_asm_named_section (const char *name,\n       gcc_assert (lto_section_names_offset > 0\n \t\t  && lto_section_names_offset < ((unsigned) 1 << 31));\n     }\n+  else if (strncmp (name, \"__DWARF,\", 8) == 0)\n+    darwin_asm_dwarf_section (name, flags, decl);\n   else\n     fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n }\n@@ -1675,6 +1682,73 @@ darwin_assemble_visibility (tree decl, int vis)\n \t     \"not supported in this configuration; ignored\");\n }\n \n+/* VEC Used by darwin_asm_dwarf_section.\n+   Maybe a hash tab would be better here - but the intention is that this is\n+   a very short list (fewer than 16 items) and each entry should (ideally, \n+   eventually) only be presented once.\n+\n+   A structure to hold a dwarf debug section used entry.  */\n+\n+typedef struct GTY(()) dwarf_sect_used_entry {\n+  const char *name;\n+  unsigned count;\n+}\n+dwarf_sect_used_entry;\n+\n+DEF_VEC_O(dwarf_sect_used_entry);\n+DEF_VEC_ALLOC_O(dwarf_sect_used_entry, gc);\n+\n+/* A list of used __DWARF sections.  */\n+static GTY (()) VEC (dwarf_sect_used_entry, gc) * dwarf_sect_names_table;\n+\n+/* This is called when we are asked to assemble a named section and the \n+   name begins with __DWARF,.  We keep a list of the section names (without\n+   the __DWARF, prefix) and use this to emit our required start label on the\n+   first switch to each section.  */\n+\n+static void\n+darwin_asm_dwarf_section (const char *name, unsigned int flags,\n+\t\t\t  tree ARG_UNUSED (decl))\n+{\n+  unsigned i;\n+  int namelen;\n+  const char * sname;\n+  dwarf_sect_used_entry *ref;\n+  bool found = false;\n+  gcc_assert ((flags & (SECTION_DEBUG | SECTION_NAMED))\n+\t\t    == (SECTION_DEBUG | SECTION_NAMED));\n+  /* We know that the name starts with __DWARF,  */\n+  sname = name + 8;\n+  namelen = strchr (sname, ',') - sname;\n+  gcc_assert (namelen);\n+  if (dwarf_sect_names_table == NULL)\n+    dwarf_sect_names_table = VEC_alloc (dwarf_sect_used_entry, gc, 16);\n+  else\n+    for (i = 0; \n+\t VEC_iterate (dwarf_sect_used_entry, dwarf_sect_names_table, i, ref);\n+\t i++)\n+      {\n+\tif (!ref)\n+\t  break;\n+\tif (!strcmp (ref->name, sname))\n+\t  {\n+\t    found = true;\n+\t    ref->count++;\n+\t    break;\n+\t  }\n+      }\n+\n+  fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n+  if (!found)\n+    {\n+      dwarf_sect_used_entry e;\n+      fprintf (asm_out_file, \"Lsection%.*s:\\n\", namelen, sname);\n+      e.count = 1;\n+      e.name = xstrdup (sname);\n+      VEC_safe_push (dwarf_sect_used_entry, gc, dwarf_sect_names_table, &e);\n+    }\n+}\n+\n /* Output a difference of two labels that will be an assembly time\n    constant if the two labels are local.  (.long lab1-lab2 will be\n    very different if lab1 is at the boundary between two sections; it\n@@ -1703,49 +1777,6 @@ darwin_asm_output_dwarf_delta (FILE *file, int size,\n     fprintf (file, \"\\n\\t%s L$set$%d\", directive, darwin_dwarf_label_counter++);\n }\n \n-/* Output labels for the start of the DWARF sections if necessary.\n-   Initialize the stuff we need for LTO long section names support.  */\n-void\n-darwin_file_start (void)\n-{\n-  if (write_symbols == DWARF2_DEBUG)\n-    {\n-      static const char * const debugnames[] =\n-\t{\n-\t  DEBUG_FRAME_SECTION,\n-\t  DEBUG_INFO_SECTION,\n-\t  DEBUG_ABBREV_SECTION,\n-\t  DEBUG_ARANGES_SECTION,\n-\t  DEBUG_MACINFO_SECTION,\n-\t  DEBUG_LINE_SECTION,\n-\t  DEBUG_LOC_SECTION,\n-\t  DEBUG_PUBNAMES_SECTION,\n-\t  DEBUG_PUBTYPES_SECTION,\n-\t  DEBUG_STR_SECTION,\n-\t  DEBUG_RANGES_SECTION\n-\t};\n-      size_t i;\n-\n-      for (i = 0; i < ARRAY_SIZE (debugnames); i++)\n-\t{\n-\t  int namelen;\n-\n-\t  switch_to_section (get_section (debugnames[i], SECTION_DEBUG, NULL));\n-\n-\t  gcc_assert (strncmp (debugnames[i], \"__DWARF,\", 8) == 0);\n-\t  gcc_assert (strchr (debugnames[i] + 8, ','));\n-\n-\t  namelen = strchr (debugnames[i] + 8, ',') - (debugnames[i] + 8);\n-\t  fprintf (asm_out_file, \"Lsection%.*s:\\n\", namelen, debugnames[i] + 8);\n-\t}\n-    }\n-\n-  /* We fill this obstack with the complete section text for the lto section\n-     names to write in darwin_file_end.  */\n-  obstack_init (&lto_section_names_obstack);\n-  lto_section_names_offset = 0;\n-}\n-\n /* Output an offset in a DWARF section on Darwin.  On Darwin, DWARF section\n    offsets are not represented using relocs in .o files; either the\n    section never leaves the .o file, or the linker or other tool is\n@@ -1767,6 +1798,23 @@ darwin_asm_output_dwarf_offset (FILE *file, int size, const char * lab,\n   darwin_asm_output_dwarf_delta (file, size, lab, sname);\n }\n \n+/* Called from the within the TARGET_ASM_FILE_START for each target. \n+  Initialize the stuff we need for LTO long section names support.  */\n+\n+void\n+darwin_file_start (void)\n+{\n+  /* We fill this obstack with the complete section text for the lto section\n+     names to write in darwin_file_end.  */\n+  obstack_init (&lto_section_names_obstack);\n+  lto_section_names_offset = 0;\n+}\n+\n+/* Called for the TARGET_ASM_FILE_END hook.\n+   Emit the mach-o pic indirection data, the lto data and, finally a flag\n+   to tell the linker that it can break the file object into sections and\n+   move those around for efficiency.  */\n+\n void\n darwin_file_end (void)\n {"}, {"sha": "9d56097e40e74bdfa3b40ae5636e9063a3207792", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4df14c7d6e8f5db942804e6fdc37033b46c3bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4df14c7d6e8f5db942804e6fdc37033b46c3bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de4df14c7d6e8f5db942804e6fdc37033b46c3bb", "patch": "@@ -1,3 +1,8 @@\n+2010-11-02  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* g++.dg/debug/dwarf2/pubnames-1.C: Amend to check for only one instance\n+\tof debug_pubnames on darwin.\n+\n 2010-11-01  Jason Merrill  <jason@redhat.com>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n "}, {"sha": "63e04e42676ad3f73f42f7046c02402605396265", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/pubnames-1.C", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4df14c7d6e8f5db942804e6fdc37033b46c3bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpubnames-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4df14c7d6e8f5db942804e6fdc37033b46c3bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpubnames-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Fpubnames-1.C?ref=de4df14c7d6e8f5db942804e6fdc37033b46c3bb", "patch": "@@ -4,12 +4,7 @@\n // { dg-options \"-g -dA -fno-merge-debug-strings\" }\n //\n // There should be one debug_pubnames section generated.\n-// On Darwin though, there is also a label pointing at the begining of the\n-// debug_pubnames section. The assembly code of that label adds an occurence\n-// of section declaration assembly. So on Darwin, we need to check for two\n-// occurences of the debug_pubnames section declaration.\n-// { dg-final { scan-assembler-times \"\\.section\\[\\t \\]\\[^\\n\\]*debug_pubnames\" 1 { target { ! *-*-darwin* } } } }\n-// { dg-final { scan-assembler-times \"\\.section\\[\\t \\]\\[^\\n\\]*debug_pubnames\" 2 { target { *-*-darwin* } } } }\n+// { dg-final { scan-assembler-times \"\\.section\\[\\t \\]\\[^\\n\\]*debug_pubnames\" 1 } }\n //\n // Then check of the presence of the names we are interested in.\n // { dg-final { scan-assembler-times \"\\\"main.0\\\"\\[^\\n\\]*external name\" 1 } }"}]}