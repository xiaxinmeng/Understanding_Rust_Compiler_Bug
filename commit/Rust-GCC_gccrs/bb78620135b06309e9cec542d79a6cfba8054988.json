{"sha": "bb78620135b06309e9cec542d79a6cfba8054988", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI3ODYyMDEzNWIwNjMwOWU5Y2VjNTQyZDc5YTZjZmJhODA1NDk4OA==", "commit": {"author": {"name": "Bruce Korb", "email": "ddsinc09@ix.netcom.com", "date": "1999-06-02T07:08:54Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "1999-06-02T07:08:54Z"}, "message": "Remove references to setenv/putenv\n\nFrom-SVN: r27312", "tree": {"sha": "40e7e241f1d7dc9975e52f8940866a9742e6cb47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40e7e241f1d7dc9975e52f8940866a9742e6cb47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb78620135b06309e9cec542d79a6cfba8054988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb78620135b06309e9cec542d79a6cfba8054988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb78620135b06309e9cec542d79a6cfba8054988", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb78620135b06309e9cec542d79a6cfba8054988/comments", "author": null, "committer": null, "parents": [{"sha": "079bd08eb234dcd1c9322a0e27cac9ae62a16c63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079bd08eb234dcd1c9322a0e27cac9ae62a16c63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079bd08eb234dcd1c9322a0e27cac9ae62a16c63"}], "stats": {"total": 149, "additions": 88, "deletions": 61}, "files": [{"sha": "d474df6e300a5c3973c641b04eb3e4aa8e11b304", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb78620135b06309e9cec542d79a6cfba8054988/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb78620135b06309e9cec542d79a6cfba8054988/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb78620135b06309e9cec542d79a6cfba8054988", "patch": "@@ -1,3 +1,13 @@\n+Wed Jun  2 07:07 1999 Bruce Korb <ddsinc09@ix.netcom.com\n+\n+\t*fixinc/fixincl.c(global def): Add FD_SHELL_SCRIPT to mark\n+\tfixes that need \"file=xxx\\n\" prepended before invocation\n+\t(start_fixer - new): starting the fixer process is complex enough\n+\tto warrent its own routine.  It prepends the \"file=xxx\\n\" stuff.\n+\t(process): uses the new routine; omit usage of putenv()\n+\t*fixinc/fixincl.tpl: mark shell scripts with FD_SHELL_SCRIPT\n+\t*fixinc/fixincl.x: regenerate\n+\n Wed Jun  2 02:29:07 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* README, configure.in, gcc.1, gcc.texi: Update name (egcs -> gcc)"}, {"sha": "036c6fa9d034ef7fc535bdc100a24c86526e62d8", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 67, "deletions": 52, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb78620135b06309e9cec542d79a6cfba8054988/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb78620135b06309e9cec542d79a6cfba8054988/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=bb78620135b06309e9cec542d79a6cfba8054988", "patch": "@@ -104,6 +104,7 @@ typedef struct patch_desc tPatchDesc;\n     */\n #define FD_MACH_ONLY      0x0000\n #define FD_MACH_IFNOT     0x0001\n+#define FD_SHELL_SCRIPT   0x0002\n #define FD_SKIP_TEST      0x8000\n \n typedef struct fix_desc tFixDesc;\n@@ -910,6 +911,70 @@ extract_quoted_files (pz_data, pz_file_name, p_re_match)\n }\n \n \n+\n+/* * * * * * * * * * * * *\n+\n+    This loop should only cycle for 1/2 of one loop.\n+    \"chain_open\" starts a process that uses \"read_fd\" as\n+    its stdin and returns the new fd this process will use\n+    for stdout.  */\n+\n+int\n+start_fixer (read_fd, p_fixd, pz_file_name)\n+  int read_fd;\n+  tFixDesc* p_fixd;\n+  char* pz_file_name;\n+{\n+  tSCC z_err[] = \"Error %d (%s) starting filter process for %s\\n\";\n+  tCC* pz_cmd_save;\n+  char* pz_cmd;\n+\n+  if ((p_fixd->fd_flags & FD_SHELL_SCRIPT) == 0)\n+    pz_cmd = (char*)NULL;\n+  else\n+    {\n+      tSCC z_cmd_fmt[] = \"file='%s'\\n%s\";\n+      pz_cmd = (char*)xmalloc (strlen (p_fixd->patch_args[2])\n+                               + sizeof( z_cmd_fmt )\n+                               + strlen( pz_file_name ));\n+      sprintf (pz_cmd, z_cmd_fmt, pz_file_name, p_fixd->patch_args[2]);\n+      pz_cmd_save = p_fixd->patch_args[2];\n+      p_fixd->patch_args[2] = pz_cmd;\n+    }\n+\n+  for (;;)\n+    {\n+      static int failCt = 0;\n+      int fd;\n+\n+      fd = chain_open (read_fd,\n+                       (t_pchar *) p_fixd->patch_args,\n+                       (process_chain_head == -1)\n+                       ? &process_chain_head : (pid_t *) NULL);\n+\n+      if (fd != -1)\n+        {\n+          read_fd = fd;\n+          break;\n+        }\n+\n+      fprintf (stderr, z_err, errno, strerror (errno),\n+               p_fixd->fix_name);\n+\n+      if ((errno != EAGAIN) || (++failCt > 10))\n+        exit (EXIT_FAILURE);\n+      sleep (1);\n+    }\n+\n+  if (pz_cmd != (char*)NULL)\n+    {\n+      free ((void*)pz_cmd);\n+      p_fixd->patch_args[2] = pz_cmd_save;\n+    }\n+\n+  return read_fd;\n+}\n+\n /* * * * * * * * * * * * *\n \n    Process the potential fixes for a particular include file.\n@@ -927,30 +992,6 @@ process (pz_data, pz_file_name)\n   int read_fd = -1;\n   int num_children = 0;\n \n-  /*  IF this is the first time through,\n-      THEN put the 'file' environment variable into the environment.\n-           This is used by some of the subject shell scripts and tests.   */\n-\n-  if (env_current_file[0] == NUL) {\n-    strcpy (env_current_file, \"file=\");\n-    putenv (env_current_file);\n-  }\n-\n-  /*\n-     Ghastly as it is, this actually updates the value of the variable:\n-   \n-       putenv(3C)             C Library Functions             putenv(3C)\n-   \n-       DESCRIPTION\n-            putenv() makes the value of the  environment  variable  name\n-            equal  to value by altering an existing variable or creating\n-            a new one.  In either case, the string pointed to by  string\n-            becomes part of the environment, so altering the string will\n-            change the environment.  string points to a  string  of  the\n-            form  ``name=value.''  The space used by string is no longer\n-            used once a new string-defining name is passed to putenv().\n-   */\n-  strcpy (env_current_file + 5, pz_file_name);\n   process_chain_head = NOPROCESS;\n   fprintf (stderr, \"%-50s   \\r\", pz_file_name );\n   /* For every fix in our fix list, ...  */\n@@ -1059,34 +1100,8 @@ process (pz_data, pz_file_name)\n             }\n         }\n \n-      /*  This loop should only cycle for 1/2 of one loop.\n-          \"chain_open\" starts a process that uses \"read_fd\" as\n-          its stdin and returns the new fd this process will use\n-          for stdout.  */\n-\n-      for (;;)\n-        {\n-          tSCC z_err[] = \"Error %d (%s) starting filter process for %s\\n\";\n-          static int failCt = 0;\n-          int fd = chain_open (read_fd,\n-                               (t_pchar *) p_fixd->patch_args,\n-                               (process_chain_head == -1)\n-                               ? &process_chain_head : (pid_t *) NULL);\n-\n-          if (fd != -1)\n-            {\n-              read_fd = fd;\n-              num_children++;\n-              break;\n-            }\n-\n-          fprintf (stderr, z_err, errno, strerror (errno),\n-                   p_fixd->fix_name);\n-\n-          if ((errno != EAGAIN) || (++failCt > 10))\n-            exit (EXIT_FAILURE);\n-          sleep (1);\n-        }\n+      read_fd = start_fixer (read_fd, p_fixd, pz_file_name);\n+      num_children++;\n \n     next_fix:\n       ;"}, {"sha": "afdd131c66e50e6b781ed2725c4636a67301432a", "filename": "gcc/fixinc/fixincl.tpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb78620135b06309e9cec542d79a6cfba8054988/gcc%2Ffixinc%2Ffixincl.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb78620135b06309e9cec542d79a6cfba8054988/gcc%2Ffixinc%2Ffixincl.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.tpl?ref=bb78620135b06309e9cec542d79a6cfba8054988", "patch": "@@ -179,6 +179,8 @@ _FOR fix \",\\n\" =]\n      [=hackname  _up=]_TEST_CT, [=\n        _IF not_machine _exist =]FD_MACH_IFNOT[=\n        _ELSE                  =]FD_MACH_ONLY[=\n+       _ENDIF =][=\n+       _IF shell       _exist =] | FD_SHELL_SCRIPT[=\n        _ENDIF =],\n      a[=hackname _cap=]Tests,   apz[=hackname _cap=]Patch }[=\n "}, {"sha": "5b820f93a4479e1dfdadbb16d2318932b61a50a0", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb78620135b06309e9cec542d79a6cfba8054988/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb78620135b06309e9cec542d79a6cfba8054988/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=bb78620135b06309e9cec542d79a6cfba8054988", "patch": "@@ -4039,7 +4039,7 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n \n   {  zM88k_Multi_InclName,    zM88k_Multi_InclList,\n      apzM88k_Multi_InclMachs, (regex_t*)NULL,\n-     M88K_MULTI_INCL_TEST_CT, FD_MACH_ONLY,\n+     M88K_MULTI_INCL_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,\n      aM88k_Multi_InclTests,   apzM88k_Multi_InclPatch },\n \n   {  zMachine_NameName,    zMachine_NameList,\n@@ -4054,7 +4054,7 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n \n   {  zMath_Gcc_IfndefsName,    zMath_Gcc_IfndefsList,\n      apzMath_Gcc_IfndefsMachs, (regex_t*)NULL,\n-     MATH_GCC_IFNDEFS_TEST_CT, FD_MACH_ONLY,\n+     MATH_GCC_IFNDEFS_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,\n      aMath_Gcc_IfndefsTests,   apzMath_Gcc_IfndefsPatch },\n \n   {  zNested_CommentName,    zNested_CommentList,\n@@ -4134,7 +4134,7 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n \n   {  zStdio_Va_ListName,    zStdio_Va_ListList,\n      apzStdio_Va_ListMachs, (regex_t*)NULL,\n-     STDIO_VA_LIST_TEST_CT, FD_MACH_ONLY,\n+     STDIO_VA_LIST_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,\n      aStdio_Va_ListTests,   apzStdio_Va_ListPatch },\n \n   {  zSun_Bogus_IfdefName,    zSun_Bogus_IfdefList,\n@@ -4309,31 +4309,31 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n \n   {  zZzz_Ki_IfaceName,    zZzz_Ki_IfaceList,\n      apzZzz_Ki_IfaceMachs, (regex_t*)NULL,\n-     ZZZ_KI_IFACE_TEST_CT, FD_MACH_ONLY,\n+     ZZZ_KI_IFACE_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,\n      aZzz_Ki_IfaceTests,   apzZzz_Ki_IfacePatch },\n \n   {  zZzz_KiName,    zZzz_KiList,\n      apzZzz_KiMachs, (regex_t*)NULL,\n-     ZZZ_KI_TEST_CT, FD_MACH_ONLY,\n+     ZZZ_KI_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,\n      aZzz_KiTests,   apzZzz_KiPatch },\n \n   {  zZzz_Ki_CallsName,    zZzz_Ki_CallsList,\n      apzZzz_Ki_CallsMachs, (regex_t*)NULL,\n-     ZZZ_KI_CALLS_TEST_CT, FD_MACH_ONLY,\n+     ZZZ_KI_CALLS_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,\n      aZzz_Ki_CallsTests,   apzZzz_Ki_CallsPatch },\n \n   {  zZzz_Ki_DefsName,    zZzz_Ki_DefsList,\n      apzZzz_Ki_DefsMachs, (regex_t*)NULL,\n-     ZZZ_KI_DEFS_TEST_CT, FD_MACH_ONLY,\n+     ZZZ_KI_DEFS_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,\n      aZzz_Ki_DefsTests,   apzZzz_Ki_DefsPatch },\n \n   {  zZzz_Bad_FixesName,    zZzz_Bad_FixesList,\n      apzZzz_Bad_FixesMachs, (regex_t*)NULL,\n-     ZZZ_BAD_FIXES_TEST_CT, FD_MACH_ONLY,\n+     ZZZ_BAD_FIXES_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,\n      aZzz_Bad_FixesTests,   apzZzz_Bad_FixesPatch },\n \n   {  zZzz_TimeName,    zZzz_TimeList,\n      apzZzz_TimeMachs, (regex_t*)NULL,\n-     ZZZ_TIME_TEST_CT, FD_MACH_ONLY,\n+     ZZZ_TIME_TEST_CT, FD_MACH_ONLY | FD_SHELL_SCRIPT,\n      aZzz_TimeTests,   apzZzz_TimePatch }\n };"}]}