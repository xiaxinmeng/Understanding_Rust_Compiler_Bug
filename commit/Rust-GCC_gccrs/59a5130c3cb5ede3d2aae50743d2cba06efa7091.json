{"sha": "59a5130c3cb5ede3d2aae50743d2cba06efa7091", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlhNTEzMGMzY2I1ZWRlM2QyYWFlNTA3NDNkMmNiYTA2ZWZhNzA5MQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-07-16T02:14:14Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-07-16T02:14:14Z"}, "message": "* README.Portability: Small update.\n\nFrom-SVN: r35056", "tree": {"sha": "da29f386742d032078e5bbde6a9f26d8f7c8dd5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da29f386742d032078e5bbde6a9f26d8f7c8dd5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59a5130c3cb5ede3d2aae50743d2cba06efa7091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a5130c3cb5ede3d2aae50743d2cba06efa7091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a5130c3cb5ede3d2aae50743d2cba06efa7091", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a5130c3cb5ede3d2aae50743d2cba06efa7091/comments", "author": null, "committer": null, "parents": [{"sha": "5b2ff385d530365adf4fab64266ac30bfe5d0311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2ff385d530365adf4fab64266ac30bfe5d0311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b2ff385d530365adf4fab64266ac30bfe5d0311"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "01d6222af4637c9027a30a37d000f17ed029624a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a5130c3cb5ede3d2aae50743d2cba06efa7091/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a5130c3cb5ede3d2aae50743d2cba06efa7091/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59a5130c3cb5ede3d2aae50743d2cba06efa7091", "patch": "@@ -1,3 +1,7 @@\n+2000-07-16  Neil Booth  <NeilB@earthling.net>\n+\n+\t* README.Portability:  Small update.\n+\n 2000-07-15  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64/ia64-protos.h (ia64_move_ok): Prototype."}, {"sha": "43efc39f3c3ef98d25e0608d190fcdcb91259145", "filename": "gcc/README.Portability", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a5130c3cb5ede3d2aae50743d2cba06efa7091/gcc%2FREADME.Portability", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a5130c3cb5ede3d2aae50743d2cba06efa7091/gcc%2FREADME.Portability", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FREADME.Portability?ref=59a5130c3cb5ede3d2aae50743d2cba06efa7091", "patch": "@@ -50,6 +50,13 @@ should be written\n String literals\n ---------------\n \n+Some SGI compilers choke on the parentheses in:-\n+\n+const char string[] = (\"A string\");\n+\n+This is unfortunate since this is what the GNU gettext macro N_\n+produces.  You need to find a different way to code it.\n+\n K+R C did not allow concatenation of string literals like\n \n   \"This is a \" \"single string literal\".\n@@ -80,8 +87,8 @@ needs to be coded in some other way.\n signed keyword\n --------------\n \n-The signed keyword did not exist in K+R comilers, it was introduced in\n-ISO C89, so you cannot use it.  In both K+R and standard C,\n+The signed keyword did not exist in K+R compilers, it was introduced\n+in ISO C89, so you cannot use it.  In both K+R and standard C,\n unqualified char and bitfields may be signed or unsigned.  There is no\n way to portably declare signed chars or signed bitfields.\n \n@@ -163,8 +170,9 @@ double respectively.\n Calling functions through pointers to functions\n -----------------------------------------------\n \n-K+R C compilers require brackets around the dereferenced pointer\n-variable, whereas ISO C relaxes the syntax.  For example\n+K+R C compilers require parentheses around the dereferenced function\n+pointer expression in the call, whereas ISO C relaxes the syntax.  For\n+example\n \n typedef void (* cl_directive_handler) PARAMS ((cpp_reader *, const char *));\n       *p->handler (pfile, p->arg);\n@@ -192,6 +200,13 @@ will stringify an argument; to get the same result on K+R and ISO\n compilers x should not have spaces around it.\n \n \n+Passing structures by value\n+---------------------------\n+\n+Avoid passing structures by value, either to or from functions.  It\n+seems some K+R compilers handle this differently or not at all.\n+\n+\n Enums\n -----\n "}]}