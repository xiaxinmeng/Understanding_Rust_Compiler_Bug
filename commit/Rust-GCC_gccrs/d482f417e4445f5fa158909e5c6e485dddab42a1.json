{"sha": "d482f417e4445f5fa158909e5c6e485dddab42a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ4MmY0MTdlNDQ0NWY1ZmExNTg5MDllNWM2ZTQ4NWRkZGFiNDJhMQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-04-05T23:57:01Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-04-05T23:57:01Z"}, "message": "re PR target/20625 (ivopts produces code that generates \"unaligned access exception\")\n\n\tPR target/20625\n\t* tree-ssa-loop-ivopts.c (generic_type_for): New function.\n\t(add_candidate_1): Use generic_type_for instead of unsigned_type_for.\n\nFrom-SVN: r97674", "tree": {"sha": "b63dc3d45ef9da76f56093c1e9995ddb30c5190c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b63dc3d45ef9da76f56093c1e9995ddb30c5190c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d482f417e4445f5fa158909e5c6e485dddab42a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d482f417e4445f5fa158909e5c6e485dddab42a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d482f417e4445f5fa158909e5c6e485dddab42a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d482f417e4445f5fa158909e5c6e485dddab42a1/comments", "author": null, "committer": null, "parents": [{"sha": "c33e657d3456a27426cf6c620f88dc3edcdc703a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33e657d3456a27426cf6c620f88dc3edcdc703a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c33e657d3456a27426cf6c620f88dc3edcdc703a"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "afb35ce2c9ab5219c3cdae5593d4bad0d3d421e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d482f417e4445f5fa158909e5c6e485dddab42a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d482f417e4445f5fa158909e5c6e485dddab42a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d482f417e4445f5fa158909e5c6e485dddab42a1", "patch": "@@ -1,3 +1,9 @@\n+2005-04-06  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR target/20625\n+\t* tree-ssa-loop-ivopts.c (generic_type_for): New function.\n+\t(add_candidate_1): Use generic_type_for instead of unsigned_type_for.\n+\n 2005-04-06  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-flow.h (number_of_iterations_cond): Declaration removed."}, {"sha": "508f7814f45e4a53451ba446a033bc99b3793886", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d482f417e4445f5fa158909e5c6e485dddab42a1/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d482f417e4445f5fa158909e5c6e485dddab42a1/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=d482f417e4445f5fa158909e5c6e485dddab42a1", "patch": "@@ -1841,6 +1841,22 @@ strip_offset (tree expr, bool inside_addr, unsigned HOST_WIDE_INT *offset)\n   return fold_convert (orig_type, expr);\n }\n \n+/* Returns variant of TYPE that can be used as base for different uses.\n+   For integer types, we return unsigned variant of the type, which\n+   avoids problems with overflows.  For pointer types, we return void *.  */\n+\n+static tree\n+generic_type_for (tree type)\n+{\n+  if (POINTER_TYPE_P (type))\n+    return ptr_type_node;\n+\n+  if (TYPE_UNSIGNED (type))\n+    return type;\n+\n+  return unsigned_type_for (type);\n+}\n+\n /* Adds a candidate BASE + STEP * i.  Important field is set to IMPORTANT and\n    position to POS.  If USE is not NULL, the candidate is set as related to\n    it.  If both BASE and STEP are NULL, we add a pseudocandidate for the\n@@ -1853,14 +1869,14 @@ add_candidate_1 (struct ivopts_data *data,\n {\n   unsigned i;\n   struct iv_cand *cand = NULL;\n-  tree type;\n+  tree type, orig_type;\n   \n   if (base)\n     {\n-      type = TREE_TYPE (base);\n-      if (!TYPE_UNSIGNED (type))\n+      orig_type = TREE_TYPE (base);\n+      type = generic_type_for (orig_type);\n+      if (type != orig_type)\n \t{\n-\t  type = unsigned_type_for (type);\n \t  base = fold_convert (type, base);\n \t  if (step)\n \t    step = fold_convert (type, step);"}]}