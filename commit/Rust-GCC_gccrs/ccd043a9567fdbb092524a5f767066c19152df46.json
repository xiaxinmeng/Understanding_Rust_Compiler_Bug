{"sha": "ccd043a9567fdbb092524a5f767066c19152df46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NkMDQzYTk1NjdmZGJiMDkyNTI0YTVmNzY3MDY2YzE5MTUyZGY0Ng==", "commit": {"author": {"name": "Robert Lipe", "email": "robertl@dgii.com", "date": "1998-02-07T22:55:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-07T22:55:54Z"}, "message": "c-common.c: Include <stdlib.h> and <string.h>/<strings.h>.\n\n        * c-common.c: Include <stdlib.h> and <string.h>/<strings.h>.\n        * calls.c (expand_call): Remove unused variables funtree,\n        n_regs, and tmpmode.\n        * dbxout.c, except.c: Include <string.h>/<strings.h>.\n        * explow.c: (plus_constant_for_output_wide) Removed unused\n        variable all_constant.\n        * c-decl.c, genattr.c, genattrtab.c, getconfig.c, genemit.c\n        genextract.c, genflags.c, genopinit.c genoutput.c, genpeep.c,\n        genrecog.c, global.c, integrate.c , stupid.c : Include\n        <stdlib.h>.\n        * genextract.c: (walk_rtx) Remove unused variable link.\n        * genrecog.c: (concat) Remove unreferenced static function.\n        * prefix.c: Include <string.h>/<strings.h>, <stdlib.h>\n        * stmt.c: Include <stdlib.h>.\n        (expand_asm_operands): Remove unused variable val1.\n        (expand_return): Remove unused variable block.\n        (pushcase): Remove unused variables l and n.\n        (pushcaserange): Likewise.\n        * unroll.c (unroll_loop): Remove unused variable temp.\n\nFrom-SVN: r17766", "tree": {"sha": "4653e3f8759069cc25169a6b0035d7270415f293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4653e3f8759069cc25169a6b0035d7270415f293"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccd043a9567fdbb092524a5f767066c19152df46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd043a9567fdbb092524a5f767066c19152df46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccd043a9567fdbb092524a5f767066c19152df46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccd043a9567fdbb092524a5f767066c19152df46/comments", "author": null, "committer": null, "parents": [{"sha": "6553db017bb3ef9575c4fe8883a6a5ee89f5c620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6553db017bb3ef9575c4fe8883a6a5ee89f5c620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6553db017bb3ef9575c4fe8883a6a5ee89f5c620"}], "stats": {"total": 188, "additions": 150, "deletions": 38}, "files": [{"sha": "d187d094c9d6773db5f7974de4c671997d2ad61a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -1,3 +1,34 @@\n+Sat Feb  7 23:54:29 1998   Robert Lipe  <robertl@dgii.com>\n+\n+\t* c-common.c: Include <stdlib.h> and <string.h>/<strings.h>.\n+\n+        * calls.c (expand_call): Remove unused variables funtree,\n+        n_regs, and tmpmode.\n+\n+\t* dbxout.c, except.c: Include <string.h>/<strings.h>.\n+\n+        * explow.c: (plus_constant_for_output_wide) Removed unused\n+        variable all_constant.\n+\n+        * c-decl.c, genattr.c, genattrtab.c, getconfig.c, genemit.c\n+        genextract.c, genflags.c, genopinit.c genoutput.c, genpeep.c,\n+        genrecog.c, global.c, integrate.c , stupid.c : Include\n+        <stdlib.h>.\n+\n+\t* genextract.c: (walk_rtx) Remove unused variable link.\n+\n+\t* genrecog.c: (concat) Remove unreferenced static function.\n+\n+\t* prefix.c: Include <string.h>/<strings.h>, <stdlib.h>\n+\n+\t* stmt.c: Include <stdlib.h>.  \n+\t(expand_asm_operands): Remove unused variable val1.  \n+\t(expand_return): Remove unused variable block.\n+\t(pushcase): Remove unused variables l and n.\n+\t(pushcaserange): Likewise.\n+\n+\t* unroll.c (unroll_loop): Remove unused variable temp.\n+\n Sat Feb  7 23:46:09 1998  Greg McGary  <gkm@gnu.org>\n \n \t* c-decl.c (pushdecl): Set DECL_ORIGINAL_TYPE once only."}, {"sha": "8ff114a616cfdce6ed027d74cb1d07fa69112099", "filename": "gcc/c-common.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -27,6 +27,19 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include <ctype.h>\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+\n #ifndef WCHAR_TYPE_SIZE\n #ifdef INT_TYPE_SIZE\n #define WCHAR_TYPE_SIZE INT_TYPE_SIZE"}, {"sha": "ed23500448a2029927420f51a22a7be0003b7ada", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -34,6 +34,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-tree.h\"\n #include \"c-lex.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n { NORMAL,\t\t\t/* Ordinary declaration */"}, {"sha": "3a4244a64f40a4ff1d367cfbbb3ad82feb4f9bf5", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -487,8 +487,6 @@ expand_call (exp, target, ignore)\n   tree actparms = TREE_OPERAND (exp, 1);\n   /* RTX for the function to be called.  */\n   rtx funexp;\n-  /* Tree node for the function to be called (not the address!).  */\n-  tree funtree;\n   /* Data type of the function.  */\n   tree funtype;\n   /* Declaration of the function being called,\n@@ -2110,9 +2108,7 @@ expand_call (exp, target, ignore)\n \t Deal with them explicitly by copying from the return registers\n \t into the target MEM locations.  */\n       int bytes = int_size_in_bytes (TREE_TYPE (exp));\n-      int n_regs = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n       int i;\n-      enum machine_mode tmpmode;\n       rtx src, dst;\n       int bitsize = MIN (TYPE_ALIGN (TREE_TYPE (exp)), BITS_PER_WORD);\n       int bitpos, xbitpos, big_endian_correction = 0;"}, {"sha": "7fa9139b9d80ac72a8f1657708d554bd5ac22c71", "filename": "gcc/dbxout.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -72,6 +72,14 @@ Boston, MA 02111-1307, USA.  */\n #include <stdio.h>\n #include <errno.h>\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n+\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"flags.h\""}, {"sha": "3d6ace9a8e9fbe4c5107192fd0f1b2d91f333d52", "filename": "gcc/except.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -405,6 +405,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"output.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n /* One to use setjmp/longjmp method of generating code for exception\n    handling.  */\n "}, {"sha": "e9cf9e5993d589b6a5e1e214ff870755df97b20d", "filename": "gcc/explow.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -153,7 +153,6 @@ plus_constant_for_output_wide (x, c)\n {\n   register RTX_CODE code = GET_CODE (x);\n   register enum machine_mode mode = GET_MODE (x);\n-  int all_constant = 0;\n \n   if (GET_CODE (x) == LO_SUM)\n     return gen_rtx_LO_SUM (mode, XEXP (x, 0),"}, {"sha": "5be826b35de4f726c190a6456f1d8ba0eb83fae9", "filename": "gcc/genattr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -25,6 +25,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n "}, {"sha": "0560e931ac9556cc7f0de1db961d00a652ef28c7", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -121,6 +121,10 @@ Boston, MA 02111-1307, USA.  */\n # include <sys/resource.h>\n #endif\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n /* We must include obstack.h after <sys/time.h>, to avoid lossage with\n    /usr/include/sys/stdtypes.h on Sun OS 4.x.  */\n #include \"obstack.h\""}, {"sha": "cc012cbd6ed67a7a37e841ba3c19b9cc3d1c037e", "filename": "gcc/genconfig.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -1,7 +1,6 @@\n /* Generate from machine description:\n-\n    - some #define configuration flags.\n-   Copyright (C) 1987, 1991 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1991, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -26,6 +25,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n@@ -142,6 +145,9 @@ walk_insn_part (part, recog_p, non_pc_set_src)\n     case REG: case CONST_INT: case SYMBOL_REF:\n     case PC:\n       return;\n+\n+    default:\n+      break;\n     }\n \n   format_ptr = GET_RTX_FORMAT (GET_CODE (part));"}, {"sha": "c556e14141d12839e57f546862e8c269aefa97a1", "filename": "gcc/genemit.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -24,6 +24,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n "}, {"sha": "3577a2f67fe4393c31f0c6c4fc911b3a690d3d61", "filename": "gcc/genextract.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -1,5 +1,5 @@\n /* Generate code from machine description to extract operands from insn as rtl.\n-   Copyright (C) 1987, 1991, 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1991, 1992, 1993, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -25,6 +25,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"insn-config.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n@@ -196,7 +200,6 @@ walk_rtx (x, path)\n   register int i;\n   register int len;\n   register char *fmt;\n-  register struct code_ptr *link;\n   int depth = strlen (path);\n   char *newpath;\n \n@@ -275,6 +278,9 @@ walk_rtx (x, path)\n     case ADDRESS:\n       walk_rtx (XEXP (x, 0), path);\n       return;\n+\n+    default:\n+      break;\n     }\n \n   newpath = (char *) alloca (depth + 2);\n@@ -438,6 +444,7 @@ main (argc, argv)\n from the machine description file `md'.  */\\n\\n\");\n \n   printf (\"#include \\\"config.h\\\"\\n\");\n+  printf (\"#include <stdio.h>\\n\");\n   printf (\"#include \\\"rtl.h\\\"\\n\\n\");\n \n   /* This variable exists only so it can be the \"location\""}, {"sha": "68f0c8368f666a287925e07a32ffaa6a9e606632", "filename": "gcc/genflags.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n "}, {"sha": "6ee2f4fd859f3359f51fbc5df095bdb1ab73ca6e", "filename": "gcc/genopinit.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -1,5 +1,5 @@\n /* Generate code to initialize optabs from machine description.\n-   Copyright (C) 1993, 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -25,6 +25,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include <ctype.h>\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n@@ -354,6 +359,7 @@ main (argc, argv)\n from the machine description file `md'.  */\\n\\n\");\n \n   printf (\"#include \\\"config.h\\\"\\n\");\n+  printf (\"#include <stdio.h>\\n\");\n   printf (\"#include \\\"rtl.h\\\"\\n\");\n   printf (\"#include \\\"flags.h\\\"\\n\");\n   printf (\"#include \\\"insn-flags.h\\\"\\n\");"}, {"sha": "c263f271e30b3d1f4b40028501f0cb4d54e5e045", "filename": "gcc/genoutput.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -95,6 +95,10 @@ given in the entry is a constant (it does not start with `*').  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n /* No instruction can have more operands than this.\n    Sorry for this arbitrary limit, but what machine will\n    have an instruction with this many operands?  */\n@@ -180,6 +184,8 @@ output_prologue ()\n from the machine description file `md'.  */\\n\\n\");\n \n   printf (\"#include \\\"config.h\\\"\\n\");\n+  printf (\"#include <stdio.h>\\n\");\n+  printf (\"#include \\\"flags.h\\\"\\n\");\n   printf (\"#include \\\"rtl.h\\\"\\n\");\n   printf (\"#include \\\"regs.h\\\"\\n\");\n   printf (\"#include \\\"hard-reg-set.h\\\"\\n\");\n@@ -191,7 +197,6 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"insn-codes.h\\\"\\n\\n\");\n   printf (\"#include \\\"recog.h\\\"\\n\\n\");\n \n-  printf (\"#include <stdio.h>\\n\");\n   printf (\"#include \\\"output.h\\\"\\n\");\n }\n \n@@ -514,6 +519,9 @@ scan_operands (part, this_address_p, this_strict_low)\n     case STRICT_LOW_PART:\n       scan_operands (XEXP (part, 0), 0, 1);\n       return;\n+      \n+    default:\n+      break;\n     }\n \n   format_ptr = GET_RTX_FORMAT (GET_CODE (part));\n@@ -522,6 +530,7 @@ scan_operands (part, this_address_p, this_strict_low)\n     switch (*format_ptr++)\n       {\n       case 'e':\n+      case 'u':\n \tscan_operands (XEXP (part, i), 0, 0);\n \tbreak;\n       case 'E':"}, {"sha": "357376b859074d135e6a71488469507fa6703ad6", "filename": "gcc/genpeep.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -24,6 +24,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n "}, {"sha": "ef85c6e6fbd2a04700389307a2c8a12b9543a94b", "filename": "gcc/genrecog.c", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -51,6 +51,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"obstack.h\"\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n static struct obstack obstack;\n struct obstack *rtl_obstack = &obstack;\n \n@@ -191,7 +195,6 @@ static void change_state\tPROTO((char *, char *, int));\n static char *copystr\t\tPROTO((char *));\n static void mybzero\t\tPROTO((char *, unsigned));\n static void mybcopy\t\tPROTO((char *, char *, unsigned));\n-static char *concat\t\tPROTO((char *, char *));\n static void fatal\t\tPROTO((char *));\n char *xrealloc\t\t\tPROTO((char *, unsigned));\n char *xmalloc\t\t\tPROTO((unsigned));\n@@ -1646,25 +1649,6 @@ mybcopy (in, out, length)\n     *out++ = *in++;\n }\n \n-static char *\n-concat (s1, s2)\n-     char *s1, *s2;\n-{\n-  register char *tem;\n-\n-  if (s1 == 0)\n-    return s2;\n-  if (s2 == 0)\n-    return s1;\n-\n-  tem = (char *) xmalloc (strlen (s1) + strlen (s2) + 2);\n-  strcpy (tem, s1);\n-  strcat (tem, \" \");\n-  strcat (tem, s2);\n-\n-  return tem;\n-}\n-\n char *\n xrealloc (ptr, size)\n      char *ptr;"}, {"sha": "5033f3953d68433f7c47a64b43dd83fd3d7aa7c8", "filename": "gcc/global.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -21,6 +21,11 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"basic-block.h\""}, {"sha": "1dd29bdcf7dec0d91c2ba8143af798441fc00d37", "filename": "gcc/integrate.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -22,6 +22,11 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"regs.h\""}, {"sha": "09f4f193c4e29e8db71d54f9448808e42da63b91", "filename": "gcc/prefix.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -71,6 +71,18 @@ Boston, MA 02111-1307, USA.  */\n #include <varargs.h>\n #endif\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n+\n #ifdef _WIN32\n #include <windows.h>\n #endif"}, {"sha": "7cb99ad48ad33116a46f4185f32e25415fc91483", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -38,6 +38,10 @@ Boston, MA 02111-1307, USA.  */\n #include <stdio.h>\n #include <ctype.h>\n \n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n@@ -1191,7 +1195,6 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n     {\n       tree val = TREE_VALUE (tail);\n       tree type = TREE_TYPE (val);\n-      tree val1;\n       int j;\n       int found_equal = 0;\n       int found_plus = 0;\n@@ -2280,7 +2283,6 @@ expand_return (retval)\n   register rtx op0;\n   tree retval_rhs;\n   int cleanups;\n-  struct nesting *block;\n \n   /* If function wants no value, give it none.  */\n   if (TREE_CODE (TREE_TYPE (TREE_TYPE (current_function_decl))) == VOID_TYPE)\n@@ -3842,8 +3844,6 @@ pushcase (value, converter, label, duplicate)\n      register tree label;\n      tree *duplicate;\n {\n-  register struct case_node **l;\n-  register struct case_node *n;\n   tree index_type;\n   tree nominal_type;\n \n@@ -3925,8 +3925,6 @@ pushcase_range (value1, value2, converter, label, duplicate)\n      register tree label;\n      tree *duplicate;\n {\n-  register struct case_node **l;\n-  register struct case_node *n;\n   tree index_type;\n   tree nominal_type;\n "}, {"sha": "318b5b1a18ef20d83b2a5e3ed856972c93bb9587", "filename": "gcc/stupid.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fstupid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Fstupid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstupid.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -44,6 +44,11 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+\n+#ifdef HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n #include \"regs.h\""}, {"sha": "d814dd901cf70e9aae2793ec0b023af3f56743d8", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccd043a9567fdbb092524a5f767066c19152df46/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=ccd043a9567fdbb092524a5f767066c19152df46", "patch": "@@ -831,7 +831,7 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n       if (precondition_loop_p (&initial_value, &final_value, &increment,\n \t\t\t       loop_start, loop_end))\n \t{\n-\t  register rtx diff, temp;\n+\t  register rtx diff ;\n \t  enum machine_mode mode;\n \t  rtx *labels;\n \t  int abs_inc, neg_inc;"}]}