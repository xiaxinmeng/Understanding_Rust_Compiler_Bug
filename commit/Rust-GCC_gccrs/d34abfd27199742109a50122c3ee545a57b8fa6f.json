{"sha": "d34abfd27199742109a50122c3ee545a57b8fa6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0YWJmZDI3MTk5NzQyMTA5YTUwMTIyYzNlZTU0NWE1N2I4ZmE2Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-03-14T18:57:11Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-03-14T18:57:11Z"}, "message": "i386.md (ROUND_FLOOR): New constant.\n\n\t* config/i386/i386.md (ROUND_FLOOR): New constant.\n\t(ROUND_CEIL): Ditto.\n\t(ROUND_TRUNC): Ditto.\n\t(ROUND_MXCSR): Ditto.\n\t(ROUND_NO_EXC): Ditto.\n\t(rint<mode>2): Use new defines instead of numerical constants.\n\t(floor<mode>2): Ditto.\n\t(ceil<mode>2): Ditto.\n\t(btrunc<mode>2): Ditto.\n\t* config/i386/i386-builtin-types.def: Define ROUND function type\n\taliases.\n\t* config/i386/i386.c (enum ix86_builtins): Add\n\tIX86_BUILTIN_{FLOOR,CEIL,TRUNC,RINT}{PS,PD}{,256} defines.\n\t(struct builtin_description): Add\n\t__builtin_ia32_{floor,ceil,trunc,rint}{pd,ps}{,256} descriptions.\n\t(ix86_expand_sse_round): New static function.\n\t(ix86_expand_args_builtin): Call ix86_expand_sse_round for ROUND\n\tfunction types.\n\t(ix86_builtin_vectorized_function): Handle\n\tBUILT_IN_{FLOOR,CEIL,TRUNC,RINT}{,F} builtins.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse4_1-floor-vec.c: New test.\n\t* gcc.target/i386/sse4_1-ceil-vec.c: Ditto.\n\t* gcc.target/i386/sse4_1-trunc-vec.c: Ditto.\n\t* gcc-target/i386/sse4_1-rint-vec.c: Ditto.\n\t* gcc.target/i386/sse4_1-floorf-vec.c: Ditto.\n\t* gcc.target/i386/sse4_1-ceilf-vec.c: Ditto.\n\t* gcc.target/i386/sse4_1-truncf-vec.c: Ditto.\n\t* gcc.target/i386/sse4_1-rintf-vec.c: Ditto.\n\t* gcc.target/i386/avx-floor-vec.c: Ditto.\n\t* gcc.target/i386/avx-ceil-vec.c: Ditto.\n\t* gcc.target/i386/avx-trunc-vec.c: Ditto.\n\t* gcc.target/i386/avx-rint-vec.c: Ditto.\n\t* gcc.target/i386/avx-floorf-vec.c: Ditto.\n\t* gcc.target/i386/avx-ceilf-vec.c: Ditto.\n\t* gcc.target/i386/avx-truncf-vec.c: Ditto.\n\t* gcc.target/i386/avx-rintf-vec.c: Ditto.\n\nFrom-SVN: r170953", "tree": {"sha": "3bd06dedde5043a1b6e3a4eb74f4ad80763992a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bd06dedde5043a1b6e3a4eb74f4ad80763992a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d34abfd27199742109a50122c3ee545a57b8fa6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34abfd27199742109a50122c3ee545a57b8fa6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34abfd27199742109a50122c3ee545a57b8fa6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34abfd27199742109a50122c3ee545a57b8fa6f/comments", "author": null, "committer": null, "parents": [{"sha": "87f9e23dafd42a3ad8df6feb6cc413e3aa6f110b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f9e23dafd42a3ad8df6feb6cc413e3aa6f110b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f9e23dafd42a3ad8df6feb6cc413e3aa6f110b"}], "stats": {"total": 1130, "additions": 1119, "deletions": 11}, "files": [{"sha": "9a4f888359af5bd2f0b76f8f679908ab1a051d3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -1,3 +1,26 @@\n+2011-03-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (ROUND_FLOOR): New constant.\n+\t(ROUND_CEIL): Ditto.\n+\t(ROUND_TRUNC): Ditto.\n+\t(ROUND_MXCSR): Ditto.\n+\t(ROUND_NO_EXC): Ditto.\n+\t(rint<mode>2): Use new defines instead of numerical constants.\n+\t(floor<mode>2): Ditto.\n+\t(ceil<mode>2): Ditto.\n+\t(btrunc<mode>2): Ditto.\n+\t* config/i386/i386-builtin-types.def: Define ROUND function type\n+\taliases.\n+\t* config/i386/i386.c (enum ix86_builtins): Add\n+\tIX86_BUILTIN_{FLOOR,CEIL,TRUNC,RINT}{PS,PD}{,256} defines.\n+\t(struct builtin_description): Add\n+\t__builtin_ia32_{floor,ceil,trunc,rint}{pd,ps}{,256} descriptions.\n+\t(ix86_expand_sse_round): New static function.\n+\t(ix86_expand_args_builtin): Call ix86_expand_sse_round for ROUND\n+\tfunction types.\n+\t(ix86_builtin_vectorized_function): Handle\n+\tBUILT_IN_{FLOOR,CEIL,TRUNC,RINT}{,F} builtins.\n+\n 2011-03-14  Tom Tromey  <tromey@redhat.com>\n \n \t* c-parser.c (c_parser_asm_string_literal): Clear\n@@ -22,8 +45,7 @@\n 2011-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/48102\n-\t* graphite-cloog-compat.h (build_cloog_prog): Remove STATE\n-\tparameter.\n+\t* graphite-cloog-compat.h (build_cloog_prog): Remove STATE parameter.\n \n 2011-03-14  Andreas Tobler  <andreast@fgznet.ch>\n \n@@ -321,7 +343,8 @@\n \tPR lto/47497\n \t* lto-symtab.c (lto_cgraph_replace_node): Do not set thunk.alias.\n \t(lto_symtab_merge_cgraph_nodes_1): Update thunk.alias pointers here.\n-\t* cgraph.h (cgraph_same_body_alias, cgraph_add_thunk): Add node pointers.\n+\t* cgraph.h (cgraph_same_body_alias, cgraph_add_thunk):\n+\tAdd node pointers.\n \t* cgraph.c (cgraph_same_body_alias_1, cgraph_same_body_alias,\n \tcgraph_add_thunk): Add node pointers.\n \t* lto-cgraph.c (lto_output_node): Verify that thunks&aliases are\n@@ -332,8 +355,8 @@\n 2011-03-04  Changpeng Fang  <changpeng.fang@amd.com>\n \n \t* config/i386/i386.opt (mprefer-avx128): New flag.\n-\t* config/i386/i386.c (ix86_preferred_simd_mode): Prefer 128-bit mode\n-\twhen the flag -mprefer-avx128 is on.\n+\t* config/i386/i386.c (ix86_preferred_simd_mode): Prefer 128-bit AVX\n+\tmodes when the flag -mprefer-avx128 is on.\n \n 2011-03-04  Richard Sandiford  <richard.sandiford@linaro.org>\n "}, {"sha": "d4b3e824db20de4473e6d073c7a89769d418f133", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -377,6 +377,11 @@ DEF_FUNCTION_TYPE (V16QI, V16QI, INT, V16QI, INT, INT)\n \n DEF_FUNCTION_TYPE (V8QI, QI, QI, QI, QI, QI, QI, QI, QI)\n \n+DEF_FUNCTION_TYPE_ALIAS (V2DF_FTYPE_V2DF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V4DF_FTYPE_V4DF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V4SF_FTYPE_V4SF, ROUND)\n+DEF_FUNCTION_TYPE_ALIAS (V8SF_FTYPE_V8SF, ROUND)\n+\n DEF_FUNCTION_TYPE_ALIAS (INT_FTYPE_V2DF_V2DF, PTEST)\n DEF_FUNCTION_TYPE_ALIAS (INT_FTYPE_V2DI_V2DI, PTEST)\n DEF_FUNCTION_TYPE_ALIAS (INT_FTYPE_V4DF_V4DF, PTEST)"}, {"sha": "9673524b33c0097d33f532c42a59a4ebfaab673a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -23916,6 +23916,15 @@ enum ix86_builtins\n   IX86_BUILTIN_ROUNDSD,\n   IX86_BUILTIN_ROUNDSS,\n \n+  IX86_BUILTIN_FLOORPD,\n+  IX86_BUILTIN_CEILPD,\n+  IX86_BUILTIN_TRUNCPD,\n+  IX86_BUILTIN_RINTPD,\n+  IX86_BUILTIN_FLOORPS,\n+  IX86_BUILTIN_CEILPS,\n+  IX86_BUILTIN_TRUNCPS,\n+  IX86_BUILTIN_RINTPS,\n+\n   IX86_BUILTIN_PTESTZ,\n   IX86_BUILTIN_PTESTC,\n   IX86_BUILTIN_PTESTNZC,\n@@ -24083,6 +24092,15 @@ enum ix86_builtins\n   IX86_BUILTIN_ROUNDPD256,\n   IX86_BUILTIN_ROUNDPS256,\n \n+  IX86_BUILTIN_FLOORPD256,\n+  IX86_BUILTIN_CEILPD256,\n+  IX86_BUILTIN_TRUNCPD256,\n+  IX86_BUILTIN_RINTPD256,\n+  IX86_BUILTIN_FLOORPS256,\n+  IX86_BUILTIN_CEILPS256,\n+  IX86_BUILTIN_TRUNCPS256,\n+  IX86_BUILTIN_RINTPS256,\n+\n   IX86_BUILTIN_UNPCKHPD256,\n   IX86_BUILTIN_UNPCKLPD256,\n   IX86_BUILTIN_UNPCKHPS256,\n@@ -25105,6 +25123,16 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundsd, \"__builtin_ia32_roundsd\", IX86_BUILTIN_ROUNDSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundss, \"__builtin_ia32_roundss\", IX86_BUILTIN_ROUNDSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_INT },\n \n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_floorpd\", IX86_BUILTIN_FLOORPD, (enum rtx_code) ROUND_FLOOR, (int) V2DF_FTYPE_V2DF_ROUND },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_ceilpd\", IX86_BUILTIN_CEILPD, (enum rtx_code) ROUND_CEIL, (int) V2DF_FTYPE_V2DF_ROUND },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_truncpd\", IX86_BUILTIN_TRUNCPD, (enum rtx_code) ROUND_TRUNC, (int) V2DF_FTYPE_V2DF_ROUND },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundpd, \"__builtin_ia32_rintpd\", IX86_BUILTIN_RINTPD, (enum rtx_code) ROUND_MXCSR, (int) V2DF_FTYPE_V2DF_ROUND },\n+\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_floorps\", IX86_BUILTIN_FLOORPS, (enum rtx_code) ROUND_FLOOR, (int) V4SF_FTYPE_V4SF_ROUND },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_ceilps\", IX86_BUILTIN_CEILPS, (enum rtx_code) ROUND_CEIL, (int) V4SF_FTYPE_V4SF_ROUND },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_truncps\", IX86_BUILTIN_TRUNCPS, (enum rtx_code) ROUND_TRUNC, (int) V4SF_FTYPE_V4SF_ROUND },\n+  { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_roundps, \"__builtin_ia32_rintps\", IX86_BUILTIN_RINTPS, (enum rtx_code) ROUND_MXCSR, (int) V4SF_FTYPE_V4SF_ROUND },\n+\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestz128\", IX86_BUILTIN_PTESTZ, EQ, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestc128\", IX86_BUILTIN_PTESTC, LTU, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n   { OPTION_MASK_ISA_ROUND, CODE_FOR_sse4_1_ptest, \"__builtin_ia32_ptestnzc128\", IX86_BUILTIN_PTESTNZC, GTU, (int) INT_FTYPE_V2DI_V2DI_PTEST },\n@@ -25217,6 +25245,16 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundpd256, \"__builtin_ia32_roundpd256\", IX86_BUILTIN_ROUNDPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_INT },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_roundps256\", IX86_BUILTIN_ROUNDPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_INT },\n \n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundpd256, \"__builtin_ia32_floorpd256\", IX86_BUILTIN_FLOORPD256, (enum rtx_code) ROUND_FLOOR, (int) V4DF_FTYPE_V4DF_ROUND },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundpd256, \"__builtin_ia32_ceilpd256\", IX86_BUILTIN_CEILPD256, (enum rtx_code) ROUND_CEIL, (int) V4DF_FTYPE_V4DF_ROUND },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundpd256, \"__builtin_ia32_truncpd256\", IX86_BUILTIN_TRUNCPD256, (enum rtx_code) ROUND_TRUNC, (int) V4DF_FTYPE_V4DF_ROUND },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundpd256, \"__builtin_ia32_rintpd256\", IX86_BUILTIN_RINTPD256, (enum rtx_code) ROUND_MXCSR, (int) V4DF_FTYPE_V4DF_ROUND },\n+\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_floorps256\", IX86_BUILTIN_FLOORPS256, (enum rtx_code) ROUND_FLOOR, (int) V8SF_FTYPE_V8SF_ROUND },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_ceilps256\", IX86_BUILTIN_CEILPS256, (enum rtx_code) ROUND_CEIL, (int) V8SF_FTYPE_V8SF_ROUND },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_truncps256\", IX86_BUILTIN_TRUNCPS256, (enum rtx_code) ROUND_TRUNC, (int) V8SF_FTYPE_V8SF_ROUND },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_avx_roundps256, \"__builtin_ia32_rintps256\", IX86_BUILTIN_RINTPS256, (enum rtx_code) ROUND_MXCSR, (int) V8SF_FTYPE_V8SF_ROUND },\n+\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_unpckhpd256,  \"__builtin_ia32_unpckhpd256\", IX86_BUILTIN_UNPCKHPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_unpcklpd256,  \"__builtin_ia32_unpcklpd256\", IX86_BUILTIN_UNPCKLPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF },\n   { OPTION_MASK_ISA_AVX, CODE_FOR_avx_unpckhps256,  \"__builtin_ia32_unpckhps256\", IX86_BUILTIN_UNPCKHPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF },\n@@ -26216,6 +26254,39 @@ ix86_expand_sse_comi (const struct builtin_description *d, tree exp,\n   return SUBREG_REG (target);\n }\n \n+/* Subroutine of ix86_expand_args_builtin to take care of round insns.  */\n+\n+static rtx\n+ix86_expand_sse_round (const struct builtin_description *d, tree exp,\n+\t\t       rtx target)\n+{\n+  rtx pat;\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  rtx op1, op0 = expand_normal (arg0);\n+  enum machine_mode tmode = insn_data[d->icode].operand[0].mode;\n+  enum machine_mode mode0 = insn_data[d->icode].operand[1].mode;\n+\n+  if (optimize || target == 0\n+      || GET_MODE (target) != tmode\n+      || !insn_data[d->icode].operand[0].predicate (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  if (VECTOR_MODE_P (mode0))\n+    op0 = safe_vector_operand (op0, mode0);\n+\n+  if ((optimize && !register_operand (op0, mode0))\n+      || !insn_data[d->icode].operand[0].predicate (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+\n+  op1 = GEN_INT (d->comparison);\n+\n+  pat = GEN_FCN (d->icode) (target, op0, op1);\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+  return target;\n+}\n+\n /* Subroutine of ix86_expand_builtin to take care of ptest insns.  */\n \n static rtx\n@@ -26485,6 +26556,11 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \n   switch ((enum ix86_builtin_func_type) d->flag)\n     {\n+    case V2DF_FTYPE_V2DF_ROUND:\n+    case V4DF_FTYPE_V4DF_ROUND:\n+    case V4SF_FTYPE_V4SF_ROUND:\n+    case V8SF_FTYPE_V8SF_ROUND:\n+      return ix86_expand_sse_round (d, exp, target);\n     case INT_FTYPE_V8SF_V8SF_PTEST:\n     case INT_FTYPE_V4DI_V4DI_PTEST:\n     case INT_FTYPE_V4DF_V4DF_PTEST:\n@@ -27581,6 +27657,118 @@ ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t}\n       break;\n \n+    case BUILT_IN_FLOOR:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math)\n+\tbreak;\n+\n+      if (out_mode == DFmode && in_mode == DFmode)\n+\t{\n+\t  if (out_n == 2 && in_n == 2)\n+\t    return ix86_builtins[IX86_BUILTIN_FLOORPD];\n+\t  else if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_FLOORPD256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_FLOORF:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math)\n+\tbreak;\n+\n+      if (out_mode == SFmode && in_mode == SFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_FLOORPS];\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_builtins[IX86_BUILTIN_FLOORPS256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_CEIL:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math)\n+\tbreak;\n+\n+      if (out_mode == DFmode && in_mode == DFmode)\n+\t{\n+\t  if (out_n == 2 && in_n == 2)\n+\t    return ix86_builtins[IX86_BUILTIN_CEILPD];\n+\t  else if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_CEILPD256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_CEILF:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math)\n+\tbreak;\n+\n+      if (out_mode == SFmode && in_mode == SFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_CEILPS];\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_builtins[IX86_BUILTIN_CEILPS256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_TRUNC:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math)\n+\tbreak;\n+\n+      if (out_mode == DFmode && in_mode == DFmode)\n+\t{\n+\t  if (out_n == 2 && in_n == 2)\n+\t    return ix86_builtins[IX86_BUILTIN_TRUNCPD];\n+\t  else if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_TRUNCPD256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_TRUNCF:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math)\n+\tbreak;\n+\n+      if (out_mode == SFmode && in_mode == SFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_TRUNCPS];\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_builtins[IX86_BUILTIN_TRUNCPS256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_RINT:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math)\n+\tbreak;\n+\n+      if (out_mode == DFmode && in_mode == DFmode)\n+\t{\n+\t  if (out_n == 2 && in_n == 2)\n+\t    return ix86_builtins[IX86_BUILTIN_RINTPD];\n+\t  else if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_RINTPD256];\n+\t}\n+      break;\n+\n+    case BUILT_IN_RINTF:\n+      /* The round insn does not trap on denormals.  */\n+      if (flag_trapping_math)\n+\tbreak;\n+\n+      if (out_mode == SFmode && in_mode == SFmode)\n+\t{\n+\t  if (out_n == 4 && in_n == 4)\n+\t    return ix86_builtins[IX86_BUILTIN_RINTPS];\n+\t  else if (out_n == 8 && in_n == 8)\n+\t    return ix86_builtins[IX86_BUILTIN_RINTPS256];\n+\t}\n+      break;\n+\n     case BUILT_IN_FMA:\n       if (out_mode == DFmode && in_mode == DFmode)\n \t{"}, {"sha": "12470eae14e651f9b7974507a99260cba4fb53c9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -272,6 +272,15 @@\n   UNSPECV_SPLIT_STACK_RETURN\n ])\n \n+;; Constants to represent rounding modes in the ROUND instruction\n+(define_constants\n+  [(ROUND_FLOOR\t\t\t0x1)\n+   (ROUND_CEIL\t\t\t0x2)\n+   (ROUND_TRUNC\t\t\t0x3)\n+   (ROUND_MXCSR\t\t\t0x4)\n+   (ROUND_NO_EXC\t\t0x8)\n+  ])\n+\n ;; Constants to represent pcomtrue/pcomfalse variants\n (define_constants\n   [(PCOM_FALSE\t\t\t0)\n@@ -14573,7 +14582,7 @@\n \tFAIL;\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n-\t\t   (operands[0], operands[1], GEN_INT (0x04)));\n+\t\t   (operands[0], operands[1], GEN_INT (ROUND_MXCSR)));\n       else\n \tix86_expand_rint (operand0, operand1);\n     }\n@@ -14819,7 +14828,7 @@\n \tFAIL;\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n-\t\t   (operands[0], operands[1], GEN_INT (0x01)));\n+\t\t   (operands[0], operands[1], GEN_INT (ROUND_FLOOR)));\n       else if (TARGET_64BIT || (<MODE>mode != DFmode))\n \tix86_expand_floorceil (operand0, operand1, true);\n       else\n@@ -15074,7 +15083,7 @@\n     {\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n-\t\t   (operands[0], operands[1], GEN_INT (0x02)));\n+\t\t   (operands[0], operands[1], GEN_INT (ROUND_CEIL)));\n       else if (optimize_insn_for_size_p ())\n \tFAIL;\n       else if (TARGET_64BIT || (<MODE>mode != DFmode))\n@@ -15329,7 +15338,7 @@\n     {\n       if (TARGET_ROUND)\n \temit_insn (gen_sse4_1_round<mode>2\n-\t\t   (operands[0], operands[1], GEN_INT (0x03)));\n+\t\t   (operands[0], operands[1], GEN_INT (ROUND_TRUNC)));\n       else if (optimize_insn_for_size_p ())\n \tFAIL;\n       else if (TARGET_64BIT || (<MODE>mode != DFmode))"}, {"sha": "1206685e8592063eed7725083bf913679e5314cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -1,3 +1,22 @@\n+2011-03-14  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse4_1-floor-vec.c: New test.\n+\t* gcc.target/i386/sse4_1-ceil-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-trunc-vec.c: Ditto.\n+\t* gcc-target/i386/sse4_1-rint-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-floorf-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-ceilf-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-truncf-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-rintf-vec.c: Ditto.\n+\t* gcc.target/i386/avx-floor-vec.c: Ditto.\n+\t* gcc.target/i386/avx-ceil-vec.c: Ditto.\n+\t* gcc.target/i386/avx-trunc-vec.c: Ditto.\n+\t* gcc.target/i386/avx-rint-vec.c: Ditto.\n+\t* gcc.target/i386/avx-floorf-vec.c: Ditto.\n+\t* gcc.target/i386/avx-ceilf-vec.c: Ditto.\n+\t* gcc.target/i386/avx-truncf-vec.c: Ditto.\n+\t* gcc.target/i386/avx-rintf-vec.c: Ditto.\n+\n 2011-03-14  Tom Tromey  <tromey@redhat.com>\n \n \t* gcc.dg/Woverlength-strings-pedantic-c90-asm.c: New file.\n@@ -27,8 +46,8 @@\n 2011-03-12  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/48053\n-\t* gcc/testsuite/gcc.target/powerpc/pr48053-1.c: New test.\n-\t* gcc/testsuite/gcc.target/powerpc/pr48053-2.c: Likewise.\n+\t* gcc.target/powerpc/pr48053-1.c: New test.\n+\t* gcc.target/powerpc/pr48053-2.c: Likewise.\n \n 2011-03-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n "}, {"sha": "e917e31b4efdf4d6b4a420bbfc78bf71e003513c", "filename": "gcc/testsuite/gcc.target/i386/avx-ceil-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"avx-check.h\"\n+\n+#include <math.h>\n+\n+extern double ceil (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = ceil (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != ceil (a[i]))\n+      abort();\n+}"}, {"sha": "ef316214d8a799a0863cd30389adc7404d802e9e", "filename": "gcc/testsuite/gcc.target/i386/avx-ceilf-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceilf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceilf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceilf-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"avx-check.h\"\n+\n+#include <math.h>\n+\n+extern float ceilf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = ceilf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != ceilf (a[i]))\n+      abort();\n+}"}, {"sha": "55f8f14c0908141f48c7d117e2c9812515fcb5cd", "filename": "gcc/testsuite/gcc.target/i386/avx-floor-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"avx-check.h\"\n+\n+#include <math.h>\n+\n+extern double floor (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = floor (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != floor (a[i]))\n+      abort();\n+}"}, {"sha": "00348114c8c0c25207c720b83b3843a630efa8c4", "filename": "gcc/testsuite/gcc.target/i386/avx-floorf-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floorf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floorf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floorf-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"avx-check.h\"\n+\n+#include <math.h>\n+\n+extern float floorf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = floorf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != floorf (a[i]))\n+      abort();\n+}"}, {"sha": "dc8c61017c3cb6f59df161af9815ace8b606e6d3", "filename": "gcc/testsuite/gcc.target/i386/avx-rint-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"avx-check.h\"\n+\n+#include <math.h>\n+\n+extern double rint (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = rint (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != rint (a[i]))\n+      abort();\n+}"}, {"sha": "4d77bf25b29ca465d59cc5f3d2c6ca355e256ef5", "filename": "gcc/testsuite/gcc.target/i386/avx-rintf-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rintf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rintf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rintf-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"avx-check.h\"\n+\n+#include <math.h>\n+\n+extern float rintf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = rintf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != rintf (a[i]))\n+      abort();\n+}"}, {"sha": "0b37eb4e04ad43d347114300f5eba5b59fe642fd", "filename": "gcc/testsuite/gcc.target/i386/avx-trunc-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-trunc-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-trunc-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-trunc-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"avx-check.h\"\n+\n+#include <math.h>\n+\n+extern double trunc (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = trunc (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != trunc (a[i]))\n+      abort();\n+}"}, {"sha": "099ff824624ae442f73c27e0c29dd5dce32e0291", "filename": "gcc/testsuite/gcc.target/i386/avx-truncf-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-truncf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-truncf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-truncf-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"avx-check.h\"\n+\n+#include <math.h>\n+\n+extern float truncf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+avx_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = truncf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != truncf (a[i]))\n+      abort();\n+}"}, {"sha": "886dd77c2068fe31f53b4642291e1dbf9982331e", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-ceil-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceil-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceil-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceil-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <math.h>\n+\n+extern double ceil (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+sse4_1_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = ceil (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != ceil (a[i]))\n+      abort();\n+}"}, {"sha": "41d59d74eac70a2a0492544b87299a944c6be795", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-ceilf-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceilf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceilf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-ceilf-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <math.h>\n+\n+extern float ceilf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+sse4_1_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = ceilf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != ceilf (a[i]))\n+      abort();\n+}"}, {"sha": "02ebe62ec7b56866f265367b0bc376a5e8b01d3d", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-floor-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floor-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floor-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floor-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <math.h>\n+\n+extern double floor (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+sse4_1_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = floor (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != floor (a[i]))\n+      abort();\n+}"}, {"sha": "6704892df537e4b170c48966bef9cdd625df5984", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-floorf-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floorf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floorf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-floorf-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <math.h>\n+\n+extern float floorf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+sse4_1_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = floorf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != floorf (a[i]))\n+      abort();\n+}"}, {"sha": "8df5717a23d29ff8e2b8dca58a30981c403fd975", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-rint-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <math.h>\n+\n+extern double rint (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+sse4_1_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = rint (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != rint (a[i]))\n+      abort();\n+}"}, {"sha": "9c97c35bed92689b9784fa209c31192268ca17e3", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-rintf-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rintf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rintf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rintf-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <math.h>\n+\n+extern float rintf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+sse4_1_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = rintf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != rintf (a[i]))\n+      abort();\n+}"}, {"sha": "e82dec93f88c97fecaa673aeabd4f660822449f3", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-trunc-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-trunc-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-trunc-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-trunc-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <math.h>\n+\n+extern double trunc (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+sse4_1_test (void)\n+{\n+  double a[NUM];\n+  double r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = trunc (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != trunc (a[i]))\n+      abort();\n+}"}, {"sha": "6a267ca94d60dad5c014db6d3fcea114751d53d7", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-truncf-vec.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-truncf-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34abfd27199742109a50122c3ee545a57b8fa6f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-truncf-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-truncf-vec.c?ref=d34abfd27199742109a50122c3ee545a57b8fa6f", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <math.h>\n+\n+extern float truncf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+sse4_1_test (void)\n+{\n+  float a[NUM];\n+  float r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = truncf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != truncf (a[i]))\n+      abort();\n+}"}]}