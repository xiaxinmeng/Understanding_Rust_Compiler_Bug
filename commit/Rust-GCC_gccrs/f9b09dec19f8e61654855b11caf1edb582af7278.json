{"sha": "f9b09dec19f8e61654855b11caf1edb582af7278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliMDlkZWMxOWY4ZTYxNjU0ODU1YjExY2FmMWVkYjU4MmFmNzI3OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-06-11T18:32:30Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-06-11T18:32:30Z"}, "message": "random.tcc (negative_binomial_distribution<>::operator() (_UniformRandomNumberGenerator&, const param_type&): Tweak to use a class member gamma_distribution.\n\n2009-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.tcc\n\t(negative_binomial_distribution<>::operator()\n\t(_UniformRandomNumberGenerator&, const param_type&): Tweak to use a\n\tclass member gamma_distribution.\n\t(negative_binomial_distribution<>::operator()\n\t(_UniformRandomNumberGenerator&)): Implement out of line here.\n\t(operator<<(basic_ostream<>&, negative_binomial_distribution<>),\n\toperator>>(basic_ostream<>&, negative_binomial_distribution<>): Adjust.\n\t(student_t_distribution<>::operator()\n\t(_UniformRandomNumberGenerator&, const param_type&): Move inline,\n\tsimplify.\n\t(operator<<(basic_ostream<>&, student_t_distribution<>),\n\toperator>>(basic_ostream<>&, student_t_distribution<>): Adjust.\n\t(chi_squared_distribution<>::operator()\n\t(_UniformRandomNumberGenerator&, const param_type&): Move inline,\n\ttweak to use a class member gamma_distribution.\n\t(operator<<(basic_ostream<>&, chi_squared_distribution<>),\n\toperator>>(basic_ostream<>&, chi_squared_distribution<>): Adjust.\n\t(fisher_f_distribution<>::operator() (_UniformRandomNumberGenerator&,\n\tconst param_type&): Move inline, tweak to use class member\n\tgamma_distributions.\n\t(operator<<(basic_ostream<>&, fisher_f_distribution<>),\n\toperator>>(basic_ostream<>&, fisher_f_distribution<>): Adjust.\n\t* include/bits/random.h: Adjust, minor tweaks.\n\nFrom-SVN: r148393", "tree": {"sha": "5b9877c63eeb16563d7d7c1b934e65bfbeebb9f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b9877c63eeb16563d7d7c1b934e65bfbeebb9f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9b09dec19f8e61654855b11caf1edb582af7278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b09dec19f8e61654855b11caf1edb582af7278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b09dec19f8e61654855b11caf1edb582af7278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b09dec19f8e61654855b11caf1edb582af7278/comments", "author": null, "committer": null, "parents": [{"sha": "2995ebee5c855f27f2c0c99eb6c58577f85dec28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2995ebee5c855f27f2c0c99eb6c58577f85dec28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2995ebee5c855f27f2c0c99eb6c58577f85dec28"}], "stats": {"total": 533, "additions": 271, "deletions": 262}, "files": [{"sha": "4173c75951e147268965ca6d802b9a39364fdc9c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b09dec19f8e61654855b11caf1edb582af7278/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b09dec19f8e61654855b11caf1edb582af7278/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f9b09dec19f8e61654855b11caf1edb582af7278", "patch": "@@ -1,7 +1,33 @@\n+2009-06-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.tcc\n+\t(negative_binomial_distribution<>::operator()\n+\t(_UniformRandomNumberGenerator&, const param_type&): Tweak to use a\n+\tclass member gamma_distribution.\n+\t(negative_binomial_distribution<>::operator()\n+\t(_UniformRandomNumberGenerator&)): Implement out of line here.\n+\t(operator<<(basic_ostream<>&, negative_binomial_distribution<>),\n+\toperator>>(basic_ostream<>&, negative_binomial_distribution<>): Adjust.\n+\t(student_t_distribution<>::operator()\n+\t(_UniformRandomNumberGenerator&, const param_type&): Move inline,\n+\tsimplify.\n+\t(operator<<(basic_ostream<>&, student_t_distribution<>),\n+\toperator>>(basic_ostream<>&, student_t_distribution<>): Adjust.\n+\t(chi_squared_distribution<>::operator()\n+\t(_UniformRandomNumberGenerator&, const param_type&): Move inline,\n+\ttweak to use a class member gamma_distribution.\n+\t(operator<<(basic_ostream<>&, chi_squared_distribution<>),\n+\toperator>>(basic_ostream<>&, chi_squared_distribution<>): Adjust.\n+\t(fisher_f_distribution<>::operator() (_UniformRandomNumberGenerator&,\n+\tconst param_type&): Move inline, tweak to use class member\n+\tgamma_distributions.\n+\t(operator<<(basic_ostream<>&, fisher_f_distribution<>),\n+\toperator>>(basic_ostream<>&, fisher_f_distribution<>): Adjust.\n+\t* include/bits/random.h: Adjust, minor tweaks.\n+\n 2009-06-10  Tom Tromey  <tromey@redhat.com>\n \n-\t* python/libstdcxx/v6/printers.py (lookup_function): Remove extra\n-\t';'.\n+\t* python/libstdcxx/v6/printers.py (lookup_function): Remove extra ';'.\n \t(build_libstdcxx_dictionary): Accept shortened form of\n \tbasic_string names.\n \t(StdStringPrinter.to_string): Remove reference to WideEncoding."}, {"sha": "e8edbf05dd44bf747992b5a68ab313d5d36547e3", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 213, "deletions": 183, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b09dec19f8e61654855b11caf1edb582af7278/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b09dec19f8e61654855b11caf1edb582af7278/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=f9b09dec19f8e61654855b11caf1edb582af7278", "patch": "@@ -2078,7 +2078,7 @@ namespace std\n     private:\n       param_type _M_param;\n \n-      normal_distribution<result_type> _M_nd;\n+      std::normal_distribution<result_type> _M_nd;\n     };\n \n   /**\n@@ -2111,6 +2111,164 @@ namespace std\n     operator>>(std::basic_istream<_CharT, _Traits>&,\n \t       std::lognormal_distribution<_RealType>&);\n \n+  \n+  /**\n+   * @brief A gamma continuous distribution for random numbers.\n+   *\n+   * The formula for the gamma probability density function is\n+   * @f$ p(x|\\alpha,\\beta) = \\frac{1}{\\beta\\Gamma(\\alpha)}\n+   *                         (x/\\beta)^{\\alpha - 1} e^{-x/\\beta} @f$.\n+   */\n+  template<typename _RealType = double>\n+    class gamma_distribution\n+    {\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef _RealType result_type;\n+      /** Parameter type. */\n+      struct param_type\n+      {\n+\ttypedef gamma_distribution<_RealType> distribution_type;\n+\tfriend class gamma_distribution<_RealType>;\n+\n+\texplicit\n+\tparam_type(_RealType __alpha_val = _RealType(1),\n+\t\t   _RealType __beta_val = _RealType(1))\n+\t: _M_alpha(__alpha_val), _M_beta(__beta_val)\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(_M_alpha > _RealType(0));\n+\t  _M_initialize();\n+\t}\n+\n+\t_RealType\n+\talpha() const\n+\t{ return _M_alpha; }\n+\n+\t_RealType\n+\tbeta() const\n+\t{ return _M_beta; }\n+\n+      private:\n+\tvoid\n+\t_M_initialize();\n+\n+\t_RealType _M_alpha;\n+\t_RealType _M_beta;\n+\n+\t_RealType _M_malpha, _M_a2;\n+      };\n+\n+    public:\n+      /**\n+       * @brief Constructs a gamma distribution with parameters\n+       * @f$ \\alpha @f$ and @f$ \\beta @f$.\n+       */\n+      explicit\n+      gamma_distribution(_RealType __alpha_val = _RealType(1),\n+\t\t\t _RealType __beta_val = _RealType(1))\n+      : _M_param(__alpha_val, __beta_val), _M_nd()\n+      { }\n+\n+      explicit\n+      gamma_distribution(const param_type& __p)\n+      : _M_param(__p), _M_nd()\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      { _M_nd.reset(); }\n+\n+      /**\n+       * @brief Returns the @f$ \\alpha @f$ of the distribution.\n+       */\n+      _RealType\n+      alpha() const\n+      { return _M_param.alpha(); }\n+\n+      /**\n+       * @brief Returns the @f$ \\beta @f$ of the distribution.\n+       */\n+      _RealType\n+      beta() const\n+      { return _M_param.beta(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      { return result_type(0); }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { return std::numeric_limits<result_type>::max(); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{ return this->operator()(__urng, this->param()); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p);\n+\n+    private:\n+      param_type _M_param;\n+\n+      std::normal_distribution<result_type> _M_nd;\n+    };\n+\n+  /**\n+   * @brief Inserts a %gamma_distribution random number distribution\n+   * @p __x into the output stream @p __os.\n+   *\n+   * @param __os An output stream.\n+   * @param __x  A %gamma_distribution random number distribution.\n+   *\n+   * @returns The output stream with the state of @p __x inserted or in\n+   * an error state.\n+   */\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t       const std::gamma_distribution<_RealType>&);\n+\n+  /**\n+   * @brief Extracts a %gamma_distribution random number distribution\n+   * @p __x from the input stream @p __is.\n+   *\n+   * @param __is An input stream.\n+   * @param __x  A %gamma_distribution random number generator engine.\n+   *\n+   * @returns The input stream with @p __x extracted or in an error state.\n+   */\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>&,\n+\t       std::gamma_distribution<_RealType>&);\n+\n \n   /**\n    * @brief A chi_squared_distribution random number distribution.\n@@ -2144,20 +2302,20 @@ namespace std\n \n       explicit\n       chi_squared_distribution(_RealType __n = _RealType(1))\n-      : _M_param(__n)\n+      : _M_param(__n), _M_gd(__n / 2)\n       { }\n \n       explicit\n       chi_squared_distribution(const param_type& __p)\n-      : _M_param(__p)\n+      : _M_param(__p), _M_gd(__p.n() / 2)\n       { }\n \n       /**\n        * @brief Resets the distribution state.\n        */\n       void\n       reset()\n-      { }\n+      { _M_gd.reset(); }\n \n       /**\n        *\n@@ -2198,15 +2356,22 @@ namespace std\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return 2 * _M_gd(__urng); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p);\n+\t\t   const param_type& __p)\n+        {\n+\t  typedef typename std::gamma_distribution<result_type>::param_type\n+\t    param_type;\n+\t  return 2 * _M_gd(__urng, param_type(__p.n() / 2));\n+\t}\n \n     private:\n       param_type _M_param;\n+\n+      std::gamma_distribution<result_type> _M_gd;\n     };\n \n   /**\n@@ -2420,20 +2585,23 @@ namespace std\n       explicit\n       fisher_f_distribution(_RealType __m = _RealType(1),\n \t\t\t    _RealType __n = _RealType(1))\n-      : _M_param(__m, __n)\n+      : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2)\n       { }\n \n       explicit\n       fisher_f_distribution(const param_type& __p)\n-      : _M_param(__p)\n+      : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2)\n       { }\n \n       /**\n        * @brief Resets the distribution state.\n        */\n       void\n       reset()\n-      { }\n+      {\n+\t_M_gd_x.reset();\n+\t_M_gd_y.reset();\n+      }\n \n       /**\n        *\n@@ -2478,15 +2646,23 @@ namespace std\n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+\t{ return (_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p);\n+\t\t   const param_type& __p)\n+        {\n+\t  typedef typename std::gamma_distribution<result_type>::param_type\n+\t    param_type;\n+\t  return ((_M_gd_x(__urng, param_type(__p.m() / 2)) * n())\n+\t\t  / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));\n+\t}\n \n     private:\n       param_type _M_param;\n+\n+      std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;\n     };\n \n   /**\n@@ -2553,20 +2729,23 @@ namespace std\n \n       explicit\n       student_t_distribution(_RealType __n = _RealType(1))\n-      : _M_param(__n), _M_nd()\n+      : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2)\n       { }\n \n       explicit\n       student_t_distribution(const param_type& __p)\n-      : _M_param(__p), _M_nd()\n+      : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2)\n       { }\n \n       /**\n        * @brief Resets the distribution state.\n        */\n       void\n       reset()\n-      { _M_nd.reset(); }\n+      {\n+\t_M_nd.reset();\n+\t_M_gd.reset();\n+      }\n \n       /**\n        *\n@@ -2606,18 +2785,26 @@ namespace std\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n-\toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+        operator()(_UniformRandomNumberGenerator& __urng)\n+        { return _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng)); }\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n \toperator()(_UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p);\n+\t\t   const param_type& __p)\n+        {\n+\t  typedef typename std::gamma_distribution<result_type>::param_type\n+\t    param_type;\n+\t\n+\t  const result_type __g = _M_gd(__urng, param_type(__p.n() / 2, 2));\n+\t  return _M_nd(__urng) * std::sqrt(__p.n() / __g);\n+        }\n \n     private:\n       param_type _M_param;\n \n-      normal_distribution<result_type> _M_nd;\n+      std::normal_distribution<result_type> _M_nd;\n+      std::gamma_distribution<result_type> _M_gd;\n     };\n \n   /**\n@@ -2977,7 +3164,7 @@ namespace std\n       param_type _M_param;\n \n       // NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.\n-      normal_distribution<double> _M_nd;\n+      std::normal_distribution<double> _M_nd;\n     };\n \n \n@@ -3166,20 +3353,20 @@ namespace std\n \n       explicit\n       negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)\n-      : _M_param(__k, __p)\n+      : _M_param(__k, __p), _M_gd(__k, __p / (1.0 - __p))\n       { }\n \n       explicit\n       negative_binomial_distribution(const param_type& __p)\n-      : _M_param(__p)\n+      : _M_param(__p), _M_gd(__p.k(), __p.p() / (1.0 - __p.p()))\n       { }\n \n       /**\n        * @brief Resets the distribution state.\n        */\n       void\n       reset()\n-      { }\n+      { _M_gd.reset(); }\n \n       /**\n        * @brief Return the @f$ k @f$ parameter of the distribution.\n@@ -3226,8 +3413,7 @@ namespace std\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n-\toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n+        operator()(_UniformRandomNumberGenerator& __urng);\n \n       template<typename _UniformRandomNumberGenerator>\n \tresult_type\n@@ -3236,6 +3422,8 @@ namespace std\n \n     private:\n       param_type _M_param;\n+\n+      std::gamma_distribution<double> _M_gd;\n     };\n \n   /**\n@@ -3421,7 +3609,7 @@ namespace std\n       param_type _M_param;\n \n       // NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.\n-      normal_distribution<double> _M_nd;\n+      std::normal_distribution<double> _M_nd;\n     };\n \n   /**\n@@ -3574,164 +3762,6 @@ namespace std\n \t       std::exponential_distribution<_RealType>&);\n \n \n-  /**\n-   * @brief A gamma continuous distribution for random numbers.\n-   *\n-   * The formula for the gamma probability density function is\n-   * @f$ p(x|\\alpha,\\beta) = \\frac{1}{\\beta\\Gamma(\\alpha)}\n-   *                         (x/\\beta)^{\\alpha - 1} e^{-x/\\beta} @f$.\n-   */\n-  template<typename _RealType = double>\n-    class gamma_distribution\n-    {\n-    public:\n-      /** The type of the range of the distribution. */\n-      typedef _RealType result_type;\n-      /** Parameter type. */\n-      struct param_type\n-      {\n-\ttypedef gamma_distribution<_RealType> distribution_type;\n-\tfriend class gamma_distribution<_RealType>;\n-\n-\texplicit\n-\tparam_type(_RealType __alpha_val = _RealType(1),\n-\t\t   _RealType __beta_val = _RealType(1))\n-\t: _M_alpha(__alpha_val), _M_beta(__beta_val)\n-\t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_alpha > _RealType(0));\n-\t  _M_initialize();\n-\t}\n-\n-\t_RealType\n-\talpha() const\n-\t{ return _M_alpha; }\n-\n-\t_RealType\n-\tbeta() const\n-\t{ return _M_beta; }\n-\n-      private:\n-\tvoid\n-\t_M_initialize();\n-\n-\t_RealType _M_alpha;\n-\t_RealType _M_beta;\n-\n-\t_RealType _M_malpha, _M_a2;\n-      };\n-\n-    public:\n-      /**\n-       * @brief Constructs a gamma distribution with parameters\n-       * @f$ \\alpha @f$ and @f$ \\beta @f$.\n-       */\n-      explicit\n-      gamma_distribution(_RealType __alpha_val = _RealType(1),\n-\t\t\t _RealType __beta_val = _RealType(1))\n-      : _M_param(__alpha_val, __beta_val), _M_nd()\n-      { }\n-\n-      explicit\n-      gamma_distribution(const param_type& __p)\n-      : _M_param(__p), _M_nd()\n-      { }\n-\n-      /**\n-       * @brief Resets the distribution state.\n-       */\n-      void\n-      reset()\n-      { _M_nd.reset(); }\n-\n-      /**\n-       * @brief Returns the @f$ \\alpha @f$ of the distribution.\n-       */\n-      _RealType\n-      alpha() const\n-      { return _M_param.alpha(); }\n-\n-      /**\n-       * @brief Returns the @f$ \\beta @f$ of the distribution.\n-       */\n-      _RealType\n-      beta() const\n-      { return _M_param.beta(); }\n-\n-      /**\n-       * @brief Returns the parameter set of the distribution.\n-       */\n-      param_type\n-      param() const\n-      { return _M_param; }\n-\n-      /**\n-       * @brief Sets the parameter set of the distribution.\n-       * @param __param The new parameter set of the distribution.\n-       */\n-      void\n-      param(const param_type& __param)\n-      { _M_param = __param; }\n-\n-      /**\n-       * @brief Returns the greatest lower bound value of the distribution.\n-       */\n-      result_type\n-      min() const\n-      { return result_type(0); }\n-\n-      /**\n-       * @brief Returns the least upper bound value of the distribution.\n-       */\n-      result_type\n-      max() const\n-      { return std::numeric_limits<result_type>::max(); }\n-\n-      template<typename _UniformRandomNumberGenerator>\n-\tresult_type\n-\toperator()(_UniformRandomNumberGenerator& __urng)\n-\t{ return this->operator()(__urng, this->param()); }\n-\n-      template<typename _UniformRandomNumberGenerator>\n-\tresult_type\n-\toperator()(_UniformRandomNumberGenerator& __urng,\n-\t\t   const param_type& __p);\n-\n-    private:\n-      param_type _M_param;\n-\n-      normal_distribution<result_type> _M_nd;\n-    };\n-\n-  /**\n-   * @brief Inserts a %gamma_distribution random number distribution\n-   * @p __x into the output stream @p __os.\n-   *\n-   * @param __os An output stream.\n-   * @param __x  A %gamma_distribution random number distribution.\n-   *\n-   * @returns The output stream with the state of @p __x inserted or in\n-   * an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>&,\n-\t       const std::gamma_distribution<_RealType>&);\n-\n-  /**\n-   * @brief Extracts a %gamma_distribution random number distribution\n-   * @p __x from the input stream @p __is.\n-   *\n-   * @param __is An input stream.\n-   * @param __x  A %gamma_distribution random number generator engine.\n-   *\n-   * @returns The input stream with @p __x extracted or in an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>&,\n-\t       std::gamma_distribution<_RealType>&);\n-\n-\n   /**\n    * @brief A weibull_distribution random number distribution.\n    *"}, {"sha": "eb2ce4a4500a95017ab650b00d5f3066133d8652", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 30, "deletions": 77, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9b09dec19f8e61654855b11caf1edb582af7278/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9b09dec19f8e61654855b11caf1edb582af7278/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=f9b09dec19f8e61654855b11caf1edb582af7278", "patch": "@@ -854,18 +854,34 @@ namespace std\n       return __is;\n     }\n \n+\n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename negative_binomial_distribution<_IntType>::result_type\n+      negative_binomial_distribution<_IntType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\tconst double __y = _M_gd(__urng);\n+\n+\t// XXX Is the constructor too slow?\n+\tstd::poisson_distribution<result_type> __poisson(__y);\n+\treturn __poisson(__urng);\n+      }\n+\n   template<typename _IntType>\n     template<typename _UniformRandomNumberGenerator>\n       typename negative_binomial_distribution<_IntType>::result_type\n       negative_binomial_distribution<_IntType>::\n       operator()(_UniformRandomNumberGenerator& __urng,\n \t\t const param_type& __p)\n       {\n-\tgamma_distribution<> __gamma(__p.k(), 1.0);\n-\tdouble __x = __gamma(__urng);\n+\ttypedef typename std::gamma_distribution<result_type>::param_type\n+\t  param_type;\n+\t\n+\tconst double __y =\n+\t  _M_gd(__urng, param_type(__p.k(), __p.p() / (1.0 - __p.p())));\n \n-\tpoisson_distribution<result_type> __poisson(__x * __p.p()\n-\t\t\t\t\t\t    / (1.0 - __p.p()));\n+\tstd::poisson_distribution<result_type> __poisson(__y);\n \treturn __poisson(__urng);\n       }\n \n@@ -885,7 +901,8 @@ namespace std\n       __os.fill(__os.widen(' '));\n       __os.precision(std::numeric_limits<double>::digits10 + 1);\n \n-      __os << __x.k() << __space << __x.p();\n+      __os << __x.k() << __space << __x.p()\n+\t   << __space << __x._M_gd;\n \n       __os.flags(__flags);\n       __os.fill(__fill);\n@@ -906,7 +923,7 @@ namespace std\n \n       _IntType __k;\n       double __p;\n-      __is >> __k >> __p;\n+      __is >> __k >> __p >> __x._M_gd;\n       __x.param(typename negative_binomial_distribution<_IntType>::\n \t\tparam_type(__k, __p));\n \n@@ -1538,17 +1555,6 @@ namespace std\n     }\n \n \n-  template<typename _RealType>\n-    template<typename _UniformRandomNumberGenerator>\n-      typename chi_squared_distribution<_RealType>::result_type\n-      chi_squared_distribution<_RealType>::\n-      operator()(_UniformRandomNumberGenerator& __urng,\n-\t\t const param_type& __p)\n-      {\n-\tgamma_distribution<_RealType> __gamma(__p.n() / 2, 1.0);\n-\treturn 2 * __gamma(__urng);\n-      }\n-\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1565,7 +1571,7 @@ namespace std\n       __os.fill(__space);\n       __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n \n-      __os << __x.n();\n+      __os << __x.n() << __space << __x._M_gd;\n \n       __os.flags(__flags);\n       __os.fill(__fill);\n@@ -1585,7 +1591,7 @@ namespace std\n       __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       _RealType __n;\n-      __is >> __n;\n+      __is >> __n >> __x._M_gd;\n       __x.param(typename chi_squared_distribution<_RealType>::\n \t\tparam_type(__n));\n \n@@ -1657,23 +1663,6 @@ namespace std\n     }\n \n \n-  template<typename _RealType>\n-    template<typename _UniformRandomNumberGenerator>\n-      typename fisher_f_distribution<_RealType>::result_type\n-      fisher_f_distribution<_RealType>::\n-      operator()(_UniformRandomNumberGenerator& __urng,\n-\t\t const param_type& __p)\n-      {\n-\tgamma_distribution<_RealType> __gamma;\n-\t_RealType __ym = __gamma(__urng,\n-\t typename gamma_distribution<_RealType>::param_type(__p.m() / 2, 2));\n-\n-\t_RealType __yn = __gamma(__urng,\n-\t typename gamma_distribution<_RealType>::param_type(__p.n() / 2, 2));\n-\n-\treturn (__ym * __p.n()) / (__yn * __p.m());\n-      }\n-\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1690,7 +1679,8 @@ namespace std\n       __os.fill(__space);\n       __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n \n-      __os << __x.m() << __space << __x.n();\n+      __os << __x.m() << __space << __x.n()\n+\t   << __space << __x._M_gd_x << __space << __x._M_gd_y;\n \n       __os.flags(__flags);\n       __os.fill(__fill);\n@@ -1710,7 +1700,7 @@ namespace std\n       __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       _RealType __m, __n;\n-      __is >> __m >> __n;\n+      __is >> __m >> __n >> __x._M_gd_x >> __x._M_gd_y;\n       __x.param(typename fisher_f_distribution<_RealType>::\n \t\tparam_type(__m, __n));\n \n@@ -1719,43 +1709,6 @@ namespace std\n     }\n \n \n-  template<typename _RealType>\n-    template<typename _UniformRandomNumberGenerator>\n-      typename student_t_distribution<_RealType>::result_type\n-      student_t_distribution<_RealType>::\n-      operator()(_UniformRandomNumberGenerator& __urng,\n-\t\t const param_type& __param)\n-      {\n-\tif (__param.n() <= 2.0)\n-\t  {\n-\t    _RealType __y1 = _M_nd(__urng);\n-\t    chi_squared_distribution<_RealType> __chisq(__param.n());\n-\t    _RealType __y2 = __chisq(__urng);\n-\n-\t    return __y1 / std::sqrt(__y2 / __param.n());\n-\t  }\n-\telse\n-\t  {\n-\t    _RealType __y1, __y2, __z;\n-\t    exponential_distribution<_RealType>\n-\t      __exponential(1.0 / (__param.n() / 2.0 - 1.0));\n-\n-\t    do\n-\t      {\n-\t\t__y1 = _M_nd(__urng);\n-\t\t__y2 = __exponential(__urng);\n-\n-\t\t__z = __y1 * __y1 / (__param.n() - 2.0);\n-\t      }\n-\t    while (1.0 - __z < 0.0 || std::exp(-__y2 - __z) > (1.0 - __z));\n-\n-\t    // Note that there is a typo in Knuth's formula, the line below\n-\t    // is taken from the original paper of Marsaglia, Mathematics of\n-\t    // Computation, 34 (1980), p 234-256\n-\t    return __y1 / std::sqrt((1.0 - 2.0 / __param.n()) * (1.0 - __z));\n-\t  }\n-      }\n-\n   template<typename _RealType, typename _CharT, typename _Traits>\n     std::basic_ostream<_CharT, _Traits>&\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n@@ -1772,7 +1725,7 @@ namespace std\n       __os.fill(__space);\n       __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n \n-      __os << __x.n() << __space << __x._M_nd;\n+      __os << __x.n() << __space << __x._M_nd << __space << __x._M_gd;\n \n       __os.flags(__flags);\n       __os.fill(__fill);\n@@ -1792,7 +1745,7 @@ namespace std\n       __is.flags(__ios_base::dec | __ios_base::skipws);\n \n       _RealType __n;\n-      __is >> __n >> __x._M_nd;\n+      __is >> __n >> __x._M_nd >> __x._M_gd;\n       __x.param(typename student_t_distribution<_RealType>::param_type(__n));\n \n       __is.flags(__flags);"}]}