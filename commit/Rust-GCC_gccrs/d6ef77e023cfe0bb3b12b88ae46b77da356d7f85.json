{"sha": "d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlZjc3ZTAyM2NmZTBiYjNiMTJiODhhZTQ2Yjc3ZGEzNTZkN2Y4NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-11T11:04:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-12T00:07:41Z"}, "message": "c++: Fix implicit friend operator==.\n\nIt seems that in writing testcases for the operator<=> proposal I didn't\ninclude any tests for implicitly declared friend operator==, and\nconsequently it didn't work.\n\n2020-02-11  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/93675\n\t* class.c (add_implicitly_declared_members): Use do_friend.\n\t* method.c (implicitly_declare_fn): Fix friend handling.\n\t(decl_remember_implicit_trigger_p): New.\n\t(synthesize_method): Use it.\n\t* decl2.c (mark_used): Use it.", "tree": {"sha": "a70bf6c80ef0ce4f40fb73e7428ec56e9d3d80b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a70bf6c80ef0ce4f40fb73e7428ec56e9d3d80b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a5338e57db1cda13fa788b0e0debbcf99a475d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5338e57db1cda13fa788b0e0debbcf99a475d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a5338e57db1cda13fa788b0e0debbcf99a475d6"}], "stats": {"total": 151, "additions": 140, "deletions": 11}, "files": [{"sha": "7567bbe67224618386b25f4c4e3b22d3bbc29e17", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "patch": "@@ -1,3 +1,12 @@\n+2020-02-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/93675\n+\t* class.c (add_implicitly_declared_members): Use do_friend.\n+\t* method.c (implicitly_declare_fn): Fix friend handling.\n+\t(decl_remember_implicit_trigger_p): New.\n+\t(synthesize_method): Use it.\n+\t* decl2.c (mark_used): Use it.\n+\n 2020-02-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93650"}, {"sha": "f9e46ca708f89ac35706934c63c6a1472f984a2d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "patch": "@@ -3241,7 +3241,11 @@ add_implicitly_declared_members (tree t, tree* access_decls,\n       {\n \ttree eq = implicitly_declare_fn (sfk_comparison, t, false, space,\n \t\t\t\t\t NULL_TREE);\n-\tadd_method (t, eq, false);\n+\tif (DECL_FRIEND_P (space))\n+\t  do_friend (NULL_TREE, DECL_NAME (eq), eq,\n+\t\t     NULL_TREE, NO_SPECIAL, true);\n+\telse\n+\t  add_method (t, eq, false);\n       }\n \n   while (*access_decls)"}, {"sha": "53de2b0afe7ca41174cd64792a8726ceffa1bb25", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "patch": "@@ -6801,6 +6801,7 @@ extern void after_nsdmi_defaulted_late_checks   (tree);\n extern bool maybe_explain_implicit_delete\t(tree);\n extern void explain_implicit_non_constexpr\t(tree);\n extern void deduce_inheriting_ctor\t\t(tree);\n+extern bool decl_remember_implicit_trigger_p\t(tree);\n extern void synthesize_method\t\t\t(tree);\n extern tree lazily_declare_fn\t\t\t(special_function_kind,\n \t\t\t\t\t\t tree);"}, {"sha": "2efb2e54f37179b74b502f854038e273a61f74a9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "patch": "@@ -5650,7 +5650,7 @@ mark_used (tree decl, tsubst_flags_t complain)\n       /* Remember the current location for a function we will end up\n \t synthesizing.  Then we can inform the user where it was\n \t required in the case of error.  */\n-      if (DECL_ARTIFICIAL (decl))\n+      if (decl_remember_implicit_trigger_p (decl))\n \tDECL_SOURCE_LOCATION (decl) = input_location;\n \n       /* Synthesizing an implicitly defined member function will result in"}, {"sha": "790d5704092aa534c009a3a6f29edb603eec254e", "filename": "gcc/cp/method.c", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "patch": "@@ -1463,6 +1463,22 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n     --cp_unevaluated_operand;\n }\n \n+/* True iff DECL is an implicitly-declared special member function with no real\n+   source location, so we can use its DECL_SOURCE_LOCATION to remember where we\n+   triggered its synthesis.  */\n+\n+bool\n+decl_remember_implicit_trigger_p (tree decl)\n+{\n+  if (!DECL_ARTIFICIAL (decl))\n+    return false;\n+  special_function_kind sfk = special_function_p (decl);\n+  /* Inherited constructors have the location of their using-declaration, and\n+     operator== has the location of the corresponding operator<=>.  */\n+  return (sfk != sfk_inheriting_constructor\n+\t  && sfk != sfk_comparison);\n+}\n+\n /* Synthesize FNDECL, a non-static member function.   */\n \n void\n@@ -1479,7 +1495,7 @@ synthesize_method (tree fndecl)\n \n   /* Reset the source location, we might have been previously\n      deferred, and thus have saved where we were first needed.  */\n-  if (DECL_ARTIFICIAL (fndecl) && !DECL_INHERITED_CTOR (fndecl))\n+  if (decl_remember_implicit_trigger_p (fndecl))\n     DECL_SOURCE_LOCATION (fndecl)\n       = DECL_SOURCE_LOCATION (TYPE_NAME (DECL_CONTEXT (fndecl)));\n \n@@ -2717,9 +2733,15 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n     type_set_nontrivial_flag (type, kind);\n \n   /* Create the function.  */\n-  tree this_type = cp_build_qualified_type (type, this_quals);\n-  fn_type = build_method_type_directly (this_type, return_type,\n-\t\t\t\t\tparameter_types);\n+  if (friend_p)\n+    fn_type = build_function_type (return_type, parameter_types);\n+  else\n+    {\n+      tree this_type = cp_build_qualified_type (type, this_quals);\n+      fn_type = build_method_type_directly (this_type, return_type,\n+\t\t\t\t\t    parameter_types);\n+    }\n+\n   if (raises)\n     {\n       if (raises != error_mark_node)\n@@ -2794,12 +2816,19 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n \t inheriting constructor doesn't satisfy the requirements.  */\n       constexpr_p = DECL_DECLARED_CONSTEXPR_P (inherited_ctor);\n     }\n-  /* Add the \"this\" parameter.  */\n-  this_parm = build_this_parm (fn, fn_type, this_quals);\n-  DECL_CHAIN (this_parm) = DECL_ARGUMENTS (fn);\n-  DECL_ARGUMENTS (fn) = this_parm;\n \n-  grokclassfn (type, fn, kind == sfk_destructor ? DTOR_FLAG : NO_SPECIAL);\n+  if (friend_p)\n+    DECL_CONTEXT (fn) = DECL_CONTEXT (pattern_fn);\n+  else\n+    {\n+      /* Add the \"this\" parameter.  */\n+      this_parm = build_this_parm (fn, fn_type, this_quals);\n+      DECL_CHAIN (this_parm) = DECL_ARGUMENTS (fn);\n+      DECL_ARGUMENTS (fn) = this_parm;\n+\n+      grokclassfn (type, fn, kind == sfk_destructor ? DTOR_FLAG : NO_SPECIAL);\n+    }\n+\n   DECL_IN_AGGR_P (fn) = 1;\n   DECL_ARTIFICIAL (fn) = 1;\n   DECL_DEFAULTED_FN (fn) = 1;"}, {"sha": "11fe32f86dce5bc8e8564078d8a9f7c76a179a87", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-synth2a.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth2a.C?ref=d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "patch": "@@ -0,0 +1,43 @@\n+// Test with only spaceship defaulted.\n+// { dg-do run { target c++2a } }\n+\n+#include <compare>\n+\n+struct D\n+{\n+  int i;\n+  friend auto operator<=>(const D&, const D&) = default;\n+  // friend auto operator==(const D& x, const D&) = default;\n+  // friend auto operator!=(const D& x, const D&) = default;\n+  // friend auto operator< (const D& x, const D&) = default;\n+  // friend auto operator<=(const D& x, const D&) = default;\n+  // friend auto operator> (const D& x, const D&) = default;\n+  // friend auto operator>=(const D& x, const D&) = default;\n+};\n+\n+#define assert(X) do { if (!(X)) __builtin_abort(); } while (0)\n+\n+int main()\n+{\n+  D d{42};\n+  D d2{24};\n+\n+  assert (is_eq (d <=> d));\n+  assert (is_lteq (d <=> d));\n+  assert (is_gteq (d <=> d));\n+  assert (is_lt (d2 <=> d));\n+  assert (is_lteq (d2 <=> d));\n+  assert (is_gt (d <=> d2));\n+  assert (is_gteq (d <=> d2));\n+\n+  assert (d == d);\n+  assert (!(d2 == d));\n+  assert (!(d == d2));\n+  assert (d != d2);\n+  assert (!(d2 != d2));\n+\n+  assert (d2 < d);\n+  assert (d2 <= d);\n+  assert (d > d2);\n+  assert (d >= d2);\n+}"}, {"sha": "2632f525aadc0f68a8a1520ef03a1d145eab010c", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-synth2b.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth2b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef77e023cfe0bb3b12b88ae46b77da356d7f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth2b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth2b.C?ref=d6ef77e023cfe0bb3b12b88ae46b77da356d7f85", "patch": "@@ -0,0 +1,43 @@\n+// Test with only spaceship defaulted.\n+// { dg-do run { target c++2a } }\n+\n+#include <compare>\n+\n+struct D\n+{\n+  int i;\n+  friend auto operator<=>(D, D) = default;\n+  // friend auto operator==(D, D) = default;\n+  // friend auto operator!=(D, D) = default;\n+  // friend auto operator< (D, D) = default;\n+  // friend auto operator<=(D, D) = default;\n+  // friend auto operator> (D, D) = default;\n+  // friend auto operator>=(D, D) = default;\n+};\n+\n+#define assert(X) do { if (!(X)) __builtin_abort(); } while (0)\n+\n+int main()\n+{\n+  D d{42};\n+  D d2{24};\n+\n+  assert (is_eq (d <=> d));\n+  assert (is_lteq (d <=> d));\n+  assert (is_gteq (d <=> d));\n+  assert (is_lt (d2 <=> d));\n+  assert (is_lteq (d2 <=> d));\n+  assert (is_gt (d <=> d2));\n+  assert (is_gteq (d <=> d2));\n+\n+  assert (d == d);\n+  assert (!(d2 == d));\n+  assert (!(d == d2));\n+  assert (d != d2);\n+  assert (!(d2 != d2));\n+\n+  assert (d2 < d);\n+  assert (d2 <= d);\n+  assert (d > d2);\n+  assert (d >= d2);\n+}"}]}