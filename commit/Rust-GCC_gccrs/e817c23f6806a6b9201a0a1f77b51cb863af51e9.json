{"sha": "e817c23f6806a6b9201a0a1f77b51cb863af51e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgxN2MyM2Y2ODA2YTZiOTIwMWEwYTFmNzdiNTFjYjg2M2FmNTFlOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-20T13:20:44Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-20T13:22:29Z"}, "message": "libstdc++: Issues with range access CPOs (P2091R0)\n\nThis changes how arrays of unknown bound and/or incomplete element type\nare handled.\n\n\t* include/bits/range_access.h (ranges::begin): Reject array of\n\tincomplete type.\n\t(ranges::end, ranges::size): Require arrays to be bounded.\n\t(ranges::data): Require lvalue or borrowed_range.\n\t(ranges::iterator_t): Remove constraint.\n\t* testsuite/std/ranges/access/begin.cc: Do not check array of\n\tincomplete type.\n\t* testsuite/std/ranges/access/begin_neg.cc: New test.\n\t* testsuite/std/ranges/access/end_neg.cc: Adjust expected error.\n\t* testsuite/std/ranges/access/size_neg.cc: Adjust expected error.\n\t* testsuite/std/ranges/access/ssize.cc: Do not check array of\n\tincomplete type.", "tree": {"sha": "a1ae7cf999a4a9cd604d98d347412df661b24aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1ae7cf999a4a9cd604d98d347412df661b24aac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e817c23f6806a6b9201a0a1f77b51cb863af51e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e817c23f6806a6b9201a0a1f77b51cb863af51e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e817c23f6806a6b9201a0a1f77b51cb863af51e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e817c23f6806a6b9201a0a1f77b51cb863af51e9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be779f59b04947324889b7e1488fb9a68c81d53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be779f59b04947324889b7e1488fb9a68c81d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be779f59b04947324889b7e1488fb9a68c81d53"}], "stats": {"total": 113, "additions": 80, "deletions": 33}, "files": [{"sha": "30cf706cdaee789d021dad721a1b80a70bde562a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e817c23f6806a6b9201a0a1f77b51cb863af51e9", "patch": "@@ -1,5 +1,18 @@\n 2020-02-20  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/range_access.h (ranges::begin): Reject array of\n+\tincomplete type.\n+\t(ranges::end, ranges::size): Require arrays to be bounded.\n+\t(ranges::data): Require lvalue or borrowed_range.\n+\t(ranges::iterator_t): Remove constraint.\n+\t* testsuite/std/ranges/access/begin.cc: Do not check array of\n+\tincomplete type.\n+\t* testsuite/std/ranges/access/begin_neg.cc: New test.\n+\t* testsuite/std/ranges/access/end_neg.cc: Adjust expected error.\n+\t* testsuite/std/ranges/access/size_neg.cc: Adjust expected error.\n+\t* testsuite/std/ranges/access/ssize.cc: Do not check array of\n+\tincomplete type.\n+\n \t* include/std/system_error (error_category::operator<=>)\n \t(operator<=>(const error_code&, const error_code&))\n \t(operator<=>(const error_condition&, const error_condition&)): Define"}, {"sha": "eb91ade35ff714d433e032a97f2c68d0039ad643", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=e817c23f6806a6b9201a0a1f77b51cb863af51e9", "patch": "@@ -382,8 +382,8 @@ namespace ranges\n \t  { __decay_copy(__t.begin()) } -> input_or_output_iterator;\n \t};\n \n-    template<typename _Tp> void begin(_Tp&&) = delete;\n-    template<typename _Tp> void begin(initializer_list<_Tp>&&) = delete;\n+    void begin(auto&) = delete;\n+    void begin(const auto&) = delete;\n \n     template<typename _Tp>\n       concept __adl_begin = __class_or_enum<remove_reference_t<_Tp>>\n@@ -417,7 +417,9 @@ namespace ranges\n \t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n \t    {\n \t      static_assert(is_lvalue_reference_v<_Tp>);\n-\t      return __t;\n+\t      using _Up = remove_all_extents_t<remove_reference_t<_Tp>>;\n+\t      static_assert(sizeof(_Up) != 0, \"not array of incomplete type\");\n+\t      return __t + 0;\n \t    }\n \t  else if constexpr (__member_begin<_Tp>)\n \t    return __t.begin();\n@@ -433,8 +435,8 @@ namespace ranges\n \t    -> sentinel_for<decltype(_Begin{}(std::forward<_Tp>(__t)))>;\n \t};\n \n-    template<typename _Tp> void end(_Tp&&) = delete;\n-    template<typename _Tp> void end(initializer_list<_Tp>&&) = delete;\n+    void end(auto&) = delete;\n+    void end(const auto&) = delete;\n \n     template<typename _Tp>\n       concept __adl_end = __class_or_enum<remove_reference_t<_Tp>>\n@@ -451,7 +453,7 @@ namespace ranges\n \tstatic constexpr bool\n \t_S_noexcept()\n \t{\n-\t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n+\t  if constexpr (is_bounded_array_v<remove_reference_t<_Tp>>)\n \t    return true;\n \t  else if constexpr (__member_end<_Tp>)\n \t    return noexcept(__decay_copy(std::declval<_Tp&>().end()));\n@@ -461,15 +463,14 @@ namespace ranges\n \n     public:\n       template<__maybe_borrowed_range _Tp>\n-\trequires is_array_v<remove_reference_t<_Tp>> || __member_end<_Tp>\n+\trequires is_bounded_array_v<remove_reference_t<_Tp>> || __member_end<_Tp>\n \t|| __adl_end<_Tp>\n \tconstexpr auto\n \toperator()(_Tp&& __t) const noexcept(_S_noexcept<_Tp>())\n \t{\n-\t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n+\t  if constexpr (is_bounded_array_v<remove_reference_t<_Tp>>)\n \t    {\n \t      static_assert(is_lvalue_reference_v<_Tp>);\n-\t      static_assert(is_bounded_array_v<remove_reference_t<_Tp>>);\n \t      return __t + extent_v<remove_reference_t<_Tp>>;\n \t    }\n \t  else if constexpr (__member_end<_Tp>)\n@@ -519,7 +520,8 @@ namespace ranges\n \t  { __decay_copy(__t.rbegin()) } -> input_or_output_iterator;\n \t};\n \n-    template<typename _Tp> void rbegin(_Tp&&) = delete;\n+    void rbegin(auto&) = delete;\n+    void rbegin(const auto&) = delete;\n \n     template<typename _Tp>\n       concept __adl_rbegin = __class_or_enum<remove_reference_t<_Tp>>\n@@ -582,7 +584,8 @@ namespace ranges\n \t    -> sentinel_for<decltype(_RBegin{}(__t))>;\n \t};\n \n-    template<typename _Tp> void rend(_Tp&&) = delete;\n+    void rend(auto&) = delete;\n+    void rend(const auto&) = delete;\n \n     template<typename _Tp>\n       concept __adl_rend = __class_or_enum<remove_reference_t<_Tp>>\n@@ -664,7 +667,8 @@ namespace ranges\n \t    -> __detail::__is_integer_like;\n \t};\n \n-    template<typename _Tp> void size(_Tp&&) = delete;\n+    void size(auto&) = delete;\n+    void size(const auto&) = delete;\n \n     template<typename _Tp>\n       concept __adl_size = __class_or_enum<remove_reference_t<_Tp>>\n@@ -691,7 +695,7 @@ namespace ranges\n \tstatic constexpr bool\n \t_S_noexcept()\n \t{\n-\t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n+\t  if constexpr (is_bounded_array_v<remove_reference_t<_Tp>>)\n \t    return true;\n \t  else if constexpr (__member_size<_Tp>)\n \t    return noexcept(__decay_copy(std::declval<_Tp>().size()));\n@@ -704,14 +708,13 @@ namespace ranges\n \n     public:\n       template<typename _Tp>\n-\trequires is_array_v<remove_reference_t<_Tp>>\n+\trequires is_bounded_array_v<remove_reference_t<_Tp>>\n \t  || __member_size<_Tp> || __adl_size<_Tp> || __sentinel_size<_Tp>\n \tconstexpr auto\n \toperator()(_Tp&& __e) const noexcept(_S_noexcept<_Tp>())\n \t{\n-\t  if constexpr (is_array_v<remove_reference_t<_Tp>>)\n+\t  if constexpr (is_bounded_array_v<remove_reference_t<_Tp>>)\n \t    {\n-\t      static_assert(is_bounded_array_v<remove_reference_t<_Tp>>);\n \t      return extent_v<remove_reference_t<_Tp>>;\n \t    }\n \t  else if constexpr (__member_size<_Tp>)\n@@ -826,7 +829,8 @@ namespace ranges\n \t}\n \n     public:\n-      template<typename _Tp> requires __member_data<_Tp> || __begin_data<_Tp>\n+      template<__maybe_borrowed_range _Tp>\n+\trequires __member_data<_Tp> || __begin_data<_Tp>\n \tconstexpr auto\n \toperator()(_Tp&& __e) const noexcept(_S_noexcept<_Tp>())\n \t{\n@@ -881,8 +885,8 @@ namespace ranges\n     concept borrowed_range\n       = range<_Tp> && __detail::__maybe_borrowed_range<_Tp>;\n \n-  template<range _Range>\n-    using iterator_t = decltype(ranges::begin(std::declval<_Range&>()));\n+  template<typename _Tp>\n+    using iterator_t = decltype(ranges::begin(std::declval<_Tp&>()));\n \n   template<range _Range>\n     using sentinel_t = decltype(ranges::end(std::declval<_Range&>()));"}, {"sha": "9cbdfe25a22c59e6679426e225918f4d08393c57", "filename": "libstdc++-v3/testsuite/std/ranges/access/begin.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc?ref=e817c23f6806a6b9201a0a1f77b51cb863af51e9", "patch": "@@ -36,10 +36,10 @@ test01()\n   constexpr long b[2] = { };\n   static_assert( std::ranges::begin(b) == (b + 0) );\n \n-  struct Incomplete;\n-  using A = Incomplete[]; // unbounded array of incomplete type\n+  struct X { };\n+  using A = X[]; // unbounded array\n   extern A& f();\n-  static_assert( same_as<decltype(std::ranges::begin(f())), Incomplete*> );\n+  static_assert( same_as<decltype(std::ranges::begin(f())), X*> );\n }\n \n void"}, {"sha": "f31428526f311f51492dbe5b2998cc85ac0fce5c", "filename": "libstdc++-v3/testsuite/std/ranges/access/begin_neg.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin_neg.cc?ref=e817c23f6806a6b9201a0a1f77b51cb863af51e9", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+\n+auto\n+test01()\n+{\n+  using A = int[2];\n+  extern A&& f(); // rvalue of type that doesn't satisfy borrowed_range\n+  return std::ranges::begin(f()); // { dg-error \"no match\" }\n+}\n+\n+struct incomplete;\n+extern incomplete array[2];\n+\n+auto\n+test02()\n+{\n+  return std::ranges::begin(array); // { dg-error \"here\" }\n+}\n+// { dg-error \"incomplete type\" \"\" { target *-*-* } 0 }"}, {"sha": "e16f684443e63edb8936ac1d55c90047e83cbca5", "filename": "libstdc++-v3/testsuite/std/ranges/access/end_neg.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend_neg.cc?ref=e817c23f6806a6b9201a0a1f77b51cb863af51e9", "patch": "@@ -25,9 +25,8 @@ extern int unbounded[];\n auto\n test01()\n {\n-  return std::ranges::end(unbounded); // { dg-error \"here\" }\n+  return std::ranges::end(unbounded); // { dg-error \"no match\" }\n }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }\n \n struct incomplete;\n extern incomplete array[2];\n@@ -38,5 +37,3 @@ test02()\n   return std::ranges::end(array); // { dg-error \"here\" }\n }\n // { dg-error \"incomplete type\" \"\" { target *-*-* } 0 }\n-\n-"}, {"sha": "10d9b141fbf9b8e1c91f8057480cee5d0f1c2330", "filename": "libstdc++-v3/testsuite/std/ranges/access/size_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fsize_neg.cc?ref=e817c23f6806a6b9201a0a1f77b51cb863af51e9", "patch": "@@ -25,6 +25,5 @@ extern int unbounded[];\n auto\n test01()\n {\n-  return std::ranges::size(unbounded); // { dg-error \"here\" }\n+  return std::ranges::size(unbounded); // { dg-error \"no match\" }\n }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "6f5478e2bb13824b87ba10f037f5ce92983fd024", "filename": "libstdc++-v3/testsuite/std/ranges/access/ssize.cc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e817c23f6806a6b9201a0a1f77b51cb863af51e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc?ref=e817c23f6806a6b9201a0a1f77b51cb863af51e9", "patch": "@@ -36,11 +36,6 @@ test01()\n   static_assert( std::same_as<decltype(std::ranges::ssize(a2)), ptrdiff_t> );\n   VERIFY( std::ranges::ssize(a2) == 2);\n   static_assert( noexcept(std::ranges::ssize(a2)) );\n-\n-  struct Incomplete;\n-  using A = Incomplete[2]; // bounded array of incomplete type\n-  extern A& f();\n-  static_assert( std::same_as<decltype(std::ranges::ssize(f())), ptrdiff_t> );\n }\n \n void"}]}