{"sha": "4a1a8596116c82aa93d6224ed945cb80ecb609b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExYTg1OTYxMTZjODJhYTkzZDYyMjRlZDk0NWNiODBlY2I2MDliNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-30T23:57:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-30T23:57:42Z"}, "message": "syscall: Support socket control messages.\n\nFrom-SVN: r183745", "tree": {"sha": "3f7e5e9d1fb2eaaf942a44773b8e5fa8a8f538b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f7e5e9d1fb2eaaf942a44773b8e5fa8a8f538b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a1a8596116c82aa93d6224ed945cb80ecb609b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1a8596116c82aa93d6224ed945cb80ecb609b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1a8596116c82aa93d6224ed945cb80ecb609b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1a8596116c82aa93d6224ed945cb80ecb609b7/comments", "author": null, "committer": null, "parents": [{"sha": "842f302e919922421f5dcc87846e4aac358b0bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842f302e919922421f5dcc87846e4aac358b0bc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842f302e919922421f5dcc87846e4aac358b0bc2"}], "stats": {"total": 86, "additions": 71, "deletions": 15}, "files": [{"sha": "d6578156b8d411fe86e4368fdc75b8e1ff5534fd", "filename": "libgo/Makefile.am", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1a8596116c82aa93d6224ed945cb80ecb609b7/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1a8596116c82aa93d6224ed945cb80ecb609b7/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=4a1a8596116c82aa93d6224ed945cb80ecb609b7", "patch": "@@ -1593,6 +1593,13 @@ else # !LIBGO_IS_SOLARIS\n syscall_uname_file = go/syscall/libcall_uname.go\n endif\n \n+# GNU/Linux specific socket control messages.\n+if LIBGO_IS_LINUX\n+syscall_sockcmsg_file = go/syscall/sockcmsg_linux.go\n+else\n+syscall_sockcmsg_file =\n+endif\n+\n # Support for netlink sockets and messages.\n if LIBGO_IS_LINUX\n syscall_netlink_file = go/syscall/netlink_linux.go\n@@ -1606,8 +1613,10 @@ go_base_syscall_files = \\\n \tgo/syscall/libcall_support.go \\\n \tgo/syscall/libcall_posix.go \\\n \tgo/syscall/socket.go \\\n+\tgo/syscall/sockcmsg_unix.go \\\n \tgo/syscall/str.go \\\n \tgo/syscall/syscall.go \\\n+\t$(syscall_sockcmsg_file) \\\n \t$(syscall_syscall_file) \\\n \t$(syscall_exec_file) \\\n \t$(syscall_exec_os_file) \\"}, {"sha": "6e0cea813f8aecd5b092b2aac81b03dc6a53c887", "filename": "libgo/Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1a8596116c82aa93d6224ed945cb80ecb609b7/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1a8596116c82aa93d6224ed945cb80ecb609b7/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=4a1a8596116c82aa93d6224ed945cb80ecb609b7", "patch": "@@ -1923,6 +1923,10 @@ go_unicode_utf8_files = \\\n # 32-bit Solaris 2/x86 needs _nuname, handled in libcall_solaris_386.go.\n @LIBGO_IS_386_TRUE@@LIBGO_IS_SOLARIS_TRUE@syscall_uname_file = \n @LIBGO_IS_SOLARIS_FALSE@syscall_uname_file = go/syscall/libcall_uname.go\n+@LIBGO_IS_LINUX_FALSE@syscall_sockcmsg_file = \n+\n+# GNU/Linux specific socket control messages.\n+@LIBGO_IS_LINUX_TRUE@syscall_sockcmsg_file = go/syscall/sockcmsg_linux.go\n @LIBGO_IS_LINUX_FALSE@syscall_netlink_file = \n \n # Support for netlink sockets and messages.\n@@ -1933,8 +1937,10 @@ go_base_syscall_files = \\\n \tgo/syscall/libcall_support.go \\\n \tgo/syscall/libcall_posix.go \\\n \tgo/syscall/socket.go \\\n+\tgo/syscall/sockcmsg_unix.go \\\n \tgo/syscall/str.go \\\n \tgo/syscall/syscall.go \\\n+\t$(syscall_sockcmsg_file) \\\n \t$(syscall_syscall_file) \\\n \t$(syscall_exec_file) \\\n \t$(syscall_exec_os_file) \\"}, {"sha": "1faac84f4a6d43347baed532fec9eb8fddcc22ba", "filename": "libgo/go/syscall/sockcmsg_unix.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1a8596116c82aa93d6224ed945cb80ecb609b7/libgo%2Fgo%2Fsyscall%2Fsockcmsg_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1a8596116c82aa93d6224ed945cb80ecb609b7/libgo%2Fgo%2Fsyscall%2Fsockcmsg_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsockcmsg_unix.go?ref=4a1a8596116c82aa93d6224ed945cb80ecb609b7", "patch": "@@ -14,7 +14,7 @@ import (\n \n // Round the length of a raw sockaddr up to align it propery.\n func cmsgAlignOf(salen int) int {\n-\tsalign := sizeofPtr\n+\tsalign := int(sizeofPtr)\n \t// NOTE: It seems like 64-bit Darwin kernel still requires 32-bit\n \t// aligned access to BSD subsystem.\n \tif darwinAMD64 {\n@@ -39,7 +39,7 @@ func CmsgSpace(datalen int) int {\n }\n \n func cmsgData(cmsg *Cmsghdr) unsafe.Pointer {\n-\treturn unsafe.Pointer(uintptr(unsafe.Pointer(cmsg)) + SizeofCmsghdr)\n+\treturn unsafe.Pointer(uintptr(unsafe.Pointer(cmsg)) + uintptr(SizeofCmsghdr))\n }\n \n type SocketControlMessage struct {\n@@ -72,7 +72,7 @@ func ParseSocketControlMessage(buf []byte) ([]SocketControlMessage, error) {\n \n func socketControlMessageHeaderAndData(buf []byte) (*Cmsghdr, []byte, error) {\n \th := (*Cmsghdr)(unsafe.Pointer(&buf[0]))\n-\tif h.Len < SizeofCmsghdr || int(h.Len) > len(buf) {\n+\tif int(h.Len) < SizeofCmsghdr || int(h.Len) > len(buf) {\n \t\treturn nil, nil, EINVAL\n \t}\n \treturn h, buf[cmsgAlignOf(SizeofCmsghdr):], nil"}, {"sha": "7a2e95ca2a2ab0217c3a75c7d160331ea24169bc", "filename": "libgo/go/syscall/socket.go", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1a8596116c82aa93d6224ed945cb80ecb609b7/libgo%2Fgo%2Fsyscall%2Fsocket.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1a8596116c82aa93d6224ed945cb80ecb609b7/libgo%2Fgo%2Fsyscall%2Fsocket.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket.go?ref=4a1a8596116c82aa93d6224ed945cb80ecb609b7", "patch": "@@ -17,20 +17,20 @@ import \"unsafe\"\n var SocketDisableIPv6 bool\n \n type Sockaddr interface {\n-\tsockaddr() (ptr *RawSockaddrAny, len Socklen_t, err error)\t// lowercase; only we can define Sockaddrs\n+\tsockaddr() (ptr *RawSockaddrAny, len Socklen_t, err error) // lowercase; only we can define Sockaddrs\n }\n \n type RawSockaddrAny struct {\n \tAddr RawSockaddr\n-\tPad [12]int8\n+\tPad  [12]int8\n }\n \n const SizeofSockaddrAny = 0x1c\n \n type SockaddrInet4 struct {\n \tPort int\n \tAddr [4]byte\n-\traw RawSockaddrInet4\n+\traw  RawSockaddrInet4\n }\n \n func (sa *SockaddrInet4) sockaddr() (*RawSockaddrAny, Socklen_t, error) {\n@@ -40,7 +40,7 @@ func (sa *SockaddrInet4) sockaddr() (*RawSockaddrAny, Socklen_t, error) {\n \tsa.raw.Family = AF_INET\n \tn := sa.raw.setLen()\n \tp := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))\n-\tp[0] = byte(sa.Port>>8)\n+\tp[0] = byte(sa.Port >> 8)\n \tp[1] = byte(sa.Port)\n \tfor i := 0; i < len(sa.Addr); i++ {\n \t\tsa.raw.Addr[i] = sa.Addr[i]\n@@ -49,10 +49,10 @@ func (sa *SockaddrInet4) sockaddr() (*RawSockaddrAny, Socklen_t, error) {\n }\n \n type SockaddrInet6 struct {\n-\tPort int\n+\tPort   int\n \tZoneId uint32\n-\tAddr [16]byte\n-\traw RawSockaddrInet6\n+\tAddr   [16]byte\n+\traw    RawSockaddrInet6\n }\n \n func (sa *SockaddrInet6) sockaddr() (*RawSockaddrAny, Socklen_t, error) {\n@@ -62,7 +62,7 @@ func (sa *SockaddrInet6) sockaddr() (*RawSockaddrAny, Socklen_t, error) {\n \tsa.raw.Family = AF_INET6\n \tn := sa.raw.setLen()\n \tp := (*[2]byte)(unsafe.Pointer(&sa.raw.Port))\n-\tp[0] = byte(sa.Port>>8)\n+\tp[0] = byte(sa.Port >> 8)\n \tp[1] = byte(sa.Port)\n \tsa.raw.Scope_id = sa.ZoneId\n \tfor i := 0; i < len(sa.Addr); i++ {\n@@ -73,7 +73,7 @@ func (sa *SockaddrInet6) sockaddr() (*RawSockaddrAny, Socklen_t, error) {\n \n type SockaddrUnix struct {\n \tName string\n-\traw RawSockaddrUnix\n+\traw  RawSockaddrUnix\n }\n \n func (sa *SockaddrUnix) sockaddr() (*RawSockaddrAny, Socklen_t, error) {\n@@ -268,12 +268,12 @@ func SetsockoptTimeval(fd, level, opt int, tv *Timeval) (err error) {\n }\n \n type Linger struct {\n-\tOnoff int32;\n-\tLinger int32;\n+\tOnoff  int32\n+\tLinger int32\n }\n \n func SetsockoptLinger(fd, level, opt int, l *Linger) (err error) {\n-\treturn setsockopt(fd, level, opt, (*byte)(unsafe.Pointer(l)), Socklen_t(unsafe.Sizeof(*l)));\n+\treturn setsockopt(fd, level, opt, (*byte)(unsafe.Pointer(l)), Socklen_t(unsafe.Sizeof(*l)))\n }\n \n func SetsockoptIPMreq(fd, level, opt int, mreq *IPMreq) (err error) {\n@@ -405,3 +405,7 @@ func (iov *Iovec) SetLen(length int) {\n func (msghdr *Msghdr) SetControllen(length int) {\n \tmsghdr.Controllen = Msghdr_controllen_t(length)\n }\n+\n+func (cmsg *Cmsghdr) SetLen(length int) {\n+\tcmsg.Len = Cmsghdr_len_t(length)\n+}"}, {"sha": "16635d236ba32087603198a67f68a30e67b998d1", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1a8596116c82aa93d6224ed945cb80ecb609b7/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1a8596116c82aa93d6224ed945cb80ecb609b7/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=4a1a8596116c82aa93d6224ed945cb80ecb609b7", "patch": "@@ -483,6 +483,43 @@ echo $msghdr | \\\n       -e 's/msg_flags/Flags/' \\\n     >> ${OUT}\n \n+# The MSG_ flags for Msghdr.\n+grep '^const _MSG_' gen-sysinfo.go | \\\n+  sed -e 's/^\\(const \\)_\\(MSG_[^= ]*\\)\\(.*\\)$/\\1\\2 = _\\2/' >> ${OUT}\n+\n+# The cmsghdr struct.\n+cmsghdr=`grep '^type _cmsghdr ' gen-sysinfo.go`\n+if test -n \"$cmsghdr\"; then\n+  cmsghdr_len=`echo $cmsghdr | sed -n -e 's/^.*cmsg_len \\([^ ]*\\);.*$/\\1/p'`\n+  echo \"type Cmsghdr_len_t $cmsghdr_len\" >> ${OUT}\n+  echo \"$cmsghdr\" | \\\n+      sed -e 's/_cmsghdr/Cmsghdr/' \\\n+        -e 's/cmsg_len *[a-zA-Z0-9_]*/Len Cmsghdr_len_t/' \\\n+        -e 's/cmsg_level/Level/' \\\n+        -e 's/cmsg_type/Type/' \\\n+      >> ${OUT}\n+\n+  # The size of the cmsghdr struct.\n+  echo 'var SizeofCmsghdr = int(unsafe.Sizeof(Cmsghdr{}))' >> ${OUT}\n+fi\n+\n+# The SCM_ flags for Cmsghdr.\n+grep '^const _SCM_' gen-sysinfo.go | \\\n+  sed -e 's/^\\(const \\)_\\(SCM_[^= ]*\\)\\(.*\\)$/\\1\\2 = _\\2/' >> ${OUT}\n+\n+# The ucred struct.\n+grep '^type _ucred ' gen-sysinfo.go | \\\n+    sed -e 's/_ucred/Ucred/' \\\n+      -e 's/pid/Pid/' \\\n+      -e 's/uid/Uid/' \\\n+      -e 's/gid/Gid/' \\\n+    >> ${OUT}\n+\n+# The size of the ucred struct.\n+if grep 'type Ucred ' ${OUT} >/dev/null 2>&1; then\n+  echo 'var SizeofUcred = int(unsafe.Sizeof(Ucred{}))' >> ${OUT}\n+fi  \n+\n # The ip_mreq struct.\n grep '^type _ip_mreq ' gen-sysinfo.go | \\\n     sed -e 's/_ip_mreq/IPMreq/' \\"}]}