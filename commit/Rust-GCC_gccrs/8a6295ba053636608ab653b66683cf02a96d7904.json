{"sha": "8a6295ba053636608ab653b66683cf02a96d7904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE2Mjk1YmEwNTM2MzY2MDhhYjY1M2I2NjY4M2NmMDJhOTZkNzkwNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-05-30T08:21:41Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-05-30T08:21:41Z"}, "message": "ipa.c (cgraph_remove_unreachable_node): Walk references of correct node...\n\n\n\t* ipa.c (cgraph_remove_unreachable_node): Walk references of correct node;\n\tremove references in node we no longer keep in cgrpah but need body\n\tof.\n\nFrom-SVN: r160046", "tree": {"sha": "4644441f42c6fdb2d584c79dabc38915c21cd455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4644441f42c6fdb2d584c79dabc38915c21cd455"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a6295ba053636608ab653b66683cf02a96d7904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6295ba053636608ab653b66683cf02a96d7904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a6295ba053636608ab653b66683cf02a96d7904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6295ba053636608ab653b66683cf02a96d7904/comments", "author": null, "committer": null, "parents": [{"sha": "450f429348300e614722d03966ce898ab3ffb7f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450f429348300e614722d03966ce898ab3ffb7f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450f429348300e614722d03966ce898ab3ffb7f5"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "9d723532dac71a0654dcb55f17f5fb320159ef83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6295ba053636608ab653b66683cf02a96d7904/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6295ba053636608ab653b66683cf02a96d7904/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a6295ba053636608ab653b66683cf02a96d7904", "patch": "@@ -1,3 +1,9 @@\n+2010-05-29  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa.c (cgraph_remove_unreachable_node): Walk references of correct node;\n+\tremove references in node we no longer keep in cgrpah but need body\n+\tof.\n+\n 2010-05-29  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (cgraph_mark_reachable): Relax check for analyzed nodes."}, {"sha": "906fa66d5694445bc44b3eb53ef63eb78c8d5d64", "filename": "gcc/ipa.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a6295ba053636608ab653b66683cf02a96d7904/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a6295ba053636608ab653b66683cf02a96d7904/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=8a6295ba053636608ab653b66683cf02a96d7904", "patch": "@@ -284,16 +284,19 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t     reachable too, unless they are direct calls to extern inline functions\n \t     we decided to not inline.  */\n \t  if (node->reachable)\n-\t    for (e = node->callees; e; e = e->next_callee)\n-\t      if (!e->callee->reachable\n-\t\t  && node->analyzed\n-\t\t  && (!e->inline_failed || !e->callee->analyzed\n-\t\t      || (!DECL_EXTERNAL (e->callee->decl))\n-\t\t      || before_inlining_p))\n-\t\t{\n-\t\t  e->callee->reachable = true;\n-\t\t  enqueue_cgraph_node (e->callee, &first);\n-\t\t}\n+\t    {\n+\t      for (e = node->callees; e; e = e->next_callee)\n+\t\tif (!e->callee->reachable\n+\t\t    && node->analyzed\n+\t\t    && (!e->inline_failed || !e->callee->analyzed\n+\t\t\t|| (!DECL_EXTERNAL (e->callee->decl))\n+\t\t\t|| before_inlining_p))\n+\t\t  {\n+\t\t    e->callee->reachable = true;\n+\t\t    enqueue_cgraph_node (e->callee, &first);\n+\t\t  }\n+\t      process_references (&node->ref_list, &first, &first_varpool, before_inlining_p);\n+\t    }\n \n \t  /* If any function in a comdat group is reachable, force\n \t     all other functions in the same comdat group to be\n@@ -316,7 +319,8 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t     function is clone of real clone, we must keep it around in order to\n \t     make materialize_clones produce function body with the changes\n \t     applied.  */\n-\t  while (node->clone_of && !node->clone_of->aux && !gimple_has_body_p (node->decl))\n+\t  while (node->clone_of && !node->clone_of->aux\n+\t         && !gimple_has_body_p (node->decl))\n \t    {\n \t      bool noninline = node->clone_of->decl != node->decl;\n \t      node = node->clone_of;\n@@ -326,7 +330,6 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n \t\t  break;\n \t\t}\n \t    }\n-\t  process_references (&node->ref_list, &first, &first_varpool, before_inlining_p);\n \t}\n       if (first_varpool != (struct varpool_node *) (void *) 1)\n \t{\n@@ -367,6 +370,7 @@ cgraph_remove_unreachable_nodes (bool before_inlining_p, FILE *file)\n       if (node->aux && !node->reachable)\n         {\n \t  cgraph_node_remove_callees (node);\n+\t  ipa_remove_all_references (&node->ref_list);\n \t  node->analyzed = false;\n \t  node->local.inlinable = false;\n \t}"}]}