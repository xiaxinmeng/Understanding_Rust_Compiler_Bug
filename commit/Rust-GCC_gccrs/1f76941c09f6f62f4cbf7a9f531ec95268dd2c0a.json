{"sha": "1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a", "node_id": "C_kwDOANBUbNoAKDFmNzY5NDFjMDlmNmY2MmY0Y2JmN2E5ZjUzMWVjOTUyNjhkZDJjMGE", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-07-01T17:56:37Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-07-01T20:38:08Z"}, "message": "compiler: rename \"requires\" to \"needs\"\n\nAs of C++20 \"requires\" is a C++ keyword.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/415754", "tree": {"sha": "de468e6956f2354b019defe0e7c940c7a8a9ad10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de468e6956f2354b019defe0e7c940c7a8a9ad10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecd11acacd6be57af930fa617d7c31ecb40e7f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd11acacd6be57af930fa617d7c31ecb40e7f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd11acacd6be57af930fa617d7c31ecb40e7f74"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "65f64e0fbfb3045a0ea53400521ee002e2a513d0", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a", "patch": "@@ -1,4 +1,4 @@\n-548720bca6bff21ebc9aba22249d9ce45bbd90c7\n+ac438edc5335f69c95df9342f43712ad2f61ad66\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "67b91fab4ca455cf63d8115281ee031ee0a47629", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a", "patch": "@@ -5302,16 +5302,16 @@ Gogo::write_c_header()\n       Named_object* no = types.front();\n       types.pop_front();\n \n-      std::vector<const Named_object*> requires;\n+      std::vector<const Named_object*> needs;\n       std::vector<const Named_object*> declare;\n-      if (!no->type_value()->struct_type()->can_write_to_c_header(&requires,\n+      if (!no->type_value()->struct_type()->can_write_to_c_header(&needs,\n \t\t\t\t\t\t\t\t  &declare))\n \tcontinue;\n \n       bool ok = true;\n       for (std::vector<const Named_object*>::const_iterator pr\n-\t     = requires.begin();\n-\t   pr != requires.end() && ok;\n+\t     = needs.begin();\n+\t   pr != needs.end() && ok;\n \t   ++pr)\n \t{\n \t  for (std::list<Named_object*>::const_iterator pt = types.begin();\n@@ -5342,10 +5342,10 @@ Gogo::write_c_header()\n \t  if (*pd == no)\n \t    continue;\n \n-\t  std::vector<const Named_object*> drequires;\n+\t  std::vector<const Named_object*> dneeds;\n \t  std::vector<const Named_object*> ddeclare;\n \t  if (!(*pd)->type_value()->struct_type()->\n-\t      can_write_to_c_header(&drequires, &ddeclare))\n+\t      can_write_to_c_header(&dneeds, &ddeclare))\n \t    continue;\n \n \t  bool done = false;"}, {"sha": "4995283bb60385e0696c556d57438b870fa7b0fa", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=1f76941c09f6f62f4cbf7a9f531ec95268dd2c0a", "patch": "@@ -6967,7 +6967,7 @@ Struct_type::do_import(Import* imp)\n \n bool\n Struct_type::can_write_to_c_header(\n-    std::vector<const Named_object*>* requires,\n+    std::vector<const Named_object*>* needs,\n     std::vector<const Named_object*>* declare) const\n {\n   const Struct_field_list* fields = this->fields_;\n@@ -6978,7 +6978,7 @@ Struct_type::can_write_to_c_header(\n        p != fields->end();\n        ++p)\n     {\n-      if (!this->can_write_type_to_c_header(p->type(), requires, declare))\n+      if (!this->can_write_type_to_c_header(p->type(), needs, declare))\n \treturn false;\n       if (Gogo::message_name(p->field_name()) == \"_\")\n \tsinks++;\n@@ -6993,7 +6993,7 @@ Struct_type::can_write_to_c_header(\n bool\n Struct_type::can_write_type_to_c_header(\n     const Type* t,\n-    std::vector<const Named_object*>* requires,\n+    std::vector<const Named_object*>* needs,\n     std::vector<const Named_object*>* declare) const\n {\n   t = t->forwarded();\n@@ -7027,13 +7027,13 @@ Struct_type::can_write_type_to_c_header(\n       return true;\n \n     case TYPE_STRUCT:\n-      return t->struct_type()->can_write_to_c_header(requires, declare);\n+      return t->struct_type()->can_write_to_c_header(needs, declare);\n \n     case TYPE_ARRAY:\n       if (t->is_slice_type())\n \treturn true;\n       return this->can_write_type_to_c_header(t->array_type()->element_type(),\n-\t\t\t\t\t      requires, declare);\n+\t\t\t\t\t      needs, declare);\n \n     case TYPE_NAMED:\n       {\n@@ -7049,10 +7049,10 @@ Struct_type::can_write_type_to_c_header(\n \t    // We will accept empty struct fields, but not print them.\n \t    if (t->struct_type()->total_field_count() == 0)\n \t      return true;\n-\t    requires->push_back(no);\n-\t    return t->struct_type()->can_write_to_c_header(requires, declare);\n+\t    needs->push_back(no);\n+\t    return t->struct_type()->can_write_to_c_header(needs, declare);\n \t  }\n-\treturn this->can_write_type_to_c_header(t->base(), requires, declare);\n+\treturn this->can_write_type_to_c_header(t->base(), needs, declare);\n       }\n \n     case TYPE_CALL_MULTIPLE_RESULT:\n@@ -7150,9 +7150,9 @@ Struct_type::write_field_to_c_header(std::ostream& os, const std::string& name,\n \n     case TYPE_POINTER:\n       {\n-\tstd::vector<const Named_object*> requires;\n+\tstd::vector<const Named_object*> needs;\n \tstd::vector<const Named_object*> declare;\n-\tif (!this->can_write_type_to_c_header(t->points_to(), &requires,\n+\tif (!this->can_write_type_to_c_header(t->points_to(), &needs,\n \t\t\t\t\t      &declare))\n \t  os << \"void*\";\n \telse"}]}