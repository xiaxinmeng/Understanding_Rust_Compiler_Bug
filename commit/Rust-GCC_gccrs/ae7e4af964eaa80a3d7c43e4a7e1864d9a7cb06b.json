{"sha": "ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "node_id": "C_kwDOANBUbNoAKGFlN2U0YWY5NjRlYWE4MGEzZDdjNDNlNGE3ZTE4NjRkOWE3Y2IwNmI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-02T00:17:16Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-02T00:17:16Z"}, "message": "Daily bump.", "tree": {"sha": "d8bfc865a9d9225f08c5e04ece62dfc2a782c109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8bfc865a9d9225f08c5e04ece62dfc2a782c109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/comments", "author": null, "committer": null, "parents": [{"sha": "d98668eb06f532b2dbe0c721fa1b9ed6e643df27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98668eb06f532b2dbe0c721fa1b9ed6e643df27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98668eb06f532b2dbe0c721fa1b9ed6e643df27"}], "stats": {"total": 437, "additions": 436, "deletions": 1}, "files": [{"sha": "bee0481dbc645b4de022bc24b47c33b8a35f4268", "filename": "gcc/ChangeLog", "status": "modified", "additions": 301, "deletions": 0, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "patch": "@@ -1,3 +1,304 @@\n+2022-02-01  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* opts.cc (common_handle_option): Don't set param_early_inliner_max_iterations\n+\tto 10 for AutoFDO.\n+\n+2022-02-01  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* auto-profile.cc (auto_profile): Hard-code the number of iterations (10).\n+\n+2022-02-01  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* doc/install.texi:\n+\n+2022-02-01  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.cc (s390_code_end): Do not switch back to\n+\tcode section.\n+\n+2022-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/104323\n+\t* config/rs6000/t-rs6000 (EXTRA_GTYPE_DEPS): Append rs6000-builtins.h\n+\trather than $(srcdir)/config/rs6000/rs6000-builtins.def.\n+\t* config/rs6000/rs6000-gen-builtins.cc (write_decls): Don't use\n+\tGTY((user)) for struct bifdata and struct ovlddata.  Instead add\n+\tGTY((skip(\"\"))) to members with pointer and enum types that don't need\n+\tto be tracked.  Add GTY(()) to rs6000_builtin_info and rs6000_instance_info\n+\tdeclarations.  Don't emit gt_ggc_mx and gt_pch_nx declarations.\n+\t(write_extern_fntype, write_fntype): Remove.\n+\t(write_fntype_init): Emit the fntype vars as automatic vars instead\n+\tof file scope ones.\n+\t(write_header_file): Don't iterate with write_extern_fntype.\n+\t(write_init_file): Don't iterate with write_fntype.  Don't emit\n+\tgt_ggc_mx and gt_pch_nx definitions.\n+\n+2022-02-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.h (struct tree_vec_map_cache_hasher): Move from...\n+\t* tree.cc (struct tree_vec_map_cache_hasher): ...here.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.cc (nvptx_single): Use nvptx_uniform_warp_check.\n+\t* config/nvptx/nvptx.md (define_c_enum \"unspecv\"): Add\n+\tUNSPECV_UNIFORM_WARP_CHECK.\n+\t(define_insn \"nvptx_uniform_warp_check\"): New define_insn.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.cc (nvptx_single): Use nvptx_warpsync.\n+\t* config/nvptx/nvptx.md (define_c_enum \"unspecv\"): Add\n+\tUNSPECV_WARPSYNC.\n+\t(define_insn \"nvptx_warpsync\"): New define_insn.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.opt (mptx): Set to PTX_VERSION_6_3 by default.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx-opts.h (enum ptx_version): Add PTX_VERSION_6_0.\n+\t* config/nvptx/nvptx.h (TARGET_PTX_6_0): New macro.\n+\t* config/nvptx/nvptx.md (define_insn \"nvptx_barsync\"): Use barrier\n+\tinsn for TARGET_PTX_6_0.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/100428\n+\t* config/nvptx/nvptx.cc (prevent_branch_around_nothing): Handle nop\n+\tinsn.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.md (define_insn \"atomic_compare_and_swap<mode>_1\")\n+\t(define_insn \"atomic_exchange<mode>\")\n+\t(define_insn \"atomic_fetch_add<mode>\")\n+\t(define_insn \"atomic_fetch_addsf\")\n+\t(define_insn \"atomic_fetch_<logic><mode>\"): Output non-atomic version\n+\tif memory operands is frame-relative.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.cc (enum nvptx_builtins): Add\n+\tNVPTX_BUILTIN_MEMBAR_GL and NVPTX_BUILTIN_MEMBAR_CTA.\n+\t(VOID): New macro.\n+\t(nvptx_init_builtins): Add MEMBAR_GL and MEMBAR_CTA.\n+\t(nvptx_expand_builtin): Handle NVPTX_BUILTIN_MEMBAR_GL and\n+\tNVPTX_BUILTIN_MEMBAR_CTA.\n+\t(nvptx_lockfull_update): Add level parameter.  Emit barriers.\n+\t(nvptx_reduction_update, nvptx_goacc_reduction_fini): Update call to\n+\tnvptx_lockfull_update.\n+\t* config/nvptx/nvptx.md (define_c_enum \"unspecv\"): Add\n+\tUNSPECV_MEMBAR_GL.\n+\t(define_expand \"nvptx_membar_gl\"): New expand.\n+\t(define_insn \"*nvptx_membar_gl\"): New insn.\n+\n+2022-02-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/install.texi: Remove option for GCC < 4.8.\n+\n+2022-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/104307\n+\t* tree-vect-generic.cc (expand_vector_comparison): Don't push debug\n+\tstmts to uses vector, just set vec_cond_expr_only to false for\n+\tnon-VEC_COND_EXPRs instead of pushing them into uses.  Treat\n+\tVEC_COND_EXPRs that use lhs not just in rhs1, but rhs2 or rhs3 too\n+\tlike non-VEC_COND_EXPRs.\n+\n+2022-02-01  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-overload.def (VEC_ABSD): Remove #ifdef token.\n+\t(VEC_BLENDV): Likewise.\n+\t(VEC_BPERM): Likewise.\n+\t(VEC_CFUGE): Likewise.\n+\t(VEC_CIPHER_BE): Likewise.\n+\t(VEC_CIPHERLAST_BE): Likewise.\n+\t(VEC_CLRL): Likewise.\n+\t(VEC_CLRR): Likewise.\n+\t(VEC_CMPNEZ): Likewise.\n+\t(VEC_CNTLZ): Likewise.\n+\t(VEC_CNTLZM): Likewise.\n+\t(VEC_CNTTZM): Likewise.\n+\t(VEC_CNTLZ_LSBB): Likewise.\n+\t(VEC_CNTM): Likewise.\n+\t(VEC_CNTTZ): Likewise.\n+\t(VEC_CNTTZ_LSBB): Likewise.\n+\t(VEC_CONVERT_4F32_8F16): Likewise.\n+\t(VEC_DIV): Likewise.\n+\t(VEC_DIVE): Likewise.\n+\t(VEC_EQV): Likewise.\n+\t(VEC_EXPANDM): Likewise.\n+\t(VEC_EXTRACT_FP_FROM_SHORTH): Likewise.\n+\t(VEC_EXTRACT_FP_FROM_SHORTL): Likewise.\n+\t(VEC_EXTRACTH): Likewise.\n+\t(VEC_EXTRACTL): Likewise.\n+\t(VEC_EXTRACTM): Likewise.\n+\t(VEC_EXTRACT4B): Likewise.\n+\t(VEC_EXTULX): Likewise.\n+\t(VEC_EXTURX): Likewise.\n+\t(VEC_FIRSTMATCHINDEX): Likewise.\n+\t(VEC_FIRSTMACHOREOSINDEX): Likewise.\n+\t(VEC_FIRSTMISMATCHINDEX): Likewise.\n+\t(VEC_FIRSTMISMATCHOREOSINDEX): Likewise.\n+\t(VEC_GB): Likewise.\n+\t(VEC_GENBM): Likewise.\n+\t(VEC_GENHM): Likewise.\n+\t(VEC_GENWM): Likewise.\n+\t(VEC_GENDM): Likewise.\n+\t(VEC_GENQM): Likewise.\n+\t(VEC_GENPCVM): Likewise.\n+\t(VEC_GNB): Likewise.\n+\t(VEC_INSERTH): Likewise.\n+\t(VEC_INSERTL): Likewise.\n+\t(VEC_INSERT4B): Likewise.\n+\t(VEC_LXVL): Likewise.\n+\t(VEC_MERGEE): Likewise.\n+\t(VEC_MERGEO): Likewise.\n+\t(VEC_MOD): Likewise.\n+\t(VEC_MSUB): Likewise.\n+\t(VEC_MULH): Likewise.\n+\t(VEC_NAND): Likewise.\n+\t(VEC_NCIPHER_BE): Likewise.\n+\t(VEC_NCIPHERLAST_BE): Likewise.\n+\t(VEC_NEARBYINT): Likewise.\n+\t(VEC_NMADD): Likewise.\n+\t(VEC_ORC): Likewise.\n+\t(VEC_PDEP): Likewise.\n+\t(VEC_PERMX): Likewise.\n+\t(VEC_PEXT): Likewise.\n+\t(VEC_POPCNT): Likewise.\n+\t(VEC_PARITY_LSBB): Likewise.\n+\t(VEC_REPLACE_ELT): Likewise.\n+\t(VEC_REPLACE_UN): Likewise.\n+\t(VEC_REVB): Likewise.\n+\t(VEC_RINT): Likewise.\n+\t(VEC_RLMI): Likewise.\n+\t(VEC_RLNM): Likewise.\n+\t(VEC_SBOX_BE): Likewise.\n+\t(VEC_SIGNEXTI): Likewise.\n+\t(VEC_SIGNEXTLL): Likewise.\n+\t(VEC_SIGNEXTQ): Likewise.\n+\t(VEC_SLDB): Likewise.\n+\t(VEC_SLV): Likewise.\n+\t(VEC_SPLATI): Likewise.\n+\t(VEC_SPLATID): Likewise.\n+\t(VEC_SPLATI_INS): Likewise.\n+\t(VEC_SQRT): Likewise.\n+\t(VEC_SRDB): Likewise.\n+\t(VEC_SRV): Likewise.\n+\t(VEC_STRIL): Likewise.\n+\t(VEC_STRIL_P): Likewise.\n+\t(VEC_STRIR): Likewise.\n+\t(VEC_STRIR_P): Likewise.\n+\t(VEC_STXVL): Likewise.\n+\t(VEC_TERNARYLOGIC): Likewise.\n+\t(VEC_TEST_LSBB_ALL_ONES): Likewise.\n+\t(VEC_TEST_LSBB_ALL_ZEROS): Likewise.\n+\t(VEC_VEE): Likewise.\n+\t(VEC_VES): Likewise.\n+\t(VEC_VIE): Likewise.\n+\t(VEC_VPRTYB): Likewise.\n+\t(VEC_VSCEEQ): Likewise.\n+\t(VEC_VSCEGT): Likewise.\n+\t(VEC_VSCELT): Likewise.\n+\t(VEC_VSCEUO): Likewise.\n+\t(VEC_VSEE): Likewise.\n+\t(VEC_VSES): Likewise.\n+\t(VEC_VSIE): Likewise.\n+\t(VEC_VSTDC): Likewise.\n+\t(VEC_VSTDCN): Likewise.\n+\t(VEC_VTDC): Likewise.\n+\t(VEC_XL): Likewise.\n+\t(VEC_XL_BE): Likewise.\n+\t(VEC_XL_LEN_R): Likewise.\n+\t(VEC_XL_SEXT): Likewise.\n+\t(VEC_XL_ZEXT): Likewise.\n+\t(VEC_XST): Likewise.\n+\t(VEC_XST_BE): Likewise.\n+\t(VEC_XST_LEN_R): Likewise.\n+\t(VEC_XST_TRUNC): Likewise.\n+\t(VEC_XXPERMDI): Likewise.\n+\t(VEC_XXSLDWI): Likewise.\n+\t(VEC_TSTSFI_EQ_DD): Likewise.\n+\t(VEC_TSTSFI_EQ_TD): Likewise.\n+\t(VEC_TSTSFI_GT_DD): Likewise.\n+\t(VEC_TSTSFI_GT_TD): Likewise.\n+\t(VEC_TSTSFI_LT_DD): Likewise.\n+\t(VEC_TSTSFI_LT_TD): Likewise.\n+\t(VEC_TSTSFI_OV_DD): Likewise.\n+\t(VEC_TSTSFI_OV_TD): Likewise.\n+\t(VEC_VADDCUQ): Likewise.\n+\t(VEC_VADDECUQ): Likewise.\n+\t(VEC_VADDEUQM): Likewise.\n+\t(VEC_VADDUDM): Likewise.\n+\t(VEC_VADDUQM): Likewise.\n+\t(VEC_VBPERMQ): Likewise.\n+\t(VEC_VCLZB): Likewise.\n+\t(VEC_VCLZD): Likewise.\n+\t(VEC_VCLZH): Likewise.\n+\t(VEC_VCLZW): Likewise.\n+\t(VEC_VCTZB): Likewise.\n+\t(VEC_VCTZD): Likewise.\n+\t(VEC_VCTZH): Likewise.\n+\t(VEC_VCTZW): Likewise.\n+\t(VEC_VEEDP): Likewise.\n+\t(VEC_VEESP): Likewise.\n+\t(VEC_VESDP): Likewise.\n+\t(VEC_VESSP): Likewise.\n+\t(VEC_VIEDP): Likewise.\n+\t(VEC_VIESP): Likewise.\n+\t(VEC_VPKSDSS): Likewise.\n+\t(VEC_VPKSDUS): Likewise.\n+\t(VEC_VPKUDUM): Likewise.\n+\t(VEC_VPKUDUS): Likewise.\n+\t(VEC_VPOPCNT): Likewise.\n+\t(VEC_VPOPCNTB): Likewise.\n+\t(VEC_VPOPCNTD): Likewise.\n+\t(VEC_VPOPCNTH): Likewise.\n+\t(VEC_VPOPCNTW): Likewise.\n+\t(VEC_VPRTYBD): Likewise.\n+\t(VEC_VPRTYBQ): Likewise.\n+\t(VEC_VPRTYBW): Likewise.\n+\t(VEC_VRLD): Likewise.\n+\t(VEC_VSLD): Likewise.\n+\t(VEC_VSRAD): Likewise.\n+\t(VEC_VSRD): Likewise.\n+\t(VEC_VSTDCDP): Likewise.\n+\t(VEC_VSTDCNDP): Likewise.\n+\t(VEC_VSTDCNQP): Likewise.\n+\t(VEC_VSTDCNSP): Likewise.\n+\t(VEC_VSTDCQP): Likewise.\n+\t(VEC_VSTDCSP): Likewise.\n+\t(VEC_VSUBECUQ): Likewise.\n+\t(VEC_VSUBEUQM): Likewise.\n+\t(VEC_VSUBUDM): Likewise.\n+\t(VEC_VSUBUQM): Likewise.\n+\t(VEC_VTDCDP): Likewise.\n+\t(VEC_VTDCSP): Likewise.\n+\t(VEC_VUPKHSW): Likewise.\n+\t(VEC_VUPKLSW): Likewise.\n+\n+2022-02-01  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR rtl-optimization/101260\n+\t* regcprop.cc (maybe_mode_change): Invoke mode_change_ok also for\n+\tcopy_regno.\n+\n+2022-02-01  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\tPR middle-end/95115\n+\t* fold-const.cc (const_binop): Do not fold NaN result from\n+\t  non-NaN operands.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* tree-loop-distribution.cc (generate_reduction_builtin_1): Check for\n+\t-ftree-loop-distribute-patterns.\n+\t(loop_distribution::execute): Don't call transform_reduction_loop for\n+\t-fno-tree-loop-distribute-patterns.\n+\n 2022-01-31  Andrew Pinski  <apinski@marvell.com>\n \n \t* fold-const.h (operand_compare::operand_equal_p):"}, {"sha": "1ff12871fac691d72fc0f3ab9be859809ee0a0fe", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "patch": "@@ -1 +1 @@\n-20220201\n+20220202"}, {"sha": "9131726620e965d369d062698cfbb4e0918e4b21", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "patch": "@@ -1,3 +1,10 @@\n+2022-02-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103186\n+\t* pt.cc (defarg_inst): Use tree_vec_map_cache_hasher.\n+\t(defarg_insts_for): New.\n+\t(tsubst_default_argument): Adjust.\n+\n 2022-01-31  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/102414"}, {"sha": "83a7310d53d374a66bb4ecac25519fdeec16ffae", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "patch": "@@ -1,3 +1,9 @@\n+2022-02-01  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104331\n+\t* simplify.cc (gfc_simplify_eoshift): Avoid NULL pointer\n+\tdereference when shape is not set.\n+\n 2022-01-28  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/103790"}, {"sha": "c0e45052fa9dd18f080eff3086b2e74f32016396", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "patch": "@@ -1,3 +1,44 @@\n+2022-02-01  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/nobp-section-type-conflict.c: New test.\n+\n+2022-02-01  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104331\n+\t* gfortran.dg/eoshift_9.f90: New test.\n+\n+2022-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/104147\n+\t* c-c++-common/cpp/pr104147.c: New test.\n+\n+2022-02-01  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103186\n+\t* g++.dg/cpp0x/lambda/lambda-defarg10.C: New test.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/stack-atomics-run.c: New test.\n+\n+2022-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/104307\n+\t* gcc.target/i386/pr104307.c: New test.\n+\n+2022-02-01  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR rtl-optimization/101260\n+\t* gcc.target/s390/pr101260.c: New testcase.\n+\n+2022-02-01  Xi Ruoyao  <xry111@mengyan1223.wang>\n+\n+\t* gcc.dg/pr95115.c: New test.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ldist-strlen-4.c: New test.\n+\n 2022-01-31  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/102414"}, {"sha": "c3679fee1f704653cb2c0fd85e4de34cfd314a33", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "patch": "@@ -1,3 +1,17 @@\n+2022-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR preprocessor/104147\n+\t* macro.cc (funlike_invocation_p): For padding prefer a token\n+\twith val.source non-NULL especially if it has PREV_WHITE set\n+\ton val.source->flags.  Add gcc_assert that CPP_PADDING tokens\n+\tdon't have PREV_WHITE set in flags.\n+\n+2022-02-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* directives.cc (destringize_and_run): Push &pfile->avoid_paste\n+\tinstead of a copy of pfile->directive_result for the CPP_PADDING\n+\tcase.\n+\n 2022-01-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR preprocessor/104030"}, {"sha": "b37c28dba07c1e092209f212e13f115e315f5996", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "patch": "@@ -1,3 +1,25 @@\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/private-atomic-1.c: Remove\n+\tPR83812 workaround.\n+\t* testsuite/libgomp.oacc-fortran/private-atomic-1-vector.f90: Same.\n+\t* testsuite/libgomp.oacc-fortran/private-atomic-1-worker.f90: Same.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/broadcast-many.c: Reduce\n+\tnum_workers for nvidia accelerator to fix libgomp error 'insufficient\n+\tresources'.\n+\t* testsuite/libgomp.oacc-c-c++-common/par-loop-comb-reduction-4.c:\n+\tSame.\n+\t* testsuite/libgomp.oacc-c-c++-common/reduction-7.c: Same.\n+\n+2022-02-01  Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.fortran/examples-4/declare_target-1.f90: Reduce\n+\trecursion depth.\n+\t* testsuite/libgomp.fortran/examples-4/declare_target-2.f90: Same.\n+\n 2022-01-31  Martin Liska  <mliska@suse.cz>\n \n \t* acinclude.m4: Detect *_ld_is_mold and use it."}, {"sha": "5635f43db452c94491073d6c5da7d098a9d7950c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ae7e4af964eaa80a3d7c43e4a7e1864d9a7cb06b", "patch": "@@ -1,3 +1,47 @@\n+2022-02-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/filesystem/iterators/error_reporting.cc: Use\n+\tautoconf macro to check whether d_type is present.\n+\t* testsuite/experimental/filesystem/iterators/error_reporting.cc:\n+\tLikewise.\n+\n+2022-02-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/filesystem/iterators/97731.cc: New test.\n+\t* testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc:\n+\tCheck follow_directory_symlink option.\n+\t* testsuite/experimental/filesystem/iterators/recursive_directory_iterator.cc:\n+\tLikewise.\n+\n+2022-02-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/fs_dir.cc (recursive_directory_iterator::increment):\n+\tReset state to past-the-end iterator on error.\n+\t(fs::recursive_directory_iterator::pop(error_code&)): Likewise.\n+\t(fs::recursive_directory_iterator::pop()): Check _M_dirs before\n+\tit might get reset.\n+\t* src/filesystem/dir.cc (recursive_directory_iterator): Likewise,\n+\tfor the TS implementation.\n+\t* testsuite/27_io/filesystem/iterators/error_reporting.cc: New test.\n+\t* testsuite/experimental/filesystem/iterators/error_reporting.cc: New test.\n+\n+2022-02-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_fwd.h (filesystem::perms): Fix comment.\n+\n+2022-02-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/104301\n+\t* acinclude.m4 (GLIBCXX_ENABLE_CSTDIO): Print different messages\n+\tfor stdio_pure and stdio_posix options.\n+\t* configure: Regenerate.\n+\n+2022-02-01  Thomas Rodgers  <rodgert@appliantology.com>\n+\n+\t* include/bits/atomic_wait.h: Change memory order from\n+\tAcquire/Release with relaxed loads to SeqCst+Release for\n+\taccesses to the waiter's count.\n+\n 2022-01-31  Martin Liska  <mliska@suse.cz>\n \n \t* acinclude.m4: Detect *_ld_is_mold and use it."}]}