{"sha": "1cc9ecae0ab80e9aa170950725a47ef285e78c9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNjOWVjYWUwYWI4MGU5YWExNzA5NTA3MjVhNDdlZjI4NWU3OGM5ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-09-29T13:52:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-24T10:16:00Z"}, "message": "[Ada] Wrong finalization in call with if expression\n\ngcc/ada/\n\n\t* exp_ch6.adb (Add_Cond_Expression_Extra_Actual): Simplify\n\thandling of function calls and remove bug in handling of\n\ttransient objects.  Minor reformatting along the way.", "tree": {"sha": "c0ff435d0a512cd81c46776263e82349cda49d33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0ff435d0a512cd81c46776263e82349cda49d33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cc9ecae0ab80e9aa170950725a47ef285e78c9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc9ecae0ab80e9aa170950725a47ef285e78c9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc9ecae0ab80e9aa170950725a47ef285e78c9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc9ecae0ab80e9aa170950725a47ef285e78c9d/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f0942424b7229797dfbcb7b9467c788df8c26b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0942424b7229797dfbcb7b9467c788df8c26b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0942424b7229797dfbcb7b9467c788df8c26b0"}], "stats": {"total": 92, "additions": 24, "deletions": 68}, "files": [{"sha": "7a976336a4532f3e4cc35b46e0715d12afdb5ed7", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 24, "deletions": 68, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc9ecae0ab80e9aa170950725a47ef285e78c9d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc9ecae0ab80e9aa170950725a47ef285e78c9d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=1cc9ecae0ab80e9aa170950725a47ef285e78c9d", "patch": "@@ -2879,17 +2879,10 @@ package body Exp_Ch6 is\n         (Formal : Entity_Id)\n       is\n          Decl : Node_Id;\n-\n-         --  Suppress warning for the final removal loop\n-         pragma Warnings (Off, Decl);\n-\n          Lvl  : Entity_Id;\n-         Res  : Entity_Id;\n-         Temp : Node_Id;\n-         Typ  : Node_Id;\n \n          procedure Insert_Level_Assign (Branch : Node_Id);\n-         --  Recursivly add assignment of the level temporary on each branch\n+         --  Recursively add assignment of the level temporary on each branch\n          --  while moving through nested conditional expressions.\n \n          -------------------------\n@@ -2917,12 +2910,10 @@ package body Exp_Ch6 is\n                --  There are more nested conditional expressions so we must go\n                --  deeper.\n \n-               if Nkind (Expression (Res_Assn)) =\n-                    N_Expression_With_Actions\n+               if Nkind (Expression (Res_Assn)) = N_Expression_With_Actions\n                  and then\n-                   Nkind\n-                     (Original_Node (Expression (Res_Assn)))\n-                       in N_Case_Expression | N_If_Expression\n+                   Nkind (Original_Node (Expression (Res_Assn)))\n+                     in N_Case_Expression | N_If_Expression\n                then\n                   Insert_Level_Assign\n                     (Expression (Res_Assn));\n@@ -2932,9 +2923,7 @@ package body Exp_Ch6 is\n                else\n                   Insert_Before_And_Analyze (Res_Assn,\n                     Make_Assignment_Statement (Loc,\n-                      Name       =>\n-                        New_Occurrence_Of\n-                          (Lvl, Loc),\n+                      Name       => New_Occurrence_Of (Lvl, Loc),\n                       Expression =>\n                         Accessibility_Level\n                           (Expression (Res_Assn), Dynamic_Level)));\n@@ -2956,9 +2945,7 @@ package body Exp_Ch6 is\n \n             Cond := First (Actions (Branch));\n             while Present (Cond) loop\n-               exit when Nkind (Cond) in\n-                           N_Case_Statement | N_If_Statement;\n-\n+               exit when Nkind (Cond) in N_Case_Statement | N_If_Statement;\n                Next (Cond);\n             end loop;\n \n@@ -2981,7 +2968,6 @@ package body Exp_Ch6 is\n                Alt := First (Alternatives (Cond));\n                while Present (Alt) loop\n                   Expand_Branch (Last (Statements (Alt)));\n-\n                   Next (Alt);\n                end loop;\n             end if;\n@@ -3000,7 +2986,7 @@ package body Exp_Ch6 is\n                      New_Occurrence_Of (Standard_Natural, Loc));\n \n          --  Install the declaration and perform necessary expansion if we\n-         --  are dealing with a function call.\n+         --  are dealing with a procedure call.\n \n          if Nkind (Call_Node) = N_Procedure_Call_Statement then\n             --  Generate:\n@@ -3019,57 +3005,27 @@ package body Exp_Ch6 is\n \n             Insert_Before_And_Analyze (Call_Node, Decl);\n \n-         --  A function call must be transformed into an expression with\n-         --  actions.\n+         --  Ditto for a function call. Note that we do not wrap the function\n+         --  call into an expression with action to avoid bad interactions with\n+         --  Exp_Ch4.Process_Transient_In_Expression.\n \n          else\n             --  Generate:\n-            --    do\n-            --      Lvl : Natural;\n-            --    in Call (do{\n-            --               If_Exp_Res : Typ\n-            --               if Cond then\n-            --                 Lvl := 0; --  Access level\n-            --                 If_Exp_Res := Exp;\n-            --               in If_Exp_Res end;},\n-            --             Lvl,\n-            --             ...\n-            --             )\n-            --    end;\n-\n-            Res  := Make_Temporary (Loc, 'R');\n-            Typ  := Etype (Call_Node);\n-            Temp := Relocate_Node (Call_Node);\n-\n-            --  Perform the rewrite with the dummy\n-\n-            Rewrite (Call_Node,\n-\n-              Make_Expression_With_Actions (Loc,\n-                Expression => New_Occurrence_Of (Res, Loc),\n-                Actions    => New_List (\n-                  Decl,\n-\n-                  Make_Object_Declaration (Loc,\n-                    Defining_Identifier => Res,\n-                    Object_Definition   =>\n-                      New_Occurrence_Of (Typ, Loc)))));\n-\n-            --  Analyze the expression with the dummy\n-\n-            Analyze_And_Resolve (Call_Node, Typ);\n-\n-            --  Properly set the expression and move our view of the call node\n-\n-            Set_Expression (Call_Node, Relocate_Node (Temp));\n-            Call_Node := Expression (Call_Node);\n-\n-            --  Remove the declaration of the dummy and the subsequent actions\n-            --  its analysis has created.\n+            --    Lvl : Natural;  --  placed above the function call\n+            --    ...\n+            --    Func_Call (\n+            --     {do\n+            --        If_Exp_Res : Typ\n+            --        if Cond then\n+            --           Lvl := 0; --  Access level\n+            --           If_Exp_Res := Exp;\n+            --      in If_Exp_Res end;},\n+            --      Lvl,\n+            --      ...\n+            --    )\n \n-            while Present (Remove_Next (Decl)) loop\n-               null;\n-            end loop;\n+            Insert_Action (Call_Node, Decl);\n+            Analyze (Call_Node);\n          end if;\n \n          --  Decorate the conditional expression with assignments to our level"}]}