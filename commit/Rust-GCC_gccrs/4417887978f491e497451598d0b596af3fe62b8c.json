{"sha": "4417887978f491e497451598d0b596af3fe62b8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQxNzg4Nzk3OGY0OTFlNDk3NDUxNTk4ZDBiNTk2YWYzZmU2MmI4Yw==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2013-11-23T15:38:07Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2013-11-23T15:38:07Z"}, "message": "re PR target/33704 (AIX runs c++ constructors in incorrect order)\n\nlibgcc:\n\n\tPR target/33704\n        * config/rs6000/aixinitfini.c: New file.\n        * config/rs6000/t-aix-cxa (LIB2ADD_ST): Add aixinitfini.c.\n        * config/rs6000/libgcc-aix-cxa.ver (GCC_4.9): Add libgcc initfini\n        symbols.\n\ngcc:\n\n\tPR target/33704\n        * config/rs6000/aix.h (COLLECT_SHARED_INIT_FUNC): Define.\n        (COLLECT_SHARED_FINI_FUNC): Define.\n\n        * collect2.c (aix_shared_initname): Declare.\n        (aix_shared_fininame): Declare.\n        (symkind): Add SYM_AIXI and SYM_AIXD.\n        (scanfilter_masks): Add SCAN_AIXI and SCAN_AIXD.\n        (struct names special): Add GLOBAL__AIXI_ and GLOBAL__AIXD_.\n        (aixlazy_flag): Parse.\n        (extract_init_priority): SYM_AIXI and SYM_AIXD have highest priority.\n        (scan_prog_file, COFF): Handle SYM_AIXI and SYM_AIXD.\n\nCo-Authored-By: Andrew Dixie <andrewd@gentrack.com>\n\nFrom-SVN: r205309", "tree": {"sha": "f4b1af998497b3580f1c29d4a76412a5adc04585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4b1af998497b3580f1c29d4a76412a5adc04585"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4417887978f491e497451598d0b596af3fe62b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4417887978f491e497451598d0b596af3fe62b8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4417887978f491e497451598d0b596af3fe62b8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4417887978f491e497451598d0b596af3fe62b8c/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf77a180162e674e73b0aa3c2c230e5aa579d990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf77a180162e674e73b0aa3c2c230e5aa579d990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf77a180162e674e73b0aa3c2c230e5aa579d990"}], "stats": {"total": 163, "additions": 162, "deletions": 1}, "files": [{"sha": "fee3273a3004524d491f0665b4b27f0261a4c7b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4417887978f491e497451598d0b596af3fe62b8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4417887978f491e497451598d0b596af3fe62b8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4417887978f491e497451598d0b596af3fe62b8c", "patch": "@@ -1,3 +1,19 @@\n+2013-11-23  David Edelson  <dje.gcc@gmail.com>\n+\t    Andrew Dixie  <andrewd@gentrack.com>\n+\n+\tPR target/33704\n+\t* config/rs6000/aix.h (COLLECT_SHARED_INIT_FUNC): Define.\n+\t(COLLECT_SHARED_FINI_FUNC): Define.\n+\n+\t* collect2.c (aix_shared_initname): Declare.\n+\t(aix_shared_fininame): Declare.\n+\t(symkind): Add SYM_AIXI and SYM_AIXD.\n+\t(scanfilter_masks): Add SCAN_AIXI and SCAN_AIXD.\n+\t(struct names special): Add GLOBAL__AIXI_ and GLOBAL__AIXD_.\n+\t(aixlazy_flag): Parse.\n+\t(extract_init_priority): SYM_AIXI and SYM_AIXD have highest priority.\n+\t(scan_prog_file, COFF): Handle SYM_AIXI and SYM_AIXD.\n+\n 2013-11-23  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000.c (IN_NAMED_SECTION): New macro."}, {"sha": "95f817d307ac345ef79efb6b839c39fc29124d62", "filename": "gcc/collect2.c", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4417887978f491e497451598d0b596af3fe62b8c/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4417887978f491e497451598d0b596af3fe62b8c/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=4417887978f491e497451598d0b596af3fe62b8c", "patch": "@@ -182,6 +182,7 @@ static int strip_flag;\t\t\t/* true if -s */\n static int export_flag;                 /* true if -bE */\n static int aix64_flag;\t\t\t/* true if -b64 */\n static int aixrtl_flag;\t\t\t/* true if -brtl */\n+static int aixlazy_flag;               /* true if -blazy */\n #endif\n \n enum lto_mode_d {\n@@ -215,6 +216,13 @@ static const char *strip_file_name;\t\t/* pathname of strip */\n const char *c_file_name;\t\t/* pathname of gcc */\n static char *initname, *fininame;\t/* names of init and fini funcs */\n \n+\n+#ifdef TARGET_AIX_VERSION\n+static char *aix_shared_initname;\n+static char *aix_shared_fininame;       /* init/fini names as per the scheme\n+\t\t\t\t\t   described in config/rs6000/aix.h */\n+#endif\n+\n static struct head constructors;\t/* list of constructors found */\n static struct head destructors;\t\t/* list of destructors found */\n #ifdef COLLECT_EXPORT_LIST\n@@ -279,7 +287,9 @@ typedef enum {\n   SYM_DTOR = 2,  /* destructor  */\n   SYM_INIT = 3,  /* shared object routine that calls all the ctors  */\n   SYM_FINI = 4,  /* shared object routine that calls all the dtors  */\n-  SYM_DWEH = 5   /* DWARF exception handling table  */\n+  SYM_DWEH = 5,  /* DWARF exception handling table  */\n+  SYM_AIXI = 6,\n+  SYM_AIXD = 7\n } symkind;\n \n static symkind is_ctor_dtor (const char *);\n@@ -340,6 +350,8 @@ enum scanfilter_masks {\n   SCAN_INIT = 1 << SYM_INIT,\n   SCAN_FINI = 1 << SYM_FINI,\n   SCAN_DWEH = 1 << SYM_DWEH,\n+  SCAN_AIXI = 1 << SYM_AIXI,\n+  SCAN_AIXD = 1 << SYM_AIXD,\n   SCAN_ALL  = ~0\n };\n \n@@ -589,6 +601,10 @@ is_ctor_dtor (const char *s)\n     { \"GLOBAL__F_\", sizeof (\"GLOBAL__F_\")-1, SYM_DWEH, 0 },\n     { \"GLOBAL__FI_\", sizeof (\"GLOBAL__FI_\")-1, SYM_INIT, 0 },\n     { \"GLOBAL__FD_\", sizeof (\"GLOBAL__FD_\")-1, SYM_FINI, 0 },\n+#ifdef TARGET_AIX_VERSION\n+    { \"GLOBAL__AIXI_\", sizeof (\"GLOBAL__AIXI_\")-1, SYM_AIXI, 0 },\n+    { \"GLOBAL__AIXD_\", sizeof (\"GLOBAL__AIXD_\")-1, SYM_AIXD, 0 },\n+#endif\n     { NULL, 0, SYM_REGULAR, 0 }\n   };\n \n@@ -1034,6 +1050,8 @@ main (int argc, char **argv)\n \t    aixrtl_flag = 1;\n \telse if (strcmp (argv[i], \"-bnortl\") == 0)\n \t    aixrtl_flag = 0;\n+\telse if (strcmp (argv[i], \"-blazy\") == 0)\n+\t    aixlazy_flag = 1;\n #endif\n       }\n     vflag = debug;\n@@ -1728,6 +1746,11 @@ main (int argc, char **argv)\n       if (! exports.first)\n \t*ld2++ = concat (\"-bE:\", export_file, NULL);\n \n+#ifdef TARGET_AIX_VERSION\n+      add_to_list (&exports, aix_shared_initname);\n+      add_to_list (&exports, aix_shared_fininame);\n+#endif\n+\n #ifndef LD_INIT_SWITCH\n       add_to_list (&exports, initname);\n       add_to_list (&exports, fininame);\n@@ -2020,6 +2043,19 @@ extract_init_priority (const char *name)\n {\n   int pos = 0, pri;\n \n+#ifdef TARGET_AIX_VERSION\n+  /* Run dependent module initializers before any constructors in this\n+     module.  */\n+  switch (is_ctor_dtor (name))\n+    {\n+    case SYM_AIXI:\n+    case SYM_AIXD:\n+      return INT_MIN;\n+    default:\n+      break;\n+    }\n+#endif\n+\n   while (name[pos] == '_')\n     ++pos;\n   pos += 10; /* strlen (\"GLOBAL__X_\") */\n@@ -2180,11 +2216,22 @@ write_c_file_stat (FILE *stream, const char *name ATTRIBUTE_UNUSED)\n \n   initname = concat (\"_GLOBAL__FI_\", prefix, NULL);\n   fininame = concat (\"_GLOBAL__FD_\", prefix, NULL);\n+#ifdef TARGET_AIX_VERSION\n+  aix_shared_initname = concat (\"_GLOBAL__AIXI_\", prefix, NULL);\n+  aix_shared_fininame = concat (\"_GLOBAL__AIXD_\", prefix, NULL);\n+#endif\n \n   free (prefix);\n \n   /* Write the tables as C code.  */\n \n+  /* This count variable is used to prevent multiple calls to the\n+     constructors/destructors.\n+     This guard against multiple calls is important on AIX as the initfini\n+     functions are deliberately invoked multiple times as part of the\n+     mechanisms GCC uses to order constructors across different dependent\n+     shared libraries (see config/rs6000/aix.h).\n+   */\n   fprintf (stream, \"static int count;\\n\");\n   fprintf (stream, \"typedef void entry_pt();\\n\");\n   write_list_with_asm (stream, \"extern entry_pt \", constructors.first);\n@@ -2531,6 +2578,7 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n \n \n       *end = '\\0';\n+\n       switch (is_ctor_dtor (name))\n \t{\n \tcase SYM_CTOR:\n@@ -2892,6 +2940,25 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n \n \t\t      switch (is_ctor_dtor (name))\n \t\t\t{\n+#if TARGET_AIX_VERSION\n+\t\t      /* Add AIX shared library initalisers/finalisers\n+\t\t\t to the constructors/destructors list of the\n+\t\t\t current module.  */\n+\t\t\tcase SYM_AIXI:\n+\t\t\t  if (! (filter & SCAN_CTOR))\n+\t\t\t    break;\n+\t\t\t  if (is_shared && !aixlazy_flag)\n+\t\t\t    add_to_list (&constructors, name);\n+\t\t\t  break;\n+\n+\t\t\tcase SYM_AIXD:\n+\t\t\t  if (! (filter & SCAN_DTOR))\n+\t\t\t    break;\n+\t\t\t  if (is_shared && !aixlazy_flag)\n+\t\t\t    add_to_list (&destructors, name);\n+\t\t\t  break;\n+#endif\n+\n \t\t\tcase SYM_CTOR:\n \t\t\t  if (! (filter & SCAN_CTOR))\n \t\t\t    break;"}, {"sha": "1a879da49ccdde33f4bd6665364a5c238300150c", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4417887978f491e497451598d0b596af3fe62b8c/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4417887978f491e497451598d0b596af3fe62b8c/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=4417887978f491e497451598d0b596af3fe62b8c", "patch": "@@ -47,6 +47,35 @@\n    collect has a chance to see them, so scan the object files directly.  */\n #define COLLECT_EXPORT_LIST\n \n+/* On AIX, initialisers specified with -binitfini are called in breadth-first\n+   order.\n+   e.g. if a.out depends on lib1.so, the init function for a.out is called before\n+   the init function for lib1.so.\n+\n+   To ensure global C++ constructors in linked libraries are run before global\n+   C++ constructors from the current module, there is additional symbol scanning\n+   logic in collect2.\n+\n+   The global initialiser/finaliser functions are named __GLOBAL_AIXI_{libname}\n+   and __GLOBAL_AIXD_{libname} and are exported from each shared library.\n+\n+   collect2 will detect these symbols when they exist in shared libraries that\n+   the current program is being linked against.  All such initiliser functions\n+   will be called prior to the constructors of the current program, and\n+   finaliser functions called after destructors.\n+\n+   Reference counting generated by collect2 will ensure that constructors are\n+   only invoked once in the case of multiple dependencies on a library.\n+\n+   -binitfini is still used in parallel to this solution.\n+   This handles the case where a library is loaded through dlopen(), and also\n+   handles the option -blazy.\n+*/\n+#define COLLECT_SHARED_INIT_FUNC(STREAM, FUNC) \\\n+\t  fprintf ((STREAM), \"void %s() {\\n\\t%s();\\n}\\n\", aix_shared_initname, (FUNC))\n+#define COLLECT_SHARED_FINI_FUNC(STREAM, FUNC) \\\n+\t  fprintf ((STREAM), \"void %s() {\\n\\t%s();\\n}\\n\", aix_shared_fininame, (FUNC))\n+\n #if HAVE_AS_REF\n /* Issue assembly directives that create a reference to the given DWARF table\n    identifier label from the current function section.  This is defined to"}, {"sha": "1e7731a59928dfdc83a12f0409e8185cd8e7d7bb", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4417887978f491e497451598d0b596af3fe62b8c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4417887978f491e497451598d0b596af3fe62b8c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=4417887978f491e497451598d0b596af3fe62b8c", "patch": "@@ -1,3 +1,12 @@\n+2013-11-23  David Edelson  <dje.gcc@gmail.com>\n+\t    Andrew Dixie  <andrewd@gentrack.com>\n+\n+\tPR target/33704\n+\t* config/rs6000/aixinitfini.c: New file.\n+\t* config/rs6000/t-aix-cxa (LIB2ADD_ST): Add aixinitfini.c.\n+\t* config/rs6000/libgcc-aix-cxa.ver (GCC_4.9): Add libgcc initfini\n+\tsymbols.\n+\n 2013-11-22  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \t * config/i386/cpuinfo.c (get_intel_cpu): Add Silvermont cases."}, {"sha": "e95575820e24aaf62447ab581b1d4a590878c486", "filename": "libgcc/config/rs6000/aixinitfini.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4417887978f491e497451598d0b596af3fe62b8c/libgcc%2Fconfig%2Frs6000%2Faixinitfini.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4417887978f491e497451598d0b596af3fe62b8c/libgcc%2Fconfig%2Frs6000%2Faixinitfini.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Faixinitfini.c?ref=4417887978f491e497451598d0b596af3fe62b8c", "patch": "@@ -0,0 +1,33 @@\n+/* FIXME: rename this file */\n+\n+/*\n+   Artificially create _GLOBAL_AIX[ID]_shr_o symbols in libgcc.a.\n+\n+   This means that libstdc++.a can invoke these symbols and they are resolved\n+   regardless of whether libstdc++.a is linked against libgcc_s.a or libgcc.a.\n+\n+   The symbols are created in libgcc_s.a by collect2 as there are exception\n+   frames to register for LIB2_DIVMOD_FUNCS.\n+\n+   The symbols are NOT created by collect2 for libgcc.a, because libgcc.a is\n+   a 'real' archive containing objects and collect2 is not invoked.\n+\n+   libstdc++.a is linked against libgcc.a when handling the command line\n+   options '-static-libgcc -static-libstdc++'.\n+*/\n+\n+void _GLOBAL__AIXI_shr_o (void);\n+void _GLOBAL__AIXD_shr_o (void);\n+\n+void\n+_GLOBAL__AIXI_shr_o (void)\n+{\n+  return;\n+}\n+\n+void\n+_GLOBAL__AIXD_shr_o (void)\n+{\n+  return;\n+}\n+"}, {"sha": "f89df2312a30d5a88fe34beec638ab7f7666081a", "filename": "libgcc/config/rs6000/libgcc-aix-cxa.ver", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4417887978f491e497451598d0b596af3fe62b8c/libgcc%2Fconfig%2Frs6000%2Flibgcc-aix-cxa.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4417887978f491e497451598d0b596af3fe62b8c/libgcc%2Fconfig%2Frs6000%2Flibgcc-aix-cxa.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Flibgcc-aix-cxa.ver?ref=4417887978f491e497451598d0b596af3fe62b8c", "patch": "@@ -2,3 +2,8 @@ GCC_4.8 {\n   __cxa_atexit\n   __cxa_finalize\n }\n+\n+GCC_4.9 {\n+  _GLOBAL__AIXI_shr_o\n+  _GLOBAL__AIXD_shr_o\n+}"}, {"sha": "4755c20c9649105480486b582368006e3e873d5e", "filename": "libgcc/config/rs6000/t-aix-cxa", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4417887978f491e497451598d0b596af3fe62b8c/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4417887978f491e497451598d0b596af3fe62b8c/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa?ref=4417887978f491e497451598d0b596af3fe62b8c", "patch": "@@ -1,6 +1,8 @@\n LIB2ADDEH += $(srcdir)/config/rs6000/cxa_atexit.c \\\n \t$(srcdir)/config/rs6000/cxa_finalize.c\n \n+LIB2ADD_ST += $(srcdir)/config/rs6000/aixinitfini.c\n+\n SHLIB_MAPFILES += $(srcdir)/config/rs6000/libgcc-aix-cxa.ver\n \n crtcxa.o: $(srcdir)/config/rs6000/crtcxa.c"}]}