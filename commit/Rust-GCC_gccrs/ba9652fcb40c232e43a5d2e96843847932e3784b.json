{"sha": "ba9652fcb40c232e43a5d2e96843847932e3784b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE5NjUyZmNiNDBjMjMyZTQzYTVkMmU5Njg0Mzg0NzkzMmUzNzg0Yg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2007-02-10T14:22:54Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-02-10T14:22:54Z"}, "message": "re PR libgcj/30742 (ResourceBundle regression)\n\n2007-02-10  Andrew Haley  <aph@redhat.com>\n\n\tPR java/30742\n\t* gnu/classpath/natVMStackWalker.cc (GET_CALLING_CLASS): New.\n\t(getCallingClass): Call GET_CALLING_CLASS.\n\t(getCallingClassLoader): Likewise.\n\nFrom-SVN: r121798", "tree": {"sha": "b46076778a1fa06db86e1bab8e622bbd3cf616d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b46076778a1fa06db86e1bab8e622bbd3cf616d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba9652fcb40c232e43a5d2e96843847932e3784b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9652fcb40c232e43a5d2e96843847932e3784b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9652fcb40c232e43a5d2e96843847932e3784b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9652fcb40c232e43a5d2e96843847932e3784b/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf654c9418d8246110f1703c920f4e57eec4a075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf654c9418d8246110f1703c920f4e57eec4a075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf654c9418d8246110f1703c920f4e57eec4a075"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "1c39b14a916f18b3847668b754b6d5064ed4833c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9652fcb40c232e43a5d2e96843847932e3784b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9652fcb40c232e43a5d2e96843847932e3784b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ba9652fcb40c232e43a5d2e96843847932e3784b", "patch": "@@ -1,3 +1,10 @@\n+2007-02-10  Andrew Haley  <aph@redhat.com>\n+\n+\tPR java/30742\n+\t* gnu/classpath/natVMStackWalker.cc (GET_CALLING_CLASS): New.\n+\t(getCallingClass): Call GET_CALLING_CLASS.\n+\t(getCallingClassLoader): Likewise.\n+\n 2007-02-10  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* configure: Rebuilt."}, {"sha": "f7eb8832f4c28194a5e17ee826c77ef6afe22bab", "filename": "libjava/gnu/classpath/natVMStackWalker.cc", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9652fcb40c232e43a5d2e96843847932e3784b/libjava%2Fgnu%2Fclasspath%2FnatVMStackWalker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9652fcb40c232e43a5d2e96843847932e3784b/libjava%2Fgnu%2Fclasspath%2FnatVMStackWalker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2FnatVMStackWalker.cc?ref=ba9652fcb40c232e43a5d2e96843847932e3784b", "patch": "@@ -1,6 +1,6 @@\n // natVMStackWalker.cc\n \n-/* Copyright (C) 2006  Free Software Foundation\n+/* Copyright (C) 2006, 2007  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -19,6 +19,32 @@ details.  */\n #include <java/lang/ClassLoader.h>\n #include <java/lang/Class.h>\n \n+// Return the class of the method that contains PC.\n+// This is a macro not a function, since defining it as one would\n+// introduce an extra frame on the stack.  */\n+#define GET_CALLING_CLASS(PC)\t\t\t\t\t\t\\\n+({\t\t\t\t\t\t\t\t\t\\\n+  void *f = _Unwind_FindEnclosingFunction (PC);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* FIXME: it might well be a good idea to cache pc values here in\t\\\n+     order to avoid repeated invocations of\t\t\t\t\\\n+     _Unwind_FindEnclosingFunction, which is quite expensive.  On the\t\\\n+     other hand, which not simply write a caching version of\t\t\\\n+     _Unwind_FindEnclosingFunction itself?  That would probably be\t\\\n+     worthwhile.  */\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  _Jv_StackTrace::UpdateNCodeMap ();\t\t\t\t\t\\\n+  jclass klass = (jclass) _Jv_StackTrace::ncodeMap->get ((jobject) f);\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* If the caller is a compiled frame and the caller of the caller is\t\\\n+     an interpreted frame then klass will be null and we need to\t\\\n+     unwind the stack.  */\t\t\t\t\t\t\\\n+  if (!klass)\t\t\t\t\t\t\t\t\\\n+    klass = _Jv_StackTrace::GetStackWalkerCallingClass ();\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  klass;\t\t\t\t\t\t\t\t\\\n+ })\n+\n JArray<jclass> *\n gnu::classpath::VMStackWalker::getClassContext(void)\n {\n@@ -40,25 +66,7 @@ jclass\n gnu::classpath::VMStackWalker::getCallingClass(::gnu::gcj::RawData *pc)\n {\n   _Jv_InitClass (&::gnu::classpath::VMStackWalker::class$);\n-  void *f = _Unwind_FindEnclosingFunction (pc);\n-\n-  // FIXME: it might well be a good idea to cache pc values here in\n-  // order to avoid repeated invocations of\n-  // _Unwind_FindEnclosingFunction, which is quite expensive.  On the\n-  // other hand, which not simply write a caching version of\n-  // _Unwind_FindEnclosingFunction itself?  That would probably be\n-  // worthwhile.\n-\n-  _Jv_StackTrace::UpdateNCodeMap ();\n-  jclass klass = (jclass) _Jv_StackTrace::ncodeMap->get ((jobject) f);\n-\n-  // If the caller is a compiled frame and the caller of the caller\n-  // is an interpreted frame then klass will be null and we need to\n-  // unwind the stack.\n-  if (klass == NULL)\n-    klass = _Jv_StackTrace::GetStackWalkerCallingClass ();\n-\n-  return klass;\n+  return GET_CALLING_CLASS(pc);\n }\n \n ::java::lang::ClassLoader *\n@@ -80,7 +88,7 @@ ::java::lang::ClassLoader *\n gnu::classpath::VMStackWalker::getCallingClassLoader(::gnu::gcj::RawData *pc)\n {\n   _Jv_InitClass (&::gnu::classpath::VMStackWalker::class$);\n-  return getCallingClass (pc)->getClassLoaderInternal ();\n+  return GET_CALLING_CLASS(pc)->getClassLoaderInternal ();\n }\n \n ::java::lang::ClassLoader *"}]}