{"sha": "61cd19e6be197dbafa410e894f002a185256db30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFjZDE5ZTZiZTE5N2RiYWZhNDEwZTg5NGYwMDJhMTg1MjU2ZGIzMA==", "commit": {"author": {"name": "Glen Joseph Fernandes", "email": "glenjofe@gmail.com", "date": "2017-11-28T14:22:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-11-28T14:22:32Z"}, "message": "Add std::to_address for C++2a (P0653R2)\n\n2017-11-28  Glen Joseph Fernandes  <glenjofe@gmail.com>\n\n\t* include/bits/ptr_traits.h (to_address): Implement to_address.\n\t* testsuite/20_util/to_address/1.cc: New test.\n\nFrom-SVN: r255199", "tree": {"sha": "e4ccbf8e57357f16168288813716bab18333a5b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4ccbf8e57357f16168288813716bab18333a5b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61cd19e6be197dbafa410e894f002a185256db30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61cd19e6be197dbafa410e894f002a185256db30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61cd19e6be197dbafa410e894f002a185256db30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61cd19e6be197dbafa410e894f002a185256db30/comments", "author": {"login": "glenfe", "id": 712180, "node_id": "MDQ6VXNlcjcxMjE4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/712180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glenfe", "html_url": "https://github.com/glenfe", "followers_url": "https://api.github.com/users/glenfe/followers", "following_url": "https://api.github.com/users/glenfe/following{/other_user}", "gists_url": "https://api.github.com/users/glenfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/glenfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glenfe/subscriptions", "organizations_url": "https://api.github.com/users/glenfe/orgs", "repos_url": "https://api.github.com/users/glenfe/repos", "events_url": "https://api.github.com/users/glenfe/events{/privacy}", "received_events_url": "https://api.github.com/users/glenfe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a198ba9d35f95a0bc407934ac8de58c6875fd9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a198ba9d35f95a0bc407934ac8de58c6875fd9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a198ba9d35f95a0bc407934ac8de58c6875fd9b"}], "stats": {"total": 190, "additions": 190, "deletions": 0}, "files": [{"sha": "aa764f54702a1e99974423f27b6d0dc7970de97c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd19e6be197dbafa410e894f002a185256db30/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd19e6be197dbafa410e894f002a185256db30/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=61cd19e6be197dbafa410e894f002a185256db30", "patch": "@@ -1,3 +1,8 @@\n+2017-11-28  Glen Joseph Fernandes  <glenjofe@gmail.com>\n+\n+\t* include/bits/ptr_traits.h (to_address): Implement to_address.\n+\t* testsuite/20_util/to_address/1.cc: New test.\n+\n 2017-11-27  Stephan Bergmann  <sbergman@redhat.com>\n \n \t* include/std/string_view (basic_string_view::find_first_of): Add"}, {"sha": "67cc7e97a807ffed186b7e2c11a258147eed5312", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd19e6be197dbafa410e894f002a185256db30/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd19e6be197dbafa410e894f002a185256db30/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=61cd19e6be197dbafa410e894f002a185256db30", "patch": "@@ -151,10 +151,49 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __to_address(_Tp* __ptr) noexcept\n     { return __ptr; }\n \n+#if __cplusplus <= 201703L\n   template<typename _Ptr>\n     constexpr typename std::pointer_traits<_Ptr>::element_type*\n     __to_address(const _Ptr& __ptr)\n     { return std::__to_address(__ptr.operator->()); }\n+#else\n+  template<typename _Ptr>\n+    constexpr auto\n+    __to_address(const _Ptr& __ptr) noexcept\n+    -> decltype(std::pointer_traits<_Ptr>::to_address(__ptr))\n+    { return std::pointer_traits<_Ptr>::to_address(__ptr); }\n+\n+  template<typename _Ptr, typename... _None>\n+    constexpr auto\n+    __to_address(const _Ptr& __ptr, _None...) noexcept\n+    { return std::__to_address(__ptr.operator->()); }\n+\n+  /**\n+   * @brief Obtain address referenced by a pointer to an object\n+   * @param __ptr A pointer to an object\n+   * @return @c __ptr\n+   * @ingroup pointer_abstractions\n+  */\n+  template<typename _Tp>\n+    constexpr _Tp*\n+    to_address(_Tp* __ptr) noexcept\n+    {\n+      static_assert(!std::is_function_v<_Tp>, \"not a pointer to function\");\n+      return __ptr;\n+    }\n+\n+  /**\n+   * @brief Obtain address referenced by a pointer to an object\n+   * @param __ptr A pointer to an object\n+   * @return @c pointer_traits<_Ptr>::to_address(__ptr) if that expression is\n+             well-formed, otherwise @c to_address(__ptr.operator->())\n+   * @ingroup pointer_abstractions\n+  */\n+  template<typename _Ptr>\n+    constexpr auto\n+    to_address(const _Ptr& __ptr) noexcept\n+    { return std::__to_address(__ptr); }\n+#endif // C++2a\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "627ca69fbb1db2781406cd8e5411ea7b4825baf0", "filename": "libstdc++-v3/testsuite/20_util/to_address/1.cc", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61cd19e6be197dbafa410e894f002a185256db30/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61cd19e6be197dbafa410e894f002a185256db30/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_address%2F1.cc?ref=61cd19e6be197dbafa410e894f002a185256db30", "patch": "@@ -0,0 +1,146 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+class P1\n+{\n+public:\n+  using element_type = int;\n+\n+  explicit P1(int* p)\n+  : p_(p) { }\n+\n+  int* operator->() const noexcept\n+  { return p_; }\n+\n+private:\n+  int* p_;\n+};\n+\n+class P2\n+{\n+public:\n+  using element_type = int;\n+\n+  explicit P2(int* p)\n+  : p_(p) { }\n+\n+  P1 operator->() const noexcept\n+  { return p_; }\n+\n+private:\n+  P1 p_;\n+};\n+\n+class P3\n+{\n+public:\n+  explicit P3(int* p)\n+  : p_(p) { }\n+\n+  int* get() const noexcept\n+  { return p_; }\n+\n+private:\n+  int* p_;\n+};\n+\n+namespace std\n+{\n+  template<>\n+    struct pointer_traits<::P3>\n+    {\n+      static int* to_address(const ::P3& p) noexcept\n+      { return p.get(); }\n+    };\n+}\n+\n+class P4\n+{\n+public:\n+  explicit P4(int* p)\n+  : p_(p) { }\n+\n+  int* operator->() const noexcept\n+  { return nullptr; }\n+\n+  int* get() const noexcept\n+  { return p_; }\n+\n+private:\n+  int* p_;\n+};\n+\n+namespace std\n+{\n+  template<>\n+    struct pointer_traits<::P4>\n+    {\n+      static int* to_address(const ::P4& p) noexcept\n+      { return p.get(); }\n+    };\n+}\n+\n+void test01()\n+{\n+  int i = 0;\n+  int* p = &i;\n+  VERIFY( std::to_address(p) == &i );\n+}\n+\n+void test02()\n+{\n+  int i = 0;\n+  P1 p(&i);\n+  VERIFY( std::to_address(p) == &i );\n+}\n+\n+void test03()\n+{\n+  int i = 0;\n+  P2 p(&i);\n+  VERIFY( std::to_address(p) == &i );\n+}\n+\n+void test04()\n+{\n+  int i = 0;\n+  P3 p(&i);\n+  VERIFY( std::to_address(p) == &i );\n+}\n+\n+void test05()\n+{\n+  int i = 0;\n+  P4 p(&i);\n+  VERIFY( std::to_address(p) == &i );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  test05();\n+  return 0;\n+}"}]}