{"sha": "41a6da2de5102b6052175c82ad2fb2357c9eceab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhNmRhMmRlNTEwMmI2MDUyMTc1YzgyYWQyZmIyMzU3YzllY2VhYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-09T23:26:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-09T23:26:27Z"}, "message": "compiler: support go:noescape cross package\n    \n    CL 83876 added support of go:noescape pragma, but it only works\n    for functions called from the same package. The pragma did not\n    take effect for exported functions that are not called from\n    the same package. The reason is that top level function\n    declarations are not traversed, and only reached from calls\n    from other functions. This CL adds this support. The Traverse\n    class is extended with a mode to traverse function declarations.\n    \n    Reviewed-on: https://go-review.googlesource.com/85637\n\nFrom-SVN: r256405", "tree": {"sha": "e71a915eadaba1eee40d3e5f5dd7423b0e17031e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e71a915eadaba1eee40d3e5f5dd7423b0e17031e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41a6da2de5102b6052175c82ad2fb2357c9eceab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a6da2de5102b6052175c82ad2fb2357c9eceab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a6da2de5102b6052175c82ad2fb2357c9eceab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a6da2de5102b6052175c82ad2fb2357c9eceab/comments", "author": null, "committer": null, "parents": [{"sha": "e732b4248592cc992eddcd00d37c6457d99381e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e732b4248592cc992eddcd00d37c6457d99381e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e732b4248592cc992eddcd00d37c6457d99381e7"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "70dfeebd31f4c40c66aa6d0a2535d946cec31d08", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6da2de5102b6052175c82ad2fb2357c9eceab/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6da2de5102b6052175c82ad2fb2357c9eceab/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=41a6da2de5102b6052175c82ad2fb2357c9eceab", "patch": "@@ -1,4 +1,4 @@\n-b361bec95927fd6209c286906f98deeedcfe1da3\n+cf5a64066fa21b20beae0b895c05d26af53e13e0\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "7a0545108bb73c3322055f0dd6ebc60592a305eb", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6da2de5102b6052175c82ad2fb2357c9eceab/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6da2de5102b6052175c82ad2fb2357c9eceab/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=41a6da2de5102b6052175c82ad2fb2357c9eceab", "patch": "@@ -997,13 +997,16 @@ class Escape_analysis_discover : public Traverse\n {\n  public:\n   Escape_analysis_discover(Gogo* gogo)\n-    : Traverse(traverse_functions),\n+    : Traverse(traverse_functions | traverse_func_declarations),\n       gogo_(gogo), component_ids_()\n   { }\n \n   int\n   function(Named_object*);\n \n+  int\n+  function_declaration(Named_object*);\n+\n   int\n   visit(Named_object*);\n \n@@ -1036,6 +1039,13 @@ Escape_analysis_discover::function(Named_object* fn)\n   return TRAVERSE_CONTINUE;\n }\n \n+int\n+Escape_analysis_discover::function_declaration(Named_object* fn)\n+{\n+  this->visit(fn);\n+  return TRAVERSE_CONTINUE;\n+}\n+\n // Visit a function FN, adding it to the current stack of functions\n // in this connected component.  If this is the root of the component,\n // create a set of functions to be analyzed later."}, {"sha": "579b8a3ee5e3815541e0db1e320a134fe6c882fe", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6da2de5102b6052175c82ad2fb2357c9eceab/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6da2de5102b6052175c82ad2fb2357c9eceab/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=41a6da2de5102b6052175c82ad2fb2357c9eceab", "patch": "@@ -7912,6 +7912,21 @@ Bindings::traverse(Traverse* traverse, bool is_global)\n \t}\n     }\n \n+  // Traverse function declarations when needed.\n+  if ((traverse_mask & Traverse::traverse_func_declarations) != 0)\n+    {\n+      for (Bindings::const_declarations_iterator p = this->begin_declarations();\n+           p != this->end_declarations();\n+           ++p)\n+        {\n+          if (p->second->is_function_declaration())\n+            {\n+              if (traverse->function_declaration(p->second) == TRAVERSE_EXIT)\n+                return TRAVERSE_EXIT;\n+            }\n+        }\n+    }\n+\n   return TRAVERSE_CONTINUE;\n }\n \n@@ -8221,6 +8236,12 @@ Traverse::type(Type*)\n   go_unreachable();\n }\n \n+int\n+Traverse::function_declaration(Named_object*)\n+{\n+  go_unreachable();\n+}\n+\n // Class Statement_inserter.\n \n void"}, {"sha": "c16788cf4aea958cffb560e28ed725002357ee30", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a6da2de5102b6052175c82ad2fb2357c9eceab/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a6da2de5102b6052175c82ad2fb2357c9eceab/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=41a6da2de5102b6052175c82ad2fb2357c9eceab", "patch": "@@ -3271,13 +3271,14 @@ class Traverse\n {\n  public:\n   // These bitmasks say what to traverse.\n-  static const unsigned int traverse_variables =    0x1;\n-  static const unsigned int traverse_constants =    0x2;\n-  static const unsigned int traverse_functions =    0x4;\n-  static const unsigned int traverse_blocks =       0x8;\n-  static const unsigned int traverse_statements =  0x10;\n-  static const unsigned int traverse_expressions = 0x20;\n-  static const unsigned int traverse_types =       0x40;\n+  static const unsigned int traverse_variables =          0x1;\n+  static const unsigned int traverse_constants =          0x2;\n+  static const unsigned int traverse_functions =          0x4;\n+  static const unsigned int traverse_blocks =             0x8;\n+  static const unsigned int traverse_statements =        0x10;\n+  static const unsigned int traverse_expressions =       0x20;\n+  static const unsigned int traverse_types =             0x40;\n+  static const unsigned int traverse_func_declarations = 0x80;\n \n   Traverse(unsigned int traverse_mask)\n     : traverse_mask_(traverse_mask), types_seen_(NULL), expressions_seen_(NULL)\n@@ -3342,6 +3343,11 @@ class Traverse\n   virtual int\n   type(Type*);\n \n+  // If traverse_func_declarations is set in the mask, this is called\n+  // for every function declarations in the tree.\n+  virtual int\n+  function_declaration(Named_object*);\n+\n  private:\n   // A hash table for types we have seen during this traversal.  Note\n   // that this uses the default hash functions for pointers rather"}]}