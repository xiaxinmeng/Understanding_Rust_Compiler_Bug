{"sha": "dfafcb4dbd18487e06d631e71c6e03dc614c94c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZhZmNiNGRiZDE4NDg3ZTA2ZDYzMWU3MWM2ZTAzZGM2MTRjOTRjNA==", "commit": {"author": {"name": "Herman A.J. ten Brugge", "email": "Haj.Ten.Brugge@net.HCC.nl", "date": "2000-01-29T03:07:37Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-01-29T03:07:37Z"}, "message": "c4x.c (c4x_output_ascii): Restrict line length of output when TI syntax is used.\n\n2000-01-29 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n\n        * c4x.c (c4x_output_ascii): Restrict line length of output when TI\n\tsyntax is used.\n\t(c4x_function_prologue): Use regnames intead of float_reg_names when\n\tTI syntax is used.\n\t(c4x_function_epilogue): Likewise.\n\t(c4x_print_operand): Likewise.\n\t* c4x.h (HOST_WIDE_INT_PRINT_HEX): Redefine.\n\t* c4x.md (set_high): Disable for TARGET_TI.\n\nFrom-SVN: r31682", "tree": {"sha": "8952ca3bbf4f65b4320da6e2d88b74c0d76e4665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8952ca3bbf4f65b4320da6e2d88b74c0d76e4665"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfafcb4dbd18487e06d631e71c6e03dc614c94c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfafcb4dbd18487e06d631e71c6e03dc614c94c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfafcb4dbd18487e06d631e71c6e03dc614c94c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfafcb4dbd18487e06d631e71c6e03dc614c94c4/comments", "author": null, "committer": null, "parents": [{"sha": "ed3614cd74220812b91a1f6c96f4a76f1671418d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3614cd74220812b91a1f6c96f4a76f1671418d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3614cd74220812b91a1f6c96f4a76f1671418d"}], "stats": {"total": 107, "additions": 84, "deletions": 23}, "files": [{"sha": "cbd335ba1c8bde20e33fe6bb928af32ff8529c10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfafcb4dbd18487e06d631e71c6e03dc614c94c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfafcb4dbd18487e06d631e71c6e03dc614c94c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfafcb4dbd18487e06d631e71c6e03dc614c94c4", "patch": "@@ -1,4 +1,15 @@\n-2000-01-27 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+2000-01-29 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\n+        * c4x.c (c4x_output_ascii): Restrict line length of output when TI\n+\tsyntax is used.\n+\t(c4x_function_prologue): Use regnames intead of float_reg_names when\n+\tTI syntax is used.\n+\t(c4x_function_epilogue): Likewise.\n+\t(c4x_print_operand): Likewise.\n+\t* c4x.h (HOST_WIDE_INT_PRINT_HEX): Redefine.\n+\t* c4x.md (set_high): Disable for TARGET_TI.\n+\n+2000-01-29 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n \n \t* c4x.h (PREFERRED_RELOAD_CLASS): Change to restrict the reloading\n \tof framepointer + constant to ADDR_REGS class."}, {"sha": "5072d234a539b6035fa59857f773fa9a95935a0c", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfafcb4dbd18487e06d631e71c6e03dc614c94c4/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfafcb4dbd18487e06d631e71c6e03dc614c94c4/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=dfafcb4dbd18487e06d631e71c6e03dc614c94c4", "patch": "@@ -266,25 +266,26 @@ c4x_output_ascii (stream, ptr, len)\n      int len;\n {\n   char sbuf[C4X_ASCII_LIMIT + 1];\n-  int s, first, onlys;\n+  int s, l, special, first, onlys;\n \n   if (len)\n     {\n       fprintf (stream, \"\\t.byte\\t\");\n       first = 1;\n     }\n \n-  for (s = 0; len > 0; --len, ++ptr)\n+  for (s = l = 0; len > 0; --len, ++ptr)\n     {\n       onlys = 0;\n \n       /* Escape \" and \\ with a \\\".  */\n-      if (*ptr == '\\\"' || *ptr == '\\\\')\n-\tsbuf[s++] = '\\\\';\n+      special = *ptr == '\\\"' || *ptr == '\\\\';\n \n       /* If printable - add to buff.  */\n-      if (*ptr >= 0x20 && *ptr < 0x7f)\n+      if ((! TARGET_TI || ! special) && *ptr >= 0x20 && *ptr < 0x7f)\n \t{\n+\t  if (special)\n+\t    sbuf[s++] = '\\\\';\n \t  sbuf[s++] = *ptr;\n \t  if (s < C4X_ASCII_LIMIT - 1)\n \t    continue;\n@@ -295,10 +296,21 @@ c4x_output_ascii (stream, ptr, len)\n \t  if (first)\n \t    first = 0;\n \t  else\n-\t    fputc (',', stream);\n+\t    {\n+\t      fputc (',', stream);\n+\t      l++;\n+\t    }\n \n \t  sbuf[s] = 0;\n \t  fprintf (stream, \"\\\"%s\\\"\", sbuf);\n+\t  l += s + 2;\n+\t  if (TARGET_TI && l >= 80 && len > 1)\n+\t    {\n+\t      fprintf (stream, \"\\n\\t.byte\\t\");\n+\t      first = 1;\n+\t      l = 0;\n+\t    }\n+\t\n \t  s = 0;\n \t}\n       if (onlys)\n@@ -307,9 +319,19 @@ c4x_output_ascii (stream, ptr, len)\n       if (first)\n \tfirst = 0;\n       else\n-\tfputc (',', stream);\n+\t{\n+\t  fputc (',', stream);\n+\t  l++;\n+\t}\n \n       fprintf (stream, \"%d\", *ptr);\n+      l += 3;\n+      if (TARGET_TI && l >= 80 && len > 1)\n+\t{\n+\t  fprintf (stream, \"\\n\\t.byte\\t\");\n+\t  first = 1;\n+\t  l = 0;\n+\t}\n     }\n   if (s)\n     {\n@@ -761,7 +783,9 @@ c4x_function_prologue (file, size)\n \t    {\n \t      fprintf (file, \"\\tpush\\t%s\\n\", reg_names[regno]);\n \t      if (IS_EXT_REGNO (regno))\t/* Save 32MSB of R0--R11.  */\n-\t\tfprintf (file, \"\\tpushf\\t%s\\n\", float_reg_names[regno]);\n+\t\tfprintf (file, \"\\tpushf\\t%s\\n\",\n+\t\t\t TARGET_TI ? reg_names[regno]\n+\t\t\t\t   : float_reg_names[regno]);\n \t    }\n \t}\n       /* We need to clear the repeat mode flag if the ISR is\n@@ -840,7 +864,9 @@ c4x_function_prologue (file, size)\n \t\t  /* R6 and R7 are saved as floating point.  */\n \t\t  if (TARGET_PRESERVE_FLOAT)\n \t\t    fprintf (file, \"\\tpush\\t%s\\n\", reg_names[regno]);\n-\t\t  fprintf (file, \"\\tpushf\\t%s\\n\", float_reg_names[regno]);\n+\t\t  fprintf (file, \"\\tpushf\\t%s\\n\",\n+\t\t\t   TARGET_TI ? reg_names[regno]\n+\t\t\t\t     : float_reg_names[regno]);\n \t\t}\n \t      else if ((! dont_push_ar3) || (regno != AR3_REGNO))\n \t\t{\n@@ -894,7 +920,9 @@ c4x_function_epilogue (file, size)\n \t  if (! c4x_isr_reg_used_p (regno))\n \t    continue;\n \t  if (IS_EXT_REGNO (regno))\n-\t    fprintf (file, \"\\tpopf\\t%s\\n\", float_reg_names[regno]);\n+\t    fprintf (file, \"\\tpopf\\t%s\\n\",\n+\t\t     TARGET_TI ? reg_names[regno]\n+\t\t\t       : float_reg_names[regno]);\n \t  fprintf (file, \"\\tpop\\t%s\\n\", reg_names[regno]);\n \t}\n       if (size)\n@@ -991,7 +1019,9 @@ c4x_function_epilogue (file, size)\n \t      /* R6 and R7 are saved as floating point.  */\n \t      if ((regno == R6_REGNO) || (regno == R7_REGNO))\n \t\t{\n-\t\t  fprintf (file, \"\\tpopf\\t%s\\n\", float_reg_names[regno]);\n+\t\t  fprintf (file, \"\\tpopf\\t%s\\n\",\n+\t\t           TARGET_TI ? reg_names[regno]\n+\t\t\t             : float_reg_names[regno]);\n \t\t  if (TARGET_PRESERVE_FLOAT)\n \t\t    {\n \t              restore_count--;\n@@ -1745,7 +1775,7 @@ c4x_print_operand (file, op, letter)\n   switch (letter)\n     {\n     case 'A':\t\t\t/* Direct address.  */\n-      if (code == CONST_INT || code == SYMBOL_REF)\n+      if (code == CONST_INT || code == SYMBOL_REF || code == CONST)\n \tasm_fprintf (file, \"@\");\n       break;\n \n@@ -1779,7 +1809,7 @@ c4x_print_operand (file, op, letter)\n \t  op1 = XEXP (XEXP (op, 0), 1);\n           if (GET_CODE(op1) == CONST_INT || GET_CODE(op1) == SYMBOL_REF)\n \t    {\n-\t      asm_fprintf (file, \"\\t%s\\t\", TARGET_C3X ? \"ldp\" : \"ldpk\");\n+\t      asm_fprintf (file, \"\\t%s\\t@\", TARGET_C3X ? \"ldp\" : \"ldpk\");\n \t      output_address (XEXP (adj_offsettable_operand (op, 1), 0));\n \t      asm_fprintf (file, \"\\n\");\n \t    }\n@@ -1792,7 +1822,7 @@ c4x_print_operand (file, op, letter)\n \t  && (GET_CODE (XEXP (op, 0)) == CONST\n \t      || GET_CODE (XEXP (op, 0)) == SYMBOL_REF))\n \t{\n-\t  asm_fprintf (file, \"%s\\t\", TARGET_C3X ? \"ldp\" : \"ldpk\");\n+\t  asm_fprintf (file, \"%s\\t@\", TARGET_C3X ? \"ldp\" : \"ldpk\");\n           output_address (XEXP (op, 0));\n \t  asm_fprintf (file, \"\\n\\t\");\n \t}\n@@ -1824,7 +1854,8 @@ c4x_print_operand (file, op, letter)\n   switch (code)\n     {\n     case REG:\n-      if (GET_MODE_CLASS (GET_MODE (op)) == MODE_FLOAT)\n+      if (GET_MODE_CLASS (GET_MODE (op)) == MODE_FLOAT\n+\t  && ! TARGET_TI)\n \tfprintf (file, \"%s\", float_reg_names[REGNO (op)]);\n       else\n \tfprintf (file, \"%s\", reg_names[REGNO (op)]);"}, {"sha": "8c8e9818fcc16cea01bd41b609b976536063a324", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfafcb4dbd18487e06d631e71c6e03dc614c94c4/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfafcb4dbd18487e06d631e71c6e03dc614c94c4/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=dfafcb4dbd18487e06d631e71c6e03dc614c94c4", "patch": "@@ -21,6 +21,8 @@\n    the Free Software Foundation, 59 Temple Place - Suite 330,\n    Boston, MA 02111-1307, USA.  */\n \n+#include \"hwint.h\"\n+\n /* RUN-TIME TARGET SPECIFICATION.  */\n \n #define C4x   1\n@@ -2056,6 +2058,21 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     const_section ();\t\t\t\t\t\t\t\\\n }\n \n+/* The TI assembler wants to have hex numbers this way.  */\n+\n+#undef HOST_WIDE_INT_PRINT_HEX\n+#ifndef HOST_WIDE_INT_PRINT_HEX\n+# if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n+#  define HOST_WIDE_INT_PRINT_HEX \"0%xh\"\n+# else\n+#  if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n+#   define HOST_WIDE_INT_PRINT_HEX \"0%lxh\"\n+#  else\n+#   define HOST_WIDE_INT_PRINT_HEX \"0%llxh\"\n+#  endif\n+# endif\n+#endif /* ! HOST_WIDE_INT_PRINT_HEX */\n+\n /* A C statement or statements to switch to the appropriate\n    section for output of RTX in mode MODE.  RTX is some kind\n    of constant in RTL.  The argument MODE is redundant except"}, {"sha": "07608c1a6fd46df572eb1ed7d6aa6a266a6ca941", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfafcb4dbd18487e06d631e71c6e03dc614c94c4/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfafcb4dbd18487e06d631e71c6e03dc614c94c4/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=dfafcb4dbd18487e06d631e71c6e03dc614c94c4", "patch": "@@ -1109,22 +1109,22 @@\n (define_insn \"set_high\"\n   [(set (match_operand:QI 0 \"std_reg_operand\" \"=c\")\n         (high:QI (match_operand:QI 1 \"symbolic_address_operand\" \"\")))]\n-  \"! TARGET_C3X \"\n+  \"! TARGET_C3X && ! TARGET_TI\"\n   \"ldhi\\\\t^%H1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n (define_insn \"set_lo_sum\"\n   [(set (match_operand:QI 0 \"std_reg_operand\" \"=c\")\n         (lo_sum:QI (match_dup 0)\n                    (match_operand:QI 1 \"symbolic_address_operand\" \"\")))]\n-  \"\"\n+  \"! TARGET_TI\"\n   \"or\\\\t#%H1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n (define_split\n   [(set (match_operand:QI 0 \"std_reg_operand\" \"\")\n         (match_operand:QI 1 \"symbolic_address_operand\" \"\"))]\n-  \"! TARGET_C3X\"\n+  \"! TARGET_C3X && ! TARGET_TI\"\n   [(set (match_dup 0) (high:QI (match_dup 1)))\n    (set (match_dup 0) (lo_sum:QI (match_dup 0) (match_dup 1)))]\n   \"\")\n@@ -1251,8 +1251,9 @@\n   [(set (match_operand:QI 0 \"reg_operand\" \"\")\n         (match_operand:QI 1 \"symbolic_address_operand\" \"\"))]\n   \"! TARGET_SMALL \n-   && (TARGET_C3X || (reload_completed\n-                      && ! std_reg_operand (operands[0], QImode)))\"\n+   && (TARGET_C3X || TARGET_TI\n+       || (reload_completed\n+           && ! std_reg_operand (operands[0], QImode)))\"\n   [(set (match_dup 2) (high:QI (match_dup 3)))\n    (set (match_dup 0) (match_dup 4))\n    (use (match_dup 1))]\n@@ -1273,8 +1274,9 @@\n   [(set (match_operand:QI 0 \"reg_operand\" \"\")\n         (match_operand:QI 1 \"symbolic_address_operand\" \"\"))]\n   \"TARGET_SMALL\n-   && (TARGET_C3X || (reload_completed\n-                      && ! std_reg_operand (operands[0], QImode)))\"\n+   && (TARGET_C3X || TARGET_TI\n+       || (reload_completed\n+           && ! std_reg_operand (operands[0], QImode)))\"\n   [(set (match_dup 0) (match_dup 2))\n    (use (match_dup 1))]\n   \""}]}