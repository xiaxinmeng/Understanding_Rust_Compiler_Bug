{"sha": "fced594b313ddfb941913b2f59b10ce3514faaf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlZDU5NGIzMTNkZGZiOTQxOTEzYjJmNTliMTBjZTM1MTRmYWFmNg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-07T17:42:58Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-07T17:44:20Z"}, "message": "d: Merge upstream dmd 108ca1bcd.\n\nRenames OutBuffer::peekString to OutBuffer::peekChars, and\nOutBuffer::extractString to OutBuffer::extractChars.  All callers have\nbeen updated as appropriate.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11247\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 108ca1bcd.\n\t* d-diagnostic.cc (expand_d_format): Adjust to use extractChars().\n\t* d-frontend.cc (Loc::toChars): Likewise.\n\t* d-lang.cc (deps_write): Likewise.\n\t(d_parse_file): Likewise.\n\t* decl.cc (d_mangle_decl): Likewise.\n\t* intrinsics.cc (maybe_set_intrinsic): Likewise.", "tree": {"sha": "95a78b41b7a8d4523a5ca102d93487e5b90f3471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95a78b41b7a8d4523a5ca102d93487e5b90f3471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fced594b313ddfb941913b2f59b10ce3514faaf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fced594b313ddfb941913b2f59b10ce3514faaf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fced594b313ddfb941913b2f59b10ce3514faaf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fced594b313ddfb941913b2f59b10ce3514faaf6/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3a2ba10b272fd9581560604284da2a6283bcde0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a2ba10b272fd9581560604284da2a6283bcde0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a2ba10b272fd9581560604284da2a6283bcde0"}], "stats": {"total": 150, "additions": 75, "deletions": 75}, "files": [{"sha": "bf10b11d600f4d43b2e7a79a18ace0348fbb231d", "filename": "gcc/d/d-diagnostic.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fd-diagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fd-diagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-diagnostic.cc?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -110,7 +110,7 @@ expand_d_format (const char *format)\n     }\n \n   gcc_assert (!inbacktick);\n-  return buf.extractString ();\n+  return buf.extractChars ();\n }\n \n /* Helper routine for all error routines.  Reports a diagnostic specified by"}, {"sha": "90cf74a0f61c5a300ebb2b2753677545684b888d", "filename": "gcc/d/d-frontend.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fd-frontend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fd-frontend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-frontend.cc?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -122,7 +122,7 @@ Loc::toChars (void) const\n \tbuf.printf (\":%u\", this->charnum);\n     }\n \n-  return buf.extractString ();\n+  return buf.extractChars ();\n }\n \n bool"}, {"sha": "2bc0def02c34b0953e6f6bd51eb3cd34a2f777a6", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -163,7 +163,7 @@ deps_write (Module *module, OutBuffer *buffer, unsigned colmax = 72)\n   /* Write out make target module name.  */\n   if (d_option.deps_target)\n     {\n-      buffer->writestring (d_option.deps_target->extractString ());\n+      buffer->writestring (d_option.deps_target->extractChars ());\n       column = d_option.deps_target->offset;\n     }\n   else\n@@ -1262,7 +1262,7 @@ d_parse_file (void)\n \t to make the middle-end fully deterministic.  */\n       OutBuffer buf;\n       mangleToBuffer (Module::rootModule, &buf);\n-      first_global_object_name = buf.extractString ();\n+      first_global_object_name = buf.extractChars ();\n     }\n \n   /* Make dependencies.  */"}, {"sha": "a2a21428a265661baff5f9c52c2a95d9c05e732d", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -68,7 +68,7 @@ d_mangle_decl (Dsymbol *decl)\n     {\n       OutBuffer buf;\n       mangleToBuffer (decl, &buf);\n-      return buf.extractString ();\n+      return buf.extractChars ();\n     }\n }\n "}, {"sha": "96d579b90fc71de870433415db0fd4b25ac102f2", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -1,4 +1,4 @@\n-b0df0e982cc44bd09a9061acfc8160f29767334a\n+108ca1bcde2096a2c6173c567a204d749538dd74\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "3beba9a206b7cbc08bfde6d08f4ee6ef312fcab8", "filename": "gcc/d/dmd/arrayop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Farrayop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Farrayop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Farrayop.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -203,7 +203,7 @@ Expression *arrayOp(BinExp *e, Scope *sc)\n      */\n     buf.writestring(e->type->toBasetype()->nextOf()->toBasetype()->mutableOf()->deco);\n \n-    char *name = buf.peekString();\n+    char *name = buf.peekChars();\n     Identifier *ident = Identifier::idPool(name);\n \n     FuncDeclaration **pFd = (FuncDeclaration **)dmd_aaGet(&arrayfuncs, (void *)ident);"}, {"sha": "81b2da11e5634a76fc9bcdc6100cf48fc682daaf", "filename": "gcc/d/dmd/attrib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fattrib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fattrib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fattrib.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -654,7 +654,7 @@ const char *ProtDeclaration::toPrettyChars(bool)\n     buf.writeByte('\\'');\n     protectionToBuffer(&buf, protection);\n     buf.writeByte('\\'');\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n /********************************* AlignDeclaration ****************************/\n@@ -1132,7 +1132,7 @@ void PragmaDeclaration::semantic(Scope *sc)\n                 if (args->length)\n                     buf.writeByte(')');\n             }\n-            message(\"pragma    %s\", buf.peekString());\n+            message(\"pragma    %s\", buf.peekChars());\n         }\n         goto Lnodecl;\n     }"}, {"sha": "b361d37f75d302b2aacb9767ef29040439f70ab6", "filename": "gcc/d/dmd/cppmangle.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fcppmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fcppmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcppmangle.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -632,7 +632,7 @@ class CppMangleVisitor : public Visitor\n                  *          ::= <prefix> <data-member-prefix>\n                  */\n                 prefix_name(p);\n-                //printf(\"p: %s\\n\", buf.peekString());\n+                //printf(\"p: %s\\n\", buf.peekChars());\n \n                 if (d->isCtorDeclaration())\n                 {\n@@ -1110,7 +1110,7 @@ class CppMangleVisitor : public Visitor\n     {\n         buf->writestring(\"_ZTI\");\n         cpp_mangle_name(s, false);\n-        return buf->extractString();\n+        return buf->extractChars();\n     }\n };\n \n@@ -1120,7 +1120,7 @@ const char *toCppMangleItanium(Dsymbol *s)\n     OutBuffer buf;\n     CppMangleVisitor v(&buf, s->loc);\n     v.mangleOf(s);\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n const char *cppTypeInfoMangleItanium(Dsymbol *s)\n@@ -1130,5 +1130,5 @@ const char *cppTypeInfoMangleItanium(Dsymbol *s)\n     buf.writestring(\"_ZTI\");    // \"TI\" means typeinfo structure\n     CppMangleVisitor v(&buf, s->loc);\n     v.cpp_mangle_name(s, false);\n-    return buf.extractString();\n+    return buf.extractChars();\n }"}, {"sha": "aa48195794b4040b720600b56ee0509a7f57eeb7", "filename": "gcc/d/dmd/declaration.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdeclaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdeclaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -1119,7 +1119,7 @@ void VarDeclaration::semantic(Scope *sc)\n \n             OutBuffer buf;\n             buf.printf(\"__%s_field_%llu\", ident->toChars(), (ulonglong)i);\n-            const char *name = buf.extractString();\n+            const char *name = buf.extractChars();\n             Identifier *id = Identifier::idPool(name);\n \n             Initializer *ti;\n@@ -1190,7 +1190,7 @@ void VarDeclaration::semantic(Scope *sc)\n         {\n             OutBuffer buf;\n             stcToBuffer(&buf, stc);\n-            error(\"cannot be %s\", buf.peekString());\n+            error(\"cannot be %s\", buf.peekChars());\n         }\n         storage_class &= ~stc;  // strip off\n     }\n@@ -1202,7 +1202,7 @@ void VarDeclaration::semantic(Scope *sc)\n         {\n             OutBuffer buf;\n             stcToBuffer(&buf, stc);\n-            error(\"cannot be 'scope' and '%s'\", buf.peekString());\n+            error(\"cannot be 'scope' and '%s'\", buf.peekChars());\n         }\n         else if (isMember())\n         {\n@@ -2246,7 +2246,7 @@ const char *TypeInfoDeclaration::toChars()\n     buf.writestring(\"typeid(\");\n     buf.writestring(tinfo->toChars());\n     buf.writeByte(')');\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n /***************************** TypeInfoConstDeclaration **********************/"}, {"sha": "1c564b70e685ddc2459914a5b976766b5991a51e", "filename": "gcc/d/dmd/dmangle.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmangle.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -307,7 +307,7 @@ class Mangler : public Visitor\n         buf2.reserve(32);\n         Mangler v(&buf2);\n         v.paramsToDecoBuffer(t->arguments);\n-        const char *s = buf2.peekString();\n+        const char *s = buf2.peekChars();\n         int len = (int)buf2.offset;\n         buf->printf(\"%d%.*s\", len, len, s);\n     }\n@@ -839,7 +839,7 @@ const char *mangleExact(FuncDeclaration *fd)\n         OutBuffer buf;\n         Mangler v(&buf);\n         v.mangleExact(fd);\n-        fd->mangleString = buf.extractString();\n+        fd->mangleString = buf.extractChars();\n     }\n     return fd->mangleString;\n }"}, {"sha": "f9f59a20224b340a490bb97298d6fa5916b63994", "filename": "gcc/d/dmd/dmodule.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmodule.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -202,7 +202,7 @@ static void checkModFileAlias(OutBuffer *buf, OutBuffer *dotmods,\n         const char *m = (*ms)[j];\n         const char *q = strchr(m, '=');\n         assert(q);\n-        if (dotmods->offset <= (size_t)(q - m) && memcmp(dotmods->peekString(), m, q - m) == 0)\n+        if (dotmods->offset <= (size_t)(q - m) && memcmp(dotmods->peekChars(), m, q - m) == 0)\n         {\n             buf->reset();\n             size_t qlen = strlen(q + 1);\n@@ -283,7 +283,7 @@ Module *Module::load(Loc loc, Identifiers *packages, Identifier *ident)\n             }\n         }\n         buf.printf(\"%s\\t(%s)\", ident->toChars(), m->srcfile->toChars());\n-        message(\"import    %s\", buf.peekString());\n+        message(\"import    %s\", buf.peekChars());\n     }\n \n     m = m->parse();\n@@ -1129,7 +1129,7 @@ const char *ModuleDeclaration::toChars()\n         }\n     }\n     buf.writestring(id->toChars());\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n /* =========================== Package ===================== */"}, {"sha": "afe5c4bc00b67de76f4cd90eb531cde61b24464b", "filename": "gcc/d/dmd/doc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdoc.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -622,7 +622,7 @@ static void emitAnchor(OutBuffer *buf, Dsymbol *s, Scope *sc)\n     {\n         OutBuffer anc;\n         emitAnchorName(&anc, s, skipNonQualScopes(sc));\n-        ident = Identifier::idPool(anc.peekString());\n+        ident = Identifier::idPool(anc.peekChars());\n     }\n     size_t *count = (size_t*)dmd_aaGet(&sc->anchorCounts, (void *)ident);\n     TemplateDeclaration *td = getEponymousParent(s);"}, {"sha": "d7460a07d7b4a78fd89abb7c6ed48c932fec15a6", "filename": "gcc/d/dmd/dscope.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdscope.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdscope.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdscope.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -661,7 +661,7 @@ void Scope::deprecation10378(Loc loc, Dsymbol *sold, Dsymbol *snew)\n     else\n         buf.writestring(\"nothing\");\n \n-    deprecation(loc, \"%s\", buf.peekString());\n+    deprecation(loc, \"%s\", buf.peekChars());\n }\n \n Dsymbol *Scope::search_correct(Identifier *ident)"}, {"sha": "5ec9a4b609c7d21ad8822adea3d616752e44f2d0", "filename": "gcc/d/dmd/dtemplate.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdtemplate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdtemplate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtemplate.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -2765,7 +2765,7 @@ const char *TemplateDeclaration::toChars()\n         ::toCBuffer(constraint, &buf, &hgs);\n         buf.writeByte(')');\n     }\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n Prot TemplateDeclaration::prot()\n@@ -7571,7 +7571,7 @@ Identifier *TemplateInstance::genIdent(Objects *args)\n \n             OutBuffer bufsa;\n             mangleToBuffer(sa, &bufsa);\n-            const char *s = bufsa.extractString();\n+            const char *s = bufsa.extractChars();\n \n             /* Bugzilla 3043: if the first character of s is a digit this\n              * causes ambiguity issues because the digits of the two numbers are adjacent.\n@@ -7592,7 +7592,7 @@ Identifier *TemplateInstance::genIdent(Objects *args)\n             assert(0);\n     }\n     buf.writeByte('Z');\n-    id = buf.peekString();\n+    id = buf.peekChars();\n     //printf(\"\\tgenIdent = %s\\n\", id);\n     return Identifier::idPool(id);\n }\n@@ -7860,14 +7860,14 @@ const char *TemplateInstance::toChars()\n {\n     OutBuffer buf;\n     toCBufferInstance(this, &buf);\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n const char *TemplateInstance::toPrettyCharsHelper()\n {\n     OutBuffer buf;\n     toCBufferInstance(this, &buf, true);\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n /*************************************\n@@ -8599,5 +8599,5 @@ const char *TemplateMixin::toChars()\n {\n     OutBuffer buf;\n     toCBufferInstance(this, &buf);\n-    return buf.extractString();\n+    return buf.extractChars();\n }"}, {"sha": "f88fca561c5448e5be3a2c338f3c90e525e7c84c", "filename": "gcc/d/dmd/dversion.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fdversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdversion.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -47,7 +47,7 @@ const char *DebugSymbol::toChars()\n     {\n         OutBuffer buf;\n         buf.printf(\"%d\", level);\n-        return buf.extractString();\n+        return buf.extractChars();\n     }\n }\n \n@@ -137,7 +137,7 @@ const char *VersionSymbol::toChars()\n     {\n         OutBuffer buf;\n         buf.printf(\"%d\", level);\n-        return buf.extractString();\n+        return buf.extractChars();\n     }\n }\n "}, {"sha": "d15081763dfe082b29872b6099ccafeee4987f68", "filename": "gcc/d/dmd/expression.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fexpression.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fexpression.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -2058,7 +2058,7 @@ const char *Expression::toChars()\n     OutBuffer buf;\n     HdrGenState hgs;\n     toCBuffer(this, &buf, &hgs);\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n void Expression::error(const char *format, ...) const\n@@ -2557,7 +2557,7 @@ bool Expression::checkPurity(Scope *sc, VarDeclaration *v)\n                     MODMatchToBuffer(&ffbuf, ff->type->mod, v->type->mod);\n                     MODMatchToBuffer(&vbuf, v->type->mod, ff->type->mod);\n                     error(\"%s%s '%s' cannot access %sdata '%s'\",\n-                        ffbuf.peekString(), ff->kind(), ff->toPrettyChars(), vbuf.peekString(), v->toChars());\n+                        ffbuf.peekChars(), ff->kind(), ff->toPrettyChars(), vbuf.peekChars(), v->toChars());\n                     err = true;\n                     break;\n                 }\n@@ -6754,7 +6754,7 @@ Expression *PrettyFuncInitExp::resolveLoc(Loc loc, Scope *sc)\n         const char *funcStr = fd->Dsymbol::toPrettyChars();\n         OutBuffer buf;\n         functionToBufferWithIdent((TypeFunction *)fd->type, &buf, funcStr);\n-        s = buf.extractString();\n+        s = buf.extractChars();\n     }\n     else\n     {"}, {"sha": "25f4bd51a598c573b6bf3d9d1bb422f197b8592b", "filename": "gcc/d/dmd/expressionsem.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fexpressionsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -2678,7 +2678,7 @@ class ExpressionSemanticVisitor : public Visitor\n                 MODMatchToBuffer(&thisBuf, e->e1->type->mod, tf->mod);\n                 MODMatchToBuffer(&funcBuf, tf->mod, e->e1->type->mod);\n                 e->error(\"%smethod %s is not callable using a %s%s\",\n-                    funcBuf.peekString(), f->toPrettyChars(), thisBuf.peekString(), e->e1->toChars());\n+                    funcBuf.peekChars(), f->toPrettyChars(), thisBuf.peekChars(), e->e1->toChars());\n                 return setError();\n             }\n         }\n@@ -3420,7 +3420,7 @@ class ExpressionSemanticVisitor : public Visitor\n                 //printf(\"tf = %s, args = %s\\n\", tf->deco, (*exp->arguments)[0]->type->deco);\n                 ::error(exp->loc, \"%s %s %s is not callable using argument types %s\",\n                         p, exp->e1->toChars(), parametersTypeToChars(tf->parameterList),\n-                        buf.peekString());\n+                        buf.peekChars());\n \n                 return setError();\n             }\n@@ -3493,7 +3493,7 @@ class ExpressionSemanticVisitor : public Visitor\n                     //printf(\"tf = %s, args = %s\\n\", tf->deco, (*exp->arguments)[0]->type->deco);\n                     ::error(exp->loc, \"%s %s is not callable using argument types %s\",\n                             exp->e1->toChars(), parametersTypeToChars(tf->parameterList),\n-                            buf.peekString());\n+                            buf.peekChars());\n \n                     exp->f = NULL;\n                 }\n@@ -8250,7 +8250,7 @@ Expression *semanticX(DotIdExp *exp, Scope *sc)\n                     }\n                     OutBuffer buf;\n                     mangleToBuffer(ds, &buf);\n-                    const char *s = buf.extractString();\n+                    const char *s = buf.extractChars();\n                     Expression *e = new StringExp(exp->loc, const_cast<char*>(s), strlen(s));\n                     e = semantic(e, sc);\n                     return e;"}, {"sha": "276303a285103aa7e8044e7e08937ee2cafbd613", "filename": "gcc/d/dmd/func.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Ffunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Ffunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -618,7 +618,7 @@ void FuncDeclaration::semantic(Scope *sc)\n         {\n             OutBuffer buf;\n             MODtoBuffer(&buf, tf->mod);\n-            error(\"without 'this' cannot be %s\", buf.peekString());\n+            error(\"without 'this' cannot be %s\", buf.peekChars());\n             tf->mod = 0;    // remove qualifiers\n         }\n \n@@ -3258,7 +3258,7 @@ FuncDeclaration *FuncDeclaration::overloadModMatch(Loc loc, Type *tthis, bool &h\n             MODMatchToBuffer(&thisBuf, tthis->mod, tf->mod);\n             MODMatchToBuffer(&funcBuf, tf->mod, tthis->mod);\n             ::error(loc, \"%smethod %s is not callable using a %sobject\",\n-                funcBuf.peekString(), this->toPrettyChars(), thisBuf.peekString());\n+                funcBuf.peekChars(), this->toPrettyChars(), thisBuf.peekChars());\n         }\n     }\n \n@@ -3551,7 +3551,7 @@ FuncDeclaration *resolveFuncCall(Loc loc, Scope *sc, Dsymbol *s,\n         {\n             ::error(loc, \"%s %s.%s cannot deduce function from argument types !(%s)%s, candidates are:\",\n                     td->kind(), td->parent->toPrettyChars(), td->ident->toChars(),\n-                    tiargsBuf.peekString(), fargsBuf.peekString());\n+                    tiargsBuf.peekChars(), fargsBuf.peekChars());\n \n             // Display candidate templates (even if there are no multiple overloads)\n             TemplateCandidateWalker tcw;\n@@ -3562,7 +3562,7 @@ FuncDeclaration *resolveFuncCall(Loc loc, Scope *sc, Dsymbol *s,\n         else if (od)\n         {\n             ::error(loc, \"none of the overloads of '%s' are callable using argument types !(%s)%s\",\n-                od->ident->toChars(), tiargsBuf.peekString(), fargsBuf.peekString());\n+                od->ident->toChars(), tiargsBuf.peekChars(), fargsBuf.peekChars());\n         }\n         else\n         {\n@@ -3577,22 +3577,22 @@ FuncDeclaration *resolveFuncCall(Loc loc, Scope *sc, Dsymbol *s,\n                 MODMatchToBuffer(&funcBuf, tf->mod, tthis->mod);\n                 if (hasOverloads)\n                     ::error(loc, \"none of the overloads of '%s' are callable using a %sobject, candidates are:\",\n-                        fd->ident->toChars(), thisBuf.peekString());\n+                        fd->ident->toChars(), thisBuf.peekChars());\n                 else\n                     ::error(loc, \"%smethod %s is not callable using a %sobject\",\n-                        funcBuf.peekString(), fd->toPrettyChars(), thisBuf.peekString());\n+                        funcBuf.peekChars(), fd->toPrettyChars(), thisBuf.peekChars());\n             }\n             else\n             {\n                 //printf(\"tf = %s, args = %s\\n\", tf->deco, (*fargs)[0]->type->deco);\n                 if (hasOverloads)\n                     ::error(loc, \"none of the overloads of '%s' are callable using argument types %s, candidates are:\",\n-                            fd->ident->toChars(), fargsBuf.peekString());\n+                            fd->ident->toChars(), fargsBuf.peekChars());\n                 else\n                     fd->error(loc, \"%s%s is not callable using argument types %s\",\n                         parametersTypeToChars(tf->parameterList),\n                         tf->modToChars(),\n-                        fargsBuf.peekString());\n+                        fargsBuf.peekChars());\n             }\n \n             // Display candidate functions\n@@ -3614,7 +3614,7 @@ FuncDeclaration *resolveFuncCall(Loc loc, Scope *sc, Dsymbol *s,\n         ::error(loc, \"%s.%s called with argument types %s matches both:\\n\"\n                      \"%s:     %s%s\\nand:\\n%s:     %s%s\",\n                 s->parent->toPrettyChars(), s->ident->toChars(),\n-                fargsBuf.peekString(),\n+                fargsBuf.peekChars(),\n                 m.lastf->loc.toChars(), m.lastf->toPrettyChars(), lastprms,\n                 m.nextf->loc.toChars(), m.nextf->toPrettyChars(), nextprms);\n     }\n@@ -3725,7 +3725,7 @@ const char *FuncDeclaration::toFullSignature()\n {\n     OutBuffer buf;\n     functionToBufferWithIdent(type->toTypeFunction(), &buf, toChars());\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n bool FuncDeclaration::isMain()\n@@ -5421,7 +5421,7 @@ static Identifier *unitTestId(Loc loc)\n {\n     OutBuffer buf;\n     buf.printf(\"__unittestL%u_\", loc.linnum);\n-    return Identifier::generateId(buf.peekString());\n+    return Identifier::generateId(buf.peekChars());\n }\n \n UnitTestDeclaration::UnitTestDeclaration(Loc loc, Loc endloc, StorageClass stc, char *codedoc)"}, {"sha": "2c88ef597c6d25fca57f2fcc6aec0a1aca0d1edd", "filename": "gcc/d/dmd/hdrgen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fhdrgen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fhdrgen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fhdrgen.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -3475,5 +3475,5 @@ const char *parametersTypeToChars(ParameterList pl)\n     HdrGenState hgs;\n     PrettyPrintVisitor v(&buf, &hgs);\n     v.parametersToBuffer(pl.parameters, pl.varargs);\n-    return buf.extractString();\n+    return buf.extractChars();\n }"}, {"sha": "1bd453fc53c222133966d299d909527c32f1031f", "filename": "gcc/d/dmd/identifier.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fidentifier.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fidentifier.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fidentifier.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -110,7 +110,7 @@ Identifier *Identifier::generateId(const char *prefix, size_t i)\n     buf.writestring(prefix);\n     buf.printf(\"%llu\", (ulonglong)i);\n \n-    char *id = buf.peekString();\n+    char *id = buf.peekChars();\n     return idPool(id);\n }\n "}, {"sha": "28b4187b2e6c0e224d2b65179402e521cbe3c32c", "filename": "gcc/d/dmd/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Finit.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -53,7 +53,7 @@ const char *Initializer::toChars()\n     OutBuffer buf;\n     HdrGenState hgs;\n     ::toCBuffer(this, &buf, &hgs);\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n /********************************** ErrorInitializer ***************************/"}, {"sha": "30fd54da1853ba5f64c734f10903a0b0254e68a6", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -1455,7 +1455,7 @@ char *MODtoChars(MOD mod)\n     OutBuffer buf;\n     buf.reserve(16);\n     MODtoBuffer(&buf, mod);\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n /********************************\n@@ -1470,7 +1470,7 @@ const char *Type::toChars()\n     hgs.fullQual = (ty == Tclass && !mod);\n \n     ::toCBuffer(this, &buf, NULL, &hgs);\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n char *Type::toPrettyChars(bool QualifyTypes)\n@@ -1481,7 +1481,7 @@ char *Type::toPrettyChars(bool QualifyTypes)\n     hgs.fullQual = QualifyTypes;\n \n     ::toCBuffer(this, &buf, NULL, &hgs);\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n /*********************************\n@@ -1504,7 +1504,7 @@ char *Type::modToChars()\n     OutBuffer buf;\n     buf.reserve(16);\n     modToBuffer(&buf);\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n /** For each active modifier (MODconst, MODimmutable, etc) call fp with a\n@@ -5715,7 +5715,7 @@ Type *TypeFunction::semantic(Loc loc, Scope *sc)\n                             OutBuffer buf2;  stcToBuffer(&buf2, stc2);\n \n                             error(loc, \"incompatible parameter storage classes '%s' and '%s'\",\n-                                      buf1.peekString(), buf2.peekString());\n+                                      buf1.peekChars(), buf2.peekChars());\n                             errors = true;\n                             stc = stc1 | (stc & ~(STCref | STCout | STClazy));\n                         }"}, {"sha": "38da580848445855e3da73246e0511997862d8be", "filename": "gcc/d/dmd/parse.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -803,7 +803,7 @@ Dsymbols *Parser::parseDeclDefs(int once, Dsymbol **pLastDecl, PrefixAttributes\n                     if (e)\n                     {\n                         buf1.printf(\"(%s)\", e->toChars());\n-                        s1 = buf1.peekString();\n+                        s1 = buf1.peekChars();\n                     }\n                     error(\"redundant alignment attribute align%s\", s1);\n                 }\n@@ -977,9 +977,9 @@ StorageClass Parser::appendStorageClass(StorageClass storageClass, StorageClass\n         OutBuffer buf;\n         stcToBuffer(&buf, stc);\n         if (deprec)\n-            deprecation(\"redundant attribute '%s'\", buf.peekString());\n+            deprecation(\"redundant attribute '%s'\", buf.peekChars());\n         else\n-            error(\"redundant attribute '%s'\", buf.peekString());\n+            error(\"redundant attribute '%s'\", buf.peekChars());\n         return storageClass | stc;\n     }\n \n@@ -1712,7 +1712,7 @@ Dsymbol *Parser::parseStaticCtor(PrefixAttributes *pAttrs)\n     {\n         OutBuffer buf;\n         stcToBuffer(&buf, modStc);\n-        error(loc, \"static constructor cannot be %s\", buf.peekString());\n+        error(loc, \"static constructor cannot be %s\", buf.peekChars());\n     }\n     stc &= ~(STCstatic | STC_TYPECTOR);\n \n@@ -1750,7 +1750,7 @@ Dsymbol *Parser::parseStaticDtor(PrefixAttributes *pAttrs)\n     {\n         OutBuffer buf;\n         stcToBuffer(&buf, modStc);\n-        error(loc, \"static destructor cannot be %s\", buf.peekString());\n+        error(loc, \"static destructor cannot be %s\", buf.peekChars());\n     }\n     stc &= ~(STCstatic | STC_TYPECTOR);\n \n@@ -1792,7 +1792,7 @@ Dsymbol *Parser::parseSharedStaticCtor(PrefixAttributes *pAttrs)\n     {\n         OutBuffer buf;\n         stcToBuffer(&buf, modStc);\n-        error(loc, \"shared static constructor cannot be %s\", buf.peekString());\n+        error(loc, \"shared static constructor cannot be %s\", buf.peekChars());\n     }\n     stc &= ~(STCstatic | STC_TYPECTOR);\n \n@@ -1829,7 +1829,7 @@ Dsymbol *Parser::parseSharedStaticDtor(PrefixAttributes *pAttrs)\n     {\n         OutBuffer buf;\n         stcToBuffer(&buf, modStc);\n-        error(loc, \"shared static destructor cannot be %s\", buf.peekString());\n+        error(loc, \"shared static destructor cannot be %s\", buf.peekChars());\n     }\n     stc &= ~(STCstatic | STC_TYPECTOR);\n \n@@ -4206,7 +4206,7 @@ Dsymbol *Parser::parseFunctionLiteral()\n                 {\n                     OutBuffer buf;\n                     stcToBuffer(&buf, modStc);\n-                    error(\"function literal cannot be %s\", buf.peekString());\n+                    error(\"function literal cannot be %s\", buf.peekChars());\n                 }\n                 else\n                     save = TOKdelegate;"}, {"sha": "667efb941b7cfc707d9581853f8fab2781eb95e1", "filename": "gcc/d/dmd/root/filename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Froot%2Ffilename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Froot%2Ffilename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Ffilename.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -127,7 +127,7 @@ Strings *FileName::splitPath(const char *path)\n             }\n             if (buf.offset)             // if path is not empty\n             {\n-                array->push(buf.extractString());\n+                array->push(buf.extractChars());\n             }\n         } while (c);\n     }"}, {"sha": "d25a14b4872d69740c61b8ccf7b21ceac04e52b2", "filename": "gcc/d/dmd/root/outbuffer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -374,7 +374,7 @@ void OutBuffer::remove(size_t offset, size_t nbytes)\n     this->offset -= nbytes;\n }\n \n-char *OutBuffer::peekString()\n+char *OutBuffer::peekChars()\n {\n     if (!offset || data[offset-1] != '\\0')\n     {\n@@ -384,7 +384,7 @@ char *OutBuffer::peekString()\n     return (char *)data;\n }\n \n-char *OutBuffer::extractString()\n+char *OutBuffer::extractChars()\n {\n     if (!offset || data[offset-1] != '\\0')\n         writeByte(0);"}, {"sha": "fbc3f32d4564d2670b1eb80e0dab41d67da0fedb", "filename": "gcc/d/dmd/root/outbuffer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Foutbuffer.h?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -68,7 +68,7 @@ struct OutBuffer\n     size_t insert(size_t offset, const void *data, size_t nbytes);\n     void remove(size_t offset, size_t nbytes);\n     // Append terminating null if necessary and get view of internal buffer\n-    char *peekString();\n+    char *peekChars();\n     // Append terminating null if necessary and take ownership of data\n-    char *extractString();\n+    char *extractChars();\n };"}, {"sha": "7a0fd6db06994d0501550875c286d4c1d2a210f0", "filename": "gcc/d/dmd/statement.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fstatement.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Fstatement.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatement.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -49,7 +49,7 @@ Identifier *fixupLabelName(Scope *sc, Identifier *ident)\n         OutBuffer buf;\n         buf.printf(\"%s%s\", prefix, ident->toChars());\n \n-        const char *name = buf.extractString();\n+        const char *name = buf.extractChars();\n         ident = Identifier::idPool(name);\n     }\n     return ident;\n@@ -121,7 +121,7 @@ const char *Statement::toChars()\n \n     OutBuffer buf;\n     ::toCBuffer(this, &buf, &hgs);\n-    return buf.extractString();\n+    return buf.extractChars();\n }\n \n "}, {"sha": "9db1e33c1da7f08ea60d9f63b4d15f913560c6f1", "filename": "gcc/d/dmd/tokens.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Ftokens.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fdmd%2Ftokens.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftokens.c?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -133,7 +133,7 @@ const char *Token::toChars() const\n             buf.writeByte('\"');\n             if (postfix)\n                 buf.writeByte(postfix);\n-            p = buf.extractString();\n+            p = buf.extractChars();\n         }\n             break;\n "}, {"sha": "ba7e6aef6eddc7166db7e897ccf6b21881885cb9", "filename": "gcc/d/intrinsics.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fintrinsics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fced594b313ddfb941913b2f59b10ce3514faaf6/gcc%2Fd%2Fintrinsics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fintrinsics.cc?ref=fced594b313ddfb941913b2f59b10ce3514faaf6", "patch": "@@ -118,7 +118,7 @@ maybe_set_intrinsic (FuncDeclaration *decl)\n \n \t  OutBuffer buf;\n \t  mangleToBuffer (fd->type, &buf);\n-\t  tdeco = buf.extractString ();\n+\t  tdeco = buf.extractChars ();\n \t}\n \n       /* Matching the type deco may be a bit too strict, as it means that all"}]}