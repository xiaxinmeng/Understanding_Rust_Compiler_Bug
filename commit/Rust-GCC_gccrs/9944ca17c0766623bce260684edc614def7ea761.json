{"sha": "9944ca17c0766623bce260684edc614def7ea761", "node_id": "C_kwDOANBUbNoAKDk5NDRjYTE3YzA3NjY2MjNiY2UyNjA2ODRlZGM2MTRkZWY3ZWE3NjE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-02-11T00:16:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-02-18T21:18:12Z"}, "message": "c++: static_assert (false) in template [DR2518]\n\nFor a long time, people have expected to be able to write\nstatic_assert (false) in a template and only have it diagnosed if the\ntemplate is instantiated, but we (and other implementations) gave an error\nabout the uninstantiated template because the standard says that if no valid\ninstantiation of the template is possible, the program is ill-formed, no\ndiagnostic required, and we try to diagnose IFNDR things when feasible.\n\nAt the meeting last week we were looking at CWG2518, which wanted to specify\nthat an implementation must not accept a program containing a failing #error\nor static_assert.  We also looked at P2593, which proposed allowing\nstatic_assert in an uninstantiated template.  We ended up combining these\ntwo in order to avoid requiring implementations to reject programs with\nstatic_assert (false) in uninstantiated templates.\n\nThe committee accepted this as a DR, so I'm making the change to all\nstandard modes.  This behavior was also conformant previously, since no\ndiagnostic was required in this case.\n\nWe continue to diagnose non-constant or otherwise ill-formed conditions, so\nno changes to existing tests were needed.\n\n\tDR 2518\n\tPR c++/52809\n\tPR c++/53638\n\tPR c++/87389\n\tPR c++/89741\n\tPR c++/92099\n\tPR c++/104041\n\tPR c++/104691\n\ngcc/cp/ChangeLog:\n\n\t* semantics.cc (finish_static_assert): Don't diagnose in\n\ttemplate context.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/DRs/dr2518.C: New test.", "tree": {"sha": "433405c6b696b5781e67c8be5fd8f57a6e65f565", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/433405c6b696b5781e67c8be5fd8f57a6e65f565"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9944ca17c0766623bce260684edc614def7ea761", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9944ca17c0766623bce260684edc614def7ea761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9944ca17c0766623bce260684edc614def7ea761", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9944ca17c0766623bce260684edc614def7ea761/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32b5875c911f80d551d006d7473e6f1f8705857a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b5875c911f80d551d006d7473e6f1f8705857a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b5875c911f80d551d006d7473e6f1f8705857a"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "79b7cc72f212cef780a3eea65af2b883bb4ec3c8", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9944ca17c0766623bce260684edc614def7ea761/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9944ca17c0766623bce260684edc614def7ea761/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=9944ca17c0766623bce260684edc614def7ea761", "patch": "@@ -11232,14 +11232,16 @@ finish_static_assert (tree condition, tree message, location_t location,\n   if (check_for_bare_parameter_packs (condition))\n     condition = error_mark_node;\n \n+  /* Save the condition in case it was a concept check.  */\n+  tree orig_condition = condition;\n+\n   if (instantiation_dependent_expression_p (condition))\n     {\n       /* We're in a template; build a STATIC_ASSERT and put it in\n          the right place. */\n-      tree assertion;\n-\n-      assertion = make_node (STATIC_ASSERT);\n-      STATIC_ASSERT_CONDITION (assertion) = condition;\n+    defer:\n+      tree assertion = make_node (STATIC_ASSERT);\n+      STATIC_ASSERT_CONDITION (assertion) = orig_condition;\n       STATIC_ASSERT_MESSAGE (assertion) = message;\n       STATIC_ASSERT_SOURCE_LOCATION (assertion) = location;\n \n@@ -11253,9 +11255,6 @@ finish_static_assert (tree condition, tree message, location_t location,\n       return;\n     }\n \n-  /* Save the condition in case it was a concept check.  */\n-  tree orig_condition = condition;\n-\n   /* Fold the expression and convert it to a boolean value. */\n   condition = contextual_conv_bool (condition, complain);\n   condition = fold_non_dependent_expr (condition, complain,\n@@ -11270,6 +11269,10 @@ finish_static_assert (tree condition, tree message, location_t location,\n \n       if (integer_zerop (condition))\n \t{\n+\t  /* CWG2518: static_assert failure in a template is not IFNDR.  */\n+\t  if (processing_template_decl)\n+\t    goto defer;\n+\n \t  int sz = TREE_INT_CST_LOW (TYPE_SIZE_UNIT\n \t\t\t\t     (TREE_TYPE (TREE_TYPE (message))));\n \t  int len = TREE_STRING_LENGTH (message) / sz - 1;"}, {"sha": "240186211e6af82ef25d5bb182ed2eb5a3fd540d", "filename": "gcc/testsuite/g++.dg/DRs/dr2518.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9944ca17c0766623bce260684edc614def7ea761/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2518.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9944ca17c0766623bce260684edc614def7ea761/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2518.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2518.C?ref=9944ca17c0766623bce260684edc614def7ea761", "patch": "@@ -0,0 +1,7 @@\n+// CWG 2518\n+// { dg-do compile { target c++11 } }\n+\n+template <class T> void f()\n+{\n+  static_assert (false, \"\");\n+}"}]}