{"sha": "7ecd45764f643c7c99b3100b50879ac69ec80113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjZDQ1NzY0ZjY0M2M3Yzk5YjMxMDBiNTA4NzlhYzY5ZWM4MDExMw==", "commit": {"author": {"name": "Fernando Nasser", "email": "fnasser@redhat.com", "date": "2003-12-13T01:15:47Z"}, "committer": {"name": "Fernando Nasser", "email": "fnasser@gcc.gnu.org", "date": "2003-12-13T01:15:47Z"}, "message": "gtkpeer.h: Extend NSA set of macros to handle a second native state table --...\n\n2003-12-12  Fernando Nasser  <fnasser@redhat.com>\n\n\t* jni/gtk-peer/gtkpeer.h: Extend NSA set of macros to handle a second\n\tnative state table -- native_global_ref_table.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c: Define\n\tnative_global_ref_table pointer.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkGenericPeer_dispose): Make sure JNI\n\tglobal reference is deleted and memory allocated for pointer freed.\n\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals): Use saved\n\tJNI global reference instead of JNI local reference.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c\n\t(pre_event_handler): Remove compilation warning.\n\t(connect_awt_hook): Use saved JNI global reference instead of creating\n\ta new one.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkButtonPeer_create): Save JNI global\n\treference to the Java object.\n\t(Java_gnu_java_awt_peer_gtk_GtkButtonPeer_connectSignals): Remove\n\tunused variable declaration and add comment.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkCanvasPeer_create): Save JNI global\n\treference to the Java object.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer_create): Ditto.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_nativeCreate): Ditto.\n\t(Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_connectSignals): Use saved\n\tJNI global reference instead of JNI local reference.\n\t(item_toggled): Add debug statement.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkChoicePeer_create): Save JNI global\n\treference to the Java object.\n\t(connect_choice_item_selectable_hook): Use saved JNI global references\n\tinstead of JNI local reference.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer_create): Save JNI\n\tglobal reference to the Java object.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_create): Save JNI global\n\treference to the Java object.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkLabelPeer_create): Ditto.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkMenuBarPeer_create): Ditto.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkMenuPeer_create): Ditto.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_create): Ditto.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_create): Ditto.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_create): Ditto.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkListPeer_create): Ditto.\n\t(Java_gnu_java_awt_peer_gtk_GtkListPeer_connectSignals): Use saved\n\tJNI global reference instead of JNI local reference.\n\t(item_selected): Add debug statement.\n\t(item_unselected): Add debug statement.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkMenuItemPeer_create): Save JNI global\n\treference to the Java object.\n\tConnect \"activate\" signal handler using global JNI reference.\n\t(connect_activate_hook): Removed in favor of inline code.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkPanelPeer_create): Save JNI global\n\treference to the Java object.\n\t(Java_gnu_java_awt_peer_gtk_GtkPanelPeer_connectSignals): Use saved\n\tJNI global reference instead of JNI local reference.  Add FIXME comment.\n\t(Java_gnu_java_awt_peer_gtk_GtkPanelPeer_gtkPanelNew): Save JNI global\n\treference to the Java object.  Add FIXME comment.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_create): Save JNI global\n\treference to the Java object.\n\t(Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_connectSignals): Use saved\n\tJNI global reference instead of JNI local reference.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_connectSignals): Use\n\tsaved JNI global reference instead of JNI local reference.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c\n\t(Java_gnu_java_awt_peer_gtk_GtkWindowPeer_create): Save JNI global\n\treference to the Java object.\n\t(Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectSignals): Use saved\n\tJNI global reference instead of JNI local reference.\n\nFrom-SVN: r74593", "tree": {"sha": "e74cdf5f110473a4dc2029ec62657d1b9a242c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e74cdf5f110473a4dc2029ec62657d1b9a242c71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ecd45764f643c7c99b3100b50879ac69ec80113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ecd45764f643c7c99b3100b50879ac69ec80113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ecd45764f643c7c99b3100b50879ac69ec80113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ecd45764f643c7c99b3100b50879ac69ec80113/comments", "author": {"login": "fnasser", "id": 326533, "node_id": "MDQ6VXNlcjMyNjUzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/326533?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fnasser", "html_url": "https://github.com/fnasser", "followers_url": "https://api.github.com/users/fnasser/followers", "following_url": "https://api.github.com/users/fnasser/following{/other_user}", "gists_url": "https://api.github.com/users/fnasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/fnasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fnasser/subscriptions", "organizations_url": "https://api.github.com/users/fnasser/orgs", "repos_url": "https://api.github.com/users/fnasser/repos", "events_url": "https://api.github.com/users/fnasser/events{/privacy}", "received_events_url": "https://api.github.com/users/fnasser/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b944d1875758f7cf655978b80ce9e2e45a9a0246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b944d1875758f7cf655978b80ce9e2e45a9a0246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b944d1875758f7cf655978b80ce9e2e45a9a0246"}], "stats": {"total": 350, "additions": 280, "deletions": 70}, "files": [{"sha": "42219ad80f43904071522b0896c4e138bb4ce72a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -1,3 +1,88 @@\n+2003-12-12  Fernando Nasser  <fnasser@redhat.com>\n+\n+\t* jni/gtk-peer/gtkpeer.h: Extend NSA set of macros to handle a second\n+\tnative state table -- native_global_ref_table.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c: Define\n+\tnative_global_ref_table pointer.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkGenericPeer_dispose): Make sure JNI\n+\tglobal reference is deleted and memory allocated for pointer freed.\n+\t(Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals): Use saved\n+\tJNI global reference instead of JNI local reference.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c\n+\t(pre_event_handler): Remove compilation warning.\n+\t(connect_awt_hook): Use saved JNI global reference instead of creating\n+\ta new one.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkButtonPeer_create): Save JNI global\n+\treference to the Java object.\n+\t(Java_gnu_java_awt_peer_gtk_GtkButtonPeer_connectSignals): Remove\n+\tunused variable declaration and add comment.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkCanvasPeer_create): Save JNI global\n+\treference to the Java object.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer_create): Ditto.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_nativeCreate): Ditto.\n+\t(Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_connectSignals): Use saved\n+\tJNI global reference instead of JNI local reference.\n+\t(item_toggled): Add debug statement.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkChoicePeer_create): Save JNI global\n+\treference to the Java object.\n+\t(connect_choice_item_selectable_hook): Use saved JNI global references\n+\tinstead of JNI local reference.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer_create): Save JNI\n+\tglobal reference to the Java object.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_create): Save JNI global\n+\treference to the Java object.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkLabelPeer_create): Ditto.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkMenuBarPeer_create): Ditto.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkMenuPeer_create): Ditto.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_create): Ditto.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_create): Ditto.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_create): Ditto.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkListPeer_create): Ditto.\n+\t(Java_gnu_java_awt_peer_gtk_GtkListPeer_connectSignals): Use saved\n+\tJNI global reference instead of JNI local reference.\n+\t(item_selected): Add debug statement.\n+\t(item_unselected): Add debug statement.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkMenuItemPeer_create): Save JNI global\n+\treference to the Java object.\n+\tConnect \"activate\" signal handler using global JNI reference.\n+\t(connect_activate_hook): Removed in favor of inline code.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkPanelPeer_create): Save JNI global\n+\treference to the Java object.\n+\t(Java_gnu_java_awt_peer_gtk_GtkPanelPeer_connectSignals): Use saved\n+\tJNI global reference instead of JNI local reference.  Add FIXME comment.\n+\t(Java_gnu_java_awt_peer_gtk_GtkPanelPeer_gtkPanelNew): Save JNI global\n+\treference to the Java object.  Add FIXME comment.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_create): Save JNI global\n+\treference to the Java object.\n+\t(Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_connectSignals): Use saved\n+\tJNI global reference instead of JNI local reference.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_connectSignals): Use\n+\tsaved JNI global reference instead of JNI local reference.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c\n+\t(Java_gnu_java_awt_peer_gtk_GtkWindowPeer_create): Save JNI global\n+\treference to the Java object.\n+\t(Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectSignals): Use saved\n+\tJNI global reference instead of JNI local reference.\n+\n 2003-12-11  Michael Koch  <konqueror@gmx.de>\n \n \t* java/text/Format.java (serialVersionUID): Fixed value."}, {"sha": "e16b2d457d679bab11009c8927c9dcf97275691e", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkButtonPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkButtonPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkButtonPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -46,10 +46,16 @@ Java_gnu_java_awt_peer_gtk_GtkButtonPeer_create\n {\n   GtkWidget *button;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   button = gtk_button_new();\n   gtk_widget_show (button);\n+\n   gdk_threads_leave ();\n+\n   NSA_SET_PTR (env, obj, button);\n }\n \n@@ -74,7 +80,8 @@ JNIEXPORT void JNICALL\n Java_gnu_java_awt_peer_gtk_GtkButtonPeer_connectSignals\n   (JNIEnv *env, jobject obj)\n {\n-  void *ptr = NSA_GET_PTR (env, obj);\n+  /* FIXME: Do we need to connect any signals here? Otherwise just do not\n+     override parent method. */\n \n   /* Connect the superclass signals.  */\n   Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);"}, {"sha": "6a1a90ce1706d022f25e697172e7e52fb3121419", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCanvasPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCanvasPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCanvasPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -44,8 +44,13 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkCanvasPeer_create\n {\n   gpointer widget;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   widget = gtk_type_new (gtk_drawing_area_get_type ());\n+\n   gdk_threads_leave ();\n \n   NSA_SET_PTR (env, obj, widget);"}, {"sha": "71600c082ca5209745d115a852e61547461efb7c", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -46,12 +46,17 @@ Java_gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer_create\n   GtkWidget *widget;\n   const char *str;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   str = (*env)->GetStringUTFChars (env, label, NULL);\n \n   gdk_threads_enter ();\n+  \n   widget = gtk_check_menu_item_new_with_label (str);\n   gtk_check_menu_item_set_show_toggle (GTK_CHECK_MENU_ITEM (widget), 1);\n   gtk_widget_show (widget);\n+\n   gdk_threads_leave ();\n \n   (*env)->ReleaseStringUTFChars (env, label, str);"}, {"sha": "b6b329d41d9d1379eb50ecbc39b73cca3187b939", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -82,6 +82,9 @@ Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_nativeCreate\n {\n   GtkWidget *button;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n \n   if (group == NULL)\n@@ -98,6 +101,7 @@ Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_nativeCreate\n \t}\n     }\n   gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button), state);\n+\n   gdk_threads_leave ();\n \n   NSA_SET_PTR (env, obj, button);\n@@ -108,11 +112,13 @@ Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_connectSignals\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr = NSA_GET_PTR (env, obj);\n+  jobject *gref = NSA_GET_GLOBAL_REF (env, obj);\n+  g_assert (gref);\n \n   gdk_threads_enter ();\n \n   g_signal_connect (G_OBJECT (ptr), \"toggled\",\n-\t\t      GTK_SIGNAL_FUNC (item_toggled), obj);\n+\t\t      GTK_SIGNAL_FUNC (item_toggled), *gref);\n \n   gdk_threads_leave ();\n \n@@ -161,6 +167,7 @@ Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_nativeSetCheckboxGroup\n static void\n item_toggled (GtkToggleButton *item, jobject peer)\n {\n+  //g_print (\"toggled\\n\");\n   (*gdk_env)->CallVoidMethod (gdk_env, peer,\n \t\t\t      postItemEventID,\n \t\t\t      peer,"}, {"sha": "c57cfd1217c2e1cceadd6130d95276cb21c55b3a", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -51,7 +51,11 @@ Java_gnu_java_awt_peer_gtk_GtkChoicePeer_create\n   GtkOptionMenu *option_menu;\n   GtkRequisition child_requisition;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   option_menu = GTK_OPTION_MENU (gtk_option_menu_new ());\n   menu = gtk_menu_new ();\n   gtk_widget_show (menu);\n@@ -193,12 +197,19 @@ connect_choice_item_selectable_hook (JNIEnv *env, jobject peer_obj,\n \t\t\t\t     GtkItem *item, jobject item_obj)\n {\n   struct item_event_hook_info *ie;\n+  jobject *peer_objGlobPtr;\n+  jobject *item_objGlobPtr;\n \n   ie = (struct item_event_hook_info *) \n     malloc (sizeof (struct item_event_hook_info));\n \n-  ie->peer_obj = (*env)->NewGlobalRef (env, peer_obj);\n-  ie->item_obj = (*env)->NewGlobalRef (env, item_obj);\n+  peer_objGlobPtr = NSA_GET_GLOBAL_REF (env, peer_obj);\n+  g_assert (peer_objGlobPtr);\n+  item_objGlobPtr = NSA_GET_GLOBAL_REF (env, item_obj);\n+  g_assert (item_objGlobPtr);\n+\n+  ie->peer_obj = *peer_objGlobPtr;\n+  ie->item_obj = *item_objGlobPtr;\n \n   g_signal_connect (G_OBJECT (item), \"activate\", \n \t\t      GTK_SIGNAL_FUNC (item_activate), ie);"}, {"sha": "6336636ec11d154a7640e8d44a91eb5e53faf639", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -48,12 +48,16 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkGenericPeer_dispose\n {\n   void *ptr;\n \n+  /* Remove entries from state tables */\n+  NSA_DEL_GLOBAL_REF (env, obj);\n   ptr = NSA_DEL_PTR (env, obj);\n \n+  gdk_threads_enter ();\n+  \n   /* For now the native state for any object must be a widget.\n      However, a subclass could override dispose() if required.  */\n-  gdk_threads_enter ();\n   gtk_widget_destroy (GTK_WIDGET (ptr));\n+\n   gdk_threads_leave ();\n }\n \n@@ -548,11 +552,11 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectJObjec\n }\n \n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals\n-  (JNIEnv *env, jobject peer_obj)\n+  (JNIEnv *env, jobject obj)\n {\n-  void *ptr;\n-\n-  ptr = NSA_GET_PTR (env, peer_obj);\n+  void *ptr = NSA_GET_PTR (env, obj);\n+  jobject *gref = NSA_GET_GLOBAL_REF (env, obj);\n+  g_assert (gref);\n \n   gdk_threads_enter ();\n \n@@ -567,7 +571,7 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignal\n   /* Connect EVENT signal, which happens _before_ any specific signal. */\n \n   g_signal_connect (GTK_OBJECT (ptr), \"event\", \n-                    G_CALLBACK (pre_event_handler), peer_obj);\n+                    G_CALLBACK (pre_event_handler), *gref);\n \n   gdk_threads_leave ();\n }"}, {"sha": "bf4035dcb7f195c40ee58302ff0fe7db77167e88", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -47,8 +47,11 @@ Java_gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer_create\n   GtkWidget *window;\n   GtkWidget *vbox, *layout;\n \n-  gdk_threads_enter ();\n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n \n+  gdk_threads_enter ();\n+  \n   window = gtk_plug_new (window_id);\n \n   vbox = gtk_vbox_new (0, 0);"}, {"sha": "75eeaf7ce14a615dffdcccc28781ee635571277d", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -1037,15 +1037,17 @@ pre_event_handler (GtkWidget *widget, GdkEvent *event, jobject peer)\n     case GDK_KEY_PRESS:\n     case GDK_KEY_RELEASE:\n       {\n-        GtkWindow *window;\n         GdkWindow *obj_window;\n         jobject *focus_obj_ptr = NULL;\n+\tint generates_key_typed = 0;\n \n         /* A widget with a grab will get key events */\n \tif (!GTK_IS_WINDOW (widget))\n \t    *focus_obj_ptr = peer;\n \telse\n \t  {\n+            GtkWindow *window;\n+\n             /* Check if we have an enabled focused widget in this window.\n \t       If not don't handle the event. */\n \t    window = GTK_WINDOW (widget);\n@@ -1079,6 +1081,9 @@ pre_event_handler (GtkWidget *widget, GdkEvent *event, jobject peer)\n             /* If the window has no jobject attached we can't send anything */\n \t    if (!focus_obj_ptr)\n \t      return FALSE;\n+\t      \n+\t    /* Should we generate an AWT_KEY_TYPED event? */\n+\t    generates_key_typed = generates_key_typed_event (event, window->focus_widget);\n \t  }\t\n \n \tif (event->type == GDK_KEY_PRESS)\t\n@@ -1092,7 +1097,7 @@ pre_event_handler (GtkWidget *widget, GdkEvent *event, jobject peer)\n                                         keyevent_to_awt_keychar (event),\n                                         keysym_to_awt_keylocation (event));\n \n-            if (generates_key_typed_event (event, window->focus_widget))\n+            if (generates_key_typed)\n               {\n                 (*gdk_env)->CallVoidMethod (gdk_env, *focus_obj_ptr,\n                                             postKeyEventID,\n@@ -1159,18 +1164,18 @@ connect_awt_hook (JNIEnv *env, jobject peer_obj, int nwindows, ...)\n {\n   va_list ap;\n   jobject *obj;\n+void *ptr = NSA_GET_PTR (env, peer_obj);\n \n-  obj = (jobject *) malloc (sizeof (jobject));\n-  *obj = (*env)->NewGlobalRef (env, peer_obj);\n-  //g_print(\"Connection obj %p\\n\", peer_obj);\n+  obj = NSA_GET_GLOBAL_REF (env, peer_obj);\n+  //g_print(\"Connection obj %s\\n\", gtk_widget_get_name (GTK_WIDGET (ptr)));\n+  g_assert (obj);\n \n   va_start (ap, nwindows);\n   {\n   int i;\n   for (i = 0; i < nwindows; i++)\n     {\n       GdkWindow* attach = (va_arg (ap, GdkWindow *));\n-      //g_print(\"attach peer obj %p and %p\\n\", peer_obj, attach);\n       attach_jobject(attach, obj);\n     }\n   }"}, {"sha": "47a08ae8eedc20edfebfd73fec3a807b5a25ca9d", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -49,8 +49,13 @@ Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_create\n {\n   gpointer widget;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   widget = gtk_type_new (gtk_file_selection_get_type ());\n+\n   gdk_threads_leave ();\n \n   NSA_SET_PTR (env, obj, widget);"}, {"sha": "0865f63160bd1d2ce2904dffe68a1f379c78c0e4", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkLabelPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkLabelPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkLabelPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -48,10 +48,13 @@ Java_gnu_java_awt_peer_gtk_GtkLabelPeer_create\n   GtkContainer *ebox_container;\n   const char *str;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   str = (*env)->GetStringUTFChars (env, text, 0);\n \n   gdk_threads_enter ();\n-\n+  \n   ebox = gtk_event_box_new ();\n   ebox_container = GTK_CONTAINER (ebox);\n   label = gtk_label_new (str);"}, {"sha": "ac6f389f8d81ba55dd7c699a99848e1c889e843f", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -58,14 +58,19 @@ Java_gnu_java_awt_peer_gtk_GtkListPeer_create\n {\n   GtkWidget *list, *sw;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   list = gtk_clist_new (1);\n   gtk_widget_show (list);\n   sw = gtk_scrolled_window_new (NULL, NULL);\n   gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (sw), \n \t\t\t\t  GTK_POLICY_AUTOMATIC,\n \t\t\t\t  GTK_POLICY_AUTOMATIC);\n   gtk_container_add (GTK_CONTAINER (sw), list);\n+\n   gdk_threads_leave ();\n \n   NSA_SET_PTR (env, obj, sw);\n@@ -90,12 +95,12 @@ Java_gnu_java_awt_peer_gtk_GtkListPeer_connectJObject\n \n JNIEXPORT void JNICALL \n Java_gnu_java_awt_peer_gtk_GtkListPeer_connectSignals\n-  (JNIEnv *env, jobject peer_obj)\n+  (JNIEnv *env, jobject obj)\n {\n   GtkCList *list;\n-  void *ptr;\n-\n-  ptr = NSA_GET_PTR (env, peer_obj);\n+  void *ptr = NSA_GET_PTR (env, obj);\n+  jobject *gref = NSA_GET_GLOBAL_REF (env, obj);\n+  g_assert (gref);\n \n   gdk_threads_enter ();\n \n@@ -106,17 +111,17 @@ Java_gnu_java_awt_peer_gtk_GtkListPeer_connectSignals\n   list = CLIST_FROM_SW (ptr);\n \n   g_signal_connect (G_OBJECT (list), \"select_row\", \n-\t\t      GTK_SIGNAL_FUNC (item_select), peer_obj);\n+\t\t      GTK_SIGNAL_FUNC (item_select), *gref);\n \n   g_signal_connect (G_OBJECT (list), \"unselect_row\", \n-\t\t      GTK_SIGNAL_FUNC (item_unselect), peer_obj);\n+\t\t      GTK_SIGNAL_FUNC (item_unselect), *gref);\n \n   /* Connect the superclass signals.  */\n   /* FIXME: Cannot do that here or it will get the sw and not the list.\n      We must a generic way of doing this. */\n   /* Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, peer_obj); */\n   g_signal_connect (GTK_OBJECT (list), \"event\", \n-                    G_CALLBACK (pre_event_handler), peer_obj);\n+                    G_CALLBACK (pre_event_handler), *gref);\n \n   gdk_threads_leave ();\n }\n@@ -319,6 +324,7 @@ item_select (GtkCList *list __attribute__((unused)),\n \t     GdkEventButton *event __attribute__((unused)), \n \t     jobject peer_obj)\n {\n+  //g_print (\"select_row\\n\");\n   (*gdk_env)->CallVoidMethod (gdk_env, peer_obj,\n \t\t\t      postListItemEventID,\n \t\t\t      row,\n@@ -332,6 +338,7 @@ item_unselect (GtkCList *list __attribute__((unused)),\n \t       GdkEventButton *event __attribute__((unused)),\n \t       jobject peer_obj)\n {\n+  //g_print (\"unselect_row\\n\");\n   (*gdk_env)->CallVoidMethod (gdk_env, peer_obj,\n \t\t\t      postListItemEventID,\n \t\t\t      row,"}, {"sha": "ed6107b37292ee7adb95dc83628dff171f21ae00", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -42,6 +42,7 @@ exception statement from your version. */\n \n #ifdef JVM_SUN\n   struct state_table *native_state_table;\n+  struct state_table *native_global_ref_table;\n #endif\n \n jmethodID setBoundsCallbackID;"}, {"sha": "48509a5d341d031c74f37a007f2704dbdd9c697d", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuBarPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuBarPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuBarPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -44,9 +44,14 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuBarPeer_create\n {\n   GtkWidget *widget;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   widget = gtk_menu_bar_new ();\n   gtk_widget_show (widget);\n+\n   gdk_threads_leave ();\n \n   NSA_SET_PTR (env, obj, widget);"}, {"sha": "4984760f917a83e5eace5b651ab78165c1769f64", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuItemPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuItemPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuItemPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -40,26 +40,35 @@ exception statement from your version. */\n #include \"gnu_java_awt_peer_gtk_GtkMenuItemPeer.h\"\n #include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n \n-static void\n-connect_activate_hook (JNIEnv *, jobject, GtkMenuItem *);\n+static void item_activate (GtkMenuItem *item __attribute__((unused)),\n+                           jobject *peer_obj);\n \n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuItemPeer_create\n   (JNIEnv *env, jobject obj, jstring label)\n {\n   GtkWidget *widget;\n   const char *str;\n+  jobject *gref;\n+\n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+  gref = NSA_GET_GLOBAL_REF (env, obj);\n \n   str = (*env)->GetStringUTFChars (env, label, NULL);\n \n   gdk_threads_enter ();\n-\n+  \n   if (strcmp (str, \"-\") == 0) /* \"-\" signals that we need a separator */\n     widget = gtk_menu_item_new ();\n   else\n     widget = gtk_menu_item_new_with_label (str);\n \n-  connect_activate_hook (env, obj, GTK_MENU_ITEM (widget));\n+  /* Connect activate hook */\n+  g_signal_connect (G_OBJECT (widget), \"activate\", \n+\t\t      GTK_SIGNAL_FUNC (item_activate), *gref);\n+\n   gtk_widget_show (widget);\n+\n   gdk_threads_leave ();\n \n   (*env)->ReleaseStringUTFChars (env, label, str);\n@@ -101,14 +110,3 @@ item_activate (GtkMenuItem *item __attribute__((unused)), jobject *peer_obj)\n \t\t\t      postMenuActionEventID);\n }\n \n-static void\n-connect_activate_hook (JNIEnv *env, jobject peer_obj, GtkMenuItem *item)\n-{\n-  jobject *obj;\n-\n-  obj = (jobject *) malloc (sizeof (jobject));\n-  *obj = (*env)->NewGlobalRef (env, peer_obj);\n-\n-  g_signal_connect (G_OBJECT (item), \"activate\", \n-\t\t      GTK_SIGNAL_FUNC (item_activate), obj);\n-}"}, {"sha": "63e6a740158aa8890efed958bef9ad46b6180cd5", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -92,9 +92,13 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuPeer_create\n   GtkWidget *menu_title, *menu;\n   const char *str;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   str = (*env)->GetStringUTFChars (env, label, NULL);\n \n   gdk_threads_enter ();\n+  \n   menu = gtk_menu_new ();\n   \n   menu_title = gtk_menu_item_new_with_label (str);\n@@ -104,6 +108,7 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuPeer_create\n   gtk_widget_show (menu_title);\n \n   NSA_SET_PTR (env, obj, menu_title);\n+\n   gdk_threads_leave ();\n \n   (*env)->ReleaseStringUTFChars (env, label, str);"}, {"sha": "62fff4d8afeea43cb5e0eb5fdb6b1c1d9d2157cb", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPanelPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPanelPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPanelPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -46,8 +46,13 @@ Java_gnu_java_awt_peer_gtk_GtkPanelPeer_create\n {\n   gpointer widget;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   widget = gtk_layout_new (NULL, NULL);\n+\n   gdk_threads_leave ();\n \n   NSA_SET_PTR (env, obj, widget);\n@@ -80,13 +85,14 @@ JNIEXPORT void JNICALL\n Java_gnu_java_awt_peer_gtk_GtkPanelPeer_connectSignals\n   (JNIEnv *env, jobject obj)\n {\n-  void *ptr;\n-\n-  ptr = NSA_GET_PTR (env, obj);\n+  void *ptr = NSA_GET_PTR (env, obj);\n+  jobject *gref = NSA_GET_GLOBAL_REF (env, obj);\n+  g_assert (gref);\n \n   gdk_threads_enter ();\n   gtk_widget_realize (GTK_WIDGET (ptr));\n \n+  /* FIXME: If we don't need this then remove this method. */\n /*    g_signal_connect (G_OBJECT (ptr), \"size_request\", GTK_SIGNAL_FUNC (sr), */\n /*  \t\t      NULL); */\n   gdk_threads_leave ();\n@@ -95,6 +101,8 @@ Java_gnu_java_awt_peer_gtk_GtkPanelPeer_connectSignals\n   Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);\n }\n \n+/* FIXME: The following doesn't seem to be used.\n+   Is not declared as a native function in GtkPanelPeer.java */\n /*\n  * Make a new panel.\n  */\n@@ -105,19 +113,26 @@ Java_gnu_java_awt_peer_gtk_GtkPanelPeer_gtkPanelNew\n   GtkWidget *layout;\n   void *parent;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   parent = NSA_GET_PTR (env, parent_obj);\n \n   gdk_threads_enter ();\n+\n   layout = gtk_layout_new (NULL, NULL);\n   \n   set_parent (layout, GTK_CONTAINER (parent));\n \n   gtk_widget_realize (layout);\n+\n   connect_awt_hook (env, obj, 1, GTK_LAYOUT (layout)->bin_window);\n+\n   set_visible (layout, 1);\n \n-  NSA_SET_PTR (env, obj, layout);\n   gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, layout);\n }\n \n "}, {"sha": "be7e2d0a4e2ce681b7e50ecc6291dcb5205f8e8d", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -108,13 +108,18 @@ Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_create\n   GtkWidget *sb;\n   GtkObject *adj;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   adj = gtk_adjustment_new (value, min, max, \n \t\t\t    step_incr, page_incr, \n \t\t\t    visible_amount);\n \n   sb = (orientation) ? gtk_vscrollbar_new (GTK_ADJUSTMENT (adj)) :\n                        gtk_hscrollbar_new (GTK_ADJUSTMENT (adj));\n+\n   gdk_threads_leave ();\n \n   NSA_SET_PTR (env, obj, sb);\n@@ -141,19 +146,19 @@ JNIEXPORT void JNICALL\n Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_connectSignals\n   (JNIEnv *env, jobject obj)\n {\n-  void *ptr;\n   struct range_scrollbar *rs;\n+  void *ptr = NSA_GET_PTR (env, obj);\n+  jobject *gref = NSA_GET_GLOBAL_REF (env, obj);\n+  g_assert (gref);\n \n   rs = (struct range_scrollbar *) malloc (sizeof (struct range_scrollbar));\n \n-  ptr = NSA_GET_PTR (env, obj);\n-\n   gdk_threads_enter ();\n+\n   gtk_widget_realize (GTK_WIDGET (ptr));\n \n   rs->range = GTK_RANGE (ptr);\n-  rs->scrollbar = (jobject *) malloc (sizeof (jobject));\n-  *(rs->scrollbar) = (*env)->NewGlobalRef (env, obj);\n+  rs->scrollbar = gref;\n \n   g_signal_connect (G_OBJECT (GTK_RANGE (ptr)), \n \t\t      \"move-slider\", "}, {"sha": "516797e7eb4c6c640ea279b1fc6e356c82c2ea73", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollPanePeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollPanePeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollPanePeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -45,8 +45,13 @@ Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_create\n {\n   gpointer window;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   window = gtk_scrolled_window_new (NULL, NULL);\n+\n   gdk_threads_leave ();\n \n   NSA_SET_PTR (env, obj, window);"}, {"sha": "71a789ed37f9f80d34f16bdb8443dc697a9370bb", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextAreaPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextAreaPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextAreaPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -46,8 +46,11 @@ Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_create\n {\n   GtkWidget *text, *sw;\n \n-  gdk_threads_enter ();\n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n \n+  gdk_threads_enter ();\n+  \n   text = gtk_text_view_new ();\n   gtk_widget_show (text);\n "}, {"sha": "2ec87f012ea49a4ba79e01b6719f9eebf82614f7", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -51,26 +51,26 @@ JNIEXPORT void JNICALL\n Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_connectSignals\n   (JNIEnv *env, jobject obj)\n {\n-  void *ptr;\n   GtkTextView *text = NULL;\n   GtkTextBuffer *buf;\n-\n-  ptr = NSA_GET_PTR (env, obj);\n+  void *ptr = NSA_GET_PTR (env, obj);\n+  jobject *gref = NSA_GET_GLOBAL_REF (env, obj);\n+  g_assert (gref);\n \n   gdk_threads_enter ();\n \n   if (GTK_IS_ENTRY(ptr))\n     {\n       g_signal_connect (GTK_ENTRY (ptr)->im_context, \"commit\",\n-                        G_CALLBACK (textcomponent_commit_cb), obj);\n+                        G_CALLBACK (textcomponent_commit_cb), *gref);\n \n       g_signal_connect (GTK_EDITABLE (ptr), \"changed\",\n-                        G_CALLBACK (textcomponent_changed_cb), obj);\n+                        G_CALLBACK (textcomponent_changed_cb), *gref);\n \n       gdk_threads_leave ();\n \n       /* Connect the superclass signals.  */\n-      Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);\n+      Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, *gref);\n     }\n   else\n     {\n@@ -86,20 +86,20 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_connectSignals\n       if (text)\n \t{\n           g_signal_connect (text->im_context, \"commit\",\n-                            G_CALLBACK (textcomponent_commit_cb), obj);\n+                            G_CALLBACK (textcomponent_commit_cb), *gref);\n \n           buf = gtk_text_view_get_buffer (text);\n           if (buf)\n             g_signal_connect (buf, \"changed\",\n-                              G_CALLBACK (textcomponent_changed_cb), obj);\n+                              G_CALLBACK (textcomponent_changed_cb), *gref);\n \n           /* Connect the superclass signals.  */\n           /* FIXME: Cannot do that here or it will get the sw and not the list.\n              We must a generic way of doing this. */\n           /* Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env,\n-\t                                                                 peer_obj); */\n+\t                                                                 obj); */\n           g_signal_connect (GTK_OBJECT (text), \"event\", \n-                    G_CALLBACK (pre_event_handler), obj);\n+                    G_CALLBACK (pre_event_handler), *gref);\n \n           gdk_threads_leave ();\n \t}"}, {"sha": "5379635b88b70fb67e8ad50bef73fb46788c260a", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextFieldPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextFieldPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextFieldPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -45,8 +45,13 @@ Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_create\n {\n   GtkWidget *widget;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   widget = gtk_entry_new ();\n+\n   gdk_threads_leave ();\n \n   NSA_SET_PTR (env, obj, widget);"}, {"sha": "022677b06a9d50e3ef0f87bddeaa67a4837ca1c4", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -74,7 +74,11 @@ Java_gnu_java_awt_peer_gtk_GtkWindowPeer_create\n   void *window_parent;\n   GtkWidget *vbox, *layout;\n \n+  /* Create global reference and save it for future use */\n+  NSA_SET_GLOBAL_REF (env, obj);\n+\n   gdk_threads_enter ();\n+  \n   window_widget = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n   window = GTK_WINDOW (window_widget);\n \n@@ -179,32 +183,32 @@ JNIEXPORT void JNICALL\n Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectSignals\n   (JNIEnv *env, jobject obj)\n {\n-  void *ptr;\n-\n-  ptr = NSA_GET_PTR (env, obj);\n+  void *ptr = NSA_GET_PTR (env, obj);\n+  jobject *gref = NSA_GET_GLOBAL_REF (env, obj);\n+  g_assert (gref);\n \n   gdk_threads_enter ();\n \n   gtk_widget_realize (ptr);\n \n   /* Connect signals for window event support. */\n   g_signal_connect (G_OBJECT (ptr), \"delete-event\",\n-\t\t    G_CALLBACK (window_delete_cb), obj);\n+\t\t    G_CALLBACK (window_delete_cb), *gref);\n \n   g_signal_connect (G_OBJECT (ptr), \"destroy-event\",\n-\t\t    G_CALLBACK (window_destroy_cb), obj);\n+\t\t    G_CALLBACK (window_destroy_cb), *gref);\n \n   g_signal_connect (G_OBJECT (ptr), \"show\",\n-\t\t    G_CALLBACK (window_show_cb), obj);\n+\t\t    G_CALLBACK (window_show_cb), *gref);\n \n   g_signal_connect (G_OBJECT (ptr), \"focus-in-event\",\n-\t\t    G_CALLBACK (window_focus_in_cb), obj);\n+\t\t    G_CALLBACK (window_focus_in_cb), *gref);\n \n   g_signal_connect (G_OBJECT (ptr), \"focus-out-event\",\n-\t\t    G_CALLBACK (window_focus_out_cb), obj);\n+\t\t    G_CALLBACK (window_focus_out_cb), *gref);\n \n   g_signal_connect (G_OBJECT (ptr), \"window-state-event\",\n-\t\t    G_CALLBACK (window_window_state_cb), obj);\n+\t\t    G_CALLBACK (window_window_state_cb), *gref);\n \n   gdk_threads_leave ();\n "}, {"sha": "a35c99b69e062977468a8c9654126d73ff5dc37d", "filename": "libjava/jni/gtk-peer/gtkpeer.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecd45764f643c7c99b3100b50879ac69ec80113/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h?ref=7ecd45764f643c7c99b3100b50879ac69ec80113", "patch": "@@ -61,9 +61,11 @@ exception statement from your version. */\n #ifdef JVM_SUN\n \n extern struct state_table *native_state_table;\n+extern struct state_table *native_global_ref_table;\n \n #define NSA_INIT(env, clazz) \\\n-  native_state_table = init_state_table (env, clazz)\n+   do {native_state_table = init_state_table (env, clazz); \\\n+   native_global_ref_table = init_state_table (env, clazz);} while (0)\n \n #define NSA_GET_PTR(env, obj) \\\n   get_state (env, obj, native_state_table)\n@@ -74,6 +76,21 @@ extern struct state_table *native_state_table;\n #define NSA_DEL_PTR(env, obj) \\\n   remove_state_slot (env, obj, native_state_table)\n \n+#define NSA_GET_GLOBAL_REF(env, obj) \\\n+  get_state (env, obj, native_global_ref_table)\n+\n+#define NSA_SET_GLOBAL_REF(env, obj) \\\n+  do {jobject *globRefPtr; \\\n+    globRefPtr = (jobject *) malloc (sizeof (jobject)); \\\n+    *globRefPtr = (*env)->NewGlobalRef (env, obj); \\\n+    set_state (env, obj, native_global_ref_table, (void *)globRefPtr);} while (0)\n+\n+#define NSA_DEL_GLOBAL_REF(env, obj) \\\n+  do {jobject *globRefPtr = get_state (env, obj, native_global_ref_table); \\\n+    remove_state_slot (env, obj, native_global_ref_table); \\\n+    (*env)->DeleteGlobalRef (env, *globRefPtr); \\\n+    free (globRefPtr);} while (0)\n+\n #endif /* JVM_SUN */\n \n struct graphics"}]}