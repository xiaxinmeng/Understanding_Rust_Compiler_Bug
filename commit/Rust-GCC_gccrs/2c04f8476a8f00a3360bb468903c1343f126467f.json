{"sha": "2c04f8476a8f00a3360bb468903c1343f126467f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMwNGY4NDc2YThmMDBhMzM2MGJiNDY4OTAzYzEzNDNmMTI2NDY3Zg==", "commit": {"author": {"name": "Bill Seurer", "email": "seurer@linux.vnet.ibm.com", "date": "2019-06-25T20:06:07Z"}, "committer": {"name": "Bill Seurer", "email": "seurer@gcc.gnu.org", "date": "2019-06-25T20:06:07Z"}, "message": "[PATCH, rs6000] Split up rs6000.c.\n\nThe source file rs6000.c has grown to unreasonable size and is being\nsplit up into several smaller source files.  This should improve\ncompilation speed for building gcc.\n\nThis is the first of several patches to do this and moves most of the\nprologue/epilogue code to a new source file.\n\nBootstrapped and tested on powerpc64le-unknown-linux-gnu and\npowerpc64-unknown-linux-gnu with no regressions.  Is this ok for trunk?\n\n\n2019-06-24  Bill Seurer  <seurer@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (stack_info, rs6000_pic_labelno,\n\tsavres_routine_syms, savres_routine_name, morestack_ref,\n\trs6000_init_machine_status, save_reg_p, first_reg_to_save,\n\tfirst_fp_reg_to_save, first_altivec_reg_to_save, compute_vrsave_mask,\n\tcompute_save_world_info, is_altivec_return_reg, fixed_reg_p,\n\trs6000_savres_strategy, rs6000_stack_info, debug_stack_info,\n\trs6000_return_addr, rs6000_decl_ok_for_sibcall,\n\trs6000_function_ok_for_sibcall, rs6000_ra_ever_killed,\n\trs6000_emit_load_toc_table, rs6000_emit_eh_reg_restore, uses_TOC,\n\tcreate_TOC_reference, rs6000_aix_asm_output_dwarf_table_ref,\n\trs6000_emit_stack_tie, rs6000_emit_allocate_stack_1,\n\tget_stack_clash_protection_probe_interval,\n\tget_stack_clash_protection_guard_size,\n\trs6000_emit_probe_stack_range_stack_clash, rs6000_emit_allocate_stack,\n\trs6000_emit_probe_stack_range, output_probe_stack_range_1,\n\tinteresting_frame_related_regno, output_probe_stack_range_stack_clash,\n\toutput_probe_stack_range, rs6000_frame_related, generate_set_vrsave,\n\tgen_frame_set, gen_frame_load, gen_frame_store, emit_frame_save,\n\tgen_frame_mem_offset, rs6000_savres_routine_name,\n\trs6000_savres_routine_sym, rs6000_emit_stack_reset,\n\tptr_regno_for_savres, rs6000_emit_savres_rtx,\n\trs6000_emit_prologue_move_from_cr, split_stack_arg_pointer_used_p,\n\trs6000_global_entry_point_prologue_needed_p,\n\trs6000_get_separate_components, rs6000_components_for_bb,\n\trs6000_disqualify_components, rs6000_emit_prologue_components,\n\trs6000_emit_epilogue_components, rs6000_set_handled_components,\n\temit_vrsave_prologue, emit_split_stack_prologue, rs6000_emit_prologue,\n\trs6000_output_savres_externs, rs6000_output_function_prologue,\n\trs6000_keep_leaf_when_profiled, load_cr_save, restore_saved_cr,\n\tload_lr_save, restore_saved_lr, add_crlr_cfa_restore,\n\toffset_below_red_zone_p, emit_cfa_restores, rs6000_emit_epilogue,\n\trs6000_output_function_epilogue, gen_add3_const,\n\trs6000_expand_split_stack_prologue, rs6000_live_on_entry,\n\trs6000_split_stack_space_check, rs6000_save_toc_in_prologue_p): Moved\n\tto rs6000-logue.c.\n\t(machine_function): Moved to rs6000.h.\n\t(rs6000_stack_t, ALTIVEC_REG_BIT, quad_address_offset_p) Moved to\n\trs6000-internal.h.\n\t* config/rs6000/rs6000-logue.c(stack_info, rs6000_pic_labelno,\n\tsavres_routine_syms, savres_routine_name, morestack_ref,\n\trs6000_init_machine_status, save_reg_p, first_reg_to_save,\n\tfirst_fp_reg_to_save, first_altivec_reg_to_save, compute_vrsave_mask,\n\tcompute_save_world_info, is_altivec_return_reg, fixed_reg_p,\n\trs6000_savres_strategy, rs6000_stack_info, debug_stack_info,\n\trs6000_return_addr, rs6000_decl_ok_for_sibcall,\n\trs6000_function_ok_for_sibcall, rs6000_ra_ever_killed,\n\trs6000_emit_load_toc_table, rs6000_emit_eh_reg_restore, uses_TOC,\n\tcreate_TOC_reference, rs6000_aix_asm_output_dwarf_table_ref,\n\trs6000_emit_stack_tie, rs6000_emit_allocate_stack_1,\n\tget_stack_clash_protection_probe_interval,\n\tget_stack_clash_protection_guard_size,\n\trs6000_emit_probe_stack_range_stack_clash, rs6000_emit_allocate_stack,\n\trs6000_emit_probe_stack_range, output_probe_stack_range_1,\n\tinteresting_frame_related_regno, output_probe_stack_range_stack_clash,\n\toutput_probe_stack_range, rs6000_frame_related, generate_set_vrsave,\n\tgen_frame_set, gen_frame_load, gen_frame_store, emit_frame_save,\n\tgen_frame_mem_offset, rs6000_savres_routine_name,\n\trs6000_savres_routine_sym, rs6000_emit_stack_reset,\n\tptr_regno_for_savres, rs6000_emit_savres_rtx,\n\trs6000_emit_prologue_move_from_cr, split_stack_arg_pointer_used_p,\n\trs6000_global_entry_point_prologue_needed_p,\n\trs6000_get_separate_components, rs6000_components_for_bb,\n\trs6000_disqualify_components, rs6000_emit_prologue_components,\n\trs6000_emit_epilogue_components, rs6000_set_handled_components,\n\temit_vrsave_prologue, emit_split_stack_prologue, rs6000_emit_prologue,\n\trs6000_output_savres_externs, rs6000_output_function_prologue,\n\trs6000_keep_leaf_when_profiled, load_cr_save, restore_saved_cr,\n\tload_lr_save, restore_saved_lr, add_crlr_cfa_restore,\n\toffset_below_red_zone_p, emit_cfa_restores, rs6000_emit_epilogue,\n\trs6000_output_function_epilogue, gen_add3_const,\n\trs6000_expand_split_stack_prologue, rs6000_live_on_entry,\n\trs6000_split_stack_space_check, rs6000_save_toc_in_prologue_p): Moved\n\tto here from rs6000.c.\n\t* config/rs6000/rs6000.h (machine_function): Moved to here from rs6000.c.\n\t* config/rs6000/rs6000-internal.h: (rs6000_stack_t, ALTIVEC_REG_BIT,\n\tquad_address_offset_p) Moved to here from rs6000.c.\n\t* config/rs6000/t-rs6000: Add new source file rs6000-logue.c.\n\t* config/config.gcc: Add new source file rs6000-logue.c to garbage\n\tcollector.\n\nFrom-SVN: r272658", "tree": {"sha": "63cbcc9fd48b6355b30e9c30e93214c7778f3f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63cbcc9fd48b6355b30e9c30e93214c7778f3f7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c04f8476a8f00a3360bb468903c1343f126467f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c04f8476a8f00a3360bb468903c1343f126467f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c04f8476a8f00a3360bb468903c1343f126467f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c04f8476a8f00a3360bb468903c1343f126467f/comments", "author": {"login": "BillSeurer", "id": 8561221, "node_id": "MDQ6VXNlcjg1NjEyMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/8561221?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BillSeurer", "html_url": "https://github.com/BillSeurer", "followers_url": "https://api.github.com/users/BillSeurer/followers", "following_url": "https://api.github.com/users/BillSeurer/following{/other_user}", "gists_url": "https://api.github.com/users/BillSeurer/gists{/gist_id}", "starred_url": "https://api.github.com/users/BillSeurer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BillSeurer/subscriptions", "organizations_url": "https://api.github.com/users/BillSeurer/orgs", "repos_url": "https://api.github.com/users/BillSeurer/repos", "events_url": "https://api.github.com/users/BillSeurer/events{/privacy}", "received_events_url": "https://api.github.com/users/BillSeurer/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4cc28287993320b4550a8a1d3842172d41b8d1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4cc28287993320b4550a8a1d3842172d41b8d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4cc28287993320b4550a8a1d3842172d41b8d1c"}], "stats": {"total": 10074, "additions": 5786, "deletions": 4288}, "files": [{"sha": "7dfd12dc4268e81d0c6eae0779ef3176ae98a77b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c04f8476a8f00a3360bb468903c1343f126467f", "patch": "@@ -1,3 +1,85 @@\n+2019-06-24  Bill Seurer  <seurer@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (stack_info, rs6000_pic_labelno,\n+\tsavres_routine_syms, savres_routine_name, morestack_ref,\n+\trs6000_init_machine_status, save_reg_p, first_reg_to_save,\n+\tfirst_fp_reg_to_save, first_altivec_reg_to_save, compute_vrsave_mask,\n+\tcompute_save_world_info, is_altivec_return_reg, fixed_reg_p,\n+\trs6000_savres_strategy, rs6000_stack_info, debug_stack_info,\n+\trs6000_return_addr, rs6000_decl_ok_for_sibcall,\n+\trs6000_function_ok_for_sibcall, rs6000_ra_ever_killed,\n+\trs6000_emit_load_toc_table, rs6000_emit_eh_reg_restore, uses_TOC,\n+\tcreate_TOC_reference, rs6000_aix_asm_output_dwarf_table_ref,\n+\trs6000_emit_stack_tie, rs6000_emit_allocate_stack_1,\n+\tget_stack_clash_protection_probe_interval,\n+\tget_stack_clash_protection_guard_size,\n+\trs6000_emit_probe_stack_range_stack_clash, rs6000_emit_allocate_stack,\n+\trs6000_emit_probe_stack_range, output_probe_stack_range_1,\n+\tinteresting_frame_related_regno, output_probe_stack_range_stack_clash,\n+\toutput_probe_stack_range, rs6000_frame_related, generate_set_vrsave,\n+\tgen_frame_set, gen_frame_load, gen_frame_store, emit_frame_save,\n+\tgen_frame_mem_offset, rs6000_savres_routine_name,\n+\trs6000_savres_routine_sym, rs6000_emit_stack_reset,\n+\tptr_regno_for_savres, rs6000_emit_savres_rtx,\n+\trs6000_emit_prologue_move_from_cr, split_stack_arg_pointer_used_p,\n+\trs6000_global_entry_point_prologue_needed_p,\n+\trs6000_get_separate_components, rs6000_components_for_bb,\n+\trs6000_disqualify_components, rs6000_emit_prologue_components,\n+\trs6000_emit_epilogue_components, rs6000_set_handled_components,\n+\temit_vrsave_prologue, emit_split_stack_prologue, rs6000_emit_prologue,\n+\trs6000_output_savres_externs, rs6000_output_function_prologue,\n+\trs6000_keep_leaf_when_profiled, load_cr_save, restore_saved_cr,\n+\tload_lr_save, restore_saved_lr, add_crlr_cfa_restore,\n+\toffset_below_red_zone_p, emit_cfa_restores, rs6000_emit_epilogue,\n+\trs6000_output_function_epilogue, gen_add3_const,\n+\trs6000_expand_split_stack_prologue, rs6000_live_on_entry,\n+\trs6000_split_stack_space_check, rs6000_save_toc_in_prologue_p): Moved\n+\tto rs6000-logue.c.\n+\t(machine_function): Moved to rs6000.h.\n+\t(rs6000_stack_t, ALTIVEC_REG_BIT, quad_address_offset_p) Moved to\n+\trs6000-internal.h.\n+\t* config/rs6000/rs6000-logue.c(stack_info, rs6000_pic_labelno,\n+\tsavres_routine_syms, savres_routine_name, morestack_ref,\n+\trs6000_init_machine_status, save_reg_p, first_reg_to_save,\n+\tfirst_fp_reg_to_save, first_altivec_reg_to_save, compute_vrsave_mask,\n+\tcompute_save_world_info, is_altivec_return_reg, fixed_reg_p,\n+\trs6000_savres_strategy, rs6000_stack_info, debug_stack_info,\n+\trs6000_return_addr, rs6000_decl_ok_for_sibcall,\n+\trs6000_function_ok_for_sibcall, rs6000_ra_ever_killed,\n+\trs6000_emit_load_toc_table, rs6000_emit_eh_reg_restore, uses_TOC,\n+\tcreate_TOC_reference, rs6000_aix_asm_output_dwarf_table_ref,\n+\trs6000_emit_stack_tie, rs6000_emit_allocate_stack_1,\n+\tget_stack_clash_protection_probe_interval,\n+\tget_stack_clash_protection_guard_size,\n+\trs6000_emit_probe_stack_range_stack_clash, rs6000_emit_allocate_stack,\n+\trs6000_emit_probe_stack_range, output_probe_stack_range_1,\n+\tinteresting_frame_related_regno, output_probe_stack_range_stack_clash,\n+\toutput_probe_stack_range, rs6000_frame_related, generate_set_vrsave,\n+\tgen_frame_set, gen_frame_load, gen_frame_store, emit_frame_save,\n+\tgen_frame_mem_offset, rs6000_savres_routine_name,\n+\trs6000_savres_routine_sym, rs6000_emit_stack_reset,\n+\tptr_regno_for_savres, rs6000_emit_savres_rtx,\n+\trs6000_emit_prologue_move_from_cr, split_stack_arg_pointer_used_p,\n+\trs6000_global_entry_point_prologue_needed_p,\n+\trs6000_get_separate_components, rs6000_components_for_bb,\n+\trs6000_disqualify_components, rs6000_emit_prologue_components,\n+\trs6000_emit_epilogue_components, rs6000_set_handled_components,\n+\temit_vrsave_prologue, emit_split_stack_prologue, rs6000_emit_prologue,\n+\trs6000_output_savres_externs, rs6000_output_function_prologue,\n+\trs6000_keep_leaf_when_profiled, load_cr_save, restore_saved_cr,\n+\tload_lr_save, restore_saved_lr, add_crlr_cfa_restore,\n+\toffset_below_red_zone_p, emit_cfa_restores, rs6000_emit_epilogue,\n+\trs6000_output_function_epilogue, gen_add3_const,\n+\trs6000_expand_split_stack_prologue, rs6000_live_on_entry,\n+\trs6000_split_stack_space_check, rs6000_save_toc_in_prologue_p): Moved\n+\tto here from rs6000.c.\n+\t* config/rs6000/rs6000.h (machine_function): Moved to here from rs6000.c.\n+\t* config/rs6000/rs6000-internal.h: (rs6000_stack_t, ALTIVEC_REG_BIT,\n+\tquad_address_offset_p) Moved to here from rs6000.c.\n+\t* config/rs6000/t-rs6000: Add new source file rs6000-logue.c.\n+\t* config/config.gcc: Add new source file rs6000-logue.c to garbage\n+\tcollector.\n+\n 2019-06-25  Martin Liska  <mliska@suse.cz>\n \n \t* hash-table.c (hashtab_chk_error): Move here from ..."}, {"sha": "fd065c48a558eb20a0aa77e1ec7e4ae3de1848ef", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2c04f8476a8f00a3360bb468903c1343f126467f", "patch": "@@ -499,7 +499,7 @@ or1k*-*-*)\n \t;;\n powerpc*-*-*)\n \tcpu_type=rs6000\n-\textra_objs=\"rs6000-string.o rs6000-p8swap.o\"\n+\textra_objs=\"rs6000-string.o rs6000-p8swap.o rs6000-logue.o\"\n \textra_headers=\"ppc-asm.h altivec.h htmintrin.h htmxlintrin.h\"\n \textra_headers=\"${extra_headers} bmi2intrin.h bmiintrin.h\"\n \textra_headers=\"${extra_headers} xmmintrin.h mm_malloc.h emmintrin.h\"\n@@ -524,7 +524,7 @@ riscv*)\n \t;;\n rs6000*-*-*)\n \textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\"\n-\textra_objs=\"rs6000-string.o rs6000-p8swap.o\"\n+\textra_objs=\"rs6000-string.o rs6000-p8swap.o rs6000-logue.o\"\n \t;;\n sparc*-*-*)\n \tcpu_type=sparc\n@@ -2693,6 +2693,7 @@ powerpc*-*-linux*)\n \textra_options=\"${extra_options} rs6000/sysv4.opt\"\n \ttmake_file=\"${tmake_file} rs6000/t-fprules rs6000/t-ppccomm\"\n \textra_objs=\"$extra_objs rs6000-linux.o\"\n+\ttarget_gtfiles=\"$target_gtfiles \\$(srcdir)/config/rs6000/rs6000-logue.c\"\n \tcase ${target} in\n \t    powerpc*le-*-*)\n \t\ttm_file=\"${tm_file} rs6000/sysv4le.h\" ;;"}, {"sha": "a1acb663a0e4ac9cc9254bb1cff692f1de191c17", "filename": "gcc/config/rs6000/rs6000-internal.h", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-internal.h?ref=2c04f8476a8f00a3360bb468903c1343f126467f", "patch": "@@ -0,0 +1,113 @@\n+/* Internal to rs6000 type, variable, and function declarations and\n+   definitons shared between the various rs6000 source files.\n+   Copyright (C) 1991-2019 Free Software Foundation, Inc.\n+   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_RS6000_INTERNAL_H\n+#define GCC_RS6000_INTERNAL_H\n+\n+/* Structure used to define the rs6000 stack */\n+typedef struct rs6000_stack {\n+  int reload_completed;\t\t/* stack info won't change from here on */\n+  int first_gp_reg_save;\t/* first callee saved GP register used */\n+  int first_fp_reg_save;\t/* first callee saved FP register used */\n+  int first_altivec_reg_save;\t/* first callee saved AltiVec register used */\n+  int lr_save_p;\t\t/* true if the link reg needs to be saved */\n+  int cr_save_p;\t\t/* true if the CR reg needs to be saved */\n+  unsigned int vrsave_mask;\t/* mask of vec registers to save */\n+  int push_p;\t\t\t/* true if we need to allocate stack space */\n+  int calls_p;\t\t\t/* true if the function makes any calls */\n+  int world_save_p;\t\t/* true if we're saving *everything*:\n+\t\t\t\t   r13-r31, cr, f14-f31, vrsave, v20-v31  */\n+  enum rs6000_abi abi;\t\t/* which ABI to use */\n+  int gp_save_offset;\t\t/* offset to save GP regs from initial SP */\n+  int fp_save_offset;\t\t/* offset to save FP regs from initial SP */\n+  int altivec_save_offset;\t/* offset to save AltiVec regs from initial SP */\n+  int lr_save_offset;\t\t/* offset to save LR from initial SP */\n+  int cr_save_offset;\t\t/* offset to save CR from initial SP */\n+  int vrsave_save_offset;\t/* offset to save VRSAVE from initial SP */\n+  int varargs_save_offset;\t/* offset to save the varargs registers */\n+  int ehrd_offset;\t\t/* offset to EH return data */\n+  int ehcr_offset;\t\t/* offset to EH CR field data */\n+  int reg_size;\t\t\t/* register size (4 or 8) */\n+  HOST_WIDE_INT vars_size;\t/* variable save area size */\n+  int parm_size;\t\t/* outgoing parameter size */\n+  int save_size;\t\t/* save area size */\n+  int fixed_size;\t\t/* fixed size of stack frame */\n+  int gp_size;\t\t\t/* size of saved GP registers */\n+  int fp_size;\t\t\t/* size of saved FP registers */\n+  int altivec_size;\t\t/* size of saved AltiVec registers */\n+  int cr_size;\t\t\t/* size to hold CR if not in fixed area */\n+  int vrsave_size;\t\t/* size to hold VRSAVE */\n+  int altivec_padding_size;\t/* size of altivec alignment padding */\n+  HOST_WIDE_INT total_size;\t/* total bytes allocated for stack */\n+  int savres_strategy;\n+} rs6000_stack_t;\n+\n+\n+extern int need_toc_init;\n+extern char toc_label_name[10];\n+extern int rs6000_pic_labelno;\n+extern section *toc_section;\n+\n+#ifdef USING_ELFOS_H\n+extern const char *rs6000_machine;\n+#endif\n+\n+\n+/* The VRSAVE bitmask puts bit %v0 as the most significant bit.  */\n+#define ALTIVEC_REG_BIT(REGNO) (0x80000000 >> ((REGNO) - FIRST_ALTIVEC_REGNO))\n+\n+\n+/* Declare functions in rs6000-logue.c or called in rs6000.c\n+   from rs6000-logue.c  */\n+\n+extern int uses_TOC (void);\n+extern bool rs6000_global_entry_point_needed_p (void);\n+extern void rs6000_output_function_prologue (FILE *file);\n+extern void rs6000_output_function_epilogue (FILE *file);\n+extern bool rs6000_function_ok_for_sibcall (tree decl, tree exp);\n+extern sbitmap rs6000_get_separate_components (void);\n+extern sbitmap rs6000_components_for_bb (basic_block bb);\n+extern void rs6000_disqualify_components (sbitmap components, edge e,\n+\t\t\t\t\t  sbitmap edge_components,\n+\t\t\t\t\t  bool /*is_prologue*/);\n+extern void rs6000_emit_prologue_components (sbitmap components);\n+extern void rs6000_emit_epilogue_components (sbitmap components);\n+extern void rs6000_set_handled_components (sbitmap components);\n+extern rs6000_stack_t * rs6000_stack_info (void);\n+extern rtx create_TOC_reference (rtx symbol, rtx largetoc_reg);\n+extern rtx rs6000_got_sym (void);\n+extern struct machine_function *rs6000_init_machine_status (void);\n+extern bool save_reg_p (int reg);\n+extern const char * rs6000_machine_from_flags (void);\n+extern void emit_asm_machine (void);\n+extern bool rs6000_global_entry_point_prologue_needed_p (void);\n+\n+/* Return true if the OFFSET is valid for the quad address instructions that\n+   use d-form (register + offset) addressing.  */\n+\n+static inline bool\n+quad_address_offset_p (HOST_WIDE_INT offset)\n+{\n+  return (IN_RANGE (offset, -32768, 32767) && ((offset) & 0xf) == 0);\n+}\n+\n+\n+#endif"}, {"sha": "9df4b5aa6ad3f3a062f09d624ad13fe7d599315b", "filename": "gcc/config/rs6000/rs6000-logue.c", "status": "added", "additions": 5542, "deletions": 0, "changes": 5542, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-logue.c?ref=2c04f8476a8f00a3360bb468903c1343f126467f"}, {"sha": "e52a97121598acfe5782fbbcb8afcdc46bf94c57", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 4286, "changes": 4294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2c04f8476a8f00a3360bb468903c1343f126467f"}, {"sha": "a2111719dcdd4eb531a9d5019055b435a5786f3d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=2c04f8476a8f00a3360bb468903c1343f126467f", "patch": "@@ -2486,6 +2486,40 @@ enum rs6000_builtin_type_index\n extern GTY(()) tree rs6000_builtin_types[RS6000_BTI_MAX];\n extern GTY(()) tree rs6000_builtin_decls[RS6000_BUILTIN_COUNT];\n \n+#ifndef USED_FOR_TARGET\n+/* A C structure for machine-specific, per-function data.\n+   This is added to the cfun structure.  */\n+typedef struct GTY(()) machine_function\n+{\n+  /* Flags if __builtin_return_address (n) with n >= 1 was used.  */\n+  int ra_needs_full_frame;\n+  /* Flags if __builtin_return_address (0) was used.  */\n+  int ra_need_lr;\n+  /* Cache lr_save_p after expansion of builtin_eh_return.  */\n+  int lr_save_state;\n+  /* Whether we need to save the TOC to the reserved stack location in the\n+     function prologue.  */\n+  bool save_toc_in_prologue;\n+  /* Offset from virtual_stack_vars_rtx to the start of the ABI_V4\n+     varargs save area.  */\n+  HOST_WIDE_INT varargs_save_offset;\n+  /* Alternative internal arg pointer for -fsplit-stack.  */\n+  rtx split_stack_arg_pointer;\n+  bool split_stack_argp_used;\n+  /* Flag if r2 setup is needed with ELFv2 ABI.  */\n+  bool r2_setup_needed;\n+  /* The number of components we use for separate shrink-wrapping.  */\n+  int n_components;\n+  /* The components already handled by separate shrink-wrapping, which should\n+     not be considered by the prologue and epilogue.  */\n+  bool gpr_is_wrapped_separately[32];\n+  bool fpr_is_wrapped_separately[32];\n+  bool lr_is_wrapped_separately;\n+  bool toc_is_wrapped_separately;\n+} machine_function;\n+#endif\n+\n+\n #define TARGET_SUPPORTS_WIDE_INT 1\n \n #if (GCC_VERSION >= 3000)"}, {"sha": "c689d5185d40421044e37d7c2ce043d8157ea0df", "filename": "gcc/config/rs6000/t-rs6000", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c04f8476a8f00a3360bb468903c1343f126467f/gcc%2Fconfig%2Frs6000%2Ft-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-rs6000?ref=2c04f8476a8f00a3360bb468903c1343f126467f", "patch": "@@ -39,6 +39,10 @@ rs6000-d.o: $(srcdir)/config/rs6000/rs6000-d.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+rs6000-logue.o: $(srcdir)/config/rs6000/rs6000-logue.c\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n $(srcdir)/config/rs6000/rs6000-tables.opt: $(srcdir)/config/rs6000/genopt.sh \\\n   $(srcdir)/config/rs6000/rs6000-cpus.def\n \t$(SHELL) $(srcdir)/config/rs6000/genopt.sh $(srcdir)/config/rs6000 > \\"}]}