{"sha": "95adab8e110925c9f13fb4ff16afb942a62c2af6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVhZGFiOGUxMTA5MjVjOWYxM2ZiNGZmMTZhZmI5NDJhNjJjMmFmNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-08-21T19:21:28Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-08-21T19:21:28Z"}, "message": "Warning fixes:\n\n\t* mips.c (block_move_loop, expand_block_move,\n\tfunction_arg_partial_nregs, save_restore_insns, function_prologue,\n\tmips_expand_prologue, RA_MASK): Avoid using the `U' integer\n\tconstant suffix.\n\t(function_arg_advance, function_arg): Match argument to format\n\tspecifier `%p'.\n\nFrom-SVN: r35855", "tree": {"sha": "35e85ac8e63f862d773960ed4ddcfdacf5d23ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35e85ac8e63f862d773960ed4ddcfdacf5d23ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95adab8e110925c9f13fb4ff16afb942a62c2af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95adab8e110925c9f13fb4ff16afb942a62c2af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95adab8e110925c9f13fb4ff16afb942a62c2af6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95adab8e110925c9f13fb4ff16afb942a62c2af6/comments", "author": null, "committer": null, "parents": [{"sha": "cc0dd8af227de2ecc3ab657fe8b68792b381a644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0dd8af227de2ecc3ab657fe8b68792b381a644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc0dd8af227de2ecc3ab657fe8b68792b381a644"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "0f09fa1628cb2fd9fb8171b60a6bfde4cb8120ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95adab8e110925c9f13fb4ff16afb942a62c2af6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95adab8e110925c9f13fb4ff16afb942a62c2af6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95adab8e110925c9f13fb4ff16afb942a62c2af6", "patch": "@@ -1,3 +1,12 @@\n+2000-08-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* mips.c (block_move_loop, expand_block_move,\n+\tfunction_arg_partial_nregs, save_restore_insns, function_prologue,\n+\tmips_expand_prologue, RA_MASK): Avoid using the `U' integer\n+\tconstant suffix.\n+\t(function_arg_advance, function_arg): Match argument to format\n+\tspecifier `%p'.\n+\n 2000-08-21  Nix  <nix@esperi.demon.co.uk>\n \n \t* gcc.c (do_spec_1): Implement %j spec flag."}, {"sha": "629fac1fd301a83740dea70326b3bb2fe0b616f8", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95adab8e110925c9f13fb4ff16afb942a62c2af6/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95adab8e110925c9f13fb4ff16afb942a62c2af6/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=95adab8e110925c9f13fb4ff16afb942a62c2af6", "patch": "@@ -3183,7 +3183,7 @@ block_move_loop (dest_reg, src_reg, bytes, align, orig_dest, orig_src)\n   rtx bytes_rtx;\n   int leftover;\n \n-  if (bytes < 2U * MAX_MOVE_BYTES)\n+  if (bytes < (unsigned)2 * MAX_MOVE_BYTES)\n     abort ();\n \n   leftover = bytes % MAX_MOVE_BYTES;\n@@ -3302,11 +3302,11 @@ expand_block_move (operands)\n   if (TARGET_MEMCPY)\n     block_move_call (dest_reg, src_reg, bytes_rtx);\n \n-  else if (constp && bytes <= 2U * MAX_MOVE_BYTES\n+  else if (constp && bytes <= (unsigned)2 * MAX_MOVE_BYTES\n \t   && align == (unsigned) UNITS_PER_WORD)\n     move_by_pieces (orig_dest, orig_src, bytes, align * BITS_PER_WORD);\n \t\n-  else if (constp && bytes <= 2U * MAX_MOVE_BYTES)\n+  else if (constp && bytes <= (unsigned)2 * MAX_MOVE_BYTES)\n     emit_insn (gen_movstrsi_internal (change_address (orig_dest, BLKmode,\n \t\t\t\t\t\t      dest_reg),\n \t\t\t\t      change_address (orig_src, BLKmode,\n@@ -3786,7 +3786,7 @@ function_arg_advance (cum, mode, type, named)\n \t       \"function_adv({gp reg found = %d, arg # = %2d, words = %2d}, %4s, \",\n \t       cum->gp_reg_found, cum->arg_number, cum->arg_words,\n \t       GET_MODE_NAME (mode));\n-      fprintf (stderr, HOST_PTR_PRINTF, type);\n+      fprintf (stderr, HOST_PTR_PRINTF, (const PTR) type);\n       fprintf (stderr, \", %d )\\n\\n\", named);\n     }\n \n@@ -3869,7 +3869,7 @@ function_arg (cum, mode, type, named)\n \t       \"function_arg( {gp reg found = %d, arg # = %2d, words = %2d}, %4s, \",\n \t       cum->gp_reg_found, cum->arg_number, cum->arg_words,\n \t       GET_MODE_NAME (mode));\n-      fprintf (stderr, HOST_PTR_PRINTF, type);\n+      fprintf (stderr, HOST_PTR_PRINTF, (const PTR) type);\n       fprintf (stderr, \", %d ) = \", named);\n     }\n   \n@@ -4130,7 +4130,8 @@ function_arg_partial_nregs (cum, mode, type, named)\n       return MAX_ARGS_IN_REGISTERS - cum->arg_words;\n     }\n \n-  else if (mode == DImode && cum->arg_words == MAX_ARGS_IN_REGISTERS - 1U\n+  else if (mode == DImode\n+\t   && cum->arg_words == MAX_ARGS_IN_REGISTERS - (unsigned)1\n \t   && ! TARGET_64BIT && mips_abi != ABI_EABI)\n     {\n       if (TARGET_DEBUG_E_MODE)\n@@ -6418,7 +6419,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t\t  && GET_MODE (base_reg_rtx) == SImode)\n \t\t{\n \t\t  insn = emit_move_insn (base_reg_rtx,\n-\t\t\t\t\t GEN_INT (gp_offset & 0xffff0000U));\n+\t\t\t\t\t GEN_INT (gp_offset & 0xffff0000));\n \t\t  if (store_p)\n \t\t    RTX_FRAME_RELATED_P (insn) = 1;\n \t\t  insn\n@@ -6636,7 +6637,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t\t  && GET_MODE (base_reg_rtx) == SImode)\n \t\t{\n \t\t  insn = emit_move_insn (base_reg_rtx,\n-\t\t\t\t\t GEN_INT (fp_offset & 0xffff0000U));\n+\t\t\t\t\t GEN_INT (fp_offset & 0xffff0000));\n \t\t  if (store_p)\n \t\t    RTX_FRAME_RELATED_P (insn) = 1;\n \t\t  insn = emit_insn (gen_iorsi3 (base_reg_rtx, base_reg_rtx,\n@@ -6840,7 +6841,7 @@ function_prologue (file, size)\n \t    continue;\n \t  if (GET_MODE_SIZE (GET_MODE (dest)) == (unsigned) UNITS_PER_WORD)\n \t    ;\n-\t  else if (GET_MODE_SIZE (GET_MODE (dest)) == 2U * UNITS_PER_WORD\n+\t  else if (GET_MODE_SIZE (GET_MODE (dest)) == (unsigned)2 * UNITS_PER_WORD\n \t\t   && REGNO (src) < GP_REG_FIRST + 7)\n \t    ;\n \t  else\n@@ -7179,7 +7180,7 @@ mips_expand_prologue ()\n \t\t  && GET_MODE (tmp_rtx) == SImode)\n \t\t{\n \t\t  insn = emit_move_insn (tmp_rtx,\n-\t\t\t\t\t GEN_INT (tsize & 0xffff0000U));\n+\t\t\t\t\t GEN_INT (tsize & 0xffff0000));\n \t\t  RTX_FRAME_RELATED_P (insn) = 1;\n \t\t  insn = emit_insn (gen_iorsi3 (tmp_rtx, tmp_rtx,\n \t\t\t\t\t\tGEN_INT (tsize & 0x0000ffff)));\n@@ -7298,7 +7299,7 @@ mips_expand_prologue ()\n /* Do any necessary cleanup after a function to restore stack, frame,\n    and regs. */\n \n-#define RA_MASK ((unsigned long) 0x80000000U)\t/* 1 << 31 */\n+#define RA_MASK 0x80000000L\t/* 1 << 31 */\n #define PIC_OFFSET_TABLE_MASK (1 << (PIC_OFFSET_TABLE_REGNUM - GP_REG_FIRST))\n \n void"}]}