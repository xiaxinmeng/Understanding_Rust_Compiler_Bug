{"sha": "99e9cec839abe5e78575545ae648f02508307c9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllOWNlYzgzOWFiZTVlNzg1NzU1NDVhZTY0OGYwMjUwODMwN2M5YQ==", "commit": {"author": {"name": "Shiva Chen", "email": "shiva0217@gmail.com", "date": "2015-06-09T08:15:23Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-06-09T08:15:23Z"}, "message": "[GCC, ARM] armv8 linux toolchain asan testcase fail due to stl missing conditional code\n\nOn behalf of Shiva Chen\n\n2015-06-09  Shiva Chen  <shiva0217@gmail.com>\n\n\t* sync.md (atomic_load<mode>): Add conditional code for lda/ldr\n\t(atomic_store<mode>): Likewise.\n\n2015-06-09  Shiva Chen  <shiva0217@gmail.com>\n\n\t* gcc.target/arm/stl-cond.c: New test.\n\nFrom-SVN: r224269", "tree": {"sha": "4baff2f0e514fad3304e217366d87a372fae178b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4baff2f0e514fad3304e217366d87a372fae178b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99e9cec839abe5e78575545ae648f02508307c9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e9cec839abe5e78575545ae648f02508307c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e9cec839abe5e78575545ae648f02508307c9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e9cec839abe5e78575545ae648f02508307c9a/comments", "author": {"login": "ShivaChen", "id": 32083954, "node_id": "MDQ6VXNlcjMyMDgzOTU0", "avatar_url": "https://avatars.githubusercontent.com/u/32083954?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ShivaChen", "html_url": "https://github.com/ShivaChen", "followers_url": "https://api.github.com/users/ShivaChen/followers", "following_url": "https://api.github.com/users/ShivaChen/following{/other_user}", "gists_url": "https://api.github.com/users/ShivaChen/gists{/gist_id}", "starred_url": "https://api.github.com/users/ShivaChen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ShivaChen/subscriptions", "organizations_url": "https://api.github.com/users/ShivaChen/orgs", "repos_url": "https://api.github.com/users/ShivaChen/repos", "events_url": "https://api.github.com/users/ShivaChen/events{/privacy}", "received_events_url": "https://api.github.com/users/ShivaChen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9c16ed274d6390a46a7d2e4466315d9c70f23fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9c16ed274d6390a46a7d2e4466315d9c70f23fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9c16ed274d6390a46a7d2e4466315d9c70f23fb"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "95a6df4e3fa01877c92c4bc39b231ce60e160cee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e9cec839abe5e78575545ae648f02508307c9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e9cec839abe5e78575545ae648f02508307c9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99e9cec839abe5e78575545ae648f02508307c9a", "patch": "@@ -1,3 +1,8 @@\n+2015-06-09  Shiva Chen  <shiva0217@gmail.com>\n+\n+\t* sync.md (atomic_load<mode>): Add conditional code for lda/ldr\n+\t(atomic_store<mode>): Likewise.\n+\n 2015-06-09  Richard Biener  <rguenther@suse.de>\n \n \t* cfgloop.c (get_loop_body_in_bfs_order): Fix assert."}, {"sha": "75dd52ea3aa94a227c62b6f77ee78ebf0eee61d5", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e9cec839abe5e78575545ae648f02508307c9a/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e9cec839abe5e78575545ae648f02508307c9a/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=99e9cec839abe5e78575545ae648f02508307c9a", "patch": "@@ -75,11 +75,12 @@\n   {\n     enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n     if (is_mm_relaxed (model) || is_mm_consume (model) || is_mm_release (model))\n-      return \\\"ldr<sync_sfx>\\\\t%0, %1\\\";\n+      return \\\"ldr%(<sync_sfx>%)\\\\t%0, %1\\\";\n     else\n-      return \\\"lda<sync_sfx>\\\\t%0, %1\\\";\n+      return \\\"lda<sync_sfx>%?\\\\t%0, %1\\\";\n   }\n-)\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")])\n \n (define_insn \"atomic_store<mode>\"\n   [(set (match_operand:QHSI 0 \"memory_operand\" \"=Q\")\n@@ -91,11 +92,12 @@\n   {\n     enum memmodel model = memmodel_from_int (INTVAL (operands[2]));\n     if (is_mm_relaxed (model) || is_mm_consume (model) || is_mm_acquire (model))\n-      return \\\"str<sync_sfx>\\t%1, %0\\\";\n+      return \\\"str%(<sync_sfx>%)\\t%1, %0\\\";\n     else\n-      return \\\"stl<sync_sfx>\\t%1, %0\\\";\n+      return \\\"stl<sync_sfx>%?\\t%1, %0\\\";\n   }\n-)\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")])\n \n ;; Note that ldrd and vldr are *not* guaranteed to be single-copy atomic,\n ;; even for a 64-bit aligned address.  Instead we use a ldrexd unparied"}, {"sha": "a51682a380105b00a53dc837e8d8e3de054fd9e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e9cec839abe5e78575545ae648f02508307c9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e9cec839abe5e78575545ae648f02508307c9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99e9cec839abe5e78575545ae648f02508307c9a", "patch": "@@ -1,3 +1,7 @@\n+2015-06-09  Shiva Chen  <shiva0217@gmail.com>\n+\n+\t* gcc.target/arm/stl-cond.c: New test.\n+\n 2015-06-09  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/66413"}, {"sha": "de14bb580b82eaf8ca0a3e6e11f842c4baf5c756", "filename": "gcc/testsuite/gcc.target/arm/stl-cond.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e9cec839abe5e78575545ae648f02508307c9a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fstl-cond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e9cec839abe5e78575545ae648f02508307c9a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fstl-cond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fstl-cond.c?ref=99e9cec839abe5e78575545ae648f02508307c9a", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_arm_ok } */ \n+/* { dg-require-effective-target arm_arch_v8a_ok } */\n+/* { dg-options \"-O2 -marm\" } */\n+/* { dg-add-options arm_arch_v8a } */\n+\n+struct backtrace_state\n+{\n+  int threaded;\n+  int lock_alloc;\n+};\n+\n+void foo (struct backtrace_state *state)\n+{\n+  if (state->threaded)\n+    __sync_lock_release (&state->lock_alloc);\n+}\n+\n+/* { dg-final { scan-assembler \"stlne\" } } */"}]}