{"sha": "59bc434a3327ce58f7afcd1e9209eeb2da714960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTliYzQzNGEzMzI3Y2U1OGY3YWZjZDFlOTIwOWVlYjJkYTcxNDk2MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-09-27T20:14:24Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-09-27T20:14:24Z"}, "message": "re PR c++/88203 (assert does not compile with OpenMP's pragma omp parallel for default(none))\n\n\tPR c++/88203\nc-family/\n\t* c-common.h (c_omp_predefined_variable): Declare.\n\t* c-omp.c (c_omp_predefined_variable): New function.\n\t(c_omp_predetermined_sharing): Return OMP_CLAUSE_DEFAULT_SHARED\n\tfor predefined variables.\nc/\n\t* c-parser.c (c_parser_predefined_identifier): New function.\n\t(c_parser_postfix_expression): Use it.\n\t(c_parser_omp_variable_list): Parse predefined identifiers.\n\t* c-typeck.c (c_finish_omp_clauses): Allow predefined variables\n\tin shared and firstprivate clauses, even when they are predetermined\n\tshared.\ncp/\n\t* parser.c (cp_parser_omp_var_list_no_open): Parse predefined\n\tvariables.\n\t* semantics.c (finish_omp_clauses): Allow predefined variables in\n\tshared and firstprivate clauses, even when they are predetermined\n\tshared.\n\t* cp-gimplify.c (cxx_omp_predetermined_sharing_1): Return\n\tOMP_CLAUSE_DEFAULT_SHARED for predefined variables.\ntestsuite/\n\t* c-c++-common/gomp/pr88203-1.c: New test.\n\t* c-c++-common/gomp/pr88203-2.c: New test.\n\t* c-c++-common/gomp/pr88203-3.c: New test.\n\nFrom-SVN: r276212", "tree": {"sha": "c3c66425e42402e1f978eae510ebd6cb4a617da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3c66425e42402e1f978eae510ebd6cb4a617da7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59bc434a3327ce58f7afcd1e9209eeb2da714960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59bc434a3327ce58f7afcd1e9209eeb2da714960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59bc434a3327ce58f7afcd1e9209eeb2da714960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59bc434a3327ce58f7afcd1e9209eeb2da714960/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00798c58439037e3de959c3a003d6f4251eb93c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00798c58439037e3de959c3a003d6f4251eb93c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00798c58439037e3de959c3a003d6f4251eb93c6"}], "stats": {"total": 340, "additions": 302, "deletions": 38}, "files": [{"sha": "9334ed5df3365c06dbdee560e353001258f9b9c9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -1,3 +1,11 @@\n+2019-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88203\n+\t* c-common.h (c_omp_predefined_variable): Declare.\n+\t* c-omp.c (c_omp_predefined_variable): New function.\n+\t(c_omp_predetermined_sharing): Return OMP_CLAUSE_DEFAULT_SHARED\n+\tfor predefined variables.\n+\n 2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-common.h (build_function_call_vec): Take the original"}, {"sha": "1e13aaa16fc26922b3732f8f0523d78cad8d1e6d", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -1187,6 +1187,7 @@ extern void c_omp_split_clauses (location_t, enum tree_code, omp_clause_mask,\n \t\t\t\t tree, tree *);\n extern tree c_omp_declare_simd_clauses_to_numbers (tree, tree);\n extern void c_omp_declare_simd_clauses_to_decls (tree, tree);\n+extern bool c_omp_predefined_variable (tree);\n extern enum omp_clause_default_kind c_omp_predetermined_sharing (tree);\n \n /* Return next tree in the chain for chain_next walking of tree nodes.  */"}, {"sha": "0048289b6915d9778dfb968c4e79c5b218b8c85c", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -2083,6 +2083,25 @@ c_omp_declare_simd_clauses_to_decls (tree fndecl, tree clauses)\n       }\n }\n \n+/* Return true for __func__ and similar function-local predefined\n+   variables (which are in OpenMP predetermined shared, allowed in\n+   shared/firstprivate clauses).  */\n+\n+bool\n+c_omp_predefined_variable (tree decl)\n+{\n+  if (VAR_P (decl)\n+      && DECL_ARTIFICIAL (decl)\n+      && TREE_READONLY (decl)\n+      && TREE_STATIC (decl)\n+      && DECL_NAME (decl)\n+      && (DECL_NAME (decl) == ridpointers[RID_C99_FUNCTION_NAME]\n+\t  || DECL_NAME (decl) == ridpointers[RID_FUNCTION_NAME]\n+\t  || DECL_NAME (decl) == ridpointers[RID_PRETTY_FUNCTION_NAME]))\n+    return true;\n+  return false;\n+}\n+\n /* True if OpenMP sharing attribute of DECL is predetermined.  */\n \n enum omp_clause_default_kind\n@@ -2096,5 +2115,8 @@ c_omp_predetermined_sharing (tree decl)\n       && INTEGRAL_TYPE_P (TREE_TYPE (decl)))\n     return OMP_CLAUSE_DEFAULT_SHARED;\n \n+  if (c_omp_predefined_variable (decl))\n+    return OMP_CLAUSE_DEFAULT_SHARED;\n+\n   return OMP_CLAUSE_DEFAULT_UNSPECIFIED;\n }"}, {"sha": "fa0bbc83a1eb6d9fbbdb41defa88693d178b2e3d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -1,3 +1,13 @@\n+2019-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88203\n+\t* c-parser.c (c_parser_predefined_identifier): New function.\n+\t(c_parser_postfix_expression): Use it.\n+\t(c_parser_omp_variable_list): Parse predefined identifiers.\n+\t* c-typeck.c (c_finish_omp_clauses): Allow predefined variables\n+\tin shared and firstprivate clauses, even when they are predetermined\n+\tshared.\n+\n 2019-09-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-typeck.c (build_function_call_vec): Take the original function"}, {"sha": "c8afab2bc2ea4d549cb842156fb64a517a67fdda", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 66, "deletions": 38, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -8049,6 +8049,41 @@ enum tgmath_parm_kind\n     tgmath_fixed, tgmath_real, tgmath_complex\n   };\n \n+/* Helper function for c_parser_postfix_expression.  Parse predefined\n+   identifiers.  */\n+\n+static struct c_expr\n+c_parser_predefined_identifier (c_parser *parser)\n+{\n+  location_t loc = c_parser_peek_token (parser)->location;\n+  switch (c_parser_peek_token (parser)->keyword)\n+    {\n+    case RID_FUNCTION_NAME:\n+      pedwarn (loc, OPT_Wpedantic, \"ISO C does not support %qs predefined \"\n+\t       \"identifier\", \"__FUNCTION__\");\n+      break;\n+    case RID_PRETTY_FUNCTION_NAME:\n+      pedwarn (loc, OPT_Wpedantic, \"ISO C does not support %qs predefined \"\n+\t       \"identifier\", \"__PRETTY_FUNCTION__\");\n+      break;\n+    case RID_C99_FUNCTION_NAME:\n+      pedwarn_c90 (loc, OPT_Wpedantic, \"ISO C90 does not support \"\n+\t\t   \"%<__func__%> predefined identifier\");\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  struct c_expr expr;\n+  expr.original_code = ERROR_MARK;\n+  expr.original_type = NULL;\n+  expr.value = fname_decl (loc, c_parser_peek_token (parser)->keyword,\n+\t\t\t   c_parser_peek_token (parser)->value);\n+  set_c_expr_source_range (&expr, loc, loc);\n+  c_parser_consume_token (parser);\n+  return expr;\n+}\n+\n /* Parse a postfix expression (C90 6.3.1-6.3.2, C99 6.5.1-6.5.2,\n    C11 6.5.1-6.5.2).  Compound literals aren't handled here; callers have to\n    call c_parser_postfix_expression_after_paren_type on encountering them.\n@@ -8269,31 +8304,9 @@ c_parser_postfix_expression (c_parser *parser)\n       switch (c_parser_peek_token (parser)->keyword)\n \t{\n \tcase RID_FUNCTION_NAME:\n-\t  pedwarn (loc, OPT_Wpedantic,  \"ISO C does not support \"\n-\t\t   \"%<__FUNCTION__%> predefined identifier\");\n-\t  expr.value = fname_decl (loc,\n-\t\t\t\t   c_parser_peek_token (parser)->keyword,\n-\t\t\t\t   c_parser_peek_token (parser)->value);\n-\t  set_c_expr_source_range (&expr, loc, loc);\n-\t  c_parser_consume_token (parser);\n-\t  break;\n \tcase RID_PRETTY_FUNCTION_NAME:\n-\t  pedwarn (loc, OPT_Wpedantic,  \"ISO C does not support \"\n-\t\t   \"%<__PRETTY_FUNCTION__%> predefined identifier\");\n-\t  expr.value = fname_decl (loc,\n-\t\t\t\t   c_parser_peek_token (parser)->keyword,\n-\t\t\t\t   c_parser_peek_token (parser)->value);\n-\t  set_c_expr_source_range (&expr, loc, loc);\n-\t  c_parser_consume_token (parser);\n-\t  break;\n \tcase RID_C99_FUNCTION_NAME:\n-\t  pedwarn_c90 (loc, OPT_Wpedantic,  \"ISO C90 does not support \"\n-\t\t   \"%<__func__%> predefined identifier\");\n-\t  expr.value = fname_decl (loc,\n-\t\t\t\t   c_parser_peek_token (parser)->keyword,\n-\t\t\t\t   c_parser_peek_token (parser)->value);\n-\t  set_c_expr_source_range (&expr, loc, loc);\n-\t  c_parser_consume_token (parser);\n+\t  expr = c_parser_predefined_identifier (parser);\n \t  break;\n \tcase RID_VA_ARG:\n \t  {\n@@ -11997,15 +12010,9 @@ c_parser_omp_variable_list (c_parser *parser,\n {\n   auto_vec<c_token> tokens;\n   unsigned int tokens_avail = 0;\n+  bool first = true;\n \n-  if (kind != OMP_CLAUSE_DEPEND\n-      && (c_parser_next_token_is_not (parser, CPP_NAME)\n-\t  || c_parser_peek_token (parser)->id_kind != C_ID_ID))\n-    c_parser_error (parser, \"expected identifier\");\n-\n-  while (kind == OMP_CLAUSE_DEPEND\n-\t || (c_parser_next_token_is (parser, CPP_NAME)\n-\t     && c_parser_peek_token (parser)->id_kind == C_ID_ID))\n+  while (1)\n     {\n       bool array_section_p = false;\n       if (kind == OMP_CLAUSE_DEPEND)\n@@ -12026,6 +12033,7 @@ c_parser_omp_variable_list (c_parser *parser,\n \t\tbreak;\n \n \t      c_parser_consume_token (parser);\n+\t      first = false;\n \t      continue;\n \t    }\n \n@@ -12076,16 +12084,35 @@ c_parser_omp_variable_list (c_parser *parser,\n \t  parser->tokens_avail = tokens.length ();\n \t}\n \n-      tree t = lookup_name (c_parser_peek_token (parser)->value);\n+      tree t = NULL_TREE;\n \n-      if (t == NULL_TREE)\n+      if (c_parser_next_token_is (parser, CPP_NAME)\n+\t  && c_parser_peek_token (parser)->id_kind == C_ID_ID)\n \t{\n-\t  undeclared_variable (c_parser_peek_token (parser)->location,\n-\t\t\t       c_parser_peek_token (parser)->value);\n-\t  t = error_mark_node;\n-\t}\n+\t  t = lookup_name (c_parser_peek_token (parser)->value);\n \n-      c_parser_consume_token (parser);\n+\t  if (t == NULL_TREE)\n+\t    {\n+\t      undeclared_variable (c_parser_peek_token (parser)->location,\n+\t      c_parser_peek_token (parser)->value);\n+\t      t = error_mark_node;\n+\t    }\n+\n+\t  c_parser_consume_token (parser);\n+\t}\n+      else if (c_parser_next_token_is (parser, CPP_KEYWORD)\n+\t       && (c_parser_peek_token (parser)->keyword == RID_FUNCTION_NAME\n+\t\t   || (c_parser_peek_token (parser)->keyword\n+\t\t       == RID_PRETTY_FUNCTION_NAME)\n+\t\t   || (c_parser_peek_token (parser)->keyword\n+\t\t       == RID_C99_FUNCTION_NAME)))\n+\tt = c_parser_predefined_identifier (parser).value;\n+      else\n+\t{\n+\t  if (first)\n+\t    c_parser_error (parser, \"expected identifier\");\n+\t  break;\n+\t}\n \n       if (t == error_mark_node)\n \t;\n@@ -12223,6 +12250,7 @@ c_parser_omp_variable_list (c_parser *parser,\n \tbreak;\n \n       c_parser_consume_token (parser);\n+      first = false;\n     }\n \n   return list;"}, {"sha": "c7339509bd1c0411d55827d06f03d51eda184d55", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -14822,6 +14822,13 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\tcase OMP_CLAUSE_DEFAULT_UNSPECIFIED:\n \t\t  break;\n \t\tcase OMP_CLAUSE_DEFAULT_SHARED:\n+\t\t  if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SHARED\n+\t\t       || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE)\n+\t\t      && c_omp_predefined_variable (t))\n+\t\t    /* The __func__ variable and similar function-local\n+\t\t       predefined variables may be listed in a shared or\n+\t\t       firstprivate clause.  */\n+\t\t    break;\n \t\t  share_name = \"shared\";\n \t\t  break;\n \t\tcase OMP_CLAUSE_DEFAULT_PRIVATE:"}, {"sha": "8ea2a84f24f3ae54d587d28742ecd10e7396e30f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -1,3 +1,14 @@\n+2019-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/88203\n+\t* parser.c (cp_parser_omp_var_list_no_open): Parse predefined\n+\tvariables.\n+\t* semantics.c (finish_omp_clauses): Allow predefined variables in\n+\tshared and firstprivate clauses, even when they are predetermined\n+\tshared.\n+\t* cp-gimplify.c (cxx_omp_predetermined_sharing_1): Return\n+\tOMP_CLAUSE_DEFAULT_SHARED for predefined variables.\n+\n 2019-09-27  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.c (cxx_fold_indirect_ref): Use similar_type_p."}, {"sha": "8bda7361bc40f745b0f02d61f3c67ea968c943b1", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -2055,6 +2055,9 @@ cxx_omp_predetermined_sharing_1 (tree decl)\n       tree ctx = CP_DECL_CONTEXT (decl);\n       if (TYPE_P (ctx) && MAYBE_CLASS_TYPE_P (ctx))\n \treturn OMP_CLAUSE_DEFAULT_SHARED;\n+\n+      if (c_omp_predefined_variable (decl))\n+\treturn OMP_CLAUSE_DEFAULT_SHARED;\n     }\n \n   /* this may not be specified in data-sharing clauses, still we need"}, {"sha": "018a03d4965655333012e762aba69870535256e3", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -32736,6 +32736,14 @@ cp_parser_omp_var_list_no_open (cp_parser *parser, enum omp_clause_code kind,\n \t    decl = TREE_OPERAND (decl, 0);\n \t  cp_lexer_consume_token (parser->lexer);\n \t}\n+      else if (cp_parser_is_keyword (token, RID_FUNCTION_NAME)\n+\t       || cp_parser_is_keyword (token, RID_PRETTY_FUNCTION_NAME)\n+\t       || cp_parser_is_keyword (token, RID_C99_FUNCTION_NAME))\n+\t{\n+\t  cp_id_kind idk;\n+\t  decl = cp_parser_primary_expression (parser, false, false, false,\n+\t\t\t\t\t       &idk);\n+\t}\n       else\n \t{\n \t  name = cp_parser_id_expression (parser, /*template_p=*/false,"}, {"sha": "5a8c4d237e0d7905e65d29680ae56bea0b8caf02", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -7967,6 +7967,13 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t    case OMP_CLAUSE_DEFAULT_UNSPECIFIED:\n \t      break;\n \t    case OMP_CLAUSE_DEFAULT_SHARED:\n+\t      if ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_SHARED\n+\t\t   || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE)\n+\t\t  && c_omp_predefined_variable (t))\n+\t\t/* The __func__ variable and similar function-local predefined\n+\t\t   variables may be listed in a shared or firstprivate\n+\t\t   clause.  */\n+\t\tbreak;\n \t      if (VAR_P (t)\n \t\t  && OMP_CLAUSE_CODE (c) == OMP_CLAUSE_FIRSTPRIVATE\n \t\t  && TREE_STATIC (t)"}, {"sha": "163e38d5b6c534ac3e9fcfec3db2d4b71fde5908", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -1,5 +1,10 @@\n 2019-09-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/88203\n+\t* c-c++-common/gomp/pr88203-1.c: New test.\n+\t* c-c++-common/gomp/pr88203-2.c: New test.\n+\t* c-c++-common/gomp/pr88203-3.c: New test.\n+\n \tPR middle-end/91920\n \t* c-c++-common/gomp/pr91920.c: New test.\n "}, {"sha": "54a686487c98001a469db5bb9cedd933348b1441", "filename": "gcc/testsuite/c-c++-common/gomp/pr88203-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr88203-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr88203-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr88203-1.c?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -0,0 +1,61 @@\n+/* PR c++/88203 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-std=c99\" { target c } } */\n+/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+\n+void foo (const char *);\n+#pragma omp declare target to (foo)\n+\n+void\n+f1 (void)\n+{\n+  #pragma omp parallel default(none)\n+  foo (__func__);\n+}\n+\n+void\n+f2 (void)\n+{\n+  #pragma omp parallel default(none) shared(__func__)\n+  foo (__func__);\n+}\n+\n+void\n+f3 (void)\n+{\n+  #pragma omp parallel default(none) firstprivate(__func__)\n+  foo (__func__);\n+}\n+\n+void\n+f4 (void)\n+{\n+  foo (__func__);\n+  #pragma omp parallel default(none)\n+  foo (__func__);\n+}\n+\n+void\n+f5 (void)\n+{\n+  foo (__func__);\n+  #pragma omp parallel default(none) shared(__func__)\n+  foo (__func__);\n+}\n+\n+void\n+f6 (void)\n+{\n+  foo (__func__);\n+  #pragma omp parallel default(none) firstprivate(__func__)\n+  foo (__func__);\n+}\n+\n+void\n+f7 (void)\n+{\n+  #pragma omp target map(to: __func__)\n+  foo (__func__);\n+  #pragma omp task depend(inout:__func__)\n+  foo (__func__);\n+}"}, {"sha": "90c4a720774aff18e9f3864501d54abb8947d576", "filename": "gcc/testsuite/c-c++-common/gomp/pr88203-2.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr88203-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr88203-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr88203-2.c?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -0,0 +1,65 @@\n+/* PR c++/88203 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-std=gnu99\" { target c } } */\n+/* { dg-additional-options \"-std=gnu++11\" { target c++ } } */\n+\n+void foo (const char *, const char *);\n+#pragma omp declare target to (foo)\n+\n+void\n+f1 (void)\n+{\n+  #pragma omp parallel default(none)\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+}\n+\n+void\n+f2 (void)\n+{\n+  #pragma omp parallel default(none) shared(__FUNCTION__, __PRETTY_FUNCTION__)\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+  #pragma omp parallel default(none) shared(__FUNCTION__) firstprivate(__PRETTY_FUNCTION__)\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+}\n+\n+void\n+f3 (void)\n+{\n+  #pragma omp parallel default(none) firstprivate(__FUNCTION__, __PRETTY_FUNCTION__)\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+  #pragma omp parallel default(none) firstprivate(__FUNCTION__), shared(__PRETTY_FUNCTION__)\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+}\n+\n+void\n+f4 (void)\n+{\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+  #pragma omp parallel default(none)\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+}\n+\n+void\n+f5 (void)\n+{\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+  #pragma omp parallel default(none) shared(__FUNCTION__, __PRETTY_FUNCTION__)\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+}\n+\n+void\n+f6 (void)\n+{\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+  #pragma omp parallel default(none) firstprivate(__FUNCTION__, __PRETTY_FUNCTION__)\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+}\n+\n+void\n+f7 (void)\n+{\n+  #pragma omp target map(to: __FUNCTION__, __PRETTY_FUNCTION__)\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+  #pragma omp task depend(inout:__FUNCTION__, __PRETTY_FUNCTION__)\n+  foo (__FUNCTION__, __PRETTY_FUNCTION__);\n+}"}, {"sha": "6a9585d3281720367cf54055a61320b698539f12", "filename": "gcc/testsuite/c-c++-common/gomp/pr88203-3.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr88203-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59bc434a3327ce58f7afcd1e9209eeb2da714960/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr88203-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr88203-3.c?ref=59bc434a3327ce58f7afcd1e9209eeb2da714960", "patch": "@@ -0,0 +1,28 @@\n+/* PR c++/88203 */\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-std=c99\" { target c } } */\n+/* { dg-additional-options \"-std=c++11\" { target c++ } } */\n+\n+void foo (const char *);\n+#pragma omp declare target to (foo)\n+\n+void\n+f1 (void)\n+{\n+  #pragma omp parallel for lastprivate (__func__)\t/* { dg-error \"'__func__' is predetermined 'shared' for 'lastprivate'\" } */\n+  for (int i = 0; i < 2; i++)\n+    foo (__func__);\n+  #pragma omp parallel private (__func__)\t\t/* { dg-error \"'__func__' is predetermined 'shared' for 'private'\" } */\n+  foo (__func__);\n+}\n+\n+void\n+f2 (void)\n+{\n+  foo (__func__);\n+  #pragma omp parallel default(none) private (__func__)\t\t/* { dg-error \"'__func__' is predetermined 'shared' for 'private'\" } */\n+  foo (__func__);\n+  #pragma omp parallel for default(none) lastprivate (__func__)\t/* { dg-error \"'__func__' is predetermined 'shared' for 'lastprivate'\" } */\n+  for (int i = 0; i < 2; i++)\n+    foo (__func__);\n+}"}]}