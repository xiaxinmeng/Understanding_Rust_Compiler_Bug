{"sha": "0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3YTRmYWNlMjVmNDAxNWY3ZGE4Y2UzY2NiYjBiOTdjZTJkMTQxMw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2001-07-16T11:37:23Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2001-07-16T11:37:23Z"}, "message": "New tests\n\nFrom-SVN: r44040", "tree": {"sha": "bab2edc8e182ee9f48ae933d6430ba30edfe421b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab2edc8e182ee9f48ae933d6430ba30edfe421b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413/comments", "author": null, "committer": null, "parents": [{"sha": "42d28de5b2f987923c3211d85f345ff951bd9b90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d28de5b2f987923c3211d85f345ff951bd9b90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d28de5b2f987923c3211d85f345ff951bd9b90"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "a053434fb148b858ec0fdda6c94a0a20218eae9c", "filename": "gcc/testsuite/objc/execute/object_is_class.m", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_class.m?ref=0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413", "patch": "@@ -0,0 +1,42 @@\n+/* Contributed by Nicola Pero - Tue Jul  3 10:55:21 BST 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+/* This test demonstrate a failure in object_is_class which was fixed */\n+\n+/* Create a class whose instance variables mirror the struct used for\n+   Class structures in the runtime ... yes we're feeling evil today */\n+@interface EvilClass : Object\n+{\n+  Class super_class;\n+  const char* name;\n+  long version;\n+  unsigned long info;    \n+}\n+@end\n+\n+@implementation EvilClass\n+- (id) init\n+{\n+  self = [super init];\n+  /* The following one is used in the runtime to mark classes */\n+  info = 0x1L;\n+  return self;\n+}\n+@end\n+\n+int main (void)\n+{\n+  /* Create an object of our EvilClass */\n+  EvilClass *evilObject = [EvilClass new];\n+  \n+  /* Now check that the object is not a class object */\n+  if (object_is_class (evilObject))\n+    {\n+      printf (\"object_is_class failed\\n\");\n+      abort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "90cd3a962f027764b93f243c7a85abdd449755d0", "filename": "gcc/testsuite/objc/execute/object_is_meta_class.m", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc%2Fexecute%2Fobject_is_meta_class.m?ref=0a7a4face25f4015f7da8ce3ccbb0b97ce2d1413", "patch": "@@ -0,0 +1,41 @@\n+/* Contributed by Nicola Pero - Tue Jul  3 10:55:21 BST 2001 */\n+#include <objc/objc.h>\n+#include <objc/objc-api.h>\n+#include <objc/Object.h>\n+\n+/* This test demonstrate a failure in object_is_meta_class which was fixed */\n+\n+@interface EvilClass : Object\n+{\n+  Class super_class;\n+  const char* name;\n+  long version;\n+  unsigned long info;    \n+}\n+@end\n+\n+@implementation EvilClass\n+- (id) init\n+{\n+  self = [super init];\n+  /* The following one is used in the runtime to mark meta classes */\n+  info = 0x2L;\n+  return self;\n+}\n+@end\n+\n+int main (void)\n+{\n+  /* Create an object of our EvilClass */\n+  EvilClass *evilObject = [EvilClass new];\n+  \n+  /* Now check that the object is not a meta class object */\n+  if (object_is_meta_class (evilObject))\n+    {\n+      printf (\"object_is_meta_class failed\\n\");\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+"}]}