{"sha": "6ab06cbb5b0861f9c65f009eba3d6cddbce7910b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiMDZjYmI1YjA4NjFmOWM2NWYwMDllYmEzZDZjZGRiY2U3OTEwYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1999-04-01T12:05:24Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1999-04-01T12:05:24Z"}, "message": "Fix irix6 libstdc++ v3 build failure with complex types.\n\n\t* expr.c (store_field): When check direct_store, assume all complex\n\tmodes can be directly stored.\n\nFrom-SVN: r26104", "tree": {"sha": "c11c8bc50da3378bf10813b97d5e0337fd7e9318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c11c8bc50da3378bf10813b97d5e0337fd7e9318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ab06cbb5b0861f9c65f009eba3d6cddbce7910b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab06cbb5b0861f9c65f009eba3d6cddbce7910b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab06cbb5b0861f9c65f009eba3d6cddbce7910b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab06cbb5b0861f9c65f009eba3d6cddbce7910b/comments", "author": null, "committer": null, "parents": [{"sha": "b7c8ae04e12945b1450e8e3a5ed1aaedad94cfed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7c8ae04e12945b1450e8e3a5ed1aaedad94cfed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7c8ae04e12945b1450e8e3a5ed1aaedad94cfed"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "231007ba907127285e6f83b0635ab8a33823b38c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab06cbb5b0861f9c65f009eba3d6cddbce7910b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab06cbb5b0861f9c65f009eba3d6cddbce7910b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ab06cbb5b0861f9c65f009eba3d6cddbce7910b", "patch": "@@ -1,3 +1,8 @@\n+Thu Apr  1 12:04:05 1999  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* expr.c (store_field): When check direct_store, assume all complex\n+\tmodes can be directly stored.\n+\n 1999-04-01  Bruce Korb <ddsinc09@ix.netcom.com>\n \n \t* fixinc/genfixes:  new shell script that runs autogen"}, {"sha": "3c18b73003845d20b10116a12cc92e9e7dd2052a", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab06cbb5b0861f9c65f009eba3d6cddbce7910b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab06cbb5b0861f9c65f009eba3d6cddbce7910b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6ab06cbb5b0861f9c65f009eba3d6cddbce7910b", "patch": "@@ -4608,7 +4608,9 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode,\n      Use bit-field techniques or SUBREG to store in it.  */\n \n   if (mode == VOIDmode\n-      || (mode != BLKmode && ! direct_store[(int) mode])\n+      || (mode != BLKmode && ! direct_store[(int) mode]\n+\t  && GET_MODE_CLASS (mode) != MODE_COMPLEX_INT\n+\t  && GET_MODE_CLASS (mode) != MODE_COMPLEX_FLOAT)\n       || GET_CODE (target) == REG\n       || GET_CODE (target) == SUBREG\n       /* If the field isn't aligned enough to store as an ordinary memref,"}]}