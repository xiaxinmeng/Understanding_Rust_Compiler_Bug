{"sha": "808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA4YjZiYjdhOGE0YzMwYWM2ZjM3NWNhMmY2ZjBjYjcyZmIzZTc2Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-11-12T15:16:00Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-11-12T15:16:00Z"}, "message": "re PR ipa/68035 (ipa performance issue when no procedures are present)\n\nFix PR ipa/68035\n\n\tPR ipa/68035\n\t* ipa-icf.c (void sem_item::set_hash): New function.\n\t(sem_function::get_hash): Use renamed m_hash member variable.\n\t(sem_item::update_hash_by_addr_refs): Utilize get_hash.\n\t(sem_item::update_hash_by_local_refs): Likewise.\n\t(sem_variable::get_hash): Use renamed m_hash member variable.\n\t(sem_item_optimizer::update_hash_by_addr_refs): Utilize get_hash.\n\t(sem_item_optimizer::build_hash_based_classes): Utilize set_hash.\n\t(sem_item_optimizer::build_graph): As the hash value of an item\n\tis lazy initialized, force the calculation.\n\t* ipa-icf.h (set_hash): Declare new function and rename hash member\n\tvariable to m_hash.\n\t* gcc.dg/ipa/pr68035.c: New test.\n\nFrom-SVN: r230263", "tree": {"sha": "9c0e3a01a29255ea0316cfea7a3a7ce1fd63979b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c0e3a01a29255ea0316cfea7a3a7ce1fd63979b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2a12ca06dd0762c03ec8f0f3be3feb096119386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a12ca06dd0762c03ec8f0f3be3feb096119386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a12ca06dd0762c03ec8f0f3be3feb096119386"}], "stats": {"total": 74, "additions": 52, "deletions": 22}, "files": [{"sha": "6e5471c308efef3b2221766477b42d729f823738", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766", "patch": "@@ -1,3 +1,18 @@\n+2015-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/68035\n+\t* ipa-icf.c (void sem_item::set_hash): New function.\n+\t(sem_function::get_hash): Use renamed m_hash member variable.\n+\t(sem_item::update_hash_by_addr_refs): Utilize get_hash.\n+\t(sem_item::update_hash_by_local_refs): Likewise.\n+\t(sem_variable::get_hash): Use renamed m_hash member variable.\n+\t(sem_item_optimizer::update_hash_by_addr_refs): Utilize get_hash.\n+\t(sem_item_optimizer::build_hash_based_classes): Utilize set_hash.\n+\t(sem_item_optimizer::build_graph): As the hash value of an item\n+\tis lazy initialized, force the calculation.\n+\t* ipa-icf.h (set_hash): Declare new function and rename hash member\n+\tvariable to m_hash.\n+\n 2015-11-12  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (vect_slp_analyze_data_ref_dependences):"}, {"sha": "b6a97c3e122eedab82e7214335c12d9ec879c62b", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766", "patch": "@@ -140,7 +140,7 @@ sem_usage_pair::sem_usage_pair (sem_item *_item, unsigned int _index):\n    for bitmap memory allocation.  */\n \n sem_item::sem_item (sem_item_type _type,\n-\t\t    bitmap_obstack *stack): type(_type), hash(0)\n+\t\t    bitmap_obstack *stack): type (_type), m_hash (0)\n {\n   setup (stack);\n }\n@@ -151,7 +151,7 @@ sem_item::sem_item (sem_item_type _type,\n \n sem_item::sem_item (sem_item_type _type, symtab_node *_node,\n \t\t    hashval_t _hash, bitmap_obstack *stack): type(_type),\n-  node (_node), hash (_hash)\n+  node (_node), m_hash (_hash)\n {\n   decl = node->decl;\n   setup (stack);\n@@ -227,6 +227,11 @@ sem_item::target_supports_symbol_aliases_p (void)\n #endif\n }\n \n+void sem_item::set_hash (hashval_t hash)\n+{\n+  m_hash = hash;\n+}\n+\n /* Semantic function constructor that uses STACK as bitmap memory stack.  */\n \n sem_function::sem_function (bitmap_obstack *stack): sem_item (FUNC, stack),\n@@ -274,7 +279,7 @@ sem_function::get_bb_hash (const sem_bb *basic_block)\n hashval_t\n sem_function::get_hash (void)\n {\n-  if(!hash)\n+  if (!m_hash)\n     {\n       inchash::hash hstate;\n       hstate.add_int (177454); /* Random number for function type.  */\n@@ -289,7 +294,6 @@ sem_function::get_hash (void)\n       for (unsigned i = 0; i < bb_sizes.length (); i++)\n \thstate.add_int (bb_sizes[i]);\n \n-\n       /* Add common features of declaration itself.  */\n       if (DECL_FUNCTION_SPECIFIC_TARGET (decl))\n         hstate.add_wide_int\n@@ -301,10 +305,10 @@ sem_function::get_hash (void)\n       hstate.add_flag (DECL_CXX_CONSTRUCTOR_P (decl));\n       hstate.add_flag (DECL_CXX_DESTRUCTOR_P (decl));\n \n-      hash = hstate.end ();\n+      set_hash (hstate.end ());\n     }\n \n-  return hash;\n+  return m_hash;\n }\n \n /* Return ture if A1 and A2 represent equivalent function attribute lists.\n@@ -800,7 +804,7 @@ sem_item::update_hash_by_addr_refs (hash_map <symtab_node *,\n \t\t\t\t    sem_item *> &m_symtab_node_map)\n {\n   ipa_ref* ref;\n-  inchash::hash hstate (hash);\n+  inchash::hash hstate (get_hash ());\n \n   for (unsigned i = 0; node->iterate_reference (i, ref); i++)\n     {\n@@ -823,7 +827,7 @@ sem_item::update_hash_by_addr_refs (hash_map <symtab_node *,\n \t}\n     }\n \n-  hash = hstate.end ();\n+  set_hash (hstate.end ());\n }\n \n /* Update hash by computed local hash values taken from different\n@@ -835,13 +839,13 @@ sem_item::update_hash_by_local_refs (hash_map <symtab_node *,\n \t\t\t\t     sem_item *> &m_symtab_node_map)\n {\n   ipa_ref* ref;\n-  inchash::hash state (hash);\n+  inchash::hash state (get_hash ());\n \n   for (unsigned j = 0; node->iterate_reference (j, ref); j++)\n     {\n       sem_item **result = m_symtab_node_map.get (ref->referring);\n       if (result)\n-\tstate.merge_hash ((*result)->hash);\n+\tstate.merge_hash ((*result)->get_hash ());\n     }\n \n   if (type == FUNC)\n@@ -851,7 +855,7 @@ sem_item::update_hash_by_local_refs (hash_map <symtab_node *,\n \t{\n \t  sem_item **result = m_symtab_node_map.get (e->caller);\n \t  if (result)\n-\t    state.merge_hash ((*result)->hash);\n+\t    state.merge_hash ((*result)->get_hash ());\n \t}\n     }\n \n@@ -2099,8 +2103,8 @@ sem_variable::parse (varpool_node *node, bitmap_obstack *stack)\n hashval_t\n sem_variable::get_hash (void)\n {\n-  if (hash)\n-    return hash;\n+  if (m_hash)\n+    return m_hash;\n \n   /* All WPA streamed in symbols should have their hashes computed at compile\n      time.  At this point, the constructor may not be in memory at all.\n@@ -2113,9 +2117,9 @@ sem_variable::get_hash (void)\n   if (DECL_SIZE (decl) && tree_fits_shwi_p (DECL_SIZE (decl)))\n     hstate.add_wide_int (tree_to_shwi (DECL_SIZE (decl)));\n   add_expr (ctor, hstate);\n-  hash = hstate.end ();\n+  set_hash (hstate.end ());\n \n-  return hash;\n+  return m_hash;\n }\n \n /* Merges instance with an ALIAS_ITEM, where alias, thunk or redirection can\n@@ -2688,15 +2692,15 @@ sem_item_optimizer::update_hash_by_addr_refs ()\n \t     {\n \t        tree class_type\n \t\t  = TYPE_METHOD_BASETYPE (TREE_TYPE (m_items[i]->decl));\n-\t\tinchash::hash hstate (m_items[i]->hash);\n+\t\tinchash::hash hstate (m_items[i]->get_hash ());\n \n \t\tif (TYPE_NAME (class_type)\n \t\t     && DECL_ASSEMBLER_NAME_SET_P (TYPE_NAME (class_type)))\n \t\t  hstate.add_wide_int\n \t\t    (IDENTIFIER_HASH_VALUE\n \t\t       (DECL_ASSEMBLER_NAME (TYPE_NAME (class_type))));\n \n-\t\tm_items[i]->hash = hstate.end ();\n+\t\tm_items[i]->set_hash (hstate.end ());\n \t     }\n \t}\n     }\n@@ -2710,7 +2714,7 @@ sem_item_optimizer::update_hash_by_addr_refs ()\n \n   /* Global hash value replace current hash values.  */\n   for (unsigned i = 0; i < m_items.length (); i++)\n-    m_items[i]->hash = m_items[i]->global_hash;\n+    m_items[i]->set_hash (m_items[i]->global_hash);\n }\n \n /* Congruence classes are built by hash value.  */\n@@ -2722,7 +2726,7 @@ sem_item_optimizer::build_hash_based_classes (void)\n     {\n       sem_item *item = m_items[i];\n \n-      congruence_class_group *group = get_group_by_hash (item->hash,\n+      congruence_class_group *group = get_group_by_hash (item->get_hash (),\n \t\t\t\t      item->type);\n \n       if (!group->classes.length ())\n@@ -2744,6 +2748,10 @@ sem_item_optimizer::build_graph (void)\n     {\n       sem_item *item = m_items[i];\n       m_symtab_node_map.put (item->node, item);\n+\n+      /* Initialize hash values if we are not in LTO mode.  */\n+      if (!in_lto_p)\n+\titem->get_hash ();\n     }\n \n   for (unsigned i = 0; i < m_items.length (); i++)"}, {"sha": "c48cb1843837f9f76c8eeed6a0a77ce9bd0921a6", "filename": "gcc/ipa-icf.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766/gcc%2Fipa-icf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766/gcc%2Fipa-icf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.h?ref=808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766", "patch": "@@ -181,6 +181,9 @@ class sem_item\n   /* References independent hash function.  */\n   virtual hashval_t get_hash (void) = 0;\n \n+  /* Set new hash value of the item.  */\n+  void set_hash (hashval_t hash);\n+\n   /* Merges instance with an ALIAS_ITEM, where alias, thunk or redirection can\n      be applied.  */\n   virtual bool merge (sem_item *alias_item) = 0;\n@@ -234,9 +237,6 @@ class sem_item\n   /* A set with symbol table references.  */\n   hash_set <symtab_node *> refs_set;\n \n-  /* Hash of item.  */\n-  hashval_t hash;\n-\n   /* Temporary hash used where hash values of references are added.  */\n   hashval_t global_hash;\n protected:\n@@ -270,6 +270,9 @@ class sem_item\n \t\t\t\t  &ignored_nodes,\n \t\t\t\t  symtab_node *n1, symtab_node *n2,\n \t\t\t\t  bool address);\n+protected:\n+  /* Hash of item.  */\n+  hashval_t m_hash;\n \n private:\n   /* Initialize internal data structures. Bitmap STACK is used for"}, {"sha": "680b9def71f319b5f73c695fb4550052bfe75604", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=808b6bb7a8a4c30ac6f375ca2f6f0cb72fb3e766", "patch": "@@ -1,3 +1,7 @@\n+2015-11-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/ipa/pr68035.c: New test.\n+\n 2015-11-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68306"}]}