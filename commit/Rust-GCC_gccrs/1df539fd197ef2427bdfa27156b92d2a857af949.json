{"sha": "1df539fd197ef2427bdfa27156b92d2a857af949", "node_id": "C_kwDOANBUbNoAKDFkZjUzOWZkMTk3ZWYyNDI3YmRmYTI3MTU2YjkyZDJhODU3YWY5NDk", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-03T13:29:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-11-22T22:43:10Z"}, "message": "c++: remember pointer-to-member location\n\nJakub recently mentioned that a PTRMEM_CST has no location; let's give it a\nlocation wrapper.\n\ngcc/cp/ChangeLog:\n\n\t* typeck.c (build_x_unary_op): Set address location.\n\t(convert_member_func_to_ptr): Handle location wrapper.\n\t* pt.c (convert_nontype_argument): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/crash106.C: Adjust.\n\t* g++.dg/diagnostic/ptrtomem3.C: New test.", "tree": {"sha": "6c26231326dd01d472b8062465ec3a2f6f3fc92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c26231326dd01d472b8062465ec3a2f6f3fc92f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1df539fd197ef2427bdfa27156b92d2a857af949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df539fd197ef2427bdfa27156b92d2a857af949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df539fd197ef2427bdfa27156b92d2a857af949", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df539fd197ef2427bdfa27156b92d2a857af949/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5440c88e61f5c624eb87e19801eef6eedf27e8ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5440c88e61f5c624eb87e19801eef6eedf27e8ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5440c88e61f5c624eb87e19801eef6eedf27e8ab"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "288625e3e93cb39638f33690d0d585e1ae43cd4b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df539fd197ef2427bdfa27156b92d2a857af949/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df539fd197ef2427bdfa27156b92d2a857af949/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1df539fd197ef2427bdfa27156b92d2a857af949", "patch": "@@ -7267,6 +7267,8 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n   const bool val_dep_p = value_dependent_expression_p (expr);\n   if (val_dep_p)\n     expr = canonicalize_expr_argument (expr, complain);\n+  else\n+    STRIP_ANY_LOCATION_WRAPPER (expr);\n \n   /* 14.3.2/5: The null pointer{,-to-member} conversion is applied\n      to a non-type argument of \"nullptr\".  */"}, {"sha": "84dcb6f014f9557c45025aa3d78f19c5458949e7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df539fd197ef2427bdfa27156b92d2a857af949/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df539fd197ef2427bdfa27156b92d2a857af949/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1df539fd197ef2427bdfa27156b92d2a857af949", "patch": "@@ -6492,6 +6492,11 @@ build_x_unary_op (location_t loc, enum tree_code code, cp_expr xarg,\n \t}\n \n       exp = cp_build_addr_expr_strict (xarg, complain);\n+\n+      if (TREE_CODE (exp) == PTRMEM_CST)\n+\texp = maybe_wrap_with_location (exp, loc);\n+      else\n+\tprotected_set_expr_location (exp, loc);\n     }\n \n   if (processing_template_decl && exp != error_mark_node)\n@@ -8179,10 +8184,14 @@ convert_member_func_to_ptr (tree type, tree expr, tsubst_flags_t complain)\n   if (!(complain & tf_warning_or_error))\n     return error_mark_node;\n \n+  location_t loc = cp_expr_loc_or_input_loc (expr);\n+\n   if (pedantic || warn_pmf2ptr)\n-    pedwarn (input_location, pedantic ? OPT_Wpedantic : OPT_Wpmf_conversions,\n+    pedwarn (loc, pedantic ? OPT_Wpedantic : OPT_Wpmf_conversions,\n \t     \"converting from %qH to %qI\", intype, type);\n \n+  STRIP_ANY_LOCATION_WRAPPER (expr);\n+\n   if (TREE_CODE (intype) == METHOD_TYPE)\n     expr = build_addr_func (expr, complain);\n   else if (TREE_CODE (expr) == PTRMEM_CST)\n@@ -8197,7 +8206,9 @@ convert_member_func_to_ptr (tree type, tree expr, tsubst_flags_t complain)\n   if (expr == error_mark_node)\n     return error_mark_node;\n \n-  return build_nop (type, expr);\n+  expr = build_nop (type, expr);\n+  SET_EXPR_LOCATION (expr, loc);\n+  return expr;\n }\n \n /* Build a NOP_EXPR to TYPE, but mark it as a reinterpret_cast so that"}, {"sha": "6096a98f708f2a12078ee0caf10cbda77a66db4c", "filename": "gcc/testsuite/g++.dg/diagnostic/ptrtomem3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df539fd197ef2427bdfa27156b92d2a857af949/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fptrtomem3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df539fd197ef2427bdfa27156b92d2a857af949/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fptrtomem3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fptrtomem3.C?ref=1df539fd197ef2427bdfa27156b92d2a857af949", "patch": "@@ -0,0 +1,14 @@\n+// Check that the diagnostic for a pointer-to-member expression has the caret\n+// at the &.\n+\n+struct A\n+{\n+  int i;\n+};\n+\n+void f();\n+\n+int main()\n+{\n+  return &A::i; \t\t// { dg-error \"10:cannot convert\" }\n+}"}, {"sha": "35cedb55b0bf9d7578cbd23b63130abfe5620f7f", "filename": "gcc/testsuite/g++.dg/template/crash106.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df539fd197ef2427bdfa27156b92d2a857af949/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df539fd197ef2427bdfa27156b92d2a857af949/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash106.C?ref=1df539fd197ef2427bdfa27156b92d2a857af949", "patch": "@@ -7,6 +7,6 @@ struct A\n   template<T> void foo(); // { dg-error \"type\" \"\" { target c++17_down } }\n };\n \n-template<T N = 0.0, void (A::*)() = &A::foo<N> > struct B {}; // { dg-error \"type|declared\" \"\" { target c++17_down } }\n+template<T N = 0.0, void (A::*)() = &A::foo<N> > struct B {}; // { dg-error \"type|declared|could not convert\" \"\" { target c++17_down } }\n \n-B<> b; // { dg-error \"(could not convert|no matches)\" \"\" { target c++17_down } }\n+B<> b; // { dg-message \"\" \"\" { target c++17_down } }"}]}