{"sha": "5720787ada5aa74f244b3bc699f4abd991bee425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTcyMDc4N2FkYTVhYTc0ZjI0NGIzYmM2OTlmNGFiZDk5MWJlZTQyNQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-08-01T19:54:46Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2013-08-01T19:54:46Z"}, "message": "re PR libstdc++/57779 (vector insert fails to diagnose iterators pointing into *this in debug mode)\n\n2013-08-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/57779\n\t* include/debug/formatter.h (_Debug_msg_id): Add\n\t__msg_insert_itself_range entry.\n\t* include/debug/functions.h (_Insert_range_from_self_is_safe<>):\n\tNew, indicate container types supporting self range insertion in\n\tGNU implementation.\n\t(__foreign_iterator): New, check if an iterator points to a given\n\tsequence.\n\t* include/debug/macros.h (__glibcxx_check_insert_range): Add check\n\tusing __foreign_iterator.\n\t(__gibcxx_check_insert_range_after): Likewise.\n\t* include/debug/string (_Insert_range_from_self_is_safe<>):\n\tPartially specialized to mark __gnu_debug::basic_string<> as\n\tsupporting self range insert.\n\t* include/debug/list (_Insert_range_from_self_is_safe<>):\n\tPartially specialized to mark std::list as supporting self range\n\tinsert if _GLIBCXX_DEBUG_PEDANTIC is not defined.\n\t* include/debug/forward_list (_Insert_range_from_self_is_safe<>):\n\tLikewise.\n\t* src/c++11/debug.cc (_S_debug_messages): Add\n\t__msg_insert_itself_range_entry message.\n\t(_Error_formatter::_Parameter::_M_print_description): Display\n\titerator sequence address rather than sequence address when the\n\tparameter type is an iterator.\n\t(_Error_formatter::_M_print_word): Enhance behavior when\n\tdisplaying a word with an appended '\\n'.\n\t* testsuite/util/debug/checks.h (check_insert4<>): New.\n\t* testsuite/23_containers/deque/debug/insert5_neg.cc: New.\n\t* testsuite/23_containers/vector/debug/insert5_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/debug/insert6_neg.cc: Likewise.\n\t* testsuite/23_containers/vector/debug/57779_neg.cc: Likewise.\n\t* testsuite/23_containers/list/debug/insert5_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/debug/insert_after4_neg.cc:\n\tLikewise.\n\nFrom-SVN: r201416", "tree": {"sha": "ed377bb0e83876a241613b80cb260f9f91684479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed377bb0e83876a241613b80cb260f9f91684479"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5720787ada5aa74f244b3bc699f4abd991bee425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5720787ada5aa74f244b3bc699f4abd991bee425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5720787ada5aa74f244b3bc699f4abd991bee425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5720787ada5aa74f244b3bc699f4abd991bee425/comments", "author": null, "committer": null, "parents": [{"sha": "0bd729015ccfab7dd1d535fa7a7c17afbda28017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd729015ccfab7dd1d535fa7a7c17afbda28017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd729015ccfab7dd1d535fa7a7c17afbda28017"}], "stats": {"total": 482, "additions": 463, "deletions": 19}, "files": [{"sha": "651f8b6a9747b8babad51de0812cd53aea64916c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -1,3 +1,40 @@\n+2013-08-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/57779\n+\t* include/debug/formatter.h (_Debug_msg_id): Add\n+\t__msg_insert_itself_range entry.\n+\t* include/debug/functions.h (_Insert_range_from_self_is_safe<>):\n+\tNew, indicate container types supporting self range insertion in\n+\tGNU implementation.\n+\t(__foreign_iterator): New, check if an iterator points to a given\n+\tsequence.\n+\t* include/debug/macros.h (__glibcxx_check_insert_range): Add check\n+\tusing __foreign_iterator.\n+\t(__gibcxx_check_insert_range_after): Likewise.\n+\t* include/debug/string (_Insert_range_from_self_is_safe<>):\n+\tPartially specialized to mark __gnu_debug::basic_string<> as\n+\tsupporting self range insert.\n+\t* include/debug/list (_Insert_range_from_self_is_safe<>):\n+\tPartially specialized to mark std::list as supporting self range\n+\tinsert if _GLIBCXX_DEBUG_PEDANTIC is not defined.\n+\t* include/debug/forward_list (_Insert_range_from_self_is_safe<>):\n+\tLikewise.\n+\t* src/c++11/debug.cc (_S_debug_messages): Add\n+\t__msg_insert_itself_range_entry message.\n+\t(_Error_formatter::_Parameter::_M_print_description): Display\n+\titerator sequence address rather than sequence address when the\n+\tparameter type is an iterator.\n+\t(_Error_formatter::_M_print_word): Enhance behavior when\n+\tdisplaying a word with an appended '\\n'.\n+\t* testsuite/util/debug/checks.h (check_insert4<>): New.\n+\t* testsuite/23_containers/deque/debug/insert5_neg.cc: New.\n+\t* testsuite/23_containers/vector/debug/insert5_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/debug/insert6_neg.cc: Likewise.\n+\t* testsuite/23_containers/vector/debug/57779_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/debug/insert5_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/debug/insert_after4_neg.cc:\n+\tLikewise.\n+\n 2013-08-01  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n \n \tPR c++/54537"}, {"sha": "15dd8d7379714fa9f5e6a661c3b9aed201c0114c", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -114,7 +114,9 @@ namespace __gnu_debug\n     // unordered container buckets\n     __msg_bucket_index_oob,\n     __msg_valid_load_factor,\n-    __msg_equal_allocs\n+    // others\n+    __msg_equal_allocs,\n+    __msg_insert_range_from_self\n   };\n \n   class _Error_formatter"}, {"sha": "4c8ac371c9410c894c5f40b2e622fbef74849196", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -796,6 +796,13 @@ namespace __gnu_debug\n       _S_Is_Beginnest(_BaseIt __it, const _Sequence* __seq)\n       { return _S_Is(__it, __seq); }\n     };\n+\n+#ifndef _GLIBCXX_DEBUG_PEDANTIC\n+  template<class _Tp, class _Alloc>\n+    struct _Insert_range_from_self_is_safe<\n+      std::__debug::forward_list<_Tp, _Alloc> >\n+      { enum { __value = 1 }; };\n+#endif\n }\n \n #endif"}, {"sha": "87478c6fbc15b2b8c954be04ec0f895b1e3706c7", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 126, "deletions": 1, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -32,14 +32,22 @@\n #include <bits/c++config.h>\n #include <bits/stl_iterator_base_types.h> // for iterator_traits, categories and\n \t\t\t\t\t  // _Iter_base\n-#include <bits/cpp_type_traits.h>         // for __is_integer\n+#include <bits/cpp_type_traits.h>\t  // for __is_integer\n+#if __cplusplus >= 201103L\n+# include <bits/stl_function.h>\t\t  // for less and greater_equal\n+# include <type_traits>\t\t\t  // for common_type\n+#endif\n #include <debug/formatter.h>\n \n namespace __gnu_debug\n {\n   template<typename _Iterator, typename _Sequence>\n     class _Safe_iterator;\n \n+  template<typename _Sequence>\n+    struct _Insert_range_from_self_is_safe\n+    { enum { __value = 0 }; };\n+\n   // An arbitrary iterator pointer is not singular.\n   inline bool\n   __check_singular_aux(const void*) { return false; }\n@@ -162,6 +170,123 @@ namespace __gnu_debug\n       return __first;\n     }\n \n+#if __cplusplus >= 201103L\n+  template<typename _Iterator, typename _Sequence,\n+\t   typename _InputIterator,\n+\t   typename _PointerType1,\n+\t   typename _PointerType2>\n+    inline bool\n+    __foreign_iterator_aux4(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t\t\t    _InputIterator __other,\n+\t\t\t    _PointerType1, _PointerType2)\n+    {\n+      typedef typename std::common_type<_PointerType1,\n+\t\t\t\t\t_PointerType2>::type _PointerType;\n+      std::less<_PointerType> __l;\n+      std::greater_equal<_PointerType> __ge;\n+\n+      return\n+\t__l(std::addressof(*__other),\n+\t    std::addressof(*(__it._M_get_sequence()->_M_base().begin())))\n+\t|| __ge(std::addressof(*__other),\n+\t\tstd::addressof(*(__it._M_get_sequence()->_M_base().end() - 1)) + 1);\n+      \n+    }\n+\t\t\t  \n+  template<typename _Iterator, typename _Sequence, typename _InputIterator>\n+    inline bool\n+    __foreign_iterator_aux3(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t\t\t    _InputIterator __other,\n+\t\t\t    std::true_type)\n+    {\n+      // Only containers with all elements in contiguous memory can have their\n+      // elements passed through pointers.\n+      // Arithmetics is here just to make sure we are not dereferencing\n+      // past-the-end iterator.\n+      if (__it._M_get_sequence()->_M_base().begin()\n+\t  != __it._M_get_sequence()->_M_base().end())\n+\tif (std::__addressof(*(__it._M_get_sequence()->_M_base().end() - 1))\n+\t    - std::__addressof(*(__it._M_get_sequence()->_M_base().begin()))\n+\t    == __it._M_get_sequence()->size() - 1)\n+\t  return __foreign_iterator_aux4(__it, __other,\n+\t\t\tstd::addressof(*(__it._M_get_sequence()->_M_base().begin())),\n+\t\t\tstd::addressof(*__other));\n+      return true;\n+    }\n+\t\t\t   \n+  /* Fallback overload for which we can't say, assume it is valid. */\n+  template<typename _Iterator, typename _Sequence, typename _InputIterator>\n+    inline bool\n+    __foreign_iterator_aux3(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t\t\t    _InputIterator __other,\n+\t\t\t    std::false_type)\n+    { return true; }\n+#endif\n+\t\t\t   \n+  /** Checks that iterators do not belong to the same sequence. */\n+  template<typename _Iterator, typename _Sequence, typename _OtherIterator>\n+    inline bool\n+    __foreign_iterator_aux2(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t\tconst _Safe_iterator<_OtherIterator, _Sequence>& __other,\n+\t\tstd::input_iterator_tag)\n+    { return __it._M_get_sequence() != __other._M_get_sequence(); }\n+\t\t\t   \n+#if __cplusplus >= 201103L\n+  /* This overload detects when passing pointers to the contained elements rather\n+     than using iterators.\n+   */\n+  template<typename _Iterator, typename _Sequence, typename _InputIterator>\n+    inline bool\n+    __foreign_iterator_aux2(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t\t\t    _InputIterator __other,\n+\t\t\t    std::random_access_iterator_tag)\n+    {\n+      typedef typename _Sequence::const_iterator _ItType;\n+      typedef typename std::iterator_traits<_ItType>::reference _Ref;\n+      return __foreign_iterator_aux3(__it, __other,\n+\t\t\t\t     std::is_lvalue_reference<_Ref>());\n+    }\n+#endif\n+\t\t\t   \n+  /* Fallback overload for which we can't say, assume it is valid. */\n+  template<typename _Iterator, typename _Sequence, typename _InputIterator>\n+    inline bool\n+    __foreign_iterator_aux2(const _Safe_iterator<_Iterator, _Sequence>&,\n+\t\t\t   _InputIterator,\n+\t\t\t   std::input_iterator_tag)\n+    { return true; }\n+\t\t\t   \n+  template<typename _Iterator, typename _Sequence,\n+\t   typename _Integral>\n+    inline bool\n+    __foreign_iterator_aux(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t\t\t   _Integral __other,\n+\t\t\t   std::__true_type)\n+    { return true; }\n+\n+  template<typename _Iterator, typename _Sequence,\n+\t   typename _InputIterator>\n+    inline bool\n+    __foreign_iterator_aux(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t\t\t   _InputIterator __other,\n+\t\t\t   std::__false_type)\n+    {\n+      return\n+\t_Insert_range_from_self_is_safe<_Sequence>::__value\n+\t|| __foreign_iterator_aux2(__it, __other,\n+\t\t\t\t   std::__iterator_category(__it));\n+    }\n+\n+  template<typename _Iterator, typename _Sequence,\n+\t   typename _InputIterator>\n+    inline bool\n+    __foreign_iterator(const _Safe_iterator<_Iterator, _Sequence>& __it,\n+\t\t       _InputIterator __other)\n+    {\n+      typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n+      return __foreign_iterator_aux(__it, __other, _Integral());\n+    }\n+\n   /** Checks that __s is non-NULL or __n == 0, and then returns __s. */\n   template<typename _CharT, typename _Integer>\n     inline const _CharT*"}, {"sha": "fd00b0148a9dd3bf1c3027af3ae37ed74a36cbed", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -791,4 +791,13 @@ namespace __debug\n } // namespace __debug\n } // namespace std\n \n+#ifndef _GLIBCXX_DEBUG_PEDANTIC\n+namespace __gnu_debug\n+{\n+  template<class _Tp, class _Alloc>\n+    struct _Insert_range_from_self_is_safe<std::__debug::list<_Tp, _Alloc> >\n+    { enum { __value = 1 }; };\n+}\n+#endif\n+\n #endif"}, {"sha": "521e8c0fa4761f1266087f7d180f010356d1a999", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -72,11 +72,11 @@ _GLIBCXX_DEBUG_VERIFY(_First != _Last,\t\t\t\t\t\\\n */\n #define __glibcxx_check_insert(_Position)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(!_Position._M_singular(),\t\t\t\t\\\n-\t\t      _M_message(__gnu_debug::__msg_insert_singular) \\\n+\t\t      _M_message(__gnu_debug::__msg_insert_singular)\t\\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position));\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n-\t\t      _M_message(__gnu_debug::__msg_insert_different) \\\n+\t\t      _M_message(__gnu_debug::__msg_insert_different)\t\\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position))\n \n@@ -101,15 +101,16 @@ _GLIBCXX_DEBUG_VERIFY(!_Position._M_is_end(),\t\t\t\t\\\n  *  that it reference the sequence we are inserting into, and that the\n  *  iterator range [_First, Last) is a valid (possibly empty)\n  *  range. Note that this macro is only valid when the container is a\n- *  _Safe_sequence and the iterator is a _Safe_iterator.\n- *\n- *  @todo We would like to be able to check for noninterference of\n- *  _Position and the range [_First, _Last), but that can't (in\n- *  general) be done.\n+ *  _Safe_sequence and the _Position iterator is a _Safe_iterator.\n */\n #define __glibcxx_check_insert_range(_Position,_First,_Last)\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-__glibcxx_check_insert(_Position)\n+__glibcxx_check_insert(_Position);\t\t\t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First),\\\n+\t\t      _M_message(__gnu_debug::__msg_insert_range_from_self)\\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n+\t\t      ._M_sequence(*this, \"this\"))\n \n /** Verify that we can insert the values in the iterator range\n  *  [_First, _Last) into *this after the iterator _Position.  Insertion\n@@ -126,7 +127,12 @@ __glibcxx_check_insert(_Position)\n */\n #define __glibcxx_check_insert_range_after(_Position,_First,_Last)\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-__glibcxx_check_insert_after(_Position)\n+__glibcxx_check_insert_after(_Position);\t\t\t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__foreign_iterator(_Position,_First),\\\n+\t\t      _M_message(__gnu_debug::__msg_insert_range_from_self)\\\n+\t\t      ._M_iterator(_First, #_First)\t\t\t\\\n+\t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n+\t\t      ._M_sequence(*this, \"this\"))\n \n /** Verify that we can erase the element referenced by the iterator\n  * _Position. We can erase the element if the _Position iterator is\n@@ -332,7 +338,7 @@ _GLIBCXX_DEBUG_VERIFY(_F > 0.0f,\t\t\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_valid_load_factor)\t\\\n                       ._M_sequence(*this, \"this\"))\n \n-#define __glibcxx_check_equal_allocs(_Other)\t\t\t\\\n+#define __glibcxx_check_equal_allocs(_Other)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(this->get_allocator() == _Other.get_allocator(),\t\\\n \t\t      _M_message(__gnu_debug::__msg_equal_allocs)\t\\\n \t\t      ._M_sequence(*this, \"this\"))"}, {"sha": "9e856c1ee8c54cc5f528b59534d944946254b999", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -1156,6 +1156,11 @@ namespace __gnu_debug\n   typedef basic_string<wchar_t> wstring;\n #endif\n \n+  template<typename _CharT, typename _Traits, typename _Allocator>\n+    struct _Insert_range_from_self_is_safe<\n+      __gnu_debug::basic_string<_CharT, _Traits, _Allocator> >\n+      { enum { __value = 1 }; };\n+\n } // namespace __gnu_debug\n \n #endif"}, {"sha": "260009c1172dec3f589d50ce8a85addfd0ce4299", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -181,7 +181,8 @@ namespace __gnu_debug\n     \"attempt to access container with out-of-bounds bucket index %2;,\"\n     \" container only holds %3; buckets\",\n     \"load factor shall be positive\",\n-    \"allocators must be equal\"\n+    \"allocators must be equal\",\n+    \"attempt to insert with an iterator range [%1.name;, %2.name;) from this container\"\n   };\n \n   void\n@@ -695,7 +696,7 @@ namespace __gnu_debug\n \t      }\n \t    \n \t    __formatter->_M_format_word(__buf, __bufsize, \"@ 0x%p\\n\", \n-\t\t\t\t\t_M_variant._M_sequence._M_address);\n+\t\t\t\t\t_M_variant._M_iterator._M_sequence);\n \t    __formatter->_M_print_word(__buf);\n \t  }\n \t__formatter->_M_print_word(\"}\\n\");\n@@ -808,8 +809,11 @@ namespace __gnu_debug\n     if (__length == 0)\n       return;\n     \n-    if ((_M_column + __length < _M_max_length)\n-\t|| (__length >= _M_max_length && _M_column == 1)) \n+    size_t __visual_length\n+      = __word[__length - 1] == '\\n' ? __length - 1 : __length;\n+    if (__visual_length == 0\n+\t|| (_M_column + __visual_length < _M_max_length)\n+\t|| (__visual_length >= _M_max_length && _M_column == 1)) \n       {\n \t// If this isn't the first line, indent\n \tif (_M_column == 1 && !_M_first_line)\n@@ -823,17 +827,17 @@ namespace __gnu_debug\n \t  }\n \t\n \tfprintf(stderr, \"%s\", __word);\n-\t_M_column += __length;\n \t\n \tif (__word[__length - 1] == '\\n') \n \t  {\n \t    _M_first_line = false;\n \t    _M_column = 1;\n \t  }\n+\telse\n+\t  _M_column += __length;\n       }\n     else\n       {\n-\t_M_column = 1;\n \t_M_print_word(\"\\n\");\n \t_M_print_word(__word);\n       }"}, {"sha": "51d9fd3e7ab8d22c9704d4b4b6ebed385adcbee9", "filename": "libstdc++-v3/testsuite/23_containers/deque/debug/insert5_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Finsert5_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Finsert5_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Finsert5_neg.cc?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <deque>\n+#include <debug/checks.h>\n+\n+void test01()\n+{\n+  __gnu_test::check_insert4<std::deque<int> >();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f2e7847f607c610acfd172e6a92470444585fa74", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/debug/insert_after4_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Finsert_after4_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Finsert_after4_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Finsert_after4_neg.cc?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-options \"-std=gnu++11 -D_GLIBCXX_DEBUG_PEDANTIC\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <forward_list>\n+#include <iterator>\n+\n+void test01()\n+{\n+  std::forward_list<int> fl{ 1, 2, 3 };\n+  fl.insert_after(fl.before_begin(), fl.begin(), std::next(fl.begin(), 2));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7f748bbb8a6054df4cb6e978d66f012154924a53", "filename": "libstdc++-v3/testsuite/23_containers/list/debug/insert5_neg.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fdebug%2Finsert5_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fdebug%2Finsert5_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fdebug%2Finsert5_neg.cc?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-options \"-D_GLIBCXX_DEBUG_PEDANTIC\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <list>\n+#include <debug/checks.h>\n+\n+void test01()\n+{\n+  __gnu_test::check_insert4<std::list<int> >();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "10ee76675f57d273ed5d2457fcc891257adb587d", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/57779_neg.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F57779_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F57779_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F57779_neg.cc?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-debug-mode \"\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <vector>\n+#include <debug/checks.h>\n+\n+void test01()\n+{\n+  std::vector<int> v;\n+  for (int i = 0; i != 10; ++i)\n+    v.push_back(i);\n+\n+  v.insert(v.begin(), v.data() + 1, v.data() + 5); // Expected failure\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ccdafad76c0f2cd7cbbfc2a6cd595610a6bc14fd", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/insert5_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Finsert5_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Finsert5_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Finsert5_neg.cc?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -0,0 +1,33 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <vector>\n+#include <debug/checks.h>\n+\n+void test01()\n+{\n+  __gnu_test::check_insert4<std::vector<int> >();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "679df5bf84d217c0cbb806c07e49aa3d692f3543", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/insert6_neg.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Finsert6_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Finsert6_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2Finsert6_neg.cc?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+\n+#include <vector>\n+#include <debug/vector>\n+#include <debug/checks.h>\n+\n+void test01()\n+{\n+  std::vector<bool> v;\n+  __gnu_debug::vector<bool> dv;\n+  for (int i = 0; i != 10; ++i)\n+    {\n+      v.push_back((i % 2) != 0);\n+      dv.push_back((i % 2) == 0);\n+    }\n+\n+  dv.insert(dv.begin(), v.begin(), v.begin() + 5);\n+  VERIFY( dv.size() == 15 );\n+}\n+\n+void test02()\n+{\n+  __gnu_test::check_insert4<__gnu_debug::vector<bool> >();\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "01c5beb5cd4be1a831d4094068fdba9b9e0201c0", "filename": "libstdc++-v3/testsuite/util/debug/checks.h", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fdebug%2Fchecks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720787ada5aa74f244b3bc699f4abd991bee425/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fdebug%2Fchecks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fdebug%2Fchecks.h?ref=5720787ada5aa74f244b3bc699f4abd991bee425", "patch": "@@ -129,7 +129,7 @@ namespace __gnu_test\n       c2.assign(last, first); // Expected failure\n     }\n \n-  // Check that invalid range of debug !random debug iterators is detected\n+  // Check that invalid range of debug not random iterators is detected\n   template<typename _Tp>\n     void\n     check_assign3()\n@@ -376,6 +376,34 @@ namespace __gnu_test\n       InsertRangeHelper<cont_type>::Insert(c2, last, first); // Expected failure\n     }\n \n+  template<typename _Tp>\n+    void\n+    check_insert4()\n+    {\n+      bool test __attribute__((unused)) = true;\n+\n+      typedef _Tp cont_type;\n+      typedef typename cont_type::value_type cont_val_type;\n+      typedef typename CopyableValueType<cont_val_type>::value_type val_type;\n+      typedef std::list<val_type> list_type;\n+\n+      generate_unique<val_type> gu;\n+\n+      list_type l;\n+      for (int i = 0; i != 5; ++i)\n+        l.push_back(gu.build());\n+      VERIFY(l.size() == 5);\n+\n+      typename list_type::iterator first = l.begin(); ++first;\n+      typename list_type::iterator last = first; ++last; ++last;\n+\n+      cont_type c1;\n+      InsertRangeHelper<cont_type>::Insert(c1, l.begin(), l.end());\n+      VERIFY(c1.size() == 5);\n+\n+      c1.insert(c1.begin(), c1.begin(), c1.end()); // Expected failure.\n+    }\n+\n   template<typename _Tp>\n     void use_invalid_iterator()\n     {"}]}