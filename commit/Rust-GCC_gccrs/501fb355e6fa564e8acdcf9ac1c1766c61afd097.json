{"sha": "501fb355e6fa564e8acdcf9ac1c1766c61afd097", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAxZmIzNTVlNmZhNTY0ZThhY2RjZjlhYzFjMTc2NmM2MWFmZDA5Nw==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2008-03-28T07:27:11Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-03-28T07:27:11Z"}, "message": "re PR target/31334 (Bad codegen for vector initializer with constants prop'd into a vector initializer)\n\n2008-03-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR target/31334\n        * config/rs6000/rs6000.c (rs6000_expand_vector_init): Create a\n        const_vector when all the vectors are constant.\n\n2008-03-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR target/31334\n        * gcc.target/powerpc/altivec-25.c: Nnew testcase.\n\nFrom-SVN: r133674", "tree": {"sha": "93d46895673dfc10520d7fad5f42cd4ab9b51384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93d46895673dfc10520d7fad5f42cd4ab9b51384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/501fb355e6fa564e8acdcf9ac1c1766c61afd097", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501fb355e6fa564e8acdcf9ac1c1766c61afd097", "html_url": "https://github.com/Rust-GCC/gccrs/commit/501fb355e6fa564e8acdcf9ac1c1766c61afd097", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501fb355e6fa564e8acdcf9ac1c1766c61afd097/comments", "author": null, "committer": null, "parents": [{"sha": "15f4eb4428764da231f74ef77d677abad74355f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f4eb4428764da231f74ef77d677abad74355f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f4eb4428764da231f74ef77d677abad74355f8"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "a5cebe93f9491cd3c5eca01499706b9151a8ba75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501fb355e6fa564e8acdcf9ac1c1766c61afd097/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501fb355e6fa564e8acdcf9ac1c1766c61afd097/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=501fb355e6fa564e8acdcf9ac1c1766c61afd097", "patch": "@@ -1,3 +1,9 @@\n+2008-03-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR target/31334\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_init): Create a\n+\tconst_vector when all the vectors are constant.\n+\n 2008-03-27  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.c (gen_float_relational): Handle unordered"}, {"sha": "a79970939876f373b831af4effcead099a934b3b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501fb355e6fa564e8acdcf9ac1c1766c61afd097/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501fb355e6fa564e8acdcf9ac1c1766c61afd097/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=501fb355e6fa564e8acdcf9ac1c1766c61afd097", "patch": "@@ -2965,25 +2965,26 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n \n   if (n_var == 0)\n     {\n+      rtx const_vec = gen_rtx_CONST_VECTOR (mode, XVEC (vals, 0));\n       if (mode != V4SFmode && all_const_zero)\n \t{\n \t  /* Zero register.  */\n \t  emit_insn (gen_rtx_SET (VOIDmode, target,\n \t\t\t\t  gen_rtx_XOR (mode, target, target)));\n \t  return;\n \t}\n-      else if (mode != V4SFmode && easy_vector_constant (vals, mode))\n+      else if (mode != V4SFmode && easy_vector_constant (const_vec, mode))\n \t{\n \t  /* Splat immediate.  */\n-\t  emit_insn (gen_rtx_SET (VOIDmode, target, vals));\n+\t  emit_insn (gen_rtx_SET (VOIDmode, target, const_vec));\n \t  return;\n \t}\n       else if (all_same)\n \t;\t/* Splat vector element.  */\n       else\n \t{\n \t  /* Load from constant pool.  */\n-\t  emit_move_insn (target, gen_rtx_CONST_VECTOR (mode, XVEC (vals, 0)));\n+\t  emit_move_insn (target, const_vec);\n \t  return;\n \t}\n     }"}, {"sha": "13e59e7413c3cf7a33fb29052a4f58c1ebe3cb37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501fb355e6fa564e8acdcf9ac1c1766c61afd097/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501fb355e6fa564e8acdcf9ac1c1766c61afd097/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=501fb355e6fa564e8acdcf9ac1c1766c61afd097", "patch": "@@ -1,3 +1,8 @@\n+2008-03-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR target/31334\n+\t* gcc.target/powerpc/altivec-25.c: Nnew testcase.\n+\n 2008-03-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/35724"}, {"sha": "a3bd0fd001dc7c92cf220b506f14e5d6de968947", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-25.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501fb355e6fa564e8acdcf9ac1c1766c61afd097/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501fb355e6fa564e8acdcf9ac1c1766c61afd097/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-25.c?ref=501fb355e6fa564e8acdcf9ac1c1766c61afd097", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -Wall\" } */\n+\n+\n+#define vector __attribute__((__vector_size__(16) ))\n+vector int f()\n+{\n+  int t = 4;\n+  return (vector int){t,t,t,t};\n+}\n+vector int f1()\n+{\n+  return (vector int){4,4,4,4};\n+}\n+\n+/* We should be able to materialize the constant vector without\n+   any lvewx instructions as it is constant. */\n+/* { dg-final { scan-assembler-not \"lvewx\" } } */\n+"}]}