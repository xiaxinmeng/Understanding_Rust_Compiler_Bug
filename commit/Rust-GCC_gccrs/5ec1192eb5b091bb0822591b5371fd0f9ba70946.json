{"sha": "5ec1192eb5b091bb0822591b5371fd0f9ba70946", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVjMTE5MmViNWIwOTFiYjA4MjI1OTFiNTM3MWZkMGY5YmE3MDk0Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-21T08:40:24Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-21T08:40:24Z"}, "message": "re PR c++/8218 (Excessively large amount of memory used with classes with large array members)\n\n\tPR c++/8218\n\t* cp-tree.h (lang_type_class): Add contains_empty_class_p.\n\t(CLASSTYPE_CONTAINS_EMPTY_CLASS_P): New macro.\n\t* class.c (check_bases): Update CLASSTYPE_CONTAINS_EMPTY_CLASS_P.\n\t(check_field_decls): Likewise.\n\t(layout_class_type): Likewise.\n\t(finish_struct_1): Initialize it.\n\t(walk_subobject_offsets): Use it to prune searches.\n\nFrom-SVN: r58356", "tree": {"sha": "6ec5aa6e54097ca287116667434de18a185afc25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ec5aa6e54097ca287116667434de18a185afc25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ec1192eb5b091bb0822591b5371fd0f9ba70946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec1192eb5b091bb0822591b5371fd0f9ba70946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec1192eb5b091bb0822591b5371fd0f9ba70946", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec1192eb5b091bb0822591b5371fd0f9ba70946/comments", "author": null, "committer": null, "parents": [{"sha": "97cc1f5e6c4288904aa4360cc2e91a7b45593ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97cc1f5e6c4288904aa4360cc2e91a7b45593ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97cc1f5e6c4288904aa4360cc2e91a7b45593ef2"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "350b016411f1c3f5aa7a029fdbc70ab119286c0d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec1192eb5b091bb0822591b5371fd0f9ba70946/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec1192eb5b091bb0822591b5371fd0f9ba70946/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5ec1192eb5b091bb0822591b5371fd0f9ba70946", "patch": "@@ -1,3 +1,14 @@\n+2002-10-21  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8218\n+\t* cp-tree.h (lang_type_class): Add contains_empty_class_p.\n+\t(CLASSTYPE_CONTAINS_EMPTY_CLASS_P): New macro.\n+\t* class.c (check_bases): Update CLASSTYPE_CONTAINS_EMPTY_CLASS_P.\n+\t(check_field_decls): Likewise.\n+\t(layout_class_type): Likewise.\n+\t(finish_struct_1): Initialize it.\n+\t(walk_subobject_offsets): Use it to prune searches.\n+\n 2002-10-20  Mark Mitchell  <mark@codesourcery.com>\n \n \t* method.c (use_thunk): Compute the vcall index as a HOST_WIDE_INT."}, {"sha": "1745c0dc6dc92f73195d48a137611cad0c5e910e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec1192eb5b091bb0822591b5371fd0f9ba70946/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec1192eb5b091bb0822591b5371fd0f9ba70946/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5ec1192eb5b091bb0822591b5371fd0f9ba70946", "patch": "@@ -1352,6 +1352,8 @@ check_bases (t, cant_have_default_ctor_p, cant_have_const_ctor_p,\n       TYPE_OVERLOADS_ARRAY_REF (t) |= TYPE_OVERLOADS_ARRAY_REF (basetype);\n       TYPE_OVERLOADS_ARROW (t) |= TYPE_OVERLOADS_ARROW (basetype);\n       TYPE_POLYMORPHIC_P (t) |= TYPE_POLYMORPHIC_P (basetype);\n+      CLASSTYPE_CONTAINS_EMPTY_CLASS_P (t) \n+\t|= CLASSTYPE_CONTAINS_EMPTY_CLASS_P (basetype);\n     }\n }\n \n@@ -3167,10 +3169,18 @@ check_field_decls (tree t, tree *access_decls,\n \t    ;\n \t  else\n \t    {\n+\t      tree element_type;\n+\n \t      /* The class is non-empty.  */\n \t      CLASSTYPE_EMPTY_P (t) = 0;\n \t      /* The class is not even nearly empty.  */\n \t      CLASSTYPE_NEARLY_EMPTY_P (t) = 0;\n+\t      /* If one of the data members contains an empty class,\n+\t\t so does T.  */\n+\t      element_type = strip_array_types (type);\n+\t      if (CLASS_TYPE_P (element_type) \n+\t\t  && CLASSTYPE_CONTAINS_EMPTY_CLASS_P (element_type))\n+\t\tCLASSTYPE_CONTAINS_EMPTY_CLASS_P (element_type) = 1;\n \t    }\n \t}\n \n@@ -3440,6 +3450,10 @@ walk_subobject_offsets (type, f, offset, offsets, max_offset, vbases_p)\n       tree binfo;\n       int i;\n \n+      /* Avoid recursing into objects that are not interesting.  */\n+      if (!CLASSTYPE_CONTAINS_EMPTY_CLASS_P (type))\n+\treturn 0;\n+\n       /* Record the location of TYPE.  */\n       r = (*f) (type, offset, offsets);\n       if (r)\n@@ -3523,9 +3537,15 @@ walk_subobject_offsets (type, f, offset, offsets, max_offset, vbases_p)\n     }\n   else if (TREE_CODE (type) == ARRAY_TYPE)\n     {\n+      tree element_type = strip_array_types (type);\n       tree domain = TYPE_DOMAIN (type);\n       tree index;\n \n+      /* Avoid recursing into objects that are not interesting.  */\n+      if (!CLASS_TYPE_P (element_type)\n+\t  || !CLASSTYPE_CONTAINS_EMPTY_CLASS_P (element_type))\n+\treturn 0;\n+\n       /* Step through each of the elements in the array.  */\n       for (index = size_zero_node;\n \t   /* G++ 3.2 had an off-by-one error here.  */\n@@ -4988,6 +5008,10 @@ layout_class_type (tree t, int *vfuns_p, tree *virtuals_p)\n   else\n     CLASSTYPE_AS_BASE (t) = t;\n \n+  /* Every empty class contains an empty class.  */\n+  if (CLASSTYPE_EMPTY_P (t))\n+    CLASSTYPE_CONTAINS_EMPTY_CLASS_P (t) = 1;\n+\n   /* Set the TYPE_DECL for this type to contain the right\n      value for DECL_OFFSET, so that we can use it as part\n      of a COMPONENT_REF for multiple inheritance.  */\n@@ -5076,10 +5100,11 @@ finish_struct_1 (t)\n \n   fixup_inline_methods (t);\n   \n-  /* Assume that the class is both empty and nearly empty; we'll clear\n-     these flag if necessary.  */\n+  /* Make assumptions about the class; we'll reset the flags if\n+     necessary.  */\n   CLASSTYPE_EMPTY_P (t) = 1;\n   CLASSTYPE_NEARLY_EMPTY_P (t) = 1;\n+  CLASSTYPE_CONTAINS_EMPTY_CLASS_P (t) = 0;\n \n   /* Do end-of-class semantic processing: checking the validity of the\n      bases and members and add implicitly generated methods.  */"}, {"sha": "06e80b58601b39b17fd0e7f8d17681f7f71d6643", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ec1192eb5b091bb0822591b5371fd0f9ba70946/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ec1192eb5b091bb0822591b5371fd0f9ba70946/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5ec1192eb5b091bb0822591b5371fd0f9ba70946", "patch": "@@ -1135,6 +1135,7 @@ struct lang_type_class GTY(())\n   unsigned anon_aggr : 1;\n   unsigned non_zero_init : 1;\n   unsigned empty_p : 1;\n+  unsigned contains_empty_class_p : 1;\n \n   /* When adding a flag here, consider whether or not it ought to\n      apply to a template instance if it applies to the template.  If\n@@ -1143,7 +1144,7 @@ struct lang_type_class GTY(())\n   /* There are some bits left to fill out a 32-bit word.  Keep track\n      of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 5;\n+  unsigned dummy : 4;\n \n   int vsize;\n \n@@ -1457,6 +1458,10 @@ struct lang_type GTY(())\n #define CLASSTYPE_NEARLY_EMPTY_P(NODE) \\\n   (LANG_TYPE_CLASS_CHECK (NODE)->nearly_empty_p)\n \n+/* Nonzero if this class contains an empty subobject.  */\n+#define CLASSTYPE_CONTAINS_EMPTY_CLASS_P(NODE) \\\n+  (LANG_TYPE_CLASS_CHECK (NODE)->contains_empty_class_p)\n+\n /* A list of class types of which this type is a friend.  The\n    TREE_VALUE is normally a TYPE, but will be a TEMPLATE_DECL in the\n    case of a template friend.  */"}]}