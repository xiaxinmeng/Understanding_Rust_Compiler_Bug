{"sha": "a2ad1f7960d5b070f377c8979867c7bc97785304", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJhZDFmNzk2MGQ1YjA3MGYzNzdjODk3OTg2N2M3YmM5Nzc4NTMwNA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2007-12-13T10:42:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-12-13T10:42:14Z"}, "message": "gnat_ugn.texi: Dcoument new rules for style check comment alignment Document that suffixes may...\n\n2007-12-06  Robert Dewar  <dewar@adacore.com>\n\t    Bob Duff  <duff@adacore.com>\n\n\t* gnat_ugn.texi: Dcoument new rules for style check comment alignment\n\tDocument that suffixes may be terminations of each others\n\tAdd doc for -gnatw.a and -gnatw.A\n\tDocument gnatbind -Wx switch\n\tDocument BOM recognition\n\tDocument pragma Implemented_By_Entry.\n\tDocument new units.\n\n\t* gnat_rm.texi: (Favor_Top_Level): Document new pragma.\n\tAdd doc for pragma Unreferenced suppressing no entities referenced msg\n\tAdd documentation of GNAT.Directory_Operations.Iteration\n\tAdd documentation of GNAT.Random_Numbers\n\tAdd documentation for pragma Shared.\n\tCorrect documentation for Bit_Order\n\tAdd documentation for the Pool_Address attribute.\n\tFix and improve documentation of pragma machine_attribute.\n\tNew pragma Fast_Math\n\tDocument BOM recognition\n\n\t* vms_data.ads: Add entries for -gnatw.a -gnatw.A\n\tAdd /Wide_Character_Encoding for binder\n\tAdd qualifier for the new gnatpp option --no-separate-loop-then\n\nFrom-SVN: r130872", "tree": {"sha": "401273df643f660e1ce7274990098343616ae6a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/401273df643f660e1ce7274990098343616ae6a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2ad1f7960d5b070f377c8979867c7bc97785304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ad1f7960d5b070f377c8979867c7bc97785304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ad1f7960d5b070f377c8979867c7bc97785304", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ad1f7960d5b070f377c8979867c7bc97785304/comments", "author": null, "committer": null, "parents": [{"sha": "b1c6645b93c2cc50b6b161911a7936ed50b26fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c6645b93c2cc50b6b161911a7936ed50b26fe4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c6645b93c2cc50b6b161911a7936ed50b26fe4"}], "stats": {"total": 620, "additions": 483, "deletions": 137}, "files": [{"sha": "cf2db497cac03f168b0d83582cc6a275883fa094", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 383, "deletions": 127, "changes": 510, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ad1f7960d5b070f377c8979867c7bc97785304/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ad1f7960d5b070f377c8979867c7bc97785304/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=a2ad1f7960d5b070f377c8979867c7bc97785304", "patch": "@@ -135,9 +135,12 @@ Implementation Defined Pragmas\n * Pragma Extend_System::\n * Pragma External::\n * Pragma External_Name_Casing::\n+* Pragma Fast_Math::\n+* Pragma Favor_Top_Level::\n * Pragma Finalize_Storage_Only::\n * Pragma Float_Representation::\n * Pragma Ident::\n+* Pragma Implemented_By_Entry::\n * Pragma Implicit_Packing::\n * Pragma Import_Exception::\n * Pragma Import_Function::\n@@ -175,6 +178,7 @@ Implementation Defined Pragmas\n * Pragma Psect_Object::\n * Pragma Pure_Function::\n * Pragma Restriction_Warnings::\n+* Pragma Shared::\n * Pragma Source_File_Name::\n * Pragma Source_File_Name_Project::\n * Pragma Source_Reference::\n@@ -238,6 +242,7 @@ Implementation Defined Attributes\n * Null_Parameter::\n * Object_Size::\n * Passed_By_Reference::\n+* Pool_Address::\n * Range_Length::\n * Safe_Emax::\n * Safe_Large::\n@@ -305,6 +310,7 @@ The GNAT Library\n * GNAT.Bubble_Sort (g-bubsor.ads)::\n * GNAT.Bubble_Sort_A (g-busora.ads)::\n * GNAT.Bubble_Sort_G (g-busorg.ads)::\n+* GNAT.Byte_Order_Mark (g-byorma.ads)::\n * GNAT.Byte_Swapping (g-bytswa.ads)::\n * GNAT.Calendar (g-calend.ads)::\n * GNAT.Calendar.Time_IO (g-catiio.ads)::\n@@ -319,9 +325,14 @@ The GNAT Library\n * GNAT.Current_Exception (g-curexc.ads)::\n * GNAT.Debug_Pools (g-debpoo.ads)::\n * GNAT.Debug_Utilities (g-debuti.ads)::\n+* GNAT.Decode_String (g-decstr.ads)::\n+* GNAT.Decode_UTF8_String (g-deutst.ads)::\n * GNAT.Directory_Operations (g-dirope.ads)::\n+* GNAT.Directory_Operations.Iteration (g-diopit.ads)::\n * GNAT.Dynamic_HTables (g-dynhta.ads)::\n * GNAT.Dynamic_Tables (g-dyntab.ads)::\n+* GNAT.Encode_String (g-encstr.ads)::\n+* GNAT.Encode_UTF8_String (g-enutst.ads)::\n * GNAT.Exception_Actions (g-excact.ads)::\n * GNAT.Exception_Traces (g-exctra.ads)::\n * GNAT.Exceptions (g-except.ads)::\n@@ -339,6 +350,7 @@ The GNAT Library\n * GNAT.Most_Recent_Exception (g-moreex.ads)::\n * GNAT.OS_Lib (g-os_lib.ads)::\n * GNAT.Perfect_Hash_Generators (g-pehage.ads)::\n+* GNAT.Random_Numbers (g-rannum.ads)\n * GNAT.Regexp (g-regexp.ads)::\n * GNAT.Registry (g-regist.ads)::\n * GNAT.Regpat (g-regpat.ads)::\n@@ -348,7 +360,8 @@ The GNAT Library\n * GNAT.Signals (g-signal.ads)::\n * GNAT.Sockets (g-socket.ads)::\n * GNAT.Source_Info (g-souinf.ads)::\n-* GNAT.Spell_Checker (g-speche.ads)::\n+* GNAT.Spelling_Checker (g-speche.ads)::\n+* GNAT.Spelling_Checker_Generic (g-spchge.ads)::\n * GNAT.Spitbol.Patterns (g-spipat.ads)::\n * GNAT.Spitbol (g-spitbo.ads)::\n * GNAT.Spitbol.Table_Boolean (g-sptabo.ads)::\n@@ -361,7 +374,11 @@ The GNAT Library\n * GNAT.Threads (g-thread.ads)::\n * GNAT.Traceback (g-traceb.ads)::\n * GNAT.Traceback.Symbolic (g-trasym.ads)::\n+* GNAT.UTF_32 (g-utf_32.ads)::\n+* GNAT.UTF_32_Spelling_Checker (g-u3spch.ads)::\n+* GNAT.Wide_Spelling_Checker (g-wispch.ads)::\n * GNAT.Wide_String_Split (g-wistsp.ads)::\n+* GNAT.Wide_Wide_Spelling_Checker (g-zspche.ads)::\n * GNAT.Wide_Wide_String_Split (g-zistsp.ads)::\n * Interfaces.C.Extensions (i-cexten.ads)::\n * Interfaces.C.Streams (i-cstrea.ads)::\n@@ -658,11 +675,11 @@ Manual.\n \n In addition, Ada allows implementations to define additional pragmas\n whose meaning is defined by the implementation.  GNAT provides a number\n-of these implementation-dependent pragmas which can be used to extend\n+of these implementation-defined pragmas, which can be used to extend\n and enhance the functionality of the compiler.  This section of the GNAT\n Reference Manual describes these additional pragmas.\n \n-Note that any program using these pragmas may not be portable to other\n+Note that any program using these pragmas might not be portable to other\n compilers (although GNAT implements this set of pragmas on all\n platforms).  Therefore if portability to other compilers is an important\n consideration, the use of these pragmas should be minimized.\n@@ -704,9 +721,12 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Extend_System::\n * Pragma External::\n * Pragma External_Name_Casing::\n+* Pragma Fast_Math::\n+* Pragma Favor_Top_Level::\n * Pragma Finalize_Storage_Only::\n * Pragma Float_Representation::\n * Pragma Ident::\n+* Pragma Implemented_By_Entry::\n * Pragma Implicit_Packing::\n * Pragma Import_Exception::\n * Pragma Import_Function::\n@@ -744,6 +764,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Psect_Object::\n * Pragma Pure_Function::\n * Pragma Restriction_Warnings::\n+* Pragma Shared::\n * Pragma Source_File_Name::\n * Pragma Source_File_Name_Project::\n * Pragma Source_Reference::\n@@ -807,7 +828,7 @@ which it applies, regardless of the mode set by the command line\n switches.  In Ada 83 mode, GNAT attempts to be as compatible with\n the syntax and semantics of Ada 83, as defined in the original Ada\n 83 Reference Manual as possible.  In particular, the keywords added by Ada 95\n-(and Ada 2005) are not recognized, optional package bodies are allowed,\n+and Ada 2005 are not recognized, optional package bodies are allowed,\n and generics may name types with unknown discriminants without using\n the @code{(<>)} notation.  In addition, some but not all of the additional\n restrictions of Ada 83 are enforced.\n@@ -882,7 +903,7 @@ ARG ::= NAME | EXPRESSION\n \n @noindent\n This pragma is used to annotate programs.  @var{identifier} identifies\n-the type of annotation.  GNAT verifies this is an identifier, but does\n+the type of annotation.  GNAT verifies that it is an identifier, but does\n not otherwise analyze it.  The @var{arg} argument\n can be either a string literal or an\n expression.  String literals are assumed to be of type\n@@ -942,22 +963,21 @@ type of the expression is either @code{Standard.Boolean}, or any type derived\n from this standard type.\n \n If assertions are disabled (switch @code{-gnata} not used), then there\n-is no effect (and in particular, any side effects from the expression\n-are suppressed).  More precisely it is not quite true that the pragma\n-has no effect, since the expression is analyzed, and may cause types\n-to be frozen if they are mentioned here for the first time.\n+is no run-time effect (and in particular, any side effects from the\n+expression will not occur at run time).  (The expression is still\n+analyzed at compile time, and may cause types to be frozen if they are\n+mentioned here for the first time).\n \n If assertions are enabled, then the given expression is tested, and if\n it is @code{False} then @code{System.Assertions.Raise_Assert_Failure} is called\n which results in the raising of @code{Assert_Failure} with the given message.\n \n-If the boolean expression has side effects, these side effects will turn\n-on and off with the setting of the assertions mode, resulting in\n-assertions that have an effect on the program.  You should generally\n-avoid side effects in the expression arguments of this pragma.  However,\n-the expressions are analyzed for semantic correctness whether or not\n-assertions are enabled, so turning assertions on and off cannot affect\n-the legality of a program.\n+You should generally avoid side effects in the expression arguments of\n+this pragma, because these side effects will turn on and off with the\n+setting of the assertions mode, resulting in assertions that have an\n+effect on the program.  However, the expressions are analyzed for\n+semantic correctness whether or not assertions are enabled, so turning\n+assertions on and off cannot affect the legality of a program.\n \n @node Pragma Ast_Entry\n @unnumberedsec Pragma Ast_Entry\n@@ -1001,7 +1021,8 @@ copy if all of the following conditions are met:\n \n @itemize @bullet\n @item\n-The size of the record type does not exceed@*@var{static_integer_expression}.\n+The size of the record type does not exceed the value specified for\n+@code{Max_Size}.\n @item\n The record type has @code{Convention C}.\n @item\n@@ -1031,7 +1052,7 @@ pragma Check_Name (check_name_IDENTIFIER);\n @end smallexample\n \n @noindent\n-This is a configuration pragma which defines a new implementation\n+This is a configuration pragma that defines a new implementation\n defined check name (unless IDENTIFIER matches one of the predefined\n check names, in which case the pragma has no effect). Check names\n are global to a partition, so if two more more configuration pragmas\n@@ -1048,7 +1069,6 @@ the current unit, or if it appears at the start of any unit that\n is part of the dependency set of the current unit (e.g. units that\n are mentioned in @code{with} clauses.\n \n-Normally the default mechanism for passing C convention records to C\n @node Pragma Comment\n @unnumberedsec Pragma Comment\n @findex Comment\n@@ -1076,7 +1096,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Common_Object (\n-     [Internal =>] local_NAME,\n+     [Internal =>] LOCAL_NAME\n   [, [External =>] EXTERNAL_SYMBOL]\n   [, [Size     =>] EXTERNAL_SYMBOL] );\n \n@@ -1089,10 +1109,10 @@ EXTERNAL_SYMBOL ::=\n This pragma enables the shared use of variables stored in overlaid\n linker areas corresponding to the use of @code{COMMON}\n in Fortran.  The single\n-object @var{local_NAME} is assigned to the area designated by\n+object @var{LOCAL_NAME} is assigned to the area designated by\n the @var{External} argument.\n You may define a record to correspond to a series\n-of fields.  The @var{size} argument\n+of fields.  The @var{Size} argument\n is syntax checked in GNAT, but otherwise ignored.\n \n @code{Common_Object} is not supported on all platforms.  If no\n@@ -1139,19 +1159,8 @@ pragma Compile_Time_Warning\n @end smallexample\n \n @noindent\n-This pragma can be used to generate additional compile time warnings. It\n-is particularly useful in generics, where warnings can be issued for\n-specific problematic instantiations. The first parameter is a boolean\n-expression. The pragma is effective only if the value of this expression\n-is known at compile time, and has the value True. The set of expressions\n-whose values are known at compile time includes all static boolean\n-expressions, and also other values which the compiler can determine\n-at compile time (e.g. the size of a record type set by an explicit\n-size representation clause, or the value of a variable which was\n-initialized to a constant and is known not to have been modified).\n-If these conditions are met, a warning message is generated using\n-the value given as the second argument. This string value may contain\n-embedded ASCII.LF characters to break the message into multiple lines.\n+Same as pragma Compile_Time_Error, except a warning is issued instead\n+of an error message.\n \n @node Pragma Complete_Representation\n @unnumberedsec Pragma Complete_Representation\n@@ -1180,7 +1189,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Complex_Representation\n-        ([Entity =>] local_NAME);\n+        ([Entity =>] LOCAL_NAME);\n @end smallexample\n \n @noindent\n@@ -1204,7 +1213,7 @@ Syntax:\n @smallexample @c ada\n pragma Component_Alignment (\n      [Form =>] ALIGNMENT_CHOICE\n-  [, [Name =>] type_local_NAME]);\n+  [, [Name =>] type_LOCAL_NAME]);\n \n ALIGNMENT_CHOICE ::=\n   Component_Size\n@@ -1251,7 +1260,7 @@ alignment).\n @end table\n \n @noindent\n-If the @code{Name} parameter is present, @var{type_local_NAME} must\n+If the @code{Name} parameter is present, @var{type_LOCAL_NAME} must\n refer to a local record or array type, and the specified alignment\n choice applies to the specified type.  The use of\n @code{Component_Alignment} together with a pragma @code{Pack} causes the\n@@ -1315,7 +1324,7 @@ would be used system-wide.\n Syntax:\n \n @smallexample @c ada\n-pragma CPP_Class ([Entity =>] local_NAME);\n+pragma CPP_Class ([Entity =>] LOCAL_NAME);\n @end smallexample\n \n @noindent\n@@ -1347,7 +1356,7 @@ using pragma @code{Import} with @code{Convention} = @code{CPP}.\n Syntax:\n \n @smallexample @c ada\n-pragma CPP_Constructor ([Entity =>] local_NAME\n+pragma CPP_Constructor ([Entity =>] LOCAL_NAME\n   [, [External_Name =>] static_string_EXPRESSION ]\n   [, [Link_Name     =>] static_string_EXPRESSION ]);\n @end smallexample\n@@ -1653,8 +1662,8 @@ Syntax:\n \n @smallexample @c ada\n pragma Export_Exception (\n-     [Internal =>] local_NAME,\n-  [, [External =>] EXTERNAL_SYMBOL,]\n+     [Internal =>] LOCAL_NAME\n+  [, [External =>] EXTERNAL_SYMBOL]\n   [, [Form     =>] Ada | VMS]\n   [, [Code     =>] static_integer_EXPRESSION]);\n \n@@ -1682,7 +1691,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Export_Function (\n-     [Internal         =>] local_NAME,\n+     [Internal         =>] LOCAL_NAME\n   [, [External         =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types  =>] PARAMETER_TYPES]\n   [, [Result_Type      =>] result_SUBTYPE_MARK]\n@@ -1760,7 +1769,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Export_Object\n-      [Internal =>] local_NAME,\n+      [Internal =>] LOCAL_NAME\n    [, [External =>] EXTERNAL_SYMBOL]\n    [, [Size     =>] EXTERNAL_SYMBOL]\n \n@@ -1785,7 +1794,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Export_Procedure (\n-     [Internal        =>] local_NAME\n+     [Internal        =>] LOCAL_NAME\n   [, [External        =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types =>] PARAMETER_TYPES]\n   [, [Mechanism       =>] MECHANISM]);\n@@ -1867,7 +1876,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Export_Valued_Procedure (\n-     [Internal        =>] local_NAME\n+     [Internal        =>] LOCAL_NAME\n   [, [External        =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types =>] PARAMETER_TYPES]\n   [, [Mechanism       =>] MECHANISM]);\n@@ -1902,7 +1911,7 @@ CLASS_NAME ::= ubs | ubsb | uba | s | sb | a\n \n @noindent\n This pragma is identical to @code{Export_Procedure} except that the\n-first parameter of @var{local_NAME}, which must be present, must be of\n+first parameter of @var{LOCAL_NAME}, which must be present, must be of\n mode @code{OUT}, and externally the subprogram is treated as a function\n with this parameter as the result of the function.  GNAT provides for\n this capability to allow the use of @code{OUT} and @code{IN OUT}\n@@ -1981,7 +1990,7 @@ Syntax:\n @smallexample @c ada\n pragma External (\n   [   Convention    =>] convention_IDENTIFIER,\n-  [   Entity        =>] local_NAME\n+  [   Entity        =>] LOCAL_NAME\n   [, [External_Name =>] static_string_EXPRESSION ]\n   [, [Link_Name     =>] static_string_EXPRESSION ]);\n @end smallexample\n@@ -2076,14 +2085,60 @@ pragma External_Name_Casing (Uppercase, Uppercase);\n @noindent\n to enforce the upper casing of all external symbols.\n \n+@node Pragma Fast_Math\n+@unnumberedsec Pragma Fast_Math\n+@findex Fast_Math\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Fast_Math;\n+@end smallexample\n+\n+@noindent\n+This is a configuration pragma which activates a mode in which speed is\n+considered more important for floating-point operations than absolutely\n+accurate adherence to the requirements of the standard. Currently the\n+following operations are affected:\n+\n+@table @asis\n+@item Complex Multiplication\n+The normal simple formula for complex multiplication can result in intermediate\n+overflows for numbers near the end of the range. The Ada standard requires that\n+this situation be detected and corrected by scaling, but in Fast_Math mode such\n+cases will simply result in overflow. Note that to take advantage of this you\n+must instantiate your own version of @code{Ada.Numerics.Generic_Complex_Types}\n+under control of the pragma, rather than use the preinstantiated versions.\n+@end table\n+\n+@node Pragma Favor_Top_Level\n+@unnumberedsec Pragma Favor_Top_Level\n+@findex Favor_Top_Level\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Favor_Top_Level (type_NAME);\n+@end smallexample\n+\n+@noindent\n+The named type must be an access-to-subprogram type. This pragma is an\n+efficiency hint to the compiler, regarding the use of 'Access or\n+'Unrestricted_Access on nested (non-library-level) subprograms. The\n+pragma means that nested subprograms are not used with this type, or\n+are rare, so that the generated code should be efficient in the\n+top-level case. When this pragma is used, dynamically generated\n+trampolines may be used on some targets for nested subprograms.\n+See also the No_Implicit_Dynamic_Code restriction.\n+\n @node Pragma Finalize_Storage_Only\n @unnumberedsec Pragma Finalize_Storage_Only\n @findex Finalize_Storage_Only\n @noindent\n Syntax:\n \n @smallexample @c ada\n-pragma Finalize_Storage_Only (first_subtype_local_NAME);\n+pragma Finalize_Storage_Only (first_subtype_LOCAL_NAME);\n @end smallexample\n \n @noindent\n@@ -2159,6 +2214,42 @@ maximum allowed length is 31 characters, so if it is important to\n maintain compatibility with this compiler, you should obey this length\n limit.\n \n+@node Pragma Implemented_By_Entry\n+@unnumberedsec Pragma Implemented_By_Entry\n+@findex Implemented_By_Entry\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Implemented_By_Entry (LOCAL_NAME);\n+@end smallexample\n+\n+@noindent\n+This is a representation pragma which applies to protected, synchronized and\n+task interface primitives. If the pragma is applied to primitive operation Op\n+of interface Iface, it is illegal to override Op in a type that implements\n+Iface, with anything other than an entry.\n+\n+@smallexample @c ada\n+type Iface is protected interface;\n+procedure Do_Something (Object : in out Iface) is abstract;\n+pragma Implemented_By_Entry (Do_Something);\n+\n+protected type P is new Iface with\n+   procedure Do_Something;  --  Illegal\n+end P;\n+\n+task type T is new Iface with\n+   entry Do_Something;      --  Legal\n+end T;\n+@end smallexample\n+\n+@noindent\n+NOTE: The pragma is still in its design stage by the Ada Rapporteur Group. It\n+is intended to be used in conjunction with dispatching requeue statements as\n+described in AI05-0030. Should the ARG decide on an official name and syntax,\n+this pragma will become language-defined rather than GNAT-specific.\n+\n @node Pragma Implicit_Packing\n @unnumberedsec Pragma Implicit_Packing\n @findex Implicit_Packing\n@@ -2203,8 +2294,8 @@ Syntax:\n \n @smallexample @c ada\n pragma Import_Exception (\n-     [Internal =>] local_NAME,\n-  [, [External =>] EXTERNAL_SYMBOL,]\n+     [Internal =>] LOCAL_NAME\n+  [, [External =>] EXTERNAL_SYMBOL]\n   [, [Form     =>] Ada | VMS]\n   [, [Code     =>] static_integer_EXPRESSION]);\n \n@@ -2230,7 +2321,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Import_Function (\n-     [Internal                 =>] local_NAME,\n+     [Internal                 =>] LOCAL_NAME,\n   [, [External                 =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types          =>] PARAMETER_TYPES]\n   [, [Result_Type              =>] SUBTYPE_MARK]\n@@ -2312,8 +2403,8 @@ Syntax:\n \n @smallexample @c ada\n pragma Import_Object\n-     [Internal =>] local_NAME,\n-  [, [External =>] EXTERNAL_SYMBOL],\n+     [Internal =>] LOCAL_NAME\n+  [, [External =>] EXTERNAL_SYMBOL]\n   [, [Size     =>] EXTERNAL_SYMBOL]);\n \n EXTERNAL_SYMBOL ::=\n@@ -2338,7 +2429,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Import_Procedure (\n-     [Internal                 =>] local_NAME,\n+     [Internal                 =>] LOCAL_NAME\n   [, [External                 =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types          =>] PARAMETER_TYPES]\n   [, [Mechanism                =>] MECHANISM]\n@@ -2384,7 +2475,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Import_Valued_Procedure (\n-     [Internal                 =>] local_NAME,\n+     [Internal                 =>] LOCAL_NAME\n   [, [External                 =>] EXTERNAL_SYMBOL]\n   [, [Parameter_Types          =>] PARAMETER_TYPES]\n   [, [Mechanism                =>] MECHANISM]\n@@ -2419,7 +2510,7 @@ CLASS_NAME ::= ubs | ubsb | uba | s | sb | a | nca\n \n @noindent\n This pragma is identical to @code{Import_Procedure} except that the\n-first parameter of @var{local_NAME}, which must be present, must be of\n+first parameter of @var{LOCAL_NAME}, which must be present, must be of\n mode @code{OUT}, and externally the subprogram is treated as a function\n with this parameter as the result of the function.  The purpose of this\n capability is to allow the use of @code{OUT} and @code{IN OUT}\n@@ -2535,8 +2626,8 @@ Syntax:\n @smallexample @c ada\n pragma Interface (\n      [Convention    =>] convention_identifier,\n-     [Entity =>] local_NAME\n-  [, [External_Name =>] static_string_expression],\n+     [Entity        =>] local_NAME\n+  [, [External_Name =>] static_string_expression]\n   [, [Link_Name     =>] static_string_expression]);\n @end smallexample\n \n@@ -2556,7 +2647,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Interface_Name (\n-     [Entity        =>] local_NAME\n+     [Entity        =>] LOCAL_NAME\n   [, [External_Name =>] static_string_EXPRESSION]\n   [, [Link_Name     =>] static_string_EXPRESSION]);\n @end smallexample\n@@ -2574,7 +2665,7 @@ least one of @var{External_Name} or @var{Link_Name}.\n Syntax:\n \n @smallexample @c ada\n-pragma Interrupt_Handler (procedure_local_NAME);\n+pragma Interrupt_Handler (procedure_LOCAL_NAME);\n @end smallexample\n \n @noindent\n@@ -2670,11 +2761,11 @@ and in the case of the signal used to implement the @code{abort} statement.\n Syntax:\n \n @smallexample @c ada\n-pragma Keep_Names ([On =>] enumeration_first_subtype_local_NAME);\n+pragma Keep_Names ([On =>] enumeration_first_subtype_LOCAL_NAME);\n @end smallexample\n \n @noindent\n-The @var{local_NAME} argument\n+The @var{LOCAL_NAME} argument\n must refer to an enumeration first subtype\n in the current declarative part. The effect is to retain the enumeration\n literal names for use by @code{Image} and @code{Value} even if a global\n@@ -2812,17 +2903,17 @@ Syntax:\n \n @smallexample @c ada\n pragma Linker_Alias (\n-  [Entity =>] local_NAME\n+  [Entity =>] LOCAL_NAME,\n   [Target =>] static_string_EXPRESSION);\n @end smallexample\n \n @noindent\n-@var{local_NAME} must refer to an object that is declared at the library\n+@var{LOCAL_NAME} must refer to an object that is declared at the library\n level. This pragma establishes the given entity as a linker alias for the\n given target. It is equivalent to @code{__attribute__((alias))} in GNU C\n-and causes @var{local_NAME} to be emitted as an alias for the symbol\n+and causes @var{LOCAL_NAME} to be emitted as an alias for the symbol\n @var{static_string_EXPRESSION} in the object file, that is to say no space\n-is reserved for @var{local_NAME} by the assembler and it will be resolved\n+is reserved for @var{LOCAL_NAME} by the assembler and it will be resolved\n to the same address as @var{static_string_EXPRESSION} by the linker.\n \n The actual linker name for the target must be used (e.g. the fully\n@@ -2831,7 +2922,7 @@ or it must be declared using the C convention with @code{pragma Import}\n or @code{pragma Export}.\n \n Not all target machines support this pragma. On some of them it is accepted\n-only if @code{pragma Weak_External} has been applied to @var{local_NAME}.\n+only if @code{pragma Weak_External} has been applied to @var{LOCAL_NAME}.\n \n @smallexample @c ada\n --  Example of the use of pragma Linker_Alias\n@@ -2856,7 +2947,7 @@ pragma Linker_Constructor (procedure_LOCAL_NAME);\n @end smallexample\n \n @noindent\n-@var{procedure_local_NAME} must refer to a parameterless procedure that\n+@var{procedure_LOCAL_NAME} must refer to a parameterless procedure that\n is declared at the library level. A procedure to which this pragma is\n applied will be treated as an initialization routine by the linker.\n It is equivalent to @code{__attribute__((constructor))} in GNU C and\n@@ -2886,7 +2977,7 @@ pragma Linker_Destructor (procedure_LOCAL_NAME);\n @end smallexample\n \n @noindent\n-@var{procedure_local_NAME} must refer to a parameterless procedure that\n+@var{procedure_LOCAL_NAME} must refer to a parameterless procedure that\n is declared at the library level. A procedure to which this pragma is\n applied will be treated as a finalization routine by the linker.\n It is equivalent to @code{__attribute__((destructor))} in GNU C and\n@@ -2906,15 +2997,15 @@ Syntax:\n \n @smallexample @c ada\n pragma Linker_Section (\n-  [Entity  =>] local_NAME\n+  [Entity  =>] LOCAL_NAME,\n   [Section =>] static_string_EXPRESSION);\n @end smallexample\n \n @noindent\n-@var{local_NAME} must refer to an object that is declared at the library\n+@var{LOCAL_NAME} must refer to an object that is declared at the library\n level. This pragma specifies the name of the linker section for the given\n entity. It is equivalent to @code{__attribute__((section))} in GNU C and\n-causes @var{local_NAME} to be placed in the @var{static_string_EXPRESSION}\n+causes @var{LOCAL_NAME} to be placed in the @var{static_string_EXPRESSION}\n section of the executable (assuming the linker doesn't rename the section).\n \n The compiler normally places library-level objects in standard sections\n@@ -2979,19 +3070,24 @@ Syntax:\n \n @smallexample @c ada\n pragma Machine_Attribute (\n-  [Attribute_Name =>] string_EXPRESSION,\n-  [Entity         =>] local_NAME);\n+     [Entity         =>] LOCAL_NAME,\n+     [Attribute_Name =>] static_string_EXPRESSION\n+  [, [Info           =>] static_string_EXPRESSION] );\n @end smallexample\n \n @noindent\n Machine-dependent attributes can be specified for types and/or\n declarations.  This pragma is semantically equivalent to\n-@code{__attribute__((@var{string_expression}))} in GNU C,\n-where @code{@var{string_expression}} is\n-recognized by the target macro @code{TARGET_ATTRIBUTE_TABLE} which is\n-defined for each machine.  See the GCC manual for further information.\n-It is not possible to specify attributes defined by other languages,\n-only attributes defined by the machine the code is intended to run on.\n+@code{__attribute__((@var{attribute_name}))} (if @var{info} is not\n+specified) or @code{__attribute__((@var{attribute_name}(@var{info})))}\n+in GNU C, where @code{@var{attribute_name}} is recognized by the\n+target macro @code{TARGET_ATTRIBUTE_TABLE} which is defined for each\n+machine.  The optional parameter @var{info} is transformed into an\n+identifier, which may make this pragma unusable for some attributes\n+(parameter of some attributes must be a number or a string). See the\n+GCC manual for further information.  It is not possible to specify\n+attributes defined by other languages, only attributes defined by the\n+machine the code is intended to run on.\n \n @node Pragma Main\n @unnumberedsec Pragma Main\n@@ -3065,11 +3161,11 @@ earlier versions of the package body.\n Syntax:\n \n @smallexample @c ada\n-pragma No_Return (procedure_local_NAME @{, procedure_local_NAME@});\n+pragma No_Return (procedure_LOCAL_NAME @{, procedure_LOCAL_NAME@});\n @end smallexample\n \n @noindent\n-Each @var{procedure_local_NAME} argument must refer to one or more procedure\n+Each @var{procedure_LOCAL_NAME} argument must refer to one or more procedure\n declarations in the current declarative part.  A procedure to which this\n pragma is applied may not contain any explicit @code{return} statements.\n In addition, if the procedure contains any implicit returns from falling\n@@ -3299,7 +3395,7 @@ optimized.  GNAT does not attempt to optimize any tasks in this manner\n Syntax:\n \n @smallexample @c ada\n-pragma Persistent_BSS [(local_NAME)]\n+pragma Persistent_BSS [(LOCAL_NAME)]\n @end smallexample\n \n @noindent\n@@ -3551,7 +3647,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Psect_Object (\n-     [Internal =>] local_NAME,\n+     [Internal =>] LOCAL_NAME,\n   [, [External =>] EXTERNAL_SYMBOL]\n   [, [Size     =>] EXTERNAL_SYMBOL]);\n \n@@ -3570,7 +3666,7 @@ This pragma is identical in effect to pragma @code{Common_Object}.\n Syntax:\n \n @smallexample @c ada\n-pragma Pure_Function ([Entity =>] function_local_NAME);\n+pragma Pure_Function ([Entity =>] function_LOCAL_NAME);\n @end smallexample\n \n @noindent\n@@ -3637,6 +3733,14 @@ the compiler checks for violations of the restriction, but\n generates a warning message rather than an error message\n if the restriction is violated.\n \n+@node Pragma Shared\n+@unnumberedsec Pragma Shared\n+@findex Shared\n+\n+@noindent\n+This pragma is provided for compatibility with Ada 83. The syntax and\n+semantics are identical to pragma Atomic.\n+\n @node Pragma Source_File_Name\n @unnumberedsec Pragma Source_File_Name\n @findex Source_File_Name\n@@ -3749,7 +3853,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Stream_Convert (\n-  [Entity =>] type_local_NAME,\n+  [Entity =>] type_LOCAL_NAME,\n   [Read   =>] function_NAME,\n   [Write  =>] function_NAME);\n @end smallexample\n@@ -3823,7 +3927,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Style_Checks (string_LITERAL | ALL_CHECKS |\n-                     On | Off [, local_NAME]);\n+                     On | Off [, LOCAL_NAME]);\n @end smallexample\n \n @noindent\n@@ -4062,7 +4166,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Task_Storage (\n-  [Task_Type =>] local_NAME,\n+  [Task_Type =>] LOCAL_NAME,\n   [Top_Guard =>] static_integer_EXPRESSION);\n @end smallexample\n \n@@ -4126,7 +4230,7 @@ following the normal rules for procedure calls in Ada.\n Syntax:\n \n @smallexample @c ada\n-pragma Unchecked_Union (first_subtype_local_NAME);\n+pragma Unchecked_Union (first_subtype_LOCAL_NAME);\n @end smallexample\n \n @noindent\n@@ -4208,7 +4312,7 @@ compilations of units where universal addressing of the data is desired.\n Syntax:\n \n @smallexample @c ada\n-pragma Unreferenced (local_NAME @{, local_NAME@});\n+pragma Unreferenced (LOCAL_NAME @{, LOCAL_NAME@});\n pragma Unreferenced (library_unit_NAME @{, library_unit_NAME@});\n @end smallexample\n \n@@ -4227,7 +4331,7 @@ and that this is deliberate. It can also be useful in the case of\n objects declared only for their initialization or finalization side\n effects.\n \n-If @code{local_NAME} identifies more than one matching homonym in the\n+If @code{LOCAL_NAME} identifies more than one matching homonym in the\n current scope, then the entity most recently declared is the one to which\n the pragma applies. Note that in the case of accept formals, the pragma\n Unreferenced may appear immediately after the keyword @code{do} which\n@@ -4248,7 +4352,7 @@ The second form of pragma @code{Unreferenced} is used within a context\n clause. In this case the arguments must be unit names of units previously\n mentioned in @code{with} clauses (similar to the usage of pragma\n @code{Elaborate_All}. The effect is to suppress warnings about unreferenced\n-units.\n+units and unreferenced entities within these units.\n \n @node Pragma Unreferenced_Objects\n @unnumberedsec Pragma Unreferenced_Objects\n@@ -4417,7 +4521,7 @@ A := C;                       -- C will be validity checked\n Syntax:\n \n @smallexample @c ada\n-pragma Volatile (local_NAME);\n+pragma Volatile (LOCAL_NAME);\n @end smallexample\n \n @noindent\n@@ -4436,7 +4540,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Warnings (On | Off);\n-pragma Warnings (On | Off, local_NAME);\n+pragma Warnings (On | Off, LOCAL_NAME);\n pragma Warnings (static_string_EXPRESSION);\n pragma Warnings (On | Off, static_string_EXPRESSION);\n @end smallexample\n@@ -4451,7 +4555,7 @@ setting of the command line switches.\n \n The form with a single argument may be used as a configuration pragma.\n \n-If the @var{local_NAME} parameter is present, warnings are suppressed for\n+If the @var{LOCAL_NAME} parameter is present, warnings are suppressed for\n the specified entity.  This suppression is effective from the point where\n it occurs till the end of the extended scope of the variable (similar to\n the scope of @code{Suppress}).\n@@ -4561,14 +4665,14 @@ and at least one matching warning must be suppressed.\n Syntax:\n \n @smallexample @c ada\n-pragma Weak_External ([Entity =>] local_NAME);\n+pragma Weak_External ([Entity =>] LOCAL_NAME);\n @end smallexample\n \n @noindent\n-@var{local_NAME} must refer to an object that is declared at the library\n+@var{LOCAL_NAME} must refer to an object that is declared at the library\n level. This pragma specifies that the given entity should be marked as a\n weak symbol for the linker. It is equivalent to @code{__attribute__((weak))}\n-in GNU C and causes @var{local_NAME} to be emitted as a weak symbol instead\n+in GNU C and causes @var{LOCAL_NAME} to be emitted as a weak symbol instead\n of a regular symbol, that is to say a symbol that does not have to be\n resolved by the linker if used in conjunction with a pragma Import.\n \n@@ -4682,6 +4786,7 @@ consideration, you should minimize the use of these attributes.\n * Null_Parameter::\n * Object_Size::\n * Passed_By_Reference::\n+* Pool_Address::\n * Range_Length::\n * Safe_Emax::\n * Safe_Large::\n@@ -5253,6 +5358,25 @@ normally passed by reference and @code{False} if the type is normally\n passed by copy in calls.  For scalar types, the result is always @code{False}\n and is static.  For non-scalar types, the result is non-static.\n \n+@node Pool_Address\n+@unnumberedsec Pool_Address\n+@cindex Parameters, when passed by reference\n+@findex Pool_Address\n+@noindent\n+@code{@var{X}'Pool_Address} for any object @var{X} returns the address\n+of X within its storage pool. This is the same as\n+@code{@var{X}'Address}, except that for an unconstrained array whose\n+bounds are allocated just before the first component,\n+@code{@var{X}'Pool_Address} returns the address of those bounds,\n+whereas @code{@var{X}'Address} returns the address of the first\n+component.\n+\n+Here, we are interpreting ``storage pool'' broadly to mean ``wherever\n+the object is allocated'', which could be a user-defined storage pool,\n+the global heap, on the stack, or in a static memory area. For an\n+object created by @code{new}, @code{@var{Ptr.all}'Pool_Address} is\n+what is passed to @code{Allocate} and returned from @code{Deallocate}.\n+\n @node Range_Length\n @unnumberedsec Range_Length\n @findex Range_Length\n@@ -9845,8 +9969,8 @@ will be flagged as illegal by GNAT@.\n Since the misconception that Bit_Order automatically deals with all\n endian-related incompatibilities is a common one, the specification of\n a component field that is an integral number of bytes will always\n-generate a warning.  This warning may be suppressed using\n-@code{pragma Suppress} if desired.  The following section contains additional\n+generate a warning.  This warning may be suppressed using @code{pragma\n+Warnings (Off)} if desired.  The following section contains additional\n details regarding the issue of byte ordering.\n \n @node Effect of Bit_Order on Byte Ordering\n@@ -12641,6 +12765,7 @@ of GNAT, and will generate a warning message.\n * GNAT.Bubble_Sort (g-bubsor.ads)::\n * GNAT.Bubble_Sort_A (g-busora.ads)::\n * GNAT.Bubble_Sort_G (g-busorg.ads)::\n+* GNAT.Byte_Order_Mark (g-byorma.ads)::\n * GNAT.Byte_Swapping (g-bytswa.ads)::\n * GNAT.Calendar (g-calend.ads)::\n * GNAT.Calendar.Time_IO (g-catiio.ads)::\n@@ -12655,9 +12780,14 @@ of GNAT, and will generate a warning message.\n * GNAT.Current_Exception (g-curexc.ads)::\n * GNAT.Debug_Pools (g-debpoo.ads)::\n * GNAT.Debug_Utilities (g-debuti.ads)::\n+* GNAT.Decode_String (g-decstr.ads)::\n+* GNAT.Decode_UTF8_String (g-deutst.ads)::\n * GNAT.Directory_Operations (g-dirope.ads)::\n+* GNAT.Directory_Operations.Iteration (g-diopit.ads)::\n * GNAT.Dynamic_HTables (g-dynhta.ads)::\n * GNAT.Dynamic_Tables (g-dyntab.ads)::\n+* GNAT.Encode_String (g-encstr.ads)::\n+* GNAT.Encode_UTF8_String (g-enutst.ads)::\n * GNAT.Exception_Actions (g-excact.ads)::\n * GNAT.Exception_Traces (g-exctra.ads)::\n * GNAT.Exceptions (g-except.ads)::\n@@ -12675,6 +12805,7 @@ of GNAT, and will generate a warning message.\n * GNAT.Most_Recent_Exception (g-moreex.ads)::\n * GNAT.OS_Lib (g-os_lib.ads)::\n * GNAT.Perfect_Hash_Generators (g-pehage.ads)::\n+* GNAT.Random_Numbers (g-rannum.ads)::\n * GNAT.Regexp (g-regexp.ads)::\n * GNAT.Registry (g-regist.ads)::\n * GNAT.Regpat (g-regpat.ads)::\n@@ -12684,21 +12815,25 @@ of GNAT, and will generate a warning message.\n * GNAT.Signals (g-signal.ads)::\n * GNAT.Sockets (g-socket.ads)::\n * GNAT.Source_Info (g-souinf.ads)::\n-* GNAT.Spell_Checker (g-speche.ads)::\n+* GNAT.Spelling_Checker (g-speche.ads)::\n+* GNAT.Spelling_Checker_Generic (g-spchge.ads)::\n * GNAT.Spitbol.Patterns (g-spipat.ads)::\n * GNAT.Spitbol (g-spitbo.ads)::\n * GNAT.Spitbol.Table_Boolean (g-sptabo.ads)::\n * GNAT.Spitbol.Table_Integer (g-sptain.ads)::\n * GNAT.Spitbol.Table_VString (g-sptavs.ads)::\n * GNAT.Strings (g-string.ads)::\n * GNAT.String_Split (g-strspl.ads)::\n-* GNAT.UTF_32 (g-utf_32.ads)::\n * GNAT.Table (g-table.ads)::\n * GNAT.Task_Lock (g-tasloc.ads)::\n * GNAT.Threads (g-thread.ads)::\n * GNAT.Traceback (g-traceb.ads)::\n * GNAT.Traceback.Symbolic (g-trasym.ads)::\n+* GNAT.UTF_32 (g-utf_32.ads)::\n+* GNAT.UTF_32_Spelling_Checker (g-u3spch.ads)::\n+* GNAT.Wide_Spelling_Checker (g-wispch.ads)::\n * GNAT.Wide_String_Split (g-wistsp.ads)::\n+* GNAT.Wide_Wide_Spelling_Checker (g-zspche.ads)::\n * GNAT.Wide_Wide_String_Split (g-zistsp.ads)::\n * Interfaces.C.Extensions (i-cexten.ads)::\n * Interfaces.C.Streams (i-cstrea.ads)::\n@@ -13059,6 +13194,18 @@ are provided as generic parameters, this improves efficiency, especially\n if the procedures can be inlined, at the expense of duplicating code for\n multiple instantiations.\n \n+@node GNAT.Byte_Order_Mark (g-byorma.ads)\n+@section @code{GNAT.Byte_Order_Mark} (@file{g-byorma.ads})\n+@cindex @code{GNAT.Byte_Order_Mark} (@file{g-byorma.ads})\n+@cindex UTF-8 representation\n+@cindex Wide characte representations\n+\n+@noindent\n+Provides a routine which given a string, reads the start of the string to\n+see whether it is one of the standard byte order marks (BOM's) which signal\n+the encoding of the string. The routine includes detection of special XML\n+sequences for various UCS input formats.\n+\n @node GNAT.Byte_Swapping (g-bytswa.ads)\n @section @code{GNAT.Byte_Swapping} (@file{g-bytswa.ads})\n @cindex @code{GNAT.Byte_Swapping} (@file{g-bytswa.ads})\n@@ -13208,6 +13355,36 @@ Provides a few useful utilities for debugging purposes, including conversion\n to and from string images of address values. Supports both C and Ada formats\n for hexadecimal literals.\n \n+@node GNAT.Decode_String (g-decstr.ads)\n+@section @code{GNAT.Decode_String} (@file{g-decstr.ads})\n+@cindex @code{GNAT.Decode_String} (@file{g-decstr.ads})\n+@cindex Decoding strings\n+@cindex String decoding\n+@cindex Wide chararacter encoding\n+@cindex UTF-8\n+@cindex Unicode\n+\n+@noindent\n+A generic package providing routines for decoding wide character and wide wide\n+character strings encoded as sequences of 8-bit characters using a specified\n+encoding method. Includes validation routines, and also routines for stepping\n+to next or previous encoded character in an encoded string.\n+Useful in conjunction with Unicode character coding. Note there is a\n+preinstiation for UTF-8. See next entry.\n+\n+@node GNAT.Decode_UTF8_String (g-deutst.ads)\n+@section @code{GNAT.Decode_UTF8_String} (@file{g-deutst.ads})\n+@cindex @code{GNAT.Decode_UTF8_String} (@file{g-deutst.ads})\n+@cindex Decoding strings\n+@cindex Decoding UTF-8 strings\n+@cindex UTF-8 string decoding\n+@cindex Wide chararacter decoding\n+@cindex UTF-8\n+@cindex Unicode\n+\n+@noindent\n+A preinstantion of GNAT.Decode_Strings for UTF-8 encoding.\n+\n @node GNAT.Directory_Operations (g-dirope.ads)\n @section @code{GNAT.Directory_Operations} (@file{g-dirope.ads})\n @cindex @code{GNAT.Directory_Operations} (@file{g-dirope.ads})\n@@ -13218,6 +13395,15 @@ Provides a set of routines for manipulating directories, including changing\n the current directory, making new directories, and scanning the files in a\n directory.\n \n+@node GNAT.Directory_Operations.Iteration (g-diopit.ads)\n+@section @code{GNAT.Directory_Operations.Iteration} (@file{g-diopit.ads})\n+@cindex @code{GNAT.Directory_Operations.Iteration} (@file{g-diopit.ads})\n+@cindex Directory operations iteration\n+\n+@noindent\n+A child unit of GNAT.Directory_Operations providing additional operations\n+for iterating through directories.\n+\n @node GNAT.Dynamic_HTables (g-dynhta.ads)\n @section @code{GNAT.Dynamic_HTables} (@file{g-dynhta.ads})\n @cindex @code{GNAT.Dynamic_HTables} (@file{g-dynhta.ads})\n@@ -13250,6 +13436,34 @@ except that this package declares a type that can be used to define\n dynamic instances of the table, while an instantiation of\n @code{GNAT.Table} creates a single instance of the table type.\n \n+@node GNAT.Encode_String (g-encstr.ads)\n+@section @code{GNAT.Encode_String} (@file{g-encstr.ads})\n+@cindex @code{GNAT.Encode_String} (@file{g-encstr.ads})\n+@cindex Encoding strings\n+@cindex String encoding\n+@cindex Wide chararacter encoding\n+@cindex UTF-8\n+@cindex Unicode\n+\n+@noindent\n+A generic package providing routines for encoding wide character and wide\n+wide character strings as sequences of 8-bit characters using a specified\n+encoding method. Useful in conjunction with Unicode character coding.\n+Note there is a preinstiation for UTF-8. See next entry.\n+\n+@node GNAT.Encode_UTF8_String (g-enutst.ads)\n+@section @code{GNAT.Encode_UTF8_String} (@file{g-enutst.ads})\n+@cindex @code{GNAT.Encode_UTF8_String} (@file{g-enutst.ads})\n+@cindex Encoding strings\n+@cindex Encoding UTF-8 strings\n+@cindex UTF-8 string encoding\n+@cindex Wide chararacter encoding\n+@cindex UTF-8\n+@cindex Unicode\n+\n+@noindent\n+A preinstantion of GNAT.Encode_Strings for UTF-8 encoding.\n+\n @node GNAT.Exception_Actions (g-excact.ads)\n @section @code{GNAT.Exception_Actions} (@file{g-excact.ads})\n @cindex @code{GNAT.Exception_Actions} (@file{g-excact.ads})\n@@ -13441,6 +13655,15 @@ preserving. If w2 is inserted after w1 in the generator, their\n hashcode are in the same order. These hashing functions are very\n convenient for use with realtime applications.\n \n+@node GNAT.Random_Numbers (g-rannum.ads)\n+@section @code{GNAT.Random_Numbers} (@file{g-rannum.ads})\n+@cindex @code{GNAT.Random_Numbers} (@file{g-rannum.ads})\n+@cindex Random number generation\n+\n+@noindent\n+Provides random number capabilities which extend those available in the\n+standard Ada library and are more convenient to use.\n+\n @node GNAT.Regexp (g-regexp.ads)\n @section @code{GNAT.Regexp} (@file{g-regexp.ads})\n @cindex @code{GNAT.Regexp} (@file{g-regexp.ads})\n@@ -13530,15 +13753,25 @@ for the LynxOS@ cross port.\n Provides subprograms that give access to source code information known at\n compile time, such as the current file name and line number.\n \n-@node GNAT.Spell_Checker (g-speche.ads)\n-@section @code{GNAT.Spell_Checker} (@file{g-speche.ads})\n-@cindex @code{GNAT.Spell_Checker} (@file{g-speche.ads})\n+@node GNAT.Spelling_Checker (g-speche.ads)\n+@section @code{GNAT.Spelling_Checker} (@file{g-speche.ads})\n+@cindex @code{GNAT.Spelling_Checker} (@file{g-speche.ads})\n @cindex Spell checking\n \n @noindent\n Provides a function for determining whether one string is a plausible\n near misspelling of another string.\n \n+@node GNAT.Spelling_Checker_Generic (g-spchge.ads)\n+@section @code{GNAT.Spelling_Checker_Generic} (@file{g-spchge.ads})\n+@cindex @code{GNAT.Spelling_Checker_Generic} (@file{g-spchge.ads})\n+@cindex Spell checking\n+\n+@noindent\n+Provides a generic function that can be instantiated with a string type for\n+determining whether one string is a plausible near misspelling of another\n+string.\n+\n @node GNAT.Spitbol.Patterns (g-spipat.ads)\n @section @code{GNAT.Spitbol.Patterns} (@file{g-spipat.ads})\n @cindex @code{GNAT.Spitbol.Patterns} (@file{g-spipat.ads})\n@@ -13617,22 +13850,6 @@ a string wherever the separators appear, and provide direct access\n to the resulting slices. This package is instantiated from\n @code{GNAT.Array_Split}.\n \n-@node GNAT.UTF_32 (g-utf_32.ads)\n-@section @code{GNAT.UTF_32} (@file{g-table.ads})\n-@cindex @code{GNAT.UTF_32} (@file{g-table.ads})\n-@cindex Wide character codes\n-\n-@noindent\n-This is a package intended to be used in conjunction with the\n-@code{Wide_Character} type in Ada 95 and the\n-@code{Wide_Wide_Character} type in Ada 2005 (available\n-in @code{GNAT} in Ada 2005 mode). This package contains\n-Unicode categorization routines, as well as lexical\n-categorization routines corresponding to the Ada 2005\n-lexical rules for identifiers and strings, and also a\n-lower case to upper case fold routine corresponding to\n-the Ada 2005 rules for identifier equivalence.\n-\n @node GNAT.Table (g-table.ads)\n @section @code{GNAT.Table} (@file{g-table.ads})\n @cindex @code{GNAT.Table} (@file{g-table.ads})\n@@ -13687,10 +13904,40 @@ in various debugging situations.\n @cindex @code{GNAT.Traceback.Symbolic} (@file{g-trasym.ads})\n @cindex Trace back facilities\n \n+@node GNAT.UTF_32 (g-utf_32.ads)\n+@section @code{GNAT.UTF_32} (@file{g-table.ads})\n+@cindex @code{GNAT.UTF_32} (@file{g-table.ads})\n+@cindex Wide character codes\n+\n @noindent\n-Provides symbolic traceback information that includes the subprogram\n-name and line number information. Note that this capability is not available\n-on all targets, see g-trasym.ads for list of supported targets.\n+This is a package intended to be used in conjunction with the\n+@code{Wide_Character} type in Ada 95 and the\n+@code{Wide_Wide_Character} type in Ada 2005 (available\n+in @code{GNAT} in Ada 2005 mode). This package contains\n+Unicode categorization routines, as well as lexical\n+categorization routines corresponding to the Ada 2005\n+lexical rules for identifiers and strings, and also a\n+lower case to upper case fold routine corresponding to\n+the Ada 2005 rules for identifier equivalence.\n+\n+@node GNAT.UTF_32_Spelling_Checker (g-u3spch.ads)\n+@section @code{GNAT.Wide_Spelling_Checker} (@file{g-u3spch.ads})\n+@cindex @code{GNAT.Wide_Spelling_Checker} (@file{g-u3spch.ads})\n+@cindex Spell checking\n+\n+@noindent\n+Provides a function for determining whether one wide wide string is a plausible\n+near misspelling of another wide wide string, where the strings are represented\n+using the UTF_32_String type defined in System.Wch_Cnv.\n+\n+@node GNAT.Wide_Spelling_Checker (g-wispch.ads)\n+@section @code{GNAT.Wide_Spelling_Checker} (@file{g-wispch.ads})\n+@cindex @code{GNAT.Wide_Spelling_Checker} (@file{g-wispch.ads})\n+@cindex Spell checking\n+\n+@noindent\n+Provides a function for determining whether one wide string is a plausible\n+near misspelling of another wide string.\n \n @node GNAT.Wide_String_Split (g-wistsp.ads)\n @section @code{GNAT.Wide_String_Split} (@file{g-wistsp.ads})\n@@ -13703,6 +13950,15 @@ a wide string wherever the separators appear, and provide direct access\n to the resulting slices. This package is instantiated from\n @code{GNAT.Array_Split}.\n \n+@node GNAT.Wide_Wide_Spelling_Checker (g-zspche.ads)\n+@section @code{GNAT.Wide_Wide_Spelling_Checker} (@file{g-zspche.ads})\n+@cindex @code{GNAT.Wide_Wide_Spelling_Checker} (@file{g-zspche.ads})\n+@cindex Spell checking\n+\n+@noindent\n+Provides a function for determining whether one wide wide string is a plausible\n+near misspelling of another wide wide string.\n+\n @node GNAT.Wide_Wide_String_Split (g-zistsp.ads)\n @section @code{GNAT.Wide_Wide_String_Split} (@file{g-zistsp.ads})\n @cindex @code{GNAT.Wide_Wide_String_Split} (@file{g-zistsp.ads})\n@@ -14026,7 +14282,7 @@ inter-operability between Ada tagged types and C++ class definitions.\n See @ref{Implementation Defined Pragmas}, for more details.\n \n @table @code\n-@item pragma CPP_Class ([Entity =>] @var{local_NAME})\n+@item pragma CPP_Class ([Entity =>] @var{LOCAL_NAME})\n The argument denotes an entity in the current declarative region that is\n declared as a tagged or untagged record type. It indicates that the type\n corresponds to an externally declared C++ class type, and is to be laid\n@@ -14036,7 +14292,7 @@ Note: Pragma @code{CPP_Class} is currently obsolete. It is supported\n for backward compatibility but its functionality is available\n using pragma @code{Import} with @code{Convention} = @code{CPP}.\n \n-@item pragma CPP_Constructor ([Entity =>] @var{local_NAME})\n+@item pragma CPP_Constructor ([Entity =>] @var{LOCAL_NAME})\n This pragma identifies an imported function (imported in the usual way\n with pragma @code{Import}) as corresponding to a C++ constructor.\n @end table"}, {"sha": "15a30c5d3559ac666b71b7ffe0b120b71ff075f4", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ad1f7960d5b070f377c8979867c7bc97785304/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ad1f7960d5b070f377c8979867c7bc97785304/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=a2ad1f7960d5b070f377c8979867c7bc97785304", "patch": "@@ -3755,7 +3755,9 @@ Suppresses all back-end inlining, even if other optimization or inlining\n switches are set.\n This includes suppression of inlining that results\n from the use of the pragma @code{Inline_Always}.\n-See also @option{-gnatn} and @option{-gnatN}.\n+Any occurrences of pragma @code{Inline} or @code{Inline_Always}\n+are ignored, and @option{-gnatn} and @option{-gnatN} have no\n+effect if this switch is present.\n \n @item -fno-strict-aliasing\n @cindex @option{-fno-strict-aliasing} (@command{gcc})\n@@ -3907,7 +3909,7 @@ Identifier character set\n For details of the possible selections for @var{c},\n see @ref{Character Set Control}.\n \n-@item ^-gnatI^IGNORE_REP_CLAUSES^\n+@item ^-gnatI^/IGNORE_REP_CLAUSES^\n @cindex @option{^-gnatI^IGNORE_REP_CLAUSES^} (@command{gcc})\n Ignore representation clauses. When this switch is used, all\n representation clauses are treated as comments. This is useful\n@@ -4215,7 +4217,7 @@ Execute @var{ver} version of the compiler. This is the @command{gcc}\n version, not the GNAT version.\n @end ifclear\n \n-@item ^-w^NO_BACK_END_WARNINGS^\n+@item ^-w^/NO_BACK_END_WARNINGS^\n @cindex @option{-w} (@command{gcc})\n Turn off warnings generated by the back end of the compiler. Use of\n this switch also causes the default for front end warnings to be set\n@@ -4582,6 +4584,9 @@ Out-of-range values being assigned\n @item\n Possible order of elaboration problems\n \n+@item\n+Assertions (pragma Assert) that are sure to fail\n+\n @item\n Unreachable code\n \n@@ -4735,6 +4740,22 @@ This switch suppresses all optional warning messages, see remaining list\n in this section for details on optional warning messages that can be\n individually controlled.\n \n+@item -gnatw.a\n+@emph{Activate warnings on failing assertions.}\n+@cindex @option{-gnatw.a} (@command{gcc})\n+@cindex Assert failures\n+This switch activates warnings for assertions where the compiler can tell at\n+compile time that the assertion will fail. Note that this warning is given\n+even if assertions are disabled. The default is that such warnings are\n+generated.\n+\n+@item -gnatw.A\n+@emph{Suppress warnings on failing assertions.}\n+@cindex @option{-gnatw.A} (@command{gcc})\n+@cindex Assert failures\n+This switch suppresses warnings for assertions where the compiler can tell at\n+compile time that the assertion will fail.\n+\n @item -gnatwb\n @emph{Activate warnings on bad fixed values.}\n @cindex @option{-gnatwb} (@command{gcc})\n@@ -5642,7 +5663,9 @@ indentation level required.\n The general style of required indentation is as specified by\n the examples in the Ada Reference Manual. Full line comments must be\n aligned with the @code{--} starting on a column that is a multiple of\n-the alignment level.\n+the alignment level, or they may be aligned the same way as the following\n+non-blank line (this is useful when full line comments appear in the middle\n+of a statement.\n \n @item ^a^ATTRIBUTE^\n @emph{Check attribute casing.}\n@@ -6438,8 +6461,13 @@ used, it must be used consistently throughout the program. However,\n since brackets encoding is always recognized, it may be conveniently\n used in standard libraries, allowing these libraries to be used with\n any of the available coding schemes.\n-scheme. If no @option{-gnatW?} parameter is present, then the default\n-representation is Brackets encoding only.\n+scheme.\n+\n+If no @option{-gnatW?} parameter is present, then the default\n+representation is normally Brackets encoding only. However, if the\n+first three characters of the file are 16#EF# 16#BB# 16#BF# (the standard\n+byte order mark or BOM for UTF-8), then these three characters are\n+skipped and the default representation for the file is set to UTF-8.\n \n Note that the wide character representation that is specified (explicitly\n or by default) for the main program also acts as the default encoding used\n@@ -7679,6 +7707,10 @@ All warning messages are suppressed\n Warning messages are treated as fatal errors\n @end ifset\n \n+@item ^-Wx^/WIDE_CHARACTER_ENCODING=^@var{e}\n+@cindex @option{^-Wx^/WIDE_CHARACTER_ENCODING^} (@code{gnatbind})\n+Override default wide character encoding for standard Text_IO files.\n+\n @item ^-x^/READ_SOURCES=NONE^\n @cindex @option{^-x^/READ_SOURCES^} (@code{gnatbind})\n Exclude source files (check object consistency only).\n@@ -7724,6 +7756,16 @@ their consistency. In normal mode, if a source file cannot be located it\n is simply ignored. If you specify this switch, a missing source\n file is an error.\n \n+@item ^-Wx^/WIDE_CHARACTER_ENCODING=^@var{e}\n+@cindex @option{^-Wx^/WIDE_CHARACTER_ENCODING^} (@code{gnatbind})\n+Override default wide character encoding for standard Text_IO files.\n+Normally the default wide character encoding method used for standard\n+[Wide_[Wide_]]Text_IO files is taken from the encoding specified for\n+the main source input (see description of switch\n+@option{^-gnatWx^/WIDE_CHARACTER_ENCODING^} for the compiler). The\n+use of this switch for the binder (which has the same set of\n+possible arguments) overrides this default as specified.\n+\n @item ^-x^/READ_SOURCES=NONE^\n @cindex @option{^-x^/READ_SOURCES=NONE^} (@code{gnatbind})\n Exclude source files. In this mode, the binder only checks that ALI\n@@ -8024,7 +8066,11 @@ The following switch is used to bind programs organized in this manner:\n Normally the binder checks that the unit name given on the command line\n corresponds to a suitable main subprogram. When this switch is used,\n a list of ALI files can be given, and the execution of the program\n-consists of elaboration of these units in an appropriate order.\n+consists of elaboration of these units in an appropriate order. Note\n+that the default wide character encoding method for standard Text_IO\n+files is always set to Brackets if this switch is set (you can use\n+the binder switch\n+@option{^-Wx^WIDE_CHARACTER_ENCODING^} to override this default).\n @end table\n \n @node Command-Line Access\n@@ -13164,15 +13210,20 @@ conditions:\n @itemize @bullet\n @item It must not be empty\n @item It must include at least one dot\n-@item It cannot end with the same string as @code{Spec_Suffix (\"Ada\")}\n+@item It cannot be the same as @code{Spec_Suffix (\"Ada\")}\n @end itemize\n @noindent\n+If @code{Body_Suffix (\"Ada\")} and @code{Spec_Suffix (\"Ada\")} end with the\n+same string, then a file name that ends with the longest of these two suffixes\n+will be a body if the longest suffix is @code{Body_Suffix (\"Ada\")} or a spec\n+if the longest suffix is @code{Spec_Suffix (\"Ada\")}.\n+\n If @code{Body_Suffix (\"Ada\")} is not specified, then the default is\n @code{\"^.adb^.ADB^\"}.\n \n @item @var{Separate_Suffix}\n This must be a string whose value satisfies the same conditions as\n-@code{Body_Suffix}.\n+@code{Body_Suffix}. The same \"longest suffix\" rules apply.\n \n @noindent\n If @code{Separate_Suffix (\"Ada\")} is not specified, then it defaults to same\n@@ -15523,7 +15574,13 @@ case if the specification occupies more then one line.\n @cindex @option{^--separate-loop-then^/SEPARATE_LOOP_THEN^} (@command{gnatpp})\n @item ^--separate-loop-then^/SEPARATE_LOOP_THEN^\n Place the keyword @code{loop} in FOR and WHILE loop statements and the\n-keywird @code{then} in IF statements on a separate line.\n+keyword @code{then} in IF statements on a separate line.\n+\n+@cindex @option{^--no-separate-loop-then^/NO_SEPARATE_LOOP_THEN^} (@command{gnatpp})\n+@item ^--no-separate-loop-then^/NO_SEPARATE_LOOP_THEN^\n+Do not place the keyword @code{loop} in FOR and WHILE loop statements and the\n+keyw0rd @code{then} in IF statements on a separate line. This option is\n+incompatible with @option{^--separate-loop-then^/SEPARATE_LOOP_THEN^} option.\n \n @cindex @option{^--use-on-new-line^/USE_ON_NEW_LINE^} (@command{gnatpp})\n @item ^--use-on-new-line^/USE_ON_NEW_LINE^"}, {"sha": "dc2675b33c93aa3477d981041a3bd730a85c9b80", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ad1f7960d5b070f377c8979867c7bc97785304/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ad1f7960d5b070f377c8979867c7bc97785304/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=a2ad1f7960d5b070f377c8979867c7bc97785304", "patch": "@@ -622,6 +622,26 @@ package VMS_Data is\n                                             \"-ws\";\n    --  NODOC (see /WARNINGS)\n \n+   S_Bind_Wide    : aliased constant S := \"/WIDE_CHARACTER_ENCODING=\"      &\n+                                            \"BRACKETS \"                    &\n+                                               \"-gnatWb \"                  &\n+                                            \"HEX \"                         &\n+                                               \"-gnatWh \"                  &\n+                                            \"UPPER \"                       &\n+                                               \"-gnatWu \"                  &\n+                                            \"SHIFT_JIS \"                   &\n+                                               \"-gnatWs \"                  &\n+                                            \"UTF8 \"                        &\n+                                               \"-gnatW8 \"                  &\n+                                            \"EUC \"                         &\n+                                               \"-gnatWe\";\n+   --        /NOWIDE_CHARACTER_ENCODING (D)\n+   --        /WIDE_CHARACTER_ENCODING[=encode-type]\n+   --\n+   --   Specifies the mechanism used to encode wide characters, overriding\n+   --   the default as set by the /WIDE_CHARACTER_ENCODING option for the\n+   --   compilation of the main program.\n+\n    S_Bind_Zero    : aliased constant S := \"/ZERO_MAIN \"                    &\n                                             \"-z\";\n    --        /NOZERO_MAIN (D)\n@@ -677,6 +697,7 @@ package VMS_Data is\n                       S_Bind_Verbose 'Access,\n                       S_Bind_Warn    'Access,\n                       S_Bind_WarnX   'Access,\n+                      S_Bind_Wide    'Access,\n                       S_Bind_Zero    'Access);\n \n    -----------------------------\n@@ -2594,6 +2615,10 @@ package VMS_Data is\n                                                \"-gnatwA \"                  &\n                                             \"ALL_GCC \"                     &\n                                                \"-Wall \"                    &\n+                                            \"FAILING_ASSERTIONS \"          &\n+                                               \"-gnatw.a \"                 &\n+                                            \"NO_FAILING_ASSERTIONS \"       &\n+                                               \"-gnatw.A \"                 &\n                                             \"BAD_FIXED_VALUES \"            &\n                                                \"-gnatwb \"                  &\n                                             \"NO_BAD_FIXED_VALUES \"         &\n@@ -5261,6 +5286,13 @@ package VMS_Data is\n    --   Place the THEN keyword in IF statement and the LOOP keyword in for-\n    --   and while-loops on a separate line.\n \n+   S_Pretty_N_Sep_Loop_Then : aliased constant S := \"/NO_SEPARATE_LOOP_THEN \" &\n+                                                    \"--no-separate-loop-then\";\n+   --        /NO_SEPARATE_LOOP_THEN\n+   --\n+   --   Do not place the THEN keyword in IF statement and the LOOP keyword in\n+   --   for- and while-loops on a separate line.\n+\n    S_Pretty_Use_On_New_Line : aliased constant S := \"/USE_ON_NEW_LINE \"   &\n                                                       \"--use-on-new-line\";\n    --        /USE_ON_NEW_LINE\n@@ -5617,6 +5649,7 @@ package VMS_Data is\n                         S_Pretty_RTS            'Access,\n                         S_Pretty_Search         'Access,\n                         S_Pretty_Sep_Loop_Then  'Access,\n+                        S_Pretty_N_Sep_Loop_Then'Access,\n                         S_Pretty_Use_On_New_Line'Access,\n                         S_Pretty_Stnm_On_Nw_Line'Access,\n                         S_Pretty_Specific       'Access,"}]}