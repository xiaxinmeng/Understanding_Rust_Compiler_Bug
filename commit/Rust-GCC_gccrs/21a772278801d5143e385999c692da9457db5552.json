{"sha": "21a772278801d5143e385999c692da9457db5552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFhNzcyMjc4ODAxZDUxNDNlMzg1OTk5YzY5MmRhOTQ1N2RiNTU1Mg==", "commit": {"author": {"name": "Christopher D. Rickett", "email": "crickett@lanl.gov", "date": "2007-07-21T20:31:17Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2007-07-21T20:31:17Z"}, "message": "re PR fortran/32801 (USE of ISO_C_BINDING, ONLY: C_LOC causes compiler seg fault)\n\n2007-07-21  Christopher D. Rickett  <crickett@lanl.gov>\n\n        PR fortran/32801\n        * symbol.c (generate_isocbinding_symbol): Remove unnecessary\n        conditional.\n\n        PR fortran/32804\n        * resolve.c (gfc_iso_c_func_interface): Reject assumed-shape and\n        deferred-shape arrays as args to C_LOC.  Fix bug in testing\n        character args to C_LOC.\n\n2007-07-21  Christopher D. Rickett  <crickett@lanl.gov>\n\n        PR fortran/32804\n        * gfortran.dg/c_loc_tests_9.f03: New test case.\n        * gfortran.dg/c_loc_tests_10.f03: Ditto.\n\nFrom-SVN: r126812", "tree": {"sha": "aaa261c1ece9e85334ea8466a587b89dc1b0f25d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaa261c1ece9e85334ea8466a587b89dc1b0f25d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21a772278801d5143e385999c692da9457db5552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a772278801d5143e385999c692da9457db5552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21a772278801d5143e385999c692da9457db5552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21a772278801d5143e385999c692da9457db5552/comments", "author": null, "committer": null, "parents": [{"sha": "d3960cf47cceb53e288127680ba8f2415d56fec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3960cf47cceb53e288127680ba8f2415d56fec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3960cf47cceb53e288127680ba8f2415d56fec4"}], "stats": {"total": 103, "additions": 85, "deletions": 18}, "files": [{"sha": "87e5c6afa97f7d075365642280f0041d29efab2a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a772278801d5143e385999c692da9457db5552/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a772278801d5143e385999c692da9457db5552/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=21a772278801d5143e385999c692da9457db5552", "patch": "@@ -1,3 +1,14 @@\n+2007-07-21  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/32801\n+\t* symbol.c (generate_isocbinding_symbol): Remove unnecessary\n+\tconditional.\n+\n+\tPR fortran/32804\n+\t* resolve.c (gfc_iso_c_func_interface): Reject assumed-shape and\n+\tdeferred-shape arrays as args to C_LOC.  Fix bug in testing\n+\tcharacter args to C_LOC.\n+\n 2007-07-21  Lee Millward  <lee.millward@gmail.com>\n \n \tPR fortran/32823"}, {"sha": "f50da8c95d879b20bf7ba71c144132262e5fa42a", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a772278801d5143e385999c692da9457db5552/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a772278801d5143e385999c692da9457db5552/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=21a772278801d5143e385999c692da9457db5552", "patch": "@@ -1806,19 +1806,53 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n                         }\n                     }\n                   else\n-                    {\n+\t\t    {\n+\t\t      /* A non-allocatable target variable with C\n+\t\t\t interoperable type and type parameters must be\n+\t\t\t interoperable.\t */\n+\t\t      if (args_sym && args_sym->attr.dimension)\n+\t\t\t{\n+\t\t\t  if (args_sym->as->type == AS_ASSUMED_SHAPE)\n+\t\t\t    {\n+\t\t\t      gfc_error (\"Assumed-shape array '%s' at %L \"\n+\t\t\t\t\t \"cannot be an argument to the \"\n+\t\t\t\t\t \"procedure '%s' because \"\n+\t\t\t\t\t \"it is not C interoperable\",\n+\t\t\t\t\t args_sym->name,\n+\t\t\t\t\t &(args->expr->where), sym->name);\n+\t\t\t      retval = FAILURE;\n+\t\t\t    }\n+\t\t\t  else if (args_sym->as->type == AS_DEFERRED)\n+\t\t\t    {\n+\t\t\t      gfc_error (\"Deferred-shape array '%s' at %L \"\n+\t\t\t\t\t \"cannot be an argument to the \"\n+\t\t\t\t\t \"procedure '%s' because \"\n+\t\t\t\t\t \"it is not C interoperable\",\n+\t\t\t\t\t args_sym->name,\n+\t\t\t\t\t &(args->expr->where), sym->name);\n+\t\t\t      retval = FAILURE;\n+\t\t\t    }\n+\t\t\t}\n+                              \n                       /* Make sure it's not a character string.  Arrays of\n                          any type should be ok if the variable is of a C\n                          interoperable type.  */\n-                      if (args_sym->ts.type == BT_CHARACTER \n-                          && is_scalar_expr_ptr (args->expr) != SUCCESS)\n-                        {\n-                          gfc_error_now (\"CHARACTER argument '%s' to '%s' at \"\n-                                         \"%L must have a length of 1\",\n-                                         args_sym->name, sym->name,\n-                                         &(args->expr->where));\n-                          retval = FAILURE;\n-                        }\n+\t\t      if (args_sym->ts.type == BT_CHARACTER)\n+\t\t\tif (args_sym->ts.cl != NULL\n+\t\t\t    && (args_sym->ts.cl->length == NULL\n+\t\t\t\t|| args_sym->ts.cl->length->expr_type\n+\t\t\t\t   != EXPR_CONSTANT\n+\t\t\t\t|| mpz_cmp_si\n+\t\t\t\t    (args_sym->ts.cl->length->value.integer, 1)\n+\t\t\t\t   != 0)\n+\t\t\t    && is_scalar_expr_ptr (args->expr) != SUCCESS)\n+\t\t\t  {\n+\t\t\t    gfc_error_now (\"CHARACTER argument '%s' to '%s' \"\n+\t\t\t\t\t   \"at %L must have a length of 1\",\n+\t\t\t\t\t   args_sym->name, sym->name,\n+\t\t\t\t\t   &(args->expr->where));\n+\t\t\t    retval = FAILURE;\n+\t\t\t  }\n                     }\n                 }\n               else if (args_sym->attr.pointer == 1\n@@ -1848,10 +1882,10 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n                   retval = FAILURE;\n                 }\n               else if (args_sym->ts.type == BT_CHARACTER \n-                       && args_sym->ts.cl != NULL)\n+                       && is_scalar_expr_ptr (args->expr) != SUCCESS)\n                 {\n-                  gfc_error_now (\"CHARACTER parameter '%s' to '%s' at %L \"\n-                                 \"cannot have a length type parameter\",\n+                  gfc_error_now (\"CHARACTER argument '%s' to '%s' at \"\n+                                 \"%L must have a length of 1\",\n                                  args_sym->name, sym->name,\n                                  &(args->expr->where));\n                   retval = FAILURE;"}, {"sha": "f8ca9b31df50d05312e77869077d25f8281c27be", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a772278801d5143e385999c692da9457db5552/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a772278801d5143e385999c692da9457db5552/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=21a772278801d5143e385999c692da9457db5552", "patch": "@@ -3765,11 +3765,9 @@ generate_isocbinding_symbol (const char *mod_name, iso_c_binding_symbol s,\n                     /* Create the necessary derived type so we can continue\n                        processing the file.  */\n                     generate_isocbinding_symbol\n-                      (mod_name, s == ISOCBINDING_FUNLOC\n-\t\t       || s == ISOCBINDING_F_PROCPOINTER\n-\t\t       ? ISOCBINDING_FUNPTR : ISOCBINDING_PTR,\n-                       (char *)(s == ISOCBINDING_FUNLOC \n-\t\t\t\t|| s == ISOCBINDING_F_PROCPOINTER \n+\t\t      (mod_name, s == ISOCBINDING_FUNLOC\n+\t\t\t\t ? ISOCBINDING_FUNPTR : ISOCBINDING_PTR,\n+\t\t       (char *)(s == ISOCBINDING_FUNLOC\n                                 ? \"_gfortran_iso_c_binding_c_funptr\"\n \t\t\t\t: \"_gfortran_iso_c_binding_c_ptr\"));\n                     tmp_sym->ts.derived ="}, {"sha": "b94b0e5cfedadfcb93ac7aec2042e39e3de48044", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a772278801d5143e385999c692da9457db5552/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a772278801d5143e385999c692da9457db5552/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21a772278801d5143e385999c692da9457db5552", "patch": "@@ -1,3 +1,9 @@\n+2007-07-19  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/32804\n+\t* gfortran.dg/c_loc_tests_9.f03: New test case.\n+\t* gfortran.dg/c_loc_tests_10.f03: Ditto.\n+\n 2007-07-21  Lee Millward  <lee.millward@gmail.com>\n \n \tPR fortran/32823"}, {"sha": "867ba18cc6cb35f6c17910b8fe156868bb979708", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_10.f03", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a772278801d5143e385999c692da9457db5552/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a772278801d5143e385999c692da9457db5552/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_10.f03?ref=21a772278801d5143e385999c692da9457db5552", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+subroutine aaa(in)\n+  use iso_c_binding\n+  implicit none\n+  integer(KIND=C_int), DIMENSION(:), TARGET  :: in\n+  type(c_ptr) :: cptr\n+  cptr = c_loc(in) ! { dg-error \"not C interoperable\" }\n+end subroutine aaa"}, {"sha": "fa3238139a95bab4a5b8819454ecf75c102dd4cb", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_9.f03", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21a772278801d5143e385999c692da9457db5552/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_9.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21a772278801d5143e385999c692da9457db5552/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_9.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_9.f03?ref=21a772278801d5143e385999c692da9457db5552", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+subroutine aaa(in)\n+  use iso_c_binding\n+  implicit none\n+  CHARACTER(KIND=C_CHAR), DIMENSION(*), TARGET  :: in\n+  type(c_ptr) :: cptr\n+  cptr = c_loc(in)\n+end subroutine aaa\n+\n+"}]}