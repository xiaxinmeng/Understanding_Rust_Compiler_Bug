{"sha": "c4be65686206f422b2a3401b2e18bccf830984f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRiZTY1Njg2MjA2ZjQyMmIyYTM0MDFiMmUxOGJjY2Y4MzA5ODRmNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-23T15:29:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-23T15:29:04Z"}, "message": "devirt-13.C: New testcase.\n\n\n\n\t* g++.dg/ipa/devirt-13.C: New testcase.\n\t* g++.dg/ipa/devirt-14.C: New testcase.\n\t* cgraphunit.c (analyze_functions): Do basic devirtualization;\n\tdo not walk base classes of anonymous types.\n\nFrom-SVN: r201942", "tree": {"sha": "78fe4a2ac0c8d109d78cc2ce1774d010681a43d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78fe4a2ac0c8d109d78cc2ce1774d010681a43d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4be65686206f422b2a3401b2e18bccf830984f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4be65686206f422b2a3401b2e18bccf830984f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4be65686206f422b2a3401b2e18bccf830984f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4be65686206f422b2a3401b2e18bccf830984f4/comments", "author": null, "committer": null, "parents": [{"sha": "97aba8e901b999e49a988ace67dfa8c06ba364ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97aba8e901b999e49a988ace67dfa8c06ba364ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97aba8e901b999e49a988ace67dfa8c06ba364ac"}], "stats": {"total": 153, "additions": 133, "deletions": 20}, "files": [{"sha": "76609fb7416229f4a60874e4c928138007945317", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be65686206f422b2a3401b2e18bccf830984f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be65686206f422b2a3401b2e18bccf830984f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4be65686206f422b2a3401b2e18bccf830984f4", "patch": "@@ -1,3 +1,8 @@\n+2013-08-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraphunit.c (analyze_functions): Do basic devirtualization;\n+\tdo not walk base classes of anonymous types.\n+\n 2013-08-23  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR rtl-optimization/58220"}, {"sha": "db3db4bdef7c4100de357b99097abb86aee1faf5", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 67, "deletions": 20, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be65686206f422b2a3401b2e18bccf830984f4/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be65686206f422b2a3401b2e18bccf830984f4/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=c4be65686206f422b2a3401b2e18bccf830984f4", "patch": "@@ -922,26 +922,73 @@ analyze_functions (void)\n \t\t   enqueue_node ((symtab_node)edge->callee);\n \t      if (optimize && flag_devirtualize)\n \t\t{\n-\t          for (edge = cnode->indirect_calls; edge; edge = edge->next_callee)\n-\t\t    if (edge->indirect_info->polymorphic)\n-\t\t      {\n-\t\t\tunsigned int i;\n-\t\t\tvoid *cache_token;\n-\t\t\tvec <cgraph_node *>targets\n-\t\t\t  = possible_polymorphic_call_targets\n-\t\t\t      (edge, NULL, &cache_token);\n-\n-\t\t\tif (!pointer_set_insert (reachable_call_targets,\n-\t\t\t\t\t\t cache_token))\n-\t\t\t  {\n-\t\t\t    if (cgraph_dump_file)\n-\t\t\t      dump_possible_polymorphic_call_targets \n-\t\t\t\t(cgraph_dump_file, edge);\n-\n-\t\t\t    for (i = 0; i < targets.length(); i++)\n-\t\t\t      enqueue_node ((symtab_node) targets[i]);\n-\t\t\t  }\n-\t\t      }\n+\t\t  struct cgraph_edge *next;\n+\t          for (edge = cnode->indirect_calls; edge; edge = next)\n+\t\t    {\n+\t\t      next = edge->next_callee;\n+\t\t      if (edge->indirect_info->polymorphic)\n+\t\t\t{\n+\t\t\t  unsigned int i;\n+\t\t\t  void *cache_token;\n+\t\t\t  bool final;\n+\t\t\t  vec <cgraph_node *>targets\n+\t\t\t    = possible_polymorphic_call_targets\n+\t\t\t\t(edge, &final, &cache_token);\n+\n+\t\t\t  if (!pointer_set_insert (reachable_call_targets,\n+\t\t\t\t\t\t   cache_token))\n+\t\t\t    {\n+\t\t\t      if (cgraph_dump_file)\n+\t\t\t\tdump_possible_polymorphic_call_targets \n+\t\t\t\t  (cgraph_dump_file, edge);\n+\n+\t\t\t      for (i = 0; i < targets.length(); i++)\n+\t\t\t\t{\n+\t\t\t\t  /* Do not bother to mark virtual methods in anonymous namespace;\n+\t\t\t\t     either we will find use of virtual table defining it, or it is\n+\t\t\t\t     unused.  */\n+\t\t\t\t  if (targets[i]->symbol.definition\n+\t\t\t\t      && TREE_CODE\n+\t\t\t\t\t  (TREE_TYPE (targets[i]->symbol.decl))\n+\t\t\t\t\t   == METHOD_TYPE\n+\t\t\t\t      && !type_in_anonymous_namespace_p\n+\t\t\t\t\t   (method_class_type\n+\t\t\t\t\t     (TREE_TYPE (targets[i]->symbol.decl))))\n+\t\t\t\t  enqueue_node ((symtab_node) targets[i]);\n+\t\t\t\t}\n+\t\t\t    }\n+\n+\t\t\t  /* Very trivial devirtualization; when the type is\n+\t\t\t     final or anonymous (so we know all its derivation)\n+\t\t\t     and there is only one possible virtual call target,\n+\t\t\t     make the edge direct.  */\n+\t\t\t  if (final)\n+\t\t\t    {\n+\t\t\t      gcc_assert (targets.length());\n+\t\t\t      if (targets.length() == 1)\n+\t\t\t\t{\n+\t\t\t\t  if (cgraph_dump_file)\n+\t\t\t\t    {\n+\t\t\t\t      fprintf (cgraph_dump_file,\n+\t\t\t\t\t       \"Devirtualizing call: \");\n+\t\t\t\t      print_gimple_stmt (cgraph_dump_file,\n+\t\t\t\t\t\t\t edge->call_stmt, 0,\n+\t\t\t\t\t\t\t TDF_SLIM);\n+\t\t\t\t    }\n+\t\t\t\t  cgraph_make_edge_direct (edge, targets[0]);\n+\t\t\t\t  cgraph_redirect_edge_call_stmt_to_callee (edge);\n+\t\t\t\t  if (cgraph_dump_file)\n+\t\t\t\t    {\n+\t\t\t\t      fprintf (cgraph_dump_file,\n+\t\t\t\t\t       \"Devirtualized as: \");\n+\t\t\t\t      print_gimple_stmt (cgraph_dump_file,\n+\t\t\t\t\t\t\t edge->call_stmt, 0,\n+\t\t\t\t\t\t\t TDF_SLIM);\n+\t\t\t\t    }\n+\t\t\t\t}\n+\t\t\t    }\n+\t\t\t}\n+\t\t    }\n \t\t}\n \n \t      /* If decl is a clone of an abstract function,"}, {"sha": "47196da050889b5c9dc720410b164ea990d3a05b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be65686206f422b2a3401b2e18bccf830984f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be65686206f422b2a3401b2e18bccf830984f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4be65686206f422b2a3401b2e18bccf830984f4", "patch": "@@ -1,3 +1,8 @@\n+2013-08-23  Jan Hubicka  <jh@suse.cz>\n+\n+\t* g++.dg/ipa/devirt-13.C: New testcase.\n+\t* g++.dg/ipa/devirt-14.C: New testcase.\n+\n 2013-08-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/58218"}, {"sha": "13fbaeea9c834e94278989967ded2bcac222fe0b", "filename": "gcc/testsuite/g++.dg/ipa/devirt-13.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be65686206f422b2a3401b2e18bccf830984f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be65686206f422b2a3401b2e18bccf830984f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-13.C?ref=c4be65686206f422b2a3401b2e18bccf830984f4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* Call to foo should be devirtualized because there are no derived types of A.  */\n+/* { dg-options \"-O2 -fdump-ipa-cgraph -fdump-tree-ssa\"  } */\n+namespace {\n+class A {\n+public:\n+  virtual int foo(void)\n+{\n+  return 0;\n+}\n+};\n+}\n+class A a, *b=&a;\n+main()\n+{\n+  return b->foo();\n+}\n+\n+/* { dg-final { scan-ipa-dump \"Devirtualizing call\"  \"cgraph\"  } } */\n+/* { dg-final { scan-tree-dump-times \"OBJ_TYPE_REF\" 0 \"ssa\"} } */\n+/* { dg-final { cleanup-ipa-dump \"cgraph\" } } */\n+/* { dg-final { cleanup-tree-dump \"ssa\" } } */"}, {"sha": "1a87c2503290231274c4152503ce2d1279e6cb44", "filename": "gcc/testsuite/g++.dg/ipa/devirt-14.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4be65686206f422b2a3401b2e18bccf830984f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4be65686206f422b2a3401b2e18bccf830984f4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-14.C?ref=c4be65686206f422b2a3401b2e18bccf830984f4", "patch": "@@ -0,0 +1,34 @@\n+/* No devirtualization happens here, but A::foo should not end up as reachable\n+   because the constructor of A is unreachable and therefore the virtual\n+   method table referring to A::foo is optimized out.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-ssa\"  } */\n+class B {\n+public:\n+  virtual int foo(void)\n+{\n+  return 0;\n+}\n+};\n+namespace {\n+class A : public B {\n+public:\n+  virtual int foo(void)\n+{\n+  return 1;\n+}\n+};\n+}\n+class B a, *b=&a;\n+main()\n+{\n+  if (0)\n+    {\n+    class A a;\n+    a.foo();\n+    }\n+  return b->foo();\n+}\n+\n+/* { dg-final { scan-tree-dump-nop \"A::foo\" 0 \"ssa\"} } */\n+/* { dg-final { cleanup-tree-dump \"ssa\" } } */"}]}