{"sha": "c033f5ae3270e34c40c7ef9e7168b9884e39b75a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAzM2Y1YWUzMjcwZTM0YzQwYzdlZjllNzE2OGI5ODg0ZTM5Yjc1YQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2013-04-29T08:42:00Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2013-04-29T08:42:00Z"}, "message": "PR 56981 Improve unbuffered performance on special files.\n\n2013-04-29  Janne Blomqvist  <jb@gcc.gnu.org>\n\n        PR fortran/56981\n        * io/transfer.c (next_record_w_unf): First fix head marker, then\n        write tail.\n        (next_record): Call flush_if_unbuffered.\n        * io/unix.c (struct unix_stream): Add field unbuffered.\n        (flush_if_unbuffered): New function.\n        (fd_to_stream): New argument.\n        (open_external): Fix fd_to_stream call.\n        (input_stream): Likewise.\n        (output_stream): Likewise.\n        (error_stream): Likewise.\n        * io/unix.h (flush_if_unbuffered): New prototype.\n\nFrom-SVN: r198390", "tree": {"sha": "3b1ca6b7cea4c26f9fb00330df1afd202ff6a6cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b1ca6b7cea4c26f9fb00330df1afd202ff6a6cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c033f5ae3270e34c40c7ef9e7168b9884e39b75a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c033f5ae3270e34c40c7ef9e7168b9884e39b75a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c033f5ae3270e34c40c7ef9e7168b9884e39b75a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c033f5ae3270e34c40c7ef9e7168b9884e39b75a/comments", "author": null, "committer": null, "parents": [{"sha": "94dc53320e6c22ef0d3f8d8db83c2492de001f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94dc53320e6c22ef0d3f8d8db83c2492de001f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94dc53320e6c22ef0d3f8d8db83c2492de001f5b"}], "stats": {"total": 85, "additions": 64, "deletions": 21}, "files": [{"sha": "b7d6fe1152edc1c4363367442a7b9ab6c6dc9f03", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c033f5ae3270e34c40c7ef9e7168b9884e39b75a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c033f5ae3270e34c40c7ef9e7168b9884e39b75a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c033f5ae3270e34c40c7ef9e7168b9884e39b75a", "patch": "@@ -1,3 +1,18 @@\n+2013-04-29  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        PR fortran/56981\n+        * io/transfer.c (next_record_w_unf): First fix head marker, then\n+        write tail.\n+        (next_record): Call flush_if_unbuffered.\n+        * io/unix.c (struct unix_stream): Add field unbuffered.\n+        (flush_if_unbuffered): New function.\n+        (fd_to_stream): New argument.\n+        (open_external): Fix fd_to_stream call.\n+        (input_stream): Likewise.\n+        (output_stream): Likewise.\n+        (error_stream): Likewise.\n+        * io/unix.h (flush_if_unbuffered): New prototype.\n+\n 2013-04-28  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* intrinsics/system_clock.c (system_clock_4): Fix sign error in"}, {"sha": "52b1da6330a55e456270ef2f15b5ef6760f846af", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c033f5ae3270e34c40c7ef9e7168b9884e39b75a/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c033f5ae3270e34c40c7ef9e7168b9884e39b75a/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=c033f5ae3270e34c40c7ef9e7168b9884e39b75a", "patch": "@@ -3207,17 +3207,6 @@ next_record_w_unf (st_parameter_dt *dtp, int next_subrecord)\n   m = dtp->u.p.current_unit->recl_subrecord\n     - dtp->u.p.current_unit->bytes_left_subrecord;\n \n-  /* Write the length tail.  If we finish a record containing\n-     subrecords, we write out the negative length.  */\n-\n-  if (dtp->u.p.current_unit->continued)\n-    m_write = -m;\n-  else\n-    m_write = m;\n-\n-  if (unlikely (write_us_marker (dtp, m_write) < 0))\n-    goto io_error;\n-\n   if (compile_options.record_marker == 0)\n     record_marker = sizeof (GFC_INTEGER_4);\n   else\n@@ -3226,7 +3215,7 @@ next_record_w_unf (st_parameter_dt *dtp, int next_subrecord)\n   /* Seek to the head and overwrite the bogus length with the real\n      length.  */\n \n-  if (unlikely (sseek (dtp->u.p.current_unit->s, - m - 2 * record_marker, \n+  if (unlikely (sseek (dtp->u.p.current_unit->s, - m - record_marker, \n \t\t       SEEK_CUR) < 0))\n     goto io_error;\n \n@@ -3240,8 +3229,18 @@ next_record_w_unf (st_parameter_dt *dtp, int next_subrecord)\n \n   /* Seek past the end of the current record.  */\n \n-  if (unlikely (sseek (dtp->u.p.current_unit->s, m + record_marker, \n-\t\t       SEEK_CUR) < 0))\n+  if (unlikely (sseek (dtp->u.p.current_unit->s, m, SEEK_CUR) < 0))\n+    goto io_error;\n+\n+  /* Write the length tail.  If we finish a record containing\n+     subrecords, we write out the negative length.  */\n+\n+  if (dtp->u.p.current_unit->continued)\n+    m_write = -m;\n+  else\n+    m_write = m;\n+\n+  if (unlikely (write_us_marker (dtp, m_write) < 0))\n     goto io_error;\n \n   return;\n@@ -3503,6 +3502,7 @@ next_record (st_parameter_dt *dtp, int done)\n     pre_position (dtp);\n \n   fbuf_flush (dtp->u.p.current_unit, dtp->u.p.mode);\n+  flush_if_unbuffered (dtp->u.p.current_unit->s);\n }\n \n "}, {"sha": "08fe4fe5212eb0940273fa0f364236c48a149320", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c033f5ae3270e34c40c7ef9e7168b9884e39b75a/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c033f5ae3270e34c40c7ef9e7168b9884e39b75a/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=c033f5ae3270e34c40c7ef9e7168b9884e39b75a", "patch": "@@ -212,6 +212,8 @@ typedef struct\n   /* Cached stat(2) values.  */\n   dev_t st_dev;\n   ino_t st_ino;\n+\n+  bool unbuffered;  /* Buffer should be flushed after each I/O statement.  */\n }\n unix_stream;\n \n@@ -442,7 +444,7 @@ raw_init (unix_stream * s)\n Buffered I/O functions. These functions have the same semantics as the\n raw I/O functions above, except that they are buffered in order to\n improve performance. The buffer must be flushed when switching from\n-reading to writing and vice versa. Only supported for regular files.\n+reading to writing and vice versa.\n *********************************************************************/\n \n static int\n@@ -968,11 +970,26 @@ open_internal4 (char *base, int length, gfc_offset offset)\n }\n \n \n+/* \"Unbuffered\" really means I/O statement buffering. For formatted\n+   I/O, the fbuf manages this, and then uses raw I/O. For unformatted\n+   I/O, buffered I/O is used, and the buffer is flushed at the end of\n+   each I/O statement, where this function is called.  */\n+\n+int\n+flush_if_unbuffered (stream* s)\n+{\n+  unix_stream* us = (unix_stream*) s;\n+  if (us->unbuffered)\n+    return sflush (s);\n+  return 0;\n+}\n+\n+\n /* fd_to_stream()-- Given an open file descriptor, build a stream\n  * around it. */\n \n static stream *\n-fd_to_stream (int fd)\n+fd_to_stream (int fd, bool unformatted)\n {\n   struct stat statbuf;\n   unix_stream *s;\n@@ -998,7 +1015,15 @@ fd_to_stream (int fd)\n \t    || s->fd == STDERR_FILENO)))\n     buf_init (s);\n   else\n-    raw_init (s);\n+    {\n+      if (unformatted)\n+\t{\n+\t  s->unbuffered = true;\n+\t  buf_init (s);\n+\t}\n+      else\n+\traw_init (s);\n+    }\n \n   return (stream *) s;\n }\n@@ -1364,7 +1389,7 @@ open_external (st_parameter_open *opp, unit_flags *flags)\n     return NULL;\n   fd = fix_fd (fd);\n \n-  return fd_to_stream (fd);\n+  return fd_to_stream (fd, flags->form == FORM_UNFORMATTED);\n }\n \n \n@@ -1374,7 +1399,7 @@ open_external (st_parameter_open *opp, unit_flags *flags)\n stream *\n input_stream (void)\n {\n-  return fd_to_stream (STDIN_FILENO);\n+  return fd_to_stream (STDIN_FILENO, false);\n }\n \n \n@@ -1390,7 +1415,7 @@ output_stream (void)\n   setmode (STDOUT_FILENO, O_BINARY);\n #endif\n \n-  s = fd_to_stream (STDOUT_FILENO);\n+  s = fd_to_stream (STDOUT_FILENO, false);\n   return s;\n }\n \n@@ -1407,7 +1432,7 @@ error_stream (void)\n   setmode (STDERR_FILENO, O_BINARY);\n #endif\n \n-  s = fd_to_stream (STDERR_FILENO);\n+  s = fd_to_stream (STDERR_FILENO, false);\n   return s;\n }\n "}, {"sha": "cc82d45739777b21ec75393894c7691f198dc4e9", "filename": "libgfortran/io/unix.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c033f5ae3270e34c40c7ef9e7168b9884e39b75a/libgfortran%2Fio%2Funix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c033f5ae3270e34c40c7ef9e7168b9884e39b75a/libgfortran%2Fio%2Funix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.h?ref=c033f5ae3270e34c40c7ef9e7168b9884e39b75a", "patch": "@@ -167,6 +167,9 @@ internal_proto(inquire_readwrite);\n extern void flush_if_preconnected (stream *);\n internal_proto(flush_if_preconnected);\n \n+extern int flush_if_unbuffered (stream*);\n+internal_proto(flush_if_unbuffered);\n+\n extern int stream_isatty (stream *);\n internal_proto(stream_isatty);\n "}]}