{"sha": "82ff7e3426ea926d090777173977f8bedd086816", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJmZjdlMzQyNmVhOTI2ZDA5MDc3NzE3Mzk3N2Y4YmVkZDA4NjgxNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-30T12:32:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-30T12:35:24Z"}, "message": "tree-optimization/97623 - avoid excessive insert iteration for hoisting\n\nThis avoids requiring insert iteration for back-to-back hoisting\nopportunities as seen in the added testcase.  For the PR at hand\nthis halves the number of insert iterations retaining only\nthe hard to avoid PRE / hoist insert back-to-backs.\n\n2020-10-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/97623\n\t* tree-ssa-pre.c (insert): First do hoist insertion in\n\ta backward walk.\n\n\t* gcc.dg/tree-ssa/ssa-hoist-7.c: New testcase.", "tree": {"sha": "35c9a956bdc58f6e0d758fd31f88133a78f41f16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35c9a956bdc58f6e0d758fd31f88133a78f41f16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82ff7e3426ea926d090777173977f8bedd086816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ff7e3426ea926d090777173977f8bedd086816", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ff7e3426ea926d090777173977f8bedd086816", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ff7e3426ea926d090777173977f8bedd086816/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33c0f246f799b7403171e97f31276a8feddd05c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33c0f246f799b7403171e97f31276a8feddd05c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33c0f246f799b7403171e97f31276a8feddd05c9"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "ce9cec61668a4ba6b6b3b74488732806aea7b1b3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-hoist-7.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ff7e3426ea926d090777173977f8bedd086816/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-hoist-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ff7e3426ea926d090777173977f8bedd086816/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-hoist-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-hoist-7.c?ref=82ff7e3426ea926d090777173977f8bedd086816", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n+\n+void baz();\n+int tem;\n+void foo (int a, int b, int c, int d, int e, int x, int y, int z)\n+{\n+  if (a)\n+    {\n+      if (b)\n+        {\n+          if (c)\n+            {\n+\t      if (d)\n+\t\t{\n+\t\t  if (e)\n+\t\t    {\n+\t\t      tem = x + y;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      if (z) baz ();\n+\t\t      tem = x + y;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (z) baz ();\n+\t\t  tem = x + y;\n+\t\t}\n+\t    }\n+          else\n+            {\n+              if (z) baz ();\n+              tem = x + y;\n+            }\n+        }\n+      else\n+        {\n+          if (z) baz ();\n+          tem = x + y;\n+        }\n+    }\n+  else\n+    {\n+      if (z) baz ();\n+      tem = x + y;\n+    }\n+}\n+\n+/* Now inserting x + y five times is unnecessary but the cascading\n+   cannot be avoided with the simple-minded dataflow.  But make sure\n+   we do the insertions all in the first iteration.  */\n+/* { dg-final { scan-tree-dump \"insert iterations == 2\" \"pre\" } } */\n+/* { dg-final { scan-tree-dump \"HOIST inserted: 5\" \"pre\" } } */"}, {"sha": "091ecb39bb67d7726beedaac9711f84e00eb0779", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82ff7e3426ea926d090777173977f8bedd086816/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82ff7e3426ea926d090777173977f8bedd086816/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=82ff7e3426ea926d090777173977f8bedd086816", "patch": "@@ -3646,6 +3646,15 @@ insert (void)\n \tfprintf (dump_file, \"Starting insert iteration %d\\n\", num_iterations);\n \n       changed = false;\n+      /* Insert expressions for hoisting.  Do a backward walk here since\n+\t inserting into BLOCK exposes new opportunities in its predecessors.  */\n+      if (flag_code_hoisting)\n+\tfor (int idx = rpo_num - 1; idx >= 0; --idx)\n+\t  {\n+\t    basic_block block = BASIC_BLOCK_FOR_FN (cfun, rpo[idx]);\n+\t    if (EDGE_COUNT (block->succs) >= 2)\n+\t      changed |= do_hoist_insertion (block);\n+\t  }\n       for (int idx = 0; idx < rpo_num; ++idx)\n \t{\n \t  basic_block block = BASIC_BLOCK_FOR_FN (cfun, rpo[idx]);\n@@ -3680,10 +3689,6 @@ insert (void)\n \t\t  if (do_partial_partial)\n \t\t    changed |= do_pre_partial_partial_insertion (block, dom);\n \t\t}\n-\n-\t      /* Insert expressions for hoisting.  */\n-\t      if (flag_code_hoisting && EDGE_COUNT (block->succs) >= 2)\n-\t\tchanged |= do_hoist_insertion (block);\n \t    }\n \t}\n "}]}