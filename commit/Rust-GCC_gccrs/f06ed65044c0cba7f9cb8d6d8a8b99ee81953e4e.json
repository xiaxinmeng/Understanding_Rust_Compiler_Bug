{"sha": "f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA2ZWQ2NTA0NGMwY2JhN2Y5Y2I4ZDZkOGE4Yjk5ZWU4MTk1M2U0ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-05-12T20:05:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-12T20:05:23Z"}, "message": "alpha.h (TARGET_SUPPORTS_WIDE_INT): New define.\n\n\t* config/alpha/alpha.h (TARGET_SUPPORTS_WIDE_INT): New define.\n\t* config/alpha/alpha.c (alpha_rtx_costs): Handle CONST_WIDE_INT.\n\t(alpha_extract_integer): Ditto.\n\t(alpha_legitimate_constant_p): Ditto.\n\t(alpha_split_tmode_pair): Ditto.\n\t(alpha_preferred_reload_class): Add CONST_WIDE_INT.\n\t(alpha_expand_mov): Ditto.\n\t(print_operand): Remove handling of 'H' modifier.\n\t<case 'm'>: Remove CONST_DOUBLE handling.\n\t(summarize_insn): Handle CONST_WIDE_INT.\n\t* config/alpha/alpha.md (*andsi_internal): Remove H constraint.\n\t(anddi3): Ditto.\n\t(movti): Handle CONST_WIDE_INT.\n\t* config/alpha/constraints.md ('H'): Remove constraint definition.\n\t('G'): Do not match MODE_FLOAT class.\n\t* config/alpha/predicates.md (const0_operand): Also match\n\tconst_wide_int.\n\t(non_add_const_operand): Ditto.\n\t(non_zero_const_operand): Ditto.\n\t(some_operand): Ditto.\n\t(input_operand): Ditto.  Handle CONST_WIDE_INT.\n\t(and_operand): Do not match const_double.\n\t* config/alpha/sync.md (fetchop_constr): Remove H constraint.\n\nFrom-SVN: r223097", "tree": {"sha": "68c26a1c4dff0c873ce58f57d20a529df940f53c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c26a1c4dff0c873ce58f57d20a529df940f53c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46b35980b831a980f762753b64c83e1ab8eac880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46b35980b831a980f762753b64c83e1ab8eac880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46b35980b831a980f762753b64c83e1ab8eac880"}], "stats": {"total": 127, "additions": 62, "deletions": 65}, "files": [{"sha": "4d67a4d9153087a857b01d2bee2df158fb47d2f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "patch": "@@ -1,3 +1,29 @@\n+2015-05-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.h (TARGET_SUPPORTS_WIDE_INT): New define.\n+\t* config/alpha/alpha.c (alpha_rtx_costs): Handle CONST_WIDE_INT.\n+\t(alpha_extract_integer): Ditto.\n+\t(alpha_legitimate_constant_p): Ditto.\n+\t(alpha_split_tmode_pair): Ditto.\n+\t(alpha_preferred_reload_class): Add CONST_WIDE_INT.\n+\t(alpha_expand_mov): Ditto.\n+\t(print_operand): Remove handling of 'H' modifier.\n+\t<case 'm'>: Remove CONST_DOUBLE handling.\n+\t(summarize_insn): Handle CONST_WIDE_INT.\n+\t* config/alpha/alpha.md (*andsi_internal): Remove H constraint.\n+\t(anddi3): Ditto.\n+\t(movti): Handle CONST_WIDE_INT.\n+\t* config/alpha/constraints.md ('H'): Remove constraint definition.\n+\t('G'): Do not match MODE_FLOAT class.\n+\t* config/alpha/predicates.md (const0_operand): Also match\n+\tconst_wide_int.\n+\t(non_add_const_operand): Ditto.\n+\t(non_zero_const_operand): Ditto.\n+\t(some_operand): Ditto.\n+\t(input_operand): Ditto.  Handle CONST_WIDE_INT.\n+\t(and_operand): Do not match const_double.\n+\t* config/alpha/sync.md (fetchop_constr): Remove H constraint.\n+\n 2015-05-12  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR target/65697"}, {"sha": "5f5edebc55a7bffb43b59b5e1626a58ff6b27b4f", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 21, "deletions": 44, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "patch": "@@ -1412,6 +1412,7 @@ alpha_rtx_costs (rtx x, int code, int outer_code, int opno, int *total,\n       /* FALLTHRU */\n \n     case CONST_DOUBLE:\n+    case CONST_WIDE_INT:\n       if (x == CONST0_RTX (mode))\n \t*total = 0;\n       else if ((outer_code == PLUS && add_operand (x, VOIDmode))\n@@ -1647,6 +1648,7 @@ alpha_preferred_reload_class(rtx x, enum reg_class rclass)\n \n   /* These sorts of constants we can easily drop to memory.  */\n   if (CONST_INT_P (x)\n+      || GET_CODE (x) == CONST_WIDE_INT\n       || GET_CODE (x) == CONST_DOUBLE\n       || GET_CODE (x) == CONST_VECTOR)\n     {\n@@ -2104,8 +2106,8 @@ alpha_emit_set_long_const (rtx target, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n   return target;\n }\n \n-/* Given an integral CONST_INT, CONST_DOUBLE, or CONST_VECTOR, return \n-   the low 64 bits.  */\n+/* Given an integral CONST_INT, CONST_WIDE_INT, CONST_DOUBLE,\n+   or CONST_VECTOR, return the low 64 bits.  */\n \n static void\n alpha_extract_integer (rtx x, HOST_WIDE_INT *p0, HOST_WIDE_INT *p1)\n@@ -2115,18 +2117,15 @@ alpha_extract_integer (rtx x, HOST_WIDE_INT *p0, HOST_WIDE_INT *p1)\n   if (GET_CODE (x) == CONST_VECTOR)\n     x = simplify_subreg (DImode, x, GET_MODE (x), 0);\n \n-\n   if (CONST_INT_P (x))\n-    {\n-      i0 = INTVAL (x);\n-      i1 = -(i0 < 0);\n-    }\n+    i0 = INTVAL (x);\n+  else if (CONST_WIDE_INT_P (x))\n+    i0 = CONST_WIDE_INT_ELT (x, 0);\n   else\n-    {\n-      i0 = CONST_DOUBLE_LOW (x);\n-      i1 = -(i0 < 0);\n-    }\n+    i0 = CONST_DOUBLE_LOW (x);\n \n+  i1 = -(i0 < 0);\n+      \n   *p0 = i0;\n   *p1 = i1;\n }\n@@ -2163,13 +2162,16 @@ alpha_legitimate_constant_p (machine_mode mode, rtx x)\n       /* TLS symbols are never valid.  */\n       return SYMBOL_REF_TLS_MODEL (x) == 0;\n \n-    case CONST_DOUBLE:\n+    case CONST_WIDE_INT:\n       if (x == CONST0_RTX (mode))\n \treturn true;\n-      if (FLOAT_MODE_P (mode))\n-\treturn false;\n       goto do_integer;\n \n+    case CONST_DOUBLE:\n+      if (x == CONST0_RTX (mode))\n+\treturn true;\n+      return false;\n+\n     case CONST_VECTOR:\n       if (x == CONST0_RTX (mode))\n \treturn true;\n@@ -2249,6 +2251,7 @@ alpha_expand_mov (machine_mode mode, rtx *operands)\n \n   /* Split large integers.  */\n   if (CONST_INT_P (operands[1])\n+      || GET_CODE (operands[1]) == CONST_WIDE_INT\n       || GET_CODE (operands[1]) == CONST_DOUBLE\n       || GET_CODE (operands[1]) == CONST_VECTOR)\n     {\n@@ -3291,6 +3294,7 @@ alpha_split_tmode_pair (rtx operands[4], machine_mode mode,\n       break;\n \n     case CONST_INT:\n+    case CONST_WIDE_INT:\n     case CONST_DOUBLE:\n       gcc_assert (operands[1] == CONST0_RTX (mode));\n       operands[2] = operands[3] = const0_rtx;\n@@ -5151,13 +5155,6 @@ print_operand (FILE *file, rtx x, int code)\n       fprintf (file, \"%d\", alpha_this_gpdisp_sequence_number);\n       break;\n \n-    case 'H':\n-      if (GET_CODE (x) == HIGH)\n-\toutput_addr_const (file, XEXP (x, 0));\n-      else\n-\toutput_operand_lossage (\"invalid %%H value\");\n-      break;\n-\n     case 'J':\n       {\n \tconst char *lituse;\n@@ -5254,27 +5251,7 @@ print_operand (FILE *file, rtx x, int code)\n \n     case 'm':\n       /* Write mask for ZAP insn.  */\n-      if (GET_CODE (x) == CONST_DOUBLE)\n-\t{\n-\t  HOST_WIDE_INT mask = 0;\n-\t  HOST_WIDE_INT value;\n-\n-\t  value = CONST_DOUBLE_LOW (x);\n-\t  for (i = 0; i < HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR;\n-\t       i++, value >>= 8)\n-\t    if (value & 0xff)\n-\t      mask |= (1 << i);\n-\n-\t  value = CONST_DOUBLE_HIGH (x);\n-\t  for (i = 0; i < HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR;\n-\t       i++, value >>= 8)\n-\t    if (value & 0xff)\n-\t      mask |= (1 << (i + sizeof (int)));\n-\n-\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, mask & 0xff);\n-\t}\n-\n-      else if (CONST_INT_P (x))\n+      if (CONST_INT_P (x))\n \t{\n \t  HOST_WIDE_INT mask = 0, value = INTVAL (x);\n \n@@ -8602,8 +8579,8 @@ summarize_insn (rtx x, struct shadow_summary *sum, int set)\n       summarize_insn (XEXP (x, 0), sum, 0);\n       break;\n \n-    case CONST_INT:   case CONST_DOUBLE:\n-    case SYMBOL_REF:  case LABEL_REF:     case CONST:\n+    case CONST_INT:   case CONST_WIDE_INT:  case CONST_DOUBLE:\n+    case SYMBOL_REF:  case LABEL_REF:       case CONST:\n     case SCRATCH:     case ASM_INPUT:\n       break;\n "}, {"sha": "196349df911e9f386cce3ebed61cbdb5a2750373", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "patch": "@@ -1066,3 +1066,5 @@ extern long alpha_auto_offset;\n \n /* The system headers under Alpha systems are generally C++-aware.  */\n #define NO_IMPLICIT_EXTERN_C\n+\n+#define TARGET_SUPPORTS_WIDE_INT 1"}, {"sha": "2323de9462f09c568b323d4fa2a404a54f812fe9", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "patch": "@@ -922,7 +922,7 @@\n (define_insn \"*andsi_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r\")\n \t(and:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ,rJ,rJ\")\n-\t\t(match_operand:SI 2 \"and_operand\" \"rI,N,MH\")))]\n+\t\t(match_operand:SI 2 \"and_operand\" \"rI,N,M\")))]\n   \"\"\n   \"@\n    and %r1,%2,%0\n@@ -933,7 +933,7 @@\n (define_insn \"anddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r,r\")\n \t(and:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rJ,rJ,rJ\")\n-\t\t(match_operand:DI 2 \"and_operand\" \"rI,N,MH\")))]\n+\t\t(match_operand:DI 2 \"and_operand\" \"rI,N,M\")))]\n   \"\"\n   \"@\n    and %r1,%2,%0\n@@ -4154,6 +4154,7 @@\n      32-bit constants in TImode and rely on the splitter, but\n      this doesn't seem to be worth the pain.  */\n   else if (CONST_INT_P (operands[1])\n+\t   || GET_CODE (operands[1]) == CONST_WIDE_INT\n \t   || GET_CODE (operands[1]) == CONST_DOUBLE)\n     {\n       rtx in[2], out[2], target;"}, {"sha": "ef7068248b08270b7cdad36bde209191cda3874b", "filename": "gcc/config/alpha/constraints.md", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fconstraints.md?ref=f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "patch": "@@ -18,7 +18,7 @@\n ;; <http://www.gnu.org/licenses/>.\n \n ;;; Unused letters:\n-;;;    ABCDEF               V  YZ\n+;;;    ABCDEF H             V  YZ\n ;;;       de ghijkl   pq  tu wxyz\n \n ;; Integer register constraints.\n@@ -84,17 +84,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"ival == 1 || ival == 2 || ival == 3\")))\n \n-(define_constraint \"H\"\n-  \"A valid operand of a ZAP insn, when building with 32-bit HOST_WIDE_INT\"\n-  (and (match_code \"const_double\")\n-       (match_test \"mode == VOIDmode && zap_mask (hval) && zap_mask (lval)\")))\n-\n ;; Floating-point constant constraints.\n (define_constraint \"G\"\n   \"The floating point zero constant\"\n   (and (match_code \"const_double\")\n-       (match_test \"GET_MODE_CLASS (mode) == MODE_FLOAT\n-\t\t    && op == CONST0_RTX (mode)\")))\n+       (match_test \"op == CONST0_RTX (mode)\")))\n \n ;; \"Extra\" constraints.\n (define_constraint \"Q\""}, {"sha": "b33044d43a99a2f239e39cfc9bd0e1f1afc66c31", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "patch": "@@ -19,7 +19,7 @@\n \n ;; Return 1 if OP is the zero constant for MODE.\n (define_predicate \"const0_operand\"\n-  (and (match_code \"const_int,const_double,const_vector\")\n+  (and (match_code \"const_int,const_wide_int,const_double,const_vector\")\n        (match_test \"op == CONST0_RTX (mode)\")))\n \n ;; Returns true if OP is either the constant zero or a register.\n@@ -66,12 +66,12 @@\n ;; Return 1 if the operand is a non-symbolic constant operand that\n ;; does not satisfy add_operand.\n (define_predicate \"non_add_const_operand\"\n-  (and (match_code \"const_int,const_double,const_vector\")\n+  (and (match_code \"const_int,const_wide_int,const_double,const_vector\")\n        (not (match_operand 0 \"add_operand\"))))\n \n ;; Return 1 if the operand is a non-symbolic, nonzero constant operand.\n (define_predicate \"non_zero_const_operand\"\n-  (and (match_code \"const_int,const_double,const_vector\")\n+  (and (match_code \"const_int,const_wide_int,const_double,const_vector\")\n        (match_test \"op != CONST0_RTX (mode)\")))\n \n ;; Return 1 if OP is the constant 4 or 8.\n@@ -85,11 +85,7 @@\n     (match_test \"(unsigned HOST_WIDE_INT) INTVAL (op) < 0x100\n \t\t || (unsigned HOST_WIDE_INT) ~ INTVAL (op) < 0x100\n \t\t || zap_mask (INTVAL (op))\")\n-    (if_then_else (match_code \"const_double\")\n-      (match_test \"GET_MODE (op) == VOIDmode\n-\t\t   && zap_mask (CONST_DOUBLE_LOW (op))\n-\t\t   && zap_mask (CONST_DOUBLE_HIGH (op))\")\n-      (match_operand 0 \"register_operand\"))))\n+    (match_operand 0 \"register_operand\")))\n \n ;; Return 1 if OP is a valid first operand to an IOR or XOR insn.\n (define_predicate \"or_operand\"\n@@ -155,7 +151,7 @@\n ;; Return 1 if OP is something that can be reloaded into a register;\n ;; if it is a MEM, it need not be valid.\n (define_predicate \"some_operand\"\n-  (ior (match_code \"reg,mem,const_int,const_double,const_vector,\n+  (ior (match_code \"reg,mem,const_int,const_wide_int,const_double,const_vector,\n \t\t    label_ref,symbol_ref,const,high\")\n        (and (match_code \"subreg\")\n \t    (match_test \"some_operand (SUBREG_REG (op), VOIDmode)\"))))\n@@ -169,7 +165,7 @@\n ;; Return 1 if OP is a valid operand for the source of a move insn.\n (define_predicate \"input_operand\"\n   (match_code \"label_ref,symbol_ref,const,high,reg,subreg,mem,\n-\t       const_double,const_vector,const_int\")\n+\t       const_double,const_vector,const_int,const_wide_int\")\n {\n   switch (GET_CODE (op))\n     {\n@@ -205,6 +201,7 @@\n       return ((TARGET_BWX || (mode != HImode && mode != QImode))\n \t      && general_operand (op, mode));\n \n+    case CONST_WIDE_INT:\n     case CONST_DOUBLE:\n       return op == CONST0_RTX (mode);\n "}, {"sha": "d5f33eb2c510bf27a7a93311300f3bae68016030", "filename": "gcc/config/alpha/sync.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e/gcc%2Fconfig%2Falpha%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fsync.md?ref=f06ed65044c0cba7f9cb8d6d8a8b99ee81953e4e", "patch": "@@ -24,7 +24,7 @@\n   [(plus \"add_operand\") (minus \"reg_or_8bit_operand\")\n    (ior \"or_operand\") (xor \"or_operand\") (and \"and_operand\")])\n (define_code_attr fetchop_constr\n-  [(plus \"rKL\") (minus \"rI\") (ior \"rIN\") (xor \"rIN\") (and \"riNHM\")])\n+  [(plus \"rKL\") (minus \"rI\") (ior \"rIN\") (xor \"rIN\") (and \"riNM\")])\n \n \n (define_expand \"memory_barrier\""}]}