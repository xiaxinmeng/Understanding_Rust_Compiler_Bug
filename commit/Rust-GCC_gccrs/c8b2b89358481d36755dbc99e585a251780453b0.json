{"sha": "c8b2b89358481d36755dbc99e585a251780453b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiMmI4OTM1ODQ4MWQzNjc1NWRiYzk5ZTU4NWEyNTE3ODA0NTNiMA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-13T14:29:32Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-09-13T14:29:32Z"}, "message": "c++: parameter pack inside constexpr if [PR101764]\n\nHere when partially instantiating the first pack expansion, substitution\ninto the condition of the constexpr if yields a still-dependent tree, so\ntsubst_expr returns an IF_STMT with an unsubstituted IF_COND and with\nIF_STMT_EXTRA_ARGS added to.  Hence after partial instantiation the pack\nexpansion pattern still refers to the unlowered parameter pack 'ts' of\nlevel 2, and it's thusly recorded in the new PACK_EXPANSION_PARAMETER_PACKS.\nDuring the subsequent final instantiation of the regenerated lambda we\ncrash in tsubst_pack_expansion because it can't find an argument pack\nfor this unlowered 'ts', due to the level mismatch.  (Likewise when the\nconstexpr if is replaced by a requires-expr, which also uses the extra\nargs mechanism for avoiding partial instantiation.)\n\nSo essentially, a pack expansion pattern that contains an \"extra args\"\ntree doesn't play well with partial instantiation.  This patch fixes\nthis by forcing such pack expansions to use the extra args mechanism as\nwell.\n\n\tPR c++/101764\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (PACK_EXPANSION_FORCE_EXTRA_ARGS_P): New accessor\n\tmacro.\n\t* pt.c (has_extra_args_mechanism_p): New function.\n\t(find_parameter_pack_data::found_extra_args_tree_p): New data\n\tmember.\n\t(find_parameter_packs_r): Set ppd->found_extra_args_tree_p\n\tappropriately.\n\t(make_pack_expansion): Set PACK_EXPANSION_FORCE_EXTRA_ARGS_P if\n\tppd.found_extra_args_tree_p.\n\t(use_pack_expansion_extra_args_p): Return true if there were\n\tunsubstituted packs and PACK_EXPANSION_FORCE_EXTRA_ARGS_P.\n\t(tsubst_pack_expansion): Pass the pack expansion to\n\tuse_pack_expansion_extra_args_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/constexpr-if35.C: New test.", "tree": {"sha": "4bb71a59bb857d3f9744d51ee739138e394fd0af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bb71a59bb857d3f9744d51ee739138e394fd0af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8b2b89358481d36755dbc99e585a251780453b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b2b89358481d36755dbc99e585a251780453b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b2b89358481d36755dbc99e585a251780453b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b2b89358481d36755dbc99e585a251780453b0/comments", "author": null, "committer": null, "parents": [{"sha": "90ac6edc3c0123b6cf975781f70c8517db84bd63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ac6edc3c0123b6cf975781f70c8517db84bd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ac6edc3c0123b6cf975781f70c8517db84bd63"}], "stats": {"total": 58, "additions": 56, "deletions": 2}, "files": [{"sha": "a82747ca6278d826281e7bbefd865869e1aa4d91", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2b89358481d36755dbc99e585a251780453b0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2b89358481d36755dbc99e585a251780453b0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c8b2b89358481d36755dbc99e585a251780453b0", "patch": "@@ -493,6 +493,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       CONSTRUCTOR_C99_COMPOUND_LITERAL (in CONSTRUCTOR)\n       OVL_NESTED_P (in OVERLOAD)\n       DECL_MODULE_EXPORT_P (in _DECL)\n+      PACK_EXPANSION_FORCE_EXTRA_ARGS_P (in *_PACK_EXPANSION)\n    4: IDENTIFIER_MARKED (IDENTIFIER_NODEs)\n       TREE_HAS_CONSTRUCTOR (in INDIRECT_REF, SAVE_EXPR, CONSTRUCTOR,\n \t  CALL_EXPR, or FIELD_DECL).\n@@ -3903,6 +3904,10 @@ struct GTY(()) lang_decl {\n /* True iff this pack expansion is for auto... in lambda init-capture.  */\n #define PACK_EXPANSION_AUTO_P(NODE) TREE_LANG_FLAG_2 (NODE)\n \n+/* True if we must use PACK_EXPANSION_EXTRA_ARGS and avoid partial\n+   instantiation of this pack expansion.  */\n+#define PACK_EXPANSION_FORCE_EXTRA_ARGS_P(NODE) TREE_LANG_FLAG_3 (NODE)\n+\n /* True iff the wildcard can match a template parameter pack.  */\n #define WILDCARD_PACK_P(NODE) TREE_LANG_FLAG_0 (NODE)\n "}, {"sha": "224dd9ebd2b0b395b68785338d7d36f9d60c7a6e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2b89358481d36755dbc99e585a251780453b0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2b89358481d36755dbc99e585a251780453b0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c8b2b89358481d36755dbc99e585a251780453b0", "patch": "@@ -3855,6 +3855,18 @@ expand_builtin_pack_call (tree call, tree args, tsubst_flags_t complain,\n   return NULL_TREE;\n }\n \n+/* Return true if the tree T has the extra args mechanism for\n+   avoiding partial instantiation.  */\n+\n+static bool\n+has_extra_args_mechanism_p (const_tree t)\n+{\n+  return (PACK_EXPANSION_P (t) /* PACK_EXPANSION_EXTRA_ARGS  */\n+\t  || TREE_CODE (t) == REQUIRES_EXPR /* REQUIRES_EXPR_EXTRA_ARGS  */\n+\t  || (TREE_CODE (t) == IF_STMT\n+\t      && IF_STMT_CONSTEXPR_P (t))); /* IF_STMT_EXTRA_ARGS  */\n+}\n+\n /* Structure used to track the progress of find_parameter_packs_r.  */\n struct find_parameter_pack_data\n {\n@@ -3867,6 +3879,9 @@ struct find_parameter_pack_data\n \n   /* True iff we're making a type pack expansion.  */\n   bool type_pack_expansion_p;\n+\n+  /* True iff we found a subtree that has the extra args mechanism.  */\n+  bool found_extra_args_tree_p = false;\n };\n \n /* Identifies all of the argument packs that occur in a template\n@@ -3968,6 +3983,9 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n       *ppd->parameter_packs = tree_cons (NULL_TREE, t, *ppd->parameter_packs);\n     }\n \n+  if (has_extra_args_mechanism_p (t) && !PACK_EXPANSION_P (t))\n+    ppd->found_extra_args_tree_p = true;\n+\n   if (TYPE_P (t))\n     cp_walk_tree (&TYPE_CONTEXT (t),\n \t\t  &find_parameter_packs_r, ppd, ppd->visited);\n@@ -4229,6 +4247,14 @@ make_pack_expansion (tree arg, tsubst_flags_t complain)\n   PACK_EXPANSION_PARAMETER_PACKS (result) = parameter_packs;\n \n   PACK_EXPANSION_LOCAL_P (result) = at_function_scope_p ();\n+  if (ppd.found_extra_args_tree_p)\n+    /* If the pattern of this pack expansion contains a subtree that has\n+       the extra args mechanism for avoiding partial instantiation, then\n+       force this pack expansion to also use extra args.  Otherwise\n+       partial instantiation of this pack expansion may not lower the\n+       level of some parameter packs within the pattern, which would\n+       confuse tsubst_pack_expansion later (PR101764).  */\n+    PACK_EXPANSION_FORCE_EXTRA_ARGS_P (result) = true;\n \n   return result;\n }\n@@ -12405,10 +12431,15 @@ make_argument_pack_select (tree arg_pack, unsigned index)\n     substitution.  */\n \n static bool\n-use_pack_expansion_extra_args_p (tree parm_packs,\n+use_pack_expansion_extra_args_p (tree t,\n+\t\t\t\t tree parm_packs,\n \t\t\t\t int arg_pack_len,\n \t\t\t\t bool has_empty_arg)\n {\n+  if (has_empty_arg\n+      && PACK_EXPANSION_FORCE_EXTRA_ARGS_P (t))\n+    return true;\n+\n   /* If one pack has an expansion and another pack has a normal\n      argument or if one pack has an empty argument and an another\n      one hasn't then tsubst_pack_expansion cannot perform the\n@@ -13161,7 +13192,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \n   /* We cannot expand this expansion expression, because we don't have\n      all of the argument packs we need.  */\n-  if (use_pack_expansion_extra_args_p (packs, len, unsubstituted_packs))\n+  if (use_pack_expansion_extra_args_p (t, packs, len, unsubstituted_packs))\n     {\n       /* We got some full packs, but we can't substitute them in until we\n \t have values for all the packs.  So remember these until then.  */"}, {"sha": "b1248fe23e8e22c5101ce448a3603fe1ef5adfc7", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if35.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2b89358481d36755dbc99e585a251780453b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2b89358481d36755dbc99e585a251780453b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if35.C?ref=c8b2b89358481d36755dbc99e585a251780453b0", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/101764\n+// { dg-do compile { target c++17 } }\n+\n+void g(...);\n+\n+template<class>\n+auto f() {\n+  return [](auto... ts) {\n+    g([] { if constexpr (sizeof(ts)); }...);\n+#if __cpp_concepts\n+    g(requires { decltype(ts){0}; }...);\n+#endif\n+  };\n+}\n+\n+int main() {\n+  f<int>()('a', true);\n+}"}]}