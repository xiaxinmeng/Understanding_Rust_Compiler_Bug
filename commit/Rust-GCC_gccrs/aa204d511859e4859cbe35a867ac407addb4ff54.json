{"sha": "aa204d511859e4859cbe35a867ac407addb4ff54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyMDRkNTExODU5ZTQ4NTljYmUzNWE4NjdhYzQwN2FkZGI0ZmY1NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-04T14:44:21Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-04T14:44:21Z"}, "message": "vect, aarch64: Fix alignment units for IFN_MASK* [PR95401]\n\nThe IFN_MASK* functions take two leading arguments: a load or\nstore pointer and a \u201ccookie\u201d.  The type of the cookie is the\ntype of the access for TBAA purposes (like for MEM_REFs)\nwhile the value of the cookie is the alignment of the access.\nThis PR was caused by a disagreement about whether the alignment\nis measured in bits or bytes.\n\nIt looks like this goes back to PR68786, which made the\nvectoriser create its own cookie argument rather than reusing\nthe one created by ifcvt.  The alignment value of the new cookie\nwas measured in bytes (as needed by set_ptr_info_alignment)\nwhile the existing code expected it to be measured in bits.\nThe folds I added for IFN_MASK_LOAD and STORE then made\nthings worse.\n\ngcc/\n\tPR tree-optimization/95401\n\t* config/aarch64/aarch64-sve-builtins.cc\n\t(gimple_folder::load_store_cookie): Use bits rather than bytes\n\tfor the alignment argument to IFN_MASK_LOAD and IFN_MASK_STORE.\n\t* gimple-fold.c (gimple_fold_mask_load_store_mem_ref): Likewise.\n\t* tree-vect-stmts.c (vectorizable_store): Likewise.\n\t(vectorizable_load): Likewise.\n\ngcc/testsuite/\n\tPR tree-optimization/95401\n\t* g++.dg/vect/pr95401.cc: New test.\n\t* g++.dg/vect/pr95401a.cc: Likewise.", "tree": {"sha": "06b4c2f88665e2d94605c8ed29a301a9333245de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06b4c2f88665e2d94605c8ed29a301a9333245de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa204d511859e4859cbe35a867ac407addb4ff54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa204d511859e4859cbe35a867ac407addb4ff54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa204d511859e4859cbe35a867ac407addb4ff54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa204d511859e4859cbe35a867ac407addb4ff54/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6288183377a0dc8f02ad415eb1ac9338507445aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6288183377a0dc8f02ad415eb1ac9338507445aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6288183377a0dc8f02ad415eb1ac9338507445aa"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "6270b51fbf436c7e2a95b6ad617cb8b29845c0dd", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa204d511859e4859cbe35a867ac407addb4ff54/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa204d511859e4859cbe35a867ac407addb4ff54/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=aa204d511859e4859cbe35a867ac407addb4ff54", "patch": "@@ -2580,7 +2580,7 @@ gimple_folder::fold_contiguous_base (gimple_seq &stmts, tree vectype)\n tree\n gimple_folder::load_store_cookie (tree type)\n {\n-  return build_int_cst (build_pointer_type (type), TYPE_ALIGN_UNIT (type));\n+  return build_int_cst (build_pointer_type (type), TYPE_ALIGN (type));\n }\n \n /* Fold the call to a call to INSTANCE, with the same arguments.  */"}, {"sha": "fe46d987faab657b7d5c2c55a4c637b5bb996070", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa204d511859e4859cbe35a867ac407addb4ff54/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa204d511859e4859cbe35a867ac407addb4ff54/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=aa204d511859e4859cbe35a867ac407addb4ff54", "patch": "@@ -5201,7 +5201,7 @@ gimple_fold_mask_load_store_mem_ref (gcall *call, tree vectype)\n   if (!tree_fits_uhwi_p (alias_align) || !integer_all_onesp (mask))\n     return NULL_TREE;\n \n-  unsigned HOST_WIDE_INT align = tree_to_uhwi (alias_align) * BITS_PER_UNIT;\n+  unsigned HOST_WIDE_INT align = tree_to_uhwi (alias_align);\n   if (TYPE_ALIGN (vectype) != align)\n     vectype = build_aligned_type (vectype, align);\n   tree offset = build_zero_cst (TREE_TYPE (alias_align));"}, {"sha": "6a56dab095722b01d912416352df17f0d91dfd27", "filename": "gcc/testsuite/g++.dg/vect/pr95401.cc", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa204d511859e4859cbe35a867ac407addb4ff54/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr95401.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa204d511859e4859cbe35a867ac407addb4ff54/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr95401.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr95401.cc?ref=aa204d511859e4859cbe35a867ac407addb4ff54", "patch": "@@ -0,0 +1,13 @@\n+// { dg-additional-options \"-mavx2 -O3\" { target avx2_runtime } }\n+// { dg-additional-sources pr95401a.cc }\n+\n+extern int var_9;\n+extern unsigned var_14;\n+extern int arr_16[];\n+#include <algorithm>\n+void test() {\n+  for (short a = 0; a < (short)var_9; a += 12140)\n+    for (short b = 0; b < 8; b++)\n+      if (std::max(var_14, 1U))\n+        arr_16[a + b] = 0;\n+}"}, {"sha": "71b054c762185204bb3e7a213bba5ca978a5af7f", "filename": "gcc/testsuite/g++.dg/vect/pr95401a.cc", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa204d511859e4859cbe35a867ac407addb4ff54/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr95401a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa204d511859e4859cbe35a867ac407addb4ff54/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr95401a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr95401a.cc?ref=aa204d511859e4859cbe35a867ac407addb4ff54", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+\n+#include \"../../gcc.dg/vect/tree-vect.h\"\n+\n+int var_9 = 1693986256, var_14;\n+int arr_16[11];\n+void test();\n+int main()\n+{\n+  check_vect();\n+  test();\n+  return 0;\n+}"}, {"sha": "014f1aff4c1bbda55c431635f72e0382ff77401e", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa204d511859e4859cbe35a867ac407addb4ff54/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa204d511859e4859cbe35a867ac407addb4ff54/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=aa204d511859e4859cbe35a867ac407addb4ff54", "patch": "@@ -7964,7 +7964,7 @@ vectorizable_store (vec_info *vinfo,\n \t      /* Emit:\n \t\t   MASK_STORE_LANES (DATAREF_PTR, ALIAS_PTR, VEC_MASK,\n \t\t\t\t     VEC_ARRAY).  */\n-\t      unsigned int align = TYPE_ALIGN_UNIT (TREE_TYPE (vectype));\n+\t      unsigned int align = TYPE_ALIGN (TREE_TYPE (vectype));\n \t      tree alias_ptr = build_int_cst (ref_type, align);\n \t      call = gimple_build_call_internal (IFN_MASK_STORE_LANES, 4,\n \t\t\t\t\t\t dataref_ptr, alias_ptr,\n@@ -8079,7 +8079,7 @@ vectorizable_store (vec_info *vinfo,\n \t      if (final_mask)\n \t\t{\n \t\t  align = least_bit_hwi (misalign | align);\n-\t\t  tree ptr = build_int_cst (ref_type, align);\n+\t\t  tree ptr = build_int_cst (ref_type, align * BITS_PER_UNIT);\n \t\t  gcall *call\n \t\t    = gimple_build_call_internal (IFN_MASK_STORE, 4,\n \t\t\t\t\t\t  dataref_ptr, ptr,\n@@ -8094,7 +8094,7 @@ vectorizable_store (vec_info *vinfo,\n \t\t    = vect_get_loop_len (loop_vinfo, loop_lens,\n \t\t\t\t\t vec_num * ncopies, vec_num * j + i);\n \t\t  align = least_bit_hwi (misalign | align);\n-\t\t  tree ptr = build_int_cst (ref_type, align);\n+\t\t  tree ptr = build_int_cst (ref_type, align * BITS_PER_UNIT);\n \t\t  machine_mode vmode = TYPE_MODE (vectype);\n \t\t  opt_machine_mode new_ovmode\n \t\t    = get_len_load_store_mode (vmode, false);\n@@ -9246,7 +9246,7 @@ vectorizable_load (vec_info *vinfo,\n \t      /* Emit:\n \t\t   VEC_ARRAY = MASK_LOAD_LANES (DATAREF_PTR, ALIAS_PTR,\n \t\t                                VEC_MASK).  */\n-\t      unsigned int align = TYPE_ALIGN_UNIT (TREE_TYPE (vectype));\n+\t      unsigned int align = TYPE_ALIGN (TREE_TYPE (vectype));\n \t      tree alias_ptr = build_int_cst (ref_type, align);\n \t      call = gimple_build_call_internal (IFN_MASK_LOAD_LANES, 3,\n \t\t\t\t\t\t dataref_ptr, alias_ptr,\n@@ -9347,7 +9347,8 @@ vectorizable_load (vec_info *vinfo,\n \t\t    if (final_mask)\n \t\t      {\n \t\t\talign = least_bit_hwi (misalign | align);\n-\t\t\ttree ptr = build_int_cst (ref_type, align);\n+\t\t\ttree ptr = build_int_cst (ref_type,\n+\t\t\t\t\t\t  align * BITS_PER_UNIT);\n \t\t\tgcall *call\n \t\t\t  = gimple_build_call_internal (IFN_MASK_LOAD, 3,\n \t\t\t\t\t\t\tdataref_ptr, ptr,\n@@ -9363,7 +9364,8 @@ vectorizable_load (vec_info *vinfo,\n \t\t\t\t\t       vec_num * ncopies,\n \t\t\t\t\t       vec_num * j + i);\n \t\t\talign = least_bit_hwi (misalign | align);\n-\t\t\ttree ptr = build_int_cst (ref_type, align);\n+\t\t\ttree ptr = build_int_cst (ref_type,\n+\t\t\t\t\t\t  align * BITS_PER_UNIT);\n \t\t\tgcall *call\n \t\t\t  = gimple_build_call_internal (IFN_LEN_LOAD, 3,\n \t\t\t\t\t\t\tdataref_ptr, ptr,"}]}