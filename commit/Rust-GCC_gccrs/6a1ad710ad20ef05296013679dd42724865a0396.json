{"sha": "6a1ad710ad20ef05296013679dd42724865a0396", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmExYWQ3MTBhZDIwZWYwNTI5NjAxMzY3OWRkNDI3MjQ4NjVhMDM5Ng==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-04T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-04T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "794c5dfc620701d837f6386e53dfd146ba4fd7bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/794c5dfc620701d837f6386e53dfd146ba4fd7bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a1ad710ad20ef05296013679dd42724865a0396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1ad710ad20ef05296013679dd42724865a0396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1ad710ad20ef05296013679dd42724865a0396", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1ad710ad20ef05296013679dd42724865a0396/comments", "author": null, "committer": null, "parents": [{"sha": "49edfe6d716b50994edc67d16f77d5274a1aabf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49edfe6d716b50994edc67d16f77d5274a1aabf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49edfe6d716b50994edc67d16f77d5274a1aabf5"}], "stats": {"total": 627, "additions": 626, "deletions": 1}, "files": [{"sha": "b834a2c473aadba1e79d40d92730bcfc17cff053", "filename": "gcc/ChangeLog", "status": "modified", "additions": 458, "deletions": 0, "changes": 458, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,461 @@\n+2020-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/cpp.texi (Variadic Macros): Use the exact ... token in\n+\tcode examples.\n+\n+2020-08-03  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* doc/invoke.texi: Refer to c++20\n+\n+2020-08-03  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gimplify.c (gimplify_omp_target_update): Allow GOMP_MAP_TO_PSET\n+\twithout a preceding data-movement mapping.\n+\n+2020-08-03  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.h (ASM_DECLARE_FUNCTION_NAME): UNDEF before\n+\tuse.\n+\t(DEF_MIN_OSX_VERSION): Only define if there's no existing\n+\tdef.\n+\n+2020-08-03  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.c (IN_TARGET_CODE): Remove.\n+\t(darwin_mergeable_constant_section): Handle poly-int machine modes.\n+\t(machopic_select_rtx_section): Likewise.\n+\n+2020-08-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/96430\n+\t* range-op.cc (operator_tests): Do not shift by 31 on targets with\n+\tinteger's smaller than 32 bits.\n+\n+2020-08-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* hsa-brig-format.h: Moved to brig/brigfrontend.\n+\t* hsa-brig.c: Removed.\n+\t* hsa-builtins.def: Likewise.\n+\t* hsa-common.c: Likewise.\n+\t* hsa-common.h: Likewise.\n+\t* hsa-dump.c: Likewise.\n+\t* hsa-gen.c: Likewise.\n+\t* hsa-regalloc.c: Likewise.\n+\t* ipa-hsa.c: Likewise.\n+\t* omp-grid.c: Likewise.\n+\t* omp-grid.h: Likewise.\n+\t* Makefile.in (BUILTINS_DEF): Remove hsa-builtins.def.\n+\t(OBJS): Remove hsa-common.o, hsa-gen.o, hsa-regalloc.o, hsa-brig.o,\n+\thsa-dump.o, ipa-hsa.c and omp-grid.o.\n+\t(GTFILES): Removed hsa-common.c and omp-expand.c.\n+\t* builtins.def: Remove processing of hsa-builtins.def.\n+\t(DEF_HSA_BUILTIN): Remove.\n+\t* common.opt (flag_disable_hsa): Remove.\n+\t(-Whsa): Ignore.\n+\t* config.in (ENABLE_HSA): Removed.\n+\t* configure.ac: Removed handling configuration for hsa offloading.\n+\t(ENABLE_HSA): Removed.\n+\t* configure: Regenerated.\n+\t* doc/install.texi (--enable-offload-targets): Remove hsa from the\n+\texample.\n+\t(--with-hsa-runtime): Reword to reference any HSA run-time, not\n+\tspecifically HSA offloading.\n+\t* doc/invoke.texi (Option Summary): Remove -Whsa.\n+\t(Warning Options): Likewise.\n+\t(Optimize Options): Remove hsa-gen-debug-stores.\n+\t* doc/passes.texi (Regular IPA passes): Remove section on IPA HSA\n+\tpass.\n+\t* gimple-low.c (lower_stmt): Remove GIMPLE_OMP_GRID_BODY case.\n+\t* gimple-pretty-print.c (dump_gimple_omp_for): Likewise.\n+\t(dump_gimple_omp_block): Likewise.\n+\t(pp_gimple_stmt_1): Likewise.\n+\t* gimple-walk.c (walk_gimple_stmt): Likewise.\n+\t* gimple.c (gimple_build_omp_grid_body): Removed function.\n+\t(gimple_copy): Remove GIMPLE_OMP_GRID_BODY case.\n+\t* gimple.def (GIMPLE_OMP_GRID_BODY): Removed.\n+\t* gimple.h (gf_mask): Removed GF_OMP_PARALLEL_GRID_PHONY,\n+\tOMP_FOR_KIND_GRID_LOOP, GF_OMP_FOR_GRID_PHONY,\n+\tGF_OMP_FOR_GRID_INTRA_GROUP, GF_OMP_FOR_GRID_GROUP_ITER and\n+\tGF_OMP_TEAMS_GRID_PHONY.  Renumbered GF_OMP_FOR_KIND_SIMD and\n+\tGF_OMP_TEAMS_HOST.\n+\t(gimple_build_omp_grid_body): Removed declaration.\n+\t(gimple_has_substatements): Remove GIMPLE_OMP_GRID_BODY case.\n+\t(gimple_omp_for_grid_phony): Removed.\n+\t(gimple_omp_for_set_grid_phony): Likewise.\n+\t(gimple_omp_for_grid_intra_group): Likewise.\n+\t(gimple_omp_for_grid_intra_group): Likewise.\n+\t(gimple_omp_for_grid_group_iter): Likewise.\n+\t(gimple_omp_for_set_grid_group_iter): Likewise.\n+\t(gimple_omp_parallel_grid_phony): Likewise.\n+\t(gimple_omp_parallel_set_grid_phony): Likewise.\n+\t(gimple_omp_teams_grid_phony): Likewise.\n+\t(gimple_omp_teams_set_grid_phony): Likewise.\n+\t(CASE_GIMPLE_OMP): Remove GIMPLE_OMP_GRID_BODY case.\n+\t* lto-section-in.c (lto_section_name): Removed hsa.\n+\t* lto-streamer.h (lto_section_type): Removed LTO_section_ipa_hsa.\n+\t* lto-wrapper.c (compile_images_for_offload_targets): Remove special\n+\thandling of hsa.\n+\t* omp-expand.c: Do not include hsa-common.h and gt-omp-expand.h.\n+\t(parallel_needs_hsa_kernel_p): Removed.\n+\t(grid_launch_attributes_trees): Likewise.\n+\t(grid_launch_attributes_trees): Likewise.\n+\t(grid_create_kernel_launch_attr_types): Likewise.\n+\t(grid_insert_store_range_dim): Likewise.\n+\t(grid_get_kernel_launch_attributes): Likewise.\n+\t(get_target_arguments): Remove code passing HSA grid sizes.\n+\t(grid_expand_omp_for_loop): Remove.\n+\t(grid_arg_decl_map): Likewise.\n+\t(grid_remap_kernel_arg_accesses): Likewise.\n+\t(grid_expand_target_grid_body): Likewise.\n+\t(expand_omp): Remove call to grid_expand_target_grid_body.\n+\t(omp_make_gimple_edges): Remove GIMPLE_OMP_GRID_BODY case.\n+\t* omp-general.c: Do not include hsa-common.h.\n+\t(omp_maybe_offloaded): Do not check for HSA offloading.\n+\t(omp_context_selector_matches): Likewise.\n+\t* omp-low.c: Do not include hsa-common.h and omp-grid.h.\n+\t(build_outer_var_ref): Remove handling of GIMPLE_OMP_GRID_BODY.\n+\t(scan_sharing_clauses): Remove handling of OMP_CLAUSE__GRIDDIM_.\n+\t(scan_omp_parallel): Remove handling of the phoney variant.\n+\t(check_omp_nesting_restrictions): Remove handling of\n+\tGIMPLE_OMP_GRID_BODY and GF_OMP_FOR_KIND_GRID_LOOP.\n+\t(scan_omp_1_stmt): Remove handling of GIMPLE_OMP_GRID_BODY.\n+\t(lower_omp_for_lastprivate): Remove handling of gridified loops.\n+\t(lower_omp_for): Remove phony loop handling.\n+\t(lower_omp_taskreg): Remove phony construct handling.\n+\t(lower_omp_teams): Likewise.\n+\t(lower_omp_grid_body): Removed.\n+\t(lower_omp_1): Remove GIMPLE_OMP_GRID_BODY case.\n+\t(execute_lower_omp): Do not call omp_grid_gridify_all_targets.\n+\t* opts.c (common_handle_option): Do not handle hsa when processing\n+\tOPT_foffload_.\n+\t* params.opt (hsa-gen-debug-stores): Remove.\n+\t* passes.def: Remove pass_ipa_hsa and pass_gen_hsail.\n+\t* timevar.def: Remove TV_IPA_HSA.\n+\t* toplev.c: Do not include hsa-common.h.\n+\t(compile_file): Do not call hsa_output_brig.\n+\t* tree-core.h (enum omp_clause_code): Remove OMP_CLAUSE__GRIDDIM_.\n+\t(tree_omp_clause): Remove union field dimension.\n+\t* tree-nested.c (convert_nonlocal_omp_clauses): Remove the\n+\tOMP_CLAUSE__GRIDDIM_ case.\n+\t(convert_local_omp_clauses): Likewise.\n+\t* tree-pass.h (make_pass_gen_hsail): Remove declaration.\n+\t(make_pass_ipa_hsa): Likewise.\n+\t* tree-pretty-print.c (dump_omp_clause): Remove GIMPLE_OMP_GRID_BODY\n+\tcase.\n+\t* tree.c (omp_clause_num_ops): Remove the element corresponding to\n+\tOMP_CLAUSE__GRIDDIM_.\n+\t(omp_clause_code_name): Likewise.\n+\t(walk_tree_1): Remove GIMPLE_OMP_GRID_BODY case.\n+\t* tree.h (OMP_CLAUSE__GRIDDIM__DIMENSION): Remove.\n+\t(OMP_CLAUSE__GRIDDIM__SIZE): Likewise.\n+\t(OMP_CLAUSE__GRIDDIM__GROUP): Likewise.\n+\n+2020-08-03  Bu Le  <bule1@huawei.com>\n+\n+\t* config/aarch64/aarch64-sve.md (sub<mode>3): Add support for\n+\tunpacked vectors.\n+\n+2020-08-03  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.h (ASM_SPEC): Don't pass on \"-md\" option.\n+\n+2020-08-03  Yunde Zhong  <zhongyunde@huawei.com>\n+\n+\tPR rtl-optimization/95696\n+\t* regrename.c (regrename_analyze): New param include_all_block_p\n+\twith default value TRUE.  If set to false, avoid disrupting SMS\n+\tschedule.\n+\t* regrename.h (regrename_analyze): Adjust prototype.\n+\n+2020-08-03  Wei Wentao  <weiwt.fnst@cn.fujitsu.com>\n+\n+\t* doc/tm.texi.in (VECTOR_STORE_FLAG_VALUE): Fix a typo.\n+\t* doc/tm.texi: Regenerate.\n+\n+2020-08-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/invoke.texi: Add missing comma after octeontx2f95mm entry.\n+\n+2020-08-03  Qian jianhua  <qianjh@cn.fujitsu.com>\n+\n+\t* config/aarch64/aarch64-cores.def (a64fx): New core.\n+\t* config/aarch64/aarch64-tune.md: Regenerated.\n+\t* config/aarch64/aarch64.c (a64fx_prefetch_tune, a64fx_tunings): New.\n+\t* doc/invoke.texi: Add a64fx to the list.\n+\n+2020-08-03  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/61494\n+\t* simplify-rtx.c (simplify_binary_operation_1) [MINUS]: Don't\n+\tsimplify x - 0.0 with -fsignaling-nans.\n+\n+2020-08-03  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* genmatch.c (decision_tree::gen): Emit stub functions for\n+\ttree code operand counts that have no simplifications.\n+\t(main): Correct comment typo.\n+\n+2020-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* gimple-ssa-sprintf.c: Fix typos in comments.\n+\n+2020-08-03  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/driver-aarch64.c (readline): Check return value fgets.\n+\n+2020-08-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/match-and-simplify.texi: Amend accordingly.\n+\n+2020-08-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (parser::gimple): New.\n+\t(parser::parser): Initialize gimple flag member.\n+\t(parser::parse_expr): Error on ! operator modifier when\n+\tnot targeting GIMPLE.\n+\t(main): Pass down gimple flag to parser ctor.\n+\n+2020-08-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* Makefile.in (GTFILES): Move value-range.h up.\n+\t* gengtype-lex.l: Set yylval to handle GTY markers on templates.\n+\t* ipa-cp.c (initialize_node_lattices): Call value_range\n+\tconstructor.\n+\t(ipcp_propagate_stage): Use in-place new so value_range construct\n+\tis called.\n+\t* ipa-fnsummary.c (evaluate_conditions_for_known_args): Use std\n+\tvec instead of GCC's vec<>.\n+\t(evaluate_properties_for_edge): Adjust for std vec.\n+\t(ipa_fn_summary_t::duplicate): Same.\n+\t(estimate_ipcp_clone_size_and_time): Same.\n+\t* ipa-prop.c (ipa_get_value_range): Use in-place new for\n+\tvalue_range.\n+\t* ipa-prop.h (struct GTY): Remove class keyword for m_vr.\n+\t* range-op.cc (empty_range_check): Rename to...\n+\t(empty_range_varying): ...this and adjust for varying.\n+\t(undefined_shift_range_check): Adjust for irange.\n+\t(range_operator::wi_fold): Same.\n+\t(range_operator::fold_range): Adjust for irange.  Special case\n+\tsingle pairs for performance.\n+\t(range_operator::op1_range): Adjust for irange.\n+\t(range_operator::op2_range): Same.\n+\t(value_range_from_overflowed_bounds): Same.\n+\t(value_range_with_overflow): Same.\n+\t(create_possibly_reversed_range): Same.\n+\t(range_true): Same.\n+\t(range_false): Same.\n+\t(range_true_and_false): Same.\n+\t(get_bool_state):  Adjust for irange and tweak for performance.\n+\t(operator_equal::fold_range): Adjust for irange.\n+\t(operator_equal::op1_range): Same.\n+\t(operator_equal::op2_range): Same.\n+\t(operator_not_equal::fold_range): Same.\n+\t(operator_not_equal::op1_range): Same.\n+\t(operator_not_equal::op2_range): Same.\n+\t(build_lt): Same.\n+\t(build_le): Same.\n+\t(build_gt): Same.\n+\t(build_ge): Same.\n+\t(operator_lt::fold_range): Same.\n+\t(operator_lt::op1_range): Same.\n+\t(operator_lt::op2_range): Same.\n+\t(operator_le::fold_range): Same.\n+\t(operator_le::op1_range): Same.\n+\t(operator_le::op2_range): Same.\n+\t(operator_gt::fold_range): Same.\n+\t(operator_gt::op1_range): Same.\n+\t(operator_gt::op2_range): Same.\n+\t(operator_ge::fold_range): Same.\n+\t(operator_ge::op1_range): Same.\n+\t(operator_ge::op2_range): Same.\n+\t(operator_plus::wi_fold): Same.\n+\t(operator_plus::op1_range): Same.\n+\t(operator_plus::op2_range): Same.\n+\t(operator_minus::wi_fold): Same.\n+\t(operator_minus::op1_range): Same.\n+\t(operator_minus::op2_range): Same.\n+\t(operator_min::wi_fold): Same.\n+\t(operator_max::wi_fold): Same.\n+\t(cross_product_operator::wi_cross_product): Same.\n+\t(operator_mult::op1_range): New.\n+\t(operator_mult::op2_range): New.\n+\t(operator_mult::wi_fold): Adjust for irange.\n+\t(operator_div::wi_fold): Same.\n+\t(operator_exact_divide::op1_range): Same.\n+\t(operator_lshift::fold_range): Same.\n+\t(operator_lshift::wi_fold): Same.\n+\t(operator_lshift::op1_range): New.\n+\t(operator_rshift::op1_range): New.\n+\t(operator_rshift::fold_range): Adjust for irange.\n+\t(operator_rshift::wi_fold): Same.\n+\t(operator_cast::truncating_cast_p): Abstract out from\n+\toperator_cast::fold_range.\n+\t(operator_cast::fold_range): Adjust for irange and tweak for\n+\tperformance.\n+\t(operator_cast::inside_domain_p): Abstract out from fold_range.\n+\t(operator_cast::fold_pair): Same.\n+\t(operator_cast::op1_range): Use abstracted methods above.  Adjust\n+\tfor irange and tweak for performance.\n+\t(operator_logical_and::fold_range): Adjust for irange.\n+\t(operator_logical_and::op1_range): Same.\n+\t(operator_logical_and::op2_range): Same.\n+\t(unsigned_singleton_p): New.\n+\t(operator_bitwise_and::remove_impossible_ranges): New.\n+\t(operator_bitwise_and::fold_range): New.\n+\t(wi_optimize_and_or):  Adjust for irange.\n+\t(operator_bitwise_and::wi_fold): Same.\n+\t(set_nonzero_range_from_mask): New.\n+\t(operator_bitwise_and::simple_op1_range_solver): New.\n+\t(operator_bitwise_and::op1_range): Adjust for irange.\n+\t(operator_bitwise_and::op2_range): Same.\n+\t(operator_logical_or::fold_range): Same.\n+\t(operator_logical_or::op1_range): Same.\n+\t(operator_logical_or::op2_range): Same.\n+\t(operator_bitwise_or::wi_fold): Same.\n+\t(operator_bitwise_or::op1_range): Same.\n+\t(operator_bitwise_or::op2_range): Same.\n+\t(operator_bitwise_xor::wi_fold): Same.\n+\t(operator_bitwise_xor::op1_range): New.\n+\t(operator_bitwise_xor::op2_range): New.\n+\t(operator_trunc_mod::wi_fold):  Adjust for irange.\n+\t(operator_logical_not::fold_range): Same.\n+\t(operator_logical_not::op1_range): Same.\n+\t(operator_bitwise_not::fold_range): Same.\n+\t(operator_bitwise_not::op1_range): Same.\n+\t(operator_cst::fold_range): Same.\n+\t(operator_identity::fold_range): Same.\n+\t(operator_identity::op1_range): Same.\n+\t(class operator_unknown): New.\n+\t(operator_unknown::fold_range): New.\n+\t(class operator_abs): Adjust for irange.\n+\t(operator_abs::wi_fold): Same.\n+\t(operator_abs::op1_range): Same.\n+\t(operator_absu::wi_fold): Same.\n+\t(class operator_negate): Same.\n+\t(operator_negate::fold_range): Same.\n+\t(operator_negate::op1_range): Same.\n+\t(operator_addr_expr::fold_range): Same.\n+\t(operator_addr_expr::op1_range): Same.\n+\t(pointer_plus_operator::wi_fold): Same.\n+\t(pointer_min_max_operator::wi_fold): Same.\n+\t(pointer_and_operator::wi_fold): Same.\n+\t(pointer_or_operator::op1_range): New.\n+\t(pointer_or_operator::op2_range): New.\n+\t(pointer_or_operator::wi_fold):  Adjust for irange.\n+\t(integral_table::integral_table): Add entries for IMAGPART_EXPR\n+\tand POINTER_DIFF_EXPR.\n+\t(range_cast):  Adjust for irange.\n+\t(build_range3): New.\n+\t(range3_tests): New.\n+\t(widest_irange_tests): New.\n+\t(multi_precision_range_tests): New.\n+\t(operator_tests): New.\n+\t(range_tests): New.\n+\t* range-op.h (class range_operator): Adjust for irange.\n+\t(range_cast): Same.\n+\t* tree-vrp.c (range_fold_binary_symbolics_p): Adjust for irange and\n+\ttweak for performance.\n+\t(range_fold_binary_expr): Same.\n+\t(masked_increment): Change to extern.\n+\t* tree-vrp.h (masked_increment): New.\n+\t* tree.c (cache_wide_int_in_type_cache): New function abstracted\n+\tout from wide_int_to_tree_1.\n+\t(wide_int_to_tree_1): Cache 0, 1, and MAX for pointers.\n+\t* value-range-equiv.cc (value_range_equiv::deep_copy): Use kind\n+\tmethod.\n+\t(value_range_equiv::move): Same.\n+\t(value_range_equiv::check): Adjust for irange.\n+\t(value_range_equiv::intersect): Same.\n+\t(value_range_equiv::union_): Same.\n+\t(value_range_equiv::dump): Same.\n+\t* value-range.cc (irange::operator=): Same.\n+\t(irange::maybe_anti_range): New.\n+\t(irange::copy_legacy_range): New.\n+\t(irange::set_undefined): Adjust for irange.\n+\t(irange::swap_out_of_order_endpoints): Abstract out from set().\n+\t(irange::set_varying): Adjust for irange.\n+\t(irange::irange_set): New.\n+\t(irange::irange_set_anti_range): New.\n+\t(irange::set): Adjust for irange.\n+\t(value_range::set_nonzero): Move to header file.\n+\t(value_range::set_zero): Move to header file.\n+\t(value_range::check): Rename to...\n+\t(irange::verify_range): ...this.\n+\t(value_range::num_pairs): Rename to...\n+\t(irange::legacy_num_pairs): ...this, and adjust for irange.\n+\t(value_range::lower_bound): Rename to...\n+\t(irange::legacy_lower_bound): ...this, and adjust for irange.\n+\t(value_range::upper_bound): Rename to...\n+\t(irange::legacy_upper_bound): ...this, and adjust for irange.\n+\t(value_range::equal_p): Rename to...\n+\t(irange::legacy_equal_p): ...this.\n+\t(value_range::operator==): Move to header file.\n+\t(irange::equal_p): New.\n+\t(irange::symbolic_p): Adjust for irange.\n+\t(irange::constant_p): Same.\n+\t(irange::singleton_p): Same.\n+\t(irange::value_inside_range): Same.\n+\t(irange::may_contain_p): Same.\n+\t(irange::contains_p): Same.\n+\t(irange::normalize_addresses): Same.\n+\t(irange::normalize_symbolics): Same.\n+\t(irange::legacy_intersect): Same.\n+\t(irange::legacy_union): Same.\n+\t(irange::union_): Same.\n+\t(irange::intersect): Same.\n+\t(irange::irange_union): New.\n+\t(irange::irange_intersect): New.\n+\t(subtract_one): New.\n+\t(irange::invert): Adjust for irange.\n+\t(dump_bound_with_infinite_markers): New.\n+\t(irange::dump): Adjust for irange.\n+\t(debug): Add irange versions.\n+\t(range_has_numeric_bounds_p): Adjust for irange.\n+\t(vrp_val_max): Move to header file.\n+\t(vrp_val_min): Move to header file.\n+\t(DEFINE_INT_RANGE_GC_STUBS): New.\n+\t(DEFINE_INT_RANGE_INSTANCE): New.\n+\t* value-range.h (class irange): New.\n+\t(class int_range): New.\n+\t(class value_range): Rename to a instantiation of int_range.\n+\t(irange::legacy_mode_p): New.\n+\t(value_range::value_range): Remove.\n+\t(irange::kind): New.\n+\t(irange::num_pairs): Adjust for irange.\n+\t(irange::type): Adjust for irange.\n+\t(irange::tree_lower_bound): New.\n+\t(irange::tree_upper_bound): New.\n+\t(irange::type): Adjust for irange.\n+\t(irange::min): Same.\n+\t(irange::max): Same.\n+\t(irange::varying_p): Same.\n+\t(irange::undefined_p): Same.\n+\t(irange::zero_p): Same.\n+\t(irange::nonzero_p): Same.\n+\t(irange::supports_type_p): Same.\n+\t(range_includes_zero_p): Same.\n+\t(gt_ggc_mx): New.\n+\t(gt_pch_nx): New.\n+\t(irange::irange): New.\n+\t(int_range::int_range): New.\n+\t(int_range::operator=): New.\n+\t(irange::set): Moved from value-range.cc and adjusted for irange.\n+\t(irange::set_undefined): Same.\n+\t(irange::set_varying): Same.\n+\t(irange::operator==): Same.\n+\t(irange::lower_bound): Same.\n+\t(irange::upper_bound): Same.\n+\t(irange::union_): Same.\n+\t(irange::intersect): Same.\n+\t(irange::set_nonzero): Same.\n+\t(irange::set_zero): Same.\n+\t(irange::normalize_min_max): New.\n+\t(vrp_val_max): Move from value-range.cc.\n+\t(vrp_val_min): Same.\n+\t* vr-values.c (vr_values::get_lattice_entry): Call value_range\n+\tconstructor.\n+\n 2020-08-02  Sergei Trofimovich  <siarheit@google.com>\n \n \tPR bootstrap/96404"}, {"sha": "f01da8770ae83552eee2c077653b360b1268158d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1 +1 @@\n-20200803\n+20200804"}, {"sha": "b8fefa56d41d898ce613136c463aaa5e1a8fd9ad", "filename": "gcc/brig/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2Fbrig%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2Fbrig%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,10 @@\n+2020-08-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* brigfrontend/brig-util.h (hsa_type_packed_p): Declared.\n+\t* brigfrontend/brig-util.cc (hsa_type_packed_p): Moved here from\n+\tremoved gcc/hsa-common.c.\n+\t* brigfrontend/hsa-brig-format.h: New file.\n+\n 2020-01-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "607bed66c2753015d4a63124502a3e21bb8bcf00", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,14 @@\n+2020-08-03  Marek Polacek  <polacek@redhat.com>\n+\n+\t* cp-tree.h (after_nsdmi_defaulted_late_checks): Remove.\n+\n+2020-08-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 2032\n+\tPR c++/96218\n+\t* pt.c (check_default_tmpl_args): Also consider variable\n+\ttemplates.\n+\n 2020-07-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/96182"}, {"sha": "fa3e249f60887361087e4ea2503a5a6edeb8a3f7", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,17 @@\n+2020-08-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96254\n+\t* d-codegen.cc (error_no_frame_access): New.\n+\t(get_frame_for_symbol): Use fdparent name in error message.\n+\t(get_framedecl): Replace call to assert with error.\n+\t* d-tree.h (error_no_frame_access): Declare.\n+\t* decl.cc (get_decl_tree): Detect recursion and error.\n+\n+2020-08-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96250\n+\t* dmd/MERGE: Merge upstream dmd c2274e56a.\n+\n 2020-07-31  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/96393"}, {"sha": "3aefbe3b40790e8dbc418f3b0d44c45a128eae1b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,21 @@\n+2020-08-03  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Don't create present/release\n+\tmappings for array descriptors.\n+\n+2020-08-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions): Remove processing of\n+\thsa-builtins.def.\n+\n+2020-08-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfc-internals.texi: Fix typos.\n+\t* gfortran.texi: Likewise.\n+\t* intrinsic.texi: Likewise.\n+\t* invoke.texi: Likewise.\n+\n 2020-08-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR target/96320"}, {"sha": "b6264497642fa1d6b90b87eff41c52a7b8af83b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,48 @@\n+2020-08-03  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.target/powerpc/vector_float.c: Skip if not lp64.\n+\n+2020-08-03  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 2032\n+\tPR c++/96218\n+\t* g++.dg/cpp1y/var-templ67.C: New test.\n+\n+2020-08-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96402\n+\t* gcc.target/aarch64/pr96402.c: New test.\n+\n+2020-08-03  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/attach-descriptor.f90: Update pattern output. Add\n+\tscanning of gimplify dump.\n+\n+2020-08-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* lib/target-supports.exp (check_effective_target_offload_hsa):\n+\tRemoved.\n+\t* c-c++-common/gomp/gridify-1.c: Removed test.\n+\t* c-c++-common/gomp/gridify-2.c: Likewise.\n+\t* c-c++-common/gomp/gridify-3.c: Likewise.\n+\t* c-c++-common/gomp/hsa-indirect-call-1.c: Likewise.\n+\t* gfortran.dg/gomp/gridify-1.f90: Likewise.\n+\t* gcc.dg/gomp/gomp.exp: Do not pass -Wno-hsa to tests.\n+\t* g++.dg/gomp/gomp.exp: Likewise.\n+\t* gfortran.dg/gomp/gomp.exp: Likewise.\n+\n+2020-08-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/pr96377-1.c: Add -Wno-psabi.\n+\t* gcc.dg/pr96377-2.c: Likewise.\n+\n+2020-08-03  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/96254\n+\t* gdc.dg/pr96254a.d: New test.\n+\t* gdc.dg/pr96254b.d: New test.\n+\n 2020-08-02  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR target/96320"}, {"sha": "89151e7c94bb9242c157077fc37876e6f6f29dd6", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,7 @@\n+2020-08-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gomp-constants.h (GOMP_VERSION_HSA): Remove.\n+\n 2020-07-09  Julian Brown  <julian@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "01c5b50351ebe14575a830ea96f9ef1ec3451252", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,13 @@\n+2020-08-03  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* config/i386/morestack.S (BACKOFF) [x86_64]: Add 2048 bytes.\n+\n+2020-08-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/96402\n+\t* config/aarch64/lse.S (__aarch64_cas16_acq_rel): Use x2, x3 instead\n+\tof x(tmp0), x(tmp1) in STXP arguments.\n+\n 2020-07-31  Maciej W. Rozycki  <macro@wdc.com>\n \n \t* config/riscv/save-restore.S [__riscv_xlen == 64]"}, {"sha": "ee78d806fae728d007c9c76a69316601b2ae178f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,7 @@\n+2020-08-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* caf/single.c (_gfortran_caf_lock): Fix typo.\n+\n 2020-07-26  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR target/96306"}, {"sha": "fc67dc4ccafdb4ac40941a3263239e6591ada905", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,50 @@\n+2020-08-03  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/attach-descriptor-1.f90: Don't run for\n+\tshared-memory devices.  Extend with further checking.\n+\n+2020-08-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* plugin/Makefrag.am: Remove configuration of HSA plugin.\n+\t* aclocal.m4: Regenerated.\n+\t* Makefile.in: Regenerated.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* plugin/configfrag.ac: Likewise.\n+\t* plugin/hsa_ext_finalize.h: Removed.\n+\t* plugin/plugin-hsa.c: Likewise.\n+\t* testsuite/Makefile.in: Regenerated.\n+\t* testsuite/lib/libgomp.exp\n+\t(offload_target_to_openacc_device_type): Remove hsa case.\n+\t(check_effective_target_hsa_offloading_selected_nocache): Removed\n+\t(check_effective_target_hsa_offloading_selected): Likewise.\n+\t(libgomp_init): Do not add -Wno-hsa to additional_flags.\n+\t* testsuite/libgomp.hsa.c/alloca-1.c: Removed test.\n+\t* testsuite/libgomp.hsa.c/bitfield-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/bits-insns.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/builtins-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/c.exp: Likewise.\n+\t* testsuite/libgomp.hsa.c/complex-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/complex-align-2.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/formal-actual-args-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/function-call-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/get-level-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/gridify-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/gridify-2.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/gridify-3.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/gridify-4.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/memory-operations-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/pr69568.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/pr82416.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/rotate-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/staticvar.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/switch-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/switch-branch-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/switch-sbr-2.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/tiling-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/tiling-2.c: Likewise.\n+\n 2020-07-27  Julian Brown  <julian@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>\n "}, {"sha": "5d22410b8d75c2500cbd227e2a5f380871729403", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a1ad710ad20ef05296013679dd42724865a0396/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a1ad710ad20ef05296013679dd42724865a0396/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=6a1ad710ad20ef05296013679dd42724865a0396", "patch": "@@ -1,3 +1,10 @@\n+2020-08-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/96385\n+\t* simple-object-elf.c\n+\t(simple_object_elf_copy_lto_debug_sections): Localize global\n+\tUNDEFs and reuse the prevailing name.\n+\n 2020-07-30  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR bootstrap/96202"}]}