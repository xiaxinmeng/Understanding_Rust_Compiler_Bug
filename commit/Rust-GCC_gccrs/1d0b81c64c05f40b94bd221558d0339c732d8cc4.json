{"sha": "1d0b81c64c05f40b94bd221558d0339c732d8cc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQwYjgxYzY0YzA1ZjQwYjk0YmQyMjE1NThkMDMzOWM3MzJkOGNjNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-06T12:38:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-06T12:38:35Z"}, "message": "re PR tree-optimization/90328 (Wrong loop distribution with aliasing)\n\n2019-05-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/90328\n\t* tree-data-ref.h (dr_may_alias_p): Pass in the actual loop nest.\n\t* tree-data-ref.c (dr_may_alias_p): Check whether the clique\n\tis valid in the loop nest before using it.\n\t(initialize_data_dependence_relation): Adjust.\n\t* graphite-scop-detection.c (build_alias_set): Pass the SCOP enclosing\n\tloop as loop-nest to dr_may_alias_p.\n\n\t* gcc.dg/torture/pr90328.c: New testcase.\n\nFrom-SVN: r270906", "tree": {"sha": "f8264b89d277701f04c4d39df3c9cfbbb60354bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8264b89d277701f04c4d39df3c9cfbbb60354bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d0b81c64c05f40b94bd221558d0339c732d8cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0b81c64c05f40b94bd221558d0339c732d8cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d0b81c64c05f40b94bd221558d0339c732d8cc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d0b81c64c05f40b94bd221558d0339c732d8cc4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b744fc85f549534bcbc36dedcc1659c02e16c617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b744fc85f549534bcbc36dedcc1659c02e16c617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b744fc85f549534bcbc36dedcc1659c02e16c617"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "b4424ddd40e3695163b539d76b754db168ce4a0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d0b81c64c05f40b94bd221558d0339c732d8cc4", "patch": "@@ -1,3 +1,13 @@\n+2019-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90328\n+\t* tree-data-ref.h (dr_may_alias_p): Pass in the actual loop nest.\n+\t* tree-data-ref.c (dr_may_alias_p): Check whether the clique\n+\tis valid in the loop nest before using it.\n+\t(initialize_data_dependence_relation): Adjust.\n+\t* graphite-scop-detection.c (build_alias_set): Pass the SCOP enclosing\n+\tloop as loop-nest to dr_may_alias_p.\n+\n 2019-05-06  Richard Biener  <rguenther@suse.de>\n \n \t* dwarf2out.c (mem_loc_descriptor): Initialize int_mode."}, {"sha": "4534d43721f466b497b18f7c1038bfc6803a2df5", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=1d0b81c64c05f40b94bd221558d0339c732d8cc4", "patch": "@@ -1417,9 +1417,13 @@ build_alias_set (scop_p scop)\n   int i, j;\n   int *all_vertices;\n \n+  struct loop *nest\n+    = find_common_loop (scop->scop_info->region.entry->dest->loop_father,\n+\t\t\tscop->scop_info->region.exit->src->loop_father);\n+\n   FOR_EACH_VEC_ELT (scop->drs, i, dr1)\n     for (j = i+1; scop->drs.iterate (j, &dr2); j++)\n-      if (dr_may_alias_p (dr1->dr, dr2->dr, true))\n+      if (dr_may_alias_p (dr1->dr, dr2->dr, nest))\n \t{\n \t  /* Dependences in the same alias set need to be handled\n \t     by just looking at DR_ACCESS_FNs.  */"}, {"sha": "2ad2c4ac4ce4689a3cf034cd6555049051183ad7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d0b81c64c05f40b94bd221558d0339c732d8cc4", "patch": "@@ -1,3 +1,8 @@\n+2019-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90328\n+\t* gcc.dg/torture/pr90328.c: New testcase.\n+\n 2019-05-06  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/90331"}, {"sha": "a70f3dd425e577213e0012220296c8a9b8df9bd1", "filename": "gcc/testsuite/gcc.dg/torture/pr90328.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr90328.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr90328.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr90328.c?ref=1d0b81c64c05f40b94bd221558d0339c732d8cc4", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+\n+void g(int*__restrict x, int*y)\n+{\n+  *x = *y;\n+}\n+\n+void __attribute__((noipa)) f(int* a,int* b)\n+{\n+  for(int i=0;i<1024;++i)\n+    g(a+i,b+i);\n+}\n+\n+int main()\n+{\n+  int x[1025];\n+  for (int i = 0; i < 1025; ++i)\n+    x[i] = i+1;\n+  f(x+1, x);\n+  for (int i = 0; i < 1025; ++i)\n+    if (x[i] != 1)\n+      __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "67b960d5c6d945d2b44f2a158fdc93c24eef3c09", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=1d0b81c64c05f40b94bd221558d0339c732d8cc4", "patch": "@@ -2231,7 +2231,7 @@ object_address_invariant_in_loop_p (const struct loop *loop, const_tree obj)\n \n bool\n dr_may_alias_p (const struct data_reference *a, const struct data_reference *b,\n-\t\tbool loop_nest)\n+\t\tstruct loop *loop_nest)\n {\n   tree addr_a = DR_BASE_OBJECT (a);\n   tree addr_b = DR_BASE_OBJECT (b);\n@@ -2255,6 +2255,11 @@ dr_may_alias_p (const struct data_reference *a, const struct data_reference *b,\n \n   if ((TREE_CODE (addr_a) == MEM_REF || TREE_CODE (addr_a) == TARGET_MEM_REF)\n       && (TREE_CODE (addr_b) == MEM_REF || TREE_CODE (addr_b) == TARGET_MEM_REF)\n+      /* For cross-iteration dependences the cliques must be valid for the\n+\t whole loop, not just individual iterations.  */\n+      && (!loop_nest\n+\t  || MR_DEPENDENCE_CLIQUE (addr_a) == 1\n+\t  || MR_DEPENDENCE_CLIQUE (addr_a) == loop_nest->owned_clique)\n       && MR_DEPENDENCE_CLIQUE (addr_a) == MR_DEPENDENCE_CLIQUE (addr_b)\n       && MR_DEPENDENCE_BASE (addr_a) != MR_DEPENDENCE_BASE (addr_b))\n     return false;\n@@ -2366,7 +2371,7 @@ initialize_data_dependence_relation (struct data_reference *a,\n     }\n \n   /* If the data references do not alias, then they are independent.  */\n-  if (!dr_may_alias_p (a, b, loop_nest.exists ()))\n+  if (!dr_may_alias_p (a, b, loop_nest.exists () ? loop_nest[0] : NULL))\n     {\n       DDR_ARE_DEPENDENT (res) = chrec_known;\n       return res;"}, {"sha": "69d5a82c56464678330fd1a36d9692185b65b38f", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d0b81c64c05f40b94bd221558d0339c732d8cc4/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=1d0b81c64c05f40b94bd221558d0339c732d8cc4", "patch": "@@ -473,7 +473,7 @@ dr_alignment (data_reference *dr)\n }\n \n extern bool dr_may_alias_p (const struct data_reference *,\n-\t\t\t    const struct data_reference *, bool);\n+\t\t\t    const struct data_reference *, struct loop *);\n extern bool dr_equal_offsets_p (struct data_reference *,\n                                 struct data_reference *);\n "}]}