{"sha": "0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU2MDMyMjNhMGI0NDA5YTgyZmU4ZGE4NzcxZmMyYjBhNGU5YjdjNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-07-11T01:23:07Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-07-11T01:23:07Z"}, "message": "re PR c/2454 (Test Program A0376972.c fails with gcc-20010320, works with gcc-2.95.3)\n\n\n\tPR c/2454\n\t* combine.c (nonzero_bits): LOAD_EXTEND_OP should only apply\n\tto SUBREGs of MEMs.  (num_sign_bit_copies): Likewise.\n\nFrom-SVN: r55386", "tree": {"sha": "7755403fe21485abda2eaeee63211a45a6b4c180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7755403fe21485abda2eaeee63211a45a6b4c180"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6/comments", "author": null, "committer": null, "parents": [{"sha": "c5358a5d4619e8a49b44295c70868f2f26a98462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5358a5d4619e8a49b44295c70868f2f26a98462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5358a5d4619e8a49b44295c70868f2f26a98462"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "b94e96be382c35fce12ca9397df83e917c1c8ca8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6", "patch": "@@ -1,3 +1,9 @@\n+2002-07-10  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c/2454\n+\t* combine.c (nonzero_bits): LOAD_EXTEND_OP should only apply\n+\tto SUBREGs of MEMs.  (num_sign_bit_copies): Likewise.\n+\n 2002-07-10  Roger Sayle  <roger@eyesopen.com>\n \t    Zack Weinberg <zack@codesourcery.com>\n "}, {"sha": "e7f22553062379cacad9f2dc25f0d9110b784e41", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0e603223a0b4409a82fe8da8771fc2b0a4e9b7c6", "patch": "@@ -8344,12 +8344,13 @@ nonzero_bits (x, mode)\n #if defined (WORD_REGISTER_OPERATIONS) && defined (LOAD_EXTEND_OP)\n \t  /* If this is a typical RISC machine, we only have to worry\n \t     about the way loads are extended.  */\n-\t  if (LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (x))) == SIGN_EXTEND\n-\t      ? (((nonzero\n-\t\t   & (((unsigned HOST_WIDE_INT) 1\n-\t\t       << (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (x))) - 1))))\n-\t\t  != 0))\n-\t      : LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (x))) != ZERO_EXTEND)\n+\t  if ((LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (x))) == SIGN_EXTEND\n+\t       ? (((nonzero\n+\t\t    & (((unsigned HOST_WIDE_INT) 1\n+\t\t\t<< (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (x))) - 1))))\n+\t\t   != 0))\n+\t       : LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (x))) != ZERO_EXTEND)\n+\t      || GET_CODE (SUBREG_REG (x)) != MEM)\n #endif\n \t    {\n \t      /* On many CISC machines, accessing an object in a wider mode\n@@ -8572,7 +8573,8 @@ num_sign_bit_copies (x, mode)\n \n       if ((GET_MODE_SIZE (GET_MODE (x))\n \t   > GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n-\t  && LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (x))) == SIGN_EXTEND)\n+\t  && LOAD_EXTEND_OP (GET_MODE (SUBREG_REG (x))) == SIGN_EXTEND\n+\t  && GET_CODE (SUBREG_REG (x)) == MEM)\n \treturn num_sign_bit_copies (SUBREG_REG (x), mode);\n #endif\n #endif"}]}