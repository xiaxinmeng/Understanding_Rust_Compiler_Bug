{"sha": "db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI0NmEyZTY1ODNlZjdjOGIyODQ3MDI2MTNjOGJjMWJmZDA4ZTQyYg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2017-09-12T14:57:58Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2017-09-12T14:57:58Z"}, "message": "[Patch AArch64 2/2] Fix memory sizes to load/store patterns\n\nThere seems to be a partial misconception in the AArch64 backend that\nload1/load2 referred to the number of registers to load, rather than the\nnumber of words to load. This patch fixes that using the new \"number of\nbyte\" types added in the previous patch.\n\nThat means using the load_16 and store_16 types that were defined in the\nprevious patch for the first time in the AArch64 backend. To ensure\ncontinuity for scheduling models, I've just split this out from load_8.\nPlease update your models if this is very wrong!\n\n---\ngcc/\n\n\t* config/aarch64/aarch64.md (movdi_aarch64): Set load/store\n\ttypes correctly.\n\t(movti_aarch64): Likewise.\n\t(movdf_aarch64): Likewise.\n\t(movtf_aarch64): Likewise.\n\t(load_pairdi): Likewise.\n\t(store_pairdi): Likewise.\n\t(load_pairdf): Likewise.\n\t(store_pairdf): Likewise.\n\t(loadwb_pair<GPI:mode>_<P:mode>): Likewise.\n\t(storewb_pair<GPI:mode>_<P:mode>): Likewise.\n\t(ldr_got_small_<mode>): Likewise.\n\t(ldr_got_small_28k_<mode>): Likewise.\n\t(ldr_got_tiny): Likewise.\n\t* config/aarch64/iterators.md (ldst_sz): New.\n\t(ldpstp_sz): Likewise.\n\t* config/aarch64/thunderx.md (thunderx_storepair): Split store_8\n\tto store_16.\n\t(thunderx_load): Split load_8 to load_16.\n\t* config/aarch64/thunderx2t99.md (thunderx2t99_loadpair): Split\n\tload_8 to load_16.\n\t(thunderx2t99_storepair_basic): Split store_8 to store_16.\n\t* config/arm/xgene1.md (xgene1_load_pair): Split load_8 to load_16.\n\t(xgene1_store_pair): Split store_8 to store_16.\n\t* config/aarch64/falkor.md (falkor_ld_3_ld): Split load_8 to load_16.\n\t(falkor_st_0_st_sd): Split store_8 to store_16.\n\nFrom-SVN: r252026", "tree": {"sha": "c7cf6f2f53c2e1bcfdd2130b9da56e27d702c08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7cf6f2f53c2e1bcfdd2130b9da56e27d702c08a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89b2133e2b7ef072e5b378a82c697269d8cd1db9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b2133e2b7ef072e5b378a82c697269d8cd1db9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b2133e2b7ef072e5b378a82c697269d8cd1db9"}], "stats": {"total": 79, "additions": 57, "deletions": 22}, "files": [{"sha": "8e05247026a181a3a02422c40bf143184c5e27e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "patch": "@@ -1,3 +1,32 @@\n+2017-09-12  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64.md (movdi_aarch64): Set load/store\n+\ttypes correctly.\n+\t(movti_aarch64): Likewise.\n+\t(movdf_aarch64): Likewise.\n+\t(movtf_aarch64): Likewise.\n+\t(load_pairdi): Likewise.\n+\t(store_pairdi): Likewise.\n+\t(load_pairdf): Likewise.\n+\t(store_pairdf): Likewise.\n+\t(loadwb_pair<GPI:mode>_<P:mode>): Likewise.\n+\t(storewb_pair<GPI:mode>_<P:mode>): Likewise.\n+\t(ldr_got_small_<mode>): Likewise.\n+\t(ldr_got_small_28k_<mode>): Likewise.\n+\t(ldr_got_tiny): Likewise.\n+\t* config/aarch64/iterators.md (ldst_sz): New.\n+\t(ldpstp_sz): Likewise.\n+\t* config/aarch64/thunderx.md (thunderx_storepair): Split store_8\n+\tto store_16.\n+\t(thunderx_load): Split load_8 to load_16.\n+\t* config/aarch64/thunderx2t99.md (thunderx2t99_loadpair): Split\n+\tload_8 to load_16.\n+\t(thunderx2t99_storepair_basic): Split store_8 to store_16.\n+\t* config/arm/xgene1.md (xgene1_load_pair): Split load_8 to load_16.\n+\t(xgene1_store_pair): Split store_8 to store_16.\n+\t* config/aarch64/falkor.md (falkor_ld_3_ld): Split load_8 to load_16.\n+\t(falkor_st_0_st_sd): Split store_8 to store_16.\n+\n 2017-09-12  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/types.md (type): Rename load1/2/3/4 to load_4/8/12/16"}, {"sha": "e85376c61fc18bcf7d006508fa6336cb2b32cceb", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "patch": "@@ -994,8 +994,8 @@\n        aarch64_expand_mov_immediate (operands[0], operands[1]);\n        DONE;\n     }\"\n-  [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,mov_imm,mov_imm,load_4,\\\n-                     load_4,store_4,store_4,adr,adr,f_mcr,f_mrc,fmov,neon_move\")\n+  [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,mov_imm,mov_imm,load_8,\\\n+                     load_8,store_8,store_8,adr,adr,f_mcr,f_mrc,fmov,neon_move\")\n    (set_attr \"fp\" \"*,*,*,*,*,*,*,yes,*,yes,*,*,yes,yes,yes,*\")\n    (set_attr \"simd\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,yes\")]\n )\n@@ -1039,7 +1039,8 @@\n    ldr\\\\t%q0, %1\n    str\\\\t%q1, %0\"\n   [(set_attr \"type\" \"multiple,f_mcr,f_mrc,neon_logic_q, \\\n-\t\t             load_8,store_8,store_8,f_loadd,f_stored\")\n+\t\t             load_16,store_16,store_16,\\\n+                             load_16,store_16\")\n    (set_attr \"length\" \"8,8,8,4,4,4,4,4,4\")\n    (set_attr \"simd\" \"*,*,*,yes,*,*,*,*,*\")\n    (set_attr \"fp\" \"*,*,*,*,*,*,*,yes,yes\")]\n@@ -1142,7 +1143,7 @@\n    mov\\\\t%x0, %x1\n    mov\\\\t%x0, %1\"\n   [(set_attr \"type\" \"neon_move,f_mcr,f_mrc,fmov,fconstd,neon_move,\\\n-\t\t     f_loadd,f_stored,load_4,store_4,mov_reg,\\\n+\t\t     f_loadd,f_stored,load_8,store_8,mov_reg,\\\n \t\t     fconstd\")\n    (set_attr \"simd\" \"yes,*,*,*,*,yes,*,*,*,*,*,*\")]\n )\n@@ -1187,7 +1188,7 @@\n    stp\\\\t%1, %H1, %0\n    stp\\\\txzr, xzr, %0\"\n   [(set_attr \"type\" \"logic_reg,multiple,f_mcr,f_mrc,neon_move_q,f_mcr,\\\n-                     f_loadd,f_stored,load_8,store_8,store_8\")\n+                     f_loadd,f_stored,load_16,store_16,store_16\")\n    (set_attr \"length\" \"4,8,8,8,4,4,4,4,4,4,4\")\n    (set_attr \"simd\" \"yes,*,*,*,yes,*,*,*,*,*,*\")]\n )\n@@ -1251,7 +1252,7 @@\n   \"@\n    ldp\\\\t%x0, %x2, %1\n    ldp\\\\t%d0, %d2, %1\"\n-  [(set_attr \"type\" \"load_8,neon_load1_2reg\")\n+  [(set_attr \"type\" \"load_16,neon_load1_2reg\")\n    (set_attr \"fp\" \"*,yes\")]\n )\n \n@@ -1286,7 +1287,7 @@\n   \"@\n    stp\\\\t%x1, %x3, %0\n    stp\\\\t%d1, %d3, %0\"\n-  [(set_attr \"type\" \"store_8,neon_store1_2reg\")\n+  [(set_attr \"type\" \"store_16,neon_store1_2reg\")\n    (set_attr \"fp\" \"*,yes\")]\n )\n \n@@ -1320,7 +1321,7 @@\n   \"@\n    ldp\\\\t%d0, %d2, %1\n    ldp\\\\t%x0, %x2, %1\"\n-  [(set_attr \"type\" \"neon_load1_2reg,load_8\")\n+  [(set_attr \"type\" \"neon_load1_2reg,load_16\")\n    (set_attr \"fp\" \"yes,*\")]\n )\n \n@@ -1354,7 +1355,7 @@\n   \"@\n    stp\\\\t%d1, %d3, %0\n    stp\\\\t%x1, %x3, %0\"\n-  [(set_attr \"type\" \"neon_store1_2reg,store_8\")\n+  [(set_attr \"type\" \"neon_store1_2reg,store_16\")\n    (set_attr \"fp\" \"yes,*\")]\n )\n \n@@ -1372,7 +1373,7 @@\n                    (match_operand:P 5 \"const_int_operand\" \"n\"))))])]\n   \"INTVAL (operands[5]) == GET_MODE_SIZE (<GPI:MODE>mode)\"\n   \"ldp\\\\t%<w>2, %<w>3, [%1], %4\"\n-  [(set_attr \"type\" \"load_8\")]\n+  [(set_attr \"type\" \"load_<ldpstp_sz>\")]\n )\n \n (define_insn \"loadwb_pair<GPF:mode>_<P:mode>\"\n@@ -1405,7 +1406,7 @@\n           (match_operand:GPI 3 \"register_operand\" \"r\"))])]\n   \"INTVAL (operands[5]) == INTVAL (operands[4]) + GET_MODE_SIZE (<GPI:MODE>mode)\"\n   \"stp\\\\t%<w>2, %<w>3, [%0, %4]!\"\n-  [(set_attr \"type\" \"store_8\")]\n+  [(set_attr \"type\" \"store_<ldpstp_sz>\")]\n )\n \n (define_insn \"storewb_pair<GPF:mode>_<P:mode>\"\n@@ -5355,7 +5356,7 @@\n \t\t    UNSPEC_GOTSMALLPIC))]\n   \"\"\n   \"ldr\\\\t%<w>0, [%1, #:got_lo12:%a2]\"\n-  [(set_attr \"type\" \"load_4\")]\n+  [(set_attr \"type\" \"load_<ldst_sz>\")]\n )\n \n (define_insn \"ldr_got_small_sidi\"\n@@ -5378,7 +5379,7 @@\n \t\t    UNSPEC_GOTSMALLPIC28K))]\n   \"\"\n   \"ldr\\\\t%<w>0, [%1, #:<got_modifier>:%a2]\"\n-  [(set_attr \"type\" \"load_4\")]\n+  [(set_attr \"type\" \"load_<ldst_sz>\")]\n )\n \n (define_insn \"ldr_got_small_28k_sidi\"\n@@ -5399,7 +5400,7 @@\n \t\t   UNSPEC_GOTTINYPIC))]\n   \"\"\n   \"ldr\\\\t%0, %L1\"\n-  [(set_attr \"type\" \"load_4\")]\n+  [(set_attr \"type\" \"load_8\")]\n )\n \n (define_insn \"aarch64_load_tp_hard\""}, {"sha": "83971ce34965d3d9f023f49dd6abe441b580012a", "filename": "gcc/config/aarch64/falkor.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Faarch64%2Ffalkor.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Faarch64%2Ffalkor.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Ffalkor.md?ref=db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "patch": "@@ -581,7 +581,7 @@\n \n (define_insn_reservation \"falkor_ld_3_ld\" 3\n   (and (eq_attr \"tune\" \"falkor\")\n-       (eq_attr \"type\" \"load_4,load_8\"))\n+       (eq_attr \"type\" \"load_4,load_8,load_16\"))\n   \"falkor_ld\")\n \n ;; Miscellaneous Data-Processing Instructions\n@@ -663,7 +663,7 @@\n \n (define_insn_reservation \"falkor_st_0_st_sd\" 0\n   (and (eq_attr \"tune\" \"falkor\")\n-       (eq_attr \"type\" \"store_4,store_8\"))\n+       (eq_attr \"type\" \"store_4,store_8,store_16\"))\n   \"falkor_st+falkor_sd\")\n \f\n ;; Muliply bypasses."}, {"sha": "477dc35daf6a1184be15d942c62a111604f62f3c", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "patch": "@@ -387,6 +387,11 @@\n ;; 32-bit version and \"%x0\" in the 64-bit version.\n (define_mode_attr w [(QI \"w\") (HI \"w\") (SI \"w\") (DI \"x\") (SF \"s\") (DF \"d\")])\n \n+;; The size of access, in bytes.\n+(define_mode_attr ldst_sz [(SI \"4\") (DI \"8\")])\n+;; Likewise for load/store pair.\n+(define_mode_attr ldpstp_sz [(SI \"8\") (DI \"16\")])\n+\n ;; For inequal width int to float conversion\n (define_mode_attr w1 [(HF \"w\") (SF \"w\") (DF \"x\")])\n (define_mode_attr w2 [(HF \"x\") (SF \"x\") (DF \"w\")])"}, {"sha": "84ac6cd38c59c523b06a858a81151bfeaa361f7b", "filename": "gcc/config/aarch64/thunderx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Faarch64%2Fthunderx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Faarch64%2Fthunderx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fthunderx.md?ref=db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "patch": "@@ -100,7 +100,7 @@\n ;; Store pair are single issued\n (define_insn_reservation \"thunderx_storepair\" 1\n   (and (eq_attr \"tune\" \"thunderx\")\n-       (eq_attr \"type\" \"store_8\"))\n+       (eq_attr \"type\" \"store_8,store_16\"))\n   \"thunderx_pipe0 + thunderx_pipe1\")\n \n ;; Prefetch are single issued\n@@ -112,7 +112,7 @@\n ;; loads (and load pairs) from L1 take 3 cycles in pipe 0\n (define_insn_reservation \"thunderx_load\" 3\n   (and (eq_attr \"tune\" \"thunderx\")\n-       (eq_attr \"type\" \"load_4, load_8\"))\n+       (eq_attr \"type\" \"load_4, load_8, load_16\"))\n   \"thunderx_pipe0\")\n \n (define_insn_reservation \"thunderx_brj\" 1"}, {"sha": "5bcf4ff9484fb6e52454cabca0c6f79807d48487", "filename": "gcc/config/aarch64/thunderx2t99.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Faarch64%2Fthunderx2t99.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Faarch64%2Fthunderx2t99.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fthunderx2t99.md?ref=db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "patch": "@@ -128,7 +128,7 @@\n \n (define_insn_reservation \"thunderx2t99_loadpair\" 5\n   (and (eq_attr \"tune\" \"thunderx2t99\")\n-       (eq_attr \"type\" \"load_8\"))\n+       (eq_attr \"type\" \"load_8,load_16\"))\n   \"thunderx2t99_i012,thunderx2t99_ls01\")\n \n (define_insn_reservation \"thunderx2t99_store_basic\" 1\n@@ -138,7 +138,7 @@\n \n (define_insn_reservation \"thunderx2t99_storepair_basic\" 1\n   (and (eq_attr \"tune\" \"thunderx2t99\")\n-       (eq_attr \"type\" \"store_8\"))\n+       (eq_attr \"type\" \"store_8,store_16\"))\n   \"thunderx2t99_ls01,thunderx2t99_sd\")\n \n ;; FP data processing instructions."}, {"sha": "c4b377354db5d3e05d2279db9a49048cd8406d96", "filename": "gcc/config/arm/xgene1.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Farm%2Fxgene1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db46a2e6583ef7c8b284702613c8bc1bfd08e42b/gcc%2Fconfig%2Farm%2Fxgene1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fxgene1.md?ref=db46a2e6583ef7c8b284702613c8bc1bfd08e42b", "patch": "@@ -92,12 +92,12 @@\n \n (define_insn_reservation \"xgene1_load_pair\" 6\n   (and (eq_attr \"tune\" \"xgene1\")\n-       (eq_attr \"type\" \"load_8\"))\n+       (eq_attr \"type\" \"load_8, load_16\"))\n   \"xgene1_decodeIsolated\")\n \n (define_insn_reservation \"xgene1_store_pair\" 2\n   (and (eq_attr \"tune\" \"xgene1\")\n-       (eq_attr \"type\" \"store_8\"))\n+       (eq_attr \"type\" \"store_8, store_16\"))\n   \"xgene1_decodeIsolated\")\n \n (define_insn_reservation \"xgene1_fp_load1\" 10"}]}