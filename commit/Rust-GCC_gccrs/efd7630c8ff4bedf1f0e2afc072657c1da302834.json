{"sha": "efd7630c8ff4bedf1f0e2afc072657c1da302834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkNzYzMGM4ZmY0YmVkZjFmMGUyYWZjMDcyNjU3YzFkYTMwMjgzNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-08-01T18:21:07Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-01T18:21:07Z"}, "message": "Use ptr_mode for stack protector.\n\n2011-08-01  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/47766\n\t* config/i386/i386.md (PTR): New.\n\t(stack_protect_set: Check TARGET_LP64 instead of TARGET_64BIT.\n\t(stack_protect_test): Likewise.\n\t(stack_protect_set_<mode>): Replace \":P\" with \":PTR\".\n\t(stack_tls_protect_set_<mode>): Likewise.\n\t(stack_tls_protect_test_<mode>): Likewise.\n\nFrom-SVN: r177067", "tree": {"sha": "367010d53898a081f2d1437dd50f8b1fd5e417dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/367010d53898a081f2d1437dd50f8b1fd5e417dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efd7630c8ff4bedf1f0e2afc072657c1da302834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd7630c8ff4bedf1f0e2afc072657c1da302834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd7630c8ff4bedf1f0e2afc072657c1da302834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd7630c8ff4bedf1f0e2afc072657c1da302834/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0701bb567b104631c85fbb5987e10d86c3b86705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0701bb567b104631c85fbb5987e10d86c3b86705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0701bb567b104631c85fbb5987e10d86c3b86705"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "f03046ed8a00b0ed45a348124f204fd7f603213d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd7630c8ff4bedf1f0e2afc072657c1da302834/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd7630c8ff4bedf1f0e2afc072657c1da302834/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efd7630c8ff4bedf1f0e2afc072657c1da302834", "patch": "@@ -1,3 +1,13 @@\n+2011-08-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/47766\n+\t* config/i386/i386.md (PTR): New.\n+\t(stack_protect_set: Check TARGET_LP64 instead of TARGET_64BIT.\n+\t(stack_protect_test): Likewise.\n+\t(stack_protect_set_<mode>): Replace \":P\" with \":PTR\".\n+\t(stack_tls_protect_set_<mode>): Likewise.\n+\t(stack_tls_protect_test_<mode>): Likewise.\n+\n 2011-08-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/49927"}, {"sha": "3a07d4e3c00436c775d381429178c259f54e43f5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd7630c8ff4bedf1f0e2afc072657c1da302834/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd7630c8ff4bedf1f0e2afc072657c1da302834/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=efd7630c8ff4bedf1f0e2afc072657c1da302834", "patch": "@@ -951,6 +951,11 @@\n ;; This mode iterator allows :P to be used for patterns that operate on\n ;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n (define_mode_iterator P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n+\n+;; This mode iterator allows :PTR to be used for patterns that operate on\n+;; ptr_mode sized quantities.\n+(define_mode_iterator PTR\n+  [(SI \"ptr_mode == SImode\") (DI \"ptr_mode == DImode\")])\n \f\n ;; Scheduling descriptions\n \n@@ -17402,11 +17407,11 @@\n \n #ifdef TARGET_THREAD_SSP_OFFSET\n   operands[1] = GEN_INT (TARGET_THREAD_SSP_OFFSET);\n-  insn = (TARGET_64BIT\n+  insn = (TARGET_LP64\n \t  ? gen_stack_tls_protect_set_di\n \t  : gen_stack_tls_protect_set_si);\n #else\n-  insn = (TARGET_64BIT\n+  insn = (TARGET_LP64\n \t  ? gen_stack_protect_set_di\n \t  : gen_stack_protect_set_si);\n #endif\n@@ -17416,19 +17421,20 @@\n })\n \n (define_insn \"stack_protect_set_<mode>\"\n-  [(set (match_operand:P 0 \"memory_operand\" \"=m\")\n-\t(unspec:P [(match_operand:P 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n-   (set (match_scratch:P 2 \"=&r\") (const_int 0))\n+  [(set (match_operand:PTR 0 \"memory_operand\" \"=m\")\n+\t(unspec:PTR [(match_operand:PTR 1 \"memory_operand\" \"m\")]\n+\t\t    UNSPEC_SP_SET))\n+   (set (match_scratch:PTR 2 \"=&r\") (const_int 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"mov{<imodesuffix>}\\t{%1, %2|%2, %1}\\;mov{<imodesuffix>}\\t{%2, %0|%0, %2}\\;xor{l}\\t%k2, %k2\"\n   [(set_attr \"type\" \"multi\")])\n \n (define_insn \"stack_tls_protect_set_<mode>\"\n-  [(set (match_operand:P 0 \"memory_operand\" \"=m\")\n-\t(unspec:P [(match_operand:P 1 \"const_int_operand\" \"i\")]\n-\t\t  UNSPEC_SP_TLS_SET))\n-   (set (match_scratch:P 2 \"=&r\") (const_int 0))\n+  [(set (match_operand:PTR 0 \"memory_operand\" \"=m\")\n+\t(unspec:PTR [(match_operand:PTR 1 \"const_int_operand\" \"i\")]\n+\t\t    UNSPEC_SP_TLS_SET))\n+   (set (match_scratch:PTR 2 \"=&r\") (const_int 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"mov{<imodesuffix>}\\t{%@:%P1, %2|%2, <iptrsize> PTR %@:%P1}\\;mov{<imodesuffix>}\\t{%2, %0|%0, %2}\\;xor{l}\\t%k2, %k2\"\n@@ -17446,11 +17452,11 @@\n \n #ifdef TARGET_THREAD_SSP_OFFSET\n   operands[1] = GEN_INT (TARGET_THREAD_SSP_OFFSET);\n-  insn = (TARGET_64BIT\n+  insn = (TARGET_LP64\n \t  ? gen_stack_tls_protect_test_di\n \t  : gen_stack_tls_protect_test_si);\n #else\n-  insn = (TARGET_64BIT\n+  insn = (TARGET_LP64\n \t  ? gen_stack_protect_test_di\n \t  : gen_stack_protect_test_si);\n #endif\n@@ -17464,20 +17470,20 @@\n \n (define_insn \"stack_protect_test_<mode>\"\n   [(set (match_operand:CCZ 0 \"flags_reg_operand\" \"\")\n-\t(unspec:CCZ [(match_operand:P 1 \"memory_operand\" \"m\")\n-\t\t     (match_operand:P 2 \"memory_operand\" \"m\")]\n+\t(unspec:CCZ [(match_operand:PTR 1 \"memory_operand\" \"m\")\n+\t\t     (match_operand:PTR 2 \"memory_operand\" \"m\")]\n \t\t    UNSPEC_SP_TEST))\n-   (clobber (match_scratch:P 3 \"=&r\"))]\n+   (clobber (match_scratch:PTR 3 \"=&r\"))]\n   \"\"\n   \"mov{<imodesuffix>}\\t{%1, %3|%3, %1}\\;xor{<imodesuffix>}\\t{%2, %3|%3, %2}\"\n   [(set_attr \"type\" \"multi\")])\n \n (define_insn \"stack_tls_protect_test_<mode>\"\n   [(set (match_operand:CCZ 0 \"flags_reg_operand\" \"\")\n-\t(unspec:CCZ [(match_operand:P 1 \"memory_operand\" \"m\")\n-\t\t     (match_operand:P 2 \"const_int_operand\" \"i\")]\n+\t(unspec:CCZ [(match_operand:PTR 1 \"memory_operand\" \"m\")\n+\t\t     (match_operand:PTR 2 \"const_int_operand\" \"i\")]\n \t\t    UNSPEC_SP_TLS_TEST))\n-   (clobber (match_scratch:P 3 \"=r\"))]\n+   (clobber (match_scratch:PTR 3 \"=r\"))]\n   \"\"\n   \"mov{<imodesuffix>}\\t{%1, %3|%3, %1}\\;xor{<imodesuffix>}\\t{%@:%P2, %3|%3, <iptrsize> PTR %@:%P2}\"\n   [(set_attr \"type\" \"multi\")])"}]}