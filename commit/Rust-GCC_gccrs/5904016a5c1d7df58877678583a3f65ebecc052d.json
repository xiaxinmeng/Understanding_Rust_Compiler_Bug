{"sha": "5904016a5c1d7df58877678583a3f65ebecc052d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkwNDAxNmE1YzFkN2RmNTg4Nzc2Nzg1ODNhM2Y2NWViZWNjMDUyZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:03:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T10:03:44Z"}, "message": "[multiple changes]\n\n2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_util.adb (Has_Full_Default_Initialization):\n\tPerform the test for the presence of pragma\n\tDefault_Initial_Condition prior to the specialized type\n\tchecks. Add a missing case where the lack of a pragma argument\n\tyields full default initialization.\n\n2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Resolve_Entity_Name): Do not check\n\tfor elaboration issues when a variable appears as the name of\n\tan object renaming declaration as this constitutes an aliasing,\n\tnot a read.\n\n2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* checks.adb (Overlap_Check): An actual that is an aggregate\n\tcannot overlap with another actual, and no check should be\n\tgenerated for it.\n\t* targparm.ads: Fix typos.\n\n2015-11-18  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c: Routine __gnat_killprocesstree only implemented on\n\tLinux and Windows.\n\n2015-11-18  Pascal Obry  <obry@adacore.com>\n\n\t* g-ctrl_c.adb: Minor style fixes.\n\nFrom-SVN: r230523", "tree": {"sha": "51c383861941a122ba6296c8658ad90d4501fb03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51c383861941a122ba6296c8658ad90d4501fb03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5904016a5c1d7df58877678583a3f65ebecc052d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5904016a5c1d7df58877678583a3f65ebecc052d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5904016a5c1d7df58877678583a3f65ebecc052d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5904016a5c1d7df58877678583a3f65ebecc052d/comments", "author": null, "committer": null, "parents": [{"sha": "287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/287aa0ed9267e7afe6d9350a6b5b95f271db28ce"}], "stats": {"total": 121, "additions": 99, "deletions": 22}, "files": [{"sha": "0d3923a31f91722f6295a410737bc16f401465f3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5904016a5c1d7df58877678583a3f65ebecc052d", "patch": "@@ -1,3 +1,34 @@\n+2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Has_Full_Default_Initialization):\n+\tPerform the test for the presence of pragma\n+\tDefault_Initial_Condition prior to the specialized type\n+\tchecks. Add a missing case where the lack of a pragma argument\n+\tyields full default initialization.\n+\n+2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Entity_Name): Do not check\n+\tfor elaboration issues when a variable appears as the name of\n+\tan object renaming declaration as this constitutes an aliasing,\n+\tnot a read.\n+\n+2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* checks.adb (Overlap_Check): An actual that is an aggregate\n+\tcannot overlap with another actual, and no check should be\n+\tgenerated for it.\n+\t* targparm.ads: Fix typos.\n+\n+2015-11-18  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c: Routine __gnat_killprocesstree only implemented on\n+\tLinux and Windows.\n+\n+2015-11-18  Pascal Obry  <obry@adacore.com>\n+\n+\t* g-ctrl_c.adb: Minor style fixes.\n+\n 2015-11-18  Pascal Obry  <obry@adacore.com>\n \n \t* adaint.c, s-os_lib.adb, s-os_lib.ads (Kill_Process_Tree): New."}, {"sha": "5a0bdd951df54cf80195b4916a1de5986fa39cbe", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=5904016a5c1d7df58877678583a3f65ebecc052d", "patch": "@@ -3259,7 +3259,11 @@ void __gnat_killprocesstree (int pid, int sig_num)\n   /* kill process */\n \n   __gnat_kill (pid, sig_num, 1);\n-#else\n+\n+#elif defined (__vxworks)\n+  /* not implemented */\n+\n+#elif defined (__linux__)\n   DIR *dir;\n   struct dirent *d;\n \n@@ -3307,6 +3311,8 @@ void __gnat_killprocesstree (int pid, int sig_num)\n \n   /* kill process */\n \n+  __gnat_kill (pid, sig_num, 1);\n+#else\n   __gnat_kill (pid, sig_num, 1);\n #endif\n   /* Note on Solaris it is possible to read /proc/<PID>/status."}, {"sha": "64dcf57ae8aa08a384d79cc27c9404c47c7e00f5", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=5904016a5c1d7df58877678583a3f65ebecc052d", "patch": "@@ -2359,9 +2359,19 @@ package body Checks is\n \n          --  Ensure that the actual is an object that is not passed by value.\n          --  Elementary types are always passed by value, therefore actuals of\n-         --  such types cannot lead to aliasing.\n+         --  such types cannot lead to aliasing. An aggregate is an object in\n+         --  Ada 2012, but an actual that is an aggregate cannot overlap with\n+         --  another actual.\n \n-         if Is_Object_Reference (Original_Actual (Actual_1))\n+         if Nkind (Original_Actual (Actual_1)) = N_Aggregate\n+           or else\n+             (Nkind (Original_Actual (Actual_1)) = N_Qualified_Expression\n+                and then Nkind (Expression (Original_Actual (Actual_1))) =\n+                           N_Aggregate)\n+         then\n+            null;\n+\n+         elsif Is_Object_Reference (Original_Actual (Actual_1))\n            and then not Is_Elementary_Type (Etype (Original_Actual (Actual_1)))\n          then\n             Actual_2 := Next_Actual (Actual_1);"}, {"sha": "edd7dc637fadbfd43150bf153a5c4432b26d8f59", "filename": "gcc/ada/g-ctrl_c.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Fg-ctrl_c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Fg-ctrl_c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-ctrl_c.adb?ref=5904016a5c1d7df58877678583a3f65ebecc052d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                      Copyright (C) 2002-2010, AdaCore                    --\n+--                      Copyright (C) 2002-2015, AdaCore                    --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,11 +39,19 @@ package body GNAT.Ctrl_C is\n    procedure C_Handler;\n    pragma Convention (C, C_Handler);\n \n+   ---------------\n+   -- C_Handler --\n+   ---------------\n+\n    procedure C_Handler is\n    begin\n       Ada_Handler.all;\n    end C_Handler;\n \n+   ---------------------\n+   -- Install_Handler --\n+   ---------------------\n+\n    procedure Install_Handler (Handler : Handler_Type) is\n       procedure Internal (Handler : C_Handler_Type);\n       pragma Import (C, Internal, \"__gnat_install_int_handler\");"}, {"sha": "0e2d1c79f01029a465404e95f43d9b0352bea23c", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=5904016a5c1d7df58877678583a3f65ebecc052d", "patch": "@@ -7231,9 +7231,13 @@ package body Sem_Res is\n                   & \"(SPARK RM 7.1.3(12))\", N);\n             end if;\n \n-            --  Check possible elaboration issues with respect to variables\n+            --  Check for possible elaboration issues with respect to reads of\n+            --  variables. The act of renaming the variable is not considered a\n+            --  read as it simply establishes an alias.\n \n-            if Ekind (E) = E_Variable then\n+            if Ekind (E) = E_Variable\n+              and then Nkind (Par) /= N_Object_Renaming_Declaration\n+            then\n                Check_Elab_Call (N);\n             end if;\n          end if;"}, {"sha": "036cc0cfe489befe0b0b1b0d39e71e8241603a6d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=5904016a5c1d7df58877678583a3f65ebecc052d", "patch": "@@ -8852,9 +8852,41 @@ package body Sem_Util is\n    -------------------------------------\n \n    function Has_Full_Default_Initialization (Typ : Entity_Id) return Boolean is\n+      Arg  : Node_Id;\n       Comp : Entity_Id;\n+      Prag : Node_Id;\n \n    begin\n+      --  A private type and its full view is fully default initialized when it\n+      --  is subject to pragma Default_Initial_Condition without an argument or\n+      --  with a non-null argument. Since any type may act as the full view of\n+      --  a private type, this check must be performed prior to the specialized\n+      --  tests below.\n+\n+      if Has_Default_Init_Cond (Typ)\n+        or else Has_Inherited_Default_Init_Cond (Typ)\n+      then\n+         Prag := Get_Pragma (Typ, Pragma_Default_Initial_Condition);\n+\n+         --  Pragma Default_Initial_Condition must be present if one of the\n+         --  related entity flags is set.\n+\n+         pragma Assert (Present (Prag));\n+         Arg := First (Pragma_Argument_Associations (Prag));\n+\n+         --  A non-null argument guarantees full default initialization\n+\n+         if Present (Arg) then\n+            return Nkind (Arg) /= N_Null;\n+\n+         --  Otherwise the missing argument defaults the pragma to \"True\" which\n+         --  is considered a non-null argument (see above).\n+\n+         else\n+            return True;\n+         end if;\n+      end if;\n+\n       --  A scalar type is fully default initialized if it is subject to aspect\n       --  Default_Value.\n \n@@ -8911,20 +8943,6 @@ package body Sem_Util is\n \n       elsif Is_Task_Type (Typ) then\n          return True;\n-      end if;\n-\n-      --  A private type and by extension its full view is fully default\n-      --  initialized if it is subject to pragma Default_Initial_Condition\n-      --  with a non-null argument or inherits the pragma from a parent type.\n-      --  Since any type can act as the full view of a private type, this check\n-      --  is separated from the circuitry above.\n-\n-      if Has_Default_Init_Cond (Typ)\n-        or else Has_Inherited_Default_Init_Cond (Typ)\n-      then\n-         return\n-           Nkind (First (Pragma_Argument_Associations (Get_Pragma\n-             (Typ, Pragma_Default_Initial_Condition)))) /= N_Null;\n \n       --  Otherwise the type is not fully default initialized\n "}, {"sha": "ed24ea7f2802b09712053d8d4d536035f5e077d8", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904016a5c1d7df58877678583a3f65ebecc052d/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=5904016a5c1d7df58877678583a3f65ebecc052d", "patch": "@@ -53,7 +53,7 @@\n --     1. Configuration pragmas, that must appear at the start of the file.\n --        Any such pragmas automatically apply to any unit compiled in the\n --        presence of this system file. Only a limited set of such pragmas\n---        may appear as documented in the corresponding section below,\n+--        may appear as documented in the corresponding section below.\n \n --     2. Target parameters. These are boolean constants that are defined\n --        in the private part of the package giving fixed information\n@@ -107,7 +107,7 @@ package Targparm is\n    --  If a pragma Detect_Blocking appears, then the flag Opt.Detect_Blocking\n    --  is set to True.\n \n-   --  if a pragma Suppress_Exception_Locations appears, then the flag\n+   --  If a pragma Suppress_Exception_Locations appears, then the flag\n    --  Opt.Exception_Locations_Suppressed is set to True.\n \n    --  If a pragma Profile with a valid profile argument appears, then"}]}