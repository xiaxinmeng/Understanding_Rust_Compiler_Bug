{"sha": "6e96f98aec1f14a0df1600fb4b6499dc947ce52d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5NmY5OGFlYzFmMTRhMGRmMTYwMGZiNGI2NDk5ZGM5NDdjZTUyZA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2011-05-30T17:12:53Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2011-05-30T17:12:53Z"}, "message": "re PR tree-optimization/46728 (GCC does not generate fmadd for pow (x, 0.75)+y on powerpc)\n\n2011-05-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/46728\n\t* tree-ssa-math-opts.c (build_and_insert_call): Reorder parms.\n\t(build_and_insert_binop): New.\n\t(gimple_expand_builtin_pow): Reorder args for\n\tbuild_and_insert_call; use build_and_insert_binop; add more\n\toptimizations for fractional exponents.\n\nFrom-SVN: r174446", "tree": {"sha": "640ed15a245481b6433f330128b305c4192765c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/640ed15a245481b6433f330128b305c4192765c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e96f98aec1f14a0df1600fb4b6499dc947ce52d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e96f98aec1f14a0df1600fb4b6499dc947ce52d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e96f98aec1f14a0df1600fb4b6499dc947ce52d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e96f98aec1f14a0df1600fb4b6499dc947ce52d/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f60111fd430b3ccaf89acd7a869ad2e6c6b7bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f60111fd430b3ccaf89acd7a869ad2e6c6b7bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f60111fd430b3ccaf89acd7a869ad2e6c6b7bf6"}], "stats": {"total": 171, "additions": 152, "deletions": 19}, "files": [{"sha": "410355c36f1e4806c35ce91b4ce093fbddc7259b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e96f98aec1f14a0df1600fb4b6499dc947ce52d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e96f98aec1f14a0df1600fb4b6499dc947ce52d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e96f98aec1f14a0df1600fb4b6499dc947ce52d", "patch": "@@ -1,3 +1,12 @@\n+2011-05-30  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/46728\n+\t* tree-ssa-math-opts.c (build_and_insert_call): Reorder parms.\n+\t(build_and_insert_binop): New.\n+\t(gimple_expand_builtin_pow): Reorder args for\n+\tbuild_and_insert_call; use build_and_insert_binop; add more\n+\toptimizations for fractional exponents.\n+\t\n 2011-05-30  Nathan Froyd  <froydnj@gcc.gnu.org>\n \n \tPR bootstrap/49190"}, {"sha": "f53a3004b9388b5dd6bfef2c127c25aec5775326", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 143, "deletions": 19, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e96f98aec1f14a0df1600fb4b6499dc947ce52d/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e96f98aec1f14a0df1600fb4b6499dc947ce52d/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=6e96f98aec1f14a0df1600fb4b6499dc947ce52d", "patch": "@@ -1033,8 +1033,8 @@ gimple_expand_builtin_powi (gimple_stmt_iterator *gsi, location_t loc,\n    SSA name.  */\n \n static tree\n-build_and_insert_call (gimple_stmt_iterator *gsi, tree fn, tree arg,\n-\t\t       tree *var, location_t loc)\n+build_and_insert_call (gimple_stmt_iterator *gsi, location_t loc,\n+\t\t       tree *var, tree fn, tree arg)\n {\n   gimple call_stmt;\n   tree ssa_target;\n@@ -1054,6 +1054,22 @@ build_and_insert_call (gimple_stmt_iterator *gsi, tree fn, tree arg,\n   return ssa_target;\n }\n \n+/* Build a gimple binary operation with the given CODE and arguments\n+   ARG0, ARG1, assigning the result to a new SSA name for variable\n+   TARGET.  Insert the statement prior to GSI's current position, and\n+   return the fresh SSA name.*/\n+\n+static tree\n+build_and_insert_binop (gimple_stmt_iterator *gsi, location_t loc,\n+\t\t\ttree target, enum tree_code code, tree arg0, tree arg1)\n+{\n+  tree result = make_ssa_name (target, NULL);\n+  gimple stmt = gimple_build_assign_with_ops (code, result, arg0, arg1);\n+  gimple_set_location (stmt, loc);\n+  gsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n+  return result;\n+}\n+\n /* ARG0 and ARG1 are the two arguments to a pow builtin call in GSI\n    with location info LOC.  If possible, create an equivalent and\n    less expensive sequence of statements prior to GSI, and return an\n@@ -1064,12 +1080,12 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n \t\t\t   tree arg0, tree arg1)\n {\n   REAL_VALUE_TYPE c, cint, dconst1_4, dconst3_4, dconst1_3, dconst1_6;\n+  REAL_VALUE_TYPE c2, dconst3;\n   HOST_WIDE_INT n;\n-  tree type, sqrtfn, cbrtfn, sqrt_arg0, sqrt_sqrt, ssa_target;\n+  tree type, sqrtfn, cbrtfn, sqrt_arg0, sqrt_sqrt, result, cbrt_x, powi_cbrt_x;\n   tree target = NULL_TREE;\n   enum machine_mode mode;\n   bool hw_sqrt_exists;\n-  gimple mult_stmt;\n \n   /* If the exponent isn't a constant, there's nothing of interest\n      to be done.  */\n@@ -1100,7 +1116,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n   if (sqrtfn\n       && REAL_VALUES_EQUAL (c, dconsthalf)\n       && !HONOR_SIGNED_ZEROS (mode))\n-    return build_and_insert_call (gsi, sqrtfn, arg0, &target, loc);\n+    return build_and_insert_call (gsi, loc, &target, sqrtfn, arg0);\n \n   /* Optimize pow(x,0.25) = sqrt(sqrt(x)).  Assume on most machines that\n      a builtin sqrt instruction is smaller than a call to pow with 0.25,\n@@ -1116,10 +1132,10 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n       && hw_sqrt_exists)\n     {\n       /* sqrt(x)  */\n-      sqrt_arg0 = build_and_insert_call (gsi, sqrtfn, arg0, &target, loc);\n+      sqrt_arg0 = build_and_insert_call (gsi, loc, &target, sqrtfn, arg0);\n \n       /* sqrt(sqrt(x))  */\n-      return build_and_insert_call (gsi, sqrtfn, sqrt_arg0, &target, loc);\n+      return build_and_insert_call (gsi, loc, &target, sqrtfn, sqrt_arg0);\n     }\n       \n   /* Optimize pow(x,0.75) = sqrt(x) * sqrt(sqrt(x)) unless we are\n@@ -1135,19 +1151,14 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n       && hw_sqrt_exists)\n     {\n       /* sqrt(x)  */\n-      sqrt_arg0 = build_and_insert_call (gsi, sqrtfn, arg0, &target, loc);\n+      sqrt_arg0 = build_and_insert_call (gsi, loc, &target, sqrtfn, arg0);\n \n       /* sqrt(sqrt(x))  */\n-      sqrt_sqrt = build_and_insert_call (gsi, sqrtfn, sqrt_arg0, &target, loc);\n+      sqrt_sqrt = build_and_insert_call (gsi, loc, &target, sqrtfn, sqrt_arg0);\n \n       /* sqrt(x) * sqrt(sqrt(x))  */\n-      ssa_target = make_ssa_name (target, NULL);\n-      mult_stmt = gimple_build_assign_with_ops (MULT_EXPR, ssa_target,\n-\t\t\t\t\t\tsqrt_arg0, sqrt_sqrt);\n-      gimple_set_location (mult_stmt, loc);\n-      gsi_insert_before (gsi, mult_stmt, GSI_SAME_STMT);\n-\n-      return ssa_target;\n+      return build_and_insert_binop (gsi, loc, target, MULT_EXPR,\n+\t\t\t\t     sqrt_arg0, sqrt_sqrt);\n     }\n \n   /* Optimize pow(x,1./3.) = cbrt(x).  This requires unsafe math\n@@ -1169,7 +1180,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n          added in gimple-fold.c.  */\n       && !HONOR_NANS (mode)\n       && REAL_VALUES_EQUAL (c, dconst1_3))\n-    return build_and_insert_call (gsi, cbrtfn, arg0, &target, loc);\n+    return build_and_insert_call (gsi, loc, &target, cbrtfn, arg0);\n   \n   /* Optimize pow(x,1./6.) = cbrt(sqrt(x)).  Don't do this optimization\n      if we don't have a hardware sqrt insn.  */\n@@ -1191,12 +1202,125 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n       && REAL_VALUES_EQUAL (c, dconst1_6))\n     {\n       /* sqrt(x)  */\n-      sqrt_arg0 = build_and_insert_call (gsi, sqrtfn, arg0, &target, loc);\n+      sqrt_arg0 = build_and_insert_call (gsi, loc, &target, sqrtfn, arg0);\n \n       /* cbrt(sqrt(x))  */\n-      return build_and_insert_call (gsi, cbrtfn, sqrt_arg0, &target, loc);\n+      return build_and_insert_call (gsi, loc, &target, cbrtfn, sqrt_arg0);\n+    }\n+\n+  /* Optimize pow(x,c), where n = 2c for some nonzero integer n, into\n+\n+       sqrt(x) * powi(x, n/2),                n > 0;\n+       1.0 / (sqrt(x) * powi(x, abs(n/2))),   n < 0.\n+\n+     Do not calculate the powi factor when n/2 = 0.  */\n+  real_arithmetic (&c2, MULT_EXPR, &c, &dconst2);\n+  n = real_to_integer (&c2);\n+  real_from_integer (&cint, VOIDmode, n, n < 0 ? -1 : 0, 0);\n+\n+  if (flag_unsafe_math_optimizations\n+      && sqrtfn\n+      && real_identical (&c2, &cint))\n+    {\n+      tree powi_x_ndiv2 = NULL_TREE;\n+\n+      /* Attempt to fold powi(arg0, abs(n/2)) into multiplies.  If not\n+         possible or profitable, give up.  Skip the degenerate case when\n+         n is 1 or -1, where the result is always 1.  */\n+      if (abs (n) != 1)\n+\t{\n+\t  powi_x_ndiv2 = gimple_expand_builtin_powi (gsi, loc, arg0, abs(n/2));\n+\t  if (!powi_x_ndiv2)\n+\t    return NULL_TREE;\n+\t}\n+\n+      /* Calculate sqrt(x).  When n is not 1 or -1, multiply it by the\n+\t result of the optimal multiply sequence just calculated.  */\n+      sqrt_arg0 = build_and_insert_call (gsi, loc, &target, sqrtfn, arg0);\n+\n+      if (abs (n) == 1)\n+\tresult = sqrt_arg0;\n+      else\n+\tresult = build_and_insert_binop (gsi, loc, target, MULT_EXPR,\n+\t\t\t\t\t sqrt_arg0, powi_x_ndiv2);\n+\n+      /* If n is negative, reciprocate the result.  */\n+      if (n < 0)\n+\tresult = build_and_insert_binop (gsi, loc, target, RDIV_EXPR,\n+\t\t\t\t\t build_real (type, dconst1), result);\n+      return result;\n+    }\n+\n+  /* Optimize pow(x,c), where 3c = n for some nonzero integer n, into\n+\n+     powi(x, n/3) * powi(cbrt(x), n%3),                    n > 0;\n+     1.0 / (powi(x, abs(n)/3) * powi(cbrt(x), abs(n)%3)),  n < 0.\n+\n+     Do not calculate the first factor when n/3 = 0.  As cbrt(x) is\n+     different from pow(x, 1./3.) due to rounding and behavior with\n+     negative x, we need to constrain this transformation to unsafe\n+     math and positive x or finite math.  */\n+  real_from_integer (&dconst3, VOIDmode, 3, 0, 0);\n+  real_arithmetic (&c2, MULT_EXPR, &c, &dconst3);\n+  real_round (&c2, mode, &c2);\n+  n = real_to_integer (&c2);\n+  real_from_integer (&cint, VOIDmode, n, n < 0 ? -1 : 0, 0);\n+  real_arithmetic (&c2, RDIV_EXPR, &cint, &dconst3);\n+  real_convert (&c2, mode, &c2);\n+\n+  if (flag_unsafe_math_optimizations\n+      && cbrtfn\n+      /* FIXME: The following line was originally\n+\t && (tree_expr_nonnegative_p (arg0) || !HONOR_NANS (mode)),\n+\t but since arg0 is a gimple value, the first predicate\n+\t will always return false.  It needs to be replaced with a\n+\t call to a similar gimple_val_nonnegative_p function to be\n+         added in gimple-fold.c.  */\n+      && !HONOR_NANS (mode)\n+      && real_identical (&c2, &c)\n+      && optimize_function_for_speed_p (cfun)\n+      && powi_cost (n / 3) <= POWI_MAX_MULTS)\n+    {\n+      tree powi_x_ndiv3 = NULL_TREE;\n+\n+      /* Attempt to fold powi(arg0, abs(n/3)) into multiplies.  If not\n+         possible or profitable, give up.  Skip the degenerate case when\n+         abs(n) < 3, where the result is always 1.  */\n+      if (abs (n) >= 3)\n+\t{\n+\t  powi_x_ndiv3 = gimple_expand_builtin_powi (gsi, loc, arg0,\n+\t\t\t\t\t\t     abs (n / 3));\n+\t  if (!powi_x_ndiv3)\n+\t    return NULL_TREE;\n+\t}\n+\n+      /* Calculate powi(cbrt(x), n%3).  Don't use gimple_expand_builtin_powi\n+         as that creates an unnecessary variable.  Instead, just produce\n+         either cbrt(x) or cbrt(x) * cbrt(x).  */\n+      cbrt_x = build_and_insert_call (gsi, loc, &target, cbrtfn, arg0);\n+\n+      if (abs (n) % 3 == 1)\n+\tpowi_cbrt_x = cbrt_x;\n+      else\n+\tpowi_cbrt_x = build_and_insert_binop (gsi, loc, target, MULT_EXPR,\n+\t\t\t\t\t      cbrt_x, cbrt_x);\n+\n+      /* Multiply the two subexpressions, unless powi(x,abs(n)/3) = 1.  */\n+      if (abs (n) < 3)\n+\tresult = powi_cbrt_x;\n+      else\n+\tresult = build_and_insert_binop (gsi, loc, target, MULT_EXPR,\n+\t\t\t\t\t powi_x_ndiv3, powi_cbrt_x);\n+\n+      /* If n is negative, reciprocate the result.  */\n+      if (n < 0)\n+\tresult = build_and_insert_binop (gsi, loc, target, RDIV_EXPR, \n+\t\t\t\t\t build_real (type, dconst1), result);\n+\n+      return result;\n     }\n \n+  /* No optimizations succeeded.  */\n   return NULL_TREE;\n }\n "}]}