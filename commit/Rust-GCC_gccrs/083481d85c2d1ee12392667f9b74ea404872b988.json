{"sha": "083481d85c2d1ee12392667f9b74ea404872b988", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgzNDgxZDg1YzJkMWVlMTIzOTI2NjdmOWI3NGVhNDA0ODcyYjk4OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-12-19T14:22:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-12-19T14:22:29Z"}, "message": "re PR middle-end/51590 (ICE in gsi_for_stmt, at gimple-iterator.c:560)\n\n\tPR middle-end/51590\n\tPR tree-optimization/51606\n\t* tree-vect-patterns.c (append_pattern_def_seq, new_pattern_def_seq):\n\tNew inline functions.\n\t(vect_recog_over_widening_pattern,\n\tvect_recog_vector_vector_shift_pattern,\n\tvect_recog_sdivmod_pow2_pattern, vect_recog_mixed_size_cond_pattern,\n\tadjust_bool_pattern_cast, vect_recog_bool_pattern): Use them.\n\n\t* gcc.dg/vect/pr51590.c: New test.\n\nFrom-SVN: r182480", "tree": {"sha": "9153db0977084c8fd5f02c6db40b7202266152ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9153db0977084c8fd5f02c6db40b7202266152ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/083481d85c2d1ee12392667f9b74ea404872b988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083481d85c2d1ee12392667f9b74ea404872b988", "html_url": "https://github.com/Rust-GCC/gccrs/commit/083481d85c2d1ee12392667f9b74ea404872b988", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/083481d85c2d1ee12392667f9b74ea404872b988/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4acd1c8460f069aed1e8c36656e4f7b330763035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4acd1c8460f069aed1e8c36656e4f7b330763035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4acd1c8460f069aed1e8c36656e4f7b330763035"}], "stats": {"total": 104, "additions": 78, "deletions": 26}, "files": [{"sha": "40415075999abc0eb36860e6304b5af184522d4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083481d85c2d1ee12392667f9b74ea404872b988/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083481d85c2d1ee12392667f9b74ea404872b988/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=083481d85c2d1ee12392667f9b74ea404872b988", "patch": "@@ -1,3 +1,14 @@\n+2011-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/51590\n+\tPR tree-optimization/51606\n+\t* tree-vect-patterns.c (append_pattern_def_seq, new_pattern_def_seq):\n+\tNew inline functions.\n+\t(vect_recog_over_widening_pattern,\n+\tvect_recog_vector_vector_shift_pattern,\n+\tvect_recog_sdivmod_pow2_pattern, vect_recog_mixed_size_cond_pattern,\n+\tadjust_bool_pattern_cast, vect_recog_bool_pattern): Use them.\n+\n 2011-12-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/51572"}, {"sha": "97523280bb680ee6a91589a7f4328a2fb81b6cc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083481d85c2d1ee12392667f9b74ea404872b988/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083481d85c2d1ee12392667f9b74ea404872b988/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=083481d85c2d1ee12392667f9b74ea404872b988", "patch": "@@ -1,3 +1,9 @@\n+2011-12-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/51590\n+\tPR tree-optimization/51606\n+\t* gcc.dg/vect/pr51590.c: New test.\n+\n 2011-12-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/51572"}, {"sha": "90075b6e9ee8ae2034dd0b704ac08171cb9ce383", "filename": "gcc/testsuite/gcc.dg/vect/pr51590.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083481d85c2d1ee12392667f9b74ea404872b988/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr51590.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083481d85c2d1ee12392667f9b74ea404872b988/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr51590.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr51590.c?ref=083481d85c2d1ee12392667f9b74ea404872b988", "patch": "@@ -0,0 +1,35 @@\n+/* PR middle-end/51590 */\n+/* { dg-do compile } */\n+\n+struct S { long a, b; };\n+\n+extern void baz (char *);\n+\n+static void\n+bar (struct S *x)\n+{\n+  char c[8];\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    c[i] = x->a >> ((7 - i) * 8);\n+\n+  baz (c);\n+}\n+\n+void\n+foo (const char *x, struct S *y)\n+{\n+  struct S d = *y;\n+  int i;\n+\n+  for (i = 0; *x; x++)\n+    i++;\n+\n+  if (i != 1)\n+    return;\n+\n+  bar (&d);\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3425cdc5f7224fc206bbdc83d5f10b96605c08a9", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/083481d85c2d1ee12392667f9b74ea404872b988/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/083481d85c2d1ee12392667f9b74ea404872b988/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=083481d85c2d1ee12392667f9b74ea404872b988", "patch": "@@ -70,6 +70,19 @@ static vect_recog_func_ptr vect_vect_recog_func_ptrs[NUM_PATTERNS] = {\n \tvect_recog_mixed_size_cond_pattern,\n \tvect_recog_bool_pattern};\n \n+static inline void\n+append_pattern_def_seq (stmt_vec_info stmt_info, gimple stmt)\n+{\n+  gimplify_seq_add_stmt (&STMT_VINFO_PATTERN_DEF_SEQ (stmt_info), stmt);\n+}\n+\n+static inline void\n+new_pattern_def_seq (stmt_vec_info stmt_info, gimple stmt)\n+{\n+  STMT_VINFO_PATTERN_DEF_SEQ (stmt_info) = NULL;\n+  append_pattern_def_seq (stmt_info, stmt);\n+}\n+\n /* Function widened_name_p\n \n    Check whether NAME, an ssa-name used in USE_STMT,\n@@ -1146,8 +1159,7 @@ vect_recog_over_widening_pattern (VEC (gimple, heap) **stmts,\n \t= gimple_build_assign_with_ops (gimple_assign_rhs_code (stmt), var,\n \t\t\t\t\top0, op1);\n       STMT_VINFO_RELATED_STMT (vinfo_for_stmt (stmt)) = pattern_stmt;\n-      STMT_VINFO_PATTERN_DEF_SEQ (vinfo_for_stmt (stmt))\n-\t= gimple_seq_alloc_with_stmt (new_def_stmt);\n+      new_pattern_def_seq (vinfo_for_stmt (stmt), new_def_stmt);\n \n       if (vect_print_dump_info (REPORT_DETAILS))\n         {\n@@ -1559,8 +1571,7 @@ vect_recog_vector_vector_shift_pattern (VEC (gimple, heap) **stmts,\n       def = vect_recog_temp_ssa_var (TREE_TYPE (oprnd0), NULL);\n       def_stmt = gimple_build_assign_with_ops (NOP_EXPR, def, oprnd1,\n \t\t\t\t\t       NULL_TREE);\n-      STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo)\n-\t= gimple_seq_alloc_with_stmt (def_stmt);\n+      new_pattern_def_seq (stmt_vinfo, def_stmt);\n     }\n \n   /* Pattern detected.  */\n@@ -1688,14 +1699,12 @@ vect_recog_sdivmod_pow2_pattern (VEC (gimple, heap) **stmts,\n \t\t\t\t\t\t      build_int_cst (itype,\n \t\t\t\t\t\t\t\t     1)),\n \t\t\t\t\t build_int_cst (itype, 0));\n-      STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo)\n-\t= gimple_seq_alloc_with_stmt (def_stmt);\n+      new_pattern_def_seq (stmt_vinfo, def_stmt);\n       var = vect_recog_temp_ssa_var (itype, NULL);\n       def_stmt\n \t= gimple_build_assign_with_ops (PLUS_EXPR, var, oprnd0,\n \t\t\t\t\tgimple_assign_lhs (def_stmt));\n-      gimplify_seq_add_stmt (&STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo),\n-\t\t\t     def_stmt);\n+      append_pattern_def_seq (stmt_vinfo, def_stmt);\n \n       pattern_stmt\n \t= gimple_build_assign_with_ops (RSHIFT_EXPR,\n@@ -1715,8 +1724,7 @@ vect_recog_sdivmod_pow2_pattern (VEC (gimple, heap) **stmts,\n \t    = gimple_build_assign_with_ops3 (COND_EXPR, signmask, cond,\n \t\t\t\t\t     build_int_cst (itype, 1),\n \t\t\t\t\t     build_int_cst (itype, 0));\n-\t  gimplify_seq_add_stmt (&STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo),\n-\t\t\t\t def_stmt);\n+\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t}\n       else\n \t{\n@@ -1736,8 +1744,7 @@ vect_recog_sdivmod_pow2_pattern (VEC (gimple, heap) **stmts,\n \t  def_stmt_vinfo = new_stmt_vec_info (def_stmt, loop_vinfo, NULL);\n \t  set_vinfo_for_stmt (def_stmt, def_stmt_vinfo);\n \t  STMT_VINFO_VECTYPE (def_stmt_vinfo) = vecutype;\n-\t  gimplify_seq_add_stmt (&STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo),\n-\t\t\t\t def_stmt);\n+\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t  var = vect_recog_temp_ssa_var (utype, NULL);\n \t  def_stmt\n \t    = gimple_build_assign_with_ops (RSHIFT_EXPR, var,\n@@ -1746,21 +1753,18 @@ vect_recog_sdivmod_pow2_pattern (VEC (gimple, heap) **stmts,\n \t  def_stmt_vinfo = new_stmt_vec_info (def_stmt, loop_vinfo, NULL);\n \t  set_vinfo_for_stmt (def_stmt, def_stmt_vinfo);\n \t  STMT_VINFO_VECTYPE (def_stmt_vinfo) = vecutype;\n-\t  gimplify_seq_add_stmt (&STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo),\n-\t\t\t\t def_stmt);\n+\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t  signmask = vect_recog_temp_ssa_var (itype, NULL);\n \t  def_stmt\n \t    = gimple_build_assign_with_ops (NOP_EXPR, signmask, var,\n \t\t\t\t\t    NULL_TREE);\n-\t  gimplify_seq_add_stmt (&STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo),\n-\t\t\t\t def_stmt);\n+\t  append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t}\n       def_stmt\n \t= gimple_build_assign_with_ops (PLUS_EXPR,\n \t\t\t\t\tvect_recog_temp_ssa_var (itype, NULL),\n \t\t\t\t\toprnd0, signmask);\n-      gimplify_seq_add_stmt (&STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo),\n-\t\t\t     def_stmt);\n+      append_pattern_def_seq (stmt_vinfo, def_stmt);\n       def_stmt\n \t= gimple_build_assign_with_ops (BIT_AND_EXPR,\n \t\t\t\t\tvect_recog_temp_ssa_var (itype, NULL),\n@@ -1769,8 +1773,7 @@ vect_recog_sdivmod_pow2_pattern (VEC (gimple, heap) **stmts,\n \t\t\t\t\t\t     oprnd1,\n \t\t\t\t\t\t     build_int_cst (itype,\n \t\t\t\t\t\t\t\t    1)));\n-      gimplify_seq_add_stmt (&STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo),\n-\t\t\t     def_stmt);\n+      append_pattern_def_seq (stmt_vinfo, def_stmt);\n \n       pattern_stmt\n \t= gimple_build_assign_with_ops (MINUS_EXPR,\n@@ -1896,8 +1899,7 @@ vect_recog_mixed_size_cond_pattern (VEC (gimple, heap) **stmts, tree *type_in,\n \t\t\t\t    vect_recog_temp_ssa_var (type, NULL),\n \t\t\t\t    gimple_assign_lhs (def_stmt), NULL_TREE);\n \n-  STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo)\n-    = gimple_seq_alloc_with_stmt (def_stmt);\n+  new_pattern_def_seq (stmt_vinfo, def_stmt);\n   def_stmt_info = new_stmt_vec_info (def_stmt, loop_vinfo, NULL);\n   set_vinfo_for_stmt (def_stmt, def_stmt_info);\n   STMT_VINFO_VECTYPE (def_stmt_info) = vecitype;\n@@ -1994,8 +1996,7 @@ adjust_bool_pattern_cast (tree type, tree var)\n \n   gcc_assert (!STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo));\n   pattern_stmt = STMT_VINFO_RELATED_STMT (stmt_vinfo);\n-  STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo)\n-    = gimple_seq_alloc_with_stmt (pattern_stmt);\n+  new_pattern_def_seq (stmt_vinfo, pattern_stmt);\n   cast_stmt\n     = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t    vect_recog_temp_ssa_var (type, NULL),\n@@ -2304,8 +2305,7 @@ vect_recog_bool_pattern (VEC (gimple, heap) **stmts, tree *type_in,\n \t  tree rhs2 = vect_recog_temp_ssa_var (TREE_TYPE (lhs), NULL);\n \t  gimple cast_stmt\n \t    = gimple_build_assign_with_ops (NOP_EXPR, rhs2, rhs, NULL_TREE);\n-\t  STMT_VINFO_PATTERN_DEF_SEQ (stmt_vinfo)\n-\t    = gimple_seq_alloc_with_stmt (cast_stmt);\n+\t  new_pattern_def_seq (stmt_vinfo, cast_stmt);\n \t  rhs = rhs2;\n \t}\n       pattern_stmt"}]}