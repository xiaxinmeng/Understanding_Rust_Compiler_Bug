{"sha": "9de42a8e995451cb13dceb3970ae23ff88240bff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRlNDJhOGU5OTU0NTFjYjEzZGNlYjM5NzBhZTIzZmY4ODI0MGJmZg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@pc30.home", "date": "2020-03-08T18:52:35Z"}, "committer": {"name": "Paul Thomas", "email": "pault@pc30.home", "date": "2020-03-08T18:52:35Z"}, "message": "Patch and ChangeLogs for PR93581", "tree": {"sha": "06ae5625ee7fb8084328b71c586dbaf22a6ad2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06ae5625ee7fb8084328b71c586dbaf22a6ad2ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9de42a8e995451cb13dceb3970ae23ff88240bff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de42a8e995451cb13dceb3970ae23ff88240bff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de42a8e995451cb13dceb3970ae23ff88240bff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de42a8e995451cb13dceb3970ae23ff88240bff/comments", "author": null, "committer": null, "parents": [{"sha": "5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1b4e60c1823115ba7ff0e8c4b35f6058ad9969"}], "stats": {"total": 90, "additions": 87, "deletions": 3}, "files": [{"sha": "b3ff063045379e0e9723a13a03db119762ca723b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de42a8e995451cb13dceb3970ae23ff88240bff/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de42a8e995451cb13dceb3970ae23ff88240bff/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9de42a8e995451cb13dceb3970ae23ff88240bff", "patch": "@@ -1,3 +1,11 @@\n+2020-03-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/93581\n+\t* resolve.c (gfc_resolve_ref): Modify array refs to be elements\n+\tif the ref chain ends in INQUIRY_LEN.\n+\t* trans-array.c (gfc_get_dataptr_offset): Provide the offsets\n+\tfor INQUIRY_RE and INQUIRY_IM.\n+\n 2020-03-05 Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/93792"}, {"sha": "b5813a7fa74250b41eb06301db0b0ba6095b234c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de42a8e995451cb13dceb3970ae23ff88240bff/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de42a8e995451cb13dceb3970ae23ff88240bff/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9de42a8e995451cb13dceb3970ae23ff88240bff", "patch": "@@ -5199,8 +5199,8 @@ gfc_resolve_substring_charlen (gfc_expr *e)\n bool\n gfc_resolve_ref (gfc_expr *expr)\n {\n-  int current_part_dimension, n_components, seen_part_dimension;\n-  gfc_ref *ref, **prev;\n+  int current_part_dimension, n_components, seen_part_dimension, dim;\n+  gfc_ref *ref, **prev, *array_ref;\n   bool equal_length;\n \n   for (ref = expr->ref; ref; ref = ref->next)\n@@ -5246,12 +5246,14 @@ gfc_resolve_ref (gfc_expr *expr)\n   current_part_dimension = 0;\n   seen_part_dimension = 0;\n   n_components = 0;\n+  array_ref = NULL;\n \n   for (ref = expr->ref; ref; ref = ref->next)\n     {\n       switch (ref->type)\n \t{\n \tcase REF_ARRAY:\n+\t  array_ref = ref;\n \t  switch (ref->u.ar.type)\n \t    {\n \t    case AR_FULL:\n@@ -5267,6 +5269,7 @@ gfc_resolve_ref (gfc_expr *expr)\n \t      break;\n \n \t    case AR_ELEMENT:\n+\t      array_ref = NULL;\n \t      current_part_dimension = 0;\n \t      break;\n \n@@ -5306,7 +5309,33 @@ gfc_resolve_ref (gfc_expr *expr)\n \t  break;\n \n \tcase REF_SUBSTRING:\n+\t  break;\n+\n \tcase REF_INQUIRY:\n+\t  /* Implement requirement in note 9.7 of F2018 that the result of the\n+\t     LEN inquiry be a scalar.  */\n+\t  if (ref->u.i == INQUIRY_LEN && array_ref)\n+\t    {\n+\t      array_ref->u.ar.type = AR_ELEMENT;\n+\t      expr->rank = 0;\n+\t      /* INQUIRY_LEN is not evaluated from the the rest of the expr\n+\t\t but directly from the string length. This means that setting\n+\t\t the array indices to one does not matter but might trigger\n+\t\t a runtime bounds error. Suppress the check.  */\n+\t      expr->no_bounds_check = 1;\n+\t      for (dim = 0; dim < array_ref->u.ar.dimen; dim++)\n+\t\t{\n+\t\t  array_ref->u.ar.dimen_type[dim] = DIMEN_ELEMENT;\n+\t\t  if (array_ref->u.ar.start[dim])\n+\t\t    gfc_free_expr (array_ref->u.ar.start[dim]);\n+\t\t  array_ref->u.ar.start[dim]\n+\t\t\t= gfc_get_int_expr (gfc_default_integer_kind, NULL, 1);\n+\t\t  if (array_ref->u.ar.end[dim])\n+\t\t    gfc_free_expr (array_ref->u.ar.end[dim]);\n+\t\t  if (array_ref->u.ar.stride[dim])\n+\t\t    gfc_free_expr (array_ref->u.ar.stride[dim]);\n+\t\t}\n+\t    }\n \t  break;\n \t}\n "}, {"sha": "a4b1cba85017dddc4fa937f0e0042cc97116ff57", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de42a8e995451cb13dceb3970ae23ff88240bff/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de42a8e995451cb13dceb3970ae23ff88240bff/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=9de42a8e995451cb13dceb3970ae23ff88240bff", "patch": "@@ -6947,6 +6947,24 @@ gfc_get_dataptr_offset (stmtblock_t *block, tree parm, tree desc, tree offset,\n \t      tmp = gfc_build_array_ref (tmp, index, NULL);\n \t      break;\n \n+\t    case REF_INQUIRY:\n+\t      switch (ref->u.i)\n+\t\t{\n+\t\tcase INQUIRY_RE:\n+\t\t  tmp = fold_build1_loc (input_location, REALPART_EXPR,\n+\t\t\t\t\t TREE_TYPE (TREE_TYPE (tmp)), tmp);\n+\t\t  break;\n+\n+\t\tcase INQUIRY_IM:\n+\t\t  tmp = fold_build1_loc (input_location, IMAGPART_EXPR,\n+\t\t\t\t\t TREE_TYPE (TREE_TYPE (tmp)), tmp);\n+\t\t  break;\n+\n+\t\tdefault:\n+\t\t  break;\n+\t\t}\n+\t      break;\n+\n \t    default:\n \t      gcc_unreachable ();\n \t      break;"}, {"sha": "722a473ba77c16ebea496b671ef0cf844d8c5716", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de42a8e995451cb13dceb3970ae23ff88240bff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de42a8e995451cb13dceb3970ae23ff88240bff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9de42a8e995451cb13dceb3970ae23ff88240bff", "patch": "@@ -1,3 +1,8 @@\n+2020-03-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/93581\n+\t* gfortran.dg/inquiry_type_ref_6.f90 : New test.\n+\n 2020-03-08  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/93729\n@@ -20,7 +25,7 @@\n \n 2020-03-06  Wilco Dijkstra  <wdijkstr@arm.com>\n \n-\t* gcc.target/aarch64/fmla_intrinsic_1.c: Check for correct lane syntax.\t\n+\t* gcc.target/aarch64/fmla_intrinsic_1.c: Check for correct lane syntax.\n \t* gcc.target/aarch64/fmls_intrinsic_1.c: Likewise.\n \t* gcc.target/aarch64/mla_intrinsic_1.c: Likewise.\n \t* gcc.target/aarch64/mls_intrinsic_1.c: Likewise."}, {"sha": "ffe09b088aa79ed3368961a045ec3ea842d78d24", "filename": "gcc/testsuite/gfortran.dg/inquiry_type_ref_6.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de42a8e995451cb13dceb3970ae23ff88240bff/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de42a8e995451cb13dceb3970ae23ff88240bff/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_6.f90?ref=9de42a8e995451cb13dceb3970ae23ff88240bff", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do run }\n+! { dg-options \"-fcheck=all\" }\n+!\n+! Test the fix for PR93581 and the implementation of note 9.7 of F2018.\n+! The latter requires that the result of the LEN inquiry be a scalar\n+! even for array expressions.\n+!\n+! Contributed by Gerhard Steinmetz  <gscfq@t-online.de>\n+!\n+program p\n+   complex, target :: z(2) = [(1.0, 2.0),(3.0, 4.0)]\n+   character(:), allocatable, target :: c(:)\n+   real, pointer :: r(:)\n+   character(:), pointer :: s(:)\n+\n+   r => z%re\n+   if (any (r .ne. real (z))) stop 1\n+   r => z%im\n+   if (any (r .ne. imag (z))) stop 2\n+\n+   allocate (c, source = ['abc','def'])\n+   s(-2:-1) => c(1:2)\n+   if (s%len .ne. len (c)) stop 3\n+end"}]}