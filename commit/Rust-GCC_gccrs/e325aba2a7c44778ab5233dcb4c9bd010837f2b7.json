{"sha": "e325aba2a7c44778ab5233dcb4c9bd010837f2b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyNWFiYTJhN2M0NDc3OGFiNTIzM2RjYjRjOWJkMDEwODM3ZjJiNw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-03-20T09:33:11Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-03-20T09:33:11Z"}, "message": "S/390: PR78857: Don't use load and test if result is live.\n\nThe FP load and test instruction should not be used for a comparison\nif the target operand is being used afterwards.  It unfortunately\nturns SNaNs into QNaNs.\n\ngcc/ChangeLog:\n\n2017-03-20  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tPR target/78857\n\t* config/s390/s390.md (\"cmp<mode>_ccs_0\"): Add a clobber of the\n\ttarget operand.  A new splitter adds the clobber statement in case\n\tthe target operand is dead anyway.\n\ngcc/testsuite/ChangeLog:\n\n2017-03-20  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\tPR target/78857\n\t* gcc.target/s390/load-and-test-fp-1.c: New test.\n\t* gcc.target/s390/load-and-test-fp-2.c: New test.\n\nFrom-SVN: r246274", "tree": {"sha": "847bd59b1f3c3df6fda4292ba44e72ac9fff3f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/847bd59b1f3c3df6fda4292ba44e72ac9fff3f69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e325aba2a7c44778ab5233dcb4c9bd010837f2b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e325aba2a7c44778ab5233dcb4c9bd010837f2b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e325aba2a7c44778ab5233dcb4c9bd010837f2b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/comments", "author": null, "committer": null, "parents": [{"sha": "a4dfaae1051ed23cea9aefaefdef156d0f02c1cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4dfaae1051ed23cea9aefaefdef156d0f02c1cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4dfaae1051ed23cea9aefaefdef156d0f02c1cd"}], "stats": {"total": 73, "additions": 71, "deletions": 2}, "files": [{"sha": "70c85b3d094615c99300350cdf7d024c8e602be6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e325aba2a7c44778ab5233dcb4c9bd010837f2b7", "patch": "@@ -1,3 +1,10 @@\n+2017-03-20  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\tPR target/78857\n+\t* config/s390/s390.md (\"cmp<mode>_ccs_0\"): Add a clobber of the\n+\ttarget operand.  A new splitter adds the clobber statement in case\n+\tthe target operand is dead anyway.\n+\n 2017-03-19  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/install.texi (Specific) <sparc-*-linux*>: No longer refer "}, {"sha": "19daf317c107659c7db7cd5294a82c1ebfca7272", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=e325aba2a7c44778ab5233dcb4c9bd010837f2b7", "patch": "@@ -1284,16 +1284,39 @@\n \n ; (TF|DF|SF|TD|DD|SD) instructions\n \n+\n+; load and test instructions turn SNaN into QNaN what is not\n+; acceptable if the target will be used afterwards.  On the other hand\n+; they are quite convenient for implementing comparisons with 0.0. So\n+; try to enable them via splitter if the value isn't needed anymore.\n+\n ; ltxbr, ltdbr, ltebr, ltxtr, ltdtr\n (define_insn \"*cmp<mode>_ccs_0\"\n   [(set (reg CC_REGNUM)\n-        (compare (match_operand:FP 0 \"register_operand\" \"f\")\n-                 (match_operand:FP 1 \"const0_operand\"   \"\")))]\n+\t(compare (match_operand:FP 0 \"register_operand\"  \"f\")\n+\t\t (match_operand:FP 1 \"const0_operand\"    \"\")))\n+   (clobber (match_operand:FP      2 \"register_operand\" \"=0\"))]\n   \"s390_match_ccmode(insn, CCSmode) && TARGET_HARD_FLOAT\"\n   \"lt<xde><bt>r\\t%0,%0\"\n    [(set_attr \"op_type\" \"RRE\")\n     (set_attr \"type\"  \"fsimp<mode>\")])\n \n+(define_split\n+  [(set (match_operand 0 \"cc_reg_operand\")\n+\t(compare (match_operand:FP 1 \"register_operand\")\n+\t\t (match_operand:FP 2 \"const0_operand\")))]\n+  \"TARGET_HARD_FLOAT && REG_P (operands[1]) && dead_or_set_p (insn, operands[1])\"\n+  [(parallel\n+    [(set (match_dup 0) (match_dup 3))\n+     (clobber (match_dup 1))])]\n+ {\n+   /* s390_match_ccmode requires the compare to have the same CC mode\n+      as the CC destination register.  */\n+   operands[3] = gen_rtx_COMPARE (GET_MODE (operands[0]),\n+\t\t\t\t  operands[1], operands[2]);\n+ })\n+\n+\n ; cxtr, cxbr, cdtr, cdbr, cebr, cdb, ceb\n (define_insn \"*cmp<mode>_ccs\"\n   [(set (reg CC_REGNUM)"}, {"sha": "ee5893d305a6ec2b5a0319ec49fae519abab9d81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e325aba2a7c44778ab5233dcb4c9bd010837f2b7", "patch": "@@ -1,3 +1,9 @@\n+2017-03-20  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\tPR target/78857\n+\t* gcc.target/s390/load-and-test-fp-1.c: New test.\n+\t* gcc.target/s390/load-and-test-fp-2.c: New test.\n+\n 2017-03-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/79676"}, {"sha": "b9d59122242c1e7e0e17a9313914b5c90df1998f", "filename": "gcc/testsuite/gcc.target/s390/load-and-test-fp-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-and-test-fp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-and-test-fp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-and-test-fp-1.c?ref=e325aba2a7c44778ab5233dcb4c9bd010837f2b7", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch\" } */\n+\n+/* a is used after the comparison.  We cannot use load and test here\n+   since it would turn SNaNs into QNaNs.  */\n+\n+double gl;\n+\n+double\n+foo (double dummy, double a)\n+{\n+  if (a == 0.0)\n+    gl = 1;\n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"cdbr\\t\" } } */"}, {"sha": "7646fdd5def8cedf44ec45f184c00ebb8b82bdf4", "filename": "gcc/testsuite/gcc.target/s390/load-and-test-fp-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-and-test-fp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e325aba2a7c44778ab5233dcb4c9bd010837f2b7/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-and-test-fp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fload-and-test-fp-2.c?ref=e325aba2a7c44778ab5233dcb4c9bd010837f2b7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+/* a is not used after the comparison.  So we should use load and test\n+   here.  */\n+\n+double gl;\n+\n+void\n+bar (double a)\n+{\n+  if (a == 0.0)\n+    gl = 1;\n+}\n+\n+/* { dg-final { scan-assembler \"ltdbr\\t\" } } */"}]}