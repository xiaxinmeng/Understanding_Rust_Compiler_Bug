{"sha": "32a753506be1d5265b657b4b80aeeae57871bb4c", "node_id": "C_kwDOANBUbNoAKDMyYTc1MzUwNmJlMWQ1MjY1YjY1N2I0YjgwYWVlYWU1Nzg3MWJiNGM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-05-16T12:01:52Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-07-12T13:26:57Z"}, "message": "lto-plugin: implement LDPT_GET_API_VERSION\n\ninclude/ChangeLog:\n\n\t* plugin-api.h (enum linker_api_version): New enum.\n\t(ld_plugin_get_api_version): New.\n\t(enum ld_plugin_tag): Add LDPT_GET_API_VERSION.\n\t(struct ld_plugin_tv): Add tv_get_api_version.\n\nlto-plugin/ChangeLog:\n\n\t* lto-plugin.c (negotiate_api_version): New.\n\t(onload): Negotiate API version.\n\t* Makefile.am: Add -DBASE_VERSION.\n\t* Makefile.in: Regenerate.", "tree": {"sha": "eb50699ea250c8520a588c3647d5be909f69b635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb50699ea250c8520a588c3647d5be909f69b635"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32a753506be1d5265b657b4b80aeeae57871bb4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a753506be1d5265b657b4b80aeeae57871bb4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32a753506be1d5265b657b4b80aeeae57871bb4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32a753506be1d5265b657b4b80aeeae57871bb4c/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "0b61cfc0443a83d1010128146f2602c3e5aaf038", "filename": "include/plugin-api.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a753506be1d5265b657b4b80aeeae57871bb4c/include%2Fplugin-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a753506be1d5265b657b4b80aeeae57871bb4c/include%2Fplugin-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fplugin-api.h?ref=32a753506be1d5265b657b4b80aeeae57871bb4c", "patch": "@@ -483,6 +483,37 @@ enum ld_plugin_level\n   LDPL_FATAL\n };\n \n+/* Contract between a plug-in and a linker.  */\n+\n+enum linker_api_version\n+{\n+   /* The linker/plugin do not implement any of the API levels below, the API\n+       is determined solely via the transfer vector.  */\n+   LAPI_V0,\n+\n+   /* API level v1.  The linker provides get_symbols_v3, add_symbols_v2,\n+      the plugin will use that and not any lower versions.\n+      claim_file is thread-safe on the plugin side and\n+      add_symbols on the linker side.  */\n+   LAPI_V1\n+};\n+\n+/* The linker's interface for API version negotiation.  A plug-in calls\n+  the function (with its IDENTIFIER and VERSION), plus minimal and maximal\n+  version of linker_api_version is provided.  Linker then returns selected\n+  API version and provides its IDENTIFIER and VERSION.  The returned value\n+  by linker must be in range [MINIMAL_API_SUPPORTED, MAXIMAL_API_SUPPORTED].\n+  Identifier pointers remain valid as long as the plugin is loaded.  */\n+\n+typedef\n+int\n+(*ld_plugin_get_api_version) (const char *plugin_identifier,\n+\t\t\t      const char *plugin_version,\n+\t\t\t      int minimal_api_supported,\n+\t\t\t      int maximal_api_supported,\n+\t\t\t      const char **linker_identifier,\n+\t\t\t      const char **linker_version);\n+\n /* Values for the tv_tag field of the transfer vector.  */\n \n enum ld_plugin_tag\n@@ -521,6 +552,7 @@ enum ld_plugin_tag\n   LDPT_REGISTER_NEW_INPUT_HOOK,\n   LDPT_GET_WRAP_SYMBOLS,\n   LDPT_ADD_SYMBOLS_V2,\n+  LDPT_GET_API_VERSION,\n };\n \n /* The plugin transfer vector.  */\n@@ -556,6 +588,7 @@ struct ld_plugin_tv\n     ld_plugin_get_input_section_size tv_get_input_section_size;\n     ld_plugin_register_new_input tv_register_new_input;\n     ld_plugin_get_wrap_symbols tv_get_wrap_symbols;\n+    ld_plugin_get_api_version tv_get_api_version;\n   } tv_u;\n };\n "}, {"sha": "482946e4dd5df7a4897984c44b3a87ac6ea6d4c0", "filename": "lto-plugin/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a753506be1d5265b657b4b80aeeae57871bb4c/lto-plugin%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a753506be1d5265b657b4b80aeeae57871bb4c/lto-plugin%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.am?ref=32a753506be1d5265b657b4b80aeeae57871bb4c", "patch": "@@ -8,7 +8,7 @@ target_noncanonical := @target_noncanonical@\n libexecsubdir := $(libexecdir)/gcc/$(real_target_noncanonical)/$(gcc_version)$(accel_dir_suffix)\n \n AM_CPPFLAGS = -I$(top_srcdir)/../include $(DEFS)\n-AM_CFLAGS = @ac_lto_plugin_warn_cflags@ $(CET_HOST_FLAGS)\n+AM_CFLAGS = @ac_lto_plugin_warn_cflags@ $(CET_HOST_FLAGS) -DBASE_VERSION='\"$(gcc_version)\"'\n # The plug-in depends on pthreads.\n AM_LDFLAGS = -pthread @ac_lto_plugin_ldflags@\n AM_LIBTOOLFLAGS = --tag=disable-static"}, {"sha": "9453bc7d6075d3a3944c05fff23a5e84c0962c79", "filename": "lto-plugin/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a753506be1d5265b657b4b80aeeae57871bb4c/lto-plugin%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a753506be1d5265b657b4b80aeeae57871bb4c/lto-plugin%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FMakefile.in?ref=32a753506be1d5265b657b4b80aeeae57871bb4c", "patch": "@@ -343,7 +343,7 @@ AUTOMAKE_OPTIONS = no-dependencies\n gcc_version := $(shell @get_gcc_base_ver@ $(top_srcdir)/../gcc/BASE-VER)\n libexecsubdir := $(libexecdir)/gcc/$(real_target_noncanonical)/$(gcc_version)$(accel_dir_suffix)\n AM_CPPFLAGS = -I$(top_srcdir)/../include $(DEFS)\n-AM_CFLAGS = @ac_lto_plugin_warn_cflags@ $(CET_HOST_FLAGS)\n+AM_CFLAGS = @ac_lto_plugin_warn_cflags@ $(CET_HOST_FLAGS) -DBASE_VERSION='\"$(gcc_version)\"'\n # The plug-in depends on pthreads.\n AM_LDFLAGS = -pthread @ac_lto_plugin_ldflags@\n AM_LIBTOOLFLAGS = --tag=disable-static"}, {"sha": "e9afd2fb76dc8c3c2fc39d30b3ae923dc0050d32", "filename": "lto-plugin/lto-plugin.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32a753506be1d5265b657b4b80aeeae57871bb4c/lto-plugin%2Flto-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32a753506be1d5265b657b4b80aeeae57871bb4c/lto-plugin%2Flto-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2Flto-plugin.c?ref=32a753506be1d5265b657b4b80aeeae57871bb4c", "patch": "@@ -180,6 +180,10 @@ static ld_plugin_add_input_file add_input_file;\n static ld_plugin_add_input_library add_input_library;\n static ld_plugin_message message;\n static ld_plugin_add_symbols add_symbols, add_symbols_v2;\n+static ld_plugin_get_api_version get_api_version;\n+\n+/* By default, use version LAPI_V0 if there is not negotiation.  */\n+static enum linker_api_version api_version = LAPI_V0;\n \n static struct plugin_file_info *claimed_files = NULL;\n static unsigned int num_claimed_files = 0;\n@@ -1428,6 +1432,43 @@ process_option (const char *option)\n   verbose = verbose || debug;\n }\n \n+/* Negotiate linker API version.  */\n+\n+static void\n+negotiate_api_version (void)\n+{\n+  const char *linker_identifier;\n+  const char *linker_version;\n+\n+  enum linker_api_version supported_api = LAPI_V0;\n+#if HAVE_PTHREAD_LOCKING\n+  supported_api = LAPI_V1;\n+#endif\n+\n+  api_version = get_api_version (\"GCC\", BASE_VERSION, LAPI_V0,\n+\t\t\t\t supported_api, &linker_identifier, &linker_version);\n+  if (api_version > supported_api)\n+    {\n+      fprintf (stderr, \"requested an unsupported API version (%d)\\n\", api_version);\n+      abort ();\n+    }\n+\n+  switch (api_version)\n+    {\n+    case LAPI_V0:\n+      break;\n+    case LAPI_V1:\n+      check (get_symbols_v3, LDPL_FATAL,\n+\t     \"get_symbols_v3 required for API version 1\");\n+      check (add_symbols_v2, LDPL_FATAL,\n+\t     \"add_symbols_v2 required for API version 1\");\n+      break;\n+    default:\n+      fprintf (stderr, \"unsupported API version (%d)\\n\", api_version);\n+      abort ();\n+    }\n+}\n+\n /* Called by a linker after loading the plugin. TV is the transfer vector. */\n \n enum ld_plugin_status\n@@ -1496,12 +1537,18 @@ onload (struct ld_plugin_tv *tv)\n \t  /* We only use this to make user-friendly temp file names.  */\n \t  link_output_name = p->tv_u.tv_string;\n \t  break;\n+\tcase LDPT_GET_API_VERSION:\n+\t  get_api_version = p->tv_u.tv_get_api_version;\n+\t  break;\n \tdefault:\n \t  break;\n \t}\n       p++;\n     }\n \n+  if (get_api_version)\n+    negotiate_api_version ();\n+\n   check (register_claim_file, LDPL_FATAL, \"register_claim_file not found\");\n   check (add_symbols, LDPL_FATAL, \"add_symbols not found\");\n   status = register_claim_file (claim_file_handler);"}]}