{"sha": "a620a228c1d79d4725efd5d6ed5f0ebe398e6787", "node_id": "C_kwDOANBUbNoAKGE2MjBhMjI4YzFkNzlkNDcyNWVmZDVkNmVkNWYwZWJlMzk4ZTY3ODc", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-10T16:19:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-10T16:50:56Z"}, "message": "Add missing type-checking for slice types", "tree": {"sha": "71d2b229aefdbdabb60cde3814a7e87164b9db85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71d2b229aefdbdabb60cde3814a7e87164b9db85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a620a228c1d79d4725efd5d6ed5f0ebe398e6787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a620a228c1d79d4725efd5d6ed5f0ebe398e6787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a620a228c1d79d4725efd5d6ed5f0ebe398e6787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a620a228c1d79d4725efd5d6ed5f0ebe398e6787/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77a49507446b67a6c207b4e4fec3639f536b9eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a49507446b67a6c207b4e4fec3639f536b9eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a49507446b67a6c207b4e4fec3639f536b9eca"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "39bb9d2f8992b33d5d0c4de6ba0804764b4379c8", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620a228c1d79d4725efd5d6ed5f0ebe398e6787/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620a228c1d79d4725efd5d6ed5f0ebe398e6787/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=a620a228c1d79d4725efd5d6ed5f0ebe398e6787", "patch": "@@ -668,6 +668,8 @@ class SliceType : public TypeNoBounds\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRTypeVisitor &vis) override;\n \n+  std::unique_ptr<Type> &get_element_type () { return elem_type; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "6c6546babe6e7c9b8df2da560921bc19432f5027", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620a228c1d79d4725efd5d6ed5f0ebe398e6787/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620a228c1d79d4725efd5d6ed5f0ebe398e6787/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=a620a228c1d79d4725efd5d6ed5f0ebe398e6787", "patch": "@@ -600,5 +600,15 @@ TypeCheckType::visit (HIR::ArrayType &type)\n \t\t\t\t    TyTy::TyVar (base->get_ref ()));\n }\n \n+void\n+TypeCheckType::visit (HIR::SliceType &type)\n+{\n+  TyTy::BaseType *base\n+    = TypeCheckType::Resolve (type.get_element_type ().get ());\n+  translated\n+    = new TyTy::SliceType (type.get_mappings ().get_hirid (), type.get_locus (),\n+\t\t\t   TyTy::TyVar (base->get_ref ()));\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "ef5d4123d7f053a571ae7fd25e88d245b7040456", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a620a228c1d79d4725efd5d6ed5f0ebe398e6787/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a620a228c1d79d4725efd5d6ed5f0ebe398e6787/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.h?ref=a620a228c1d79d4725efd5d6ed5f0ebe398e6787", "patch": "@@ -120,6 +120,8 @@ class TypeCheckType : public TypeCheckBase\n \n   void visit (HIR::ArrayType &type) override;\n \n+  void visit (HIR::SliceType &type) override;\n+\n   void visit (HIR::ReferenceType &type) override\n   {\n     TyTy::BaseType *base\n@@ -338,8 +340,8 @@ class ResolveWhereClauseItem : public TypeCheckBase\n     binding->inherit_bounds (specified_bounds);\n \n     // When we apply these bounds we must lookup which type this binding\n-    // resolves to, as this is the type which will be used during resolution of\n-    // the block.\n+    // resolves to, as this is the type which will be used during resolution\n+    // of the block.\n     NodeId ast_node_id = binding_type_path->get_mappings ().get_nodeid ();\n \n     // then lookup the reference_node_id"}]}