{"sha": "907dd0c784f78b7827efec202b1086f89c68bf26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3ZGQwYzc4NGY3OGI3ODI3ZWZlYzIwMmIxMDg2Zjg5YzY4YmYyNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2009-06-21T20:48:15Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2009-06-21T20:48:15Z"}, "message": "arm.c (thumb1_output_casesi): New function.\n\n\t* arm.c (thumb1_output_casesi): New function.\n\t* arm.h (CASE_VECTOR_PC_RELATIVE): Thumb-1 code is also relative if\n\toptimizing for size or PIC.\n\t(CASE_VECTOR_SHORTEN_MODE): Handle thumb-1.\n\t* arm.md (UNSPEC_THUMB1_CASESI): New constant.\n\t(casesi): Handle Thumb-1 when optimizing for size or PIC.\n\t(thumb1_casesi_internal_pic): New expand rule.\n\t(thumb1_casesi_dispatch): New pattern.\n\t* aout.h (ASM_OUTPUT_ADDR_DIFF_ELT): Use shortened vectors for\n\tthumb-1 mode.\n\t* coff.h (JUMP_TABLES_IN_TEXT_SECTION): Thumb-1 jump tables are now\n\tin the text seciton when PIC or optimizing for size.\n\t* elf.h (JUMP_TABLES_IN_TEXT_SECTION): Likewise.\n\t* lib1funcs.asm ([__ARM_EABI__]): Add an attribute describing stack\n\tpreservation properties of code.\n\t(__gnu_thumb1_case_sqi, __gnu_thumb1_case_uqi): New functions.\n\t(__gnu_thumb1_case_shi, __gnu_thumb1_case_uhi): New functions.\n\t(__gnu_thumb1_case_si): New function.\n\t* t-arm (LIB1ASMSRC): Define here.\n\t(LIB1ASMFUNCS): Add some common functions.\n\t* t-arm-elf (LIB1ASMSRC): Delete.\n\t(LIB1ASMFUNCS): Append to existing set.\n\t* t-pe (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n\t* t-strongarm-elf (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n\t* t-symbian (LIB1ASMFUNCS): Likewise.\n\t* t-vxworks (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n\t* t-wince-pe (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n\nFrom-SVN: r148770", "tree": {"sha": "4b6f82a78d699b5ed38c958f1fe3733a74b71b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b6f82a78d699b5ed38c958f1fe3733a74b71b05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/907dd0c784f78b7827efec202b1086f89c68bf26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907dd0c784f78b7827efec202b1086f89c68bf26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907dd0c784f78b7827efec202b1086f89c68bf26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907dd0c784f78b7827efec202b1086f89c68bf26/comments", "author": null, "committer": null, "parents": [{"sha": "dfb55fdcdb68bba326432b26f3828ff8c9ca2990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb55fdcdb68bba326432b26f3828ff8c9ca2990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb55fdcdb68bba326432b26f3828ff8c9ca2990"}], "stats": {"total": 322, "additions": 278, "deletions": 44}, "files": [{"sha": "308a1f73373ada12a08c21f7f18e5ad341779f53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -1,3 +1,33 @@\n+2009-06-21  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (thumb1_output_casesi): New function.\n+\t* arm.h (CASE_VECTOR_PC_RELATIVE): Thumb-1 code is also relative if\n+\toptimizing for size or PIC.\n+\t(CASE_VECTOR_SHORTEN_MODE): Handle thumb-1.\n+\t* arm.md (UNSPEC_THUMB1_CASESI): New constant.\n+\t(casesi): Handle Thumb-1 when optimizing for size or PIC.\n+\t(thumb1_casesi_internal_pic): New expand rule.\n+\t(thumb1_casesi_dispatch): New pattern.\n+\t* aout.h (ASM_OUTPUT_ADDR_DIFF_ELT): Use shortened vectors for\n+\tthumb-1 mode.\n+\t* coff.h (JUMP_TABLES_IN_TEXT_SECTION): Thumb-1 jump tables are now\n+\tin the text seciton when PIC or optimizing for size.\n+\t* elf.h (JUMP_TABLES_IN_TEXT_SECTION): Likewise.\n+\t* lib1funcs.asm ([__ARM_EABI__]): Add an attribute describing stack\n+\tpreservation properties of code.\n+\t(__gnu_thumb1_case_sqi, __gnu_thumb1_case_uqi): New functions.\n+\t(__gnu_thumb1_case_shi, __gnu_thumb1_case_uhi): New functions.\n+\t(__gnu_thumb1_case_si): New function.\n+\t* t-arm (LIB1ASMSRC): Define here.\n+\t(LIB1ASMFUNCS): Add some common functions.\n+\t* t-arm-elf (LIB1ASMSRC): Delete.\n+\t(LIB1ASMFUNCS): Append to existing set.\n+\t* t-pe (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n+\t* t-strongarm-elf (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n+\t* t-symbian (LIB1ASMFUNCS): Likewise.\n+\t* t-vxworks (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n+\t* t-wince-pe (LIB1ASMSRC, LIB1ASMFUNCS): Likewise.\n+\n 2009-06-21  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/38729"}, {"sha": "5abad67dd69046875639c49f2398bcbe7cab82ff", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -243,7 +243,30 @@\n       if (TARGET_ARM)\t\t\t\t\t\t\t\\\n \tasm_fprintf (STREAM, \"\\tb\\t%LL%d\\n\", VALUE);\t\t\t\\\n       else if (TARGET_THUMB1)\t\t\t\t\t\t\\\n-\tasm_fprintf (STREAM, \"\\t.word\\t%LL%d-%LL%d\\n\", VALUE, REL);\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  if (flag_pic || optimize_size)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      switch (GET_MODE(body))\t\t\t\t\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\tcase QImode:\t\t\t\t\t\t\\\n+\t\t  asm_fprintf (STREAM, \"\\t.byte\\t(%LL%d-%LL%d)/2\\n\",\t\\\n+\t\t\t       VALUE, REL);\t\t\t\t\\\n+\t\t  break;\t\t\t\t\t\t\\\n+\t\tcase HImode: /* TBH */\t\t\t\t\t\\\n+\t\t  asm_fprintf (STREAM, \"\\t.2byte\\t(%LL%d-%LL%d)/2\\n\",\t\\\n+\t\t\t       VALUE, REL);\t\t\t\t\\\n+\t\t  break;\t\t\t\t\t\t\\\n+\t\tcase SImode:\t\t\t\t\t\t\\\n+\t\t  asm_fprintf (STREAM, \"\\t.word\\t%LL%d-%LL%d\\n\",\t\\\n+\t\t\t       VALUE, REL);\t\t\t\t\\\n+\t\t  break;\t\t\t\t\t\t\\\n+\t\tdefault:\t\t\t\t\t\t\\\n+\t\t  gcc_unreachable();\t\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    asm_fprintf (STREAM, \"\\t.word\\t%LL%d+1\\n\", VALUE);\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n       else /* Thumb-2 */\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  switch (GET_MODE(body))\t\t\t\t\t\\"}, {"sha": "07772eb8c88d908995bea9d21e10cfe35464ff05", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -183,7 +183,8 @@ extern rtx arm_return_addr (int, rtx);\n extern void thumb_reload_out_hi (rtx *);\n extern void thumb_reload_in_hi (rtx *);\n extern void thumb_set_return_address (rtx, rtx);\n-extern const char *thumb2_output_casesi(rtx *);\n+extern const char *thumb1_output_casesi (rtx *);\n+extern const char *thumb2_output_casesi (rtx *);\n #endif\n \n /* Defined in pe.c.  */"}, {"sha": "6f615c59312816b10f41a683ff500cd0d8884554", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -19860,6 +19860,32 @@ arm_output_shift(rtx * operands, int set_flags)\n   return \"\";\n }\n \n+/* Output a Thumb-1 casesi dispatch sequence.  */\n+const char *\n+thumb1_output_casesi (rtx *operands)\n+{\n+  rtx diff_vec = PATTERN (next_real_insn (operands[0]));\n+  addr_diff_vec_flags flags;\n+\n+  gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n+\n+  flags = ADDR_DIFF_VEC_FLAGS (diff_vec);\n+\n+  switch (GET_MODE(diff_vec))\n+    {\n+    case QImode:\n+      return (ADDR_DIFF_VEC_FLAGS (diff_vec).offset_unsigned ? \n+\t      \"bl\\t%___gnu_thumb1_case_uqi\" : \"bl\\t%___gnu_thumb1_case_sqi\");\n+    case HImode:\n+      return (ADDR_DIFF_VEC_FLAGS (diff_vec).offset_unsigned ? \n+\t      \"bl\\t%___gnu_thumb1_case_uhi\" : \"bl\\t%___gnu_thumb1_case_shi\");\n+    case SImode:\n+      return \"bl\\t%___gnu_thumb1_case_si\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Output a Thumb-2 casesi instruction.  */\n const char *\n thumb2_output_casesi (rtx *operands)"}, {"sha": "98115d8a1408ae258356bf3de11041df1daa76c5", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -2196,12 +2196,24 @@ typedef struct\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-#define CASE_VECTOR_PC_RELATIVE TARGET_THUMB2\n-\n-#define CASE_VECTOR_SHORTEN_MODE(min, max, body)\t\t\\\n-   ((min < 0 || max >= 0x2000 || !TARGET_THUMB2) ? SImode\t\\\n-   : (max >= 0x200) ? HImode\t\t\t\t\t\\\n-   : QImode)\n+#define CASE_VECTOR_PC_RELATIVE (TARGET_THUMB2\t\t\t\t\\\n+\t\t\t\t || (TARGET_THUMB\t\t\t\\\n+\t\t\t\t     && (optimize_size || flag_pic)))\n+\n+#define CASE_VECTOR_SHORTEN_MODE(min, max, body)\t\t\t\\\n+  (TARGET_THUMB\t\t\t\t\t\t\t\t\\\n+   ? (min >= 0 && max < 512\t\t\t\t\t\t\\\n+      ? (ADDR_DIFF_VEC_FLAGS (body).offset_unsigned = 1, QImode)\t\\\n+      : min >= -256 && max < 256\t\t\t\t\t\\\n+      ? (ADDR_DIFF_VEC_FLAGS (body).offset_unsigned = 0, QImode)\t\\\n+      : min >= 0 && max < 8192\t\t\t\t\t\t\\\n+      ? (ADDR_DIFF_VEC_FLAGS (body).offset_unsigned = 1, HImode)\t\\\n+      : min >= -4096 && max < 4096\t\t\t\t\t\\\n+      ? (ADDR_DIFF_VEC_FLAGS (body).offset_unsigned = 0, HImode)\t\\\n+      : SImode)\t\t\t\t\t\t\t\t\\\n+   : ((min < 0 || max >= 0x2000 || !TARGET_THUMB2) ? SImode\t\t\\\n+      : (max >= 0x200) ? HImode\t\t\t\t\t\t\\\n+      : QImode))\n \n /* signed 'char' is most compatible, but RISC OS wants it unsigned.\n    unsigned is probably best, but may break some code.  */"}, {"sha": "47972424dbff4b565905f6a02533ed39f5ad3c45", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -99,6 +99,7 @@\n \t\t\t  ; correctly for PIC usage.\n    (UNSPEC_GOTSYM_OFF 24) ; The offset of the start of the the GOT from a\n \t\t\t  ; a given symbolic address.\n+   (UNSPEC_THUMB1_CASESI 25) ; A Thumb1 compressed dispatch-table call.\n   ]\n )\n \n@@ -8901,37 +8902,33 @@\n    (match_operand:SI 2 \"const_int_operand\" \"\")\t; total range\n    (match_operand:SI 3 \"\" \"\")\t\t\t; table label\n    (match_operand:SI 4 \"\" \"\")]\t\t\t; Out of range label\n-  \"TARGET_32BIT\"\n+  \"TARGET_32BIT || optimize_size || flag_pic\"\n   \"\n   {\n-    rtx reg;\n+    enum insn_code code;\n     if (operands[1] != const0_rtx)\n       {\n-\treg = gen_reg_rtx (SImode);\n+\trtx reg = gen_reg_rtx (SImode);\n \n \temit_insn (gen_addsi3 (reg, operands[0],\n \t\t\t       GEN_INT (-INTVAL (operands[1]))));\n \toperands[0] = reg;\n       }\n \n-    if (!const_ok_for_arm (INTVAL (operands[2])))\n-      operands[2] = force_reg (SImode, operands[2]);\n-\n     if (TARGET_ARM)\n-      {\n-\temit_jump_insn (gen_arm_casesi_internal (operands[0], operands[2],\n-\t\t\t\t\t\t operands[3], operands[4]));\n-      }\n+      code = CODE_FOR_arm_casesi_internal;\n+    else if (TARGET_THUMB)\n+      code = CODE_FOR_thumb1_casesi_internal_pic;\n     else if (flag_pic)\n-      {\n-\temit_jump_insn (gen_thumb2_casesi_internal_pic (operands[0],\n-\t    operands[2], operands[3], operands[4]));\n-      }\n+      code = CODE_FOR_thumb2_casesi_internal_pic;\n     else\n-      {\n-\temit_jump_insn (gen_thumb2_casesi_internal (operands[0], operands[2],\n-\t\t\t\t\t\t    operands[3], operands[4]));\n-      }\n+      code = CODE_FOR_thumb2_casesi_internal;\n+\n+    if (!insn_data[(int) code].operand[1].predicate(operands[2], SImode))\n+      operands[2] = force_reg (SImode, operands[2]);\n+\n+    emit_jump_insn (GEN_FCN ((int) code) (operands[0], operands[2],\n+\t\t\t\t\t  operands[3], operands[4]));\n     DONE;\n   }\"\n )\n@@ -8958,6 +8955,37 @@\n    (set_attr \"length\" \"12\")]\n )\n \n+(define_expand \"thumb1_casesi_internal_pic\"\n+  [(match_operand:SI 0 \"s_register_operand\" \"\")\n+   (match_operand:SI 1 \"thumb1_cmp_operand\" \"\")\n+   (match_operand 2 \"\" \"\")\n+   (match_operand 3 \"\" \"\")]\n+  \"TARGET_THUMB\"\n+  {\n+    rtx reg0;\n+    rtx test = gen_rtx_GTU (VOIDmode, operands[0], operands[1]);\n+    emit_jump_insn (gen_cbranchsi4 (test, operands[0], operands[1],\n+\t\t\t\t    operands[3]));\n+    reg0 = gen_rtx_REG (SImode, 0);\n+    emit_move_insn (reg0, operands[0]);\n+    emit_jump_insn (gen_thumb1_casesi_dispatch (operands[2]/*, operands[3]*/));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"thumb1_casesi_dispatch\"\n+  [(parallel [(set (pc) (unspec [(reg:SI 0)\n+\t\t\t\t (label_ref (match_operand 0 \"\" \"\"))\n+;;\t\t\t\t (label_ref (match_operand 1 \"\" \"\"))\n+]\n+\t\t\t UNSPEC_THUMB1_CASESI))\n+\t      (clobber (reg:SI IP_REGNUM))\n+              (clobber (reg:SI LR_REGNUM))])]\n+  \"TARGET_THUMB\"\n+  \"* return thumb1_output_casesi(operands);\"\n+  [(set_attr \"length\" \"4\")]\n+)\n+\n (define_expand \"indirect_jump\"\n   [(set (pc)\n \t(match_operand:SI 0 \"s_register_operand\" \"\"))]"}, {"sha": "bd3e6f85dd480739ed633df4b3fd2d32460fdc43", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -60,8 +60,9 @@\n    Otherwise, the readonly data section is used.  */\n /* We put ARM and Thumb-2 jump tables in the text section, because it makes\n    the code more efficient, but for Thumb-1 it's better to put them out of\n-   band.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION (TARGET_32BIT)\n+   band unless we are generating compressed tables.  */\n+#define JUMP_TABLES_IN_TEXT_SECTION\t\t\t\t\t\\\n+   (TARGET_32BIT || (TARGET_THUMB && (optimize_size || flag_pic)))\n \n #undef  READONLY_DATA_SECTION_ASM_OP\n #define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section .rdata\""}, {"sha": "88400884ec19378d1d100a85145a900bb6a8060a", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -100,8 +100,9 @@\n    Otherwise, the readonly data section is used.  */\n /* We put ARM and Thumb-2 jump tables in the text section, because it makes\n    the code more efficient, but for Thumb-1 it's better to put them out of\n-   band.  */\n-#define JUMP_TABLES_IN_TEXT_SECTION (TARGET_32BIT)\n+   band unless we are generating compressed tables.  */\n+#define JUMP_TABLES_IN_TEXT_SECTION\t\t\t\t\t\\\n+   (TARGET_32BIT || (TARGET_THUMB && (optimize_size || flag_pic)))\n \n #ifndef LINK_SPEC\n #define LINK_SPEC \"%{mbig-endian:-EB} %{mlittle-endian:-EL} -X\""}, {"sha": "987bfcb3ba44c83346fb5d114f1711cb582caee1", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 116, "deletions": 2, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -27,8 +27,17 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined(__ELF__) && defined(__linux__)\n .section .note.GNU-stack,\"\",%progbits\n .previous\n-#endif\n-\n+#endif  /* __ELF__ and __linux__ */\n+\n+#ifdef __ARM_EABI__\n+/* Some attributes that are common to all routines in this file.  */\n+\t/* Tag_ABI_align8_needed: This code does not require 8-byte\n+\t   alignment from the caller.  */\n+\t/* .eabi_attribute 24, 0  -- default setting.  */\n+\t/* Tag_ABI_align8_preserved: This code preserves 8-byte \n+\t   alignment in any callee.  */\n+\t.eabi_attribute 25, 1\n+#endif /* __ARM_EABI__ */\n /* ------------------------------------------------------------------------ */\n \n /* We need to know what prefix to add to function names.  */\n@@ -1533,6 +1542,111 @@ LSYM(Lchange_\\register):\n \t\n #endif /* L_interwork_call_via_rX */\n #endif /* !__thumb2__ */\n+\n+/* Functions to support compact pic switch tables in thumb1 state.\n+   All these routines take an index into the table in r0.  The\n+   table is at LR & ~1 (but this must be rounded up in the case\n+   of 32-bit entires).  They are only permitted to clobber r12\n+   and r14 and r0 must be preserved on exit.  */\n+#ifdef L_thumb1_case_sqi\n+\t\n+\t.text\n+\t.align 0\n+        .force_thumb\n+\t.syntax unified\n+\tTHUMB_FUNC_START __gnu_thumb1_case_sqi\n+\tpush\t{r1}\n+\tmov\tr1, lr\n+\tlsrs\tr1, r1, #1\n+\tlsls\tr1, r1, #1\n+\tldrsb\tr1, [r1, r0]\n+\tlsls\tr1, r1, #1\n+\tadd\tlr, lr, r1\n+\tpop\t{r1}\n+\tbx\tlr\n+\tSIZE (__gnu_thumb1_case_sqi)\n+#endif\n+\n+#ifdef L_thumb1_case_uqi\n+\t\n+\t.text\n+\t.align 0\n+        .force_thumb\n+\t.syntax unified\n+\tTHUMB_FUNC_START __gnu_thumb1_case_uqi\n+\tpush\t{r1}\n+\tmov\tr1, lr\n+\tlsrs\tr1, r1, #1\n+\tlsls\tr1, r1, #1\n+\tldrb\tr1, [r1, r0]\n+\tlsls\tr1, r1, #1\n+\tadd\tlr, lr, r1\n+\tpop\t{r1}\n+\tbx\tlr\n+\tSIZE (__gnu_thumb1_case_uqi)\n+#endif\n+\n+#ifdef L_thumb1_case_shi\n+\t\n+\t.text\n+\t.align 0\n+        .force_thumb\n+\t.syntax unified\n+\tTHUMB_FUNC_START __gnu_thumb1_case_shi\n+\tpush\t{r0, r1}\n+\tmov\tr1, lr\n+\tlsrs\tr1, r1, #1\n+\tlsls\tr0, r0, #1\n+\tlsls\tr1, r1, #1\n+\tldrsh\tr1, [r1, r0]\n+\tlsls\tr1, r1, #1\n+\tadd\tlr, lr, r1\n+\tpop\t{r0, r1}\n+\tbx\tlr\n+\tSIZE (__gnu_thumb1_case_shi)\n+#endif\n+\n+#ifdef L_thumb1_case_uhi\n+\t\n+\t.text\n+\t.align 0\n+        .force_thumb\n+\t.syntax unified\n+\tTHUMB_FUNC_START __gnu_thumb1_case_uhi\n+\tpush\t{r0, r1}\n+\tmov\tr1, lr\n+\tlsrs\tr1, r1, #1\n+\tlsls\tr0, r0, #1\n+\tlsls\tr1, r1, #1\n+\tldrh\tr1, [r1, r0]\n+\tlsls\tr1, r1, #1\n+\tadd\tlr, lr, r1\n+\tpop\t{r0, r1}\n+\tbx\tlr\n+\tSIZE (__gnu_thumb1_case_uhi)\n+#endif\n+\n+#ifdef L_thumb1_case_si\n+\t\n+\t.text\n+\t.align 0\n+        .force_thumb\n+\t.syntax unified\n+\tTHUMB_FUNC_START __gnu_thumb1_case_si\n+\tpush\t{r0, r1}\n+\tmov\tr1, lr\n+\tadds.n\tr1, r1, #2\t/* Align to word.  */\n+\tlsrs\tr1, r1, #2\n+\tlsls\tr0, r0, #2\n+\tlsls\tr1, r1, #2\n+\tldr\tr0, [r1, r0]\n+\tadds\tr0, r0, r1\n+\tmov\tlr, r0\n+\tpop\t{r0, r1}\n+\tmov\tpc, lr\t\t/* We know we were called from thumb code.  */\n+\tSIZE (__gnu_thumb1_case_si)\n+#endif\n+\n #endif /* Arch supports thumb.  */\n \n #ifndef __symbian__"}, {"sha": "de2bbc4ca687ba595a6daa0a4552fa1f9aa1bfce", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -33,6 +33,9 @@ MD_INCLUDES= \t$(srcdir)/config/arm/arm-tune.md \\\n \t\t$(srcdir)/config/arm/neon.md \\\n \t\t$(srcdir)/config/arm/thumb2.md\n \n+LIB1ASMSRC = arm/lib1funcs.asm\n+LIB1ASMFUNCS = _thumb1_case_sqi _thumb1_case_uqi _thumb1_case_shi \\\n+\t_thumb1_case_uhi _thumb1_case_si\n s-config s-conditions s-flags s-codes s-constants s-emit s-recog s-preds \\\n \ts-opinit s-extract s-peep s-attr s-attrtab s-output: $(MD_INCLUDES)\n "}, {"sha": "6a90d3311489e712eedbd5d3210bee4e2f61906a", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -17,20 +17,19 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-LIB1ASMSRC = arm/lib1funcs.asm\n # For most CPUs we have an assembly soft-float implementations.\n # However this is not true for ARMv6M.  Here we want to use the soft-fp C\n # implementation.  The soft-fp code is only build for ARMv6M.  This pulls\n # in the asm implementation for other CPUs.\n-LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func \\\n+LIB1ASMFUNCS += _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func \\\n \t_call_via_rX _interwork_call_via_rX \\\n \t_lshrdi3 _ashrdi3 _ashldi3 \\\n \t_arm_negdf2 _arm_addsubdf3 _arm_muldivdf3 _arm_cmpdf2 _arm_unorddf2 \\\n \t_arm_fixdfsi _arm_fixunsdfsi \\\n \t_arm_truncdfsf2 _arm_negsf2 _arm_addsubsf3 _arm_muldivsf3 \\\n \t_arm_cmpsf2 _arm_unordsf2 _arm_fixsfsi _arm_fixunssfsi \\\n \t_arm_floatdidf _arm_floatdisf _arm_floatundidf _arm_floatundisf \\\n-\t_clzsi2 _clzdi2\n+\t_clzsi2 _clzdi2 \n \n MULTILIB_OPTIONS     = marm/mthumb\n MULTILIB_DIRNAMES    = arm thumb"}, {"sha": "8adfd1f90c25031dc664085c86e9293e3d4febdd", "filename": "gcc/config/arm/t-pe", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-pe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-pe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-pe?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -17,8 +17,7 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-LIB1ASMSRC = arm/lib1funcs.asm\n-LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _call_via_rX _interwork_call_via_rX _clzsi2 _clzdi2\n+LIB1ASMFUNCS += _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _call_via_rX _interwork_call_via_rX _clzsi2 _clzdi2\n \n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries."}, {"sha": "64d7ca69499044ed74d9b03e84e81ec9dabf7e6b", "filename": "gcc/config/arm/t-strongarm-elf", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-strongarm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-strongarm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-strongarm-elf?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -16,8 +16,7 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-LIB1ASMSRC = arm/lib1funcs.asm\n-LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _clzsi2 _clzdi2\n+LIB1ASMFUNCS += _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _clzsi2 _clzdi2\n \n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries."}, {"sha": "4a1476f6791aed115855d6dd99d228979243c8ba", "filename": "gcc/config/arm/t-symbian", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-symbian", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-symbian", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-symbian?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -16,7 +16,7 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-LIB1ASMFUNCS = _bb_init_func _call_via_rX _interwork_call_via_rX _clzsi2 _clzdi2\n+LIB1ASMFUNCS += _bb_init_func _call_via_rX _interwork_call_via_rX _clzsi2 _clzdi2\n \n # These functions have __aeabi equivalents and will never be called by GCC.  \n # By putting them in LIB1ASMFUNCS, we avoid the standard libgcc2.c code being"}, {"sha": "af01ac412dbe53f6c14b0949cd2603ec19751bdc", "filename": "gcc/config/arm/t-vxworks", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-vxworks", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-vxworks", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-vxworks?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -16,8 +16,7 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-LIB1ASMSRC = arm/lib1funcs.asm\n-LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _call_via_rX _interwork_call_via_rX _clzsi2 _clzdi2\n+LIB1ASMFUNCS += _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func _call_via_rX _interwork_call_via_rX _clzsi2 _clzdi2\n \n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries."}, {"sha": "54fabc8a21eff1d46ea2881566abc9ed9879bf13", "filename": "gcc/config/arm/t-wince-pe", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-wince-pe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907dd0c784f78b7827efec202b1086f89c68bf26/gcc%2Fconfig%2Farm%2Ft-wince-pe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-wince-pe?ref=907dd0c784f78b7827efec202b1086f89c68bf26", "patch": "@@ -16,8 +16,7 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n-LIB1ASMSRC = arm/lib1funcs.asm\n-LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _call_via_rX _interwork_call_via_rX _clzsi2 _clzdi2\n+LIB1ASMFUNCS += _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _call_via_rX _interwork_call_via_rX _clzsi2 _clzdi2\n \n # We want fine grained libraries, so use the new code to build the\n # floating point emulation libraries."}]}