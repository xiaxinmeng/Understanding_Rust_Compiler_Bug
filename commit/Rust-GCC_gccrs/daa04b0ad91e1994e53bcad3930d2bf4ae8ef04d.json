{"sha": "daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFhMDRiMGFkOTFlMTk5NGU1M2JjYWQzOTMwZDJiZjRhZThlZjA0ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-06-26T18:15:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-06-26T18:15:36Z"}, "message": "N3994 Ranged-based for-loops: The Next Generation\n\n\tN3994 Ranged-based for-loops: The Next Generation\n\t* parser.c (cp_lexer_nth_token_is): New.\n\t(cp_parser_for_init_statement): Allow \"for (id : init)\".\n\nFrom-SVN: r212043", "tree": {"sha": "990824d09a9ea0a4b8fc22d0d4fa5540abc9e645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/990824d09a9ea0a4b8fc22d0d4fa5540abc9e645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da73100b48932e7e01669993031fd694ed1590b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da73100b48932e7e01669993031fd694ed1590b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da73100b48932e7e01669993031fd694ed1590b2"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "669e7144f6869343ac993ba1898278fccdc5d559", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d", "patch": "@@ -1,3 +1,9 @@\n+2014-06-26  Jason Merrill  <jason@redhat.com>\n+\n+\tN3994 Ranged-based for-loops: The Next Generation\n+\t* parser.c (cp_lexer_nth_token_is): New.\n+\t(cp_parser_for_init_statement): Allow \"for (id : init)\".\n+\n 2014-06-26  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/61537"}, {"sha": "426dca439de4b29050a43cc086d26f47b4c3f8a6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d", "patch": "@@ -891,6 +891,12 @@ cp_lexer_next_token_is_keyword (cp_lexer* lexer, enum rid keyword)\n   return cp_lexer_peek_token (lexer)->keyword == keyword;\n }\n \n+static inline bool\n+cp_lexer_nth_token_is (cp_lexer* lexer, size_t n, enum cpp_ttype type)\n+{\n+  return cp_lexer_peek_nth_token (lexer, n)->type == type;\n+}\n+\n static inline bool\n cp_lexer_nth_token_is_keyword (cp_lexer* lexer, size_t n, enum rid keyword)\n {\n@@ -10607,6 +10613,23 @@ cp_parser_for_init_statement (cp_parser* parser, tree *decl)\n       bool is_range_for = false;\n       bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;\n \n+      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME)\n+\t  && cp_lexer_nth_token_is (parser->lexer, 2, CPP_COLON))\n+\t{\n+\t  /* N3994 -- for (id : init) ... */\n+\t  if (cxx_dialect < cxx1z)\n+\t    pedwarn (input_location, 0, \"range-based for loop without a \"\n+\t\t     \"type-specifier only available with \"\n+\t\t     \"-std=c++1z or -std=gnu++1z\");\n+\t  tree name = cp_parser_identifier (parser);\n+\t  tree type = cp_build_reference_type (make_auto (), /*rval*/true);\n+\t  *decl = build_decl (input_location, VAR_DECL, name, type);\n+\t  pushdecl (*decl);\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  return true;\n+\t}\n+\n+      /* A colon is used in range-based for.  */\n       parser->colon_corrects_to_scope_p = false;\n \n       /* We're going to speculatively look for a declaration, falling back"}, {"sha": "7e6d05580c899559edd3ce7b09cdc407e7920689", "filename": "gcc/testsuite/g++.dg/cpp1z/range-for1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Frange-for1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Frange-for1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Frange-for1.C?ref=daa04b0ad91e1994e53bcad3930d2bf4ae8ef04d", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=c++1z -pedantic-errors\" }\n+\n+extern \"C\" int printf (const char *, ...);\n+#include <initializer_list>\n+\n+int main()\n+{\n+  for (i : {1,2})\n+    {\n+      printf (\"%d \", i);\n+    }\n+}"}]}