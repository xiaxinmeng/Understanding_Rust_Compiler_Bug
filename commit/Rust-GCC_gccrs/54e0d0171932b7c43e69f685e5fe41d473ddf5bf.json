{"sha": "54e0d0171932b7c43e69f685e5fe41d473ddf5bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlMGQwMTcxOTMyYjdjNDNlNjlmNjg1ZTVmZTQxZDQ3M2RkZjViZg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-27T12:00:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-27T12:00:22Z"}, "message": "Merge #529\n\n529: Marking live symbol in break, return, while, whilelet, for expr r=philberty a=thomasyonug\n\nMarking live symbol in break, return, while, whilelet, for expr without test case for last two due to unimplemented.\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>", "tree": {"sha": "4377b51b6e97974561e71d148b73b31cc3fe3426", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4377b51b6e97974561e71d148b73b31cc3fe3426"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54e0d0171932b7c43e69f685e5fe41d473ddf5bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg2GhWCRBK7hj4Ov3rIwAA+zgIAB2ON40LJQUjDuX02Wz+hdWe\n2JyqqudN2Q2TrVWD58LZNs4nOOpfc/B0EkZ5rZjC6vWsvGei5wCBNzlzDuTflJKN\nSUX7SI7FLmeA6ePgy1i6hkVQlCbd91LbqEii/ZS+mxWQTOaLLIJSBZk00nzRik4V\n9r42rQ/5wj2v7WSSyi4gQpV8skEel+7Lzh+0OIde3Il8BFXER9fl+Lx0eU4a3i0d\ngEFIxuNd+9jLdIcJUOfVflsdIcXEcYxbB2suZumBkKE1V0nG3nStWf13THCRTnWg\nxNXIzuRYXxk32LFROO7DmBbc0M2rwja+moQwsqsiTV4COfeLHXeFVgRfLxdQ1kc=\n=bq8N\n-----END PGP SIGNATURE-----\n", "payload": "tree 4377b51b6e97974561e71d148b73b31cc3fe3426\nparent 51d86210d3dcbbf4dea14149f90ad9087b006f6a\nparent 5ff37842fb091ebc79d87b5e7770bc335f2a8591\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624795222 +0000\ncommitter GitHub <noreply@github.com> 1624795222 +0000\n\nMerge #529\n\n529: Marking live symbol in break, return, while, whilelet, for expr r=philberty a=thomasyonug\n\nMarking live symbol in break, return, while, whilelet, for expr without test case for last two due to unimplemented.\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e0d0171932b7c43e69f685e5fe41d473ddf5bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e0d0171932b7c43e69f685e5fe41d473ddf5bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d86210d3dcbbf4dea14149f90ad9087b006f6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d86210d3dcbbf4dea14149f90ad9087b006f6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d86210d3dcbbf4dea14149f90ad9087b006f6a"}, {"sha": "5ff37842fb091ebc79d87b5e7770bc335f2a8591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ff37842fb091ebc79d87b5e7770bc335f2a8591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ff37842fb091ebc79d87b5e7770bc335f2a8591"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "681ccf8ad65b4e0e50c9da777f92deaf87674b17", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=54e0d0171932b7c43e69f685e5fe41d473ddf5bf", "patch": "@@ -3387,6 +3387,8 @@ class WhileLetLoopExpr : public BaseLoopExpr\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_cond () { return condition; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -3450,6 +3452,8 @@ class ForLoopExpr : public BaseLoopExpr\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_iterator_expr () { return iterator_expr; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "d34587d4f86ab831d1670a198fabbd4d9405dd2f", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=54e0d0171932b7c43e69f685e5fe41d473ddf5bf", "patch": "@@ -103,11 +103,46 @@ class MarkLive : public MarkLiveBase\n       }\n   }\n \n+  void visit (HIR::LoopExpr &expr) override\n+  {\n+    expr.get_loop_block ()->accept_vis (*this);\n+  }\n+\n+  void visit (HIR::BreakExpr &expr) override\n+  {\n+    if (expr.has_break_expr ())\n+      expr.get_expr ()->accept_vis (*this);\n+  }\n+\n+  void visit (HIR::WhileLoopExpr &expr) override\n+  {\n+    expr.get_loop_block ()->accept_vis (*this);\n+    expr.get_predicate_expr ()->accept_vis (*this);\n+  }\n+\n   void visit (HIR::Function &function) override\n   {\n     function.get_definition ().get ()->accept_vis (*this);\n   }\n \n+  void visit (HIR::ReturnExpr &expr) override\n+  {\n+    if (expr.has_return_expr ())\n+      expr.get_expr ()->accept_vis (*this);\n+  }\n+\n+  void visit (HIR::WhileLetLoopExpr &expr) override\n+  {\n+    expr.get_loop_block ()->accept_vis (*this);\n+    expr.get_cond ()->accept_vis (*this);\n+  }\n+\n+  void visit (HIR::ForLoopExpr &expr) override\n+  {\n+    expr.get_loop_block ()->accept_vis (*this);\n+    expr.get_iterator_expr ()->accept_vis (*this);\n+  }\n+\n   void visit (HIR::ExprStmtWithoutBlock &stmt) override\n   {\n     stmt.get_expr ()->accept_vis (*this);"}, {"sha": "043e91c9502d95651b6b396d4cbc2228442672fa", "filename": "gcc/testsuite/rust/compile/torture/break_function.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbreak_function.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbreak_function.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbreak_function.rs?ref=54e0d0171932b7c43e69f685e5fe41d473ddf5bf", "patch": "@@ -0,0 +1,10 @@\n+fn foo() -> i32 {\n+    1\n+}\n+    \n+fn main() {\n+    let _a = loop {\n+        break foo();\n+    };\n+}\n+    \n\\ No newline at end of file"}, {"sha": "084adaf7f24e222b39bb166263da1786b56bbd48", "filename": "gcc/testsuite/rust/compile/torture/return_function.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Freturn_function.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Freturn_function.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Freturn_function.rs?ref=54e0d0171932b7c43e69f685e5fe41d473ddf5bf", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {}\n+\n+fn main() {\n+    return foo();\n+}"}, {"sha": "014db902769583016f9950f04bb8c9a0a816597c", "filename": "gcc/testsuite/rust/compile/torture/while_function.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fwhile_function.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e0d0171932b7c43e69f685e5fe41d473ddf5bf/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fwhile_function.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fwhile_function.rs?ref=54e0d0171932b7c43e69f685e5fe41d473ddf5bf", "patch": "@@ -0,0 +1,10 @@\n+fn foo() {}\n+fn bar() -> i32 { return 10; }\n+\n+fn main() {\n+\tlet mut i = 1;\n+\twhile i < bar() {\n+\t\tfoo();\n+\t\ti += 1;\n+\t}\n+}"}]}