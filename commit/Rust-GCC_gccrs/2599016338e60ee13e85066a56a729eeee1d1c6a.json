{"sha": "2599016338e60ee13e85066a56a729eeee1d1c6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU5OTAxNjMzOGU2MGVlMTNlODUwNjZhNTZhNzI5ZWVlZTFkMWM2YQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2013-11-06T08:52:57Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2013-11-06T08:52:57Z"}, "message": "gcc.c (do_spec_1): Do not insert a space after a %* substitution unless...\n\n\t* gcc.c (do_spec_1): Do not insert a space after a %* substitution\n\tunless it is the last part of a spec substring.\n\t* doc/invoke.texi (Spec Files): Document space insertion\n\tbehaviour of %*.\n\nFrom-SVN: r204446", "tree": {"sha": "7c682cc0a2517f0b34973fb818f8165d3051203b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c682cc0a2517f0b34973fb818f8165d3051203b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2599016338e60ee13e85066a56a729eeee1d1c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2599016338e60ee13e85066a56a729eeee1d1c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2599016338e60ee13e85066a56a729eeee1d1c6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2599016338e60ee13e85066a56a729eeee1d1c6a/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a1a7897b7376b8634dfc4862540b02c691b626d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a1a7897b7376b8634dfc4862540b02c691b626d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a1a7897b7376b8634dfc4862540b02c691b626d"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "f5409b761514edfe8cb89951e87e524452b0f572", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599016338e60ee13e85066a56a729eeee1d1c6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599016338e60ee13e85066a56a729eeee1d1c6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2599016338e60ee13e85066a56a729eeee1d1c6a", "patch": "@@ -1,3 +1,10 @@\n+2013-11-06  Nick Clifton  <nickc@redhat.com>\n+\n+\t* gcc.c (do_spec_1): Do not insert a space after a %* substitution\n+\tunless it is the last part of a spec substring.\n+\t* doc/invoke.texi (Spec Files): Document space insertion\n+\tbehaviour of %*.\n+\n 2013-11-06  Christian Bruel  <christian.bruel@st.com>\n \n \t* gcc/config/sh/sh-mem.cc (sh_expand_cmpnstr, sh_expand_cmpstr):"}, {"sha": "b933b2a58c06c0c08be38f005e35598666d483dc", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599016338e60ee13e85066a56a729eeee1d1c6a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599016338e60ee13e85066a56a729eeee1d1c6a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2599016338e60ee13e85066a56a729eeee1d1c6a", "patch": "@@ -10874,6 +10874,22 @@ appears somewhere in @code{X}, then @code{X} is substituted once\n for each matching switch, with the @code{%*} replaced by the part of\n that switch matching the @code{*}.\n \n+If @code{%*} appears as the last part of a spec sequence then a space\n+will be added after the end of the last substitution.  If there is more\n+text in the sequence however then a space will not be generated.  This\n+allows the @code{%*} substitution to be used as part of a larger\n+string.  For example, a spec string like this:\n+\n+@smallexample\n+%@{mcu=*:--script=%*/memory.ld@}\n+@end smallexample\n+\n+when matching an option like @code{-mcu=newchip} will produce:\n+\n+@smallexample\n+--script=newchip/memory.ld\n+@end smallexample\n+\n @item %@{.@code{S}:@code{X}@}\n Substitutes @code{X}, if processing a file with suffix @code{S}.\n \n@@ -17791,10 +17807,6 @@ These options are defined for the MSP430:\n \n @table @gcctabopt\n \n-@item -msim\n-@opindex msim\n-Link the simulator runtime libraries.\n-\n @item -masm-hex\n @opindex masm-hex\n Force assembly output to always use hex constants.  Normally such\n@@ -17803,9 +17815,25 @@ testsuite and/or aesthetic purposes.\n \n @item -mmcu=\n @opindex mmcu=\n-Select the MCU to target.  Note that there are two ``generic'' MCUs,\n-@code{msp430} and @code{msp430x}, which should be used most of the\n-time.  This option is also passed to the assembler.\n+Select the MCU to target.  If the MCU supports the MSP430X ISA or the\n+MSP430Xv2 ISA then gcc will make use of the extra instructions.  A C\n+preprocessor symbol will be defined based upon the MCU name, converted\n+to upper case and pre- and post- fixed with @code{__}.\n+\n+In addition two scripts will be added to the linker command line:\n+@code{memory.ld} and @code{peripherals.ld}, with a search path based\n+upon the MCU name.\n+\n+Note that there are three ``generic'' MCUs: @code{msp430},\n+@code{msp430x} and @code{msp430xv2}, which can be used if a specific\n+MCU is not being targeted.\n+\n+This option is also passed on to the assembler.\n+\n+@item -msim\n+@opindex msim\n+Link to the simulator runtime libraries and linker script.  Overrides\n+any scripts that would be selected by the @option{-mmcu=} option.\n \n @item -mlarge\n @opindex mlarge"}, {"sha": "83607e55f9eb84181bae54b4d5ad102df3c4d9d2", "filename": "gcc/gcc.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599016338e60ee13e85066a56a729eeee1d1c6a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599016338e60ee13e85066a56a729eeee1d1c6a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=2599016338e60ee13e85066a56a729eeee1d1c6a", "patch": "@@ -388,7 +388,8 @@ or with constant text in a single argument.\n  %2\tprocess CC1PLUS_SPEC as a spec.\n  %*\tsubstitute the variable part of a matched option.  (See below.)\n \tNote that each comma in the substituted string is replaced by\n-\ta single space.\n+\ta single space.  A space is appended after the last substition\n+\tunless there is more text in current sequence.\n  %<S    remove all occurrences of -S from the command line.\n         Note - this command is position dependent.  % commands in the\n         spec string before this one will see -S, % commands in the\n@@ -422,7 +423,9 @@ or with constant text in a single argument.\n           once, no matter how many such switches appeared.  However,\n           if %* appears somewhere in X, then X will be substituted\n           once for each matching switch, with the %* replaced by the\n-          part of that switch that matched the '*'.\n+          part of that switch that matched the '*'.  A space will be\n+\t  appended after the last substition unless there is more\n+\t  text in current sequence.\n  %{.S:X}  substitutes X, if processing a file with suffix S.\n  %{!.S:X} substitutes X, if NOT processing a file with suffix S.\n  %{,S:X}  substitutes X, if processing a file which will use spec S.\n@@ -5352,7 +5355,17 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t      {\n \t\tif (soft_matched_part[0])\n \t\t  do_spec_1 (soft_matched_part, 1, NULL);\n-\t\tdo_spec_1 (\" \", 0, NULL);\n+\t\t/* Only insert a space after the substitution if it is at the\n+\t\t   end of the current sequence.  So if:\n+\n+\t\t     \"%{foo=*:bar%*}%{foo=*:one%*two}\"\n+\n+\t\t   matches -foo=hello then it will produce:\n+\t\t   \n+\t\t     barhello onehellotwo\n+\t\t*/\n+\t\tif (*p == 0 || *p == '}')\n+\t\t  do_spec_1 (\" \", 0, NULL);\n \t      }\n \t    else\n \t      /* Catch the case where a spec string contains something like"}]}