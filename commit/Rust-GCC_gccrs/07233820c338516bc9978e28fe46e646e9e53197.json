{"sha": "07233820c338516bc9978e28fe46e646e9e53197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcyMzM4MjBjMzM4NTE2YmM5OTc4ZTI4ZmU0NmU2NDZlOWU1MzE5Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-12-08T11:48:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-12-08T11:48:04Z"}, "message": "nlists.adb (Prepend_Debug): Remove parameters and nest within Prepend.\n\n\t* nlists.adb (Prepend_Debug): Remove parameters and nest within\n\tPrepend.\n\t(Remove_Next_Debug): Same fix\n\n\t* nlists.ads: Correct bad comments for Prev and Prev_Non_Pragma (we do\n\tmaintain back pointers now, though we did not used to, and comments\n\twere out of date).\n\t(Prepend): Remove pragma Inline.\n\t(Remove_Next): Same cleanup\n\nFrom-SVN: r91891", "tree": {"sha": "8eb9b566c04c31e158f9705dd3f8bd6cc02f7d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eb9b566c04c31e158f9705dd3f8bd6cc02f7d56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07233820c338516bc9978e28fe46e646e9e53197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07233820c338516bc9978e28fe46e646e9e53197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07233820c338516bc9978e28fe46e646e9e53197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07233820c338516bc9978e28fe46e646e9e53197/comments", "author": null, "committer": null, "parents": [{"sha": "6a2b39bdda1bb40449552e3b7617653b63cefac9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a2b39bdda1bb40449552e3b7617653b63cefac9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a2b39bdda1bb40449552e3b7617653b63cefac9"}], "stats": {"total": 193, "additions": 97, "deletions": 96}, "files": [{"sha": "1517fed4642c0ab41ffdbacabdf84ae713e056a4", "filename": "gcc/ada/nlists.adb", "status": "modified", "additions": 86, "deletions": 81, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07233820c338516bc9978e28fe46e646e9e53197/gcc%2Fada%2Fnlists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07233820c338516bc9978e28fe46e646e9e53197/gcc%2Fada%2Fnlists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.adb?ref=07233820c338516bc9978e28fe46e646e9e53197", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -106,14 +106,6 @@ package body Nlists is\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Prepend_Debug (Node : Node_Id; To : List_Id);\n-   pragma Inline (Prepend_Debug);\n-   --  Output debug information if Debug_Flag_N set\n-\n-   procedure Remove_Next_Debug (Node : Node_Id);\n-   pragma Inline (Remove_Next_Debug);\n-   --  Output debug information if Debug_Flag_N set\n-\n    procedure Set_First (List : List_Id; To : Node_Id);\n    pragma Inline (Set_First);\n    --  Sets First field of list header List to reference To\n@@ -155,6 +147,10 @@ package body Nlists is\n       pragma Inline (Append_Debug);\n       --  Output debug information if Debug_Flag_N set\n \n+      ------------------\n+      -- Append_Debug --\n+      ------------------\n+\n       procedure Append_Debug is\n       begin\n          if Debug_Flag_N then\n@@ -202,6 +198,10 @@ package body Nlists is\n       pragma Inline (Append_List_Debug);\n       --  Output debug information if Debug_Flag_N set\n \n+      -----------------------\n+      -- Append_List_Debug --\n+      -----------------------\n+\n       procedure Append_List_Debug is\n       begin\n          if Debug_Flag_N then\n@@ -288,9 +288,6 @@ package body Nlists is\n    -- First --\n    -----------\n \n-   --  This subprogram is deliberately placed early on, out of alphabetical\n-   --  order, so that it can be properly inlined from within this unit.\n-\n    function First (List : List_Id) return Node_Id is\n    begin\n       if List = No_List then\n@@ -349,6 +346,10 @@ package body Nlists is\n       pragma Inline (Insert_After_Debug);\n       --  Output debug information if Debug_Flag_N set\n \n+      ------------------------\n+      -- Insert_After_Debug --\n+      ------------------------\n+\n       procedure Insert_After_Debug is\n       begin\n          if Debug_Flag_N then\n@@ -403,6 +404,10 @@ package body Nlists is\n       pragma Inline (Insert_Before_Debug);\n       --  Output debug information if Debug_Flag_N set\n \n+      -------------------------\n+      -- Insert_Before_Debug --\n+      -------------------------\n+\n       procedure Insert_Before_Debug is\n       begin\n          if Debug_Flag_N then\n@@ -457,6 +462,10 @@ package body Nlists is\n       pragma Inline (Insert_List_After_Debug);\n       --  Output debug information if Debug_Flag_N set\n \n+      -----------------------------\n+      -- Insert_List_After_Debug --\n+      -----------------------------\n+\n       procedure Insert_List_After_Debug is\n       begin\n          if Debug_Flag_N then\n@@ -520,6 +529,10 @@ package body Nlists is\n       pragma Inline (Insert_List_Before_Debug);\n       --  Output debug information if Debug_Flag_N set\n \n+      ------------------------------\n+      -- Insert_List_Before_Debug --\n+      ------------------------------\n+\n       procedure Insert_List_Before_Debug is\n       begin\n          if Debug_Flag_N then\n@@ -604,9 +617,6 @@ package body Nlists is\n    -- Last --\n    ----------\n \n-   --  This subprogram is deliberately placed early on, out of alphabetical\n-   --  order, so that it can be properly inlined from within this unit.\n-\n    function Last (List : List_Id) return Node_Id is\n    begin\n       pragma Assert (List in First_List_Id .. Lists.Last);\n@@ -779,6 +789,10 @@ package body Nlists is\n       pragma Inline (New_List_Debug);\n       --  Output debugging information if Debug_Flag_N is set\n \n+      --------------------\n+      -- New_List_Debug --\n+      --------------------\n+\n       procedure New_List_Debug is\n       begin\n          if Debug_Flag_N then\n@@ -816,6 +830,10 @@ package body Nlists is\n       pragma Inline (New_List_Debug);\n       --  Output debugging information if Debug_Flag_N is set\n \n+      --------------------\n+      -- New_List_Debug --\n+      --------------------\n+\n       procedure New_List_Debug is\n       begin\n          if Debug_Flag_N then\n@@ -856,15 +874,13 @@ package body Nlists is\n \n    function New_List (Node1, Node2 : Node_Id) return List_Id is\n       L : constant List_Id := New_List (Node1);\n-\n    begin\n       Append (Node2, L);\n       return L;\n    end New_List;\n \n    function New_List (Node1, Node2, Node3 : Node_Id) return List_Id is\n       L : constant List_Id := New_List (Node1);\n-\n    begin\n       Append (Node2, L);\n       Append (Node3, L);\n@@ -873,7 +889,6 @@ package body Nlists is\n \n    function New_List (Node1, Node2, Node3, Node4 : Node_Id) return List_Id is\n       L : constant List_Id := New_List (Node1);\n-\n    begin\n       Append (Node2, L);\n       Append (Node3, L);\n@@ -886,11 +901,9 @@ package body Nlists is\n       Node2 : Node_Id;\n       Node3 : Node_Id;\n       Node4 : Node_Id;\n-      Node5 : Node_Id)\n-      return  List_Id\n+      Node5 : Node_Id) return List_Id\n    is\n       L : constant List_Id := New_List (Node1);\n-\n    begin\n       Append (Node2, L);\n       Append (Node3, L);\n@@ -905,11 +918,9 @@ package body Nlists is\n       Node3 : Node_Id;\n       Node4 : Node_Id;\n       Node5 : Node_Id;\n-      Node6 : Node_Id)\n-      return  List_Id\n+      Node6 : Node_Id) return List_Id\n    is\n       L : constant List_Id := New_List (Node1);\n-\n    begin\n       Append (Node2, L);\n       Append (Node3, L);\n@@ -923,9 +934,6 @@ package body Nlists is\n    -- Next --\n    ----------\n \n-   --  This subprogram is deliberately placed early on, out of alphabetical\n-   --  order, so that it can be properly inlined from within this unit.\n-\n    function Next (Node : Node_Id) return Node_Id is\n    begin\n       pragma Assert (Is_List_Member (Node));\n@@ -958,7 +966,7 @@ package body Nlists is\n       loop\n          N := Next (N);\n          exit when Nkind (N) /= N_Pragma\n-                    and then\n+                     and then\n                    Nkind (N) /= N_Null_Statement;\n       end loop;\n \n@@ -974,9 +982,6 @@ package body Nlists is\n    -- No --\n    --------\n \n-   --  This subprogram is deliberately placed early on, out of alphabetical\n-   --  order, so that it can be properly inlined from within this unit.\n-\n    function No (List : List_Id) return Boolean is\n    begin\n       return List = No_List;\n@@ -999,10 +1004,8 @@ package body Nlists is\n    begin\n       if U in Node_Range then\n          return Parent (Node_Id (U));\n-\n       elsif U in List_Range then\n          return Parent (List_Id (U));\n-\n       else\n          return 99_999_999;\n       end if;\n@@ -1041,14 +1044,35 @@ package body Nlists is\n    procedure Prepend (Node : Node_Id; To : List_Id) is\n       F : constant Node_Id := First (To);\n \n+      procedure Prepend_Debug;\n+      pragma Inline (Prepend_Debug);\n+      --  Output debug information if Debug_Flag_N set\n+\n+      -------------------\n+      -- Prepend_Debug --\n+      -------------------\n+\n+      procedure Prepend_Debug is\n+      begin\n+         if Debug_Flag_N then\n+            Write_Str (\"Prepend node \");\n+            Write_Int (Int (Node));\n+            Write_Str (\" to list \");\n+            Write_Int (Int (To));\n+            Write_Eol;\n+         end if;\n+      end Prepend_Debug;\n+\n+   --  Start of processing for Prepend_Debug\n+\n    begin\n       pragma Assert (not Is_List_Member (Node));\n \n       if Node = Error then\n          return;\n       end if;\n \n-      pragma Debug (Prepend_Debug (Node, To));\n+      pragma Debug (Prepend_Debug);\n \n       if No (F) then\n          Set_Last (To, Node);\n@@ -1065,21 +1089,6 @@ package body Nlists is\n       Set_List_Link (Node, To);\n    end Prepend;\n \n-   -------------------\n-   -- Prepend_Debug --\n-   -------------------\n-\n-   procedure Prepend_Debug (Node : Node_Id; To : List_Id) is\n-   begin\n-      if Debug_Flag_N then\n-         Write_Str (\"Prepend node \");\n-         Write_Int (Int (Node));\n-         Write_Str (\" to list \");\n-         Write_Int (Int (To));\n-         Write_Eol;\n-      end if;\n-   end Prepend_Debug;\n-\n    ----------------\n    -- Prepend_To --\n    ----------------\n@@ -1102,9 +1111,6 @@ package body Nlists is\n    -- Prev --\n    ----------\n \n-   --  This subprogram is deliberately placed early on, out of alphabetical\n-   --  order, so that it can be properly inlined from within this unit.\n-\n    function Prev (Node : Node_Id) return Node_Id is\n    begin\n       pragma Assert (Is_List_Member (Node));\n@@ -1160,6 +1166,10 @@ package body Nlists is\n       pragma Inline (Remove_Debug);\n       --  Output debug information if Debug_Flag_N set\n \n+      ------------------\n+      -- Remove_Debug --\n+      ------------------\n+\n       procedure Remove_Debug is\n       begin\n          if Debug_Flag_N then\n@@ -1201,6 +1211,10 @@ package body Nlists is\n       pragma Inline (Remove_Head_Debug);\n       --  Output debug information if Debug_Flag_N set\n \n+      -----------------------\n+      -- Remove_Head_Debug --\n+      -----------------------\n+\n       procedure Remove_Head_Debug is\n       begin\n          if Debug_Flag_N then\n@@ -1245,14 +1259,33 @@ package body Nlists is\n    function Remove_Next (Node : Node_Id) return Node_Id is\n       Nxt : constant Node_Id := Next (Node);\n \n+      procedure Remove_Next_Debug;\n+      pragma Inline (Remove_Next_Debug);\n+      --  Output debug information if Debug_Flag_N set\n+\n+      -----------------------\n+      -- Remove_Next_Debug --\n+      -----------------------\n+\n+      procedure Remove_Next_Debug is\n+      begin\n+         if Debug_Flag_N then\n+            Write_Str (\"Remove next node after \");\n+            Write_Int (Int (Node));\n+            Write_Eol;\n+         end if;\n+      end Remove_Next_Debug;\n+\n+   --  Start of processing for Remove_Next\n+\n    begin\n       if Present (Nxt) then\n          declare\n             Nxt2 : constant Node_Id := Next (Nxt);\n             LC   : constant List_Id := List_Containing (Node);\n \n          begin\n-            pragma Debug (Remove_Next_Debug (Node));\n+            pragma Debug (Remove_Next_Debug);\n             Set_Next (Node, Nxt2);\n \n             if No (Nxt2) then\n@@ -1269,26 +1302,10 @@ package body Nlists is\n       return Nxt;\n    end Remove_Next;\n \n-   -----------------------\n-   -- Remove_Next_Debug --\n-   -----------------------\n-\n-   procedure Remove_Next_Debug (Node : Node_Id) is\n-   begin\n-      if Debug_Flag_N then\n-         Write_Str (\"Remove next node after \");\n-         Write_Int (Int (Node));\n-         Write_Eol;\n-      end if;\n-   end Remove_Next_Debug;\n-\n    ---------------\n    -- Set_First --\n    ---------------\n \n-   --  This subprogram is deliberately placed early on, out of alphabetical\n-   --  order, so that it can be properly inlined from within this unit.\n-\n    procedure Set_First (List : List_Id; To : Node_Id) is\n    begin\n       Lists.Table (List).First := To;\n@@ -1298,9 +1315,6 @@ package body Nlists is\n    -- Set_Last --\n    --------------\n \n-   --  This subprogram is deliberately placed early on, out of alphabetical\n-   --  order, so that it can be properly inlined from within this unit.\n-\n    procedure Set_Last (List : List_Id; To : Node_Id) is\n    begin\n       Lists.Table (List).Last := To;\n@@ -1310,9 +1324,6 @@ package body Nlists is\n    -- Set_List_Link --\n    -------------------\n \n-   --  This subprogram is deliberately placed early on, out of alphabetical\n-   --  order, so that it can be properly inlined from within this unit.\n-\n    procedure Set_List_Link (Node : Node_Id; To : List_Id) is\n    begin\n       Nodes.Table (Node).Link := Union_Id (To);\n@@ -1322,9 +1333,6 @@ package body Nlists is\n    -- Set_Next --\n    --------------\n \n-   --  This subprogram is deliberately placed early on, out of alphabetical\n-   --  order, so that it can be properly inlined from within this unit.\n-\n    procedure Set_Next (Node : Node_Id; To : Node_Id) is\n    begin\n       Next_Node.Table (Node) := To;\n@@ -1344,9 +1352,6 @@ package body Nlists is\n    -- Set_Prev --\n    --------------\n \n-   --  This subprogram is deliberately placed early on, out of alphabetical\n-   --  order, so that it can be properly inlined from within this unit.\n-\n    procedure Set_Prev (Node : Node_Id; To : Node_Id) is\n    begin\n       Prev_Node.Table (Node) := To;"}, {"sha": "b3d9e86dcdac3870aaa5de483e2a3445148240a2", "filename": "gcc/ada/nlists.ads", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07233820c338516bc9978e28fe46e646e9e53197/gcc%2Fada%2Fnlists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07233820c338516bc9978e28fe46e646e9e53197/gcc%2Fada%2Fnlists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.ads?ref=07233820c338516bc9978e28fe46e646e9e53197", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -89,8 +89,7 @@ package Nlists is\n       Node2 : Node_Id;\n       Node3 : Node_Id;\n       Node4 : Node_Id;\n-      Node5 : Node_Id)\n-      return  List_Id;\n+      Node5 : Node_Id) return List_Id;\n    --  Build a new list initially containing the five given nodes\n \n    function New_List\n@@ -99,9 +98,8 @@ package Nlists is\n       Node3 : Node_Id;\n       Node4 : Node_Id;\n       Node5 : Node_Id;\n-      Node6 : Node_Id)\n-      return  List_Id;\n-   --  Build a new list initially containing the five given nodes\n+      Node6 : Node_Id) return List_Id;\n+   --  Build a new list initially containing the six given nodes\n \n    function New_Copy_List (List : List_Id) return List_Id;\n    --  Creates a new list containing copies (made with Atree.New_Copy) of every\n@@ -174,11 +172,10 @@ package Nlists is\n \n    function Prev (Node : Node_Id) return Node_Id;\n    pragma Inline (Prev);\n-   --  This function returns the previous node on a node list list, or Empty if\n-   --  Node is the first element of the node list. The argument must be a\n-   --  member of a node list. Note that the implementation does not maintain\n-   --  back pointers, so this function potentially requires traversal of the\n-   --  entire list, or more accurately of the part of the list preceding Node.\n+   --  This function returns the previous node on a node list list, or Empty\n+   --  if Node is the first element of the node list. The argument must be\n+   --  a member of a node list. Note: the implementation does maintain back\n+   --  pointers, so this function executes quickly in constant time.\n \n    function Pick (List : List_Id; Index : Pos) return Node_Id;\n    --  Given a list, picks out the Index'th entry (1 = first entry). The\n@@ -193,8 +190,9 @@ package Nlists is\n    --  This function returns the previous node on a node list, skipping any\n    --  pragmas. If Node is the first element of the list, or if the only\n    --  elements preceding it are pragmas, then Empty is returned. The\n-   --  argument must be a member of a node list. Like Prev, this function\n-   --  may require expensive traversal of the head section of the list.\n+   --  argument must be a member of a node list. Note: the implementation\n+   --  does maintain back pointers, so this function executes quickly in\n+   --  constant time.\n \n    procedure Prev_Non_Pragma (Node : in out Node_Id);\n    pragma Inline (Prev_Non_Pragma);\n@@ -261,7 +259,6 @@ package Nlists is\n    --  List is reset to be the empty node list.\n \n    procedure Prepend (Node : Node_Id; To : List_Id);\n-   pragma Inline (Prepend);\n    --  Prepends Node at the start of node list To. Node must be a non-empty\n    --  node that is not already a member of a node list, and To must be a\n    --  node list. An attempt to prepend an error node is ignored without\n@@ -281,7 +278,6 @@ package Nlists is\n    --  is empty, then Empty is returned.\n \n    function Remove_Next (Node : Node_Id) return Node_Id;\n-   pragma Inline (Remove_Next);\n    --  Removes the item immediately following the given node, and returns it\n    --  as the result. If Node is the last element of the list, then Empty is\n    --  returned. Node must be a member of a list. Unlike Remove, Remove_Next"}]}