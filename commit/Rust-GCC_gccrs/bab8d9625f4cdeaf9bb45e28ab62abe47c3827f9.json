{"sha": "bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFiOGQ5NjI1ZjRjZGVhZjliYjQ1ZTI4YWI2MmFiZTQ3YzM4MjdmOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-04T08:32:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-04T08:32:41Z"}, "message": "cselib: Don't consider SP_DERIVED_VALUE_P values as useless [PR94468]\n\nThe following testcase ICEs, because at one point we see the\nSP_DERIVED_VALUE_P VALUE as useless (not PRESERVED_VALUE_P and no locs)\nand so expect it to be discarded as useless.  But, later on we\nare adding some new VALUE that is equivalent to it, and when adding\nthe equivalency that that new VALUE is equal to this SP_DERIVED_VALUE_P,\nnew_elt_loc_list has code for VALUE canonicalization and reverses addition\nif uid is smaller, and at that point a new loc is added to the\nSP_DERIVED_VALUE_P VALUE and it isn't discarded as useless anymore.\nNow, I think we don't want to discard the SP_DERIVED_VALUE_P values\neven if they have no locs, because they still have the special behaviour\nthat they then force other new VALUEs to be canonicalized against them,\nwhich is what this patch implements.  I've not set PRESERVED_VALUE_P\non the SP_DERIVED_VALUE_P at the creation time, because whether a VALUE\nis preserved or not is something that affects var-tracking decisions quite a\nlot and we shouldn't set it blindly on other VALUEs.\n\nOr, to avoid the repetitive code, should I introduce\nstatic bool\ncselib_useless_value_p (cselib_val *v)\n{\n  return (v->locs == 0\n\t  && !PRESERVED_VALUE_P (v->val_rtx)\n\t  && !SP_DERIVED_VALUE_P (v->val_rtx)));\n}\npredicate and use it in those 6 spots?\n\n2020-04-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/94468\n\t* cselib.c (references_value_p): Formatting fix.\n\t(cselib_useless_value_p): New function.\n\t(discard_useless_locs, discard_useless_values,\n\tcselib_invalidate_regno_val, cselib_invalidate_mem,\n\tcselib_record_set): Use it instead of\n\tv->locs == 0 && !PRESERVED_VALUE_P (v->val_rtx).\n\n\t* g++.dg/opt/pr94468.C: New test.", "tree": {"sha": "4b1b689de6455e09cd57be365985ec0d659dab72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b1b689de6455e09cd57be365985ec0d659dab72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aae5d08a8d4dcee576a85ea76febe56c53675ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae5d08a8d4dcee576a85ea76febe56c53675ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae5d08a8d4dcee576a85ea76febe56c53675ef2"}], "stats": {"total": 94, "additions": 86, "deletions": 8}, "files": [{"sha": "0221945fe6cc683f40208fa7b226d92fc20ad2ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9", "patch": "@@ -1,5 +1,13 @@\n 2020-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/94468\n+\t* cselib.c (references_value_p): Formatting fix.\n+\t(cselib_useless_value_p): New function.\n+\t(discard_useless_locs, discard_useless_values,\n+\tcselib_invalidate_regno_val, cselib_invalidate_mem,\n+\tcselib_record_set): Use it instead of\n+\tv->locs == 0 && !PRESERVED_VALUE_P (v->val_rtx).\n+\n \tPR debug/94441\n \t* tree-iterator.h (expr_single): Declare.\n \t* tree-iterator.c (expr_single): New function."}, {"sha": "256bd7852070b0d7ab8224ffa58bd451b144a9f6", "filename": "gcc/cselib.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9", "patch": "@@ -629,8 +629,8 @@ references_value_p (const_rtx x, int only_useless)\n   int i, j;\n \n   if (GET_CODE (x) == VALUE\n-      && (! only_useless ||\n-\t  (CSELIB_VAL_PTR (x)->locs == 0 && !PRESERVED_VALUE_P (x))))\n+      && (! only_useless\n+\t  || (CSELIB_VAL_PTR (x)->locs == 0 && !PRESERVED_VALUE_P (x))))\n     return 1;\n \n   for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n@@ -646,6 +646,16 @@ references_value_p (const_rtx x, int only_useless)\n   return 0;\n }\n \n+/* Return true if V is a useless VALUE and can be discarded as such.  */\n+\n+static bool\n+cselib_useless_value_p (cselib_val *v)\n+{\n+  return (v->locs == 0\n+\t  && !PRESERVED_VALUE_P (v->val_rtx)\n+\t  && !SP_DERIVED_VALUE_P (v->val_rtx));\n+}\n+\n /* For all locations found in X, delete locations that reference useless\n    values (i.e. values without any location).  Called through\n    htab_traverse.  */\n@@ -666,7 +676,7 @@ discard_useless_locs (cselib_val **x, void *info ATTRIBUTE_UNUSED)\n \tp = &(*p)->next;\n     }\n \n-  if (had_locs && v->locs == 0 && !PRESERVED_VALUE_P (v->val_rtx))\n+  if (had_locs && cselib_useless_value_p (v))\n     {\n       if (setting_insn && DEBUG_INSN_P (setting_insn))\n \tn_useless_debug_values++;\n@@ -684,7 +694,7 @@ discard_useless_values (cselib_val **x, void *info ATTRIBUTE_UNUSED)\n {\n   cselib_val *v = *x;\n \n-  if (v->locs == 0 && !PRESERVED_VALUE_P (v->val_rtx))\n+  if (v->locs == 0 && cselib_useless_value_p (v))\n     {\n       if (cselib_discard_hook)\n \tcselib_discard_hook (v);\n@@ -2370,7 +2380,7 @@ cselib_invalidate_regno_val (unsigned int regno, struct elt_list **l)\n \t}\n     }\n \n-  if (had_locs && v->locs == 0 && !PRESERVED_VALUE_P (v->val_rtx))\n+  if (had_locs && cselib_useless_value_p (v))\n     {\n       if (setting_insn && DEBUG_INSN_P (setting_insn))\n \tn_useless_debug_values++;\n@@ -2515,7 +2525,7 @@ cselib_invalidate_mem (rtx mem_rtx)\n \t  unchain_one_elt_loc_list (p);\n \t}\n \n-      if (had_locs && v->locs == 0 && !PRESERVED_VALUE_P (v->val_rtx))\n+      if (had_locs && cselib_useless_value_p (v))\n \t{\n \t  if (setting_insn && DEBUG_INSN_P (setting_insn))\n \t    n_useless_debug_values++;\n@@ -2593,14 +2603,14 @@ cselib_record_set (rtx dest, cselib_val *src_elt, cselib_val *dest_addr_elt)\n \t  REG_VALUES (dreg)->elt = src_elt;\n \t}\n \n-      if (src_elt->locs == 0 && !PRESERVED_VALUE_P (src_elt->val_rtx))\n+      if (cselib_useless_value_p (src_elt))\n \tn_useless_values--;\n       new_elt_loc_list (src_elt, dest);\n     }\n   else if (MEM_P (dest) && dest_addr_elt != 0\n \t   && cselib_record_memory)\n     {\n-      if (src_elt->locs == 0 && !PRESERVED_VALUE_P (src_elt->val_rtx))\n+      if (cselib_useless_value_p (src_elt))\n \tn_useless_values--;\n       add_mem_for_addr (dest_addr_elt, src_elt, dest);\n     }"}, {"sha": "427266a877f99d75f5c32aadef37385a8e98a700", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9", "patch": "@@ -1,5 +1,8 @@\n 2020-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/94468\n+\t* g++.dg/opt/pr94468.C: New test.\n+\n \tPR debug/94441\n \t* g++.dg/opt/pr94441.C: New test.\n "}, {"sha": "bd3f0b5a2e971eeb2115a643cfe668f16a7719ec", "filename": "gcc/testsuite/g++.dg/opt/pr94468.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94468.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94468.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr94468.C?ref=bab8d9625f4cdeaf9bb45e28ab62abe47c3827f9", "patch": "@@ -0,0 +1,57 @@\n+// PR rtl-optimization/94468\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-fPIC\" { target fpic } }\n+\n+bool a();\n+enum b {};\n+class c;\n+template <typename> struct d;\n+template <class e, typename g, typename... h> struct d<g (e::*)(h...)> {\n+  typedef e i;\n+};\n+struct j { j(void(int, j *, c *, void **, bool *)) {} };\n+template <typename l> struct m : public j {\n+  l ab;\n+  static void ac(int, j *, c *, void **, bool *);\n+  m(l f) : j(ac), ab(f) {}\n+};\n+b ad;\n+struct c {\n+  template <typename n, typename o>\n+  void ae(typename d<n>::i *p, n af, typename d<o>::i *ag, o ah) {\n+    ai(p, &af, ag, &ah, new m<o>(ah), ad, &d<n>::i::aj);\n+  }\n+  void ai(c *, void *, c *, void *, j *, b, int *);\n+};\n+struct r : public c { static int aj; void t(); };\n+struct al : public c {\n+  static int aj;\n+  void am();\n+  void ao();\n+  void ap();\n+};\n+struct aq { aq(const int &, const int & = int()); };\n+struct ar : public c { ~ar(); };\n+struct as : public ar {\n+  as();\n+  void at();\n+  void au();\n+  void av();\n+};\n+struct u : public c { void ax(); };\n+struct ay { int az(); };\n+struct ba : public c { static int aj; void bb(); };\n+struct bc : public al { bc() { if (a()) am(); } };\n+as::as() {\n+  al *bd = new bc;\n+  ae(bd, &al::ao, this, &as::au);\n+  ae(bd, &al::ap, this, &as::av);\n+  r be;\n+  u bf;\n+  ae(&be, &r::t, &bf, &u::ax);\n+  c bg = *bd;\n+  ae(static_cast<ba *>(&bg), &ba::bb, this, &as::at);\n+  ay bh;\n+  aq am(bh.az());\n+}"}]}