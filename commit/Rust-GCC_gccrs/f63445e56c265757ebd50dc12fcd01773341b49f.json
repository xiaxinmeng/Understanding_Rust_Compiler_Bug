{"sha": "f63445e56c265757ebd50dc12fcd01773341b49f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYzNDQ1ZTU2YzI2NTc1N2ViZDUwZGMxMmZjZDAxNzczMzQxYjQ5Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-05-20T09:49:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-20T09:49:07Z"}, "message": "cfgloop.h (struct loop): Add simdlen member.\n\n\t* cfgloop.h (struct loop): Add simdlen member.\n\t* cfgloopmanip.c (copy_loop_info): Copy simdlen as well.\n\t* omp-expand.c (expand_omp_simd): Set it if simdlen clause is present.\n\t* tree-vect-loop.c (vect_analyze_loop): Pass loop->simdlen != 0\n\tas new argument to autovectorize_vector_sizes target hook.  If\n\tloop->simdlen, pick up vector size where the vectorization factor\n\tis equal to loop->simd, and if there is none, fall back to the first\n\tsuccessful one.\n\t(vect_transform_loop): Adjust autovectorize_vector_sizes target hook\n\tcaller.\n\t* omp-low.c (omp_clause_aligned_alignment): Likewise.\n\t* omp-general.c (omp_max_vf): Likewise.\n\t* optabs-query.c (can_vec_mask_load_store_p): Likewise.\n\t* tree-vect-slp.c (vect_slp_bb): Likewise.\n\t* target.def (autovectorize_vector_sizes): Add ALL argument and\n\tdocument it.\n\t* doc/tm.texi: Adjust documentation.\n\t* targhooks.c (default_autovectorize_vector_sizes): Add bool argument.\n\t* targhooks.h (default_autovectorize_vector_sizes): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_autovectorize_vector_sizes): Add\n\tbool argument.\n\t* config/arc/arc.c (arc_autovectorize_vector_sizes): Likewise.\n\t* config/arm/arm.c (arm_autovectorize_vector_sizes): Likewise.\n\t* config/mips/mips.c (mips_autovectorize_vector_sizes): Likewise.\n\t* config/i386/i386.c (ix86_autovectorize_vector_sizes): Likewise.  If\n\ttrue and TARGET_AVX512F or TARGET_AVX, push 3 or 2 sizes even if\n\tpreferred vector size is not 512-bit or 256-bit, just put those\n\tunpreferred ones last.\n\n\t* gcc.target/i386/avx512f-simd-1.c: New test.\n\nFrom-SVN: r271403", "tree": {"sha": "d479340becf450ff10dc860728aa762dd72177f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d479340becf450ff10dc860728aa762dd72177f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f63445e56c265757ebd50dc12fcd01773341b49f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63445e56c265757ebd50dc12fcd01773341b49f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f63445e56c265757ebd50dc12fcd01773341b49f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f63445e56c265757ebd50dc12fcd01773341b49f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ec537f3500924f29505977aa89c2a1d4671c584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ec537f3500924f29505977aa89c2a1d4671c584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ec537f3500924f29505977aa89c2a1d4671c584"}], "stats": {"total": 182, "additions": 160, "deletions": 22}, "files": [{"sha": "682d5f75e6c8fdc6fb145919e9cfeb90898f3beb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -1,3 +1,34 @@\n+2019-05-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cfgloop.h (struct loop): Add simdlen member.\n+\t* cfgloopmanip.c (copy_loop_info): Copy simdlen as well.\n+\t* omp-expand.c (expand_omp_simd): Set it if simdlen clause is present.\n+\t* tree-vect-loop.c (vect_analyze_loop): Pass loop->simdlen != 0\n+\tas new argument to autovectorize_vector_sizes target hook.  If\n+\tloop->simdlen, pick up vector size where the vectorization factor\n+\tis equal to loop->simd, and if there is none, fall back to the first\n+\tsuccessful one.\n+\t(vect_transform_loop): Adjust autovectorize_vector_sizes target hook\n+\tcaller.\n+\t* omp-low.c (omp_clause_aligned_alignment): Likewise.\n+\t* omp-general.c (omp_max_vf): Likewise.\n+\t* optabs-query.c (can_vec_mask_load_store_p): Likewise.\n+\t* tree-vect-slp.c (vect_slp_bb): Likewise.\n+\t* target.def (autovectorize_vector_sizes): Add ALL argument and\n+\tdocument it.\n+\t* doc/tm.texi: Adjust documentation.\n+\t* targhooks.c (default_autovectorize_vector_sizes): Add bool argument.\n+\t* targhooks.h (default_autovectorize_vector_sizes): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_autovectorize_vector_sizes): Add\n+\tbool argument.\n+\t* config/arc/arc.c (arc_autovectorize_vector_sizes): Likewise.\n+\t* config/arm/arm.c (arm_autovectorize_vector_sizes): Likewise.\n+\t* config/mips/mips.c (mips_autovectorize_vector_sizes): Likewise.\n+\t* config/i386/i386.c (ix86_autovectorize_vector_sizes): Likewise.  If\n+\ttrue and TARGET_AVX512F or TARGET_AVX, push 3 or 2 sizes even if\n+\tpreferred vector size is not 512-bit or 256-bit, just put those\n+\tunpreferred ones last.\n+\n 2019-05-20  Martin Liska  <mliska@suse.cz>\n \n \t* targhooks.c (default_libc_has_fast_function): New function."}, {"sha": "2f8ab106d03a8927087ee8038e08a825f6e1e237", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -174,6 +174,9 @@ struct GTY ((chain_next (\"%h.next\"))) loop {\n      of the loop can be safely evaluated concurrently.  */\n   int safelen;\n \n+  /* Preferred vectorization factor for the loop if non-zero.  */\n+  int simdlen;\n+\n   /* Constraints are generally set by consumers and affect certain\n      semantics of niter analyzer APIs.  Currently the APIs affected are\n      number_of_iterations_exit* functions and their callers.  One typical"}, {"sha": "50250ec4d7c6f1f5ab5b77ad06be2ec6e07c5f25", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -1016,6 +1016,7 @@ copy_loop_info (struct loop *loop, struct loop *target)\n   target->nb_iterations_estimate = loop->nb_iterations_estimate;\n   target->estimate_state = loop->estimate_state;\n   target->safelen = loop->safelen;\n+  target->simdlen = loop->simdlen;\n   target->constraints = loop->constraints;\n   target->can_be_parallel = loop->can_be_parallel;\n   target->warned_aggressive_loop_optimizations"}, {"sha": "8a290dcd9046be4775627dec0e9b3bf826ce3770", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -14109,7 +14109,7 @@ aarch64_preferred_simd_mode (scalar_mode mode)\n /* Return a list of possible vector sizes for the vectorizer\n    to iterate over.  */\n static void\n-aarch64_autovectorize_vector_sizes (vector_sizes *sizes)\n+aarch64_autovectorize_vector_sizes (vector_sizes *sizes, bool)\n {\n   if (TARGET_SVE)\n     sizes->safe_push (BYTES_PER_SVE_VECTOR);"}, {"sha": "bce189958bc589c0003d2ea20dbbdf921ff715c6", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -480,7 +480,7 @@ arc_preferred_simd_mode (scalar_mode mode)\n    TARGET_VECTORIZE_AUTOVECTORIZE_VECTOR_SIZES.  */\n \n static void\n-arc_autovectorize_vector_sizes (vector_sizes *sizes)\n+arc_autovectorize_vector_sizes (vector_sizes *sizes, bool)\n {\n   if (TARGET_PLUS_QMACW)\n     {"}, {"sha": "e3e71eaf2f6b3be8faaa2261b533e89f5a866632", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -288,7 +288,7 @@ static bool arm_builtin_support_vector_misalignment (machine_mode mode,\n static void arm_conditional_register_usage (void);\n static enum flt_eval_method arm_excess_precision (enum excess_precision_type);\n static reg_class_t arm_preferred_rename_class (reg_class_t rclass);\n-static void arm_autovectorize_vector_sizes (vector_sizes *);\n+static void arm_autovectorize_vector_sizes (vector_sizes *, bool);\n static int arm_default_branch_cost (bool, bool);\n static int arm_cortex_a5_branch_cost (bool, bool);\n static int arm_cortex_m_branch_cost (bool, bool);\n@@ -28351,7 +28351,7 @@ arm_vector_alignment (const_tree type)\n }\n \n static void\n-arm_autovectorize_vector_sizes (vector_sizes *sizes)\n+arm_autovectorize_vector_sizes (vector_sizes *sizes, bool)\n {\n   if (!TARGET_NEON_VECTORIZE_DOUBLE)\n     {"}, {"sha": "696a4745303d12c29e01b0d22a7a8bd1662761c3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -21332,19 +21332,30 @@ ix86_preferred_simd_mode (scalar_mode mode)\n    256bit and 128bit vectors.  */\n \n static void\n-ix86_autovectorize_vector_sizes (vector_sizes *sizes)\n+ix86_autovectorize_vector_sizes (vector_sizes *sizes, bool all)\n {\n   if (TARGET_AVX512F && !TARGET_PREFER_AVX256)\n     {\n       sizes->safe_push (64);\n       sizes->safe_push (32);\n       sizes->safe_push (16);\n     }\n+  else if (TARGET_AVX512F && all)\n+    {\n+      sizes->safe_push (32);\n+      sizes->safe_push (16);\n+      sizes->safe_push (64);\n+    }\n   else if (TARGET_AVX && !TARGET_PREFER_AVX128)\n     {\n       sizes->safe_push (32);\n       sizes->safe_push (16);\n     }\n+  else if (TARGET_AVX && all)\n+    {\n+      sizes->safe_push (16);\n+      sizes->safe_push (32);\n+    }\n }\n \n /* Implemenation of targetm.vectorize.get_mask_mode.  */"}, {"sha": "6eafe3df3c1302fbe08d2db4b822e47f4ff67c14", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -13460,7 +13460,7 @@ mips_preferred_simd_mode (scalar_mode mode)\n /* Implement TARGET_VECTORIZE_AUTOVECTORIZE_VECTOR_SIZES.  */\n \n static void\n-mips_autovectorize_vector_sizes (vector_sizes *sizes)\n+mips_autovectorize_vector_sizes (vector_sizes *sizes, bool)\n {\n   if (ISA_HAS_MSA)\n     sizes->safe_push (16);"}, {"sha": "622e8cf240fbf4834a7a39317aff844989b8b65f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -6021,11 +6021,13 @@ against lower halves of vectors recursively until the specified mode is\n reached.  The default is @var{mode} which means no splitting.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_VECTORIZE_AUTOVECTORIZE_VECTOR_SIZES (vector_sizes *@var{sizes})\n+@deftypefn {Target Hook} void TARGET_VECTORIZE_AUTOVECTORIZE_VECTOR_SIZES (vector_sizes *@var{sizes}, bool @var{all})\n If the mode returned by @code{TARGET_VECTORIZE_PREFERRED_SIMD_MODE} is not\n the only one that is worth considering, this hook should add all suitable\n vector sizes to @var{sizes}, in order of decreasing preference.  The first\n one should be the size of @code{TARGET_VECTORIZE_PREFERRED_SIMD_MODE}.\n+If @var{all} is true, add suitable vector sizes even when they are generally\n+not expected to be worthwhile.\n \n The hook does not need to do anything if the vector returned by\n @code{TARGET_VECTORIZE_PREFERRED_SIMD_MODE} is the only one relevant"}, {"sha": "0d7f104a2f2b6782bcf40cbd2cff4c34d69cf5d7", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -4974,6 +4974,13 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n \t  && loop->safelen > 1)\n \t{\n \t  loop->force_vectorize = true;\n+\t  if (simdlen && tree_fits_uhwi_p (OMP_CLAUSE_SIMDLEN_EXPR (simdlen)))\n+\t    {\n+\t      unsigned HOST_WIDE_INT v\n+\t\t= tree_to_uhwi (OMP_CLAUSE_SIMDLEN_EXPR (simdlen));\n+\t      if (v < INT_MAX && v <= (unsigned HOST_WIDE_INT) loop->safelen)\n+\t\tloop->simdlen = v;\n+\t    }\n \t  cfun->has_force_vectorize_loops = true;\n \t}\n       else if (dont_vectorize)"}, {"sha": "4a9b15ccde48aeb300bc0154cf5a8df342222ab3", "filename": "gcc/omp-general.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -469,7 +469,7 @@ omp_max_vf (void)\n     return 1;\n \n   auto_vector_sizes sizes;\n-  targetm.vectorize.autovectorize_vector_sizes (&sizes);\n+  targetm.vectorize.autovectorize_vector_sizes (&sizes, true);\n   if (!sizes.is_empty ())\n     {\n       poly_uint64 vf = 0;"}, {"sha": "26ee70db0b3db768f5df8a2d34f3a6f1d8d1dcb7", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -3600,7 +3600,7 @@ omp_clause_aligned_alignment (tree clause)\n   unsigned int al = 1;\n   opt_scalar_mode mode_iter;\n   auto_vector_sizes sizes;\n-  targetm.vectorize.autovectorize_vector_sizes (&sizes);\n+  targetm.vectorize.autovectorize_vector_sizes (&sizes, true);\n   poly_uint64 vs = 0;\n   for (unsigned int i = 0; i < sizes.length (); ++i)\n     vs = ordered_max (vs, sizes[i]);"}, {"sha": "04c8d08115b3383a1906861e8f5595de28b5d840", "filename": "gcc/optabs-query.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Foptabs-query.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Foptabs-query.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -593,7 +593,7 @@ can_vec_mask_load_store_p (machine_mode mode,\n     return true;\n \n   auto_vector_sizes vector_sizes;\n-  targetm.vectorize.autovectorize_vector_sizes (&vector_sizes);\n+  targetm.vectorize.autovectorize_vector_sizes (&vector_sizes, true);\n   for (unsigned int i = 0; i < vector_sizes.length (); ++i)\n     {\n       poly_uint64 cur = vector_sizes[i];"}, {"sha": "7d52102c8153b4c86f6541da5e04c39251c2d42f", "filename": "gcc/target.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -1899,12 +1899,14 @@ DEFHOOK\n the only one that is worth considering, this hook should add all suitable\\n\\\n vector sizes to @var{sizes}, in order of decreasing preference.  The first\\n\\\n one should be the size of @code{TARGET_VECTORIZE_PREFERRED_SIMD_MODE}.\\n\\\n+If @var{all} is true, add suitable vector sizes even when they are generally\\n\\\n+not expected to be worthwhile.\\n\\\n \\n\\\n The hook does not need to do anything if the vector returned by\\n\\\n @code{TARGET_VECTORIZE_PREFERRED_SIMD_MODE} is the only one relevant\\n\\\n for autovectorization.  The default implementation does nothing.\",\n  void,\n- (vector_sizes *sizes),\n+ (vector_sizes *sizes, bool all),\n  default_autovectorize_vector_sizes)\n \n /* Function to get a target mode for a vector mask.  */"}, {"sha": "b27111639f4960426ff2fc39a10ddc9237deaf61", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -1316,7 +1316,7 @@ default_split_reduction (machine_mode mode)\n    is tried.  */\n \n void\n-default_autovectorize_vector_sizes (vector_sizes *)\n+default_autovectorize_vector_sizes (vector_sizes *, bool)\n {\n }\n "}, {"sha": "229aacd7b6597d75774e82594cfa332f37afcf3c", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -110,7 +110,7 @@ default_builtin_support_vector_misalignment (machine_mode mode,\n \t\t\t\t\t     int, bool);\n extern machine_mode default_preferred_simd_mode (scalar_mode mode);\n extern machine_mode default_split_reduction (machine_mode);\n-extern void default_autovectorize_vector_sizes (vector_sizes *);\n+extern void default_autovectorize_vector_sizes (vector_sizes *, bool);\n extern opt_machine_mode default_get_mask_mode (poly_uint64, poly_uint64);\n extern bool default_empty_mask_is_expensive (unsigned);\n extern void *default_init_cost (struct loop *);"}, {"sha": "3ecff36b7b5e76f57eeccc71750af00d118034b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -1,3 +1,7 @@\n+2019-05-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/avx512f-simd-1.c: New test.\n+\n 2019-05-20  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/target_attr_10.c: Add quotes to expected"}, {"sha": "235fb917e17f01a7b8c81386deae5ee3468b4ae8", "filename": "gcc/testsuite/gcc.target/i386/avx512f-simd-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-simd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-simd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-simd-1.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp-simd -O2 -mavx512f -masm=att\" } */\n+/* { dg-final { scan-assembler \"vpadd\\[^\\n\\r]*%xmm\" } } */\n+/* { dg-final { scan-assembler \"vpadd\\[^\\n\\r]*%ymm\" } } */\n+/* { dg-final { scan-assembler \"vpadd\\[^\\n\\r]*%zmm\" } } */\n+\n+#define N 1024\n+int a[N];\n+\n+void\n+f1 (void)\n+{\n+  int i;\n+  #pragma omp simd simdlen (4)\n+  for (i = 0; i < N; ++i)\n+    a[i] = a[i] + 1;\n+}\n+\n+void\n+f2 (void)\n+{\n+  int i;\n+  #pragma omp simd simdlen (8)\n+  for (i = 0; i < N; ++i)\n+    a[i] = a[i] + 2;\n+}\n+\n+void\n+f3 (void)\n+{\n+  int i;\n+  #pragma omp simd simdlen (16)\n+  for (i = 0; i < N; ++i)\n+    a[i] = a[i] + 3;\n+}"}, {"sha": "e1229a51c486dc71b13df66a72dfd7f559b2e5cd", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -2254,7 +2254,8 @@ vect_analyze_loop (struct loop *loop, loop_vec_info orig_loop_vinfo,\n \n   /* Autodetect first vector size we try.  */\n   current_vector_size = 0;\n-  targetm.vectorize.autovectorize_vector_sizes (&vector_sizes);\n+  targetm.vectorize.autovectorize_vector_sizes (&vector_sizes,\n+\t\t\t\t\t\tloop->simdlen != 0);\n   unsigned int next_size = 0;\n \n   DUMP_VECT_SCOPE (\"analyze_loop_nest\");\n@@ -2273,6 +2274,8 @@ vect_analyze_loop (struct loop *loop, loop_vec_info orig_loop_vinfo,\n \n   unsigned n_stmts = 0;\n   poly_uint64 autodetected_vector_size = 0;\n+  opt_loop_vec_info first_loop_vinfo = opt_loop_vec_info::success (NULL);\n+  poly_uint64 first_vector_size = 0;\n   while (1)\n     {\n       /* Check the CFG characteristics of the loop (nesting, entry/exit).  */\n@@ -2283,6 +2286,7 @@ vect_analyze_loop (struct loop *loop, loop_vec_info orig_loop_vinfo,\n \t  if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t     \"bad loop form.\\n\");\n+\t  gcc_checking_assert (first_loop_vinfo == NULL);\n \t  return loop_vinfo;\n \t}\n \n@@ -2296,10 +2300,27 @@ vect_analyze_loop (struct loop *loop, loop_vec_info orig_loop_vinfo,\n \t{\n \t  LOOP_VINFO_VECTORIZABLE_P (loop_vinfo) = 1;\n \n-\t  return loop_vinfo;\n+\t  if (loop->simdlen\n+\t      && maybe_ne (LOOP_VINFO_VECT_FACTOR (loop_vinfo),\n+\t\t\t   (unsigned HOST_WIDE_INT) loop->simdlen))\n+\t    {\n+\t      if (first_loop_vinfo == NULL)\n+\t\t{\n+\t\t  first_loop_vinfo = loop_vinfo;\n+\t\t  first_vector_size = current_vector_size;\n+\t\t  loop->aux = NULL;\n+\t\t}\n+\t      else\n+\t\tdelete loop_vinfo;\n+\t    }\n+\t  else\n+\t    {\n+\t      delete first_loop_vinfo;\n+\t      return loop_vinfo;\n+\t    }\n \t}\n-\n-      delete loop_vinfo;\n+      else\n+\tdelete loop_vinfo;\n \n       if (next_size == 0)\n \tautodetected_vector_size = current_vector_size;\n@@ -2308,10 +2329,31 @@ vect_analyze_loop (struct loop *loop, loop_vec_info orig_loop_vinfo,\n \t  && known_eq (vector_sizes[next_size], autodetected_vector_size))\n \tnext_size += 1;\n \n-      if (fatal\n-\t  || next_size == vector_sizes.length ()\n+      if (fatal)\n+\t{\n+\t  gcc_checking_assert (first_loop_vinfo == NULL);\n+\t  return opt_loop_vec_info::propagate_failure (res);\n+\t}\n+\n+      if (next_size == vector_sizes.length ()\n \t  || known_eq (current_vector_size, 0U))\n-\treturn opt_loop_vec_info::propagate_failure (res);\n+\t{\n+\t  if (first_loop_vinfo)\n+\t    {\n+\t      current_vector_size = first_vector_size;\n+\t      loop->aux = (loop_vec_info) first_loop_vinfo;\n+\t      if (dump_enabled_p ())\n+\t\t{\n+\t\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t\t   \"***** Choosing vector size \");\n+\t\t  dump_dec (MSG_NOTE, current_vector_size);\n+\t\t  dump_printf (MSG_NOTE, \"\\n\");\n+\t\t}\n+\t      return first_loop_vinfo;\n+\t    }\n+\t  else\n+\t    return opt_loop_vec_info::propagate_failure (res);\n+\t}\n \n       /* Try the next biggest vector size.  */\n       current_vector_size = vector_sizes[next_size++];\n@@ -8670,7 +8712,7 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n   if (epilogue)\n     {\n       auto_vector_sizes vector_sizes;\n-      targetm.vectorize.autovectorize_vector_sizes (&vector_sizes);\n+      targetm.vectorize.autovectorize_vector_sizes (&vector_sizes, false);\n       unsigned int next_size = 0;\n \n       /* Note LOOP_VINFO_NITERS_KNOWN_P and LOOP_VINFO_INT_NITERS work"}, {"sha": "2810228f9a558c75c8b0e18560ad9e86e4c579bc", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f63445e56c265757ebd50dc12fcd01773341b49f/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=f63445e56c265757ebd50dc12fcd01773341b49f", "patch": "@@ -2983,7 +2983,7 @@ vect_slp_bb (basic_block bb)\n \n   /* Autodetect first vector size we try.  */\n   current_vector_size = 0;\n-  targetm.vectorize.autovectorize_vector_sizes (&vector_sizes);\n+  targetm.vectorize.autovectorize_vector_sizes (&vector_sizes, false);\n   unsigned int next_size = 0;\n \n   gsi = gsi_start_bb (bb);"}]}