{"sha": "db5e2d51eb566289a529cc530f037c76483ce61c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI1ZTJkNTFlYjU2NjI4OWE1MjljYzUzMGYwMzdjNzY0ODNjZTYxYw==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2009-11-04T09:57:55Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2009-11-04T09:57:55Z"}, "message": "[multiple changes]\n\n2009-11-04  Maxim Kuvyrkov  <maxim@codesourcery.com>\n\n\tPR target/41302\n\t* config/m68k/m68k.c (m68k_reg_present_p): New static function.\n\t(m68k_ok_for_sibcall_p): Handle different result return locations.\n\n2009-11-04  Carlos O'Donell  <carlos@codesourcery.com>\n\n\tPR target/41302\n\t* gcc.target/m68k/pr41302.c: New test.\n\nFrom-SVN: r153890", "tree": {"sha": "56013311796c3566afd1753de263d08fde422081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56013311796c3566afd1753de263d08fde422081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db5e2d51eb566289a529cc530f037c76483ce61c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5e2d51eb566289a529cc530f037c76483ce61c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5e2d51eb566289a529cc530f037c76483ce61c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5e2d51eb566289a529cc530f037c76483ce61c/comments", "author": null, "committer": null, "parents": [{"sha": "e3b8749b11ce6763e1b413958b15955095ffd099", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b8749b11ce6763e1b413958b15955095ffd099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b8749b11ce6763e1b413958b15955095ffd099"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "e4bfa40c18a8fdf737ed23fa9431151b2161b9e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5e2d51eb566289a529cc530f037c76483ce61c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5e2d51eb566289a529cc530f037c76483ce61c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db5e2d51eb566289a529cc530f037c76483ce61c", "patch": "@@ -1,3 +1,9 @@\n+2009-11-04  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\tPR target/41302\n+\t* config/m68k/m68k.c (m68k_reg_present_p): New static function.\n+\t(m68k_ok_for_sibcall_p): Handle different result return locations.\n+\n 2009-11-04  Richard Guenther  <rguenther@suse.de>\n \n \t* c-opts.c (c_common_post_options): Move LTO option processing"}, {"sha": "8db98fc4f468be38a7366b1e08bbb4c8ac52809c", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5e2d51eb566289a529cc530f037c76483ce61c/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5e2d51eb566289a529cc530f037c76483ce61c/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=db5e2d51eb566289a529cc530f037c76483ce61c", "patch": "@@ -1399,6 +1399,30 @@ flags_in_68881 (void)\n   return cc_status.flags & CC_IN_68881;\n }\n \n+/* Return true if PARALLEL contains register REGNO.  */\n+static bool\n+m68k_reg_present_p (const_rtx parallel, unsigned int regno)\n+{\n+  int i;\n+\n+  if (REG_P (parallel) && REGNO (parallel) == regno)\n+    return true;\n+\n+  if (GET_CODE (parallel) != PARALLEL)\n+    return false;\n+\n+  for (i = 0; i < XVECLEN (parallel, 0); ++i)\n+    {\n+      const_rtx x;\n+\n+      x = XEXP (XVECEXP (parallel, 0, i), 0);\n+      if (REG_P (x) && REGNO (x) == regno)\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n /* Implement TARGET_FUNCTION_OK_FOR_SIBCALL_P.  */\n \n static bool\n@@ -1411,6 +1435,26 @@ m68k_ok_for_sibcall_p (tree decl, tree exp)\n   if (CALL_EXPR_STATIC_CHAIN (exp))\n     return false;\n \n+  if (!VOID_TYPE_P (TREE_TYPE (DECL_RESULT (cfun->decl))))\n+    {\n+      /* Check that the return value locations are the same.  For\n+\t example that we aren't returning a value from the sibling in\n+\t a D0 register but then need to transfer it to a A0 register.  */\n+      rtx cfun_value;\n+      rtx call_value;\n+\n+      cfun_value = FUNCTION_VALUE (TREE_TYPE (DECL_RESULT (cfun->decl)),\n+\t\t\t\t   cfun->decl);\n+      call_value = FUNCTION_VALUE (TREE_TYPE (exp), decl);\n+\n+      /* Check that the values are equal or that the result the callee\n+\t function returns is superset of what the current function returns.  */\n+      if (!(rtx_equal_p (cfun_value, call_value)\n+\t    || (REG_P (cfun_value)\n+\t\t&& m68k_reg_present_p (call_value, REGNO (cfun_value)))))\n+\treturn false;\n+    }\n+\n   kind = m68k_get_function_kind (current_function_decl);\n   if (kind == m68k_fk_normal_function)\n     /* We can always sibcall from a normal function, because it's\n@@ -5188,6 +5232,9 @@ m68k_libcall_value (enum machine_mode mode)\n   return gen_rtx_REG (mode, m68k_libcall_value_in_a0_p ? A0_REG : D0_REG);\n }\n \n+/* Location in which function value is returned.\n+   NOTE: Due to differences in ABIs, don't call this function directly,\n+   use FUNCTION_VALUE instead.  */\n rtx\n m68k_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n {"}, {"sha": "0187c4360aae3e135615944a0f9bb801362a2db1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5e2d51eb566289a529cc530f037c76483ce61c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5e2d51eb566289a529cc530f037c76483ce61c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db5e2d51eb566289a529cc530f037c76483ce61c", "patch": "@@ -1,3 +1,8 @@\n+2009-11-04  Carlos O'Donell  <carlos@codesourcery.com>\n+\n+\tPR target/41302\n+\t* gcc.target/m68k/pr41302.c: New test.\n+\n 2009-11-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/36959"}, {"sha": "8e1c31041d1d92801a5fa6b63f6d4ac74ff37e30", "filename": "gcc/testsuite/gcc.target/m68k/pr41302.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5e2d51eb566289a529cc530f037c76483ce61c/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr41302.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5e2d51eb566289a529cc530f037c76483ce61c/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr41302.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr41302.c?ref=db5e2d51eb566289a529cc530f037c76483ce61c", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"move.l \\%d0,\\%a0\" { target *linux* } } } */\n+\n+struct pts {\n+  int c;\n+};\n+\n+unsigned int bar (struct pts *a, int b);\n+\n+struct pts * foo (struct pts *a, int b)\n+{\n+  return (struct pts *) bar (a, b);\n+}"}]}