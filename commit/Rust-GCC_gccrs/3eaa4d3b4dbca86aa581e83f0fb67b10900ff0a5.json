{"sha": "3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VhYTRkM2I0ZGJjYTg2YWE1ODFlODNmMGZiNjdiMTA5MDBmZjBhNQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.informatik.uni-dortmund.de", "date": "1998-02-24T20:09:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-24T20:09:55Z"}, "message": "Changes for _G_IO_IO_FILE_VERSION == 0x20001:\n\n\t* libioP.h (_IO_showmanyc_t, _IO_SHOWMANYC, _IO_imbue_t,\n\t_IO_IMBUE): New definitions.\n\t(struct _IO_jump_t): Add __showmanyc and __imbue fields.\n\t(_IO_file_fopen): Add new fourth argument.\n\t* filebuf.cc (filebuf::open): Pass new fourth argument to\n\t_IO_file_fopen.\n\t* iolibio.h (_IO_freopen): Likewise.\n\t* streambuf.cc (streambuf::showmanyc, streambuf::imbue): New\n\tfunctions.\n\t* streambuf.h (_IO_wchar_t): Define to _G_wchar_t.\n\t(ios::fill): Remove casts.\n\t(struct streambuf): Add showmanyc and imbue members.\n\t* iostream.cc (ostream::operator<<(double n)) [__GLIBC_MINOR__ >=\n\t1]: Initialize new fields is_char of struct printf_info.\n\t(ostream::operator<<(long double n)) [__GLIBC_MINOR__ >= 1]:\n\tLikewise.\n\nFrom-SVN: r18222", "tree": {"sha": "f485ddeceda3dbb34f3e39bb297d61e69e0a6445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f485ddeceda3dbb34f3e39bb297d61e69e0a6445"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/comments", "author": null, "committer": null, "parents": [{"sha": "14e403d46d7cddc753102dd383e7fac7f6ffeecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e403d46d7cddc753102dd383e7fac7f6ffeecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e403d46d7cddc753102dd383e7fac7f6ffeecf"}], "stats": {"total": 81, "additions": 79, "deletions": 2}, "files": [{"sha": "115e0d2deea893641ac0baa018d2db9d05595c1b", "filename": "libio/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FChangeLog?ref=3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "patch": "@@ -1,3 +1,24 @@\n+1998-02-24  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n+\n+\tChanges for _G_IO_IO_FILE_VERSION == 0x20001:\n+\t* libioP.h (_IO_showmanyc_t, _IO_SHOWMANYC, _IO_imbue_t,\n+\t_IO_IMBUE): New definitions.\n+\t(struct _IO_jump_t): Add __showmanyc and __imbue fields.\n+\t(_IO_file_fopen): Add new fourth argument.\n+\t* filebuf.cc (filebuf::open): Pass new fourth argument to\n+\t_IO_file_fopen.\n+\t* iolibio.h (_IO_freopen): Likewise.\n+\t* streambuf.cc (streambuf::showmanyc, streambuf::imbue): New\n+\tfunctions.\n+\t* streambuf.h (_IO_wchar_t): Define to _G_wchar_t.\n+\t(ios::fill): Remove casts.\n+\t(struct streambuf): Add showmanyc and imbue members.\n+\n+\t* iostream.cc (ostream::operator<<(double n)) [__GLIBC_MINOR__ >=\n+\t1]: Initialize new fields is_char of struct printf_info.\n+\t(ostream::operator<<(long double n)) [__GLIBC_MINOR__ >= 1]:\n+\tLikewise.\n+\n Sun Feb 22 17:24:53 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* config.shared: Bring back changes from Ian and Fred that were"}, {"sha": "422d442736e03a074f9163e1c647380332f63b3d", "filename": "libio/filebuf.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2Ffilebuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2Ffilebuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Ffilebuf.cc?ref=3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "patch": "@@ -131,7 +131,11 @@ filebuf* filebuf::open(const char *filename, ios::openmode mode, int prot)\n \n filebuf* filebuf::open(const char *filename, const char *mode)\n {\n+#if _G_IO_IO_FILE_VERSION == 0x20001\n+  return (filebuf*)_IO_file_fopen(this, filename, mode, 0);\n+#else\n   return (filebuf*)_IO_file_fopen(this, filename, mode);\n+#endif\n }\n \n filebuf* filebuf::attach(int fd)"}, {"sha": "083b198b4485da1c294bc765ca5f33bd59861a7d", "filename": "libio/iolibio.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2Fiolibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2Fiolibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fiolibio.h?ref=3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "patch": "@@ -45,8 +45,13 @@ extern int _IO_obstack_printf __P ((struct obstack *, const char *, ...));\n   (_IO_seekoff(__fp, __offset, __whence, _IOS_INPUT|_IOS_OUTPUT) == _IO_pos_BAD ? EOF : 0)\n #define _IO_rewind(FILE) (void)_IO_seekoff(FILE, 0, 0, _IOS_INPUT|_IOS_OUTPUT)\n #define _IO_vprintf(FORMAT, ARGS) _IO_vfprintf(_IO_stdout, FORMAT, ARGS)\n+#if _G_IO_IO_FILE_VERSION == 0x20001\n+#define _IO_freopen(FILENAME, MODE, FP) \\\n+  (_IO_file_close_it(FP), _IO_file_fopen(FP, FILENAME, MODE, 0))\n+#else\n #define _IO_freopen(FILENAME, MODE, FP) \\\n   (_IO_file_close_it(FP), _IO_file_fopen(FP, FILENAME, MODE))\n+#endif\n #define _IO_fileno(FP) ((FP)->_fileno)\n extern _IO_FILE* _IO_popen __P((const char*, const char*));\n #define _IO_pclose _IO_fclose"}, {"sha": "4b1d9d80a9b6caba85aa6de0d1731b81269b7d50", "filename": "libio/iostream.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2Fiostream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2Fiostream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fiostream.cc?ref=3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "patch": "@@ -634,6 +634,9 @@ ostream& ostream::operator<<(double n)\n \t\t\t\t      /* group: */ 0,\n #if defined __GLIBC__ && __GLIBC__ >= 2\n \t\t\t\t      /* extra: */ 0,\n+#if __GLIBC_MINOR__ >= 1\n+\t\t\t\t      /* is_char: */ 0,\n+#endif\n #endif\n \t\t\t\t      /* pad: */ fill()\n \t  };\n@@ -737,6 +740,9 @@ ostream& ostream::operator<<(long double n)\n \t\t\t\t  /* group: */ 0,\n #if defined __GLIBC__ && __GLIBC__ >= 2\n \t\t\t\t  /* extra: */ 0,\n+#if __GLIBC_MINOR__ >= 1\n+\t\t\t\t  /* is_char: */ 0,\n+#endif\n #endif\n \t\t\t\t  /* pad: */ fill()\n       };"}, {"sha": "8f39e0ef67ceccdaf8152e955cde8601fa71c252", "filename": "libio/libioP.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2FlibioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2FlibioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FlibioP.h?ref=3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "patch": "@@ -226,6 +226,19 @@ typedef int (*_IO_close_t) __P ((_IO_FILE *)); /* finalize */\n typedef int (*_IO_stat_t) __P ((_IO_FILE *, void *));\n #define _IO_SYSSTAT(FP, BUF) JUMP1 (__stat, FP, BUF)\n \n+#if _G_IO_IO_FILE_VERSION == 0x20001\n+/* The 'showmany' hook can be used to get an image how much input is\n+   available.  In many cases the answer will be 0 which means unknown\n+   but some cases one can provide real information.  */\n+typedef int (*_IO_showmanyc_t) __P ((_IO_FILE *));\n+#define _IO_SHOWMANYC(FP) JUMP0 (__showmanyc, FP)\n+\n+/* The 'imbue' hook is used to get information about the currently\n+   installed locales.  */\n+typedef void (*_IO_imbue_t) __P ((_IO_FILE *, void *));\n+#define _IO_IMBUE(FP, LOCALE) JUMP1 (__imbue, FP, LOCALE)\n+#endif\n+\n \n #define _IO_CHAR_TYPE char /* unsigned char ? */\n #define _IO_INT_TYPE int\n@@ -254,6 +267,10 @@ struct _IO_jump_t\n     JUMP_FIELD(_IO_seek_t, __seek);\n     JUMP_FIELD(_IO_close_t, __close);\n     JUMP_FIELD(_IO_stat_t, __stat);\n+#if _G_IO_IO_FILE_VERSION == 0x20001\n+    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);\n+    JUMP_FIELD(_IO_imbue_t, __imbue);\n+#endif\n #if 0\n     get_column;\n     set_column;\n@@ -381,7 +398,12 @@ extern void _IO_file_init __P ((_IO_FILE *));\n extern _IO_FILE* _IO_file_attach __P ((_IO_FILE *, int));\n extern _IO_FILE* _IO_file_open __P ((_IO_FILE *, const char *, int, int,\n \t\t\t\t     int, int));\n+#if _G_IO_IO_FILE_VERSION == 0x20001\n+extern _IO_FILE* _IO_file_fopen __P ((_IO_FILE *, const char *, const char *,\n+\t\t\t\t      int));\n+#else\n extern _IO_FILE* _IO_file_fopen __P ((_IO_FILE *, const char *, const char *));\n+#endif\n extern _IO_ssize_t _IO_file_write __P ((_IO_FILE *, const void *,\n \t\t\t\t\t_IO_ssize_t));\n extern _IO_ssize_t _IO_file_read __P ((_IO_FILE *, void *, _IO_ssize_t));"}, {"sha": "6be926b23721dc245508605668539fd6b7442db2", "filename": "libio/streambuf.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2Fstreambuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2Fstreambuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fstreambuf.cc?ref=3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "patch": "@@ -301,6 +301,17 @@ streampos streambuf::sys_seek(streamoff, _seek_dir)\n \n int streambuf::sys_close() { return 0; /* Suceess; do nothing */ }\n \n+#if _G_IO_IO_FILE_VERSION == 0x20001\n+int streambuf::showmanyc()\n+{\n+  return -1;\n+}\n+\n+void streambuf::imbue(void *)\n+{\n+}\n+#endif\n+\n streammarker::streammarker(streambuf *sb)\n {\n   _IO_init_marker(this, sb);"}, {"sha": "bc734bc75b0aa6643514d50728ab05aa40029563", "filename": "libio/streambuf.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2Fstreambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5/libio%2Fstreambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fstreambuf.h?ref=3eaa4d3b4dbca86aa581e83f0fb67b10900ff0a5", "patch": "@@ -55,8 +55,12 @@ extern \"C\" {\n #endif\n \n #ifndef _IO_wchar_t\n+#if _G_IO_IO_FILE_VERSION == 0x20001\n+#define _IO_wchar_t _G_wchar_t\n+#else\n #define _IO_wchar_t short\n #endif\n+#endif\n \n extern \"C++\" {\n class istream; /* Work-around for a g++ name mangling bug. Fixed in 2.6. */\n@@ -176,9 +180,9 @@ class ios : public _ios_fields {\n     ostream* tie(ostream* val) { ostream* save=_tie; _tie=val; return save; }\n \n     // Methods to change the format state.\n-    _IO_wchar_t fill() const { return (_IO_wchar_t)_fill; }\n+    _IO_wchar_t fill() const { return _fill; }\n     _IO_wchar_t fill(_IO_wchar_t newf)\n-\t{_IO_wchar_t oldf = (_IO_wchar_t)_fill; _fill = (char)newf; return oldf;}\n+\t{_IO_wchar_t oldf = _fill; _fill = newf; return oldf;}\n     fmtflags flags() const { return _flags; }\n     fmtflags flags(fmtflags new_val) {\n \tfmtflags old_val = _flags; _flags = new_val; return old_val; }\n@@ -409,6 +413,10 @@ struct streambuf : public _IO_FILE { // protected??\n     virtual streampos sys_seek(streamoff, _seek_dir);\n     virtual int sys_close();\n     virtual int sys_stat(void*); // Actually, a (struct stat*)\n+#if _G_IO_IO_FILE_VERSION == 0x20001\n+    virtual int showmanyc();\n+    virtual void imbue(void *);\n+#endif\n };\n \n // A backupbuf is a streambuf with full backup and savepoints on reading."}]}