{"sha": "6fee6033e7379f33c0fc6385f13424262d0bcae8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZlZTYwMzNlNzM3OWYzM2MwZmM2Mzg1ZjEzNDI0MjYyZDBiY2FlOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-20T17:57:38Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-20T17:57:38Z"}, "message": "cppmacro.c (CAN_PASTE_AFTER): New macro.\n\n\t* cppmacro.c (CAN_PASTE_AFTER): New macro.\n\t(count_params): Don't set GNU_REST_ARGS on anything.\n\t(save_expansion): Set PASTE_LEFT only on tokens for which\n\tCAN_PASTE_AFTER is true, or which are named operators.\n\n\t* cpplex.c (parse_args): Distinguish between a rest argument\n\tgiven one empty argument, and a rest argument given zero arguments.\n\t(maybe_paste_with_next): Look for VOID_REST tag, and trigger\n\tdeletion of previous token based on that.\n\t(get_raw_token): Flatten some control structure.\n\n\t* cpplib.h (CPP_LAST_EQ): Correct.\n\t(VOID_REST): New token flag.\n\t(GNU_REST_ARGS): Delete.\n\n\t* gcc.dg/cpp/20000625-2.c, gcc.dg/cpp/macsyntx.c: Update error\n\tregexps.\n\t* gcc.dg/cpp/paste6.c: New test.\n\nFrom-SVN: r35146", "tree": {"sha": "411ca2344aad9c248c5506109b46dc34a0f64bbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/411ca2344aad9c248c5506109b46dc34a0f64bbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fee6033e7379f33c0fc6385f13424262d0bcae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fee6033e7379f33c0fc6385f13424262d0bcae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fee6033e7379f33c0fc6385f13424262d0bcae8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fee6033e7379f33c0fc6385f13424262d0bcae8/comments", "author": null, "committer": null, "parents": [{"sha": "1e18a243c26b73e0b22969891ec3584bd62e316c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e18a243c26b73e0b22969891ec3584bd62e316c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e18a243c26b73e0b22969891ec3584bd62e316c"}], "stats": {"total": 132, "additions": 92, "deletions": 40}, "files": [{"sha": "af27727cad2d9c44b700987b4353beecfedc62f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fee6033e7379f33c0fc6385f13424262d0bcae8", "patch": "@@ -1,3 +1,28 @@\n+2000-07-20  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cppmacro.c (CAN_PASTE_AFTER): New macro.\n+\t(count_params): Don't set GNU_REST_ARGS on anything.\n+\t(save_expansion): Set PASTE_LEFT only on tokens for which\n+\tCAN_PASTE_AFTER is true, or which are named operators.\n+\n+\t* cpplex.c (parse_args): Distinguish between a rest argument\n+\tgiven one empty argument, and a rest argument given zero arguments.\n+\t(maybe_paste_with_next): Look for VOID_REST tag, and trigger\n+\tdeletion of previous token based on that.\n+\t(get_raw_token): Flatten some control structure.\n+\n+\t* cpplib.h (CPP_LAST_EQ): Correct.\n+\t(VOID_REST): New token flag.\n+\t(GNU_REST_ARGS): Delete.\n+\n+\t* tradcpp.c (main): Don't munge -D options.\n+\t(make_definition): Bring -D handling in line with cpplib.\n+\t(do_define): Strip all leading whitespace from macro definitions.\n+\n+2000-07-20  David Billinghurst <David.Billinghurst@riotinto.com.au>\n+\n+\t* Makefile.in (tradcpp): Depend on intl.o and version.o.\n+\n 2000-07-20  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixincl/check.tpl: strip the platform specific types before testing"}, {"sha": "36beb95ed7df554d8bba84665768d934cc94a8e9", "filename": "gcc/cpplex.c", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=6fee6033e7379f33c0fc6385f13424262d0bcae8", "patch": "@@ -2399,13 +2399,19 @@ parse_args (pfile, hp, args)\n \t debug(\"string\");\n \t This is exactly the same as if the rest argument had received no\n \t tokens - debug(\"string\",);  This extension is deprecated.  */\n-\t\n-      if (argc + 1 == macro->paramc && (macro->flags & GNU_REST_ARGS))\n+\n+      if (argc + 1 == macro->paramc && (macro->flags & VAR_ARGS))\n \t{\n \t  /* Duplicate the placemarker.  Then we can set its flags and\n              position and safely be using more than one.  */\n-\t  save_token (args, duplicate_token (pfile, &placemarker_token));\n+\t  cpp_token *pm = duplicate_token (pfile, &placemarker_token);\n+\t  pm->flags = VOID_REST;\n+\t  save_token (args, pm);\n \t  args->ends[argc] = total + 1;\n+\n+\t  if (CPP_OPTION (pfile, c99) && CPP_PEDANTIC (pfile))\n+\t    cpp_pedwarn (pfile, \"ISO C99 requires rest arguments to be used\");\n+\n \t  return 0;\n \t}\n       else\n@@ -2710,17 +2716,11 @@ maybe_paste_with_next (pfile, token)\n \tpasted = duplicate_token (pfile, second);\n       else if (second->type == CPP_PLACEMARKER)\n \t{\n-\t  cpp_context *mac_context = CURRENT_CONTEXT (pfile) - 1;\n \t  /* GCC has special extended semantics for a ## b where b is\n-\t     a varargs parameter: a disappears if b consists of no\n-\t     tokens.  This extension is deprecated.  */\n-\t  if ((mac_context->u.list->flags & GNU_REST_ARGS)\n-\t      && (mac_context->u.list->tokens[mac_context->posn-1].val.aux + 1\n-\t\t  == (unsigned) mac_context->u.list->paramc))\n-\t    {\n-\t      cpp_warning (pfile, \"deprecated GNU ## extension used\");\n-\t      pasted = duplicate_token (pfile, second);\n-\t    }\n+\t     a varargs parameter: a disappears if b was given no actual\n+\t     arguments (not merely if b is an empty argument).  */\n+\t  if (second->flags & VOID_REST)\n+\t    pasted = duplicate_token (pfile, second);\n \t  else\n \t    pasted = duplicate_token (pfile, token);\n \t}\n@@ -3161,28 +3161,27 @@ get_raw_token (pfile)\n \t{\n \t  result = context->pushed_token;\n \t  context->pushed_token = 0;\n+\t  return result;\t/* Cannot be a CPP_MACRO_ARG */\n \t}\n       else if (context->posn == context->count)\n \t{\n \t  if (pop_context (pfile))\n \t    return &eof_token;\n \t  continue;\n \t}\n-      else\n+      else if (IS_ARG_CONTEXT (context))\n \t{\n-\t  if (IS_ARG_CONTEXT (context))\n+\t  result = context->u.arg[context->posn++];\n+\t  if (result == 0)\n \t    {\n+\t      context->flags ^= CONTEXT_RAW;\n \t      result = context->u.arg[context->posn++];\n-\t      if (result == 0)\n-\t\t{\n-\t\t  context->flags ^= CONTEXT_RAW;\n-\t\t  result = context->u.arg[context->posn++];\n-\t\t}\n-\t      return result;\t/* Cannot be a CPP_MACRO_ARG */\n \t    }\n-\t  result = &context->u.list->tokens[context->posn++];\n+\t  return result;\t/* Cannot be a CPP_MACRO_ARG */\n \t}\n \n+      result = &context->u.list->tokens[context->posn++];\n+\n       if (result->type != CPP_MACRO_ARG)\n \treturn result;\n \n@@ -3225,7 +3224,6 @@ lex_next (pfile, clear)\n       if (pfile->temp_used)\n \trelease_temp_tokens (pfile);\n     }\n-     \n   lex_line (pfile, list);\n   pfile->contexts[0].count = list->tokens_used;\n "}, {"sha": "62755a9eb9bc91f4f936b8a674801798cbc3f409", "filename": "gcc/cpplib.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=6fee6033e7379f33c0fc6385f13424262d0bcae8", "patch": "@@ -46,7 +46,7 @@ typedef struct cpp_hashnode cpp_hashnode;\n    the same order as their counterparts without the '=', like \">>\".  */\n \n /* Positions in the table.  */\n-#define CPP_LAST_EQ CPP_LSHIFT\n+#define CPP_LAST_EQ CPP_MAX\n #define CPP_FIRST_DIGRAPH CPP_HASH\n \n #define TTYPE_TABLE\t\t\t\t\\\n@@ -154,7 +154,8 @@ struct cpp_string\n #define STRINGIFY_ARG\t(1 << 3) /* If macro argument to be stringified.  */\n #define PASTE_LEFT\t(1 << 4) /* If on LHS of a ## operator.  */\n #define PASTED\t\t(1 << 5) /* The result of a ## operator.  */\n-#define NAMED_OP\t(1 << 6) /* C++ named operators, also defined */\n+#define NAMED_OP\t(1 << 6) /* C++ named operators, also \"defined\".  */\n+#define VOID_REST\t(1 << 7) /* When a rest arg gets zero actual args.  */\n \n /* A preprocessing token.  This has been carefully packed and should\n    occupy 16 bytes on 32-bit hosts and 24 bytes on 64-bit hosts.  */\n@@ -178,8 +179,7 @@ struct cpp_token\n /* cpp_toklist flags.  */\n #define LIST_OFFSET     (1 << 0)\n #define VAR_ARGS\t(1 << 1)\n-#define GNU_REST_ARGS\t(1 << 2) /* Set in addition to VAR_ARGS.  */\n-#define BEG_OF_FILE\t(1 << 3)\n+#define BEG_OF_FILE\t(1 << 2)\n \n struct directive;\t\t/* These are deliberately incomplete.  */\n struct answer;"}, {"sha": "03a9a99659da3214653ec55036c62cb115f3d46f", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=6fee6033e7379f33c0fc6385f13424262d0bcae8", "patch": "@@ -53,6 +53,14 @@ static unsigned int find_param PARAMS ((const cpp_token *,\n  \t\t\t\t\tconst cpp_token *));\n static cpp_toklist * alloc_macro PARAMS ((cpp_reader *, struct macro_info *));\n \n+/* These are all the tokens that can have something pasted after them.\n+   Comma is included in the list only to support the GNU varargs extension\n+   (where you write a ## b and a disappears if b is an empty rest argument).  */\n+#define CAN_PASTE_AFTER(type) \\\n+((type) <= CPP_LAST_EQ || (type) == CPP_COLON || (type) == CPP_HASH \\\n+ || (type) == CPP_DEREF || (type) == CPP_DOT || (type) == CPP_NAME \\\n+ || (type) == CPP_INT || (type) == CPP_FLOAT || (type) == CPP_NUMBER \\\n+ || (type) == CPP_MACRO_ARG || (type) == CPP_PLACEMARKER || (type) == CPP_COMMA)\n \n /* Scans for a given token, returning the parameter number if found,\n    or 0 if not found.  Scans from FIRST to TOKEN - 1 or the first\n@@ -192,7 +200,6 @@ count_params (pfile, info)\n \t    }\n \t  else\n \t    {\n-\t      info->flags |= GNU_REST_ARGS;\n \t      if (CPP_PEDANTIC (pfile))\n \t\tcpp_pedwarn (pfile,\n \t\t\t     \"ISO C does not permit named varargs parameters\");\n@@ -294,9 +301,6 @@ parse_define (pfile, info)\n \t  /* Constraint 6.10.3.5  */\n \t  if (!(info->flags & VAR_ARGS) && is__va_args__ (pfile, token))\n \t    return 1;\n-\t  /* It might be worth doing a check here that we aren't a\n-\t     macro argument, since we don't store the text of macro\n-\t     arguments.  This would reduce \"len\" and save space.  */\n \t}\n       info->ntokens++;\n       if (TOKEN_SPELL (token) == SPELL_STRING)\n@@ -463,7 +467,15 @@ save_expansion (pfile, info)\n \t  continue;\n \n \tcase CPP_PASTE:\n-\t  dest[-1].flags |= PASTE_LEFT;\n+\t  /* Set the paste flag on the token to our left, unless there\n+\t     is no possible token to which it might be pasted.  That\n+\t     is critical for correct operation under some circumstances;\n+\t     see gcc.dg/cpp/paste6.c. */\n+\t  if (CAN_PASTE_AFTER (dest[-1].type) || (dest[-1].flags & NAMED_OP))\n+\t    dest[-1].flags |= PASTE_LEFT;\n+\t  else if (CPP_OPTION (pfile, warn_paste))\n+\t    cpp_warning_with_line (pfile, dest[-1].line, dest[-1].col,\n+\t\t\t\t   \"nothing can be pasted after this token\");\n \t  continue;\n \n \tcase CPP_HASH:"}, {"sha": "b093b20114b0083945a6b94fc6e3e0c2188c2fa5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6fee6033e7379f33c0fc6385f13424262d0bcae8", "patch": "@@ -1,3 +1,9 @@\n+2000-07-20  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* gcc.dg/cpp/20000625-2.c, gcc.dg/cpp/macsyntx.c: Update error\n+\tregexps. \n+\t* gcc.dg/cpp/paste6.c: New test.\n+\n 2000-07-19  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.dg/cpp/tr-direct.c: New test."}, {"sha": "437d8654f5864c2b123bf85158594f17a29bc731", "filename": "gcc/testsuite/gcc.dg/cpp/20000625-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c?ref=6fee6033e7379f33c0fc6385f13424262d0bcae8", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do run } */\n \n #define symbol_version(name, version) name##@##version\n-\n+/* { dg-warning \"nothing can be pasted\" \"\" { target *-*-* } 4 } */\n #define str(x) xstr(x)\n #define xstr(x) #x\n "}, {"sha": "c2746ee80c526979961beea91fb9f7420bf6cc3c", "filename": "gcc/testsuite/gcc.dg/cpp/macsyntx.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c?ref=6fee6033e7379f33c0fc6385f13424262d0bcae8", "patch": "@@ -51,16 +51,15 @@ one(ichi\\\n two(ichi)\t\t\t/* { dg-error \"not enough\" } */\n var0()\t\t\t\t/* OK.  */\n var0(ichi)\t\t\t/* OK.  */\n-var1()\t\t\t\t/* { dg-error \"not enough\" } */\n-var1(ichi)\t\t\t/* { dg-error \"not enough\" } */\n+var1()\t\t\t\t/* { dg-warning \"rest arguments to be used\" } */\n+var1(ichi)\t\t\t/* { dg-warning \"rest arguments to be used\" } */\n var1(ichi, ni)\t\t\t/* OK.  */\n \n-/* This tests two deprecated oddities of GNU rest args - omitting a\n-   comma is OK, and backtracking a token on pasting an empty rest\n-   args.  */\n+/* This tests two oddities of GNU rest args - omitting a comma is OK,\n+   and backtracking a token on pasting an empty rest args.  */\n #define rest(x, y...) x ## y\t/* { dg-warning \"ISO C\" } */\n-rest(ichi,)\t\t\t/* { dg-warning \"deprecated\" } */\n-rest(ichi)\t\t\t/* { dg-warning \"deprecated\" } */\n+rest(ichi,)\t\t\t/* OK.  */\n+rest(ichi)\t\t\t/* { dg-warning \"rest arguments to be used\" } */\n #if 23 != rest(2, 3)\t\t/* OK, no warning.  */\n #error 23 != 23 !!\n #endif"}, {"sha": "0ac55df328aec64f67acd44e34bfcd056ea9b694", "filename": "gcc/testsuite/gcc.dg/cpp/paste6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fee6033e7379f33c0fc6385f13424262d0bcae8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpaste6.c?ref=6fee6033e7379f33c0fc6385f13424262d0bcae8", "patch": "@@ -0,0 +1,12 @@\n+/* Regression test for paste appearing at the beginning of a set of\n+   actual arguments.  Original bug exposed by Linux kernel.  Problem\n+   reported by Jakub Jelinek <jakub@redhat.com>.  */\n+\n+/* { dg-do compile } */\n+\n+extern int foo(int x);\n+\n+#define bar(x) foo(x)\n+#define baz(x) bar(##x)  /* { dg-warning \"nothing can be pasted\" } */\n+\n+int quux(int y) { return baz(y); }"}]}