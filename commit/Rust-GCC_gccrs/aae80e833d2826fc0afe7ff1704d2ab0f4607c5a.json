{"sha": "aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlODBlODMzZDI4MjZmYzBhZmU3ZmYxNzA0ZDJhYjBmNDYwN2M1YQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-19T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-19T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "36a1d508bd806f374fb448c4196cb8bc99c9fd0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36a1d508bd806f374fb448c4196cb8bc99c9fd0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/comments", "author": null, "committer": null, "parents": [{"sha": "b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b56dc0fc6cc39fba9ed974c58a21cf5f7a264be1"}], "stats": {"total": 588, "additions": 587, "deletions": 1}, "files": [{"sha": "50af7ab23b936f3a3960ca2fa29cd13639f34148", "filename": "contrib/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "patch": "@@ -1,3 +1,19 @@\n+2020-06-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_update_version.py: First checkout and then\n+\trun git pull ---rebase.\n+\n+2020-06-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_update_version.py: Support merge commits\n+\tand walk only on the branch that is being merged and generate\n+\tmissing ChangeLog entries.\n+\n+2020-06-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Fix Backported from timestamp when\n+\tuse_commit_ts=True is used.\n+\n 2020-06-17  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Print 'Backported from master'"}, {"sha": "49ce2772aa7578f882db6703a494d5b9ebd43274", "filename": "gcc/ChangeLog", "status": "modified", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "patch": "@@ -1,3 +1,186 @@\n+2020-06-18  Felix Yang  <felix.yang@huawei.com>\n+\n+\t* tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Call\n+\tvect_relevant_for_alignment_p to filter out data references in\n+\tthe loop whose alignment is irrelevant when trying loop peeling\n+\tto force alignment.\n+\n+2020-06-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*cmpqi_ext<mode>_1): Use SWI248 mode\n+\titerator instead of SImode for ZERO_EXTRACT RTX.  Use SWI248\n+\tmode iterator for the first operand of ZERO_EXTRACT RTX.\n+\tChange ext_register_operand predicate to register_operand.\n+\tRename from *cmpqi_ext_1.\n+\t(*cmpqi_ext<mode>_2): Ditto.  Rename from *cmpqi_ext_2.\n+\t(*cmpqi_ext<mode>_3): Ditto.  Rename from *cmpqi_ext_3.\n+\t(*cmpqi_ext<mode>_4): Ditto.  Rename from *cmpqi_ext_4.\n+\t(cmpi_ext_3): Use HImode instead of SImode for ZERO_EXTRACT RTX.\n+\t(*extv<mode>): Use SWI24 mode iterator for the first operand\n+\tof ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n+\tto register_operand.\n+\t(*extzv<mode>): Use SWI248 mode iterator for the first operand\n+\tof ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n+\tto register_operand.\n+\t(*extzvqi): Use SWI248 mode iterator instead of SImode for\n+\tZERO_EXTRACT RTX.  Use SWI248 mode iterator for the first operand\n+\tof ZERO_EXTRACT RTX.  Change ext_register_operand predicate to\n+\tregister_operand.\n+\t(*extzvqi_mem_rex64 and corresponding peephole2):  Use SWI248 mode\n+\titerator instead of SImode for ZERO_EXTRACT RTX.  Use SWI248\n+\tmode iterator for the first operand of ZERO_EXTRACT RTX.\n+\tChange ext_register_operand predicate to register_operand.\n+\t(@insv<mode>_1): Use SWI248 mode iterator for the first operand\n+\tof ZERO_EXTRACT RTX.  Change ext_register_operand predicate to\n+\tregister_operand.\n+\t(*insvqi_1): Use SWI248 mode iterator instead of SImode\n+\tfor ZERO_EXTRACT RTX.  Use SWI248 mode iterator for the\n+\tfirst operand of ZERO_EXTRACT RTX.  Change ext_register_operand\n+\tpredicate to register_operand.\n+\t(*insvqi_2): Ditto.\n+\t(*insvqi_3): Ditto.\n+\t(*insvqi_1_mem_rex64 and corresponding peephole2):  Use SWI248 mode\n+\titerator instead of SImode for ZERO_EXTRACT RTX.  Use SWI248\n+\tmode iterator for the first operand of ZERO_EXTRACT RTX.\n+\tChange ext_register_operand predicate to register_operand.\n+\t(addqi_ext_1): New expander.\n+\t(*addqi_ext<mode>_1): Use SWI248 mode iterator instead of SImode\n+\tfor ZERO_EXTRACT RTX.  Use SWI248 mode iterator for the first\n+\toperand of ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n+\tto register_operand.  Rename from *addqi_ext_1.\n+\t(*addqi_ext<mode>_2): Ditto. Rename from *addqi_ext_2.\n+\t(divmodqi4): Use HImode instead of SImode for ZERO_EXTRACT RTX.\n+\t(udivmodqi4): Ditto.\n+\t(testqi_ext_1): Use HImode instead of SImode for ZERO_EXTRACT RTX.\n+\t(*testqi_ext<mode>_1): Use SWI248 mode iterator instead of SImode\n+\tfor ZERO_EXTRACT RTX.  Use SWI248 mode iterator for the first\n+\toperand of ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n+\tto register_operand.  Rename from *testqi_ext_1.\n+\t(*testqi_ext<mode>_2): Ditto.  Rename from *testqi_ext_2.\n+\t(andqi_ext_1): New expander.\n+\t(*andqi_ext<mode>_1): Use SWI248 mode iterator instead of SImode\n+\tfor ZERO_EXTRACT RTX.  Use SWI248 mode iterator for the first\n+\toperand of ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n+\tto register_operand.  Rename from andqi_ext_1.\n+\t(*andqi_ext<mode>_1_cc): Ditto.  Rename from *andqi_ext_1_cc.\n+\t(*andqi_ext<mode>_2): Ditto.  Rename from *andqi_ext_2.\n+\t(*<code>qi_ext<mode>_1): Ditto.  Rename from *<code>qi_ext_1.\n+\t(*<code>qi_ext<mode>_2): Ditto.  Rename from *<code>qi_ext_2.\n+\t(xorqi_ext_1_cc): Use HImode instead of SImode for ZERO_EXTRACT RTX.\n+\t(*xorqi_ext<mode>_1_cc):  Use SWI248 mode iterator instead of SImode\n+\tfor ZERO_EXTRACT RTX.  Use SWI248 mode iterator for the first\n+\toperand of ZERO_EXTRACT RTX.  Change ext_register_operand predicate\n+\tto register_operand.  Rename from *xorqi_ext_1_cc.\n+\t* config/i386/i386-expand.c (ix86_split_idivmod): Emit ZERO_EXTRACT\n+\tin mode, matching its first operand.\n+\t(promote_duplicated_reg): Update for renamed insv<mode>_1.\n+\t* config/i386/predicates.md (ext_register_operand): Remove predicate.\n+\n+2020-06-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/95667\n+\tPR middle-end/92814\n+\t* builtins.c (compute_objsize): Remove call to\n+\tcompute_builtin_object_size and instead compute conservative sizes\n+\tdirectly here.\n+\n+2020-06-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* coretypes.h (struct iterator_range): New type.\n+\t* tree-vect-patterns.c (vect_determine_precisions): Use\n+\trange-based iterator.\n+\t(vect_pattern_recog): Likewise.\n+\t* tree-vect-slp.c (_bb_vec_info):  Likewise.\n+\t(_bb_vec_info::~_bb_vec_info): Likewise.\n+\t(vect_slp_check_for_constructors): Likewise.\n+\t* tree-vectorizer.h:Add new iterators\n+\tand functions that use it.\n+\n+2020-06-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/rs6000/rs6000-call.c (fold_build_vec_cmp):\n+\tSince 502d63b6d6141597bb18fd23c87736a1b384cf8f, first argument\n+\tof a VEC_COND_EXPR cannot be tcc_comparison and so that\n+\ta SSA_NAME needs to be created before we use it for the first\n+\targument of the VEC_COND_EXPR.\n+\t(fold_compare_helper): Pass gsi to fold_build_vec_cmp.\n+\n+2020-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/95739\n+\t* internal-fn.c (expand_vect_cond_optab_fn): Move the result\n+\tto the target if necessary.\n+\t(expand_vect_cond_mask_optab_fn): Likewise.\n+\n+2020-06-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-ssa-reassoc.c (ovce_extract_ops): Replace *vcond with\n+\tvcond as we check for NULL pointer.\n+\n+2020-06-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gimple-pretty-print.c (dump_binary_rhs): Use braces to\n+\tsilence empty-body warning with gcc_fallthrough.\n+\n+2020-06-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95699\n+\t* tree-ssa-phiopt.c (minmax_replacement): Treat (signed int)x < 0\n+\tas x > INT_MAX and (signed int)x >= 0 as x <= INT_MAX.  Move variable\n+\tdeclarations to the statements that set them where possible.\n+\n+2020-06-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95713\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Don't allow\n+\tscalar mode halfvectype other than vector boolean for\n+\tVEC_PACK_TRUNC_EXPR.\n+\n+2020-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* varasm.c (assemble_variable): Make sure to not\n+\tdefer output when outputting addressed constants.\n+\t(output_constant_def_contents): Likewise.\n+\t(add_constant_to_table): Take and pass on whether to\n+\tdefer output.\n+\t(output_addressed_constants): Likewise.\n+\t(output_constant_def): Pass on whether to defer output\n+\tto add_constant_to_table.\n+\t(tree_output_constant_def): Defer output of constants.\n+\n+2020-06-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (_slp_tree::two_operators): Remove.\n+\t(_slp_tree::lane_permutation): New member.\n+\t(_slp_tree::code): Likewise.\n+\t(SLP_TREE_TWO_OPERATORS): Remove.\n+\t(SLP_TREE_LANE_PERMUTATION): New.\n+\t(SLP_TREE_CODE): Likewise.\n+\t(vect_stmt_dominates_stmt_p): Declare.\n+\t* tree-vectorizer.c (vect_stmt_dominates_stmt_p): New function.\n+\t* tree-vect-stmts.c (vect_model_simple_cost): Remove\n+\tSLP_TREE_TWO_OPERATORS handling.\n+\t* tree-vect-slp.c (_slp_tree::_slp_tree): Amend.\n+\t(_slp_tree::~_slp_tree): Likewise.\n+\t(vect_two_operations_perm_ok_p): Remove.\n+\t(vect_build_slp_tree_1): Remove verification of two-operator\n+\tpermutation here.\n+\t(vect_build_slp_tree_2): When we have two different operators\n+\tbuild two computation SLP nodes and a blend.\n+\t(vect_print_slp_tree): Print the lane permutation if it exists.\n+\t(slp_copy_subtree): Copy it.\n+\t(vect_slp_rearrange_stmts): Re-arrange it.\n+\t(vect_slp_analyze_node_operations_1): Handle SLP_TREE_CODE\n+\tVEC_PERM_EXPR explicitely.\n+\t(vect_schedule_slp_instance): Likewise.  Remove old\n+\tSLP_TREE_TWO_OPERATORS code.\n+\t(vectorizable_slp_permutation): New function.\n+\n+2020-06-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-vect-generic.c (expand_vector_condition): Check\n+\tfor gassign before inspecting RHS.\n+\n 2020-06-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gimplify.c (omp_notice_threadprivate_variable)"}, {"sha": "bfd6abf660db7420d406333b58a251dcc72cf3ad", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "patch": "@@ -1 +1 @@\n-20200618\n+20200619"}, {"sha": "64a2d0fb95ea6ecfe7a3588a1064b2b68292ec35", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "patch": "@@ -1,3 +1,306 @@\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Get_Size_For_Range): Only make sure to return a\n+\tsize lower than that of the original type if possible.\n+\t* libgnat/s-rannum.adb (Random_Discrete): Back out optimization\n+\tadded for 32-bit types.\n+\n+2020-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch6.ads, sem_ch6.adb (Check_Formal_Conformance): New\n+\tsubprogram.\n+\t(Check_Conformance): Move code to Check_Formal_Conformance.\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Check for formal\n+\tconformance when needed.\n+\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Narrow_Large_Operation): New procedure to try\n+\tand narrow large arithmetic and comparison operations.\n+\t(Expand_N_In): Call it.\n+\t(Expand_N_Op_Abs): Likewise.\n+\t(Expand_N_Op_Add): Likewise.\n+\t(Expand_N_Op_Divide): Likewise.\n+\t(Expand_N_Op_Eq): Likewise.\n+\t(Expand_N_Op_Ge): Likewise.\n+\t(Expand_N_Op_Gt): Likewise.\n+\t(Expand_N_Op_Le): Likewise.\n+\t(Expand_N_Op_Lt): Likewise.\n+\t(Expand_N_Op_Minus): Likewise.\n+\t(Expand_N_Op_Mod): Likewise.\n+\t(Expand_N_Op_Multiply): Likewise.\n+\t(Expand_N_Op_Ne): Likewise.\n+\t(Expand_N_Op_Plus): Likewise.\n+\t(Expand_N_Op_Rem): Likewise.\n+\t(Expand_N_Op_Subtract): Likewise.\n+\t(Expand_N_Type_Conversion): Use Convert_To procedure.\n+\t* exp_ch9.adb (Is_Pure_Barrier) <N_Identifier>: Skip all\n+\tnumeric types.\n+\t<N_Type_Conversion>: Use explicit criterion.\n+\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Apply constraint\n+\tand predicate checks for the qualified expression on entry,\n+\tfollowed by constraint and predicate checks for the allocator\n+\titself, and return early if this results in a static error.\n+\t(Expand_N_Allocator): Do not do the same here.  Instead apply\n+\tconstraint and predicate checks for arrays in the subtype\n+\tindication case.\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Do not apply\n+\trange checks to allocators here.\n+\n+2020-06-18  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (BIP_Suffix_Kind, Is_Build_In_Place_Entity): Move\n+\tdeclarations...\n+\t* exp_ch6.ads: Here.\n+\t* exp_util.adb (Is_Secondary_Stack_BIP_Func_Call): Do not rely\n+\ton the name of the scope to locate the extra formal BIPalloc\n+\tsince they are copied when the pointer type associated with\n+\tdispatching calls is built; rely on routines\n+\tIs_Build_In_Place_Entity and BIP_Suffix_Kind.\n+\t* exp_disp.adb (Expand_Dispatching_Call): Set the scope of the\n+\tfirst extra formal of the internally built pointer type.\n+\t* sem_ch3.adb (Derive_Subprogram): Do not inherit extra formals\n+\tfrom a limited interface parent since limitedness is not\n+\tinherited in such case (AI-419) and this affects the extra\n+\tformals.\n+\t* sprint.adb (Write_Itype): Output extra formals of subprogram\n+\ttypes.\n+\n+2020-06-18  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* errout.adb (Write_Error_Summary): Display number of warnings\n+\ttreated as errors.\n+\t* errutil.ads: Update comment.\n+\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Analyze_Attribute) <Asm_{In,Out}put>: Alphabetize.\n+\t<Component_Size>: Add check for universal integer attribute.\n+\t<Aft>, <Bit_Order>, <Definite>, <Max_Alignment_For_Allocation>,\n+\t<Scalar_Storage_Order>: Raise Program_Error on them.\n+\t* sem_attr.adb (Eval_Attribute) <Component_Size>: Add comment on\n+\tthe packed array case.\n+\n+2020-06-18  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_util.adb (Object_Access_Level): Treat a 'Old attribute\n+\treference like an aggregate in determining its static\n+\taccessibility level; after the evaluation of the relevant\n+\tpost-condition, the implicitly declared constant associated with\n+\tan Old attribute reference ceases to exist. Similarly for\n+\tLoop_Entry attribute.\n+\t* exp_ch6.adb (Expand_Call_Helper): For an attribute reference\n+\tthat is expanded into a reference to an implicitly declared\n+\tconstant (e.g., a 'Old or 'Loop_Entry attribute), compute the\n+\tdynamic accessibility level of that constant by looking at the\n+\tdeclaration of the constant (as opposed to looking at the\n+\tattribute reference).\n+\n+2020-06-18  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Do not generate a\n+\tdefault initial condition check for the declaration of an\n+\timported object.\n+\n+2020-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl: Add s-statxd.o.\n+\t* bindgen.adb (Gen_Adainit): Add support for XDR_Stream.\n+\t* bindusg.adb (Display): Add mention of -xdr.\n+\t* gnatbind.adb: Process -xdr switch.\n+\t* init.c (__gl_xdr_stream): New.\n+\t* opt.ads (XDR_Stream): New.\n+\t* libgnat/s-stratt__xdr.adb: Rename to...\n+\t* libgnat/s-statxd.adb: this and adjust.\n+\t* libgnat/s-statxd.ads: New.\n+\t* libgnat/s-stratt.ads, libgnat/s-stratt.adb: Choose between\n+\tdefault and XDR implementation at runtime.\n+\t* libgnat/s-ststop.ads: Update comments.\n+\t* doc/gnat_rm/implementation_advice.rst: Update doc on XDR\n+\tstreaming.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute) <To_Address>: Use the address\n+\tsize of the target instead of the host when checking the value of\n+\ta static expression.  Also use standard idiom for exponentiation.\n+\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_prag.adb (Process_Convention): Give a warning on C_Variadic_n\n+\tbeing applied to a subprogram with exactly n parameters.\n+\n+2020-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnarl/s-osinte__linux.ads, libgnat/g-io.adb,\n+\tlibgnat/g-socket.adb, libgnat/g-socthi.adb,\n+\tlibgnat/g-socthi.ads, libgnat/g-socthi__vxworks.adb,\n+\tlibgnat/g-socthi__vxworks.ads, libgnat/g-sothco.ads,\n+\tlibgnat/s-io.adb, libgnat/a-except.adb: Fix function profile\n+\tmismatch with imported C functions.\n+\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Remove superfluous calls\n+\tto Relocate_Node and merge calls to Analyze and Resolve in a\n+\tcouple of places.  Do not attempt to generate a range check\n+\tfor an actual parameter against the formal's type of a derived\n+\tsubprogram after generating a conversion to the formal's type\n+\tof the parent subprogram.\n+\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Compute_Range_For_Arithmetic_Op): New procedure to\n+\tcompute a range for an arithmetical operation extracted from...\n+\t(Minimize_Eliminate_Overflows): ...here.  Call it.\n+\t(Determine_Range_Cache_O): New cache for Original_Node nodes.\n+\t(Determine_Range): Call Compute_Range_For_Arithmetic_Op for all\n+\tarithmetic expressions. Use Attribute_Id in lieu of Attribute_Name\n+\tfor attributes. Add handling for Range_Length alongside Length.\n+\tAdd specific handling for Alignment, Bit, First_Bit, Last_Bit,\n+\tMax_Size_In_Storage_Elements, Position, Bit_Position,\n+\tComponent_Size, Object_Size, Size, Value_Size, Descriptor_Size.\n+\t(Enable_Overflow_Check): Omit the check for Abs and Minus if the\n+\toperand cannot be the largest negative number.\n+\t(Selected_Length_Checks): Use Pos for Number_Dimensions.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Move compile-time\n+\thandling of Bit_Position, Descriptor_Size, First_Bit, Last_Bit\n+\tand Position to...\n+\t* sem_attr.adb (Eval_Attribute): ...here.  Move up Alignment for\n+\tobjects and use Compile_Time_Known_Attribute in this case too.\n+\n+2020-06-18  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* erroutc.ads: Declare new Is_Compile_Time_Msg boolean,\n+\tadd new Compile_Time_Pragma field to Error_Msg_Object type.\n+\t(Count_Compile_Time_Pragma_Warnings): New function.\n+\t* erroutc.adb (Count_Compile_Time_Pragma_Warnings): New\n+\tfunction.\n+\t(Compilation_Errors): Take Compile_Time warnings into account\n+\twhen tallying Errors/Warnings.\n+\t* errout.ads (Error_Msg): New procedure.\n+\t* errout.adb (Error_Msg): New procedure.\n+\t(Error_Msg_Internal): Set new Compile_Time_Pragma field in\n+\tError_Msg_Object.\n+\t* errutil.adb (Error_Msg): Set new Compile_Time_Pragma field in\n+\tError_Msg_Object.\n+\t* sem_prag.adb (Validate_Compile_Time_Warning_Or_Error): Pass\n+\tTrue to new Error_Msg procedure.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Update doc for\n+\tthe Compile_Time_Warning pragma.\n+\t* gnat_rm.texi: Regenerate.\n+\t* opt.ads: Update comment.\n+\n+2020-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch4.adb (Check_Compatible_Profiles): Add explicit\n+\tinitialization.\n+\n+2020-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Generate_Index_Checks): Handle\n+\tN_Subtype_Indication returned from Scalar_Range.\n+\n+2020-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb, sem_ch3.adb: Minor refactorings.\n+\t* sem_eval.adb (Eval_Qualified_Expression): Fix reference to RM\n+\trule in comment; only set a local variable Hex in the branch\n+\twhere it is used.\n+\n+2020-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_eval.adb (Check_Non_Static_Context): Use Is_RTE.\n+\n+2020-06-18  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch4.adb (Find_Equality_Types.Check_Access_Object_Types):\n+\tNew function, used to implement RM 4.5.2 (9.6/2).\n+\t(Find_Equality_Types.Check_Compatible_Profiles): New function,\n+\tused to implement RM 4.5.2(9.7/2).\n+\t(Find_Equality_Types.Reference_Anonymous_Access_Type): New\n+\tfunction.\n+\t(Find_Equality_Types.Try_One_Interp): Fix handling of anonymous\n+\taccess types which was accepting both too much and too little.\n+\tRemove accumulated special and incomplete cases for\n+\tinstantiations, replaced by Has_Compatible_Type.\n+\t(Analyze_Overloaded_Selected_Component): Use\n+\tIs_Anonymous_Access_Type instead of Ekind_In.\n+\t* sem_res.adb: Code cleanup and bug fix: use\n+\tIs_Anonymous_Access_Type instead of Ekind_In.  Relax checking of\n+\tanonymous access parameter when universal_access \"=\" is\n+\tinvolved.\n+\t* sem_type.adb: Likewise.\n+\t(Find_Unique_Type): Move code from here...\n+\t(Specific_Type): ...to here. Also add missing handling of access\n+\tto class wide types.\n+\t* einfo.ads, einfo.adb (Is_Access_Object_Type): New.\n+\n+2020-06-18  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/a-strsto.ads, libgnat/a-ststbo.adb,\n+\tlibgnat/a-ststbo.ads, libgnat/a-ststun.adb,\n+\tlibgnat/a-ststun.ads: New files, containing packages\n+\tAda.Streams.Storage, Ada.Streams.Storage.Bounded, and\n+\tAda.Streams.Storage.Unbounded.\n+\t* impunit.adb, Makefile.rtl: Add new file names.\n+\n+2020-06-18  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch13.adb (Has_Good_Profile): Enforce strictness in the\n+\tcheck. Required to detect wrong profiles for Input and Output.\n+\t(Analyze_Stream_TSS_Definition): Minor enhancement in the text\n+\tof the error for class-wide attributes.\n+\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Get_Integer_Type): Pick an unsigned type based\n+\ton the Esize of the base type of the input type.\n+\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Array_Equality): For the optimization of\n+\tthe 2-element case, build new expression lists for the indices.\n+\n+2020-06-18  Richard Kenner  <kenner@adacore.com>\n+\n+\t* sem_util.adb (Enclosing_Subprogram): No longer need\n+\tConvention_Protected.\n+\n+2020-06-18  Claire Dross  <dross@adacore.com>\n+\n+\t* sem_util.adb (Is_OK_Volatile_Context): Return False on\n+\tdefinitions of constants declared in declare expressions.\n+\n+2020-06-18  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_aspects.rst\n+\t(Relaxed_Initialization): New implementation-defined aspect.\n+\t* doc/gnat_rm/implementation_defined_attributes.rst\n+\t(Initialized): New implementation-defined attribute.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-06-18  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Dispatching_Call): Add missing decoration\n+\tof attribute Extra_Accessibility_Of_Result.\n+\t* freeze.adb (Check_Extra_Formals): No check required if\n+\texpansion is disabled; Adding check on\n+\tExtra_Accessibilty_Of_Result.\n+\t(Freeze_Subprogram): Fix decoration of\n+\tExtra_Accessibility_Of_Result.\n+\t* sem_ch3.adb (Derive_Subprogram): Fix decoration of\n+\tExtra_Accessibility_Of_Result\n+\n+2020-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Optimize_Length_Comparison): Accept 32-bit values\n+\tin the full unsigned range.\n+\n 2020-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* checks.adb (Apply_Universal_Integer_Attribute_Checks): Do not do"}, {"sha": "8c027b238c8756fca9854e43bb81d0e9c796d823", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "patch": "@@ -1,3 +1,22 @@\n+2020-06-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* method.c (early_check_defaulted_comparison): Check for &&.\n+\t(build_comparison_op): Allow empty union.  Diagnose non-category\n+\ttype.\n+\t(common_comparison_type): Remove handling for non-category type.\n+\n+2020-06-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95735\n+\t* pt.c (finish_template_variable): Return if\n+\tcoerce_innermost_template_parms return error_mark_node.\n+\n+2020-06-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95728\n+\t* pt.c (tsubst_copy_and_build) <case NEW_EXPR>: Return error_mark_node\n+\tif placement is erroneous.\n+\n 2020-06-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/66159"}, {"sha": "6b3ba8b85f0fc802497dd65682c3c939dea95396", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "patch": "@@ -1,3 +1,8 @@\n+2020-06-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.c (resolve_omp_clauses): Reject vars with\n+\tallocatable components in OpenMP map clauses.\n+\n 2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* parse.c (decode_oacc_directive): Permit 'acc routine' also"}, {"sha": "dbb9c56c88886c0a5f79bddecdd78ebac49998e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae80e833d2826fc0afe7ff1704d2ab0f4607c5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aae80e833d2826fc0afe7ff1704d2ab0f4607c5a", "patch": "@@ -1,3 +1,63 @@\n+2020-06-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp2a/spaceship-ref1.C: New test.\n+\t* g++.dg/cpp2a/spaceship-synth-neg4.C: New test.\n+\t* g++.dg/cpp2a/spaceship-union1.C: New test.\n+\n+2020-06-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/pr78904-1a.c: New test.\n+\t* gcc.target/i386/pr78904-1b.c: Ditto.\n+\t* gcc.target/i386/pr78904-2a.c: Ditto.\n+\t* gcc.target/i386/pr78904-2b.c: Ditto.\n+\t* gcc.target/i386/pr78904-3a.c: Ditto.\n+\t* gcc.target/i386/pr78904-3b.c: Ditto.\n+\t* gcc.target/i386/pr78904-4a.c: Ditto.\n+\t* gcc.target/i386/pr78904-4b.c: Ditto.\n+\t* gcc.target/i386/pr78904-5a.c: Ditto.\n+\t* gcc.target/i386/pr78904-5b.c: Ditto.\n+\t* gcc.target/i386/pr78904-6a.c: Ditto.\n+\t* gcc.target/i386/pr78904-6b.c: Ditto.\n+\t* gcc.target/i386/pr78967-1a.c: Ditto.\n+\t* gcc.target/i386/pr78967-1b.c: Ditto.\n+\t* gcc.target/i386/pr78967-2a.c: Ditto.\n+\t* gcc.target/i386/pr78967-2b.c: Ditto.\n+\n+2020-06-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/95667\n+\tPR middle-end/92814\n+\t* gcc.dg/Wstringop-overflow-25.c: Remove xfails.\n+\t* gcc.dg/Wstringop-overflow-39.c: New test.\n+\n+2020-06-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95735\n+\t* g++.dg/cpp2a/concepts-err2.C: New test.\n+\n+2020-06-18  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* g++.target/aarch64/pr94052.C: Give z::ad public access.\n+\n+2020-06-18  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/map-alloc-comp-1.f90: New test.\n+\n+2020-06-18  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95728\n+\t* g++.dg/template/cast6.C: New test.\n+\n+2020-06-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/95699\n+\t* gcc.dg/tree-ssa/pr95699.c: New test.\n+\n+2020-06-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95713\n+\t* gcc.dg/pr95713.c: New test.\n+\n 2020-06-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-c++-common/gomp/default-1.c: Update."}]}