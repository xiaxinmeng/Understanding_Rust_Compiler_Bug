{"sha": "17ea7fad2830423188e2055708bb2d4a983c33bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdlYTdmYWQyODMwNDIzMTg4ZTIwNTU3MDhiYjJkNGE5ODNjMzNiYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-06-29T08:22:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-19T09:53:37Z"}, "message": "[Ada] No range check on fixed point to integer conversion\n\ngcc/ada/\n\n\t* checks.adb (Apply_Type_Conversion_Checks): Minor code clean\n\tup.\n\t* exp_ch4.adb (Discrete_Range_Check): Optimize range checks.\n\tUpdate comments.\n\t(Expand_N_Type_Conversion): Generate range check when rewriting\n\ta type conversion if needed. Add assertion.\n\t* exp_ch6.adb (Expand_Simple_Function_Return): Minor code clean\n\tup.\n\t* sem_res.adb (Resolve_Type_Conversion): Apply range check when\n\tneeded.  Update comments.", "tree": {"sha": "362937098d75ee7c5ab5c986f531afa118fc4697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/362937098d75ee7c5ab5c986f531afa118fc4697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17ea7fad2830423188e2055708bb2d4a983c33bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ea7fad2830423188e2055708bb2d4a983c33bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ea7fad2830423188e2055708bb2d4a983c33bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ea7fad2830423188e2055708bb2d4a983c33bc/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6272b85b5f624c5633af243bdf191b8089c892e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6272b85b5f624c5633af243bdf191b8089c892e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6272b85b5f624c5633af243bdf191b8089c892e"}], "stats": {"total": 91, "additions": 55, "deletions": 36}, "files": [{"sha": "cfbb4bc9fcfc75b943fc6e6ecdb0c3b9d17f8add", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ea7fad2830423188e2055708bb2d4a983c33bc/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ea7fad2830423188e2055708bb2d4a983c33bc/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=17ea7fad2830423188e2055708bb2d4a983c33bc", "patch": "@@ -3646,14 +3646,10 @@ package body Checks is\n                             (Entity (High_Bound (Scalar_Range (Enum_T))));\n                      end if;\n \n-                     if Last_E <= Last_I then\n-                        null;\n-\n-                     else\n+                     if Last_E > Last_I then\n                         Activate_Overflow_Check (N);\n                      end if;\n                   end;\n-\n                else\n                   Activate_Overflow_Check (N);\n                end if;\n@@ -3666,7 +3662,6 @@ package body Checks is\n                  and then not GNATprove_Mode\n                then\n                   Apply_Float_Conversion_Check (Expr, Target_Type);\n-\n                else\n                   --  Conversions involving fixed-point types are expanded\n                   --  separately, and do not need a Range_Check flag, except"}, {"sha": "7139e4948b3540206a37ab9fbbb76d8b4ae2ce4c", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ea7fad2830423188e2055708bb2d4a983c33bc/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ea7fad2830423188e2055708bb2d4a983c33bc/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=17ea7fad2830423188e2055708bb2d4a983c33bc", "patch": "@@ -11447,14 +11447,29 @@ package body Exp_Ch4 is\n       --  Start of processing for Discrete_Range_Check\n \n       begin\n-         --  Nothing to do if conversion was rewritten\n+         --  Clear the Do_Range_Check flag on N if needed: this can occur when\n+         --  e.g. a trivial type conversion is rewritten by its expression.\n+\n+         Set_Do_Range_Check (N, False);\n+\n+         --  Nothing more to do if conversion was rewritten\n \n          if Nkind (N) /= N_Type_Conversion then\n             return;\n          end if;\n \n          Expr := Expression (N);\n \n+         --  Nothing to do if no range check flag set\n+\n+         if not Do_Range_Check (Expr) then\n+            return;\n+         end if;\n+\n+         --  Clear the Do_Range_Check flag on Expr\n+\n+         Set_Do_Range_Check (Expr, False);\n+\n          --  Nothing to do if range checks suppressed\n \n          if Range_Checks_Suppressed (Target_Type) then\n@@ -11473,23 +11488,20 @@ package body Exp_Ch4 is\n          --  Before we do a range check, we have to deal with treating\n          --  a fixed-point operand as an integer. The way we do this\n          --  is simply to do an unchecked conversion to an appropriate\n-         --  integer type large enough to hold the result.\n+         --  integer type with the smallest size, so that we can suppress\n+         --  trivial checks.\n \n          if Is_Fixed_Point_Type (Etype (Expr)) then\n-            if Esize (Base_Type (Etype (Expr))) > Standard_Integer_Size then\n-               Ityp := Standard_Long_Long_Integer;\n-            else\n-               Ityp := Standard_Integer;\n-            end if;\n+            Ityp := Small_Integer_Type_For\n+                      (Esize (Base_Type (Etype (Expr))), False);\n \n-            --  Generate a temporary with the large type to facilitate in the C\n-            --  backend the code generation for the unchecked conversion.\n+            --  Generate a temporary with the integer type to facilitate in the\n+            --  C backend the code generation for the unchecked conversion.\n \n             if Modify_Tree_For_C then\n                Generate_Temporary;\n             end if;\n \n-            Set_Do_Range_Check (Expr, False);\n             Rewrite (Expr, Unchecked_Convert_To (Ityp, Expr));\n          end if;\n \n@@ -11726,15 +11738,20 @@ package body Exp_Ch4 is\n          Tnn    : Entity_Id;\n \n       begin\n-         --  Nothing to do if conversion was rewritten\n+         --  Clear the Do_Range_Check flag on N if needed: this can occur when\n+         --  e.g. a trivial type conversion is rewritten by its expression.\n+\n+         Set_Do_Range_Check (N, False);\n+\n+         --  Nothing more to do if conversion was rewritten\n \n          if Nkind (N) /= N_Type_Conversion then\n             return;\n          end if;\n \n          Expr := Expression (N);\n \n-         --  Clear the flag once for all\n+         --  Clear the Do_Range_Check flag on Expr\n \n          Set_Do_Range_Check (Expr, False);\n \n@@ -12009,14 +12026,22 @@ package body Exp_Ch4 is\n \n       --  Nothing at all to do if conversion is to the identical type so remove\n       --  the conversion completely, it is useless, except that it may carry\n-      --  an Assignment_OK attribute, which must be propagated to the operand.\n+      --  an Assignment_OK attribute, which must be propagated to the operand\n+      --  and the Do_Range_Check flag on Operand should be taken into account.\n \n       if Operand_Type = Target_Type then\n          if Assignment_OK (N) then\n             Set_Assignment_OK (Operand);\n          end if;\n \n          Rewrite (N, Relocate_Node (Operand));\n+\n+         if Do_Range_Check (Operand) then\n+            pragma Assert (Is_Discrete_Type (Operand_Type));\n+\n+            Discrete_Range_Check;\n+         end if;\n+\n          goto Done;\n       end if;\n \n@@ -12125,7 +12150,7 @@ package body Exp_Ch4 is\n       --  in Checks.Apply_Arithmetic_Overflow_Check, but we catch more cases in\n       --  the processing here. Also we still need the Checks circuit, since we\n       --  have to be sure not to generate junk overflow checks in the first\n-      --  place, since it would be trick to remove them here.\n+      --  place, since it would be tricky to remove them here.\n \n       if Integer_Promotion_Possible (N) then\n \n@@ -12409,7 +12434,9 @@ package body Exp_Ch4 is\n       --  These conversions require special expansion and processing, found in\n       --  the Exp_Fixd package. We ignore cases where Conversion_OK is set,\n       --  since from a semantic point of view, these are simple integer\n-      --  conversions, which do not need further processing.\n+      --  conversions, which do not need further processing except for the\n+      --  generation of range checks, which is performed at the end of this\n+      --  procedure.\n \n       elsif Is_Fixed_Point_Type (Operand_Type)\n         and then not Conversion_OK (N)\n@@ -12617,11 +12644,15 @@ package body Exp_Ch4 is\n          then\n             Real_Range_Check;\n          end if;\n+\n+         pragma Assert (not Do_Range_Check (Expression (N)));\n       end if;\n \n       --  Here at end of processing\n \n    <<Done>>\n+      pragma Assert (not Do_Range_Check (N));\n+\n       --  Apply predicate check if required. Note that we can't just call\n       --  Apply_Predicate_Check here, because the type looks right after\n       --  the conversion and it would omit the check. The Comes_From_Source"}, {"sha": "20506c807ef6b557fb5e5d3b4e10a98520980cfb", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ea7fad2830423188e2055708bb2d4a983c33bc/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ea7fad2830423188e2055708bb2d4a983c33bc/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=17ea7fad2830423188e2055708bb2d4a983c33bc", "patch": "@@ -7457,10 +7457,9 @@ package body Exp_Ch6 is\n       --  Check the result expression of a scalar function against the subtype\n       --  of the function by inserting a conversion. This conversion must\n       --  eventually be performed for other classes of types, but for now it's\n-      --  only done for scalars.\n-      --  ???\n+      --  only done for scalars ???\n \n-      if Is_Scalar_Type (Exp_Typ) then\n+      if Is_Scalar_Type (Exp_Typ) and then Exp_Typ /= R_Type then\n          Rewrite (Exp, Convert_To (R_Type, Exp));\n \n          --  The expression is resolved to ensure that the conversion gets"}, {"sha": "1ca62ecaddca221e6aea75f8b59c84f7d1bcbb3e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17ea7fad2830423188e2055708bb2d4a983c33bc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17ea7fad2830423188e2055708bb2d4a983c33bc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=17ea7fad2830423188e2055708bb2d4a983c33bc", "patch": "@@ -11641,12 +11641,12 @@ package body Sem_Res is\n       --  to apply checks required for a subtype conversion.\n \n       --  Skip these type conversion checks if universal fixed operands\n-      --  operands involved, since range checks are handled separately for\n+      --  are involved, since range checks are handled separately for\n       --  these cases (in the appropriate Expand routines in unit Exp_Fixd).\n \n       if Nkind (N) = N_Type_Conversion\n         and then not Is_Generic_Type (Root_Type (Target_Typ))\n-        and then Target_Typ  /= Universal_Fixed\n+        and then Target_Typ /= Universal_Fixed\n         and then Operand_Typ /= Universal_Fixed\n       then\n          Apply_Type_Conversion_Checks (N);\n@@ -11886,19 +11886,13 @@ package body Sem_Res is\n            (N, Target_Typ, Static_Failure_Is_Error => True);\n       end if;\n \n-      --  If at this stage we have a real to integer conversion, make sure that\n-      --  the Do_Range_Check flag is set, because such conversions in general\n-      --  need a range check. We only need this if expansion is off.\n-      --  In GNATprove mode, we only do that when converting from fixed-point\n-      --  (as floating-point to integer conversions are now handled in\n-      --  GNATprove mode).\n+      --  If at this stage we have a fixed point to integer conversion, make\n+      --  sure that the Do_Range_Check flag is set which is not always done\n+      --  by exp_fixd.adb.\n \n       if Nkind (N) = N_Type_Conversion\n-        and then not Expander_Active\n         and then Is_Integer_Type (Target_Typ)\n-        and then (Is_Fixed_Point_Type (Operand_Typ)\n-                   or else (not GNATprove_Mode\n-                             and then Is_Floating_Point_Type (Operand_Typ)))\n+        and then Is_Fixed_Point_Type (Operand_Typ)\n         and then not Range_Checks_Suppressed (Target_Typ)\n         and then not Range_Checks_Suppressed (Operand_Typ)\n       then"}]}