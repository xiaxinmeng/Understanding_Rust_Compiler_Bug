{"sha": "f088510d96142e9afaac98016660b46c3f1d50c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA4ODUxMGQ5NjE0MmU5YWZhYWM5ODAxNjY2MGI0NmMzZjFkNTBjOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-07-14T20:14:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-07-14T20:14:49Z"}, "message": "stl_tempbuf.h: Qualify free with std::.\n\n2003-07-14  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/stl_tempbuf.h: Qualify free with std::.\n\t* src/locale.cc: Include <cstdlib>, qualify getenv.\n\nFrom-SVN: r69347", "tree": {"sha": "eaf4fc3a69661d2c76adb985910e0d740b4622fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eaf4fc3a69661d2c76adb985910e0d740b4622fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f088510d96142e9afaac98016660b46c3f1d50c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f088510d96142e9afaac98016660b46c3f1d50c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f088510d96142e9afaac98016660b46c3f1d50c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f088510d96142e9afaac98016660b46c3f1d50c9/comments", "author": null, "committer": null, "parents": [{"sha": "373f8df79edce496b9d64294dfbb2504f930411b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/373f8df79edce496b9d64294dfbb2504f930411b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/373f8df79edce496b9d64294dfbb2504f930411b"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "d3d7037d589f8d144ecc7a02e62b1579cc78c51c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f088510d96142e9afaac98016660b46c3f1d50c9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f088510d96142e9afaac98016660b46c3f1d50c9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f088510d96142e9afaac98016660b46c3f1d50c9", "patch": "@@ -1,3 +1,8 @@\n+2003-07-14  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/stl_tempbuf.h: Qualify free with std::.\n+\t* src/locale.cc: Include <cstdlib>, qualify getenv.\n+\n 2003-07-14  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* config/locale/gnu/c_locale.h (__convert_from_v): Include"}, {"sha": "0526c0d7706c93f8be7ea28e3a583b9209a4c447", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f088510d96142e9afaac98016660b46c3f1d50c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f088510d96142e9afaac98016660b46c3f1d50c9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=f088510d96142e9afaac98016660b46c3f1d50c9", "patch": "@@ -125,7 +125,7 @@ template <class _ForwardIterator, class _Tp>\n     }\n     catch(...)\n       { \n-\tfree(_M_buffer); \n+\tstd::free(_M_buffer); \n \t_M_buffer = 0; \n \t_M_len = 0;\n \t__throw_exception_again; \n@@ -134,7 +134,7 @@ template <class _ForwardIterator, class _Tp>\n  \n   ~_Temporary_buffer() {  \n     std::_Destroy(_M_buffer, _M_buffer + _M_len);\n-    free(_M_buffer);\n+    std::free(_M_buffer);\n   }\n \n private:"}, {"sha": "514c62ab1ee5846830eb7e610f186e220327e9e4", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f088510d96142e9afaac98016660b46c3f1d50c9/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f088510d96142e9afaac98016660b46c3f1d50c9/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=f088510d96142e9afaac98016660b46c3f1d50c9", "patch": "@@ -28,6 +28,7 @@\n \n #include <clocale>\n #include <cstring>\n+#include <cstdlib>     // For getenv, free.\n #include <cctype>\n #include <cwctype>     // For towupper, etc.\n #include <locale>\n@@ -183,7 +184,7 @@ namespace std\n \telse\n \t  {\n \t    // Get it from the environment.\n-\t    char* __env = getenv(\"LC_ALL\");\n+\t    char* __env = std::getenv(\"LC_ALL\");\n \t    // If LC_ALL is set we are done.\n \t    if (__env && std::strcmp(__env, \"\") != 0)\n \t      {\n@@ -197,7 +198,7 @@ namespace std\n \t      {\n \t\tchar* __res;\n \t\t// LANG may set a default different from \"C\".\n-\t\tchar* __env = getenv(\"LANG\");\n+\t\tchar* __env = std::getenv(\"LANG\");\n \t\tif (!__env || std::strcmp(__env, \"\") == 0 \n \t\t    || std::strcmp(__env, \"C\") == 0 \n \t\t    || std::strcmp(__env, \"POSIX\") == 0)\n@@ -211,7 +212,7 @@ namespace std\n \t\tif (std::strcmp(__res, \"C\") == 0)\n \t\t  for (; __i < _S_categories_size; ++__i)\n \t\t    {\n-\t\t      __env = getenv(_S_categories[__i]);\n+\t\t      __env = std::getenv(_S_categories[__i]);\n \t\t      if (__env && std::strcmp(__env, \"\") != 0 \n \t\t\t  && std::strcmp(__env, \"C\") != 0 \n \t\t\t  && std::strcmp(__env, \"POSIX\") != 0) \n@@ -220,7 +221,7 @@ namespace std\n \t\telse\n \t\t  for (; __i < _S_categories_size; ++__i)\n \t\t    {\n-\t\t      __env = getenv(_S_categories[__i]);\n+\t\t      __env = std::getenv(_S_categories[__i]);\n \t\t      if (__env && std::strcmp(__env, \"\") != 0 \n \t\t\t  && std::strcmp(__env, __res) != 0) \n \t\t\tbreak;\n@@ -245,7 +246,7 @@ namespace std\n \t\t    __i++;\n \t\t    for (; __i < _S_categories_size; ++__i)\n \t\t      {\n-\t\t\t__env = getenv(_S_categories[__i]);\n+\t\t\t__env = std::getenv(_S_categories[__i]);\n \t\t\tif (!__env || std::strcmp(__env, \"\") == 0)\n \t\t\t  {\n \t\t\t    __str += _S_categories[__i];\n@@ -276,7 +277,7 @@ namespace std\n \t\t  (_M_impl = _S_classic)->_M_add_reference();\n \t\telse\n \t\t  _M_impl = new _Impl(__res, 1);\n-\t\tfree(__res);\n+\t\tstd::free(__res);\n \t      }\n \t  }\n       }"}]}