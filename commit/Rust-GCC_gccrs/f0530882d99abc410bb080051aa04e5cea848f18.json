{"sha": "f0530882d99abc410bb080051aa04e5cea848f18", "node_id": "C_kwDOANBUbNoAKGYwNTMwODgyZDk5YWJjNDEwYmIwODAwNTFhYTA0ZTVjZWE4NDhmMTg", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-22T22:42:27Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-24T17:12:15Z"}, "message": "c++: FIX_TRUNC_EXPR in tsubst [PR102990]\n\nThis is a crash where a FIX_TRUNC_EXPR gets into tsubst_copy_and_build\nwhere it hits gcc_unreachable ().\n\nThe history of tsubst_copy_and_build/FIX_TRUNC_EXPR is such that it\nwas introduced in r181478, but it did the wrong thing, whereupon it\nwas turned into gcc_unreachable () in r258821 (see this thread:\n<https://gcc.gnu.org/pipermail/gcc-patches/2018-March/495853.html>).\n\nIn a template, we should never create a FIX_TRUNC_EXPR (that's what\nconv_unsafe_in_template_p is for).  But in this test we are NOT in\na template when we call digest_nsdmi_init which ends up calling\nconvert_like, converting 1.0e+0 to int, so convert_to_integer_1\ngives us a FIX_TRUNC_EXPR.\n\nBut then when we get to parsing f's parameters, we are in a template\nwhen processing decltype(Helpers{}), and since r268321, when the\ncompound literal isn't instantiation-dependent and the type isn't\ntype-dependent, finish_compound_literal falls back to the normal\nprocessing, so it calls digest_init, which does fold_non_dependent_init\nand since the FIX_TRUNC_EXPR isn't dependent, we instantiate and\ntherefore crash in tsubst_copy_and_build.\n\nThe fateful call to fold_non_dependent_init comes from massage_init_elt,\nWe shouldn't be calling f_n_d_i on the result of get_nsdmi.  This we can\navoid by eschewing calling f_n_d_i on CONSTRUCTORs; their elements have\nalready been folded.\n\n\tPR c++/102990\n\ngcc/cp/ChangeLog:\n\n\t* typeck2.cc (massage_init_elt): Avoid folding CONSTRUCTORs.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/nsdmi-template22.C: New test.\n\t* g++.dg/cpp0x/nsdmi-template23.C: New test.", "tree": {"sha": "2639df0fe8c87c28068f12184895d1fbc98bcb2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2639df0fe8c87c28068f12184895d1fbc98bcb2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0530882d99abc410bb080051aa04e5cea848f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0530882d99abc410bb080051aa04e5cea848f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0530882d99abc410bb080051aa04e5cea848f18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0530882d99abc410bb080051aa04e5cea848f18/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "647537adefb34041cc2d44585252fd765cc0daae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647537adefb34041cc2d44585252fd765cc0daae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/647537adefb34041cc2d44585252fd765cc0daae"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "cebe6acf4870361d4d1312c3977d53bdc9b8471b", "filename": "gcc/cp/typeck2.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0530882d99abc410bb080051aa04e5cea848f18/gcc%2Fcp%2Ftypeck2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0530882d99abc410bb080051aa04e5cea848f18/gcc%2Fcp%2Ftypeck2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.cc?ref=f0530882d99abc410bb080051aa04e5cea848f18", "patch": "@@ -1433,10 +1433,15 @@ massage_init_elt (tree type, tree init, int nested, int flags,\n     new_flags |= LOOKUP_AGGREGATE_PAREN_INIT;\n   init = digest_init_r (type, init, nested ? 2 : 1, new_flags, complain);\n   /* When we defer constant folding within a statement, we may want to\n-     defer this folding as well.  */\n-  tree t = fold_non_dependent_init (init, complain);\n-  if (TREE_CONSTANT (t))\n-    init = t;\n+     defer this folding as well.  Don't call this on CONSTRUCTORs because\n+     their elements have already been folded, and we must avoid folding\n+     the result of get_nsdmi.  */\n+  if (TREE_CODE (init) != CONSTRUCTOR)\n+    {\n+      tree t = fold_non_dependent_init (init, complain);\n+      if (TREE_CONSTANT (t))\n+\tinit = t;\n+    }\n   return init;\n }\n "}, {"sha": "4ed2501035c2fb3216281fb12f4b9d86ab6d6143", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template22.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0530882d99abc410bb080051aa04e5cea848f18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0530882d99abc410bb080051aa04e5cea848f18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template22.C?ref=f0530882d99abc410bb080051aa04e5cea848f18", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/102990\n+// { dg-do compile { target c++11 } }\n+\n+struct knob_t {\n+  /* Let's create a FIX_TRUNC_EXPR.  */\n+  int value = 1.0;\n+};\n+\n+struct Helpers {\n+  knob_t inputs;\n+};\n+\n+template<class> void f(decltype(Helpers{}));"}, {"sha": "240cab4347a00894ecaba5f23288582e19c7e644", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template23.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0530882d99abc410bb080051aa04e5cea848f18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0530882d99abc410bb080051aa04e5cea848f18/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template23.C?ref=f0530882d99abc410bb080051aa04e5cea848f18", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/102990\n+// { dg-do compile { target c++11 } }\n+\n+struct knob_t {\n+  /* Let's create a FLOAT_EXPR.  */\n+  double value = 1UL;\n+};\n+\n+struct Helpers {\n+  knob_t inputs;\n+};\n+\n+template<class> void f(decltype(Helpers{}));"}]}