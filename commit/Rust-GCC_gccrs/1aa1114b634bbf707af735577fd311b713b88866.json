{"sha": "1aa1114b634bbf707af735577fd311b713b88866", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhMTExNGI2MzRiYmY3MDdhZjczNTU3N2ZkMzExYjcxM2I4ODg2Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-18T00:12:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-18T00:12:58Z"}, "message": "tuple: Use noexcept where appropriate.\n\n2011-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/tuple: Use noexcept where appropriate.\n\t(tuple<>::swap): Rework implementation.\n\t(_Head_base<>::_M_swap_impl): Remove.\n\t(get(std::tuple<>&&)): Add.\n\t* testsuite/20_util/tuple/element_access/get2.cc: New.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-error\n\tline number.\n\nFrom-SVN: r173838", "tree": {"sha": "afec93daa8700d2ccfbc319b7397fda8ecb9b75e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afec93daa8700d2ccfbc319b7397fda8ecb9b75e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aa1114b634bbf707af735577fd311b713b88866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa1114b634bbf707af735577fd311b713b88866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa1114b634bbf707af735577fd311b713b88866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa1114b634bbf707af735577fd311b713b88866/comments", "author": null, "committer": null, "parents": [{"sha": "82bd45d7f0e2b3b6b4f355c89ad16fbc43420a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82bd45d7f0e2b3b6b4f355c89ad16fbc43420a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82bd45d7f0e2b3b6b4f355c89ad16fbc43420a30"}], "stats": {"total": 138, "additions": 101, "deletions": 37}, "files": [{"sha": "5b1284e6168e48366b9a185cbbd66b0636218a2b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa1114b634bbf707af735577fd311b713b88866/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa1114b634bbf707af735577fd311b713b88866/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1aa1114b634bbf707af735577fd311b713b88866", "patch": "@@ -1,3 +1,13 @@\n+2011-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/tuple: Use noexcept where appropriate.\n+\t(tuple<>::swap): Rework implementation.\n+\t(_Head_base<>::_M_swap_impl): Remove.\n+\t(get(std::tuple<>&&)): Add.\n+\t* testsuite/20_util/tuple/element_access/get2.cc: New.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-error\n+\tline number.\n+\n 2011-05-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/utility: Simplify the last commit, the whole"}, {"sha": "066b3d0855c4df2de8722e4bea43c528ddf018d4", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa1114b634bbf707af735577fd311b713b88866/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa1114b634bbf707af735577fd311b713b88866/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=1aa1114b634bbf707af735577fd311b713b88866", "patch": "@@ -59,6 +59,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __add_ref<_Tp&>\n     { typedef _Tp& type; };\n \n+  // Adds an rvalue reference to a non-reference type.\n+  template<typename _Tp>\n+    struct __add_r_ref\n+    { typedef _Tp&& type; };\n+\n+  template<typename _Tp>\n+    struct __add_r_ref<_Tp&>\n+    { typedef _Tp& type; };\n+\n   template<std::size_t _Idx, typename _Head, bool _IsEmpty>\n     struct _Head_base;\n \n@@ -78,13 +87,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Head&       _M_head()       { return *this; }\n       const _Head& _M_head() const { return *this; }\n-    \n-      void \n-      _M_swap_impl(_Head& __h)\n-      {\n-\tusing std::swap;\n-\tswap(__h, _M_head());\n-      }\n     };\n \n   template<std::size_t _Idx, typename _Head>\n@@ -103,13 +105,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Head&       _M_head()       { return _M_head_impl; }\n       const _Head& _M_head() const { return _M_head_impl; }        \n \n-      void\n-      _M_swap_impl(_Head& __h)\n-      { \n-\tusing std::swap;\n-\tswap(__h, _M_head());\n-      }\n-\n       _Head _M_head_impl; \n     };\n \n@@ -130,9 +125,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<std::size_t _Idx>\n     struct _Tuple_impl<_Idx>\n-    { \n+    {\n+      template<std::size_t, typename...> friend class _Tuple_impl;\n+\n     protected:\n-      void _M_swap_impl(_Tuple_impl&) { /* no-op */ }\n+      void _M_swap(_Tuple_impl&) noexcept { /* no-op */ }\n     };\n \n   /**\n@@ -145,6 +142,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public _Tuple_impl<_Idx + 1, _Tail...>,\n       private _Head_base<_Idx, _Head, std::is_empty<_Head>::value>\n     {\n+      template<std::size_t, typename...> friend class _Tuple_impl;\n+\n       typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;\n       typedef _Head_base<_Idx, _Head, std::is_empty<_Head>::value> _Base;\n \n@@ -218,10 +217,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     protected:\n       void\n-      _M_swap_impl(_Tuple_impl& __in)\n+      _M_swap(_Tuple_impl& __in)\n+      noexcept(noexcept(swap(std::declval<_Head&>(),\n+\t\t\t     std::declval<_Head&>()))\n+\t       && noexcept(__in._M_tail()._M_swap(__in._M_tail())))\n       {\n-\t_Base::_M_swap_impl(__in._M_head());\n-\t_Inherited::_M_swap_impl(__in._M_tail());\n+\tusing std::swap;\n+\tswap(this->_M_head(), __in._M_head());\n+\t_Inherited::_M_swap(__in._M_tail());\n       }\n     };\n \n@@ -300,14 +303,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(tuple& __in)\n-      { _Inherited::_M_swap_impl(__in); }\n+      noexcept(noexcept(__in._M_swap(__in)))\n+      { _Inherited::_M_swap(__in); }\n     };\n \n   template<>  \n     class tuple<>\n     {\n     public:\n-      void swap(tuple&) { /* no-op */ }\n+      void swap(tuple&) noexcept { /* no-op */ }\n     };\n \n   /// tuple (2-element), with construction and assignment from a pair.\n@@ -360,6 +364,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       tuple&\n       operator=(tuple&& __in)\n+      // noexcept has to wait is_nothrow_move_assignable\n       {\n \tstatic_cast<_Inherited&>(*this) = std::move(__in);\n \treturn *this;\n@@ -392,7 +397,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _U1, typename _U2>\n         tuple&\n-        operator=(pair<_U1, _U2>&& __in)\n+        operator=(pair<_U1, _U2>&& __in) noexcept\n         {\n \t  this->_M_head() = std::forward<_U1>(__in.first);\n \t  this->_M_tail()._M_head() = std::forward<_U2>(__in.second);\n@@ -401,11 +406,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(tuple& __in)\n-      { \n-\tusing std::swap;\n-\tswap(this->_M_head(), __in._M_head());\n-\tswap(this->_M_tail()._M_head(), __in._M_tail()._M_head());\t\n-      }\n+      noexcept(noexcept(__in._M_swap(__in)))\n+      { _Inherited::_M_swap(__in); }\n     };\n \n   /// tuple (1-element).\n@@ -473,7 +475,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       swap(tuple& __in)\n-      { _Inherited::_M_swap_impl(__in); }\n+      noexcept(noexcept(__in._M_swap(__in)))\n+      { _Inherited::_M_swap(__in); }\n     };\n \n \n@@ -522,22 +525,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t)\n     { return __t._M_head(); }\n \n-  // Return a reference (const reference) to the ith element of a tuple.\n-  // Any const or non-const ref elements are returned with their original type.\n+  // Return a reference (const reference, rvalue reference) to the ith element\n+  // of a tuple.  Any const or non-const ref elements are returned with their\n+  // original type.\n   template<std::size_t __i, typename... _Elements>\n     inline typename __add_ref<\n-                      typename tuple_element<__i, tuple<_Elements...> >::type\n+                      typename tuple_element<__i, tuple<_Elements...>>::type\n                     >::type\n-    get(tuple<_Elements...>& __t)\n+    get(tuple<_Elements...>& __t) noexcept\n     { return __get_helper<__i>(__t); }\n \n   template<std::size_t __i, typename... _Elements>\n     inline typename __add_c_ref<\n-                      typename tuple_element<__i, tuple<_Elements...> >::type\n+                      typename tuple_element<__i, tuple<_Elements...>>::type\n                     >::type\n-    get(const tuple<_Elements...>& __t)\n+    get(const tuple<_Elements...>& __t) noexcept\n     { return __get_helper<__i>(__t); }\n \n+  template<std::size_t __i, typename... _Elements>\n+    inline typename __add_r_ref<\n+                      typename tuple_element<__i, tuple<_Elements...>>::type\n+                    >::type\n+    get(tuple<_Elements...>&& __t) noexcept\n+    { return std::forward<typename tuple_element<__i,\n+\ttuple<_Elements...>>::type&&>(get<__i>(__t)); }\n+\n   // This class helps construct the various comparison operations on tuples\n   template<std::size_t __check_equal_size, std::size_t __i, std::size_t __j,\n \t   typename _Tp, typename _Up>\n@@ -628,7 +640,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename... _Elements>\n     inline tuple<_Elements&&...>\n-    forward_as_tuple(_Elements&&... __args)\n+    forward_as_tuple(_Elements&&... __args) noexcept\n     { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }\n \n   template<std::size_t...> struct __index_holder { };    \n@@ -737,12 +749,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename... _Elements>\n     inline tuple<_Elements&...>\n-    tie(_Elements&... __args)\n+    tie(_Elements&... __args) noexcept\n     { return tuple<_Elements&...>(__args...); }\n \n   template<typename... _Elements>\n     inline void \n     swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)\n+    noexcept(noexcept(__x.swap(__y)))\n     { __x.swap(__y); }\n \n   // A class (and instance) which can be used in 'tie' when an element"}, {"sha": "ccaedf402c8f62f3d942832dd2cd72ae49f11780", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get2.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa1114b634bbf707af735577fd311b713b88866/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa1114b634bbf707af735577fd311b713b88866/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget2.cc?ref=1aa1114b634bbf707af735577fd311b713b88866", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tuple>\n+\n+void test01()\n+{\n+  std::tuple<int> t1;\n+\n+  int&&   t1one __attribute__((unused)) = std::get<0>(std::move(t1));\n+\n+  std::tuple<float, int> t2;\n+\n+  float&& t2one __attribute__((unused)) = std::get<0>(std::move(t2));\n+  int&&   t2two __attribute__((unused)) = std::get<1>(std::move(t2));\n+\n+  std::tuple<short, int, double> t3;\n+\n+  short&&  t3one __attribute__((unused)) = std::get<0>(std::move(t3));\n+  int&&    t3two __attribute__((unused)) = std::get<1>(std::move(t3));\n+  double&& t3thr __attribute__((unused)) = std::get<2>(std::move(t3));\n+}"}, {"sha": "5564b2685703db8659ae4b29542dff17ca1c688c", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aa1114b634bbf707af735577fd311b713b88866/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aa1114b634bbf707af735577fd311b713b88866/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=1aa1114b634bbf707af735577fd311b713b88866", "patch": "@@ -51,7 +51,7 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 485 }\n // { dg-warning \"note\" \"\" { target *-*-* } 479 }\n // { dg-warning \"note\" \"\" { target *-*-* } 469 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 587 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 599 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1056 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }"}]}