{"sha": "48ac9ce28c62ff92048a97fd02af394668f027eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhhYzljZTI4YzYyZmY5MjA0OGE5N2ZkMDJhZjM5NDY2OGYwMjdlYg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@acm.org", "date": "1999-05-20T07:10:41Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "1999-05-20T07:10:41Z"}, "message": "static initialization removal & K&R-ification\n\nFrom-SVN: r27052", "tree": {"sha": "f430e64710d3ff45dbb58e4b25e60adcece2fd9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f430e64710d3ff45dbb58e4b25e60adcece2fd9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48ac9ce28c62ff92048a97fd02af394668f027eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ac9ce28c62ff92048a97fd02af394668f027eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48ac9ce28c62ff92048a97fd02af394668f027eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48ac9ce28c62ff92048a97fd02af394668f027eb/comments", "author": null, "committer": null, "parents": [{"sha": "6de94858b971f7e73295163d0a28854ce93024b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de94858b971f7e73295163d0a28854ce93024b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de94858b971f7e73295163d0a28854ce93024b5"}], "stats": {"total": 69, "additions": 53, "deletions": 16}, "files": [{"sha": "e01e1489f76eaefb7351e98c7271dcd30cd32362", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48ac9ce28c62ff92048a97fd02af394668f027eb", "patch": "@@ -1,3 +1,13 @@\n+Thu May 20 07:06:39 1999  Alexandre Oliva  <aoliva@acm.org>\n+\n+\t* fixinc/Makefile.in(gnu-regex.o): add $(INCLUDES) to compile options\n+\t* fixinc/fixincl.c(wait_for_pid): K&R-ify arguments\n+\t(several places): omit static initialization\n+\t(process): use single fd, since only the read fd is used\n+\t* fixinc/gnu-regex.c: define 'const' away, if not supported\n+\t* fixinc/procopen.c(several places): omit static initialization\n+\t* fixinc/server.c: define 'volitile' away, if not supported\n+\n 1999-05-20  Andreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n \n \t* config/dbxcoff.h (DBX_OUTPUT_MAIN_SOURCE_FILE_END): Use"}, {"sha": "8976c783e7269ad0f3f2773032b02e94966361c0", "filename": "gcc/fixinc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2Ffixinc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2Ffixinc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2FMakefile.in?ref=48ac9ce28c62ff92048a97fd02af394668f027eb", "patch": "@@ -81,8 +81,8 @@ fixincl: $(OBJ)\n \tchmod 777 $@ ; fi\n \n gnu-regex.o: gnu-regex.c\n-\t-$(CC) $(CFLAGS) $(FIXINC_DEFS) -DREGEX_MALLOC -DSTDC_HEADERS=1 \\\n-\t\t-c $(srcdir)/gnu-regex.c\n+\t-$(CC) $(CFLAGS) $(FIXINC_DEFS) $(INCLUDES) -DREGEX_MALLOC \\\n+\t\t-DSTDC_HEADERS=1 -c $(srcdir)/gnu-regex.c\n \n fixincl.o : fixincl.x fixincl.c\n server.o : server.c server.h"}, {"sha": "f4cd5ec1cee445efbfcdf96d37b1ea6fde6f2a02", "filename": "gcc/fixinc/fixincl.c", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.c?ref=48ac9ce28c62ff92048a97fd02af394668f027eb", "patch": "@@ -58,6 +58,13 @@ static const char program_id[] = \"fixincl version 1.0\";\n #endif\n #define NAME_TABLE_SIZE (MINIMUM_MAXIMUM_LINES * MAXPATHLEN)\n \n+#ifndef EXIT_SUCCESS\n+# define EXIT_SUCCESS 0\n+#endif\n+#ifndef EXIT_FAILURE\n+# define EXIT_FAILURE 1\n+#endif\n+\n char *file_name_buf;\n \n #define tSCC static const char\n@@ -382,7 +389,9 @@ initialize()\n    `waitpid(2)'.  We also ensure that the children exit with success. */\n \n void\n-wait_for_pid( pid_t child, int file_name_ct )\n+wait_for_pid(child, file_name_ct)\n+     pid_t child;\n+     int file_name_ct;\n {\n   for (;;) {\n     int status;\n@@ -934,18 +943,20 @@ process (pz_data, pz_file_name)\n      char *pz_data;\n      const char *pz_file_name;\n {\n-  static char env_current_file[1024] = { \"file=\" };\n+  static char env_current_file[1024];\n   tFixDesc *p_fixd = fixDescList;\n   int todo_ct = FIX_COUNT;\n-  t_fd_pair fdp = { -1, -1 };\n+  int read_fd = -1;\n   int num_children = 0;\n \n   /*  IF this is the first time through,\n       THEN put the 'file' environment variable into the environment.\n            This is used by some of the subject shell scripts and tests.   */\n \n-  if (env_current_file[5] == NUL)\n+  if (env_current_file[0] == NUL) {\n+    strcpy (env_current_file, \"file=\");\n     putenv (env_current_file);\n+  }\n \n   /*\n      Ghastly as it is, this actually updates the value of the variable:\n@@ -1059,10 +1070,10 @@ process (pz_data, pz_file_name)\n           the first fix.  Any subsequent fixes will use the\n           stdout descriptor of the previous fix as its stdin.  */\n \n-      if (fdp.read_fd == -1)\n+      if (read_fd == -1)\n         {\n-          fdp.read_fd = open (pz_file_name, O_RDONLY);\n-          if (fdp.read_fd < 0)\n+          read_fd = open (pz_file_name, O_RDONLY);\n+          if (read_fd < 0)\n             {\n               fprintf (stderr, \"Error %d (%s) opening %s\\n\", errno,\n                        strerror (errno), pz_file_name);\n@@ -1071,22 +1082,22 @@ process (pz_data, pz_file_name)\n         }\n \n       /*  This loop should only cycle for 1/2 of one loop.\n-          \"chain_open\" starts a process that uses \"fdp.read_fd\" as\n+          \"chain_open\" starts a process that uses \"read_fd\" as\n           its stdin and returns the new fd this process will use\n           for stdout.  */\n \n       for (;;)\n         {\n           tSCC z_err[] = \"Error %d (%s) starting filter process for %s\\n\";\n           static int failCt = 0;\n-          int fd = chain_open (fdp.read_fd,\n+          int fd = chain_open (read_fd,\n                                (t_pchar *) p_fixd->patch_args,\n                                (process_chain_head == -1)\n                                ? &process_chain_head : (pid_t *) NULL);\n \n           if (fd != -1)\n             {\n-              fdp.read_fd = fd;\n+              read_fd = fd;\n               num_children++;\n               break;\n             }\n@@ -1106,7 +1117,7 @@ process (pz_data, pz_file_name)\n   /*  IF after all the tests we did not start any patch programs,\n       THEN quit now.   */\n \n-  if (fdp.read_fd < 0)\n+  if (read_fd < 0)\n     return;\n \n   /*  OK.  We have work to do.  Read back in the output\n@@ -1117,7 +1128,7 @@ process (pz_data, pz_file_name)\n       output of the filter chain.\n       */\n   {\n-    FILE *in_fp = fdopen (fdp.read_fd, \"r\");\n+    FILE *in_fp = fdopen (read_fd, \"r\");\n     FILE *out_fp = (FILE *) NULL;\n     char *pz_cmp = pz_data;\n \n@@ -1173,7 +1184,7 @@ process (pz_data, pz_file_name)\n       }\n     fclose (in_fp);\n   }\n-  close (fdp.read_fd);  /* probably redundant, but I'm paranoid */\n+  close (read_fd);  /* probably redundant, but I'm paranoid */\n \n   /* Wait for child processes created by chain_open()\n      to avoid creating zombies.  */"}, {"sha": "b24845ba43101acfc9a851b07f5de9fcc8c16c5e", "filename": "gcc/fixinc/gnu-regex.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2Ffixinc%2Fgnu-regex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2Ffixinc%2Fgnu-regex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fgnu-regex.c?ref=48ac9ce28c62ff92048a97fd02af394668f027eb", "patch": "@@ -80,6 +80,16 @@\n \n #else  /* not emacs */\n \n+# include \"auto-host.h\"\n+\n+# if !defined(const) && !defined(HAVE_CONST)\n+#  define const\n+# endif\n+\n+# if !defined(volatile) && !defined(HAVE_VOLATILE)\n+#  define volatile\n+# endif\n+\n /* If we are not linking with Emacs proper,\n    we can't use the relocating allocator\n    even if config.h says that we can.  */"}, {"sha": "00f13b7ae9729615e8f609c54980d07205c22c8b", "filename": "gcc/fixinc/procopen.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2Ffixinc%2Fprocopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2Ffixinc%2Fprocopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fprocopen.c?ref=48ac9ce28c62ff92048a97fd02af394668f027eb", "patch": "@@ -104,10 +104,12 @@ chain_open (stdin_fd, pp_args, p_child)\n      t_pchar *pp_args;\n      pid_t *p_child;\n {\n-  t_fd_pair stdout_pair = {-1, -1};\n+  t_fd_pair stdout_pair;\n   pid_t ch_id;\n   char *pz_cmd;\n \n+  stdout_pair.read_fd = stdout_pair.write_fd = -1;\n+\n   /*\n    *  Create a pipe it will be the child process' stdout,\n    *  and the parent will read from it."}, {"sha": "4af40e5eb961757bcb6f00d0409beb5b12e5cdb8", "filename": "gcc/fixinc/server.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2Ffixinc%2Fserver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48ac9ce28c62ff92048a97fd02af394668f027eb/gcc%2Ffixinc%2Fserver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fserver.c?ref=48ac9ce28c62ff92048a97fd02af394668f027eb", "patch": "@@ -86,6 +86,10 @@\n #define NUL '\\0'\n #endif\n \n+#if !defined(volatile) && !defined(HAVE_VOLATILE)\n+# define volatile\n+#endif\n+\n STATIC volatile bool read_pipe_timeout;\n \n static t_pchar def_args[] ="}]}