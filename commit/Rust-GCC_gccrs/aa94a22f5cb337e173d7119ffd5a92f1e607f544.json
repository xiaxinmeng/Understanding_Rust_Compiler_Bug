{"sha": "aa94a22f5cb337e173d7119ffd5a92f1e607f544", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5NGEyMmY1Y2IzMzdlMTczZDcxMTlmZmQ1YTkyZjFlNjA3ZjU0NA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-29T18:46:35Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-04-30T14:58:48Z"}, "message": "coroutines: Fix handling of target cleanup exprs [PR94883]\n\nThe problem here is that target cleanup expressions have been\nadded to the initialisers for the awaitable (and returns of\nnon-trivial values from await_suspend() calls.  This is because\nthe expansion of the co_await into its control flow is not\napparent to the machinery adding the target cleanup expressions.\nThe solution being tested is simply to recreate target expressions\nas the co_awaits are lowered.  Teaching the machinery to handle\nwalking co_await expressions in different ways at different points\n(outside the coroutine transformation) seems overly complex.\n\ngcc/cp/ChangeLog:\n\n2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94883\n\t* coroutines.cc (register_awaits): Update target\n\texpressions for awaitable and suspend handle\n\tinitializers.\n\ngcc/testsuite/ChangeLog:\n\n2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n\n\tPR c++/94883\n\t* g++.dg/coroutines/pr94883-folly-2.C: New test.", "tree": {"sha": "9c9e6e0016044853d6888e89af6d1509fbd017b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c9e6e0016044853d6888e89af6d1509fbd017b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa94a22f5cb337e173d7119ffd5a92f1e607f544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa94a22f5cb337e173d7119ffd5a92f1e607f544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa94a22f5cb337e173d7119ffd5a92f1e607f544", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa94a22f5cb337e173d7119ffd5a92f1e607f544/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b16fd5fd8afe6f95c8ae44e759971e605c31f97b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16fd5fd8afe6f95c8ae44e759971e605c31f97b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16fd5fd8afe6f95c8ae44e759971e605c31f97b"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "62f997eb4592e96bb9bdef4dc4a7101724adb82e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa94a22f5cb337e173d7119ffd5a92f1e607f544/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa94a22f5cb337e173d7119ffd5a92f1e607f544/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aa94a22f5cb337e173d7119ffd5a92f1e607f544", "patch": "@@ -1,3 +1,10 @@\n+2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/94883\n+\t* coroutines.cc (register_awaits): Update target\n+\texpressions for awaitable and suspend handle\n+\tinitializers.\n+\n 2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/94879"}, {"sha": "cb9074e4c170b4df86e462ad19ea0240020d84f1", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa94a22f5cb337e173d7119ffd5a92f1e607f544/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa94a22f5cb337e173d7119ffd5a92f1e607f544/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=aa94a22f5cb337e173d7119ffd5a92f1e607f544", "patch": "@@ -2757,6 +2757,17 @@ register_awaits (tree *stmt, int *do_subtree ATTRIBUTE_UNUSED, void *d)\n       free (nam);\n     }\n \n+  tree o = TREE_OPERAND (aw_expr, 2); /* Initialiser for the frame var.  */\n+  /* If this is a target expression, then we need to remake it to strip off\n+     any extra cleanups added.  */\n+  if (TREE_CODE (o) == TARGET_EXPR)\n+    TREE_OPERAND (aw_expr, 2) = get_target_expr (TREE_OPERAND (o, 1));\n+\n+  tree v = TREE_OPERAND (aw_expr, 3);\n+  o = TREE_VEC_ELT (v, 1);\n+  if (TREE_CODE (o) == TARGET_EXPR)\n+    TREE_VEC_ELT (v, 1) = get_target_expr (TREE_OPERAND (o, 1));\n+\n   register_await_info (aw_expr, aw_field_type, aw_field_nam);\n \n   /* Count how many awaits the current expression contains.  */"}, {"sha": "369ce423fbcfefb56fb5624d999461ce3f082999", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa94a22f5cb337e173d7119ffd5a92f1e607f544/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa94a22f5cb337e173d7119ffd5a92f1e607f544/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa94a22f5cb337e173d7119ffd5a92f1e607f544", "patch": "@@ -1,3 +1,8 @@\n+2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/94883\n+\t* g++.dg/coroutines/pr94883-folly-2.C: New test.\n+\n 2020-04-30  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/94879"}, {"sha": "088f133549360e0b46a8a607b8e2bb22c4dd7934", "filename": "gcc/testsuite/g++.dg/coroutines/pr94883-folly-2.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa94a22f5cb337e173d7119ffd5a92f1e607f544/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94883-folly-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa94a22f5cb337e173d7119ffd5a92f1e607f544/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94883-folly-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr94883-folly-2.C?ref=aa94a22f5cb337e173d7119ffd5a92f1e607f544", "patch": "@@ -0,0 +1,64 @@\n+\n+namespace std {\n+template <typename a, typename...> struct coroutine_traits : a {};\n+template <typename = void> struct coroutine_handle;\n+template <> struct coroutine_handle<> {};\n+template <typename> struct coroutine_handle : coroutine_handle<> {};\n+struct b {\n+  bool await_ready();\n+  void await_suspend(coroutine_handle<>);\n+  void await_resume();\n+};\n+} // namespace std\n+\n+template <typename d> auto ab(int ac, d ad) -> decltype(ad.e(ac));\n+int f;\n+class h {\n+  class j {\n+  public:\n+    bool await_ready();\n+    void await_suspend(std::coroutine_handle<>);\n+    void await_resume();\n+  };\n+\n+public:\n+  void get_return_object();\n+  std::b initial_suspend();\n+  j final_suspend();\n+  void unhandled_exception();\n+  template <typename g> \n+    auto await_transform (g c) { return ab(f, c); }\n+};\n+template <typename, typename = int> class k {\n+public:\n+  using promise_type = h;\n+  using i = std::coroutine_handle<>;\n+  class l {\n+  public:\n+    ~l();\n+    operator bool();\n+  };\n+  class m {\n+  public:\n+    bool await_ready();\n+    i await_suspend(std::coroutine_handle<>);\n+    l await_resume();\n+  };\n+  class n {\n+  public:\n+    m e(int);\n+  };\n+  n ah();\n+};\n+\n+template <typename ai, typename aj, typename ak>\n+k<aj> \n+my_coro (k<aj, ak> am, ai) {\n+  if (auto an = co_await am.ah())\n+    ;\n+}\n+\n+void foo () {\n+  k<int> a;\n+  my_coro (a, [] {});\n+}"}]}