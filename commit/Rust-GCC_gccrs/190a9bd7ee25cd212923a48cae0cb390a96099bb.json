{"sha": "190a9bd7ee25cd212923a48cae0cb390a96099bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkwYTliZDdlZTI1Y2QyMTI5MjNhNDhjYWUwY2IzOTBhOTYwOTliYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-06-24T01:42:31Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-06-24T01:42:31Z"}, "message": "libiberty.h (XALLOCA, [...]): New.\n\n\t* libiberty.h (XALLOCA, XDUP, XALLOCAVEC, XDUPVEC, XALLOCAVAR,\n\tXDUPVAR, XOBNEWVEC, XOBNEWVAR): New.\n\nFrom-SVN: r137058", "tree": {"sha": "0cd6318463ccb586c88eabe8a770ff46194e4e44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cd6318463ccb586c88eabe8a770ff46194e4e44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/190a9bd7ee25cd212923a48cae0cb390a96099bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/190a9bd7ee25cd212923a48cae0cb390a96099bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/190a9bd7ee25cd212923a48cae0cb390a96099bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/190a9bd7ee25cd212923a48cae0cb390a96099bb/comments", "author": null, "committer": null, "parents": [{"sha": "64e12224ea1e9814875db72e9bb328287cfb5e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64e12224ea1e9814875db72e9bb328287cfb5e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64e12224ea1e9814875db72e9bb328287cfb5e14"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "bf1af8da2cced0404f9fbc6316bc973478735e19", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190a9bd7ee25cd212923a48cae0cb390a96099bb/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190a9bd7ee25cd212923a48cae0cb390a96099bb/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=190a9bd7ee25cd212923a48cae0cb390a96099bb", "patch": "@@ -1,3 +1,8 @@\n+2008-06-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (XALLOCA, XDUP, XALLOCAVEC, XDUPVEC, XALLOCAVAR,\n+\tXDUPVAR, XOBNEWVEC, XOBNEWVAR): New.\n+\n 2008-03-24  Ian Lance Taylor  <iant@google.com>\n \n \t* sha1.h: New file, from gnulib."}, {"sha": "e3eca9d75cc03f41b4ffddd8a1707e15696f419f", "filename": "include/libiberty.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/190a9bd7ee25cd212923a48cae0cb390a96099bb/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/190a9bd7ee25cd212923a48cae0cb390a96099bb/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=190a9bd7ee25cd212923a48cae0cb390a96099bb", "patch": "@@ -320,26 +320,34 @@ extern double physmem_available (void);\n \n /* Scalar allocators.  */\n \n+#define XALLOCA(T)\t\t((T *) alloca (sizeof (T)))\n #define XNEW(T)\t\t\t((T *) xmalloc (sizeof (T)))\n #define XCNEW(T)\t\t((T *) xcalloc (1, sizeof (T)))\n+#define XDUP(T, P)\t\t((T *) xmemdup ((P), sizeof (T), sizeof (T)))\n #define XDELETE(P)\t\tfree ((void*) (P))\n \n /* Array allocators.  */\n \n+#define XALLOCAVEC(T, N)\t((T *) alloca (sizeof (T) * (N)))\n #define XNEWVEC(T, N)\t\t((T *) xmalloc (sizeof (T) * (N)))\n #define XCNEWVEC(T, N)\t\t((T *) xcalloc ((N), sizeof (T)))\n+#define XDUPVEC(T, P, N)\t((T *) xmemdup ((P), sizeof (T) * (N), sizeof (T) * (N)))\n #define XRESIZEVEC(T, P, N)\t((T *) xrealloc ((void *) (P), sizeof (T) * (N)))\n #define XDELETEVEC(P)\t\tfree ((void*) (P))\n \n /* Allocators for variable-sized structures and raw buffers.  */\n \n+#define XALLOCAVAR(T, S)\t((T *) alloca ((S)))\n #define XNEWVAR(T, S)\t\t((T *) xmalloc ((S)))\n #define XCNEWVAR(T, S)\t\t((T *) xcalloc (1, (S)))\n+#define XDUPVAR(T, P, S1, S2)\t((T *) xmemdup ((P), (S1), (S2)))\n #define XRESIZEVAR(T, P, S)\t((T *) xrealloc ((P), (S)))\n \n /* Type-safe obstack allocator.  */\n \n #define XOBNEW(O, T)\t\t((T *) obstack_alloc ((O), sizeof (T)))\n+#define XOBNEWVEC(O, T, N)\t((T *) obstack_alloc ((O), sizeof (T) * (N)))\n+#define XOBNEWVAR(O, T, S)\t((T *) obstack_alloc ((O), (S)))\n #define XOBFINISH(O, T)         ((T) obstack_finish ((O)))\n \n /* hex character manipulation routines */"}]}