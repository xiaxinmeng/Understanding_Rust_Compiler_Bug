{"sha": "74a3d2c3aae2f04b2630898a1d41d3922ded71ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRhM2QyYzNhYWUyZjA0YjI2MzA4OThhMWQ0MWQzOTIyZGVkNzFjZQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-31T14:22:47Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-31T14:22:47Z"}, "message": "v850-protos.h (function_arg): Delete.\n\n\t* config/v850/v850-protos.h (function_arg): Delete.\n\t* config/v850/v850.h (FUNCTION_ARG): Delete.\n\t(FUNCTION_ARG_ADVANCE): Move code to...\n\t* config/v850/v850.c (v850_function_arg_advance): ...here.\n\t(v850_function_arg): Make static.  Take a const_tree and a bool.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r163674", "tree": {"sha": "ace72b016d5ef6c402c12fdd2bccd6b69367c65f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ace72b016d5ef6c402c12fdd2bccd6b69367c65f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74a3d2c3aae2f04b2630898a1d41d3922ded71ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a3d2c3aae2f04b2630898a1d41d3922ded71ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a3d2c3aae2f04b2630898a1d41d3922ded71ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a3d2c3aae2f04b2630898a1d41d3922ded71ce/comments", "author": null, "committer": null, "parents": [{"sha": "6fadd9bb8631b263a139cfc5e9a115003d4c79ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fadd9bb8631b263a139cfc5e9a115003d4c79ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fadd9bb8631b263a139cfc5e9a115003d4c79ad"}], "stats": {"total": 76, "additions": 39, "deletions": 37}, "files": [{"sha": "4f92137d31f94a0d86fbb1e8a45b01788be40290", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3d2c3aae2f04b2630898a1d41d3922ded71ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3d2c3aae2f04b2630898a1d41d3922ded71ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74a3d2c3aae2f04b2630898a1d41d3922ded71ce", "patch": "@@ -1,3 +1,12 @@\n+2010-08-31  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/v850/v850-protos.h (function_arg): Delete.\n+\t* config/v850/v850.h (FUNCTION_ARG): Delete.\n+\t(FUNCTION_ARG_ADVANCE): Move code to...\n+\t* config/v850/v850.c (v850_function_arg_advance): ...here.\n+\t(v850_function_arg): Make static.  Take a const_tree and a bool.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-08-31  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/m32r/m32r.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Move"}, {"sha": "7d26e051a0c576d1393e371bb583d4ee4d713a98", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3d2c3aae2f04b2630898a1d41d3922ded71ce/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3d2c3aae2f04b2630898a1d41d3922ded71ce/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=74a3d2c3aae2f04b2630898a1d41d3922ded71ce", "patch": "@@ -48,11 +48,8 @@ extern int    v850_float_nz_comparison_operator (rtx, Mmode);\n extern rtx    v850_gen_compare              (enum rtx_code, Mmode, rtx, rtx);\n extern Mmode  v850_gen_float_compare (enum rtx_code, Mmode, rtx, rtx);\n extern Mmode  v850_select_cc_mode (RTX_CODE, rtx, rtx);\n-#ifdef TREE_CODE\n-extern rtx    function_arg                  (CUMULATIVE_ARGS *, Mmode, tree, int);\n-#endif\n #endif\n-#endif /* TREE_CODE */\n+#endif /* RTX_CODE */\n \n #ifdef TREE_CODE\n extern int    v850_interrupt_function_p     (tree);"}, {"sha": "8f8cd14cdd143e34198cbbd186c7fedcf3033cd6", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3d2c3aae2f04b2630898a1d41d3922ded71ce/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3d2c3aae2f04b2630898a1d41d3922ded71ce/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=74a3d2c3aae2f04b2630898a1d41d3922ded71ce", "patch": "@@ -75,6 +75,10 @@ static bool v850_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n static int v850_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n static bool v850_strict_argument_naming (CUMULATIVE_ARGS *);\n+static rtx v850_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t      const_tree, bool);\n+static void v850_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t       const_tree, bool);\n static bool v850_can_eliminate       (const int, const int);\n static void v850_asm_trampoline_template (FILE *);\n static void v850_trampoline_init (rtx, tree, rtx);\n@@ -197,6 +201,12 @@ static const struct attribute_spec v850_attribute_table[] =\n #undef TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES v850_arg_partial_bytes\n \n+#undef TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG v850_function_arg\n+\n+#undef TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE v850_function_arg_advance\n+\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE v850_can_eliminate\n \n@@ -299,11 +309,9 @@ v850_strict_argument_naming (CUMULATIVE_ARGS * ca ATTRIBUTE_UNUSED)\n    and type TYPE will be passed to a function.  If the result\n    is NULL_RTX, the argument will be pushed.  */\n \n-rtx\n-function_arg (CUMULATIVE_ARGS * cum,\n-              enum machine_mode mode,\n-              tree type,\n-              int named)\n+static rtx\n+v850_function_arg (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n+\t\t   const_tree type, bool named)\n {\n   rtx result = NULL_RTX;\n   int size, align;\n@@ -399,6 +407,22 @@ v850_arg_partial_bytes (CUMULATIVE_ARGS * cum, enum machine_mode mode,\n   return 4 * UNITS_PER_WORD - cum->nbytes;\n }\n \n+/* Update the data in CUM to advance over an argument\n+   of mode MODE and data type TYPE.\n+   (TYPE is null for libcalls where that information may not be available.)  */\n+\n+static void\n+v850_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t   const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  cum->nbytes += (((type && int_size_in_bytes (type) > 8\n+\t\t    ? GET_MODE_SIZE (Pmode)\n+\t\t    : (mode != BLKmode\n+\t\t       ? GET_MODE_SIZE (mode)\n+\t\t       : int_size_in_bytes (type))) + UNITS_PER_WORD - 1)\n+\t\t  & -UNITS_PER_WORD);\n+}\n+\n /* Return the high and low words of a CONST_DOUBLE */\n \n static void"}, {"sha": "1fb87f3d269c868eb68b610d4ed958ceb6f297a9", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a3d2c3aae2f04b2630898a1d41d3922ded71ce/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a3d2c3aae2f04b2630898a1d41d3922ded71ce/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=74a3d2c3aae2f04b2630898a1d41d3922ded71ce", "patch": "@@ -608,41 +608,13 @@ enum reg_class\n #define CUMULATIVE_ARGS struct cum_arg\n struct cum_arg { int nbytes; int anonymous_args; };\n \n-/* Define where to put the arguments to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n-\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  function_arg (&CUM, MODE, TYPE, NAMED)\n-\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0.  */\n \n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM).nbytes = 0, (CUM).anonymous_args = 0)\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\t\t\\\n- ((CUM).nbytes +=\t\t\t\t\t\t\t\\\n-  ((((TYPE) && int_size_in_bytes (TYPE) > 8)\t\t\t\t\\\n-   ? GET_MODE_SIZE (Pmode)\t\t\t\t\t\t\\\n-   : ((MODE) != BLKmode\t\t\t\t\t\t\t\\\n-      ? GET_MODE_SIZE ((MODE))\t\t\t\t\t\t\\\n-      : int_size_in_bytes ((TYPE))))\t\t\t\t\t\\\n-   + UNITS_PER_WORD - 1) & -UNITS_PER_WORD)\n-\n /* When a parameter is passed in a register, stack space is still\n    allocated for it.  */\n #define REG_PARM_STACK_SPACE(DECL) 0"}]}