{"sha": "5ae7caad5160a2238fa40324095d7c07fcc3885d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFlN2NhYWQ1MTYwYTIyMzhmYTQwMzI0MDk1ZDdjMDdmY2MzODg1ZA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-08-26T13:38:40Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-08-26T13:38:40Z"}, "message": "[AArch64][TLSIE][2/2] Implement TLS IE for tiny model\n\n2015-08-26  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n\t    Jiong Wang  <jiong.wang@arm.com>\ngcc/\n\t* config/aarch64/aarch64.md (UNSPEC_GOTTINYTLS): New UNSPEC.\n\t(tlsie_tiny_<mode>): New define_insn.\n\t(tlsie_tiny_sidi): Likewise.\n\t* config/aarch64/aarch64-protos.h (aarch64_symbol_type): Define\n\tSYMBOL_TINY_TLSIE.\n\t(aarch64_symbol_context): New comment for SYMBOL_TINY_TLSIE.\n\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Support\n\tSYMBOL_TINY_TLSIE.\n\t(aarch64_expand_mov_immediate): Likewise.\n\t(aarch64_print_operand): Likewise.\n\t(arch64_classify_tls_symbol): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/tlsie_tiny_1.c: New testcase.\n\nFrom-SVN: r227220", "tree": {"sha": "c20b5b6afa579efa756b23ce6f725a647c26e7ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c20b5b6afa579efa756b23ce6f725a647c26e7ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ae7caad5160a2238fa40324095d7c07fcc3885d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae7caad5160a2238fa40324095d7c07fcc3885d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae7caad5160a2238fa40324095d7c07fcc3885d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae7caad5160a2238fa40324095d7c07fcc3885d/comments", "author": null, "committer": null, "parents": [{"sha": "e656fbc820265bdab84bdc2ab6c4e32a4713ea1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "a0c4fb99acd468d6a547a5870e003e780dd59092", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5ae7caad5160a2238fa40324095d7c07fcc3885d", "patch": "@@ -1,3 +1,18 @@\n+2015-08-26  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n+\t    Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.md (UNSPEC_GOTTINYTLS): New UNSPEC.\n+\t(tlsie_tiny_<mode>): New define_insn.\n+\t(tlsie_tiny_sidi): Likewise.\n+\t* config/aarch64/aarch64-protos.h (aarch64_symbol_type): Define\n+\tSYMBOL_TINY_TLSIE.\n+\t(aarch64_symbol_context): New comment for SYMBOL_TINY_TLSIE.\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Support\n+\tSYMBOL_TINY_TLSIE.\n+\t(aarch64_expand_mov_immediate): Likewise.\n+\t(aarch64_print_operand): Likewise.\n+\t(arch64_classify_tls_symbol): Likewise.\n+\n 2015-08-26  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/arm/arm-arches.def: Replace single value flags with"}, {"sha": "8fbc204123a7d0cc5f082aea721e0465c2233ea2", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=5ae7caad5160a2238fa40324095d7c07fcc3885d", "patch": "@@ -74,6 +74,7 @@ enum aarch64_symbol_context\n    SYMBOL_SMALL_TLSGD\n    SYMBOL_SMALL_TLSDESC\n    SYMBOL_SMALL_GOTTPREL\n+   SYMBOL_TINY_TLSIE\n    SYMBOL_TLSLE12\n    SYMBOL_TLSLE24\n    SYMBOL_TLSLE32\n@@ -114,6 +115,7 @@ enum aarch64_symbol_type\n   SYMBOL_SMALL_GOTTPREL,\n   SYMBOL_TINY_ABSOLUTE,\n   SYMBOL_TINY_GOT,\n+  SYMBOL_TINY_TLSIE,\n   SYMBOL_TLSLE12,\n   SYMBOL_TLSLE24,\n   SYMBOL_TLSLE32,"}, {"sha": "c74bf84fc8bfb2b80167b676e17834e0d1ea77e6", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5ae7caad5160a2238fa40324095d7c07fcc3885d", "patch": "@@ -1159,6 +1159,31 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n       emit_insn (gen_ldr_got_tiny (dest, imm));\n       return;\n \n+    case SYMBOL_TINY_TLSIE:\n+      {\n+\tmachine_mode mode = GET_MODE (dest);\n+\trtx tp = aarch64_load_tp (NULL);\n+\n+\tif (mode == ptr_mode)\n+\t  {\n+\t    if (mode == DImode)\n+\t      emit_insn (gen_tlsie_tiny_di (dest, imm, tp));\n+\t    else\n+\t      {\n+\t\ttp = gen_lowpart (mode, tp);\n+\t\temit_insn (gen_tlsie_tiny_si (dest, imm, tp));\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    gcc_assert (mode == Pmode);\n+\t    emit_insn (gen_tlsie_tiny_sidi (dest, imm, tp));\n+\t  }\n+\n+\tset_unique_reg_note (get_last_insn (), REG_EQUIV, imm);\n+\treturn;\n+      }\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -1693,6 +1718,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \tcase SYMBOL_SMALL_GOT_28K:\n \tcase SYMBOL_SMALL_GOT_4G:\n \tcase SYMBOL_TINY_GOT:\n+\tcase SYMBOL_TINY_TLSIE:\n \t  if (offset != const0_rtx)\n \t    {\n \t      gcc_assert(can_create_pseudo_p ());\n@@ -4623,6 +4649,10 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \t  asm_fprintf (asm_out_file, \":got:\");\n \t  break;\n \n+\tcase SYMBOL_TINY_TLSIE:\n+\t  asm_fprintf (asm_out_file, \":gottprel:\");\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -8728,7 +8758,14 @@ aarch64_classify_tls_symbol (rtx x)\n       return TARGET_TLS_DESC ? SYMBOL_SMALL_TLSDESC : SYMBOL_SMALL_TLSGD;\n \n     case TLS_MODEL_INITIAL_EXEC:\n-      return SYMBOL_SMALL_GOTTPREL;\n+      switch (aarch64_cmodel)\n+\t{\n+\tcase AARCH64_CMODEL_TINY:\n+\tcase AARCH64_CMODEL_TINY_PIC:\n+\t  return SYMBOL_TINY_TLSIE;\n+\tdefault:\n+\t  return SYMBOL_SMALL_GOTTPREL;\n+\t}\n \n     case TLS_MODEL_LOCAL_EXEC:\n       if (aarch64_tls_size == 12)"}, {"sha": "80fd6c4894ebdc738b2c635c80b74592ec32b162", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=5ae7caad5160a2238fa40324095d7c07fcc3885d", "patch": "@@ -90,6 +90,7 @@\n     UNSPEC_GOTSMALLPIC28K\n     UNSPEC_GOTSMALLTLS\n     UNSPEC_GOTTINYPIC\n+    UNSPEC_GOTTINYTLS\n     UNSPEC_LD1\n     UNSPEC_LD2\n     UNSPEC_LD2_DUP\n@@ -4515,6 +4516,30 @@\n    (set_attr \"length\" \"8\")]\n )\n \n+(define_insn \"tlsie_tiny_<mode>\"\n+  [(set (match_operand:PTR 0 \"register_operand\" \"=&r\")\n+\t(unspec:PTR [(match_operand 1 \"aarch64_tls_ie_symref\" \"S\")\n+\t\t     (match_operand:PTR 2 \"register_operand\" \"r\")]\n+\t\t   UNSPEC_GOTTINYTLS))]\n+  \"\"\n+  \"ldr\\\\t%<w>0, %L1\\;add\\\\t%<w>0, %<w>0, %<w>2\"\n+  [(set_attr \"type\" \"multiple\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+(define_insn \"tlsie_tiny_sidi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(zero_extend:DI\n+\t  (unspec:SI [(match_operand 1 \"aarch64_tls_ie_symref\" \"S\")\n+\t\t      (match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t      ]\n+\t\t      UNSPEC_GOTTINYTLS)))]\n+  \"\"\n+  \"ldr\\\\t%w0, %L1\\;add\\\\t%<w>0, %<w>0, %<w>2\"\n+  [(set_attr \"type\" \"multiple\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n (define_insn \"tlsle12_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec:P [(match_operand:P 1 \"register_operand\" \"r\")"}, {"sha": "b1dcc1588dc1a3b1febb8848b94d8363c94d82e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ae7caad5160a2238fa40324095d7c07fcc3885d", "patch": "@@ -1,3 +1,7 @@\n+2015-08-26  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/tlsie_tiny_1.c: New testcase.\n+\n 2015-08-26  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/tlsle_1.x: Rename to tls_1.x"}, {"sha": "7477fa6066133a78b1b682cac52a48a2d0642c4b", "filename": "gcc/testsuite/gcc.target/aarch64/tlsie_tiny_1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsie_tiny_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ae7caad5160a2238fa40324095d7c07fcc3885d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsie_tiny_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftlsie_tiny_1.c?ref=5ae7caad5160a2238fa40324095d7c07fcc3885d", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target tls_native } */\n+/* { dg-options \"-O2 -fpic -ftls-model=initial-exec -mcmodel=tiny\" } */\n+\n+#include \"tls_1.x\"\n+\n+/* { dg-final { scan-assembler-times \":gottprel:\" 2 } } */"}]}