{"sha": "c2f9f64eb2c23b74d5eacb59223088ba44f48519", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJmOWY2NGViMmMyM2I3NGQ1ZWFjYjU5MjIzMDg4YmE0NGY0ODUxOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-08-31T22:08:25Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-08-31T22:08:25Z"}, "message": "(make_compound_operation): Handle the case (and (xor/ior (lshift...) (lshift...)) ...).\n\n(make_compound_operation): Handle the case\n(and (xor/ior (lshift...) (lshift...)) ...).\n(make_field_assignment): In get_pos_from_mask call, only invert\nbits in mode mask.\n\nFrom-SVN: r5237", "tree": {"sha": "162fa089c725b7664c716087520a3ef0c0655da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/162fa089c725b7664c716087520a3ef0c0655da1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2f9f64eb2c23b74d5eacb59223088ba44f48519", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f9f64eb2c23b74d5eacb59223088ba44f48519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2f9f64eb2c23b74d5eacb59223088ba44f48519", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f9f64eb2c23b74d5eacb59223088ba44f48519/comments", "author": null, "committer": null, "parents": [{"sha": "f40fac9b075ab3fa18619f9bbc49ea4867460d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40fac9b075ab3fa18619f9bbc49ea4867460d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f40fac9b075ab3fa18619f9bbc49ea4867460d45"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "d833b592fa29ba5d77f302ba0497c603916b2b75", "filename": "gcc/combine.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2f9f64eb2c23b74d5eacb59223088ba44f48519/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2f9f64eb2c23b74d5eacb59223088ba44f48519/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c2f9f64eb2c23b74d5eacb59223088ba44f48519", "patch": "@@ -5296,6 +5296,21 @@ make_compound_operation (x, in_code)\n \t\t\t\t XEXP (SUBREG_REG (XEXP (x, 0)), 1), i, 1,\n \t\t\t\t 0, in_code == COMPARE);\n \t}\n+      /* Same as previous, but for (xor/ior (lshift...) (lshift...)).  */\n+      else if ((GET_CODE (XEXP (x, 0)) == XOR\n+\t\t|| GET_CODE (XEXP (x, 0)) == IOR)\n+\t       && GET_CODE (XEXP (XEXP (x, 0), 0)) == LSHIFTRT\n+\t       && GET_CODE (XEXP (XEXP (x, 0), 1)) == LSHIFTRT\n+\t       && (i = exact_log2 (INTVAL (XEXP (x, 1)) + 1)) >= 0)\n+\t{\n+\t  /* Apply the distributive law, and then try to make extractions.  */\n+\t  new = gen_rtx_combine (GET_CODE (XEXP (x, 0)), mode,\n+\t\t\t\t gen_rtx (AND, mode, XEXP (XEXP (x, 0), 0),\n+\t\t\t\t\t  XEXP (x, 1)),\n+\t\t\t\t gen_rtx (AND, mode, XEXP (XEXP (x, 0), 1),\n+\t\t\t\t\t  XEXP (x, 1)));\n+\t  new = make_compound_operation (new, in_code);\n+\t}\n \n       /* If we are have (and (rotate X C) M) and C is larger than the number\n \t of bits in M, this is an extraction.  */\n@@ -6100,7 +6115,7 @@ make_field_assignment (x)\n   else\n     return x;\n \n-  pos = get_pos_from_mask (~c1, &len);\n+  pos = get_pos_from_mask (c1 ^ GET_MODE_MASK (GET_MODE (dest)), &len);\n   if (pos < 0 || pos + len > GET_MODE_BITSIZE (GET_MODE (dest))\n       || (GET_MODE_BITSIZE (GET_MODE (other)) <= HOST_BITS_PER_WIDE_INT\n \t  && (c1 & nonzero_bits (other, GET_MODE (other))) != 0))"}]}