{"sha": "aa573a6a3e165632103f2f8defb9768106db6a61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE1NzNhNmEzZTE2NTYzMjEwM2YyZjhkZWZiOTc2ODEwNmRiNmE2MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-23T14:13:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-23T14:13:18Z"}, "message": "Make any_cast compare typeinfo as well as function pointers\n\nIt's possible for the function pointer comparison to fail even though\nthe type is correct, because the function could be defined multiple\ntimes with different addresses when shared libraries are in use.\n\nRetain the function pointer check for the common case where the check\nsucceeds, but compare typeinfo (if RTTI is enabled) if the first check\nfails.\n\n\t* include/experimental/any (__any_caster): Use RTTI if comparing\n\taddresses fails, to support non-unique addresses in shared libraries.\n\t* include/std/any (__any_caster): Likewise.\n\nFrom-SVN: r271557", "tree": {"sha": "266886fa0da1ec2329d0dbbe73b11e45561df137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/266886fa0da1ec2329d0dbbe73b11e45561df137"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa573a6a3e165632103f2f8defb9768106db6a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa573a6a3e165632103f2f8defb9768106db6a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa573a6a3e165632103f2f8defb9768106db6a61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa573a6a3e165632103f2f8defb9768106db6a61/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dbab5dc84e3782fe6f366a985e507e2ea2726d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbab5dc84e3782fe6f366a985e507e2ea2726d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dbab5dc84e3782fe6f366a985e507e2ea2726d2"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "2d557fc3a78014c0b2fa4a2c2e64f7d48b748c56", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa573a6a3e165632103f2f8defb9768106db6a61/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa573a6a3e165632103f2f8defb9768106db6a61/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa573a6a3e165632103f2f8defb9768106db6a61", "patch": "@@ -1,5 +1,9 @@\n 2019-05-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/experimental/any (__any_caster): Use RTTI if comparing\n+\taddresses fails, to support non-unique addresses in shared libraries.\n+\t* include/std/any (__any_caster): Likewise.\n+\n \tPR libstdc++/90220\n \t* include/experimental/any (__any_caster): Constrain to only be\n \tcallable for object types. Use remove_cv_t instead of decay_t."}, {"sha": "f7a4c8fa3945c9ed33a2efe746440651aba00da6", "filename": "libstdc++-v3/include/experimental/any", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa573a6a3e165632103f2f8defb9768106db6a61/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa573a6a3e165632103f2f8defb9768106db6a61/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fany?ref=aa573a6a3e165632103f2f8defb9768106db6a61", "patch": "@@ -432,11 +432,18 @@ inline namespace fundamentals_v1\n       // is explicitly specialized and has a no-op _S_manage function.\n       using _Vp = conditional_t<__and_<__does_not_decay, __is_copyable>::value,\n \t\t\t\t_Up, any::_Op>;\n-      if (__any->_M_manager != &any::_Manager<_Vp>::_S_manage)\n-\treturn nullptr;\n-      any::_Arg __arg;\n-      __any->_M_manager(any::_Op_access, __any, &__arg);\n-      return __arg._M_obj;\n+      // First try comparing function addresses, which works without RTTI\n+      if (__any->_M_manager == &any::_Manager<_Vp>::_S_manage\n+#if __cpp_rtti\n+\t  || __any->type() == typeid(_Tp)\n+#endif\n+\t  )\n+\t{\n+\t  any::_Arg __arg;\n+\t  __any->_M_manager(any::_Op_access, __any, &__arg);\n+\t  return __arg._M_obj;\n+\t}\n+      return nullptr;\n     }\n \n   // This overload exists so that std::any_cast<void(*)()>(a) is well-formed."}, {"sha": "229c7c6b65ec5cbf38415da886bbb74e7f7c5c2c", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa573a6a3e165632103f2f8defb9768106db6a61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa573a6a3e165632103f2f8defb9768106db6a61/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=aa573a6a3e165632103f2f8defb9768106db6a61", "patch": "@@ -503,6 +503,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n   // @}\n \n+  /// @cond undocumented\n   template<typename _Tp>\n     void* __any_caster(const any* __any)\n     {\n@@ -516,15 +517,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Only copy constructible types can be used for contained values:\n       else if constexpr (!is_copy_constructible_v<_Up>)\n \treturn nullptr;\n-      // This check is equivalent to __any->type() == typeid(_Tp)\n-      else if (__any->_M_manager == &any::_Manager<_Up>::_S_manage)\n+      // First try comparing function addresses, which works without RTTI\n+      else if (__any->_M_manager == &any::_Manager<_Up>::_S_manage\n+#if __cpp_rtti\n+\t  || __any->type() == typeid(_Tp)\n+#endif\n+\t  )\n \t{\n \t  any::_Arg __arg;\n \t  __any->_M_manager(any::_Op_access, __any, &__arg);\n \t  return __arg._M_obj;\n \t}\n       return nullptr;\n     }\n+  /// @endcond\n \n   /**\n    * @brief Access the contained object."}]}