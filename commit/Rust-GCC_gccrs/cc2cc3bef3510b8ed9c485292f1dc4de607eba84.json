{"sha": "cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyY2MzYmVmMzUxMGI4ZWQ5YzQ4NTI5MmYxZGM0ZGU2MDdlYmE4NA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2019-02-18T13:53:51Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2019-02-18T13:53:51Z"}, "message": "Tabify all D *.exp files\n\n\tlibphobos:\n\t* testsuite/lib/libphobos-dg.exp: Tabify.\n\t* testsuite/lib/libphobos.exp: Likewise.\n\t* testsuite/libphobos.cycles/cycles.exp: Likewise.\n\t* testsuite/libphobos.shared/shared.exp: Likewise.\n\t* testsuite/libphobos.unittests/unittests.exp: Likewise.\n\n\tgcc/testsuite:\n\t* gdc.dg/dg.exp: Tabify.\n\t* gdc.dg/lto/lto.exp: Likewise.\n\t* gdc.test/gdc-test.exp: Likewise.\n\t* lib/gdc-dg.exp: Likewise.\n\t* lib/gdc.exp: Likewise.\n\nFrom-SVN: r268987", "tree": {"sha": "b371bdf150a13a6ebcfa696005d0e3cc42c727bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b371bdf150a13a6ebcfa696005d0e3cc42c727bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c41491973b05547236fe0bb82ae2419607c6f3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c41491973b05547236fe0bb82ae2419607c6f3ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c41491973b05547236fe0bb82ae2419607c6f3ef"}], "stats": {"total": 910, "additions": 463, "deletions": 447}, "files": [{"sha": "b1a0c368f71008651562db3cb7e8a1f40cd77f94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -1,3 +1,11 @@\n+2019-02-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* gdc.dg/dg.exp: Tabify.\n+\t* gdc.dg/lto/lto.exp: Likewise.\n+\t* gdc.test/gdc-test.exp: Likewise.\n+\t* lib/gdc-dg.exp: Likewise.\n+\t* lib/gdc.exp: Likewise.\n+\n 2019-02-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/89296"}, {"sha": "299768f82301154349bfef99a46741156bebd279", "filename": "gcc/testsuite/gdc.dg/dg.exp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2Fgdc.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2Fgdc.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fdg.exp?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -24,12 +24,12 @@ load_lib gdc-dg.exp\n \n if ![info exists TORTURE_OPTIONS] {\n     set TORTURE_OPTIONS [list \\\n-        { -O0 } { -O1 } { -O2 } { -O3 } { -Os } \\\n-        { -O0 -frelease } { -O0 -g } { -O0 -frelease -g } \\\n-        { -O1 -frelease } { -O1 -g } { -O1 -frelease -g } \\\n-        { -O2 -frelease } { -O2 -g } { -O2 -frelease -g } \\\n-        { -O3 -frelease } { -O3 -g } { -O3 -frelease -g } \\\n-        { -Os -frelease } { -Os -g } { -Os -frelease -g }]\n+\t{ -O0 } { -O1 } { -O2 } { -O3 } { -Os } \\\n+\t{ -O0 -frelease } { -O0 -g } { -O0 -frelease -g } \\\n+\t{ -O1 -frelease } { -O1 -g } { -O1 -frelease -g } \\\n+\t{ -O2 -frelease } { -O2 -g } { -O2 -frelease -g } \\\n+\t{ -O3 -frelease } { -O3 -g } { -O3 -frelease -g } \\\n+\t{ -Os -frelease } { -Os -g } { -Os -frelease -g }]\n }\n \n # Initialize `dg'."}, {"sha": "087ff130c9f6fb8a04616de768fd09dbf3e28de9", "filename": "gcc/testsuite/gdc.dg/lto/lto.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2Fgdc.dg%2Flto%2Flto.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2Fgdc.dg%2Flto%2Flto.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Flto%2Flto.exp?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -51,7 +51,7 @@ set sid \"d_lto\"\n foreach src [lsort [find $srcdir/$subdir *_0.d]] {\n     # If we're only testing specific files and this isn't one of them, skip it.\n     if ![runtest_file_p $runtests $src] then {\n-        continue\n+\tcontinue\n     }\n \n     lto-execute $src $sid"}, {"sha": "f2772e9c9e6d8e6b917567c9ec17d8e5d1b141b2", "filename": "gcc/testsuite/gdc.test/gdc-test.exp", "status": "modified", "additions": 252, "deletions": 252, "changes": 504, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2Fgdc.test%2Fgdc-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2Fgdc.test%2Fgdc-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fgdc-test.exp?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -26,107 +26,107 @@ proc gdc-convert-args { args } {\n     set out \"\"\n \n     foreach arg [split [lindex $args 0] \" \"] {\n-        # List of switches kept in ASCII collated order.\n-        if [string match \"-D\" $arg] {\n-            lappend out \"-fdoc\"\n+\t# List of switches kept in ASCII collated order.\n+\tif [string match \"-D\" $arg] {\n+\t    lappend out \"-fdoc\"\n \n-        } elseif { [regexp -- {^-I([\\w+/-]+)} $arg pattern path] } {\n-            lappend out \"-I$path\"\n+\t} elseif { [regexp -- {^-I([\\w+/-]+)} $arg pattern path] } {\n+\t    lappend out \"-I$path\"\n \n-        } elseif { [regexp -- {^-J([\\w+/-]+)} $arg pattern path] } {\n-            lappend out \"-J$path\"\n+\t} elseif { [regexp -- {^-J([\\w+/-]+)} $arg pattern path] } {\n+\t    lappend out \"-J$path\"\n \n-        } elseif [string match \"-allinst\" $arg] {\n-            lappend out \"-fall-instantiations\"\n+\t} elseif [string match \"-allinst\" $arg] {\n+\t    lappend out \"-fall-instantiations\"\n \n-        } elseif { [string match \"-boundscheck\" $arg]\n-                 || [string match \"-boundscheck=on\" $arg] } {\n-            lappend out \"-fbounds-check\"\n+\t} elseif { [string match \"-boundscheck\" $arg]\n+\t\t || [string match \"-boundscheck=on\" $arg] } {\n+\t    lappend out \"-fbounds-check\"\n \n-        } elseif { [string match \"-boundscheck=off\" $arg]\n-                   || [string match \"-noboundscheck\" $arg] } {\n-            lappend out \"-fno-bounds-check\"\n+\t} elseif { [string match \"-boundscheck=off\" $arg]\n+\t\t   || [string match \"-noboundscheck\" $arg] } {\n+\t    lappend out \"-fno-bounds-check\"\n \n-        } elseif [string match \"-boundscheck=safeonly\" $arg] {\n-            lappend out \"-fbounds-check=safeonly\"\n+\t} elseif [string match \"-boundscheck=safeonly\" $arg] {\n+\t    lappend out \"-fbounds-check=safeonly\"\n \n-        } elseif [string match \"-c\" $arg] {\n-            lappend out \"-c\"\n+\t} elseif [string match \"-c\" $arg] {\n+\t    lappend out \"-c\"\n \n-        } elseif [string match \"-d\" $arg] {\n-            lappend out \"-Wno-deprecated\"\n+\t} elseif [string match \"-d\" $arg] {\n+\t    lappend out \"-Wno-deprecated\"\n \n-        } elseif [string match \"-de\" $arg] {\n-            lappend out \"-Wdeprecated\"\n-            lappend out \"-Werror\"\n+\t} elseif [string match \"-de\" $arg] {\n+\t    lappend out \"-Wdeprecated\"\n+\t    lappend out \"-Werror\"\n \n-        } elseif [string match \"-debug\" $arg] {\n-            lappend out \"-fdebug\"\n+\t} elseif [string match \"-debug\" $arg] {\n+\t    lappend out \"-fdebug\"\n \n-        } elseif [regexp -- {^-debug=(\\w+)} $arg pattern value] {\n-            lappend out \"-fdebug=$value\"\n+\t} elseif [regexp -- {^-debug=(\\w+)} $arg pattern value] {\n+\t    lappend out \"-fdebug=$value\"\n \n-        } elseif [string match \"-dip1000\" $arg] {\n-            lappend out \"-ftransition=dip1000\"\n+\t} elseif [string match \"-dip1000\" $arg] {\n+\t    lappend out \"-ftransition=dip1000\"\n \n-        } elseif [string match \"-dip25\" $arg] {\n-            lappend out \"-ftransition=dip25\"\n+\t} elseif [string match \"-dip25\" $arg] {\n+\t    lappend out \"-ftransition=dip25\"\n \n-        } elseif [string match \"-dw\" $arg] {\n-            lappend out \"-Wdeprecated\"\n-            lappend out \"-Wno-error\"\n+\t} elseif [string match \"-dw\" $arg] {\n+\t    lappend out \"-Wdeprecated\"\n+\t    lappend out \"-Wno-error\"\n \n-        } elseif [string match \"-fPIC\" $arg] {\n-            lappend out \"-fPIC\"\n+\t} elseif [string match \"-fPIC\" $arg] {\n+\t    lappend out \"-fPIC\"\n \n-        } elseif { [string match \"-g\" $arg]\n-                   || [string match \"-gc\" $arg] } {\n-            lappend out \"-g\"\n+\t} elseif { [string match \"-g\" $arg]\n+\t\t   || [string match \"-gc\" $arg] } {\n+\t    lappend out \"-g\"\n \n-        } elseif [string match \"-inline\" $arg] {\n-            lappend out \"-finline-functions\"\n+\t} elseif [string match \"-inline\" $arg] {\n+\t    lappend out \"-finline-functions\"\n \n-        } elseif [string match \"-main\" $arg] {\n-            lappend out \"-fmain\"\n+\t} elseif [string match \"-main\" $arg] {\n+\t    lappend out \"-fmain\"\n \n-        } elseif [regexp -- {^-mv=([\\w+=./-]+)} $arg pattern value] {\n-            lappend out \"-fmodule-file=$value\"\n+\t} elseif [regexp -- {^-mv=([\\w+=./-]+)} $arg pattern value] {\n+\t    lappend out \"-fmodule-file=$value\"\n \n-        } elseif [string match \"-O\" $arg] {\n-            lappend out \"-O2\"\n+\t} elseif [string match \"-O\" $arg] {\n+\t    lappend out \"-O2\"\n \n-        } elseif [string match \"-release\" $arg] {\n-            lappend out \"-frelease\"\n+\t} elseif [string match \"-release\" $arg] {\n+\t    lappend out \"-frelease\"\n \n-        } elseif [regexp -- {^-transition=(\\w+)} $arg pattern value] {\n-            lappend out \"-ftransition=$value\"\n+\t} elseif [regexp -- {^-transition=(\\w+)} $arg pattern value] {\n+\t    lappend out \"-ftransition=$value\"\n \n-        } elseif [string match \"-unittest\" $arg] {\n-            lappend out \"-funittest\"\n+\t} elseif [string match \"-unittest\" $arg] {\n+\t    lappend out \"-funittest\"\n \n-        } elseif [string match \"-verrors=spec\" $arg] {\n-            lappend out \"-Wspeculative\"\n+\t} elseif [string match \"-verrors=spec\" $arg] {\n+\t    lappend out \"-Wspeculative\"\n \n-        } elseif [regexp -- {^-verrors=(\\d+)} $arg pattern num] {\n-            lappend out \"-fmax-errors=$num\"\n+\t} elseif [regexp -- {^-verrors=(\\d+)} $arg pattern num] {\n+\t    lappend out \"-fmax-errors=$num\"\n \n-        } elseif [regexp -- {^-version=(\\w+)} $arg pattern value] {\n-            lappend out \"-fversion=$value\"\n+\t} elseif [regexp -- {^-version=(\\w+)} $arg pattern value] {\n+\t    lappend out \"-fversion=$value\"\n \n-        } elseif [string match \"-vtls\" $arg] {\n-            lappend out \"-ftransition=tls\"\n+\t} elseif [string match \"-vtls\" $arg] {\n+\t    lappend out \"-ftransition=tls\"\n \n-        } elseif [string match \"-w\" $arg] {\n-            lappend out \"-Wall\"\n-            lappend out \"-Werror\"\n+\t} elseif [string match \"-w\" $arg] {\n+\t    lappend out \"-Wall\"\n+\t    lappend out \"-Werror\"\n \n-        } elseif [string match \"-wi\" $arg] {\n-            lappend out \"-Wall\"\n-            lappend out \"-Wno-error\"\n+\t} elseif [string match \"-wi\" $arg] {\n+\t    lappend out \"-Wall\"\n+\t    lappend out \"-Wno-error\"\n \n-        } else {\n-            # print \"Unhandled Argument: $arg\"\n-        }\n+\t} else {\n+\t    # print \"Unhandled Argument: $arg\"\n+\t}\n     }\n \n     return $out\n@@ -146,8 +146,8 @@ proc gdc-copy-extra { base extra } {\n     fconfigure $fdout -encoding binary\n \n     while { [gets $fdin copy_line] >= 0 } {\n-        set out_line $copy_line\n-        puts $fdout $out_line\n+\tset out_line $copy_line\n+\tputs $fdout $out_line\n     }\n \n     close $fdin\n@@ -160,20 +160,20 @@ proc gdc-copy-extra { base extra } {\n # Translate DMD test directives to dejagnu equivalent.\n #\n #   COMPILE_SEPARATELY: Not handled.\n-#   EXECUTE_ARGS:       Parameters to add to the execution of the test.\n-#   COMPILED_IMPORTS:   List of modules files that are imported by the main\n-#                       source file that should be included in compilation.\n-#                       Currently handled the same as EXTRA_SOURCES.\n-#   EXTRA_SOURCES:      List of extra sources to build and link along with\n-#                       the test.\n-#   EXTRA_FILES:        List of extra files to copy for the test runs.\n-#   PERMUTE_ARGS:       The set of arguments to permute in multiple compiler\n-#                       invocations.  An empty set means only one permutation\n-#                       with no arguments.\n-#   TEST_OUTPUT:        The output expected from the compilation.\n-#   POST_SCRIPT:        Not handled.\n-#   REQUIRED_ARGS:      Arguments to add to the compiler command line.\n-#   DISABLED:           Not handled.\n+#   EXECUTE_ARGS:\tParameters to add to the execution of the test.\n+#   COMPILED_IMPORTS:\tList of modules files that are imported by the main\n+#\t\t\tsource file that should be included in compilation.\n+#\t\t\tCurrently handled the same as EXTRA_SOURCES.\n+#   EXTRA_SOURCES:\tList of extra sources to build and link along with\n+#\t\t\tthe test.\n+#   EXTRA_FILES:\tList of extra files to copy for the test runs.\n+#   PERMUTE_ARGS:\tThe set of arguments to permute in multiple compiler\n+#\t\t\tinvocations.  An empty set means only one permutation\n+#\t\t\twith no arguments.\n+#   TEST_OUTPUT:\tThe output expected from the compilation.\n+#   POST_SCRIPT:\tNot handled.\n+#   REQUIRED_ARGS:\tArguments to add to the compiler command line.\n+#   DISABLED:\t\tNot handled.\n #\n \n proc dmd2dg { base test } {\n@@ -198,76 +198,76 @@ proc dmd2dg { base test } {\n     #fconfigure $fdout -encoding binary\n \n     while { [gets $fdin copy_line] >= 0 } {\n-        set out_line $copy_line\n-\n-        if [regexp -- {COMPILE_SEPARATELY} $copy_line] {\n-            # COMPILE_SEPARATELY is not handled.\n-            regsub -- {COMPILE_SEPARATELY.*$} $copy_line \"\" out_line\n-\n-        } elseif [regexp -- {DISABLED} $copy_line] {\n-            # DISABLED is not handled.\n-            regsub -- {DISABLED.*$} $copy_line \"\" out_line\n-\n-        } elseif [regexp -- {POST_SCRIPT} $copy_line] {\n-            # POST_SCRIPT is not handled\n-            regsub -- {POST_SCRIPT.*$} $copy_line \"\" out_line\n-\n-        } elseif [regexp -- {PERMUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n-            # PERMUTE_ARGS is handled by gdc-do-test.\n-            set PERMUTE_ARGS [gdc-convert-args $args]\n-            regsub -- {PERMUTE_ARGS.*$} $copy_line \"\" out_line\n-\n-        } elseif [regexp -- {EXECUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n-            # EXECUTE_ARGS is handled by gdc_load.\n-            foreach arg $args {\n-                lappend GDC_EXECUTE_ARGS $arg\n-            }\n-            regsub -- {EXECUTE_ARGS.*$} $copy_line \"\" out_line\n-\n-        } elseif [regexp -- {REQUIRED_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n-            # Convert all listed arguments to from dmd to gdc-style.\n-            set new_option \"{ dg-additional-options \\\"[gdc-convert-args $args]\\\" }\"\n-            regsub -- {REQUIRED_ARGS.*$} $copy_line $new_option out_line\n-\n-        } elseif [regexp -- {EXTRA_SOURCES\\s*:\\s*(.*)} $copy_line match sources] {\n-            # Copy all sources to the testsuite build directory.\n-            foreach import $sources {\n-                # print \"Import: $base $type/$import\"\n-                gdc-copy-extra $base \"$type/$import\"\n-            }\n-            set new_option \"{ dg-additional-sources \\\"$sources\\\" }\"\n-            regsub -- {EXTRA_SOURCES.*$} $copy_line $new_option out_line\n-\n-        } elseif [regexp -- {EXTRA_CPP_SOURCES\\s*:\\s*(.*)} $copy_line match sources] {\n-            # Copy all sources to the testsuite build directory.\n-            foreach import $sources {\n-                # print \"Import: $base $type/$import\"\n-                gdc-copy-extra $base \"$type/$import\"\n-            }\n-            set new_option \"{ dg-additional-sources \\\"$sources\\\" }\"\n-            regsub -- {EXTRA_CPP_SOURCES.*$} $copy_line $new_option out_line\n-\n-        } elseif [regexp -- {EXTRA_FILES\\s*:\\s*(.*)} $copy_line match files] {\n-            # Copy all files to the testsuite build directory.\n-            foreach import $files {\n-                # print \"Import: $base $type/$import\"\n-                gdc-copy-extra $base \"$type/$import\"\n-            }\n-            set new_option \"{ dg-additional-files \\\"$files\\\" }\"\n-            regsub -- {EXTRA_FILES.*$} $copy_line $new_option out_line\n-\n-        } elseif [regexp -- {COMPILED_IMPORTS\\s*:\\s*(.*)} $copy_line match sources] {\n-            # Copy all sources to the testsuite build directory.\n-            foreach import $sources {\n-                # print \"Import: $base $type/$import\"\n-                gdc-copy-extra $base \"$type/$import\"\n-            }\n-            set new_option \"{ dg-additional-sources \\\"$sources\\\" }\"\n-            regsub -- {COMPILED_IMPORTS.*$} $copy_line $new_option out_line\n-\n-        }\n-\n-        puts $fdout $out_line\n+\tset out_line $copy_line\n+\n+\tif [regexp -- {COMPILE_SEPARATELY} $copy_line] {\n+\t    # COMPILE_SEPARATELY is not handled.\n+\t    regsub -- {COMPILE_SEPARATELY.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {DISABLED} $copy_line] {\n+\t    # DISABLED is not handled.\n+\t    regsub -- {DISABLED.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {POST_SCRIPT} $copy_line] {\n+\t    # POST_SCRIPT is not handled\n+\t    regsub -- {POST_SCRIPT.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {PERMUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n+\t    # PERMUTE_ARGS is handled by gdc-do-test.\n+\t    set PERMUTE_ARGS [gdc-convert-args $args]\n+\t    regsub -- {PERMUTE_ARGS.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {EXECUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n+\t    # EXECUTE_ARGS is handled by gdc_load.\n+\t    foreach arg $args {\n+\t\tlappend GDC_EXECUTE_ARGS $arg\n+\t    }\n+\t    regsub -- {EXECUTE_ARGS.*$} $copy_line \"\" out_line\n+\n+\t} elseif [regexp -- {REQUIRED_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n+\t    # Convert all listed arguments to from dmd to gdc-style.\n+\t    set new_option \"{ dg-additional-options \\\"[gdc-convert-args $args]\\\" }\"\n+\t    regsub -- {REQUIRED_ARGS.*$} $copy_line $new_option out_line\n+\n+\t} elseif [regexp -- {EXTRA_SOURCES\\s*:\\s*(.*)} $copy_line match sources] {\n+\t    # Copy all sources to the testsuite build directory.\n+\t    foreach import $sources {\n+\t\t# print \"Import: $base $type/$import\"\n+\t\tgdc-copy-extra $base \"$type/$import\"\n+\t    }\n+\t    set new_option \"{ dg-additional-sources \\\"$sources\\\" }\"\n+\t    regsub -- {EXTRA_SOURCES.*$} $copy_line $new_option out_line\n+\n+\t} elseif [regexp -- {EXTRA_CPP_SOURCES\\s*:\\s*(.*)} $copy_line match sources] {\n+\t    # Copy all sources to the testsuite build directory.\n+\t    foreach import $sources {\n+\t\t# print \"Import: $base $type/$import\"\n+\t\tgdc-copy-extra $base \"$type/$import\"\n+\t    }\n+\t    set new_option \"{ dg-additional-sources \\\"$sources\\\" }\"\n+\t    regsub -- {EXTRA_CPP_SOURCES.*$} $copy_line $new_option out_line\n+\n+\t} elseif [regexp -- {EXTRA_FILES\\s*:\\s*(.*)} $copy_line match files] {\n+\t    # Copy all files to the testsuite build directory.\n+\t    foreach import $files {\n+\t\t# print \"Import: $base $type/$import\"\n+\t\tgdc-copy-extra $base \"$type/$import\"\n+\t    }\n+\t    set new_option \"{ dg-additional-files \\\"$files\\\" }\"\n+\t    regsub -- {EXTRA_FILES.*$} $copy_line $new_option out_line\n+\n+\t} elseif [regexp -- {COMPILED_IMPORTS\\s*:\\s*(.*)} $copy_line match sources] {\n+\t    # Copy all sources to the testsuite build directory.\n+\t    foreach import $sources {\n+\t\t# print \"Import: $base $type/$import\"\n+\t\tgdc-copy-extra $base \"$type/$import\"\n+\t    }\n+\t    set new_option \"{ dg-additional-sources \\\"$sources\\\" }\"\n+\t    regsub -- {COMPILED_IMPORTS.*$} $copy_line $new_option out_line\n+\n+\t}\n+\n+\tputs $fdout $out_line\n     }\n \n     # Add specific options for test type\n@@ -281,32 +281,32 @@ proc dmd2dg { base test } {\n     # Fail compilable are successful if an output is not generated.\n     # Runnable must compile, link, and return 0 to be successful by default.\n     switch $type {\n-        runnable {\n-            if ![isnative] {\n-                set out_line \"// { dg-final { output-exists } }\"\n-                puts $fdout $out_line\n-            }\n-        }\n-\n-        compilable {\n-            set out_line \"// { dg-final { output-exists } }\"\n-            puts $fdout $out_line\n-\n-            # Check that Ddoc tests also generate a html file.\n-            if [regexp -- \"ddoc.*\" $name] {\n-                set ddocfile \"[file rootname $name].html\"\n-                set out_line \"// { dg-final { scan-file $ddocfile \\\"Generated by Ddoc from $test\\\" } }\"\n-                puts $fdout $out_line\n-                # Cleanup extra generated files.\n-                set out_line \"// { dg-final { file delete $ddocfile } }\"\n-                puts $fdout $out_line\n-            }\n-        }\n-\n-        fail_compilation {\n-            set out_line \"// { dg-final { output-exists-not } }\"\n-            puts $fdout $out_line\n-        }\n+\trunnable {\n+\t    if ![isnative] {\n+\t\tset out_line \"// { dg-final { output-exists } }\"\n+\t\tputs $fdout $out_line\n+\t    }\n+\t}\n+\n+\tcompilable {\n+\t    set out_line \"// { dg-final { output-exists } }\"\n+\t    puts $fdout $out_line\n+\n+\t    # Check that Ddoc tests also generate a html file.\n+\t    if [regexp -- \"ddoc.*\" $name] {\n+\t\tset ddocfile \"[file rootname $name].html\"\n+\t\tset out_line \"// { dg-final { scan-file $ddocfile \\\"Generated by Ddoc from $test\\\" } }\"\n+\t\tputs $fdout $out_line\n+\t\t# Cleanup extra generated files.\n+\t\tset out_line \"// { dg-final { file delete $ddocfile } }\"\n+\t\tputs $fdout $out_line\n+\t    }\n+\t}\n+\n+\tfail_compilation {\n+\t    set out_line \"// { dg-final { output-exists-not } }\"\n+\t    puts $fdout $out_line\n+\t}\n     }\n \n     close $fdin\n@@ -319,14 +319,14 @@ proc gdc-permute-options { options } {\n     set result { }\n     set n [expr 1<<[llength $options]]\n     for { set i 0 } { $i<$n } { incr i } {\n-        set option \"\"\n-        for { set j 0 } { $j<[llength $options] } { incr j } {\n-            if [expr $i & 1 << $j] {\n-                append option [lindex $options $j]\n-                append option \" \"\n-            }\n-        }\n-        lappend result $option\n+\tset option \"\"\n+\tfor { set j 0 } { $j<[llength $options] } { incr j } {\n+\t    if [expr $i & 1 << $j] {\n+\t\tappend option [lindex $options $j]\n+\t\tappend option \" \"\n+\t    }\n+\t}\n+\tlappend result $option\n \n     }\n     return $result\n@@ -341,8 +341,8 @@ proc gdc-do-test { } {\n     # If a testcase doesn't have special options, use these.\n     global DEFAULT_DFLAGS\n     if ![info exists DEFAULT_DFLAGS] then {\n-        set DEFAULT_DFLAGS \"-g -O2 -frelease\"\n-        #set DEFAULT_DFLAGS \"-O2\"\n+\tset DEFAULT_DFLAGS \"-g -O2 -frelease\"\n+\t#set DEFAULT_DFLAGS \"-O2\"\n     }\n \n     # These are special options to use on testcase, and override DEFAULT_DFLAGS\n@@ -373,65 +373,65 @@ proc gdc-do-test { } {\n     # set dg-final-code \"\"\n     # Find all tests and pass to routine.\n     foreach test [lsort [find $srcdir/$subdir *]] {\n-        regexp -- \"(.*)/(.+)/(.+)\\.(.+)$\" $test match base dir name ext\n-\n-        # Skip invalid test directory\n-        if { [lsearch \"runnable compilable fail_compilation\" $dir] == -1 } {\n-            continue\n-        }\n-\n-        # Skip invalid test extensions\n-        if { [lsearch \"d\" $ext] == -1 } {\n-            continue\n-        }\n-\n-        # Convert to DG test.\n-        set imports [format \"-I%s/%s\" $base $dir]\n-        # Include $subdir prefix so test names follow DejaGnu conventions.\n-        set filename \"$subdir/[dmd2dg $base $dir/$name.$ext]\"\n-\n-        if { $dir == \"runnable\" } {\n-            append PERMUTE_ARGS \" $SHARED_OPTION\"\n-        }\n-        set options [gdc-permute-options $PERMUTE_ARGS]\n-\n-        switch $dir {\n-            runnable {\n-                for { set i 0 } { $i<[llength $options] } { incr i } {\n-                    set flags [lindex $options $i]\n-                    if [isnative] {\n-                        set dg-do-what-default \"run\"\n-                    } else {\n-                        set dg-do-what-default \"link\"\n-                    }\n-                    gdc-dg-runtest $filename $flags $imports\n-                }\n-            }\n-\n-            compilable {\n-                for { set i 0 } { $i<[llength $options] } { incr i } {\n-                    set flags [lindex $options $i]\n-                    # Compilable test may require checking another kind of output file.\n-                    if [regexp -- \"ddoc.*\" $name] {\n-                        set dg-do-what-default \"compile\"\n-                    } else {\n-                        set dg-do-what-default \"assemble\"\n-                    }\n-                    gdc-dg-runtest $filename $flags $imports\n-                }\n-            }\n-\n-            fail_compilation {\n-                for { set i 0 } { $i<[llength $options] } { incr i } {\n-                    set flags [lindex $options $i]\n-                    set dg-do-what-default \"assemble\"\n-                    gdc-dg-runtest $filename $flags $imports\n-                }\n-            }\n-        }\n-\n-        # Cleanup\n-        file delete $filename\n+\tregexp -- \"(.*)/(.+)/(.+)\\.(.+)$\" $test match base dir name ext\n+\n+\t# Skip invalid test directory\n+\tif { [lsearch \"runnable compilable fail_compilation\" $dir] == -1 } {\n+\t    continue\n+\t}\n+\n+\t# Skip invalid test extensions\n+\tif { [lsearch \"d\" $ext] == -1 } {\n+\t    continue\n+\t}\n+\n+\t# Convert to DG test.\n+\tset imports [format \"-I%s/%s\" $base $dir]\n+\t# Include $subdir prefix so test names follow DejaGnu conventions.\n+\tset filename \"$subdir/[dmd2dg $base $dir/$name.$ext]\"\n+\n+\tif { $dir == \"runnable\" } {\n+\t    append PERMUTE_ARGS \" $SHARED_OPTION\"\n+\t}\n+\tset options [gdc-permute-options $PERMUTE_ARGS]\n+\n+\tswitch $dir {\n+\t    runnable {\n+\t\tfor { set i 0 } { $i<[llength $options] } { incr i } {\n+\t\t    set flags [lindex $options $i]\n+\t\t    if [isnative] {\n+\t\t\tset dg-do-what-default \"run\"\n+\t\t    } else {\n+\t\t\tset dg-do-what-default \"link\"\n+\t\t    }\n+\t\t    gdc-dg-runtest $filename $flags $imports\n+\t\t}\n+\t    }\n+\n+\t    compilable {\n+\t\tfor { set i 0 } { $i<[llength $options] } { incr i } {\n+\t\t    set flags [lindex $options $i]\n+\t\t    # Compilable test may require checking another kind of output file.\n+\t\t    if [regexp -- \"ddoc.*\" $name] {\n+\t\t\tset dg-do-what-default \"compile\"\n+\t\t    } else {\n+\t\t\tset dg-do-what-default \"assemble\"\n+\t\t    }\n+\t\t    gdc-dg-runtest $filename $flags $imports\n+\t\t}\n+\t    }\n+\n+\t    fail_compilation {\n+\t\tfor { set i 0 } { $i<[llength $options] } { incr i } {\n+\t\t    set flags [lindex $options $i]\n+\t\t    set dg-do-what-default \"assemble\"\n+\t\t    gdc-dg-runtest $filename $flags $imports\n+\t\t}\n+\t    }\n+\t}\n+\n+\t# Cleanup\n+\tfile delete $filename\n     }\n \n     set allow_blank_lines $save_allow_blank_lines"}, {"sha": "d33085fbd3959e3e016601eb3aa535dcb98e6172", "filename": "gcc/testsuite/lib/gdc-dg.exp", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2Flib%2Fgdc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2Flib%2Fgdc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgdc-dg.exp?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -37,7 +37,7 @@ proc gdc-dg-test { prog do_what extra_tool_flags } {\n     set prog [dg-trim-dirname gdc.test $prog]\n \n     set result \\\n-        [gcc-dg-test-1 gdc_target_compile $prog $do_what $extra_tool_flags]\n+\t[gcc-dg-test-1 gdc_target_compile $prog $do_what $extra_tool_flags]\n \n     set comp_output [lindex $result 0]\n     set output_file [lindex $result 1]\n@@ -60,26 +60,26 @@ proc gdc-dg-runtest { testcases flags default-extra-flags } {\n     global runtests\n \n     foreach test $testcases {\n-        # If we're only testing specific files and this isn't one of\n-        # them, skip it.\n-        if ![runtest_file_p $runtests $test] {\n-            continue\n-        }\n-\n-        # Use TORTURE_OPTIONS to cycle through an option list.\n-        if [torture-options-exist] then {\n-            global torture_with_loops\n-            set option_list $torture_with_loops\n-        } else {\n-            set option_list { \"\" }\n-        }\n-\n-        set nshort [file tail [file dirname $test]]/[file tail $test]\n-\n-        foreach flags_t $option_list {\n-            verbose \"Testing $nshort, $flags $flags_t\" 1\n-            dg-test $test \"$flags $flags_t\" ${default-extra-flags}\n-        }\n+\t# If we're only testing specific files and this isn't one of\n+\t# them, skip it.\n+\tif ![runtest_file_p $runtests $test] {\n+\t    continue\n+\t}\n+\n+\t# Use TORTURE_OPTIONS to cycle through an option list.\n+\tif [torture-options-exist] then {\n+\t    global torture_with_loops\n+\t    set option_list $torture_with_loops\n+\t} else {\n+\t    set option_list { \"\" }\n+\t}\n+\n+\tset nshort [file tail [file dirname $test]]/[file tail $test]\n+\n+\tforeach flags_t $option_list {\n+\t    verbose \"Testing $nshort, $flags $flags_t\" 1\n+\t    dg-test $test \"$flags $flags_t\" ${default-extra-flags}\n+\t}\n     }\n }\n \n@@ -93,13 +93,13 @@ if { [info procs gdc_load] != [list] \\\n     rename gdc_load prev_gdc_load\n \n     proc gdc_load { program args } {\n-        global GDC_EXECUTE_ARGS\n-        if [info exists GDC_EXECUTE_ARGS] then {\n-            set args [concat \"{$GDC_EXECUTE_ARGS}\"]\n-        }\n-        #print \"Running: $program [lindex $args 0]\"\n-        set result [eval [list prev_gdc_load $program] $args ]\n-        return $result\n+\tglobal GDC_EXECUTE_ARGS\n+\tif [info exists GDC_EXECUTE_ARGS] then {\n+\t    set args [concat \"{$GDC_EXECUTE_ARGS}\"]\n+\t}\n+\t#print \"Running: $program [lindex $args 0]\"\n+\tset result [eval [list prev_gdc_load $program] $args ]\n+\treturn $result\n     }\n }\n "}, {"sha": "59aec674be68284dcb3f30f97abdd35daf99a2e2", "filename": "gcc/testsuite/lib/gdc.exp", "status": "modified", "additions": 102, "deletions": 102, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2Flib%2Fgdc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/gcc%2Ftestsuite%2Flib%2Fgdc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgdc.exp?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -44,22 +44,22 @@ proc gdc_version { } {\n \n     # verify that the compiler exists\n     if { [is_remote host] || [which $compiler] != 0 } then {\n-        set tmp [remote_exec host \"$compiler -v\"]\n-        set status [lindex $tmp 0]\n-        set output [lindex $tmp 1]\n-        regexp \" version \\[^\\n\\r\\]*\" $output version\n-        if { $status == 0 && [info exists version] } then {\n-            if [is_remote host] {\n-                clone_output \"$compiler $version\\n\"\n-            } else {\n-                clone_output \"[which $compiler] $version\\n\"\n-            }\n-        } else {\n-            clone_output \"Couldn't determine version of [which $compiler]\\n\"\n-        }\n+\tset tmp [remote_exec host \"$compiler -v\"]\n+\tset status [lindex $tmp 0]\n+\tset output [lindex $tmp 1]\n+\tregexp \" version \\[^\\n\\r\\]*\" $output version\n+\tif { $status == 0 && [info exists version] } then {\n+\t    if [is_remote host] {\n+\t\tclone_output \"$compiler $version\\n\"\n+\t    } else {\n+\t\tclone_output \"[which $compiler] $version\\n\"\n+\t    }\n+\t} else {\n+\t    clone_output \"Couldn't determine version of [which $compiler]\\n\"\n+\t}\n     } else {\n-        # compiler does not exist (this should have already been detected)\n-        warning \"$compiler does not exist\"\n+\t# compiler does not exist (this should have already been detected)\n+\twarning \"$compiler does not exist\"\n     }\n }\n \n@@ -74,26 +74,26 @@ proc gdc_include_flags { paths } {\n     set flags \"\"\n \n     if { [is_remote host] || ![info exists TESTING_IN_BUILD_TREE] } {\n-        return \"${flags}\"\n+\treturn \"${flags}\"\n     }\n \n     set gccpath ${paths}\n     set target [file tail [file normalize ${paths}]]\n \n     if { $gccpath != \"\" } {\n-        if [file exists \"${gccpath}/libphobos/libdruntime\"] {\n-            append flags \"-I${gccpath}/libphobos/libdruntime \"\n-        }\n+\tif [file exists \"${gccpath}/libphobos/libdruntime\"] {\n+\t    append flags \"-I${gccpath}/libphobos/libdruntime \"\n+\t}\n     }\n     append flags \"-I${srcdir}/../../libphobos/libdruntime \"\n     append flags \"-I${srcdir}/../../libphobos/src \"\n \n     # For the tests that mix C++ and D, we should try and handle this better.\n     if { $gccpath != \"\" } {\n-        if [file exists \"${gccpath}/libstdc++-v3/include\"] {\n-            append flags \"-I${gccpath}/libstdc++-v3/include \"\n-            append flags \"-I${gccpath}/libstdc++-v3/include/$target \"\n-        }\n+\tif [file exists \"${gccpath}/libstdc++-v3/include\"] {\n+\t    append flags \"-I${gccpath}/libstdc++-v3/include \"\n+\t    append flags \"-I${gccpath}/libstdc++-v3/include/$target \"\n+\t}\n     }\n     append flags \"-I${srcdir}/../../libstdc++-v3/libsupc++\"\n }\n@@ -118,60 +118,60 @@ proc gdc_link_flags { paths } {\n     verbose \"shared lib extension: $shlib_ext\"\n \n     if { $gccpath != \"\" } {\n-        # Path to libgphobos.spec.\n-        append flags \"-B${gccpath}/libphobos/src \"\n-        # Path to drtbegin.o/drtend.o.\n-        if { [file exists \"${gccpath}/libphobos/libdruntime/gcc/drtbegin.o\"] } {\n-            append flags \"-B${gccpath}/libphobos/libdruntime/gcc \"\n-        }\n-\n-        if { [file exists \"${gccpath}/libphobos/src/.libs/libgphobos.a\"] \\\n-             || [file exists \"${gccpath}/libphobos/src/.libs/libgphobos.${shlib_ext}\"] } {\n-            append flags \"-L${gccpath}/libphobos/src/.libs \"\n-            append ld_library_path \":${gccpath}/libphobos/src/.libs\"\n-        }\n-        if { [file exists \"${gccpath}/libphobos/libdruntime/.libs/libgdruntime.a\"] \\\n-             || [file exists \"${gccpath}/libphobos/libdruntime/.libs/libgdruntime.${shlib_ext}\"] } {\n-            append flags \"-L${gccpath}/libphobos/libdruntime/.libs \"\n-            append ld_library_path \":${gccpath}/libphobos/libdruntime/.libs\"\n-        }\n-        # Static linking is default. If only the shared lib is available adjust\n-        # flags to always use it. If both are available, set SHARED_OPTION which\n-        # will be added to PERMUTE_ARGS\n-        if { [file exists \"${gccpath}/libphobos/libdruntime/.libs/libgdruntime.${shlib_ext}\"] } {\n-            if { [file exists \"${gccpath}/libphobos/libdruntime/.libs/libgdruntime.a\"] } {\n-                set SHARED_OPTION \"-shared-libphobos\"\n-            } else {\n-                append flags \"-shared-libphobos \"\n-            }\n-        }\n-        if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n-            append flags \"-L${gccpath}/libiberty \"\n-        }\n-        # For the tests that mix C++ and D, we should try and handle this better.\n-        if { [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] \\\n-             || [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.${shlib_ext}\"] } {\n-            append flags \"-L${gccpath}/libstdc++-v3/src/.libs \"\n-            append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n-        }\n-        append ld_library_path [gcc-set-multilib-library-path $GDC_UNDER_TEST]\n+\t# Path to libgphobos.spec.\n+\tappend flags \"-B${gccpath}/libphobos/src \"\n+\t# Path to drtbegin.o/drtend.o.\n+\tif { [file exists \"${gccpath}/libphobos/libdruntime/gcc/drtbegin.o\"] } {\n+\t    append flags \"-B${gccpath}/libphobos/libdruntime/gcc \"\n+\t}\n+\n+\tif { [file exists \"${gccpath}/libphobos/src/.libs/libgphobos.a\"] \\\n+\t     || [file exists \"${gccpath}/libphobos/src/.libs/libgphobos.${shlib_ext}\"] } {\n+\t    append flags \"-L${gccpath}/libphobos/src/.libs \"\n+\t    append ld_library_path \":${gccpath}/libphobos/src/.libs\"\n+\t}\n+\tif { [file exists \"${gccpath}/libphobos/libdruntime/.libs/libgdruntime.a\"] \\\n+\t     || [file exists \"${gccpath}/libphobos/libdruntime/.libs/libgdruntime.${shlib_ext}\"] } {\n+\t    append flags \"-L${gccpath}/libphobos/libdruntime/.libs \"\n+\t    append ld_library_path \":${gccpath}/libphobos/libdruntime/.libs\"\n+\t}\n+\t# Static linking is default. If only the shared lib is available adjust\n+\t# flags to always use it. If both are available, set SHARED_OPTION which\n+\t# will be added to PERMUTE_ARGS\n+\tif { [file exists \"${gccpath}/libphobos/libdruntime/.libs/libgdruntime.${shlib_ext}\"] } {\n+\t    if { [file exists \"${gccpath}/libphobos/libdruntime/.libs/libgdruntime.a\"] } {\n+\t\tset SHARED_OPTION \"-shared-libphobos\"\n+\t    } else {\n+\t\tappend flags \"-shared-libphobos \"\n+\t    }\n+\t}\n+\tif [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n+\t    append flags \"-L${gccpath}/libiberty \"\n+\t}\n+\t# For the tests that mix C++ and D, we should try and handle this better.\n+\tif { [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] \\\n+\t     || [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.${shlib_ext}\"] } {\n+\t    append flags \"-L${gccpath}/libstdc++-v3/src/.libs \"\n+\t    append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n+\t}\n+\tappend ld_library_path [gcc-set-multilib-library-path $GDC_UNDER_TEST]\n     } else {\n-        global tool_root_dir\n-\n-        set libphobos [lookfor_file ${tool_root_dir} libgphobos]\n-        if { $libphobos != \"\" } {\n-            append flags \"-B${libphobos} -L${libphobos} \"\n-            append ld_library_path \":${libphobos}\"\n-        }\n-        set libdruntime [lookfor_file ${tool_root_dir} libgdruntime]\n-        if { $libdruntime != \"\" } {\n-            append flags \"-L${libdruntime} \"\n-            append ld_library_path \":${libdruntime}\"\n-        }\n-        set libiberty [lookfor_file ${tool_root_dir} libiberty]\n-        if { $libiberty != \"\" } {\n-            append flags \"-L${libiberty} \"\n-        }\n+\tglobal tool_root_dir\n+\n+\tset libphobos [lookfor_file ${tool_root_dir} libgphobos]\n+\tif { $libphobos != \"\" } {\n+\t    append flags \"-B${libphobos} -L${libphobos} \"\n+\t    append ld_library_path \":${libphobos}\"\n+\t}\n+\tset libdruntime [lookfor_file ${tool_root_dir} libgdruntime]\n+\tif { $libdruntime != \"\" } {\n+\t    append flags \"-L${libdruntime} \"\n+\t    append ld_library_path \":${libdruntime}\"\n+\t}\n+\tset libiberty [lookfor_file ${tool_root_dir} libiberty]\n+\tif { $libiberty != \"\" } {\n+\t    append flags \"-L${libiberty} \"\n+\t}\n     }\n \n     set_ld_library_path_env_vars\n@@ -204,29 +204,29 @@ proc gdc_init { args } {\n     setenv LANG C\n \n     if ![info exists GDC_UNDER_TEST] then {\n-        if [info exists TOOL_EXECUTABLE] {\n-            set GDC_UNDER_TEST $TOOL_EXECUTABLE\n-        } else {\n-            if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {\n-                set GDC_UNDER_TEST [transform gdc]\n-            } else {\n-                set GDC_UNDER_TEST [findfile $base_dir/../../gdc \"$base_dir/../../gdc -B$base_dir/../../\" [findfile $base_dir/gdc \"$base_dir/gdc -B$base_dir/\" [transform gdc]]]\n-            }\n-        }\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set GDC_UNDER_TEST $TOOL_EXECUTABLE\n+\t} else {\n+\t    if { [is_remote host] || ! [info exists TESTING_IN_BUILD_TREE] } {\n+\t\tset GDC_UNDER_TEST [transform gdc]\n+\t    } else {\n+\t\tset GDC_UNDER_TEST [findfile $base_dir/../../gdc \"$base_dir/../../gdc -B$base_dir/../../\" [findfile $base_dir/gdc \"$base_dir/gdc -B$base_dir/\" [transform gdc]]]\n+\t    }\n+\t}\n     }\n \n     if ![is_remote host] {\n-        if { [which $GDC_UNDER_TEST] == 0 } then {\n-            perror \"GDC_UNDER_TEST ($GDC_UNDER_TEST) does not exist\"\n-            exit 1\n-        }\n+\tif { [which $GDC_UNDER_TEST] == 0 } then {\n+\t    perror \"GDC_UNDER_TEST ($GDC_UNDER_TEST) does not exist\"\n+\t    exit 1\n+\t}\n     }\n     if ![info exists tmpdir] {\n-        set tmpdir \"/tmp\"\n+\tset tmpdir \"/tmp\"\n     }\n \n     if [info exists gluefile] {\n-        unset gluefile\n+\tunset gluefile\n     }\n \n     gdc_maybe_build_wrapper \"${tmpdir}/d-testglue.o\"\n@@ -237,21 +237,21 @@ proc gdc_init { args } {\n     # compilation.  They are passed first to allow individual\n     # tests to override them.\n     if [info exists TEST_ALWAYS_FLAGS] {\n-        lappend ALWAYS_DFLAGS \"additional_flags=$TEST_ALWAYS_FLAGS\"\n+\tlappend ALWAYS_DFLAGS \"additional_flags=$TEST_ALWAYS_FLAGS\"\n     }\n \n     if ![is_remote host] {\n-        if [info exists TOOL_OPTIONS] {\n-            lappend ALWAYS_DFLAGS \"additional_flags=[gdc_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n-            lappend ALWAYS_DFLAGS \"ldflags=[gdc_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n-        } else {\n-            lappend ALWAYS_DFLAGS \"additional_flags=[gdc_include_flags [get_multilibs] ]\"\n-            lappend ALWAYS_DFLAGS \"ldflags=[gdc_link_flags [get_multilibs] ]\"\n-        }\n+\tif [info exists TOOL_OPTIONS] {\n+\t    lappend ALWAYS_DFLAGS \"additional_flags=[gdc_include_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n+\t    lappend ALWAYS_DFLAGS \"ldflags=[gdc_link_flags [get_multilibs ${TOOL_OPTIONS}] ]\"\n+\t} else {\n+\t    lappend ALWAYS_DFLAGS \"additional_flags=[gdc_include_flags [get_multilibs] ]\"\n+\t    lappend ALWAYS_DFLAGS \"ldflags=[gdc_link_flags [get_multilibs] ]\"\n+\t}\n     }\n \n     if [info exists TOOL_OPTIONS] {\n-        lappend ALWAYS_DFLAGS \"additional_flags=$TOOL_OPTIONS\"\n+\tlappend ALWAYS_DFLAGS \"additional_flags=$TOOL_OPTIONS\"\n     }\n \n     verbose -log \"ALWAYS_DFLAGS set to $ALWAYS_DFLAGS\"\n@@ -273,8 +273,8 @@ proc gdc_target_compile { source dest type options } {\n     global GDC_UNDER_TEST\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n-        lappend options \"libs=${gluefile}\"\n-        lappend options \"ldflags=${wrap_flags}\"\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n     }\n \n     lappend options \"timeout=[timeout_value]\""}, {"sha": "c2bfe5034b35d0185fc616777343540b4a19fdae", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -1,3 +1,11 @@\n+2019-02-18  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* testsuite/lib/libphobos-dg.exp: Tabify.\n+\t* testsuite/lib/libphobos.exp: Likewise.\n+\t* testsuite/libphobos.cycles/cycles.exp: Likewise.\n+\t* testsuite/libphobos.shared/shared.exp: Likewise.\n+\t* testsuite/libphobos.unittests/unittests.exp: Likewise.\n+\n 2019-02-14  Maya Rashish  <coypu@sdf.org>\n \n \t* configure.tgt: Add netbsd/x86 as supported target."}, {"sha": "5f33e4de7100338ecb17a96b777b3acb3275ba91", "filename": "libphobos/testsuite/lib/libphobos-dg.exp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2Ftestsuite%2Flib%2Flibphobos-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2Ftestsuite%2Flib%2Flibphobos-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flib%2Flibphobos-dg.exp?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -42,11 +42,11 @@ if { [info procs libphobos_load] != [list] \\\n     rename libphobos_load prev_libphobos_load\n \n     proc libphobos_load { program args } {\n-        global libphobos_run_args\n-        if { $libphobos_run_args != \"\" } {\n-            set args [concat \"{$libphobos_run_args}\"]\n-        }\n-        set result [eval [list prev_libphobos_load $program] $args ]\n-        return $result\n+\tglobal libphobos_run_args\n+\tif { $libphobos_run_args != \"\" } {\n+\t    set args [concat \"{$libphobos_run_args}\"]\n+\t}\n+\tset result [eval [list prev_libphobos_load $program] $args ]\n+\treturn $result\n     }\n }"}, {"sha": "1944c7d546c8073601f11ff847f5e34fbf8e41fd", "filename": "libphobos/testsuite/lib/libphobos.exp", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2Ftestsuite%2Flib%2Flibphobos.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2Ftestsuite%2Flib%2Flibphobos.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flib%2Flibphobos.exp?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -48,30 +48,30 @@ proc libphobos-dg-test { prog do_what extra_tool_flags } {\n \n     # Set up the compiler flags, based on what we're going to do.\n     switch $do_what {\n-        \"run\" {\n-            set compile_type \"executable\"\n-            # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n-            # Should this be handled elsewhere?\n-            # YES.\n-            set output_file \"./[file rootname [file tail $prog]].exe\"\n-            # This is the only place where we care if an executable was\n-            # created or not.  If it was, dg.exp will try to run it.\n-            catch { remote_file build delete $output_file }\n-        }\n-        \"link\" {\n-            set compile_type \"executable\"\n-            set output_file \"./[file rootname [file tail $prog]].exe\"\n-        }\n-        default {\n-            perror \"$do_what: not a valid dg-do keyword\"\n-            return \"\"\n-        }\n+\t\"run\" {\n+\t    set compile_type \"executable\"\n+\t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n+\t    # Should this be handled elsewhere?\n+\t    # YES.\n+\t    set output_file \"./[file rootname [file tail $prog]].exe\"\n+\t    # This is the only place where we care if an executable was\n+\t    # created or not.  If it was, dg.exp will try to run it.\n+\t    catch { remote_file build delete $output_file }\n+\t}\n+\t\"link\" {\n+\t    set compile_type \"executable\"\n+\t    set output_file \"./[file rootname [file tail $prog]].exe\"\n+\t}\n+\tdefault {\n+\t    perror \"$do_what: not a valid dg-do keyword\"\n+\t    return \"\"\n+\t}\n     }\n \n     set select_compile \"libphobos_target_compile\"\n     set options \"\"\n     if { $extra_tool_flags != \"\" } {\n-        lappend options \"additional_flags=$extra_tool_flags\"\n+\tlappend options \"additional_flags=$extra_tool_flags\"\n     }\n \n     set comp_output [$select_compile \"$prog\" \"$output_file\" \"$compile_type\" $options]\n@@ -95,15 +95,15 @@ proc libphobos_init { args } {\n \n     # If a testcase doesn't have special options, use these.\n     if ![info exists DEFAULT_DFLAGS] then {\n-        set DEFAULT_DFLAGS \"\"\n+\tset DEFAULT_DFLAGS \"\"\n     }\n \n     # By default, we assume we want to run program images.\n     global dg-do-what-default\n     if [isnative] {\n-        set dg-do-what-default \"run\"\n+\tset dg-do-what-default \"run\"\n     } else {\n-        set dg-do-what-default \"link\"\n+\tset dg-do-what-default \"link\"\n     }\n \n     # What arguments to pass to run program images.\n@@ -121,32 +121,32 @@ proc libphobos_init { args } {\n     set gdcldflags \"\"\n \n     if { [file exists $flags_file] } {\n-        set gdc [exec sh $flags_file --gdc]\n-        set gdcflags [exec sh $flags_file --gdcflags]\n-        set gdcpaths [exec sh $flags_file --gdcpaths]\n-        set gdcldflags [exec sh $flags_file --gdcldflags]\n+\tset gdc [exec sh $flags_file --gdc]\n+\tset gdcflags [exec sh $flags_file --gdcflags]\n+\tset gdcpaths [exec sh $flags_file --gdcpaths]\n+\tset gdcldflags [exec sh $flags_file --gdcldflags]\n     }\n \n     set exeext \"\"\n     if [info exists env(EXEEXT)] {\n-        set exeext $env(EXEEXT)\n+\tset exeext $env(EXEEXT)\n     }\n \n     # Compute what needs to be added to the existing LD_LIBRARY_PATH.\n     set ld_library_path \"\"\n \n     set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n     if {$gccdir != \"\"} {\n-        set gccdir [file dirname $gccdir]\n-        append ld_library_path \":${gccdir}\"\n+\tset gccdir [file dirname $gccdir]\n+\tappend ld_library_path \":${gccdir}\"\n     }\n \n     if { [file exists \"${blddir}/libdruntime/.libs/libgdruntime.${shlib_ext}\"] } {\n-        append ld_library_path \":${blddir}/libdruntime/.libs\"\n+\tappend ld_library_path \":${blddir}/libdruntime/.libs\"\n     }\n \n     if { [file exists \"${blddir}/src/.libs/libgphobos.${shlib_ext}\"] } {\n-        append ld_library_path \":${blddir}/src/.libs\"\n+\tappend ld_library_path \":${blddir}/src/.libs\"\n     }\n \n     set_ld_library_path_env_vars\n@@ -166,21 +166,21 @@ proc libphobos_target_compile { source dest type options } {\n     lappend options \"additional_flags=-fno-diagnostics-show-caret -fdiagnostics-color=never\"\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n-        lappend options \"libs=${gluefile}\"\n-        lappend options \"ldflags=${wrap_flags}\"\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n     }\n \n     # Flag setting based on type argument.\n     if { $type == \"executable\" } {\n-        # Link the support objects into executables.\n-        lappend options \"additional_flags=$gdcldflags\"\n+\t# Link the support objects into executables.\n+\tlappend options \"additional_flags=$gdcldflags\"\n     }\n \n     # Set the compiler, only add D flags and paths if building D sources.\n     set gdc_final $gdc\n     if [regexp \".*\\.d\\$\" $source] {\n-        set gdc_final [concat $gdc_final $gdcflags]\n-        set gdc_final [concat $gdc_final $gdcpaths]\n+\tset gdc_final [concat $gdc_final $gdcflags]\n+\tset gdc_final [concat $gdc_final $gdcpaths]\n     }\n \n     lappend options \"compiler=$gdc_final\""}, {"sha": "5ea2fe4879e08df20a52eb35ce2e8c657d161f29", "filename": "libphobos/testsuite/libphobos.cycles/cycles.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2Ftestsuite%2Flibphobos.cycles%2Fcycles.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2Ftestsuite%2Flibphobos.cycles%2Fcycles.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.cycles%2Fcycles.exp?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -20,7 +20,7 @@ set dg-output-text [list]\n \n # Arguments to pass to the test program, expected output, and return code.\n set cycle_test_list [list \\\n-    { ignore \"\"  0 } \\\n+    { ignore \"\"\t 0 } \\\n     { abort \"object.Error@.*: Cyclic dependency between module mod. and mod.\" 1 } \\\n     { print \"Cyclic dependency between module mod. and mod.\" 0 } \\\n     { deprecate \"Deprecation 16211 warning:\" 0 } \\\n@@ -41,8 +41,8 @@ foreach cycle_test $cycle_test_list {\n     set expected_fail [lindex $cycle_test 2]\n \n     foreach test $tests {\n-        set shouldfail $expected_fail\n-        dg-test $test \"\" $DEFAULT_DFLAGS\n+\tset shouldfail $expected_fail\n+\tdg-test $test \"\" $DEFAULT_DFLAGS\n     }\n \n     set shouldfail 0"}, {"sha": "7765634090ce87f77c9368e519d0ad7834b2acb9", "filename": "libphobos/testsuite/libphobos.shared/shared.exp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2Ftestsuite%2Flibphobos.shared%2Fshared.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2Ftestsuite%2Flibphobos.shared%2Fshared.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.shared%2Fshared.exp?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -39,9 +39,9 @@ proc shared_library { source destfile options } {\n \n     set comp_output [libphobos_target_compile \"$source\" \"$destfile\" \"executable\" $options]\n     if ![ string match \"\" $comp_output ] {\n-        fail \"libphobos.shared/[file tail $source]\"\n-        verbose -log $comp_output\n-        return 1\n+\tfail \"libphobos.shared/[file tail $source]\"\n+\tverbose -log $comp_output\n+\treturn 1\n     }\n \n     lappend all_libraries $destfile\n@@ -52,7 +52,7 @@ shared_library \"$srcdir/$subdir/lib.d\" \"lib.so\" \"\"\n \n # liblinkdep.so\n shared_library \"$srcdir/$subdir/liblinkdep.d\" \"liblinkdep.so\" \\\n-        [list \"additional_flags=-I$srcdir/$subdir lib.so\"]\n+\t[list \"additional_flags=-I$srcdir/$subdir lib.so\"]\n \n # libloaddep.so\n shared_library \"$srcdir/$subdir/libloaddep.d\" \"libloaddep.so\" \"\"\n@@ -69,14 +69,14 @@ dg-init\n \n # Main loop.\n dg-test \"$srcdir/$subdir/link.d\" \"-I$srcdir/$subdir lib.so -shared-libphobos\" \\\n-        \"$DEFAULT_DFLAGS\"\n+\t\"$DEFAULT_DFLAGS\"\n \n dg-test \"$srcdir/$subdir/link_linkdep.d\" \\\n-        \"-I$srcdir/$subdir liblinkdep.so lib.so -shared-libphobos\" \\\n-        \"$DEFAULT_DFLAGS\"\n+\t\"-I$srcdir/$subdir liblinkdep.so lib.so -shared-libphobos\" \\\n+\t\"$DEFAULT_DFLAGS\"\n \n dg-test \"$srcdir/$subdir/link_loaddep.d\" \\\n-        \"-I$srcdir/$subdir libloaddep.so -shared-libphobos\" \"$DEFAULT_DFLAGS\"\n+\t\"-I$srcdir/$subdir libloaddep.so -shared-libphobos\" \"$DEFAULT_DFLAGS\"\n \n # dlopen() tests.\n if [is-effective-target dlopen] {"}, {"sha": "b734a9b98d8b688a2a8e45559179ed2ecb4b58cc", "filename": "libphobos/testsuite/libphobos.unittests/unittests.exp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2Ftestsuite%2Flibphobos.unittests%2Funittests.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc2cc3bef3510b8ed9c485292f1dc4de607eba84/libphobos%2Ftestsuite%2Flibphobos.unittests%2Funittests.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.unittests%2Funittests.exp?ref=cc2cc3bef3510b8ed9c485292f1dc4de607eba84", "patch": "@@ -29,15 +29,15 @@ proc unittest_list_modules { prog } {\n # Runs all unittests for each module compiled into the test program.\n proc unittest_run_tests { name prog } {\n     foreach module [unittest_list_modules $prog] {\n-        set result [libphobos_load \"$prog\" \"$module\" \"\"]\n-        set status [lindex $result 0]\n-        $status \"libphobos.unittests/$name/$module\"\n+\tset result [libphobos_load \"$prog\" \"$module\" \"\"]\n+\tset status [lindex $result 0]\n+\t$status \"libphobos.unittests/$name/$module\"\n     }\n }\n \n proc unittester { name prog } {\n     if [file exists $prog] {\n-        unittest_run_tests $name $prog\n+\tunittest_run_tests $name $prog\n     }\n }\n "}]}