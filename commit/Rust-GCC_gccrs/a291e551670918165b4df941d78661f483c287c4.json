{"sha": "a291e551670918165b4df941d78661f483c287c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5MWU1NTE2NzA5MTgxNjViNGRmOTQxZDc4NjYxZjQ4M2MyODdjNA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-08-06T23:23:20Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1992-08-06T23:23:20Z"}, "message": "(ASM_FILE_START): If profiling IMPORT \"_mcount\" instead of\n\"__gcc_mcount\".\n\n(TARGET_SWITCHES): New switch \"no-bss\" which forces gcc not\nuse make use of the bss subspace.  (For compatability with old\nbuggy versions of gas.)\n(ASM_FILE_START): Add $BSS$ subspace.\n(BSS_SECTION_ASM_OP): New macro which tells the assembler to\nswitch to the bss subspace.\n(EXTRA_SECTIONS): Define in_bss as an extra section.\n(EXTRA_SECTION_FUNCTIONS): Define \"bss_section\" function to switch\ninto the bss subspace.\n(ASM_OUTPUT_COMMON): If !TARGET_NO_BSS, then place commons into\nthe bss subspace.\n(ASM_OUTPUT_LOCAL): Likewise.\n\nFrom-SVN: r1775", "tree": {"sha": "73714e2a9b2fc0461e72b75443bbdc36efd6ad28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73714e2a9b2fc0461e72b75443bbdc36efd6ad28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a291e551670918165b4df941d78661f483c287c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a291e551670918165b4df941d78661f483c287c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a291e551670918165b4df941d78661f483c287c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a291e551670918165b4df941d78661f483c287c4/comments", "author": null, "committer": null, "parents": [{"sha": "17e1dfa27c9434162c63d83bffbd70b627897282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e1dfa27c9434162c63d83bffbd70b627897282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17e1dfa27c9434162c63d83bffbd70b627897282"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "8bd8994f0798e57d56d14bc0ad7f15a2b82f19b6", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a291e551670918165b4df941d78661f483c287c4/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a291e551670918165b4df941d78661f483c287c4/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=a291e551670918165b4df941d78661f483c287c4", "patch": "@@ -86,6 +86,11 @@ extern int target_flags;\n \n #define TARGET_SNAKE (target_flags & 1)\n \n+/* Force gcc not to use the bss segment.  This is (temporarily) provided \n+   for sites which are using pa-gas-1.36 versions prior to Aug 7, 1992.  */\n+\n+#define TARGET_NO_BSS (target_flags & 2)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -94,6 +99,7 @@ extern int target_flags;\n \n #define TARGET_SWITCHES \\\n   {{\"snake\", 1},\t\\\n+   {\"no-bss\", 2},\t\\\n    { \"\", TARGET_DEFAULT}}\n \n #define TARGET_DEFAULT 0\n@@ -1362,13 +1368,14 @@ while (0)\n #define ASM_FILE_START(FILE) \\\n do { fprintf (FILE, \"\\t.SPACE $PRIVATE$\\n\\\n \\t.SUBSPA $DATA$,QUAD=1,ALIGN=8,ACCESS=31\\n\\\n+\\t.SUBSPA $BSS$,QUAD=1,ALIGN=8,ACCESS=31,ZERO,SORT=82\\n\\\n \\t.SPACE $TEXT$\\n\\\n \\t.SUBSPA $LIT$,QUAD=0,ALIGN=8,ACCESS=44\\n\\\n \\t.SUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\\n\\\n \\t.IMPORT $global$,DATA\\n\\\n \\t.IMPORT $$dyncall,MILLICODE\\n\");\\\n      if (profile_flag)\\\n-       fprintf (FILE, \"\\t.IMPORT __gcc_mcount, CODE\\n\");\\\n+       fprintf (FILE, \"\\t.IMPORT _mcount, CODE\\n\");\\\n    } while (0)\n \n /* Output to assembler file text saying following lines\n@@ -1394,6 +1401,26 @@ do { fprintf (FILE, \"\\t.SPACE $PRIVATE$\\n\\\n /* Supposedly the assembler rejects the command if there is no tab!  */\n #define DATA_SECTION_ASM_OP \"\\t.SPACE $PRIVATE$\\n\\t.SUBSPA $DATA$\\n\"\n \n+/* Output before uninitialized data.  */\n+\n+#define BSS_SECTION_ASM_OP \"\\t.SPACE $PRIVATE$\\n\\t.SUBSPA $BSS$\\n\"\n+\n+/* Define the .bss section for ASM_OUTPUT_LOCAL to use. */\n+\n+#define EXTRA_SECTIONS in_bss\n+\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+bss_section ()\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_bss)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", BSS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_bss;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+\n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n \n@@ -1563,8 +1590,11 @@ do { fprintf (FILE, \"\\t.SPACE $PRIVATE$\\n\\\n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n+/* Supposedly the assembler rejects the command if there is no tab!  */\n+\n+\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n-( data_section (),\t\t\t\t\t\\\n+( (TARGET_NO_BSS) ? data_section (): bss_section (),\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n   fputs (\"\\t.comm \", (FILE)),\t\t\t\t\\\n   fprintf ((FILE), \"%d\\n\", (ROUNDED)))\n@@ -1573,10 +1603,11 @@ do { fprintf (FILE, \"\\t.SPACE $PRIVATE$\\n\\\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n-( data_section (),\t\t\t\t\t\\\n+( (TARGET_NO_BSS) ? data_section (): bss_section (),\t\\\n   fprintf ((FILE), \"\\t.align %d\\n\", (SIZE) <= 4 ? 4 : 8),\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\t\\\n-  fprintf ((FILE), \"\\n\\t.blockz %d\\n\", (ROUNDED)))\n+  (TARGET_NO_BSS) ? fprintf ((FILE), \"\\n\\t.blockz %d\\n\", (ROUNDED)) \\\n+\t\t  : fprintf ((FILE), \"\\n\\t.block %d\\n\", (ROUNDED)))\n \n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable named NAME."}]}