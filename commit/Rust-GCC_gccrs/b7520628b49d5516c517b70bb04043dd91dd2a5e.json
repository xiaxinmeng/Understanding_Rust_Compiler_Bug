{"sha": "b7520628b49d5516c517b70bb04043dd91dd2a5e", "node_id": "C_kwDOANBUbNoAKGI3NTIwNjI4YjQ5ZDU1MTZjNTE3YjcwYmIwNDA0M2RkOTFkZDJhNWU", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-05T10:54:19Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-05T11:12:51Z"}, "message": "Add missing generic arguments to type-bound-predicate on trait-objects", "tree": {"sha": "a02399639a50bac77239bac77b147c83d7cacebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a02399639a50bac77239bac77b147c83d7cacebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7520628b49d5516c517b70bb04043dd91dd2a5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7520628b49d5516c517b70bb04043dd91dd2a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7520628b49d5516c517b70bb04043dd91dd2a5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7520628b49d5516c517b70bb04043dd91dd2a5e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d308ce83b9bb543849f474fcee8cad1c73bea6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d308ce83b9bb543849f474fcee8cad1c73bea6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d308ce83b9bb543849f474fcee8cad1c73bea6c1"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "f1dbb6b4de9a9fabeb6864ab084f0265282e0f32", "filename": "gcc/rust/typecheck/rust-hir-type-check-type.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7520628b49d5516c517b70bb04043dd91dd2a5e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7520628b49d5516c517b70bb04043dd91dd2a5e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-type.cc?ref=b7520628b49d5516c517b70bb04043dd91dd2a5e", "patch": "@@ -536,9 +536,26 @@ TypeCheckType::visit (HIR::TraitObjectType &type)\n \n       HIR::TypeParamBound &b = *bound.get ();\n       HIR::TraitBound &trait_bound = static_cast<HIR::TraitBound &> (b);\n-      TraitReference *trait = resolve_trait_path (trait_bound.get_path ());\n+\n+      auto &type_path = trait_bound.get_path ();\n+      TraitReference *trait = resolve_trait_path (type_path);\n       TyTy::TypeBoundPredicate predicate (trait->get_mappings ().get_defid (),\n \t\t\t\t\t  trait_bound.get_locus ());\n+      auto &final_seg = type_path.get_final_segment ();\n+      if (final_seg->is_generic_segment ())\n+\t{\n+\t  auto final_generic_seg\n+\t    = static_cast<HIR::TypePathSegmentGeneric *> (final_seg.get ());\n+\t  if (final_generic_seg->has_generic_args ())\n+\t    {\n+\t      HIR::GenericArgs &generic_args\n+\t\t= final_generic_seg->get_generic_args ();\n+\n+\t      // this is applying generic arguments to a trait\n+\t      // reference\n+\t      predicate.apply_generic_arguments (&generic_args);\n+\t    }\n+\t}\n \n       if (predicate.is_object_safe (true, type.get_locus ()))\n \tspecified_bounds.push_back (std::move (predicate));"}]}