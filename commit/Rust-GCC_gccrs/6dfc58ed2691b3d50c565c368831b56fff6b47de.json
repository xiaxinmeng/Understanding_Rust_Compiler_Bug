{"sha": "6dfc58ed2691b3d50c565c368831b56fff6b47de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRmYzU4ZWQyNjkxYjNkNTBjNTY1YzM2ODgzMWI1NmZmZjZiNDdkZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-04-06T09:42:03Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-04-06T09:42:03Z"}, "message": "rtti.c (dfs_class_hint_mark): New static function.\n\n\t* rtti.c (dfs_class_hint_mark): New static function.\n\t(dfs_class_hint_unmark): New static function.\n\t(class_hint_flags): Use them.\n\nFrom-SVN: r32966", "tree": {"sha": "a6440946152b566c70a4bbd1dd14e440d58eaddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6440946152b566c70a4bbd1dd14e440d58eaddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dfc58ed2691b3d50c565c368831b56fff6b47de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfc58ed2691b3d50c565c368831b56fff6b47de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dfc58ed2691b3d50c565c368831b56fff6b47de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dfc58ed2691b3d50c565c368831b56fff6b47de/comments", "author": null, "committer": null, "parents": [{"sha": "ff2b53efb181ba999c0a4ceb4c473757c3ad8fda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2b53efb181ba999c0a4ceb4c473757c3ad8fda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2b53efb181ba999c0a4ceb4c473757c3ad8fda"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "3bd54c140565d86e985d90f962d1ca029459a456", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dfc58ed2691b3d50c565c368831b56fff6b47de/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dfc58ed2691b3d50c565c368831b56fff6b47de/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6dfc58ed2691b3d50c565c368831b56fff6b47de", "patch": "@@ -1,3 +1,9 @@\n+2000-04-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* rtti.c (dfs_class_hint_mark): New static function.\n+\t(dfs_class_hint_unmark): New static function.\n+\t(class_hint_flags): Use them.\n+\n 2000-04-05  Benjamin Kosnik  <bkoz@cygnus.com>\n \n         * decl2.c: Make flag_honor_std dependant on ENABLE_STD_NAMESPACE."}, {"sha": "ccda8df68c8f879e1ed40f15318d630a5b7a0b80", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 60, "deletions": 10, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dfc58ed2691b3d50c565c368831b56fff6b47de/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dfc58ed2691b3d50c565c368831b56fff6b47de/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=6dfc58ed2691b3d50c565c368831b56fff6b47de", "patch": "@@ -66,6 +66,8 @@ static tree tinfo_base_init PARAMS((tree, tree));\n static tree generic_initializer PARAMS((tree, tree));\n static tree ptr_initializer PARAMS((tree, tree));\n static tree ptmd_initializer PARAMS((tree, tree));\n+static tree dfs_class_hint_mark PARAMS ((tree, void *));\n+static tree dfs_class_hint_unmark PARAMS ((tree, void *));\n static int class_hint_flags PARAMS((tree));\n static tree class_initializer PARAMS((tree, tree, tree));\n static tree synthesize_tinfo_var PARAMS((tree, tree));\n@@ -1381,23 +1383,71 @@ ptmd_initializer (desc, target)\n   return init;  \n }\n \n-/* Determine the hint flags describing the features of a class's heirarchy.\n-   FIXME: better set the hint_flags here!  For now set them\n-   to safe 'don't know' values.  The specification is under\n-   review.  Don't forget to check the runtime dynamic_cast and\n-   catch machinery if these change.  */\n+/* Check base BINFO to set hint flags in *DATA, which is really an int.\n+   We use CLASSTYPE_MARKED to tag types we've found as non-virtual bases and\n+   CLASSTYPE_MARKED2 to tag those which are virtual bases. Remember it is\n+   possible for a type to be both a virtual and non-virtual base.  */\n+\n+static tree\n+dfs_class_hint_mark (binfo, data)\n+     tree binfo;\n+     void *data;\n+{\n+  tree basetype = BINFO_TYPE (binfo);\n+  int *hint = (int *) data;\n+  \n+  if (TREE_VIA_VIRTUAL (binfo))\n+    {\n+      if (CLASSTYPE_MARKED (basetype))\n+        *hint |= 1;\n+      if (CLASSTYPE_MARKED2 (basetype))\n+        *hint |= 2;\n+      SET_CLASSTYPE_MARKED2 (basetype);\n+    }\n+  else\n+    {\n+      if (CLASSTYPE_MARKED (basetype) || CLASSTYPE_MARKED2 (basetype))\n+        *hint |= 1;\n+      SET_CLASSTYPE_MARKED (basetype);\n+    }\n+  if (!TREE_VIA_PUBLIC (binfo) && TYPE_BINFO (basetype) != binfo)\n+    *hint |= 4;\n+  return NULL_TREE;\n+};\n+\n+/* Clear the base's dfs marks, after searching for duplicate bases. */\n+\n+static tree\n+dfs_class_hint_unmark (binfo, data)\n+     tree binfo;\n+     void *data ATTRIBUTE_UNUSED;\n+{\n+  tree basetype = BINFO_TYPE (binfo);\n+  \n+  CLEAR_CLASSTYPE_MARKED (basetype);\n+  CLEAR_CLASSTYPE_MARKED2 (basetype);\n+  return NULL_TREE;\n+}\n+\n+/* Determine the hint flags describing the features of a class's heirarchy.  */\n \n static int\n class_hint_flags (type)\n      tree type;\n {\n   int hint_flags = 0;\n+  int i;\n+  \n+  dfs_walk (TYPE_BINFO (type), dfs_class_hint_mark, NULL, &hint_flags);\n+  dfs_walk (TYPE_BINFO (type), dfs_class_hint_unmark, NULL, NULL);\n   \n-  hint_flags |= 0x1;  /* non-diamond shaped repeated base */\n-  hint_flags |= 0x2;  /* diamond shaped */\n-  hint_flags |= 0x4;  /* non-public base */\n-  hint_flags |= 0x8;  /* public base */\n-  type = 0; /* FIXME: Use it! */\n+  for (i = 0; i < CLASSTYPE_N_BASECLASSES (type); ++i)\n+    {\n+      tree base_binfo = BINFO_BASETYPE (TYPE_BINFO (type), i);\n+      \n+      if (TREE_VIA_PUBLIC (base_binfo))\n+        hint_flags |= 0x8;\n+    }\n   return hint_flags;\n }\n         "}]}