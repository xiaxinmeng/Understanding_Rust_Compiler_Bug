{"sha": "ee97d3542d91ac097597a3b340c80c6c56d49f13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU5N2QzNTQyZDkxYWMwOTc1OTdhM2IzNDBjODBjNmM1NmQ0OWYxMw==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-07-13T19:27:49Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-07-13T19:27:49Z"}, "message": "parse.y (fold_constant_for_init): Avoid bullish conversion.\n\n2000-07-13  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* parse.y (fold_constant_for_init): Avoid bullish conversion.\n\n(http://gcc.gnu.org/ml/gcc-patches/2000-07/msg00506.html)\n\nFrom-SVN: r35022", "tree": {"sha": "a6d542bb102539af63a5930b07c3c5cc7cf25e33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6d542bb102539af63a5930b07c3c5cc7cf25e33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee97d3542d91ac097597a3b340c80c6c56d49f13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee97d3542d91ac097597a3b340c80c6c56d49f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee97d3542d91ac097597a3b340c80c6c56d49f13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee97d3542d91ac097597a3b340c80c6c56d49f13/comments", "author": null, "committer": null, "parents": [{"sha": "185ce11b15dec339ddda83aa7a5fcb4ac200466d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/185ce11b15dec339ddda83aa7a5fcb4ac200466d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/185ce11b15dec339ddda83aa7a5fcb4ac200466d"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "b341bbaaa66c9aeef1072e7358d9fd419e97bdfd", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee97d3542d91ac097597a3b340c80c6c56d49f13/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee97d3542d91ac097597a3b340c80c6c56d49f13/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ee97d3542d91ac097597a3b340c80c6c56d49f13", "patch": "@@ -1,3 +1,7 @@\n+2000-07-13  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* parse.y (fold_constant_for_init): Avoid bullish conversion.\n+\n 2000-07-13  Tom Tromey  <tromey@cygnus.com>\n \n \t* lang-specs.h: Added %{I*}."}, {"sha": "f1cd122cc8ec3130162fc79f64825d90e54249ea", "filename": "gcc/java/parse.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee97d3542d91ac097597a3b340c80c6c56d49f13/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee97d3542d91ac097597a3b340c80c6c56d49f13/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=ee97d3542d91ac097597a3b340c80c6c56d49f13", "patch": "@@ -17508,12 +17508,9 @@ fold_constant_for_init (node, context)\n   tree op0, op1, val;\n   enum tree_code code = TREE_CODE (node);\n \n-  if (code == STRING_CST)\n+  if (code == STRING_CST || code == INTEGER_CST || code == REAL_CST)\n     return node;\n \n-  if (code == INTEGER_CST || code == REAL_CST)\n-    return convert (TREE_TYPE (context), node);\n-\n   switch (code)\n     {\n     case PLUS_EXPR:"}, {"sha": "c13eb4bc350f75b4792cf0b3831160dfd88d235b", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee97d3542d91ac097597a3b340c80c6c56d49f13/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee97d3542d91ac097597a3b340c80c6c56d49f13/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=ee97d3542d91ac097597a3b340c80c6c56d49f13", "patch": "@@ -14810,12 +14810,9 @@ fold_constant_for_init (node, context)\n   tree op0, op1, val;\n   enum tree_code code = TREE_CODE (node);\n \n-  if (code == STRING_CST)\n+  if (code == STRING_CST || code == INTEGER_CST || code == REAL_CST)\n     return node;\n \n-  if (code == INTEGER_CST || code == REAL_CST)\n-    return convert (TREE_TYPE (context), node);\n-\n   switch (code)\n     {\n     case PLUS_EXPR:"}]}