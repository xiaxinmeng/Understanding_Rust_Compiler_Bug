{"sha": "084e45a515a697f61587387c4055d181f3a23e31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0ZTQ1YTUxNWE2OTdmNjE1ODczODdjNDA1NWQxODFmM2EyM2UzMQ==", "commit": {"author": {"name": "Yukhin Kirill", "email": "kirill.yukhin@intel.com", "date": "2011-07-27T17:45:41Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-07-27T17:45:41Z"}, "message": "Add BMI testcases.\n\n2011-07-27  Yukhin Kirill  <kirill.yukhin@intel.com>\n\n\t* gcc.target/i386/i386.exp (check_effective_target_bmi): New.\n\t* gcc.target/i386/bmi-andn-1.c: New test.\n\t* gcc.target/i386/bmi-andn-1a.c: Likewise.\n\t* gcc.target/i386/bmi-andn-2.c: Likewise.\n\t* gcc.target/i386/bmi-andn-2a.c: Likewise.\n\t* gcc.target/i386/bmi-bextr-1.c: Likewise.\n\t* gcc.target/i386/bmi-bextr-1a.c: Likewise.\n\t* gcc.target/i386/bmi-bextr-2.c: Likewise.\n\t* gcc.target/i386/bmi-bextr-2a.c: Likewise.\n\t* gcc.target/i386/bmi-blsi-1.c: Likewise.\n\t* gcc.target/i386/bmi-blsi-1a.c: Likewise.\n\t* gcc.target/i386/bmi-blsi-2.c: Likewise.\n\t* gcc.target/i386/bmi-blsi-2a.c: Likewise.\n\t* gcc.target/i386/bmi-blsmsk-1.c: Likewise.\n\t* gcc.target/i386/bmi-blsmsk-1a.c: Likewise.\n\t* gcc.target/i386/bmi-blsmsk-2.c: Likewise.\n\t* gcc.target/i386/bmi-blsmsk-2a.c: Likewise.\n\t* gcc.target/i386/bmi-blsr-1.c: Likewise.\n\t* gcc.target/i386/bmi-blsr-1a.c: Likewise.\n\t* gcc.target/i386/bmi-blsr-2.c: Likewise.\n\t* gcc.target/i386/bmi-blsr-2a.c: Likewise.\n\t* gcc.target/i386/bmi-tzcnt-1.c: Likewise.\n\t* gcc.target/i386/bmi-tzcnt-1a.c: Likewise.\n\t* gcc.target/i386/bmi-tzcnt-2.c: Likewise.\n\t* gcc.target/i386/bmi-tzcnt-2a.c: Likewise.\n\nFrom-SVN: r176840", "tree": {"sha": "771525ac74d1ea47feef0a9e31de81312d7602dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/771525ac74d1ea47feef0a9e31de81312d7602dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/084e45a515a697f61587387c4055d181f3a23e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084e45a515a697f61587387c4055d181f3a23e31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084e45a515a697f61587387c4055d181f3a23e31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084e45a515a697f61587387c4055d181f3a23e31/comments", "author": null, "committer": null, "parents": [{"sha": "3689198db0121443b06f1bbe4e1c34286acb3f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3689198db0121443b06f1bbe4e1c34286acb3f32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3689198db0121443b06f1bbe4e1c34286acb3f32"}], "stats": {"total": 561, "additions": 561, "deletions": 0}, "files": [{"sha": "30c86efa598d3f158f6bef68b0bfcdf28ea0d042", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -1,3 +1,31 @@\n+2011-07-27  Yukhin Kirill  <kirill.yukhin@intel.com>\n+\n+\t* gcc.target/i386/i386.exp (check_effective_target_bmi): New.\n+\t* gcc.target/i386/bmi-andn-1.c: New test.\n+\t* gcc.target/i386/bmi-andn-1a.c: Likewise.\n+\t* gcc.target/i386/bmi-andn-2.c: Likewise.\n+\t* gcc.target/i386/bmi-andn-2a.c: Likewise.\n+\t* gcc.target/i386/bmi-bextr-1.c: Likewise.\n+\t* gcc.target/i386/bmi-bextr-1a.c: Likewise.\n+\t* gcc.target/i386/bmi-bextr-2.c: Likewise.\n+\t* gcc.target/i386/bmi-bextr-2a.c: Likewise.\n+\t* gcc.target/i386/bmi-blsi-1.c: Likewise.\n+\t* gcc.target/i386/bmi-blsi-1a.c: Likewise.\n+\t* gcc.target/i386/bmi-blsi-2.c: Likewise.\n+\t* gcc.target/i386/bmi-blsi-2a.c: Likewise.\n+\t* gcc.target/i386/bmi-blsmsk-1.c: Likewise.\n+\t* gcc.target/i386/bmi-blsmsk-1a.c: Likewise.\n+\t* gcc.target/i386/bmi-blsmsk-2.c: Likewise.\n+\t* gcc.target/i386/bmi-blsmsk-2a.c: Likewise.\n+\t* gcc.target/i386/bmi-blsr-1.c: Likewise.\n+\t* gcc.target/i386/bmi-blsr-1a.c: Likewise.\n+\t* gcc.target/i386/bmi-blsr-2.c: Likewise.\n+\t* gcc.target/i386/bmi-blsr-2a.c: Likewise.\n+\t* gcc.target/i386/bmi-tzcnt-1.c: Likewise.\n+\t* gcc.target/i386/bmi-tzcnt-1a.c: Likewise.\n+\t* gcc.target/i386/bmi-tzcnt-2.c: Likewise.\n+\t* gcc.target/i386/bmi-tzcnt-2a.c: Likewise.\n+\n 2011-07-27  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/47691"}, {"sha": "bf0685ad380984c8f4715bc1790f163be69a3b06", "filename": "gcc/testsuite/gcc.target/i386/bmi-andn-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-1.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run { target { bmi && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+long long calc_andn_u64 (long long src1,\n+\t\t\t long long src2,\n+\t\t\t long long dummy)\n+{\n+  return (~src1 + dummy) & (src2);\n+}\n+\n+static void\n+bmi_test()\n+{\n+  unsigned i;\n+\n+  long long src = 0xfacec0ffeefacec0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + src << i;\n+\n+    res_ref = calc_andn_u64 (src, src+i, 0);\n+    res = __andn_u64 (src, src+i);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "a7ee07653c0e2279a6ffbb0befbe21fabde82804", "filename": "gcc/testsuite/gcc.target/i386/bmi-andn-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-1a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline -dp\" } */\n+\n+#include \"bmi-andn-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi_andn_di\" 1 } } */"}, {"sha": "bb998f3af28281420841098fa5576c19d64d4cee", "filename": "gcc/testsuite/gcc.target/i386/bmi-andn-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-2.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target { bmi } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+long long calc_andn_u32 (int src1, int src2, int dummy)\n+{\n+  return (~src1+dummy) & (src2);\n+}\n+\n+static void\n+bmi_test()\n+{\n+  unsigned i;\n+\n+  int src = 0xfacec0ff;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + src << i;\n+\n+    res_ref = calc_andn_u32 (src, src+i, 0);\n+    res = __andn_u32 (src, src+i);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "72fe0263922a3d24e3673af3f2d779b6f9c49d5a", "filename": "gcc/testsuite/gcc.target/i386/bmi-andn-2a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-2a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -fno-inline -dp\" } */\n+\n+#include \"bmi-andn-2.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi_andn_si\" 1 } } */"}, {"sha": "4abe63e54619aa1c561df0846eb325be99ca4910", "filename": "gcc/testsuite/gcc.target/i386/bmi-bextr-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-1.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target { bmi && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+long long calc_bextr_u64 (unsigned long long src1,\n+\t\t\t  unsigned long long src2)\n+{\n+  long long res = 0;\n+  unsigned char start = (src2 & 0xff);\n+  unsigned char len = (int) ((src2 >> 8) & 0xff);\n+  if (start < 64) {\n+    unsigned i;\n+    unsigned last = (start+len) < 64 ? start+len : 64;\n+\n+    src1 >>= start;\n+    for (i=start; i<last; ++i) {\n+      res |= (src1 & 1) << (i-start);\n+      src1 >>= 1;\n+    }\n+  }\n+\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  unsigned char start, len;\n+  unsigned long long src1 = 0xfacec0ffeefacec0;\n+  unsigned long long res, res_ref, src2;\n+\n+  for (i=0; i<5; ++i) {\n+    start = (i * 1983) % 64;\n+    len = i + (i * 1983) % 64;\n+\n+    src1 = src1 * 3;\n+    src2 = start | (((long long)len) << 8);\n+\n+    res_ref = calc_bextr_u64 (src1, src2);\n+    res = __bextr_u64 (src1, src2);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "4ccfbdc9829d40f08327db9ed6e0246354587a34", "filename": "gcc/testsuite/gcc.target/i386/bmi-bextr-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-1a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline -dp\" } */\n+\n+#include \"bmi-bextr-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi_bextr_di\" 1 } } */"}, {"sha": "2ce62596673334b901f4dd95140fc595043912b0", "filename": "gcc/testsuite/gcc.target/i386/bmi-bextr-2.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-2.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target { bmi } } } */\n+/* { dg-require-effective-target bmi  } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+unsigned calc_bextr_u32 (unsigned src1, unsigned src2)\n+{\n+  unsigned res = 0;\n+  unsigned char start = (src2 & 0xff);\n+  unsigned char len = (int) ((src2 >> 8) & 0xff);\n+  if (start < 32) {\n+    unsigned i;\n+    unsigned last = (start+len) < 32 ? start+len : 32;\n+\n+    src1 >>= start;\n+    for (i=start; i<last; ++i) {\n+      res |= (src1 & 1) << (i-start);\n+      src1 >>= 1;\n+    }\n+  }\n+\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  unsigned char start, len;\n+  unsigned src1 = 0xfacec0ff;\n+  unsigned res, res_ref, src2;\n+\n+  for (i=0; i<5; ++i) {\n+    start = (i * 1983) % 32;\n+    len = i + (i * 1983) % 32;\n+\n+    src1 = src1 * 3;\n+    src2 = start | (((unsigned)len) << 8);\n+\n+    res_ref = calc_bextr_u32 (src1, src2);\n+    res = __bextr_u32 (src1, src2);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "282a3e40011e480cedf310baa4a4ce82eed22627", "filename": "gcc/testsuite/gcc.target/i386/bmi-bextr-2a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-bextr-2a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -fno-inline -dp\" } */\n+\n+#include \"bmi-bextr-2.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi_bextr_si\" 1 } } */"}, {"sha": "e7f2c896d899548db77b428cfd6b1415fccd9f1a", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsi-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-1.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run { target { bmi && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+/* To fool compiler, so it not generate blsi here. */\n+long long calc_blsi_u64 (long long src1, long long src2)\n+{\n+  return (-src1) & (src2);\n+}\n+\n+static void\n+bmi_test()\n+{\n+  unsigned i;\n+\n+  long long src = 0xfacec0ffeefacec0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + src << i;\n+\n+    res_ref = calc_blsi_u64 (src, src);\n+    res = __blsi_u64 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "e9e0ecb671619355f8a3e793e9e813f19785e031", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsi-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-1a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline -dp\" } */\n+\n+#include \"bmi-blsi-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi_blsi_di\" 1 } } */"}, {"sha": "b6633a980ab3194ee0d181897324dc05363366d2", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsi-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-2.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target { bmi } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+/* To fool compiler, so it not generate blsi here. */\n+int calc_blsi_u32 (int src1, int src2)\n+{\n+  return (-src1) & (src2);\n+}\n+\n+static void\n+bmi_test()\n+{\n+  unsigned i;\n+  int src = 0xfacec0ff;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + src << i;\n+\n+    res_ref = calc_blsi_u32 (src, src);\n+    res = __blsi_u32 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "be9ca3f6312676271a9bf90fc14fe86b7e77dd87", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsi-2a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsi-2a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -fno-inline -dp\" } */\n+\n+#include \"bmi-blsi-2.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi_blsi_si\" 1 } } */"}, {"sha": "5498007c393d951fd01a1ea4e761fc18eaaa4e82", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsmsk-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-1.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target { bmi && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+/*  Trick compiler in order not to generate target insn here. */\n+long long calc_blsmsk_u64 (long long src1, long long src2)\n+{\n+  return (src1-1) ^ (src2);\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  long long src = 0xfacec0ffeefacec0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + src << i;\n+\n+    res_ref = calc_blsmsk_u64 (src, src);\n+    res = __blsmsk_u64 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "4e6cb7b366368f7d47cdfeb39ac55aa63e266d5f", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsmsk-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-1a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline -dp\" } */\n+\n+#include \"bmi-blsmsk-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi_blsmsk_di\" 1 } } */"}, {"sha": "be0ebf90055cb1fe02304bc652331ad9991ff418", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsmsk-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-2.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target { bmi } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+/*  Trick compiler in order not to generate target insn here. */\n+int calc_blsmsk_u32 (int src1, int src2)\n+{\n+  return (src1-1) ^ (src2);\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  int src = 0xfacec0ff;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + src << i;\n+\n+    res_ref = calc_blsmsk_u32 (src, src);\n+    res = __blsmsk_u32 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "f6f6babff9635382754eaac2f99df9a6e6c4f310", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsmsk-2a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsmsk-2a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -fno-inline -dp\" } */\n+\n+#include \"bmi-blsmsk-2.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi_blsmsk_si\" 1 } } */"}, {"sha": "68e01f39f0e50b5bd00f0afee5bfd83d4cbdf39a", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsr-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-1.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run { target { bmi && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+long long calc_blsr_u64 (long long src1, long long src2)\n+{\n+  return (src1-1) & (src2);\n+}\n+\n+static void\n+bmi_test()\n+{\n+  unsigned i;\n+  long long src = 0xfacec0ffeefacec0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + src << i;\n+\n+    res_ref = calc_blsr_u64 (src, src);\n+    res = __blsr_u64 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "79241ca8f9117e9abc2a8a7f6eaba1df273f15b2", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsr-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-1a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline -dp\" } */\n+\n+#include \"bmi-blsr-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi_blsr_di\" 1 } } */"}, {"sha": "b3fc4e5e9620d72c6280fb8ae3c9ebaeca4c76ed", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsr-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-2.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run { target { bmi } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+int calc_blsr_u32 (int src1, int src2)\n+{\n+  return (src1-1) & (src2);\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  int src = 0xfacec0ff;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + src << i;\n+\n+    res_ref = calc_blsr_u32 (src, src);\n+    res = __blsr_u32 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "d88c16e4decdce8942d7c796ad3381d5d7058285", "filename": "gcc/testsuite/gcc.target/i386/bmi-blsr-2a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-blsr-2a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -fno-inline -dp\" } */\n+\n+#include \"bmi-blsr-2.c\"\n+\n+/* { dg-final { scan-assembler-times \"bmi_blsr_si\" 1 } } */"}, {"sha": "8fad38ad0727749499c362357043d3b1ccb7878b", "filename": "gcc/testsuite/gcc.target/i386/bmi-check.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-check.h?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,39 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"cpuid.h\"\n+\n+static void bmi_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  bmi_test ();\n+}\n+\n+int\n+main ()\n+{\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (__get_cpuid_max (0, NULL) < 7)\n+    return 0;\n+\n+  __cpuid_count (7, 0, eax, ebx, ecx, edx);\n+\n+  /* Run BMI test only if host has BMI support.  */\n+  if (ebx & bit_BMI)\n+    {\n+      do_test ();\n+#ifdef DEBUG\n+    printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "a9fce15ce561a33f8d04a3deef51a5fcc9689286", "filename": "gcc/testsuite/gcc.target/i386/bmi-tzcnt-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-1.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run { target { bmi && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+long long calc_tzcnt_u64 (long long src)\n+{\n+  int i;\n+  int res = 0;\n+\n+  while ( (res<64) && ((src&1) == 0)) {\n+    ++res;\n+    src >>= 1;\n+  }\n+\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  long long src = 0xfacec0ffeefacec0;\n+  long long res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + src << i;\n+\n+    res_ref = calc_tzcnt_u64 (src);\n+    res = __tzcnt_u64 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "e283c3154f711d2830f03d75f24f363bcb7dff03", "filename": "gcc/testsuite/gcc.target/i386/bmi-tzcnt-1a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-1a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include \"bmi-tzcnt-1.c\"\n+\n+/* { dg-final { scan-assembler-times \"tzcntq\" 1 } } */"}, {"sha": "1a9235b59bebf6381d5333efaaf5bed37702b3ba", "filename": "gcc/testsuite/gcc.target/i386/bmi-tzcnt-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-2.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target { bmi } } } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include <x86intrin.h>\n+\n+#include \"bmi-check.h\"\n+\n+int calc_tzcnt_u32 (int src)\n+{\n+  int i;\n+  int res = 0;\n+\n+  while ( (res<32) && ((src&1) == 0)) {\n+    ++res;\n+    src >>= 1;\n+  }\n+  return res;\n+}\n+\n+static void\n+bmi_test ()\n+{\n+  unsigned i;\n+  int src = 0xfacec0ff;\n+  int res, res_ref;\n+\n+  for (i=0; i<5; ++i) {\n+    src = i + src << i;\n+\n+    res_ref = calc_tzcnt_u32 (src);\n+    res = __tzcnt_u32 (src);\n+\n+    if (res != res_ref)\n+      abort();\n+  }\n+}"}, {"sha": "2cdb3f443c6bf00dd6d99cfac731e9fb045cba32", "filename": "gcc/testsuite/gcc.target/i386/bmi-tzcnt-2a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-tzcnt-2a.c?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -fno-inline\" } */\n+\n+#include \"bmi-tzcnt-2.c\"\n+\n+/* { dg-final { scan-assembler-times \"tzcntl\" 1 } } */"}, {"sha": "86c7549fcd7761cbf4d835eb937f9fb2b6d49fb1", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084e45a515a697f61587387c4055d181f3a23e31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=084e45a515a697f61587387c4055d181f3a23e31", "patch": "@@ -186,6 +186,16 @@ proc check_effective_target_xop { } {\n     } \"-O2 -mxop\" ]\n }\n \n+# Return 1 if bmi instructions can be compiled.\n+proc check_effective_target_bmi { } {\n+    return [check_no_compiler_messages bmi object {\n+\tvoid __bextr_u32 (void)\n+\t{\n+\t  __builtin_ia32_bextr_u32 (0, 0);\n+\t}\n+    } \"-mbmi\" ]\n+}\n+\n # If the linker used understands -M <mapfile>, pass it to clear hardware\n # capabilities set by the Sun assembler.\n set clearcap_ldflags \"-Wl,-M,$srcdir/$subdir/clearcap.map\""}]}