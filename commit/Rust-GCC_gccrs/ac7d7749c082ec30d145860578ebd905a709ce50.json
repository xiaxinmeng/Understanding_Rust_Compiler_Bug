{"sha": "ac7d7749c082ec30d145860578ebd905a709ce50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM3ZDc3NDljMDgyZWMzMGQxNDU4NjA1NzhlYmQ5MDVhNzA5Y2U1MA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-08-16T14:31:21Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-08-16T14:31:21Z"}, "message": "c-common.c (const_strip_array_types): New.\n\n\t* c-common.c (const_strip_array_types): New.\n\t* c-common.h (lang_missing_noreturn_ok_p): Delete.\n\t(const_strip_array_types): New.\n\t* c-objc-common.c (c_disregard_inline_limits,\n\tc_warn_unused_global_decl): Constify.\n\t* c-tree.h (c_disregard_inline_limits, c_warn_unused_global_decl,\n\tc_vla_type_p, c_incomplete_type_error): Likewise.\n\t* c-typeck.c (c_incomplete_type_error, c_vla_type_p): Likewise.\n\t* hooks.c (hook_bool_const_tree_false): New.\n\t* hooks.h (hook_bool_const_tree_false): Likewise.\n\t* langhooks-def.h (lhd_warn_unused_global_decl,\n\tlhd_incomplete_type_error, lhd_expr_size,\n\tlhd_tree_inlining_disregard_inline_limits,\n\tlhd_tree_inlining_auto_var_in_fn_p, lhd_tree_dump_type_quals,\n\tLANG_HOOKS_GENERIC_TYPE_P, LANG_HOOKS_TYPE_MAX_SIZE): Constify.\n\t* langhooks.c (lhd_warn_unused_global_decl,\n\tlhd_incomplete_type_error,\n\tlhd_tree_inlining_disregard_inline_limits,\n\tlhd_tree_inlining_auto_var_in_fn_p, lhd_tree_dump_type_quals,\n\tlhd_expr_size): Likewise.\n\t* langhooks.h (lang_hooks_for_tree_inlining,\n\tlang_hooks_for_tree_dump, lang_hooks_for_types,\n\tlang_hooks_for_decls, lang_hooks): Likewise.\n\t* pointer-set.c (pointer_set_t, pointer_set_create,\n\tpointer_set_contains, insert_aux, pointer_set_insert,\n\tpointer_set_traverse, pointer_map_t, pointer_map_create,\n\tpointer_map_contains, pointer_map_insert, pointer_map_traverse):\n\tLikewise.\n\t* pointer-set.h (pointer_set_contains, pointer_set_insert,\n\tpointer_set_traverse, pointer_map_contains, pointer_map_insert,\n\tpointer_map_traverse): Likewise.\n\t* predict.c (assert_is_empty): Likewise.\n\t* tree-affine.c (free_name_expansion): Likewise.\n\t* tree-cfg.c (edge_to_cases_cleanup): Likewise.\n\t* tree.c (size_in_bytes, max_int_size_in_bytes): Likewise.\n\t* tree.h (size_in_bytes, max_int_size_in_bytes): Likewise.\n\t\nada:\n\t* misc.c (gnat_type_max_size): Constify.\n\ncp:\n\t* cp-objcp-common.c (cxx_warn_unused_global_decl, cp_expr_size):\n\tConstify.\n\t* cp-tree.h (local_variable_p, nonstatic_local_decl_p,\n\tclass_tmpl_impl_spec_p, cp_auto_var_in_fn_p, cp_type_quals,\n\tcxx_incomplete_type_diagnostic, cxx_incomplete_type_error,\n\tcxx_warn_unused_global_decl, cp_expr_size): Likewise.\n\t* decl.c (local_variable_p, nonstatic_local_decl_p): Likewise.\n\t* tree.c (class_tmpl_impl_spec_p, cp_auto_var_in_fn_p): Likewise.\n\t* typeck.c (cp_type_quals): Likewise.\n\t* typeck2.c (cxx_incomplete_type_diagnostic,\n\tcxx_incomplete_type_error): Likewise.\n\nFrom-SVN: r127560", "tree": {"sha": "2a4c83e4c3dac3f7576d39fb5f61a4955aed2c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a4c83e4c3dac3f7576d39fb5f61a4955aed2c98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac7d7749c082ec30d145860578ebd905a709ce50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7d7749c082ec30d145860578ebd905a709ce50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac7d7749c082ec30d145860578ebd905a709ce50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7d7749c082ec30d145860578ebd905a709ce50/comments", "author": null, "committer": null, "parents": [{"sha": "bc1edb77ba75d9a7b2c780a0fe8f04af0b3b6479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc1edb77ba75d9a7b2c780a0fe8f04af0b3b6479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc1edb77ba75d9a7b2c780a0fe8f04af0b3b6479"}], "stats": {"total": 243, "additions": 157, "deletions": 86}, "files": [{"sha": "05c2b2984be953a84647be4b6cc311e51b99a2f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -1,3 +1,42 @@\n+2007-08-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.c (const_strip_array_types): New.\n+\t* c-common.h (lang_missing_noreturn_ok_p): Delete.\n+\t(const_strip_array_types): New.\n+\t* c-objc-common.c (c_disregard_inline_limits,\n+\tc_warn_unused_global_decl): Constify.\n+\t* c-tree.h (c_disregard_inline_limits, c_warn_unused_global_decl,\n+\tc_vla_type_p, c_incomplete_type_error): Likewise.\n+\t* c-typeck.c (c_incomplete_type_error, c_vla_type_p): Likewise.\n+\t* hooks.c (hook_bool_const_tree_false): New.\n+\t* hooks.h (hook_bool_const_tree_false): Likewise.\n+\t* langhooks-def.h (lhd_warn_unused_global_decl,\n+\tlhd_incomplete_type_error, lhd_expr_size,\n+\tlhd_tree_inlining_disregard_inline_limits,\n+\tlhd_tree_inlining_auto_var_in_fn_p, lhd_tree_dump_type_quals,\n+\tLANG_HOOKS_GENERIC_TYPE_P, LANG_HOOKS_TYPE_MAX_SIZE): Constify.\n+\t* langhooks.c (lhd_warn_unused_global_decl,\n+\tlhd_incomplete_type_error,\n+\tlhd_tree_inlining_disregard_inline_limits,\n+\tlhd_tree_inlining_auto_var_in_fn_p, lhd_tree_dump_type_quals,\n+\tlhd_expr_size): Likewise.\n+\t* langhooks.h (lang_hooks_for_tree_inlining,\n+\tlang_hooks_for_tree_dump, lang_hooks_for_types,\n+\tlang_hooks_for_decls, lang_hooks): Likewise.\n+\t* pointer-set.c (pointer_set_t, pointer_set_create,\n+\tpointer_set_contains, insert_aux, pointer_set_insert,\n+\tpointer_set_traverse, pointer_map_t, pointer_map_create,\n+\tpointer_map_contains, pointer_map_insert, pointer_map_traverse):\n+\tLikewise.\n+\t* pointer-set.h (pointer_set_contains, pointer_set_insert,\n+\tpointer_set_traverse, pointer_map_contains, pointer_map_insert,\n+\tpointer_map_traverse): Likewise.\n+\t* predict.c (assert_is_empty): Likewise.\n+\t* tree-affine.c (free_name_expansion): Likewise.\n+\t* tree-cfg.c (edge_to_cases_cleanup): Likewise.\n+\t* tree.c (size_in_bytes, max_int_size_in_bytes): Likewise.\n+\t* tree.h (size_in_bytes, max_int_size_in_bytes): Likewise.\n+\n 2007-08-16  Victor Kaplansky <victork@il.ibm.com>\n \n \t* tree-vectorizer.c (new_loop_vec_info): Initialize new "}, {"sha": "c6f038e2fe332dbbc170e00a745475125138ff1d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -1,3 +1,7 @@\n+2007-08-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* misc.c (gnat_type_max_size): Constify.\n+\n 2007-08-16  Gary Dismukes  <dismukes@adacore.com>\n \n \t* cstand.adb (Create_Standard): Create an entity for a zero-sized type"}, {"sha": "cad474d2b5f8cf8c8cf4aba26e60b64a54574f4c", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -103,7 +103,7 @@ static rtx gnat_expand_expr\t\t(tree, rtx, enum machine_mode, int,\n static void gnat_expand_body\t\t(tree);\n static void internal_error_function\t(const char *, va_list *);\n static void gnat_adjust_rli\t\t(record_layout_info);\n-static tree gnat_type_max_size\t\t(tree);\n+static tree gnat_type_max_size\t\t(const_tree);\n \n /* Definitions for our language-specific hooks.  */\n \n@@ -767,7 +767,7 @@ gnat_get_alias_set (tree type)\n    as a constant when possible.  */\n \n static tree\n-gnat_type_max_size (tree gnu_type)\n+gnat_type_max_size (const_tree gnu_type)\n {\n   /* First see what we can get from TYPE_SIZE_UNIT, which might not\n      be constant even for simple expressions if it has already been"}, {"sha": "d2ff7b882793492db522f763742bde7df0d6583a", "filename": "gcc/c-common.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -3912,6 +3912,15 @@ strip_array_types (tree type)\n   return type;\n }\n \n+const_tree\n+const_strip_array_types (const_tree type)\n+{\n+  while (TREE_CODE (type) == ARRAY_TYPE)\n+    type = TREE_TYPE (type);\n+\n+  return type;\n+}\n+\n /* Recursively remove any '*' or '&' operator from TYPE.  */\n tree\n strip_pointer_operator (tree t)"}, {"sha": "7d4761cd2b4fe479c2c87100f52c51c47c3c74cb", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -297,10 +297,6 @@ struct c_language_function GTY(()) {\n \n /* Language-specific hooks.  */\n \n-/* Callback that determines if it's ok for a function to have no\n-   noreturn attribute.  */\n-extern int (*lang_missing_noreturn_ok_p) (tree);\n-\n /* If non-NULL, this function is called after a precompile header file\n    is loaded.  */\n extern void (*lang_post_pch_load) (void);\n@@ -735,6 +731,7 @@ extern void c_register_builtin_type (tree, const char*);\n extern bool c_promoting_integer_type_p (tree);\n extern int self_promoting_args_p (tree);\n extern tree strip_array_types (tree);\n+extern const_tree const_strip_array_types (const_tree);\n extern tree strip_pointer_operator (tree);\n extern tree strip_pointer_or_array_types (tree);\n extern HOST_WIDE_INT c_common_to_target_charset (HOST_WIDE_INT);"}, {"sha": "58c748cde1d37d70dbf996344641f46ca68b2833", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -55,7 +55,7 @@ c_missing_noreturn_ok_p (tree decl)\n    such functions always being inlined when optimizing.  */\n \n int\n-c_disregard_inline_limits (tree fn)\n+c_disregard_inline_limits (const_tree fn)\n {\n   if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) != NULL)\n     return 1;\n@@ -112,7 +112,7 @@ c_cannot_inline_tree_fn (tree *fnp)\n /* Called from check_global_declarations.  */\n \n bool\n-c_warn_unused_global_decl (tree decl)\n+c_warn_unused_global_decl (const_tree decl)\n {\n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n     return false;"}, {"sha": "ee69b0840f4d2a54042d093bfccdff84e33f8f89", "filename": "gcc/c-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -514,12 +514,12 @@ extern struct c_declspecs *declspecs_add_attrs (struct c_declspecs *, tree);\n extern struct c_declspecs *finish_declspecs (struct c_declspecs *);\n \n /* in c-objc-common.c */\n-extern int c_disregard_inline_limits (tree);\n+extern int c_disregard_inline_limits (const_tree);\n extern int c_cannot_inline_tree_fn (tree *);\n extern bool c_objc_common_init (void);\n extern bool c_missing_noreturn_ok_p (tree);\n extern tree c_objc_common_truthvalue_conversion (tree expr);\n-extern bool c_warn_unused_global_decl (tree);\n+extern bool c_warn_unused_global_decl (const_tree);\n extern void c_initialize_diagnostics (diagnostic_context *);\n extern bool c_vla_unspec_p (tree x, tree fn);\n \n@@ -540,9 +540,9 @@ extern struct c_label_context_vm *label_context_stack_vm;\n extern tree require_complete_type (tree);\n extern int same_translation_unit_p (tree, tree);\n extern int comptypes (tree, tree);\n-extern bool c_vla_type_p (tree);\n+extern bool c_vla_type_p (const_tree);\n extern bool c_mark_addressable (tree);\n-extern void c_incomplete_type_error (tree, tree);\n+extern void c_incomplete_type_error (const_tree, const_tree);\n extern tree c_type_promotes_to (tree);\n extern struct c_expr default_function_array_conversion (struct c_expr);\n extern tree composite_type (tree, tree);"}, {"sha": "d793f72ab59dd7a77618b3342953e9e28a5395f2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -161,7 +161,7 @@ require_complete_type (tree value)\n    and TYPE is the type that was invalid.  */\n \n void\n-c_incomplete_type_error (tree value, tree type)\n+c_incomplete_type_error (const_tree value, const_tree type)\n {\n   const char *type_code_string;\n \n@@ -256,7 +256,7 @@ qualify_type (tree type, tree like)\n /* Return true iff the given tree T is a variable length array.  */\n \n bool\n-c_vla_type_p (tree t)\n+c_vla_type_p (const_tree t)\n {\n   if (TREE_CODE (t) == ARRAY_TYPE\n       && C_TYPE_VARIABLE_SIZE (t))"}, {"sha": "c2b043f409fec4d4314b7c1958b5d9aba21d7fdc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -1,3 +1,17 @@\n+2007-08-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp-objcp-common.c (cxx_warn_unused_global_decl, cp_expr_size):\n+\tConstify.\n+\t* cp-tree.h (local_variable_p, nonstatic_local_decl_p,\n+\tclass_tmpl_impl_spec_p, cp_auto_var_in_fn_p, cp_type_quals,\n+\tcxx_incomplete_type_diagnostic, cxx_incomplete_type_error,\n+\tcxx_warn_unused_global_decl, cp_expr_size): Likewise.\n+\t* decl.c (local_variable_p, nonstatic_local_decl_p): Likewise.\n+\t* tree.c (class_tmpl_impl_spec_p, cp_auto_var_in_fn_p): Likewise.\n+\t* typeck.c (cp_type_quals): Likewise.\n+\t* typeck2.c (cxx_incomplete_type_diagnostic,\n+\tcxx_incomplete_type_error): Likewise.\n+\n 2007-08-16  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/31132"}, {"sha": "b83ef363b8d53968a59f23e7bf1f2df59e3f3ff4", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -53,7 +53,7 @@ cxx_get_alias_set (tree t)\n /* Called from check_global_declarations.  */\n \n bool\n-cxx_warn_unused_global_decl (tree decl)\n+cxx_warn_unused_global_decl (const_tree decl)\n {\n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n     return false;\n@@ -72,7 +72,7 @@ cxx_warn_unused_global_decl (tree decl)\n    might have allocated something there.  */\n \n tree\n-cp_expr_size (tree exp)\n+cp_expr_size (const_tree exp)\n {\n   tree type = TREE_TYPE (exp);\n "}, {"sha": "a80fbad1062ab858aafce9ae73c4d66f7608916e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -4250,8 +4250,8 @@ extern tree create_implicit_typedef\t\t(tree, tree);\n extern tree maybe_push_decl\t\t\t(tree);\n extern tree force_target_expr\t\t\t(tree, tree);\n extern tree build_target_expr_with_type\t\t(tree, tree);\n-extern int local_variable_p\t\t\t(tree);\n-extern int nonstatic_local_decl_p\t\t(tree);\n+extern int local_variable_p\t\t\t(const_tree);\n+extern int nonstatic_local_decl_p\t\t(const_tree);\n extern tree register_dtor_fn\t\t\t(tree);\n extern tmpl_spec_kind current_tmpl_spec_kind\t(int);\n extern tree cp_fname_init\t\t\t(const char *, tree *);\n@@ -4681,7 +4681,7 @@ extern tree add_stmt_to_compound\t\t(tree, tree);\n extern tree cxx_maybe_build_cleanup\t\t(tree);\n extern void init_tree\t\t\t\t(void);\n extern int pod_type_p\t\t\t\t(tree);\n-extern bool class_tmpl_impl_spec_p\t\t(tree);\n+extern bool class_tmpl_impl_spec_p\t\t(const_tree);\n extern int zero_init_p\t\t\t\t(tree);\n extern tree canonical_type_variant\t\t(tree);\n extern tree copy_binfo\t\t\t\t(tree, tree, tree,\n@@ -4737,7 +4737,7 @@ extern linkage_kind decl_linkage\t\t(tree);\n extern tree cp_walk_subtrees (tree*, int*, walk_tree_fn,\n \t\t\t      void*, struct pointer_set_t*);\n extern int cp_cannot_inline_tree_fn\t\t(tree*);\n-extern int cp_auto_var_in_fn_p\t\t\t(tree,tree);\n+extern int cp_auto_var_in_fn_p\t\t\t(const_tree, const_tree);\n extern tree fold_if_not_in_template\t\t(tree);\n extern tree rvalue\t\t\t\t(tree);\n extern tree convert_bitfield_to_declared_type   (tree);\n@@ -4791,7 +4791,7 @@ extern int comp_ptr_ttypes\t\t\t(tree, tree);\n extern bool comp_ptr_ttypes_const\t\t(tree, tree);\n extern int ptr_reasonably_similar\t\t(tree, tree);\n extern tree build_ptrmemfunc\t\t\t(tree, tree, int, bool);\n-extern int cp_type_quals\t\t\t(tree);\n+extern int cp_type_quals\t\t\t(const_tree);\n extern bool cp_type_readonly\t\t\t(tree);\n extern bool cp_has_mutable_p\t\t\t(tree);\n extern bool at_least_as_qualified_p\t\t(tree, tree);\n@@ -4819,9 +4819,9 @@ extern int lvalue_p\t\t\t\t(tree);\n \n /* in typeck2.c */\n extern void require_complete_eh_spec_types\t(tree, tree);\n-extern void cxx_incomplete_type_diagnostic\t(tree, tree, int);\n+extern void cxx_incomplete_type_diagnostic\t(const_tree, const_tree, int);\n #undef cxx_incomplete_type_error\n-extern void cxx_incomplete_type_error\t\t(tree, tree);\n+extern void cxx_incomplete_type_error\t\t(const_tree, const_tree);\n #define cxx_incomplete_type_error(V,T) \\\n   (cxx_incomplete_type_diagnostic ((V), (T), 0))\n extern tree error_not_base_type\t\t\t(tree, tree);\n@@ -4859,8 +4859,8 @@ extern bool cp_dump_tree\t\t\t(void *, tree);\n /* In cp/cp-objcp-common.c.  */\n \n extern alias_set_type cxx_get_alias_set\t\t(tree);\n-extern bool cxx_warn_unused_global_decl\t\t(tree);\n-extern tree cp_expr_size\t\t\t(tree);\n+extern bool cxx_warn_unused_global_decl\t\t(const_tree);\n+extern tree cp_expr_size\t\t\t(const_tree);\n extern size_t cp_tree_size\t\t\t(enum tree_code);\n extern bool cp_var_mod_type_p\t\t\t(tree, tree);\n extern void cxx_initialize_diagnostics\t\t(struct diagnostic_context *);"}, {"sha": "6172296d73f349a97967a84f55f85fa1f333711a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -8962,7 +8962,7 @@ require_complete_types_for_parms (tree parms)\n /* Returns nonzero if T is a local variable.  */\n \n int\n-local_variable_p (tree t)\n+local_variable_p (const_tree t)\n {\n   if ((TREE_CODE (t) == VAR_DECL\n        /* A VAR_DECL with a context that is a _TYPE is a static data\n@@ -8981,7 +8981,7 @@ local_variable_p (tree t)\n    containing them is duplicated.)  */\n \n int\n-nonstatic_local_decl_p (tree t)\n+nonstatic_local_decl_p (const_tree t)\n {\n   return ((local_variable_p (t) && !TREE_STATIC (t))\n \t  || TREE_CODE (t) == LABEL_DECL"}, {"sha": "792f1fd0909b626a012e920c3292608914d7d146", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -2077,7 +2077,7 @@ pod_type_p (tree t)\n /* Nonzero iff type T is a class template implicit specialization.  */\n \n bool\n-class_tmpl_impl_spec_p (tree t)\n+class_tmpl_impl_spec_p (const_tree t)\n {\n   return CLASS_TYPE_P (t) && CLASSTYPE_TEMPLATE_INSTANTIATION (t);\n }\n@@ -2453,7 +2453,7 @@ cp_cannot_inline_tree_fn (tree* fnp)\n    function FN.  */\n \n int\n-cp_auto_var_in_fn_p (tree var, tree fn)\n+cp_auto_var_in_fn_p (const_tree var, const_tree fn)\n {\n   return (DECL_P (var) && DECL_CONTEXT (var) == fn\n \t  && nonstatic_local_decl_p (var));"}, {"sha": "b4d70162d9d045c4165f13f5a9b5afd2650fcfeb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -6910,9 +6910,9 @@ comp_ptr_ttypes_const (tree to, tree from)\n    elements for an array type.  */\n \n int\n-cp_type_quals (tree type)\n+cp_type_quals (const_tree type)\n {\n-  type = strip_array_types (type);\n+  type = const_strip_array_types (type);\n   if (type == error_mark_node)\n     return TYPE_UNQUALIFIED;\n   return TYPE_QUALS (type);"}, {"sha": "53e22023f27e9b3c8359e151820d14ec1642ee48", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -336,7 +336,7 @@ abstract_virtuals_error (tree decl, tree type)\n    pedwarn.  */\n \n void\n-cxx_incomplete_type_diagnostic (tree value, tree type, int diag_type)\n+cxx_incomplete_type_diagnostic (const_tree value, const_tree type, int diag_type)\n {\n   int decl = 0;\n   void (*p_msg) (const char *, ...) ATTRIBUTE_GCC_CXXDIAG(1,2);\n@@ -427,7 +427,7 @@ cxx_incomplete_type_diagnostic (tree value, tree type, int diag_type)\n    required by ../tree.c.  */\n #undef cxx_incomplete_type_error\n void\n-cxx_incomplete_type_error (tree value, tree type)\n+cxx_incomplete_type_error (const_tree value, const_tree type)\n {\n   cxx_incomplete_type_diagnostic (value, type, 0);\n }"}, {"sha": "c101d3ca81dc03ca6f10bbbcb7ed9403546a2d0d", "filename": "gcc/hooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -189,6 +189,12 @@ hook_bool_tree_false (tree a ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+bool\n+hook_bool_const_tree_false (const_tree a ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n bool\n hook_bool_tree_true (tree a ATTRIBUTE_UNUSED)\n {"}, {"sha": "6000cbb3344da2c6f4027116f85c9daf646540ff", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -31,6 +31,7 @@ extern bool hook_bool_mode_false (enum machine_mode);\n extern bool hook_bool_mode_rtx_false (enum machine_mode, rtx);\n extern bool hook_bool_mode_rtx_true (enum machine_mode, rtx);\n extern bool hook_bool_tree_false (tree);\n+extern bool hook_bool_const_tree_false (const_tree);\n extern bool hook_bool_tree_true (tree);\n extern bool hook_bool_tree_hwi_hwi_tree_false (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t\ttree);"}, {"sha": "41bf8e8363d6731fc8e404827ab2c7efde58a39a", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -55,13 +55,13 @@ extern int lhd_expand_decl (tree);\n extern void lhd_print_error_function (struct diagnostic_context *,\n \t\t\t\t      const char *);\n extern void lhd_set_decl_assembler_name (tree);\n-extern bool lhd_warn_unused_global_decl (tree);\n-extern void lhd_incomplete_type_error (tree, tree);\n+extern bool lhd_warn_unused_global_decl (const_tree);\n+extern void lhd_incomplete_type_error (const_tree, const_tree);\n extern tree lhd_type_promotes_to (tree);\n extern void lhd_register_builtin_type (tree, const char *);\n extern bool lhd_decl_ok_for_sibcall (tree);\n extern const char *lhd_comdat_group (tree);\n-extern tree lhd_expr_size (tree);\n+extern tree lhd_expr_size (const_tree);\n extern size_t lhd_tree_size (enum tree_code);\n extern HOST_WIDE_INT lhd_to_target_charset (HOST_WIDE_INT);\n extern tree lhd_expr_to_decl (tree, bool *, bool *, bool *);\n@@ -71,8 +71,8 @@ extern tree lhd_builtin_function (tree decl);\n extern tree lhd_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n \t\t\t\t\t     void *, struct pointer_set_t*);\n extern int lhd_tree_inlining_cannot_inline_tree_fn (tree *);\n-extern int lhd_tree_inlining_disregard_inline_limits (tree);\n-extern int lhd_tree_inlining_auto_var_in_fn_p (tree, tree);\n+extern int lhd_tree_inlining_disregard_inline_limits (const_tree);\n+extern int lhd_tree_inlining_auto_var_in_fn_p (const_tree, const_tree);\n extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n extern tree lhd_callgraph_analyze_expr (tree *, int *, tree);\n \n@@ -175,7 +175,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n \n /* Tree dump hooks.  */\n extern bool lhd_tree_dump_dump_tree (void *, tree);\n-extern int lhd_tree_dump_type_quals (tree);\n+extern int lhd_tree_dump_type_quals (const_tree);\n extern tree lhd_make_node (enum tree_code);\n \n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN lhd_tree_dump_dump_tree\n@@ -190,10 +190,10 @@ extern tree lhd_make_node (enum tree_code);\n    so we create a compile-time error instead.  */\n #define LANG_HOOKS_MAKE_TYPE lhd_make_node\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n-#define LANG_HOOKS_GENERIC_TYPE_P\thook_bool_tree_false\n+#define LANG_HOOKS_GENERIC_TYPE_P\thook_bool_const_tree_false\n #define LANG_HOOKS_TYPE_PROMOTES_TO lhd_type_promotes_to\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE lhd_register_builtin_type\n-#define LANG_HOOKS_TYPE_MAX_SIZE\tlhd_return_null_tree\n+#define LANG_HOOKS_TYPE_MAX_SIZE\tlhd_return_null_const_tree\n #define LANG_HOOKS_OMP_FIRSTPRIVATIZE_TYPE_SIZES \\\n   lhd_omp_firstprivatize_type_sizes\n #define LANG_HOOKS_HASH_TYPES\t\ttrue"}, {"sha": "1074615c72f7d945d59d8605be9b1b55ab7a9a19", "filename": "gcc/langhooks.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -136,7 +136,7 @@ lhd_staticp (tree ARG_UNUSED (exp))\n /* Called from check_global_declarations.  */\n \n bool\n-lhd_warn_unused_global_decl (tree decl)\n+lhd_warn_unused_global_decl (const_tree decl)\n {\n   /* This is what used to exist in check_global_declarations.  Probably\n      not many of these actually apply to non-C languages.  */\n@@ -209,7 +209,7 @@ lhd_register_builtin_type (tree ARG_UNUSED (type),\n \n /* Invalid use of an incomplete type.  */\n void\n-lhd_incomplete_type_error (tree ARG_UNUSED (value), tree type)\n+lhd_incomplete_type_error (const_tree ARG_UNUSED (value), const_tree type)\n {\n   gcc_assert (TREE_CODE (type) == ERROR_MARK);\n   return;\n@@ -316,7 +316,7 @@ lhd_tree_inlining_cannot_inline_tree_fn (tree *fnp)\n    if it would exceed inlining limits.  */\n \n int\n-lhd_tree_inlining_disregard_inline_limits (tree fn)\n+lhd_tree_inlining_disregard_inline_limits (const_tree fn)\n {\n   if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) != NULL)\n     return 1;\n@@ -328,7 +328,7 @@ lhd_tree_inlining_disregard_inline_limits (tree fn)\n    whether VT is an automatic variable defined in function FT.  */\n \n int\n-lhd_tree_inlining_auto_var_in_fn_p (tree var, tree fn)\n+lhd_tree_inlining_auto_var_in_fn_p (const_tree var, const_tree fn)\n {\n   return (DECL_P (var) && DECL_CONTEXT (var) == fn\n \t  && (((TREE_CODE (var) == VAR_DECL || TREE_CODE (var) == PARM_DECL)\n@@ -351,7 +351,7 @@ lhd_tree_dump_dump_tree (void *di ATTRIBUTE_UNUSED, tree t ATTRIBUTE_UNUSED)\n    language-specific way.  */\n \n int\n-lhd_tree_dump_type_quals (tree t)\n+lhd_tree_dump_type_quals (const_tree t)\n {\n   return TYPE_QUALS (t);\n }\n@@ -360,7 +360,7 @@ lhd_tree_dump_type_quals (tree t)\n    in a language-specific way.  Returns a tree for the size in bytes.  */\n \n tree\n-lhd_expr_size (tree exp)\n+lhd_expr_size (const_tree exp)\n {\n   if (DECL_P (exp)\n       && DECL_SIZE_UNIT (exp) != 0)"}, {"sha": "a62c6156670e7500d9ac4286033928365b6e63d0", "filename": "gcc/langhooks.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -39,8 +39,8 @@ struct lang_hooks_for_tree_inlining\n \t\t\t tree (*) (tree *, int *, void *),\n \t\t\t void *, struct pointer_set_t*);\n   int (*cannot_inline_tree_fn) (tree *);\n-  int (*disregard_inline_limits) (tree);\n-  int (*auto_var_in_fn_p) (tree, tree);\n+  int (*disregard_inline_limits) (const_tree);\n+  int (*auto_var_in_fn_p) (const_tree, const_tree);\n   bool (*var_mod_type_p) (tree, tree);\n };\n \n@@ -83,7 +83,7 @@ struct lang_hooks_for_tree_dump\n   bool (*dump_tree) (void *, tree);\n \n   /* Determine type qualifiers in a language-specific way.  */\n-  int (*type_quals) (tree);\n+  int (*type_quals) (const_tree);\n };\n \n /* Hooks related to types.  */\n@@ -104,7 +104,7 @@ struct lang_hooks_for_types\n \n   /* True if the type is an instantiation of a generic type,\n      e.g. C++ template implicit specializations.  */\n-  bool (*generic_p) (tree);\n+  bool (*generic_p) (const_tree);\n \n   /* Given a type, apply default promotions to unnamed function\n      arguments and return the new type.  Return the same type if no\n@@ -125,11 +125,11 @@ struct lang_hooks_for_types\n      invalid use of an incomplete type.  VALUE is the expression that\n      was used (or 0 if that isn't known) and TYPE is the type that was\n      invalid.  */\n-  void (*incomplete_type_error) (tree value, tree type);\n+  void (*incomplete_type_error) (const_tree value, const_tree type);\n \n   /* Called from assign_temp to return the maximum size, if there is one,\n      for a type.  */\n-  tree (*max_size) (tree);\n+  tree (*max_size) (const_tree);\n \n   /* Register language specific type size variables as potentially OpenMP\n      firstprivate variables.  */\n@@ -165,7 +165,7 @@ struct lang_hooks_for_decls\n \n   /* Returns true when we should warn for an unused global DECL.\n      We will already have checked that it has static binding.  */\n-  bool (*warn_unused_global) (tree);\n+  bool (*warn_unused_global) (const_tree);\n \n   /* Obtain a list of globals and do final output on them at end\n      of compilation */\n@@ -373,7 +373,7 @@ struct lang_hooks\n      expression in a language-dependent way.  Returns a tree for the size\n      in bytes.  A frontend can call lhd_expr_size to get the default\n      semantics in cases that it doesn't want to handle specially.  */\n-  tree (*expr_size) (tree);\n+  tree (*expr_size) (const_tree);\n \n   /* Convert a character from the host's to the target's character\n      set.  The character should be in what C calls the \"basic source"}, {"sha": "b57c404f6a1a5ead17e45ba7c2ae1f0d5f054234", "filename": "gcc/pointer-set.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fpointer-set.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fpointer-set.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-set.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -34,7 +34,7 @@ struct pointer_set_t\n   size_t n_slots;\t\t/* n_slots = 2^log_slots */\n   size_t n_elements;\n \n-  void **slots;\n+  const void **slots;\n };\n \n /* Use the multiplicative method, as described in Knuth 6.4, to obtain\n@@ -77,7 +77,7 @@ pointer_set_create (void)\n   result->log_slots = 8;\n   result->n_slots = (size_t) 1 << result->log_slots;\n \n-  result->slots = XCNEWVEC (void *, result->n_slots);\n+  result->slots = XCNEWVEC (const void *, result->n_slots);\n   return result;\n }\n \n@@ -93,7 +93,7 @@ pointer_set_destroy (struct pointer_set_t *pset)\n \n    Collisions are resolved by linear probing.  */\n int\n-pointer_set_contains (struct pointer_set_t *pset, const void *p)\n+pointer_set_contains (const struct pointer_set_t *pset, const void *p)\n {\n   size_t n = hash1 (p, pset->n_slots, pset->log_slots);\n \n@@ -115,7 +115,7 @@ pointer_set_contains (struct pointer_set_t *pset, const void *p)\n /* Subroutine of pointer_set_insert.  Return the insertion slot for P into\n    an empty element of SLOTS, an array of length N_SLOTS.  */\n static inline size_t\n-insert_aux (void *p, void **slots, size_t n_slots, size_t log_slots)\n+insert_aux (const void *p, const void **slots, size_t n_slots, size_t log_slots)\n {\n   size_t n = hash1 (p, n_slots, log_slots);\n   while (true)\n@@ -134,7 +134,7 @@ insert_aux (void *p, void **slots, size_t n_slots, size_t log_slots)\n /* Inserts P into PSET if it wasn't already there.  Returns nonzero\n    if it was already there. P must be nonnull.  */\n int\n-pointer_set_insert (struct pointer_set_t *pset, void *p)\n+pointer_set_insert (struct pointer_set_t *pset, const void *p)\n {\n   size_t n;\n \n@@ -144,12 +144,12 @@ pointer_set_insert (struct pointer_set_t *pset, void *p)\n     {\n       size_t new_log_slots = pset->log_slots + 1;\n       size_t new_n_slots = pset->n_slots * 2;\n-      void **new_slots = XCNEWVEC (void *, new_n_slots);\n+      const void **new_slots = XCNEWVEC (const void *, new_n_slots);\n       size_t i;\n \n       for (i = 0; i < pset->n_slots; ++i)\n         {\n-\t  void *value = pset->slots[i];\n+\t  const void *value = pset->slots[i];\n \t  n = insert_aux (value, new_slots, new_n_slots, new_log_slots);\n \t  new_slots[n] = value;\n \t}\n@@ -172,8 +172,8 @@ pointer_set_insert (struct pointer_set_t *pset, void *p)\n /* Pass each pointer in PSET to the function in FN, together with the fixed\n    parameter DATA.  If FN returns false, the iteration stops.  */\n \n-void pointer_set_traverse (struct pointer_set_t *pset,\n-\t\t\t   bool (*fn) (void *, void *), void *data)\n+void pointer_set_traverse (const struct pointer_set_t *pset,\n+\t\t\t   bool (*fn) (const void *, void *), void *data)\n {\n   size_t i;\n   for (i = 0; i < pset->n_slots; ++i)\n@@ -194,7 +194,7 @@ struct pointer_map_t\n   size_t n_slots;\t\t/* n_slots = 2^log_slots */\n   size_t n_elements;\n \n-  void **keys;\n+  const void **keys;\n   void **values;\n };\n \n@@ -208,7 +208,7 @@ pointer_map_create (void)\n   result->log_slots = 8;\n   result->n_slots = (size_t) 1 << result->log_slots;\n \n-  result->keys = XCNEWVEC (void *, result->n_slots);\n+  result->keys = XCNEWVEC (const void *, result->n_slots);\n   result->values = XCNEWVEC (void *, result->n_slots);\n   return result;\n }\n@@ -226,7 +226,7 @@ void pointer_map_destroy (struct pointer_map_t *pmap)\n \n    Collisions are resolved by linear probing.  */\n void **\n-pointer_map_contains (struct pointer_map_t *pmap, const void *p)\n+pointer_map_contains (const struct pointer_map_t *pmap, const void *p)\n {\n   size_t n = hash1 (p, pmap->n_slots, pmap->log_slots);\n \n@@ -248,7 +248,7 @@ pointer_map_contains (struct pointer_map_t *pmap, const void *p)\n /* Inserts P into PMAP if it wasn't already there.  Returns a pointer\n    to the value.  P must be nonnull.  */\n void **\n-pointer_map_insert (struct pointer_map_t *pmap, void *p)\n+pointer_map_insert (struct pointer_map_t *pmap, const void *p)\n {\n   size_t n;\n \n@@ -258,14 +258,14 @@ pointer_map_insert (struct pointer_map_t *pmap, void *p)\n     {\n       size_t new_log_slots = pmap->log_slots + 1;\n       size_t new_n_slots = pmap->n_slots * 2;\n-      void **new_keys = XCNEWVEC (void *, new_n_slots);\n+      const void **new_keys = XCNEWVEC (const void *, new_n_slots);\n       void **new_values = XCNEWVEC (void *, new_n_slots);\n       size_t i;\n \n       for (i = 0; i < pmap->n_slots; ++i)\n \tif (pmap->keys[i])\n \t  {\n-\t    void *key = pmap->keys[i];\n+\t    const void *key = pmap->keys[i];\n \t    n = insert_aux (key, new_keys, new_n_slots, new_log_slots);\n \t    new_keys[n] = key;\n \t    new_values[n] = pmap->values[i];\n@@ -293,8 +293,8 @@ pointer_map_insert (struct pointer_map_t *pmap, void *p)\n    to the value and the fixed parameter DATA.  If FN returns false, the\n    iteration stops.  */\n \n-void pointer_map_traverse (struct pointer_map_t *pmap,\n-\t\t\t   bool (*fn) (void *, void **, void *), void *data)\n+void pointer_map_traverse (const struct pointer_map_t *pmap,\n+\t\t\t   bool (*fn) (const void *, void **, void *), void *data)\n {\n   size_t i;\n   for (i = 0; i < pmap->n_slots; ++i)"}, {"sha": "f6b085c032b0f3a610ac95229d4165e013e53434", "filename": "gcc/pointer-set.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fpointer-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fpointer-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-set.h?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -24,18 +24,19 @@ struct pointer_set_t;\n struct pointer_set_t *pointer_set_create (void);\n void pointer_set_destroy (struct pointer_set_t *pset);\n \n-int pointer_set_contains (struct pointer_set_t *pset, const void *p);\n-int pointer_set_insert (struct pointer_set_t *pset, void *p);\n-void pointer_set_traverse (struct pointer_set_t *, bool (*) (void *, void *),\n+int pointer_set_contains (const struct pointer_set_t *pset, const void *p);\n+int pointer_set_insert (struct pointer_set_t *pset, const void *p);\n+void pointer_set_traverse (const struct pointer_set_t *,\n+\t\t\t   bool (*) (const void *, void *),\n \t\t\t   void *);\n \n struct pointer_map_t;\n struct pointer_map_t *pointer_map_create (void);\n void pointer_map_destroy (struct pointer_map_t *pmap);\n \n-void **pointer_map_contains (struct pointer_map_t *pmap, const void *p);\n-void **pointer_map_insert (struct pointer_map_t *pmap, void *p);\n-void pointer_map_traverse (struct pointer_map_t *,\n-\t\t\t   bool (*) (void *, void **, void *), void *);\n+void **pointer_map_contains (const struct pointer_map_t *pmap, const void *p);\n+void **pointer_map_insert (struct pointer_map_t *pmap, const void *p);\n+void pointer_map_traverse (const struct pointer_map_t *,\n+\t\t\t   bool (*) (const void *, void **, void *), void *);\n \n #endif  /* POINTER_SET_H  */"}, {"sha": "dbdfce4efdd3a50a9443f4429474bf49a5e48598", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -1337,7 +1337,7 @@ call_expr:;\n    empty.  */\n \n static bool\n-assert_is_empty (void *key ATTRIBUTE_UNUSED, void **value,\n+assert_is_empty (const void *key ATTRIBUTE_UNUSED, void **value,\n \t\t void *data ATTRIBUTE_UNUSED)\n {\n   gcc_assert (!*value);"}, {"sha": "0f19587ef59c327825cc937c137921e62cd0249e", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -626,7 +626,7 @@ tree_to_aff_combination_expand (tree expr, tree type, aff_tree *comb,\n    pointer_map_traverse.  */\n \n static bool\n-free_name_expansion (void *key ATTRIBUTE_UNUSED, void **value,\n+free_name_expansion (const void *key ATTRIBUTE_UNUSED, void **value,\n \t\t     void *data ATTRIBUTE_UNUSED)\n {\n   struct name_expansion *exp = *value;"}, {"sha": "e9be4d40440282ac3c0b2f9cddadd5fefb34e4f7", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -645,7 +645,7 @@ make_cond_expr_edges (basic_block bb)\n    element.  */\n \n static bool\n-edge_to_cases_cleanup (void *key ATTRIBUTE_UNUSED, void **value,\n+edge_to_cases_cleanup (const void *key ATTRIBUTE_UNUSED, void **value,\n \t\t       void *data ATTRIBUTE_UNUSED)\n {\n   tree t, next;"}, {"sha": "92d2ba8769b6f3d4a20cd4e42e489e8d5b4b47f8", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -1801,7 +1801,7 @@ tree_cons_stat (tree purpose, tree value, tree chain MEM_STAT_DECL)\n    make_unsigned_type).  */\n \n tree\n-size_in_bytes (tree type)\n+size_in_bytes (const_tree type)\n {\n   tree t;\n \n@@ -1847,7 +1847,7 @@ int_size_in_bytes (const_tree type)\n    or return -1 if the size can vary or is larger than an integer.  */\n \n HOST_WIDE_INT\n-max_int_size_in_bytes (tree type)\n+max_int_size_in_bytes (const_tree type)\n {\n   HOST_WIDE_INT size = -1;\n   tree size_tree;"}, {"sha": "b5ff51f6071b6b5b4999a059b40338387f7ecd1f", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7d7749c082ec30d145860578ebd905a709ce50/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ac7d7749c082ec30d145860578ebd905a709ce50", "patch": "@@ -4302,9 +4302,9 @@ extern tree expr_last (tree);\n extern const_tree const_expr_last (const_tree);\n extern tree expr_only (tree);\n extern const_tree const_expr_only (const_tree);\n-extern tree size_in_bytes (tree);\n+extern tree size_in_bytes (const_tree);\n extern HOST_WIDE_INT int_size_in_bytes (const_tree);\n-extern HOST_WIDE_INT max_int_size_in_bytes (tree);\n+extern HOST_WIDE_INT max_int_size_in_bytes (const_tree);\n extern tree bit_position (const_tree);\n extern HOST_WIDE_INT int_bit_position (const_tree);\n extern tree byte_position (const_tree);"}]}