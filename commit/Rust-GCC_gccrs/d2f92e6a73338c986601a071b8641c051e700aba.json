{"sha": "d2f92e6a73338c986601a071b8641c051e700aba", "node_id": "C_kwDOANBUbNoAKGQyZjkyZTZhNzMzMzhjOTg2NjAxYTA3MWI4NjQxYzA1MWU3MDBhYmE", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-05T12:31:31Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-05T12:31:59Z"}, "message": "Add is_item helper to AST and HIR\n\nBlockExpr can contain Items and Stmts this allows us to differentiate\nbetween them on the Stmt level.", "tree": {"sha": "8d4471a6232d4893e3e77e16a198fa18bdbd07d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d4471a6232d4893e3e77e16a198fa18bdbd07d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2f92e6a73338c986601a071b8641c051e700aba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f92e6a73338c986601a071b8641c051e700aba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f92e6a73338c986601a071b8641c051e700aba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f92e6a73338c986601a071b8641c051e700aba/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e992e371bbd896c8b605e1ebade5cad80b1b411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e992e371bbd896c8b605e1ebade5cad80b1b411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e992e371bbd896c8b605e1ebade5cad80b1b411"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "72f260989ba6b79d44ed3b364c0646b7a3b7d236", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f92e6a73338c986601a071b8641c051e700aba/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f92e6a73338c986601a071b8641c051e700aba/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=d2f92e6a73338c986601a071b8641c051e700aba", "patch": "@@ -822,6 +822,8 @@ class Stmt\n   virtual bool is_marked_for_strip () const = 0;\n   NodeId get_node_id () const { return node_id; }\n \n+  virtual bool is_item () const = 0;\n+\n protected:\n   Stmt () : node_id (Analysis::Mappings::get ()->get_next_node_id ()) {}\n \n@@ -847,6 +849,8 @@ class Item : public Stmt\n   add_crate_name (std::vector<std::string> &names ATTRIBUTE_UNUSED) const\n   {}\n \n+  bool is_item () const override final { return true; }\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual Item *clone_item_impl () const = 0;"}, {"sha": "a1b4e5778cd4d5eecdddb0f43445fb2f60416caa", "filename": "gcc/rust/ast/rust-stmt.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f92e6a73338c986601a071b8641c051e700aba/gcc%2Frust%2Fast%2Frust-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f92e6a73338c986601a071b8641c051e700aba/gcc%2Frust%2Fast%2Frust-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-stmt.h?ref=d2f92e6a73338c986601a071b8641c051e700aba", "patch": "@@ -46,6 +46,8 @@ class EmptyStmt : public Stmt\n   void mark_for_strip () override { marked_for_strip = true; }\n   bool is_marked_for_strip () const override { return marked_for_strip; }\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -169,6 +171,8 @@ class LetStmt : public Stmt\n     return type;\n   }\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -186,6 +190,8 @@ class ExprStmt : public Stmt\n public:\n   Location get_locus () const override final { return locus; }\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   ExprStmt (Location locus) : locus (locus) {}\n };"}, {"sha": "29e98faf7b0fa05b0c1c9a9e4cd5324d80b35c78", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f92e6a73338c986601a071b8641c051e700aba/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f92e6a73338c986601a071b8641c051e700aba/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=d2f92e6a73338c986601a071b8641c051e700aba", "patch": "@@ -41,6 +41,8 @@ class EmptyStmt : public Stmt\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -119,6 +121,8 @@ class LetStmt : public Stmt\n \n   HIR::Pattern *get_pattern () { return variables_pattern.get (); }\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -136,6 +140,8 @@ class ExprStmt : public Stmt\n public:\n   Location get_locus () const override final { return locus; }\n \n+  bool is_item () const override final { return false; }\n+\n protected:\n   ExprStmt (Analysis::NodeMapping mappings, Location locus)\n     : Stmt (std::move (mappings)), locus (locus)"}, {"sha": "d001eb13f89646b8bb2580e12d083fc359ea6b24", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f92e6a73338c986601a071b8641c051e700aba/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f92e6a73338c986601a071b8641c051e700aba/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=d2f92e6a73338c986601a071b8641c051e700aba", "patch": "@@ -104,6 +104,8 @@ class Stmt\n \n   const Analysis::NodeMapping &get_mappings () const { return mappings; }\n \n+  virtual bool is_item () const = 0;\n+\n protected:\n   Stmt (Analysis::NodeMapping mappings) : mappings (std::move (mappings)) {}\n \n@@ -140,6 +142,8 @@ class Item : public Stmt\n   AST::AttrVec &get_outer_attrs () { return outer_attrs; }\n   const AST::AttrVec &get_outer_attrs () const { return outer_attrs; }\n \n+  bool is_item () const override final { return true; }\n+\n protected:\n   // Constructor\n   Item (Analysis::NodeMapping mappings,"}]}