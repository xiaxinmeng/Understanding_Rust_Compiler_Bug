{"sha": "cca535a4c158308a7a3a6486b6b66efb576da585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhNTM1YTRjMTU4MzA4YTdhM2E2NDg2YjZiNjZlZmI1NzZkYTU4NQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2016-04-29T13:27:24Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-04-29T13:27:24Z"}, "message": "tree-vect-loop.c (vect_transform_loop): Fix nb_iterations_upper_bound computation for vectorized loop.\n\ngcc/\n\n\t* tree-vect-loop.c (vect_transform_loop): Fix\n\tnb_iterations_upper_bound computation for vectorized loop.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/vect-unpack-2.c (avx512bw_test): Avoid\n\toptimization of vector loop.\n\t* gcc.target/i386/vect-unpack-3.c: New test.\n\t* gcc.dg/vect/vect-nb-iter-ub-1.c: New test.\n\t* gcc.dg/vect/vect-nb-iter-ub-2.c: New test.\n\t* gcc.dg/vect/vect-nb-iter-ub-3.c: New test.\n\nFrom-SVN: r235639", "tree": {"sha": "d784c314f3a6795ebd3163ce9db4f9afa2d8ecd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d784c314f3a6795ebd3163ce9db4f9afa2d8ecd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cca535a4c158308a7a3a6486b6b66efb576da585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca535a4c158308a7a3a6486b6b66efb576da585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca535a4c158308a7a3a6486b6b66efb576da585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca535a4c158308a7a3a6486b6b66efb576da585/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2fff3db89fa064071835924a7a9e1751a0b383fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fff3db89fa064071835924a7a9e1751a0b383fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fff3db89fa064071835924a7a9e1751a0b383fa"}], "stats": {"total": 148, "additions": 143, "deletions": 5}, "files": [{"sha": "454b8aff27d1d1c0e616dd5434f42a0a2fa8664f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cca535a4c158308a7a3a6486b6b66efb576da585", "patch": "@@ -1,3 +1,8 @@\n+2016-04-29  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* tree-vect-loop.c (vect_transform_loop): Fix\n+\tnb_iterations_upper_bound computation for vectorized loop.\n+\n 2016-04-29  Marek Polacek  <polacek@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "24d3a836d4c3ff06fa42c162639da8b8adfb6ebd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cca535a4c158308a7a3a6486b6b66efb576da585", "patch": "@@ -1,3 +1,12 @@\n+2016-04-29  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* gcc.target/i386/vect-unpack-2.c (avx512bw_test): Avoid\n+\toptimization of vector loop.\n+\t* gcc.target/i386/vect-unpack-3.c: New test.\n+\t* gcc.dg/vect/vect-nb-iter-ub-1.c: New test.\n+\t* gcc.dg/vect/vect-nb-iter-ub-2.c: New test.\n+\t* gcc.dg/vect/vect-nb-iter-ub-3.c: New test.\n+\n 2016-04-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/70342"}, {"sha": "456866d11005b40ebac0f15bdac59e4323124b12", "filename": "gcc/testsuite/gcc.dg/vect/vect-nb-iter-ub-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-1.c?ref=cca535a4c158308a7a3a6486b6b66efb576da585", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse2 { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-additional-options \"-msse2 -fdump-tree-cunroll-details\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+int ii[31];\n+char cc[31] =\n+  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n+    20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 };\n+\n+void __attribute__((noinline,noclone))\n+foo (int s)\n+{\n+  int i;\n+  for (i = 0; i < s; i++)\n+    ii[i] = (int) cc[i];\n+}\n+\n+int main (int argc, const char **argv)\n+{\n+  int i;\n+  foo (31);\n+  for (i = 0; i < 31; i++)\n+    if (ii[i] != i)\n+      __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-tree-dump \"loop turned into non-loop; it never loops\" \"cunroll\" { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-tree-dump-not \"loop with 2 iterations completely unrolled\" \"cunroll\" { target { i?86-*-* x86_64-*-* } } } } */"}, {"sha": "cf1c1ef1e30b7c3edc9e7952b88c67b1bb1ff41b", "filename": "gcc/testsuite/gcc.dg/vect/vect-nb-iter-ub-2.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-2.c?ref=cca535a4c158308a7a3a6486b6b66efb576da585", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse2 { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-additional-options \"-msse2 -fdump-tree-cunroll-details\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+int ii[32];\n+char cc[66] =\n+  { 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0,\n+    10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0,\n+    20, 0, 21, 0, 22, 0, 23, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0,\n+    30, 0, 31, 0 };\n+\n+void __attribute__((noinline,noclone))\n+foo (int s)\n+{\n+  int i;\n+   for (i = 0; i < s; i++)\n+     ii[i] = (int) cc[i*2];\n+}\n+\n+int main (int argc, const char **argv)\n+{\n+  int i;\n+  foo (32);\n+  for (i = 0; i < 32; i++)\n+    if (ii[i] != i)\n+      __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-tree-dump \"loop turned into non-loop; it never loops\" \"cunroll\" { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-tree-dump-not \"loop with 2 iterations completely unrolled\" \"cunroll\" { target { i?86-*-* x86_64-*-* } } } } */"}, {"sha": "d8fe3073530146c2952f7774e5ef9d7113479452", "filename": "gcc/testsuite/gcc.dg/vect/vect-nb-iter-ub-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-nb-iter-ub-3.c?ref=cca535a4c158308a7a3a6486b6b66efb576da585", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse2 { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-additional-options \"-msse2 -fdump-tree-cunroll-details\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+int ii[33];\n+char cc[66] =\n+  { 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0,\n+    10, 0, 11, 0, 12, 0, 13, 0, 14, 0, 15, 0, 16, 0, 17, 0, 18, 0, 19, 0,\n+    20, 0, 21, 0, 22, 0, 23, 0, 24, 0, 25, 0, 26, 0, 27, 0, 28, 0, 29, 0,\n+    30, 0, 31, 0, 32, 0 };\n+\n+void __attribute__((noinline,noclone))\n+foo (int s)\n+{\n+  int i;\n+   for (i = 0; i < s; i++)\n+     ii[i] = (int) cc[i*2];\n+}\n+\n+int main (int argc, const char **argv)\n+{\n+  int i;\n+  foo (33);\n+  for (i = 0; i < 33; i++)\n+    if (ii[i] != i)\n+      __builtin_abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" { target { i?86-*-* x86_64-*-* } } } } */\n+/* { dg-final { scan-tree-dump-not \"loop turned into non-loop; it never loops\" \"cunroll\" { target { i?86-*-* x86_64-*-* } } } } */"}, {"sha": "51c518e6111d51ccd4741fee8c217a6c70db9c8b", "filename": "gcc/testsuite/gcc.target/i386/vect-unpack-2.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-2.c?ref=cca535a4c158308a7a3a6486b6b66efb576da585", "patch": "@@ -6,19 +6,22 @@\n \n #define N 120\n signed int yy[10000];\n+signed char zz[10000];\n \n void\n-__attribute__ ((noinline)) foo (signed char s)\n+__attribute__ ((noinline,noclone)) foo (int s)\n {\n-   signed char i;\n+   int i;\n    for (i = 0; i < s; i++)\n-     yy[i] = (signed int) i;\n+     yy[i] = zz[i];\n }\n \n void\n avx512bw_test ()\n {\n   signed char i;\n+  for (i = 0; i < N; i++)\n+    zz[i] = i;\n   foo (N);\n   for (i = 0; i < N; i++)\n     if ( (signed int)i != yy [i] )"}, {"sha": "eb8a93e9eea8eaab4331ecd99c44ddac1ca4fd0f", "filename": "gcc/testsuite/gcc.target/i386/vect-unpack-3.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-unpack-3.c?ref=cca535a4c158308a7a3a6486b6b66efb576da585", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-vect-details -ftree-vectorize -ffast-math -mavx512bw -save-temps\" } */\n+/* { dg-require-effective-target avx512bw } */\n+\n+#include \"avx512bw-check.h\"\n+\n+#define N 120\n+signed int yy[10000];\n+\n+void\n+__attribute__ ((noinline)) foo (signed char s)\n+{\n+   signed char i;\n+   for (i = 0; i < s; i++)\n+     yy[i] = (signed int) i;\n+}\n+\n+void\n+avx512bw_test ()\n+{\n+  signed char i;\n+  foo (N);\n+  for (i = 0; i < N; i++)\n+    if ( (signed int)i != yy [i] )\n+      abort ();\n+}\n+\n+/* { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" } } */\n+/* { dg-final { scan-assembler-not \"vpmovsxbw\\[ \\\\t\\]+\\[^\\n\\]*%zmm\" } } */"}, {"sha": "da98211b27c53237450278589dbd1692f187fded", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca535a4c158308a7a3a6486b6b66efb576da585/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=cca535a4c158308a7a3a6486b6b66efb576da585", "patch": "@@ -6921,11 +6921,13 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n   /* Reduce loop iterations by the vectorization factor.  */\n   scale_loop_profile (loop, GCOV_COMPUTE_SCALE (1, vectorization_factor),\n \t\t      expected_iterations / vectorization_factor);\n-  loop->nb_iterations_upper_bound\n-    = wi::udiv_floor (loop->nb_iterations_upper_bound, vectorization_factor);\n   if (LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo)\n       && loop->nb_iterations_upper_bound != 0)\n     loop->nb_iterations_upper_bound = loop->nb_iterations_upper_bound - 1;\n+  loop->nb_iterations_upper_bound\n+    = wi::udiv_floor (loop->nb_iterations_upper_bound + 1,\n+\t\t      vectorization_factor) - 1;\n+\n   if (loop->any_estimate)\n     {\n       loop->nb_iterations_estimate"}]}