{"sha": "4e1f39e43a61a05299036307745d54fadbfa4971", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUxZjM5ZTQzYTYxYTA1Mjk5MDM2MzA3NzQ1ZDU0ZmFkYmZhNDk3MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-02-10T13:51:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-02-10T13:51:23Z"}, "message": "re PR tree-optimization/60115 (wrong code at -O3 on x86_64-linux-gnu)\n\n2014-02-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/60115\n\t* tree-eh.c (tree_could_trap_p): Unify TARGET_MEM_REF and\n\tMEM_REF handling.  Properly verify that the accesses are not\n\tout of the objects bound.\n\n\t* gcc.dg/torture/pr60115.c: New testcase.\n\nFrom-SVN: r207656", "tree": {"sha": "ef09c2d939f1341f5a928daca4ec870b32320b8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef09c2d939f1341f5a928daca4ec870b32320b8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e1f39e43a61a05299036307745d54fadbfa4971", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1f39e43a61a05299036307745d54fadbfa4971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1f39e43a61a05299036307745d54fadbfa4971", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1f39e43a61a05299036307745d54fadbfa4971/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7af1c221d51f354ed7b6026a6629524fd2974d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7af1c221d51f354ed7b6026a6629524fd2974d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7af1c221d51f354ed7b6026a6629524fd2974d8"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "4abc6eb60c7ecee4faadd4303786238d32635b52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1f39e43a61a05299036307745d54fadbfa4971/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1f39e43a61a05299036307745d54fadbfa4971/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e1f39e43a61a05299036307745d54fadbfa4971", "patch": "@@ -1,3 +1,10 @@\n+2014-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60115\n+\t* tree-eh.c (tree_could_trap_p): Unify TARGET_MEM_REF and\n+\tMEM_REF handling.  Properly verify that the accesses are not\n+\tout of the objects bound.\n+\n 2014-02-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_override_options): Fix typo from"}, {"sha": "ebe1e51eb29a99bf37b486a403df5630cc9bcc1f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1f39e43a61a05299036307745d54fadbfa4971/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1f39e43a61a05299036307745d54fadbfa4971/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e1f39e43a61a05299036307745d54fadbfa4971", "patch": "@@ -1,3 +1,8 @@\n+2014-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60115\n+\t* gcc.dg/torture/pr60115.c: New testcase.\n+\n 2014-02-10  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* g++.dg/vect/pr33426-ivdep-3.cc: Require vect_int_mult as well."}, {"sha": "cf7f45dfb06a26128c267881d20d15027c3291b3", "filename": "gcc/testsuite/gcc.dg/torture/pr60115.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1f39e43a61a05299036307745d54fadbfa4971/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60115.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1f39e43a61a05299036307745d54fadbfa4971/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60115.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60115.c?ref=4e1f39e43a61a05299036307745d54fadbfa4971", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+\n+int a, b[2];\n+\n+int\n+main ()\n+{\n+lbl:\n+  for (; a; a--)\n+    if (b[10000])\n+      goto lbl;\n+\n+  return 0;\n+}"}, {"sha": "06941cd17458d975b4829fa2b4fbaaeb3f7a9079", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1f39e43a61a05299036307745d54fadbfa4971/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1f39e43a61a05299036307745d54fadbfa4971/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=4e1f39e43a61a05299036307745d54fadbfa4971", "patch": "@@ -2610,12 +2610,6 @@ tree_could_trap_p (tree expr)\n  restart:\n   switch (code)\n     {\n-    case TARGET_MEM_REF:\n-      if (TREE_CODE (TMR_BASE (expr)) == ADDR_EXPR\n-\t  && !TMR_INDEX (expr) && !TMR_INDEX2 (expr))\n-\treturn false;\n-      return !TREE_THIS_NOTRAP (expr);\n-\n     case COMPONENT_REF:\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n@@ -2642,10 +2636,36 @@ tree_could_trap_p (tree expr)\n \treturn false;\n       return !in_array_bounds_p (expr);\n \n+    case TARGET_MEM_REF:\n     case MEM_REF:\n-      if (TREE_CODE (TREE_OPERAND (expr, 0)) == ADDR_EXPR)\n+      if (TREE_CODE (TREE_OPERAND (expr, 0)) == ADDR_EXPR\n+\t  && tree_could_trap_p (TREE_OPERAND (TREE_OPERAND (expr, 0), 0)))\n+\treturn true;\n+      if (TREE_THIS_NOTRAP (expr))\n \treturn false;\n-      /* Fallthru.  */\n+      /* We cannot prove that the access is in-bounds when we have\n+         variable-index TARGET_MEM_REFs.  */\n+      if (code == TARGET_MEM_REF\n+\t  && (TMR_INDEX (expr) || TMR_INDEX2 (expr)))\n+\treturn true;\n+      if (TREE_CODE (TREE_OPERAND (expr, 0)) == ADDR_EXPR)\n+\t{\n+\t  tree base = TREE_OPERAND (TREE_OPERAND (expr, 0), 0);\n+\t  double_int off = mem_ref_offset (expr);\n+\t  if (off.is_negative ())\n+\t    return true;\n+\t  if (TREE_CODE (base) == STRING_CST)\n+\t    return double_int::from_uhwi (TREE_STRING_LENGTH (base)).ule (off);\n+\t  else if (DECL_SIZE_UNIT (base) == NULL_TREE\n+\t\t   || TREE_CODE (DECL_SIZE_UNIT (base)) != INTEGER_CST\n+\t\t   || tree_to_double_int (DECL_SIZE_UNIT (base)).ule (off))\n+\t    return true;\n+\t  /* Now we are sure the first byte of the access is inside\n+\t     the object.  */\n+\t  return false;\n+\t}\n+      return true;\n+\n     case INDIRECT_REF:\n       return !TREE_THIS_NOTRAP (expr);\n "}]}