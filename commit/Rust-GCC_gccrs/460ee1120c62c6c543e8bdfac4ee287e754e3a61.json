{"sha": "460ee1120c62c6c543e8bdfac4ee287e754e3a61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYwZWUxMTIwYzYyYzZjNTQzZThiZGZhYzRlZTI4N2U3NTRlM2E2MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-01-05T19:11:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-01-05T19:11:22Z"}, "message": "Makefile.in (gcc.o, [...]): Depend on prefix.h.\n\n        * Makefile.in (gcc.o, prefix.o, cccp.o, cpplib.o): Depend on prefix.h.\n        * cccp.c: Include prefix.h, don't prototype prefix.c functions.\n        (new_include_prefix): Constify char* parameters.\n        * cppfiles.c (read_name_map): Likewise.\n        (append_include_chain): Likewise.  Also, use a writable char* copy\n        of parameter `dir' which we then modify, rather than using the\n        parameter itself to store the new writable string.\n        (remap_filename): Constify some variables.  Also, use a writable\n        char* to store an allocated string which we will be modifying.\n        * cpplib.c: Include prefix.h, don't prototype prefix.c functions.\n        (cpp_start_read): Constify variable `str'.\n        * cpplib.h (append_include_chain): Constify a char* parameter.\n        * gcc.c Include prefix.h, don't prototype prefix.c functions.\n        (add_prefix, save_string): Constify char* parameters.\n        (fatal, error): Add ATTRIBUTE_PRINTF_1 to prototypes.\n        * prefix.c: Include prefix.h.\n        (get_key_value, translate_name, save_string, update_path,\n        set_std_prefix): Constify various char* parameters and variables.\n        (save_string): Use xmalloc, not malloc.\n        (translate_name): Use a writable temporary variable to create and\n        modify a string before setting it to a const char*.\n        * prefix.h: New file to prototype functions exported from prefix.c.\n\nFrom-SVN: r24498", "tree": {"sha": "f98dde49db8ef6f1d425e196eb7db84dab10c8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f98dde49db8ef6f1d425e196eb7db84dab10c8b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/460ee1120c62c6c543e8bdfac4ee287e754e3a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460ee1120c62c6c543e8bdfac4ee287e754e3a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/460ee1120c62c6c543e8bdfac4ee287e754e3a61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/460ee1120c62c6c543e8bdfac4ee287e754e3a61/comments", "author": null, "committer": null, "parents": [{"sha": "258ce95eb63d074fc9d39d7e1f82316a4fb7874d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258ce95eb63d074fc9d39d7e1f82316a4fb7874d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/258ce95eb63d074fc9d39d7e1f82316a4fb7874d"}], "stats": {"total": 163, "additions": 103, "deletions": 60}, "files": [{"sha": "caa7e12fb50def2b0d4016d5841bbc79eeb9ab85", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=460ee1120c62c6c543e8bdfac4ee287e754e3a61", "patch": "@@ -1,3 +1,35 @@\n+Tue Jan  5 21:57:42 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (gcc.o, prefix.o, cccp.o, cpplib.o): Depend on prefix.h.\n+\n+\t* cccp.c: Include prefix.h, don't prototype prefix.c functions.\n+\t(new_include_prefix): Constify char* parameters.\n+\n+\t* cppfiles.c (read_name_map): Likewise.\n+\t(append_include_chain): Likewise.  Also, use a writable char* copy\n+\tof parameter `dir' which we then modify, rather than using the\n+\tparameter itself to store the new writable string.\n+\t(remap_filename): Constify some variables.  Also, use a writable\n+\tchar* to store an allocated string which we will be modifying.\n+\n+\t* cpplib.c: Include prefix.h, don't prototype prefix.c functions.\n+\t(cpp_start_read): Constify variable `str'.\n+\n+\t* cpplib.h (append_include_chain): Constify a char* parameter.\n+\n+\t* gcc.c Include prefix.h, don't prototype prefix.c functions.\n+\t(add_prefix, save_string): Constify char* parameters.\n+\t(fatal, error): Add ATTRIBUTE_PRINTF_1 to prototypes.\n+\n+\t* prefix.c: Include prefix.h.\n+  \t(get_key_value, translate_name, save_string, update_path,\n+\tset_std_prefix): Constify various char* parameters and variables.\n+\t(save_string): Use xmalloc, not malloc.\n+\t(translate_name): Use a writable temporary variable to create and\n+\tmodify a string before setting it to a const char*.\n+\t\n+\t* prefix.h: New file to prototype functions exported from prefix.c.\n+\n Mon Jan  4 15:37:30 1999  Zack Weinberg  <zack@rabi.phys.columbia.edu>\n \n \t* cpplib.c (skip_if_group): Split out the logic that handles"}, {"sha": "754dc26f20e6bf92dff94d758bc38a8439df890b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=460ee1120c62c6c543e8bdfac4ee287e754e3a61", "patch": "@@ -1365,7 +1365,7 @@ DRIVER_DEFINES = \\\n   -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n   -DDEFAULT_TARGET_MACHINE=\\\"$(target_alias)\\\" \\\n   -DTOOLDIR_BASE_PREFIX=\\\"$(exec_prefix)/\\\"\n-gcc.o: gcc.c $(CONFIG_H) system.h multilib.h Makefile \\\n+gcc.o: gcc.c $(CONFIG_H) system.h multilib.h Makefile prefix.h \\\n \t$(lang_specs_files)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n   $(DRIVER_DEFINES) \\\n@@ -1402,7 +1402,7 @@ mkstemp.o: $(srcdir)/../libiberty/mkstemp.c $(CONFIG_H) system.h\n \t$(LN_S) $(srcdir)/../libiberty/mkstemp.c mkstemp.c\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) mkstemp.c\n \n-prefix.o: prefix.c $(CONFIG_H) system.h Makefile\n+prefix.o: prefix.c $(CONFIG_H) system.h Makefile prefix.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t-DPREFIX=\\\"$(prefix)\\\" \\\n \t  -c `echo $(srcdir)/prefix.c | sed 's,^\\./,,'`\n@@ -1882,7 +1882,7 @@ $(srcdir)/cexp.c: $(srcdir)/cexp.y\n # We use $(libsubdir)/$(unlibsubdir) to match the\n # -iprefix argument which gcc will pass if GCC_EXEC_PREFIX is used.\n cccp.o: cccp.c $(CONFIG_H) pcp.h version.c config.status system.h \\\n-           mbchar.h\n+           mbchar.h prefix.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n \t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gxx_include_dir)\\\" \\\n@@ -1910,7 +1910,8 @@ cppmain$(exeext): cppmain.o libcpp.a $(LIBDEPS)\n \n cppmain.o: cppmain.c $(CONFIG_H) cpplib.h machmode.h system.h\n \n-cpplib.o: cpplib.c $(CONFIG_H) cpplib.h machmode.h cpphash.h config.status system.h\n+cpplib.o: cpplib.c $(CONFIG_H) cpplib.h machmode.h cpphash.h config.status \\\n+\tsystem.h prefix.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n \t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gxx_include_dir)\\\" \\"}, {"sha": "5271960b580724b63ddd707e4c090607b2591454", "filename": "gcc/cccp.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=460ee1120c62c6c543e8bdfac4ee287e754e3a61", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA. */\n typedef unsigned char U_CHAR;\n \n #include \"pcp.h\"\n+#include \"prefix.h\"\n \n #ifdef MULTIBYTE_CHARS\n #include \"mbchar.h\"\n@@ -122,7 +123,6 @@ static int hack_vms_include_specification ();\n /* External declarations.  */\n \n extern char *version_string;\n-extern char *update_path PROTO((char *, char *));\n HOST_WIDE_INT parse_escape PROTO((char **, HOST_WIDE_INT));\n HOST_WIDE_INT parse_c_expression PROTO((char *, int));\n \f\n@@ -1029,7 +1029,7 @@ static void make_undef PROTO((char *, FILE_BUF *));\n \n static void make_assertion PROTO((char *, char *));\n \n-static struct file_name_list *new_include_prefix PROTO((struct file_name_list *, char *, char *, char *));\n+static struct file_name_list *new_include_prefix PROTO((struct file_name_list *, const char *, const char *, const char *));\n static void append_include_chain PROTO((struct file_name_list *, struct file_name_list *));\n \n static int quote_string_for_make PROTO((char *, char *));\n@@ -10436,9 +10436,9 @@ make_assertion (option, str)\n static struct file_name_list *\n new_include_prefix (prev_file_name, component, prefix, name)\n      struct file_name_list *prev_file_name;\n-     char *component;\n-     char *prefix;\n-     char *name;\n+     const char *component;\n+     const char *prefix;\n+     const char *name;\n {\n   if (name == 0)\n     fatal (\"Directory name missing after command line option\");"}, {"sha": "169809d11badf5d29fe62540c1a7330ed834df6b", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=460ee1120c62c6c543e8bdfac4ee287e754e3a61", "patch": "@@ -36,7 +36,8 @@ static struct include_hash *redundant_include_p\n \t\t\t\t\tPROTO ((cpp_reader *,\n \t\t\t\t\t\tstruct include_hash *,\n \t\t\t\t\t\tstruct file_name_list *));\n-static struct file_name_map *read_name_map\tPROTO ((cpp_reader *, char *));\n+static struct file_name_map *read_name_map\tPROTO ((cpp_reader *,\n+\t\t\t\t\t\t\tconst char *));\n static char *read_filename_string\tPROTO ((int, FILE *));\n static char *remap_filename \t\tPROTO ((cpp_reader *, char *,\n \t\t\t\t\t\tstruct file_name_list *));\n@@ -67,35 +68,35 @@ void\n append_include_chain (pfile, list, dir, sysp)\n      cpp_reader *pfile;\n      struct file_name_list **list;\n-     char *dir;\n+     const char *dir;\n      int sysp;\n {\n   struct file_name_list *new;\n   struct stat st;\n   unsigned int len;\n+  char * newdir = xstrdup (dir);\n \n-  dir = xstrdup (dir);\n-  simplify_pathname (dir);\n-  if (stat (dir, &st))\n+  simplify_pathname (newdir);\n+  if (stat (newdir, &st))\n     {\n       /* Dirs that don't exist are silently ignored. */\n       if (errno != ENOENT)\n-\tcpp_perror_with_name (pfile, dir);\n+\tcpp_perror_with_name (pfile, newdir);\n       return;\n     }\n \n   if (!S_ISDIR (st.st_mode))\n     {\n-      cpp_message (pfile, 1, \"%s: %s: Not a directory\", progname, dir);\n+      cpp_message (pfile, 1, \"%s: %s: Not a directory\", progname, newdir);\n       return;\n     }\n \n-  len = strlen(dir);\n+  len = strlen(newdir);\n   if (len > pfile->max_include_len)\n     pfile->max_include_len = len;\n   \n   new = (struct file_name_list *)xmalloc (sizeof (struct file_name_list));\n-  new->name = dir;\n+  new->name = newdir;\n   new->nlen = len;\n   new->next = *list;\n   new->ino  = st.st_ino;\n@@ -526,7 +527,7 @@ struct file_name_map_list\n static struct file_name_map *\n read_name_map (pfile, dirname)\n      cpp_reader *pfile;\n-     char *dirname;\n+     const char *dirname;\n {\n   register struct file_name_map_list *map_list_ptr;\n   char *name;\n@@ -607,8 +608,7 @@ remap_filename (pfile, name, loc)\n      struct file_name_list *loc;\n {\n   struct file_name_map *map;\n-  char *from;\n-  char *p, *dir;\n+  const char *from, *p, *dir;\n \n   if (! loc->name_map)\n     loc->name_map = read_name_map (pfile,\n@@ -644,9 +644,10 @@ remap_filename (pfile, name, loc)\n     }\n   else\n     {\n-      dir = (char *) alloca (p - name + 1);\n-      bcopy (name, dir, p - name);\n-      dir[p - name] = '\\0';\n+      char * newdir = (char *) alloca (p - name + 1);\n+      bcopy (name, newdir, p - name);\n+      newdir[p - name] = '\\0';\n+      dir = newdir;\n       from = p + 1;\n     }\n   "}, {"sha": "50187026d18355406763f2e9907c9ee13917a4e0", "filename": "gcc/cpplib.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=460ee1120c62c6c543e8bdfac4ee287e754e3a61", "patch": "@@ -38,13 +38,12 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"cpplib.h\"\n #include \"cpphash.h\"\n #include \"output.h\"\n+#include \"prefix.h\"\n \n #ifndef GET_ENV_PATH_LIST\n #define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n #endif\n \n-extern char *update_path PARAMS ((char *, char *));\n-\n /* By default, colon separates directories in a path.  */\n #ifndef PATH_SEPARATOR\n #define PATH_SEPARATOR ':'\n@@ -4942,7 +4941,7 @@ cpp_start_read (pfile, fname)\n       /* Some standard dirs are only for C++.  */\n       if (!p->cplusplus\n \t  || (opts->cplusplus && !opts->no_standard_cplusplus_includes)) {\n-\tchar *str = update_path (p->fname, p->component);\n+\tconst char *str = update_path (p->fname, p->component);\n \tappend_include_chain (pfile, &opts->system_include,\n \t\t\t      str, !p->cxx_aware);\n       }"}, {"sha": "233eedbe4cedccc8dc0504bdf033f9f2c0f2094b", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=460ee1120c62c6c543e8bdfac4ee287e754e3a61", "patch": "@@ -714,7 +714,7 @@ extern void cpp_print_containing_files PROTO ((cpp_reader *));\n /* In cppfiles.c */\n extern void append_include_chain\tPROTO ((cpp_reader *,\n \t\t\t\t\t\tstruct file_name_list **,\n-\t\t\t\t\t\tchar *, int));\n+\t\t\t\t\t\tconst char *, int));\n extern void merge_include_chains\tPROTO ((struct cpp_options *));\n extern int find_include_file\t\tPROTO ((cpp_reader *, char *,\n \t\t\t\t\t\tstruct file_name_list *,"}, {"sha": "854ed2395a6c5157e635044119d5c29b3f3b716b", "filename": "gcc/gcc.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=460ee1120c62c6c543e8bdfac4ee287e754e3a61", "patch": "@@ -36,10 +36,7 @@ compilation is specified by a string called a \"spec\".  */\n #include <signal.h>\n \n #include \"obstack.h\"\n-\n-/* ??? Need to find a GCC header to put these in.  */\n-extern char *update_path PROTO((char *, char *));\n-extern void set_std_prefix PROTO((char *, int));\n+#include \"prefix.h\"\n \n #ifdef VMS\n #define exit __posix_exit\n@@ -174,8 +171,8 @@ static struct compiler *lookup_compiler PROTO((char *, size_t, char *));\n static char *build_search_list\tPROTO((struct path_prefix *, char *, int));\n static void putenv_from_prefixes PROTO((struct path_prefix *, char *));\n static char *find_a_file\tPROTO((struct path_prefix *, char *, int));\n-static void add_prefix\t\tPROTO((struct path_prefix *, char *, char *,\n-\t\t\t\t       int, int, int *));\n+static void add_prefix\t\tPROTO((struct path_prefix *, const char *,\n+\t\t\t\t       const char *, int, int, int *));\n static char *skip_whitespace\tPROTO((char *));\n static void record_temp_file\tPROTO((char *, int, int));\n static void delete_if_ordinary\tPROTO((char *));\n@@ -184,7 +181,7 @@ static void delete_failure_queue PROTO((void));\n static void clear_failure_queue PROTO((void));\n static int check_live_switch\tPROTO((int, int));\n static char *handle_braces\tPROTO((char *));\n-static char *save_string\tPROTO((char *, int));\n+static char *save_string\tPROTO((const char *, int));\n extern int do_spec\t\tPROTO((char *));\n static int do_spec_1\t\tPROTO((char *, int, char *));\n static char *find_file\t\tPROTO((char *));\n@@ -199,8 +196,9 @@ static void print_multilib_info\tPROTO((void));\n static void pfatal_with_name\tPROTO((char *)) ATTRIBUTE_NORETURN;\n static void perror_with_name\tPROTO((char *));\n static void pfatal_pexecute\tPROTO((char *, char *)) ATTRIBUTE_NORETURN;\n-static void fatal\t\tPVPROTO((char *, ...)) ATTRIBUTE_NORETURN;\n-static void error\t\tPVPROTO((char *, ...));\n+static void fatal\t\tPVPROTO((char *, ...))\n+  ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1;\n+static void error\t\tPVPROTO((char *, ...)) ATTRIBUTE_PRINTF_1;\n static void display_help \tPROTO((void));\n \n void fancy_abort\t\tPROTO((void)) ATTRIBUTE_NORETURN;\n@@ -2101,8 +2099,8 @@ find_a_file (pprefix, name, mode)\n static void\n add_prefix (pprefix, prefix, component, first, require_machine_suffix, warn)\n      struct path_prefix *pprefix;\n-     char *prefix;\n-     char *component;\n+     const char *prefix;\n+     const char *component;\n      int first;\n      int require_machine_suffix;\n      int *warn;\n@@ -5233,8 +5231,8 @@ xrealloc (ptr, size)\n \n static char *\n save_string (s, len)\n-     char *s;\n-     int len;\n+  const char *s;\n+  int len;\n {\n   register char *result = xmalloc (len + 1);\n "}, {"sha": "5e4fdb1505e2e2a05ac97976a09e778ee6a8ca98", "filename": "gcc/prefix.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=460ee1120c62c6c543e8bdfac4ee287e754e3a61", "patch": "@@ -68,12 +68,13 @@ Boston, MA 02111-1307, USA.  */\n #ifdef _WIN32\n #include <windows.h>\n #endif\n+#include \"prefix.h\"\n \n-static char *std_prefix = PREFIX;\n+static const char *std_prefix = PREFIX;\n \n-static char *get_key_value\tPROTO((char *));\n-static char *translate_name\tPROTO((char *));\n-static char *save_string\tPROTO((char *, int));\n+static const char *get_key_value\tPROTO((char *));\n+static const char *translate_name\tPROTO((const char *));\n+static char *save_string\t\tPROTO((const char *, int));\n \n #ifdef _WIN32\n static char *lookup_key\t\tPROTO((char *));\n@@ -82,11 +83,11 @@ static HKEY reg_key = (HKEY) INVALID_HANDLE_VALUE;\n \n /* Given KEY, as above, return its value.  */\n \n-static char *\n+static const char *\n get_key_value (key)\n      char *key;\n {\n-  char *prefix = 0;\n+  const char *prefix = 0;\n   char *temp = 0;\n \n #ifdef _WIN32\n@@ -165,10 +166,10 @@ concat VPROTO((const char *first, ...))\n \n static char *\n save_string (s, len)\n-     char *s;\n-     int len;\n+  const char *s;\n+  int len;\n {\n-  register char *result = (char *) malloc (len + 1);\n+  register char *result = xmalloc (len + 1);\n \n   bcopy (s, result, len);\n   result[len] = 0;\n@@ -227,12 +228,13 @@ lookup_key (key)\n /* If NAME starts with a '@' or '$', apply the translation rules above\n    and return a new name.  Otherwise, return the given name.  */\n \n-static char *\n+static const char *\n translate_name (name)\n-     char *name;\n+  const char *name;\n {\n   char code = name[0];\n-  char *key, *prefix = 0;\n+  char *key;\n+  const char *prefix = 0;\n   int keylen;\n \n   if (code != '@' && code != '$')\n@@ -272,19 +274,20 @@ translate_name (name)\n #endif\n       )\n     {\n-      prefix = save_string (prefix, strlen (prefix));\n-      prefix[strlen (prefix) - 1] = 0;\n+      char * temp = save_string (prefix, strlen (prefix));\n+      temp[strlen (temp) - 1] = 0;\n+      prefix = temp;\n     }\n \n   return concat (prefix, name, NULL_PTR);\n }\n \n /* Update PATH using KEY if PATH starts with PREFIX.  */\n \n-char *\n+const char *\n update_path (path, key)\n-     char *path;\n-     char *key;\n+  const char *path;\n+  const char *key;\n {\n   if (! strncmp (path, std_prefix, strlen (std_prefix)) && key != 0)\n     {\n@@ -316,8 +319,8 @@ update_path (path, key)\n /* Reset the standard prefix */\n void\n set_std_prefix (prefix, len)\n-     char *prefix;\n-     int len;\n+  const char *prefix;\n+  int len;\n {\n   std_prefix = save_string (prefix, len);\n }"}, {"sha": "96dd122896afab5c61ee368e05c1c81f89730751", "filename": "gcc/prefix.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fprefix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/460ee1120c62c6c543e8bdfac4ee287e754e3a61/gcc%2Fprefix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.h?ref=460ee1120c62c6c543e8bdfac4ee287e754e3a61", "patch": "@@ -0,0 +1,9 @@\n+/* Provide prototypes for functions exported from prefix.c. */\n+\n+#ifndef __GCC_PREFIX_H__\n+#define __GCC_PREFIX_H__\n+\n+extern const char *update_path PARAMS ((const char *, const char *));\n+extern void set_std_prefix PARAMS ((const char *, int));\n+\n+#endif /* ! __GCC_PREFIX_H__ */"}]}