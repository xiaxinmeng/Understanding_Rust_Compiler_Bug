{"sha": "ca5f4331230013bba0a5e4d1c4340158b2991b65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E1ZjQzMzEyMzAwMTNiYmEwYTVlNGQxYzQzNDAxNThiMjk5MWI2NQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2012-05-29T14:41:53Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2012-05-29T14:41:53Z"}, "message": "expr.c (expand_expr_real_1 <normal_inner_ref>): Don't allocate a kept temp.\n\n\t* expr.c (expand_expr_real_1 <normal_inner_ref>): Don't allocate\n\ta kept temp.\n\t(expand_expr_real_1 <COMPOUND_LITERAL_EXPR>): Make unreachable.\n\t* gimple-fold.c (canonicalize_constructor_val): Canonicalize \n\tCOMPOUND_LITERAL_EXPR.\n\t* function.c (expand_function_start): Don't call expand_decl,\n\tinstead assert that we have RTL assigned.\n\t* tree-ssa-live.c (remove_unused_locals): Clear\n\tnonlocal_goto_save_area if its backing variable is removed.\n\t* stmt.c (expand_asm_operands): Remove handling of non-lvalues\n\tas mem inputs.\n\t(expand_decl): Assert that this does nothing.\n\t* calls.c (expand_call): Don't call mark_temp_addr_taken.\n\n\t* c-tree.h (c_expand_decl): Remove prototype.\n\nc-family/\n\t* c-common.h (c_expand_decl): Remove prototype.\n\nada/\n\t* gcc-interface/utils.c (create_var_decl_1): Don't call expand_decl.\n\nFrom-SVN: r187962", "tree": {"sha": "5534a3c29342dd48c087ead51be0face86e90762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5534a3c29342dd48c087ead51be0face86e90762"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca5f4331230013bba0a5e4d1c4340158b2991b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5f4331230013bba0a5e4d1c4340158b2991b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5f4331230013bba0a5e4d1c4340158b2991b65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5f4331230013bba0a5e4d1c4340158b2991b65/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "508ef0c675b409e2c92c8078a2dc5043da88db1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/508ef0c675b409e2c92c8078a2dc5043da88db1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/508ef0c675b409e2c92c8078a2dc5043da88db1b"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "5d2b2e48e68b6b4cbb0c233f2cc653d41c9f0fc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -1,3 +1,21 @@\n+2012-05-29  Michael Matz  <matz@suse.de>\n+\n+\t* c-tree.h (c_expand_decl): Remove prototype.\n+\n+\t* expr.c (expand_expr_real_1 <normal_inner_ref>): Don't allocate\n+\ta kept temp.\n+\t(expand_expr_real_1 <COMPOUND_LITERAL_EXPR>): Make unreachable.\n+\t* gimple-fold.c (canonicalize_constructor_val): Canonicalize \n+\tCOMPOUND_LITERAL_EXPR.\n+\t* function.c (expand_function_start): Don't call expand_decl,\n+\tinstead assert that we have RTL assigned.\n+\t* tree-ssa-live.c (remove_unused_locals): Clear\n+\tnonlocal_goto_save_area if its backing variable is removed.\n+\t* stmt.c (expand_asm_operands): Remove handling of non-lvalues\n+\tas mem inputs.\n+\t(expand_decl): Assert that this does nothing.\n+\t* calls.c (expand_call): Don't call mark_temp_addr_taken.\n+\n 2012-05-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53516"}, {"sha": "e031f46d6e4e8195418c855c3c790432deaf963b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -1,3 +1,7 @@\n+2012-05-29  Michael Matz  <matz@suse.de>\n+\n+\t* gcc-interface/utils.c (create_var_decl_1): Don't call expand_decl.\n+\n 2012-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (variant_desc): Rename 'record' to 'new_type'."}, {"sha": "5800308470066435bb6ea8af4250087886792eb9", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -2227,8 +2227,6 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n       if (global_bindings_p ())\n \trest_of_decl_compilation (var_decl, true, 0);\n     }\n-  else\n-    expand_decl (var_decl);\n \n   return var_decl;\n }"}, {"sha": "a6a3623d781232693e5a95da61bd7ac8e55fd714", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -1,3 +1,7 @@\n+2012-05-29  Michael Matz  <matz@suse.de>\n+\n+\t* c-common.h (c_expand_decl): Remove prototype.\n+\n 2012-05-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c.opt (Wmissing-braces): Use LangEnabledBy(C ObjC,Wall)."}, {"sha": "c8e6ce195778c7653d6889a27e53a638a2f5c578", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -544,8 +544,6 @@ extern tree build_modify_expr (location_t, tree, tree, enum tree_code,\n \t\t\t       location_t, tree, tree);\n extern tree build_indirect_ref (location_t, tree, ref_operator);\n \n-extern int c_expand_decl (tree);\n-\n extern int field_decl_cmp (const void *, const void *);\n extern void resort_sorted_fields (void *, void *, gt_pointer_operator,\n \t\t\t\t  void *);"}, {"sha": "8541747a339f25d643bad5e38295db298fd7fda4", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -535,7 +535,6 @@ extern void store_parm_decls (void);\n extern void store_parm_decls_from (struct c_arg_info *);\n extern tree xref_tag (enum tree_code, tree);\n extern struct c_typespec parser_xref_tag (location_t, enum tree_code, tree);\n-extern int c_expand_decl (tree);\n extern struct c_parm *build_c_parm (struct c_declspecs *, tree,\n \t\t\t\t    struct c_declarator *);\n extern struct c_declarator *build_attrs_declarator (tree,"}, {"sha": "ea9e5cf71a8dba8c0fe99fc0291446d9e86b0b84", "filename": "gcc/calls.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -2405,8 +2405,6 @@ expand_call (tree exp, rtx target, int ignore)\n \t       specified.  If we were to allocate space on the stack here,\n \t       we would have no way of knowing when to free it.  */\n \t    rtx d = assign_temp (rettype, 0, 1, 1);\n-\n-\t    mark_temp_addr_taken (d);\n \t    structure_value_addr = XEXP (d, 0);\n \t    target = 0;\n \t  }"}, {"sha": "fd995d173edbd5619dc334134f7701a1cb384cae", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -9922,7 +9922,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    tree nt = build_qualified_type (TREE_TYPE (tem),\n \t\t\t\t\t    (TYPE_QUALS (TREE_TYPE (tem))\n \t\t\t\t\t     | TYPE_QUAL_CONST));\n-\t    memloc = assign_temp (nt, 1, 1, 1);\n+\t    memloc = assign_temp (nt, 0, 1, 1);\n \t    emit_move_insn (memloc, op0);\n \t    op0 = memloc;\n \t    mem_attrs_from_type = true;\n@@ -10425,6 +10425,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n     case POSTDECREMENT_EXPR:\n     case LOOP_EXPR:\n     case EXIT_EXPR:\n+    case COMPOUND_LITERAL_EXPR:\n       /* Lowered by gimplify.c.  */\n       gcc_unreachable ();\n \n@@ -10439,7 +10440,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return expand_expr_real (treeop0, original_target, tmode,\n \t\t\t       modifier, alt_rtl);\n \n-    case COMPOUND_LITERAL_EXPR:\n+#if 0\n       {\n \t/* Initialize the anonymous variable declared in the compound\n \t   literal, then return the variable.  */\n@@ -10459,6 +10460,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \treturn expand_expr_real (decl, original_target, tmode,\n \t\t\t\t modifier, alt_rtl);\n       }\n+#endif\n \n     default:\n       return expand_expr_real_2 (&ops, target, tmode, modifier);"}, {"sha": "0fd4d36bfcc3952e9c629d46d26f1b7fff4a0e82", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -4788,11 +4788,8 @@ expand_function_start (tree subr)\n       tree t_save;\n       rtx r_save;\n \n-      /* ??? We need to do this save early.  Unfortunately here is\n-\t before the frame variable gets declared.  Help out...  */\n       tree var = TREE_OPERAND (cfun->nonlocal_goto_save_area, 0);\n-      if (!DECL_RTL_SET_P (var))\n-\texpand_decl (var);\n+      gcc_assert (DECL_RTL_SET_P (var));\n \n       t_save = build4 (ARRAY_REF,\n \t\t       TREE_TYPE (TREE_TYPE (cfun->nonlocal_goto_save_area)),"}, {"sha": "b2bd33788028349ad5087231f0ae209d3de24046", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -154,6 +154,12 @@ canonicalize_constructor_val (tree cval, tree from_decl)\n   if (TREE_CODE (cval) == ADDR_EXPR)\n     {\n       tree base = get_base_address (TREE_OPERAND (cval, 0));\n+      if (!base && TREE_CODE (TREE_OPERAND (cval, 0)) == COMPOUND_LITERAL_EXPR)\n+\t{\n+\t  base = COMPOUND_LITERAL_EXPR_DECL (TREE_OPERAND (cval, 0));\n+\t  if (base)\n+\t    TREE_OPERAND (cval, 0) = base;\n+\t}\n       if (!base)\n \treturn NULL_TREE;\n "}, {"sha": "a9258b15c7d31d747df7fdd100b6df85793b7759", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -910,6 +910,8 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \t\t at this point.  Ignore it: clearly this *is* a memory.  */\n \t    }\n \t  else\n+\t    gcc_unreachable ();\n+#if 0\n \t    {\n \t      warning (0, \"use of memory input without lvalue in \"\n \t\t       \"asm operand %d is deprecated\", i + noutputs);\n@@ -935,6 +937,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n \t\t  op = memloc;\n \t\t}\n \t    }\n+#endif\n \t}\n \n       generating_concat_p = old_generating_concat_p;\n@@ -1703,6 +1706,7 @@ expand_decl (tree decl)\n      type in case this node is used in a reference.  */\n   if (TREE_CODE (decl) == CONST_DECL)\n     {\n+      gcc_unreachable ();\n       DECL_MODE (decl) = TYPE_MODE (type);\n       DECL_ALIGN (decl) = TYPE_ALIGN (type);\n       DECL_SIZE (decl) = TYPE_SIZE (type);\n@@ -1720,6 +1724,7 @@ expand_decl (tree decl)\n   if (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n     return;\n \n+  gcc_unreachable ();\n   /* Create the RTL representation for the variable.  */\n \n   if (type == error_mark_node)"}, {"sha": "252020624b444e740ff41202a9f77ed1a2e3b1cb", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4331230013bba0a5e4d1c4340158b2991b65/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=ca5f4331230013bba0a5e4d1c4340158b2991b65", "patch": "@@ -835,6 +835,9 @@ remove_unused_locals (void)\n \t    {\n \t      if (var_ann (var))\n \t\tremove_referenced_var (var);\n+\t      if (cfun->nonlocal_goto_save_area\n+\t\t  && TREE_OPERAND (cfun->nonlocal_goto_save_area, 0) == var)\n+\t\tcfun->nonlocal_goto_save_area = NULL;\n \t      continue;\n \t    }\n \t}"}]}