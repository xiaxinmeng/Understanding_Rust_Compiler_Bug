{"sha": "3b14e3af06227a2c4de9bdaf685d6e7300c689c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IxNGUzYWYwNjIyN2EyYzRkZTliZGFmNjg1ZDZlNzMwMGM2ODljOQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2003-07-10T19:48:43Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2003-07-10T19:48:43Z"}, "message": "gcse.c (load_kills_store, [...]): Keep track of the correct dependency function to use.\n\n\t* gcse.c (load_kills_store, find_loads, store_killed_in_insn,\n\tstore_killed_after, store_killed_before): Keep track of the correct\n\tdependency function to use.\n\nFrom-SVN: r69198", "tree": {"sha": "33fed936f18c11be4b0586d319ff1fe029325559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33fed936f18c11be4b0586d319ff1fe029325559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b14e3af06227a2c4de9bdaf685d6e7300c689c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b14e3af06227a2c4de9bdaf685d6e7300c689c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b14e3af06227a2c4de9bdaf685d6e7300c689c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b14e3af06227a2c4de9bdaf685d6e7300c689c9/comments", "author": null, "committer": null, "parents": [{"sha": "584672eef4775f2ceaaa390e6d9757898077ae2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584672eef4775f2ceaaa390e6d9757898077ae2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584672eef4775f2ceaaa390e6d9757898077ae2c"}], "stats": {"total": 75, "additions": 52, "deletions": 23}, "files": [{"sha": "fa80ec781b3b734566c4f983ba163aa4d77ce34d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14e3af06227a2c4de9bdaf685d6e7300c689c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14e3af06227a2c4de9bdaf685d6e7300c689c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b14e3af06227a2c4de9bdaf685d6e7300c689c9", "patch": "@@ -1,3 +1,9 @@\n+2003-07-10  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* gcse.c (load_kills_store, find_loads, store_killed_in_insn,\n+\tstore_killed_after, store_killed_before): Keep track of the correct\n+\tdependency function to use.\n+\n 2003-07-10  Steven Bosscher  <steven@gcc.gnu.org>\n \t* toplev.c (do_compile): Don't try to open dump files before\n \tlang_dependent_init initializes dump_base_name."}, {"sha": "8ddcd73621ec3108dd223259e87e39ad312e9851", "filename": "gcc/gcse.c", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14e3af06227a2c4de9bdaf685d6e7300c689c9/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14e3af06227a2c4de9bdaf685d6e7300c689c9/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=3b14e3af06227a2c4de9bdaf685d6e7300c689c9", "patch": "@@ -682,9 +682,9 @@ static rtx extract_mentioned_regs (rtx);\n static rtx extract_mentioned_regs_helper (rtx, rtx);\n static void find_moveable_store (rtx, int *, int *);\n static int compute_store_table (void);\n-static bool load_kills_store (rtx, rtx);\n-static bool find_loads (rtx, rtx);\n-static bool store_killed_in_insn (rtx, rtx, rtx);\n+static bool load_kills_store (rtx, rtx, int);\n+static bool find_loads (rtx, rtx, int);\n+static bool store_killed_in_insn (rtx, rtx, rtx, int);\n static bool store_killed_after (rtx, rtx, rtx, basic_block, int *, rtx *);\n static bool store_killed_before (rtx, rtx, rtx, basic_block, int *);\n static void build_store_vectors (void);\n@@ -7186,21 +7186,27 @@ compute_store_table (void)\n   return ret;\n }\n \n-/* Check to see if the load X is aliased with STORE_PATTERN.  */\n+/* Check to see if the load X is aliased with STORE_PATTERN.\n+   AFTER is true if we are checking the case when STORE_PATTERN occurs\n+   after the X.  */\n \n static bool\n-load_kills_store (rtx x, rtx store_pattern)\n+load_kills_store (rtx x, rtx store_pattern, int after)\n {\n-  if (true_dependence (x, GET_MODE (x), store_pattern, rtx_addr_varies_p))\n-    return true;\n-  return false;\n+  if (after)\n+    return anti_dependence (x, store_pattern);\n+  else\n+    return true_dependence (store_pattern, GET_MODE (store_pattern), x,\n+\t\t\t    rtx_addr_varies_p);\n }\n \n /* Go through the entire insn X, looking for any loads which might alias\n-   STORE_PATTERN.  Return true if found.  */\n+   STORE_PATTERN.  Return true if found.\n+   AFTER is true if we are checking the case when STORE_PATTERN occurs\n+   after the insn X.  */\n \n static bool\n-find_loads (rtx x, rtx store_pattern)\n+find_loads (rtx x, rtx store_pattern, int after)\n {\n   const char * fmt;\n   int i, j;\n@@ -7214,7 +7220,7 @@ find_loads (rtx x, rtx store_pattern)\n \n   if (GET_CODE (x) == MEM)\n     {\n-      if (load_kills_store (x, store_pattern))\n+      if (load_kills_store (x, store_pattern, after))\n \treturn true;\n     }\n \n@@ -7224,19 +7230,20 @@ find_loads (rtx x, rtx store_pattern)\n   for (i = GET_RTX_LENGTH (GET_CODE (x)) - 1; i >= 0 && !ret; i--)\n     {\n       if (fmt[i] == 'e')\n-\tret |= find_loads (XEXP (x, i), store_pattern);\n+\tret |= find_loads (XEXP (x, i), store_pattern, after);\n       else if (fmt[i] == 'E')\n \tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n-\t  ret |= find_loads (XVECEXP (x, i, j), store_pattern);\n+\t  ret |= find_loads (XVECEXP (x, i, j), store_pattern, after);\n     }\n   return ret;\n }\n \n /* Check if INSN kills the store pattern X (is aliased with it).\n-   Return true if it it does.  */\n+   AFTER is true if we are checking the case when store X occurs\n+   after the insn.  Return true if it it does.  */\n \n static bool\n-store_killed_in_insn (rtx x, rtx x_regs, rtx insn)\n+store_killed_in_insn (rtx x, rtx x_regs, rtx insn, int after)\n {\n   rtx reg, base;\n \n@@ -7268,15 +7275,31 @@ store_killed_in_insn (rtx x, rtx x_regs, rtx insn)\n   if (GET_CODE (PATTERN (insn)) == SET)\n     {\n       rtx pat = PATTERN (insn);\n+      rtx dest = SET_DEST (pat);\n+\n+      if (GET_CODE (dest) == SIGN_EXTRACT\n+\t  || GET_CODE (dest) == ZERO_EXTRACT)\n+\tdest = XEXP (dest, 0);\n+\n       /* Check for memory stores to aliased objects.  */\n-      if (GET_CODE (SET_DEST (pat)) == MEM && !expr_equiv_p (SET_DEST (pat), x))\n-\t/* pretend its a load and check for aliasing.  */\n-\tif (find_loads (SET_DEST (pat), x))\n-\t  return true;\n-      return find_loads (SET_SRC (pat), x);\n+      if (GET_CODE (dest) == MEM\n+\t  && !expr_equiv_p (dest, x))\n+\t{\n+\t  if (after)\n+\t    {\n+\t      if (output_dependence (dest, x))\n+\t\treturn true;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (output_dependence (x, dest))\n+\t\treturn true;\n+\t    }\n+\t}\n+      return find_loads (SET_SRC (pat), x, after);\n     }\n   else\n-    return find_loads (PATTERN (insn), x);\n+    return find_loads (PATTERN (insn), x, after);\n }\n \n /* Returns true if the expression X is loaded or clobbered on or after INSN\n@@ -7300,7 +7323,7 @@ store_killed_after (rtx x, rtx x_regs, rtx insn, basic_block bb,\n \n   /* Scan from the end, so that fail_insn is determined correctly.  */\n   for (act = last; act != PREV_INSN (insn); act = PREV_INSN (act))\n-    if (store_killed_in_insn (x, x_regs, act))\n+    if (store_killed_in_insn (x, x_regs, act, false))\n       {\n \tif (fail_insn)\n \t  *fail_insn = act;\n@@ -7323,7 +7346,7 @@ store_killed_before (rtx x, rtx x_regs, rtx insn, basic_block bb,\n     return true;\n \n   for ( ; insn != PREV_INSN (first); insn = PREV_INSN (insn))\n-    if (store_killed_in_insn (x, x_regs, insn))\n+    if (store_killed_in_insn (x, x_regs, insn, true))\n       return true;\n \n   return false;"}]}