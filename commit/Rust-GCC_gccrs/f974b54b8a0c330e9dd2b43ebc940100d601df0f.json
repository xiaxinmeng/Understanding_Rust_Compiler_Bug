{"sha": "f974b54b8a0c330e9dd2b43ebc940100d601df0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk3NGI1NGI4YTBjMzMwZTlkZDJiNDNlYmM5NDAxMDBkNjAxZGYwZg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-05-10T20:00:04Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-05-10T20:02:35Z"}, "message": "Avoid -Walloca-larger-than and -Wvla-larger-than false postives and negatives.\n\nResolves:\nPR middle-end/100425 - missing -Walloca-larger-than with -O0\nPR middle-end/100510 - bogus -Wvla-large-than with -Walloca\n\ngcc/ChangeLog:\n\n\tPR middle-end/100425\n\tPR middle-end/100510\n\t* gimple-ssa-warn-alloca.c (pass_walloca::firast_time_p): Rename...\n\t(pass_walloca::xlimit_certain_p): ...to this.\n\t(pass_walloca::gate): Execute for any kind of handled warning.\n\t(pass_walloca::execute): Avoid issuing \"maybe\" and \"unbounded\"\n\twarnings when xlimit_certain_p is set.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/100425\n\tPR middle-end/100510\n\t* c-c++-common/Walloca-larger-than.C: New test.\n\t* gcc.dg/Walloca-larger-than-4.c: New test.\n\t* gcc.dg/Wvla-larger-than-5.c: New test.\n\t* gcc.dg/pr79972.c: Remove unexpected warning directive.", "tree": {"sha": "43298bab245d60accec860e2f6409f991bf1aef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43298bab245d60accec860e2f6409f991bf1aef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f974b54b8a0c330e9dd2b43ebc940100d601df0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f974b54b8a0c330e9dd2b43ebc940100d601df0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f974b54b8a0c330e9dd2b43ebc940100d601df0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f974b54b8a0c330e9dd2b43ebc940100d601df0f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d89e61f7ebfe75ca752e62bd29b58cb957235c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d89e61f7ebfe75ca752e62bd29b58cb957235c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d89e61f7ebfe75ca752e62bd29b58cb957235c"}], "stats": {"total": 103, "additions": 93, "deletions": 10}, "files": [{"sha": "e9a24d4d1d0da920251ad6ef9b2d78ddd90912e0", "filename": "gcc/gimple-ssa-warn-alloca.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974b54b8a0c330e9dd2b43ebc940100d601df0f/gcc%2Fgimple-ssa-warn-alloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974b54b8a0c330e9dd2b43ebc940100d601df0f/gcc%2Fgimple-ssa-warn-alloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-alloca.c?ref=f974b54b8a0c330e9dd2b43ebc940100d601df0f", "patch": "@@ -56,31 +56,30 @@ class pass_walloca : public gimple_opt_pass\n {\n public:\n   pass_walloca (gcc::context *ctxt)\n-    : gimple_opt_pass(pass_data_walloca, ctxt), first_time_p (false)\n+    : gimple_opt_pass(pass_data_walloca, ctxt), xlimit_certain_p (false)\n   {}\n   opt_pass *clone () { return new pass_walloca (m_ctxt); }\n   void set_pass_param (unsigned int n, bool param)\n     {\n       gcc_assert (n == 0);\n-      first_time_p = param;\n+      // Set to true to enable only warnings for alloca calls that\n+      // are certainly in excess of the limit.  This includes calls\n+      // with constant arguments but excludes those in ranges (that\n+      // can only be determined by range analysis) as well as\n+      // the \"may be too large\" kind.\n+      xlimit_certain_p = param;\n     }\n   virtual bool gate (function *);\n   virtual unsigned int execute (function *);\n \n  private:\n   // Set to TRUE the first time we run this pass on a function.\n-  bool first_time_p;\n+  bool xlimit_certain_p;\n };\n \n bool\n pass_walloca::gate (function *fun ATTRIBUTE_UNUSED)\n {\n-  // The first time this pass is called, it is called before\n-  // optimizations have been run and range information is unavailable,\n-  // so we can only perform strict alloca checking.\n-  if (first_time_p)\n-    return warn_alloca != 0;\n-\n   // Warning is disabled when its size limit is greater than PTRDIFF_MAX\n   // for the target maximum, which makes the limit negative since when\n   // represented in signed HOST_WIDE_INT.\n@@ -317,6 +316,9 @@ pass_walloca::execute (function *fun)\n \t      break;\n \t    case ALLOCA_BOUND_MAYBE_LARGE:\n \t      {\n+\t\tif (xlimit_certain_p)\n+\t\t  break;\n+\n \t\tauto_diagnostic_group d;\n \t\tif (warning_at (loc, wcode,\n \t\t\t\t(is_vla\n@@ -354,6 +356,9 @@ pass_walloca::execute (function *fun)\n \t      }\n \t      break;\n \t    case ALLOCA_UNBOUNDED:\n+\t      if (xlimit_certain_p)\n+\t\tbreak;\n+\n \t      warning_at (loc, wcode,\n \t\t\t  (is_vla\n \t\t\t   ? G_(\"%Gunbounded use of variable-length array\")"}, {"sha": "464ea242a7adc7abecb5ac65b759e27790fa9675", "filename": "gcc/testsuite/c-c++-common/Walloca-larger-than.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974b54b8a0c330e9dd2b43ebc940100d601df0f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWalloca-larger-than.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974b54b8a0c330e9dd2b43ebc940100d601df0f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWalloca-larger-than.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWalloca-larger-than.C?ref=f974b54b8a0c330e9dd2b43ebc940100d601df0f", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/100425 - missing -Walloca-larger-than with -O0\n+   { dg-do compile }\n+   { dg-options \"-O0 -Wall -Walloca-larger-than=128\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#if __cplusplus\n+extern \"C\"\n+#endif\n+\n+void* alloca (size_t);\n+\n+void sink (void*);\n+\n+void warn_alloca_too_large (void)\n+{\n+  sink (alloca (1));\n+  sink (alloca (128));\n+  sink (alloca (129));    // { dh-warning \"\\\\\\[-Walloca-larger-than\" }\n+  sink (alloca (1024));   // { dh-warning \"\\\\\\[-Walloca-larger-than\" }\n+}"}, {"sha": "9d4c4e8d062a4ef9a6c7f1a0a5eb6838093b63e9", "filename": "gcc/testsuite/gcc.dg/Walloca-larger-than-4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974b54b8a0c330e9dd2b43ebc940100d601df0f/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974b54b8a0c330e9dd2b43ebc940100d601df0f/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-larger-than-4.c?ref=f974b54b8a0c330e9dd2b43ebc940100d601df0f", "patch": "@@ -0,0 +1,18 @@\n+/* PR middle-end/100425 - missing -Walloca-larger-than with -O0\n+   { dg-do compile }\n+   { dg-options \"-O0 -Wall -Walloca-larger-than=128\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void* alloca (size_t);\n+\n+void sink (void*);\n+\n+void warn_alloca_too_large (void)\n+{\n+  sink (alloca (1));\n+  sink (alloca (128));\n+  sink (alloca (129));        // { dg-warning \"\\\\\\[-Walloca-larger-than\" }\n+  sink (alloca (128 + 2));    // { dg-warning \"\\\\\\[-Walloca-larger-than\" }\n+  sink (alloca (1024));       // { dg-warning \"\\\\\\[-Walloca-larger-than\" }\n+}"}, {"sha": "c131f837a1b1d2a7d3cc1cba184b484dd3743e95", "filename": "gcc/testsuite/gcc.dg/Wvla-larger-than-5.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974b54b8a0c330e9dd2b43ebc940100d601df0f/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974b54b8a0c330e9dd2b43ebc940100d601df0f/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-5.c?ref=f974b54b8a0c330e9dd2b43ebc940100d601df0f", "patch": "@@ -0,0 +1,38 @@\n+/* PR middle-end/100510 - bogus -Wvla-large-than with -Walloca\n+   { dg-do compile }\n+   { dg-options \"-O0 -Walloca -Wvla-larger-than=1000\" } */\n+\n+void f (void*);\n+\n+#pragma GCC optimize (\"0\")\n+\n+void nowarn_O0 (__SIZE_TYPE__ n)\n+{\n+  if (n > 32)\n+    return;\n+\n+  char a[n];                  // { dg-bogus \"\\\\\\[-Wvla-larger-than=\" }\n+  f (a);\n+}\n+\n+#pragma GCC optimize (\"1\")\n+\n+void nowarn_O1 (__SIZE_TYPE__ n)\n+{\n+  if (n > 33)\n+    return;\n+\n+  char a[n];                  // { dg-bogus \"\\\\\\[-Wvla-larger-than=\" }\n+  f (a);\n+}\n+\n+#pragma GCC optimize (\"2\")\n+\n+void nowarn_O2 (__SIZE_TYPE__ n)\n+{\n+  if (n > 34)\n+    return;\n+\n+  char a[n];                  // { dg-bogus \"\\\\\\[-Wvla-larger-than=\" }\n+  f (a);\n+}"}, {"sha": "4d3064fb5d6c6d304388a16bcb0a8b35d3804927", "filename": "gcc/testsuite/gcc.dg/pr79972.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f974b54b8a0c330e9dd2b43ebc940100d601df0f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79972.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f974b54b8a0c330e9dd2b43ebc940100d601df0f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79972.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79972.c?ref=f974b54b8a0c330e9dd2b43ebc940100d601df0f", "patch": "@@ -6,7 +6,8 @@\n int\n f (int dim, int *b, int *c)\n {\n-  int newcentroid[3][dim];\t/* { dg-warning \"unbounded use of variable-length array\" } */\n+  /* -Wvla-larger-than is only issued with optimization (see PR 100510).  */\n+  int newcentroid[3][dim];\n   int *a = newcentroid[2];\n   int i, dist = 0;\n   __builtin_memcpy (newcentroid, c, sizeof (newcentroid));"}]}