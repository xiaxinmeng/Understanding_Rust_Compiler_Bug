{"sha": "1a31d08dae9d6afa0a329c0dd96a19b705d9d13b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEzMWQwOGRhZTlkNmFmYTBhMzI5YzBkZDk2YTE5YjcwNWQ5ZDEzYg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-10-19T20:59:31Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-10-19T20:59:31Z"}, "message": "(reload_insi): New pattern.\n\n\t(addsi3 pattern for large constants): Delete.  Causes reload trouble.\n\nFrom-SVN: r2516", "tree": {"sha": "170b064d15de33b623716e2b71440186e33beb07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/170b064d15de33b623716e2b71440186e33beb07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a31d08dae9d6afa0a329c0dd96a19b705d9d13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a31d08dae9d6afa0a329c0dd96a19b705d9d13b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a31d08dae9d6afa0a329c0dd96a19b705d9d13b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a31d08dae9d6afa0a329c0dd96a19b705d9d13b/comments", "author": null, "committer": null, "parents": [{"sha": "f1553cbb35c085a7a8b6098539a9c80404cbeae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1553cbb35c085a7a8b6098539a9c80404cbeae7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1553cbb35c085a7a8b6098539a9c80404cbeae7"}], "stats": {"total": 67, "additions": 28, "deletions": 39}, "files": [{"sha": "5742c092d14c08b0e405af71803463a8b4ed20db", "filename": "gcc/config/m88k/m88k.md", "status": "modified", "additions": 28, "deletions": 39, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a31d08dae9d6afa0a329c0dd96a19b705d9d13b/gcc%2Fconfig%2Fm88k%2Fm88k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a31d08dae9d6afa0a329c0dd96a19b705d9d13b/gcc%2Fconfig%2Fm88k%2Fm88k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.md?ref=1a31d08dae9d6afa0a329c0dd96a19b705d9d13b", "patch": "@@ -28,7 +28,7 @@\n (define_expand \"m88k_sccs_id\"\n   [(match_operand:SI 0 \"\" \"\")]\n   \"\"\n-  \"{ static char sccs_id[] = \\\"@(#)m88k.md\t2.2.13.3 10/13/92 13:03:43\\\";\n+  \"{ static char sccs_id[] = \\\"@(#)m88k.md\t2.2.13.5 10/19/92 10:13:13\\\";\n      FAIL; }\")\n \f\n ;; Attribute specifications\n@@ -1412,10 +1412,25 @@\n   \"\"\n   \"\n {\n-  if (emit_move_sequence (operands, SImode))\n+  if (emit_move_sequence (operands, SImode, 0))\n     DONE;\n }\")\n \n+(define_expand \"reload_insi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operand:SI 1 \"general_operand\" \"\"))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"=&r\"))]\n+  \"\"\n+  \"\n+{\n+  if (emit_move_sequence (operands, SImode, operands[2]))\n+    DONE;\n+\n+  /* We don't want the clobber emitted, so handle this ourselves.  */\n+  emit_insn (gen_rtx (SET, VOIDmode, operands[0], operands[1]));\n+  DONE;\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,m,r,r,r,x,x,x,m\")\n \t(match_operand:SI 1 \"move_operand\" \"rI,m,rO,J,M,x,r,x,m,x\"))]\n@@ -1469,7 +1484,7 @@\n   \"\"\n   \"\n {\n-  if (emit_move_sequence (operands, HImode))\n+  if (emit_move_sequence (operands, HImode, 0))\n     DONE;\n }\")\n \n@@ -1501,7 +1516,7 @@\n   \"\"\n   \"\n {\n-  if (emit_move_sequence (operands, QImode))\n+  if (emit_move_sequence (operands, QImode, 0))\n     DONE;\n }\")\n \n@@ -1533,7 +1548,7 @@\n   \"\"\n   \"\n {\n-  if (emit_move_sequence (operands, DImode))\n+  if (emit_move_sequence (operands, DImode, 0))\n     DONE;\n }\")\n \n@@ -1584,7 +1599,7 @@\n   \"\"\n   \"\n {\n-  if (emit_move_sequence (operands, DFmode))\n+  if (emit_move_sequence (operands, DFmode, 0))\n     DONE;\n }\")\n \n@@ -1657,7 +1672,7 @@\n   \"\"\n   \"\n {\n-  if (emit_move_sequence (operands, SFmode))\n+  if (emit_move_sequence (operands, SFmode, 0))\n     DONE;\n }\")\n \n@@ -1777,7 +1792,7 @@\n   if (GET_CODE (operands[1]) == MEM\n       && symbolic_address_p (XEXP (operands[1], 0)))\n     operands[1]\n-      = legitimize_address (flag_pic, operands[1], gen_reg_rtx (Pmode));\n+      = legitimize_address (flag_pic, operands[1], 0, 0);\n }\")\n \n (define_insn \"\"\n@@ -1799,7 +1814,7 @@\n   if (GET_CODE (operands[1]) == MEM\n       && symbolic_address_p (XEXP (operands[1], 0)))\n     operands[1]\n-      = legitimize_address (flag_pic, operands[1], gen_reg_rtx (Pmode));\n+      = legitimize_address (flag_pic, operands[1], 0, 0);\n }\")\n \n (define_insn \"\"\n@@ -1822,7 +1837,7 @@\n       && symbolic_address_p (XEXP (operands[1], 0)))\n     {\n       operands[1]\n-\t= legitimize_address (flag_pic, operands[1], gen_reg_rtx (Pmode));\n+\t= legitimize_address (flag_pic, operands[1], 0, 0);\n       emit_insn (gen_rtx (SET, VOIDmode, operands[0],\n \t\t\t  gen_rtx (ZERO_EXTEND, SImode, operands[1])));\n       DONE;\n@@ -1859,7 +1874,7 @@\n   if (GET_CODE (operands[1]) == MEM\n       && symbolic_address_p (XEXP (operands[1], 0)))\n     operands[1]\n-      = legitimize_address (flag_pic, operands[1], gen_reg_rtx (Pmode));\n+      = legitimize_address (flag_pic, operands[1], 0, 0);\n }\")\n \n (define_insn \"\"\n@@ -1882,7 +1897,7 @@\n   if (GET_CODE (operands[1]) == MEM\n       && symbolic_address_p (XEXP (operands[1], 0)))\n     operands[1]\n-      = legitimize_address (flag_pic, operands[1], gen_reg_rtx (Pmode));\n+      = legitimize_address (flag_pic, operands[1], 0, 0);\n }\")\n \n (define_insn \"\"\n@@ -1905,7 +1920,7 @@\n   if (GET_CODE (operands[1]) == MEM\n       && symbolic_address_p (XEXP (operands[1], 0)))\n     operands[1]\n-      = legitimize_address (flag_pic, operands[1], gen_reg_rtx (Pmode));\n+      = legitimize_address (flag_pic, operands[1], 0, 0);\n }\")\n \n (define_insn \"\"\n@@ -2008,32 +2023,6 @@\n    addu %0,%1,%2\n    subu %0,%1,%n2\")\n \n-;; In unusual contexts, an add of a large value is generated (case statements\n-;; for example).  In these contexts, it is sufficient to accept only those\n-;; cases where the two registers are different.\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,&r\")\n-\t(plus:SI (match_operand:SI 1 \"arith32_operand\" \"%r,r\")\n-\t\t (match_operand:SI 2 \"arith32_operand\" \"r,!n\")))]\n-  \"\"\n-  \"*\n-{\n-  rtx xoperands[10];\n-\n-  if (which_alternative == 0)\n-    return \\\"addu %0,%1,%2\\\";\n-\n-  xoperands[0] = operands[0];\n-  xoperands[1] = operands[2];\n-  output_asm_insn (output_load_const_int (SImode, xoperands),\n-\t\t   xoperands);\n-\n-  return \\\"addu %0,%1,%0\\\";\n-}\"\n-  [(set_attr \"type\" \"arith,marith\")\n-   (set_attr \"length\" \"1,3\")]) ; may be 2 or 3.\n-\n ;; patterns for mixed mode floating point.\n ;; Do not define patterns that utilize mixed mode arithmetic that result\n ;; in narrowing the precision, because it loses accuracy, since the standard"}]}