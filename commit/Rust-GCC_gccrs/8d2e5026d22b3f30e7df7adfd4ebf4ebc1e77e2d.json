{"sha": "8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyZTUwMjZkMjJiM2YzMGU3ZGY3YWRmZDRlYmY0ZWJjMWU3N2UyZA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-06-11T13:43:59Z"}, "committer": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-07-09T21:16:00Z"}, "message": "openacc: GOMP_MAP_ATTACH handling in find_group_last\n\nArrange for GOMP_MAP_ATTACH to be grouped together with a preceding\nGOMP_MAP_TO_PSET or other \"to\" data movement clause, except in cases\nwhere an explicit \"attach\" clause is used.\n\n2020-07-09  Julian Brown  <julian@codesourcery.com>\n\ninclude/\n\t* gomp-constants.h (gomp_map_kind): Update comment for GOMP_MAP_TO_PSET.\n\nlibgomp/\n\t* oacc-mem.c (find_group_last): Group data-movement clauses\n\t(GOMP_MAP_TO_PSET, GOMP_MAP_TO, etc.) together with a subsequent\n\tGOMP_MAP_ATTACH.  Allow standalone GOMP_MAP_ATTACH also.", "tree": {"sha": "4268828dd54b623b130d77b2d1def6fc6226ca8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4268828dd54b623b130d77b2d1def6fc6226ca8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8996edb14eef0a15cd0ce850fde2be5e227e69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8996edb14eef0a15cd0ce850fde2be5e227e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8996edb14eef0a15cd0ce850fde2be5e227e69"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "b42b41403aa634a8cd0dcf9aeceea3600a2a45b4", "filename": "include/gomp-constants.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d/include%2Fgomp-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d/include%2Fgomp-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgomp-constants.h?ref=8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d", "patch": "@@ -65,7 +65,10 @@ enum gomp_map_kind\n     /* Also internal, behaves like GOMP_MAP_TO, but additionally any\n        GOMP_MAP_POINTER records consecutive after it which have addresses\n        falling into that range will not be ignored if GOMP_MAP_TO_PSET wasn't\n-       mapped already.  */\n+       mapped already.\n+       For OpenACC attach operations (e.g. copyin of struct members),\n+       GOMP_MAP_TO_PSET is followed by a single GOMP_MAP_ATTACH mapping\n+       instead.  */\n     GOMP_MAP_TO_PSET =\t\t\t(GOMP_MAP_FLAG_SPECIAL_0 | 1),\n     /* Must already be present.  */\n     GOMP_MAP_FORCE_PRESENT =\t\t(GOMP_MAP_FLAG_SPECIAL_0 | 2),"}, {"sha": "247ca1358043640d5e7e4303a76e2004bd1ff429", "filename": "libgomp/oacc-mem.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d/libgomp%2Foacc-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d/libgomp%2Foacc-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-mem.c?ref=8d2e5026d22b3f30e7df7adfd4ebf4ebc1e77e2d", "patch": "@@ -985,9 +985,15 @@ find_group_last (int pos, size_t mapnum, size_t *sizes, unsigned short *kinds)\n   switch (kind0)\n     {\n     case GOMP_MAP_TO_PSET:\n-      while (pos + 1 < mapnum && (kinds[pos + 1] & 0xff) == GOMP_MAP_POINTER)\n+      if (pos + 1 < mapnum\n+\t  && (kinds[pos + 1] & 0xff) == GOMP_MAP_ATTACH)\n+\treturn pos + 1;\n+\n+      while (pos + 1 < mapnum\n+\t     && (kinds[pos + 1] & 0xff) == GOMP_MAP_POINTER)\n \tpos++;\n-      /* We expect at least one GOMP_MAP_POINTER after a GOMP_MAP_TO_PSET.  */\n+      /* We expect at least one GOMP_MAP_POINTER (if not a single\n+\t GOMP_MAP_ATTACH) after a GOMP_MAP_TO_PSET.  */\n       assert (pos > first_pos);\n       break;\n \n@@ -1002,6 +1008,9 @@ find_group_last (int pos, size_t mapnum, size_t *sizes, unsigned short *kinds)\n       gomp_fatal (\"unexpected mapping\");\n       break;\n \n+    case GOMP_MAP_ATTACH:\n+      break;\n+\n     default:\n       /* GOMP_MAP_ALWAYS_POINTER can only appear directly after some other\n \t mapping.  */\n@@ -1012,9 +1021,16 @@ find_group_last (int pos, size_t mapnum, size_t *sizes, unsigned short *kinds)\n \t    return pos + 1;\n \t}\n \n+      /* We can have a single GOMP_MAP_ATTACH mapping after a to/from\n+\t mapping.  */\n+      if (pos + 1 < mapnum\n+\t  && (kinds[pos + 1] & 0xff) == GOMP_MAP_ATTACH)\n+\treturn pos + 1;\n+\n       /* We can have zero or more GOMP_MAP_POINTER mappings after a to/from\n \t (etc.) mapping.  */\n-      while (pos + 1 < mapnum && (kinds[pos + 1] & 0xff) == GOMP_MAP_POINTER)\n+      while (pos + 1 < mapnum\n+\t     && (kinds[pos + 1] & 0xff) == GOMP_MAP_POINTER)\n \tpos++;\n     }\n "}]}