{"sha": "3aa7750055e5c85373408826dc53f2cd7b80cc07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhNzc1MDA1NWU1Yzg1MzczNDA4ODI2ZGM1M2YyY2Q3YjgwY2MwNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-06T06:11:07Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-06T06:11:07Z"}, "message": "Comment change.\n\nFrom-SVN: r5629", "tree": {"sha": "c4601978003deaef7fcccc52716ea310503ab4e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4601978003deaef7fcccc52716ea310503ab4e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aa7750055e5c85373408826dc53f2cd7b80cc07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa7750055e5c85373408826dc53f2cd7b80cc07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa7750055e5c85373408826dc53f2cd7b80cc07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa7750055e5c85373408826dc53f2cd7b80cc07/comments", "author": null, "committer": null, "parents": [{"sha": "13a7eb33484fb00e34f119bbd55aed313d5bd09e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a7eb33484fb00e34f119bbd55aed313d5bd09e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a7eb33484fb00e34f119bbd55aed313d5bd09e"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "1231cc3ded32fcc970961d7e7ba606bc732490db", "filename": "gcc/tree.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aa7750055e5c85373408826dc53f2cd7b80cc07/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aa7750055e5c85373408826dc53f2cd7b80cc07/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3aa7750055e5c85373408826dc53f2cd7b80cc07", "patch": "@@ -1828,10 +1828,28 @@ staticp (arg)\n   return 0;\n }\n \f\n-/* This should be applied to any node which may be used in more than one place,\n-   but must be evaluated only once.  Normally, the code generator would\n-   reevaluate the node each time; this forces it to compute it once and save\n-   the result.  This is done by encapsulating the node in a SAVE_EXPR.  */\n+/* Wrap a SAVE_EXPR around EXPR, if appropriate.\n+   Do this to any expression which may be used in more than one place,\n+   but must be evaluated only once.\n+\n+   Normally, expand_expr would reevaluate the expression each time.\n+   Calling save_expr produces something that is evaluated and recorded\n+   the first time expand_expr is called on it.  Subsequent calls to\n+   expand_expr just reuse the recorded value.\n+\n+   The call to expand_expr that generates code that actually computes\n+   the value is the first call *at compile time*.  Subsequent calls\n+   *at compile time* generate code to use the saved value.\n+   This produces correct result provided that *at run time* control\n+   always flows through the insns made by the first expand_expr\n+   before reaching the other places where the save_expr was evaluated.\n+   You, the caller of save_expr, must make sure this is so.\n+\n+   Constants, and certain read-only nodes, are returned with no\n+   SAVE_EXPR because that is safe.  Expressions containing placeholders\n+   are not touched.  (Kenner, please add a cross reference to where\n+   placeholders are explained, so people can learn the basics for\n+   understanding this.)  */\n \n tree\n save_expr (expr)"}]}