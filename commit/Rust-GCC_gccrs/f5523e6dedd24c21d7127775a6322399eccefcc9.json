{"sha": "f5523e6dedd24c21d7127775a6322399eccefcc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU1MjNlNmRlZGQyNGMyMWQ3MTI3Nzc1YTYzMjIzOTllY2NlZmNjOQ==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2004-11-24T18:22:27Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2004-11-24T18:22:27Z"}, "message": "Minor back end speedup.\n\n\t* recog.c (recog_memoized_1): Remove.\n\t* recog.h (recog_memoized_1): Remove declaration.\n\t(recog_memoized): Change from macro to inline function.\n\nFrom-SVN: r91185", "tree": {"sha": "541afad07a054071f9b596da5f93ae365b489e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/541afad07a054071f9b596da5f93ae365b489e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5523e6dedd24c21d7127775a6322399eccefcc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5523e6dedd24c21d7127775a6322399eccefcc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5523e6dedd24c21d7127775a6322399eccefcc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5523e6dedd24c21d7127775a6322399eccefcc9/comments", "author": null, "committer": null, "parents": [{"sha": "62a4d9428b459473bdb080c9734c1db46e87d6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a4d9428b459473bdb080c9734c1db46e87d6dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a4d9428b459473bdb080c9734c1db46e87d6dd"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "d2ffdac017bba235e03d929148630d3b64c650f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5523e6dedd24c21d7127775a6322399eccefcc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5523e6dedd24c21d7127775a6322399eccefcc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5523e6dedd24c21d7127775a6322399eccefcc9", "patch": "@@ -1,3 +1,9 @@\n+2004-11-24  Matt Austern  <austern@apple.com>\n+\n+\t* recog.c (recog_memoized_1): Remove.\n+\t* recog.h (recog_memoized_1): Remove declaration.\n+\t(recog_memoized): Change from macro to inline function.\n+\t\n 2004-11-24  Devang Patel  <dpatel@apple.com>\n \n \tPR/18555"}, {"sha": "056e656901ae0d9bb398d7a1bd1bafbce868b5fd", "filename": "gcc/recog.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5523e6dedd24c21d7127775a6322399eccefcc9/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5523e6dedd24c21d7127775a6322399eccefcc9/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=f5523e6dedd24c21d7127775a6322399eccefcc9", "patch": "@@ -107,22 +107,6 @@ init_recog (void)\n   volatile_ok = 1;\n }\n \n-/* Try recognizing the instruction INSN,\n-   and return the code number that results.\n-   Remember the code so that repeated calls do not\n-   need to spend the time for actual rerecognition.\n-\n-   This function is the normal interface to instruction recognition.\n-   The automatically-generated function `recog' is normally called\n-   through this one.  (The only exception is in combine.c.)  */\n-\n-int\n-recog_memoized_1 (rtx insn)\n-{\n-  if (INSN_CODE (insn) < 0)\n-    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);\n-  return INSN_CODE (insn);\n-}\n \f\n /* Check that X is an insn-body for an `asm' with operands\n    and that the operands mentioned in it are legitimate.  */"}, {"sha": "3e88fad58cd56c3e4a8e3941d9c66ebb71040eb0", "filename": "gcc/recog.h", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5523e6dedd24c21d7127775a6322399eccefcc9/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5523e6dedd24c21d7127775a6322399eccefcc9/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=f5523e6dedd24c21d7127775a6322399eccefcc9", "patch": "@@ -21,8 +21,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Random number that should be large enough for all purposes.  */\n #define MAX_RECOG_ALTERNATIVES 30\n-#define recog_memoized(I) (INSN_CODE (I) >= 0 \\\n-\t\t\t   ? INSN_CODE (I) : recog_memoized_1 (I))\n \n /* Types of operands.  */\n enum op_type {\n@@ -73,7 +71,6 @@ struct operand_alternative\n \n extern void init_recog (void);\n extern void init_recog_no_volatile (void);\n-extern int recog_memoized_1 (rtx);\n extern int check_asm_operands (rtx);\n extern int asm_operand_ok (rtx, const char *);\n extern int validate_change (rtx, rtx *, rtx, int);\n@@ -102,6 +99,7 @@ extern int offsettable_address_p (int, enum machine_mode, rtx);\n extern int mode_dependent_address_p (rtx);\n \n extern int recog (rtx, rtx, int *);\n+static inline int recog_memoized (rtx insn);\n extern void add_clobbers (rtx, int);\n extern int added_clobbers_hard_reg_p (int);\n extern void insn_extract (rtx);\n@@ -122,6 +120,23 @@ extern rtx peephole2_insns (rtx, rtx, int *);\n extern int store_data_bypass_p (rtx, rtx);\n extern int if_test_bypass_p (rtx, rtx);\n \n+/* Try recognizing the instruction INSN,\n+   and return the code number that results.\n+   Remember the code so that repeated calls do not\n+   need to spend the time for actual rerecognition.\n+\n+   This function is the normal interface to instruction recognition.\n+   The automatically-generated function `recog' is normally called\n+   through this one.  (The only exception is in combine.c.)  */\n+\n+static inline int\n+recog_memoized (rtx insn)\n+{\n+  if (INSN_CODE (insn) < 0)\n+    INSN_CODE (insn) = recog (PATTERN (insn), insn, 0);\n+  return INSN_CODE (insn);\n+}\n+\n /* Nonzero means volatile operands are recognized.  */\n extern int volatile_ok;\n "}]}