{"sha": "444655b6f02605ae936426a14ba527795795587b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ0NjU1YjZmMDI2MDVhZTkzNjQyNmExNGJhNTI3Nzk1Nzk1NTg3Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-03T13:11:42Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-03T13:16:31Z"}, "message": "c++: cp_tree_equal cleanups\n\nA couple of small fixes.  I noticed bind_template_template_parms was\nnot marking the parm a template parm (this broke some module\nhandling).  Debugging CALL_EXPR comparisons led me to refactor\ncp_tree_equal's CALL_EXPR code (and my recent fix to debug printing of\nsame).  Finally TREE_VECS are best compared by comp_template_args.  I\nrecall that last piece being a left over from fixes during gcc-10.\nI've been using it on the modules branch since then.\n\n\tgcc/cp/\n\t* tree.c (bind_template_template_parm): Mark the parm as a\n\ttemplate parm.\n\t(cp_tree_equal): Refactor CALL_EXPR.  Use comp_template_args for\n\tTREE_VECs.", "tree": {"sha": "bf5cf729d143791165173465696e84df089dda42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf5cf729d143791165173465696e84df089dda42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/444655b6f02605ae936426a14ba527795795587b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444655b6f02605ae936426a14ba527795795587b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/444655b6f02605ae936426a14ba527795795587b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444655b6f02605ae936426a14ba527795795587b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc3f847438f2297c31d9eaaec5e662192acb779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbc3f847438f2297c31d9eaaec5e662192acb779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbc3f847438f2297c31d9eaaec5e662192acb779"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "3087c4ab52c2c1b7632ed3d8c777460bd5b31dbc", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444655b6f02605ae936426a14ba527795795587b/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444655b6f02605ae936426a14ba527795795587b/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=444655b6f02605ae936426a14ba527795795587b", "patch": "@@ -2700,6 +2700,7 @@ bind_template_template_parm (tree t, tree newargs)\n   t2 = cxx_make_type (BOUND_TEMPLATE_TEMPLATE_PARM);\n   decl = build_decl (input_location,\n \t\t     TYPE_DECL, DECL_NAME (decl), NULL_TREE);\n+  SET_DECL_TEMPLATE_PARM_P (decl);\n \n   /* These nodes have to be created to reflect new TYPE_DECL and template\n      arguments.  */\n@@ -3671,20 +3672,28 @@ cp_tree_equal (tree t1, tree t2)\n \n     case CALL_EXPR:\n       {\n-\ttree arg1, arg2;\n-\tcall_expr_arg_iterator iter1, iter2;\n-\tif (KOENIG_LOOKUP_P (t1) != KOENIG_LOOKUP_P (t2)\n-\t    || !called_fns_equal (CALL_EXPR_FN (t1), CALL_EXPR_FN (t2)))\n+\tif (KOENIG_LOOKUP_P (t1) != KOENIG_LOOKUP_P (t2))\n \t  return false;\n-\tfor (arg1 = first_call_expr_arg (t1, &iter1),\n-\t       arg2 = first_call_expr_arg (t2, &iter2);\n-\t     arg1 && arg2;\n-\t     arg1 = next_call_expr_arg (&iter1),\n-\t       arg2 = next_call_expr_arg (&iter2))\n-\t  if (!cp_tree_equal (arg1, arg2))\n-\t    return false;\n-\tif (arg1 || arg2)\n+\n+\tif (!called_fns_equal (CALL_EXPR_FN (t1), CALL_EXPR_FN (t2)))\n+\t  return false;\n+\n+\tcall_expr_arg_iterator iter1, iter2;\n+\tinit_call_expr_arg_iterator (t1, &iter1);\n+\tinit_call_expr_arg_iterator (t2, &iter2);\n+\tif (iter1.n != iter2.n)\n \t  return false;\n+\n+\twhile (more_call_expr_args_p (&iter1))\n+\t  {\n+\t    tree arg1 = next_call_expr_arg (&iter1);\n+\t    tree arg2 = next_call_expr_arg (&iter2);\n+\n+\t    gcc_checking_assert (arg1 && arg2);\n+\t    if (!cp_tree_equal (arg1, arg2))\n+\t      return false;\n+\t  }\n+\n \treturn true;\n       }\n \n@@ -3779,16 +3788,11 @@ cp_tree_equal (tree t1, tree t2)\n \t\t\t\t     CHECK_CONSTR_ARGS (t2)));\n \n     case TREE_VEC:\n-      {\n-\tunsigned ix;\n-\tif (TREE_VEC_LENGTH (t1) != TREE_VEC_LENGTH (t2))\n-\t  return false;\n-\tfor (ix = TREE_VEC_LENGTH (t1); ix--;)\n-\t  if (!cp_tree_equal (TREE_VEC_ELT (t1, ix),\n-\t\t\t      TREE_VEC_ELT (t2, ix)))\n-\t    return false;\n-\treturn true;\n-      }\n+      /* These are template args.  Really we should be getting the\n+\t caller to do this as it knows it to be true.  */\n+      if (!comp_template_args (t1, t2, NULL, NULL, false))\n+\treturn false;\n+      return true;\n \n     case SIZEOF_EXPR:\n     case ALIGNOF_EXPR:"}]}