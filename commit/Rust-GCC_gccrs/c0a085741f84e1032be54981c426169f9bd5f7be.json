{"sha": "c0a085741f84e1032be54981c426169f9bd5f7be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBhMDg1NzQxZjg0ZTEwMzJiZTU0OTgxYzQyNjE2OWY5YmQ1ZjdiZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-23T23:27:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-23T23:27:51Z"}, "message": "(expand_mult): Preserve useful sub-expressions when\nexpanding a synthesized mult.\n\nFrom-SVN: r6287", "tree": {"sha": "a1298e812920bc767038649b59c62afc0bf8ca87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1298e812920bc767038649b59c62afc0bf8ca87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0a085741f84e1032be54981c426169f9bd5f7be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a085741f84e1032be54981c426169f9bd5f7be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0a085741f84e1032be54981c426169f9bd5f7be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0a085741f84e1032be54981c426169f9bd5f7be/comments", "author": null, "committer": null, "parents": [{"sha": "cfc327a27190a0e4c537e7e1f9ab15db359667cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc327a27190a0e4c537e7e1f9ab15db359667cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc327a27190a0e4c537e7e1f9ab15db359667cf"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "4c06fb49c592255ddb0fa4bc126d85b131583242", "filename": "gcc/expmed.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0a085741f84e1032be54981c426169f9bd5f7be/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0a085741f84e1032be54981c426169f9bd5f7be/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=c0a085741f84e1032be54981c426169f9bd5f7be", "patch": "@@ -2153,9 +2153,11 @@ expand_mult (mode, op0, op1, target, unsignedp)\n \t  for (opno = 1; opno < alg.ops; opno++)\n \t    {\n \t      int log = alg.log[opno];\n-\t      rtx shift_subtarget = preserve_subexpressions_p () ? 0 : accum;\n+\t      int preserve = preserve_subexpressions_p ();\n+\t      rtx shift_subtarget = preserve ? 0 : accum;\n \t      rtx add_target = opno == alg.ops - 1 && target != 0 ? target : 0;\n-\n+\t      rtx accum_target = preserve ? 0 : accum;\n+\t      \n \t      switch (alg.op[opno])\n \t\t{\n \t\tcase alg_shift:\n@@ -2168,47 +2170,50 @@ expand_mult (mode, op0, op1, target, unsignedp)\n \t\t  tem = expand_shift (LSHIFT_EXPR, mode, op0,\n \t\t\t\t      build_int_2 (log, 0), NULL_RTX, 0);\n \t\t  accum = force_operand (gen_rtx (PLUS, mode, accum, tem),\n-\t\t\t\t\t add_target ? add_target : accum);\n+\t\t\t\t\t add_target ? add_target : accum_target);\n \t\t  val_so_far += (HOST_WIDE_INT) 1 << log;\n \t\t  break;\n \n \t\tcase alg_sub_t_m2:\n \t\t  tem = expand_shift (LSHIFT_EXPR, mode, op0,\n \t\t\t\t      build_int_2 (log, 0), NULL_RTX, 0);\n \t\t  accum = force_operand (gen_rtx (MINUS, mode, accum, tem),\n-\t\t\t\t\t add_target ? add_target : accum);\n+\t\t\t\t\t add_target ? add_target : accum_target);\n \t\t  val_so_far -= (HOST_WIDE_INT) 1 << log;\n \t\t  break;\n \n \t\tcase alg_add_t2_m:\n \t\t  accum = expand_shift (LSHIFT_EXPR, mode, accum,\n-\t\t\t\t\tbuild_int_2 (log, 0), accum, 0);\n+\t\t\t\t\tbuild_int_2 (log, 0), shift_subtarget,\n+\t\t\t\t\t0);\n \t\t  accum = force_operand (gen_rtx (PLUS, mode, accum, op0),\n-\t\t\t\t\t add_target ? add_target : accum);\n+\t\t\t\t\t add_target ? add_target : accum_target);\n \t\t  val_so_far = (val_so_far << log) + 1;\n \t\t  break;\n \n \t\tcase alg_sub_t2_m:\n \t\t  accum = expand_shift (LSHIFT_EXPR, mode, accum,\n-\t\t\t\t\tbuild_int_2 (log, 0), accum, 0);\n+\t\t\t\t\tbuild_int_2 (log, 0), shift_subtarget,\n+\t\t\t\t\t0);\n \t\t  accum = force_operand (gen_rtx (MINUS, mode, accum, op0),\n-\t\t\t\t\t add_target ? add_target : accum);\n+\t\t\t\t\t add_target ? add_target : accum_target);\n \t\t  val_so_far = (val_so_far << log) - 1;\n \t\t  break;\n \n \t\tcase alg_add_factor:\n \t\t  tem = expand_shift (LSHIFT_EXPR, mode, accum,\n \t\t\t\t      build_int_2 (log, 0), NULL_RTX, 0);\n \t\t  accum = force_operand (gen_rtx (PLUS, mode, accum, tem),\n-\t\t\t\t\t add_target ? add_target : accum);\n+\t\t\t\t\t add_target ? add_target : accum_target);\n \t\t  val_so_far += val_so_far << log;\n \t\t  break;\n \n \t\tcase alg_sub_factor:\n \t\t  tem = expand_shift (LSHIFT_EXPR, mode, accum,\n \t\t\t\t      build_int_2 (log, 0), NULL_RTX, 0);\n \t\t  accum = force_operand (gen_rtx (MINUS, mode, tem, accum),\n-\t\t\t\t\t add_target ? add_target : tem);\n+\t\t\t\t\t (add_target ? add_target\n+\t\t\t\t\t  : preserve ? 0 : tem));\n \t\t  val_so_far = (val_so_far << log) - val_so_far;\n \t\t  break;\n "}]}