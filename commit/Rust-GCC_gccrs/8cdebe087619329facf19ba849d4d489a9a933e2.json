{"sha": "8cdebe087619329facf19ba849d4d489a9a933e2", "node_id": "C_kwDOANBUbNoAKDhjZGViZTA4NzYxOTMyOWZhY2YxOWJhODQ5ZDRkNDg5YTlhOTMzZTI", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2022-06-24T13:15:14Z"}, "committer": {"name": "Robin Dapp", "email": "rdapp@linux.ibm.com", "date": "2022-08-29T09:15:09Z"}, "message": "s390: Use vpdi and verllg in vec_reve.\n\nSwapping the two elements of a V2DImode or V2DFmode vector can be done\nwith vpdi instead of using the generic way of loading a permutation mask\nfrom the literal pool and vperm.\n\nAnalogous to the V2DI/V2DF case reversing the elements of a four-element\nvector can be done by first swapping the elements of the first\ndoubleword as well the ones of the second one and subsequently rotate\nthe doublewords by 32 bits.\n\ngcc/ChangeLog:\n\n\tPR target/100869\n\t* config/s390/vector.md (@vpdi4_2<mode>): New pattern.\n\t(rotl<mode>3_di): New pattern.\n\t* config/s390/vx-builtins.md: Use vpdi and verll for reversing\n\telements.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/zvector/vec-reve-int-long.c: New test.", "tree": {"sha": "54930cc530a8acdd510fb04acfb757d5a378815c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54930cc530a8acdd510fb04acfb757d5a378815c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cdebe087619329facf19ba849d4d489a9a933e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cdebe087619329facf19ba849d4d489a9a933e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cdebe087619329facf19ba849d4d489a9a933e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cdebe087619329facf19ba849d4d489a9a933e2/comments", "author": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rdapp-ibm", "id": 80318053, "node_id": "MDQ6VXNlcjgwMzE4MDUz", "avatar_url": "https://avatars.githubusercontent.com/u/80318053?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp-ibm", "html_url": "https://github.com/rdapp-ibm", "followers_url": "https://api.github.com/users/rdapp-ibm/followers", "following_url": "https://api.github.com/users/rdapp-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp-ibm/subscriptions", "organizations_url": "https://api.github.com/users/rdapp-ibm/orgs", "repos_url": "https://api.github.com/users/rdapp-ibm/repos", "events_url": "https://api.github.com/users/rdapp-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2f4a1b7d104427165f609bac830bb59504ec99e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f4a1b7d104427165f609bac830bb59504ec99e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2f4a1b7d104427165f609bac830bb59504ec99e"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "b6a3da6dd0ad51c3c004f8ae41133e5bbbac6645", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdebe087619329facf19ba849d4d489a9a933e2/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdebe087619329facf19ba849d4d489a9a933e2/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=8cdebe087619329facf19ba849d4d489a9a933e2", "patch": "@@ -797,6 +797,17 @@\n   \"vpdi\\t%v0,%v1,%v2,4\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n+; Second DW of op1 and first DW of op2 (when interpreted as 2-element vector).\n+(define_insn \"@vpdi4_2<mode>\"\n+  [(set (match_operand:V_HW_4   0 \"register_operand\" \"=v\")\n+\t(vec_select:V_HW_4\n+\t (vec_concat:<vec_2x_nelts>\n+\t  (match_operand:V_HW_4 1 \"register_operand\"  \"v\")\n+\t  (match_operand:V_HW_4 2 \"register_operand\"  \"v\"))\n+\t (parallel [(const_int 2) (const_int 3) (const_int 4) (const_int 5)])))]\n+  \"TARGET_VX\"\n+  \"vpdi\\t%v0,%v1,%v2,4\"\n+  [(set_attr \"op_type\" \"VRR\")])\n \n (define_insn \"*vmrhb\"\n   [(set (match_operand:V16QI                     0 \"register_operand\" \"=v\")\n@@ -1255,6 +1266,23 @@\n   \"<vec_shifts_mnem><bhfgq>\\t%v0,%v1,%Y2\"\n   [(set_attr \"op_type\" \"VRS\")])\n \n+; verllg for V4SI/V4SF.  This swaps the first and the second two\n+; elements of a vector and is only valid in that context.\n+(define_expand \"rotl<mode>3_di\"\n+ [\n+ (set (match_dup 2)\n+  (subreg:V2DI (match_operand:V_HW_4 1) 0))\n+ (set (match_dup 3)\n+  (rotate:V2DI\n+   (match_dup 2)\n+   (const_int 32)))\n+ (set (match_operand:V_HW_4 0)\n+  (subreg:V_HW_4 (match_dup 3) 0))]\n+ \"TARGET_VX\"\n+ {\n+  operands[2] = gen_reg_rtx (V2DImode);\n+  operands[3] = gen_reg_rtx (V2DImode);\n+ })\n \n ; Shift each element by corresponding vector element\n "}, {"sha": "69ce00b5efa7c99dacf6df21b4cde857e08e9e10", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdebe087619329facf19ba849d4d489a9a933e2/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdebe087619329facf19ba849d4d489a9a933e2/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=8cdebe087619329facf19ba849d4d489a9a933e2", "patch": "@@ -2181,6 +2181,47 @@\n    vster<bhfgq>\\t%v1,%v0\"\n   [(set_attr \"op_type\" \"*,VRX,VRX\")])\n \n+; Swapping v2df/v2di can be done via vpdi on z13 and z14.\n+(define_split\n+  [(set (match_operand:V_HW_2                 0 \"register_operand\" \"\")\n+\t(unspec:V_HW_2 [(match_operand:V_HW_2 1 \"register_operand\" \"\")]\n+\t\t       UNSPEC_VEC_ELTSWAP))]\n+  \"TARGET_VX && can_create_pseudo_p ()\"\n+  [(set (match_operand:V_HW_2     0 \"register_operand\" \"=v\")\n+\t(vec_select:V_HW_2\n+\t (vec_concat:<vec_2x_nelts>\n+\t  (match_operand:V_HW_2 1 \"register_operand\"  \"v\")\n+\t  (match_dup 1))\n+\t (parallel [(const_int 1) (const_int 2)])))]\n+)\n+\n+\n+; Swapping v4df/v4si can be done via vpdi and rot.\n+(define_split\n+  [(set (match_operand:V_HW_4                 0 \"register_operand\" \"\")\n+\t(unspec:V_HW_4 [(match_operand:V_HW_4 1 \"register_operand\" \"\")]\n+\t\t       UNSPEC_VEC_ELTSWAP))]\n+  \"TARGET_VX && can_create_pseudo_p ()\"\n+  [(set (match_dup 2)\n+\t(vec_select:V_HW_4\n+\t (vec_concat:<vec_2x_nelts>\n+\t  (match_dup 1)\n+\t  (match_dup 1))\n+\t (parallel [(const_int 2) (const_int 3) (const_int 4) (const_int 5)])))\n+ (set (match_dup 3)\n+  (subreg:V2DI (match_dup 2) 0))\n+ (set (match_dup 4)\n+  (rotate:V2DI\n+   (match_dup 3)\n+   (const_int 32)))\n+ (set (match_operand:V_HW_4 0)\n+  (subreg:V_HW_4 (match_dup 4) 0))]\n+{\n+  operands[2] = gen_reg_rtx (<MODE>mode);\n+  operands[3] = gen_reg_rtx (V2DImode);\n+  operands[4] = gen_reg_rtx (V2DImode);\n+})\n+\n ; z15 has instructions for doing element reversal from mem to reg\n ; or the other way around.  For reg to reg or on pre z15 machines\n ; we have to emulate it with vector permute."}, {"sha": "dff3a94066c7d7eae6c814fe7c735f566eeff30c", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-reve-int-long.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cdebe087619329facf19ba849d4d489a9a933e2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-int-long.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cdebe087619329facf19ba849d4d489a9a933e2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-int-long.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-reve-int-long.c?ref=8cdebe087619329facf19ba849d4d489a9a933e2", "patch": "@@ -0,0 +1,31 @@\n+/* Test that we use vpdi in order to reverse vectors\n+   with two elements instead of creating a literal-pool entry\n+   and permuting with vperm.  */\n+/* { dg-do compile { target { s390*-*-* } } } */\n+/* { dg-options \"-O2 -march=z14 -mzarch -mzvector -fno-unroll-loops\" } */\n+\n+/* { dg-final { scan-assembler-times \"vpdi\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"verllg\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vperm\" 0 } } */\n+\n+#include <vecintrin.h>\n+\n+vector double reved (vector double a)\n+{\n+   return vec_reve (a);\n+}\n+\n+vector long long revel (vector long long a)\n+{\n+   return vec_reve (a);\n+}\n+\n+vector float revef (vector float a)\n+{\n+   return vec_reve (a);\n+}\n+\n+vector int revei (vector int a)\n+{\n+   return vec_reve (a);\n+}"}]}