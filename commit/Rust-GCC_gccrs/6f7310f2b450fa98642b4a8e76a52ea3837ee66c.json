{"sha": "6f7310f2b450fa98642b4a8e76a52ea3837ee66c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3MzEwZjJiNDUwZmE5ODY0MmI0YThlNzZhNTJlYTM4MzdlZTY2Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-17T17:55:33Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-17T17:55:33Z"}, "message": "rx: Split cstoresi4 post-reload.\n\nThis will allow elimination of the compare.\n\nFrom-SVN: r168920", "tree": {"sha": "962bfa2f029e6c2457e3e40a40ffdcd81900c09f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/962bfa2f029e6c2457e3e40a40ffdcd81900c09f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f7310f2b450fa98642b4a8e76a52ea3837ee66c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7310f2b450fa98642b4a8e76a52ea3837ee66c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7310f2b450fa98642b4a8e76a52ea3837ee66c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7310f2b450fa98642b4a8e76a52ea3837ee66c/comments", "author": null, "committer": null, "parents": [{"sha": "e963cb1a8a5b1660897be19d0aca20cbdcac413f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e963cb1a8a5b1660897be19d0aca20cbdcac413f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e963cb1a8a5b1660897be19d0aca20cbdcac413f"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "a3d7e92b8a514c065c92302550fb7cbb1f34566a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7310f2b450fa98642b4a8e76a52ea3837ee66c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7310f2b450fa98642b4a8e76a52ea3837ee66c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f7310f2b450fa98642b4a8e76a52ea3837ee66c", "patch": "@@ -1,5 +1,10 @@\n 2011-01-17  Richard Henderson  <rth@redhat.com>\n \n+\t* config/rx/rx.c (rx_float_compare_mode): Remove.\n+\t* config/rx/rx.h (rx_float_compare_mode): Remove.\n+\t* config/rx/rx.md (cstoresi4): Split after reload.\n+\t(*sccc): New pattern.\n+\n \t* config/rx/predicates.md (label_ref_operand): New.\n \t(rx_z_comparison_operator): New.\n \t(rx_zs_comparison_operator): New."}, {"sha": "992c585d432e075e10a1ca340cdfc6d306561f5c", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7310f2b450fa98642b4a8e76a52ea3837ee66c/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7310f2b450fa98642b4a8e76a52ea3837ee66c/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=6f7310f2b450fa98642b4a8e76a52ea3837ee66c", "patch": "@@ -363,8 +363,6 @@ rx_assemble_integer (rtx x, unsigned int size, int is_aligned)\n }\n \n \n-int rx_float_compare_mode;\n-\n /* Handles the insertion of a single operand into the assembler output.\n    The %<letter> directives supported are:\n "}, {"sha": "e2c8641685d6c8a7608bdfdb98c210734a410688", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7310f2b450fa98642b4a8e76a52ea3837ee66c/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7310f2b450fa98642b4a8e76a52ea3837ee66c/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=6f7310f2b450fa98642b4a8e76a52ea3837ee66c", "patch": "@@ -595,8 +595,6 @@ typedef unsigned int CUMULATIVE_ARGS;\n    they contain are always computed between two same-section symbols.  */\n #define JUMP_TABLES_IN_TEXT_SECTION\t(flag_pic)\n \f\n-extern int rx_float_compare_mode;\n-\f\n /* This is a version of REG_P that also returns TRUE for SUBREGs.  */\n #define RX_REG_P(rtl) (REG_P (rtl) || GET_CODE (rtl) == SUBREG)\n "}, {"sha": "f9a7c028f03ee9edc6fb643d7564a6a034c4bab5", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7310f2b450fa98642b4a8e76a52ea3837ee66c/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7310f2b450fa98642b4a8e76a52ea3837ee66c/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=6f7310f2b450fa98642b4a8e76a52ea3837ee66c", "patch": "@@ -706,20 +706,37 @@\n    (set_attr \"timings\" \"45\")] ;; The timing is a guesstimate average timing.\n )\n \n-;; FIXME: Add memory destination options ?\n-(define_insn \"cstoresi4\"\n-  [(set (match_operand:SI   0 \"register_operand\" \"=r,r,r,r,r,r,r\")\n+(define_insn_and_split \"cstoresi4\"\n+  [(set (match_operand:SI   0 \"register_operand\" \"=r\")\n \t(match_operator:SI  1 \"comparison_operator\"\n-\t [(match_operand:SI 2 \"register_operand\"  \"r,r,r,r,r,r,r\")\n-\t  (match_operand:SI 3 \"rx_source_operand\" \"r,Uint04,Int08,Sint16,Sint24,i,Q\")]))\n-   (clobber (reg:CC CC_REG))] ;; Because the cc flags are set based on comparing ops 2 & 3 not the value in op 0.\n+\t  [(match_operand:SI 2 \"register_operand\"  \"r\")\n+\t   (match_operand:SI 3 \"rx_source_operand\" \"riQ\")]))\n+   (clobber (reg:CC CC_REG))]\n   \"\"\n-  {\n-    rx_float_compare_mode = false;\n-    return \"cmp\\t%Q3, %Q2\\n\\tsc%B1.L\\t%0\";\n-  }\n-  [(set_attr \"timings\" \"22,22,22,22,22,22,44\")\n-   (set_attr \"length\"  \"5,5,6,7,8,9,8\")]\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  rtx flags, x;\n+\n+  flags = gen_rtx_REG (CCmode, CC_REG);\n+  x = gen_rtx_COMPARE (CCmode, operands[2], operands[3]);\n+  x = gen_rtx_SET (VOIDmode, flags, x);\n+  emit_insn (x);\n+\n+  x = gen_rtx_fmt_ee (GET_CODE (operands[1]), SImode, flags, const0_rtx);\n+  x = gen_rtx_SET (VOIDmode, operands[0], x);\n+  emit_insn (x);\n+  DONE;\n+})\n+\n+(define_insn \"*sccc\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 1 \"comparison_operator\"\n+\t  [(reg CC_REG) (const_int 0)]))]\n+  \"reload_completed\"\n+  \"sc%B1.L\\t%0\"\n+  [(set_attr \"length\" \"3\")]\n )\n \n (define_expand \"movsicc\""}]}