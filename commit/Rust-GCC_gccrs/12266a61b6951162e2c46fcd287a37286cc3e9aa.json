{"sha": "12266a61b6951162e2c46fcd287a37286cc3e9aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIyNjZhNjFiNjk1MTE2MmUyYzQ2ZmNkMjg3YTM3Mjg2Y2MzZTlhYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-31T19:20:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-31T19:20:39Z"}, "message": "({bc_,}make_decl_rtl): Don't look at DECL_REGISTER for functions.\n\nFrom-SVN: r10912", "tree": {"sha": "3eceee9d92f409406348713ffe2c0717eebfda3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3eceee9d92f409406348713ffe2c0717eebfda3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12266a61b6951162e2c46fcd287a37286cc3e9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12266a61b6951162e2c46fcd287a37286cc3e9aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12266a61b6951162e2c46fcd287a37286cc3e9aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12266a61b6951162e2c46fcd287a37286cc3e9aa/comments", "author": null, "committer": null, "parents": [{"sha": "f843649d5cf8eaf595cc8ea008ccd1898b89dfd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f843649d5cf8eaf595cc8ea008ccd1898b89dfd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f843649d5cf8eaf595cc8ea008ccd1898b89dfd8"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "d725754c7e473fc2cb75790d2f54fa3184d9b5a7", "filename": "gcc/varasm.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12266a61b6951162e2c46fcd287a37286cc3e9aa/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12266a61b6951162e2c46fcd287a37286cc3e9aa/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=12266a61b6951162e2c46fcd287a37286cc3e9aa", "patch": "@@ -348,9 +348,7 @@ bc_make_decl_rtl (decl, asmspec, top_level)\n   if (DECL_RTL (decl) == 0)\n     {\n       /* Print an error message for register variables.  */\n-      if (DECL_REGISTER (decl) && TREE_CODE (decl) == FUNCTION_DECL)\n-\terror (\"function declared `register'\");\n-      else if (DECL_REGISTER (decl))\n+      if (DECL_REGISTER (decl))\n \terror (\"global register variables not supported in the interpreter\");\n \n       /* Handle ordinary static variables and functions.  */\n@@ -492,30 +490,34 @@ make_decl_rtl (decl, asmspec, top_level)\n       DECL_RTL (decl) = 0;\n \n       /* First detect errors in declaring global registers.  */\n-      if (DECL_REGISTER (decl) && reg_number == -1)\n+      if (TREE_CODE (decl) != FUNCTION_DECL\n+\t  && DECL_REGISTER (decl) && reg_number == -1)\n \terror_with_decl (decl,\n \t\t\t \"register name not specified for `%s'\");\n-      else if (DECL_REGISTER (decl) && reg_number < 0)\n+      else if (TREE_CODE (decl) != FUNCTION_DECL\n+\t       && DECL_REGISTER (decl) && reg_number < 0)\n \terror_with_decl (decl,\n \t\t\t \"invalid register name for `%s'\");\n-      else if ((reg_number >= 0 || reg_number == -3) && ! DECL_REGISTER (decl))\n+      else if ((reg_number >= 0 || reg_number == -3)\n+\t       && (TREE_CODE (decl) == FUNCTION_DECL\n+\t\t   && ! DECL_REGISTER (decl)))\n \terror_with_decl (decl,\n \t\t\t \"register name given for non-register variable `%s'\");\n-      else if (DECL_REGISTER (decl) && TREE_CODE (decl) == FUNCTION_DECL)\n-\terror (\"function declared `register'\");\n-      else if (DECL_REGISTER (decl) && TYPE_MODE (TREE_TYPE (decl)) == BLKmode)\n-\terror_with_decl (decl, \"data type of `%s' isn't suitable for a register\");\n-      else if (DECL_REGISTER (decl)\n-\t       && ! HARD_REGNO_MODE_OK (reg_number, TYPE_MODE (TREE_TYPE (decl))))\n-\terror_with_decl (decl, \"register number for `%s' isn't suitable for the data type\");\n+      else if (TREE_CODE (decl) != FUNCTION_DECL\n+\t       && DECL_REGISTER (decl)\n+\t       && TYPE_MODE (TREE_TYPE (decl)) == BLKmode)\n+\terror_with_decl (decl,\n+\t\t\t \"data type of `%s' isn't suitable for a register\");\n+      else if (TREE_CODE (decl) != FUNCTION_DECL && DECL_REGISTER (decl)\n+\t       && ! HARD_REGNO_MODE_OK (reg_number,\n+\t\t\t\t\tTYPE_MODE (TREE_TYPE (decl))))\n+\terror_with_decl (decl,\n+\t\t\t \"register number for `%s' isn't suitable for data type\");\n       /* Now handle properly declared static register variables.  */\n-      else if (DECL_REGISTER (decl))\n+      else if (TREE_CODE (decl) != FUNCTION_DECL && DECL_REGISTER (decl))\n \t{\n \t  int nregs;\n-#if 0 /* yylex should print the warning for this */\n-\t  if (pedantic)\n-\t    pedwarn (\"ANSI C forbids global register variables\");\n-#endif\n+\n \t  if (DECL_INITIAL (decl) != 0 && top_level)\n \t    {\n \t      DECL_INITIAL (decl) = 0;"}]}