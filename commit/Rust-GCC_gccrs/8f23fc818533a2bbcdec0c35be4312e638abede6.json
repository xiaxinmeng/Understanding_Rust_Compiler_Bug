{"sha": "8f23fc818533a2bbcdec0c35be4312e638abede6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyM2ZjODE4NTMzYTJiYmNkZWMwYzM1YmU0MzEyZTYzOGFiZWRlNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-12-24T06:52:27Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-24T06:52:27Z"}, "message": "calls.c (expand_call): Recognize calls to \"sqrt\" and create corresponding notes.\n\n\t* calls.c (expand_call): Recognize calls to \"sqrt\" and create\n\tcorresponding notes.\n\n\t* g++.dg/bprob/bprob.exp: Load target-supports.exp\n\t* g77.dg/bprob/bprob.exp: Likewise.\n\t* gcc.misc-tests/bprob.exp: Likewise.\n\t* gcc.dg/builtins-18.c: Use builtins-config.h.  Do not test float\n\tvariants on systems where the library does not provide that\n\tfunctionality.\n\t* gcc.dg/builtins-20.c: Use builtins-config.h.\n\t* gcc.dg/builtins-config.h: New file.\n\nFrom-SVN: r75003", "tree": {"sha": "2fde402ac6da4c71034ba8c7b11ee7c368e6d234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fde402ac6da4c71034ba8c7b11ee7c368e6d234"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f23fc818533a2bbcdec0c35be4312e638abede6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f23fc818533a2bbcdec0c35be4312e638abede6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f23fc818533a2bbcdec0c35be4312e638abede6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f23fc818533a2bbcdec0c35be4312e638abede6/comments", "author": null, "committer": null, "parents": [{"sha": "ac5fe3fe5198c0529fd777c92eb5aa1f9329ee93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5fe3fe5198c0529fd777c92eb5aa1f9329ee93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5fe3fe5198c0529fd777c92eb5aa1f9329ee93"}], "stats": {"total": 98, "additions": 77, "deletions": 21}, "files": [{"sha": "f1e24bce3af92902063e1eef4b2ba55bfb62baf4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f23fc818533a2bbcdec0c35be4312e638abede6", "patch": "@@ -1,3 +1,8 @@\n+2003-12-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* calls.c (expand_call): Recognize calls to \"sqrt\" and create\n+\tcorresponding notes.\n+\n 2003-12-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* config/mips/mips.c (override_options): Use `inform' instead"}, {"sha": "d9a62e7922967ae83584d86b4cdd59e1d25077ac", "filename": "gcc/calls.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=8f23fc818533a2bbcdec0c35be4312e638abede6", "patch": "@@ -3150,22 +3150,33 @@ expand_call (tree exp, rtx target, int ignore)\n \t\tmark_reg_pointer (temp,\n \t\t\t\t  TYPE_ALIGN (TREE_TYPE (TREE_TYPE (exp))));\n \n-\t      /* Construct an \"equal form\" for the value which mentions all the\n-\t\t arguments in order as well as the function name.  */\n-\t      for (i = 0; i < num_actuals; i++)\n-\t\tnote = gen_rtx_EXPR_LIST (VOIDmode,\n-\t\t\t\t\t  args[i].initial_value, note);\n-\t      note = gen_rtx_EXPR_LIST (VOIDmode, funexp, note);\n-\n \t      end_sequence ();\n-\n-\t      if (flags & ECF_PURE)\n-\t\tnote = gen_rtx_EXPR_LIST (VOIDmode,\n+\t      if (flag_unsafe_math_optimizations\n+\t\t  && fndecl\n+\t\t  && DECL_BUILT_IN (fndecl)\n+\t\t  && (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_SQRT\n+\t\t      || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_SQRTF\n+\t\t      || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_SQRTL))\n+\t\tnote = gen_rtx_fmt_e (SQRT, \n+\t\t\t\t      GET_MODE (temp), \n+\t\t\t\t      args[0].initial_value);\n+\t      else\n+\t\t{\n+\t\t  /* Construct an \"equal form\" for the value which\n+\t\t     mentions all the arguments in order as well as\n+\t\t     the function name.  */\n+\t\t  for (i = 0; i < num_actuals; i++)\n+\t\t    note = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t\t      args[i].initial_value, note);\n+\t\t  note = gen_rtx_EXPR_LIST (VOIDmode, funexp, note);\n+\t\t  \n+\t\t  if (flags & ECF_PURE)\n+\t\t    note = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\tgen_rtx_USE (VOIDmode,\n \t\t\t\t     gen_rtx_MEM (BLKmode,\n \t\t\t\t\t\t  gen_rtx_SCRATCH (VOIDmode))),\n \t\t\tnote);\n-\n+\t\t}\n \t      emit_libcall_block (insns, temp, valreg, note);\n \n \t      valreg = temp;"}, {"sha": "e0086f471e9ad611db5c37106837ba230850cafb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f23fc818533a2bbcdec0c35be4312e638abede6", "patch": "@@ -1,3 +1,14 @@\n+2003-12-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/bprob/bprob.exp: Load target-supports.exp\n+\t* g77.dg/bprob/bprob.exp: Likewise.\n+\t* gcc.misc-tests/bprob.exp: Likewise.\n+\t* gcc.dg/builtins-18.c: Use builtins-config.h.  Do not test float\n+\tvariants on systems where the library does not provide that\n+\tfunctionality.\n+\t* gcc.dg/builtins-20.c: Use builtins-config.h.\n+\t* gcc.dg/builtins-config.h: New file.\n+\n 2003-12-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* lib/gcc-dg.exp (dg-require-profiling): New function."}, {"sha": "bef57836cf1823a5b31452bcacf5ab9b5a0384a6", "filename": "gcc/testsuite/g++.dg/bprob/bprob.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp?ref=8f23fc818533a2bbcdec0c35be4312e638abede6", "patch": "@@ -17,6 +17,8 @@\n # Test the functionality of programs compiled with profile-directed block\n # ordering using -fprofile-arcs followed by -fbranch-probabilities.\n \n+load_lib target-supports.exp\n+\n # Some targets don't have any implementation of __bb_init_func or are\n # missing other needed machinery.\n if { ![check_profiling_available] } {"}, {"sha": "6eb45be2e36e09858a11108c767f95dde946ab08", "filename": "gcc/testsuite/g77.dg/bprob/bprob.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fg77.dg%2Fbprob%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fg77.dg%2Fbprob%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.dg%2Fbprob%2Fbprob.exp?ref=8f23fc818533a2bbcdec0c35be4312e638abede6", "patch": "@@ -17,6 +17,8 @@\n # Test the functionality of programs compiled with profile-directed block\n # ordering using -fprofile-arcs followed by -fbranch-probabilities.\n \n+load_lib target-supports.exp\n+\n # Some targets don't have any implementation of __bb_init_func or are\n # missing other needed machinery.\n if { ![check_profiling_available] } {"}, {"sha": "a47de8b609eedee82beac0c9dc0047e6f83d3c4a", "filename": "gcc/testsuite/gcc.dg/builtins-18.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-18.c?ref=8f23fc818533a2bbcdec0c35be4312e638abede6", "patch": "@@ -8,11 +8,7 @@\n /* { dg-do link } */\n /* { dg-options \"-O2 -ffast-math\" } */\n \n-\n-/* Solaris doesn't have the entire C99 runtime.  */\n-#if !defined(sun)\n-#define HAVE_C99_RUNTIME\n-#endif\n+#include \"builtins-config.h\"\n \n extern void link_error(void);\n \n@@ -29,6 +25,7 @@ main (void)\n   double _Complex dc = 3.0 + 4.0i;\n   long double _Complex ldc = 3.0L + 4.0iL;\n \n+#ifdef HAVE_C99_RUNTIME\n   /* Test floats.  */\n   if (cabsf (fc) != 5.0F)\n     link_error ();\n@@ -38,6 +35,7 @@ main (void)\n     link_failure ();\n   if (__builtin_cabsf (3.0F + 4.0iF) != 5.0F)\n     link_failure ();\n+#endif\n \n   /* Test doubles.  */\n   if (cabs (dc) != 5.0)"}, {"sha": "1bd95344ae9c0a4ec21a65cf01b8b7fb12218b24", "filename": "gcc/testsuite/gcc.dg/builtins-20.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c?ref=8f23fc818533a2bbcdec0c35be4312e638abede6", "patch": "@@ -8,11 +8,7 @@\n /* { dg-do link } */\n /* { dg-options \"-O2 -ffast-math\" } */\n \n-\n-/* Solaris doesn't have the entire C99 runtime.  */\n-#if !defined(sun)\n-#define HAVE_C99_RUNTIME\n-#endif\n+#include \"builtins-config.h\"\n \n extern void link_error(void);\n "}, {"sha": "11f7c11ee4f916b745edf1f1f853177d6c58c55b", "filename": "gcc/testsuite/gcc.dg/builtins-config.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h?ref=8f23fc818533a2bbcdec0c35be4312e638abede6", "patch": "@@ -0,0 +1,29 @@\n+/* Copyright (C) 2003 Free Software Foundation.\n+\n+   Define macros useful in tests for bulitin functions.  */\n+\n+/* Define HAVE_C99_RUNTIME if the entire C99 runtime is available on\n+   the target system.  The value of HAVE_C99_RUNTIME should be the\n+   same as the value of TARGET_C99_FUNCTIONS in the GCC machine\n+   description.  (Perhaps GCC should predefine a special macro\n+   indicating whether or not TARGET_C99_FUNCTIONS is set, but it does\n+   not presently do that.)  */\n+\n+#if defined(sun)\n+/* Solaris doesn't have the entire C99 runtime.  */\n+#else\n+/* Newlib has the \"f\" variants of the math functions, but not the \"l\"\n+   variants.  TARGET_C99_FUNCTIONS is only defined if all C99\n+   functions are present.  Therefore, on systems using newlib, tests\n+   of builtins will fail for both the \"f\" and the \"l\" variants, and we\n+   should therefore not define HAVE_C99_RUNTIME.  Including <limits.h>\n+   gives us a way of seeing if _NEWLIB_VERSION is defined.  Include\n+   <math.h> would work too, but the GLIBC math inlines cause us to\n+   generate inferior code, which causes the test to fail, so it is\n+   not safe to include <math.h>.  */\n+#include <limits.h>\n+#ifdef _NEWLIB_VERSION\n+#else\n+#define HAVE_C99_RUNTIME\n+#endif\n+#endif"}, {"sha": "5afbdb1c847832769e04873f4af06f17fe2a74bf", "filename": "gcc/testsuite/gcc.misc-tests/bprob.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f23fc818533a2bbcdec0c35be4312e638abede6/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp?ref=8f23fc818533a2bbcdec0c35be4312e638abede6", "patch": "@@ -17,6 +17,8 @@\n # Test the functionality of programs compiled with profile-directed block\n # ordering using -fprofile-arcs followed by -fbranch-probabilities.\n \n+load_lib target-supports.exp\n+\n # Some targets don't have any implementation of __bb_init_func or are\n # missing other needed machinery.\n if { ![check_profiling_available] } {"}]}