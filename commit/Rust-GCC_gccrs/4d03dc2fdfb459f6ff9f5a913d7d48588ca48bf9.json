{"sha": "4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQwM2RjMmZkZmI0NTlmNmZmOWY1YTkxM2Q3ZDQ4NTg4Y2E0OGJmOQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2016-04-28T18:21:42Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2016-04-28T18:21:42Z"}, "message": "arc.h (SYMBOL_FLAG_CMEM): Define.\n\n2016-04-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n            Andrew Burgess  <andrew.burgess@embecosm.com>\ngcc:\n        * config/arc/arc.h (SYMBOL_FLAG_CMEM): Define.\n        (TARGET_NPS_CMEM_DEFAULT): Provide default definition.\n        * config/arc/arc.c (arc_address_cost): Return 0 for cmem_address.\n        (arc_encode_section_info): Set SYMBOL_FLAG_CMEM where indicated.\n        * config/arc/arc.opt (mcmem): New option.\n        * config/arc/arc.md (*extendqihi2_i): Add r/Uex alternative,\n        supply length for r/m alternative.\n        (*extendqisi2_ac): Likewise.\n        (*extendhisi2_i): Add r/Uex alternative, supply length for r/m and\n        r/Uex alternative.\n        (movqi_insn): Add r/Ucm and Ucm/?Rac alternatives.\n        (movhi_insn): Likewise.\n        (movsi_insn): Add r/Ucm,Ucm/w alternatives.\n        (*zero_extendqihi2_i): Add r/Ucm alternative.\n        (*zero_extendqisi2_ac): Likewise.\n        (*zero_extendhisi2_i): Likewise.\n        * config/arc/constraints.md (Uex): New memory constraint.\n        (Ucm): New define_constraint.\n        * config/arc/predicates.md (long_immediate_loadstore_operand):\n        Return 0 for MEM with cmem_address address.\n        (cmem_address_0): New predicates.\n        (cmem_address_1): Likewise.\n        (cmem_address_2): Likewise.\n        (cmem_address): Likewise.\ngcc/testsuite:\n        * gcc.target/arc/cmem-1.c: New file.\n        * gcc.target/arc/cmem-2.c: New file.\n        * gcc.target/arc/cmem-3.c: New file.\n        * gcc.target/arc/cmem-4.c: New file.\n        * gcc.target/arc/cmem-5.c: New file.\n        * gcc.target/arc/cmem-6.c: New file.\n        * gcc.target/arc/cmem-7.c: New file.\n        * gcc.target/arc/cmem-ld.inc: New file.\n        * gcc.target/arc/cmem-st.inc: New file.\n\nCo-Authored-By: Andrew Burgess <andrew.burgess@embecosm.com>\n\nFrom-SVN: r235590", "tree": {"sha": "c92cdbd7e8ce52f3a6b0c28d4df390eee9b2fad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c92cdbd7e8ce52f3a6b0c28d4df390eee9b2fad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0b47f4bf9e1a6be6371d715640c2f4a39f1167b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b47f4bf9e1a6be6371d715640c2f4a39f1167b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0b47f4bf9e1a6be6371d715640c2f4a39f1167b"}], "stats": {"total": 349, "additions": 297, "deletions": 52}, "files": [{"sha": "53e5f617befd2ca083f066699292def84d53aefd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -1,10 +1,39 @@\n+2016-04-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* config/arc/arc.h (SYMBOL_FLAG_CMEM): Define.\n+\t(TARGET_NPS_CMEM_DEFAULT): Provide default definition.\n+\t* config/arc/arc.c (arc_address_cost): Return 0 for cmem_address.\n+\t(arc_encode_section_info): Set SYMBOL_FLAG_CMEM where indicated.\n+\t* config/arc/arc.opt (mcmem): New option.\n+\t* config/arc/arc.md (*extendqihi2_i): Add r/Uex alternative,\n+\tsupply length for r/m alternative.\n+\t(*extendqisi2_ac): Likewise.\n+\t(*extendhisi2_i): Add r/Uex alternative, supply length for r/m and\n+\tr/Uex alternative.\n+\t(movqi_insn): Add r/Ucm and Ucm/?Rac alternatives.\n+\t(movhi_insn): Likewise.\n+\t(movsi_insn): Add r/Ucm,Ucm/w alternatives.\n+\t(*zero_extendqihi2_i): Add r/Ucm alternative.\n+\t(*zero_extendqisi2_ac): Likewise.\n+\t(*zero_extendhisi2_i): Likewise.\n+\t* config/arc/constraints.md (Uex): New memory constraint.\n+\t(Ucm): New define_constraint.\n+\t* config/arc/predicates.md (long_immediate_loadstore_operand):\n+\tReturn 0 for MEM with cmem_address address.\n+\t(cmem_address_0): New predicates.\n+\t(cmem_address_1): Likewise.\n+\t(cmem_address_2): Likewise.\n+\t(cmem_address): Likewise.\n+\n 2016-04-28  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (machine_function): Rename\n \tinsn_chain_scanned_p to spe_insn_chain_scanned_p.\n \t(rs6000_stack_info): Adjust.\n \n-2016-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+2016-04-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* config/arc/constraints.md (Usd): Convert to define_constraint.\n \t(Us<): Likewise."}, {"sha": "ca9d31ceee95dbf639f1fa6c667161c686250739", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -1843,6 +1843,8 @@ arc_address_cost (rtx addr, machine_mode, addr_space_t, bool speed)\n     case LABEL_REF :\n     case SYMBOL_REF :\n     case CONST :\n+      if (TARGET_NPS_CMEM && cmem_address (addr, SImode))\n+\treturn 0;\n       /* Most likely needs a LIMM.  */\n       return COSTS_N_INSNS (1);\n \n@@ -4337,6 +4339,24 @@ arc_encode_section_info (tree decl, rtx rtl, int first)\n \n       SYMBOL_REF_FLAGS (symbol) = flags;\n     }\n+  else if (TREE_CODE (decl) == VAR_DECL)\n+    {\n+      rtx symbol = XEXP (rtl, 0);\n+\n+      tree attr = (TREE_TYPE (decl) != error_mark_node\n+\t\t   ? DECL_ATTRIBUTES (decl) : NULL_TREE);\n+\n+      tree sec_attr = lookup_attribute (\"section\", attr);\n+      if (sec_attr)\n+\t{\n+\t  const char *sec_name\n+\t    = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (sec_attr)));\n+\t  if (strcmp (sec_name, \".cmem\") == 0\n+\t      || strcmp (sec_name, \".cmem_shared\") == 0\n+\t      || strcmp (sec_name, \".cmem_private\") == 0)\n+\t    SYMBOL_REF_FLAGS (symbol) |= SYMBOL_FLAG_CMEM;\n+\t}\n+    }\n }\n \n /* This is how to output a definition of an internal numbered label where"}, {"sha": "a17d41092507ca98627bd5294430f13241a9ab29", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #define SYMBOL_FLAG_SHORT_CALL\t(SYMBOL_FLAG_MACH_DEP << 0)\n #define SYMBOL_FLAG_MEDIUM_CALL\t(SYMBOL_FLAG_MACH_DEP << 1)\n #define SYMBOL_FLAG_LONG_CALL\t(SYMBOL_FLAG_MACH_DEP << 2)\n+#define SYMBOL_FLAG_CMEM\t(SYMBOL_FLAG_MACH_DEP << 3)\n \n /* Check if this symbol has a long_call attribute in its declaration */\n #define SYMBOL_REF_LONG_CALL_P(X)\t\\\n@@ -321,6 +322,14 @@ along with GCC; see the file COPYING3.  If not see\n #define MULTILIB_DEFAULTS { \"mARC700\" }\n #endif\n \n+#ifndef UNALIGNED_ACCESS_DEFAULT\n+#define UNALIGNED_ACCESS_DEFAULT 0\n+#endif\n+\n+#ifndef TARGET_NPS_CMEM_DEFAULT\n+#define TARGET_NPS_CMEM_DEFAULT 0\n+#endif\n+\n /* Target machine storage layout.  */\n \n /* We want zero_extract to mean the same"}, {"sha": "93a2cad7dfa64711097050bf55886a9463545f30", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 65, "deletions": 50, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -620,8 +620,8 @@\n ; The iscompact attribute allows the epilogue expander to know for which\n ; insns it should lengthen the return insn.\n (define_insn \"*movqi_insn\"\n-  [(set (match_operand:QI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,w, w,w,???w, w,Rcq,S,!*x,r,m,???m\")\n-\t(match_operand:QI 1 \"move_src_operand\"   \"cL,cP,Rcq#q,cL,I,?Rac,?i,T,Rcq,Usd,m,c,?Rac\"))]\n+  [(set (match_operand:QI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,w,w,w,???w,w,Rcq,S,!*x,r,r,Ucm,m,???m\")\n+\t(match_operand:QI 1 \"move_src_operand\"  \"cL,cP,Rcq#q,cL,I,?Rac,?i,T,Rcq,Usd,Ucm,m,?Rac,c,?Rac\"))]\n   \"register_operand (operands[0], QImode)\n    || register_operand (operands[1], QImode)\"\n   \"@\n@@ -635,13 +635,15 @@\n    ldb%? %0,%1%&\n    stb%? %1,%0%&\n    ldb%? %0,%1%&\n+   xldb%U1 %0,%1\n    ldb%U1%V1 %0,%1\n+   xstb%U0 %1,%0\n    stb%U0%V0 %1,%0\n    stb%U0%V0 %1,%0\"\n-  [(set_attr \"type\" \"move,move,move,move,move,move,move,load,store,load,load,store,store\")\n-   (set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false,false,true,true,true,false,false,false\")\n-   (set_attr \"predicable\" \"yes,no,yes,yes,no,yes,yes,no,no,no,no,no,no\")\n-   (set_attr \"cpu_facility\" \"*,*,av1,*,*,*,*,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"move,move,move,move,move,move,move,load,store,load,load,load,store,store,store\")\n+   (set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false,false,true,true,true,false,false,false,false,false\")\n+   (set_attr \"predicable\" \"yes,no,yes,yes,no,yes,yes,no,no,no,no,no,no,no,no\")\n+   (set_attr \"cpu_facility\" \"*,*,av1,*,*,*,*,*,*,*,*,*,*,*,*\")])\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"move_dest_operand\" \"\")\n@@ -650,8 +652,8 @@\n   \"if (prepare_move_operands (operands, HImode)) DONE;\")\n \n (define_insn \"*movhi_insn\"\n-  [(set (match_operand:HI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,w, w,w,???w,Rcq#q,w,Rcq,S,r,m,???m,VUsc\")\n-\t(match_operand:HI 1 \"move_src_operand\"   \"cL,cP,Rcq#q,cL,I,?Rac,  ?i,?i,T,Rcq,m,c,?Rac,i\"))]\n+  [(set (match_operand:HI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,w,w,w,???w,Rcq#q,w,Rcq,S,r,r,Ucm,m,???m,VUsc\")\n+\t(match_operand:HI 1 \"move_src_operand\" \"cL,cP,Rcq#q,cL,I,?Rac,?i,?i,T,Rcq,Ucm,m,?Rac,c,?Rac,i\"))]\n   \"register_operand (operands[0], HImode)\n    || register_operand (operands[1], HImode)\n    || (CONSTANT_P (operands[1])\n@@ -670,14 +672,16 @@\n    mov%? %0,%S1\n    ld%_%? %0,%1%&\n    st%_%? %1,%0%&\n+   xld%_%U1 %0,%1\n    ld%_%U1%V1 %0,%1\n+   xst%_%U0 %1,%0\n    st%_%U0%V0 %1,%0\n    st%_%U0%V0 %1,%0\n    st%_%U0%V0 %S1,%0\"\n-  [(set_attr \"type\" \"move,move,move,move,move,move,move,move,load,store,load,store,store,store\")\n-   (set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false,maybe_limm,false,true,true,false,false,false,false\")\n-   (set_attr \"predicable\" \"yes,no,yes,yes,no,yes,yes,yes,no,no,no,no,no,no\")\n-   (set_attr \"cpu_facility\" \"*,*,av1,*,*,*,*,*,*,*,*,*,*,*\")])\n+  [(set_attr \"type\" \"move,move,move,move,move,move,move,move,load,store,load,load,store,store,store,store\")\n+   (set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false,maybe_limm,false,true,true,false,false,false,false,false,false\")\n+   (set_attr \"predicable\" \"yes,no,yes,yes,no,yes,yes,yes,no,no,no,no,no,no,no,no\")\n+   (set_attr \"cpu_facility\" \"*,*,av1,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n \n (define_expand \"movsi\"\n   [(set (match_operand:SI 0 \"move_dest_operand\" \"\")\n@@ -696,8 +700,8 @@\n ; insns it should lengthen the return insn.\n ; N.B. operand 1 of alternative 7 expands into pcl,symbol@gotpc .\n (define_insn \"*movsi_insn\"\n-  [(set (match_operand:SI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,w, w,w,  w,???w, ?w,  w,Rcq#q, w,Rcq,  S,Us<,RcqRck,!*x,r,m,???m,VUsc\")\n-\t(match_operand:SI 1 \"move_src_operand\"  \" cL,cP,Rcq#q,cL,I,Crr,?Rac,Cpc,Clb,?Cal,?Cal,T,Rcq,RcqRck,Us>,Usd,m,c,?Rac,C32\"))]\n+  [(set (match_operand:SI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,w, w,w,  w,???w, ?w,  w,Rcq#q, w,Rcq,  S,Us<,RcqRck,!*x,r,r,Ucm,m,???m,VUsc\")\n+\t(match_operand:SI 1 \"move_src_operand\"  \" cL,cP,Rcq#q,cL,I,Crr,?Rac,Cpc,Clb,?Cal,?Cal,T,Rcq,RcqRck,Us>,Usd,Ucm,m,w,c,?Rac,C32\"))]\n   \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\n    || (CONSTANT_P (operands[1])\n@@ -722,17 +726,19 @@\n    * return arc_short_long (insn, \\\"push%? %1%&\\\", \\\"st%U0 %1,%0%&\\\");\n    * return arc_short_long (insn, \\\"pop%? %0%&\\\",  \\\"ld%U1 %0,%1%&\\\");\n    ld%? %0,%1%&\t\t;15\n-   ld%U1%V1 %0,%1\t;16\n-   st%U0%V0 %1,%0       ;17\n-   st%U0%V0 %1,%0       ;18\n-   st%U0%V0 %S1,%0      ;19\"\n-  [(set_attr \"type\" \"move,move,move,move,move,two_cycle_core,move,binary,binary,move,move,load,store,store,load,load,load,store,store,store\")\n-   (set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false,false,false,false,maybe_limm,false,true,true,true,true,true,false,false,false,false\")\n+   xld%U1 %0,%1         ;16\n+   ld%U1%V1 %0,%1\t;17\n+   xst%U0 %1,%0         ;18\n+   st%U0%V0 %1,%0       ;19\n+   st%U0%V0 %1,%0       ;20\n+   st%U0%V0 %S1,%0      ;21\"\n+  [(set_attr \"type\" \"move,move,move,move,move,two_cycle_core,move,binary,binary,move,move,load,store,store,load,load,load,load,store,store,store,store\")\n+   (set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false,false,false,false,maybe_limm,false,true,true,true,true,true,false,false,false,false,false,false\")\n    ; Use default length for iscompact to allow for COND_EXEC.  But set length\n    ; of Crr to 4.\n-   (set_attr \"length\" \"*,*,*,4,4,4,4,8,8,*,8,*,*,*,*,*,*,*,*,8\")\n-   (set_attr \"predicable\" \"yes,no,yes,yes,no,no,yes,no,no,yes,yes,no,no,no,no,no,no,no,no,no\")\n-   (set_attr \"cpu_facility\" \"*,*,av1,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n+   (set_attr \"length\" \"*,*,*,4,4,4,4,8,8,*,8,*,*,*,*,*,4,*,4,*,*,8\")\n+   (set_attr \"predicable\" \"yes,no,yes,yes,no,no,yes,no,no,yes,yes,no,no,no,no,no,no,no,no,no,no,no\")\n+   (set_attr \"cpu_facility\" \"*,*,av1,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*\")])\n \n ;; Sometimes generated by the epilogue code.  We don't want to\n ;; recognize these addresses in general, because the limm is costly,\n@@ -1459,18 +1465,19 @@\n \n \n (define_insn \"*zero_extendqihi2_i\"\n-  [(set (match_operand:HI 0 \"dest_reg_operand\" \"=Rcq,Rcq#q,Rcw,w,r\")\n-\t(zero_extend:HI (match_operand:QI 1 \"nonvol_nonimm_operand\" \"0,Rcq#q,0,c,m\")))]\n+  [(set (match_operand:HI 0 \"dest_reg_operand\" \"=Rcq,Rcq#q,Rcw,w,r,r\")\n+\t(zero_extend:HI (match_operand:QI 1 \"nonvol_nonimm_operand\" \"0,Rcq#q,0,c,Ucm,m\")))]\n   \"\"\n   \"@\n    extb%? %0,%1%&\n    extb%? %0,%1%&\n    bmsk%? %0,%1,7\n    extb %0,%1\n+   xldb%U1 %0,%1\n    ldb%U1 %0,%1\"\n-  [(set_attr \"type\" \"unary,unary,unary,unary,load\")\n-   (set_attr \"iscompact\" \"maybe,true,false,false,false\")\n-   (set_attr \"predicable\" \"no,no,yes,no,no\")])\n+  [(set_attr \"type\" \"unary,unary,unary,unary,load,load\")\n+   (set_attr \"iscompact\" \"maybe,true,false,false,false,false\")\n+   (set_attr \"predicable\" \"no,no,yes,no,no,no\")])\n \n (define_expand \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"dest_reg_operand\" \"\")\n@@ -1480,8 +1487,8 @@\n )\n \n (define_insn \"*zero_extendqisi2_ac\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcq,Rcq#q,Rcw,w,qRcq,!*x,r\")\n-\t(zero_extend:SI (match_operand:QI 1 \"nonvol_nonimm_operand\" \"0,Rcq#q,0,c,T,Usd,m\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcq,Rcq#q,Rcw,w,qRcq,!*x,r,r\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonvol_nonimm_operand\" \"0,Rcq#q,0,c,T,Usd,Ucm,m\")))]\n   \"\"\n   \"@\n    extb%? %0,%1%&\n@@ -1490,10 +1497,11 @@\n    extb %0,%1\n    ldb%? %0,%1%&\n    ldb%? %0,%1%&\n+   xldb%U1 %0,%1\n    ldb%U1 %0,%1\"\n-  [(set_attr \"type\" \"unary,unary,unary,unary,load,load,load\")\n-   (set_attr \"iscompact\" \"maybe,true,false,false,true,true,false\")\n-   (set_attr \"predicable\" \"no,no,yes,no,no,no,no\")])\n+  [(set_attr \"type\" \"unary,unary,unary,unary,load,load,load,load\")\n+   (set_attr \"iscompact\" \"maybe,true,false,false,true,true,false,false\")\n+   (set_attr \"predicable\" \"no,no,yes,no,no,no,no,no\")])\n \n (define_expand \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"\")\n@@ -1503,8 +1511,8 @@\n )\n \n (define_insn \"*zero_extendhisi2_i\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcq,q,Rcw,w,!x,Rcqq,r\")\n-\t(zero_extend:SI (match_operand:HI 1 \"nonvol_nonimm_operand\" \"0,q,0,c,Usd,Usd,m\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcq,q,Rcw,w,!x,Rcqq,r,r\")\n+\t(zero_extend:SI (match_operand:HI 1 \"nonvol_nonimm_operand\" \"0,q,0,c,Usd,Usd,Ucm,m\")))]\n   \"\"\n   \"@\n    ext%_%? %0,%1%&\n@@ -1513,10 +1521,11 @@\n    ext%_ %0,%1\n    ld%_%? %0,%1%&\n    ld%_%U1 %0,%1\n+   * return TARGET_EM ? \\\"xldh%U1%V1 %0,%1\\\" : \\\"xldw%U1 %0,%1\\\";\n    ld%_%U1%V1 %0,%1\"\n-  [(set_attr \"type\" \"unary,unary,unary,unary,load,load,load\")\n-   (set_attr \"iscompact\" \"maybe,true,false,false,true,false,false\")\n-   (set_attr \"predicable\" \"no,no,yes,no,no,no,no\")])\n+  [(set_attr \"type\" \"unary,unary,unary,unary,load,load,load,load\")\n+   (set_attr \"iscompact\" \"maybe,true,false,false,true,false,false,false\")\n+   (set_attr \"predicable\" \"no,no,yes,no,no,no,no,no\")])\n \n \n (define_expand \"zero_extendhisi2\"\n@@ -1529,15 +1538,17 @@\n ;; Sign extension instructions.\n \n (define_insn \"*extendqihi2_i\"\n-  [(set (match_operand:HI 0 \"dest_reg_operand\" \"=Rcqq,r,r\")\n-\t(sign_extend:HI (match_operand:QI 1 \"nonvol_nonimm_operand\" \"Rcqq,r,m\")))]\n+  [(set (match_operand:HI 0 \"dest_reg_operand\" \"=Rcqq,r,r,r\")\n+\t(sign_extend:HI (match_operand:QI 1 \"nonvol_nonimm_operand\" \"Rcqq,r,Uex,m\")))]\n   \"\"\n   \"@\n    sexb%? %0,%1%&\n    sexb %0,%1\n+   ldb.x%U1 %0,%1\n    ldb.x%U1 %0,%1\"\n-  [(set_attr \"type\" \"unary,unary,load\")\n-   (set_attr \"iscompact\" \"true,false,false\")])\n+  [(set_attr \"type\" \"unary,unary,load,load\")\n+   (set_attr \"iscompact\" \"true,false,false,false\")\n+   (set_attr \"length\" \"*,*,*,8\")])\n \n \n (define_expand \"extendqihi2\"\n@@ -1548,15 +1559,17 @@\n )\n \n (define_insn \"*extendqisi2_ac\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,w,r\")\n-\t(sign_extend:SI (match_operand:QI 1 \"nonvol_nonimm_operand\" \"Rcqq,c,m\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,w,r,r\")\n+\t(sign_extend:SI (match_operand:QI 1 \"nonvol_nonimm_operand\" \"Rcqq,c,Uex,m\")))]\n   \"\"\n   \"@\n    sexb%? %0,%1%&\n    sexb %0,%1\n+   ldb.x%U1 %0,%1\n    ldb.x%U1 %0,%1\"\n-  [(set_attr \"type\" \"unary,unary,load\")\n-   (set_attr \"iscompact\" \"true,false,false\")])\n+  [(set_attr \"type\" \"unary,unary,load,load\")\n+   (set_attr \"iscompact\" \"true,false,false,false\")\n+   (set_attr \"length\" \"*,*,*,8\")])\n \n (define_expand \"extendqisi2\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"\")\n@@ -1566,15 +1579,17 @@\n )\n \n (define_insn \"*extendhisi2_i\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,w,r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"nonvol_nonimm_operand\" \"Rcqq,c,m\")))]\n+  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=Rcqq,w,r,r\")\n+\t(sign_extend:SI (match_operand:HI 1 \"nonvol_nonimm_operand\" \"Rcqq,c,Uex,m\")))]\n   \"\"\n   \"@\n    sex%_%? %0,%1%&\n    sex%_ %0,%1\n+   ld%_.x%U1%V1 %0,%1\n    ld%_.x%U1%V1 %0,%1\"\n-  [(set_attr \"type\" \"unary,unary,load\")\n-   (set_attr \"iscompact\" \"true,false,false\")])\n+  [(set_attr \"type\" \"unary,unary,load,load\")\n+   (set_attr \"iscompact\" \"true,false,false,false\")\n+   (set_attr \"length\" \"*,*,4,8\")])\n \n (define_expand \"extendhisi2\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"\")"}, {"sha": "b2c7b3763c1d873a118b64a92defaea2d26136b4", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -469,3 +469,11 @@ Specify thread pointer register number\n \n mtp-regno=none\n Target RejectNegative Var(arc_tp_regno,-1)\n+\n+mcmem\n+Target Report Var(TARGET_NPS_CMEM) Init(TARGET_NPS_CMEM_DEFAULT)\n+Enable use of NPS400 xld/xst extension.\n+\n+munaligned-access\n+Target Report Var(unaligned_access) Init(UNALIGNED_ACCESS_DEFAULT)\n+Enable unaligned word and halfword accesses to packed data."}, {"sha": "c2992c9e9473f0d0cd72e023fd0a5924223ee112", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -269,6 +269,13 @@\n   (and (match_code \"mem\")\n        (match_test \"compact_store_memory_operand (op, VOIDmode)\")))\n \n+(define_memory_constraint \"Uex\"\n+  \"@internal\n+   A valid memory operand for limm-free extend instructions\"\n+  (and (match_code \"mem\")\n+       (match_test \"!cmem_address (XEXP (op, 0), SImode)\")\n+       (not (match_operand 0 \"long_immediate_loadstore_operand\"))))\n+\n ; Don't use define_memory_constraint here as the relocation patching\n ; for small data symbols only works within a ld/st instruction and\n ; define_memory_constraint may result in the address being calculated\n@@ -303,6 +310,12 @@\n        (match_test \"REG_P (XEXP (XEXP (op, 0), 0))\")\n        (match_test \"REGNO (XEXP (XEXP (op, 0), 0)) == SP_REG\")))\n \n+(define_constraint \"Ucm\"\n+  \"@internal\n+  cmem access\"\n+  (and (match_code \"mem\")\n+       (match_test \"TARGET_NPS_CMEM && cmem_address (XEXP (op, 0), VOIDmode)\")))\n+\n ;; General constraints\n \n (define_constraint \"Cbr\"\n@@ -430,4 +443,3 @@\n (define_memory_constraint \"ATO\"\n   \"A memory with only a base register\"\n   (match_operand 0 \"mem_noofs_operand\"))\n-"}, {"sha": "0d2e217bf9d66750548c4350dbdb71a83f748285", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -123,6 +123,8 @@\n   int size = GET_MODE_SIZE (GET_MODE (op));\n \n   op = XEXP (op, 0);\n+  if (TARGET_NPS_CMEM && cmem_address (op, SImode))\n+    return 0;\n   switch (GET_CODE (op))\n     {\n     case SYMBOL_REF :\n@@ -819,3 +821,20 @@\n (define_predicate \"double_register_operand\"\n   (ior (match_test \"even_register_operand (op, mode)\")\n        (match_test \"arc_double_register_operand (op, mode)\")))\n+\n+(define_predicate \"cmem_address_0\"\n+  (and (match_code \"symbol_ref\")\n+       (match_test \"SYMBOL_REF_FLAGS (op) & SYMBOL_FLAG_CMEM\")))\n+\n+(define_predicate \"cmem_address_1\"\n+  (and (match_code \"plus\")\n+       (match_test \"cmem_address_0 (XEXP (op, 0), SImode)\")))\n+\n+(define_predicate \"cmem_address_2\"\n+  (and (match_code \"const\")\n+       (match_test \"cmem_address_1 (XEXP (op, 0), SImode)\")))\n+\n+(define_predicate \"cmem_address\"\n+  (ior (match_operand:SI 0 \"cmem_address_0\")\n+       (match_operand:SI 0 \"cmem_address_1\")\n+       (match_operand:SI 0 \"cmem_address_2\")))"}, {"sha": "aa8ae68acfd265674fb1e8063f8f99cdd1b6ff2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -1,3 +1,16 @@\n+2016-04-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gcc.target/arc/cmem-1.c: New file.\n+\t* gcc.target/arc/cmem-2.c: New file.\n+\t* gcc.target/arc/cmem-3.c: New file.\n+\t* gcc.target/arc/cmem-4.c: New file.\n+\t* gcc.target/arc/cmem-5.c: New file.\n+\t* gcc.target/arc/cmem-6.c: New file.\n+\t* gcc.target/arc/cmem-7.c: New file.\n+\t* gcc.target/arc/cmem-ld.inc: New file.\n+\t* gcc.target/arc/cmem-st.inc: New file.\n+\n 2016-04-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/70821"}, {"sha": "7f36afbfa7d8b8a7c558f921934c95fe2ee84ff2", "filename": "gcc/testsuite/gcc.target/arc/cmem-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-1.c?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=nps400 -mcmem\" } */\n+\n+#define CMEM_SECTION_ATTR __attribute__ ((section (\".cmem\")));\n+\n+#include \"cmem-st.inc\"\n+\n+/* { dg-final { scan-assembler \"xst \" } } */\n+/* { dg-final { scan-assembler \"xstw \" } } */\n+/* { dg-final { scan-assembler \"xstb \" } } */"}, {"sha": "a3d7c130b5e894f9b8fdfc00968b08366f9869c2", "filename": "gcc/testsuite/gcc.target/arc/cmem-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-2.c?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=nps400 -mcmem\" } */\n+\n+#define CMEM_SECTION_ATTR __attribute__ ((section (\".cmem\")));\n+\n+#include \"cmem-ld.inc\"\n+\n+/* { dg-final { scan-assembler \"xld \" } } */\n+/* { dg-final { scan-assembler \"xldw \" } } */\n+/* { dg-final { scan-assembler \"xldb \" } } */"}, {"sha": "dee73b5c5d30d6d96c20a61c32378c1cbb8ca4e5", "filename": "gcc/testsuite/gcc.target/arc/cmem-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-3.c?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=nps400 -mcmem\" } */\n+\n+#define CMEM_SECTION_ATTR __attribute__ ((section (\".cmem_private\")));\n+\n+#include \"cmem-st.inc\"\n+\n+/* { dg-final { scan-assembler \"xst \" } } */\n+/* { dg-final { scan-assembler \"xstw \" } } */\n+/* { dg-final { scan-assembler \"xstb \" } } */"}, {"sha": "1da6bce77c48f5a7bfb9200bb7dead8deac566c1", "filename": "gcc/testsuite/gcc.target/arc/cmem-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-4.c?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=nps400 -mcmem\" } */\n+\n+#define CMEM_SECTION_ATTR __attribute__ ((section (\".cmem_private\")));\n+\n+#include \"cmem-ld.inc\"\n+\n+/* { dg-final { scan-assembler \"xld \" } } */\n+/* { dg-final { scan-assembler \"xldw \" } } */\n+/* { dg-final { scan-assembler \"xldb \" } } */"}, {"sha": "ad6904f7360538488ab3e88af839f51aa045c624", "filename": "gcc/testsuite/gcc.target/arc/cmem-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-5.c?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=nps400 -mcmem\" } */\n+\n+#define CMEM_SECTION_ATTR __attribute__ ((section (\".cmem_shared\")));\n+\n+#include \"cmem-st.inc\"\n+\n+/* { dg-final { scan-assembler \"xst \" } } */\n+/* { dg-final { scan-assembler \"xstw \" } } */\n+/* { dg-final { scan-assembler \"xstb \" } } */"}, {"sha": "24bc39bfd07cac337ab89baf5aec2c0c6b040c19", "filename": "gcc/testsuite/gcc.target/arc/cmem-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-6.c?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=nps400 -mcmem\" } */\n+\n+#define CMEM_SECTION_ATTR __attribute__ ((section (\".cmem_shared\")));\n+\n+#include \"cmem-ld.inc\"\n+\n+/* { dg-final { scan-assembler \"xld \" } } */\n+/* { dg-final { scan-assembler \"xldw \" } } */\n+/* { dg-final { scan-assembler \"xldb \" } } */"}, {"sha": "72ee7bdffafbff0cdf0f3b559ae9ed75b0710fa4", "filename": "gcc/testsuite/gcc.target/arc/cmem-7.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-7.c?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mcpu=nps400 -mcmem\" } */\n+\n+struct some_struct\n+{\n+  unsigned char a;\n+};\n+\n+unsigned char other_func (unsigned char);\n+\n+unsigned char\n+some_function ()\n+{\n+  static struct some_struct ss __attribute__ ((section (\".cmem\")));\n+  static struct some_struct tt;\n+\n+  ss.a = other_func (ss.a);\n+  tt.a = other_func (tt.a);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"xldb \\[^\\n\\]*@ss\" } } */\n+/* { dg-final { scan-assembler \"xstb \\[^\\n\\]*@ss\" } } */\n+/* { dg-final { scan-assembler-not \"xldb \\[^\\n\\]*@tt\" } } */\n+/* { dg-final { scan-assembler-not \"xstb \\[^\\n\\]*@tt\" } } */"}, {"sha": "7b51bb39a1749cfcb779d1cd8cbec2a1b1293dd0", "filename": "gcc/testsuite/gcc.target/arc/cmem-ld.inc", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-ld.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-ld.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-ld.inc?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -0,0 +1,16 @@\n+\n+struct foo_type\n+{\n+  unsigned int a;\n+  unsigned short b;\n+  unsigned char c;\n+};\n+\n+struct foo_type foo __attribute__ ((section (\".cmem\")));\n+\n+unsigned int\n+f ()\n+{\n+  unsigned int tmp = foo.a + foo.b + foo.c;\n+  return tmp;\n+}"}, {"sha": "30aeace6609e5cb053e4ca4fcb41c00ef58d474e", "filename": "gcc/testsuite/gcc.target/arc/cmem-st.inc", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-st.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-st.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-st.inc?ref=4d03dc2fdfb459f6ff9f5a913d7d48588ca48bf9", "patch": "@@ -0,0 +1,18 @@\n+\n+struct foo_type\n+{\n+  unsigned int a;\n+  unsigned short b;\n+  unsigned char c;\n+};\n+\n+struct foo_type foo CMEM_SECTION_ATTR\n+\n+int\n+f ()\n+{\n+  foo.a = 3;\n+  foo.b = 2;\n+  foo.c = 1;\n+  return 0;\n+}"}]}