{"sha": "f630797a1ed2f82faf965a47b43b5f995bc6623a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYzMDc5N2ExZWQyZjgyZmFmOTY1YTQ3YjQzYjVmOTk1YmM2NjIzYQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-25T18:55:04Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-25T23:28:04Z"}, "message": "Adjust fur_source internal api to use gori_compute not ranger_cache.\n\nIn order to access the dependencies, the FoldUsingRange source API class\nstored a range_cache.. THis is now contained in the base gori_compute class,\nso use that now.\n\n\t* gimple-range.cc (fold_using_range::range_of_range_op): Use m_gori\n\tintead of m_cache.\n\t(fold_using_range::range_of_address): Adjust.\n\t(fold_using_range::range_of_phi): Adjust.\n\t* gimple-range.h (class fur_source): Adjust.\n\t(fur_source::fur_source): Adjust.", "tree": {"sha": "409bf1e8713d65ea9f6518c9e9f31174db0b0e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/409bf1e8713d65ea9f6518c9e9f31174db0b0e07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f630797a1ed2f82faf965a47b43b5f995bc6623a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f630797a1ed2f82faf965a47b43b5f995bc6623a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f630797a1ed2f82faf965a47b43b5f995bc6623a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f630797a1ed2f82faf965a47b43b5f995bc6623a/comments", "author": null, "committer": null, "parents": [{"sha": "2bccd9154e127909a4cdff5c19904a6562fcd0ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bccd9154e127909a4cdff5c19904a6562fcd0ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bccd9154e127909a4cdff5c19904a6562fcd0ff"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "e2d24d6e45186dc09fe7baa211e643e553c9f0b0", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f630797a1ed2f82faf965a47b43b5f995bc6623a/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f630797a1ed2f82faf965a47b43b5f995bc6623a/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=f630797a1ed2f82faf965a47b43b5f995bc6623a", "patch": "@@ -435,17 +435,17 @@ fold_using_range::range_of_range_op (irange &r, gimple *s, fur_source &src)\n \t  // Fold range, and register any dependency if available.\n \t  int_range<2> r2 (type);\n \t  handler->fold_range (r, type, range1, r2);\n-\t  if (lhs && src.m_cache)\n-\t    src.m_cache->register_dependency (lhs, op1);\n+\t  if (lhs && src.m_gori)\n+\t    src.m_gori->register_dependency (lhs, op1);\n \t}\n       else if (src.get_operand (range2, op2))\n \t{\n \t  // Fold range, and register any dependency if available.\n \t  handler->fold_range (r, type, range1, range2);\n-\t  if (lhs && src.m_cache)\n+\t  if (lhs && src.m_gori)\n \t    {\n-\t      src.m_cache->register_dependency (lhs, op1);\n-\t      src.m_cache->register_dependency (lhs, op2);\n+\t      src.m_gori->register_dependency (lhs, op1);\n+\t      src.m_gori->register_dependency (lhs, op2);\n \t    }\n \t}\n       else\n@@ -485,8 +485,8 @@ fold_using_range::range_of_address (irange &r, gimple *stmt, fur_source &src)\n     {\n       tree ssa = TREE_OPERAND (base, 0);\n       tree lhs = gimple_get_lhs (stmt);\n-      if (src.m_cache && lhs && gimple_range_ssa_p (ssa))\n-\tsrc.m_cache->register_dependency (lhs, ssa);\n+      if (src.m_gori && lhs && gimple_range_ssa_p (ssa))\n+\tsrc.m_gori->register_dependency (lhs, ssa);\n       gcc_checking_assert (irange::supports_type_p (TREE_TYPE (ssa)));\n       src.get_operand (r, ssa);\n       range_cast (r, TREE_TYPE (gimple_assign_rhs1 (stmt)));\n@@ -563,8 +563,8 @@ fold_using_range::range_of_phi (irange &r, gphi *phi, fur_source &src)\n       edge e = gimple_phi_arg_edge (phi, x);\n \n       // Register potential dependencies for stale value tracking.\n-      if (src.m_cache && gimple_range_ssa_p (arg))\n-\tsrc.m_cache->register_dependency (phi_def, arg);\n+      if (src.m_gori && gimple_range_ssa_p (arg))\n+\tsrc.m_gori->register_dependency (phi_def, arg);\n \n       // Get the range of the argument on its edge.\n       fur_source e_src (src.m_query, e);"}, {"sha": "707dcfe027be34ca7fe038c45087f9227dd01e57", "filename": "gcc/gimple-range.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f630797a1ed2f82faf965a47b43b5f995bc6623a/gcc%2Fgimple-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f630797a1ed2f82faf965a47b43b5f995bc6623a/gcc%2Fgimple-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.h?ref=f630797a1ed2f82faf965a47b43b5f995bc6623a", "patch": "@@ -84,10 +84,10 @@ class fur_source\n public:\n   inline fur_source (range_query *q, edge e);\n   inline fur_source (range_query *q, gimple *s);\n-  inline fur_source (range_query *q, class ranger_cache *g, edge e, gimple *s);\n+  inline fur_source (range_query *q, gori_compute *g, edge e, gimple *s);\n   bool get_operand (irange &r, tree expr);\n protected:\n-  ranger_cache *m_cache;\n+  gori_compute *m_gori;\n   range_query *m_query;\n   edge m_edge;\n   gimple *m_stmt;\n@@ -124,7 +124,7 @@ inline\n fur_source::fur_source (range_query *q, edge e)\n {\n   m_query = q;\n-  m_cache = NULL;\n+  m_gori = NULL;\n   m_edge = e;\n   m_stmt = NULL;\n }\n@@ -135,7 +135,7 @@ inline\n fur_source::fur_source (range_query *q, gimple *s)\n {\n   m_query = q;\n-  m_cache = NULL;\n+  m_gori = NULL;\n   m_edge = NULL;\n   m_stmt = s;\n }\n@@ -144,10 +144,10 @@ fur_source::fur_source (range_query *q, gimple *s)\n // and can also set the dependency information as appropriate when invoked.\n \n inline\n-fur_source::fur_source (range_query *q, ranger_cache *g, edge e, gimple *s)\n+fur_source::fur_source (range_query *q, gori_compute *g, edge e, gimple *s)\n {\n   m_query = q;\n-  m_cache = g;\n+  m_gori = g;\n   m_edge = e;\n   m_stmt = s;\n }"}]}