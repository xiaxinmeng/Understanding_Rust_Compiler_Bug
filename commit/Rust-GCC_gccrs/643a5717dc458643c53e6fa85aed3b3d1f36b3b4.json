{"sha": "643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQzYTU3MTdkYzQ1ODY0M2M1M2U2ZmE4NWFlZDNiM2QxZjM2YjNiNA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T15:38:21Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T15:38:21Z"}, "message": "We start out by separating the 'tuning flags' in a CPU or architecture...\n\nWe start out by separating the 'tuning flags' in a CPU or architecture\nspecification into a new field in the data structures.  Because there\naren't very many of these (and we'd like to get rid of them entirely,\neventually, moving to entries in the tuning tables), we just use a\nsimple unsigned word.  This frees up a number of bits in the main\nflags data structure, but we don't consolidate them as we'll be\ngetting rid of them entirely shortly.\n\nThere's one small user-visible change, the slow multiply flag is moved\nfrom being treated as an architectural flag to a tuning flag.  This\nhas two consequences: it's now ignored for architectural matching to a\nCPU and specifying a -mtune option will now correctly apply the\nmultiply performance to the decision as to which sequences to\nsynthesise.\n\n\t* arm-arches.def (ARM_ARCH): Add extra field TUNE_FLAGS, move\n\ttuning properties from architectural FLAGS field.\n\t* arm-cores.def (ARM_CORE): Likewise.\n\t* arm-protos.h (TF_LDSCHED, TF_WBUF, TF_CO_PROC): New macros.\n\t(TF_SMALLMUL, TF_STRONG, TF_SCALE, TF_NOMODE32): New macros.\n\t(FL_LDSCHED, FL_STRONG, FL_WBUF, FL_SMALLMUL): Delete.\n\t(FL_TUNE): Remove deleted elements.\n\t(tune_flags): Convert type to unsigned int.\n\t* arm.c (struct processors): Add new field tune_flags.\n\t(all_cores, all_arches): Initialize it.\n\t(arm_option_override): Adapt uses of tune_flags.  Use tune_flags\n\tfor deciding when we should have slow multiply operations.\n\nFrom-SVN: r243696", "tree": {"sha": "781ebc792a22617ef41b108c7c0d71f4072dfdac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/781ebc792a22617ef41b108c7c0d71f4072dfdac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/comments", "author": null, "committer": null, "parents": [{"sha": "f69f6aae843c6b8382abd0b5b3af39ddec17edcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f69f6aae843c6b8382abd0b5b3af39ddec17edcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f69f6aae843c6b8382abd0b5b3af39ddec17edcf"}], "stats": {"total": 385, "additions": 199, "deletions": 186}, "files": [{"sha": "11ea276eecb5fe67fd840a302a82472ae33ef96f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "patch": "@@ -1,3 +1,18 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm-arches.def (ARM_ARCH): Add extra field TUNE_FLAGS, move\n+\ttuning properties from architectural FLAGS field.\n+\t* arm-cores.def (ARM_CORE): Likewise.\n+\t* arm-protos.h (TF_LDSCHED, TF_WBUF, TF_CO_PROC): New macros.\n+\t(TF_SMALLMUL, TF_STRONG, TF_SCALE, TF_NOMODE32): New macros.\n+\t(FL_LDSCHED, FL_STRONG, FL_WBUF, FL_SMALLMUL): Delete.\n+\t(FL_TUNE): Remove deleted elements.\n+\t(tune_flags): Convert type to unsigned int.\n+\t* arm.c (struct processors): Add new field tune_flags.\n+\t(all_cores, all_arches): Initialize it.\n+\t(arm_option_override): Adapt uses of tune_flags.  Use tune_flags\n+\tfor deciding when we should have slow multiply operations.\n+\n 2016-12-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/78519"}, {"sha": "93a13c8b2660d22da46fe3a92b4bff3e22471334", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "patch": "@@ -107,12 +107,12 @@ struct arm_arch_core_flag\n static const struct arm_arch_core_flag arm_arch_core_flags[] =\n {\n #undef ARM_CORE\n-#define ARM_CORE(NAME, X, IDENT, ARCH, FLAGS, COSTS) \\\n+#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, FLAGS, COSTS) \\\n   {NAME, FLAGS},\n #include \"config/arm/arm-cores.def\"\n #undef ARM_CORE\n #undef ARM_ARCH\n-#define ARM_ARCH(NAME, CORE, ARCH, FLAGS) \\\n+#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, FLAGS)\t\\\n   {NAME, FLAGS},\n #include \"config/arm/arm-arches.def\"\n #undef ARM_ARCH"}, {"sha": "d81a4718c3c9efb8e01d079eccc25366fa274507", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 37, "deletions": 48, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "patch": "@@ -19,7 +19,7 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_ARCH(NAME, CORE, ARCH, FLAGS)\n+      ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, FLAGS)\n \n    The NAME is the name of the architecture, represented as a string\n    constant.  The CORE is the identifier for a core representative of\n@@ -28,52 +28,41 @@\n \n    genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n \n-ARM_ARCH(\"armv2\",   arm2,       2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2))\n-ARM_ARCH(\"armv2a\",  arm2,       2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2))\n-ARM_ARCH(\"armv3\",   arm6,       3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3))\n-ARM_ARCH(\"armv3m\",  arm7m,      3M,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M))\n-ARM_ARCH(\"armv4\",   arm7tdmi,   4,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH4))\n+ARM_ARCH(\"armv2\",   arm2,       (TF_CO_PROC | TF_NO_MODE32), 2,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2))\n+ARM_ARCH(\"armv2a\",  arm2,       (TF_CO_PROC | TF_NO_MODE32), 2,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2))\n+ARM_ARCH(\"armv3\",   arm6,       TF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3))\n+ARM_ARCH(\"armv3m\",  arm7m,      TF_CO_PROC, 3M,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M))\n+ARM_ARCH(\"armv4\",   arm7tdmi,   TF_CO_PROC, 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4))\n /* Strictly, FL_MODE26 is a permitted option for v4t, but there are no\n    implementations that support it, so we will leave it out for now.  */\n-ARM_ARCH(\"armv4t\",  arm7tdmi,   4T,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH4T))\n-ARM_ARCH(\"armv5\",   arm10tdmi,  5,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH5))\n-ARM_ARCH(\"armv5t\",  arm10tdmi,  5T,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH5T))\n-ARM_ARCH(\"armv5e\",  arm1026ejs, 5E,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH5E))\n-ARM_ARCH(\"armv5te\", arm1026ejs, 5TE,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH5TE))\n-ARM_ARCH(\"armv6\",   arm1136js,  6,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6))\n-ARM_ARCH(\"armv6j\",  arm1136js,  6J,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6J))\n-ARM_ARCH(\"armv6k\",  mpcore,\t6K,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6K))\n-ARM_ARCH(\"armv6z\",  arm1176jzs, 6Z,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6Z))\n-ARM_ARCH(\"armv6kz\", arm1176jzs, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6KZ))\n-ARM_ARCH(\"armv6zk\", arm1176jzs, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6KZ))\n-ARM_ARCH(\"armv6t2\", arm1156t2s, 6T2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6T2))\n-ARM_ARCH(\"armv6-m\", cortexm1,\t6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n-ARM_ARCH(\"armv6s-m\", cortexm1,\t6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n-ARM_ARCH(\"armv7\",   cortexa8,\t7,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7))\n-ARM_ARCH(\"armv7-a\", cortexa8,\t7A,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7A))\n-ARM_ARCH(\"armv7ve\", cortexa8,\t7A,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7VE))\n-ARM_ARCH(\"armv7-r\", cortexr4,\t7R,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7R))\n-ARM_ARCH(\"armv7-m\", cortexm3,\t7M,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7M))\n-ARM_ARCH(\"armv7e-m\", cortexm4,  7EM,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7EM))\n-ARM_ARCH(\"armv8-a\", cortexa53,  8A,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH8A))\n-ARM_ARCH(\"armv8-a+crc\",cortexa53, 8A,   ARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_CRC32  | FL_FOR_ARCH8A))\n-ARM_ARCH(\"armv8.1-a\", cortexa53,  8A,\n-\t  ARM_FSET_MAKE (FL_CO_PROC | FL_CRC32 | FL_FOR_ARCH8A,\n-\t\t\t FL2_FOR_ARCH8_1A))\n-ARM_ARCH(\"armv8.1-a+crc\",cortexa53, 8A,\n-\t  ARM_FSET_MAKE (FL_CO_PROC | FL_CRC32 | FL_FOR_ARCH8A,\n-\t\t\t FL2_FOR_ARCH8_1A))\n-ARM_ARCH (\"armv8.2-a\", cortexa53,  8A,\n-\t  ARM_FSET_MAKE (FL_CO_PROC | FL_CRC32 | FL_FOR_ARCH8A,\n-\t\t\t FL2_FOR_ARCH8_2A))\n-ARM_ARCH (\"armv8.2-a+fp16\", cortexa53,  8A,\n-\t  ARM_FSET_MAKE (FL_CO_PROC | FL_CRC32 | FL_FOR_ARCH8A,\n-\t\t\t FL2_FOR_ARCH8_2A | FL2_FP16INST))\n-ARM_ARCH(\"armv8-m.base\", cortexm23, 8M_BASE,\n-\t  ARM_FSET_MAKE (FL_FOR_ARCH8M_BASE, FL2_CMSE))\n-ARM_ARCH(\"armv8-m.main\", cortexm7, 8M_MAIN,\n-\t  ARM_FSET_MAKE (FL_CO_PROC | FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n-ARM_ARCH(\"armv8-m.main+dsp\", cortexm33, 8M_MAIN,\n-\t  ARM_FSET_MAKE (FL_CO_PROC | FL_ARCH7EM | FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n-ARM_ARCH(\"iwmmxt\",  iwmmxt,     5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT))\n-ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2))\n+ARM_ARCH(\"armv4t\",  arm7tdmi,   TF_CO_PROC, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T))\n+ARM_ARCH(\"armv5\",   arm10tdmi,  TF_CO_PROC, 5,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5))\n+ARM_ARCH(\"armv5t\",  arm10tdmi,  TF_CO_PROC, 5T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T))\n+ARM_ARCH(\"armv5e\",  arm1026ejs, TF_CO_PROC, 5E,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5E))\n+ARM_ARCH(\"armv5te\", arm1026ejs, TF_CO_PROC, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE))\n+ARM_ARCH(\"armv6\",   arm1136js,  TF_CO_PROC, 6,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6))\n+ARM_ARCH(\"armv6j\",  arm1136js,  TF_CO_PROC, 6J,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6J))\n+ARM_ARCH(\"armv6k\",  mpcore,\tTF_CO_PROC, 6K,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6K))\n+ARM_ARCH(\"armv6z\",  arm1176jzs, TF_CO_PROC, 6Z,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6Z))\n+ARM_ARCH(\"armv6kz\", arm1176jzs, TF_CO_PROC, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ))\n+ARM_ARCH(\"armv6zk\", arm1176jzs, TF_CO_PROC, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ))\n+ARM_ARCH(\"armv6t2\", arm1156t2s, TF_CO_PROC, 6T2,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6T2))\n+ARM_ARCH(\"armv6-m\", cortexm1,\t0,\t      6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n+ARM_ARCH(\"armv6s-m\", cortexm1,\t0,\t      6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n+ARM_ARCH(\"armv7\",   cortexa8,\tTF_CO_PROC, 7,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7))\n+ARM_ARCH(\"armv7-a\", cortexa8,\tTF_CO_PROC, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A))\n+ARM_ARCH(\"armv7ve\", cortexa8,\tTF_CO_PROC, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7VE))\n+ARM_ARCH(\"armv7-r\", cortexr4,\tTF_CO_PROC, 7R,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R))\n+ARM_ARCH(\"armv7-m\", cortexm3,\tTF_CO_PROC, 7M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7M))\n+ARM_ARCH(\"armv7e-m\", cortexm4,  TF_CO_PROC, 7EM,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7EM))\n+ARM_ARCH(\"armv8-a\", cortexa53,  TF_CO_PROC, 8A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8A))\n+ARM_ARCH(\"armv8-a+crc\",cortexa53, TF_CO_PROC, 8A,   ARM_FSET_MAKE_CPU1 (FL_CRC32  | FL_FOR_ARCH8A))\n+ARM_ARCH(\"armv8.1-a\", cortexa53,  TF_CO_PROC, 8A,   ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_1A))\n+ARM_ARCH(\"armv8.1-a+crc\",cortexa53, TF_CO_PROC, 8A, ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_1A))\n+ARM_ARCH (\"armv8.2-a\", cortexa53,  TF_CO_PROC, 8A,  ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_2A))\n+ARM_ARCH (\"armv8.2-a+fp16\", cortexa53,  TF_CO_PROC, 8A, ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_2A | FL2_FP16INST))\n+ARM_ARCH(\"armv8-m.base\", cortexm23, 0,\t      8M_BASE, ARM_FSET_MAKE (FL_FOR_ARCH8M_BASE, FL2_CMSE))\n+ARM_ARCH(\"armv8-m.main\", cortexm7, TF_CO_PROC, 8M_MAIN, ARM_FSET_MAKE (FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n+ARM_ARCH(\"armv8-m.main+dsp\", cortexm33, TF_CO_PROC, 8M_MAIN, ARM_FSET_MAKE (FL_ARCH7EM | FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n+ARM_ARCH(\"iwmmxt\",  iwmmxt,     (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT))\n+ARM_ARCH(\"iwmmxt2\", iwmmxt2,    (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2))"}, {"sha": "27b156a19e28fd024401831747b0add2d1762dbf", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 112, "deletions": 112, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "patch": "@@ -25,13 +25,14 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_CORE(CORE_NAME, INTERNAL_IDENT, TUNE_IDENT, ARCH, FLAGS, COSTS)\n+      ARM_CORE(CORE_NAME, INTERNAL_IDENT, TUNE_IDENT, TUNE_FLAGS, ARCH, FLAGS, COSTS)\n \n    The CORE_NAME is the name of the core, represented as a string constant.\n    The INTERNAL_IDENT is the name of the core represented as an identifier.\n    This must be unique for each entry in this table.\n    The TUNE_IDENT is the name of the core for which scheduling decisions\n    should be made, represented as an identifier.\n+   TUNE_FLAGS is a set of flag bits that are used to affect tuning.\n    ARCH is the architecture revision implemented by the chip.\n    FLAGS is the set of feature flags of that core.\n    This need not include flags implied by the architecture.\n@@ -43,145 +44,144 @@\n    Some tools assume no whitespace up to the first \",\" in each entry.  */\n \n /* V2/V2A Architecture Processors */\n-ARM_CORE(\"arm2\",\tarm2, arm2,\t2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2), slowmul)\n-ARM_CORE(\"arm250\",\tarm250, arm250,\t2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2), slowmul)\n-ARM_CORE(\"arm3\",\tarm3, arm3,\t2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2), slowmul)\n+ARM_CORE(\"arm2\",\tarm2, arm2,\t\t(TF_CO_PROC | TF_NO_MODE32), 2,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n+ARM_CORE(\"arm250\",\tarm250, arm250,\t\t(TF_CO_PROC | TF_NO_MODE32), 2,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n+ARM_CORE(\"arm3\",\tarm3, arm3,\t\t(TF_CO_PROC | TF_NO_MODE32), 2,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n \n /* V3 Architecture Processors */\n-ARM_CORE(\"arm6\",\tarm6, arm6,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm60\",\tarm60, arm60,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm600\",\tarm600, arm600,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm610\",\tarm610, arm610,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm620\",\tarm620, arm620,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7\",\tarm7, arm7,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm70\",\tarm70, arm70,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm700\",\tarm700, arm700,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm710\",\tarm710, arm710,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm720\",\tarm720, arm720,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm710c\",\tarm710c, arm710c,\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7100\",\tarm7100, arm7100,\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7500\",\tarm7500, arm7500,\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm6\",\tarm6, arm6,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm60\",\tarm60, arm60,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm600\",\tarm600, arm600,\t\t(TF_CO_PROC | TF_WBUF), 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm610\",\tarm610, arm610,\t\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm620\",\tarm620, arm620,\t\t(TF_CO_PROC | TF_WBUF), 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7\",\tarm7, arm7,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm70\",\tarm70, arm70,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm700\",\tarm700, arm700,\t\t(TF_CO_PROC | TF_WBUF), 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t(TF_CO_PROC | TF_WBUF), 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm710\",\tarm710, arm710,\t\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm720\",\tarm720, arm720,\t\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm710c\",\tarm710c, arm710c,\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7100\",\tarm7100, arm7100,\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7500\",\tarm7500, arm7500,\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n /* Doesn't have an external co-proc, but does have embedded fpa. */\n-ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t(TF_CO_PROC | TF_WBUF), 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n \n /* V3M Architecture Processors */\n /* arm7m doesn't exist on its own, but only with D, (\"and\", and I), but\n    those don't alter the code, so arm7m is sometimes used.  */\n-ARM_CORE(\"arm7m\",   arm7m, arm7m,\t3M,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n-ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t3M,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n-ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t3M,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n+ARM_CORE(\"arm7m\",   arm7m, arm7m,\t\tTF_CO_PROC, 3M,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n+ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t\tTF_CO_PROC, 3M,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n+ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t\tTF_CO_PROC, 3M,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n \n /* V4 Architecture Processors */\n-ARM_CORE(\"arm8\",          arm8, arm8,\t\t\t4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_FOR_ARCH4), fastmul)\n-ARM_CORE(\"arm810\",        arm810, arm810,\t\t4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_FOR_ARCH4), fastmul)\n-ARM_CORE(\"strongarm\",     strongarm, strongarm,\t\t4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"fa526\",         fa526, fa526,\t\t\t4,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4), fastmul)\n-ARM_CORE(\"fa626\",         fa626, fa626,\t\t\t4,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"arm8\",          arm8, arm8,\t\t\tTF_LDSCHED, 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"arm810\",        arm810, arm810,\t\tTF_LDSCHED, 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"strongarm\",     strongarm, strongarm,\t\t(TF_LDSCHED | TF_STRONG), 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t(TF_LDSCHED | TF_STRONG), 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, (TF_LDSCHED | TF_STRONG), 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, (TF_LDSCHED | TF_STRONG), 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"fa526\",         fa526, fa526,\t\t\tTF_LDSCHED, 4,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"fa626\",         fa626, fa626,\t\t\tTF_LDSCHED, 4,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4), fastmul)\n \n /* V4T Architecture Processors */\n-ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\t4T,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\t4T,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm710t\",\tarm710t, arm710t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_WBUF | FL_FOR_ARCH4T),    fastmul)\n-ARM_CORE(\"arm720t\",\tarm720t, arm720t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_WBUF | FL_FOR_ARCH4T),    fastmul)\n-ARM_CORE(\"arm740t\",\tarm740t, arm740t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_WBUF | FL_FOR_ARCH4T),    fastmul)\n-ARM_CORE(\"arm9\",\tarm9, arm9,\t\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm920\",\tarm920, arm920,\t\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm920t\",\tarm920t, arm920t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm922t\",\tarm922t, arm922t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm940t\",\tarm940t, arm940t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\tTF_CO_PROC, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\tTF_CO_PROC, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm710t\",\tarm710t, arm710t,\tTF_WBUF, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T),    fastmul)\n+ARM_CORE(\"arm720t\",\tarm720t, arm720t,\tTF_WBUF, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T),    fastmul)\n+ARM_CORE(\"arm740t\",\tarm740t, arm740t,\tTF_WBUF, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T),    fastmul)\n+ARM_CORE(\"arm9\",\tarm9, arm9,\t\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm920\",\tarm920, arm920,\t\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm920t\",\tarm920t, arm920t,\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm922t\",\tarm922t, arm922t,\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm940t\",\tarm940t, arm940t,\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n \n /* V5T Architecture Processors */\n-ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\t5T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5T), fastmul)\n-ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\t5T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5T), fastmul)\n+ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\tTF_LDSCHED, 5T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T), fastmul)\n+ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\tTF_LDSCHED, 5T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T), fastmul)\n \n /* V5TE Architecture Processors */\n-ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), fastmul)\n-ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), fastmul)\n-ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), fastmul)\n-ARM_CORE(\"xscale\",\txscale, xscale,\t\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_FOR_ARCH5TE), xscale)\n-ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_FOR_ARCH5TE), xscale)\n-ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2 | FL_FOR_ARCH5TE), xscale)\n-ARM_CORE(\"fa606te\",\tfa606te, fa606te,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"fa626te\",\tfa626te, fa626te,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"fa726te\",\tfa726te, fa726te,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), fa726te)\n+ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n+ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n+ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n+ARM_CORE(\"xscale\",\txscale, xscale,\t\t(TF_LDSCHED | TF_XSCALE), 5TE,\tARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_FOR_ARCH5TE), xscale)\n+ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t(TF_LDSCHED | TF_XSCALE), 5TE,\tARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_IWMMXT | FL_FOR_ARCH5TE), xscale)\n+ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t(TF_LDSCHED | TF_XSCALE), 5TE,\tARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_IWMMXT | FL_IWMMXT2 | FL_FOR_ARCH5TE), xscale)\n+ARM_CORE(\"fa606te\",\tfa606te, fa606te,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"fa626te\",\tfa626te, fa626te,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"fa726te\",\tfa726te, fa726te,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fa726te)\n \n /* V5TEJ Architecture Processors */\n-ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\t5TEJ,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TEJ), 9e)\n-ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\t5TEJ,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TEJ), 9e)\n+ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\tTF_LDSCHED, 5TEJ,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TEJ), 9e)\n+ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\tTF_LDSCHED, 5TEJ,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TEJ), 9e)\n \n /* V6 Architecture Processors */\n-ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\t6J,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6J), 9e)\n-ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\t6J,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6J), 9e)\n-ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\t6KZ,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6KZ), 9e)\n-ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\t6KZ,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6KZ), 9e)\n-ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\t6K,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6K), 9e)\n-ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\t6K,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6K), 9e)\n-ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\t6T2,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6T2), v6t2)\n-ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\t6T2,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6T2), v6t2)\n+ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\tTF_LDSCHED, 6J,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6J), 9e)\n+ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\tTF_LDSCHED, 6J,\tARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6J), 9e)\n+ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\tTF_LDSCHED, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ), 9e)\n+ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\tTF_LDSCHED, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6KZ), 9e)\n+ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\tTF_LDSCHED, 6K,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6K), 9e)\n+ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\tTF_LDSCHED, 6K,\tARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6K), 9e)\n+ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\tTF_LDSCHED, 6T2,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6T2), v6t2)\n+ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\tTF_LDSCHED, 6T2,\tARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6T2), v6t2)\n \n /* V6M Architecture Processors */\n-ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\t6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\t6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\t6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\tTF_LDSCHED, 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\tTF_LDSCHED, 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\tTF_LDSCHED, 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n \n /* V6M Architecture Processors for small-multiply implementations.  */\n-ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus,6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t(TF_LDSCHED | TF_SMALLMUL), 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t(TF_LDSCHED | TF_SMALLMUL), 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus, (TF_LDSCHED | TF_SMALLMUL), 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n \n /* V7 Architecture Processors */\n-ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7A), cortex)\n-ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7A), cortex_a5)\n-ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a7)\n-ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7A), cortex_a8)\n-ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7A), cortex_a9)\n-ARM_CORE(\"cortex-a12\",\t\tcortexa12, cortexa17,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n-ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n-ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n-ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\t7R,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\t7R,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\t7R,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\t7R,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r8\",\t\tcortexr8, cortexr7,\t\t7R,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\t7EM,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_NO_VOLATILE_CE | FL_FOR_ARCH7EM), cortex_m7)\n-ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\t7EM,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7EM), v7m)\n-ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\t7M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7M), v7m)\n-ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7A), marvell_pj4)\n+ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex)\n+ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a5)\n+ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a7)\n+ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a8)\n+ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a9)\n+ARM_CORE(\"cortex-a12\",\t\tcortexa12, cortexa17,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n+ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n+ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n+ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\tTF_LDSCHED, 7R,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\tTF_LDSCHED, 7R,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\tTF_LDSCHED, 7R,\tARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\tTF_LDSCHED, 7R,\tARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r8\",\t\tcortexr8, cortexr7,\t\tTF_LDSCHED, 7R,\tARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\tTF_LDSCHED, 7EM,\tARM_FSET_MAKE_CPU1 (FL_NO_VOLATILE_CE | FL_FOR_ARCH7EM), cortex_m7)\n+ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\tTF_LDSCHED, 7EM,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7EM), v7m)\n+ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\tTF_LDSCHED, 7M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7M), v7m)\n+ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), marvell_pj4)\n \n /* V7 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n-ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n+ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n+ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n \n /* V8 Architecture Processors */\n-ARM_CORE(\"cortex-a32\",\tcortexa32, cortexa53,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a35)\n-ARM_CORE(\"cortex-a35\",\tcortexa35, cortexa53,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a35)\n-ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a53)\n-ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a73\",\tcortexa73, cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n-ARM_CORE(\"cortex-m23\",\tcortexm23, cortexm23,\t8M_BASE, ARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH8M_BASE), v6m)\n-ARM_CORE(\"cortex-m33\",\tcortexm33, cortexm33,\t8M_MAIN, ARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_ARCH7EM | FL_FOR_ARCH8M_MAIN), v7m)\n-ARM_CORE(\"exynos-m1\",\texynosm1,  exynosm1,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), exynosm1)\n-ARM_CORE(\"falkor\",\tfalkor,    cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n-ARM_CORE(\"qdf24xx\",\tqdf24xx,   cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n-ARM_CORE(\"xgene1\",      xgene1,    xgene1,      8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH8A),            xgene1)\n+ARM_CORE(\"cortex-a32\",\tcortexa32, cortexa53,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a35)\n+ARM_CORE(\"cortex-a35\",\tcortexa35, cortexa53,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a35)\n+ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a53)\n+ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"cortex-a73\",\tcortexa73, cortexa57,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n+ARM_CORE(\"cortex-m23\",\tcortexm23, cortexm23,\tTF_LDSCHED, 8M_BASE, ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8M_BASE), v6m)\n+ARM_CORE(\"cortex-m33\",\tcortexm33, cortexm33,\tTF_LDSCHED, 8M_MAIN, ARM_FSET_MAKE_CPU1 (FL_ARCH7EM | FL_FOR_ARCH8M_MAIN), v7m)\n+ARM_CORE(\"exynos-m1\",\texynosm1,  exynosm1,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), exynosm1)\n+ARM_CORE(\"falkor\",\tfalkor,    cortexa57,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n+ARM_CORE(\"qdf24xx\",\tqdf24xx,   cortexa57,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n+ARM_CORE(\"xgene1\",      xgene1,    xgene1,      TF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8A),            xgene1)\n \n /* V8 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, 8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, 8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a73.cortex-a35\", cortexa73cortexa35, cortexa53, 8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n-ARM_CORE(\"cortex-a73.cortex-a53\", cortexa73cortexa53, cortexa53, 8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n-\n+ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, TF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, TF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"cortex-a73.cortex-a35\", cortexa73cortexa35, cortexa53, TF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n+ARM_CORE(\"cortex-a73.cortex-a53\", cortexa73cortexa53, cortexa53, TF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)"}, {"sha": "6482c64716346d619562b2ef8984d45c76a7c277", "filename": "gcc/config/arm/arm-flags.h", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm-flags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm-flags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-flags.h?ref=643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "patch": "@@ -22,6 +22,16 @@\n #ifndef GCC_ARM_FLAGS_H\n #define GCC_ARM_FLAGS_H\n \n+/* Flags used to identify a few tuning properties.  These are for legacy\n+   purposes only.  Do not add any more of these: use the main tuning tables.  */\n+#define TF_LDSCHED\t(1U << 0)\n+#define TF_WBUF\t\t(1U << 1)\n+#define TF_CO_PROC\t(1U << 2)\n+#define TF_SMALLMUL\t(1U << 3)\n+#define TF_STRONG\t(1U << 4)\n+#define TF_XSCALE\t(1U << 5)\n+#define TF_NO_MODE32\t(1U << 6)\n+\n /* Flags used to identify the presence of processor capabilities.  */\n \n /* Bit values used to identify processor capabilities.  */\n@@ -34,16 +44,15 @@\n #define FL_ARCH4      (1U << 4)\t\t/* Architecture rel 4.  */\n #define FL_ARCH5      (1U << 5)\t\t/* Architecture rel 5.  */\n #define FL_THUMB      (1U << 6)\t\t/* Thumb aware.  */\n-#define FL_LDSCHED    (1U << 7)\t\t/* Load scheduling necessary.  */\n-#define FL_STRONG     (1U << 8)\t\t/* StrongARM.  */\n+/* Spare\t      (1U << 7)\t */\n+/* Spare\t      (1U << 8)  */\n #define FL_ARCH5E     (1U << 9)\t\t/* DSP extensions to v5.  */\n #define FL_XSCALE     (1U << 10)\t/* XScale.  */\n-/* spare\t      (1U << 11) */\n+/* Spare\t      (1U << 11) */\n #define FL_ARCH6      (1U << 12)\t/* Architecture rel 6.  Adds\n \t\t\t\t\t   media instructions.  */\n #define FL_VFPV2      (1U << 13)\t/* Vector Floating Point V2.  */\n-#define FL_WBUF\t      (1U << 14)\t/* Schedule for write buffer ops.\n-\t\t\t\t\t   Note: ARM6 & 7 derivatives only.  */\n+/* Spare\t      (1U << 14) */\n #define FL_ARCH6K     (1U << 15)\t/* Architecture rel 6 K extensions.  */\n #define FL_THUMB2     (1U << 16)\t/* Thumb-2.  */\n #define FL_NOTM\t      (1U << 17)\t/* Instructions not present in the 'M'\n@@ -57,7 +66,7 @@\n #define FL_ARM_DIV    (1U << 23)\t/* Hardware divide (ARM mode).  */\n #define FL_ARCH8      (1U << 24)\t/* Architecture 8.  */\n #define FL_CRC32      (1U << 25)\t/* ARMv8 CRC32 instructions.  */\n-#define FL_SMALLMUL   (1U << 26)\t/* Small multiply supported.  */\n+/* Spare\t      (1U << 26) */\n #define FL_NO_VOLATILE_CE  (1U << 27)\t/* No volatile memory in IT block.  */\n \n #define FL_IWMMXT     (1U << 29)\t/* XScale v2 or \"Intel Wireless MMX\n@@ -73,8 +82,7 @@\n #define FL2_CMSE      (1U << 3)\t\t/* ARMv8-M Security Extensions.  */\n \n /* Flags that only effect tuning, not available instructions.  */\n-#define FL_TUNE\t\t(FL_WBUF | FL_VFPV2 | FL_STRONG | FL_LDSCHED \\\n-\t\t\t | FL_CO_PROC)\n+#define FL_TUNE\t\t(FL_VFPV2)\n \n #define FL_FOR_ARCH2\t\tFL_NOTM\n #define FL_FOR_ARCH3\t\t(FL_FOR_ARCH2 | FL_MODE32)"}, {"sha": "6f150653329153e6c5866b0e8166672d3dbb34a6", "filename": "gcc/config/arm/arm-opts.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-opts.h?ref=643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "patch": "@@ -31,7 +31,7 @@\n enum processor_type\n {\n #undef ARM_CORE\n-#define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, ARCH, FLAGS, COSTS) \\\n+#define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, TUNE_FLAGS, ARCH, FLAGS, COSTS) \\\n   TARGET_CPU_##INTERNAL_IDENT,\n #include \"arm-cores.def\"\n #undef ARM_CORE"}, {"sha": "2ec9a4e30721679257217dda2d68c9b0b7fcf5e0", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "patch": "@@ -358,7 +358,7 @@ extern arm_feature_set insn_flags;\n \n /* The bits in this mask specify which instruction scheduling options should\n    be used.  */\n-extern arm_feature_set tune_flags;\n+extern unsigned int tune_flags;\n \n /* Nonzero if this chip supports the ARM Architecture 3M extensions.  */\n extern int arm_arch3m;"}, {"sha": "2caaba43cf6431c75bdc10b9fedf08573850eb91", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/643a5717dc458643c53e6fa85aed3b3d1f36b3b4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "patch": "@@ -785,7 +785,7 @@ arm_feature_set insn_flags = ARM_FSET_EMPTY;\n \n /* The bits in this mask specify which instruction scheduling options should\n    be used.  */\n-arm_feature_set tune_flags = ARM_FSET_EMPTY;\n+unsigned int tune_flags = 0;\n \n /* The highest ARM architecture version supported by the\n    target.  */\n@@ -950,6 +950,7 @@ struct processors\n {\n   const char *const name;\n   enum processor_type core;\n+  unsigned int tune_flags;\n   const char *arch;\n   enum base_architecture base_arch;\n   const arm_feature_set flags;\n@@ -2287,12 +2288,12 @@ const struct tune_params arm_fa726te_tune =\n static const struct processors all_cores[] =\n {\n   /* ARM Cores */\n-#define ARM_CORE(NAME, X, IDENT, ARCH, FLAGS, COSTS) \\\n-  {NAME, TARGET_CPU_##IDENT, #ARCH, BASE_ARCH_##ARCH,\t  \\\n+#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, FLAGS, COSTS) \\\n+  {NAME, TARGET_CPU_##IDENT, TUNE_FLAGS, #ARCH, BASE_ARCH_##ARCH, \\\n    FLAGS, &arm_##COSTS##_tune},\n #include \"arm-cores.def\"\n #undef ARM_CORE\n-  {NULL, TARGET_CPU_arm_none, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n+  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n };\n \n static const struct processors all_architectures[] =\n@@ -2301,11 +2302,11 @@ static const struct processors all_architectures[] =\n   /* We don't specify tuning costs here as it will be figured out\n      from the core.  */\n \n-#define ARM_ARCH(NAME, CORE, ARCH, FLAGS) \\\n-  {NAME, TARGET_CPU_##CORE, #ARCH, BASE_ARCH_##ARCH, FLAGS, NULL},\n+#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, FLAGS)\t\t\t\\\n+  {NAME, TARGET_CPU_##CORE, TUNE_FLAGS, #ARCH, BASE_ARCH_##ARCH, FLAGS, NULL},\n #include \"arm-arches.def\"\n #undef ARM_ARCH\n-  {NULL, TARGET_CPU_arm_none, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n+  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n };\n \n \n@@ -3177,7 +3178,7 @@ arm_option_override (void)\n   arm_base_arch = arm_selected_cpu->base_arch;\n \n   arm_tune = arm_selected_tune->core;\n-  tune_flags = arm_selected_tune->flags;\n+  tune_flags = arm_selected_tune->tune_flags;\n   current_tune = arm_selected_tune->tune;\n \n   /* TBD: Dwarf info for apcs frame is not handled yet.  */\n@@ -3228,10 +3229,10 @@ arm_option_override (void)\n   arm_arch_thumb2 = ARM_FSET_HAS_CPU1 (insn_flags, FL_THUMB2);\n   arm_arch_xscale = ARM_FSET_HAS_CPU1 (insn_flags, FL_XSCALE);\n \n-  arm_ld_sched = ARM_FSET_HAS_CPU1 (tune_flags, FL_LDSCHED);\n-  arm_tune_strongarm = ARM_FSET_HAS_CPU1 (tune_flags, FL_STRONG);\n-  arm_tune_wbuf = ARM_FSET_HAS_CPU1 (tune_flags, FL_WBUF);\n-  arm_tune_xscale = ARM_FSET_HAS_CPU1 (tune_flags, FL_XSCALE);\n+  arm_ld_sched = (tune_flags & TF_LDSCHED) != 0;\n+  arm_tune_strongarm = (tune_flags & TF_STRONG) != 0;\n+  arm_tune_wbuf = (tune_flags & TF_WBUF) != 0;\n+  arm_tune_xscale = (tune_flags & TF_XSCALE) != 0;\n   arm_arch_iwmmxt = ARM_FSET_HAS_CPU1 (insn_flags, FL_IWMMXT);\n   arm_arch_iwmmxt2 = ARM_FSET_HAS_CPU1 (insn_flags, FL_IWMMXT2);\n   arm_arch_thumb_hwdiv = ARM_FSET_HAS_CPU1 (insn_flags, FL_THUMB_DIV);\n@@ -3240,7 +3241,7 @@ arm_option_override (void)\n   arm_tune_cortex_a9 = (arm_tune == TARGET_CPU_cortexa9) != 0;\n   arm_arch_crc = ARM_FSET_HAS_CPU1 (insn_flags, FL_CRC32);\n   arm_arch_cmse = ARM_FSET_HAS_CPU2 (insn_flags, FL2_CMSE);\n-  arm_m_profile_small_mul = ARM_FSET_HAS_CPU1 (insn_flags, FL_SMALLMUL);\n+  arm_m_profile_small_mul = (tune_flags & TF_SMALLMUL) != 0;\n   arm_fp16_inst = ARM_FSET_HAS_CPU2 (insn_flags, FL2_FP16INST);\n   if (arm_fp16_inst)\n     {\n@@ -3324,7 +3325,7 @@ arm_option_override (void)\n \n   /* For arm2/3 there is no need to do any scheduling if we are doing\n      software floating-point.  */\n-  if (TARGET_SOFT_FLOAT && !ARM_FSET_HAS_CPU1 (tune_flags, FL_MODE32))\n+  if (TARGET_SOFT_FLOAT && (tune_flags & TF_NO_MODE32))\n     flag_schedule_insns = flag_schedule_insns_after_reload = 0;\n \n   /* Use the cp15 method if it is available.  */"}]}