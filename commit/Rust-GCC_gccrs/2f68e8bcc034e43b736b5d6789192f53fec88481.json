{"sha": "2f68e8bcc034e43b736b5d6789192f53fec88481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY2OGU4YmNjMDM0ZTQzYjczNmI1ZDY3ODkxOTJmNTNmZWM4ODQ4MQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-11-12T14:36:41Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-11-12T14:36:41Z"}, "message": "fold-const.c (fold_binary_loc): Don't fold if the result is undefined.\n\n\t* fold-const.c (fold_binary_loc): Don't fold if the result\n\tis undefined.\n\t* match.pd (A + (-B) -> A - B, A - (-B) -> A + B,\n\t-(-A) -> A): Likewise.\n\n\t* c-c++-common/ubsan/overflow-sub-4.c: New test.\n\t* c-c++-common/ubsan/overflow-sub-2.c: Adjust dg-output.\n\t* c-c++-common/ubsan/overflow-int128.c: Likewise.\n\nFrom-SVN: r217427", "tree": {"sha": "360555bbd6800c3e583ecae19b0e459896958de5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/360555bbd6800c3e583ecae19b0e459896958de5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f68e8bcc034e43b736b5d6789192f53fec88481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f68e8bcc034e43b736b5d6789192f53fec88481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f68e8bcc034e43b736b5d6789192f53fec88481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f68e8bcc034e43b736b5d6789192f53fec88481/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8c03a9b391b02a6ace91b216e50926b49dbaae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c03a9b391b02a6ace91b216e50926b49dbaae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c03a9b391b02a6ace91b216e50926b49dbaae0"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "428725bf4fc09d5248b38825910511dad7b3e73b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f68e8bcc034e43b736b5d6789192f53fec88481", "patch": "@@ -1,3 +1,10 @@\n+2014-11-12  Marek Polacek  <polacek@redhat.com>\n+\n+\t* fold-const.c (fold_binary_loc): Don't fold if the result\n+\tis undefined.\n+\t* match.pd (A + (-B) -> A - B, A - (-B) -> A + B,\n+\t-(-A) -> A): Likewise.\n+\n 2014-11-12  Richard Biener  <rguenther@suse.de>\n \n \tMerge from match-and-simplify branch"}, {"sha": "4321b1ea1d28cbb7d52b37e401f69b16822b7901", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2f68e8bcc034e43b736b5d6789192f53fec88481", "patch": "@@ -10538,6 +10538,9 @@ fold_binary_loc (location_t loc,\n \n       /* A - B -> A + (-B) if B is easily negatable.  */\n       if (negate_expr_p (arg1)\n+\t  && (!INTEGRAL_TYPE_P (type)\n+\t      || TYPE_OVERFLOW_WRAPS (type)\n+\t      || (flag_sanitize & SANITIZE_SI_OVERFLOW) == 0)\n \t  && ((FLOAT_TYPE_P (type)\n                /* Avoid this transformation if B is a positive REAL_CST.  */\n \t       && (TREE_CODE (arg1) != REAL_CST"}, {"sha": "d94a8f5141827c2c5985ec2e252707438581ec97", "filename": "gcc/match.pd", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=2f68e8bcc034e43b736b5d6789192f53fec88481", "patch": "@@ -285,19 +285,25 @@ along with GCC; see the file COPYING3.  If not see\n   /* Apply STRIP_NOPS on @0 and the negate.  */\n   (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n        && tree_nop_conversion_p (type, TREE_TYPE (@1))\n-       && (flag_sanitize & SANITIZE_SI_OVERFLOW) == 0)\n+       && (!INTEGRAL_TYPE_P (type)\n+\t   || TYPE_OVERFLOW_WRAPS (type)\n+\t   || (flag_sanitize & SANITIZE_SI_OVERFLOW) == 0))\n    (minus (convert @0) (convert @1))))\n  /* A - (-B) -> A + B */\n  (simplify\n   (minus (convert1? @0) (convert2? (negate @1)))\n   (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n-       && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n+       && tree_nop_conversion_p (type, TREE_TYPE (@1))\n+       && (!INTEGRAL_TYPE_P (type)\n+\t   || TYPE_OVERFLOW_WRAPS (type)\n+\t   || (flag_sanitize & SANITIZE_SI_OVERFLOW) == 0))\n    (plus (convert @0) (convert @1))))\n  /* -(-A) -> A */\n  (simplify\n   (negate (convert? (negate @1)))\n   (if (tree_nop_conversion_p (type, TREE_TYPE (@1))\n-       && (TYPE_OVERFLOW_WRAPS (type)\n+       && (!INTEGRAL_TYPE_P (type)\n+\t   || TYPE_OVERFLOW_WRAPS (type)\n \t   || (flag_sanitize & SANITIZE_SI_OVERFLOW) == 0))\n    (convert @1)))\n "}, {"sha": "cf1107c7d2c582616cb20d0f8ac5005356d6c362", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f68e8bcc034e43b736b5d6789192f53fec88481", "patch": "@@ -1,3 +1,9 @@\n+2014-11-12  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-c++-common/ubsan/overflow-sub-4.c: New test.\n+\t* c-c++-common/ubsan/overflow-sub-2.c: Adjust dg-output.\n+\t* c-c++-common/ubsan/overflow-int128.c: Likewise.\n+\n 2014-11-12  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \t* gcc.target/i386/pr52252-atom-1.c: Extend assembler scan on AVX2 case."}, {"sha": "4384d7c7ab70f235367bae040a9547ef998afd38", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-int128.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-int128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-int128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-int128.c?ref=2f68e8bcc034e43b736b5d6789192f53fec88481", "patch": "@@ -41,7 +41,7 @@ main (void)\n /* { dg-output \"\\[^\\n\\r]*signed integer overflow: 0x7fffffffffffffffffffffffffffff9b \\\\+ 1024 cannot be represented in type '__int128'(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*signed integer overflow: -1 \\\\+ 0x80000000000000000000000000000000 cannot be represented in type '__int128'(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*signed integer overflow: 0x80000000000000000000000000000000 \\\\+ -1 cannot be represented in type '__int128'(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 0x80000000000000000000000000000000 \\\\+ -1 cannot be represented in type '__int128'(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 0x80000000000000000000000000000000 - 1 cannot be represented in type '__int128'(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*signed integer overflow: 0x80000000000000000000000000000064 \\\\+ -1024 cannot be represented in type '__int128'(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*signed integer overflow: 0x7fffffffffffffffffffffffffffffff \\\\* 2 cannot be represented in type '__int128'(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*negation of 0x80000000000000000000000000000000 cannot be represented in type '__int128'; cast to an unsigned type to negate this value to itself\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "88c4762dc274ba0d8eb9d40b21d94986330698b0", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-sub-2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-2.c?ref=2f68e8bcc034e43b736b5d6789192f53fec88481", "patch": "@@ -43,12 +43,12 @@ main (void)\n }\n \n /* { dg-output \"signed integer overflow: -2147483648 - 1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -2147483648 \\\\+ -1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -2147483548 \\\\+ -1024 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -2147483648 \\\\+ -1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -2147482648 \\\\+ -1048576 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -2147483648 - 1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -2147483548 - 1024 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -2147483648 - 1 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -2147482648 - 1048576 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n /* { dg-output \"\\[^\\n\\r]*signed integer overflow: -\\[^\\n\\r]* - 1 cannot be represented in type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -\\[^\\n\\r]* \\\\+ -1 cannot be represented in type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -\\[^\\n\\r]* \\\\+ -1024 cannot be represented in type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -\\[^\\n\\r]* \\\\+ -1 cannot be represented in type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n-/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -\\[^\\n\\r]* \\\\+ -1048576 cannot be represented in type 'long int'\\[^\\n\\r]*\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -\\[^\\n\\r]* - 1 cannot be represented in type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -\\[^\\n\\r]* - 1024 cannot be represented in type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -\\[^\\n\\r]* - 1 cannot be represented in type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: -\\[^\\n\\r]* - 1048576 cannot be represented in type 'long int'\\[^\\n\\r]*\" } */"}, {"sha": "519b7babd091b21ffc30383e8e00eae958a9e28c", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-sub-4.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f68e8bcc034e43b736b5d6789192f53fec88481/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-4.c?ref=2f68e8bcc034e43b736b5d6789192f53fec88481", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n+\n+#define INT_MIN (-__INT_MAX__ - 1)\n+\n+int\n+main ()\n+{\n+  int x = INT_MIN;\n+  int y = 0;\n+  int z;\n+  asm (\"\" : \"+g\" (y));\n+  asm (\"\" : \"+g\" (x));\n+  z = y - (-x);\n+  asm (\"\" : \"+g\" (z));\n+}\n+\n+/* { dg-output \"negation of -2147483648 cannot be represented in type 'int'\\[^\\n\\r]*; cast to an unsigned type to negate this value to itself\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*signed integer overflow: 0 - -2147483648 cannot be represented in type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}]}