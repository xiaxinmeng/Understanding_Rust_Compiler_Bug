{"sha": "f582a3aa6b6954d44bd216e756763ada3afa5d1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU4MmEzYWE2YjY5NTRkNDRiZDIxNmU3NTY3NjNhZGEzYWZhNWQxZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-06-15T21:14:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-06-15T21:14:48Z"}, "message": "i386.c (*prefetch_sse_<mode>): Macroize insn from *prefetch_sse and *prefetch_sse_rex using P mode iterator.\n\n\t* config/i386/i386.c (*prefetch_sse_<mode>):  Macroize insn from\n\t*prefetch_sse and *prefetch_sse_rex using P mode iterator.\n\t(*prefetch_3dnow_<mode>): Ditto from *prefetch_3dnow and\n\t*prefetch_3dnow_rex.\n\nFrom-SVN: r160813", "tree": {"sha": "1a4cf9bb3a4f9118f28f38d880e4f2a0e7036e0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a4cf9bb3a4f9118f28f38d880e4f2a0e7036e0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f582a3aa6b6954d44bd216e756763ada3afa5d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f582a3aa6b6954d44bd216e756763ada3afa5d1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f582a3aa6b6954d44bd216e756763ada3afa5d1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f582a3aa6b6954d44bd216e756763ada3afa5d1e/comments", "author": null, "committer": null, "parents": [{"sha": "a40cc81fff9f6f5dfa7a58a929c73d107b72eab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40cc81fff9f6f5dfa7a58a929c73d107b72eab4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40cc81fff9f6f5dfa7a58a929c73d107b72eab4"}], "stats": {"total": 92, "additions": 31, "deletions": 61}, "files": [{"sha": "24e9a2b2e3c6488ca7a47202d3b8031cd62e1b72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f582a3aa6b6954d44bd216e756763ada3afa5d1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f582a3aa6b6954d44bd216e756763ada3afa5d1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f582a3aa6b6954d44bd216e756763ada3afa5d1e", "patch": "@@ -1,3 +1,10 @@\n+2010-06-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (*prefetch_sse_<mode>):  Macroize insn from\n+\t*prefetch_sse and *prefetch_sse_rex using P mode iterator.\n+\t(*prefetch_3dnow_<mode>): Ditto from *prefetch_3dnow and\n+\t*prefetch_3dnow_rex.\n+\n 2010-06-15  Anatoly Sokolov  <aesok@post.ru>\n \n \t* target.h (struct asm_out):Add declare_constant_name field.\n@@ -84,8 +91,7 @@\n \t(rs6000_generate_compare <cmptf_internal2>): One more clobber.\n \t(tocrel_base, tocrel_offset): New variables.\n \t(toc_relative_expr_p): Set them here.\n-\t(print_operand_address): Skip over any offset on constant pool\n-\taddress.\n+\t(print_operand_address): Skip over any offset on constant pool address.\n \t(rs6000_output_addr_const_extra): Print tocrel_offset before @toc.\n \t(rs6000_mode_dependent_address <LO_SUM>): False for new toc refs.\n \t(offsettable_ok_by_alignment): New function.\n@@ -152,16 +158,14 @@\n \t(bitpack_create, lto_output_bitpack, lto_input_bitpack):\n \tNew inline functions.\n \t* lto-streamer-out.c (lto_output_bitpack): Remove.\n-\t(pack_ts_base_value_fields): Adjust.  Avoid conditional\n-\tbitpacking.\n+\t(pack_ts_base_value_fields): Adjust.  Avoid conditional bitpacking.\n \t(pack_value_fields): Adjust.\n \t(lto_write_tree): Likewise.\n \t(output_gimple_stmt): Likewise.\n \t(output_function): Likewise.\n \t* lto-streamer-in.c (input_gimple_stmt): Adjust.\n \t(input_function): Likewise.\n-\t(unpack_ts_base_value_fields): Adjust.  Avoid conditional\n-\tbitpacking.\n+\t(unpack_ts_base_value_fields): Adjust.  Avoid conditional bitpacking.\n \t(lto_input_bitpack): Remove.\n \t(lto_materialize_tree): Adjust.\n \t* Makefile.in (ipa-prop.o): Add $(LTO_STREAMER_H) dependency.\n@@ -185,8 +189,7 @@\n 2010-06-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/44534\n-\t* config/i386/sse.md (vec_extract_lo_<mode>): Replace 0x1 with\n-\t0x0.\n+\t* config/i386/sse.md (vec_extract_lo_<mode>): Replace 0x1 with 0x0.\n \t(vec_extract_lo_v16hi): Likewise.\n \t(vec_extract_lo_v32qi): Likewise.\n \n@@ -204,8 +207,7 @@\n \t(build_call_expr): New function.\n \n \tPR tree-optimization/44508\n-\t* tree-ssa-propagate.h (substitute_and_fold): Add DO_DCE\n-\targument.\n+\t* tree-ssa-propagate.h (substitute_and_fold): Add DO_DCE argument.\n \t* tree-ssa-propagate.c (substitute_and_fold): If !DO_DCE,\n \tdon't eliminate trivially dead stmts.\n \t* tree-vrp.c (vrp_finalize): Pass false as last argument\n@@ -354,8 +356,8 @@\n \n 2010-06-12  Kazu Hirata  <kazu@codesourcery.com>\n \n-\t* config.gcc (mips64*-*-linux*, mipsisa64*-*-linux*,\n-\tmips*-*-linux*): Add crtfastmath.o to extra_parts.\n+\t* config.gcc (mips64*-*-linux*, mipsisa64*-*-linux*, mips*-*-linux*):\n+\tAdd crtfastmath.o to extra_parts.\n \t* config/mips/crtfastmath.c: New.\n \t* config/mips/linux.h (ENDFILE_SPEC): New.\n \n@@ -370,8 +372,7 @@\n 2010-06-11  Joseph Myers  <joseph@codesourcery.com>\n \n \t* common.opt (Wstrict-aliasing=, Wstrict-overflow=, fabi-version=,\n-\tflto-compression-level=, ftree-parallelize-loops=): Add\n-\tRejectNegative.\n+\tflto-compression-level=, ftree-parallelize-loops=): Add RejectNegative.\n \n 2010-06-11  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -389,7 +390,7 @@\n \n \tPR target/44481\n \t* config/i386/i386.md (UNSPEC_PARITY): New unspec.\n-\t(paritydi2_cmp): Use UNSPEC_PARITY unspec insted of parity RTX.\n+\t(paritydi2_cmp): Use UNSPEC_PARITY unspec instead of parity RTX.\n \t(partiysi2_cmp): Ditto.\n \t(*partiyhi2_cmp): Ditto.\n \t(*parityqi2_cmp): Remove.\n@@ -400,7 +401,7 @@\n \t(bmp_iter_set, bmp_iter_and, bmp_iter_and_compl): Use it.\n \n 2010-06-11  Sandra Loosemore  <sandra@codesourcery.com>\n-            Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-loop-ivopts.c (get_computation_cost_at): Return again the\n \tcomputed cost."}, {"sha": "c81b647b4244ed0cc19caba7adacd4176190eebd", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 45, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f582a3aa6b6954d44bd216e756763ada3afa5d1e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f582a3aa6b6954d44bd216e756763ada3afa5d1e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f582a3aa6b6954d44bd216e756763ada3afa5d1e", "patch": "@@ -18194,11 +18194,11 @@\n     operands[1] = const0_rtx;\n })\n \n-(define_insn \"*prefetch_sse\"\n-  [(prefetch (match_operand:SI 0 \"address_operand\" \"p\")\n+(define_insn \"*prefetch_sse_<mode>\"\n+  [(prefetch (match_operand:P 0 \"address_operand\" \"p\")\n \t     (const_int 0)\n \t     (match_operand:SI 1 \"const_int_operand\" \"\"))]\n-  \"TARGET_PREFETCH_SSE && !TARGET_64BIT\"\n+  \"TARGET_PREFETCH_SSE\"\n {\n   static const char * const patterns[4] = {\n    \"prefetchnta\\t%a0\", \"prefetcht2\\t%a0\", \"prefetcht1\\t%a0\", \"prefetcht0\\t%a0\"\n@@ -18211,57 +18211,24 @@\n }\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"atom_sse_attr\" \"prefetch\")\n-   (set (attr \"length_address\") (symbol_ref \"memory_address_length (operands[0])\"))\n+   (set (attr \"length_address\")\n+\t(symbol_ref \"memory_address_length (operands[0])\"))\n    (set_attr \"memory\" \"none\")])\n \n-(define_insn \"*prefetch_sse_rex\"\n-  [(prefetch (match_operand:DI 0 \"address_operand\" \"p\")\n-\t     (const_int 0)\n-\t     (match_operand:SI 1 \"const_int_operand\" \"\"))]\n-  \"TARGET_PREFETCH_SSE && TARGET_64BIT\"\n-{\n-  static const char * const patterns[4] = {\n-   \"prefetchnta\\t%a0\", \"prefetcht2\\t%a0\", \"prefetcht1\\t%a0\", \"prefetcht0\\t%a0\"\n-  };\n-\n-  int locality = INTVAL (operands[1]);\n-  gcc_assert (locality >= 0 && locality <= 3);\n-\n-  return patterns[locality];\n-}\n-  [(set_attr \"type\" \"sse\")\n-   (set_attr \"atom_sse_attr\" \"prefetch\")\n-   (set (attr \"length_address\") (symbol_ref \"memory_address_length (operands[0])\"))\n-   (set_attr \"memory\" \"none\")])\n-\n-(define_insn \"*prefetch_3dnow\"\n-  [(prefetch (match_operand:SI 0 \"address_operand\" \"p\")\n-\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n-\t     (const_int 3))]\n-  \"TARGET_3DNOW && !TARGET_64BIT\"\n-{\n-  if (INTVAL (operands[1]) == 0)\n-    return \"prefetch\\t%a0\";\n-  else\n-    return \"prefetchw\\t%a0\";\n-}\n-  [(set_attr \"type\" \"mmx\")\n-   (set (attr \"length_address\") (symbol_ref \"memory_address_length (operands[0])\"))\n-   (set_attr \"memory\" \"none\")])\n-\n-(define_insn \"*prefetch_3dnow_rex\"\n-  [(prefetch (match_operand:DI 0 \"address_operand\" \"p\")\n+(define_insn \"*prefetch_3dnow_<mode>\"\n+  [(prefetch (match_operand:P 0 \"address_operand\" \"p\")\n \t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n \t     (const_int 3))]\n-  \"TARGET_3DNOW && TARGET_64BIT\"\n+  \"TARGET_3DNOW\"\n {\n   if (INTVAL (operands[1]) == 0)\n     return \"prefetch\\t%a0\";\n   else\n     return \"prefetchw\\t%a0\";\n }\n   [(set_attr \"type\" \"mmx\")\n-   (set (attr \"length_address\") (symbol_ref \"memory_address_length (operands[0])\"))\n+   (set (attr \"length_address\")\n+\t(symbol_ref \"memory_address_length (operands[0])\"))\n    (set_attr \"memory\" \"none\")])\n \n (define_expand \"stack_protect_set\"\n@@ -18305,7 +18272,8 @@\n \n (define_insn \"stack_tls_protect_set_si\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n-\t(unspec:SI [(match_operand:SI 1 \"const_int_operand\" \"i\")] UNSPEC_SP_TLS_SET))\n+\t(unspec:SI [(match_operand:SI 1 \"const_int_operand\" \"i\")]\n+\t\t   UNSPEC_SP_TLS_SET))\n    (set (match_scratch:SI 2 \"=&r\") (const_int 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n@@ -18314,7 +18282,8 @@\n \n (define_insn \"stack_tls_protect_set_di\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n-\t(unspec:DI [(match_operand:DI 1 \"const_int_operand\" \"i\")] UNSPEC_SP_TLS_SET))\n+\t(unspec:DI [(match_operand:DI 1 \"const_int_operand\" \"i\")]\n+\t\t   UNSPEC_SP_TLS_SET))\n    (set (match_scratch:DI 2 \"=&r\") (const_int 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\""}]}