{"sha": "b75c4e1384c021ca94fc8e8db8e517e802b820f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1YzRlMTM4NGMwMjFjYTk0ZmM4ZThkYjhlNTE3ZTgwMmI4MjBmMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-01T07:29:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-01T08:23:25Z"}, "message": "tree-optimization/99856 - fix overwideing pattern creation\n\nThis fixes an omission of promoting a bit-precision required precision\nto a vector element precision.\n\n2021-04-01  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/99856\n\t* tree-vect-patterns.c (vect_recog_over_widening_pattern): Promote\n\tprecision to vector element precision.\n\n\t* gcc.dg/vect/pr99856.c: New testcase.", "tree": {"sha": "fd4e8bbf8d3e46b610e4684f7dc90569f7fc962a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd4e8bbf8d3e46b610e4684f7dc90569f7fc962a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b75c4e1384c021ca94fc8e8db8e517e802b820f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75c4e1384c021ca94fc8e8db8e517e802b820f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75c4e1384c021ca94fc8e8db8e517e802b820f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75c4e1384c021ca94fc8e8db8e517e802b820f3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19d71674616e6494a60432a2a28adcd762a6c877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19d71674616e6494a60432a2a28adcd762a6c877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19d71674616e6494a60432a2a28adcd762a6c877"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "e5d2a45be57f7b3eadf0860a23d93090c8ab048b", "filename": "gcc/testsuite/gcc.dg/vect/pr99856.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75c4e1384c021ca94fc8e8db8e517e802b820f3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99856.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75c4e1384c021ca94fc8e8db8e517e802b820f3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99856.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99856.c?ref=b75c4e1384c021ca94fc8e8db8e517e802b820f3", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_unpack } */\n+/* { dg-require-effective-target vect_pack_trunc } */\n+\n+#define SHIFTFORDIV255(a)\\\n+    ((((a) >> 8) + a) >> 8)\n+\n+#define DIV255(a)\\\n+    SHIFTFORDIV255(a + 0x80)\n+\n+typedef unsigned char uint8_t;\n+\n+void\n+opSourceOver_premul(uint8_t* restrict Rrgba,\n+                    const uint8_t* restrict Srgba,\n+                    const uint8_t* restrict Drgba, int len)\n+{\n+  Rrgba = __builtin_assume_aligned (Rrgba, __BIGGEST_ALIGNMENT__);\n+  Srgba = __builtin_assume_aligned (Rrgba, __BIGGEST_ALIGNMENT__);\n+  Drgba = __builtin_assume_aligned (Rrgba, __BIGGEST_ALIGNMENT__);\n+  int i = 0;\n+  for (; i < len*4; i += 4)\n+    {\n+      uint8_t Sa = Srgba[i + 3];\n+      Rrgba[i + 0] = DIV255(Srgba[i + 0] * 255 + Drgba[i + 0] * (255 - Sa));\n+      Rrgba[i + 1] = DIV255(Srgba[i + 1] * 255 + Drgba[i + 1] * (255 - Sa));\n+      Rrgba[i + 2] = DIV255(Srgba[i + 2] * 255 + Drgba[i + 2] * (255 - Sa));\n+      Rrgba[i + 3] = DIV255(Srgba[i + 3] * 255 + Drgba[i + 3] * (255 - Sa));\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops in function\" \"vect\" } } */"}, {"sha": "803de3fc287371fa202610a55b17e2c8934672f3", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75c4e1384c021ca94fc8e8db8e517e802b820f3/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75c4e1384c021ca94fc8e8db8e517e802b820f3/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=b75c4e1384c021ca94fc8e8db8e517e802b820f3", "patch": "@@ -1705,6 +1705,7 @@ vect_recog_over_widening_pattern (vec_info *vinfo,\n   /* Apply the minimum efficient precision we just calculated.  */\n   if (new_precision < min_precision)\n     new_precision = min_precision;\n+  new_precision = vect_element_precision (new_precision);\n   if (new_precision >= TYPE_PRECISION (type))\n     return NULL;\n "}]}