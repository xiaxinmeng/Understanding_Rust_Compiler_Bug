{"sha": "e0c321665e3261e01f9c5b94279f954c06be74ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBjMzIxNjY1ZTMyNjFlMDFmOWM1Yjk0Mjc5Zjk1NGMwNmJlNzRhZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T09:24:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-31T09:24:32Z"}, "message": "[multiple changes]\n\n2011-08-31  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb, exp_ch7.ads, sem_ch5.adb, put_scos.adb, s-rannum.adb,\n\ta-rbtgbo.adb, exp_intr.adb, a-cbdlli.adb, a-cbdlli.ads: Minor\n\treformatting.\n\n2011-08-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb (Find_Protection_Type): Do not look for fields _object\n\tif the corresponding type is malformed due to restriction violations.\n\n2011-08-31  Robert Dewar  <dewar@adacore.com>\n\n\t* s-ransee.ads, s-ransee.adb: Minor reformatting.\n\n2011-08-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Allocator): Correct faulty condition which\n\twould cause the generation of Set_Finalize_Address if the target is a\n\tVM and the designated type is not derived from [Limited_]Controlled.\n\n2011-08-31  Arnaud Charlet  <charlet@adacore.com>\n\n\t* comperr.adb, comperr.ads, gnat1drv.adb (Delete_SCIL_Files): New\n\tsubprogram.\n\t(Compiler_Abort, Gnat1drv): Call Delete_SCIL_Files in codepeer mode in\n\tcase of a compilation error.\n\n2011-08-31  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* init.c (__gnat_error_handler): Standardize the stack overflow or\n\terroneous memory access message.\n\t* seh_init.c (__gnat_SEH_error_handler): Standardize the stack overflow\n\tor erroneous memory access message.\n\nFrom-SVN: r178368", "tree": {"sha": "d7cbb2015383eadc95cb3ad402303d45cff77cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7cbb2015383eadc95cb3ad402303d45cff77cea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0c321665e3261e01f9c5b94279f954c06be74ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c321665e3261e01f9c5b94279f954c06be74ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c321665e3261e01f9c5b94279f954c06be74ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c321665e3261e01f9c5b94279f954c06be74ad/comments", "author": null, "committer": null, "parents": [{"sha": "11bc76df472d71d80fd669d2d5966030a8ae4ea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11bc76df472d71d80fd669d2d5966030a8ae4ea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11bc76df472d71d80fd669d2d5966030a8ae4ea1"}], "stats": {"total": 242, "additions": 171, "deletions": 71}, "files": [{"sha": "3240bcdfda5284ce3e817a8216ef8e7f8871a4cc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -1,3 +1,38 @@\n+2011-08-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb, exp_ch7.ads, sem_ch5.adb, put_scos.adb, s-rannum.adb,\n+\ta-rbtgbo.adb, exp_intr.adb, a-cbdlli.adb, a-cbdlli.ads: Minor\n+\treformatting.\n+\n+2011-08-31  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Find_Protection_Type): Do not look for fields _object\n+\tif the corresponding type is malformed due to restriction violations.\n+\n+2011-08-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-ransee.ads, s-ransee.adb: Minor reformatting.\n+\n+2011-08-31  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Allocator): Correct faulty condition which\n+\twould cause the generation of Set_Finalize_Address if the target is a\n+\tVM and the designated type is not derived from [Limited_]Controlled.\n+\n+2011-08-31  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* comperr.adb, comperr.ads, gnat1drv.adb (Delete_SCIL_Files): New\n+\tsubprogram.\n+\t(Compiler_Abort, Gnat1drv): Call Delete_SCIL_Files in codepeer mode in\n+\tcase of a compilation error.\n+\n+2011-08-31  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* init.c (__gnat_error_handler): Standardize the stack overflow or\n+\terroneous memory access message.\n+\t* seh_init.c (__gnat_SEH_error_handler): Standardize the stack overflow\n+\tor erroneous memory access message.\n+\n 2011-08-31  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch4.adb: Minor reformatting."}, {"sha": "a8a7c5eafbc94c4721137cd50d915dcdf84182c7", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -1046,6 +1046,7 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n             Process (Cursor'(Container'Unrestricted_Access, Node));\n             Node := Container.Nodes (Node).Next;\n          end loop;\n+\n       exception\n          when others =>\n             B := B - 1;\n@@ -1055,8 +1056,9 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       B := B - 1;\n    end Iterate;\n \n-   function Iterate (Container : List)\n-     return List_Iterator_Interfaces.Reversible_Iterator'class\n+   function Iterate\n+     (Container : List)\n+      return List_Iterator_Interfaces.Reversible_Iterator'class\n    is\n    begin\n       if Container.Length = 0 then\n@@ -1066,8 +1068,10 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       end if;\n    end Iterate;\n \n-   function Iterate (Container : List; Start : Cursor)\n-     return List_Iterator_Interfaces.Reversible_Iterator'class\n+   function Iterate\n+     (Container : List;\n+      Start     : Cursor)\n+      return List_Iterator_Interfaces.Reversible_Iterator'class\n    is\n       It : constant Iterator := (Container'Unrestricted_Access, Start.Node);\n    begin"}, {"sha": "0443c304a8a829733123dd1483a252854b072fdc", "filename": "gcc/ada/a-cbdlli.ads", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fa-cbdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fa-cbdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.ads?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -44,8 +44,7 @@ package Ada.Containers.Bounded_Doubly_Linked_Lists is\n    pragma Pure;\n    pragma Remote_Types;\n \n-   type List (Capacity : Count_Type) is tagged private\n-   with\n+   type List (Capacity : Count_Type) is tagged private with\n       Constant_Indexing => Constant_Reference,\n       Variable_Indexing => Reference,\n       Default_Iterator  => Iterate,\n@@ -59,6 +58,7 @@ package Ada.Containers.Bounded_Doubly_Linked_Lists is\n    Empty_List : constant List;\n \n    No_Element : constant Cursor;\n+\n    function Has_Element (Position : Cursor) return Boolean;\n \n    package List_Iterator_Interfaces is new\n@@ -140,10 +140,13 @@ package Ada.Containers.Bounded_Doubly_Linked_Lists is\n \n    procedure Reverse_Elements (Container : in out List);\n \n-   function Iterate (Container : List)\n+   function Iterate\n+     (Container : List)\n       return List_Iterator_Interfaces.Reversible_Iterator'class;\n \n-   function Iterate (Container : List; Start : Cursor)\n+   function Iterate\n+     (Container : List;\n+      Start     : Cursor)\n       return List_Iterator_Interfaces.Reversible_Iterator'class;\n \n    procedure Swap"}, {"sha": "f420438efac6808eaef5286b6ce898d2f419154e", "filename": "gcc/ada/a-rbtgbo.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fa-rbtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fa-rbtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-rbtgbo.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -63,8 +63,11 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n       Tree.Last   := 0;\n       Tree.Root   := 0;\n       Tree.Length := 0;\n+\n+      --  Why are the following commented out with no explanation ???\n       --  Tree.Busy\n       --  Tree.Lock\n+\n       Tree.Free   := -1;\n    end Clear_Tree;\n \n@@ -76,7 +79,6 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n      (Tree : in out Tree_Type'Class;\n       Node : Count_Type)\n    is\n-\n       --  CLR p. 274\n \n       X : Count_Type;\n@@ -143,7 +145,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n             end if;\n \n             if (Left (N (W))  = 0 or else Color (N (Left (N (W)))) = Black)\n-                  and then\n+                 and then\n                (Right (N (W)) = 0 or else Color (N (Right (N (W)))) = Black)\n             then\n                Set_Color (N (W), Red);"}, {"sha": "676995fef1c6d2c230dddf8bcb6cc3f0d2c2e2a2", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 54, "deletions": 16, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -27,20 +27,23 @@\n --  error is detected. Calls to these routines cause termination of the\n --  current compilation with appropriate error output.\n \n-with Atree;    use Atree;\n-with Debug;    use Debug;\n-with Errout;   use Errout;\n-with Gnatvsn;  use Gnatvsn;\n-with Namet;    use Namet;\n-with Opt;      use Opt;\n-with Osint;    use Osint;\n-with Output;   use Output;\n-with Sinput;   use Sinput;\n-with Sprint;   use Sprint;\n-with Sdefault; use Sdefault;\n-with Targparm; use Targparm;\n-with Treepr;   use Treepr;\n-with Types;    use Types;\n+with Atree;         use Atree;\n+with Debug;         use Debug;\n+with Errout;        use Errout;\n+with Gnatvsn;       use Gnatvsn;\n+with Lib;           use Lib;\n+with Namet;         use Namet;\n+with Opt;           use Opt;\n+with Osint;         use Osint;\n+with Output;        use Output;\n+with Sinfo;         use Sinfo;\n+with Sinput;        use Sinput;\n+with Sprint;        use Sprint;\n+with Sdefault;      use Sdefault;\n+with System.OS_Lib; use System.OS_Lib;\n+with Targparm;      use Targparm;\n+with Treepr;        use Treepr;\n+with Types;         use Types;\n \n with Ada.Exceptions; use Ada.Exceptions;\n \n@@ -144,6 +147,10 @@ package body Comperr is\n          end if;\n       end if;\n \n+      if CodePeer_Mode then\n+         Delete_SCIL_Files;\n+      end if;\n+\n       --  If any errors have already occurred, then we guess that the abort\n       --  may well be caused by previous errors, and we don't make too much\n       --  fuss about it, since we want to let programmer fix the errors first.\n@@ -422,9 +429,40 @@ package body Comperr is\n          Source_Dump;\n          raise Unrecoverable_Error;\n       end if;\n-\n    end Compiler_Abort;\n \n+   -----------------------\n+   -- Delete_SCIL_Files --\n+   -----------------------\n+\n+   procedure Delete_SCIL_Files is\n+      Main    : Node_Id;\n+      Success : Boolean;\n+      pragma Unreferenced (Success);\n+   begin\n+      --  If parsing was not successful, no Main_Unit is available, so return\n+      --  immediately.\n+\n+      if Main_Source_File = No_Source_File then\n+         return;\n+      end if;\n+\n+      --  Retrieve unit name, and remove old versions of SCIL/<unit>.scil and\n+      --  SCIL/<unit>__body.scil\n+\n+      Main := Unit (Cunit (Main_Unit));\n+\n+      if Nkind (Main) = N_Subprogram_Body then\n+         Get_Name_String (Chars (Defining_Unit_Name (Specification (Main))));\n+      else\n+         Get_Name_String (Chars (Defining_Unit_Name (Main)));\n+      end if;\n+\n+      Delete_File (\"SCIL/\" & Name_Buffer (1 .. Name_Len) & \".scil\", Success);\n+      Delete_File\n+        (\"SCIL/\" & Name_Buffer (1 .. Name_Len) & \"__body.scil\", Success);\n+   end Delete_SCIL_Files;\n+\n    -----------------\n    -- Repeat_Char --\n    -----------------"}, {"sha": "a45faf16245f0cffa7c01ba2586b512fd6b8ad99", "filename": "gcc/ada/comperr.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fcomperr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fcomperr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.ads?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,6 +50,9 @@ package Comperr is\n    --  end exception (with possible message stored in TSD.Current_Excep,\n    --  and negative (an unused value) for a GCC abort.\n \n+   procedure Delete_SCIL_Files;\n+   --  Delete SCIL files associated with the main unit\n+\n    ------------------------------\n    -- Use of gnat_bug.box File --\n    ------------------------------"}, {"sha": "ab966963a693884dda21595f7ffdae0dc9f74b9d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -3949,13 +3949,13 @@ package body Exp_Ch4 is\n                      --  Types derived from [Limited_]Controlled are the only\n                      --  ones considered since they have fields Prev and Next.\n \n-                     if VM_Target /= No_VM\n-                       and then Is_Controlled (T)\n-                     then\n-                        Insert_Action (N,\n-                          Make_Attach_Call\n-                            (Obj_Ref => New_Copy_Tree (Init_Arg1),\n-                             Ptr_Typ => PtrT));\n+                     if VM_Target /= No_VM then\n+                        if Is_Controlled (T) then\n+                           Insert_Action (N,\n+                             Make_Attach_Call\n+                               (Obj_Ref => New_Copy_Tree (Init_Arg1),\n+                                Ptr_Typ => PtrT));\n+                        end if;\n \n                      --  Default case, generate:\n "}, {"sha": "0f184552a95d169d7f4dfec4e5ebfebbe843b8ef", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -3249,7 +3249,7 @@ package body Exp_Ch5 is\n                    Subtype_Mark  => New_Occurrence_Of (Iter_Type, Loc),\n                    Name          => Relocate_Node (Name (I_Spec)));\n \n-               --  Create declaration for cursor.\n+               --  Create declaration for cursor\n \n                Decl2 :=\n                  Make_Object_Declaration (Loc,"}, {"sha": "8ea71916e26bae5d833f0a9f09ebf5d11bbd380e", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -41,33 +41,34 @@ package Exp_Ch7 is\n    --  that take care of finalization management at run-time.\n \n    --  Support of exceptions from user finalization procedures\n-   --\n+\n    --  There is a specific mechanism to handle these exceptions, continue\n-   --  finalization and then raise PE.\n-   --  This mechanism is used by this package but also by exp_intr for\n-   --  Ada.Unchecked_Deallocation.\n+   --  finalization and then raise PE. This mechanism is used by this package\n+   --  but also by exp_intr for Ada.Unchecked_Deallocation.\n+\n    --  There are 3 subprograms to use this mechanism, and the type\n    --  Finalization_Exception_Data carries internal data between these\n    --  subprograms:\n    --\n-   --  1. Build_Object_Declaration: create the variables for the next two\n-   --  subprograms.\n-   --  2. Build_Exception_Handler: create the exception handler for a call to\n-   --  a user finalization procedure.\n-   --  3. Build_Raise_Stmt: create the code to potentially raise a PE exception\n-   --  if am exception was raise in a user finalization procedure.\n+   --    1. Build_Object_Declaration: create the variables for the next two\n+   --       subprograms.\n+   --    2. Build_Exception_Handler: create the exception handler for a call\n+   --       to a user finalization procedure.\n+   --    3. Build_Raise_Stmt: create code to potentially raise a PE exception\n+   --       if an exception was raise in a user finalization procedure.\n+\n    type Finalization_Exception_Data is record\n-      Loc         : Source_Ptr;\n+      Loc : Source_Ptr;\n       --  Sloc for the added nodes\n \n-      Abort_Id    : Entity_Id;\n+      Abort_Id : Entity_Id;\n       --  Boolean variable set to true if the finalization was triggered by\n       --  an abort.\n \n-      E_Id        : Entity_Id;\n+      E_Id : Entity_Id;\n       --  Variable containing the exception occurrence raised by user code\n \n-      Raised_Id   : Entity_Id;\n+      Raised_Id : Entity_Id;\n       --  Boolean variable set to true if an exception was raised in user code\n    end record;\n "}, {"sha": "2d47846747461be34dff78311945f3dd5d2ff777", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -964,19 +964,15 @@ package body Exp_Intr is\n            Make_Block_Statement (Loc,\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n-                 Statements => New_List (\n-                   Make_Final_Call (\n-                     Obj_Ref => Deref,\n-                     Typ     => Desig_T)),\n+                 Statements         => New_List (\n+                   Make_Final_Call (Obj_Ref => Deref, Typ => Desig_T)),\n                  Exception_Handlers => New_List (\n                    Build_Exception_Handler (Finalizer_Data)))));\n \n          --  For .NET/JVM, detach the object from the containing finalization\n          --  collection before finalizing it.\n \n-         if VM_Target /= No_VM\n-           and then Is_Controlled (Desig_T)\n-         then\n+         if VM_Target /= No_VM and then Is_Controlled (Desig_T) then\n             Prepend_To (Final_Code,\n               Make_Detach_Call (New_Copy_Tree (Arg)));\n          end if;"}, {"sha": "bc323a8afd444b4ece9168d181b1d5d24a58af0f", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -2313,6 +2313,15 @@ package body Exp_Util is\n          Typ := Corresponding_Record_Type (Typ);\n       end if;\n \n+      --  Since restriction violations are not considered serious errors, the\n+      --  expander remains active, but may leave the corresponding record type\n+      --  malformed. In such cases, component _object is not available so do\n+      --  not look for it.\n+\n+      if not Analyzed (Typ) then\n+         return Empty;\n+      end if;\n+\n       Comp := First_Component (Typ);\n       while Present (Comp) loop\n          if Chars (Comp) = Name_uObject then"}, {"sha": "98998fff9f06884ffc4830a27fb6b54e39f51032", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -842,6 +842,10 @@ begin\n             Tree_Gen;\n          end if;\n \n+         if CodePeer_Mode then\n+            Comperr.Delete_SCIL_Files;\n+         end if;\n+\n          Errout.Finalize (Last_Call => True);\n          Exit_Program (E_Errors);\n       end if;"}, {"sha": "0e6fb11745c2d337bd8322f8ef02058a653bfd64", "filename": "gcc/ada/init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -358,7 +358,7 @@ __gnat_error_handler (int sig, siginfo_t *si, void *ucontext)\n \t  ((volatile char *)\n \t   ((long) si->si_addr & - getpagesize ()))[getpagesize ()];\n \t  exception = &storage_error;\n-\t  msg = \"stack overflow (or erroneous memory access)\";\n+\t  msg = \"stack overflow or erroneous memory access\";\n \t}\n       break;\n \n@@ -644,7 +644,7 @@ __gnat_error_handler (int sig, siginfo_t *si ATTRIBUTE_UNUSED, void *ucontext)\n \t that this is quite acceptable, since a \"real\" SIGSEGV can only\n \t occur as the result of an erroneous program.  */\n       exception = &storage_error;\n-      msg = \"stack overflow (or erroneous memory access)\";\n+      msg = \"stack overflow or erroneous memory access\";\n       break;\n \n     case SIGBUS:\n@@ -824,7 +824,7 @@ __gnat_error_handler (int sig, siginfo_t *reason, void *uc ATTRIBUTE_UNUSED)\n \t\t the stack into a guard page, not an attempt to\n \t\t write to .text or something.  */\n \t  exception = &storage_error;\n-\t  msg = \"SIGSEGV: (stack overflow or erroneous memory access)\";\n+\t  msg = \"SIGSEGV: stack overflow or erroneous memory access\";\n \t}\n       else\n \t{\n@@ -1022,7 +1022,7 @@ __gnat_error_handler (int sig, siginfo_t *si, void *ucontext ATTRIBUTE_UNUSED)\n \t  ((volatile char *)\n \t   ((long) si->si_addr & - getpagesize ()))[getpagesize ()];\n \t  exception = &storage_error;\n-\t  msg = \"stack overflow (or erroneous memory access)\";\n+\t  msg = \"stack overflow or erroneous memory access\";\n \t}\n       break;\n \n@@ -1421,7 +1421,7 @@ __gnat_handle_vms_condition (int *sigargs, void *mechargs)\n \telse\n \t  {\n \t    exception = &storage_error;\n-\t    msg = \"stack overflow (or erroneous memory access)\";\n+\t    msg = \"stack overflow or erroneous memory access\";\n \t  }\n \t__gnat_adjust_context_for_raise (SS$_ACCVIO, (void *)mechargs);\n \tbreak;"}, {"sha": "1ff3cb3aefd839dfdc8bd457cb838f621b740814", "filename": "gcc/ada/put_scos.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fput_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fput_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_scos.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -82,6 +82,7 @@ procedure Put_SCOs is\n \n    procedure Write_SCO_Initiate (SU : SCO_Unit_Index) is\n       SUT : SCO_Unit_Table_Entry renames SCO_Unit_Table.Table (SU);\n+\n    begin\n       if Current_SCO_Unit /= SU then\n          Write_Info_Initiate ('C');\n@@ -126,7 +127,7 @@ begin\n                T            : SCO_Table_Entry renames SCO_Table.Table (Start);\n                Continuation : Boolean;\n \n-               Ctr          : Nat;\n+               Ctr : Nat;\n                --  Counter for statement entries\n \n             begin"}, {"sha": "4e5e1d5579703fda58ea33b44e282a3ef859ba27", "filename": "gcc/ada/s-rannum.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fs-rannum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fs-rannum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rannum.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -87,6 +87,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Unchecked_Conversion;\n+\n with System.Random_Seed;\n \n with Interfaces; use Interfaces;\n@@ -480,7 +481,7 @@ package body System.Random_Numbers is\n \n    procedure Reset (Gen : Generator) is\n       X : constant Unsigned_32 :=\n-           Unsigned_32'Mod (Unsigned_64 (Random_Seed.Get_Seed) * 64);\n+            Unsigned_32'Mod (Unsigned_64 (Random_Seed.Get_Seed) * 64);\n       --  Why * 64 ???\n \n    begin"}, {"sha": "ad0833a26f21d589d6ac1e5ec923ceee27b10692", "filename": "gcc/ada/s-ransee.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fs-ransee.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fs-ransee.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ransee.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -29,6 +29,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Version used on all systems except Ravenscar where Calendar is unavailable\n+\n with Ada.Calendar; use Ada.Calendar;\n \n package body System.Random_Seed is"}, {"sha": "ffae8323c04e9434801ef37c91533f69a30be5b6", "filename": "gcc/ada/s-ransee.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fs-ransee.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fs-ransee.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ransee.ads?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -31,11 +31,13 @@\n \n --  This package provide a seed for pseudo-random number generation using\n --  the clock.\n+\n --  There are two separate implementations of this package:\n --  o  one based on Ada.Calendar\n --  o  one based on Ada.Real_Time\n+\n --  This is required because Ada.Calendar cannot be used on ravenscar, but\n---  Ada.Real_Time drags the tasking runtime on regular platforms.\n+--  Ada.Real_Time drags in the whole tasking runtime on regular platforms.\n \n package System.Random_Seed is\n "}, {"sha": "89c9ea48e090259aa574c68eec1c7c872ad93586", "filename": "gcc/ada/seh_init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fseh_init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fseh_init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fseh_init.c?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -99,7 +99,7 @@ __gnat_SEH_error_handler (struct _EXCEPTION_RECORD* ExceptionRecord,\n \t{\n \t  /* otherwise it is a stack overflow  */\n \t  exception = &storage_error;\n-\t  msg = \"stack overflow (or erroneous memory access)\";\n+\t  msg = \"stack overflow or erroneous memory access\";\n \t}\n       break;\n "}, {"sha": "f8f00395c48bf09f8574c0a945b485824a2de10f", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0c321665e3261e01f9c5b94279f954c06be74ad/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=e0c321665e3261e01f9c5b94279f954c06be74ad", "patch": "@@ -2244,9 +2244,8 @@ package body Sem_Ch5 is\n       Typ : Entity_Id;\n \n    begin\n-      --  In semantics mode, introduce loop variable so that\n-      --  loop body can be properly analyzed. Otherwise this\n-      --  is one after expansion.\n+      --  In semantics mode, introduce loop variable so that loop body can be\n+      --  properly analyzed. Otherwise this is one after expansion.\n \n       if Operating_Mode = Check_Semantics then\n          Enter_Name (Def_Id);\n@@ -2335,7 +2334,7 @@ package body Sem_Ch5 is\n             Error_Msg_N\n               (\"to iterate over the elements of an array, use OF\", N);\n \n-            --  Prevent cascaded errors.\n+            --  Prevent cascaded errors\n \n             Set_Ekind (Def_Id, E_Constant);\n             Set_Etype (Def_Id, Etype (First_Index (Typ)));\n@@ -2496,11 +2495,11 @@ package body Sem_Ch5 is\n         or else not Expander_Active\n       then\n          if Present (Iter)\n-           and then  Present (Iterator_Specification (Iter))\n+           and then Present (Iterator_Specification (Iter))\n          then\n             declare\n                Id : constant Entity_Id :=\n-                  Defining_Identifier (Iterator_Specification (Iter));\n+                      Defining_Identifier (Iterator_Specification (Iter));\n             begin\n                if Scope (Id) /= Current_Scope then\n                   Enter_Name (Id);"}]}