{"sha": "006bd0062b40988bb77b27467ac1af72e0468ab2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA2YmQwMDYyYjQwOTg4YmI3N2IyNzQ2N2FjMWFmNzJlMDQ2OGFiMg==", "commit": {"author": {"name": "Sofiane Naci", "email": "sofiane.naci@arm.com", "date": "2013-07-18T09:08:56Z"}, "committer": {"name": "Sofiane Naci", "email": "sofiane@gcc.gnu.org", "date": "2013-07-18T09:08:56Z"}, "message": "arm.md (attribute \"type\"): Rename \"simple_alu_imm\" to \"arlo_imm\".\n\n\t* config/arm/arm.md (attribute \"type\"): Rename \"simple_alu_imm\" to\n\t\"arlo_imm\".  Rename \"alu_reg\" to \"arlo_reg\".  Rename \"simple_alu_shift\" to\n\t\"extend\".  Split \"alu_shift\" into \"shift\" and \"arlo_shift\".  Split\n\t\"alu_shift_reg\" into \"shift_reg\" and \"arlo_shift_reg\".  List types\n\tin alphabetical order.\n\t(attribute \"core_cycles\"): Update for attribute changes.\n\t(arm_addsi3): Likewise.\n\t(addsi3_compare0): Likewise.\n\t(addsi3_compare0_scratch): Likewise.\n\t(addsi3_compare_op1): Likewise.\n\t(addsi3_compare_op2): Likewise.\n\t(compare_addsi2_op0): Likewise.\n\t(compare_addsi2_op1): Likewise.\n\t(addsi3_carryin_shift_<optab>): Likewise.\n\t(subsi3_carryin_shift): Likewise.\n\t(rsbsi3_carryin_shift): Likewise.\n\t(arm_subsi3_insn): Likewise.\n\t(subsi3_compare0): Likewise.\n\t(subsi3_compare): Likewise.\n\t(arm_andsi3_insn): Likewise.\n\t(thumb1_andsi3_insn): Likewise.\n\t(andsi3_compare0): Likewise.\n\t(andsi3_compare0_scratch): Likewise.\n\t(zeroextractsi_compare0_scratch\n\t(andsi_not_shiftsi_si): Likewise.\n\t(iorsi3_insn): Likewise.\n\t(iorsi3_compare0): Likewise.\n\t(iorsi3_compare0_scratch): Likewise.\n\t(arm_xorsi3): Likewise.\n\t(thumb1_xorsi3_insn): Likewise.\n\t(xorsi3_compare0): Likewise.\n\t(xorsi3_compare0_scratch): Likewise.\n\t(satsi_<SAT:code>_shift): Likewise.\n\t(rrx): Likewise.\n\t(arm_shiftsi3): Likewise.\n\t(shiftsi3_compare0): Likewise.\n\t(not_shiftsi): Likewise.\n\t(not_shiftsi_compare0): Likewise.\n\t(not_shiftsi_compare0_scratch): Likewise.\n\t(arm_one_cmplsi2): Likewise.\n\t(thumb_one_complsi2): Likewise.\n\t(notsi_compare0): Likewise.\n\t(notsi_compare0_scratch): Likewise.\n\t(thumb1_zero_extendhisi2): Likewise.\n\t(arm_zero_extendhisi2): Likewise.\n\t(arm_zero_extendhisi2_v6): Likewise.\n\t(arm_zero_extendhisi2addsi): Likewise.\n\t(thumb1_zero_extendqisi2): Likewise.\n\t(thumb1_zero_extendqisi2_v6): Likewise.\n\t(arm_zero_extendqisi2): Likewise.\n\t(arm_zero_extendqisi2_v6): Likewise.\n\t(arm_zero_extendqisi2addsi): Likewise.\n\t(thumb1_extendhisi2): Likewise.\n\t(arm_extendhisi2): Likewise.\n\t(arm_extendhisi2_v6): Likewise.\n\t(arm_extendqisi): Likewise.\n\t(arm_extendqisi_v6): Likewise.\n\t(arm_extendqisi2addsi): Likewise.\n\t(thumb1_extendqisi2): Likewise.\n\t(thumb1_movdi_insn): Likewise.\n\t(arm_movsi_insn): Likewise.\n\t(movsi_compare0): Likewise.\n\t(movhi_insn_arch4): Likewise.\n\t(movhi_bytes): Likewise.\n\t(arm_movqi_insn): Likewise.\n\t(thumb1_movqi_insn): Likewise.\n\t(arm32_movhf): Likewise.\n\t(thumb1_movhf): Likewise.\n\t(arm_movsf_soft_insn): Likewise.\n\t(thumb1_movsf_insn): Likewise.\n\t(movdf_soft_insn): Likewise.\n\t(thumb_movdf_insn): Likewise.\n\t(arm_cmpsi_insn): Likewise.\n\t(cmpsi_shiftsi): Likewise.\n\t(cmpsi_shiftsi_swp): Likewise.\n\t(arm_cmpsi_negshiftsi_si): Likewise.\n\t(movsicc_insn): Likewise.\n\t(movsfcc_soft_insn): Likewise.\n\t(arith_shiftsi): Likewise.\n\t(arith_shiftsi_compare0\n\t(arith_shiftsi_compare0_scratch\n\t(sub_shiftsi): Likewise.\n\t(sub_shiftsi_compare0\n\t(sub_shiftsi_compare0_scratch\n\t(and_scc): Likewise.\n\t(cond_move): Likewise.\n\t(if_plus_move): Likewise.\n\t(if_move_plus): Likewise.\n\t(if_move_not): Likewise.\n\t(if_not_move): Likewise.\n\t(if_shift_move): Likewise.\n\t(if_move_shift): Likewise.\n\t(if_shift_shift): Likewise.\n\t(if_not_arith): Likewise.\n\t(if_arith_not): Likewise.\n\t(cond_move_not): Likewise.\n\t(thumb1_ashlsi3): Set type attribute.\n\t(thumb1_ashrsi3): Likewise.\n\t(thumb1_lshrsi3): Likewise.\n\t(thumb1_rotrsi3): Likewise.\n\t(shiftsi3_compare0_scratch): Likewise.\n\t* config/arm/neon.md (neon_mov<mode>): Update for attribute changes.\n\t(neon_mov<mode>): Likewise.\n\t* config/arm/thumb2.md (thumb_andsi_not_shiftsi_si): Update for attribute\n\tchanges.\n\t(thumb2_movsi_insn): Likewise.\n\t(thumb2_cmpsi_neg_shiftsi): Likewise.\n\t(thumb2_extendqisi_v6): Likewise.\n\t(thumb2_zero_extendhisi2_v6): Likewise.\n\t(thumb2_zero_extendqisi2_v6): Likewise.\n\t(thumb2_shiftsi3_short): Likewise.\n\t(thumb2_addsi3_compare0_scratch): Likewise.\n\t(orsi_not_shiftsi_si): Likewise.\n\t* config/arm/vfp.md (arm_movsi_vfp): Update for attribute changes.\n\t* config/arm/arm-fixed.md (arm_ssatsihi_shift): Update for attribute\n\tchanges.\n\t* config/arm/arm1020e.md (1020alu_op): Update for attribute changes.\n\t(1020alu_shift_op): Likewise.\n\t(1020alu_shift_reg_op): Likewise.\n\t* config/arm/arm1026ejs.md (alu_op): Update for attribute changes.\n\t(alu_shift_op): Likewise.\n\t(alu_shift_reg_op): Likewise.\n\t* config/arm/arm1136jfs.md (11_alu_op): Update for attribute changes.\n\t(11_alu_shift_op): Likewise.\n\t(11_alu_shift_reg_op): Likewise.\n\t* config/arm/arm926ejs.md (9_alu_op): Update for attribute changes.\n\t(9_alu_shift_reg_op): Likewise.\n\t* config/arm/cortex-a15.md (cortex_a15_alu): Update for attribute changes.\n\t(cortex_a15_alu_shift): Likewise.\n\t(cortex_a15_alu_shift_reg): Likewise.\n\t* config/arm/cortex-a5.md (cortex_a5_alu): Update for attribute changes.\n\t(cortex_a5_alu_shift): Likewise.\n\t* config/arm/cortex-a53.md (cortex_a53_alu) : Update for attribute\n\tchanges.\n\t(cortex_a53_alu_shift): Likewise.\n\t* config/arm/cortex-a7.md (cortex_a7_alu_imm): Update for attribute\n\tchanges.\n\t(cortex_a7_alu_reg): Likewise.\n\t(cortex_a7_alu_shift): Likewise.\n\t* config/arm/cortex-a8.md (cortex_a8_alu): Update for attribute changes.\n\t(cortex_a8_alu_shift): Likewise.\n\t(cortex_a8_alu_shift_reg): Likewise.\n\t(cortex_a8_mov): Likewise.\n\t* config/arm/cortex-a9.md (cortex_a9_dp): Update for attribute changes.\n\t(cortex_a9_dp_shift): Likewise.\n\t* config/arm/cortex-m4.md (cortex_m4_alu): Update for attribute changes.\n\t* config/arm/cortex-r4.md (cortex_r4_alu): Update for attribute changes.\n\t(cortex_r4_mov): Likewise.\n\t(cortex_r4_alu_shift): Likewise.\n\t(cortex_r4_alu_shift_reg): Likewise.\n\t* config/arm/fa526.md (526_alu_op): Update for attribute changes.\n\t(526_alu_shift_op): Likewise.\n\t* config/arm/fa606te.md (606te_alu_op): Update for attribute changes.\n\t* config/arm/fa626te.md (626te_alu_op): Update for attribute changes.\n\t(626te_alu_shift_op): Likewise.\n\t* config/arm/fa726te.md (726te_shift_op): Update for attribute changes.\n\t(726te_alu_op): Likewise.\n\t(726te_alu_shift_op): Likewise.\n\t(726te_alu_shift_reg_op): Likewise.\n\t* config/arm/fmp626.md (mp626_alu_op): Update for attribute changes.\n\t(mp626_alu_shift_op): Likewise.\n\t* config/arm/marvell-pj4.md (pj4_alu_e1): Update for attribute changes.\n\t(pj4_alu_e1_conds): Likewise.\n\t(pj4_alu): Likewise.\n\t(pj4_alu_conds): Likewise.\n\t(pj4_shift): Likewise.\n\t(pj4_shift_conds): Likewise.\n\t(pj4_alu_shift): Likewise.\n\t(pj4_alu_shift_conds): Likewise.\n\t* config/arm/arm.c (xscale_sched_adjust_cost): Update for attribute changes.\n\t(cortexa7_older_only): Likewise.\n\t(cortexa7_younger): Likewise.\n\nFrom-SVN: r201024", "tree": {"sha": "7f34aff6fa9f7d2365591f4df600a02471b25162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f34aff6fa9f7d2365591f4df600a02471b25162"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/006bd0062b40988bb77b27467ac1af72e0468ab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006bd0062b40988bb77b27467ac1af72e0468ab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006bd0062b40988bb77b27467ac1af72e0468ab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006bd0062b40988bb77b27467ac1af72e0468ab2/comments", "author": null, "committer": null, "parents": [{"sha": "651df1b26a77d5f1f239be151a7bf5b9430b75d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651df1b26a77d5f1f239be151a7bf5b9430b75d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651df1b26a77d5f1f239be151a7bf5b9430b75d4"}], "stats": {"total": 695, "additions": 439, "deletions": 256}, "files": [{"sha": "f77bae41c8b713b3a99c23bd318c7be0a7a4f820", "filename": "gcc/ChangeLog", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -1,3 +1,178 @@\n+2013-07-18  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/arm/arm.md (attribute \"type\"): Rename \"simple_alu_imm\" to\n+\t\"arlo_imm\".  Rename \"alu_reg\" to \"arlo_reg\".  Rename \"simple_alu_shift\" to\n+\t\"extend\".  Split \"alu_shift\" into \"shift\" and \"arlo_shift\".  Split\n+\t\"alu_shift_reg\" into \"shift_reg\" and \"arlo_shift_reg\".  List types\n+\tin alphabetical order.\n+\t(attribute \"core_cycles\"): Update for attribute changes.\n+\t(arm_addsi3): Likewise.\n+\t(addsi3_compare0): Likewise.\n+\t(addsi3_compare0_scratch): Likewise.\n+\t(addsi3_compare_op1): Likewise.\n+\t(addsi3_compare_op2): Likewise.\n+\t(compare_addsi2_op0): Likewise.\n+\t(compare_addsi2_op1): Likewise.\n+\t(addsi3_carryin_shift_<optab>): Likewise.\n+\t(subsi3_carryin_shift): Likewise.\n+\t(rsbsi3_carryin_shift): Likewise.\n+\t(arm_subsi3_insn): Likewise.\n+\t(subsi3_compare0): Likewise.\n+\t(subsi3_compare): Likewise.\n+\t(arm_andsi3_insn): Likewise.\n+\t(thumb1_andsi3_insn): Likewise.\n+\t(andsi3_compare0): Likewise.\n+\t(andsi3_compare0_scratch): Likewise.\n+\t(zeroextractsi_compare0_scratch\n+\t(andsi_not_shiftsi_si): Likewise.\n+\t(iorsi3_insn): Likewise.\n+\t(iorsi3_compare0): Likewise.\n+\t(iorsi3_compare0_scratch): Likewise.\n+\t(arm_xorsi3): Likewise.\n+\t(thumb1_xorsi3_insn): Likewise.\n+\t(xorsi3_compare0): Likewise.\n+\t(xorsi3_compare0_scratch): Likewise.\n+\t(satsi_<SAT:code>_shift): Likewise.\n+\t(rrx): Likewise.\n+\t(arm_shiftsi3): Likewise.\n+\t(shiftsi3_compare0): Likewise.\n+\t(not_shiftsi): Likewise.\n+\t(not_shiftsi_compare0): Likewise.\n+\t(not_shiftsi_compare0_scratch): Likewise.\n+\t(arm_one_cmplsi2): Likewise.\n+\t(thumb_one_complsi2): Likewise.\n+\t(notsi_compare0): Likewise.\n+\t(notsi_compare0_scratch): Likewise.\n+\t(thumb1_zero_extendhisi2): Likewise.\n+\t(arm_zero_extendhisi2): Likewise.\n+\t(arm_zero_extendhisi2_v6): Likewise.\n+\t(arm_zero_extendhisi2addsi): Likewise.\n+\t(thumb1_zero_extendqisi2): Likewise.\n+\t(thumb1_zero_extendqisi2_v6): Likewise.\n+\t(arm_zero_extendqisi2): Likewise.\n+\t(arm_zero_extendqisi2_v6): Likewise.\n+\t(arm_zero_extendqisi2addsi): Likewise.\n+\t(thumb1_extendhisi2): Likewise.\n+\t(arm_extendhisi2): Likewise.\n+\t(arm_extendhisi2_v6): Likewise.\n+\t(arm_extendqisi): Likewise.\n+\t(arm_extendqisi_v6): Likewise.\n+\t(arm_extendqisi2addsi): Likewise.\n+\t(thumb1_extendqisi2): Likewise.\n+\t(thumb1_movdi_insn): Likewise.\n+\t(arm_movsi_insn): Likewise.\n+\t(movsi_compare0): Likewise.\n+\t(movhi_insn_arch4): Likewise.\n+\t(movhi_bytes): Likewise.\n+\t(arm_movqi_insn): Likewise.\n+\t(thumb1_movqi_insn): Likewise.\n+\t(arm32_movhf): Likewise.\n+\t(thumb1_movhf): Likewise.\n+\t(arm_movsf_soft_insn): Likewise.\n+\t(thumb1_movsf_insn): Likewise.\n+\t(movdf_soft_insn): Likewise.\n+\t(thumb_movdf_insn): Likewise.\n+\t(arm_cmpsi_insn): Likewise.\n+\t(cmpsi_shiftsi): Likewise.\n+\t(cmpsi_shiftsi_swp): Likewise.\n+\t(arm_cmpsi_negshiftsi_si): Likewise.\n+\t(movsicc_insn): Likewise.\n+\t(movsfcc_soft_insn): Likewise.\n+\t(arith_shiftsi): Likewise.\n+\t(arith_shiftsi_compare0\n+\t(arith_shiftsi_compare0_scratch\n+\t(sub_shiftsi): Likewise.\n+\t(sub_shiftsi_compare0\n+\t(sub_shiftsi_compare0_scratch\n+\t(and_scc): Likewise.\n+\t(cond_move): Likewise.\n+\t(if_plus_move): Likewise.\n+\t(if_move_plus): Likewise.\n+\t(if_move_not): Likewise.\n+\t(if_not_move): Likewise.\n+\t(if_shift_move): Likewise.\n+\t(if_move_shift): Likewise.\n+\t(if_shift_shift): Likewise.\n+\t(if_not_arith): Likewise.\n+\t(if_arith_not): Likewise.\n+\t(cond_move_not): Likewise.\n+\t(thumb1_ashlsi3): Set type attribute.\n+\t(thumb1_ashrsi3): Likewise.\n+\t(thumb1_lshrsi3): Likewise.\n+\t(thumb1_rotrsi3): Likewise.\n+\t(shiftsi3_compare0_scratch): Likewise.\n+\t* config/arm/neon.md (neon_mov<mode>): Update for attribute changes.\n+\t(neon_mov<mode>): Likewise.\n+\t* config/arm/thumb2.md (thumb_andsi_not_shiftsi_si): Update for attribute\n+\tchanges.\n+\t(thumb2_movsi_insn): Likewise.\n+\t(thumb2_cmpsi_neg_shiftsi): Likewise.\n+\t(thumb2_extendqisi_v6): Likewise.\n+\t(thumb2_zero_extendhisi2_v6): Likewise.\n+\t(thumb2_zero_extendqisi2_v6): Likewise.\n+\t(thumb2_shiftsi3_short): Likewise.\n+\t(thumb2_addsi3_compare0_scratch): Likewise.\n+\t(orsi_not_shiftsi_si): Likewise.\n+\t* config/arm/vfp.md (arm_movsi_vfp): Update for attribute changes.\n+\t* config/arm/arm-fixed.md (arm_ssatsihi_shift): Update for attribute\n+\tchanges.\n+\t* config/arm/arm1020e.md (1020alu_op): Update for attribute changes.\n+\t(1020alu_shift_op): Likewise.\n+\t(1020alu_shift_reg_op): Likewise.\n+\t* config/arm/arm1026ejs.md (alu_op): Update for attribute changes.\n+\t(alu_shift_op): Likewise.\n+\t(alu_shift_reg_op): Likewise.\n+\t* config/arm/arm1136jfs.md (11_alu_op): Update for attribute changes.\n+\t(11_alu_shift_op): Likewise.\n+\t(11_alu_shift_reg_op): Likewise.\n+\t* config/arm/arm926ejs.md (9_alu_op): Update for attribute changes.\n+\t(9_alu_shift_reg_op): Likewise.\n+\t* config/arm/cortex-a15.md (cortex_a15_alu): Update for attribute changes.\n+\t(cortex_a15_alu_shift): Likewise.\n+\t(cortex_a15_alu_shift_reg): Likewise.\n+\t* config/arm/cortex-a5.md (cortex_a5_alu): Update for attribute changes.\n+\t(cortex_a5_alu_shift): Likewise.\n+\t* config/arm/cortex-a53.md (cortex_a53_alu) : Update for attribute\n+\tchanges.\n+\t(cortex_a53_alu_shift): Likewise.\n+\t* config/arm/cortex-a7.md (cortex_a7_alu_imm): Update for attribute\n+\tchanges.\n+\t(cortex_a7_alu_reg): Likewise.\n+\t(cortex_a7_alu_shift): Likewise.\n+\t* config/arm/cortex-a8.md (cortex_a8_alu): Update for attribute changes.\n+\t(cortex_a8_alu_shift): Likewise.\n+\t(cortex_a8_alu_shift_reg): Likewise.\n+\t(cortex_a8_mov): Likewise.\n+\t* config/arm/cortex-a9.md (cortex_a9_dp): Update for attribute changes.\n+\t(cortex_a9_dp_shift): Likewise.\n+\t* config/arm/cortex-m4.md (cortex_m4_alu): Update for attribute changes.\n+\t* config/arm/cortex-r4.md (cortex_r4_alu): Update for attribute changes.\n+\t(cortex_r4_mov): Likewise.\n+\t(cortex_r4_alu_shift): Likewise.\n+\t(cortex_r4_alu_shift_reg): Likewise.\n+\t* config/arm/fa526.md (526_alu_op): Update for attribute changes.\n+\t(526_alu_shift_op): Likewise.\n+\t* config/arm/fa606te.md (606te_alu_op): Update for attribute changes.\n+\t* config/arm/fa626te.md (626te_alu_op): Update for attribute changes.\n+\t(626te_alu_shift_op): Likewise.\n+\t* config/arm/fa726te.md (726te_shift_op): Update for attribute changes.\n+\t(726te_alu_op): Likewise.\n+\t(726te_alu_shift_op): Likewise.\n+\t(726te_alu_shift_reg_op): Likewise.\n+\t* config/arm/fmp626.md (mp626_alu_op): Update for attribute changes.\n+\t(mp626_alu_shift_op): Likewise.\n+\t* config/arm/marvell-pj4.md (pj4_alu_e1): Update for attribute changes.\n+\t(pj4_alu_e1_conds): Likewise.\n+\t(pj4_alu): Likewise.\n+\t(pj4_alu_conds): Likewise.\n+\t(pj4_shift): Likewise.\n+\t(pj4_shift_conds): Likewise.\n+\t(pj4_alu_shift): Likewise.\n+\t(pj4_alu_shift_conds): Likewise.\n+\t* config/arm/arm.c (xscale_sched_adjust_cost): Update for attribute changes.\n+\t(cortexa7_older_only): Likewise.\n+\t(cortexa7_younger): Likewise.\n+\n 2013-07-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ipa-pure-const.c (generate_summary): Rename to..."}, {"sha": "82a7add9f3ea825d7ca83e2d9ce48efaa2b0597e", "filename": "gcc/config/arm/arm-fixed.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fixed.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -385,7 +385,7 @@\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"insn\" \"sat\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"alu_shift\")])\n+   (set_attr \"type\" \"arlo_shift\")])\n \n (define_insn \"arm_usatsihi\"\n   [(set (match_operand:HI 0 \"s_register_operand\" \"=r\")"}, {"sha": "d1926d8d1a9da149ad4c7e0655fca9b2e1c814aa", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -8653,7 +8653,7 @@ xscale_sched_adjust_cost (rtx insn, rtx link, rtx dep, int * cost)\n \t instruction we depend on is another ALU instruction, then we may\n \t have to account for an additional stall.  */\n       if (shift_opnum != 0\n-\t  && (attr_type == TYPE_ALU_SHIFT || attr_type == TYPE_ALU_SHIFT_REG))\n+\t  && (attr_type == TYPE_ARLO_SHIFT || attr_type == TYPE_ARLO_SHIFT_REG))\n \t{\n \t  rtx shifted_operand;\n \t  int opno;\n@@ -8939,7 +8939,9 @@ cortexa7_older_only (rtx insn)\n \n   switch (get_attr_type (insn))\n     {\n-    case TYPE_ALU_REG:\n+    case TYPE_ARLO_REG:\n+    case TYPE_SHIFT:\n+    case TYPE_SHIFT_REG:\n     case TYPE_LOAD_BYTE:\n     case TYPE_LOAD1:\n     case TYPE_STORE1:\n@@ -8985,8 +8987,8 @@ cortexa7_younger (FILE *file, int verbose, rtx insn)\n \n   switch (get_attr_type (insn))\n     {\n-    case TYPE_SIMPLE_ALU_IMM:\n-    case TYPE_SIMPLE_ALU_SHIFT:\n+    case TYPE_ARLO_IMM:\n+    case TYPE_EXTEND:\n     case TYPE_BRANCH:\n     case TYPE_CALL:\n       return true;"}, {"sha": "52b61d66e9d1b5ada83cec461b58530dfa5a9673", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 191, "deletions": 185, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -257,15 +257,21 @@\n ;\n ; Instruction classification:\n ;\n-; alu_reg            any alu instruction that doesn't hit memory or fp\n-;                    regs or have a shifted source operand and does not have\n-;                    an immediate operand.  This is also the default.\n-; alu_shift          any data instruction that doesn't hit memory or fp.\n-;                    regs, but has a source operand shifted by a constant.\n-; alu_shift_reg      any data instruction that doesn't hit memory or fp.\n+; arlo_imm           any arithmetic or logical instruction that doesn't have\n+;                    a shifted operand and has an immediate operand.  This\n+;                    excludes MOV, MVN and RSB(S) immediate.\n+; arlo_reg           any arithmetic or logical instruction that doesn't have\n+;                    a shifted or an immediate operand.  This excludes\n+;                    MOV and MVN but includes MOVT.  This is also the default.\n+; arlo_shift         any arithmetic or logical instruction that has a source\n+;                    operand shifted by a constant.  This excludes\n+;                    simple shifts.\n+; arlo_shift_reg     as arlo_shift, with the shift amount specified in a\n+;                    register.\n ; block              blockage insn, this blocks all functional units.\n ; branch             branch.\n ; call               subroutine call.\n+; extend             extend instruction (SXTB, SXTH, UXTB, UXTH).\n ; f_2_r              transfer from float to core (no memory needed).\n ; f_cvt              conversion between float and integral.\n ; f_flag             transfer of co-processor flags to the CPSR.\n@@ -296,11 +302,9 @@\n ; muls               integer multiply, flag setting.\n ; r_2_f              transfer from core to float.\n ; sdiv               signed division.\n-; simple_alu_imm     simple alu instruction that doesn't hit memory or fp\n-;                    regs or have a shifted source operand and has an\n-;                    immediate operand.  This currently only tracks very basic\n-;                    immediate alu operations.\n-; simple_alu_shift   simple alu instruction with a shifted source operand.\n+; shift              simple shift operation (LSL, LSR, ASR, ROR) with an\n+;                    immediate.\n+; shift_reg          simple shift by a register.\n ; smlad              signed multiply accumulate dual.\n ; smladx             signed multiply accumulate dual reverse.\n ; smlal              signed multiply accumulate long.\n@@ -401,89 +405,92 @@\n ; wmmx_wxor\n \n (define_attr \"type\"\n- \"simple_alu_imm,\\\n-  alu_reg,\\\n-  simple_alu_shift,\\\n-  alu_shift,\\\n-  alu_shift_reg,\\\n+ \"arlo_imm,\\\n+  arlo_reg,\\\n+  arlo_shift,\\\n+  arlo_shift_reg,\\\n   block,\\\n-  float,\\\n-  fdivd,\\\n-  fdivs,\\\n-  fmuls,\\\n-  fmuld,\\\n-  fmacs,\\\n-  fmacd,\\\n-  ffmas,\\\n-  ffmad,\\\n-  f_rints,\\\n-  f_rintd,\\\n-  f_minmaxs,\\\n-  f_minmaxd,\\\n-  f_flag,\\\n-  f_loads,\\\n-  f_loadd,\\\n-  f_stores,\\\n-  f_stored,\\\n+  branch,\\\n+  call,\\\n+  complex,\\\n+  extend,\\\n   f_2_r,\\\n-  r_2_f,\\\n   f_cvt,\\\n-  f_sels,\\\n+  f_flag,\\\n+  f_loadd,\\\n+  f_loads,\\\n+  f_minmaxd,\\\n+  f_minmaxs,\\\n+  f_rintd,\\\n+  f_rints,\\\n   f_seld,\\\n-  branch,\\\n-  call,\\\n+  f_sels,\\\n+  f_stored,\\\n+  f_stores,\\\n+  faddd,\\\n+  fadds,\\\n+  fcmpd,\\\n+  fcmps,\\\n+  fconstd,\\\n+  fconsts,\\\n+  fcpys,\\\n+  fdivd,\\\n+  fdivs,\\\n+  ffarithd,\\\n+  ffariths,\\\n+  ffmad,\\\n+  ffmas,\\\n+  float,\\\n+  fmacd,\\\n+  fmacs,\\\n+  fmuld,\\\n+  fmuls,\\\n   load_byte,\\\n   load1,\\\n   load2,\\\n   load3,\\\n   load4,\\\n-  store1,\\\n-  store2,\\\n-  store3,\\\n-  store4,\\\n-  fconsts,\\\n-  fconstd,\\\n-  fadds,\\\n-  faddd,\\\n-  ffariths,\\\n-  ffarithd,\\\n-  fcmps,\\\n-  fcmpd,\\\n-  fcpys,\\\n-  smulxy,\\\n-  smlaxy,\\\n-  smlalxy,\\\n-  smulwy,\\\n-  smlawx,\\\n-  mul,\\\n-  muls,\\\n   mla,\\\n   mlas,\\\n-  umull,\\\n-  umulls,\\\n-  umlal,\\\n-  umlals,\\\n-  smull,\\\n-  smulls,\\\n+  mul,\\\n+  muls,\\\n+  r_2_f,\\\n+  sdiv,\\\n+  shift,\\\n+  shift_reg,\\\n+  smlad,\\\n+  smladx,\\\n   smlal,\\\n+  smlald,\\\n   smlals,\\\n+  smlalxy,\\\n+  smlawx,\\\n   smlawy,\\\n-  smuad,\\\n-  smuadx,\\\n-  smlad,\\\n-  smladx,\\\n-  smusd,\\\n-  smusdx,\\\n+  smlaxy,\\\n   smlsd,\\\n   smlsdx,\\\n+  smlsld,\\\n+  smmla,\\\n   smmul,\\\n   smmulr,\\\n-  smmla,\\\n-  umaal,\\\n-  smlald,\\\n-  smlsld,\\\n-  sdiv,\\\n+  smuad,\\\n+  smuadx,\\\n+  smull,\\\n+  smulls,\\\n+  smulwy,\\\n+  smulxy,\\\n+  smusd,\\\n+  smusdx,\\\n+  store1,\\\n+  store2,\\\n+  store3,\\\n+  store4,\\\n   udiv,\\\n+  umaal,\\\n+  umlal,\\\n+  umlals,\\\n+  umull,\\\n+  umulls,\\\n   wmmx_tandc,\\\n   wmmx_tbcst,\\\n   wmmx_textrc,\\\n@@ -543,7 +550,7 @@\n   wmmx_wunpckih,\\\n   wmmx_wunpckil,\\\n   wmmx_wxor\"\n-  (const_string \"alu_reg\"))\n+  (const_string \"arlo_reg\"))\n \n ; Is this an (integer side) multiply with a 32-bit (or smaller) result?\n (define_attr \"mul32\" \"no,yes\"\n@@ -686,8 +693,8 @@\n ; than one on the main cpu execution unit.\n (define_attr \"core_cycles\" \"single,multi\"\n   (if_then_else (eq_attr \"type\"\n-    \"simple_alu_imm, alu_reg,\\\n-    simple_alu_shift, alu_shift, float, fdivd, fdivs,\\\n+    \"arlo_imm, arlo_reg,\\\n+    extend, shift, arlo_shift, float, fdivd, fdivs,\\\n     wmmx_wor, wmmx_wxor, wmmx_wand, wmmx_wandn, wmmx_wmov, wmmx_tmcrr,\\\n     wmmx_tmrrc, wmmx_wldr, wmmx_wstr, wmmx_tmcr, wmmx_tmrc, wmmx_wadd,\\\n     wmmx_wsub, wmmx_wmul, wmmx_wmac, wmmx_wavg2, wmmx_tinsr, wmmx_textrm,\\\n@@ -968,8 +975,8 @@\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"arch\" \"t2,*,*,*,t2,t2,*,*,a,t2,t2,*\")\n    (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"simple_alu_imm\")\n-\t\t      (const_string \"alu_reg\")))\n+\t\t      (const_string \"arlo_imm\")\n+\t\t      (const_string \"arlo_reg\")))\n  ]\n )\n \n@@ -1050,7 +1057,7 @@\n    sub%.\\\\t%0, %1, #%n2\n    add%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"simple_alu_imm, simple_alu_imm, *\")]\n+   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")]\n )\n \n (define_insn \"*addsi3_compare0_scratch\"\n@@ -1066,7 +1073,7 @@\n    cmn%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"simple_alu_imm, simple_alu_imm, *\")\n+   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")\n    ]\n )\n \n@@ -1153,7 +1160,7 @@\n    sub%.\\\\t%0, %1, #%n2\n    add%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\"  \"simple_alu_imm,simple_alu_imm,*\")]\n+   (set_attr \"type\"  \"arlo_imm,arlo_imm,*\")]\n )\n \n (define_insn \"*addsi3_compare_op2\"\n@@ -1170,7 +1177,7 @@\n    add%.\\\\t%0, %1, %2\n    sub%.\\\\t%0, %1, #%n2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm,*\")]\n+   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")]\n )\n \n (define_insn \"*compare_addsi2_op0\"\n@@ -1186,7 +1193,7 @@\n    cmn%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm,*\")]\n+   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")]\n )\n \n (define_insn \"*compare_addsi2_op1\"\n@@ -1202,7 +1209,7 @@\n    cmn%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm,*\")]\n+   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")]\n )\n \n (define_insn \"*addsi3_carryin_<optab>\"\n@@ -1244,8 +1251,8 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"predicable\" \"yes\")\n    (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+\t\t      (const_string \"arlo_shift\")\n+\t\t      (const_string \"arlo_shift_reg\")))]\n )\n \n (define_insn \"*addsi3_carryin_clobercc_<optab>\"\n@@ -1322,8 +1329,8 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"predicable\" \"yes\")\n    (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-                     (const_string \"alu_shift_reg\")))]\n+\t\t      (const_string \"arlo_shift\")\n+                     (const_string \"arlo_shift_reg\")))]\n )\n \n (define_insn \"*rsbsi3_carryin_shift\"\n@@ -1339,8 +1346,8 @@\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"predicable\" \"yes\")\n    (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+\t\t      (const_string \"arlo_shift\")\n+\t\t      (const_string \"arlo_shift_reg\")))]\n )\n \n ; transform ((x << y) - 1) to ~(~(x-1) << y)  Where X is a constant.\n@@ -1607,7 +1614,7 @@\n   \"\n   [(set_attr \"length\" \"4,4,4,4,16\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\"  \"*,simple_alu_imm,*,*,*\")]\n+   (set_attr \"type\"  \"*,arlo_imm,*,*,*\")]\n )\n \n (define_peephole2\n@@ -1637,7 +1644,7 @@\n    sub%.\\\\t%0, %1, %2\n    rsb%.\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\"  \"simple_alu_imm,*,*\")]\n+   (set_attr \"type\"  \"arlo_imm,*,*\")]\n )\n \n (define_insn \"subsi3_compare\"\n@@ -1652,7 +1659,7 @@\n    sub%.\\\\t%0, %1, %2\n    rsb%.\\\\t%0, %2, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"simple_alu_imm,*,*\")]\n+   (set_attr \"type\" \"arlo_imm,*,*\")]\n )\n \n (define_expand \"subsf3\"\n@@ -2588,7 +2595,7 @@\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no,yes,no,no,no\")\n    (set_attr \"type\"\n-     \"simple_alu_imm,simple_alu_imm,*,*,simple_alu_imm\")]\n+     \"arlo_imm,arlo_imm,*,*,arlo_imm\")]\n )\n \n (define_insn \"*thumb1_andsi3_insn\"\n@@ -2598,7 +2605,7 @@\n   \"TARGET_THUMB1\"\n   \"and\\\\t%0, %2\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\"  \"simple_alu_imm\")\n+   (set_attr \"type\"  \"arlo_imm\")\n    (set_attr \"conds\" \"set\")])\n \n (define_insn \"*andsi3_compare0\"\n@@ -2615,7 +2622,7 @@\n    bic%.\\\\t%0, %1, #%B2\n    and%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm,*\")]\n+   (set_attr \"type\" \"arlo_imm,arlo_imm,*\")]\n )\n \n (define_insn \"*andsi3_compare0_scratch\"\n@@ -2631,7 +2638,7 @@\n    bic%.\\\\t%2, %0, #%B1\n    tst%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\"  \"simple_alu_imm,simple_alu_imm,*\")]\n+   (set_attr \"type\"  \"arlo_imm,arlo_imm,*\")]\n )\n \n (define_insn \"*zeroextractsi_compare0_scratch\"\n@@ -2655,7 +2662,7 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n-   (set_attr \"type\" \"simple_alu_imm\")]\n+   (set_attr \"type\" \"arlo_imm\")]\n )\n \n (define_insn_and_split \"*ne_zeroextractsi\"\n@@ -3205,8 +3212,8 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"2\")\n    (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+\t\t      (const_string \"arlo_shift\")\n+\t\t      (const_string \"arlo_shift_reg\")))]\n )\n \n (define_insn \"*andsi_notsi_si_compare0\"\n@@ -3365,7 +3372,7 @@\n    (set_attr \"arch\" \"32,t2,t2,32,32\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no,yes,no,no,no\")\n-   (set_attr \"type\" \"simple_alu_imm,*,simple_alu_imm,*,*\")]\n+   (set_attr \"type\" \"arlo_imm,*,arlo_imm,*,*\")]\n )\n \n (define_insn \"*thumb1_iorsi3_insn\"\n@@ -3400,7 +3407,7 @@\n   \"TARGET_32BIT\"\n   \"orr%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"simple_alu_imm,*\")]\n+   (set_attr \"type\" \"arlo_imm,*\")]\n )\n \n (define_insn \"*iorsi3_compare0_scratch\"\n@@ -3412,7 +3419,7 @@\n   \"TARGET_32BIT\"\n   \"orr%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"simple_alu_imm, *\")]\n+   (set_attr \"type\" \"arlo_imm,*\")]\n )\n \n (define_expand \"xordi3\"\n@@ -3538,7 +3545,7 @@\n   [(set_attr \"length\" \"4,4,4,16\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no,yes,no,no\")\n-   (set_attr \"type\"  \"simple_alu_imm,*,*,*\")]\n+   (set_attr \"type\"  \"arlo_imm,*,*,*\")]\n )\n \n (define_insn \"*thumb1_xorsi3_insn\"\n@@ -3549,7 +3556,7 @@\n   \"eor\\\\t%0, %2\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"simple_alu_imm\")]\n+   (set_attr \"type\" \"arlo_imm\")]\n )\n \n (define_insn \"*xorsi3_compare0\"\n@@ -3562,7 +3569,7 @@\n   \"TARGET_32BIT\"\n   \"eor%.\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"simple_alu_imm,*\")]\n+   (set_attr \"type\" \"arlo_imm,*\")]\n )\n \n (define_insn \"*xorsi3_compare0_scratch\"\n@@ -3573,7 +3580,7 @@\n   \"TARGET_32BIT\"\n   \"teq%?\\\\t%0, %1\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"simple_alu_imm, *\")]\n+   (set_attr \"type\" \"arlo_imm,*\")]\n )\n \n ; By splitting (IOR (AND (NOT A) (NOT B)) C) as D = AND (IOR A B) (NOT C), \n@@ -4057,7 +4064,7 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"insn\" \"sat\")\n    (set_attr \"shift\" \"3\")\n-   (set_attr \"type\" \"alu_shift\")])\n+   (set_attr \"type\" \"arlo_shift\")])\n \f\n ;; Shift and rotation insns\n \n@@ -4160,6 +4167,7 @@\n   \"TARGET_THUMB1\"\n   \"lsl\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"shift,shift_reg\")\n    (set_attr \"conds\" \"set\")])\n \n (define_expand \"ashrdi3\"\n@@ -4243,7 +4251,7 @@\n   \"mov\\\\t%0, %1, rrx\"\n   [(set_attr \"conds\" \"use\")\n    (set_attr \"insn\" \"mov\")\n-   (set_attr \"type\" \"alu_shift\")]\n+   (set_attr \"type\" \"arlo_shift\")]\n )\n \n (define_expand \"ashrsi3\"\n@@ -4265,6 +4273,7 @@\n   \"TARGET_THUMB1\"\n   \"asr\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"shift,shift_reg\")\n    (set_attr \"conds\" \"set\")])\n \n (define_expand \"lshrdi3\"\n@@ -4361,6 +4370,7 @@\n   \"TARGET_THUMB1\"\n   \"lsr\\\\t%0, %1, %2\"\n   [(set_attr \"length\" \"2\")\n+   (set_attr \"type\" \"shift,shift_reg\")\n    (set_attr \"conds\" \"set\")])\n \n (define_expand \"rotlsi3\"\n@@ -4406,68 +4416,64 @@\n \t\t     (match_operand:SI 2 \"register_operand\" \"l\")))]\n   \"TARGET_THUMB1\"\n   \"ror\\\\t%0, %0, %2\"\n-  [(set_attr \"length\" \"2\")]\n+  [(set_attr \"type\" \"shift_reg\")\n+   (set_attr \"length\" \"2\")]\n )\n \n (define_insn \"*arm_shiftsi3\"\n-  [(set (match_operand:SI   0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI   0 \"s_register_operand\" \"=r,r\")\n \t(match_operator:SI  3 \"shift_operator\"\n-\t [(match_operand:SI 1 \"s_register_operand\"  \"r\")\n-\t  (match_operand:SI 2 \"reg_or_int_operand\" \"rM\")]))]\n+\t [(match_operand:SI 1 \"s_register_operand\"  \"r,r\")\n+\t  (match_operand:SI 2 \"reg_or_int_operand\" \"M,r\")]))]\n   \"TARGET_32BIT\"\n   \"* return arm_output_shift(operands, 0);\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")]\n )\n \n (define_insn \"*shiftsi3_compare\"\n   [(set (reg:CC CC_REGNUM)\n \t(compare:CC (match_operator:SI 3 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"M,r\")])\n                     (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]\n   \"TARGET_32BIT\"\n   \"* return arm_output_shift(operands, 1);\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+   (set_attr \"type\"  \"arlo_shift,arlo_shift_reg\")]\n )\n \n (define_insn \"*shiftsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV (match_operator:SI 3 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"M,r\")])\n \t\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]\n   \"TARGET_32BIT\"\n   \"* return arm_output_shift(operands, 1);\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")]\n )\n \n (define_insn \"*shiftsi3_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV (match_operator:SI 3 \"shift_operator\"\n-\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n-\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])\n+\t\t\t  [(match_operand:SI 1 \"s_register_operand\" \"r,r\")\n+\t\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"M,r\")])\n \t\t\t (const_int 0)))\n-   (clobber (match_scratch:SI 0 \"=r\"))]\n+   (clobber (match_scratch:SI 0 \"=r,r\"))]\n   \"TARGET_32BIT\"\n   \"* return arm_output_shift(operands, 1);\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"shift\" \"1\")]\n+   (set_attr \"shift\" \"1\")\n+   (set_attr \"type\" \"shift,shift_reg\")]\n )\n \n (define_insn \"*not_shiftsi\"\n@@ -4482,7 +4488,7 @@\n    (set_attr \"shift\" \"1\")\n    (set_attr \"insn\" \"mvn\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n \n (define_insn \"*not_shiftsi_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -4499,7 +4505,7 @@\n    (set_attr \"shift\" \"1\")\n    (set_attr \"insn\" \"mvn\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n \n (define_insn \"*not_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -4515,7 +4521,7 @@\n    (set_attr \"shift\" \"1\")\n    (set_attr \"insn\" \"mvn\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n \n ;; We don't really have extzv, but defining this using shifts helps\n ;; to reduce register pressure later on.\n@@ -5536,7 +5542,7 @@\n \t\t\t [(if_then_else (eq_attr \"is_arch6\" \"yes\")\n \t\t\t\t       (const_int 2) (const_int 4))\n \t\t\t (const_int 4)])\n-   (set_attr \"type\" \"simple_alu_shift, load_byte\")]\n+   (set_attr \"type\" \"extend,load_byte\")]\n )\n \n (define_insn \"*arm_zero_extendhisi2\"\n@@ -5546,7 +5552,7 @@\n   \"@\n    #\n    ldr%(h%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"alu_shift,load_byte\")\n+  [(set_attr \"type\" \"arlo_shift,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -5558,7 +5564,7 @@\n    uxth%?\\\\t%0, %1\n    ldr%(h%)\\\\t%0, %1\"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"simple_alu_shift,load_byte\")]\n+   (set_attr \"type\" \"extend,load_byte\")]\n )\n \n (define_insn \"*arm_zero_extendhisi2addsi\"\n@@ -5567,7 +5573,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r\")))]\n   \"TARGET_INT_SIMD\"\n   \"uxtah%?\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"alu_shift\")\n+  [(set_attr \"type\" \"arlo_shift\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")]\n )\n@@ -5617,7 +5623,7 @@\n    #\n    ldrb\\\\t%0, %1\"\n   [(set_attr \"length\" \"4,2\")\n-   (set_attr \"type\" \"alu_shift,load_byte\")\n+   (set_attr \"type\" \"arlo_shift,load_byte\")\n    (set_attr \"pool_range\" \"*,32\")]\n )\n \n@@ -5629,7 +5635,7 @@\n    uxtb\\\\t%0, %1\n    ldrb\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"simple_alu_shift,load_byte\")]\n+   (set_attr \"type\" \"extend,load_byte\")]\n )\n \n (define_insn \"*arm_zero_extendqisi2\"\n@@ -5640,7 +5646,7 @@\n    #\n    ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n   [(set_attr \"length\" \"8,4\")\n-   (set_attr \"type\" \"alu_shift,load_byte\")\n+   (set_attr \"type\" \"arlo_shift,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -5651,7 +5657,7 @@\n   \"@\n    uxtb%(%)\\\\t%0, %1\n    ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n-  [(set_attr \"type\" \"simple_alu_shift,load_byte\")\n+  [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -5664,7 +5670,7 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"insn\" \"xtab\")\n-   (set_attr \"type\" \"alu_shift\")]\n+   (set_attr \"type\" \"arlo_shift\")]\n )\n \n (define_split\n@@ -5827,7 +5833,7 @@\n \t\t\t [(if_then_else (eq_attr \"is_arch6\" \"yes\")\n \t\t\t\t\t(const_int 2) (const_int 4))\n \t\t\t  (const_int 4)])\n-   (set_attr \"type\" \"simple_alu_shift,load_byte\")\n+   (set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"pool_range\" \"*,1018\")]\n )\n \n@@ -5886,7 +5892,7 @@\n    #\n    ldr%(sh%)\\\\t%0, %1\"\n   [(set_attr \"length\" \"8,4\")\n-   (set_attr \"type\" \"alu_shift,load_byte\")\n+   (set_attr \"type\" \"arlo_shift,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,256\")\n    (set_attr \"neg_pool_range\" \"*,244\")]\n@@ -5900,7 +5906,7 @@\n   \"@\n    sxth%?\\\\t%0, %1\n    ldr%(sh%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"simple_alu_shift,load_byte\")\n+  [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"pool_range\" \"*,256\")\n@@ -5987,7 +5993,7 @@\n    #\n    ldr%(sb%)\\\\t%0, %1\"\n   [(set_attr \"length\" \"8,4\")\n-   (set_attr \"type\" \"alu_shift,load_byte\")\n+   (set_attr \"type\" \"arlo_shift,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,256\")\n    (set_attr \"neg_pool_range\" \"*,244\")]\n@@ -6001,7 +6007,7 @@\n   \"@\n    sxtb%?\\\\t%0, %1\n    ldr%(sb%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"simple_alu_shift,load_byte\")\n+  [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,256\")\n    (set_attr \"neg_pool_range\" \"*,244\")]\n@@ -6013,7 +6019,7 @@\n \t\t (match_operand:SI 2 \"s_register_operand\" \"r\")))]\n   \"TARGET_INT_SIMD\"\n   \"sxtab%?\\\\t%0, %2, %1\"\n-  [(set_attr \"type\" \"alu_shift\")\n+  [(set_attr \"type\" \"arlo_shift\")\n    (set_attr \"insn\" \"xtab\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")]\n@@ -6115,7 +6121,7 @@\n \t\t\t  (const_int 2)\n \t\t\t  (if_then_else (eq_attr \"is_arch6\" \"yes\")\n \t\t\t\t\t(const_int 4) (const_int 6))])\n-   (set_attr \"type\" \"simple_alu_shift,load_byte,load_byte\")]\n+   (set_attr \"type\" \"extend,load_byte,load_byte\")]\n )\n \n (define_expand \"extendsfdf2\"\n@@ -6490,7 +6496,7 @@\n    movw%?\\\\t%0, %1\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,simple_alu_imm,simple_alu_imm,simple_alu_imm,load1,store1\")\n+  [(set_attr \"type\" \"*,arlo_imm,arlo_imm,arlo_imm,load1,store1\")\n    (set_attr \"insn\" \"mov,mov,mvn,mov,*,*\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,*,*,*,4096,*\")\n@@ -6793,7 +6799,7 @@\n    cmp%?\\\\t%0, #0\n    sub%.\\\\t%0, %1, #0\"\n   [(set_attr \"conds\" \"set\")\n-   (set_attr \"type\" \"simple_alu_imm,simple_alu_imm\")]\n+   (set_attr \"type\" \"arlo_imm,arlo_imm\")]\n )\n \n ;; Subroutine to store a half word from a register into memory.\n@@ -7212,9 +7218,9 @@\n    (set_attr \"neg_pool_range\" \"*,*,*,244\")\n    (set_attr_alternative \"type\"\n                          [(if_then_else (match_operand 1 \"const_int_operand\" \"\")\n-                                        (const_string \"simple_alu_imm\" )\n+                                        (const_string \"arlo_imm\" )\n                                         (const_string \"*\"))\n-                          (const_string \"simple_alu_imm\")\n+                          (const_string \"arlo_imm\")\n                           (const_string \"store1\")\n                           (const_string \"load1\")])]\n )\n@@ -7229,7 +7235,7 @@\n    mvn%?\\\\t%0, #%B1\\\\t%@ movhi\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"insn\" \"mov, mov,mvn\")\n-   (set_attr \"type\" \"simple_alu_imm,*,simple_alu_imm\")]\n+   (set_attr \"type\" \"arlo_imm,*,arlo_imm\")]\n )\n \n (define_expand \"thumb_movhi_clobber\"\n@@ -7368,7 +7374,7 @@\n    str%(b%)\\\\t%1, %0\n    ldr%(b%)\\\\t%0, %1\n    str%(b%)\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,*,simple_alu_imm,simple_alu_imm,simple_alu_imm,load1, store1, load1, store1\")\n+  [(set_attr \"type\" \"*,*,arlo_imm,arlo_imm,arlo_imm,load1, store1, load1, store1\")\n    (set_attr \"insn\" \"mov,mov,mov,mov,mvn,*,*,*,*\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,yes,yes,no,no,no,no,no,no\")\n@@ -7390,7 +7396,7 @@\n    mov\\\\t%0, %1\n    mov\\\\t%0, %1\"\n   [(set_attr \"length\" \"2\")\n-   (set_attr \"type\" \"simple_alu_imm,load1,store1,*,*,simple_alu_imm\")\n+   (set_attr \"type\" \"arlo_imm,load1,store1,*,*,arlo_imm\")\n    (set_attr \"insn\" \"*,*,*,mov,mov,mov\")\n    (set_attr \"pool_range\" \"*,32,*,*,*,*\")\n    (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob\")])\n@@ -8481,7 +8487,7 @@\n    (set_attr \"arch\" \"t2,t2,any,any\")\n    (set_attr \"length\" \"2,2,4,4\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,*,*,simple_alu_imm\")]\n+   (set_attr \"type\" \"*,*,*,arlo_imm\")]\n )\n \n (define_insn \"*cmpsi_shiftsi\"\n@@ -8495,7 +8501,7 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n \n (define_insn \"*cmpsi_shiftsi_swp\"\n   [(set (reg:CC_SWP CC_REGNUM)\n@@ -8508,7 +8514,7 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n \n (define_insn \"*arm_cmpsi_negshiftsi_si\"\n   [(set (reg:CC_Z CC_REGNUM)\n@@ -8521,8 +8527,8 @@\n   \"cmn%?\\\\t%0, %2%S1\"\n   [(set_attr \"conds\" \"set\")\n    (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t\t\t    (const_string \"alu_shift\")\n-\t\t\t\t    (const_string \"alu_shift_reg\")))\n+\t\t\t\t    (const_string \"arlo_shift\")\n+\t\t\t\t    (const_string \"arlo_shift_reg\")))\n    (set_attr \"predicable\" \"yes\")]\n )\n \n@@ -9174,13 +9180,13 @@\n    (set_attr \"insn\" \"mov,mvn,mov,mvn,mov,mov,mvn,mvn\")\n    (set_attr_alternative \"type\"\n                          [(if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"arlo_imm\")\n                                         (const_string \"*\"))\n-                          (const_string \"simple_alu_imm\")\n+                          (const_string \"arlo_imm\")\n                           (if_then_else (match_operand 1 \"const_int_operand\" \"\")\n-                                        (const_string \"simple_alu_imm\")\n+                                        (const_string \"arlo_imm\")\n                                         (const_string \"*\"))\n-                          (const_string \"simple_alu_imm\")\n+                          (const_string \"arlo_imm\")\n                           (const_string \"*\")\n                           (const_string \"*\")\n                           (const_string \"*\")\n@@ -10062,7 +10068,7 @@\n \t\t\t  (if_then_else\n \t\t\t   (match_operand:SI 3 \"mult_operator\" \"\")\n \t\t\t   (const_string \"no\") (const_string \"yes\"))])\n-   (set_attr \"type\" \"alu_shift,alu_shift,alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift,arlo_shift,arlo_shift_reg\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n@@ -10099,7 +10105,7 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"4\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n \n (define_insn \"*arith_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -10116,7 +10122,7 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"4\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n \n (define_insn \"*sub_shiftsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n@@ -10129,7 +10135,7 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"3\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n \n (define_insn \"*sub_shiftsi_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -10147,7 +10153,7 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"3\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n \n (define_insn \"*sub_shiftsi_compare0_scratch\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n@@ -10163,7 +10169,7 @@\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"3\")\n    (set_attr \"arch\" \"32,a\")\n-   (set_attr \"type\" \"alu_shift,alu_shift_reg\")])\n+   (set_attr \"type\" \"arlo_shift,arlo_shift_reg\")])\n \f\n \n (define_insn_and_split \"*and_scc\"\n@@ -11171,9 +11177,9 @@\n    (set_attr \"length\" \"4,4,8,8\")\n    (set_attr_alternative \"type\"\n                          [(if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-                                        (const_string \"simple_alu_imm\" )\n+                                        (const_string \"arlo_imm\" )\n                                         (const_string \"*\"))\n-                          (const_string \"simple_alu_imm\")\n+                          (const_string \"arlo_imm\")\n                           (const_string \"*\")\n                           (const_string \"*\")])]\n )\n@@ -11213,9 +11219,9 @@\n    (set_attr \"length\" \"4,4,8,8\")\n    (set_attr_alternative \"type\"\n                          [(if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-                                        (const_string \"simple_alu_imm\" )\n+                                        (const_string \"arlo_imm\" )\n                                         (const_string \"*\"))\n-                          (const_string \"simple_alu_imm\")\n+                          (const_string \"arlo_imm\")\n                           (const_string \"*\")\n                           (const_string \"*\")])]\n )\n@@ -11474,8 +11480,8 @@\n    (set_attr \"length\" \"4,8,8\")\n    (set_attr \"insn\" \"mov\")\n    (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+\t\t      (const_string \"arlo_shift\")\n+\t\t      (const_string \"arlo_shift_reg\")))]\n )\n \n (define_insn \"*ifcompare_move_shift\"\n@@ -11514,8 +11520,8 @@\n    (set_attr \"length\" \"4,8,8\")\n    (set_attr \"insn\" \"mov\")\n    (set (attr \"type\") (if_then_else (match_operand 3 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+\t\t      (const_string \"arlo_shift\")\n+\t\t      (const_string \"arlo_shift_reg\")))]\n )\n \n (define_insn \"*ifcompare_shift_shift\"\n@@ -11557,8 +11563,8 @@\n    (set (attr \"type\") (if_then_else\n \t\t        (and (match_operand 2 \"const_int_operand\" \"\")\n                              (match_operand 4 \"const_int_operand\" \"\"))\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+\t\t      (const_string \"arlo_shift\")\n+\t\t      (const_string \"arlo_shift_reg\")))]\n )\n \n (define_insn \"*ifcompare_not_arith\""}, {"sha": "7c8c72bcfc7f4cf4e8891384d001dad1ed9bdba2", "filename": "gcc/config/arm/arm1020e.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm1020e.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm1020e.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1020e.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -66,13 +66,13 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"1020alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n-      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n  \"1020a_e,1020a_m,1020a_w\")\n \n ;; ALU operations with a shift-by-constant operand\n (define_insn_reservation \"1020alu_shift_op\" 1 \n  (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n-      (eq_attr \"type\" \"simple_alu_shift,alu_shift\"))\n+      (eq_attr \"type\" \"extend,arlo_shift\"))\n  \"1020a_e,1020a_m,1020a_w\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -81,7 +81,7 @@\n ;; the execute stage.\n (define_insn_reservation \"1020alu_shift_reg_op\" 2 \n  (and (eq_attr \"tune\" \"arm1020e,arm1022e\")\n-      (eq_attr \"type\" \"alu_shift_reg\"))\n+      (eq_attr \"type\" \"arlo_shift_reg\"))\n  \"1020a_e*2,1020a_m,1020a_w\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "4b7e12b780b9225e16f474c9b4c2f759c47cc787", "filename": "gcc/config/arm/arm1026ejs.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm1026ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1026ejs.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -66,13 +66,13 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm1026ejs\")\n-      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n  \"a_e,a_m,a_w\")\n \n ;; ALU operations with a shift-by-constant operand\n (define_insn_reservation \"alu_shift_op\" 1 \n  (and (eq_attr \"tune\" \"arm1026ejs\")\n-      (eq_attr \"type\" \"simple_alu_shift,alu_shift\"))\n+      (eq_attr \"type\" \"extend,arlo_shift\"))\n  \"a_e,a_m,a_w\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -81,7 +81,7 @@\n ;; the execute stage.\n (define_insn_reservation \"alu_shift_reg_op\" 2 \n  (and (eq_attr \"tune\" \"arm1026ejs\")\n-      (eq_attr \"type\" \"alu_shift_reg\"))\n+      (eq_attr \"type\" \"arlo_shift_reg\"))\n  \"a_e*2,a_m,a_w\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "106100a8e6d5af7eb8a7b23efae1d8daa33531da", "filename": "gcc/config/arm/arm1136jfs.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm1136jfs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm1136jfs.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -75,13 +75,13 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"11_alu_op\" 2\n  (and (eq_attr \"tune\" \"arm1136js,arm1136jfs\")\n-      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n  \"e_1,e_2,e_3,e_wb\")\n \n ;; ALU operations with a shift-by-constant operand\n (define_insn_reservation \"11_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"arm1136js,arm1136jfs\")\n-      (eq_attr \"type\" \"simple_alu_shift,alu_shift\"))\n+      (eq_attr \"type\" \"extend,arlo_shift\"))\n  \"e_1,e_2,e_3,e_wb\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -90,7 +90,7 @@\n ;; the shift stage.\n (define_insn_reservation \"11_alu_shift_reg_op\" 3\n  (and (eq_attr \"tune\" \"arm1136js,arm1136jfs\")\n-      (eq_attr \"type\" \"alu_shift_reg\"))\n+      (eq_attr \"type\" \"arlo_shift_reg\"))\n  \"e_1*2,e_2,e_3,e_wb\")\n \n ;; alu_ops can start sooner, if there is no shifter dependency"}, {"sha": "b9ebee32984dfa4f9f8a69329cbccf9fcc237a5c", "filename": "gcc/config/arm/arm926ejs.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm926ejs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Farm926ejs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm926ejs.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -58,7 +58,7 @@\n ;; ALU operations with no shifted operand\n (define_insn_reservation \"9_alu_op\" 1 \n  (and (eq_attr \"tune\" \"arm926ejs\")\n-      (eq_attr \"type\" \"alu_reg,simple_alu_imm,simple_alu_shift,alu_shift\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,arlo_shift\"))\n  \"e,m,w\")\n \n ;; ALU operations with a shift-by-register operand\n@@ -67,7 +67,7 @@\n ;; the execute stage.\n (define_insn_reservation \"9_alu_shift_reg_op\" 2 \n  (and (eq_attr \"tune\" \"arm926ejs\")\n-      (eq_attr \"type\" \"alu_shift_reg\"))\n+      (eq_attr \"type\" \"arlo_shift_reg\"))\n  \"e*2,m,w\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "52dd1f19b828e3cbd100398d597c089570e7d50a", "filename": "gcc/config/arm/cortex-a15.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a15.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a15.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a15.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -61,22 +61,22 @@\n ;; Simple ALU without shift\n (define_insn_reservation \"cortex_a15_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa15\")\n-       (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n+       (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n             (eq_attr \"neon_type\" \"none\")))\n   \"ca15_issue1,(ca15_sx1,ca15_sx1_alu)|(ca15_sx2,ca15_sx2_alu)\")\n \n ;; ALU ops with immediate shift\n (define_insn_reservation \"cortex_a15_alu_shift\" 3\n   (and (eq_attr \"tune\" \"cortexa15\")\n-       (and (eq_attr \"type\" \"simple_alu_shift,alu_shift\")\n+       (and (eq_attr \"type\" \"extend,arlo_shift\")\n             (eq_attr \"neon_type\" \"none\")))\n   \"ca15_issue1,(ca15_sx1,ca15_sx1+ca15_sx1_shf,ca15_sx1_alu)\\\n \t       |(ca15_sx2,ca15_sx2+ca15_sx2_shf,ca15_sx2_alu)\")\n \n ;; ALU ops with register controlled shift\n (define_insn_reservation \"cortex_a15_alu_shift_reg\" 3\n   (and (eq_attr \"tune\" \"cortexa15\")\n-       (and (eq_attr \"type\" \"alu_shift_reg\")\n+       (and (eq_attr \"type\" \"arlo_shift_reg\")\n \t    (eq_attr \"neon_type\" \"none\")))\n   \"(ca15_issue2,ca15_sx1+ca15_sx2,ca15_sx1_shf,ca15_sx2_alu)\\\n    |(ca15_issue1,(ca15_issue1+ca15_sx2,ca15_sx1+ca15_sx2_shf)\\"}, {"sha": "e59e673d62cd599a0f6b5a417bd122f33c62b5b3", "filename": "gcc/config/arm/cortex-a5.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a5.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a5.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a5.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -58,12 +58,12 @@\n \n (define_insn_reservation \"cortex_a5_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa5\")\n-       (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n+       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n   \"cortex_a5_ex1\")\n \n (define_insn_reservation \"cortex_a5_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa5\")\n-       (eq_attr \"type\" \"simple_alu_shift,alu_shift,alu_shift_reg\"))\n+       (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg\"))\n   \"cortex_a5_ex1\")\n \n ;; Forwarding path for unshifted operands."}, {"sha": "7cee6c4788be91d64d75a354a16fd8ae2bc99b63", "filename": "gcc/config/arm/cortex-a53.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a53.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -67,12 +67,12 @@\n \n (define_insn_reservation \"cortex_a53_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa53\")\n-       (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n+       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n   \"cortex_a53_slot_any\")\n \n (define_insn_reservation \"cortex_a53_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa53\")\n-       (eq_attr \"type\" \"alu_shift,alu_shift_reg\"))\n+       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg\"))\n   \"cortex_a53_slot_any\")\n \n ;; Forwarding path for unshifted operands."}, {"sha": "3d41543f968529ae3485b875a7c24a627d61cf77", "filename": "gcc/config/arm/cortex-a7.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a7.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -88,8 +88,8 @@\n ;; ALU instruction with an immediate operand can dual-issue.\n (define_insn_reservation \"cortex_a7_alu_imm\" 2\n   (and (eq_attr \"tune\" \"cortexa7\")\n-       (and (ior (eq_attr \"type\" \"simple_alu_imm\")\n-                 (ior (eq_attr \"type\" \"simple_alu_shift\")\n+       (and (ior (eq_attr \"type\" \"arlo_imm\")\n+                 (ior (eq_attr \"type\" \"extend\")\n                       (and (eq_attr \"insn\" \"mov\")\n                            (not (eq_attr \"length\" \"8\")))))\n             (eq_attr \"neon_type\" \"none\")))\n@@ -99,13 +99,13 @@\n ;; with a younger immediate-based instruction.\n (define_insn_reservation \"cortex_a7_alu_reg\" 2\n   (and (eq_attr \"tune\" \"cortexa7\")\n-       (and (eq_attr \"type\" \"alu_reg\")\n+       (and (eq_attr \"type\" \"arlo_reg,shift,shift_reg\")\n             (eq_attr \"neon_type\" \"none\")))\n   \"cortex_a7_ex1\")\n \n (define_insn_reservation \"cortex_a7_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa7\")\n-       (and (eq_attr \"type\" \"alu_shift,alu_shift_reg\")\n+       (and (eq_attr \"type\" \"arlo_shift,arlo_shift_reg\")\n             (eq_attr \"neon_type\" \"none\")))\n   \"cortex_a7_ex1\")\n "}, {"sha": "067ff1c8b1ee2c0048a5cf0592ea8c8dea4fe60f", "filename": "gcc/config/arm/cortex-a8.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a8.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a8.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a8.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -85,29 +85,29 @@\n ;; (source read in E2 and destination available at the end of that cycle).\n (define_insn_reservation \"cortex_a8_alu\" 2\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (ior (and (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n+       (ior (and (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n \t\t      (eq_attr \"neon_type\" \"none\"))\n \t\t (not (eq_attr \"insn\" \"mov,mvn\")))\n             (eq_attr \"insn\" \"clz\")))\n   \"cortex_a8_default\")\n \n (define_insn_reservation \"cortex_a8_alu_shift\" 2\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (and (eq_attr \"type\" \"simple_alu_shift,alu_shift\")\n+       (and (eq_attr \"type\" \"extend,arlo_shift\")\n             (not (eq_attr \"insn\" \"mov,mvn\"))))\n   \"cortex_a8_default\")\n \n (define_insn_reservation \"cortex_a8_alu_shift_reg\" 2\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (and (eq_attr \"type\" \"alu_shift_reg\")\n+       (and (eq_attr \"type\" \"arlo_shift_reg\")\n             (not (eq_attr \"insn\" \"mov,mvn\"))))\n   \"cortex_a8_default\")\n \n ;; Move instructions.\n \n (define_insn_reservation \"cortex_a8_mov\" 1\n   (and (eq_attr \"tune\" \"cortexa8\")\n-       (and (eq_attr \"type\" \"alu_reg,simple_alu_imm,simple_alu_shift,alu_shift,alu_shift_reg\")\n+       (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,arlo_shift,arlo_shift_reg\")\n             (eq_attr \"insn\" \"mov,mvn\")))\n   \"cortex_a8_default\")\n "}, {"sha": "7670f80fc3222357eabadc1d0813eb2ddbc33fb8", "filename": "gcc/config/arm/cortex-a9.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-a9.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a9.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -80,17 +80,17 @@ cortex_a9_p1_e2 + cortex_a9_p0_e1 + cortex_a9_p1_e1\")\n ;; which can go down E2 without any problem.\n (define_insn_reservation \"cortex_a9_dp\" 2\n   (and (eq_attr \"tune\" \"cortexa9\")\n-         (ior (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n+         (ior (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n                         (eq_attr \"neon_type\" \"none\"))\n-\t      (and (and (eq_attr \"type\" \"alu_shift_reg, simple_alu_shift,alu_shift\")\n+\t      (and (and (eq_attr \"type\" \"arlo_shift_reg,extend,arlo_shift\")\n \t\t\t(eq_attr \"insn\" \"mov\"))\n                  (eq_attr \"neon_type\" \"none\"))))\n   \"cortex_a9_p0_default|cortex_a9_p1_default\")\n \n ;; An instruction using the shifter will go down E1.\n (define_insn_reservation \"cortex_a9_dp_shift\" 3\n    (and (eq_attr \"tune\" \"cortexa9\")\n-\t(and (eq_attr \"type\" \"alu_shift_reg, simple_alu_shift,alu_shift\")\n+\t(and (eq_attr \"type\" \"arlo_shift_reg,extend,arlo_shift\")\n \t     (not (eq_attr \"insn\" \"mov\"))))\n    \"cortex_a9_p0_shift | cortex_a9_p1_shift\")\n "}, {"sha": "775b59283af9bcccc6fa62366ba833a8fa6b594f", "filename": "gcc/config/arm/cortex-m4.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-m4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-m4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-m4.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -31,8 +31,8 @@\n ;; ALU and multiply is one cycle.\n (define_insn_reservation \"cortex_m4_alu\" 1\n   (and (eq_attr \"tune\" \"cortexm4\")\n-       (ior (eq_attr \"type\" \"alu_reg,simple_alu_imm,simple_alu_shift,\\\n-                             alu_shift,alu_shift_reg\")\n+       (ior (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,\\\n+                             arlo_shift,arlo_shift_reg\")\n \t    (ior (eq_attr \"mul32\" \"yes\")\n \t\t (eq_attr \"mul64\" \"yes\"))))\n   \"cortex_m4_ex\")"}, {"sha": "bc3602c4ddae48afffb56c47190d38573a7ca3ff", "filename": "gcc/config/arm/cortex-r4.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fcortex-r4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-r4.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -78,24 +78,24 @@\n ;; for the purposes of the dual-issue constraints above.\n (define_insn_reservation \"cortex_r4_alu\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n+       (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n             (not (eq_attr \"insn\" \"mov\"))))\n   \"cortex_r4_alu\")\n \n (define_insn_reservation \"cortex_r4_mov\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n+       (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n             (eq_attr \"insn\" \"mov\")))\n   \"cortex_r4_mov\")\n \n (define_insn_reservation \"cortex_r4_alu_shift\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (eq_attr \"type\" \"simple_alu_shift,alu_shift\"))\n+       (eq_attr \"type\" \"extend,arlo_shift\"))\n   \"cortex_r4_alu\")\n \n (define_insn_reservation \"cortex_r4_alu_shift_reg\" 2\n   (and (eq_attr \"tune_cortexr4\" \"yes\")\n-       (eq_attr \"type\" \"alu_shift_reg\"))\n+       (eq_attr \"type\" \"arlo_shift_reg\"))\n   \"cortex_r4_alu_shift_reg\")\n \n ;; An ALU instruction followed by an ALU instruction with no early dep."}, {"sha": "869b25129be697886b386bc800bcec0d1076dbc1", "filename": "gcc/config/arm/fa526.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Ffa526.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Ffa526.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa526.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -62,12 +62,12 @@\n ;; ALU operations\n (define_insn_reservation \"526_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa526\")\n-      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n  \"fa526_core\")\n \n (define_insn_reservation \"526_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"fa526\")\n-      (eq_attr \"type\" \"simple_alu_shift,alu_shift,alu_shift_reg\"))\n+      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg\"))\n  \"fa526_core\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "c22b286dcebf441ff3fa1f3624c2ac4e1e4ead9b", "filename": "gcc/config/arm/fa606te.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Ffa606te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Ffa606te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa606te.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -62,7 +62,7 @@\n ;; ALU operations\n (define_insn_reservation \"606te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa606te\")\n-      (eq_attr \"type\" \"alu_reg,simple_alu_imm,simple_alu_shift,alu_shift,alu_shift_reg\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg,extend,arlo_shift,arlo_shift_reg\"))\n  \"fa606te_core\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "7d58e67d50913c32b3435edf7ac9d11d6ba9d71a", "filename": "gcc/config/arm/fa626te.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Ffa626te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Ffa626te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa626te.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -68,12 +68,12 @@\n ;; ALU operations\n (define_insn_reservation \"626te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa626,fa626te\")\n-      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n  \"fa626te_core\")\n \n (define_insn_reservation \"626te_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"fa626,fa626te\")\n-      (eq_attr \"type\" \"simple_alu_shift,alu_shift,alu_shift_reg\"))\n+      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg\"))\n  \"fa626te_core\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "880b2b8b27774291b39331bb35c89fa6b15436bc", "filename": "gcc/config/arm/fa726te.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Ffa726te.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Ffa726te.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffa726te.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -85,7 +85,7 @@\n ;; Other ALU instructions 2 cycles.\n (define_insn_reservation \"726te_alu_op\" 1\n  (and (eq_attr \"tune\" \"fa726te\")\n-      (and (eq_attr \"type\" \"alu_reg,simple_alu_imm\")\n+      (and (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n            (not (eq_attr \"insn\" \"mov,mvn\"))))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n \n@@ -95,13 +95,13 @@\n ;; it takes 3 cycles.\n (define_insn_reservation \"726te_alu_shift_op\" 3\n  (and (eq_attr \"tune\" \"fa726te\")\n-      (and (eq_attr \"type\" \"simple_alu_shift,alu_shift\")\n+      (and (eq_attr \"type\" \"extend,arlo_shift\")\n            (not (eq_attr \"insn\" \"mov,mvn\"))))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n \n (define_insn_reservation \"726te_alu_shift_reg_op\" 3\n  (and (eq_attr \"tune\" \"fa726te\")\n-      (and (eq_attr \"type\" \"alu_shift_reg\")\n+      (and (eq_attr \"type\" \"arlo_shift_reg\")\n            (not (eq_attr \"insn\" \"mov,mvn\"))))\n   \"fa726te_issue+(fa726te_alu0_pipe|fa726te_alu1_pipe)\")\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "279f7fb0bb06d6526dc18a724874bff3b2200975", "filename": "gcc/config/arm/fmp626.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Ffmp626.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Ffmp626.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ffmp626.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -63,12 +63,12 @@\n ;; ALU operations\n (define_insn_reservation \"mp626_alu_op\" 1\n  (and (eq_attr \"tune\" \"fmp626\")\n-      (eq_attr \"type\" \"alu_reg,simple_alu_imm\"))\n+      (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\"))\n  \"fmp626_core\")\n \n (define_insn_reservation \"mp626_alu_shift_op\" 2\n  (and (eq_attr \"tune\" \"fmp626\")\n-      (eq_attr \"type\" \"simple_alu_shift,alu_shift,alu_shift_reg\"))\n+      (eq_attr \"type\" \"extend,arlo_shift,arlo_shift_reg\"))\n  \"fmp626_core\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}, {"sha": "3386ec3209ba6ea052eff42f954f70af00b15a58", "filename": "gcc/config/arm/marvell-pj4.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fmarvell-pj4.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fmarvell-pj4.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmarvell-pj4.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -41,54 +41,54 @@\n \n (define_insn_reservation \"pj4_alu_e1\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"simple_alu_imm,alu_reg\")\n+       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n        (not (eq_attr \"conds\" \"set\"))\n        (eq_attr \"insn\" \"mov,mvn\"))\n                                \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_e1_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"simple_alu_imm,alu_reg\")\n+       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n        (eq_attr \"conds\" \"set\")\n        (eq_attr \"insn\" \"mov,mvn\"))\n                                \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"simple_alu_imm,alu_reg\")\n+       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n        (not (eq_attr \"conds\" \"set\"))\n        (not (eq_attr \"insn\" \"mov,mvn\")))\n                                \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"simple_alu_imm,alu_reg\")\n+       (eq_attr \"type\" \"arlo_imm,arlo_reg,shift,shift_reg\")\n        (eq_attr \"conds\" \"set\")\n        (not (eq_attr \"insn\" \"mov,mvn\")))\n                                \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_shift\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"alu_shift,alu_shift_reg,simple_alu_shift\")\n+       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend\")\n        (not (eq_attr \"conds\" \"set\"))\n        (eq_attr \"shift\" \"1\"))  \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_shift_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n-       (eq_attr \"type\" \"alu_shift,alu_shift_reg,simple_alu_shift\")\n+       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend\")\n        (eq_attr \"conds\" \"set\")\n        (eq_attr \"shift\" \"1\"))  \"pj4_is,(pj4_alu1,pj4_w1+pj4_cp)|(pj4_alu2,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_shift\" 1\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n        (not (eq_attr \"conds\" \"set\"))\n-       (eq_attr \"type\" \"alu_shift,alu_shift_reg,simple_alu_shift\"))\n+       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend\"))\n                                \"pj4_is,(pj4_alu1,nothing,pj4_w1+pj4_cp)|(pj4_alu2,nothing,pj4_w2+pj4_cp)\")\n \n (define_insn_reservation \"pj4_alu_shift_conds\" 4\n   (and (eq_attr \"tune\" \"marvell_pj4\")\n        (eq_attr \"conds\" \"set\")\n-       (eq_attr \"type\" \"alu_shift,alu_shift_reg,simple_alu_shift\"))\n+       (eq_attr \"type\" \"arlo_shift,arlo_shift_reg,extend\"))\n                                \"pj4_is,(pj4_alu1,nothing,pj4_w1+pj4_cp)|(pj4_alu2,nothing,pj4_w2+pj4_cp)\")\n \n (define_bypass 2 \"pj4_alu_shift,pj4_shift\""}, {"sha": "bcc93de0da49af34dc04db7d94847ddf1fb079d1", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -61,7 +61,7 @@\n     }\n }\n  [(set_attr \"neon_type\" \"neon_int_1,*,neon_vmov,*,neon_mrrc,neon_mcr_2_mcrr,*,*,*\")\n-  (set_attr \"type\" \"*,f_stored,*,f_loadd,*,*,alu_reg,load2,store2\")\n+  (set_attr \"type\" \"*,f_stored,*,f_loadd,*,*,arlo_reg,load2,store2\")\n   (set_attr \"insn\" \"*,*,*,*,*,*,mov,*,*\")\n   (set_attr \"length\" \"4,4,4,4,4,4,8,8,8\")\n   (set_attr \"arm_pool_range\"     \"*,*,*,1020,*,*,*,1020,*\")\n@@ -107,7 +107,7 @@\n }\n   [(set_attr \"neon_type\" \"neon_int_1,neon_stm_2,neon_vmov,neon_ldm_2,\\\n                           neon_mrrc,neon_mcr_2_mcrr,*,*,*\")\n-   (set_attr \"type\" \"*,*,*,*,*,*,alu_reg,load4,store4\")\n+   (set_attr \"type\" \"*,*,*,*,*,*,arlo_reg,load4,store4\")\n    (set_attr \"insn\" \"*,*,*,*,*,*,mov,*,*\")\n    (set_attr \"length\" \"4,8,4,8,8,8,16,8,16\")\n    (set_attr \"arm_pool_range\" \"*,*,*,1020,*,*,*,1020,*\")"}, {"sha": "e36b43676991342239437edf3e0cdb3c7ba5d19b", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -35,7 +35,7 @@\n   \"bic%?\\\\t%0, %1, %2%S4\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"2\")\n-   (set_attr \"type\" \"alu_shift\")]\n+   (set_attr \"type\" \"arlo_shift\")]\n )\n \n (define_insn_and_split \"*thumb2_smaxsi3\"\n@@ -283,7 +283,7 @@\n    ldr%?\\\\t%0, %1\n    str%?\\\\t%1, %0\n    str%?\\\\t%1, %0\"\n-  [(set_attr \"type\" \"*,simple_alu_imm,simple_alu_imm,simple_alu_imm,*,load1,load1,store1,store1\")\n+  [(set_attr \"type\" \"*,arlo_imm,arlo_imm,arlo_imm,*,load1,load1,store1,store1\")\n    (set_attr \"length\" \"2,4,2,4,4,4,4,4,4\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no,no,no,no\")\n@@ -336,7 +336,7 @@\n   \"cmn%?\\\\t%0, %1%S3\"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"type\" \"alu_shift\")]\n+   (set_attr \"type\" \"arlo_shift\")]\n )\n \n (define_insn_and_split \"*thumb2_mov_scc\"\n@@ -815,7 +815,7 @@\n   \"@\n    sxtb%?\\\\t%0, %1\n    ldr%(sb%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"simple_alu_shift,load_byte\")\n+  [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,4094\")\n    (set_attr \"neg_pool_range\" \"*,250\")]\n@@ -828,7 +828,7 @@\n   \"@\n    uxth%?\\\\t%0, %1\n    ldr%(h%)\\\\t%0, %1\"\n-  [(set_attr \"type\" \"simple_alu_shift,load_byte\")\n+  [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,4094\")\n    (set_attr \"neg_pool_range\" \"*,250\")]\n@@ -841,7 +841,7 @@\n   \"@\n    uxtb%(%)\\\\t%0, %1\n    ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n-  [(set_attr \"type\" \"simple_alu_shift,load_byte\")\n+  [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"pool_range\" \"*,4094\")\n    (set_attr \"neg_pool_range\" \"*,250\")]\n@@ -933,8 +933,8 @@\n    (set_attr \"shift\" \"1\")\n    (set_attr \"length\" \"2\")\n    (set (attr \"type\") (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (const_string \"alu_shift\")\n-\t\t      (const_string \"alu_shift_reg\")))]\n+\t\t      (const_string \"arlo_shift\")\n+\t\t      (const_string \"arlo_shift_reg\")))]\n )\n \n (define_insn \"*thumb2_mov<mode>_shortim\"\n@@ -1056,7 +1056,7 @@\n   \"\n   [(set_attr \"conds\" \"set\")\n    (set_attr \"length\" \"2,2,4,4\")\n-   (set_attr \"type\"   \"simple_alu_imm,*,simple_alu_imm,*\")]\n+   (set_attr \"type\"   \"arlo_imm,*,arlo_imm,*\")]\n )\n \n (define_insn \"*thumb2_mulsi_short\"\n@@ -1180,7 +1180,7 @@\n   \"orn%?\\\\t%0, %1, %2%S4\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"shift\" \"2\")\n-   (set_attr \"type\" \"alu_shift\")]\n+   (set_attr \"type\" \"arlo_shift\")]\n )\n \n (define_peephole2"}, {"sha": "abebb0fc144335102560ee3a8b91774e76f89834", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/006bd0062b40988bb77b27467ac1af72e0468ab2/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=006bd0062b40988bb77b27467ac1af72e0468ab2", "patch": "@@ -53,7 +53,7 @@\n     }\n   \"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"type\" \"*,*,simple_alu_imm,simple_alu_imm,load1,store1,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n+   (set_attr \"type\" \"*,*,arlo_imm,arlo_imm,load1,store1,r_2_f,f_2_r,fcpys,f_loads,f_stores\")\n    (set_attr \"neon_type\" \"*,*,*,*,*,*,neon_mcr,neon_mrc,neon_vmov,*,*\")\n    (set_attr \"insn\" \"mov,mov,mvn,mov,*,*,*,*,*,*,*\")\n    (set_attr \"pool_range\"     \"*,*,*,*,4096,*,*,*,*,1020,*\")"}]}