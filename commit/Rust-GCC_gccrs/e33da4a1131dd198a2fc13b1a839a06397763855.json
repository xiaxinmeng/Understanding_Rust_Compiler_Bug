{"sha": "e33da4a1131dd198a2fc13b1a839a06397763855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMzZGE0YTExMzFkZDE5OGEyZmMxM2IxYTgzOWEwNjM5Nzc2Mzg1NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-03-18T10:49:38Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-03-18T10:49:38Z"}, "message": "sparc.c (sparc_do_work_around_errata): Speed up and use proper constant for the store mode.\n\n\t* config/sparc/sparc.c (sparc_do_work_around_errata): Speed up and use\n\tproper constant for the store mode.\n\nFrom-SVN: r208638", "tree": {"sha": "0cd17fa846bed6ab3d2c7334ead4caf9b7c3e064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cd17fa846bed6ab3d2c7334ead4caf9b7c3e064"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e33da4a1131dd198a2fc13b1a839a06397763855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33da4a1131dd198a2fc13b1a839a06397763855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33da4a1131dd198a2fc13b1a839a06397763855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33da4a1131dd198a2fc13b1a839a06397763855/comments", "author": null, "committer": null, "parents": [{"sha": "1fed15fc7951b67eca06afe1eb573d5213ad41cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fed15fc7951b67eca06afe1eb573d5213ad41cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fed15fc7951b67eca06afe1eb573d5213ad41cb"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "681ec52ce75e18d9701dc73f83348a7cacf8d146", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33da4a1131dd198a2fc13b1a839a06397763855/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33da4a1131dd198a2fc13b1a839a06397763855/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e33da4a1131dd198a2fc13b1a839a06397763855", "patch": "@@ -1,3 +1,8 @@\n+2014-03-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (sparc_do_work_around_errata): Speed up and use\n+\tproper constant for the store mode.\n+\n 2014-03-18  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* symtab.c (change_decl_assembler_name): Fix transparent alias"}, {"sha": "12b35f36b8cea3b16eaa8864edc84549e2d8b72e", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33da4a1131dd198a2fc13b1a839a06397763855/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33da4a1131dd198a2fc13b1a839a06397763855/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e33da4a1131dd198a2fc13b1a839a06397763855", "patch": "@@ -907,15 +907,15 @@ sparc_do_work_around_errata (void)\n \t  && REGNO (SET_DEST (set)) % 2 != 0)\n \t{\n \t  /* The wrong dependency is on the enclosing double register.  */\n-\t  unsigned int x = REGNO (SET_DEST (set)) - 1;\n+\t  const unsigned int x = REGNO (SET_DEST (set)) - 1;\n \t  unsigned int src1, src2, dest;\n \t  int code;\n \n-\t  /* If the insn has a delay slot, then it cannot be problematic.  */\n \t  next = next_active_insn (insn);\n \t  if (!next)\n \t    break;\n-\t  if (NONJUMP_INSN_P (next) && GET_CODE (PATTERN (next)) == SEQUENCE)\n+\t  /* If the insn is a branch, then it cannot be problematic.  */\n+\t  if (!NONJUMP_INSN_P (next) || GET_CODE (PATTERN (next)) == SEQUENCE)\n \t    continue;\n \n \t  extract_insn (next);\n@@ -979,11 +979,11 @@ sparc_do_work_around_errata (void)\n \t     dependency on the first single-cycle load.  */\n \t  rtx x = SET_DEST (set);\n \n-\t  /* If the insn has a delay slot, then it cannot be problematic.  */\n \t  next = next_active_insn (insn);\n \t  if (!next)\n \t    break;\n-\t  if (NONJUMP_INSN_P (next) && GET_CODE (PATTERN (next)) == SEQUENCE)\n+\t  /* If the insn is a branch, then it cannot be problematic.  */\n+\t  if (!NONJUMP_INSN_P (next) || GET_CODE (PATTERN (next)) == SEQUENCE)\n \t    continue;\n \n \t  /* Look for a second memory access to/from an integer register.  */\n@@ -1001,13 +1001,13 @@ sparc_do_work_around_errata (void)\n \t\tinsert_nop = true;\n \n \t      /* STD is *not* affected.  */\n-\t      else if ((mem = mem_ref (dest)) != NULL_RTX\n-\t\t       && GET_MODE_SIZE (GET_MODE (mem)) <= 4\n-\t\t       && (src == const0_rtx\n+\t      else if (MEM_P (dest)\n+\t\t       && GET_MODE_SIZE (GET_MODE (dest)) <= 4\n+\t\t       && (src == CONST0_RTX (GET_MODE (dest))\n \t\t\t   || (REG_P (src)\n \t\t\t       && REGNO (src) < 32\n \t\t\t       && REGNO (src) != REGNO (x)))\n-\t\t       && !reg_mentioned_p (x, XEXP (mem, 0)))\n+\t\t       && !reg_mentioned_p (x, XEXP (dest, 0)))\n \t\tinsert_nop = true;\n \t    }\n \t}"}]}