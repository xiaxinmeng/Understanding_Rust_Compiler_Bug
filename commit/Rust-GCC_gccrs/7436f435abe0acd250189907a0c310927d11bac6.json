{"sha": "7436f435abe0acd250189907a0c310927d11bac6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzNmY0MzVhYmUwYWNkMjUwMTg5OTA3YTBjMzEwOTI3ZDExYmFjNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-15T05:08:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-15T05:08:02Z"}, "message": "(va_arg): Cast ptr to void *, then to TYPE *.\n\nFrom-SVN: r2124", "tree": {"sha": "c311824632a76447650144710d097e05f5a0c2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c311824632a76447650144710d097e05f5a0c2a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7436f435abe0acd250189907a0c310927d11bac6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7436f435abe0acd250189907a0c310927d11bac6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7436f435abe0acd250189907a0c310927d11bac6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7436f435abe0acd250189907a0c310927d11bac6/comments", "author": null, "committer": null, "parents": [{"sha": "347099d6ef97a689c52d883c5547f024a719da24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347099d6ef97a689c52d883c5547f024a719da24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/347099d6ef97a689c52d883c5547f024a719da24"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "ee9204ab4e993f0fed0479a323e79fb0bf6a225b", "filename": "gcc/ginclude/stdarg.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=7436f435abe0acd250189907a0c310927d11bac6", "patch": "@@ -62,9 +62,11 @@ typedef void *__gnuc_va_list;\n void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n #define va_end(AP)\n \n+/* We cast to void * and then to TYPE * because this avoids\n+   a warning about increasing the alignment requirement.  */\n #define va_arg(AP, TYPE)\t\t\t\t\t\t\\\n  (AP = (char *) (AP) + __va_rounded_size (TYPE),\t\t\t\\\n-  *((TYPE *) ((char *) (AP) - __va_rounded_size (TYPE))))\n+  *((TYPE *) (void *) ((char *) (AP) - __va_rounded_size (TYPE))))\n #endif /* _STDARG_H */\n \n #endif /* not alpha */"}, {"sha": "549e9fec1aed694ae696e57f7d36ca1492080824", "filename": "gcc/ginclude/va-i960.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-i960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-i960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-i960.h?ref=7436f435abe0acd250189907a0c310927d11bac6", "patch": "@@ -40,6 +40,8 @@ typedef unsigned __gnuc_va_list[2];\n #define\tva_start(AP) ((AP)[1] = 0, *(AP) = (unsigned) &va_alist)\n #endif\n \n+/* We cast to void * and then to TYPE * because this avoids\n+   a warning about increasing the alignment requirement.  */\n #define\tva_arg(AP, T)\t\t\t\t\t\t\t\\\n (\t\t\t\t\t\t\t\t\t\\\n   (\t\t\t\t\t\t\t\t\t\\\n@@ -48,7 +50,7 @@ typedef unsigned __gnuc_va_list[2];\n       : ((AP)[1] = __vpad ((AP)[1], T))\t\t\t\t\t\\\n   ),\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  *((T *) ((char *) *(AP) + (AP)[1] - __vsiz (T)))\t\t\t\\\n+  *((T *) (void *) ((char *) *(AP) + (AP)[1] - __vsiz (T)))\t\t\\\n )\n \n void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */"}, {"sha": "ae1d4d64fc49196ef67c18e340eb3af2d3305883", "filename": "gcc/ginclude/va-m88k.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-m88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-m88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-m88k.h?ref=7436f435abe0acd250189907a0c310927d11bac6", "patch": "@@ -63,13 +63,16 @@ typedef struct\n \n #define\t__va_size(TYPE) ((sizeof(TYPE) + 3) >> 2)\n \n-#define va_arg(AP,TYPE) \\\n+/* We cast to void * and then to TYPE * because this avoids\n+   a warning about increasing the alignment requirement.  */\n+#define va_arg(AP,TYPE)\t\t\t\t\t\t\t   \\\n   ( (AP).__va_arg = (((AP).__va_arg + (1 << (__alignof__(TYPE) >> 3)) - 1) \\\n-\t\t     & ~((1 << (__alignof__(TYPE) >> 3)) - 1)) \\\n-    + __va_size(TYPE), \\\n-    *((TYPE *) ((__va_reg_p(TYPE) && (AP).__va_arg < 8 + __va_size(TYPE) \\\n-\t\t ? (AP).__va_reg : (AP).__va_stk) \\\n-\t\t+ ((AP).__va_arg - __va_size(TYPE)))))\n+\t\t     & ~((1 << (__alignof__(TYPE) >> 3)) - 1))\t\t   \\\n+    + __va_size(TYPE),\t\t\t\t\t\t\t   \\\n+    *((TYPE *) (void *) ((__va_reg_p(TYPE)\t\t\t\t   \\\n+\t\t\t  && (AP).__va_arg < 8 + __va_size(TYPE)\t   \\\n+\t\t\t  ? (AP).__va_reg : (AP).__va_stk)\t\t   \\\n+\t\t\t + ((AP).__va_arg - __va_size(TYPE)))))\n \n #define va_end(AP)\n "}, {"sha": "ec0e7803475eb648591db07f7bd89bbe7436874f", "filename": "gcc/ginclude/va-mips.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-mips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-mips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-mips.h?ref=7436f435abe0acd250189907a0c310927d11bac6", "patch": "@@ -49,11 +49,13 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n #define va_arg(list, mode) ((mode *)(list += __va_rounded_size(mode)))[-1]\n \n #else\t\t/* !lint */\n-#define va_arg(__AP, __type)\t\t\t\t\t\t\\\n-  ((__type *)(__AP = (char *) ((__alignof(__type) > 4\t\t\t\\\n-\t\t\t\t? ((int)__AP + 8 - 1) & -8\t\t\\\n-\t\t\t\t: ((int)__AP + 4 - 1) & -4) \t\t\\\n-\t\t\t   + __va_rounded_size(__type))))[-1]\n+/* We cast to void * and then to TYPE * because this avoids\n+   a warning about increasing the alignment requirement.  */\n+#define va_arg(__AP, __type)\t\t\t\t\t\t    \\\n+  ((__type *) (void *) (__AP = (char *) ((__alignof(__type) > 4\t\t    \\\n+\t\t\t\t\t  ? ((int)__AP + 8 - 1) & -8\t    \\\n+\t\t\t\t\t  : ((int)__AP + 4 - 1) & -4)\t    \\\n+\t\t\t\t\t + __va_rounded_size(__type))))[-1]\n #endif\t\t/* lint */\n \n #endif /* defined (_STDARG_H) || defined (_VARARGS_H) */"}, {"sha": "eb6c600fab9abd51e8539c3c7fc1b3c2c12acf57", "filename": "gcc/ginclude/va-pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-pa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-pa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-pa.h?ref=7436f435abe0acd250189907a0c310927d11bac6", "patch": "@@ -22,11 +22,11 @@ typedef double *__gnuc_va_list;\n #define va_arg(AP,TYPE)\t\t\t\t\t\t\\\n   (sizeof(TYPE) > 8 ?\t\t\t\t\t\t\\\n    ((AP = (__gnuc_va_list) ((char *)AP - sizeof (int))),\t\\\n-    (*((TYPE *) (*((int *) (AP))))))\t\t\t\t\\\n+    (*((TYPE *) (void *) (*((int *) (AP))))))\t\t\t\\\n    :((AP =\t\t\t\t\t\t\t\\\n       (__gnuc_va_list) ((long)((char *)AP - sizeof (TYPE))\t\\\n \t\t\t& (sizeof(TYPE) > 4 ? ~0x7 : ~0x3))),\t\\\n-     (*((TYPE *) ((char *)AP + ((8 - sizeof(TYPE)) % 4))))))\n+     (*((TYPE *) (void *) ((char *)AP + ((8 - sizeof(TYPE)) % 4))))))\n \n #define va_end(AP)\n "}, {"sha": "86f3715e9d0afe09d10ed02b38f99d59501f950f", "filename": "gcc/ginclude/va-pyr.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-pyr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-pyr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-pyr.h?ref=7436f435abe0acd250189907a0c310927d11bac6", "patch": "@@ -107,6 +107,8 @@ typedef __va_buf __gnuc_va_list;\n #define __extension__\n #endif\n \n+/* We cast to void * and then to TYPE * because this avoids\n+   a warning about increasing the alignment requirement.  */\n #define va_arg(_AP, _MODE)\t\\\n __extension__\t\t\t\t\t\t\t\t\\\n ({__voidptr *__ap = (__voidptr*)&_AP;\t\t\t\t\t\\\n@@ -119,7 +121,7 @@ __extension__\t\t\t\t\t\t\t\t\\\n   ((void *)__ap[__onstack])+=__size;\t\t\t\t\t\\\n     if (__onstack==0 || (int)(__ap[2])==11)\t\t\t\t\\\n       __ap[2]+= (__size >> 2);\t\t\t\t\t\t\\\n-  *(( _MODE *)__param_addr);\t\t\t\t\t\t\\\n+  *(( _MODE *) (void *) __param_addr);\t\t\t\t\t\\\n })\n \n void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */"}, {"sha": "2744c4321b9dd80666364b0f473327023e07db0e", "filename": "gcc/ginclude/va-sparc.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-sparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7436f435abe0acd250189907a0c310927d11bac6/gcc%2Fginclude%2Fva-sparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fva-sparc.h?ref=7436f435abe0acd250189907a0c310927d11bac6", "patch": "@@ -59,6 +59,8 @@ void va_end (__gnuc_va_list);\t\t/* Defined in libgcc.a */\n    not word-aligned, we advance the pointer to the first non-reg slot.  */\n /* We don't declare the union member `d' to have type TYPE\n    because that would lose in C++ if TYPE has a constructor.  */\n+/* We cast to void * and then to TYPE * because this avoids\n+   a warning about increasing the alignment requirement.  */\n #define va_arg(pvar,TYPE)\t\t\t\t\t\\\n __extension__\t\t\t\t\t\t\t\\\n ({ TYPE __va_temp;\t\t\t\t\t\t\\\n@@ -70,9 +72,9 @@ __extension__\t\t\t\t\t\t\t\\\n \t __u.__i[0] = ((int *) (pvar))[0];\t\t\t\\\n \t __u.__i[1] = ((int *) (pvar))[1];\t\t\t\\\n \t (pvar) += 8;\t\t\t\t\t\t\\\n-\t *(TYPE *)__u.__d; })\t\t\t\t\t\\\n+\t *(TYPE *) (void *) __u.__d; })\t\t\t\t\\\n     : ((pvar) += __va_rounded_size (TYPE),\t\t\t\\\n-       *((TYPE *) ((pvar) - __va_rounded_size (TYPE)))));})\n+       *((TYPE *) (void *) ((pvar) - __va_rounded_size (TYPE)))));})\n \n #endif /* defined (_STDARG_H) || defined (_VARARGS_H) */\n "}]}