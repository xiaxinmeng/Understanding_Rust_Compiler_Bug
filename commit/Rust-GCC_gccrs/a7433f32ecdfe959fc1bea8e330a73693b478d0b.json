{"sha": "a7433f32ecdfe959fc1bea8e330a73693b478d0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc0MzNmMzJlY2RmZTk1OWZjMWJlYThlMzMwYTczNjkzYjQ3OGQwYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-11-22T21:34:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-11-22T21:34:49Z"}, "message": "i386.c (ix86_option_override_internal): For stack_protector_guard related options...\n\n\t* config/i386/i386.c (ix86_option_override_internal): For\n\tstack_protector_guard related options, use opts_set->x_ instead\n\tof global_options_set. and prefix options with opts->x_ .  Move\n\tdefaults for offset and reg into else block.\n\nFrom-SVN: r266390", "tree": {"sha": "f4e53c6b666512a35f762dcbc8eda6f5acaef617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4e53c6b666512a35f762dcbc8eda6f5acaef617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7433f32ecdfe959fc1bea8e330a73693b478d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7433f32ecdfe959fc1bea8e330a73693b478d0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7433f32ecdfe959fc1bea8e330a73693b478d0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7433f32ecdfe959fc1bea8e330a73693b478d0b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4b0215585f77f78fa3aa9b1621749ce23c1d393", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b0215585f77f78fa3aa9b1621749ce23c1d393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b0215585f77f78fa3aa9b1621749ce23c1d393"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "7cae52ea5e2282853c6b3d8f300eaa3ef145282a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7433f32ecdfe959fc1bea8e330a73693b478d0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7433f32ecdfe959fc1bea8e330a73693b478d0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7433f32ecdfe959fc1bea8e330a73693b478d0b", "patch": "@@ -1,3 +1,10 @@\n+2018-11-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_option_override_internal): For\n+\tstack_protector_guard related options, use opts_set->x_ instead\n+\tof global_options_set. and prefix options with opts->x_ .  Move\n+\tdefaults for offset and reg into else block.\n+\n 2018-11-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_check_avx_upper_register):"}, {"sha": "78cee752a21d2cb46c8be2eb48449393a74a8edb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7433f32ecdfe959fc1bea8e330a73693b478d0b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7433f32ecdfe959fc1bea8e330a73693b478d0b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a7433f32ecdfe959fc1bea8e330a73693b478d0b", "patch": "@@ -4571,14 +4571,10 @@ ix86_option_override_internal (bool main_args_p,\n \topts->x_ix86_stack_protector_guard = SSP_GLOBAL;\n     }\n \n-#ifdef TARGET_THREAD_SSP_OFFSET\n-  ix86_stack_protector_guard_offset = TARGET_THREAD_SSP_OFFSET;\n-#endif\n-\n-  if (global_options_set.x_ix86_stack_protector_guard_offset_str)\n+  if (opts_set->x_ix86_stack_protector_guard_offset_str)\n     {\n       char *endp;\n-      const char *str = ix86_stack_protector_guard_offset_str;\n+      const char *str = opts->x_ix86_stack_protector_guard_offset_str;\n \n       errno = 0;\n       int64_t offset;\n@@ -4598,20 +4594,16 @@ ix86_option_override_internal (bool main_args_p,\n \terror (\"%qs is not a valid offset \"\n \t       \"in -mstack-protector-guard-offset=\", str);\n \n-      ix86_stack_protector_guard_offset = offset;\n+      opts->x_ix86_stack_protector_guard_offset = offset;\n     }\n+#ifdef TARGET_THREAD_SSP_OFFSET\n+  else\n+    opts->x_ix86_stack_protector_guard_offset = TARGET_THREAD_SSP_OFFSET;\n+#endif\n \n-  ix86_stack_protector_guard_reg = DEFAULT_TLS_SEG_REG;\n-\n-  /* The kernel uses a different segment register for performance\n-     reasons; a system call would not have to trash the userspace\n-     segment register, which would be expensive.  */\n-  if (ix86_cmodel == CM_KERNEL)\n-    ix86_stack_protector_guard_reg = ADDR_SPACE_SEG_GS;\n-\n-  if (global_options_set.x_ix86_stack_protector_guard_reg_str)\n+  if (opts_set->x_ix86_stack_protector_guard_reg_str)\n     {\n-      const char *str = ix86_stack_protector_guard_reg_str;\n+      const char *str = opts->x_ix86_stack_protector_guard_reg_str;\n       addr_space_t seg = ADDR_SPACE_GENERIC;\n \n       /* Discard optional register prefix.  */\n@@ -4629,9 +4621,19 @@ ix86_option_override_internal (bool main_args_p,\n       if (seg == ADDR_SPACE_GENERIC)\n \terror (\"%qs is not a valid base register \"\n \t       \"in -mstack-protector-guard-reg=\",\n-\t       ix86_stack_protector_guard_reg_str);\n+\t       opts->x_ix86_stack_protector_guard_reg_str);\n+\n+      opts->x_ix86_stack_protector_guard_reg = seg;\n+    }\n+  else\n+    {\n+      opts->x_ix86_stack_protector_guard_reg = DEFAULT_TLS_SEG_REG;\n \n-      ix86_stack_protector_guard_reg = seg;\n+      /* The kernel uses a different segment register for performance\n+\t reasons; a system call would not have to trash the userspace\n+\t segment register, which would be expensive.  */\n+      if (opts->x_ix86_cmodel == CM_KERNEL)\n+\topts->x_ix86_stack_protector_guard_reg = ADDR_SPACE_SEG_GS;\n     }\n \n   /* Handle -mmemcpy-strategy= and -mmemset-strategy=  */"}]}