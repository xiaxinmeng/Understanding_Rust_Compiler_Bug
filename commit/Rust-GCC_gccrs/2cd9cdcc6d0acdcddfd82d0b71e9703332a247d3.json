{"sha": "2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNkOWNkY2M2ZDBhY2RjZGRmZDgyZDBiNzFlOTcwMzMzMmEyNDdkMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-12-13T23:45:12Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2009-12-13T23:45:12Z"}, "message": "re PR libstdc++/40133 (exception propagation support not enabled in libstdc++ 4.4 on {armeabi,hppa}-linux)\n\n2009-12-11  Paolo Carlini  <paolo.carlini@oracle.com>\n            Matthias Klose  <doko@ubuntu.com>\n\n        PR libstdc++/40133\n        * acinclude.m4 ([GLIBCXX_ENABLE_ATOMIC_BUILTINS]): On *-*-linux*,\n        *-*-uclinux*, *-*-kfreebsd*-gnu | *-*-gnu* targets do link tests when\n        possible.\n        * configure: Regenerate.\n\nCo-Authored-By: Matthias Klose <doko@ubuntu.com>\n\nFrom-SVN: r155200", "tree": {"sha": "53b355168f39cec396f357a92dd6773b3e3c8ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53b355168f39cec396f357a92dd6773b3e3c8ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3/comments", "author": null, "committer": null, "parents": [{"sha": "82b68940a30019eb2b4c18f3402e56d2c4b39891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b68940a30019eb2b4c18f3402e56d2c4b39891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b68940a30019eb2b4c18f3402e56d2c4b39891"}], "stats": {"total": 410, "additions": 368, "deletions": 42}, "files": [{"sha": "39d1d7077400451198bdb626699539c883623094", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3", "patch": "@@ -1,3 +1,12 @@\n+2009-12-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Matthias Klose  <doko@ubuntu.com>\n+\n+\tPR libstdc++/40133\n+\t* acinclude.m4 ([GLIBCXX_ENABLE_ATOMIC_BUILTINS]): On *-*-linux*,\n+\t*-*-uclinux*, *-*-kfreebsd*-gnu | *-*-gnu* targets do link tests when\n+\tpossible.\n+\t* configure: Regenerate.\n+\n 2009-12-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/parallel/numeric: Trivial formatting changes."}, {"sha": "1eaf4bac5f5cc17142ffae5037dfc53c5d01f0da", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 128, "deletions": 18, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3", "patch": "@@ -2438,8 +2438,7 @@ dnl is intended to be an all-or-nothing switch, so all the atomic operations\n dnl that are used should be checked.\n dnl\n dnl Note:\n-dnl libgomp and libgfortran do this with a link test, instead of an asm test.\n-dnl see: CHECK_SYNC_FETCH_AND_ADD\n+dnl libgomp and libgfortran use a link test, see CHECK_SYNC_FETCH_AND_ADD.\n dnl\n dnl Defines:\n dnl  _GLIBCXX_ATOMIC_BUILTINS_1 \n@@ -2451,12 +2450,122 @@ AC_DEFUN([GLIBCXX_ENABLE_ATOMIC_BUILTINS], [\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n   old_CXXFLAGS=\"$CXXFLAGS\"\n-  \n+\n+  # Do link tests if possible, instead asm tests, limited to some platforms\n+  # see discussion in PR target/40134, PR libstdc++/40133 and the thread\n+  # starting at http://gcc.gnu.org/ml/gcc-patches/2009-07/msg00322.html\n+  atomic_builtins_link_tests=no\n+  if test x$gcc_no_link != xyes; then\n+    # Can do link tests. Limit to some tested platforms\n+    case \"$host\" in\n+      *-*-linux* | *-*-uclinux* | *-*-kfreebsd*-gnu | *-*-gnu*)\n+\tatomic_builtins_link_tests=yes\n+        ;;\n+    esac\n+  fi\n+\n+  if test x$atomic_builtins_link_tests = xyes; then\n+\n+  # Do link tests.\n+\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  AC_MSG_CHECKING([for atomic builtins for bool])\n+  AC_CACHE_VAL(glibcxx_cv_atomic_bool, [\n+    AC_TRY_LINK(\n+      [ ],\n+      [typedef bool atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();],\n+      [glibcxx_cv_atomic_bool=yes],\n+      [glibcxx_cv_atomic_bool=no])\n+  ])    \n+  if test $glibcxx_cv_atomic_bool = yes; then\n+    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_1, 1,\n+      [Define if builtin atomic operations for bool are supported on this host.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_atomic_bool)\n+\n+  AC_MSG_CHECKING([for atomic builtins for short])\n+  AC_CACHE_VAL(glibcxx_cv_atomic_short, [\n+    AC_TRY_LINK(\n+      [ ],\n+      [typedef short atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();],\n+      [glibcxx_cv_atomic_short=yes],\n+      [glibcxx_cv_atomic_short=no])\n+  ])    \n+  if test $glibcxx_cv_atomic_short = yes; then\n+    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_2, 1,\n+      [Define if builtin atomic operations for short are supported on this host.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_atomic_short)\n+\n+  AC_MSG_CHECKING([for atomic builtins for int])\n+  AC_CACHE_VAL(glibcxx_cv_atomic_int, [\n+    AC_TRY_LINK(\n+      [ ],\n+      [typedef int atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();],\n+      [glibcxx_cv_atomic_int=yes],\n+      [glibcxx_cv_atomic_int=no])\n+  ])    \n+  if test $glibcxx_cv_atomic_int = yes; then\n+    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_4, 1,\n+      [Define if builtin atomic operations for int are supported on this host.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_atomic_int)\n+\n+  AC_MSG_CHECKING([for atomic builtins for long long])\n+  AC_CACHE_VAL(glibcxx_cv_atomic_long_long, [\n+    AC_TRY_LINK(\n+      [ ],\n+      [typedef long long atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();],\n+      [glibcxx_cv_atomic_long_long=yes],\n+      [glibcxx_cv_atomic_long_long=no])\n+  ])    \n+  if test $glibcxx_cv_atomic_long_long = yes; then\n+    AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_8, 1,\n+      [Define if builtin atomic operations for long long are supported on this host.])\n+  fi\n+  AC_MSG_RESULT($glibcxx_cv_atomic_long_long)\n+\n+  else\n+\n+  # Do asm tests.\n+\n   # Compile unoptimized.\n   CXXFLAGS='-O0 -S'\n \n-  # Fake what AC_TRY_COMPILE does, without linking as this is\n-  # unnecessary for a builtins test.\n+  # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n [#]line __oline__ \"configure\"\n@@ -2478,14 +2587,14 @@ EOF\n     AC_MSG_CHECKING([for atomic builtins for bool])\n     if AC_TRY_EVAL(ac_compile); then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsb=no\n+        glibcxx_cv_atomic_bool=no\n       else\n       AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_1, 1,\n       [Define if builtin atomic operations for bool are supported on this host.])\n-        enable_atomic_builtinsb=yes\n+        glibcxx_cv_atomic_bool=yes\n       fi\n     fi\n-    AC_MSG_RESULT($enable_atomic_builtinsb)\n+    AC_MSG_RESULT($glibcxx_cv_atomic_bool)\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n@@ -2508,14 +2617,14 @@ EOF\n     AC_MSG_CHECKING([for atomic builtins for short])\n     if AC_TRY_EVAL(ac_compile); then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinss=no\n+        glibcxx_cv_atomic_short=no\n       else\n       AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_2, 1,\n       [Define if builtin atomic operations for short are supported on this host.])\n-        enable_atomic_builtinss=yes\n+        glibcxx_cv_atomic_short=yes\n       fi\n     fi\n-    AC_MSG_RESULT($enable_atomic_builtinss)\n+    AC_MSG_RESULT($glibcxx_cv_atomic_short)\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n@@ -2539,14 +2648,14 @@ EOF\n     AC_MSG_CHECKING([for atomic builtins for int])\n     if AC_TRY_EVAL(ac_compile); then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsi=no\n+        glibcxx_cv_atomic_int=no\n       else\n       AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_4, 1,\n         [Define if builtin atomic operations for int are supported on this host.])\n-        enable_atomic_builtinsi=yes\n+        glibcxx_cv_atomic_int=yes\n       fi\n     fi\n-    AC_MSG_RESULT($enable_atomic_builtinsi)\n+    AC_MSG_RESULT($glibcxx_cv_atomic_int)\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n@@ -2569,22 +2678,23 @@ EOF\n     AC_MSG_CHECKING([for atomic builtins for long long])\n     if AC_TRY_EVAL(ac_compile); then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsll=no\n+        glibcxx_cv_atomic_long_long=no\n       else\n       AC_DEFINE(_GLIBCXX_ATOMIC_BUILTINS_8, 1,\n       [Define if builtin atomic operations for long long are supported on this host.])\n-        enable_atomic_builtinsll=yes\n+        glibcxx_cv_atomic_long_long=yes\n       fi\n     fi\n-    AC_MSG_RESULT($enable_atomic_builtinsll)\n+    AC_MSG_RESULT($glibcxx_cv_atomic_long_long)\n     rm -f conftest*\n \n+  fi\n \n   CXXFLAGS=\"$old_CXXFLAGS\"\n   AC_LANG_RESTORE\n \n   # Set atomicity_dir to builtins if either of above tests pass.\n-  if test $enable_atomic_builtinsi = yes || test $enable_atomic_builtinsb = yes ; then\n+  if test $glibcxx_cv_atomic_int = yes || test $glibcxx_cv_atomic_bool = yes ; then\n     atomicity_dir=cpu/generic/atomicity_builtins\n   fi\n "}, {"sha": "894ab7bbe7accccedf85dca4e5844379cc532515", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 231, "deletions": 24, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=2cd9cdcc6d0acdcddfd82d0b71e9703332a247d3", "patch": "@@ -15052,14 +15052,220 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n   old_CXXFLAGS=\"$CXXFLAGS\"\n \n+  # Do link tests if possible, instead asm tests, limited to some platforms\n+  # see discussion in PR target/40134, PR libstdc++/40133 and the thread\n+  # starting at http://gcc.gnu.org/ml/gcc-patches/2009-07/msg00322.html\n+  atomic_builtins_link_tests=no\n+  if test x$gcc_no_link != xyes; then\n+    # Can do link tests. Limit to some tested platforms\n+    case \"$host\" in\n+      *-*-linux* | *-*-uclinux* | *-*-kfreebsd*-gnu | *-*-gnu*)\n+\tatomic_builtins_link_tests=yes\n+        ;;\n+    esac\n+  fi\n+\n+  if test x$atomic_builtins_link_tests = xyes; then\n+\n+  # Do link tests.\n+\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions\"\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for atomic builtins for bool\" >&5\n+$as_echo_n \"checking for atomic builtins for bool... \" >&6; }\n+  if test \"${glibcxx_cv_atomic_bool+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+typedef bool atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_atomic_bool=yes\n+else\n+  glibcxx_cv_atomic_bool=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+\n+  if test $glibcxx_cv_atomic_bool = yes; then\n+\n+$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_1 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_bool\" >&5\n+$as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for atomic builtins for short\" >&5\n+$as_echo_n \"checking for atomic builtins for short... \" >&6; }\n+  if test \"${glibcxx_cv_atomic_short+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+typedef short atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_atomic_short=yes\n+else\n+  glibcxx_cv_atomic_short=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+\n+  if test $glibcxx_cv_atomic_short = yes; then\n+\n+$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_2 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_short\" >&5\n+$as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for atomic builtins for int\" >&5\n+$as_echo_n \"checking for atomic builtins for int... \" >&6; }\n+  if test \"${glibcxx_cv_atomic_int+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+typedef int atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_atomic_int=yes\n+else\n+  glibcxx_cv_atomic_int=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+\n+  if test $glibcxx_cv_atomic_int = yes; then\n+\n+$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_4 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_int\" >&5\n+$as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for atomic builtins for long long\" >&5\n+$as_echo_n \"checking for atomic builtins for long long... \" >&6; }\n+  if test \"${glibcxx_cv_atomic_long_long+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+typedef long long atomic_type;\n+       atomic_type c1;\n+       atomic_type c2;\n+       const atomic_type c3(0);\n+       __sync_fetch_and_add(&c1, c2);\n+       __sync_val_compare_and_swap(&c1, c3, c2);\n+       __sync_lock_test_and_set(&c1, c3);\n+       __sync_lock_release(&c1);\n+       __sync_synchronize();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_atomic_long_long=yes\n+else\n+  glibcxx_cv_atomic_long_long=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+\n+  if test $glibcxx_cv_atomic_long_long = yes; then\n+\n+$as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_8 1\" >>confdefs.h\n+\n+  fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_long_long\" >&5\n+$as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n+\n+  else\n+\n+  # Do asm tests.\n+\n   # Compile unoptimized.\n   CXXFLAGS='-O0 -S'\n \n-  # Fake what AC_TRY_COMPILE does, without linking as this is\n-  # unnecessary for a builtins test.\n+  # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15062 \"configure\"\n+#line 15268 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15083,20 +15289,20 @@ $as_echo_n \"checking for atomic builtins for bool... \" >&6; }\n   $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n   test $ac_status = 0; }; then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsb=no\n+        glibcxx_cv_atomic_bool=no\n       else\n \n $as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_1 1\" >>confdefs.h\n \n-        enable_atomic_builtinsb=yes\n+        glibcxx_cv_atomic_bool=yes\n       fi\n     fi\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_atomic_builtinsb\" >&5\n-$as_echo \"$enable_atomic_builtinsb\" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_bool\" >&5\n+$as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15099 \"configure\"\n+#line 15305 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15120,20 +15326,20 @@ $as_echo_n \"checking for atomic builtins for short... \" >&6; }\n   $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n   test $ac_status = 0; }; then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinss=no\n+        glibcxx_cv_atomic_short=no\n       else\n \n $as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_2 1\" >>confdefs.h\n \n-        enable_atomic_builtinss=yes\n+        glibcxx_cv_atomic_short=yes\n       fi\n     fi\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_atomic_builtinss\" >&5\n-$as_echo \"$enable_atomic_builtinss\" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_short\" >&5\n+$as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15136 \"configure\"\n+#line 15342 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15158,20 +15364,20 @@ $as_echo_n \"checking for atomic builtins for int... \" >&6; }\n   $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n   test $ac_status = 0; }; then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsi=no\n+        glibcxx_cv_atomic_int=no\n       else\n \n $as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_4 1\" >>confdefs.h\n \n-        enable_atomic_builtinsi=yes\n+        glibcxx_cv_atomic_int=yes\n       fi\n     fi\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_atomic_builtinsi\" >&5\n-$as_echo \"$enable_atomic_builtinsi\" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_int\" >&5\n+$as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15174 \"configure\"\n+#line 15380 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15195,18 +15401,19 @@ $as_echo_n \"checking for atomic builtins for long long... \" >&6; }\n   $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n   test $ac_status = 0; }; then\n       if grep __sync_ conftest.s >/dev/null 2>&1 ; then\n-        enable_atomic_builtinsll=no\n+        glibcxx_cv_atomic_long_long=no\n       else\n \n $as_echo \"#define _GLIBCXX_ATOMIC_BUILTINS_8 1\" >>confdefs.h\n \n-        enable_atomic_builtinsll=yes\n+        glibcxx_cv_atomic_long_long=yes\n       fi\n     fi\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_atomic_builtinsll\" >&5\n-$as_echo \"$enable_atomic_builtinsll\" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_atomic_long_long\" >&5\n+$as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n     rm -f conftest*\n \n+  fi\n \n   CXXFLAGS=\"$old_CXXFLAGS\"\n   ac_ext=c\n@@ -15217,7 +15424,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n   # Set atomicity_dir to builtins if either of above tests pass.\n-  if test $enable_atomic_builtinsi = yes || test $enable_atomic_builtinsb = yes ; then\n+  if test $glibcxx_cv_atomic_int = yes || test $glibcxx_cv_atomic_bool = yes ; then\n     atomicity_dir=cpu/generic/atomicity_builtins\n   fi\n \n@@ -15246,7 +15453,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15249 \"configure\"\n+#line 15456 \"configure\"\n int main()\n {\n   _Decimal32 d1;"}]}