{"sha": "376bddabe1ebdedbc0a99341f5b6a927fd40563f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc2YmRkYWJlMWViZGVkYmMwYTk5MzQxZjViNmE5MjdmZDQwNTYzZg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-04-28T04:46:20Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-04-28T04:46:20Z"}, "message": "always define ARGS_GROW_DOWNWARD\n\ngcc/ChangeLog:\n\n2015-04-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config/pa/pa.h (ARGS_GROW_DOWNWARD): Define to 1.\n\t* defaults.h (ARGS_GROW_DOWNWARD): Define it to 0 by default.\n\t* calls.c (save_fixed_argument_area): Don't chekc if\n\tARGS_GROW_DOWNWARD is defined.\n\t(restore_fixed_argument_area): Likewise.\n\t(mem_overlaps_already_clobbered_arg_p): Likewise.\n\t(check_sibcall_argument_overlap): Likewise.\n\t(expand_call): Likewise.\n\t(emit_library_call_value_1): Likewise.\n\t(store_one_arg): Likewise.\n\t* function.c (assign_parms): Likewise.\n\t(locate_and_pad_parm): Likewise.\n\t(pad_to_arg_alignment): Likewise.\n\t* targhooks.c (std_gimplify_va_arg_expr): Likewise.\n\nFrom-SVN: r222507", "tree": {"sha": "0e6ac166032ce97f590dfcdb134fad43c485608f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e6ac166032ce97f590dfcdb134fad43c485608f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/376bddabe1ebdedbc0a99341f5b6a927fd40563f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376bddabe1ebdedbc0a99341f5b6a927fd40563f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/376bddabe1ebdedbc0a99341f5b6a927fd40563f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376bddabe1ebdedbc0a99341f5b6a927fd40563f/comments", "author": null, "committer": null, "parents": [{"sha": "5251b8b3505902ee4c5f49d8c58c42f2950ba6c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5251b8b3505902ee4c5f49d8c58c42f2950ba6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5251b8b3505902ee4c5f49d8c58c42f2950ba6c1"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "4ba2540bba9958f18fbecf17554d4e6d39c79a98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=376bddabe1ebdedbc0a99341f5b6a927fd40563f", "patch": "@@ -1,3 +1,20 @@\n+2015-04-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config/pa/pa.h (ARGS_GROW_DOWNWARD): Define to 1.\n+\t* defaults.h (ARGS_GROW_DOWNWARD): Define it to 0 by default.\n+\t* calls.c (save_fixed_argument_area): Don't chekc if\n+\tARGS_GROW_DOWNWARD is defined.\n+\t(restore_fixed_argument_area): Likewise.\n+\t(mem_overlaps_already_clobbered_arg_p): Likewise.\n+\t(check_sibcall_argument_overlap): Likewise.\n+\t(expand_call): Likewise.\n+\t(emit_library_call_value_1): Likewise.\n+\t(store_one_arg): Likewise.\n+\t* function.c (assign_parms): Likewise.\n+\t(locate_and_pad_parm): Likewise.\n+\t(pad_to_arg_alignment): Likewise.\n+\t* targhooks.c (std_gimplify_va_arg_expr): Likewise.\n+\n 2015-04-27  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* defaults.h (gen_epilogue): New function."}, {"sha": "b17a9f2141debe7bc0e2e2c360a1685a1710475e", "filename": "gcc/calls.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=376bddabe1ebdedbc0a99341f5b6a927fd40563f", "patch": "@@ -948,7 +948,7 @@ save_fixed_argument_area (int reg_parm_stack_space, rtx argblock, int *low_to_sa\n \n   /* Compute the boundary of the area that needs to be saved, if any.  */\n   high = reg_parm_stack_space;\n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n   high += 1;\n #endif\n   if (high > highest_outgoing_arg_in_use)\n@@ -979,7 +979,7 @@ save_fixed_argument_area (int reg_parm_stack_space, rtx argblock, int *low_to_sa\n \t\t\t BIGGEST_ALIGNMENT / UNITS_PER_WORD) - 1)))\n \t  save_mode = BLKmode;\n \n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n \tdelta = -high;\n #else\n \tdelta = low;\n@@ -1013,7 +1013,7 @@ restore_fixed_argument_area (rtx save_area, rtx argblock, int high_to_save, int\n   int delta;\n   rtx addr, stack_area;\n \n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n   delta = -high_to_save;\n #else\n   delta = low_to_save;\n@@ -1980,7 +1980,7 @@ mem_overlaps_already_clobbered_arg_p (rtx addr, unsigned HOST_WIDE_INT size)\n   i += crtl->args.pretend_args_size;\n #endif\n \n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n   i = -i - size;\n #endif\n   if (size > 0)\n@@ -2286,7 +2286,7 @@ check_sibcall_argument_overlap (rtx_insn *insn, struct arg_data *arg,\n \n   if (mark_stored_args_map)\n     {\n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n       low = -arg->locate.slot_offset.constant - arg->locate.size.constant;\n #else\n       low = arg->locate.slot_offset.constant;\n@@ -2979,7 +2979,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t  if (! OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? fntype : TREE_TYPE (fndecl))))\n \t\t    needed += reg_parm_stack_space;\n \n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n \t\t  highest_outgoing_arg_in_use = MAX (initial_highest_arg_in_use,\n \t\t\t\t\t\t     needed + 1);\n #else\n@@ -3047,7 +3047,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t  else\n \t\t    {\n \t\t      argblock = push_block (GEN_INT (needed), 0, 0);\n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n \t\t      argblock = plus_constant (Pmode, argblock, needed);\n #endif\n \t\t    }\n@@ -4122,7 +4122,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n       if (! OUTGOING_REG_PARM_STACK_SPACE ((!fndecl ? fntype : TREE_TYPE (fndecl))))\n \tneeded += reg_parm_stack_space;\n \n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n       highest_outgoing_arg_in_use = MAX (initial_highest_arg_in_use,\n \t\t\t\t\t needed + 1);\n #else\n@@ -4213,7 +4213,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t      /* If this is being stored into a pre-allocated, fixed-size,\n \t\t stack area, save any previous data at that location.  */\n \n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n \t      /* stack_slot is negative, but we want to index stack_usage_map\n \t\t with positive values.  */\n \t      upper_bound = -argvec[argnum].locate.slot_offset.constant + 1;\n@@ -4702,7 +4702,7 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t save any previous data at that location.  */\n       if (argblock && ! variable_size && arg->stack)\n \t{\n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n \t  /* stack_slot is negative, but we want to index stack_usage_map\n \t     with positive values.  */\n \t  if (GET_CODE (XEXP (arg->stack_slot, 0)) == PLUS)"}, {"sha": "f9107bcdbce7753ab9e78e999261393024f32e13", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=376bddabe1ebdedbc0a99341f5b6a927fd40563f", "patch": "@@ -490,7 +490,7 @@ extern rtx hppa_pic_save_rtx (void);\n /* #define STACK_GROWS_DOWNWARD */\n \n /* Believe it or not.  */\n-#define ARGS_GROW_DOWNWARD\n+#define ARGS_GROW_DOWNWARD 1\n \n /* Define this to nonzero if the nominal address of the stack frame\n    is at the high-address end of the local variables;"}, {"sha": "47fdcf45e9ad3220cd91037fc46962273b5b386d", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=376bddabe1ebdedbc0a99341f5b6a927fd40563f", "patch": "@@ -1225,6 +1225,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define EPILOGUE_USES(REG) false\n #endif\n \n+#ifndef ARGS_GROW_DOWNWARD\n+#define ARGS_GROW_DOWNWARD 0\n+#endif\n+\n #ifdef GCC_INSN_FLAGS_H\n /* Dependent default target macro definitions\n "}, {"sha": "48e6c69265cb10b5084ef6e0a042a66f7399fb4b", "filename": "gcc/function.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=376bddabe1ebdedbc0a99341f5b6a927fd40563f", "patch": "@@ -3771,7 +3771,7 @@ assign_parms (tree fndecl)\n   crtl->args.size = CEIL_ROUND (crtl->args.size,\n \t\t\t\t\t   PARM_BOUNDARY / BITS_PER_UNIT);\n \n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n   crtl->args.arg_offset_rtx\n     = (all.stack_args_size.var == 0 ? GEN_INT (-all.stack_args_size.constant)\n        : expand_expr (size_diffop (all.stack_args_size.var,\n@@ -4070,7 +4070,7 @@ locate_and_pad_parm (machine_mode passed_mode, tree type, int in_regs,\n   if (crtl->preferred_stack_boundary < boundary)\n     crtl->preferred_stack_boundary = boundary;\n \n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n   locate->slot_offset.constant = -initial_offset_ptr->constant;\n   if (initial_offset_ptr->var)\n     locate->slot_offset.var = size_binop (MINUS_EXPR, ssize_int (0),\n@@ -4175,7 +4175,7 @@ pad_to_arg_alignment (struct args_size *offset_ptr, int boundary,\n \t  tree offset = size_binop (PLUS_EXPR,\n \t\t\t\t    ARGS_SIZE_TREE (*offset_ptr),\n \t\t\t\t    sp_offset_tree);\n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n \t  tree rounded = round_down (offset, boundary / BITS_PER_UNIT);\n #else\n \t  tree rounded = round_up   (offset, boundary / BITS_PER_UNIT);\n@@ -4191,7 +4191,7 @@ pad_to_arg_alignment (struct args_size *offset_ptr, int boundary,\n       else\n \t{\n \t  offset_ptr->constant = -sp_offset +\n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n \t    FLOOR_ROUND (offset_ptr->constant + sp_offset, boundary_in_bytes);\n #else\n \t    CEIL_ROUND (offset_ptr->constant + sp_offset, boundary_in_bytes);"}, {"sha": "7f694b62242a8fe58bd7f55028e623508d6a5a87", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376bddabe1ebdedbc0a99341f5b6a927fd40563f/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=376bddabe1ebdedbc0a99341f5b6a927fd40563f", "patch": "@@ -1786,7 +1786,7 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   unsigned HOST_WIDE_INT align, boundary;\n   bool indirect;\n \n-#ifdef ARGS_GROW_DOWNWARD\n+#if ARGS_GROW_DOWNWARD\n   /* All of the alignment and movement below is for args-grow-up machines.\n      As of 2004, there are only 3 ARGS_GROW_DOWNWARD targets, and they all\n      implement their own specialized gimplify_va_arg_expr routines.  */"}]}