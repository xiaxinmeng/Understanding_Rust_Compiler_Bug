{"sha": "87d84e1eb6830abc45c9df8418b2213a6447351d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdkODRlMWViNjgzMGFiYzQ1YzlkZjg0MThiMjIxM2E2NDQ3MzUxZA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2012-07-23T14:24:31Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2012-07-23T14:24:31Z"}, "message": "armv7m-1.c: New test.\n\n\tgcc/testsuite/\n\t* g++.dg/other/armv7m-1.c: New test.\n\nFrom-SVN: r189784", "tree": {"sha": "ea5096fb2161e76988eb3e635d7a9b1067aeceec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea5096fb2161e76988eb3e635d7a9b1067aeceec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87d84e1eb6830abc45c9df8418b2213a6447351d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d84e1eb6830abc45c9df8418b2213a6447351d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d84e1eb6830abc45c9df8418b2213a6447351d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d84e1eb6830abc45c9df8418b2213a6447351d/comments", "author": null, "committer": null, "parents": [{"sha": "afa6353225e54c18154b3a144e3d3596f2169d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afa6353225e54c18154b3a144e3d3596f2169d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afa6353225e54c18154b3a144e3d3596f2169d77"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "40576ab99056bee30b28311cead66bda0067c1c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d84e1eb6830abc45c9df8418b2213a6447351d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d84e1eb6830abc45c9df8418b2213a6447351d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87d84e1eb6830abc45c9df8418b2213a6447351d", "patch": "@@ -1,3 +1,7 @@\n+2012-07-23  Paul Brook  <paul@codesourcery.com>\n+\n+\t* g++.dg/other/armv7m-1.c: New test.\n+\n 2012-07-23  Julian Brown  <julian@codesourcery.com>\n \n \t* gcc.c-torture/execute/20101011-1.c (__aeabi_idiv0): Define for"}, {"sha": "6aa686b10cd9b28adfd6794f334663f812fdcfb3", "filename": "gcc/testsuite/g++.dg/other/armv7m-1.C", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87d84e1eb6830abc45c9df8418b2213a6447351d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farmv7m-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87d84e1eb6830abc45c9df8418b2213a6447351d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farmv7m-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Farmv7m-1.C?ref=87d84e1eb6830abc45c9df8418b2213a6447351d", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run { target arm*-*-* } } */\n+/* Test Armv7m interrupt routines.  */\n+#include <stdlib.h>\n+\n+#ifdef __ARM_ARCH_7M__\n+void __attribute__((interrupt))\n+foo(void)\n+{\n+  long long n;\n+  long p;\n+  asm volatile (\"\" : \"=r\" (p) : \"0\" (&n));\n+  if (p & 4)\n+    abort ();\n+  return;\n+}\n+\n+void __attribute__((interrupt))\n+bar(void)\n+{\n+  throw 42;\n+}\n+\n+int main()\n+{\n+  int a;\n+  int before;\n+  int after;\n+  volatile register int sp asm(\"sp\");\n+\n+  asm volatile (\"mov %0, sp\\n\"\n+\t\t\"blx %2\\n\"\n+\t\t\"mov %1, sp\\n\"\n+\t\t: \"=&r\" (before), \"=r\" (after) : \"r\" (foo)\n+\t\t: \"memory\", \"cc\", \"r0\", \"r1\", \"r2\", \"r3\", \"ip\", \"lr\");\n+  if (before != after)\n+    abort();\n+  asm volatile (\"mov %0, sp\\n\"\n+\t\t\"sub sp, sp, #4\\n\"\n+\t\t\"blx %2\\n\"\n+\t\t\"add sp, sp, #4\\n\"\n+\t\t\"mov %1, sp\\n\"\n+\t\t: \"=&r\" (before), \"=r\" (after) : \"r\" (foo)\n+\t\t: \"memory\", \"cc\", \"r0\", \"r1\", \"r2\", \"r3\", \"ip\", \"lr\");\n+  if (before != after)\n+    abort();\n+  before = sp;\n+  try\n+    {\n+      bar();\n+    }\n+  catch (int i)\n+    {\n+      if (i != 42)\n+\tabort();\n+    }\n+  catch (...)\n+    {\n+      abort();\n+    }\n+  if (before != sp)\n+    abort();\n+  exit(0);\n+}\n+#else\n+int main()\n+{\n+  exit (0);\n+}\n+#endif"}]}