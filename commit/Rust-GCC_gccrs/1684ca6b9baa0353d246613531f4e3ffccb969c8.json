{"sha": "1684ca6b9baa0353d246613531f4e3ffccb969c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY4NGNhNmI5YmFhMDM1M2QyNDY2MTM1MzFmNGUzZmZjY2I5NjljOA==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-08-09T06:02:00Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-08-09T06:02:00Z"}, "message": "re PR tree-optimization/50014 (Assertion failed in vect_get_vec_def_for_stmt_copy)\n\n\n        PR tree-optimization/50014\n        * tree-vect-loop.c (vectorizable_reduction): Get def type before\n        calling vect_get_vec_def_for_stmt_copy ().\n\nFrom-SVN: r177581", "tree": {"sha": "417132f64ec3fbca165b1cbb0855b5243a51f449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/417132f64ec3fbca165b1cbb0855b5243a51f449"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1684ca6b9baa0353d246613531f4e3ffccb969c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1684ca6b9baa0353d246613531f4e3ffccb969c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1684ca6b9baa0353d246613531f4e3ffccb969c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1684ca6b9baa0353d246613531f4e3ffccb969c8/comments", "author": null, "committer": null, "parents": [{"sha": "4869704e215be941d5d50652350fc1b564407935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4869704e215be941d5d50652350fc1b564407935", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4869704e215be941d5d50652350fc1b564407935"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "d7d2cd7574e36759bd3d04f4ca57c5ead4074b19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1684ca6b9baa0353d246613531f4e3ffccb969c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1684ca6b9baa0353d246613531f4e3ffccb969c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1684ca6b9baa0353d246613531f4e3ffccb969c8", "patch": "@@ -1,3 +1,9 @@\n+2011-08-09  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/50014\n+\t* tree-vect-loop.c (vectorizable_reduction): Get def type before\n+\tcalling vect_get_vec_def_for_stmt_copy ().\n+\n 2011-08-08  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/49990"}, {"sha": "48836028dd6dec9a3a83d494dc0575c7c828fd43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1684ca6b9baa0353d246613531f4e3ffccb969c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1684ca6b9baa0353d246613531f4e3ffccb969c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1684ca6b9baa0353d246613531f4e3ffccb969c8", "patch": "@@ -1,3 +1,8 @@\n+2011-08-09  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/50014\n+\t* gcc.dg/vect/pr50014.c: New test.\n+\n 2011-08-08  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/49923"}, {"sha": "c04ffec2135d013cd76f63f68fdd3fd8676c6f23", "filename": "gcc/testsuite/gcc.dg/vect/pr50014.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1684ca6b9baa0353d246613531f4e3ffccb969c8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr50014.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1684ca6b9baa0353d246613531f4e3ffccb969c8/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr50014.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr50014.c?ref=1684ca6b9baa0353d246613531f4e3ffccb969c8", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_int } */\n+\n+int f(unsigned char *s, int n)\n+{\n+  int sum = 0;\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    sum += 256 * s[i];\n+\n+  return sum;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\n+"}, {"sha": "539bcaabd9709f58012b07c497bfd36d8dfcff36", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1684ca6b9baa0353d246613531f4e3ffccb969c8/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1684ca6b9baa0353d246613531f4e3ffccb969c8/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=1684ca6b9baa0353d246613531f4e3ffccb969c8", "patch": "@@ -4318,7 +4318,7 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n   VEC (tree, heap) *vec_oprnds0 = NULL, *vec_oprnds1 = NULL, *vect_defs = NULL;\n   VEC (gimple, heap) *phis = NULL;\n   int vec_num;\n-  tree def0, def1, tem;\n+  tree def0, def1, tem, op0, op1 = NULL_TREE;\n \n   /* In case of reduction chain we switch to the first stmt in the chain, but\n      we don't update STMT_INFO, since only the last stmt is marked as reduction\n@@ -4775,8 +4775,6 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n       /* Handle uses.  */\n       if (j == 0)\n         {\n-          tree op0, op1 = NULL_TREE;\n-\n           op0 = ops[!reduc_index];\n           if (op_type == ternary_op)\n             {\n@@ -4806,11 +4804,19 @@ vectorizable_reduction (gimple stmt, gimple_stmt_iterator *gsi,\n         {\n           if (!slp_node)\n             {\n-              enum vect_def_type dt = vect_unknown_def_type; /* Dummy */\n-              loop_vec_def0 = vect_get_vec_def_for_stmt_copy (dt, loop_vec_def0);\n+              enum vect_def_type dt;\n+              gimple dummy_stmt;\n+              tree dummy;\n+\n+              vect_is_simple_use (ops[!reduc_index], loop_vinfo, NULL,\n+                                  &dummy_stmt, &dummy, &dt);\n+              loop_vec_def0 = vect_get_vec_def_for_stmt_copy (dt,\n+                                                              loop_vec_def0);\n               VEC_replace (tree, vec_oprnds0, 0, loop_vec_def0);\n               if (op_type == ternary_op)\n                 {\n+                  vect_is_simple_use (op1, loop_vinfo, NULL, &dummy_stmt,\n+                                      &dummy, &dt);\n                   loop_vec_def1 = vect_get_vec_def_for_stmt_copy (dt,\n                                                                 loop_vec_def1);\n                   VEC_replace (tree, vec_oprnds1, 0, loop_vec_def1);"}]}