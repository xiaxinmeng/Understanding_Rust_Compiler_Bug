{"sha": "c816db88c31a93b91dfeed2431b0928eefc89e08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgxNmRiODhjMzFhOTNiOTFkZmVlZDI0MzFiMDkyOGVlZmM4OWUwOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-14T21:03:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-14T21:03:45Z"}, "message": "(expand_builtin_apply_args): Put back original register save and\nrestore order.\n\nFrom-SVN: r9952", "tree": {"sha": "43730303b796cad5742df5384e76e17fd2153c44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43730303b796cad5742df5384e76e17fd2153c44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c816db88c31a93b91dfeed2431b0928eefc89e08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c816db88c31a93b91dfeed2431b0928eefc89e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c816db88c31a93b91dfeed2431b0928eefc89e08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c816db88c31a93b91dfeed2431b0928eefc89e08/comments", "author": null, "committer": null, "parents": [{"sha": "bacbde186e2ccaf1cbce0d8f5ae52f3f60adac19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bacbde186e2ccaf1cbce0d8f5ae52f3f60adac19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bacbde186e2ccaf1cbce0d8f5ae52f3f60adac19"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "828916cc3957013047c0304b7b8e2fd519871e4e", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c816db88c31a93b91dfeed2431b0928eefc89e08/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c816db88c31a93b91dfeed2431b0928eefc89e08/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c816db88c31a93b91dfeed2431b0928eefc89e08", "patch": "@@ -8156,14 +8156,8 @@ expand_builtin_apply_args ()\n   if (struct_value_rtx)\n     size += GET_MODE_SIZE (Pmode);\n \n-  /* Save each register used in calling a function to the block.\n-     Doing this in reverse order makes for much more compact code\n-     for i386 and family.  If we do this in reverse order, a simple\n-     series of pops and stores will be generated.  If we do this\n-     in ascending order, the pops and stores will be littered with\n-     stack swaps as well.  Since the order is largely irrelevant for\n-     all other architectures, we use the optimal order for the i386.  */\n-  for (regno = FIRST_PSEUDO_REGISTER; regno--;)\n+  /* Save each register used in calling a function to the block.  */\n+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     if ((mode = apply_args_mode[regno]) != VOIDmode)\n       {\n \trtx tem;\n@@ -8263,10 +8257,8 @@ expand_builtin_apply (function, arguments, argsize)\n     size += GET_MODE_SIZE (Pmode);\n \n   /* Restore each of the registers previously saved.  Make USE insns\n-     for each of these registers for use in making the call.\n-     Doing this in reverse order makes for much more compact code\n-     for i386 and family.  */\n-  for (regno = FIRST_PSEUDO_REGISTER; regno--; )\n+     for each of these registers for use in making the call.  */\n+  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n     if ((mode = apply_args_mode[regno]) != VOIDmode)\n       {\n \talign = GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT;"}]}