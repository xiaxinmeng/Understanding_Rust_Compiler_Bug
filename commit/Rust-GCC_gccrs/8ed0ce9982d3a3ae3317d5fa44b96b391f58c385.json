{"sha": "8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVkMGNlOTk4MmQzYTNhZTMzMTdkNWZhNDRiOTZiMzkxZjU4YzM4NQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-06-12T04:27:34Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-06-12T04:27:34Z"}, "message": "i386.c (OPTION_MASK_ISA_CRC32_SET): New.\n\ngcc/\n\n2009-06-11  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (OPTION_MASK_ISA_CRC32_SET): New.\n\t(OPTION_MASK_ISA_CRC32_UNSET): Likewise.\n\t(ix86_handle_option): Handle OPT_mcrc32.\n\t(ix86_target_string): Add -mcrc32.\n\t(bdesc_args): Enable crc32 builtins with OPTION_MASK_ISA_CRC32.\n\n\t* config/i386/i386.h (TARGET_CRC32): New.\n\n\t* config/i386/i386.md (sse4_2_crc32<mode>): Also check\n\tTARGET_CRC32.\n\t(sse4_2_crc32di): Likewise.\n\n\t* config/i386/i386.opt (mcrc32: New.\n\n\t* doc/invoke.texi: Document -mcrc32.\n\ngcc/testsuite/\n\n2009-06-11  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc.target/i386/crc32-1.c: New.\n\t* gcc.target/i386/crc32-2.c: Likewise.\n\nFrom-SVN: r148410", "tree": {"sha": "cd70cca5a8136571862ac9c47c322e9e1e935637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd70cca5a8136571862ac9c47c322e9e1e935637"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/comments", "author": null, "committer": null, "parents": [{"sha": "9fd68a1f1b247b2145a4fb8517ffbf937c9cc36d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fd68a1f1b247b2145a4fb8517ffbf937c9cc36d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fd68a1f1b247b2145a4fb8517ffbf937c9cc36d"}], "stats": {"total": 106, "additions": 94, "deletions": 12}, "files": [{"sha": "8ced87250c554b76db6b3939cfbf7ea0f449645d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "patch": "@@ -1,6 +1,24 @@\n+2009-06-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (OPTION_MASK_ISA_CRC32_SET): New.\n+\t(OPTION_MASK_ISA_CRC32_UNSET): Likewise.\n+\t(ix86_handle_option): Handle OPT_mcrc32.\n+\t(ix86_target_string): Add -mcrc32.\n+\t(bdesc_args): Enable crc32 builtins with OPTION_MASK_ISA_CRC32.\n+\n+\t* config/i386/i386.h (TARGET_CRC32): New.\n+\n+\t* config/i386/i386.md (sse4_2_crc32<mode>): Also check\n+\tTARGET_CRC32.\n+\t(sse4_2_crc32di): Likewise.\n+\n+\t* config/i386/i386.opt (mcrc32: New.\n+\n+\t* doc/invoke.texi: Document -mcrc32.\n+\n 2009-06-11  Richard Henderson  <rth@redhat.com>\n \n-        * common.opt (gdwarf-): Accept a version number.\n+\t* common.opt (gdwarf-): Accept a version number.\n \t* doc/invoke.texi (gdwarf-): Update docs.\n \t* opth-gen.awk: Special case -gdwarf+ to OPT_gdwarfplus.\n \t* opts.c (common_handle_option) [OPT_gdwarf_]: Verify dwarf\n@@ -238,9 +256,9 @@\n \n 2009-06-09  Ghassan Shobaki  <ghassan.shobaki@amd.com>\n \n-        * tree-ssa-loop-prefetch.c\n-        (loop_prefetch_arrays): Fixed a portability problem in printf format\n-        string.\n+\t* tree-ssa-loop-prefetch.c\n+\t(loop_prefetch_arrays): Fixed a portability problem in printf format\n+\tstring.\n \n 2009-06-09  Martin Jambor  <mjambor@suse.cz>\n \n@@ -300,7 +318,7 @@\n \tcompute_builtin_object_size.\n \n 2009-06-08  Ghassan Shobaki  <ghassan.shobaki@amd.com>\n-            Dwarakanath Rajagopal  <dwarak.rajagopal@amd.com>\n+\t    Dwarakanath Rajagopal  <dwarak.rajagopal@amd.com>\n \t\n \t* tree-ssa-loop-prefetch.c \n \t(gather_memory_references): Introduced a counter for the number of "}, {"sha": "ec335762d163690f0b4433168127b6ab638d14a7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "patch": "@@ -1970,6 +1970,7 @@ static int ix86_isa_flags_explicit;\n #define OPTION_MASK_ISA_CX16_SET OPTION_MASK_ISA_CX16\n #define OPTION_MASK_ISA_SAHF_SET OPTION_MASK_ISA_SAHF\n #define OPTION_MASK_ISA_MOVBE_SET OPTION_MASK_ISA_MOVBE\n+#define OPTION_MASK_ISA_CRC32_SET OPTION_MASK_ISA_CRC32\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -2012,6 +2013,7 @@ static int ix86_isa_flags_explicit;\n #define OPTION_MASK_ISA_CX16_UNSET OPTION_MASK_ISA_CX16\n #define OPTION_MASK_ISA_SAHF_UNSET OPTION_MASK_ISA_SAHF\n #define OPTION_MASK_ISA_MOVBE_UNSET OPTION_MASK_ISA_MOVBE\n+#define OPTION_MASK_ISA_CRC32_UNSET OPTION_MASK_ISA_CRC32\n \n /* Vectorization library interface and handlers.  */\n tree (*ix86_veclib_handler)(enum built_in_function, tree, tree) = NULL;\n@@ -2315,6 +2317,19 @@ ix86_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n \t}\n       return true;\n \n+    case OPT_mcrc32:\n+      if (value)\n+\t{\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_CRC32_SET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_CRC32_SET;\n+\t}\n+      else\n+\t{\n+\t  ix86_isa_flags &= ~OPTION_MASK_ISA_CRC32_UNSET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_CRC32_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_maes:\n       if (value)\n \t{\n@@ -2378,6 +2393,7 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-mabm\",\t\tOPTION_MASK_ISA_ABM },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n+    { \"-mcrc32\",\tOPTION_MASK_ISA_CRC32 },\n     { \"-maes\",\t\tOPTION_MASK_ISA_AES },\n     { \"-mpclmul\",\tOPTION_MASK_ISA_PCLMUL },\n   };\n@@ -22178,10 +22194,10 @@ static const struct builtin_description bdesc_args[] =\n \n   /* SSE4.2 */\n   { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_gtv2di3, \"__builtin_ia32_pcmpgtq\", IX86_BUILTIN_PCMPGTQ, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32qi, \"__builtin_ia32_crc32qi\", IX86_BUILTIN_CRC32QI, UNKNOWN, (int) UINT_FTYPE_UINT_UCHAR },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32hi, \"__builtin_ia32_crc32hi\", IX86_BUILTIN_CRC32HI, UNKNOWN, (int) UINT_FTYPE_UINT_USHORT },\n-  { OPTION_MASK_ISA_SSE4_2, CODE_FOR_sse4_2_crc32si, \"__builtin_ia32_crc32si\", IX86_BUILTIN_CRC32SI, UNKNOWN, (int) UINT_FTYPE_UINT_UINT },\n-  { OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse4_2_crc32di, \"__builtin_ia32_crc32di\", IX86_BUILTIN_CRC32DI, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64 },\n+  { OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32, CODE_FOR_sse4_2_crc32qi, \"__builtin_ia32_crc32qi\", IX86_BUILTIN_CRC32QI, UNKNOWN, (int) UINT_FTYPE_UINT_UCHAR },\n+  { OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32, CODE_FOR_sse4_2_crc32hi, \"__builtin_ia32_crc32hi\", IX86_BUILTIN_CRC32HI, UNKNOWN, (int) UINT_FTYPE_UINT_USHORT },\n+  { OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32, CODE_FOR_sse4_2_crc32si, \"__builtin_ia32_crc32si\", IX86_BUILTIN_CRC32SI, UNKNOWN, (int) UINT_FTYPE_UINT_UINT },\n+  { OPTION_MASK_ISA_SSE4_2 | OPTION_MASK_ISA_CRC32 | OPTION_MASK_ISA_64BIT, CODE_FOR_sse4_2_crc32di, \"__builtin_ia32_crc32di\", IX86_BUILTIN_CRC32DI, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64 },\n \n   /* SSE4A */\n   { OPTION_MASK_ISA_SSE4A, CODE_FOR_sse4a_extrqi, \"__builtin_ia32_extrqi\", IX86_BUILTIN_EXTRQI, UNKNOWN, (int) V2DI_FTYPE_V2DI_UINT_UINT },"}, {"sha": "657c8ae3eefe3f05ab16ea2aa2ad7de9c6cae57a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "patch": "@@ -60,6 +60,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_POPCNT\tOPTION_ISA_POPCNT\n #define TARGET_SAHF\tOPTION_ISA_SAHF\n #define TARGET_MOVBE\tOPTION_ISA_MOVBE\n+#define TARGET_CRC32\tOPTION_ISA_CRC32\n #define TARGET_AES\tOPTION_ISA_AES\n #define TARGET_PCLMUL\tOPTION_ISA_PCLMUL\n #define TARGET_CMPXCHG16B OPTION_ISA_CX16"}, {"sha": "c21aa9c679e1eff010debb5b69b88a02e1406ad9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "patch": "@@ -22642,7 +22642,7 @@\n \t  [(match_operand:SI 1 \"register_operand\" \"0\")\n \t   (match_operand:CRC32MODE 2 \"nonimmediate_operand\" \"<crc32modeconstraint>\")]\n \t  UNSPEC_CRC32))]\n-  \"TARGET_SSE4_2\"\n+  \"TARGET_SSE4_2 || TARGET_CRC32\"\n   \"crc32<crc32modesuffix>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_rep\" \"1\")\n@@ -22663,7 +22663,7 @@\n \t  [(match_operand:DI 1 \"register_operand\" \"0\")\n \t   (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")]\n \t  UNSPEC_CRC32))]\n-  \"TARGET_SSE4_2 && TARGET_64BIT\"\n+  \"TARGET_64BIT && (TARGET_SSE4_2 || TARGET_CRC32)\"\n   \"crc32q\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_rep\" \"1\")"}, {"sha": "9ec93d8c2a85cb65b674a1c11b3e268d98230fc1", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "patch": "@@ -343,6 +343,10 @@ mmovbe\n Target Report Mask(ISA_MOVBE) Var(ix86_isa_flags) VarExists Save\n Support code generation of movbe instruction.\n \n+mcrc32\n+Target Report Mask(ISA_CRC32) Var(ix86_isa_flags) VarExists Save\n+Support code generation of crc32 instruction.\n+\n maes\n Target Report Mask(ISA_AES) Var(ix86_isa_flags) VarExists Save\n Support AES built-in functions and code generation"}, {"sha": "f8792f439fb3820887ffee652e23ac0f3afa60b1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "patch": "@@ -579,7 +579,7 @@ Objective-C and Objective-C++ Dialects}.\n -mno-wide-multiply  -mrtd  -malign-double @gol\n -mpreferred-stack-boundary=@var{num}\n -mincoming-stack-boundary=@var{num}\n--mcld -mcx16 -msahf -mmovbe -mrecip @gol\n+-mcld -mcx16 -msahf -mmovbe -mcrc32 -mrecip @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -maes -mpclmul @gol\n -msse4a -m3dnow -mpopcnt -mabm -msse5 @gol\n@@ -11559,6 +11559,12 @@ or @code{remainder} built-in functions: see @ref{Other Builtins} for details.\n This option will enable GCC to use movbe instruction to implement\n @code{__builtin_bswap32} and @code{__builtin_bswap64}.\n \n+@item -mcrc32\n+@opindex mcrc32\n+This option will enable built-in functions, @code{__builtin_ia32_crc32qi},\n+@code{__builtin_ia32_crc32hi}. @code{__builtin_ia32_crc32si} and\n+@code{__builtin_ia32_crc32di} to generate the crc32 machine instruction.\n+\n @item -mrecip\n @opindex mrecip\n This option will enable GCC to use RCPSS and RSQRTSS instructions (and their"}, {"sha": "f64d23fddd67322fb34dab92faacec86efd92fe1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "patch": "@@ -1,3 +1,8 @@\n+2009-06-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/crc32-1.c: New.\n+\t* gcc.target/i386/crc32-2.c: Likewise.\n+\n 2009-06-11  David Daney  <ddaney@caviumnetworks.com>\n \n \tPR c/39252"}, {"sha": "b3ed5b6842a15a5945e5a441ff9155329c3dd776", "filename": "gcc/testsuite/gcc.target/i386/crc32-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcrc32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcrc32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcrc32-1.c?ref=8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcrc32\" } */\n+/* { dg-final { scan-assembler \"crc32b\\[^\\\\n\\]*eax\" } } */\n+/* { dg-final { scan-assembler \"crc32w\\[^\\\\n\\]*eax\" } } */\n+/* { dg-final { scan-assembler \"crc32l\\[^\\\\n\\]*eax\" } } */\n+\n+unsigned int\n+crc32b (unsigned int x, unsigned char y)\n+{\n+  return __builtin_ia32_crc32qi (x, y);\n+}\n+\n+unsigned int\n+crc32w (unsigned int x, unsigned short y)\n+{\n+  return __builtin_ia32_crc32hi (x, y);\n+}\n+\n+unsigned int\n+crc32d (unsigned int x, unsigned int y)\n+{\n+  return __builtin_ia32_crc32si (x, y);\n+}"}, {"sha": "e7af9ab45f0ed95ba5dfa731159510c1623b0c16", "filename": "gcc/testsuite/gcc.target/i386/crc32-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcrc32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ed0ce9982d3a3ae3317d5fa44b96b391f58c385/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcrc32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fcrc32-2.c?ref=8ed0ce9982d3a3ae3317d5fa44b96b391f58c385", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcrc32\" } */\n+/* { dg-final { scan-assembler \"crc32q\\[^\\\\n\\]*rax\" { target lp64 } } } */\n+\n+unsigned long long\n+crc32d (unsigned long long x, unsigned long long y)\n+{\n+  return __builtin_ia32_crc32di (x, y);\n+}"}]}