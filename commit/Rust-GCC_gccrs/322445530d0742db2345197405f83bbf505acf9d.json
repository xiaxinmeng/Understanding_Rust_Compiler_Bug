{"sha": "322445530d0742db2345197405f83bbf505acf9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIyNDQ1NTMwZDA3NDJkYjIzNDUxOTc0MDVmODNiYmY1MDVhY2Y5ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-02T11:40:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-02T11:40:20Z"}, "message": "tree-flow.h (set_default_def): Rename to ...\n\n2012-08-02  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (set_default_def): Rename to ...\n\t(set_ssa_default_def): ... this.  Take a struct function argument.\n\t(gimple_default_def): Rename to ...\n\t(ssa_default_def): ... this.\n\t(get_or_create_ssa_default_def): New function.\n\t* tree-dfa.c: Likewise.\n\t(dump_variable): Adjust.\n\t* ipa-prop.c (ipa_analyze_params_uses): Adjust, properly check\n\tfor used parameters.\n\t* ipa-split.c (consider_split): Adjust, avoid repeated default-def\n\tlookups.\n\t(split_function): Likewise.\n\t* lto-streamer-in.c (input_ssa_names): Adjust.\n\t* omp-low.c (expand_omp_taskreg): Likewise.\n\t* tree-cfg.c (replace_ssa_name): Adjust, no need to push/pop cfun.\n\t* tree-complex.c (init_parameter_lattice_values): Adjust.\n\t(get_component_ssa_name): Likewise.\n\t(update_parameter_components): Likewise.\n\t* tree-inline.c (remap_ssa_name): Likewise.\n\t(setup_one_parameter): Likewise.\n\t(initialize_inlined_parameters): Likewise.\n\t(declare_return_variable): Likewise.\n\t(expand_call_inline): Likewise.\n\t(tree_function_versioning): Likewise.\n\t* tree-into-ssa.c (get_default_def_for): Remove.\n\t(get_reaching_def): Use get_or_create_ssa_default_def instead.\n\t* tree-predcom.c (replace_ref_with): Adjust.\n\t* tree-sra.c (get_repl_default_def_ssa_name): Likewise.\n\t(is_unused_scalar_param): Likewise.\n\t(ptr_parm_has_direct_uses): Likewise.\n\t(sra_ipa_reset_debug_stmts): Likewise.\n\t* tree-ssa-coalesce.c (create_outofssa_var_map): Adjust.\n\t* tree-ssa-copyrename.c (copy_rename_partition_coalesce): Likewise.\n\t* tree-ssa-live.c (verify_live_on_entry): Likewise.\n\t* tree-ssa-math-opts.c (execute_cse_reciprocals): Likewise,\n\tavoid repeated default def lookups.\n\t* tree-ssa-sccvn.c (run_scc_vn): Likewise.\n\t* tree-tailcall.c (arg_needs_copy_p): Adjust.\n\t(tree_optimize_tail_calls_1): Likewise.\n\nFrom-SVN: r190073", "tree": {"sha": "7d44a4c9f671c4b247e1567327eda00cf283e581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d44a4c9f671c4b247e1567327eda00cf283e581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/322445530d0742db2345197405f83bbf505acf9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/322445530d0742db2345197405f83bbf505acf9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/322445530d0742db2345197405f83bbf505acf9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/322445530d0742db2345197405f83bbf505acf9d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcddd80e2efd57253335eb33d4e35fb47a4a0e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcddd80e2efd57253335eb33d4e35fb47a4a0e20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcddd80e2efd57253335eb33d4e35fb47a4a0e20"}], "stats": {"total": 271, "additions": 139, "deletions": 132}, "files": [{"sha": "52f4a8c2b0b31417cc352ad99c82e9915e00710b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -1,3 +1,45 @@\n+2012-08-02  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (set_default_def): Rename to ...\n+\t(set_ssa_default_def): ... this.  Take a struct function argument.\n+\t(gimple_default_def): Rename to ...\n+\t(ssa_default_def): ... this.\n+\t(get_or_create_ssa_default_def): New function.\n+\t* tree-dfa.c: Likewise.\n+\t(dump_variable): Adjust.\n+\t* ipa-prop.c (ipa_analyze_params_uses): Adjust, properly check\n+\tfor used parameters.\n+\t* ipa-split.c (consider_split): Adjust, avoid repeated default-def\n+\tlookups.\n+\t(split_function): Likewise.\n+\t* lto-streamer-in.c (input_ssa_names): Adjust.\n+\t* omp-low.c (expand_omp_taskreg): Likewise.\n+\t* tree-cfg.c (replace_ssa_name): Adjust, no need to push/pop cfun.\n+\t* tree-complex.c (init_parameter_lattice_values): Adjust.\n+\t(get_component_ssa_name): Likewise.\n+\t(update_parameter_components): Likewise.\n+\t* tree-inline.c (remap_ssa_name): Likewise.\n+\t(setup_one_parameter): Likewise.\n+\t(initialize_inlined_parameters): Likewise.\n+\t(declare_return_variable): Likewise.\n+\t(expand_call_inline): Likewise.\n+\t(tree_function_versioning): Likewise.\n+\t* tree-into-ssa.c (get_default_def_for): Remove.\n+\t(get_reaching_def): Use get_or_create_ssa_default_def instead.\n+\t* tree-predcom.c (replace_ref_with): Adjust.\n+\t* tree-sra.c (get_repl_default_def_ssa_name): Likewise.\n+\t(is_unused_scalar_param): Likewise.\n+\t(ptr_parm_has_direct_uses): Likewise.\n+\t(sra_ipa_reset_debug_stmts): Likewise.\n+\t* tree-ssa-coalesce.c (create_outofssa_var_map): Adjust.\n+\t* tree-ssa-copyrename.c (copy_rename_partition_coalesce): Likewise.\n+\t* tree-ssa-live.c (verify_live_on_entry): Likewise.\n+\t* tree-ssa-math-opts.c (execute_cse_reciprocals): Likewise,\n+\tavoid repeated default def lookups.\n+\t* tree-ssa-sccvn.c (run_scc_vn): Likewise.\n+\t* tree-tailcall.c (arg_needs_copy_p): Adjust.\n+\t(tree_optimize_tail_calls_1): Likewise.\n+\n 2012-08-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/50672"}, {"sha": "09e96d520a588f2eba70a255526e2db04536ec2c", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -1623,10 +1623,13 @@ ipa_analyze_params_uses (struct cgraph_node *node,\n   for (i = 0; i < ipa_get_param_count (info); i++)\n     {\n       tree parm = ipa_get_param (info, i);\n+      tree ddef;\n       /* For SSA regs see if parameter is used.  For non-SSA we compute\n \t the flag during modification analysis.  */\n       if (is_gimple_reg (parm)\n-\t  && gimple_default_def (DECL_STRUCT_FUNCTION (node->symbol.decl), parm))\n+\t  && (ddef = ssa_default_def (DECL_STRUCT_FUNCTION (node->symbol.decl),\n+\t\t\t\t      parm)) != NULL_TREE\n+\t  && !has_zero_uses (ddef))\n \tipa_set_param_used (info, i, true);\n     }\n "}, {"sha": "d6aad8977e9e7f4b4b68d313fb20949082c0a982", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 15, "deletions": 32, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -438,14 +438,17 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n \t      return;\n \t    }\n \t}\n-      else if (gimple_default_def (cfun, parm)\n-\t       && bitmap_bit_p (current->ssa_names_to_pass,\n-\t\t\t\tSSA_NAME_VERSION (gimple_default_def\n-\t\t\t\t\t\t  (cfun, parm))))\n+      else\n \t{\n-\t  if (!VOID_TYPE_P (TREE_TYPE (parm)))\n-\t    call_overhead += estimate_move_cost (TREE_TYPE (parm));\n-\t  num_args++;\n+\t  tree ddef = ssa_default_def (cfun, parm);\n+\t  if (ddef\n+\t      && bitmap_bit_p (current->ssa_names_to_pass,\n+\t\t\t       SSA_NAME_VERSION (ddef)))\n+\t    {\n+\t      if (!VOID_TYPE_P (TREE_TYPE (parm)))\n+\t\tcall_overhead += estimate_move_cost (TREE_TYPE (parm));\n+\t      num_args++;\n+\t    }\n \t}\n     }\n   if (!VOID_TYPE_P (TREE_TYPE (current_function_decl)))\n@@ -1056,7 +1059,7 @@ split_function (struct split_point *split_point)\n   bool split_part_return_p = false;\n   gimple last_stmt = NULL;\n   unsigned int i;\n-  tree arg;\n+  tree arg, ddef;\n \n   if (dump_file)\n     {\n@@ -1074,24 +1077,16 @@ split_function (struct split_point *split_point)\n        parm; parm = DECL_CHAIN (parm), num++)\n     if (args_to_skip\n \t&& (!is_gimple_reg (parm)\n-\t    || !gimple_default_def (cfun, parm)\n+\t    || (ddef = ssa_default_def (cfun, parm)) == NULL_TREE\n \t    || !bitmap_bit_p (split_point->ssa_names_to_pass,\n-\t\t\t      SSA_NAME_VERSION (gimple_default_def (cfun,\n-\t\t\t\t\t\t\t\t    parm)))))\n+\t\t\t      SSA_NAME_VERSION (ddef))))\n       bitmap_set_bit (args_to_skip, num);\n     else\n       {\n \t/* This parm might not have been used up to now, but is going to be\n \t   used, hence register it.  */\n \tif (is_gimple_reg (parm))\n-\t  {\n-\t    arg = gimple_default_def (cfun, parm);\n-\t    if (!arg)\n-\t      {\n-\t\targ = make_ssa_name (parm, gimple_build_nop ());\n-\t\tset_default_def (parm, arg);\n-\t      }\n-\t  }\n+\t  arg = get_or_create_ssa_default_def (cfun, parm);\n \telse\n \t  arg = parm;\n \n@@ -1356,19 +1351,7 @@ split_function (struct split_point *split_point)\n \t\t     assigned to RESULT_DECL (that is pointer to return value).\n \t\t     Look it up or create new one if it is missing.  */\n \t\t  if (DECL_BY_REFERENCE (retval))\n-\t\t    {\n-\t\t      tree retval_name;\n-\t\t      if ((retval_name = gimple_default_def (cfun, retval))\n-\t\t\t  != NULL)\n-\t\t\tretval = retval_name;\n-\t\t      else\n-\t\t\t{\n-\t\t          retval_name = make_ssa_name (retval,\n-\t\t\t\t\t\t       gimple_build_nop ());\n-\t\t\t  set_default_def (retval, retval_name);\n-\t\t\t  retval = retval_name;\n-\t\t\t}\n-\t\t    }\n+\t\t    retval = get_or_create_ssa_default_def (cfun, retval);\n \t\t  /* Otherwise produce new SSA name for return value.  */\n \t\t  else\n \t\t    retval = make_ssa_name (retval, call);"}, {"sha": "cca216cd84279ad539704ac8446138e37c658b9e", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -709,7 +709,7 @@ input_ssa_names (struct lto_input_block *ib, struct data_in *data_in,\n       ssa_name = make_ssa_name_fn (fn, name, gimple_build_nop ());\n \n       if (is_default_def)\n-\tset_default_def (SSA_NAME_VAR (ssa_name), ssa_name);\n+\tset_ssa_default_def (cfun, SSA_NAME_VAR (ssa_name), ssa_name);\n \n       i = streamer_read_uhwi (ib);\n     }"}, {"sha": "ade999b17c6bbcc341d51ed48240d3e88c4207a1", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -3499,9 +3499,9 @@ expand_omp_taskreg (struct omp_region *region)\n \t      /* If we are in ssa form, we must load the value from the default\n \t\t definition of the argument.  That should not be defined now,\n \t\t since the argument is not used uninitialized.  */\n-\t      gcc_assert (gimple_default_def (cfun, arg) == NULL);\n+\t      gcc_assert (ssa_default_def (cfun, arg) == NULL);\n \t      narg = make_ssa_name (arg, gimple_build_nop ());\n-\t      set_default_def (arg, narg);\n+\t      set_ssa_default_def (cfun, arg, narg);\n \t      /* ?? Is setting the subcode really necessary ??  */\n \t      gimple_omp_set_subcode (parcopy_stmt, TREE_CODE (narg));\n \t      gimple_assign_set_rhs1 (parcopy_stmt, narg);"}, {"sha": "b4b76923f6195f35806e29cbd476a796ed5dcdde", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -5948,11 +5948,10 @@ replace_ssa_name (tree name, struct pointer_map_t *vars_map,\n     {\n       replace_by_duplicate_decl (&decl, vars_map, to_context);\n \n-      push_cfun (DECL_STRUCT_FUNCTION (to_context));\n-      new_name = make_ssa_name (decl, SSA_NAME_DEF_STMT (name));\n+      new_name = make_ssa_name_fn (DECL_STRUCT_FUNCTION (to_context),\n+\t\t\t\t   decl, SSA_NAME_DEF_STMT (name));\n       if (SSA_NAME_IS_DEFAULT_DEF (name))\n-\tset_default_def (decl, new_name);\n-      pop_cfun ();\n+\tset_ssa_default_def (DECL_STRUCT_FUNCTION (to_context), decl, new_name);\n \n       loc = pointer_map_insert (vars_map, name);\n       *loc = new_name;"}, {"sha": "cd294338a2389f281665699550925d4f1597e33b", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -176,7 +176,7 @@ init_parameter_lattice_values (void)\n \n   for (parm = DECL_ARGUMENTS (cfun->decl); parm ; parm = DECL_CHAIN (parm))\n     if (is_complex_reg (parm)\n-\t&& (ssa_name = gimple_default_def (cfun, parm)) != NULL_TREE)\n+\t&& (ssa_name = ssa_default_def (cfun, parm)) != NULL_TREE)\n       VEC_replace (complex_lattice_t, complex_lattice_values,\n \t\t   SSA_NAME_VERSION (ssa_name), VARYING);\n }\n@@ -496,10 +496,10 @@ get_component_ssa_name (tree ssa_name, bool imag_p)\n       SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ret)\n \t= SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ssa_name);\n       if (TREE_CODE (SSA_NAME_VAR (ssa_name)) == VAR_DECL\n-\t  && gimple_nop_p (SSA_NAME_DEF_STMT (ssa_name)))\n+\t  && SSA_NAME_IS_DEFAULT_DEF (ssa_name))\n \t{\n \t  SSA_NAME_DEF_STMT (ret) = SSA_NAME_DEF_STMT (ssa_name);\n-\t  set_default_def (SSA_NAME_VAR (ret), ret);\n+\t  set_ssa_default_def (cfun, SSA_NAME_VAR (ret), ret);\n \t}\n \n       VEC_replace (tree, complex_ssa_name_components, ssa_name_index, ret);\n@@ -690,7 +690,7 @@ update_parameter_components (void)\n \tcontinue;\n \n       type = TREE_TYPE (type);\n-      ssa_name = gimple_default_def (cfun, parm);\n+      ssa_name = ssa_default_def (cfun, parm);\n       if (!ssa_name)\n \tcontinue;\n "}, {"sha": "0db5f19ba8359c90139348e44d7dcf8d9bca3657", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -164,10 +164,10 @@ dump_variable (FILE *file, tree var)\n   if (TREE_THIS_VOLATILE (var))\n     fprintf (file, \", is volatile\");\n \n-  if (cfun && gimple_default_def (cfun, var))\n+  if (cfun && ssa_default_def (cfun, var))\n     {\n       fprintf (file, \", default def: \");\n-      print_generic_expr (file, gimple_default_def (cfun, var), dump_flags);\n+      print_generic_expr (file, ssa_default_def (cfun, var), dump_flags);\n     }\n \n   if (DECL_INITIAL (var))\n@@ -312,49 +312,68 @@ collect_dfa_stats (struct dfa_stats_d *dfa_stats_p ATTRIBUTE_UNUSED)\n    variable.  */\n \n tree\n-gimple_default_def (struct function *fn, tree var)\n+ssa_default_def (struct function *fn, tree var)\n {\n   struct tree_decl_minimal ind;\n   struct tree_ssa_name in;\n-  gcc_assert (SSA_VAR_P (var));\n+  gcc_assert (TREE_CODE (var) == VAR_DECL\n+\t      || TREE_CODE (var) == PARM_DECL\n+\t      || TREE_CODE (var) == RESULT_DECL);\n   in.var = (tree)&ind;\n   ind.uid = DECL_UID (var);\n   return (tree) htab_find_with_hash (DEFAULT_DEFS (fn), &in, DECL_UID (var));\n }\n \n-/* Insert the pair VAR's UID, DEF into the default_defs hashtable.  */\n+/* Insert the pair VAR's UID, DEF into the default_defs hashtable\n+   of function FN.  */\n \n void\n-set_default_def (tree var, tree def)\n+set_ssa_default_def (struct function *fn, tree var, tree def)\n {\n   struct tree_decl_minimal ind;\n   struct tree_ssa_name in;\n   void **loc;\n \n-  gcc_assert (SSA_VAR_P (var));\n+  gcc_assert (TREE_CODE (var) == VAR_DECL\n+\t      || TREE_CODE (var) == PARM_DECL\n+\t      || TREE_CODE (var) == RESULT_DECL);\n   in.var = (tree)&ind;\n   ind.uid = DECL_UID (var);\n   if (!def)\n     {\n-      loc = htab_find_slot_with_hash (DEFAULT_DEFS (cfun), &in,\n-            DECL_UID (var), INSERT);\n-      gcc_assert (*loc);\n-      htab_remove_elt (DEFAULT_DEFS (cfun), *loc);\n+      loc = htab_find_slot_with_hash (DEFAULT_DEFS (fn), &in,\n+\t\t\t\t      DECL_UID (var), NO_INSERT);\n+      if (*loc)\n+\thtab_clear_slot (DEFAULT_DEFS (fn), loc);\n       return;\n     }\n   gcc_assert (TREE_CODE (def) == SSA_NAME && SSA_NAME_VAR (def) == var);\n-  loc = htab_find_slot_with_hash (DEFAULT_DEFS (cfun), &in,\n+  loc = htab_find_slot_with_hash (DEFAULT_DEFS (fn), &in,\n                                   DECL_UID (var), INSERT);\n \n   /* Default definition might be changed by tail call optimization.  */\n   if (*loc)\n     SSA_NAME_IS_DEFAULT_DEF (*(tree *) loc) = false;\n-  *(tree *) loc = def;\n \n    /* Mark DEF as the default definition for VAR.  */\n+  *(tree *) loc = def;\n    SSA_NAME_IS_DEFAULT_DEF (def) = true;\n }\n \n+/* Retrieve or create a default definition for VAR.  */\n+\n+tree\n+get_or_create_ssa_default_def (struct function *fn, tree var)\n+{\n+  tree ddef = ssa_default_def (fn, var);\n+  if (ddef == NULL_TREE)\n+    {\n+      ddef = make_ssa_name (var, gimple_build_nop ());\n+      set_ssa_default_def (cfun, var, ddef);\n+    }\n+  return ddef;\n+}\n+\n \n /* If EXP is a handled component reference for a structure, return the\n    base variable.  The access range is delimited by bit positions *POFFSET and"}, {"sha": "ac867d1e67a779931515dd16f6c70a698853edf1", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -445,8 +445,9 @@ extern void debug_dfa_stats (void);\n extern void dump_variable (FILE *, tree);\n extern void debug_variable (tree);\n extern tree make_rename_temp (tree, const char *);\n-extern void set_default_def (tree, tree);\n-extern tree gimple_default_def (struct function *, tree);\n+extern void set_ssa_default_def (struct function *, tree, tree);\n+extern tree ssa_default_def (struct function *, tree);\n+extern tree get_or_create_ssa_default_def (struct function *, tree);\n extern bool stmt_references_abnormal_ssa_name (gimple);\n extern tree get_addr_base_and_unit_offset (tree, HOST_WIDE_INT *);\n extern void dump_enumerated_decls (FILE *, int);"}, {"sha": "ba716f5cbc0d64baac28025cd33324042abb1203", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -247,7 +247,7 @@ remap_ssa_name (tree name, copy_body_data *id)\n \t  struct ptr_info_def *new_pi = get_ptr_info (new_tree);\n \t  new_pi->pt = pi->pt;\n \t}\n-      if (gimple_nop_p (SSA_NAME_DEF_STMT (name)))\n+      if (SSA_NAME_IS_DEFAULT_DEF (name))\n \t{\n \t  /* By inlining function having uninitialized variable, we might\n \t     extend the lifetime (variable might get reused).  This cause\n@@ -259,7 +259,6 @@ remap_ssa_name (tree name, copy_body_data *id)\n \t     this for all BBs that are not inside strongly connected\n \t     regions of the CFG, but this is expensive to test.  */\n \t  if (id->entry_bb\n-\t      && is_gimple_reg (SSA_NAME_VAR (name))\n \t      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name)\n \t      && TREE_CODE (SSA_NAME_VAR (name)) != PARM_DECL\n \t      && (id->entry_bb != EDGE_SUCC (ENTRY_BLOCK_PTR, 0)->dest\n@@ -276,9 +275,7 @@ remap_ssa_name (tree name, copy_body_data *id)\n \t  else\n \t    {\n \t      SSA_NAME_DEF_STMT (new_tree) = gimple_build_nop ();\n-\t      if (gimple_default_def (id->src_cfun, SSA_NAME_VAR (name))\n-\t\t  == name)\n-\t        set_default_def (SSA_NAME_VAR (new_tree), new_tree);\n+\t      set_ssa_default_def (cfun, SSA_NAME_VAR (new_tree), new_tree);\n \t    }\n \t}\n     }\n@@ -2502,7 +2499,7 @@ setup_one_parameter (copy_body_data *id, tree p, tree value, tree fn,\n   tree var;\n   tree rhs = value;\n   tree def = (gimple_in_ssa_p (cfun)\n-\t      ? gimple_default_def (id->src_cfun, p) : NULL);\n+\t      ? ssa_default_def (id->src_cfun, p) : NULL);\n \n   if (value\n       && value != error_mark_node\n@@ -2635,7 +2632,7 @@ setup_one_parameter (copy_body_data *id, tree p, tree value, tree fn,\n \t      def = remap_ssa_name (def, id);\n \t      init_stmt = gimple_build_assign (def, rhs);\n \t      SSA_NAME_IS_DEFAULT_DEF (def) = 0;\n-\t      set_default_def (var, NULL);\n+\t      set_ssa_default_def (cfun, var, NULL);\n \t    }\n \t  else if (!optimize)\n \t    {\n@@ -2687,7 +2684,7 @@ initialize_inlined_parameters (copy_body_data *id, gimple stmt,\n \t  && TREE_CODE (*varp) == VAR_DECL)\n \t{\n \t  tree def = (gimple_in_ssa_p (cfun) && is_gimple_reg (p)\n-\t\t      ? gimple_default_def (id->src_cfun, p) : NULL);\n+\t\t      ? ssa_default_def (id->src_cfun, p) : NULL);\n \t  tree var = *varp;\n \t  TREE_TYPE (var) = remap_type (TREE_TYPE (var), id);\n \t  /* Also remap the default definition if it was remapped\n@@ -2902,8 +2899,7 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n \t  && is_gimple_reg (result))\n \t{\n \t  temp = make_ssa_name (temp, NULL);\n-\t  insert_decl_map (id, gimple_default_def (id->src_cfun, result),\n-\t\t\t   temp);\n+\t  insert_decl_map (id, ssa_default_def (id->src_cfun, result), temp);\n \t}\n       insert_init_stmt (id, entry_bb, gimple_build_assign (temp, var));\n     }\n@@ -3983,7 +3979,7 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \t{\n \t  tree name = gimple_call_lhs (stmt);\n \t  tree var = SSA_NAME_VAR (name);\n-\t  tree def = gimple_default_def (cfun, var);\n+\t  tree def = ssa_default_def (cfun, var);\n \n \t  if (def)\n \t    {\n@@ -3996,7 +3992,7 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \t    {\n \t      /* Otherwise make this variable undefined.  */\n \t      gsi_remove (&stmt_gsi, true);\n-\t      set_default_def (var, name);\n+\t      set_ssa_default_def (cfun, var, name);\n \t      SSA_NAME_DEF_STMT (name) = gimple_build_nop ();\n \t    }\n \t}\n@@ -5160,13 +5156,12 @@ tree_function_versioning (tree old_decl, tree new_decl,\n       lang_hooks.dup_lang_specific_decl (DECL_RESULT (new_decl));\n       if (gimple_in_ssa_p (id.src_cfun)\n \t  && DECL_BY_REFERENCE (DECL_RESULT (old_decl))\n-\t  && (old_name\n-\t      = gimple_default_def (id.src_cfun, DECL_RESULT (old_decl))))\n+\t  && (old_name = ssa_default_def (id.src_cfun, DECL_RESULT (old_decl))))\n \t{\n \t  tree new_name = make_ssa_name (DECL_RESULT (new_decl), NULL);\n \t  insert_decl_map (&id, old_name, new_name);\n \t  SSA_NAME_DEF_STMT (new_name) = gimple_build_nop ();\n-\t  set_default_def (DECL_RESULT (new_decl), new_name);\n+\t  set_ssa_default_def (cfun, DECL_RESULT (new_decl), new_name);\n \t}\n     }\n "}, {"sha": "da57cfd8b88550dade7f68f4e80c33adef23bfa3", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -987,23 +987,6 @@ find_def_blocks_for (tree var)\n }\n \n \n-/* Retrieve or create a default definition for symbol SYM.  */\n-\n-static inline tree\n-get_default_def_for (tree sym)\n-{\n-  tree ddef = gimple_default_def (cfun, sym);\n-\n-  if (ddef == NULL_TREE)\n-    {\n-      ddef = make_ssa_name (sym, gimple_build_nop ());\n-      set_default_def (sym, ddef);\n-    }\n-\n-  return ddef;\n-}\n-\n-\n /* Marks phi node PHI in basic block BB for rewrite.  */\n \n static void\n@@ -1253,7 +1236,7 @@ get_reaching_def (tree var)\n   if (currdef == NULL_TREE)\n     {\n       tree sym = DECL_P (var) ? var : SSA_NAME_VAR (var);\n-      currdef = get_default_def_for (sym);\n+      currdef = get_or_create_ssa_default_def (cfun, sym);\n       set_current_def (var, currdef);\n     }\n "}, {"sha": "1d7c2a57312b3234ff29fcc950a54aed100df7c6", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -1308,15 +1308,7 @@ replace_ref_with (gimple stmt, tree new_tree, bool set, bool in_lhs)\n \t  val = gimple_assign_rhs1 (stmt);\n \t  gcc_assert (gimple_assign_single_p (stmt));\n \t  if (TREE_CLOBBER_P (val))\n-\t    {\n-\t      val = gimple_default_def (cfun, SSA_NAME_VAR (new_tree));\n-\t      if (val == NULL_TREE)\n-\t\t{\n-\t\t  val = make_ssa_name (SSA_NAME_VAR (new_tree),\n-\t\t\t\t       gimple_build_nop ());\n-\t\t  set_default_def (SSA_NAME_VAR (new_tree), val);\n-\t\t}\n-\t    }\n+\t    val = get_or_create_ssa_default_def (cfun, SSA_NAME_VAR (new_tree));\n \t  else\n \t    gcc_assert (gimple_assign_copy_p (stmt));\n \t}"}, {"sha": "820acd08efba0c1020ca8cb3fa3a50d7f901ab39", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -2842,18 +2842,7 @@ sra_modify_constructor_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n static tree\n get_repl_default_def_ssa_name (struct access *racc)\n {\n-  tree repl, decl;\n-\n-  decl = get_access_replacement (racc);\n-\n-  repl = gimple_default_def (cfun, decl);\n-  if (!repl)\n-    {\n-      repl = make_ssa_name (decl, gimple_build_nop ());\n-      set_default_def (decl, repl);\n-    }\n-\n-  return repl;\n+  return get_or_create_ssa_default_def (cfun, get_access_replacement (racc));\n }\n \n /* Return true if REF has a COMPONENT_REF with a bit-field field declaration\n@@ -3351,7 +3340,7 @@ is_unused_scalar_param (tree parm)\n {\n   tree name;\n   return (is_gimple_reg (parm)\n-\t  && (!(name = gimple_default_def (cfun, parm))\n+\t  && (!(name = ssa_default_def (cfun, parm))\n \t      || has_zero_uses (name)));\n }\n \n@@ -3365,7 +3354,7 @@ ptr_parm_has_direct_uses (tree parm)\n {\n   imm_use_iterator ui;\n   gimple stmt;\n-  tree name = gimple_default_def (cfun, parm);\n+  tree name = ssa_default_def (cfun, parm);\n   bool ret = false;\n \n   FOR_EACH_IMM_USE_STMT (stmt, ui, name)\n@@ -4531,7 +4520,7 @@ sra_ipa_reset_debug_stmts (ipa_parm_adjustment_vec adjustments)\n       adj = VEC_index (ipa_parm_adjustment_t, adjustments, i);\n       if (adj->copy_param || !is_gimple_reg (adj->base))\n \tcontinue;\n-      name = gimple_default_def (cfun, adj->base);\n+      name = ssa_default_def (cfun, adj->base);\n       vexpr = NULL;\n       if (name)\n \tFOR_EACH_IMM_USE_STMT (stmt, ui, name)"}, {"sha": "5001ced3abbc98a804e72d9059fbcdd9af2b327d", "filename": "gcc/tree-ssa-coalesce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-ssa-coalesce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-ssa-coalesce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-coalesce.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -1148,7 +1148,7 @@ create_outofssa_var_map (coalesce_list_p cl, bitmap used_in_copy)\n \t  /* Mark any default_def variables as being in the coalesce list\n \t     since they will have to be coalesced with the base variable.  If\n \t     not marked as present, they won't be in the coalesce view. */\n-\t  if (gimple_default_def (cfun, SSA_NAME_VAR (var)) == var\n+\t  if (SSA_NAME_IS_DEFAULT_DEF (var)\n \t      && !has_zero_uses (var))\n \t    bitmap_set_bit (used_in_copy, SSA_NAME_VERSION (var));\n \t}"}, {"sha": "0d676ccabb34839cc833b52aedb23ac994ce3507", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -211,9 +211,9 @@ copy_rename_partition_coalesce (var_map map, tree var1, tree var2, FILE *debug)\n \n   /* If both values have default defs, we can't coalesce.  If only one has a\n      tag, make sure that variable is the new root partition.  */\n-  if (gimple_default_def (cfun, root1))\n+  if (ssa_default_def (cfun, root1))\n     {\n-      if (gimple_default_def (cfun, root2))\n+      if (ssa_default_def (cfun, root2))\n \t{\n \t  if (debug)\n \t    fprintf (debug, \" : 2 default defs. No coalesce.\\n\");\n@@ -225,7 +225,7 @@ copy_rename_partition_coalesce (var_map map, tree var1, tree var2, FILE *debug)\n \t  ign1 = false;\n \t}\n     }\n-  else if (gimple_default_def (cfun, root2))\n+  else if (ssa_default_def (cfun, root2))\n     {\n       ign1 = true;\n       ign2 = false;"}, {"sha": "2feef96c67d5d99ec044d83f37c180fb5414a678", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -1269,7 +1269,7 @@ verify_live_on_entry (tree_live_info_p live)\n \t  var = partition_to_var (map, i);\n \t  stmt = SSA_NAME_DEF_STMT (var);\n \t  tmp = gimple_bb (stmt);\n-\t  d = gimple_default_def (cfun, SSA_NAME_VAR (var));\n+\t  d = ssa_default_def (cfun, SSA_NAME_VAR (var));\n \n \t  loe = live_on_entry (live, e->dest);\n \t  if (loe && bitmap_bit_p (loe, i))"}, {"sha": "c9bc0471eda94f913d80da24c1c2a330db04ebfa", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -513,10 +513,13 @@ execute_cse_reciprocals (void)\n #endif\n \n   for (arg = DECL_ARGUMENTS (cfun->decl); arg; arg = DECL_CHAIN (arg))\n-    if (gimple_default_def (cfun, arg)\n-\t&& FLOAT_TYPE_P (TREE_TYPE (arg))\n+    if (FLOAT_TYPE_P (TREE_TYPE (arg))\n \t&& is_gimple_reg (arg))\n-      execute_cse_reciprocals_1 (NULL, gimple_default_def (cfun, arg));\n+      {\n+\ttree name = ssa_default_def (cfun, arg);\n+\tif (name)\n+\t  execute_cse_reciprocals_1 (NULL, name);\n+      }\n \n   FOR_EACH_BB (bb)\n     {"}, {"sha": "bae3cc1addcd101aa571ab2b8c60f677c84affbc", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -3963,11 +3963,9 @@ run_scc_vn (vn_lookup_kind default_vn_walk_kind_)\n        param;\n        param = DECL_CHAIN (param))\n     {\n-      if (gimple_default_def (cfun, param) != NULL)\n-\t{\n-\t  tree def = gimple_default_def (cfun, param);\n-\t  VN_INFO (def)->valnum = def;\n-\t}\n+      tree def = ssa_default_def (cfun, param);\n+      if (def)\n+\tVN_INFO (def)->valnum = def;\n     }\n \n   for (i = 1; i < num_ssa_names; ++i)"}, {"sha": "548d1b6aa2ebe04328e9b33dd45c637f7819c9d3", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/322445530d0742db2345197405f83bbf505acf9d/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=322445530d0742db2345197405f83bbf505acf9d", "patch": "@@ -767,7 +767,7 @@ arg_needs_copy_p (tree param)\n     return false;\n \n   /* Parameters that are only defined but never used need not be copied.  */\n-  def = gimple_default_def (cfun, param);\n+  def = ssa_default_def (cfun, param);\n   if (!def)\n     return false;\n \n@@ -969,11 +969,11 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t       param = DECL_CHAIN (param))\n \t    if (arg_needs_copy_p (param))\n \t      {\n-\t\ttree name = gimple_default_def (cfun, param);\n+\t\ttree name = ssa_default_def (cfun, param);\n \t\ttree new_name = make_ssa_name (param, SSA_NAME_DEF_STMT (name));\n \t\tgimple phi;\n \n-\t\tset_default_def (param, new_name);\n+\t\tset_ssa_default_def (cfun, param, new_name);\n \t\tphi = create_phi_node (name, first);\n \t\tSSA_NAME_DEF_STMT (name) = phi;\n \t\tadd_phi_arg (phi, new_name, single_pred_edge (first),"}]}