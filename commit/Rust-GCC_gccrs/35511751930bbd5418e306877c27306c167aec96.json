{"sha": "35511751930bbd5418e306877c27306c167aec96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU1MTE3NTE5MzBiYmQ1NDE4ZTMwNjg3N2MyNzMwNmMxNjdhZWM5Ng==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-09-14T11:15:09Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-09-14T11:15:09Z"}, "message": "mips.c (mips_expand_epilogue): Generate a simple_return only if the return address is in r31.\n\n\t* config/mips/mips.c (mips_expand_epilogue): Generate a\n\tsimple_return only if the return address is in r31.\n\nFrom-SVN: r178847", "tree": {"sha": "52faa3c37c7199fe3e605fc04951b77c4e697c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52faa3c37c7199fe3e605fc04951b77c4e697c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35511751930bbd5418e306877c27306c167aec96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35511751930bbd5418e306877c27306c167aec96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35511751930bbd5418e306877c27306c167aec96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35511751930bbd5418e306877c27306c167aec96/comments", "author": null, "committer": null, "parents": [{"sha": "d4eb366841e828ee8ee69b538983531a8b786061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4eb366841e828ee8ee69b538983531a8b786061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4eb366841e828ee8ee69b538983531a8b786061"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "7de4c651ecb571dbde30768f413185fe4e009c02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35511751930bbd5418e306877c27306c167aec96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35511751930bbd5418e306877c27306c167aec96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35511751930bbd5418e306877c27306c167aec96", "patch": "@@ -1,3 +1,8 @@\n+2011-09-14  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* config/mips/mips.c (mips_expand_epilogue): Generate a\n+\tsimple_return only if the return address is in r31.\n+\n 2011-09-13  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* cfgcleanup.c (try_head_merge_bb): If get_condition returns"}, {"sha": "22cb60b6b112cb326300b6d40e6719e9803c759f", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35511751930bbd5418e306877c27306c167aec96/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35511751930bbd5418e306877c27306c167aec96/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=35511751930bbd5418e306877c27306c167aec96", "patch": "@@ -10521,19 +10521,29 @@ mips_expand_epilogue (bool sibcall_p)\n \t}\n       else\n \t{\n-\t  unsigned int regno;\n+\t  rtx pat;\n \n \t  /* When generating MIPS16 code, the normal\n \t     mips_for_each_saved_gpr_and_fpr path will restore the return\n \t     address into $7 rather than $31.  */\n \t  if (TARGET_MIPS16\n \t      && !GENERATE_MIPS16E_SAVE_RESTORE\n \t      && BITSET_P (frame->mask, RETURN_ADDR_REGNUM))\n-\t    regno = GP_REG_FIRST + 7;\n+\t    {\n+\t      /* simple_returns cannot rely on values that are only available\n+\t\t on paths through the epilogue (because return paths that do\n+\t\t not pass through the epilogue may nevertheless reuse a\n+\t\t simple_return that occurs at the end of the epilogue).\n+\t\t Use a normal return here instead.  */\n+\t      rtx reg = gen_rtx_REG (Pmode, GP_REG_FIRST + 7);\n+\t      pat = gen_return_internal (reg);\n+\t    }\n \t  else\n-\t    regno = RETURN_ADDR_REGNUM;\n-\t  emit_jump_insn (gen_simple_return_internal (gen_rtx_REG (Pmode,\n-\t\t\t\t\t\t\t\t   regno)));\n+\t    {\n+\t      rtx reg = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n+\t      pat = gen_simple_return_internal (reg);\n+\t    }\n+\t  emit_jump_insn (pat);\n \t}\n     }\n "}]}