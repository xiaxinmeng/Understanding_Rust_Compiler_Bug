{"sha": "a035d133809430d2b2019d5de6c42d358eb8c7aa", "node_id": "C_kwDOANBUbNoAKGEwMzVkMTMzODA5NDMwZDJiMjAxOWQ1ZGU2YzQyZDM1OGViOGM3YWE", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-03T06:56:05Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-10T11:27:01Z"}, "message": "RISC-V: Add binary vx C/C++ support\n\ngcc/ChangeLog:\n\n\t* config/riscv/constraints.md (Wdm): Adjust constraint.\n\t(Wbr): New constraint.\n\t* config/riscv/predicates.md (reg_or_int_operand): New predicate.\n\t* config/riscv/riscv-protos.h (emit_pred_op): Remove function.\n\t(emit_vlmax_op): New function.\n\t(emit_nonvlmax_op): Ditto.\n\t(simm32_p): Ditto.\n\t(neg_simm5_p): Ditto.\n\t(has_vi_variant_p): Ditto.\n\t* config/riscv/riscv-v.cc (emit_pred_op): Adjust function.\n\t(emit_vlmax_op): New function.\n\t(emit_nonvlmax_op): Ditto.\n\t(expand_const_vector): Adjust function.\n\t(legitimize_move): Ditto.\n\t(simm32_p): New function.\n\t(simm5_p): Ditto.\n\t(neg_simm5_p): Ditto.\n\t(has_vi_variant_p): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.cc (class vrsub): New class.\n\t(BASE): Ditto.\n\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n\t* config/riscv/riscv-vector-builtins-functions.def (vmin): Remove\n\tunsigned cases.\n\t(vmax): Ditto.\n\t(vminu): Remove signed cases.\n\t(vmaxu): Ditto.\n\t(vdiv): Remove unsigned cases.\n\t(vrem): Ditto.\n\t(vdivu): Remove signed cases.\n\t(vremu): Ditto.\n\t(vadd): Adjust.\n\t(vsub): Ditto.\n\t(vrsub): New class.\n\t(vand): Adjust.\n\t(vor): Ditto.\n\t(vxor): Ditto.\n\t(vmul): Ditto.\n\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_U_OPS): New macro.\n\t* config/riscv/riscv.h: change VL/VTYPE as fixed reg.\n\t* config/riscv/vector-iterators.md: New iterators.\n\t* config/riscv/vector.md (@pred_broadcast<mode>): Adjust pattern for vx\n\tsupport.\n\t(@pred_<optab><mode>_scalar): New pattern.\n\t(@pred_sub<mode>_reverse_scalar): Ditto.\n\t(*pred_<optab><mode>_scalar): Ditto.\n\t(*pred_<optab><mode>_extended_scalar): Ditto.\n\t(*pred_sub<mode>_reverse_scalar): Ditto.\n\t(*pred_sub<mode>_extended_reverse_scalar): Ditto.", "tree": {"sha": "0cd97dfa4c166793f4a5237fcc6e3880f9944edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cd97dfa4c166793f4a5237fcc6e3880f9944edd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a035d133809430d2b2019d5de6c42d358eb8c7aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a035d133809430d2b2019d5de6c42d358eb8c7aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a035d133809430d2b2019d5de6c42d358eb8c7aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a035d133809430d2b2019d5de6c42d358eb8c7aa/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc87e1391c55c666c7ff39d4f0dea87666f25468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc87e1391c55c666c7ff39d4f0dea87666f25468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc87e1391c55c666c7ff39d4f0dea87666f25468"}], "stats": {"total": 635, "additions": 591, "deletions": 44}, "files": [{"sha": "b646ad4853cc53058ca7ec348baa48d14b2c385b", "filename": "gcc/config/riscv/constraints.md", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fconstraints.md?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -162,7 +162,20 @@\n  (and (match_code \"const_vector\")\n       (match_test \"op == CONSTM1_RTX (GET_MODE (op))\")))\n \n-(define_constraint \"Wdm\"\n+(define_memory_constraint \"Wdm\"\n   \"Vector duplicate memory operand\"\n-  (and (match_operand 0 \"memory_operand\")\n+  (and (match_code \"mem\")\n        (match_code \"reg\" \"0\")))\n+\n+;; (vec_duplicate:V (const_int 2863311530 [0xaaaaaaaa])) of pred_broadcast\n+;; is CSEed into (const_vector:V (const_int 2863311530 [0xaaaaaaaa])) here\n+;; which is not the pattern matching we want since we can't generate\n+;; instruction directly for it when SEW = 64 and !TARGET_64BIT. We should\n+;; not allow RA (register allocation) allocate a DImode register in\n+;; pred_broadcast pattern.\n+(define_constraint \"Wbr\"\n+  \"@internal\n+   Broadcast register operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"REGNO (op) <= GP_REG_LAST\n+\t&& direct_broadcast_operand (op, GET_MODE (op))\")))"}, {"sha": "8d2ccb0f7a299fcb04d4d2910b9a9ee7313881b7", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -272,9 +272,16 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"memory_operand\")))\n \n+(define_predicate \"reg_or_int_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"const_int_operand\")))\n+\n (define_predicate \"vector_move_operand\"\n   (ior (match_operand 0 \"nonimmediate_operand\")\n-       (match_code \"const_vector\")))\n+       (and (match_code \"const_vector\")\n+            (match_test \"reload_completed\n+\t\t|| satisfies_constraint_vi (op)\n+\t\t|| satisfies_constraint_Wc0 (op)\"))))\n \n (define_predicate \"vector_mask_operand\"\n   (ior (match_operand 0 \"register_operand\")\n@@ -315,8 +322,11 @@\n \n ;; The scalar operand can be directly broadcast by RVV instructions.\n (define_predicate \"direct_broadcast_operand\"\n-  (ior (match_operand 0 \"register_operand\")\n-       (match_test \"satisfies_constraint_Wdm (op)\")))\n+  (and (match_test \"!(reload_completed && !FLOAT_MODE_P (GET_MODE (op))\n+\t\t&& register_operand (op, GET_MODE (op))\n+\t\t&& maybe_gt (GET_MODE_BITSIZE (GET_MODE (op)), GET_MODE_BITSIZE (Pmode)))\")\n+    (ior (match_operand 0 \"register_operand\")\n+         (match_test \"satisfies_constraint_Wdm (op)\"))))\n \n ;; A CONST_INT operand that has exactly two bits cleared.\n (define_predicate \"const_nottwobits_operand\""}, {"sha": "e090c61a3e36cd2263af0100ce8163d975b2978b", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -149,7 +149,8 @@ extern tree builtin_decl (unsigned, bool);\n extern rtx expand_builtin (unsigned int, tree, rtx);\n extern bool const_vec_all_same_in_range_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n extern bool legitimize_move (rtx, rtx, machine_mode);\n-extern void emit_pred_op (unsigned, rtx, rtx, machine_mode);\n+extern void emit_vlmax_op (unsigned, rtx, rtx, machine_mode);\n+extern void emit_nonvlmax_op (unsigned, rtx, rtx, rtx, machine_mode);\n extern enum vlmul_type get_vlmul (machine_mode);\n extern unsigned int get_ratio (machine_mode);\n extern int get_ta (rtx);\n@@ -173,6 +174,11 @@ enum tail_policy get_prefer_tail_policy ();\n enum mask_policy get_prefer_mask_policy ();\n rtx get_avl_type_rtx (enum avl_type);\n opt_machine_mode get_vector_mode (scalar_mode, poly_uint64);\n+extern bool simm32_p (rtx);\n+extern bool neg_simm5_p (rtx);\n+#ifdef RTX_CODE\n+extern bool has_vi_variant_p (rtx_code, rtx);\n+#endif\n }\n \n /* We classify builtin types into two classes:"}, {"sha": "3bc1ee36e5ae7d458a7c67194bd069fac44b1ca5", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 76, "deletions": 14, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -78,9 +78,9 @@ template <int MAX_OPERANDS> class insn_expander\n     add_input_operand (tail_policy_rtx, Pmode);\n     add_input_operand (mask_policy_rtx, Pmode);\n   }\n-  void add_avl_type_operand ()\n+  void add_avl_type_operand (avl_type type)\n   {\n-    add_input_operand (get_avl_type_rtx (avl_type::VLMAX), Pmode);\n+    add_input_operand (gen_int_mode (type, Pmode), Pmode);\n   }\n \n   void expand (enum insn_code icode, bool temporary_volatile_p = false)\n@@ -165,29 +165,56 @@ calculate_ratio (unsigned int sew, enum vlmul_type vlmul)\n }\n \n /* Emit an RVV unmask && vl mov from SRC to DEST.  */\n-void\n-emit_pred_op (unsigned icode, rtx dest, rtx src, machine_mode mask_mode)\n+static void\n+emit_pred_op (unsigned icode, rtx mask, rtx dest, rtx src, rtx len,\n+\t      machine_mode mask_mode)\n {\n   insn_expander<8> e;\n   machine_mode mode = GET_MODE (dest);\n \n   e.add_output_operand (dest, mode);\n-  e.add_all_one_mask_operand (mask_mode);\n+\n+  if (mask)\n+    e.add_input_operand (mask, GET_MODE (mask));\n+  else\n+    e.add_all_one_mask_operand (mask_mode);\n+\n   e.add_vundef_operand (mode);\n \n   e.add_input_operand (src, GET_MODE (src));\n \n-  rtx vlmax = emit_vlmax_vsetvl (mode);\n-  e.add_input_operand (vlmax, Pmode);\n+  if (len)\n+    e.add_input_operand (len, Pmode);\n+  else\n+    {\n+      rtx vlmax = emit_vlmax_vsetvl (mode);\n+      e.add_input_operand (vlmax, Pmode);\n+    }\n \n   if (GET_MODE_CLASS (mode) != MODE_VECTOR_BOOL)\n     e.add_policy_operand (get_prefer_tail_policy (), get_prefer_mask_policy ());\n \n-  e.add_avl_type_operand ();\n+  if (len)\n+    e.add_avl_type_operand (avl_type::NONVLMAX);\n+  else\n+    e.add_avl_type_operand (avl_type::VLMAX);\n \n   e.expand ((enum insn_code) icode, MEM_P (dest) || MEM_P (src));\n }\n \n+void\n+emit_vlmax_op (unsigned icode, rtx dest, rtx src, machine_mode mask_mode)\n+{\n+  emit_pred_op (icode, NULL_RTX, dest, src, NULL_RTX, mask_mode);\n+}\n+\n+void\n+emit_nonvlmax_op (unsigned icode, rtx dest, rtx src, rtx len,\n+\t\t  machine_mode mask_mode)\n+{\n+  emit_pred_op (icode, NULL_RTX, dest, src, len, mask_mode);\n+}\n+\n static void\n expand_const_vector (rtx target, rtx src, machine_mode mask_mode)\n {\n@@ -199,7 +226,7 @@ expand_const_vector (rtx target, rtx src, machine_mode mask_mode)\n       gcc_assert (\n \tconst_vec_duplicate_p (src, &elt)\n \t&& (rtx_equal_p (elt, const0_rtx) || rtx_equal_p (elt, const1_rtx)));\n-      emit_pred_op (code_for_pred_mov (mode), target, src, mode);\n+      emit_vlmax_op (code_for_pred_mov (mode), target, src, mask_mode);\n       return;\n     }\n \n@@ -210,10 +237,10 @@ expand_const_vector (rtx target, rtx src, machine_mode mask_mode)\n       /* Element in range -16 ~ 15 integer or 0.0 floating-point,\n \t we use vmv.v.i instruction.  */\n       if (satisfies_constraint_vi (src) || satisfies_constraint_Wc0 (src))\n-\temit_pred_op (code_for_pred_mov (mode), tmp, src, mask_mode);\n+\temit_vlmax_op (code_for_pred_mov (mode), tmp, src, mask_mode);\n       else\n-\temit_pred_op (code_for_pred_broadcast (mode), tmp,\n-\t\t      force_reg (elt_mode, elt), mask_mode);\n+\temit_vlmax_op (code_for_pred_broadcast (mode), tmp,\n+\t\t       force_reg (elt_mode, elt), mask_mode);\n \n       if (tmp != target)\n \temit_move_insn (target, tmp);\n@@ -252,12 +279,12 @@ legitimize_move (rtx dest, rtx src, machine_mode mask_mode)\n     {\n       rtx tmp = gen_reg_rtx (mode);\n       if (MEM_P (src))\n-\temit_pred_op (code_for_pred_mov (mode), tmp, src, mask_mode);\n+\temit_vlmax_op (code_for_pred_mov (mode), tmp, src, mask_mode);\n       else\n \temit_move_insn (tmp, src);\n       src = tmp;\n     }\n-  emit_pred_op (code_for_pred_mov (mode), dest, src, mask_mode);\n+  emit_vlmax_op (code_for_pred_mov (mode), dest, src, mask_mode);\n   return true;\n }\n \n@@ -371,4 +398,39 @@ get_vector_mode (scalar_mode inner_mode, poly_uint64 nunits)\n   return opt_machine_mode ();\n }\n \n+/* Helper functions for handling sew=64 on RV32 system. */\n+bool\n+simm32_p (rtx x)\n+{\n+  if (!CONST_INT_P (x))\n+    return false;\n+  unsigned HOST_WIDE_INT val = UINTVAL (x);\n+  return val <= 0x7FFFFFFFULL || val >= 0xFFFFFFFF80000000ULL;\n+}\n+\n+static bool\n+simm5_p (rtx x)\n+{\n+  if (!CONST_INT_P (x))\n+    return false;\n+  return IN_RANGE (INTVAL (x), -16, 15);\n+}\n+\n+bool\n+neg_simm5_p (rtx x)\n+{\n+  if (!CONST_INT_P (x))\n+    return false;\n+  return IN_RANGE (INTVAL (x), -15, 16);\n+}\n+\n+bool\n+has_vi_variant_p (rtx_code code, rtx x)\n+{\n+  if (code != PLUS && code != MINUS && code != AND && code != IOR\n+      && code != XOR)\n+    return false;\n+  return simm5_p (x);\n+}\n+\n } // namespace riscv_vector"}, {"sha": "0d54694398d961b5bd97d71f14797f3df39a0b66", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.cc?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -155,7 +155,7 @@ class loadstore : public function_base\n };\n \n /* Implements\n- * vadd/vsub/vrsub/vand/vor/vxor/vsll/vsra/vsrl/vmin/vmax/vminu/vmaxu/vdiv/vrem/vdivu/vremu/vsadd/vsaddu/vssub/vssubu.\n+ * vadd/vsub/vand/vor/vxor/vsll/vsra/vsrl/vmin/vmax/vminu/vmaxu/vdiv/vrem/vdivu/vremu/vsadd/vsaddu/vssub/vssubu.\n  */\n template<rtx_code CODE>\n class binop : public function_base\n@@ -175,6 +175,17 @@ class binop : public function_base\n   }\n };\n \n+/* Implements vrsub.  */\n+class vrsub : public function_base\n+{\n+public:\n+  rtx expand (function_expander &e) const override\n+  {\n+    return e.use_exact_insn (\n+      code_for_pred_sub_reverse_scalar (e.vector_mode ()));\n+  }\n+};\n+\n static CONSTEXPR const vsetvl<false> vsetvl_obj;\n static CONSTEXPR const vsetvl<true> vsetvlmax_obj;\n static CONSTEXPR const loadstore<false, LST_UNIT_STRIDE, false> vle_obj;\n@@ -201,7 +212,7 @@ static CONSTEXPR const loadstore<true, LST_INDEXED, true> vsoxei32_obj;\n static CONSTEXPR const loadstore<true, LST_INDEXED, true> vsoxei64_obj;\n static CONSTEXPR const binop<PLUS> vadd_obj;\n static CONSTEXPR const binop<MINUS> vsub_obj;\n-static CONSTEXPR const binop<MINUS> vrsub_obj;\n+static CONSTEXPR const vrsub vrsub_obj;\n static CONSTEXPR const binop<AND> vand_obj;\n static CONSTEXPR const binop<IOR> vor_obj;\n static CONSTEXPR const binop<XOR> vxor_obj;\n@@ -249,6 +260,7 @@ BASE (vsoxei32)\n BASE (vsoxei64)\n BASE (vadd)\n BASE (vsub)\n+BASE (vrsub)\n BASE (vand)\n BASE (vor)\n BASE (vxor)"}, {"sha": "a8b65dee6fc70d27a1f0cc1311d4a44197f5c106", "filename": "gcc/config/riscv/riscv-vector-builtins-bases.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-bases.h?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -50,6 +50,7 @@ extern const function_base *const vsoxei32;\n extern const function_base *const vsoxei64;\n extern const function_base *const vadd;\n extern const function_base *const vsub;\n+extern const function_base *const vrsub;\n extern const function_base *const vand;\n extern const function_base *const vor;\n extern const function_base *const vxor;"}, {"sha": "d5df5c3d43341dc180deadbe1962c60a831a9474", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -71,17 +71,32 @@ DEF_RVV_FUNCTION (vxor, binop, full_preds, iu_vvv_ops)\n DEF_RVV_FUNCTION (vsll, binop, full_preds, iu_shift_vvv_ops)\n DEF_RVV_FUNCTION (vsra, binop, full_preds, iu_shift_vvv_ops)\n DEF_RVV_FUNCTION (vsrl, binop, full_preds, iu_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vmin, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vmax, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vminu, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vmaxu, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vmin, binop, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vmax, binop, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vminu, binop, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vmaxu, binop, full_preds, u_vvv_ops)\n DEF_RVV_FUNCTION (vmul, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vdiv, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vrem, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vdivu, binop, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vremu, binop, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vdiv, binop, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vrem, binop, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vdivu, binop, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vremu, binop, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vadd, binop, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vsub, binop, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vrsub, binop, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vand, binop, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vor, binop, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vxor, binop, full_preds, iu_vvx_ops)\n DEF_RVV_FUNCTION (vsll, binop, full_preds, iu_shift_vvx_ops)\n DEF_RVV_FUNCTION (vsra, binop, full_preds, iu_shift_vvx_ops)\n DEF_RVV_FUNCTION (vsrl, binop, full_preds, iu_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vmin, binop, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vmax, binop, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vminu, binop, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vmaxu, binop, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vmul, binop, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vdiv, binop, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vrem, binop, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vdivu, binop, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vremu, binop, full_preds, u_vvx_ops)\n \n #undef DEF_RVV_FUNCTION"}, {"sha": "70df5d1ce87b2e5625788b3bb461e8b1504f5aae", "filename": "gcc/config/riscv/riscv-vector-builtins.cc", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins.cc?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -133,6 +133,12 @@ static const rvv_type_info i_ops[] = {\n #include \"riscv-vector-builtins-types.def\"\n   {NUM_VECTOR_TYPES, 0}};\n \n+/* A list of all signed integer will be registered for intrinsic functions.  */\n+static const rvv_type_info u_ops[] = {\n+#define DEF_RVV_U_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n+#include \"riscv-vector-builtins-types.def\"\n+  {NUM_VECTOR_TYPES, 0}};\n+\n /* A list of all integer will be registered for intrinsic functions.  */\n static const rvv_type_info iu_ops[] = {\n #define DEF_RVV_I_OPS(TYPE, REQUIRE) {VECTOR_TYPE_##TYPE, REQUIRE},\n@@ -244,6 +250,11 @@ static CONSTEXPR const rvv_arg_type_info vv_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_vector),\n      rvv_arg_type_info_end};\n \n+/* A list of args for vector_type func (vector_type, scalar_type) function.  */\n+static CONSTEXPR const rvv_arg_type_info vx_args[]\n+  = {rvv_arg_type_info (RVV_BASE_vector), rvv_arg_type_info (RVV_BASE_scalar),\n+     rvv_arg_type_info_end};\n+\n /* A list of args for vector_type func (vector_type, shift_type) function.  */\n static CONSTEXPR const rvv_arg_type_info shift_vv_args[]\n   = {rvv_arg_type_info (RVV_BASE_vector),\n@@ -402,6 +413,46 @@ static CONSTEXPR const rvv_op_info iu_vvv_ops\n      rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n      vv_args /* Args */};\n \n+/* A static operand information for vector_type func (vector_type, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_vvv_ops\n+  = {i_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, vector_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_vvv_ops\n+  = {u_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vv,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vv_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, scalar_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info iu_vvx_ops\n+  = {iu_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vx,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vx_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, scalar_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info i_vvx_ops\n+  = {i_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vx,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vx_args /* Args */};\n+\n+/* A static operand information for vector_type func (vector_type, scalar_type)\n+ * function registration. */\n+static CONSTEXPR const rvv_op_info u_vvx_ops\n+  = {u_ops,\t\t\t\t/* Types */\n+     OP_TYPE_vx,\t\t\t/* Suffix */\n+     rvv_arg_type_info (RVV_BASE_vector), /* Return type */\n+     vx_args /* Args */};\n+\n /* A static operand information for vector_type func (vector_type, shift_type)\n  * function registration. */\n static CONSTEXPR const rvv_op_info iu_shift_vvv_ops"}, {"sha": "ab3ae19b7a51a896323daaad0b77f58efb8fde01", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -312,7 +312,7 @@ ASM_MISA_SPEC\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\\\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\\\n   /* Others.  */\t\t\t\t\t\t\t\\\n-  1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n+  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\t\t\t\\\n   /* Vector registers.  */\t\t\t\t\t\t\\\n   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\\"}, {"sha": "ed9da0c35a6034c1b617eef947ad7460b2a9eb87", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -55,6 +55,17 @@\n   (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n ])\n \n+(define_mode_iterator VI_QHS [\n+  VNx1QI VNx2QI VNx4QI VNx8QI VNx16QI VNx32QI (VNx64QI \"TARGET_MIN_VLEN > 32\")\n+  VNx1HI VNx2HI VNx4HI VNx8HI VNx16HI (VNx32HI \"TARGET_MIN_VLEN > 32\")\n+  VNx1SI VNx2SI VNx4SI VNx8SI (VNx16SI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n+(define_mode_iterator VI_D [\n+  (VNx1DI \"TARGET_MIN_VLEN > 32\") (VNx2DI \"TARGET_MIN_VLEN > 32\")\n+  (VNx4DI \"TARGET_MIN_VLEN > 32\") (VNx8DI \"TARGET_MIN_VLEN > 32\")\n+])\n+\n (define_mode_iterator VNX1_QHSD [\n   VNx1QI VNx1HI VNx1SI\n   (VNx1DI \"TARGET_MIN_VLEN > 32\")\n@@ -171,6 +182,14 @@\n   (VNx1DF \"DF\") (VNx2DF \"DF\") (VNx4DF \"DF\") (VNx8DF \"DF\")\n ])\n \n+(define_mode_attr VSUBEL [\n+  (VNx1HI \"QI\") (VNx2HI \"QI\") (VNx4HI \"QI\") (VNx8HI \"QI\") (VNx16HI \"QI\") (VNx32HI \"QI\")\n+  (VNx1SI \"HI\") (VNx2SI \"HI\") (VNx4SI \"HI\") (VNx8SI \"HI\") (VNx16SI \"HI\")\n+  (VNx1DI \"SI\") (VNx2DI \"SI\") (VNx4DI \"SI\") (VNx8DI \"SI\")\n+  (VNx1SF \"HF\") (VNx2SF \"HF\") (VNx4SF \"HF\") (VNx8SF \"HF\") (VNx16SF \"HF\")\n+  (VNx1DF \"SF\") (VNx2DF \"SF\") (VNx4DF \"SF\") (VNx8DF \"SF\")\n+])\n+\n (define_mode_attr sew [\n   (VNx1QI \"8\") (VNx2QI \"8\") (VNx4QI \"8\") (VNx8QI \"8\") (VNx16QI \"8\") (VNx32QI \"8\") (VNx64QI \"8\")\n   (VNx1HI \"16\") (VNx2HI \"16\") (VNx4HI \"16\") (VNx8HI \"16\") (VNx16HI \"16\") (VNx32HI \"16\")\n@@ -190,6 +209,12 @@\n   smax umax smin umin mult div udiv mod umod\n ])\n \n+(define_code_iterator any_commutative_binop [plus and ior xor\n+  smax umax smin umin mult\n+])\n+\n+(define_code_iterator any_non_commutative_binop [minus div udiv mod umod])\n+\n (define_code_attr binop_rhs1_predicate [\n \t\t\t(plus \"register_operand\")\n \t\t\t(minus \"vector_arith_operand\")\n@@ -294,9 +319,9 @@\n \t\t\t       (mod \"rem.vv\")\n \t\t\t       (udiv \"divu.vv\")\n \t\t\t       (umod \"remu.vv\")\n-\t\t\t       (ior \"or.vv\")\n-\t\t\t       (xor \"xor.vv\")\n-\t\t\t       (and \"and.vv\")\n+\t\t\t       (ior \"or.vi\")\n+\t\t\t       (xor \"xor.vi\")\n+\t\t\t       (and \"and.vi\")\n \t\t\t       (plus \"add.vi\")\n \t\t\t       (minus \"add.vi\")\n \t\t\t       (smin \"min.vv\")\n@@ -332,9 +357,9 @@\n \t\t\t     (mod \"%3,%4\")\n \t\t\t     (udiv \"%3,%4\")\n \t\t\t     (umod \"%3,%4\")\n-\t\t\t     (ior \"%3,%4\")\n-\t\t\t     (xor \"%3,%4\")\n-\t\t\t     (and \"%3,%4\")\n+\t\t\t     (ior \"%3,%v4\")\n+\t\t\t     (xor \"%3,%v4\")\n+\t\t\t     (and \"%3,%v4\")\n \t\t\t     (plus \"%3,%v4\")\n \t\t\t     (minus \"%3,%V4\")\n \t\t\t     (smin \"%3,%4\")"}, {"sha": "02ded957f995aa4ee65ef62a60c7bc079c35f8b5", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 359, "deletions": 7, "changes": 366, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a035d133809430d2b2019d5de6c42d358eb8c7aa/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=a035d133809430d2b2019d5de6c42d358eb8c7aa", "patch": "@@ -312,7 +312,7 @@\n \n (define_expand \"mov<mode>\"\n   [(set (match_operand:V 0 \"reg_or_mem_operand\")\n-\t(match_operand:V 1 \"vector_move_operand\"))]\n+\t(match_operand:V 1 \"general_operand\"))]\n   \"TARGET_VECTOR\"\n {\n   /* For whole register move, we transform the pattern into the format\n@@ -398,7 +398,7 @@\n \n (define_expand \"mov<mode>\"\n   [(set (match_operand:VB 0 \"reg_or_mem_operand\")\n-\t(match_operand:VB 1 \"vector_move_operand\"))]\n+\t(match_operand:VB 1 \"general_operand\"))]\n   \"TARGET_VECTOR\"\n {\n   if (riscv_vector::legitimize_move (operands[0], operands[1], <MODE>mode))\n@@ -427,8 +427,8 @@\n \t  (match_operand:<VEL> 1 \"direct_broadcast_operand\")))]\n   \"TARGET_VECTOR\"\n   {\n-    riscv_vector::emit_pred_op (\n-      code_for_pred_broadcast (<MODE>mode), operands[0], operands[1], <VM>mode);\n+    riscv_vector::emit_vlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\toperands[0], operands[1], <VM>mode);\n     DONE;\n   }\n )\n@@ -775,7 +775,15 @@\n ;; - 13.16 Vector Floating-Point Move Instruction (vfmv.v.f)\n ;; -------------------------------------------------------------------------------\n \n-(define_insn \"@pred_broadcast<mode>\"\n+;; According to RVV ISA, vector-scalar instruction doesn't support\n+;; operand fetched from 2 consecutive registers, so we should use\n+;; vlse.v which is a memory access to broadcast a DImode scalar into a vector.\n+;;\n+;; Since the optimization flow in GCC is as follows:\n+;; expand --> LICM (Loop invariant) --> split.\n+;; To use LICM optimization, we postpone generation of vlse.v to split stage since\n+;; a memory access instruction can not be optimized by LICM (Loop invariant).\n+(define_insn_and_split \"@pred_broadcast<mode>\"\n   [(set (match_operand:V 0 \"register_operand\"                 \"=vr,  vr,  vr,  vr\")\n \t(if_then_else:V\n \t  (unspec:<VM>\n@@ -787,14 +795,31 @@\n \t     (reg:SI VL_REGNUM)\n \t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n \t  (vec_duplicate:V\n-\t    (match_operand:<VEL> 3 \"direct_broadcast_operand\" \"  r,   f, Wdm, Wdm\"))\n-\t  (match_operand:V 2 \"vector_merge_operand\"           \"vu0, vu0, vu0, vu0\")))]\n+\t    (match_operand:<VEL> 3 \"direct_broadcast_operand\" \"Wbr,   f, Wdm, Wdm\"))\n+\t  (match_operand:V 2 \"vector_merge_operand\"           \"0vu, 0vu, 0vu, 0vu\")))]\n   \"TARGET_VECTOR\"\n   \"@\n    vmv.v.x\\t%0,%3\n    vfmv.v.f\\t%0,%3\n    vlse<sew>.v\\t%0,%3,zero,%1.t\n    vlse<sew>.v\\t%0,%3,zero\"\n+  \"!FLOAT_MODE_P (<MODE>mode) && register_operand (operands[3], <VEL>mode)\n+  && GET_MODE_BITSIZE (<VEL>mode) > GET_MODE_BITSIZE (Pmode)\"\n+  [(set (match_dup 0)\n+\t(if_then_else:V (unspec:<VM> [(match_dup 1) (match_dup 4)\n+\t     (match_dup 5) (match_dup 6) (match_dup 7)\n+\t     (reg:SI VL_REGNUM) (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (vec_duplicate:V (match_dup 3))\n+\t  (match_dup 2)))]\n+  {\n+    gcc_assert (can_create_pseudo_p ());\n+    rtx m = assign_stack_local (<VEL>mode, GET_MODE_SIZE (<VEL>mode),\n+\t\t\t\tGET_MODE_ALIGNMENT (<VEL>mode));\n+    m = validize_mem (m);\n+    emit_move_insn (m, operands[3]);\n+    m = gen_rtx_MEM (<VEL>mode, force_reg (Pmode, XEXP (m, 0)));\n+    operands[3] = m;\n+  }\n   [(set_attr \"type\" \"vimov,vfmov,vlds,vlds\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n@@ -1179,3 +1204,330 @@\n    v<insn>.vi\\t%0,%3,%4%p1\"\n   [(set_attr \"type\" \"vshift\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Handle GET_MODE_INNER (mode) = QImode, HImode, SImode.\n+(define_insn \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_commutative_binop:VI_QHS\n+\t    (vec_duplicate:VI_QHS\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\"))\n+\t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_non_commutative_binop:VI_QHS\n+\t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\")\n+\t    (vec_duplicate:VI_QHS\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n+\t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"@pred_sub<mode>_reverse_scalar\"\n+  [(set (match_operand:VI_QHS 0 \"register_operand\"       \"=vd, vr\")\n+\t(if_then_else:VI_QHS\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI_QHS\n+\t    (vec_duplicate:VI_QHS\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t    (match_operand:VI_QHS 3 \"register_operand\"   \" vr, vr\"))\n+\t  (match_operand:VI_QHS 2 \"vector_merge_operand\" \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vrsub.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vialu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Handle GET_MODE_INNER (mode) = DImode. We need to split them since\n+;; we need to deal with SEW = 64 in RV32 system.\n+(define_expand \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_commutative_binop:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"reg_or_int_operand\"))\n+\t    (match_operand:VI_D 3 \"register_operand\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::has_vi_variant_p (<CODE>, operands[4]))\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+    else if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[4]))\n+\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[4]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[4]))\n+\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\tv, operands[4], operands[5], <VM>mode);\n+\t    emit_insn (gen_pred_<optab><mode> (operands[0], operands[1],\n+\t\t\toperands[2], operands[3], v, operands[5],\n+\t\t\toperands[6], operands[7], operands[8]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+  })\n+\n+(define_insn \"*pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_commutative_binop:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<optab><mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"             \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"            \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_commutative_binop:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (sign_extend:<VEL>\n+\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\")))\n+\t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_non_commutative_binop:VI_D\n+\t    (match_operand:VI_D 3 \"register_operand\")\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"reg_or_int_operand\")))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::has_vi_variant_p (<CODE>, operands[4]))\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+    else if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[4]))\n+\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[4]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[4]))\n+\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\tv, operands[4], operands[5], <VM>mode);\n+\t    emit_insn (gen_pred_<optab><mode> (operands[0], operands[1],\n+\t\t\toperands[2], operands[3], v, operands[5],\n+\t\t\toperands[6], operands[7], operands[8]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+  })\n+\n+(define_insn \"*pred_<optab><mode>_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_non_commutative_binop:VI_D\n+\t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\")\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\")))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_<optab><mode>_extended_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"             \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"            \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (any_non_commutative_binop:VI_D\n+\t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\")\n+\t    (vec_duplicate:VI_D\n+\t      (sign_extend:<VEL>\n+\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\"))))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"v<insn>.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"<int_binop_insn_type>\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_expand \"@pred_sub<mode>_reverse_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\")\n+\t     (match_operand 5 \"vector_length_operand\")\n+\t     (match_operand 6 \"const_int_operand\")\n+\t     (match_operand 7 \"const_int_operand\")\n+\t     (match_operand 8 \"const_int_operand\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"reg_or_int_operand\"))\n+\t    (match_operand:VI_D 3 \"register_operand\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    if (riscv_vector::neg_simm5_p (operands[4]))\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+    else if (!TARGET_64BIT)\n+      {\n+\trtx v = gen_reg_rtx (<MODE>mode);\n+\n+\tif (riscv_vector::simm32_p (operands[4]))\n+\t  operands[4] = gen_rtx_SIGN_EXTEND (<VEL>mode,\n+\t\tforce_reg (Pmode, operands[4]));\n+\telse\n+\t  {\n+\t    if (CONST_INT_P (operands[4]))\n+\t      operands[4] = force_reg (<VEL>mode, operands[4]);\n+\n+\t    riscv_vector::emit_nonvlmax_op (code_for_pred_broadcast (<MODE>mode),\n+\t\t\tv, operands[4], operands[5], <VM>mode);\n+\t    emit_insn (gen_pred_sub<mode> (operands[0], operands[1],\n+\t\t\toperands[2], operands[3], v, operands[5],\n+\t\t\toperands[6], operands[7], operands[8]));\n+\t    DONE;\n+\t  }\n+      }\n+    else\n+      operands[4] = force_reg (<VEL>mode, operands[4]);\n+  })\n+\n+(define_insn \"*pred_sub<mode>_reverse_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"         \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\" \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"    \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"        \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"        \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (match_operand:<VEL> 4 \"register_operand\"  \"  r,  r\"))\n+\t    (match_operand:VI_D 3 \"register_operand\"     \" vr, vr\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"   \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vrsub.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vialu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*pred_sub<mode>_extended_reverse_scalar\"\n+  [(set (match_operand:VI_D 0 \"register_operand\"             \"=vd, vr\")\n+\t(if_then_else:VI_D\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"     \" vm,Wc1\")\n+\t     (match_operand 5 \"vector_length_operand\"        \" rK, rK\")\n+\t     (match_operand 6 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 7 \"const_int_operand\"            \"  i,  i\")\n+\t     (match_operand 8 \"const_int_operand\"            \"  i,  i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (minus:VI_D\n+\t    (vec_duplicate:VI_D\n+\t      (sign_extend:<VEL>\n+\t        (match_operand:<VSUBEL> 4 \"register_operand\" \"  r,  r\")))\n+\t    (match_operand:VI_D 3 \"register_operand\"         \" vr, vr\"))\n+\t  (match_operand:VI_D 2 \"vector_merge_operand\"       \"0vu,0vu\")))]\n+  \"TARGET_VECTOR\"\n+  \"vrsub.vx\\t%0,%3,%4%p1\"\n+  [(set_attr \"type\" \"vialu\")\n+   (set_attr \"mode\" \"<MODE>\")])"}]}