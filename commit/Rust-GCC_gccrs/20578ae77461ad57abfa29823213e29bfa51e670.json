{"sha": "20578ae77461ad57abfa29823213e29bfa51e670", "node_id": "C_kwDOANBUbNoAKDIwNTc4YWU3NzQ2MWFkNTdhYmZhMjk4MjMyMTNlMjliZmE1MWU2NzA", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-16T15:41:13Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:30Z"}, "message": "libproc_macro: Add literal internal implementation\n\nAdd internal implementation for the rust Literal type in libproc_macro\nrust interface.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/bridge.rs: Add internal literal\n\tmodule.\n\t* librust/proc_macro/rust/literal.rs: Add link to internal\n\timplementation.\n\t* librust/proc_macro/rust/bridge/literal.rs: Add internal\n\timplementation.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "ce9ca943978c9cee5d2df10c5bdc7992972a3704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce9ca943978c9cee5d2df10c5bdc7992972a3704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20578ae77461ad57abfa29823213e29bfa51e670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20578ae77461ad57abfa29823213e29bfa51e670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20578ae77461ad57abfa29823213e29bfa51e670", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20578ae77461ad57abfa29823213e29bfa51e670/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f"}], "stats": {"total": 349, "additions": 281, "deletions": 68}, "files": [{"sha": "eb49071fb1f29631dbd58ee2d7a33085a4315c42", "filename": "librust/proc_macro/rust/bridge.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20578ae77461ad57abfa29823213e29bfa51e670/librust%2Fproc_macro%2Frust%2Fbridge.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20578ae77461ad57abfa29823213e29bfa51e670/librust%2Fproc_macro%2Frust%2Fbridge.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge.rs?ref=20578ae77461ad57abfa29823213e29bfa51e670", "patch": "@@ -1,3 +1,4 @@\n pub mod ident;\n+pub mod literal;\n pub mod punct;\n pub mod span;"}, {"sha": "f44fdbc26ed9ea97d1df7e485f2fe7e194021eb5", "filename": "librust/proc_macro/rust/bridge/literal.rs", "status": "added", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20578ae77461ad57abfa29823213e29bfa51e670/librust%2Fproc_macro%2Frust%2Fbridge%2Fliteral.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20578ae77461ad57abfa29823213e29bfa51e670/librust%2Fproc_macro%2Frust%2Fbridge%2Fliteral.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge%2Fliteral.rs?ref=20578ae77461ad57abfa29823213e29bfa51e670", "patch": "@@ -0,0 +1,212 @@\n+use bridge::span::Span;\n+use std::convert::TryInto;\n+use std::ffi::c_uchar;\n+\n+extern \"C\" {\n+    fn Literal__drop(literal: *const Literal);\n+    fn Literal__string(str: *const c_uchar) -> Literal;\n+    fn Literal__byte_string(bytes: *const u8) -> Literal;\n+}\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+pub enum Unsigned {\n+    Unsigned8(u8),\n+    Unsigned16(u16),\n+    Unsigned32(u32),\n+    Unsigned64(u64),\n+    // FIXME: 128 bits ffi is not safe for now\n+    // https://github.com/rust-lang/rust/issues/54341\n+    //\n+    // Unsigned128(u128),\n+}\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+pub enum Signed {\n+    Signed8(i8),\n+    Signed16(i16),\n+    Signed32(i32),\n+    Signed64(i64),\n+    // FIXME: 128 bits ffi is not safe for now\n+    // https://github.com/rust-lang/rust/issues/54341\n+    //\n+    // Signed128(i128),\n+}\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+pub enum Literal {\n+    /// String literal internal representation\n+    ///\n+    /// # Note\n+    /// This variant is constructed through FFI\n+    #[allow(dead_code)]\n+    String {\n+        data: *const c_uchar,\n+        size: u64,\n+    },\n+    /// Bytestring literal internal representation\n+    ///\n+    /// # Note\n+    /// This variant is constructed through FFI\n+    #[allow(dead_code)]\n+    ByteString {\n+        data: *const u8,\n+        size: u64,\n+    },\n+    Char(u32),\n+    Unsigned(Unsigned, bool),\n+    Signed(Signed, bool),\n+    Usize(u64, bool),\n+    ISize(i64, bool),\n+    Float32(f32, bool),\n+    Float64(f64, bool),\n+}\n+\n+impl Literal {\n+    pub fn u8_suffixed(n: u8) -> Self {\n+        Literal::Unsigned(Unsigned::Unsigned8(n), true)\n+    }\n+\n+    pub fn u16_suffixed(n: u16) -> Self {\n+        Literal::Unsigned(Unsigned::Unsigned16(n), true)\n+    }\n+\n+    pub fn u32_suffixed(n: u32) -> Self {\n+        Literal::Unsigned(Unsigned::Unsigned32(n), true)\n+    }\n+\n+    pub fn u64_suffixed(n: u64) -> Self {\n+        Literal::Unsigned(Unsigned::Unsigned64(n), true)\n+    }\n+\n+    pub fn u128_suffixed(_n: u128) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn usize_suffixed(n: usize) -> Self {\n+        Literal::Usize(n.try_into().expect(\"Cannot convert usize to u64\"), true)\n+    }\n+\n+    pub fn i8_suffixed(n: i8) -> Self {\n+        Literal::Signed(Signed::Signed8(n), true)\n+    }\n+\n+    pub fn i16_suffixed(n: i16) -> Self {\n+        Literal::Signed(Signed::Signed16(n), true)\n+    }\n+\n+    pub fn i32_suffixed(n: i32) -> Self {\n+        Literal::Signed(Signed::Signed32(n), true)\n+    }\n+\n+    pub fn i64_suffixed(n: i64) -> Self {\n+        Literal::Signed(Signed::Signed64(n), true)\n+    }\n+\n+    pub fn i128_suffixed(_n: i128) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn isize_suffixed(n: isize) -> Self {\n+        Literal::ISize(n.try_into().expect(\"Cannot convert isize to i64\"), true)\n+    }\n+\n+    // Unsuffixed\n+\n+    pub fn u8_unsuffixed(n: u8) -> Self {\n+        Literal::Unsigned(Unsigned::Unsigned8(n), false)\n+    }\n+\n+    pub fn u16_unsuffixed(n: u16) -> Self {\n+        Literal::Unsigned(Unsigned::Unsigned16(n), false)\n+    }\n+\n+    pub fn u32_unsuffixed(n: u32) -> Self {\n+        Literal::Unsigned(Unsigned::Unsigned32(n), false)\n+    }\n+\n+    pub fn u64_unsuffixed(n: u64) -> Self {\n+        Literal::Unsigned(Unsigned::Unsigned64(n), false)\n+    }\n+\n+    pub fn u128_unsuffixed(_n: u128) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn usize_unsuffixed(n: usize) -> Self {\n+        Literal::Usize(n.try_into().expect(\"Cannot convert usize to u64\"), false)\n+    }\n+\n+    pub fn i8_unsuffixed(n: i8) -> Self {\n+        Literal::Signed(Signed::Signed8(n), false)\n+    }\n+\n+    pub fn i16_unsuffixed(n: i16) -> Self {\n+        Literal::Signed(Signed::Signed16(n), false)\n+    }\n+\n+    pub fn i32_unsuffixed(n: i32) -> Self {\n+        Literal::Signed(Signed::Signed32(n), false)\n+    }\n+\n+    pub fn i64_unsuffixed(n: i64) -> Self {\n+        Literal::Signed(Signed::Signed64(n), false)\n+    }\n+\n+    pub fn i128_unsuffixed(_n: i128) -> Self {\n+        todo!(\"Implement this function\")\n+    }\n+\n+    pub fn isize_unsuffixed(n: isize) -> Self {\n+        Literal::ISize(n.try_into().expect(\"Cannot convert isize to i64\"), false)\n+    }\n+\n+    pub fn f32_unsuffixed(n: f32) -> Self {\n+        Literal::Float32(n, false)\n+    }\n+\n+    pub fn f32_suffixed(n: f32) -> Self {\n+        Literal::Float32(n, true)\n+    }\n+\n+    pub fn f64_unsuffixed(n: f64) -> Self {\n+        Literal::Float64(n, false)\n+    }\n+\n+    pub fn f64_suffixed(n: f64) -> Self {\n+        Literal::Float64(n, true)\n+    }\n+\n+    pub fn string(string: &str) -> Self {\n+        unsafe { Literal__string(string.as_ptr()) }\n+    }\n+\n+    pub fn character(c: char) -> Self {\n+        Literal::Char(c.into())\n+    }\n+\n+    pub fn byte_string(bytes: &[u8]) -> Self {\n+        unsafe { Literal__byte_string(bytes.as_ptr()) }\n+    }\n+\n+    pub fn span(&self) -> Span {\n+        Span {}\n+    }\n+\n+    pub fn set_span(&mut self, span: Span) {\n+        let _ = span;\n+    }\n+}\n+\n+impl Drop for Literal {\n+    fn drop(&mut self) {\n+        match self {\n+            Literal::String { .. } | Literal::ByteString { .. } => unsafe {\n+                Literal__drop(self as *const Literal)\n+            },\n+            _ => (),\n+        }\n+    }\n+}"}, {"sha": "2820da65021aa54b0c452e25bf4152d16677ee5d", "filename": "librust/proc_macro/rust/literal.rs", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20578ae77461ad57abfa29823213e29bfa51e670/librust%2Fproc_macro%2Frust%2Fliteral.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20578ae77461ad57abfa29823213e29bfa51e670/librust%2Fproc_macro%2Frust%2Fliteral.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fliteral.rs?ref=20578ae77461ad57abfa29823213e29bfa51e670", "patch": "@@ -1,3 +1,4 @@\n+use bridge;\n use std::fmt;\n use std::str::FromStr;\n use LexError;\n@@ -20,151 +21,150 @@ use Span;\n /// Boolean literals like `true` and `false` are `Ident`s and do not belong\n /// here.\n #[derive(Clone)]\n-pub struct Literal {\n-    // Internal implementation details\n-}\n+pub struct Literal(bridge::literal::Literal);\n \n impl Literal {\n     // TODO: Add experimental API functions for this type\n+    // TODO: Generate those constructor with 1/2 macros instead\n \n-    pub fn u8_suffixed(_n: u8) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u8_suffixed(n: u8) -> Self {\n+        Literal(bridge::literal::Literal::u8_suffixed(n))\n     }\n \n-    pub fn u16_suffixed(_n: u16) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u16_suffixed(n: u16) -> Self {\n+        Literal(bridge::literal::Literal::u16_suffixed(n))\n     }\n \n-    pub fn u32_suffixed(_n: u32) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u32_suffixed(n: u32) -> Self {\n+        Literal(bridge::literal::Literal::u32_suffixed(n))\n     }\n \n-    pub fn u64_suffixed(_n: u64) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u64_suffixed(n: u64) -> Self {\n+        Literal(bridge::literal::Literal::u64_suffixed(n))\n     }\n \n-    pub fn u128_suffixed(_n: u128) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u128_suffixed(n: u128) -> Self {\n+        Literal(bridge::literal::Literal::u128_suffixed(n))\n     }\n \n-    pub fn usize_suffixed(_n: usize) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn usize_suffixed(n: usize) -> Self {\n+        Literal(bridge::literal::Literal::usize_suffixed(n))\n     }\n \n-    pub fn i8_suffixed(_n: i8) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i8_suffixed(n: i8) -> Self {\n+        Literal(bridge::literal::Literal::i8_suffixed(n))\n     }\n \n-    pub fn i16_suffixed(_n: i16) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i16_suffixed(n: i16) -> Self {\n+        Literal(bridge::literal::Literal::i16_suffixed(n))\n     }\n \n-    pub fn i32_suffixed(_n: i32) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i32_suffixed(n: i32) -> Self {\n+        Literal(bridge::literal::Literal::i32_suffixed(n))\n     }\n \n-    pub fn i64_suffixed(_n: i64) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i64_suffixed(n: i64) -> Self {\n+        Literal(bridge::literal::Literal::i64_suffixed(n))\n     }\n \n-    pub fn i128_suffixed(_n: i128) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i128_suffixed(n: i128) -> Self {\n+        Literal(bridge::literal::Literal::i128_suffixed(n))\n     }\n \n-    pub fn isize_suffixed(_n: isize) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn isize_suffixed(n: isize) -> Self {\n+        Literal(bridge::literal::Literal::isize_suffixed(n))\n     }\n \n     // Unsuffixed\n \n-    pub fn u8_unsuffixed(_n: u8) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u8_unsuffixed(n: u8) -> Self {\n+        Literal(bridge::literal::Literal::u8_unsuffixed(n))\n     }\n \n-    pub fn u16_unsuffixed(_n: u16) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u16_unsuffixed(n: u16) -> Self {\n+        Literal(bridge::literal::Literal::u16_unsuffixed(n))\n     }\n \n-    pub fn u32_unsuffixed(_n: u32) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u32_unsuffixed(n: u32) -> Self {\n+        Literal(bridge::literal::Literal::u32_unsuffixed(n))\n     }\n \n-    pub fn u64_unsuffixed(_n: u64) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u64_unsuffixed(n: u64) -> Self {\n+        Literal(bridge::literal::Literal::u64_unsuffixed(n))\n     }\n \n-    pub fn u128_unsuffixed(_n: u128) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn u128_unsuffixed(n: u128) -> Self {\n+        Literal(bridge::literal::Literal::u128_unsuffixed(n))\n     }\n \n-    pub fn usize_unsuffixed(_n: usize) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn usize_unsuffixed(n: usize) -> Self {\n+        Literal(bridge::literal::Literal::usize_unsuffixed(n))\n     }\n \n-    pub fn i8_unsuffixed(_n: i8) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i8_unsuffixed(n: i8) -> Self {\n+        Literal(bridge::literal::Literal::i8_unsuffixed(n))\n     }\n \n-    pub fn i16_unsuffixed(_n: i16) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i16_unsuffixed(n: i16) -> Self {\n+        Literal(bridge::literal::Literal::i16_unsuffixed(n))\n     }\n \n-    pub fn i32_unsuffixed(_n: i32) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i32_unsuffixed(n: i32) -> Self {\n+        Literal(bridge::literal::Literal::i32_unsuffixed(n))\n     }\n \n-    pub fn i64_unsuffixed(_n: i64) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i64_unsuffixed(n: i64) -> Self {\n+        Literal(bridge::literal::Literal::i64_unsuffixed(n))\n     }\n \n-    pub fn i128_unsuffixed(_n: i128) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn i128_unsuffixed(n: i128) -> Self {\n+        Literal(bridge::literal::Literal::i128_unsuffixed(n))\n     }\n \n-    pub fn isize_unsuffixed(_n: isize) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn isize_unsuffixed(n: isize) -> Self {\n+        Literal(bridge::literal::Literal::isize_unsuffixed(n))\n     }\n \n-    pub fn f32_unsuffixed(_n: f32) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn f32_unsuffixed(n: f32) -> Self {\n+        Literal(bridge::literal::Literal::f32_unsuffixed(n))\n     }\n \n-    pub fn f32_suffixed(_n: f32) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn f32_suffixed(n: f32) -> Self {\n+        Literal(bridge::literal::Literal::f32_suffixed(n))\n     }\n \n-    pub fn f64_unsuffixed(_n: f64) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn f64_unsuffixed(n: f64) -> Self {\n+        Literal(bridge::literal::Literal::f64_unsuffixed(n))\n     }\n \n-    pub fn f64_suffixed(_n: f64) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn f64_suffixed(n: f64) -> Self {\n+        Literal(bridge::literal::Literal::f64_suffixed(n))\n     }\n \n-    pub fn string(_string: &str) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn string(string: &str) -> Self {\n+        Literal(bridge::literal::Literal::string(string))\n     }\n \n-    pub fn character(_c: char) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn character(c: char) -> Self {\n+        Literal(bridge::literal::Literal::character(c))\n     }\n \n-    pub fn byte_string(_bytes: &[u8]) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn byte_string(bytes: &[u8]) -> Self {\n+        Literal(bridge::literal::Literal::byte_string(bytes))\n     }\n \n     /// Get the [`Span`] for this literal.\n     pub fn span(&self) -> Span {\n-        todo!(\"Get the span of a literal\")\n+        Span(self.0.span())\n     }\n \n     /// Set the span for this literal.\n     ///\n     /// # Arguments\n     ///\n     /// * `span` - The new span value.\n-    pub fn set_span(&mut self, _span: Span) {\n-        todo!(\"Set the span of a literal\")\n+    pub fn set_span(&mut self, span: Span) {\n+        self.0.set_span(span.0);\n     }\n }\n "}]}