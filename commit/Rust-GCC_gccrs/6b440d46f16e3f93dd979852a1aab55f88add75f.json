{"sha": "6b440d46f16e3f93dd979852a1aab55f88add75f", "node_id": "C_kwDOANBUbNoAKDZiNDQwZDQ2ZjE2ZTNmOTNkZDk3OTg1MmExYWFiNTVmODhhZGQ3NWY", "commit": {"author": {"name": "Faisal Abbas", "email": "90.abbasfaisal@gmail.com", "date": "2022-08-06T15:24:30Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-25T11:40:27Z"}, "message": "rust-constexpr.cc: add few more cases to eval_constant_expression()", "tree": {"sha": "655e7f6d6fdeda5dac901f669b6c04fd3606c63b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/655e7f6d6fdeda5dac901f669b6c04fd3606c63b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b440d46f16e3f93dd979852a1aab55f88add75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b440d46f16e3f93dd979852a1aab55f88add75f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b440d46f16e3f93dd979852a1aab55f88add75f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b440d46f16e3f93dd979852a1aab55f88add75f/comments", "author": {"login": "abbasfaisal", "id": 9428333, "node_id": "MDQ6VXNlcjk0MjgzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/9428333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abbasfaisal", "html_url": "https://github.com/abbasfaisal", "followers_url": "https://api.github.com/users/abbasfaisal/followers", "following_url": "https://api.github.com/users/abbasfaisal/following{/other_user}", "gists_url": "https://api.github.com/users/abbasfaisal/gists{/gist_id}", "starred_url": "https://api.github.com/users/abbasfaisal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abbasfaisal/subscriptions", "organizations_url": "https://api.github.com/users/abbasfaisal/orgs", "repos_url": "https://api.github.com/users/abbasfaisal/repos", "events_url": "https://api.github.com/users/abbasfaisal/events{/privacy}", "received_events_url": "https://api.github.com/users/abbasfaisal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6dfca3166f8137deff833bcea7827e38b28fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6dfca3166f8137deff833bcea7827e38b28fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6dfca3166f8137deff833bcea7827e38b28fb4"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "6f645beba451a8477223080154617132fa474efa", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b440d46f16e3f93dd979852a1aab55f88add75f/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b440d46f16e3f93dd979852a1aab55f88add75f/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=6b440d46f16e3f93dd979852a1aab55f88add75f", "patch": "@@ -1730,6 +1730,31 @@ eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n \tbreak;\n       }\n \n+      case COMPOUND_EXPR: {\n+\t/* check_return_expr sometimes wraps a TARGET_EXPR in a\n+\t   COMPOUND_EXPR; don't get confused.  Also handle EMPTY_CLASS_EXPR\n+\t   introduced by build_call_a.  */\n+\ttree op0 = TREE_OPERAND (t, 0);\n+\ttree op1 = TREE_OPERAND (t, 1);\n+\tSTRIP_NOPS (op1);\n+\tif ((TREE_CODE (op0) == TARGET_EXPR && op1 == TARGET_EXPR_SLOT (op0))\n+\t    || TREE_CODE (op1) == EMPTY_CLASS_EXPR)\n+\t  r = eval_constant_expression (ctx, op0, lval, non_constant_p,\n+\t\t\t\t\toverflow_p, jump_target);\n+\telse\n+\t  {\n+\t    /* Check that the LHS is constant and then discard it.  */\n+\t    eval_constant_expression (ctx, op0, true, non_constant_p,\n+\t\t\t\t      overflow_p, jump_target);\n+\t    if (*non_constant_p)\n+\t      return t;\n+\t    op1 = TREE_OPERAND (t, 1);\n+\t    r = eval_constant_expression (ctx, op1, lval, non_constant_p,\n+\t\t\t\t\t  overflow_p, jump_target);\n+\t  }\n+      }\n+      break;\n+\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n       if (lval)\n@@ -1817,6 +1842,41 @@ eval_constant_expression (const constexpr_ctx *ctx, tree t, bool lval,\n \t\t\t\t\t      overflow_p);\n       break;\n \n+    case TRY_CATCH_EXPR:\n+      if (TREE_OPERAND (t, 0) == NULL_TREE)\n+\t{\n+\t  r = void_node;\n+\t  break;\n+\t}\n+      r = eval_constant_expression (ctx, TREE_OPERAND (t, 0), lval,\n+\t\t\t\t    non_constant_p, overflow_p, jump_target);\n+      break;\n+\n+      case CLEANUP_POINT_EXPR: {\n+\tauto_vec<tree, 2> cleanups;\n+\tvec<tree> *prev_cleanups = ctx->global->cleanups;\n+\tctx->global->cleanups = &cleanups;\n+\tr = eval_constant_expression (ctx, TREE_OPERAND (t, 0), lval,\n+\t\t\t\t      non_constant_p, overflow_p, jump_target);\n+\tctx->global->cleanups = prev_cleanups;\n+\tunsigned int i;\n+\ttree cleanup;\n+\t/* Evaluate the cleanups.  */\n+\tFOR_EACH_VEC_ELT_REVERSE (cleanups, i, cleanup)\n+\t  eval_constant_expression (ctx, cleanup, false, non_constant_p,\n+\t\t\t\t    overflow_p);\n+      }\n+      break;\n+\n+    case TRY_FINALLY_EXPR:\n+      r = eval_constant_expression (ctx, TREE_OPERAND (t, 0), lval,\n+\t\t\t\t    non_constant_p, overflow_p, jump_target);\n+      if (!*non_constant_p)\n+\t/* Also evaluate the cleanup.  */\n+\teval_constant_expression (ctx, TREE_OPERAND (t, 1), true,\n+\t\t\t\t  non_constant_p, overflow_p);\n+      break;\n+\n     case CONSTRUCTOR:\n       if (TREE_CONSTANT (t) && reduced_constant_expression_p (t))\n \t{"}]}