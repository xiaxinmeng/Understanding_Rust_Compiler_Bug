{"sha": "9fbbb20da58853217f84a9c4b82c84274c27144f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZiYmIyMGRhNTg4NTMyMTdmODRhOWM0YjgyYzg0Mjc0YzI3MTQ0Zg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2014-10-02T06:35:49Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2014-10-02T06:35:49Z"}, "message": "gcc/testsuite/\n\n2014-10-01  Andrew Pinski  <apinski@cavium.com>\n            Max Ostapenko  <m.ostapenko@partner.samsung.com>\n\n\t* lib/ubsan-dg.exp\n\t(check_effective_target_fsanitize_address): New function.\n\t(ubsan_init): Save off ALWAYS_CXXFLAGS.\n\t(ubsan_finish): Restore ALWAYS_CXXFLAGS correctly.\n\t* lib/asan-dg.exp\n\t(check_effective_target_faddress_sanitizer): Rename to ...\n\t(check_effective_target_fsanitize_address): ... this. Change to creating\n\tan executable.\n\t(asan_init): Save off ALWAYS_CXXFLAGS.\n\t(asan_finish): Restore ALWAYS_CXXFLAGS correctly.\n\t* lib/tsan-dg.exp\n\t(check_effective_target_fthread_sanitizer): Rename to ...\n\t(check_effective_target_fsanitize_thread): ... this. Change to creating\n\tan executable.\n\t(tsan_init): Save off ALWAYS_CXXFLAGS.\n\t(tsan_finish): Restore ALWAYS_CXXFLAGS correctly. Set dg-do-what-default\n\tto run as a default behaviour.\n\t* gcc.dg/ubsan/ubsan.exp: Don't check the return value of ubsan_init.\n\tCheck check_effective_target_fsanitize_undefined before running the\n\ttests.\n\t* g++.dg/ubsan/ubsan.exp: Likewise.\n\t* gcc.dg/asan/asan.exp: Don't check the return value of asan_init.\n\tcheck_effective_target_fsanitize_address too early.\n\tCheck check_effective_target_fsanitize_address before running the tests.\n\t* g++.dg/asan/asan.exp: Likewise.\n\t* gcc.dg/tsan/tsan.exp: Don't check the return value of tsan_init.\n\tcheck_effective_target_fsanitize_thread too early.\n\tCheck check_effective_target_fsanitize_thread before running the tests.\n\t* g++.dg/tsan/tsan.exp: Likewise.\n\nCo-Authored-By: Max Ostapenko <m.ostapenko@partner.samsung.com>\n\nFrom-SVN: r215793", "tree": {"sha": "297f9d61a147322f1921b51d41c0c3a0d04e1cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/297f9d61a147322f1921b51d41c0c3a0d04e1cda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fbbb20da58853217f84a9c4b82c84274c27144f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fbbb20da58853217f84a9c4b82c84274c27144f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fbbb20da58853217f84a9c4b82c84274c27144f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fbbb20da58853217f84a9c4b82c84274c27144f/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9189aff736d51a1884d983010bfebfeb16d57516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9189aff736d51a1884d983010bfebfeb16d57516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9189aff736d51a1884d983010bfebfeb16d57516"}], "stats": {"total": 161, "additions": 102, "deletions": 59}, "files": [{"sha": "b11b45aace7de34e4b5cb082b53e71cf084a6630", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fbbb20da58853217f84a9c4b82c84274c27144f", "patch": "@@ -1,3 +1,36 @@\n+2014-10-02  Andrew Pinski  <apinski@cavium.com>\n+\t    Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* lib/ubsan-dg.exp\n+\t(check_effective_target_fsanitize_address): New function.\n+\t(ubsan_init): Save off ALWAYS_CXXFLAGS.\n+\t(ubsan_finish): Restore ALWAYS_CXXFLAGS correctly.\n+\t* lib/asan-dg.exp\n+\t(check_effective_target_faddress_sanitizer): Rename to ...\n+\t(check_effective_target_fsanitize_address): ... this. Change to creating\n+\tan executable.\n+\t(asan_init): Save off ALWAYS_CXXFLAGS.\n+\t(asan_finish): Restore ALWAYS_CXXFLAGS correctly.\n+\t* lib/tsan-dg.exp\n+\t(check_effective_target_fthread_sanitizer): Rename to ...\n+\t(check_effective_target_fsanitize_thread): ... this. Change to creating\n+\tan executable.\n+\t(tsan_init): Save off ALWAYS_CXXFLAGS.\n+\t(tsan_finish): Restore ALWAYS_CXXFLAGS correctly. Set dg-do-what-default\n+\tto run as a default behaviour.\n+\t* gcc.dg/ubsan/ubsan.exp: Don't check the return value of ubsan_init.\n+\tCheck check_effective_target_fsanitize_undefined before running the\n+\ttests.\n+\t* g++.dg/ubsan/ubsan.exp: Likewise.\n+\t* gcc.dg/asan/asan.exp: Don't check the return value of asan_init.\n+\tcheck_effective_target_fsanitize_address too early.\n+\tCheck check_effective_target_fsanitize_address before running the tests.\n+\t* g++.dg/asan/asan.exp: Likewise.\n+\t* gcc.dg/tsan/tsan.exp: Don't check the return value of tsan_init.\n+\tcheck_effective_target_fsanitize_thread too early.\n+\tCheck check_effective_target_fsanitize_thread before running the tests.\n+\t* g++.dg/tsan/tsan.exp: Likewise.\n+\n 2014-10-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* gcc.dg/combine-clobber.c: New."}, {"sha": "f51f87a01283f13ae3291593625f3b4a49e2edc9", "filename": "gcc/testsuite/g++.dg/asan/asan.exp", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fasan.exp?ref=9fbbb20da58853217f84a9c4b82c84274c27144f", "patch": "@@ -20,17 +20,13 @@\n load_lib g++-dg.exp\n load_lib asan-dg.exp\n \n-if ![check_effective_target_faddress_sanitizer] {\n-  return\n-}\n-\n # Initialize `dg'.\n dg-init\n-if [asan_init] {\n+asan_init\n \n # Main loop.\n-gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/asan/*.c]] \"\" \"\"\n-\n+if [check_effective_target_fsanitize_address] {\n+  gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/asan/*.c]] \"\" \"\"\n }\n \n # All done."}, {"sha": "c7f97f6e80f9c4c35871acfb26bf909e60678bd3", "filename": "gcc/testsuite/g++.dg/tsan/tsan.exp", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan.exp?ref=9fbbb20da58853217f84a9c4b82c84274c27144f", "patch": "@@ -23,22 +23,18 @@ load_lib g++-dg.exp\n load_lib tsan-dg.exp\n load_lib torture-options.exp\n \n-if ![check_effective_target_fthread_sanitizer] {\n-  return\n-}\n-\n # Initialize `dg'.\n dg-init\n torture-init\n set-torture-options [list \\\n \t{ -O0 } \\\n \t{ -O2 } ]\n \n-if [tsan_init] {\n+tsan_init\n \n # Main loop.\n-gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/tsan/*.c]] \"\" \"\"\n-\n+if [check_effective_target_fsanitize_thread] {\n+  gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/tsan/*.c]] \"\" \"\"\n }\n \n # All done."}, {"sha": "a835c19893f61bb4c33a1cb4c41acc8929feb16c", "filename": "gcc/testsuite/g++.dg/ubsan/ubsan.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fubsan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fubsan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fubsan.exp?ref=9fbbb20da58853217f84a9c4b82c84274c27144f", "patch": "@@ -22,11 +22,11 @@ load_lib ubsan-dg.exp\n \n # Initialize `dg'.\n dg-init\n-if [ubsan_init] {\n+ubsan_init\n \n # Main loop.\n-gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/ubsan/*.c]] \"\" \"\"\n-\n+if [check_effective_target_fsanitize_undefined] {\n+  gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C $srcdir/c-c++-common/ubsan/*.c]] \"\" \"\"\n }\n \n # All done."}, {"sha": "2e0d5921b0e6b299606863a1ebf4fd14b3300671", "filename": "gcc/testsuite/gcc.dg/asan/asan.exp", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fasan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fasan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fasan.exp?ref=9fbbb20da58853217f84a9c4b82c84274c27144f", "patch": "@@ -22,17 +22,13 @@\n load_lib gcc-dg.exp\n load_lib asan-dg.exp\n \n-if ![check_effective_target_faddress_sanitizer] {\n-  return\n-}\n-\n # Initialize `dg'.\n dg-init\n-if [asan_init] {\n+asan_init\n \n # Main loop.\n-gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c $srcdir/c-c++-common/asan/*.c]] \"\" \"\"\n-\n+if [check_effective_target_fsanitize_address] {\n+  gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c $srcdir/c-c++-common/asan/*.c]] \"\" \"\"\n }\n \n # All done."}, {"sha": "1558c0f8e7b7c097acc0f2b9a2c8fc2f67369243", "filename": "gcc/testsuite/gcc.dg/tsan/tsan.exp", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fgcc.dg%2Ftsan%2Ftsan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fgcc.dg%2Ftsan%2Ftsan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftsan%2Ftsan.exp?ref=9fbbb20da58853217f84a9c4b82c84274c27144f", "patch": "@@ -23,22 +23,18 @@ load_lib gcc-dg.exp\n load_lib tsan-dg.exp\n load_lib torture-options.exp\n \n-if ![check_effective_target_fthread_sanitizer] {\n-  return\n-}\n-\n # Initialize `dg'.\n dg-init\n torture-init\n set-torture-options [list \\\n \t{ -O0 } \\\n \t{ -O2 } ]\n \n-if [tsan_init] {\n+tsan_init\n \n # Main loop.\n-gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c $srcdir/c-c++-common/tsan/*.c]] \"\" \"\"\n-\n+if [check_effective_target_fsanitize_thread] {\n+  gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c $srcdir/c-c++-common/tsan/*.c]] \"\" \"\"\n }\n \n # All done."}, {"sha": "9fd102b3bc6e4a07c69e5b7ee5b9556560315cfb", "filename": "gcc/testsuite/gcc.dg/ubsan/ubsan.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fubsan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fubsan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fubsan.exp?ref=9fbbb20da58853217f84a9c4b82c84274c27144f", "patch": "@@ -24,11 +24,11 @@ load_lib ubsan-dg.exp\n \n # Initialize `dg'.\n dg-init\n-if [ubsan_init] {\n+ubsan_init\n \n # Main loop.\n-gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c $srcdir/c-c++-common/ubsan/*.c]] \"\" \"\"\n-\n+if [check_effective_target_fsanitize_undefined] {\n+  gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c $srcdir/c-c++-common/ubsan/*.c]] \"\" \"\"\n }\n \n # All done."}, {"sha": "9769138d77de27f1bf0cbb39b32a4c7e0c93a984", "filename": "gcc/testsuite/lib/asan-dg.exp", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp?ref=9fbbb20da58853217f84a9c4b82c84274c27144f", "patch": "@@ -17,9 +17,9 @@\n # Return 1 if compilation with -fsanitize=address is error-free for trivial\n # code, 0 otherwise.\n \n-proc check_effective_target_faddress_sanitizer {} {\n-    return [check_no_compiler_messages faddress_sanitizer object {\n-\tvoid foo (void) { }\n+proc check_effective_target_fsanitize_address {} {\n+    return [check_no_compiler_messages fsanitize_address executable {\n+\tint main (void) { return 0; }\n     } \"-fsanitize=address\"]\n }\n \n@@ -85,6 +85,7 @@ proc asan_init { args } {\n     global ALWAYS_CXXFLAGS\n     global TOOL_OPTIONS\n     global asan_saved_TEST_ALWAYS_FLAGS\n+    global asan_saved_ALWAYS_CXXFLAGS\n \n     set link_flags \"\"\n     if ![is_remote host] {\n@@ -101,6 +102,7 @@ proc asan_init { args } {\n \tset asan_saved_TEST_ALWAYS_FLAGS $TEST_ALWAYS_FLAGS\n     }\n     if [info exists ALWAYS_CXXFLAGS] {\n+\tset asan_saved_ALWAYS_CXXFLAGS $ALWAYS_CXXFLAGS\n \tset ALWAYS_CXXFLAGS [concat \"{ldflags=$link_flags}\" $ALWAYS_CXXFLAGS]\n \tset ALWAYS_CXXFLAGS [concat \"{additional_flags=-fsanitize=address -g $include_flags}\" $ALWAYS_CXXFLAGS]\n     } else {\n@@ -110,10 +112,6 @@ proc asan_init { args } {\n \t    set TEST_ALWAYS_FLAGS \"$link_flags -fsanitize=address -g $include_flags\"\n \t}\n     }\n-    if { $link_flags != \"\" } {\n-\treturn 1\n-    }\n-    return 0\n }\n \n #\n@@ -123,12 +121,18 @@ proc asan_init { args } {\n proc asan_finish { args } {\n     global TEST_ALWAYS_FLAGS\n     global asan_saved_TEST_ALWAYS_FLAGS\n+    global asan_saved_ALWAYS_CXXFLAGS\n \n-    if [info exists asan_saved_TEST_ALWAYS_FLAGS] {\n-\tset TEST_ALWAYS_FLAGS $asan_saved_TEST_ALWAYS_FLAGS\n+    if [info exists asan_saved_ALWAYS_CXXFLAGS ] {\n+\tset ALWAYS_CXXFLAGS $asan_saved_ALWAYS_CXXFLAGS\n     } else {\n-\tunset TEST_ALWAYS_FLAGS\n+\tif [info exists asan_saved_TEST_ALWAYS_FLAGS] {\n+\t    set TEST_ALWAYS_FLAGS $asan_saved_TEST_ALWAYS_FLAGS\n+\t} else {\n+\t    unset TEST_ALWAYS_FLAGS\n+\t}\n     }\n+    restore_ld_library_path_env_vars\n }\n \n # Symbolize lines like"}, {"sha": "54ec4047c6b26064289166dcab79b4840c92abcd", "filename": "gcc/testsuite/lib/tsan-dg.exp", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Flib%2Ftsan-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Flib%2Ftsan-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftsan-dg.exp?ref=9fbbb20da58853217f84a9c4b82c84274c27144f", "patch": "@@ -17,9 +17,9 @@\n # Return 1 if compilation with -fsanitize=thread is error-free for trivial\n # code, 0 otherwise.\n \n-proc check_effective_target_fthread_sanitizer {} {\n-    return [check_no_compiler_messages faddress_sanitizer object {\n-\tvoid foo (void) { }\n+proc check_effective_target_fsanitize_thread {} {\n+    return [check_no_compiler_messages fanitize_thread executable {\n+\tint main (void) { return 0; }\n     } \"-fPIE -pie -fsanitize=thread\"]\n }\n \n@@ -69,6 +69,7 @@ proc tsan_init { args } {\n     global ALWAYS_CXXFLAGS\n     global TOOL_OPTIONS\n     global tsan_saved_TEST_ALWAYS_FLAGS\n+    global tsan_saved_ALWAYS_CXXFLAGS\n     global dg-do-what-default\n     global tsan_saved_dg-do-what-default\n \n@@ -88,6 +89,7 @@ proc tsan_init { args } {\n \tset tsan_saved_TEST_ALWAYS_FLAGS $TEST_ALWAYS_FLAGS\n     }\n     if [info exists ALWAYS_CXXFLAGS] {\n+\tset tsan_saved_ALWAYS_CXXFLAGS $ALWAYS_CXXFLAGS\n \tset ALWAYS_CXXFLAGS [concat \"{ldflags=$link_flags}\" $ALWAYS_CXXFLAGS]\n \tset ALWAYS_CXXFLAGS [concat \"{additional_flags=-fPIE -pie -fsanitize=thread -g}\" $ALWAYS_CXXFLAGS]\n     } else {\n@@ -97,6 +99,8 @@ proc tsan_init { args } {\n \t    set TEST_ALWAYS_FLAGS \"$link_flags -fPIE -pie -fsanitize=thread -g\"\n \t}\n     }\n+\n+    set dg-do-what-default run\n     if { $link_flags != \"\" } {\n \tglobal individual_timeout\n \n@@ -110,9 +114,7 @@ proc tsan_init { args } {\n \t    set dg-do-what-default compile\n \t}\n \tunset individual_timeout\n-\treturn 1\n     }\n-    return 0\n }\n \n #\n@@ -122,17 +124,24 @@ proc tsan_init { args } {\n proc tsan_finish { args } {\n     global TEST_ALWAYS_FLAGS\n     global tsan_saved_TEST_ALWAYS_FLAGS\n+    global tsan_saved_ALWAYS_CXXFLAGS\n     global dg-do-what-default\n     global tsan_saved_dg-do-what-default\n \n-    if [info exists tsan_saved_TEST_ALWAYS_FLAGS] {\n-\tset TEST_ALWAYS_FLAGS $tsan_saved_TEST_ALWAYS_FLAGS\n+    if [info exists tsan_saved_ALWAYS_CXXFLAGS ] {\n+\tset ALWAYS_CXXFLAGS $tsan_saved_ALWAYS_CXXFLAGS\n     } else {\n-\tunset TEST_ALWAYS_FLAGS\n+\tif [info exists tsan_saved_TEST_ALWAYS_FLAGS] {\n+\t    set TEST_ALWAYS_FLAGS $tsan_saved_TEST_ALWAYS_FLAGS\n+        } else {\n+\t    unset TEST_ALWAYS_FLAGS\n+        }\n     }\n+\n     if [info exists tsan_saved_dg-do-what-default] {\n \tset dg-do-what-default ${tsan_saved_dg-do-what-default}\n     } else {\n \tunset dg-do-what-default\n     }\n+    restore_ld_library_path_env_vars\n }"}, {"sha": "5a7a6534cad88b6ec36fead5f0dc0b94ff3cdd22", "filename": "gcc/testsuite/lib/ubsan-dg.exp", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Flib%2Fubsan-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fbbb20da58853217f84a9c4b82c84274c27144f/gcc%2Ftestsuite%2Flib%2Fubsan-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fubsan-dg.exp?ref=9fbbb20da58853217f84a9c4b82c84274c27144f", "patch": "@@ -14,6 +14,15 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+# Return 1 if compilation with -fsanitize=undefined is error-free for trivial\n+# code, 0 otherwise.\n+\n+proc check_effective_target_fsanitize_undefined {} {\n+    return [check_no_compiler_messages fsanitize_undefined executable {\n+\tint main (void) { return 0; }\n+    } \"-fsanitize=undefined\"]\n+}\n+\n #\n # ubsan_link_flags -- compute library path and flags to find libubsan.\n # (originally from g++.exp)\n@@ -61,6 +70,7 @@ proc ubsan_init { args } {\n     global ALWAYS_CXXFLAGS\n     global TOOL_OPTIONS\n     global ubsan_saved_TEST_ALWAYS_FLAGS\n+    global ubsan_saved_ALWAYS_CXXFLAGS\n \n     set link_flags \"\"\n     if ![is_remote host] {\n@@ -75,6 +85,7 @@ proc ubsan_init { args } {\n \tset ubsan_saved_TEST_ALWAYS_FLAGS $TEST_ALWAYS_FLAGS\n     }\n     if [info exists ALWAYS_CXXFLAGS] {\n+\tset ubsan_saved_ALWAYS_CXXFLAGS $ALWAYS_CXXFLAGS\n \tset ALWAYS_CXXFLAGS [concat \"{ldflags=$link_flags}\" $ALWAYS_CXXFLAGS]\n     } else {\n \tif [info exists TEST_ALWAYS_FLAGS] {\n@@ -83,10 +94,6 @@ proc ubsan_init { args } {\n \t    set TEST_ALWAYS_FLAGS \"$link_flags\"\n \t}\n     }\n-    if { $link_flags != \"\" } {\n-\treturn 1\n-    }\n-    return 0\n }\n \n #\n@@ -96,10 +103,16 @@ proc ubsan_init { args } {\n proc ubsan_finish { args } {\n     global TEST_ALWAYS_FLAGS\n     global ubsan_saved_TEST_ALWAYS_FLAGS\n+    global ubsan_saved_ALWAYS_CXXFLAGS\n \n-    if [info exists ubsan_saved_TEST_ALWAYS_FLAGS] {\n-\tset TEST_ALWAYS_FLAGS $ubsan_saved_TEST_ALWAYS_FLAGS\n+    if [info exists ubsan_saved_ALWAYS_CXXFLAGS ] {\n+\tset ALWAYS_CXXFLAGS $ubsan_saved_ALWAYS_CXXFLAGS\n     } else {\n-\tunset TEST_ALWAYS_FLAGS\n+\tif [info exists ubsan_saved_TEST_ALWAYS_FLAGS] {\n+\t    set TEST_ALWAYS_FLAGS $ubsan_saved_TEST_ALWAYS_FLAGS\n+\t} else {\n+\t    unset TEST_ALWAYS_FLAGS\n+\t}\n     }\n+    restore_ld_library_path_env_vars\n }"}]}