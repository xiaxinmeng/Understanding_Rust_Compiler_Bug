{"sha": "58aa6a736a704dff2f48d44ec5a36ed4b7b4d162", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhYTZhNzM2YTcwNGRmZjJmNDhkNDRlYzVhMzZlZDRiN2I0ZDE2Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-11-28T23:21:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-11-28T23:21:43Z"}, "message": "i386.md (*and<mode>_1): Merge insn pattern from *andsi_1 and *andhi_1 using SWI24 mode iterator.\n\n\t* config/i386/i386.md (*and<mode>_1): Merge insn pattern from\n\t*andsi_1 and *andhi_1 using SWI24 mode iterator.  Use multi-line\n\toutput template string.\n\t(*anddi_1): Use multi-line output template string.\n\t(*andqi_1): Ditto.\n\nFrom-SVN: r242938", "tree": {"sha": "3a1a0210659f9c2a4e10b7503d19ee95922253f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a1a0210659f9c2a4e10b7503d19ee95922253f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58aa6a736a704dff2f48d44ec5a36ed4b7b4d162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58aa6a736a704dff2f48d44ec5a36ed4b7b4d162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58aa6a736a704dff2f48d44ec5a36ed4b7b4d162", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58aa6a736a704dff2f48d44ec5a36ed4b7b4d162/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5a4add7aa2b78c3c7f48b173e24944439d82992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a4add7aa2b78c3c7f48b173e24944439d82992", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a4add7aa2b78c3c7f48b173e24944439d82992"}], "stats": {"total": 99, "additions": 28, "deletions": 71}, "files": [{"sha": "5ce50b04f55f75a71998d71df3f33e64db95d308", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aa6a736a704dff2f48d44ec5a36ed4b7b4d162/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aa6a736a704dff2f48d44ec5a36ed4b7b4d162/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58aa6a736a704dff2f48d44ec5a36ed4b7b4d162", "patch": "@@ -1,3 +1,11 @@\n+2016-11-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*and<mode>_1): Merge insn pattern from\n+\t*andsi_1 and *andhi_1 using SWI24 mode iterator.  Use multi-line\n+\toutput template string.\n+\t(*anddi_1): Use multi-line output template string.\n+\t(*andqi_1): Ditto.\n+\n 2016-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/78540"}, {"sha": "d7cce66d8417b75ca8d647435bf618bb2e70e435", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 20, "deletions": 71, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58aa6a736a704dff2f48d44ec5a36ed4b7b4d162/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58aa6a736a704dff2f48d44ec5a36ed4b7b4d162/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=58aa6a736a704dff2f48d44ec5a36ed4b7b4d162", "patch": "@@ -8172,20 +8172,11 @@\n \t (match_operand:DI 2 \"x86_64_szext_general_operand\" \"Z,re,rm,L\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (AND, DImode, operands)\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_IMOVX:\n-      return \"#\";\n-\n-    default:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      if (get_attr_mode (insn) == MODE_SI)\n-\treturn \"and{l}\\t{%k2, %k0|%k0, %k2}\";\n-      else\n-\treturn \"and{q}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n+  \"@\n+   and{l}\\t{%k2, %k0|%k0, %k2}\n+   and{q}\\t{%2, %0|%0, %2}\n+   and{q}\\t{%2, %0|%0, %2}\n+   #\"\n   [(set_attr \"type\" \"alu,alu,alu,imovx\")\n    (set_attr \"length_immediate\" \"*,*,*,0\")\n    (set (attr \"prefix_rex\")\n@@ -8221,79 +8212,37 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*andsi_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r,Ya\")\n-\t(and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,qm\")\n-\t\t(match_operand:SI 2 \"x86_64_general_operand\" \"re,rm,L\")))\n+(define_insn \"*and<mode>_1\"\n+  [(set (match_operand:SWI24 0 \"nonimmediate_operand\" \"=rm,r,Ya\")\n+\t(and:SWI24 (match_operand:SWI24 1 \"nonimmediate_operand\" \"%0,0,qm\")\n+\t\t   (match_operand:SWI24 2 \"<general_operand>\" \"r<i>,rm,L\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (AND, SImode, operands)\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_IMOVX:\n-      return \"#\";\n-\n-    default:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      return \"and{l}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n+  \"ix86_binary_operator_ok (AND, <MODE>mode, operands)\"\n+  \"@\n+   and{<imodesuffix>}\\t{%2, %0|%0, %2}\n+   and{<imodesuffix>}\\t{%2, %0|%0, %2}\n+   #\"\n   [(set_attr \"type\" \"alu,alu,imovx\")\n+   (set_attr \"length_immediate\" \"*,*,0\")\n    (set (attr \"prefix_rex\")\n      (if_then_else\n        (and (eq_attr \"type\" \"imovx\")\n \t    (and (match_test \"INTVAL (operands[2]) == 0xff\")\n \t\t (match_operand 1 \"ext_QIreg_operand\")))\n        (const_string \"1\")\n        (const_string \"*\")))\n-   (set_attr \"length_immediate\" \"*,*,0\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*andhi_1\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r,Ya\")\n-\t(and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,qm\")\n-\t\t(match_operand:HI 2 \"general_operand\" \"rn,rm,L\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (AND, HImode, operands)\"\n-{\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_IMOVX:\n-      return \"#\";\n-\n-    default:\n-      gcc_assert (rtx_equal_p (operands[0], operands[1]));\n-      return \"and{w}\\t{%2, %0|%0, %2}\";\n-    }\n-}\n-  [(set_attr \"type\" \"alu,alu,imovx\")\n-   (set_attr \"length_immediate\" \"*,*,0\")\n-   (set (attr \"prefix_rex\")\n-     (if_then_else\n-       (and (eq_attr \"type\" \"imovx\")\n-\t    (match_operand 1 \"ext_QIreg_operand\"))\n-       (const_string \"1\")\n-       (const_string \"*\")))\n-   (set_attr \"mode\" \"HI,HI,SI\")])\n+   (set_attr \"mode\" \"<MODE>,<MODE>,SI\")])\n \n (define_insn \"*andqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r\")\n \t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n \t\t(match_operand:QI 2 \"general_operand\" \"qn,qmn,rn\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (AND, QImode, operands)\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-    case 1:\n-      return \"and{b}\\t{%2, %0|%0, %2}\";\n-    case 2:\n-      return \"and{l}\\t{%k2, %k0|%k0, %k2}\";\n-    default:\n-      gcc_unreachable ();\n-    }\n-}\n+  \"@\n+   and{b}\\t{%2, %0|%0, %2}\n+   and{b}\\t{%2, %0|%0, %2}\n+   and{l}\\t{%k2, %k0|%k0, %k2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI,QI,SI\")\n    ;; Potential partial reg stall on alternative 2."}]}