{"sha": "3c837e5bf7e68634e65a1b1f5e6052a9aeaae1bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M4MzdlNWJmN2U2ODYzNGU2NWExYjFmNWU2MDUyYTlhZWFhZTFiYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-12-14T10:10:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-04-29T08:00:47Z"}, "message": "[Ada] Ada 2020 AI12-0401: Renaming of qualified expression of variable\n\ngcc/ada/\n\n\t* sem_ch8.adb (Analyze_Object_Renaming): Update check for\n\tAI12-0401.", "tree": {"sha": "ab437b416b8e56ea0d40ed4ec5444774783b0ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab437b416b8e56ea0d40ed4ec5444774783b0ac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c837e5bf7e68634e65a1b1f5e6052a9aeaae1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c837e5bf7e68634e65a1b1f5e6052a9aeaae1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c837e5bf7e68634e65a1b1f5e6052a9aeaae1bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c837e5bf7e68634e65a1b1f5e6052a9aeaae1bb/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b8d4694de0ea744804eed414c8a1453111fdb68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b8d4694de0ea744804eed414c8a1453111fdb68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b8d4694de0ea744804eed414c8a1453111fdb68"}], "stats": {"total": 57, "additions": 48, "deletions": 9}, "files": [{"sha": "817cba97bea6bd70143d442106fba4b920587183", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c837e5bf7e68634e65a1b1f5e6052a9aeaae1bb/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c837e5bf7e68634e65a1b1f5e6052a9aeaae1bb/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=3c837e5bf7e68634e65a1b1f5e6052a9aeaae1bb", "patch": "@@ -759,6 +759,7 @@ package body Sem_Ch8 is\n       Dec           : Node_Id;\n       T             : Entity_Id;\n       T2            : Entity_Id;\n+      Q             : Node_Id;\n \n       procedure Check_Constrained_Object;\n       --  If the nominal type is unconstrained but the renamed object is\n@@ -1074,17 +1075,55 @@ package body Sem_Ch8 is\n          --  Check against AI12-0401 here before Resolve may rewrite Nam and\n          --  potentially generate spurious warnings.\n \n+         --   In the case where the object_name is a qualified_expression with\n+         --   a nominal subtype T and whose expression is a name that denotes\n+         --   an object Q:\n+         --    * if T is an elementary subtype, then:\n+         --      * Q shall be a constant other than a dereference of an access\n+         --        type; or\n+         --      * the nominal subtype of Q shall be statically compatible with\n+         --        T; or\n+         --      * T shall statically match the base subtype of its type if\n+         --        scalar, or the first subtype of its type if an access type.\n+         --    * if T is a composite subtype, then Q shall be known to be\n+         --      constrained or T shall statically match the first subtype of\n+         --      its type.\n+\n          if Nkind (Nam) = N_Qualified_Expression\n-           and then Is_Variable (Expression (Nam))\n-           and then not\n-             (Subtypes_Statically_Match (T, Etype (Expression (Nam)))\n-                or else\n-              Subtypes_Statically_Match (Base_Type (T), Etype (Nam)))\n+           and then Is_Object_Reference (Expression (Nam))\n          then\n-            Error_Msg_N\n-              (\"subtype of renamed qualified expression does not \" &\n-               \"statically match\", N);\n-            return;\n+            Q := Expression (Nam);\n+\n+            if (Is_Elementary_Type (T)\n+                  and then\n+                not ((not Is_Variable (Q)\n+                       and then Nkind (Q) /= N_Explicit_Dereference)\n+                      or else Subtypes_Statically_Compatible (Etype (Q), T)\n+                      or else (Is_Scalar_Type (T)\n+                                and then Subtypes_Statically_Match\n+                                           (T, Base_Type (T)))\n+                      or else (Is_Access_Type (T)\n+                                and then Subtypes_Statically_Match\n+                                           (T, First_Subtype (T)))))\n+              or else (Is_Composite_Type (T)\n+                         and then\n+\n+                       --  If Q is an aggregate, Is_Constrained may not be set\n+                       --  yet and its type may not be resolved yet.\n+                       --  This doesn't quite correspond to the complex notion\n+                       --  of \"known to be constrained\" but this is good enough\n+                       --  for a rule which is in any case too complex.\n+\n+                       not (Is_Constrained (Etype (Q))\n+                             or else Nkind (Q) = N_Aggregate\n+                             or else Subtypes_Statically_Match\n+                                       (T, First_Subtype (T))))\n+            then\n+               Error_Msg_N\n+                 (\"subtype of renamed qualified expression does not \" &\n+                  \"statically match\", N);\n+               return;\n+            end if;\n          end if;\n \n          Resolve (Nam, T);"}]}