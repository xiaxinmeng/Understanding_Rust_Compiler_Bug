{"sha": "b84e21115700523b4d0ac44275443f7b9c670344", "node_id": "C_kwDOANBUbNoAKGI4NGUyMTExNTcwMDUyM2I0ZDBhYzQ0Mjc1NDQzZjdiOWM2NzAzNDQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-24T10:28:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-24T10:28:00Z"}, "message": "c++: Handle structured bindings like anon unions in initializers [PR108474]\n\nAs reported by Andrew Pinski, structured bindings (with the exception\nof the ones using std::tuple_{size,element} and get which are really\nstandalone variables in addition to the binding one) also use\nDECL_VALUE_EXPR and needs the same treatment in static initializers.\n\nOn Sun, Jan 22, 2023 at 07:19:07PM -0500, Jason Merrill wrote:\n> Though, actually, why not instead fix expand_expr_real_1 (and staticp) to\n> look through DECL_VALUE_EXPR?\n\nDoing it when emitting the initializers seems to be too late to me,\nwe in various spots try to put parts of the static var DECL_INITIAL expressions\ninto the IL, or e.g. for varpool purposes remember which vars are referenced\nthere.\n\nThis patch moves it to record_reference, which is called from varpool_node::analyze\nand so about the same time as gimplification of the bodies which also\nreplaces DECL_VALUE_EXPRs.\n\n2023-01-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/108474\n\t* cgraphbuild.cc: Include gimplify.h.\n\t(record_reference): Replace VAR_DECLs with DECL_HAS_VALUE_EXPR_P with\n\ttheir corresponding DECL_VALUE_EXPR expressions after unsharing.\n\n\t* cp-gimplify.cc (cp_fold_r): Revert 2023-01-19 changes.\n\n\t* g++.dg/cpp1z/decomp57.C: New test.\n\t* g++.dg/cpp1z/decomp58.C: New test.", "tree": {"sha": "224f885eeb0fe0f2a328cf7c77ba8c76d1b0c5bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/224f885eeb0fe0f2a328cf7c77ba8c76d1b0c5bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b84e21115700523b4d0ac44275443f7b9c670344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84e21115700523b4d0ac44275443f7b9c670344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b84e21115700523b4d0ac44275443f7b9c670344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b84e21115700523b4d0ac44275443f7b9c670344/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "275820c09e5f397040cbff69c90012dc1e220faf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/275820c09e5f397040cbff69c90012dc1e220faf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/275820c09e5f397040cbff69c90012dc1e220faf"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "597831e0a16540867c3d0def6f58b286e5fc6c5c", "filename": "gcc/cgraphbuild.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84e21115700523b4d0ac44275443f7b9c670344/gcc%2Fcgraphbuild.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84e21115700523b4d0ac44275443f7b9c670344/gcc%2Fcgraphbuild.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphbuild.cc?ref=b84e21115700523b4d0ac44275443f7b9c670344", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-walk.h\"\n #include \"ipa-utils.h\"\n #include \"except.h\"\n+#include \"gimplify.h\"\n \n /* Context of record_reference.  */\n struct record_reference_ctx\n@@ -79,6 +80,17 @@ record_reference (tree *tp, int *walk_subtrees, void *data)\n \n       if (VAR_P (decl))\n \t{\n+\t  /* Replace vars with their DECL_VALUE_EXPR if any.\n+\t     This is normally done during gimplification, but\n+\t     static var initializers are never gimplified.  */\n+\t  if (DECL_HAS_VALUE_EXPR_P (decl))\n+\t    {\n+\t      tree *p;\n+\t      for (p = tp; *p != decl; p = &TREE_OPERAND (*p, 0))\n+\t\t;\n+\t      *p = unshare_expr (DECL_VALUE_EXPR (decl));\n+\t      return record_reference (tp, walk_subtrees, data);\n+\t    }\n \t  varpool_node *vnode = varpool_node::get_create (decl);\n \t  ctx->varpool_node->create_reference (vnode, IPA_REF_ADDR);\n \t}"}, {"sha": "a35cedd05ccca003d08f8a47e73f7739fd04f6fb", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84e21115700523b4d0ac44275443f7b9c670344/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84e21115700523b4d0ac44275443f7b9c670344/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=b84e21115700523b4d0ac44275443f7b9c670344", "patch": "@@ -1035,16 +1035,6 @@ cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data_)\n \t}\n       break;\n \n-    case VAR_DECL:\n-      /* In initializers replace anon union artificial VAR_DECLs\n-\t with their DECL_VALUE_EXPRs, as nothing will do it later.  */\n-      if (DECL_ANON_UNION_VAR_P (stmt) && !data->genericize)\n-\t{\n-\t  *stmt_p = stmt = unshare_expr (DECL_VALUE_EXPR (stmt));\n-\t  break;\n-\t}\n-      break;\n-\n     default:\n       break;\n     }"}, {"sha": "923862e78d1a2e7c28752cbd8f5c4674deccd373", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp57.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84e21115700523b4d0ac44275443f7b9c670344/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84e21115700523b4d0ac44275443f7b9c670344/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp57.C?ref=b84e21115700523b4d0ac44275443f7b9c670344", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/108474\n+// { dg-do link { target c++17 } }\n+\n+struct T { int i, j; };\n+T h;\n+auto [i, j] = h;\n+int &r = i;\n+int s = i;\n+int *t = &i;\n+\n+void\n+foo (int **p, int *q)\n+{\n+  static int &u = i;\n+  static int v = i;\n+  static int *w = &i;\n+  int &x = i;\n+  int y = i;\n+  int *z = &i;\n+  *p = &i;\n+  *q = i;\n+}\n+\n+int\n+main ()\n+{\n+}"}, {"sha": "b2604373bde20cead235d3e96b455cb4f3999139", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp58.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b84e21115700523b4d0ac44275443f7b9c670344/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b84e21115700523b4d0ac44275443f7b9c670344/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp58.C?ref=b84e21115700523b4d0ac44275443f7b9c670344", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/108474\n+// { dg-do link { target c++17 } }\n+\n+namespace std {\n+  template <typename T> struct tuple_size;\n+  template <int, typename> struct tuple_element;\n+}\n+\n+struct A {\n+  int i;\n+  template <int I> int& get() { return i; }\n+};\n+\n+template <> struct std::tuple_size <A> { static const int value = 2; };\n+template <int I> struct std::tuple_element <I, A> { using type = int; };\n+\n+struct A a;\n+auto [i, j] = a;\n+int &r = i;\n+int s = i;\n+int *t = &i;\n+\n+void\n+foo (int **p, int *q)\n+{\n+  static int &u = i;\n+  static int v = i;\n+  static int *w = &i;\n+  int &x = i;\n+  int y = i;\n+  int *z = &i;\n+  *p = &i;\n+  *q = i;\n+}\n+\n+int\n+main ()\n+{\n+}"}]}