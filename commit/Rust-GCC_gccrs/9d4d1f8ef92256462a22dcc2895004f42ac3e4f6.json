{"sha": "9d4d1f8ef92256462a22dcc2895004f42ac3e4f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ0ZDFmOGVmOTIyNTY0NjJhMjJkY2MyODk1MDA0ZjQyYWMzZTRmNg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-04-16T17:31:00Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-04-16T17:31:00Z"}, "message": "double-int.h (tree_to_double_int): Convert to macro.\n\n\t* double-int.h (tree_to_double_int): Convert to macro.\n\t* double-int.c (tree_to_double_int): Remove.\n\nFrom-SVN: r158437", "tree": {"sha": "e6ff3785e037f37055445ae5e7c6e400f2143152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6ff3785e037f37055445ae5e7c6e400f2143152"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6/comments", "author": null, "committer": null, "parents": [{"sha": "607440898495d8998d9e0bea8484e57bb5ef1064", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/607440898495d8998d9e0bea8484e57bb5ef1064", "html_url": "https://github.com/Rust-GCC/gccrs/commit/607440898495d8998d9e0bea8484e57bb5ef1064"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "bbce85188bc29d43642acc6550d67a7d1cb013e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d4d1f8ef92256462a22dcc2895004f42ac3e4f6", "patch": "@@ -1,3 +1,8 @@\n+2010-04-16  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* double-int.h (tree_to_double_int): Convert to macro.\n+\t* double-int.c (tree_to_double_int): Remove.\n+\n 2010-04-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/43762"}, {"sha": "2af97ba0c62e90313e70fb3dcdda1aeeb1fae40f", "filename": "gcc/double-int.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=9d4d1f8ef92256462a22dcc2895004f42ac3e4f6", "patch": "@@ -842,18 +842,6 @@ double_int_sext (double_int cst, unsigned prec)\n   return r;\n }\n \n-/* Constructs long integer from tree CST.  The extra bits over the precision of\n-   the number are filled with sign bit if CST is signed, and with zeros if it\n-   is unsigned.  */\n-\n-double_int\n-tree_to_double_int (const_tree cst)\n-{\n-  /* We do not need to call double_int_restrict here to ensure the semantics as\n-     described, as this is the default one for trees.  */\n-  return TREE_INT_CST (cst);\n-}\n-\n /* Returns true if CST fits in unsigned HOST_WIDE_INT.  */\n \n bool"}, {"sha": "682034859b92bb22783e89ac4111887380763216", "filename": "gcc/double-int.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4d1f8ef92256462a22dcc2895004f42ac3e4f6/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=9d4d1f8ef92256462a22dcc2895004f42ac3e4f6", "patch": "@@ -63,7 +63,10 @@ typedef struct\n \n tree double_int_to_tree (tree, double_int);\n bool double_int_fits_to_tree_p (const_tree, double_int);\n-double_int tree_to_double_int (const_tree);\n+\n+/* Constructs double_int from tree CST.  */\n+\n+#define tree_to_double_int(cst) (TREE_INT_CST (cst))\n \n /* Constructs double_int from integer CST.  The bits over the precision of\n    HOST_WIDE_INT are filled with the sign bit.  */"}]}