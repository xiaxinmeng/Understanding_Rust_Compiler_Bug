{"sha": "150a829accd76ddd73c20628774cb0781f6e8bfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUwYTgyOWFjY2Q3NmRkZDczYzIwNjI4Nzc0Y2IwNzgxZjZlOGJmZQ==", "commit": {"author": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-03-22T14:43:15Z"}, "committer": {"name": "Alex Coplan", "email": "alex.coplan@arm.com", "date": "2021-03-22T14:43:15Z"}, "message": "arm: Fix MVE ICEs with vector moves and -mpure-code [PR97252]\n\nThis fixes around 500 ICEs in the testsuite which can be seen when\ntesting with -march=armv8.1-m.main+mve -mfloat-abi=hard -mpure-code\n(leaving the testsuite free of ICEs in this configuration). All of the\nICEs are in arm_print_operand (which is expecting a mem and gets another\nrtx, e.g. a const_vector) when running the output code for\n*mve_mov<mode> in alternative 4.\n\nThe issue is that MVE vector moves were relying on the arm_reorg pass to\nmove constant vectors that we can't easily synthesize to the literal\npool. This doesn't work for -mpure-code where the literal pool is\ndisabled. LLVM puts these in .rodata: I've chosen to do the same here.\n\nWith this change, for -mpure-code, we no longer want to allow a constant\non the RHS of a vector load in RA. To achieve this, I added a new\nconstraint which matches constants only if the literal pool is\navailable.\n\ngcc/ChangeLog:\n\n\tPR target/97252\n\t* config/arm/arm-protos.h (neon_make_constant): Add generate\n\targument to guard emitting insns, default to true.\n\t* config/arm/arm.c (arm_legitimate_constant_p_1): Reject\n\tCONST_VECTORs which neon_make_constant can't handle.\n\t(neon_vdup_constant): Add generate argument, avoid emitting\n\tinsns if it's not set.\n\t(neon_make_constant): Plumb new generate argument through.\n\t* config/arm/constraints.md (Ui): New. Use it...\n\t* config/arm/mve.md (*mve_mov<mode>): ... here.\n\t* config/arm/vec-common.md (movv8hf): Use neon_make_constant to\n\tsynthesize constants.", "tree": {"sha": "faa9ccc1f5819bc0fdead9671ae32024971d2686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faa9ccc1f5819bc0fdead9671ae32024971d2686"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/150a829accd76ddd73c20628774cb0781f6e8bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150a829accd76ddd73c20628774cb0781f6e8bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/150a829accd76ddd73c20628774cb0781f6e8bfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150a829accd76ddd73c20628774cb0781f6e8bfe/comments", "author": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acoplan-arm", "id": 86676934, "node_id": "MDQ6VXNlcjg2Njc2OTM0", "avatar_url": "https://avatars.githubusercontent.com/u/86676934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acoplan-arm", "html_url": "https://github.com/acoplan-arm", "followers_url": "https://api.github.com/users/acoplan-arm/followers", "following_url": "https://api.github.com/users/acoplan-arm/following{/other_user}", "gists_url": "https://api.github.com/users/acoplan-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/acoplan-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acoplan-arm/subscriptions", "organizations_url": "https://api.github.com/users/acoplan-arm/orgs", "repos_url": "https://api.github.com/users/acoplan-arm/repos", "events_url": "https://api.github.com/users/acoplan-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/acoplan-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57d9ac67280a09f3714086b95fe4c20e34ef5706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d9ac67280a09f3714086b95fe4c20e34ef5706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d9ac67280a09f3714086b95fe4c20e34ef5706"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "952a8256a1983ae72a81ba19c6eb0f254ee90ee2", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150a829accd76ddd73c20628774cb0781f6e8bfe/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150a829accd76ddd73c20628774cb0781f6e8bfe/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=150a829accd76ddd73c20628774cb0781f6e8bfe", "patch": "@@ -101,7 +101,7 @@ extern char *neon_output_shift_immediate (const char *, char, rtx *,\n \t\t\t\t\t  machine_mode, int, bool);\n extern void neon_pairwise_reduce (rtx, rtx, machine_mode,\n \t\t\t\t  rtx (*) (rtx, rtx, rtx));\n-extern rtx neon_make_constant (rtx);\n+extern rtx neon_make_constant (rtx, bool generate = true);\n extern tree arm_builtin_vectorized_function (unsigned int, tree, tree);\n extern void neon_expand_vector_init (rtx, rtx);\n extern void neon_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT, const_tree);"}, {"sha": "e89f5e24d3b5c3411575323593d1659d4841c043", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150a829accd76ddd73c20628774cb0781f6e8bfe/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150a829accd76ddd73c20628774cb0781f6e8bfe/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=150a829accd76ddd73c20628774cb0781f6e8bfe", "patch": "@@ -9461,6 +9461,9 @@ arm_tls_referenced_p (rtx x)\n static bool\n arm_legitimate_constant_p_1 (machine_mode, rtx x)\n {\n+  if (GET_CODE (x) == CONST_VECTOR && !neon_make_constant (x, false))\n+    return false;\n+\n   return flag_pic || !label_mentioned_p (x);\n }\n \n@@ -13025,12 +13028,14 @@ neon_pairwise_reduce (rtx op0, rtx op1, machine_mode mode,\n     }\n }\n \n-/* If VALS is a vector constant that can be loaded into a register\n-   using VDUP, generate instructions to do so and return an RTX to\n-   assign to the register.  Otherwise return NULL_RTX.  */\n+/* Return a non-NULL RTX iff VALS is a vector constant that can be\n+   loaded into a register using VDUP.\n+\n+   If this is the case, and GENERATE is set, we also generate\n+   instructions to do this and return an RTX to assign to the register.  */\n \n static rtx\n-neon_vdup_constant (rtx vals)\n+neon_vdup_constant (rtx vals, bool generate)\n {\n   machine_mode mode = GET_MODE (vals);\n   machine_mode inner_mode = GET_MODE_INNER (mode);\n@@ -13046,6 +13051,9 @@ neon_vdup_constant (rtx vals)\n        vdup.i16).  */\n     return NULL_RTX;\n \n+  if (!generate)\n+    return x;\n+\n   /* We can load this constant by using VDUP and a constant in a\n      single ARM register.  This will be cheaper than a vector\n      load.  */\n@@ -13054,13 +13062,15 @@ neon_vdup_constant (rtx vals)\n   return gen_vec_duplicate (mode, x);\n }\n \n-/* Generate code to load VALS, which is a PARALLEL containing only\n-   constants (for vec_init) or CONST_VECTOR, efficiently into a\n-   register.  Returns an RTX to copy into the register, or NULL_RTX\n-   for a PARALLEL that cannot be converted into a CONST_VECTOR.  */\n+/* Return a non-NULL RTX iff VALS, which is a PARALLEL containing only\n+   constants (for vec_init) or CONST_VECTOR, can be effeciently loaded\n+   into a register.\n+\n+   If this is the case, and GENERATE is set, we also generate code to do\n+   this and return an RTX to copy into the register.  */\n \n rtx\n-neon_make_constant (rtx vals)\n+neon_make_constant (rtx vals, bool generate)\n {\n   machine_mode mode = GET_MODE (vals);\n   rtx target;\n@@ -13092,7 +13102,7 @@ neon_make_constant (rtx vals)\n       && simd_immediate_valid_for_move (const_vec, mode, NULL, NULL))\n     /* Load using VMOV.  On Cortex-A8 this takes one cycle.  */\n     return const_vec;\n-  else if ((target = neon_vdup_constant (vals)) != NULL_RTX)\n+  else if ((target = neon_vdup_constant (vals, generate)) != NULL_RTX)\n     /* Loaded using VDUP.  On Cortex-A8 the VDUP takes one NEON\n        pipeline cycle; creating the constant takes one or two ARM\n        pipeline cycles.  */\n@@ -13102,7 +13112,7 @@ neon_make_constant (rtx vals)\n        (for either double or quad vectors).  We cannot take advantage\n        of single-cycle VLD1 because we need a PC-relative addressing\n        mode.  */\n-    return const_vec;\n+    return arm_disable_literal_pool ? NULL_RTX : const_vec;\n   else\n     /* A PARALLEL containing something not valid inside CONST_VECTOR.\n        We cannot construct an initializer.  */"}, {"sha": "a5a19a7ed5b57636e4e6e1e7f1e53048118497b9", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150a829accd76ddd73c20628774cb0781f6e8bfe/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150a829accd76ddd73c20628774cb0781f6e8bfe/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=150a829accd76ddd73c20628774cb0781f6e8bfe", "patch": "@@ -506,6 +506,13 @@\n \t\t   && mve_vector_mem_operand (GET_MODE (op),\n \t\t\t\t\t      XEXP (op, 0), true)\")))\n \n+(define_constraint \"Ui\"\n+  \"@internal\n+   Match a constant (as per the 'i' constraint) provided that we have the\n+   literal pool available.  This is useful for load insns that would need\n+   to move such constants to the literal pool after RA.\"\n+ (match_test \"!arm_disable_literal_pool && satisfies_constraint_i (op)\"))\n+\n (define_memory_constraint \"Uq\"\n  \"@internal\n   In ARM state an address valid in ldrsb instructions.\""}, {"sha": "440fd6adbacbe8f585a760a73f8229443648714f", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150a829accd76ddd73c20628774cb0781f6e8bfe/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150a829accd76ddd73c20628774cb0781f6e8bfe/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=150a829accd76ddd73c20628774cb0781f6e8bfe", "patch": "@@ -19,7 +19,7 @@\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Ux,w\")\n-\t(match_operand:MVE_types 1 \"general_operand\" \"w,r,w,Dn,Uxi,r,Dm,w,Ul\"))]\n+\t(match_operand:MVE_types 1 \"general_operand\" \"w,r,w,Dn,UxUi,r,Dm,w,Ul\"))]\n   \"TARGET_HAVE_MVE || TARGET_HAVE_MVE_FLOAT\"\n {\n   if (which_alternative == 3 || which_alternative == 6)"}, {"sha": "0e1318725b961c373f28a76a45d14dc710abf347", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150a829accd76ddd73c20628774cb0781f6e8bfe/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150a829accd76ddd73c20628774cb0781f6e8bfe/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=150a829accd76ddd73c20628774cb0781f6e8bfe", "patch": "@@ -74,6 +74,11 @@\n      {\n        if (!REG_P (operands[0]))\n \t operands[1] = force_reg (E_V8HFmode, operands[1]);\n+\telse if (TARGET_HAVE_MVE_FLOAT && CONSTANT_P (operands[1]))\n+\t  {\n+\t    operands[1] = neon_make_constant (operands[1]);\n+\t    gcc_assert (operands[1] != NULL_RTX);\n+\t  }\n      }\n })\n "}]}