{"sha": "2c726f944444e62eae732dcc704479096796187b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM3MjZmOTQ0NDQ0ZTYyZWFlNzMyZGNjNzA0NDc5MDk2Nzk2MTg3Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-08-01T17:32:13Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-08-01T17:32:13Z"}, "message": "mmx.md (vec_extractv2si_0): Add (r,x) alternative.\n\n\t* config/i386/mmx.md (vec_extractv2si_0): Add (r,x) alternative.\n\t(*vec_extractv2si_0_zext_sse4): New insn pattern.\n\t(*vec_extractv2si_0_zext): Ditto.\n\t(*vec_extractv2si_1): Add (rm,x) alternative.\n\t(*vec_extractv2si_1_zext): New insn pattern.\n\t(*vec_extractv2si_zext_mem): Add \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n\tinsn constraint.\n\nFrom-SVN: r273979", "tree": {"sha": "f016dc988838190e96f5b2d785689db13f19a385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f016dc988838190e96f5b2d785689db13f19a385"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c726f944444e62eae732dcc704479096796187b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c726f944444e62eae732dcc704479096796187b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c726f944444e62eae732dcc704479096796187b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c726f944444e62eae732dcc704479096796187b/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51007dc16a71e1289546f92dfebbe4ef3026176c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51007dc16a71e1289546f92dfebbe4ef3026176c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51007dc16a71e1289546f92dfebbe4ef3026176c"}], "stats": {"total": 92, "additions": 80, "deletions": 12}, "files": [{"sha": "0acaa7b66b9089c7461b0aefaa4d506b8e2934b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c726f944444e62eae732dcc704479096796187b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c726f944444e62eae732dcc704479096796187b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c726f944444e62eae732dcc704479096796187b", "patch": "@@ -1,3 +1,13 @@\n+2019-08-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/mmx.md (vec_extractv2si_0): Add (r,x) alternative.\n+\t(*vec_extractv2si_0_zext_sse4): New insn pattern.\n+\t(*vec_extractv2si_0_zext): Ditto.\n+\t(*vec_extractv2si_1): Add (rm,x) alternative.\n+\t(*vec_extractv2si_1_zext): New insn pattern.\n+\t(*vec_extractv2si_zext_mem): Add \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+\tinsn constraint.\n+\n 2019-08-01  Richard Biener  <rguenther@suse.de>\n \n \t* domwalk.c (bb_postorder): Remove static variable."}, {"sha": "67bcf5b240db61560080351a1f6ab08d6238178a", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 70, "deletions": 12, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c726f944444e62eae732dcc704479096796187b/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c726f944444e62eae732dcc704479096796187b/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=2c726f944444e62eae732dcc704479096796187b", "patch": "@@ -1620,43 +1620,86 @@\n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn_and_split \"*vec_extractv2si_0\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=x,m,y, m,r\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=x,m,y, m,r,r\")\n \t(vec_select:SI\n-\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \"xm,x,ym,y,m\")\n+\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \"xm,x,ym,y,m,x\")\n \t  (parallel [(const_int 0)])))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"operands[1] = gen_lowpart (SImode, operands[1]);\"\n-  [(set_attr \"mmx_isa\" \"*,*,native,native,*\")])\n+  [(set_attr \"isa\" \"*,*,*,*,*,sse2\")\n+   (set_attr \"mmx_isa\" \"*,*,native,native,*,*\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"5\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n+\n+(define_insn \"*vec_extractv2si_0_zext_sse4\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,x\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V2SI 1 \"register_operand\" \"x,x\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE4_1\"\n+  \"#\"\n+  [(set_attr \"isa\" \"x64,*\")\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"0\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n+\n+(define_insn \"*vec_extractv2si_0_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V2SI 1 \"register_operand\" \"x\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_FROM_VEC\"\n+  \"#\")\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V2SI 1 \"register_operand\")\n+\t    (parallel [(const_int 0)]))))]\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && TARGET_SSE2 && reload_completed\"\n+  [(set (match_dup 0) (zero_extend:DI (match_dup 1)))]\n+  \"operands[1] = gen_lowpart (SImode, operands[1]);\")\n \n ;; Avoid combining registers from different units in a single alternative,\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"*vec_extractv2si_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=y,x,x,y,x,r\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=y,rm,x,x,y,x,r\")\n \t(vec_select:SI\n-\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" 0,x,x,o,o,o\")\n+\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" 0,x ,x,x,o,o,o\")\n \t  (parallel [(const_int 1)])))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    punpckhdq\\t%0, %0\n+   %vpextrd\\t{$1, %1, %0|%0, %1, 1}\n    %vpshufd\\t{$0xe5, %1, %0|%0, %1, 0xe5}\n    shufps\\t{$0xe5, %1, %0|%0, %1, 0xe5}\n    #\n    #\n    #\"\n-  [(set_attr \"isa\" \"*,sse2,noavx,*,*,*\")\n-   (set_attr \"mmx_isa\" \"native,*,*,native,*,*\")\n-   (set_attr \"type\" \"mmxcvt,sseshuf1,sseshuf1,mmxmov,ssemov,imov\")\n+  [(set_attr \"isa\" \"*,sse4,sse2,noavx,*,*,*\")\n+   (set_attr \"mmx_isa\" \"native,*,*,*,native,*,*\")\n+   (set_attr \"type\" \"mmxcvt,ssemov,sseshuf1,sseshuf1,mmxmov,ssemov,imov\")\n    (set (attr \"length_immediate\")\n-     (if_then_else (eq_attr \"alternative\" \"1,2\")\n+     (if_then_else (eq_attr \"alternative\" \"1,2,3\")\n \t\t   (const_string \"1\")\n \t\t   (const_string \"*\")))\n-   (set_attr \"prefix\" \"orig,maybe_vex,orig,orig,orig,orig\")\n-   (set_attr \"mode\" \"DI,TI,V4SF,SI,SI,SI\")])\n+   (set_attr \"prefix\" \"orig,maybe_vex,maybe_vex,orig,orig,orig,orig\")\n+   (set_attr \"mode\" \"DI,TI,TI,V4SF,SI,SI,SI\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\")\n@@ -1667,13 +1710,28 @@\n   [(set (match_dup 0) (match_dup 1))]\n   \"operands[1] = adjust_address (operands[1], SImode, 4);\")\n \n+(define_insn \"*vec_extractv2si_1_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V2SI 1 \"register_operand\" \"x\")\n+\t    (parallel [(const_int 1)]))))]\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && TARGET_64BIT && TARGET_SSE4_1\"\n+  \"%vpextrd\\t{$1, %1, %k0|%k0, %1, 1}\"\n+  [(set_attr \"type\" \"sselog1\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn_and_split \"*vec_extractv2si_zext_mem\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=y,x,r\")\n \t(zero_extend:DI\n \t  (vec_select:SI\n \t    (match_operand:V2SI 1 \"memory_operand\" \"o,o,o\")\n \t    (parallel [(match_operand:SI 2 \"const_0_to_1_operand\")]))))]\n-  \"TARGET_64BIT\"\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_64BIT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 0) (zero_extend:DI (match_dup 1)))]"}]}