{"sha": "271319ae2b889663579c2902f768f5e5e95394ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcxMzE5YWUyYjg4OTY2MzU3OWMyOTAyZjc2OGY1ZTVlOTUzOTRhYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-10-06T14:56:34Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-10-06T14:56:34Z"}, "message": "sse.md (andnot<mode>3): Add FALLTHRU comments.\n\n\t* config/i386/sse.md (andnot<mode>3): Add FALLTHRU comments.\n\tIntroduce ssesuffix variable.\n\t(<mask_codefor><code><mode>3<mask_name>): Ditto.\n\t(*<code><mode>3): Ditto.\n\nFrom-SVN: r240834", "tree": {"sha": "2c12ef6aad77ba713503a870d1d9cde058cbb2b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c12ef6aad77ba713503a870d1d9cde058cbb2b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/271319ae2b889663579c2902f768f5e5e95394ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271319ae2b889663579c2902f768f5e5e95394ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/271319ae2b889663579c2902f768f5e5e95394ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/271319ae2b889663579c2902f768f5e5e95394ab/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6a2617973f6e7d1359a08b941c27c6d5287563b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a2617973f6e7d1359a08b941c27c6d5287563b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a2617973f6e7d1359a08b941c27c6d5287563b"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "6b8acef79bc9527b5d4941dff87fa12bf51bb8e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271319ae2b889663579c2902f768f5e5e95394ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271319ae2b889663579c2902f768f5e5e95394ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=271319ae2b889663579c2902f768f5e5e95394ab", "patch": "@@ -1,3 +1,10 @@\n+2016-10-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (andnot<mode>3): Add FALLTHRU comments.\n+\tIntroduce ssesuffix variable.\n+\t(<mask_codefor><code><mode>3<mask_name>): Ditto.\n+\t(*<code><mode>3): Ditto.\n+\n 2016-10-06  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* postreload.c (reload_cse_simplify): Skip also USE when detecting"}, {"sha": "fde520f1ac0d817f3f5e298b12faab88dc76e41b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/271319ae2b889663579c2902f768f5e5e95394ab/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/271319ae2b889663579c2902f768f5e5e95394ab/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=271319ae2b889663579c2902f768f5e5e95394ab", "patch": "@@ -11263,46 +11263,52 @@\n   static char buf[64];\n   const char *ops;\n   const char *tmp;\n+  const char *ssesuffix;\n \n   switch (get_attr_mode (insn))\n     {\n     case MODE_XI:\n       gcc_assert (TARGET_AVX512F);\n+      /* FALLTHRU */\n     case MODE_OI:\n       gcc_assert (TARGET_AVX2);\n+      /* FALLTHRU */\n     case MODE_TI:\n       gcc_assert (TARGET_SSE2);\n+      tmp = \"pandn\";\n       switch (<MODE>mode)\n \t{\n \tcase V64QImode:\n \tcase V32HImode:\n \t  /* There is no vpandnb or vpandnw instruction, nor vpandn for\n \t     512-bit vectors. Use vpandnq instead.  */\n-\t  tmp = \"pandnq\";\n+\t  ssesuffix = \"q\";\n \t  break;\n \tcase V16SImode:\n \tcase V8DImode:\n-\t  tmp = \"pandn<ssemodesuffix>\";\n+\t  ssesuffix = \"<ssemodesuffix>\";\n \t  break;\n \tcase V8SImode:\n \tcase V4DImode:\n \tcase V4SImode:\n \tcase V2DImode:\n-\t  tmp = TARGET_AVX512VL ? \"pandn<ssemodesuffix>\" : \"pandn\";\n+\t  ssesuffix = TARGET_AVX512VL ? \"<ssemodesuffix>\" : \"\";\n \t  break;\n \tdefault:\n-\t  tmp = TARGET_AVX512VL ? \"pandnq\" : \"pandn\";\n-\t  break;\n+\t  ssesuffix = TARGET_AVX512VL ? \"q\" : \"\";\n \t}\n       break;\n \n     case MODE_V16SF:\n       gcc_assert (TARGET_AVX512F);\n+      /* FALLTHRU */\n     case MODE_V8SF:\n       gcc_assert (TARGET_AVX);\n+      /* FALLTHRU */\n     case MODE_V4SF:\n       gcc_assert (TARGET_SSE);\n-      tmp = \"andnps\";\n+      tmp = \"andn\";\n+      ssesuffix = \"ps\";\n       break;\n \n     default:\n@@ -11312,16 +11318,16 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      ops = \"%s\\t{%%2, %%0|%%0, %%2}\";\n+      ops = \"%s%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      ops = \"v%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      ops = \"v%s%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  snprintf (buf, sizeof (buf), ops, tmp);\n+  snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n   return buf;\n }\n   [(set_attr \"isa\" \"noavx,avx\")\n@@ -11387,6 +11393,7 @@\n   static char buf[64];\n   const char *ops;\n   const char *tmp;\n+  const char *ssesuffix;\n \n   switch (get_attr_mode (insn))\n     {\n@@ -11398,17 +11405,18 @@\n       /* FALLTHRU */\n     case MODE_TI:\n       gcc_assert (TARGET_SSE2);\n+      tmp = \"p<logic>\";\n       switch (<MODE>mode)\n \t{\n \tcase V16SImode:\n \tcase V8DImode:\n-\t  tmp = \"p<logic><ssemodesuffix>\";\n+\t  ssesuffix = \"<ssemodesuffix>\";\n \t  break;\n \tcase V8SImode:\n \tcase V4DImode:\n \tcase V4SImode:\n \tcase V2DImode:\n-\t  tmp = TARGET_AVX512VL ? \"p<logic><ssemodesuffix>\" : \"p<logic>\";\n+\t  ssesuffix = TARGET_AVX512VL ? \"<ssemodesuffix>\" : \"\";\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -11417,9 +11425,11 @@\n \n     case MODE_V8SF:\n       gcc_assert (TARGET_AVX);\n+      /* FALLTHRU */\n     case MODE_V4SF:\n       gcc_assert (TARGET_SSE);\n-      tmp = \"<logic>ps\";\n+      tmp = \"<logic>\";\n+      ssesuffix = \"ps\";\n       break;\n \n     default:\n@@ -11430,18 +11440,18 @@\n     {\n     case 0:\n       if (<mask_applied>)\n-        ops = \"v%s\\t{%%2, %%0, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%0, %%2}\";\n+        ops = \"v%s%s\\t{%%2, %%0, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%0, %%2}\";\n       else\n-        ops = \"%s\\t{%%2, %%0|%%0, %%2}\";\n+        ops = \"%s%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      ops = \"v%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\";\n+      ops = \"v%s%s\\t{%%2, %%1, %%0<mask_operand3_1>|%%0<mask_operand3_1>, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  snprintf (buf, sizeof (buf), ops, tmp);\n+  snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n   return buf;\n }\n   [(set_attr \"isa\" \"noavx,avx\")\n@@ -11492,18 +11502,17 @@\n       /* FALLTHRU */\n     case MODE_TI:\n       gcc_assert (TARGET_SSE2);\n+      tmp = \"p<logic>\";\n       switch (<MODE>mode)\n \t{\n \tcase V64QImode:\n \tcase V32HImode:\n-\t  tmp = \"p<logic>\";\n \t  ssesuffix = \"q\";\n \t  break;\n \tcase V32QImode:\n \tcase V16HImode:\n \tcase V16QImode:\n \tcase V8HImode:\n-\t  tmp = \"p<logic>\";\n \t  ssesuffix = TARGET_AVX512VL ? \"q\" : \"\";\n \t  break;\n \tdefault:\n@@ -11513,10 +11522,11 @@\n \n     case MODE_V8SF:\n       gcc_assert (TARGET_AVX);\n+      /* FALLTHRU */\n     case MODE_V4SF:\n       gcc_assert (TARGET_SSE);\n-      tmp = \"<logic>ps\";\n-      ssesuffix = \"\";\n+      tmp = \"<logic>\";\n+      ssesuffix = \"ps\";\n       break;\n \n     default:\n@@ -11526,17 +11536,16 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      ops = \"%s\\t{%%2, %%0|%%0, %%2}\";\n-      snprintf (buf, sizeof (buf), ops, tmp);\n+      ops = \"%s%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n       ops = \"v%s%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n-      snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n+  snprintf (buf, sizeof (buf), ops, tmp, ssesuffix);\n   return buf;\n }\n   [(set_attr \"isa\" \"noavx,avx\")"}]}