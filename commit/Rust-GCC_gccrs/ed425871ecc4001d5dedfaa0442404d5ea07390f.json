{"sha": "ed425871ecc4001d5dedfaa0442404d5ea07390f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ0MjU4NzFlY2M0MDAxZDVkZWRmYWEwNDQyNDA0ZDVlYTA3MzkwZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2005-02-02T15:59:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2005-02-02T15:59:59Z"}, "message": "gcse.c (struct reg_set): Store the block index where the register was set rather than the setting insn.\n\n        * gcse.c (struct reg_set): Store the block index where the register\n        was set rather than the setting insn.\n        (record_one_set, compute_transp): Corresponding changes.\n        (pre_insert_copy_insn): Do not call replace_one_set.\n        (replace_one_set): Remove.\n\nFrom-SVN: r94591", "tree": {"sha": "06e818758d3379c45b2cd03953cef79b657b5515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06e818758d3379c45b2cd03953cef79b657b5515"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed425871ecc4001d5dedfaa0442404d5ea07390f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed425871ecc4001d5dedfaa0442404d5ea07390f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed425871ecc4001d5dedfaa0442404d5ea07390f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed425871ecc4001d5dedfaa0442404d5ea07390f/comments", "author": null, "committer": null, "parents": [{"sha": "d02d7104e17045297a6f8a5a0fdae67ad8c34510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02d7104e17045297a6f8a5a0fdae67ad8c34510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d02d7104e17045297a6f8a5a0fdae67ad8c34510"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "d1096267bbcaabd90970f318d1fcb293dee68170", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed425871ecc4001d5dedfaa0442404d5ea07390f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed425871ecc4001d5dedfaa0442404d5ea07390f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed425871ecc4001d5dedfaa0442404d5ea07390f", "patch": "@@ -1,3 +1,11 @@\n+2005-02-02  Jeff Law  <law@redhat.com>\n+\n+\t* gcse.c (struct reg_set): Store the block index where the register\n+\twas set rather than the setting insn.\n+\t(record_one_set, compute_transp): Corresponding changes.\n+\t(pre_insert_copy_insn): Do not call replace_one_set.\n+\t(replace_one_set): Remove.\n+\n 2005-02-02  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR other/15514"}, {"sha": "5535aa121a717be12cdeec9ff846829ac5c16e20", "filename": "gcc/gcse.c", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed425871ecc4001d5dedfaa0442404d5ea07390f/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed425871ecc4001d5dedfaa0442404d5ea07390f/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=ed425871ecc4001d5dedfaa0442404d5ea07390f", "patch": "@@ -436,8 +436,8 @@ typedef struct reg_set\n {\n   /* The next setting of this register.  */\n   struct reg_set *next;\n-  /* The insn where it was set.  */\n-  rtx insn;\n+  /* The index of the block where it was set.  */\n+  int bb_index;\n } reg_set;\n \n static reg_set **reg_set_table;\n@@ -535,7 +535,6 @@ static void free_gcse_mem (void);\n static void alloc_reg_set_mem (int);\n static void free_reg_set_mem (void);\n static void record_one_set (int, rtx);\n-static void replace_one_set (int, rtx, rtx);\n static void record_set_info (rtx, rtx, void *);\n static void compute_sets (rtx);\n static void hash_scan_insn (rtx, struct hash_table *, int);\n@@ -1104,24 +1103,6 @@ free_reg_set_mem (void)\n   obstack_free (&reg_set_obstack, NULL);\n }\n \n-/* An OLD_INSN that used to set REGNO was replaced by NEW_INSN.\n-   Update the corresponding `reg_set_table' entry accordingly.\n-   We assume that NEW_INSN is not already recorded in reg_set_table[regno].  */\n-\n-static void\n-replace_one_set (int regno, rtx old_insn, rtx new_insn)\n-{\n-  struct reg_set *reg_info;\n-  if (regno >= reg_set_table_size)\n-    return;\n-  for (reg_info = reg_set_table[regno]; reg_info; reg_info = reg_info->next)\n-    if (reg_info->insn == old_insn)\n-      {\n-        reg_info->insn = new_insn;\n-        break;\n-      }\n-}\n-\n /* Record REGNO in the reg_set table.  */\n \n static void\n@@ -1144,7 +1125,7 @@ record_one_set (int regno, rtx insn)\n \n   new_reg_info = obstack_alloc (&reg_set_obstack, sizeof (struct reg_set));\n   bytes_used += sizeof (struct reg_set);\n-  new_reg_info->insn = insn;\n+  new_reg_info->bb_index = BLOCK_NUM (insn);\n   new_reg_info->next = reg_set_table[regno];\n   reg_set_table[regno] = new_reg_info;\n }\n@@ -2468,7 +2449,7 @@ compute_transp (rtx x, int indx, sbitmap *bmap, int set_p)\n \t  else\n \t    {\n \t      for (r = reg_set_table[REGNO (x)]; r != NULL; r = r->next)\n-\t\tSET_BIT (bmap[BLOCK_NUM (r->insn)], indx);\n+\t\tSET_BIT (bmap[r->bb_index], indx);\n \t    }\n \t}\n       else\n@@ -2482,7 +2463,7 @@ compute_transp (rtx x, int indx, sbitmap *bmap, int set_p)\n \t  else\n \t    {\n \t      for (r = reg_set_table[REGNO (x)]; r != NULL; r = r->next)\n-\t\tRESET_BIT (bmap[BLOCK_NUM (r->insn)], indx);\n+\t\tRESET_BIT (bmap[r->bb_index], indx);\n \t    }\n \t}\n \n@@ -4260,7 +4241,6 @@ pre_insert_copy_insn (struct expr *expr, rtx insn)\n           new_insn = emit_insn_after (new_insn, insn);\n \n           /* Keep register set table up to date.  */\n-          replace_one_set (REGNO (old_reg), insn, new_insn);\n           record_one_set (regno, insn);\n         }\n       else"}]}