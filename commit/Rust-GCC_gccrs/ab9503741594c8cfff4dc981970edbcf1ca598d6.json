{"sha": "ab9503741594c8cfff4dc981970edbcf1ca598d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI5NTAzNzQxNTk0YzhjZmZmNGRjOTgxOTcwZWRiY2YxY2E1OThkNg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-13T03:03:10Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-13T03:03:10Z"}, "message": "[RS6000] Ignore \"c\", \"l\" and \"h\" for register preference\n\nThis catches a few places where move insn patterns don't slightly\ndisparage CTR, LR and VRSAVE regs.  Also fixes the doc for the rs6000\nh constraint, and removes an r->cl alternative covered by r->h.\n\n\t* gcc/doc/md.texi (Machine Constraints): Correct rs6000 h constraint\n\tdescription.\n\t* config/rs6000/rs6000.md (movsi_internal1): Delete MT%0 case\n\tcovered by alternative.\n\t(movcc_internal1): Ignore h for register preference.\n\t(mov<mode>_hardfloat64): Likewise.\n\t(mov<mode>_softfloat): Ignore c, l, h for register preference.\n\nFrom-SVN: r266044", "tree": {"sha": "41acd10a76e15de36f2f883dd8f1db7ab31d39de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41acd10a76e15de36f2f883dd8f1db7ab31d39de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab9503741594c8cfff4dc981970edbcf1ca598d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9503741594c8cfff4dc981970edbcf1ca598d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab9503741594c8cfff4dc981970edbcf1ca598d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab9503741594c8cfff4dc981970edbcf1ca598d6/comments", "author": null, "committer": null, "parents": [{"sha": "37e5eefb92cdc6a7a320eecb5b81bcb3e526c35f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e5eefb92cdc6a7a320eecb5b81bcb3e526c35f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e5eefb92cdc6a7a320eecb5b81bcb3e526c35f"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "2b8b44ab834d788f9eae753df011e64c0015c6a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9503741594c8cfff4dc981970edbcf1ca598d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9503741594c8cfff4dc981970edbcf1ca598d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab9503741594c8cfff4dc981970edbcf1ca598d6", "patch": "@@ -1,9 +1,19 @@\n+2018-11-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc/doc/md.texi (Machine Constraints): Correct rs6000 h constraint\n+\tdescription.\n+\t* config/rs6000/rs6000.md (movsi_internal1): Delete MT%0 case\n+\tcovered by alternative.\n+\t(movcc_internal1): Ignore h for register preference.\n+\t(mov<mode>_hardfloat64): Likewise.\n+\t(mov<mode>_softfloat): Ignore c, l, h for register preference.\n+\n 2018-11-12  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR preprocessor/47823\n \t* doc/cpp.texi (Alternatives to Wrapper #ifndef): Move #pragma once\n \tdocumentation to...\n-\t(Pragmas): ...here.  \n+\t(Pragmas): ...here.\n \t* doc/extend.texi (Pragmas): Note additional pragmas documented\n \tin the CPP manual.\n "}, {"sha": "3ed6659986ca8958c62da58350df9de3a63d057d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9503741594c8cfff4dc981970edbcf1ca598d6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9503741594c8cfff4dc981970edbcf1ca598d6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ab9503741594c8cfff4dc981970edbcf1ca598d6", "patch": "@@ -6839,21 +6839,21 @@\n ;;\t\tSTW          STFIWX       STXSIWX      LI           LIS\n ;;\t\t#            XXLOR        XXSPLTIB 0   XXSPLTIB -1  VSPLTISW\n ;;\t\tXXLXOR 0     XXLORC -1    P9 const     MTVSRWZ      MFVSRWZ\n-;;\t\tMF%1         MT%0         MT%0         NOP\n+;;\t\tMF%1         MT%0         NOP\n (define_insn \"*movsi_internal1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n \t\t\"=r,         r,           r,           ?*wI,        ?*wH,\n \t\t m,          ?Z,          ?Z,          r,           r,\n \t\t r,          ?*wIwH,      ?*wJwK,      ?*wJwK,      ?*wu,\n \t\t ?*wJwK,     ?*wH,        ?*wK,        ?*wIwH,      ?r,\n-\t\t r,          *c*l,        *h,          *h\")\n+\t\t r,          *h,          *h\")\n \n \t(match_operand:SI 1 \"input_operand\"\n \t\t\"r,          U,           m,           Z,           Z,\n \t\t r,          wI,          wH,          I,           L,\n \t\t n,          wIwH,        O,           wM,          wB,\n \t\t O,          wM,          wS,          r,           wIwH,\n-\t\t *h,         r,           r,           0\"))]\n+\t\t *h,         r,           0\"))]\n \n   \"gpc_reg_operand (operands[0], SImode)\n    || gpc_reg_operand (operands[1], SImode)\"\n@@ -6880,21 +6880,20 @@\n    mfvsrwz %0,%x1\n    mf%1 %0\n    mt%0 %1\n-   mt%0 %1\n    nop\"\n   [(set_attr \"type\"\n \t\t\"*,          *,           load,        fpload,      fpload,\n \t\t store,      fpstore,     fpstore,     *,           *,\n \t\t *,          veclogical,  vecsimple,   vecsimple,   vecsimple,\n \t\t veclogical, veclogical,  vecsimple,   mffgpr,      mftgpr,\n-\t\t *,           *,           *,           *\")\n+\t\t *,          *,           *\")\n \n    (set_attr \"length\"\n \t\t\"4,          4,           4,           4,           4,\n \t\t 4,          4,           4,           4,           4,\n \t\t 8,          4,           4,           4,           4,\n \t\t 4,          4,           8,           4,           4,\n-\t\t 4,          4,           4,           4\")])\n+\t\t 4,          4,           4\")])\n \n ;; Like movsi, but adjust a SF value to be used in a SI context, i.e.\n ;; (set (reg:SI ...) (subreg:SI (reg:SF ...) 0))\n@@ -7172,9 +7171,9 @@\n \n (define_insn \"*movcc_internal1\"\n   [(set (match_operand:CC 0 \"nonimmediate_operand\"\n-\t\t\t    \"=y,x,?y,y,r,r,r,r,r,*c*l,r,m\")\n+\t\t\t    \"=y,x,?y,y,r,r,r,r, r,*c*l,r,m\")\n \t(match_operand:CC 1 \"general_operand\"\n-\t\t\t    \" y,r, r,O,x,y,r,I,h,   r,m,r\"))]\n+\t\t\t    \" y,r, r,O,x,y,r,I,*h,   r,m,r\"))]\n   \"register_operand (operands[0], CCmode)\n    || register_operand (operands[1], CCmode)\"\n   \"@\n@@ -7326,11 +7325,11 @@\n ;;\tLIS          G-const.   F/n-const  NOP\n (define_insn \"*mov<mode>_softfloat\"\n   [(set (match_operand:FMOVE32 0 \"nonimmediate_operand\"\n-\t\"=r,         cl,        r,         r,         m,         r,\n+\t\"=r,         *c*l,      r,         r,         m,         r,\n           r,         r,         r,         *h\")\n \n \t(match_operand:FMOVE32 1 \"input_operand\"\n-\t \"r,         r,         h,         m,         r,         I,\n+\t \"r,         r,         *h,        m,         r,         I,\n           L,         G,         Fn,        0\"))]\n \n   \"(gpc_reg_operand (operands[0], <MODE>mode)\n@@ -7597,7 +7596,7 @@\n \t(match_operand:FMOVE64 1 \"input_operand\"\n             \"d,           m,          d,          wY,         <f64_p9>,\n              Z,           <f64_av>,   <f64_vsx>,  <zero_fp>,  <zero_fp>,\n-             r,           YZ,         r,          r,          h,\n+             r,           YZ,         r,          r,          *h,\n              0,           wg,         r,          <f64_dm>,   r\"))]\n \n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT\n@@ -7638,11 +7637,11 @@\n \n (define_insn \"*mov<mode>_softfloat64\"\n   [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\"\n-           \"=Y,       r,      r,      cl,     r,      r,\n+           \"=Y,       r,      r,      *c*l,   r,      r,\n              r,       r,      *h\")\n \n \t(match_operand:FMOVE64 1 \"input_operand\"\n-            \"r,       Y,      r,      r,      h,      G,\n+            \"r,       Y,      r,      r,      *h,     G,\n              H,       F,      0\"))]\n \n   \"TARGET_POWERPC64 && TARGET_SOFT_FLOAT"}, {"sha": "1c37a053a941d6f3afcad078bb06f37b821facee", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab9503741594c8cfff4dc981970edbcf1ca598d6/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab9503741594c8cfff4dc981970edbcf1ca598d6/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=ab9503741594c8cfff4dc981970edbcf1ca598d6", "patch": "@@ -3273,7 +3273,7 @@ instructions.\n Vector constant that can be loaded with XXSPLTIB & sign extension.\n \n @item h\n-@samp{MQ}, @samp{CTR}, or @samp{LINK} register\n+@samp{VRSAVE}, @samp{CTR}, or @samp{LINK} register\n \n @item c\n @samp{CTR} register"}]}