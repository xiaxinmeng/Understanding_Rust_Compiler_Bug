{"sha": "cc74ac5dbc5780d79950523adfc6d9fc63e09b9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M3NGFjNWRiYzU3ODBkNzk5NTA1MjNhZGZjNmQ5ZmM2M2UwOWI5Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-12-29T22:04:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-12-29T22:04:16Z"}, "message": "hashtable_policy.h (struct _Ebo_helper<>): Don't use _N, badname on Solaris; minor stylistic changes.\n\n2011-12-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/hashtable_policy.h (struct _Ebo_helper<>): Don't use\n\t_N, badname on Solaris; minor stylistic changes.\n\nFrom-SVN: r182734", "tree": {"sha": "5a3d1a471a6c93647d91683768dac0923cdbaf6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a3d1a471a6c93647d91683768dac0923cdbaf6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc74ac5dbc5780d79950523adfc6d9fc63e09b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc74ac5dbc5780d79950523adfc6d9fc63e09b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc74ac5dbc5780d79950523adfc6d9fc63e09b9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc74ac5dbc5780d79950523adfc6d9fc63e09b9b/comments", "author": null, "committer": null, "parents": [{"sha": "567210bcd2201e4758873a425f0e71d26c132ed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567210bcd2201e4758873a425f0e71d26c132ed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567210bcd2201e4758873a425f0e71d26c132ed4"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "7a35a3aa10406b0df22055ff8cd284793985da6e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc74ac5dbc5780d79950523adfc6d9fc63e09b9b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc74ac5dbc5780d79950523adfc6d9fc63e09b9b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cc74ac5dbc5780d79950523adfc6d9fc63e09b9b", "patch": "@@ -1,3 +1,8 @@\n+2011-12-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/hashtable_policy.h (struct _Ebo_helper<>): Don't use\n+\t_N, badname on Solaris; minor stylistic changes.\n+\n 2011-12-29  Fran\u00e7ois Dumont <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/51608"}, {"sha": "261e56bfcb0fa730ff016b3112e07c0631aecbd7", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc74ac5dbc5780d79950523adfc6d9fc63e09b9b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc74ac5dbc5780d79950523adfc6d9fc63e09b9b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=cc74ac5dbc5780d79950523adfc6d9fc63e09b9b", "patch": "@@ -515,45 +515,45 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Helper class using EBO when it is not forbidden, type is not final,\n   // and when it worth it, type is empty.\n-  template<int _N, typename _Tp,\n+  template<int _Nm, typename _Tp,\n \t   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>\n     struct _Ebo_helper;\n \n-  // Specialization using EBO\n-  template<int _N, typename _Tp>\n-    struct _Ebo_helper<_N, _Tp, true> : _Tp\n+  // Specialization using EBO.\n+  template<int _Nm, typename _Tp>\n+    struct _Ebo_helper<_Nm, _Tp, true> : _Tp\n     {\n       _Ebo_helper() = default;\n       _Ebo_helper(const _Tp& __tp) : _Tp(__tp)\n       { }\n \n       static const _Tp&\n-      _S_cget(const _Ebo_helper<_N, _Tp, true>& __eboh)\n+      _S_cget(const _Ebo_helper& __eboh)\n       { return static_cast<const _Tp&>(__eboh); }\n \n       static _Tp&\n-      _S_get(_Ebo_helper<_N, _Tp, true>& __eboh)\n+      _S_get(_Ebo_helper& __eboh)\n       { return static_cast<_Tp&>(__eboh); }\n     };\n \n-  // Specialization not using EBO\n-  template<int _N, typename _Tp>\n-    struct _Ebo_helper<_N, _Tp, false>\n+  // Specialization not using EBO.\n+  template<int _Nm, typename _Tp>\n+    struct _Ebo_helper<_Nm, _Tp, false>\n     {\n       _Ebo_helper() = default;\n-      _Ebo_helper(const _Tp& __tp) : m_tp(__tp)\n+      _Ebo_helper(const _Tp& __tp) : __m_tp(__tp)\n       { }\n \n       static const _Tp&\n-      _S_cget(const _Ebo_helper<_N, _Tp, false>& __eboh)\n-      { return __eboh.m_tp; }\n+      _S_cget(const _Ebo_helper& __eboh)\n+      { return __eboh.__m_tp; }\n \n       static _Tp&\n-      _S_get(_Ebo_helper<_N, _Tp, false>& __eboh)\n-      { return __eboh.m_tp; }\n+      _S_get(_Ebo_helper& __eboh)\n+      { return __eboh.__m_tp; }\n \n     private:\n-      _Tp m_tp;\n+      _Tp __m_tp;\n     };\n \n   // Class template _Hash_code_base.  Encapsulates two policy issues that\n@@ -583,7 +583,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Key, typename _Value, typename _ExtractKey, \n \t   typename _H1, typename _H2, typename _Hash>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>\n-      : _Ebo_helper<0, _ExtractKey>, _Ebo_helper<1, _Hash>\n+    : _Ebo_helper<0, _ExtractKey>, _Ebo_helper<1, _Hash>\n     {\n     private:\n       typedef _Ebo_helper<0, _ExtractKey> _EboExtractKey;\n@@ -655,7 +655,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,\n \t\t\t   _Default_ranged_hash, false>\n-      : _Ebo_helper<0, _ExtractKey>, _Ebo_helper<1, _H1>, _Ebo_helper<2, _H2>\n+    : _Ebo_helper<0, _ExtractKey>, _Ebo_helper<1, _H1>, _Ebo_helper<2, _H2>\n     {\n     private:\n       typedef _Ebo_helper<0, _ExtractKey> _EboExtractKey;\n@@ -732,7 +732,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2>\n     struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,\n \t\t\t   _Default_ranged_hash, true>\n-      : _Ebo_helper<0, _ExtractKey>, _Ebo_helper<1, _H1>, _Ebo_helper<2, _H2>\n+    : _Ebo_helper<0, _ExtractKey>, _Ebo_helper<1, _H1>, _Ebo_helper<2, _H2>\n     {\n     private:\n       typedef _Ebo_helper<0, _ExtractKey> _EboExtractKey;\n@@ -835,9 +835,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _H1, typename _H2, typename _Hash,\n \t   bool __cache_hash_code>\n   struct _Hashtable_base\n-    : _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash,\n-\t\t      __cache_hash_code>,\n-      _Ebo_helper<0, _Equal>\n+  : _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash,\n+\t\t    __cache_hash_code>,\n+    _Ebo_helper<0, _Equal>\n   {\n   private:\n     typedef _Ebo_helper<0, _Equal> _EboEqual;"}]}