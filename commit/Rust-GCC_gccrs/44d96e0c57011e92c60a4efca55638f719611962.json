{"sha": "44d96e0c57011e92c60a4efca55638f719611962", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRkOTZlMGM1NzAxMWU5MmM2MGE0ZWZjYTU1NjM4ZjcxOTYxMTk2Mg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-06-24T04:44:53Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-06-24T04:44:53Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (RUNTEST): Added AM_RUNTESTFLAGS.\n\t(AM_RUNTESTFLAGS): New variable.\n\t(RUNTESTFLAGS): Don't define.\n\t* lib/libjava.exp (libjava_invoke): New proc.\n\t(test_libjava_from_source): Use it.\n\t(test_libjava_from_javac): Likewise.\n\t(libjava_find_gij): New proc.\n\nFrom-SVN: r54939", "tree": {"sha": "3e6ac53d275187303569f8dc11255bfc5d613cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e6ac53d275187303569f8dc11255bfc5d613cd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44d96e0c57011e92c60a4efca55638f719611962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d96e0c57011e92c60a4efca55638f719611962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44d96e0c57011e92c60a4efca55638f719611962", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44d96e0c57011e92c60a4efca55638f719611962/comments", "author": null, "committer": null, "parents": [{"sha": "0228d06bca95f3605ab1a1558a6ca9e3aa88c028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0228d06bca95f3605ab1a1558a6ca9e3aa88c028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0228d06bca95f3605ab1a1558a6ca9e3aa88c028"}], "stats": {"total": 250, "additions": 125, "deletions": 125}, "files": [{"sha": "228e6f7bd0d267a060549fb5b2ac0e01919dc2b5", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d96e0c57011e92c60a4efca55638f719611962/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d96e0c57011e92c60a4efca55638f719611962/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=44d96e0c57011e92c60a4efca55638f719611962", "patch": "@@ -1,3 +1,14 @@\n+2002-06-23  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (RUNTEST): Added AM_RUNTESTFLAGS.\n+\t(AM_RUNTESTFLAGS): New variable.\n+\t(RUNTESTFLAGS): Don't define.\n+\t* lib/libjava.exp (libjava_invoke): New proc.\n+\t(test_libjava_from_source): Use it.\n+\t(test_libjava_from_javac): Likewise.\n+\t(libjava_find_gij): New proc.\n+\n 2002-06-12  Tom Tromey  <tromey@redhat.com>\n \n \t* lib/libjava.exp (test_libjava): Fixed typo."}, {"sha": "4bfc50dbb110e99dfe6eede2dfcd6cf0d5298145", "filename": "libjava/testsuite/Makefile.am", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d96e0c57011e92c60a4efca55638f719611962/libjava%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d96e0c57011e92c60a4efca55638f719611962/libjava%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.am?ref=44d96e0c57011e92c60a4efca55638f719611962", "patch": "@@ -7,9 +7,9 @@ EXPECT = `if [ -f $(top_builddir)/../expect/expect ] ; then \\\n             echo $(top_builddir)/../expect/expect ; \\\n           else echo expect ; fi`\n \n-RUNTEST = `if [ -f $(top_srcdir)/../dejagnu/runtest ] ; then \\\n+RUNTEST = \"`if [ -f $(top_srcdir)/../dejagnu/runtest ] ; then \\\n \t       echo $(top_srcdir)/../dejagnu/runtest ; \\\n-\t    else echo runtest; fi`\n-\n-RUNTESTFLAGS = @AM_RUNTESTFLAGS@\n+\t    else echo runtest; fi` $(AM_RUNTESTFLAGS)\"\n \n+## Tell dejagnu whether the interpreter is enabled.\n+AM_RUNTESTFLAGS = INTERPRETER=$(INTERPRETER)"}, {"sha": "e5ed97687638605aa70490f115b566add7a66e70", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d96e0c57011e92c60a4efca55638f719611962/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d96e0c57011e92c60a4efca55638f719611962/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=44d96e0c57011e92c60a4efca55638f719611962", "patch": "@@ -63,7 +63,6 @@ host_alias = @host_alias@\n host_triplet = @host@\n target_alias = @target_alias@\n target_triplet = @target@\n-AM_RUNTESTFLAGS = @AM_RUNTESTFLAGS@\n AR = @AR@\n AS = @AS@\n CC = @CC@\n@@ -88,6 +87,7 @@ GCSPEC = @GCSPEC@\n GCTESTSPEC = @GCTESTSPEC@\n HASH_SYNC_SPEC = @HASH_SYNC_SPEC@\n INCLTDL = @INCLTDL@\n+INTERPRETER = @INTERPRETER@\n JC1GCSPEC = @JC1GCSPEC@\n LIBFFI = @LIBFFI@\n LIBFFIINCS = @LIBFFIINCS@\n@@ -138,12 +138,12 @@ EXPECT = `if [ -f $(top_builddir)/../expect/expect ] ; then \\\n           else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f $(top_srcdir)/../dejagnu/runtest ] ; then \\\n+RUNTEST = \"`if [ -f $(top_srcdir)/../dejagnu/runtest ] ; then \\\n \t       echo $(top_srcdir)/../dejagnu/runtest ; \\\n-\t    else echo runtest; fi`\n+\t    else echo runtest; fi` $(AM_RUNTESTFLAGS)\"\n \n \n-RUNTESTFLAGS = @AM_RUNTESTFLAGS@\n+AM_RUNTESTFLAGS = INTERPRETER=$(INTERPRETER)\n CONFIG_HEADER = ../include/config.h ../gcj/libgcj-config.h\n CONFIG_CLEAN_FILES = \n DIST_COMMON =  ChangeLog Makefile.am Makefile.in\n@@ -187,6 +187,8 @@ distdir: $(DISTFILES)\n \t  fi; \\\n \tdone\n \n+RUNTESTFLAGS =\n+\n DEJATOOL = $(PACKAGE)\n \n RUNTESTDEFAULTFLAGS = --tool $(DEJATOOL) --srcdir $$srcdir"}, {"sha": "a55985af5aa136157c66510f93a1d1a70261a703", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 104, "deletions": 117, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44d96e0c57011e92c60a4efca55638f719611962/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44d96e0c57011e92c60a4efca55638f719611962/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=44d96e0c57011e92c60a4efca55638f719611962", "patch": "@@ -246,6 +246,22 @@ proc libjava_find_spec {} {\n     return \"$objdir/../\"\n }\n \n+# Find `gij'.\n+proc libjava_find_gij {} {\n+    global base_dir\n+    set gp [get_multilibs]\n+    if {$gp != \"\"} {\n+\tset file $gp/libjava/gij\n+    } else {\n+\tset file $base_dir/../gij\n+    }\n+\n+    if {[file exists $file]} {\n+\treturn $file\n+    }\n+    return gij\n+}\n+\n # Remove a bunch of files.\n proc gcj_cleanup {args} {\n     foreach file $args {\n@@ -420,6 +436,73 @@ proc gcj_link {program main files {options {}}} {\n     return 1\n }\n \n+# Invoke a program and check its output.  EXECUTABLE is the program;\n+# ARGS are the arguments to the program.  Returns 1 if tests passed\n+# (or things were left untested), 0 otherwise.\n+proc libjava_invoke {errname testName optName executable inpfile resultfile args} {\n+    upvar $optName opts\n+\n+    if {[info exists opts(no-exec)]} {\n+\tif {[info exists opts(need-threads)]} {\n+\t    # This means we wanted to try to run it but we couldn't\n+\t    # because threads aren't supported.  So we have to\n+\t    # generate an `untested'.\n+\t    untested \"$errname execution - $testName\"\n+\t    untested \"$errname output - $testName\"\n+\t}\n+\treturn 1\n+    }\n+\n+    set result [libjava_load $executable $args \"$inpfile\"]\n+    set status [lindex $result 0]\n+    set output [lindex $result 1]\n+    if {[info exists opts(xfail-exec)]} then {\n+\tsetup_xfail *-*-*\n+    }\n+    $status \"$errname execution - $testName\"\n+    if { $status != \"pass\" } {\n+\tuntested \"$errname output - $testName\"\n+\treturn 0\n+    }\n+\n+    verbose \"resultfile is $resultfile\"\n+    set id [open $resultfile r]\n+    set expected \"\"\n+    append expected [read $id]\n+    regsub -all \"\\r\" \"$output\" \"\" output\n+    regsub \"\\n*$\" $expected \"\" expected\n+    regsub \"\\n*$\" $output \"\" output\n+    regsub \"^\\n*\" $expected \"\" expected\n+    regsub \"^\\n*\" $output \"\" output\n+    regsub -all \"\\[ \\t\\]\\[ \\t\\]*\" $expected \" \" expected\n+    regsub -all \"\\[ \\t\\]*\\n\\n*\" $expected \"\\n\" expected\n+    regsub -all \"\\[ \\t\\]\\[ \\t\\]*\" $output \" \" output\n+    regsub -all \"\\[ \\t\\]*\\n\\n*\" $output \"\\n\" output\n+    verbose \"expected is $expected\"\n+    verbose \"actual is $output\"\n+    set passed 0\n+    if {[info exists opts(regexp_match)]} {\n+\tif [regexp $expected $output] {\n+\t    set passed 1\n+\t}\n+    } else {\n+\tif { $expected == $output } {\n+\t    set passed 1\n+\t}\n+    }\n+    if {[info exists opts(xfail-output)]} {\n+\tsetup_xfail *-*-*\n+    }\n+    if { $passed == 1 } {\n+\tpass \"$errname output - $testName\"\n+    } else {\n+\tfail \"$errname output - $testName\"\n+    }\n+    close $id\n+\n+    return $passed\n+}\n+\n #\n # Run the test specified by srcfile and resultfile. compile_args and\n # exec_args are options telling this proc how to work.\n@@ -516,72 +599,15 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n     }\n     pass \"$errname compilation from source\"\n \n-    if {[info exists opts(no-exec)]} {\n-\tif {[info exists opts(need-threads)]} {\n-\t    # This means we wanted to try to run it but we couldn't\n-\t    # because threads aren't supported.  So we have to\n-\t    # generate an `untested'.\n-\t    untested \"$errname execution from source compiled test\"\n-\t    untested \"$errname output from source compiled test\"\n-\t}\n-\teval gcj_cleanup $removeList\n-\treturn\n-    }\n-    if {[info exists opts(no-link)]} {\n-\teval gcj_cleanup $removeList\n-\treturn\n-    }\n-\n-    set result [libjava_load $executable \"\" \"$inpfile\"];\n-    set status [lindex $result 0];\n-    set output [lindex $result 1];\n-    if {[info exists opts(xfail-exec)]} then {\n-\tsetup_xfail *-*-*\n-    }\n-    $status \"$errname execution from source compiled test\"\n-    if { $status != \"pass\" } {\n-\tuntested \"$errname output from source compiled test\"\n-\treturn;\n-    }\n-\n-    verbose \"resultfile is $resultfile\"\n-    set id [open $resultfile r];\n-    set expected \"\"\n-    append expected [read $id];\n-    regsub -all \"\\r\" \"$output\" \"\" output;\n-    regsub \"\\n*$\" $expected \"\" expected\n-    regsub \"\\n*$\" $output \"\" output\n-    regsub \"^\\n*\" $expected \"\" expected\n-    regsub \"^\\n*\" $output \"\" output\n-    regsub -all \"\\[ \\t\\]\\[ \\t\\]*\" $expected \" \" expected\n-    regsub -all \"\\[ \\t\\]*\\n\\n*\" $expected \"\\n\" expected\n-    regsub -all \"\\[ \\t\\]\\[ \\t\\]*\" $output \" \" output\n-    regsub -all \"\\[ \\t\\]*\\n\\n*\" $output \"\\n\" output\n-    verbose \"expected is $expected\"\n-    verbose \"actual is $output\"\n-    set passed 0;\n-    if {$options == \"regexp_match\"} {\n-\tif [regexp $expected $output] {\n-\t    set passed 1;\n-\t}\n-    } else {\n-\tif { $expected == $output } {\n-\t    set passed 1;\n-\t}\n-    }\n-    if {[info exists opts(xfail-output)]} {\n-\tsetup_xfail *-*-*\n-    }\n+    # Set up the options the way they are expected by libjava_invoke.\n     if {[info exists opts(xfail-source-output)]} {\n-\tsetup_xfail *-*-*\n+\tset opts(xfail-output) x\n     }\n-    if { $passed == 1 } {\n-\tpass \"$errname output from source compiled test\"\n+    if {[libjava_invoke $errname \"source compiled test\" opts $executable \\\n+\t   $inpfile $resultfile]} {\n+\t# Everything ok, so clean up.\n \teval gcj_cleanup $removeList\n-    } else {\n-\tfail \"$errname output from source compiled test\"\n     }\n-    close $id;\n }\n \n #\n@@ -597,6 +623,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     global GCJ_UNDER_TEST\n     global tmpdir\n     global runtests\n+    global INTERPRETER\n \n     # Make opts into an array.\n     set opts(_) x\n@@ -710,6 +737,16 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \tset mode link\n     }\n \n+    # We purposely ignore errors here; we still want to run the other\n+    # appropriate tests.\n+    set gij [libjava_find_gij]\n+    # libjava_find_gij will return `gij' if it couldn't find the\n+    # program; in this case we want to skip the test.\n+    if {$INTERPRETER == \"yes\" && $gij != \"gij\"} {\n+\tlibjava_invoke $errname \"gij test\" opts $gij \\\n+\t  $inpfile $resultfile $main_name\n+    }\n+\n     # Initial arguments.\n     set args [libjava_arguments $mode]\n     eval lappend args $largs\n@@ -763,65 +800,15 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     }\n     pass \"$errname compilation from bytecode\"\n \n-    if {[info exists opts(no-exec)]} {\n-\tif {[info exists opts(need-threads)]} {\n-\t    untested \"$errname execution from bytecode->native test\"\n-\t    untested \"$errname output from bytecode->native test\"\n-\t}\n-\teval gcj_cleanup $removeList\n-\treturn\n-    }\n-\n-    set result [libjava_load $executable \"\" \"$inpfile\"];\n-    set status [lindex $result 0];\n-    set output [lindex $result 1];\n-    if {[info exists opts(xfail-exec)]} {\n-\tsetup_xfail *-*-*\n-    }\n-    $status \"$errname execution from bytecode->native test\"\n-    if { $status != \"pass\" } {\n-\tuntested \"$errname output from bytecode->native test\"\n-\treturn\n-    }\n-\n-    verbose \"resultfile is $resultfile\"\n-    set id [open $resultfile r];\n-    set expected \"\"\n-    append expected [read $id];\n-    regsub -all \"\\r\" \"$output\" \"\" output;\n-    regsub \"\\n*$\" $expected \"\" expected\n-    regsub \"\\n*$\" $output \"\" output\n-    regsub \"^\\n*\" $expected \"\" expected\n-    regsub \"^\\n*\" $output \"\" output\n-    regsub -all \"\\[ \\t\\]\\[ \\t\\]*\" $expected \" \" expected\n-    regsub -all \"\\[ \\t\\]*\\n\\n*\" $expected \"\\n\" expected\n-    regsub -all \"\\[ \\t\\]\\[ \\t\\]*\" $output \" \" output\n-    regsub -all \"\\[ \\t\\]*\\n\\n*\" $output \"\\n\" output\n-    verbose \"expected is $expected\"\n-    verbose \"actual is $output\"\n-    set passed 0;\n-    if {[info exists opts(xfail-output)]} {\n-\tsetup_xfail *-*-*\n-    }\n+    # Set up the options the way they are expected by libjava_invoke.\n     if {[info exists opts(xfail-byte-output)]} {\n-\tsetup_xfail *-*-*\n+\tset opts(xfail-output) x\n     }\n-    if {$options == \"regexp_match\"} {\n-\tif [regexp $expected $output] {\n-\t    set passed 1;\n-\t}\n-    } else {\n-\tif { $expected == $output } {\n-\t    set passed 1;\n-\t}\n-    }\n-    if { $passed == 1 } {\n-\tpass \"$errname output from bytecode->native test\"\n+    if {[libjava_invoke $errname \"bytecode->native test\" opts $executable \\\n+\t   $inpfile $resultfile]} {\n+\t# Everything ok, so clean up.\n \teval gcj_cleanup $removeList\n-    } else {\n-\tfail \"$errname output from bytecode->native test\"\n     }\n-    close $id;\n }\n \n #"}]}