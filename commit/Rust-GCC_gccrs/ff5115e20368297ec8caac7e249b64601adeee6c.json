{"sha": "ff5115e20368297ec8caac7e249b64601adeee6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY1MTE1ZTIwMzY4Mjk3ZWM4Y2FhYzdlMjQ5YjY0NjAxYWRlZWU2Yw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-11-01T11:37:08Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-11-01T11:37:08Z"}, "message": "re PR fortran/54613 ([F08] Add FINDLOC plus support MAXLOC/MINLOC with KIND=/BACK=)\n\n2018-10-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/54613\n\t* gfortran.texi (File format of unformatted sequential files):\n\tReplace random comma with period.\n\t* intrinsic.texi (Intrinsic Procedures): Add FINDLOC to menu.\n\t(FINDLOC): Document.\n\t(MAXLOC): Add refrence to FINDLOC.\n\t(MINLOC): Likewise.\n\nFrom-SVN: r265715", "tree": {"sha": "cd707aa35f90c85ba42d57465555ae91a3918f08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd707aa35f90c85ba42d57465555ae91a3918f08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff5115e20368297ec8caac7e249b64601adeee6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5115e20368297ec8caac7e249b64601adeee6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff5115e20368297ec8caac7e249b64601adeee6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff5115e20368297ec8caac7e249b64601adeee6c/comments", "author": null, "committer": null, "parents": [{"sha": "41f927f4a668aeb167a673f916cc5cbfb978a560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f927f4a668aeb167a673f916cc5cbfb978a560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f927f4a668aeb167a673f916cc5cbfb978a560"}], "stats": {"total": 77, "additions": 74, "deletions": 3}, "files": [{"sha": "4e0869b5abead9501b2406724e79cd148421eaac", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5115e20368297ec8caac7e249b64601adeee6c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5115e20368297ec8caac7e249b64601adeee6c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ff5115e20368297ec8caac7e249b64601adeee6c", "patch": "@@ -1,3 +1,13 @@\n+2018-11-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/54613\n+\t* gfortran.texi (File format of unformatted sequential files):\n+\tReplace random comma with period.\n+\t* intrinsic.texi (Intrinsic Procedures): Add FINDLOC to menu.\n+\t(FINDLOC): Document.\n+\t(MAXLOC): Add refrence to FINDLOC.\n+\t(MINLOC): Likewise.\n+\n 2018-10-31  Nathan Sidwell  <nathan@acm.org>\n \n \t* cpp.c (gfc_cpp_init): Adjust cpp_force_token_locations call."}, {"sha": "8654601f4f6c1231c8734f27aedcb5cdbd8ead6b", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5115e20368297ec8caac7e249b64601adeee6c/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5115e20368297ec8caac7e249b64601adeee6c/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=ff5115e20368297ec8caac7e249b64601adeee6c", "patch": "@@ -1479,7 +1479,7 @@ contains a negative number, then there is a preceding subrecord.\n \n In the most simple case, with only one subrecord per logical record,\n both record markers contain the number of bytes of user data in the\n-record,\n+record.\n \n The format for unformatted sequential data can be duplicated using\n unformatted stream, as shown in the example program for an unformatted"}, {"sha": "668888bc5c89ef9bf1e93dfdef13d10d500648f1", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff5115e20368297ec8caac7e249b64601adeee6c/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff5115e20368297ec8caac7e249b64601adeee6c/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=ff5115e20368297ec8caac7e249b64601adeee6c", "patch": "@@ -148,6 +148,7 @@ Some basic guidelines for editing this document:\n * @code{FDATE}:         FDATE,     Subroutine (or function) to get the current time as a string\n * @code{FGET}:          FGET,      Read a single character in stream mode from stdin\n * @code{FGETC}:         FGETC,     Read a single character in stream mode\n+* @code{FINDLOC}:       FINDLOC,   Search an array for a value\n * @code{FLOOR}:         FLOOR,     Integer floor function\n * @code{FLUSH}:         FLUSH,     Flush I/O unit(s)\n * @code{FNUM}:          FNUM,      File number function\n@@ -6021,7 +6022,67 @@ END PROGRAM\n @ref{FGET}, @ref{FPUT}, @ref{FPUTC}\n @end table\n \n+@node FINDLOC\n+@section @code{FINDLOC} --- Search an array for a value\n+@fnindex FINDLOC\n+@cindex findloc\n \n+@table @asis\n+@item @emph{Description}:\n+Determines the location of the element in the array with the value\n+given in the @var{VALUE} argument, or, if the @var{DIM} argument is\n+supplied, determines the locations of the maximum element along each\n+row of the array in the @var{DIM} direction.  If @var{MASK} is\n+present, only the elements for which @var{MASK} is @code{.TRUE.} are\n+considered.  If more than one element in the array has the value\n+@var{VALUE}, the location returned is that of the first such element\n+in array element order if the @var{BACK} is not present or if it is\n+@code{.FALSE.}. If @var{BACK} is true, the location returned is that\n+of the last such element. If the array has zero size, or all of the\n+elements of @var{MASK} are @code{.FALSE.}, then the result is an array\n+of zeroes.  Similarly, if @var{DIM} is supplied and all of the\n+elements of @var{MASK} along a given row are zero, the result value\n+for that row is zero.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later.\n+\n+@item @emph{Class}:\n+Transformational function\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{RESULT = FINDLOC(ARRAY, VALUE, DIM [, MASK] [,KIND] [,BACK])}\n+@item @code{RESULT = FINDLOC(ARRAY, VALUE, [, MASK] [,KIND] [,BACK])}\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{ARRAY} @tab Shall be an array of intrinsic type.\n+@item @var{VALUE} @tab A scalar of intrinsic type which is in type\n+conformance with @var{ARRAY}.\n+@item @var{DIM} @tab (Optional) Shall be a scalar of type\n+@code{INTEGER}, with a value between one and the rank of @var{ARRAY},\n+inclusive.  It may not be an optional dummy argument.\n+@item @var{KIND} @tab (Optional) An @code{INTEGER} initialization\n+expression indicating the kind parameter of the result.\n+@item @var{BACK} @tab (Optional) A scalar of type @code{LOGICAL}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+If @var{DIM} is absent, the result is a rank-one array with a length\n+equal to the rank of @var{ARRAY}.  If @var{DIM} is present, the result\n+is an array with a rank one less than the rank of @var{ARRAY}, and a\n+size corresponding to the size of @var{ARRAY} with the @var{DIM}\n+dimension removed.  If @var{DIM} is present and @var{ARRAY} has a rank\n+of one, the result is a scalar.  If the optional argument @var{KIND}\n+is present, the result is an integer of kind @var{KIND}, otherwise it\n+is of default kind.\n+\n+@item @emph{See also}:\n+@ref{MAXLOC}, @ref{MINLOC}\n+\n+@end table\n \n @node FLOOR\n @section @code{FLOOR} --- Integer floor function\n@@ -10039,7 +10100,7 @@ is present, the result is an integer of kind @var{KIND}, otherwise it\n is of default kind.\n \n @item @emph{See also}:\n-@ref{MAX}, @ref{MAXVAL}\n+@ref{FINDLOC}, @ref{MAX}, @ref{MAXVAL}\n \n @end table\n \n@@ -10395,7 +10456,7 @@ is present, the result is an integer of kind @var{KIND}, otherwise it\n is of default kind.\n \n @item @emph{See also}:\n-@ref{MIN}, @ref{MINVAL}\n+@ref{FINDLOC}, @ref{MIN}, @ref{MINVAL}\n \n @end table\n "}]}