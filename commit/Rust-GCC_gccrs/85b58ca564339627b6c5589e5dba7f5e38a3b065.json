{"sha": "85b58ca564339627b6c5589e5dba7f5e38a3b065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODViNThjYTU2NDMzOTYyN2I2YzU1ODllNWRiYTdmNWUzOGEzYjA2NQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-01-07T19:40:03Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-01-07T19:40:03Z"}, "message": "re PR c/12165 (Typedef'ed variables ignore typedef's const qualifier)\n\n\tPR c/12165\n\t* c-decl.c (grokdeclarator): Take type qualifiers of typedefed\n\tarray type from the array element type.\n\ntestsuite:\n\t* gcc.dg/array-quals-1.c, gcc.dg/c90-idem-qual-3.c,\n\tgcc.dg/c99-idem-qual-3.c: New tests.\n\nFrom-SVN: r75514", "tree": {"sha": "9b43bfe97cac142e75644c1fc150239775554e25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b43bfe97cac142e75644c1fc150239775554e25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85b58ca564339627b6c5589e5dba7f5e38a3b065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b58ca564339627b6c5589e5dba7f5e38a3b065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85b58ca564339627b6c5589e5dba7f5e38a3b065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85b58ca564339627b6c5589e5dba7f5e38a3b065/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51dc0a0aad46f10e8ff7cd9fe8d8bef3b9dfe36d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51dc0a0aad46f10e8ff7cd9fe8d8bef3b9dfe36d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51dc0a0aad46f10e8ff7cd9fe8d8bef3b9dfe36d"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "c9984460b3dc73afb961a51492b31e780d5b4827", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85b58ca564339627b6c5589e5dba7f5e38a3b065", "patch": "@@ -1,3 +1,9 @@\n+2004-01-07  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/12165\n+\t* c-decl.c (grokdeclarator): Take type qualifiers of typedefed\n+\tarray type from the array element type.\n+\n 2004-01-07  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.c (rs6000_dbx_register_number): New function."}, {"sha": "b41ed8671bcd4c3097d75678efa194f1a03ecccf", "filename": "gcc/c-decl.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=85b58ca564339627b6c5589e5dba7f5e38a3b065", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -3349,6 +3349,7 @@ grokdeclarator (tree declarator, tree declspecs,\n   int array_parm_static = 0;\n   tree returned_attrs = NULL_TREE;\n   bool bitfield = width != NULL;\n+  tree element_type;\n \n   if (decl_context == FUNCDEF)\n     funcdef_flag = 1, decl_context = NORMAL;\n@@ -3694,10 +3695,19 @@ grokdeclarator (tree declarator, tree declspecs,\n      two ways a declaration can become qualified.  One is something\n      like `const int i' where the `const' is explicit.  Another is\n      something like `typedef const int CI; CI i' where the type of the\n-     declaration contains the `const'.  */\n-  constp = !! (specbits & 1 << (int) RID_CONST) + TYPE_READONLY (type);\n-  restrictp = !! (specbits & 1 << (int) RID_RESTRICT) + TYPE_RESTRICT (type);\n-  volatilep = !! (specbits & 1 << (int) RID_VOLATILE) + TYPE_VOLATILE (type);\n+     declaration contains the `const'.  A third possibility is that\n+     there is a type qualifier on the element type of a typedefed\n+     array type, in which case we should extract that qualifier so\n+     that c_apply_type_quals_to_decls receives the full list of\n+     qualifiers to work with (C90 is not entirely clear about whether\n+     duplicate qualifiers should be diagnosed in this case, but it\n+     seems most appropriate to do so).  */\n+  element_type = strip_array_types (type);\n+  constp = !! (specbits & 1 << (int) RID_CONST) + TYPE_READONLY (element_type);\n+  restrictp\n+    = !! (specbits & 1 << (int) RID_RESTRICT) + TYPE_RESTRICT (element_type);\n+  volatilep\n+    = !! (specbits & 1 << (int) RID_VOLATILE) + TYPE_VOLATILE (element_type);\n   inlinep = !! (specbits & (1 << (int) RID_INLINE));\n   if (constp > 1 && ! flag_isoc99)\n     pedwarn (\"duplicate `const'\");"}, {"sha": "020ffd89b924db49f735398efc84bb066f2dfa31", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85b58ca564339627b6c5589e5dba7f5e38a3b065", "patch": "@@ -1,3 +1,9 @@\n+2004-01-07  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/12165\n+\t* gcc.dg/array-quals-1.c, gcc.dg/c90-idem-qual-3.c,\n+\tgcc.dg/c99-idem-qual-3.c: New tests.\n+\n 2004-01-07  Alan Modra  <amodra@bigpond.net.au>\n \n \t* gcc.dg/winline-7.c: Don't cast void * to int."}, {"sha": "7d2b72c6b980b7e9b3507e223c756818b5c96f94", "filename": "gcc/testsuite/gcc.dg/array-quals-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-quals-1.c?ref=85b58ca564339627b6c5589e5dba7f5e38a3b065", "patch": "@@ -0,0 +1,29 @@\n+/* Test for various combinations of const, arrays and typedefs:\n+   should never actually get const on the final array type, but\n+   all should end up in a read-only section.  PR c/12165.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler-not \"\\\\.data\" } } */\n+static const int a[2] = { 1, 2 };\n+const int a1[2] = { 1, 2 };\n+typedef const int ci;\n+static ci b[2] = { 3, 4 };\n+ci b1[2] = { 3, 4 };\n+typedef int ia[2];\n+static const ia c = { 5, 6 };\n+const ia c1 = { 5, 6 };\n+typedef const int cia[2];\n+static cia d = { 7, 8 };\n+cia d1 = { 7, 8 };\n+static cia e[2] = { { 1, 2 }, { 3, 4 } };\n+cia e1[2] = { { 1, 2 }, { 3, 4 } };\n+void *const p = &a;\n+void *const q = &b;\n+void *const r = &c;\n+void *const s = &d;\n+void *const t = &e;\n+void *const p1 = &a1;\n+void *const q1 = &b1;\n+void *const r1 = &c1;\n+void *const s1 = &d1;\n+void *const t1 = &e1;"}, {"sha": "9976a0888fb51f6f36c971fed806e8ea6a04cb2c", "filename": "gcc/testsuite/gcc.dg/c90-idem-qual-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-idem-qual-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-idem-qual-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-idem-qual-3.c?ref=85b58ca564339627b6c5589e5dba7f5e38a3b065", "patch": "@@ -0,0 +1,11 @@\n+/* Test for idempotent type qualifiers: in C99 only.  Test duplicate\n+   type qualifiers with array element types.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+typedef const int cia[2];\n+const cia a; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"duplicate\" \"duplicate type qualifier error\" { target *-*-* } 8 } */\n+const cia b[2]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"duplicate\" \"duplicate type qualifier error\" { target *-*-* } 10 } */"}, {"sha": "0f34f832188661c5472a61c59c3f2035b562d42d", "filename": "gcc/testsuite/gcc.dg/c99-idem-qual-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-idem-qual-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85b58ca564339627b6c5589e5dba7f5e38a3b065/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-idem-qual-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-idem-qual-3.c?ref=85b58ca564339627b6c5589e5dba7f5e38a3b065", "patch": "@@ -0,0 +1,9 @@\n+/* Test for idempotent type qualifiers: in C99 only.  Test duplicate\n+   type qualifiers with array element types.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+typedef const int cia[2];\n+const cia a; /* { dg-bogus \"duplicate\" \"duplicate type qualifier warning\" } */\n+const cia b[2]; /* { dg-bogus \"duplicate\" \"duplicate type qualifier warning\" } */"}]}