{"sha": "da09e3172ddd820e2115b5c3eb72b5bc023c983b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGEwOWUzMTcyZGRkODIwZTIxMTViNWMzZWI3MmI1YmMwMjNjOTgzYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-14T16:27:32Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-14T16:27:32Z"}, "message": "c-lex.c (handle_generic_pragma): Remove unused variable `c'.\n\n       * c-lex.c (handle_generic_pragma): Remove unused variable `c'.\n\n       * unroll.c (find_common_reg_term, subtract_reg_term,\n       loop_find_equiv_value): Add static prototypes.\n       (unroll_loop): Wrap variable `prev' in macro HAVE_cc0.\n       (copy_loop_body): Remove unreachable break statement.\n\n       * sparc.c (sparc_va_arg): Remove unused variable `tmp'.\n\n       * sparc.h (sparc_va_start, sparc_va_arg): Add extern prototypes.\n\nFrom-SVN: r29409", "tree": {"sha": "11a8739930421a541e5dd39a0f65af59f34906ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11a8739930421a541e5dd39a0f65af59f34906ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da09e3172ddd820e2115b5c3eb72b5bc023c983b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da09e3172ddd820e2115b5c3eb72b5bc023c983b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da09e3172ddd820e2115b5c3eb72b5bc023c983b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da09e3172ddd820e2115b5c3eb72b5bc023c983b/comments", "author": null, "committer": null, "parents": [{"sha": "d6b468909704fdaac4a955d7ecfcbe979c66972f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b468909704fdaac4a955d7ecfcbe979c66972f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b468909704fdaac4a955d7ecfcbe979c66972f"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "2856cecd1c71631dbed403da09ece17f8e45c715", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da09e3172ddd820e2115b5c3eb72b5bc023c983b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da09e3172ddd820e2115b5c3eb72b5bc023c983b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da09e3172ddd820e2115b5c3eb72b5bc023c983b", "patch": "@@ -1,3 +1,16 @@\n+Tue Sep 14 12:22:50 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-lex.c (handle_generic_pragma): Remove unused variable `c'.\n+\n+\t* unroll.c (find_common_reg_term, subtract_reg_term,\n+\tloop_find_equiv_value): Add static prototypes.\n+\t(unroll_loop): Wrap variable `prev' in macro HAVE_cc0.\n+\t(copy_loop_body): Remove unreachable break statement.\n+\t\n+\t* sparc.c (sparc_va_arg): Remove unused variable `tmp'.\n+\n+\t* sparc.h (sparc_va_start, sparc_va_arg): Add extern prototypes.\n+\t\n Tue Sep 14 15:28:00 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \tUndo some changes from the gcc2 merge:"}, {"sha": "1af77d4c2eaed564a719ddeda725ca26d711031c", "filename": "gcc/c-lex.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da09e3172ddd820e2115b5c3eb72b5bc023c983b/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da09e3172ddd820e2115b5c3eb72b5bc023c983b/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=da09e3172ddd820e2115b5c3eb72b5bc023c983b", "patch": "@@ -871,8 +871,6 @@ static int\n handle_generic_pragma (token)\n      register int token;\n {\n-  register int c;\n-\n   for (;;)\n     {\n       switch (token)"}, {"sha": "a9e49e719f3b77478d98e64860ea676220ff92e2", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da09e3172ddd820e2115b5c3eb72b5bc023c983b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da09e3172ddd820e2115b5c3eb72b5bc023c983b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=da09e3172ddd820e2115b5c3eb72b5bc023c983b", "patch": "@@ -4305,7 +4305,7 @@ sparc_va_arg (valist, type)\n      tree valist, type;\n {\n   HOST_WIDE_INT size, rsize, align;\n-  tree addr, incr, tmp;\n+  tree addr, incr;\n   rtx addr_rtx;\n   int indirect = 0;\n "}, {"sha": "1abb0479b3733e29fe0d9f2289764db1c7053ecc", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da09e3172ddd820e2115b5c3eb72b5bc023c983b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da09e3172ddd820e2115b5c3eb72b5bc023c983b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=da09e3172ddd820e2115b5c3eb72b5bc023c983b", "patch": "@@ -2045,10 +2045,12 @@ void sparc64_initialize_trampoline ();\n extern struct rtx_def *sparc_builtin_saveregs ();\n #define EXPAND_BUILTIN_SAVEREGS() sparc_builtin_saveregs ()\n \n+extern void sparc_va_start ();\n /* Implement `va_start' for varargs and stdarg.  */\n #define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n   sparc_va_start (stdarg, valist, nextarg)\n \n+extern struct rtx_def *sparc_va_arg ();\n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   sparc_va_arg (valist, type)"}, {"sha": "ea11acf252716a878b0526db2c2861416ad2687e", "filename": "gcc/unroll.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da09e3172ddd820e2115b5c3eb72b5bc023c983b/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da09e3172ddd820e2115b5c3eb72b5bc023c983b/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=da09e3172ddd820e2115b5c3eb72b5bc023c983b", "patch": "@@ -208,6 +208,9 @@ static int reg_dead_after_loop PROTO((rtx, rtx, rtx));\n static rtx fold_rtx_mult_add PROTO((rtx, rtx, rtx, enum machine_mode));\n static int verify_addresses PROTO((struct induction *, rtx, int));\n static rtx remap_split_bivs PROTO((rtx));\n+static rtx find_common_reg_term PROTO((rtx, rtx));\n+static rtx subtract_reg_term PROTO((rtx, rtx));\n+static rtx loop_find_equiv_value PROTO((rtx, rtx));\n \n /* Try to unroll one loop and split induction variables in the loop.\n \n@@ -339,7 +342,9 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n \t}\n       else if (GET_CODE (last_loop_insn) == JUMP_INSN)\n \t{\n+#ifdef HAVE_cc0\n \t  rtx prev = PREV_INSN (last_loop_insn);\n+#endif\n \t  delete_insn (last_loop_insn);\n #ifdef HAVE_cc0\n \t  /* The immediately preceding insn may be a compare which must be\n@@ -2157,7 +2162,6 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n \n \tdefault:\n \t  abort ();\n-\t  break;\n \t}\n \n       map->insn_map[INSN_UID (insn)] = copy;"}]}