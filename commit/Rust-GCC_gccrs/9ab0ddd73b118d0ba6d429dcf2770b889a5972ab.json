{"sha": "9ab0ddd73b118d0ba6d429dcf2770b889a5972ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFiMGRkZDczYjExOGQwYmE2ZDQyOWRjZjI3NzBiODg5YTU5NzJhYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-05T21:59:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-05T21:59:55Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1452", "tree": {"sha": "2c1b38896834606232521ff9fad41f0aca9fb013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c1b38896834606232521ff9fad41f0aca9fb013"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ab0ddd73b118d0ba6d429dcf2770b889a5972ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab0ddd73b118d0ba6d429dcf2770b889a5972ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ab0ddd73b118d0ba6d429dcf2770b889a5972ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ab0ddd73b118d0ba6d429dcf2770b889a5972ab/comments", "author": null, "committer": null, "parents": [{"sha": "1600ec6700767b69c54c4071f6ea9f2392d13670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1600ec6700767b69c54c4071f6ea9f2392d13670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1600ec6700767b69c54c4071f6ea9f2392d13670"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "6e55df2a732020ad4d4f4ae8161121fe14431c6f", "filename": "gcc/stmt.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ab0ddd73b118d0ba6d429dcf2770b889a5972ab/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ab0ddd73b118d0ba6d429dcf2770b889a5972ab/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=9ab0ddd73b118d0ba6d429dcf2770b889a5972ab", "patch": "@@ -3232,6 +3232,9 @@ pushcase (value, label, duplicate)\n   if (index_type == error_mark_node)\n     return 0;\n \n+  /* There may be NOP_EXPR around the value if we got it from an enum.  */\n+  STRIP_NOPS (arg);\n+\n   /* Convert VALUE to the type in which the comparisons are nominally done.  */\n   if (value != 0)\n     value = convert (nominal_type, value);\n@@ -3361,6 +3364,10 @@ pushcase_range (value1, value2, label, duplicate)\n     }\n   case_stack->data.case_stmt.seenlabel = 1;\n \n+  /* There may be NOP_EXPR around the value if we got it from an enum.  */\n+  STRIP_NOPS (value1);\n+  STRIP_NOPS (value2);\n+\n   /* Convert VALUEs to type in which the comparisons are nominally done.  */\n   if (value1 == 0)  /* Negative infinity. */\n     value1 = TYPE_MIN_VALUE(index_type);\n@@ -3525,7 +3532,7 @@ check_for_full_enumeration_handling (type)\n }\n \f\n /* Terminate a case (Pascal) or switch (C) statement\n-   in which CASE_INDEX is the expression to be tested.\n+   in which ORIG_INDEX is the expression to be tested.\n    Generate the code to test it and jump to the right place.  */\n \n void"}]}