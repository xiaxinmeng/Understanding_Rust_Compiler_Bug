{"sha": "a5a06a788d52cfc83553ad958da3af4c3e195f0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhMDZhNzg4ZDUyY2ZjODM1NTNhZDk1OGRhM2FmNGMzZTE5NWYwZA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-11-02T07:22:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-11-02T07:22:47Z"}, "message": "jump.c (jump_optimize_1): Also move LOOP_VTOP and LOOP_CONT notes when presented with \"if (foo) break...\n\n        * jump.c (jump_optimize_1): Also move LOOP_VTOP and LOOP_CONT\n        notes when presented with \"if (foo) break; end_of_loop\" and\n        the break sequence gets moved out of the loop.\n\nFrom-SVN: r30338", "tree": {"sha": "5eb217c3af7375b25d382b4824a74159c1092318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5eb217c3af7375b25d382b4824a74159c1092318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5a06a788d52cfc83553ad958da3af4c3e195f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a06a788d52cfc83553ad958da3af4c3e195f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a06a788d52cfc83553ad958da3af4c3e195f0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a06a788d52cfc83553ad958da3af4c3e195f0d/comments", "author": null, "committer": null, "parents": [{"sha": "d269eb53b15547297d21c9499744084a1c042b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d269eb53b15547297d21c9499744084a1c042b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d269eb53b15547297d21c9499744084a1c042b06"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "8e8895d566b717ecbc11ffc855e0aa0beb98ebd3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a06a788d52cfc83553ad958da3af4c3e195f0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a06a788d52cfc83553ad958da3af4c3e195f0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5a06a788d52cfc83553ad958da3af4c3e195f0d", "patch": "@@ -1,5 +1,9 @@\n Mon Nov  1 23:37:38 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* jump.c (jump_optimize_1): Also move LOOP_VTOP and LOOP_CONT\n+\tnotes when presented with \"if (foo) break; end_of_loop\" and\n+\tthe break sequence gets moved out of the loop.\n+\n \t* unroll.c (unroll_loop): Allocate memory for MAP using xcalloc.\n \tRemove explicit zero initializations of entries within MAP.\n "}, {"sha": "23156896b917a1a18e9bc138b5be86afa1155152", "filename": "gcc/jump.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a06a788d52cfc83553ad958da3af4c3e195f0d/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a06a788d52cfc83553ad958da3af4c3e195f0d/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=a5a06a788d52cfc83553ad958da3af4c3e195f0d", "patch": "@@ -2084,23 +2084,25 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan, mark_labels_only)\n \t\t\tNEXT_INSN (range1end) = range2after;\n \t\t\tPREV_INSN (range2after) = range1end;\n \n-\t\t\t/* Check for a loop end note between the end of\n+\t\t\t/* Check for loop notes between the end of\n \t\t\t   range2, and the next code label.  If there is one,\n \t\t\t   then what we have really seen is\n \t\t\t   if (foo) break; end_of_loop;\n \t\t\t   and moved the break sequence outside the loop.\n-\t\t\t   We must move the LOOP_END note to where the\n-\t\t\t   loop really ends now, or we will confuse loop\n-\t\t\t   optimization.  Stop if we find a LOOP_BEG note\n-\t\t\t   first, since we don't want to move the LOOP_END\n-\t\t\t   note in that case.  */\n+\t\t\t   We must move LOOP_END, LOOP_VTOP and LOOP_CONT\n+\t\t\t   notes (in order) to where the loop really ends now,\n+\t\t\t   or we will confuse loop optimization.  Stop if we\n+\t\t\t   find a LOOP_BEG note first, since we don't want to\n+\t\t\t   move the notes in that case.  */\n \t\t\tfor (;range2after != label2; range2after = rangenext)\n \t\t\t  {\n \t\t\t    rangenext = NEXT_INSN (range2after);\n \t\t\t    if (GET_CODE (range2after) == NOTE)\n \t\t\t      {\n-\t\t\t\tif (NOTE_LINE_NUMBER (range2after)\n-\t\t\t\t    == NOTE_INSN_LOOP_END)\n+\t\t\t\tint kind = NOTE_LINE_NUMBER (range2after);\n+\t\t\t\tif (kind == NOTE_INSN_LOOP_END\n+\t\t\t\t    || kind == NOTE_INSN_LOOP_VTOP\n+\t\t\t\t    || kind == NOTE_INSN_LOOP_CONT)\n \t\t\t\t  {\n \t\t\t\t    NEXT_INSN (PREV_INSN (range2after))\n \t\t\t\t      = rangenext;"}]}