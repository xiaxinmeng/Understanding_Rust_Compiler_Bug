{"sha": "7db960c5b6adad2fd11789870aa514985ea0da04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiOTYwYzViNmFkYWQyZmQxMTc4OTg3MGFhNTE0OTg1ZWEwZGEwNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-10-04T17:41:08Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-10-04T17:41:08Z"}, "message": "Add -fopt-info-internals\n\nThis patch introduces a verbosity level to dump messages:\n\"user-facing\" vs \"internals\".\n\nBy default, messages at the top-level dump scope are \"user-facing\",\nwhereas those that are in nested scopes are implicitly \"internals\",\nand are filtered out by -fopt-info unless a new \"-internals\" sub-option\nof \"-fopt-info\" is supplied (intended purely for use by GCC developers).\nDumpfiles are unaffected by the change.\n\nGiven that the vectorizer is the only subsystem using AUTO_DUMP_SCOPE\n(via DUMP_VECT_SCOPE), this only affects the vectorizer.\n\nFiltering out these implementation-detail messages goes a long way\ntowards making -fopt-info-vec-all more accessible to advanced end-users;\nthe follow-up patch restores the most pertinent missing details.\n\ngcc/ChangeLog:\n\t* doc/invoke.texi (-fopt-info): Document new \"internals\"\n\tsub-option.\n\t* dump-context.h (dump_context::apply_dump_filter_p): New decl.\n\t* dumpfile.c (dump_options): Update for renaming of MSG_ALL to\n\tMSG_ALL_KINDS.\n\t(optinfo_verbosity_options): Add \"internals\".\n\t(kind_as_string): Update for renaming of MSG_ALL to MSG_ALL_KINDS.\n\t(dump_context::apply_dump_filter_p): New member function.\n\t(dump_context::dump_loc): Use apply_dump_filter_p rather than\n\texplicitly masking the dump_kind.\n\t(dump_context::begin_scope): Increment the scope depth first.  Use\n\tapply_dump_filter_p rather than explicitly masking the dump_kind.\n\t(dump_context::emit_item): Use apply_dump_filter_p rather than\n\texplicitly masking the dump_kind.\n\t(dump_dec): Likewise.\n\t(dump_hex): Likewise.\n\t(dump_switch_p_1): Default to MSG_ALL_PRIORITIES.\n\t(opt_info_switch_p_1): Default to MSG_PRIORITY_USER_FACING.\n\t(opt_info_switch_p): Update handling of default\n\tMSG_OPTIMIZED_LOCATIONS to cope with default of\n\tMSG_PRIORITY_USER_FACING.\n\t(dump_basic_block): Use apply_dump_filter_p rather than explicitly\n\tmasking the dump_kind.\n\t(selftest::test_capture_of_dump_calls): Update test_dump_context\n\tinstances to use MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING rather\n\tthan MSG_ALL.  Generalize scope test to be run at all four\n\tcombinations of with/without MSG_PRIORITY_USER_FACING and\n\tMSG_PRIORITY_INTERNALS, adding examples of explicit priority\n\tfor each of the two values.\n\t* dumpfile.h (enum dump_flag): Add comment about the MSG_* flags.\n\tRename MSG_ALL to MSG_ALL_KINDS.  Add MSG_PRIORITY_USER_FACING,\n\tMSG_PRIORITY_INTERNALS, and MSG_ALL_PRIORITIES, updating the\n\tvalues for TDF_COMPARE_DEBUG and TDF_ALL_VALUES.\n\t(AUTO_DUMP_SCOPE): Add a note to the comment about the interaction\n\twith MSG_PRIORITY_*.\n\t* tree-vect-loop-manip.c (vect_loop_versioning): Mark versioning\n\tdump messages as MSG_PRIORITY_USER_FACING.\n\t* tree-vectorizer.h (DUMP_VECT_SCOPE): Add a note to the comment\n\tabout the interaction with MSG_PRIORITY_*.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/dump-1.c: Update expected output for test_scopes\n\tdue to \"-internals\" not being selected.\n\t* gcc.dg/plugin/dump-2.c: New test, based on dump-1.c, with\n\t\"-internals\" added to re-enable the output from test_scopes.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add dump-2.c.\n\nFrom-SVN: r264851", "tree": {"sha": "d01b112eba4bb441f9238c70760336301eaddcd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d01b112eba4bb441f9238c70760336301eaddcd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7db960c5b6adad2fd11789870aa514985ea0da04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db960c5b6adad2fd11789870aa514985ea0da04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7db960c5b6adad2fd11789870aa514985ea0da04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db960c5b6adad2fd11789870aa514985ea0da04/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1b4477fa0c1eca86d2b67808ffee5ac969acd4"}], "stats": {"total": 427, "additions": 329, "deletions": 98}, "files": [{"sha": "85e3f3a281ce2be035bd39bd4a34ef0c2cfd7d89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -1,3 +1,45 @@\n+2018-10-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/invoke.texi (-fopt-info): Document new \"internals\"\n+\tsub-option.\n+\t* dump-context.h (dump_context::apply_dump_filter_p): New decl.\n+\t* dumpfile.c (dump_options): Update for renaming of MSG_ALL to\n+\tMSG_ALL_KINDS.\n+\t(optinfo_verbosity_options): Add \"internals\".\n+\t(kind_as_string): Update for renaming of MSG_ALL to MSG_ALL_KINDS.\n+\t(dump_context::apply_dump_filter_p): New member function.\n+\t(dump_context::dump_loc): Use apply_dump_filter_p rather than\n+\texplicitly masking the dump_kind.\n+\t(dump_context::begin_scope): Increment the scope depth first.  Use\n+\tapply_dump_filter_p rather than explicitly masking the dump_kind.\n+\t(dump_context::emit_item): Use apply_dump_filter_p rather than\n+\texplicitly masking the dump_kind.\n+\t(dump_dec): Likewise.\n+\t(dump_hex): Likewise.\n+\t(dump_switch_p_1): Default to MSG_ALL_PRIORITIES.\n+\t(opt_info_switch_p_1): Default to MSG_PRIORITY_USER_FACING.\n+\t(opt_info_switch_p): Update handling of default\n+\tMSG_OPTIMIZED_LOCATIONS to cope with default of\n+\tMSG_PRIORITY_USER_FACING.\n+\t(dump_basic_block): Use apply_dump_filter_p rather than explicitly\n+\tmasking the dump_kind.\n+\t(selftest::test_capture_of_dump_calls): Update test_dump_context\n+\tinstances to use MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING rather\n+\tthan MSG_ALL.  Generalize scope test to be run at all four\n+\tcombinations of with/without MSG_PRIORITY_USER_FACING and\n+\tMSG_PRIORITY_INTERNALS, adding examples of explicit priority\n+\tfor each of the two values.\n+\t* dumpfile.h (enum dump_flag): Add comment about the MSG_* flags.\n+\tRename MSG_ALL to MSG_ALL_KINDS.  Add MSG_PRIORITY_USER_FACING,\n+\tMSG_PRIORITY_INTERNALS, and MSG_ALL_PRIORITIES, updating the\n+\tvalues for TDF_COMPARE_DEBUG and TDF_ALL_VALUES.\n+\t(AUTO_DUMP_SCOPE): Add a note to the comment about the interaction\n+\twith MSG_PRIORITY_*.\n+\t* tree-vect-loop-manip.c (vect_loop_versioning): Mark versioning\n+\tdump messages as MSG_PRIORITY_USER_FACING.\n+\t* tree-vectorizer.h (DUMP_VECT_SCOPE): Add a note to the comment\n+\tabout the interaction with MSG_PRIORITY_*.\n+\n 2018-10-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* varasm.c (output_constant): Add new parameter merge_strings."}, {"sha": "b51a20c0cd621515522fe40d5e34cb2ebb8f79bf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -14207,14 +14207,21 @@ Controls optimization dumps from various optimization passes. If the\n @samp{-} separated option keywords to select the dump details and\n optimizations.  \n \n-The @var{options} can be divided into two groups: options describing the\n-verbosity of the dump, and options describing which optimizations\n-should be included. The options from both the groups can be freely\n-mixed as they are non-overlapping. However, in case of any conflicts,\n+The @var{options} can be divided into three groups:\n+@enumerate\n+@item\n+options describing what kinds of messages should be emitted,\n+@item\n+options describing the verbosity of the dump, and\n+@item\n+options describing which optimizations should be included.\n+@end enumerate\n+The options from each group can be freely mixed as they are\n+non-overlapping. However, in case of any conflicts,\n the later options override the earlier options on the command\n line. \n \n-The following options control the dump verbosity:\n+The following options control which kinds of messages should be emitted:\n \n @table @samp\n @item optimized\n@@ -14233,6 +14240,15 @@ Print detailed optimization information. This includes\n @samp{optimized}, @samp{missed}, and @samp{note}.\n @end table\n \n+The following option controls the dump verbosity:\n+\n+@table @samp\n+@item internals\n+By default, only ``high-level'' messages are emitted. This option enables\n+additional, more detailed, messages, which are likely to only be of interest\n+to GCC developers.\n+@end table\n+\n One or more of the following option keywords can be used to describe a\n group of optimizations:\n \n@@ -14253,8 +14269,9 @@ the optimization groups listed above.\n @end table\n \n If @var{options} is\n-omitted, it defaults to @samp{optimized-optall}, which means to dump all\n-info about successful optimizations from all the passes.  \n+omitted, it defaults to @samp{optimized-optall}, which means to dump messages\n+about successful optimizations from all the passes, omitting messages\n+that are treated as ``internals''.\n \n If the @var{filename} is provided, then the dumps from all the\n applicable optimizations are concatenated into the @var{filename}."}, {"sha": "20b94a7a93c2d5db70c0700c04d1e3d23fdc85ba", "filename": "gcc/dump-context.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Fdump-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Fdump-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdump-context.h?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -100,6 +100,8 @@ class dump_context\n \n   void emit_item (optinfo_item *item, dump_flags_t dump_kind);\n \n+  bool apply_dump_filter_p (dump_flags_t dump_kind, dump_flags_t filter) const;\n+\n  private:\n   optinfo &ensure_pending_optinfo ();\n   optinfo &begin_next_optinfo (const dump_location_t &loc);"}, {"sha": "e15edc7a31c73169ee44342630b71107729692d9", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 174, "deletions": 74, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -141,7 +141,7 @@ static const kv_pair<dump_flags_t> dump_options[] =\n   {\"optimized\", MSG_OPTIMIZED_LOCATIONS},\n   {\"missed\", MSG_MISSED_OPTIMIZATION},\n   {\"note\", MSG_NOTE},\n-  {\"optall\", MSG_ALL},\n+  {\"optall\", MSG_ALL_KINDS},\n   {\"all\", dump_flags_t (TDF_ALL_VALUES\n \t\t\t& ~(TDF_RAW | TDF_SLIM | TDF_LINENO | TDF_GRAPH\n \t\t\t    | TDF_STMTADDR | TDF_RHS_ONLY | TDF_NOUID\n@@ -157,7 +157,8 @@ static const kv_pair<dump_flags_t> optinfo_verbosity_options[] =\n   {\"optimized\", MSG_OPTIMIZED_LOCATIONS},\n   {\"missed\", MSG_MISSED_OPTIMIZATION},\n   {\"note\", MSG_NOTE},\n-  {\"all\", MSG_ALL},\n+  {\"all\", MSG_ALL_KINDS},\n+  {\"internals\", MSG_PRIORITY_INTERNALS},\n   {NULL, TDF_NONE}\n };\n \n@@ -449,7 +450,7 @@ dump_user_location_t::from_function_decl (tree fndecl)\n static const char *\n kind_as_string (dump_flags_t dump_kind)\n {\n-  switch (dump_kind & MSG_ALL)\n+  switch (dump_kind & MSG_ALL_KINDS)\n     {\n     default:\n       gcc_unreachable ();\n@@ -524,6 +525,35 @@ dump_context::refresh_dumps_are_enabled ()\n \t\t       || m_test_pp);\n }\n \n+/* Determine if a message of kind DUMP_KIND and at the current scope depth\n+   should be printed.\n+\n+   Only show messages that match FILTER both on their kind *and*\n+   their priority.  */\n+\n+bool\n+dump_context::apply_dump_filter_p (dump_flags_t dump_kind,\n+\t\t\t\t   dump_flags_t filter) const\n+{\n+  /* Few messages, if any, have an explicit MSG_PRIORITY.\n+     If DUMP_KIND does, we'll use it.\n+     Otherwise, generate an implicit priority value for the message based\n+     on the current scope depth.\n+     Messages at the top-level scope are MSG_PRIORITY_USER_FACING,\n+     whereas those in nested scopes are MSG_PRIORITY_INTERNALS.  */\n+  if (!(dump_kind & MSG_ALL_PRIORITIES))\n+    {\n+      dump_flags_t implicit_priority\n+\t=  (m_scope_depth > 0\n+\t    ? MSG_PRIORITY_INTERNALS\n+\t    : MSG_PRIORITY_USER_FACING);\n+      dump_kind |= implicit_priority;\n+    }\n+\n+  return (dump_kind & (filter & MSG_ALL_KINDS)\n+\t  && dump_kind & (filter & MSG_ALL_PRIORITIES));\n+}\n+\n /* Print LOC to the appropriate dump destinations, given DUMP_KIND.\n    If optinfos are enabled, begin a new optinfo.  */\n \n@@ -534,14 +564,14 @@ dump_context::dump_loc (dump_flags_t dump_kind, const dump_location_t &loc)\n \n   location_t srcloc = loc.get_location_t ();\n \n-  if (dump_file && (dump_kind & pflags))\n+  if (dump_file && apply_dump_filter_p (dump_kind, pflags))\n     ::dump_loc (dump_kind, dump_file, srcloc);\n \n-  if (alt_dump_file && (dump_kind & alt_flags))\n+  if (alt_dump_file && apply_dump_filter_p (dump_kind, alt_flags))\n     ::dump_loc (dump_kind, alt_dump_file, srcloc);\n \n   /* Support for temp_dump_context in selftests.  */\n-  if (m_test_pp && (dump_kind & m_test_pp_flags))\n+  if (m_test_pp && apply_dump_filter_p (dump_kind, m_test_pp_flags))\n     ::dump_loc (dump_kind, m_test_pp, srcloc);\n \n   if (optinfo_enabled_p ())\n@@ -1067,22 +1097,24 @@ dump_context::get_scope_depth () const\n }\n \n /* Push a nested dump scope.\n+   Increment the scope depth.\n    Print \"=== NAME ===\\n\" to the dumpfile, if any, and to the -fopt-info\n    destination, if any.\n-   Emit a \"scope\" optinfo if optinfos are enabled.\n-   Increment the scope depth.  */\n+   Emit a \"scope\" optinfo if optinfos are enabled.  */\n \n void\n dump_context::begin_scope (const char *name, const dump_location_t &loc)\n {\n-  if (dump_file && (MSG_NOTE & pflags))\n+  m_scope_depth++;\n+\n+  if (dump_file && apply_dump_filter_p (MSG_NOTE, pflags))\n     ::dump_loc (MSG_NOTE, dump_file, loc.get_location_t ());\n \n-  if (alt_dump_file && (MSG_NOTE & alt_flags))\n+  if (alt_dump_file && apply_dump_filter_p (MSG_NOTE, alt_flags))\n     ::dump_loc (MSG_NOTE, alt_dump_file, loc.get_location_t ());\n \n   /* Support for temp_dump_context in selftests.  */\n-  if (m_test_pp && (MSG_NOTE & m_test_pp_flags))\n+  if (m_test_pp && apply_dump_filter_p (MSG_NOTE, m_test_pp_flags))\n     ::dump_loc (MSG_NOTE, m_test_pp, loc.get_location_t ());\n \n   pretty_printer pp;\n@@ -1100,8 +1132,6 @@ dump_context::begin_scope (const char *name, const dump_location_t &loc)\n     }\n   else\n     delete item;\n-\n-  m_scope_depth++;\n }\n \n /* Pop a nested dump scope.  */\n@@ -1155,14 +1185,14 @@ dump_context::end_any_optinfo ()\n void\n dump_context::emit_item (optinfo_item *item, dump_flags_t dump_kind)\n {\n-  if (dump_file && (dump_kind & pflags))\n+  if (dump_file && apply_dump_filter_p (dump_kind, pflags))\n     fprintf (dump_file, \"%s\", item->get_text ());\n \n-  if (alt_dump_file && (dump_kind & alt_flags))\n+  if (alt_dump_file && apply_dump_filter_p (dump_kind, alt_flags))\n     fprintf (alt_dump_file, \"%s\", item->get_text ());\n \n   /* Support for temp_dump_context in selftests.  */\n-  if (m_test_pp && (dump_kind & m_test_pp_flags))\n+  if (m_test_pp && apply_dump_filter_p (dump_kind, m_test_pp_flags))\n     pp_string (m_test_pp, item->get_text ());\n }\n \n@@ -1278,10 +1308,12 @@ template void dump_dec (dump_flags_t, const poly_widest_int &);\n void\n dump_dec (dump_flags_t dump_kind, const poly_wide_int &value, signop sgn)\n {\n-  if (dump_file && (dump_kind & pflags))\n+  if (dump_file\n+      && dump_context::get ().apply_dump_filter_p (dump_kind, pflags))\n     print_dec (value, dump_file, sgn);\n \n-  if (alt_dump_file && (dump_kind & alt_flags))\n+  if (alt_dump_file\n+      && dump_context::get ().apply_dump_filter_p (dump_kind, alt_flags))\n     print_dec (value, alt_dump_file, sgn);\n }\n \n@@ -1290,10 +1322,12 @@ dump_dec (dump_flags_t dump_kind, const poly_wide_int &value, signop sgn)\n void\n dump_hex (dump_flags_t dump_kind, const poly_wide_int &value)\n {\n-  if (dump_file && (dump_kind & pflags))\n+  if (dump_file\n+      && dump_context::get ().apply_dump_filter_p (dump_kind, pflags))\n     print_hex (value, dump_file);\n \n-  if (alt_dump_file && (dump_kind & alt_flags))\n+  if (alt_dump_file\n+      && dump_context::get ().apply_dump_filter_p (dump_kind, alt_flags))\n     print_hex (value, alt_dump_file);\n }\n \n@@ -1698,7 +1732,7 @@ dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n     return 0;\n \n   ptr = option_value;\n-  flags = TDF_NONE;\n+  flags = MSG_ALL_PRIORITIES;\n \n   while (*ptr)\n     {\n@@ -1794,7 +1828,11 @@ opt_info_switch_p_1 (const char *arg, dump_flags_t *flags,\n   ptr = option_value;\n \n   *filename = NULL;\n-  *flags = TDF_NONE;\n+\n+  /* Default to filtering out \"internals\" messages, and retaining\n+     \"user-facing\" messages.  */\n+  *flags = MSG_PRIORITY_USER_FACING;\n+\n   *optgroup_flags = OPTGROUP_NONE;\n \n   if (!ptr)\n@@ -1883,8 +1921,8 @@ opt_info_switch_p (const char *arg)\n     }\n \n   file_seen = xstrdup (filename);\n-  if (!flags)\n-    flags = MSG_OPTIMIZED_LOCATIONS;\n+  if (!(flags & MSG_ALL_KINDS))\n+    flags |= MSG_OPTIMIZED_LOCATIONS;\n   if (!optgroup_flags)\n     optgroup_flags = OPTGROUP_ALL;\n \n@@ -1896,9 +1934,11 @@ opt_info_switch_p (const char *arg)\n void\n dump_basic_block (dump_flags_t dump_kind, basic_block bb, int indent)\n {\n-  if (dump_file && (dump_kind & pflags))\n+  if (dump_file\n+      && dump_context::get ().apply_dump_filter_p (dump_kind, pflags))\n     dump_bb (dump_file, bb, indent, TDF_DETAILS);\n-  if (alt_dump_file && (dump_kind & alt_flags))\n+  if (alt_dump_file\n+      && dump_context::get ().apply_dump_filter_p (dump_kind, alt_flags))\n     dump_bb (alt_dump_file, bb, indent, TDF_DETAILS);\n }\n \n@@ -2104,7 +2144,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n       /* Test of dump_printf.  */\n       {\n-\ttemp_dump_context tmp (with_optinfo, MSG_ALL);\n+\ttemp_dump_context tmp (with_optinfo,\n+\t\t\t       MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \tdump_printf (MSG_NOTE, \"int: %i str: %s\", 42, \"foo\");\n \n \tASSERT_DUMPED_TEXT_EQ (tmp, \"int: 42 str: foo\");\n@@ -2120,7 +2161,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n       /* Test of dump_printf with %T.  */\n       {\n-\ttemp_dump_context tmp (with_optinfo, MSG_ALL);\n+\ttemp_dump_context tmp (with_optinfo,\n+\t\t\t       MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \tdump_printf (MSG_NOTE, \"tree: %T\", integer_zero_node);\n \n \tASSERT_DUMPED_TEXT_EQ (tmp, \"tree: 0\");\n@@ -2137,7 +2179,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n       /* Test of dump_printf with %E.  */\n       {\n-\ttemp_dump_context tmp (with_optinfo, MSG_ALL);\n+\ttemp_dump_context tmp (with_optinfo,\n+\t\t\t       MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \tdump_printf (MSG_NOTE, \"gimple: %E\", stmt);\n \n \tASSERT_DUMPED_TEXT_EQ (tmp, \"gimple: return;\");\n@@ -2154,7 +2197,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n       /* Test of dump_printf with %G.  */\n       {\n-\ttemp_dump_context tmp (with_optinfo, MSG_ALL);\n+\ttemp_dump_context tmp (with_optinfo,\n+\t\t\t       MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \tdump_printf (MSG_NOTE, \"gimple: %G\", stmt);\n \n \tASSERT_DUMPED_TEXT_EQ (tmp, \"gimple: return;\\n\");\n@@ -2176,7 +2220,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \t - multiple dump-specific format codes: some consecutive, others\n \t separated by text, trailing text after the final one.  */\n       {\n-\ttemp_dump_context tmp (with_optinfo, MSG_ALL);\n+\ttemp_dump_context tmp (with_optinfo,\n+\t\t\t       MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \tdump_printf_loc (MSG_NOTE, loc, \"before %T and %T\"\n \t\t\t \" %i consecutive %E%E after\\n\",\n \t\t\t integer_zero_node, test_decl, 42, stmt, stmt);\n@@ -2203,7 +2248,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n       /* Tree, via dump_generic_expr.  */\n       {\n-\ttemp_dump_context tmp (with_optinfo, MSG_ALL);\n+\ttemp_dump_context tmp (with_optinfo,\n+\t\t\t       MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \tdump_printf_loc (MSG_NOTE, loc, \"test of tree: \");\n \tdump_generic_expr (MSG_NOTE, TDF_SLIM, integer_zero_node);\n \n@@ -2222,7 +2268,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n       /* Tree, via dump_generic_expr_loc.  */\n       {\n-\ttemp_dump_context tmp (with_optinfo, MSG_ALL);\n+\ttemp_dump_context tmp (with_optinfo,\n+\t\t\t       MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \tdump_generic_expr_loc (MSG_NOTE, loc, TDF_SLIM, integer_one_node);\n \n \tASSERT_DUMPED_TEXT_EQ (tmp, \"test.txt:5:10: note: 1\");\n@@ -2241,7 +2288,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n       {\n \t/* dump_gimple_stmt_loc.  */\n \t{\n-\t  temp_dump_context tmp (with_optinfo, MSG_ALL);\n+\t  temp_dump_context tmp (with_optinfo,\n+\t\t\t\t MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \t  dump_gimple_stmt_loc (MSG_NOTE, loc, TDF_SLIM, stmt, 2);\n \n \t  ASSERT_DUMPED_TEXT_EQ (tmp, \"test.txt:5:10: note: return;\\n\");\n@@ -2256,7 +2304,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n \t/* dump_gimple_stmt.  */\n \t{\n-\t  temp_dump_context tmp (with_optinfo, MSG_ALL);\n+\t  temp_dump_context tmp (with_optinfo,\n+\t\t\t\t MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, stmt, 2);\n \n \t  ASSERT_DUMPED_TEXT_EQ (tmp, \"return;\\n\");\n@@ -2271,7 +2320,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n \t/* dump_gimple_expr_loc.  */\n \t{\n-\t  temp_dump_context tmp (with_optinfo, MSG_ALL);\n+\t  temp_dump_context tmp (with_optinfo,\n+\t\t\t\t MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \t  dump_gimple_expr_loc (MSG_NOTE, loc, TDF_SLIM, stmt, 2);\n \n \t  ASSERT_DUMPED_TEXT_EQ (tmp, \"test.txt:5:10: note: return;\");\n@@ -2286,7 +2336,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n \t/* dump_gimple_expr.  */\n \t{\n-\t  temp_dump_context tmp (with_optinfo, MSG_ALL);\n+\t  temp_dump_context tmp (with_optinfo,\n+\t\t\t\t MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \t  dump_gimple_expr (MSG_NOTE, TDF_SLIM, stmt, 2);\n \n \t  ASSERT_DUMPED_TEXT_EQ (tmp, \"return;\");\n@@ -2302,7 +2353,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n       /* poly_int.  */\n       {\n-\ttemp_dump_context tmp (with_optinfo, MSG_ALL);\n+\ttemp_dump_context tmp (with_optinfo,\n+\t\t\t       MSG_ALL_KINDS | MSG_PRIORITY_USER_FACING);\n \tdump_dec (MSG_NOTE, poly_int64 (42));\n \n \tASSERT_DUMPED_TEXT_EQ (tmp, \"42\");\n@@ -2315,61 +2367,108 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \t  }\n       }\n \n-      /* scopes.  */\n-      {\n-\ttemp_dump_context tmp (with_optinfo, MSG_ALL);\n-\tdump_printf_loc (MSG_NOTE, stmt, \"msg 1\\n\");\n+      /* Scopes.  Test with all 4 combinations of\n+\t filtering by MSG_PRIORITY_USER_FACING\n+\t and/or filtering by MSG_PRIORITY_INTERNALS.  */\n+      for (int j = 0; j < 3; j++)\n \t{\n-\t  AUTO_DUMP_SCOPE (\"outer scope\", stmt);\n-\t  dump_printf_loc (MSG_NOTE, stmt, \"msg 2\\n\");\n+\t  dump_flags_t dump_filter = MSG_ALL_KINDS;\n+\t  if (j % 2)\n+\t    dump_filter |= MSG_PRIORITY_USER_FACING;\n+\t  if (j / 2)\n+\t    dump_filter |= MSG_PRIORITY_INTERNALS;\n+\n+\t  temp_dump_context tmp (with_optinfo, dump_filter);\n+\t  /* Emit various messages, mostly with implicit priority.  */\n+\t  dump_printf_loc (MSG_NOTE, stmt, \"msg 1\\n\");\n+\t  dump_printf_loc (MSG_NOTE | MSG_PRIORITY_INTERNALS, stmt,\n+\t\t\t   \"explicitly internal msg\\n\");\n \t  {\n-\t    AUTO_DUMP_SCOPE (\"middle scope\", stmt);\n-\t    dump_printf_loc (MSG_NOTE, stmt, \"msg 3\\n\");\n+\t    AUTO_DUMP_SCOPE (\"outer scope\", stmt);\n+\t    dump_printf_loc (MSG_NOTE, stmt, \"msg 2\\n\");\n \t    {\n-\t      AUTO_DUMP_SCOPE (\"inner scope\", stmt);\n-\t      dump_printf_loc (MSG_NOTE, stmt, \"msg 4\\n\");\n+\t      AUTO_DUMP_SCOPE (\"middle scope\", stmt);\n+\t      dump_printf_loc (MSG_NOTE, stmt, \"msg 3\\n\");\n+\t      {\n+\t\tAUTO_DUMP_SCOPE (\"inner scope\", stmt);\n+\t\tdump_printf_loc (MSG_NOTE, stmt, \"msg 4\\n\");\n+\t\tdump_printf_loc (MSG_NOTE | MSG_PRIORITY_USER_FACING, stmt,\n+\t\t\t\t \"explicitly user-facing msg\\n\");\n+\t      }\n+\t      dump_printf_loc (MSG_NOTE, stmt, \"msg 5\\n\");\n \t    }\n-\t    dump_printf_loc (MSG_NOTE, stmt, \"msg 5\\n\");\n+\t    dump_printf_loc (MSG_NOTE, stmt, \"msg 6\\n\");\n \t  }\n-\t  dump_printf_loc (MSG_NOTE, stmt, \"msg 6\\n\");\n-\t}\n-\tdump_printf_loc (MSG_NOTE, stmt, \"msg 7\\n\");\n+\t  dump_printf_loc (MSG_NOTE, stmt, \"msg 7\\n\");\n \n-\tASSERT_DUMPED_TEXT_EQ (tmp,\n-\t\t\t       \"test.txt:5:10: note: msg 1\\n\"\n-\t\t\t       \"test.txt:5:10: note: === outer scope ===\\n\"\n-\t\t\t       \"test.txt:5:10: note:  msg 2\\n\"\n-\t\t\t       \"test.txt:5:10: note:  === middle scope ===\\n\"\n-\t\t\t       \"test.txt:5:10: note:   msg 3\\n\"\n-\t\t\t       \"test.txt:5:10: note:   === inner scope ===\\n\"\n-\t\t\t       \"test.txt:5:10: note:    msg 4\\n\"\n-\t\t\t       \"test.txt:5:10: note:   msg 5\\n\"\n-\t\t\t       \"test.txt:5:10: note:  msg 6\\n\"\n-\t\t\t       \"test.txt:5:10: note: msg 7\\n\");\n-\tif (with_optinfo)\n-\t  {\n-\t    optinfo *info = tmp.get_pending_optinfo ();\n-\t    ASSERT_TRUE (info != NULL);\n-\t    ASSERT_EQ (info->num_items (), 1);\n-\t    ASSERT_IS_TEXT (info->get_item (0), \"msg 7\\n\");\n-\t  }\n-      }\n+\t  switch (dump_filter & MSG_ALL_PRIORITIES)\n+\t    {\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    case 0:\n+\t      ASSERT_DUMPED_TEXT_EQ (tmp, \"\");\n+\t      break;\n+\t    case MSG_PRIORITY_USER_FACING:\n+\t      ASSERT_DUMPED_TEXT_EQ\n+\t\t(tmp,\n+\t\t \"test.txt:5:10: note: msg 1\\n\"\n+\t\t \"test.txt:5:10: note:    explicitly user-facing msg\\n\"\n+\t\t \"test.txt:5:10: note: msg 7\\n\");\n+\t      break;\n+\t    case MSG_PRIORITY_INTERNALS:\n+\t      ASSERT_DUMPED_TEXT_EQ\n+\t\t(tmp,\n+\t\t \"test.txt:5:10: note: explicitly internal msg\\n\"\n+\t\t \"test.txt:5:10: note:  === outer scope ===\\n\"\n+\t\t \"test.txt:5:10: note:  msg 2\\n\"\n+\t\t \"test.txt:5:10: note:   === middle scope ===\\n\"\n+\t\t \"test.txt:5:10: note:   msg 3\\n\"\n+\t\t \"test.txt:5:10: note:    === inner scope ===\\n\"\n+\t\t \"test.txt:5:10: note:    msg 4\\n\"\n+\t\t \"test.txt:5:10: note:   msg 5\\n\"\n+\t\t \"test.txt:5:10: note:  msg 6\\n\");\n+\t      break;\n+\t    case MSG_ALL_PRIORITIES:\n+\t      ASSERT_DUMPED_TEXT_EQ\n+\t\t(tmp,\n+\t\t \"test.txt:5:10: note: msg 1\\n\"\n+\t\t \"test.txt:5:10: note: explicitly internal msg\\n\"\n+\t\t \"test.txt:5:10: note: === outer scope ===\\n\"\n+\t\t \"test.txt:5:10: note:  msg 2\\n\"\n+\t\t \"test.txt:5:10: note:  === middle scope ===\\n\"\n+\t\t \"test.txt:5:10: note:   msg 3\\n\"\n+\t\t \"test.txt:5:10: note:   === inner scope ===\\n\"\n+\t\t \"test.txt:5:10: note:    msg 4\\n\"\n+\t\t \"test.txt:5:10: note:    explicitly user-facing msg\\n\"\n+\t\t \"test.txt:5:10: note:   msg 5\\n\"\n+\t\t \"test.txt:5:10: note:  msg 6\\n\"\n+\t\t \"test.txt:5:10: note: msg 7\\n\");\n+\t      break;\n+\t    }\n+\t  if (with_optinfo)\n+\t    {\n+\t      optinfo *info = tmp.get_pending_optinfo ();\n+\t      ASSERT_TRUE (info != NULL);\n+\t      ASSERT_EQ (info->num_items (), 1);\n+\t      ASSERT_IS_TEXT (info->get_item (0), \"msg 7\\n\");\n+\t    }\n+\t}\n     }\n \n   /* Verify that MSG_* affects optinfo->get_kind (); we tested MSG_NOTE\n      above.  */\n   {\n     /* MSG_OPTIMIZED_LOCATIONS.  */\n     {\n-      temp_dump_context tmp (true, MSG_ALL);\n+      temp_dump_context tmp (true, MSG_ALL_KINDS);\n       dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc, \"test\");\n       ASSERT_EQ (tmp.get_pending_optinfo ()->get_kind (),\n \t\t OPTINFO_KIND_SUCCESS);\n     }\n \n     /* MSG_MISSED_OPTIMIZATION.  */\n     {\n-      temp_dump_context tmp (true, MSG_ALL);\n+      temp_dump_context tmp (true, MSG_ALL_KINDS);\n       dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc, \"test\");\n       ASSERT_EQ (tmp.get_pending_optinfo ()->get_kind (),\n \t\t OPTINFO_KIND_FAILURE);\n@@ -2378,7 +2477,8 @@ test_capture_of_dump_calls (const line_table_case &case_)\n \n   /* Verify that MSG_* affect AUTO_DUMP_SCOPE and the dump calls.  */\n   {\n-    temp_dump_context tmp (false, MSG_OPTIMIZED_LOCATIONS);\n+    temp_dump_context tmp (false,\n+\t\t\t   MSG_OPTIMIZED_LOCATIONS | MSG_ALL_PRIORITIES);\n     dump_printf_loc (MSG_NOTE, stmt, \"msg 1\\n\");\n     {\n       AUTO_DUMP_SCOPE (\"outer scope\", stmt);"}, {"sha": "59339057c1b28225b558a45c8ffa10f45a6a09c3", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -145,6 +145,9 @@ enum dump_flag\n   /* Dump folding details.  */\n   TDF_FOLDING = (1 << 21),\n \n+  /* MSG_* flags for expressing the kinds of message to\n+     be emitted by -fopt-info.  */\n+\n   /* -fopt-info optimized sources.  */\n   MSG_OPTIMIZED_LOCATIONS = (1 << 22),\n \n@@ -154,15 +157,37 @@ enum dump_flag\n   /* General optimization info.  */\n   MSG_NOTE = (1 << 24),\n \n-  MSG_ALL = (MSG_OPTIMIZED_LOCATIONS\n-\t     | MSG_MISSED_OPTIMIZATION\n-\t     | MSG_NOTE),\n+  /* Mask for selecting MSG_-kind flags.  */\n+  MSG_ALL_KINDS = (MSG_OPTIMIZED_LOCATIONS\n+\t\t   | MSG_MISSED_OPTIMIZATION\n+\t\t   | MSG_NOTE),\n+\n+  /* MSG_PRIORITY_* flags for expressing the priority levels of message\n+     to be emitted by -fopt-info, and filtering on them.\n+     By default, messages at the top-level dump scope are \"user-facing\",\n+     whereas those that are in nested scopes are implicitly \"internals\".\n+     This behavior can be overridden for a given dump message by explicitly\n+     specifying one of the MSG_PRIORITY_* flags.\n+\n+     By default, dump files show both kinds of message, whereas -fopt-info\n+     only shows \"user-facing\" messages, and requires the \"-internals\"\n+     sub-option of -fopt-info to show the internal messages.  */\n+\n+  /* Implicitly supplied for messages at the top-level dump scope.  */\n+  MSG_PRIORITY_USER_FACING = (1 << 25),\n+\n+  /* Implicitly supplied for messages within nested dump scopes.  */\n+  MSG_PRIORITY_INTERNALS = (1 << 26),\n+\n+  /* Mask for selecting MSG_PRIORITY_* flags.  */\n+  MSG_ALL_PRIORITIES = (MSG_PRIORITY_USER_FACING\n+\t\t\t| MSG_PRIORITY_INTERNALS),\n \n   /* Dumping for -fcompare-debug.  */\n-  TDF_COMPARE_DEBUG = (1 << 25),\n+  TDF_COMPARE_DEBUG = (1 << 27),\n \n   /* All values.  */\n-  TDF_ALL_VALUES = (1 << 26) - 1\n+  TDF_ALL_VALUES = (1 << 28) - 1\n };\n \n /* Dump flags type.  */\n@@ -549,7 +574,11 @@ class auto_dump_scope\n    and then calling\n      dump_end_scope ();\n    once the object goes out of scope, thus capturing the nesting of\n-   the scopes.  */\n+   the scopes.\n+\n+   These scopes affect dump messages within them: dump messages at the\n+   top level implicitly default to MSG_PRIORITY_USER_FACING, whereas those\n+   in a nested scope implicitly default to MSG_PRIORITY_INTERNALS.  */\n \n #define AUTO_DUMP_SCOPE(NAME, LOC) \\\n   auto_dump_scope scope (NAME, LOC)"}, {"sha": "f410171a370fffd107188262f07165dc1ada76cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -1,3 +1,11 @@\n+2018-10-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/dump-1.c: Update expected output for test_scopes\n+\tdue to \"-internals\" not being selected.\n+\t* gcc.dg/plugin/dump-2.c: New test, based on dump-1.c, with\n+\t\"-internals\" added to re-enable the output from test_scopes.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add dump-2.c.\n+\n 2018-10-04  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gnat.dg/string_merge1.adb: New test."}, {"sha": "95bd7a4224dd986a178a6962765a880b05618cbe", "filename": "gcc/testsuite/gcc.dg/plugin/dump-1.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-1.c?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -18,11 +18,7 @@ void test_remarks (void)\n   test_wide_int (); /* { dg-message \"test of wide int: 0\" } */\n   test_poly_int (); /* { dg-message \"test of poly int: 42\" } */\n \n-  test_scopes (); /* { dg-line test_scopes_line } */\n-  /* { dg-message \"=== outer scope ===\" \"\" { target *-*-* } test_scopes_line } */\n-  /* { dg-message \" at outer scope\" \"\" { target *-*-* } test_scopes_line } */\n-  /* { dg-message \" === middle scope ===\" \"\" { target *-*-* } test_scopes_line } */\n-  /* { dg-message \"  at middle scope\" \"\" { target *-*-* } test_scopes_line } */\n-  /* { dg-message \"  === innermost scope ===\" \"\" { target *-*-* } test_scopes_line } */\n-  /* { dg-message \"   at innermost scope\" \"\" { target *-*-* } test_scopes_line } */\n+  /* Dump messages in nested scopes are not printed by default, and\n+     require \"-internals\".  */\n+  test_scopes ();\n }"}, {"sha": "961a3d3c02ae076c4143f2eb220ce3a651c4e3ed", "filename": "gcc/testsuite/gcc.dg/plugin/dump-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdump-2.c?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopt-info-note-internals\" } */\n+\n+extern void test_string_literal (void);\n+extern void test_tree (void);\n+extern void test_gimple (int);\n+extern void test_cgraph_node (void);\n+extern void test_wide_int (void);\n+extern void test_poly_int (void);\n+extern void test_scopes (void);\n+\n+void test_remarks (void)\n+{\n+  test_string_literal (); /* { dg-message \"test of dump for 'test_string_literal'\" } */\n+  test_tree (); /* { dg-message \"test of tree: 0\" } */\n+  test_gimple (42); /* { dg-message \"test of gimple: test_gimple \\\\(42\\\\);\" } */\n+  test_cgraph_node (); /* { dg-message \"test of callgraph node: test_cgraph_node/\\[0-9\\]+\" } */\n+  test_wide_int (); /* { dg-message \"test of wide int: 0\" } */\n+  test_poly_int (); /* { dg-message \"test of poly int: 42\" } */\n+\n+  /* Dump messages in nested scopes are not printed by default, and\n+     require \"-internals\".  */\n+  test_scopes (); /* { dg-line test_scopes_line } */\n+  /* { dg-message \"=== outer scope ===\" \"\" { target *-*-* } test_scopes_line } */\n+  /* { dg-message \" at outer scope\" \"\" { target *-*-* } test_scopes_line } */\n+  /* { dg-message \" === middle scope ===\" \"\" { target *-*-* } test_scopes_line } */\n+  /* { dg-message \"  at middle scope\" \"\" { target *-*-* } test_scopes_line } */\n+  /* { dg-message \"  === innermost scope ===\" \"\" { target *-*-* } test_scopes_line } */\n+  /* { dg-message \"   at innermost scope\" \"\" { target *-*-* } test_scopes_line } */\n+}"}, {"sha": "1d06c04562e304ff7a985f228684965a30beef96", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -102,7 +102,8 @@ set plugin_test_list [list \\\n     { expensive_selftests_plugin.c \\\n \t  expensive-selftests-1.c } \\\n     { dump_plugin.c \\\n-\t  dump-1.c } \\\n+\t  dump-1.c \\\n+\t  dump-2.c } \\\n ]\n \n foreach plugin_test $plugin_test_list {"}, {"sha": "1d1d1147696fefebf94fb1b844af65b8088c1ecb", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -3068,11 +3068,13 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n       && dump_enabled_p ())\n     {\n       if (version_alias)\n-        dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+        dump_printf_loc (MSG_OPTIMIZED_LOCATIONS | MSG_PRIORITY_USER_FACING,\n+\t\t\t vect_location,\n                          \"loop versioned for vectorization because of \"\n \t\t\t \"possible aliasing\\n\");\n       if (version_align)\n-        dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n+        dump_printf_loc (MSG_OPTIMIZED_LOCATIONS | MSG_PRIORITY_USER_FACING,\n+\t\t\t vect_location,\n                          \"loop versioned for vectorization to enhance \"\n \t\t\t \"alignment\\n\");\n "}, {"sha": "af5d5bf2b36b559ba49beecdffbfaa09b7ecde57", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7db960c5b6adad2fd11789870aa514985ea0da04/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=7db960c5b6adad2fd11789870aa514985ea0da04", "patch": "@@ -1420,7 +1420,11 @@ extern dump_user_location_t vect_location;\n    and then calling\n      dump_end_scope ();\n    once the object goes out of scope, thus capturing the nesting of\n-   the scopes.  */\n+   the scopes.\n+\n+   These scopes affect dump messages within them: dump messages at the\n+   top level implicitly default to MSG_PRIORITY_USER_FACING, whereas those\n+   in a nested scope implicitly default to MSG_PRIORITY_INTERNALS.  */\n \n #define DUMP_VECT_SCOPE(MSG) \\\n   AUTO_DUMP_SCOPE (MSG, vect_location)"}]}