{"sha": "ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYxYzZjMGU1NDk5YTgzYmU3Zjg2Y2NmNjRlM2ViODgxNDEzN2NjOQ==", "commit": {"author": {"name": "Claire Dross", "email": "dross@adacore.com", "date": "2019-08-19T08:35:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-19T08:35:53Z"}, "message": "[Ada] Allow reading a borrowed object inside a call to a pledge function\n\nNo impact on regular compilation.\n\n2019-08-19  Claire Dross  <dross@adacore.com>\n\ngcc/ada/\n\n\t* sem_spark.ads, sem_spark.adb (Is_Pledge_Function): New\n\tparameter of the generic. Function used to decide whether a\n\tfunction is a pledge function.\n\t(Check_Not_Borrowed): Disable check inside the second parameter\n\tof a pledge function for the path borrowed by the first\n\tparameter. Also disable checks for entities inside a Global\n\tcontract.\n\nFrom-SVN: r274644", "tree": {"sha": "81016f920eb043f5bcee222144f2c74e9403211e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81016f920eb043f5bcee222144f2c74e9403211e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9/comments", "author": {"login": "clairedross", "id": 8180017, "node_id": "MDQ6VXNlcjgxODAwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8180017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clairedross", "html_url": "https://github.com/clairedross", "followers_url": "https://api.github.com/users/clairedross/followers", "following_url": "https://api.github.com/users/clairedross/following{/other_user}", "gists_url": "https://api.github.com/users/clairedross/gists{/gist_id}", "starred_url": "https://api.github.com/users/clairedross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clairedross/subscriptions", "organizations_url": "https://api.github.com/users/clairedross/orgs", "repos_url": "https://api.github.com/users/clairedross/repos", "events_url": "https://api.github.com/users/clairedross/events{/privacy}", "received_events_url": "https://api.github.com/users/clairedross/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "123f02156122ea13f3bfabdef2b6385a25527158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/123f02156122ea13f3bfabdef2b6385a25527158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/123f02156122ea13f3bfabdef2b6385a25527158"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "d06fd4ef53add7b90895d35c289c187ba45c4c6e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9", "patch": "@@ -1,3 +1,13 @@\n+2019-08-19  Claire Dross  <dross@adacore.com>\n+\n+\t* sem_spark.ads, sem_spark.adb (Is_Pledge_Function): New\n+\tparameter of the generic. Function used to decide whether a\n+\tfunction is a pledge function.\n+\t(Check_Not_Borrowed): Disable check inside the second parameter\n+\tof a pledge function for the path borrowed by the first\n+\tparameter. Also disable checks for entities inside a Global\n+\tcontract.\n+\n 2019-08-19  Joffrey Huguet  <huguet@adacore.com>\n \n \t* libgnat/a-cfdlli.ads, libgnat/a-cfhama.ads,"}, {"sha": "30e1426774792ca41c4b3a52089d5010ca5773f4", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9", "patch": "@@ -5008,13 +5008,49 @@ package body Sem_SPARK is\n               Get_First_Key (Current_Borrowers);\n             Var      : Entity_Id;\n             Borrowed : Node_Id;\n+            B_Pledge : Entity_Id := Empty;\n \n          begin\n+            --  Search for a call to a pledge function or a global pragma in\n+            --  the parents of Expr.\n+\n+            declare\n+               Call : Node_Id := Expr;\n+            begin\n+               while Present (Call)\n+                 and then\n+                   (Nkind (Call) /= N_Function_Call\n+                     or else not Is_Pledge_Function (Get_Called_Entity (Call)))\n+               loop\n+                  --  Do not check for borrowed objects in global contracts\n+                  --  ??? However we should keep these objects in the borrowed\n+                  --  state when verifying the subprogram so that we can make\n+                  --  sure that they are only read inside pledges.\n+                  --  ??? There is probably a better way to disable checking of\n+                  --  borrows inside global contracts.\n+\n+                  if Nkind (Call) = N_Pragma\n+                    and then Get_Pragma_Id (Pragma_Name (Call)) = Pragma_Global\n+                  then\n+                     return;\n+                  end if;\n+\n+                  Call := Parent (Call);\n+               end loop;\n+\n+               if Present (Call)\n+                 and then Nkind (First_Actual (Call)) in N_Has_Entity\n+               then\n+                  B_Pledge := Entity (First_Actual (Call));\n+               end if;\n+            end;\n+\n             while Key.Present loop\n                Var := Key.K;\n                Borrowed := Get (Current_Borrowers, Var);\n \n                if Is_Prefix_Or_Almost (Pref => Borrowed, Expr => Expr)\n+                 and then Var /= B_Pledge\n                  and then Emit_Messages\n                then\n                   Error_Msg_Sloc := Sloc (Borrowed);"}, {"sha": "0aaa11584badf815b65ea75cb68598c0520f2fe9", "filename": "gcc/ada/sem_spark.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9/gcc%2Fada%2Fsem_spark.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9/gcc%2Fada%2Fsem_spark.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.ads?ref=ef1c6c0e5499a83be7f86ccf64e3eb8814137cc9", "patch": "@@ -150,6 +150,9 @@ generic\n    with function Emit_Messages return Boolean;\n    --  Return True when error messages should be emitted.\n \n+   with function Is_Pledge_Function (E : Entity_Id) return Boolean;\n+   --  Return True if E is annotated with a pledge annotation\n+\n package Sem_SPARK is\n \n    function Is_Legal (N : Node_Id) return Boolean;"}]}