{"sha": "b85a03ae11b157d60ddf93b71632efe0bde3bafd", "node_id": "C_kwDOANBUbNoAKGI4NWEwM2FlMTFiMTU3ZDYwZGRmOTNiNzE2MzJlZmUwYmRlM2JhZmQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-15T00:16:20Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-15T00:16:20Z"}, "message": "Daily bump.", "tree": {"sha": "4ab5b2a3dd68f63ecabc26a053d015ae336b08ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ab5b2a3dd68f63ecabc26a053d015ae336b08ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b85a03ae11b157d60ddf93b71632efe0bde3bafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85a03ae11b157d60ddf93b71632efe0bde3bafd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b85a03ae11b157d60ddf93b71632efe0bde3bafd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85a03ae11b157d60ddf93b71632efe0bde3bafd/comments", "author": null, "committer": null, "parents": [{"sha": "09f33d12b542e018d747192b043878b1cb538f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f33d12b542e018d747192b043878b1cb538f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09f33d12b542e018d747192b043878b1cb538f9b"}], "stats": {"total": 183, "additions": 182, "deletions": 1}, "files": [{"sha": "2b7618d676cb8aae6e1d1e0850cdbfd42ba972d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85a03ae11b157d60ddf93b71632efe0bde3bafd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85a03ae11b157d60ddf93b71632efe0bde3bafd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b85a03ae11b157d60ddf93b71632efe0bde3bafd", "patch": "@@ -1,3 +1,87 @@\n+2021-11-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.h (struct modref_summary): Add nondeterministic\n+\tand calls_interposable flags.\n+\t* ipa-modref.c (modref_summary::modref_summary): Initialize new flags.\n+\t(modref_summary::useful_p): Check new flags.\n+\t(struct modref_summary_lto): Add nondeterministic and\n+\tcalls_interposable flags.\n+\t(modref_summary_lto::modref_summary_lto): Initialize new flags.\n+\t(modref_summary_lto::useful_p): Check new flags.\n+\t(modref_summary::dump): Dump new flags.\n+\t(modref_summary_lto::dump): Dump new flags.\n+\t(ignore_nondeterminism_p): New function.\n+\t(merge_call_side_effects): Merge new flags.\n+\t(process_fnspec): Likewise.\n+\t(analyze_load): Volatile access is nondeterministic.\n+\t(analyze_store): Liekwise.\n+\t(analyze_stmt): Volatile ASM is nondeterministic.\n+\t(analyze_function): Clear new flags.\n+\t(modref_summaries::duplicate): Duplicate new flags.\n+\t(modref_summaries_lto::duplicate): Duplicate new flags.\n+\t(modref_write): Stream new flags.\n+\t(read_section): Stream new flags.\n+\t(propagate_unknown_call): Update new flags.\n+\t(modref_propagate_in_scc): Propagate new flags.\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): Check\n+\tcalls_interposable.\n+\t* tree-ssa-structalias.c (determine_global_memory_access):\n+\tLikewise.\n+\n+2021-11-14  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* config/vax/vax.h (SET_RATIO): New macro.\n+\t* config/vax/vax.md (UNSPEC_SETMEM_FILL): New constant.\n+\t(setmemhi): New expander.\n+\t(setmemhi1): New insn and splitter.\n+\t(*setmemhi1): New insn.\n+\n+2021-11-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.c (modref_access_node::update_for_kills): New\n+\tmember function.\n+\t(modref_access_node::merge_for_kills): Likewise.\n+\t(modref_access_node::insert_kill): Likewise.\n+\t* ipa-modref-tree.h (modref_access_node::update_for_kills,\n+\tmodref_access_node::merge_for_kills, modref_access_node::insert_kill):\n+\tDeclare.\n+\t(modref_access_node::useful_for_kill): New member function.\n+\t* ipa-modref.c (modref_summary::useful_p): Release useless kills.\n+\t(lto_modref_summary): Add kills.\n+\t(modref_summary::dump): Dump kills.\n+\t(record_access): Add mdoref_access_node parameter.\n+\t(record_access_lto): Likewise.\n+\t(merge_call_side_effects): Merge kills.\n+\t(analyze_call): Add ALWAYS_EXECUTED param and pass it around.\n+\t(struct summary_ptrs): Add always_executed filed.\n+\t(analyze_load): Update.\n+\t(analyze_store): Update; record kills.\n+\t(analyze_stmt): Add always_executed; record kills in clobbers.\n+\t(analyze_function): Track always_executed.\n+\t(modref_summaries::duplicate): Duplicate kills.\n+\t(update_signature): Release kills.\n+\t* ipa-modref.h (struct modref_summary): Add kills.\n+\t* tree-ssa-alias.c (alias_stats): Add kill stats.\n+\t(dump_alias_stats): Dump kill stats.\n+\t(store_kills_ref_p): Break out from ...\n+\t(stmt_kills_ref_p): Use it; handle modref info based kills.\n+\n+2021-11-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/103229\n+\t* gimple-range-cache.cc (ssa_global_cache::clear): Do not pass\n+\tnull value to memset.\n+\n+2021-11-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref-tree.c (modref_access_node::get_call_arg): New member\n+\tfunction.\n+\t(modref_access_node::get_ao_ref): Likewise.\n+\t* ipa-modref-tree.h (modref_access_node::get_call_arg): Declare.\n+\t(modref_access_node::get_ao_ref): Declare.\n+\t* tree-ssa-alias.c (modref_may_conflict): Use new accessors.\n+\t* tree-ssa-dse.c (dse_optimize_call): Use new accessors.\n+\n 2021-11-13  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/103211"}, {"sha": "4dc8ff2721ee427216f9ab4556616073e5bf98dc", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85a03ae11b157d60ddf93b71632efe0bde3bafd/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85a03ae11b157d60ddf93b71632efe0bde3bafd/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b85a03ae11b157d60ddf93b71632efe0bde3bafd", "patch": "@@ -1 +1 @@\n-20211114\n+20211115"}, {"sha": "76f2e04b625ad767a69d131f793ab24bcf59414c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85a03ae11b157d60ddf93b71632efe0bde3bafd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85a03ae11b157d60ddf93b71632efe0bde3bafd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b85a03ae11b157d60ddf93b71632efe0bde3bafd", "patch": "@@ -1,3 +1,46 @@\n+2021-11-15  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* gcc.dg/tree-ssa/pr100278.c: Move to ...\n+\t* gcc.c-torture/compile/pr100278.c: Here.\n+\tRemove dg-do and dg-options.\n+\t* gcc.dg/tree-ssa/pr101189.c: Move to ...\n+\t* gcc.c-torture/compile/pr101189.c: Here.\n+\tRemove dg-do and dg-options.\n+\t* gcc.dg/tree-ssa/pr100453.c: Move to ...\n+\t* gcc.c-torture/execute/pr100453.c: Here.\n+\tRemove dg-do and dg-options.\n+\t* gcc.dg/tree-ssa/pr101335.c: Move to ...\n+\t* gcc.c-torture/execute/pr101335.c: Here\n+\tRemove dg-do and dg-options.\n+\n+2021-11-14  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* gcc.target/vax/setmem.c: New test.\n+\n+2021-11-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/tree-ssa/modref-dse-3.c: New test.\n+\n+2021-11-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr103229.c: Removed.\n+\n+2021-11-14  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr103229.c: New test.\n+\n+2021-11-14  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/tsan/free_race.c: Remove unnecessary -ldl.\n+\t* c-c++-common/tsan/free_race2.c: Likewise.\n+\n+2021-11-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* c-c++-common/asan/null-deref-1.c: Update template.\n+\t* c-c++-common/tsan/free_race.c: Update template.\n+\t* c-c++-common/tsan/free_race2.c: Update template.\n+\t* gcc.dg/ipa/ipa-sra-4.c: Update template.\n+\n 2021-11-13  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/cpp1z/inh-ctor23.C: Fix template"}, {"sha": "93159f35e590ff705d69a8d924d11a65274d9a7d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b85a03ae11b157d60ddf93b71632efe0bde3bafd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b85a03ae11b157d60ddf93b71632efe0bde3bafd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b85a03ae11b157d60ddf93b71632efe0bde3bafd", "patch": "@@ -1,3 +1,57 @@\n+2021-11-14  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/safe_container.h (_Safe_container<>::_M_safe): Remove.\n+\t* include/debug/deque (deque::operator=(initializer_list<>)): Replace\n+\t_M_base() call with _Base:: call.\n+\t(deque::operator[](size_type)): Likewise.\n+\t* include/debug/forward_list (forward_list(forward_list&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(forward_list::operator=(initializer_list<>)): Remove _M_base() calls.\n+\t(forward_list::splice_after, forward_list::merge): Likewise.\n+\t* include/debug/list (list(list&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(list::operator=(initializer_list<>)): Remove _M_base() calls.\n+\t(list::splice, list::merge): Likewise.\n+\t* include/debug/map.h (map(map&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(map::operator=(initializer_list<>)): Remove _M_base() calls.\n+\t* include/debug/multimap.h (multimap(multimap&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(multimap::operator=(initializer_list<>)): Remove _M_base() calls.\n+\t* include/debug/set.h (set(set&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(set::operator=(initializer_list<>)): Remove _M_base() calls.\n+\t* include/debug/multiset.h (multiset(multiset&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(multiset::operator=(initializer_list<>)): Remove _M_base() calls.\n+\t* include/debug/string (basic_string(basic_string&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(basic_string::operator=(initializer_list<>)): Remove _M_base() call.\n+\t(basic_string::operator=(const _CharT*), basic_string::operator=(_CharT)): Likewise.\n+\t(basic_string::operator[](size_type), basic_string::operator+=(const basic_string&)):\n+\tLikewise.\n+\t(basic_string::operator+=(const _Char*), basic_string::operator+=(_CharT)): Likewise.\n+\t* include/debug/unordered_map (unordered_map(unordered_map&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(unordered_map::operator=(initializer_list<>), unordered_map::merge):\n+\tRemove _M_base() calls.\n+\t(unordered_multimap(unordered_multimap&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(unordered_multimap::operator=(initializer_list<>), unordered_multimap::merge):\n+\tRemove _M_base() calls.\n+\t* include/debug/unordered_set (unordered_set(unordered_set&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(unordered_set::operator=(initializer_list<>), unordered_set::merge):\n+\tRemove _M_base() calls.\n+\t(unordered_multiset(unordered_multiset&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(unordered_multiset::operator=(initializer_list<>), unordered_multiset::merge):\n+\tRemove _M_base() calls.\n+\t* include/debug/vector (vector(vector&&, const allocator_type&)):\n+\tRemove _M_safe() and _M_base() calls.\n+\t(vector::operator=(initializer_list<>)): Remove _M_base() calls.\n+\t(vector::operator[](size_type)): Likewise.\n+\n 2021-11-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/Makefile.am: Add spanstream header."}]}