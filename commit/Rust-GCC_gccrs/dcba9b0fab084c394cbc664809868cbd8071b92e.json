{"sha": "dcba9b0fab084c394cbc664809868cbd8071b92e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiYTliMGZhYjA4NGMzOTRjYmM2NjQ4MDk4NjhjYmQ4MDcxYjkyZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-12-10T07:11:46Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-12-10T07:11:46Z"}, "message": "re PR c++/8153 (ICE with static const member in class)\n\n\tPR c++/8153\n\tPR c++/8036\n\t* NEWS: Document removal of in-class initialization extension for\n\tstatic data members of non-arithmetic, non-enumeration type.\n\t* decl.c (check_static_variable_definition): Do not allow that\n\textension.\n\t* decl2.c (grokfield): Do not call digest_init when processing\n\ttemplates.\n\n\tPR c++/8153\n\tPR c++/8036\n\t* g++.dg/template/static1.C: New test.\n\t* g++.dg/template/static2.C: New test.\n\t* g++.old-deja/g++.ext/memconst.C: New test.\n\nFrom-SVN: r59980", "tree": {"sha": "10efb1e00f08d1c153c8fc7a4cba8cd1a174029f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10efb1e00f08d1c153c8fc7a4cba8cd1a174029f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcba9b0fab084c394cbc664809868cbd8071b92e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcba9b0fab084c394cbc664809868cbd8071b92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcba9b0fab084c394cbc664809868cbd8071b92e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcba9b0fab084c394cbc664809868cbd8071b92e/comments", "author": null, "committer": null, "parents": [{"sha": "63358530f8e01cd0317b9e377f5189edb8c36f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63358530f8e01cd0317b9e377f5189edb8c36f37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63358530f8e01cd0317b9e377f5189edb8c36f37"}], "stats": {"total": 110, "additions": 85, "deletions": 25}, "files": [{"sha": "28bdb17b51e846221606913fd83c46537b8146c0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dcba9b0fab084c394cbc664809868cbd8071b92e", "patch": "@@ -1,3 +1,12 @@\n+2002-12-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* NEWS: Document removal of in-class initialization extension for \n+\tstatic data members of non-arithmetic, non-enumeration type.\n+\t* decl.c (check_static_variable_definition): Do not allow that\n+\textension.\n+\t* decl2.c (grokfield): Do not call digest_init when processing\n+\ttemplates.\n+\n 2002-12-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* error.c (dump_expr): Fix format specifier warning."}, {"sha": "36720c60443a050cb210ad38f81c5386ed13df97", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=dcba9b0fab084c394cbc664809868cbd8071b92e", "patch": "@@ -2,6 +2,28 @@\n \n * The \"new X = 3\" extension has been removed; you must now use \"new X(3)\".\n \n+* G++ no longer allows in-class initializations of static data members\n+  that do not have arithmetic or enumeration type.  For example:\n+\n+    struct S { \n+      static const char* const p = \"abc\";\n+    };\n+\n+  is no longer accepted.  \n+\n+  Use the standards-conformant form:\n+\n+    struct S { \n+      static const char* const p;\n+    };\n+\n+    const char* const S::p = \"abc\";\n+\n+  instead.\n+\n+  (ISO C++ is even stricter; it does not allow in-class\n+  initializations of floating-point types.)\n+\n *** Changes in GCC 3.1:\n \n * -fhonor-std and -fno-honor-std have been removed. -fno-honor-std was"}, {"sha": "e68c06447e1466e03b61ecba89713e6c182a6176", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=dcba9b0fab084c394cbc664809868cbd8071b92e", "patch": "@@ -9616,10 +9616,10 @@ check_static_variable_definition (decl, type)\n      the definition, but not both.  If it appears in the class, the\n      member is a member constant.  The file-scope definition is always\n      required.  */\n-  if (CLASS_TYPE_P (type) || TREE_CODE (type) == REFERENCE_TYPE)\n+  if (!ARITHMETIC_TYPE_P (type) && TREE_CODE (type) != ENUMERAL_TYPE)\n     {\n       error (\"invalid in-class initialization of static data member of non-integral type `%T'\",\n-\t\ttype);\n+\t     type);\n       /* If we just return the declaration, crashes will sometimes\n \t occur.  We therefore return void_type_node, as if this was a\n \t friend declaration, to cause callers to completely ignore"}, {"sha": "248fa2d6725189da9e713aed94dd878725081609", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=dcba9b0fab084c394cbc664809868cbd8071b92e", "patch": "@@ -979,30 +979,32 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n \t      else\n \t\tinit = digest_init (TREE_TYPE (value), init, (tree *)0);\n \t    }\n-\t  \n-\t  if (TREE_CODE (init) == CONST_DECL)\n-\t    init = DECL_INITIAL (init);\n-\t  else if (TREE_READONLY_DECL_P (init))\n-\t    init = decl_constant_value (init);\n-\t  else if (TREE_CODE (init) == CONSTRUCTOR)\n-\t    init = digest_init (TREE_TYPE (value), init, (tree *)0);\n-\t  if (init == error_mark_node)\n-\t    /* We must make this look different than `error_mark_node'\n-\t       because `decl_const_value' would mis-interpret it\n-\t       as only meaning that this VAR_DECL is defined.  */\n-\t    init = build1 (NOP_EXPR, TREE_TYPE (value), init);\n-\t  else if (processing_template_decl)\n-\t    ;\n-\t  else if (! TREE_CONSTANT (init))\n+\n+\t  if (!processing_template_decl)\n \t    {\n-\t      /* We can allow references to things that are effectively\n-\t\t static, since references are initialized with the address.  */\n-\t      if (TREE_CODE (TREE_TYPE (value)) != REFERENCE_TYPE\n-\t\t  || (TREE_STATIC (init) == 0\n-\t\t      && (!DECL_P (init) || DECL_EXTERNAL (init) == 0)))\n+\t      if (TREE_CODE (init) == CONST_DECL)\n+\t\tinit = DECL_INITIAL (init);\n+\t      else if (TREE_READONLY_DECL_P (init))\n+\t\tinit = decl_constant_value (init);\n+\t      else if (TREE_CODE (init) == CONSTRUCTOR)\n+\t\tinit = digest_init (TREE_TYPE (value), init, (tree *)0);\n+\t      if (init == error_mark_node)\n+\t\t/* We must make this look different than `error_mark_node'\n+\t\t   because `decl_const_value' would mis-interpret it\n+\t\t   as only meaning that this VAR_DECL is defined.  */\n+\t\tinit = build1 (NOP_EXPR, TREE_TYPE (value), init);\n+\t      else if (! TREE_CONSTANT (init))\n \t\t{\n-\t\t  error (\"field initializer is not constant\");\n-\t\t  init = error_mark_node;\n+\t\t  /* We can allow references to things that are effectively\n+\t\t     static, since references are initialized with the\n+\t\t     address.  */\n+\t\t  if (TREE_CODE (TREE_TYPE (value)) != REFERENCE_TYPE\n+\t\t      || (TREE_STATIC (init) == 0\n+\t\t\t  && (!DECL_P (init) || DECL_EXTERNAL (init) == 0)))\n+\t\t    {\n+\t\t      error (\"field initializer is not constant\");\n+\t\t      init = error_mark_node;\n+\t\t    }\n \t\t}\n \t    }\n \t}"}, {"sha": "ca9c2a6af05f3e68912d3248ca6edeaf3f2b7196", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcba9b0fab084c394cbc664809868cbd8071b92e", "patch": "@@ -1,3 +1,9 @@\n+2002-12-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/template/static1.C: New test.\n+\t* g++.dg/template/static2.C: New test.\n+\t* g++.old-deja/g++.ext/memconst.C: New test.\n+\n 2002-12-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* g++.dg/special/conpr-2.C: Expect failure on solaris2."}, {"sha": "f01d0322e997e7911a7924f8d1f97b61032cfe56", "filename": "gcc/testsuite/g++.dg/template/static1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic1.C?ref=dcba9b0fab084c394cbc664809868cbd8071b92e", "patch": "@@ -0,0 +1,4 @@\n+template <typename T> struct A\n+{\n+  static const int t[1][1]={{0}}; // { dg-error \"in-class\" }\n+};"}, {"sha": "d18c1a7fb4e6dd073a1ae19b997f70656047d7bc", "filename": "gcc/testsuite/g++.dg/template/static2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic2.C?ref=dcba9b0fab084c394cbc664809868cbd8071b92e", "patch": "@@ -0,0 +1,17 @@\n+class A;\n+\n+template<int A::* P>\n+class B\n+{\n+public:\n+  static int A::* const p = P; // { dg-error \"in-class\" }\n+};\n+\n+class A\n+{\n+public:\n+\n+int dummy;\n+\n+B<&A::dummy> d;\n+};"}, {"sha": "a47a45ca8f6a712fa06d7d77c78637b7b8e21ea5", "filename": "gcc/testsuite/g++.old-deja/g++.ext/memconst.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fmemconst.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcba9b0fab084c394cbc664809868cbd8071b92e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fmemconst.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ext%2Fmemconst.C?ref=dcba9b0fab084c394cbc664809868cbd8071b92e", "patch": "@@ -12,7 +12,7 @@ public:\n \n class foo {\n private:\n-  static const unsigned char * const dummy_key = (unsigned char*)\"ThisIs a dummy!\";\n+  static const unsigned char * const dummy_key = (unsigned char*)\"ThisIs a dummy!\"; // { dg-error \"in-class\" }\n \n public:\n     void bar ();"}]}