{"sha": "2a0eaca3e9c88eb82579c75b393bd11d84d4da61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwZWFjYTNlOWM4OGViODI1NzljNzViMzkzYmQxMWQ4NGQ0ZGE2MQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-03-23T18:01:11Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-03-24T20:53:16Z"}, "message": "[testsuite,arm] cmp-2.c: Move double-precision tests to cmp-3.c\n\nParts of the cmp-2.c test rely on double-precision support, making the\ntest fail on targets where the FPU supports single-precision only.\n\nSplit the test into single-precision (cmp-2.c) and double-precision\ntests (cmp-3.c).\n\n2020-03-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\t* gcc.target/arm/cmp-2.c: Move double-precision tests to...\n\t* gcc.target/arm/cmp-3.c: ...here (new file)", "tree": {"sha": "6ffb0cff1b2cf69bf90748bba7374d198cd722b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ffb0cff1b2cf69bf90748bba7374d198cd722b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a0eaca3e9c88eb82579c75b393bd11d84d4da61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0eaca3e9c88eb82579c75b393bd11d84d4da61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a0eaca3e9c88eb82579c75b393bd11d84d4da61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0eaca3e9c88eb82579c75b393bd11d84d4da61/comments", "author": null, "committer": null, "parents": [{"sha": "8001f59c82b98c4348e00183fe83621d649dafca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8001f59c82b98c4348e00183fe83621d649dafca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8001f59c82b98c4348e00183fe83621d649dafca"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "149ee02348312335a551b9ecf524d1427f40815b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0eaca3e9c88eb82579c75b393bd11d84d4da61/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0eaca3e9c88eb82579c75b393bd11d84d4da61/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a0eaca3e9c88eb82579c75b393bd11d84d4da61", "patch": "@@ -1,3 +1,8 @@\n+2020-03-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/cmp-2.c: Move double-precision tests to...\n+\t* gcc.target/arm/cmp-3.c: ...here (new file)\n+\n 2020-03-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* lib/target-supports.exp"}, {"sha": "c61487d70f463c58a7580a7150c1badd85e97e12", "filename": "gcc/testsuite/gcc.target/arm/cmp-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0eaca3e9c88eb82579c75b393bd11d84d4da61/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0eaca3e9c88eb82579c75b393bd11d84d4da61/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-2.c?ref=2a0eaca3e9c88eb82579c75b393bd11d84d4da61", "patch": "@@ -30,9 +30,7 @@ int x, y;\n   TEST_EXPR (NAME##_cr, (TYPE a1), OPERATOR (100, a1))\n \n #define TEST_OP(NAME, OPERATOR) \\\n-  TEST (f_##NAME, float, OPERATOR)\t\t\\\n-  TEST (d_##NAME, double, OPERATOR)\t\t\\\n-  TEST (ld_##NAME, long double, OPERATOR)\n+  TEST (f_##NAME, float, OPERATOR)\n \n TEST_OP (eq, EQ)\n TEST_OP (ne, NE)"}, {"sha": "70a11686f69ba0b56a845954efb7fcfe46bb4cf1", "filename": "gcc/testsuite/gcc.target/arm/cmp-3.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0eaca3e9c88eb82579c75b393bd11d84d4da61/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0eaca3e9c88eb82579c75b393bd11d84d4da61/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-3.c?ref=2a0eaca3e9c88eb82579c75b393bd11d84d4da61", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_fp_dp_ok } */\n+/* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n+/* { dg-options \"-O\" } */\n+/* { dg-add-options arm_fp_dp } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\t\" } } */\n+/* { dg-final { scan-assembler-not \"__aeabi\" } } */\n+int x, y;\n+\n+#define EQ(X, Y) ((X) == (Y))\n+#define NE(X, Y) ((X) != (Y))\n+#define LT(X, Y) ((X) < (Y))\n+#define GT(X, Y) ((X) > (Y))\n+#define LE(X, Y) ((X) <= (Y))\n+#define GE(X, Y) ((X) >= (Y))\n+\n+#define TEST_EXPR(NAME, ARGS, EXPR)\t\t\t\\\n+  int NAME##1 ARGS { return (EXPR); }\t\t\t\\\n+  int NAME##2 ARGS { return !(EXPR); }\t\t\t\\\n+  int NAME##3 ARGS { return (EXPR) ? x : y; }\t\t\\\n+  void NAME##4 ARGS { if (EXPR) x++; }\t\t\t\\\n+  void NAME##5 ARGS { if (!(EXPR)) x++; }\n+\n+#define TEST(NAME, TYPE, OPERATOR) \\\n+  TEST_EXPR (NAME##_rr, (TYPE a1, TYPE a2), OPERATOR (a1, a2))\t\t\\\n+  TEST_EXPR (NAME##_rm, (TYPE a1, TYPE *a2), OPERATOR (a1, *a2))\t\\\n+  TEST_EXPR (NAME##_mr, (TYPE *a1, TYPE a2), OPERATOR (*a1, a2))\t\\\n+  TEST_EXPR (NAME##_mm, (TYPE *a1, TYPE *a2), OPERATOR (*a1, *a2))\t\\\n+  TEST_EXPR (NAME##_rc, (TYPE a1), OPERATOR (a1, 100))\t\t\t\\\n+  TEST_EXPR (NAME##_cr, (TYPE a1), OPERATOR (100, a1))\n+\n+#define TEST_OP(NAME, OPERATOR) \\\n+  TEST (d_##NAME, double, OPERATOR)\t\t\\\n+  TEST (ld_##NAME, long double, OPERATOR)\n+\n+TEST_OP (eq, EQ)\n+TEST_OP (ne, NE)\n+TEST_OP (lt, LT)\n+TEST_OP (gt, GT)\n+TEST_OP (le, LE)\n+TEST_OP (ge, GE)\n+TEST_OP (blt, __builtin_isless)\n+TEST_OP (bgt, __builtin_isgreater)\n+TEST_OP (ble, __builtin_islessequal)\n+TEST_OP (bge, __builtin_isgreaterequal)\n+/* This one should be expanded into separate ordered and equality\n+   comparisons.  */\n+TEST_OP (blg, __builtin_islessgreater)\n+TEST_OP (bun, __builtin_isunordered)"}]}