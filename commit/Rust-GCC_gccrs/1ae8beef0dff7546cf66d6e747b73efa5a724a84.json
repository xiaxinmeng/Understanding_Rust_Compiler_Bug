{"sha": "1ae8beef0dff7546cf66d6e747b73efa5a724a84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlOGJlZWYwZGZmNzU0NmNmNjZkNmU3NDdiNzNlZmE1YTcyNGE4NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T14:59:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-25T14:59:33Z"}, "message": "[multiple changes]\n\n2014-02-25  Tristan Gingold  <gingold@adacore.com>\n\n\t* sem_ch10.adb: Minor comment fix.\n\n2014-02-25  Bob Duff  <duff@adacore.com>\n\n\t* s-tasdeb.adb: Misc cleanup of this package,\n\tincluding printing addresses in hexadecimal.\n\t(Write): Fix minor bug when taking 'Address of an empty string.\n\n2014-02-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Part_Of): Reject state refinement in a\n\tpublic child unit when it does not refer to the abstract state\n\tof a public ancestor.\n\nFrom-SVN: r208131", "tree": {"sha": "7ad4206adac35ae43fd75b733004cbb9840f9970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ad4206adac35ae43fd75b733004cbb9840f9970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ae8beef0dff7546cf66d6e747b73efa5a724a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae8beef0dff7546cf66d6e747b73efa5a724a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ae8beef0dff7546cf66d6e747b73efa5a724a84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ae8beef0dff7546cf66d6e747b73efa5a724a84/comments", "author": null, "committer": null, "parents": [{"sha": "ca11219d65a65220fcf26e16be26c134c0100874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca11219d65a65220fcf26e16be26c134c0100874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca11219d65a65220fcf26e16be26c134c0100874"}], "stats": {"total": 148, "additions": 105, "deletions": 43}, "files": [{"sha": "e3908c99f43bba64ded1695bb7badb14313e84d4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae8beef0dff7546cf66d6e747b73efa5a724a84/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae8beef0dff7546cf66d6e747b73efa5a724a84/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1ae8beef0dff7546cf66d6e747b73efa5a724a84", "patch": "@@ -1,3 +1,19 @@\n+2014-02-25  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* sem_ch10.adb: Minor comment fix.\n+\n+2014-02-25  Bob Duff  <duff@adacore.com>\n+\n+\t* s-tasdeb.adb: Misc cleanup of this package,\n+\tincluding printing addresses in hexadecimal.\n+\t(Write): Fix minor bug when taking 'Address of an empty string.\n+\n+2014-02-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Part_Of): Reject state refinement in a\n+\tpublic child unit when it does not refer to the abstract state\n+\tof a public ancestor.\n+\n 2014-02-25  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma/Pragma_Validity_Checks): Ignore pragma"}, {"sha": "2c8b638493c0c6caad7cbe22f3725f64b6c45276", "filename": "gcc/ada/s-tasdeb.adb", "status": "modified", "additions": 54, "deletions": 20, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae8beef0dff7546cf66d6e747b73efa5a724a84/gcc%2Fada%2Fs-tasdeb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae8beef0dff7546cf66d6e747b73efa5a724a84/gcc%2Fada%2Fs-tasdeb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb.adb?ref=1ae8beef0dff7546cf66d6e747b73efa5a724a84", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1997-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,33 +37,40 @@\n --  Do not add any dependency to GNARL packages since this package is used\n --  in both normal and restricted (ravenscar) environments.\n \n+with System.Address_Image;\n with System.CRTL;\n with System.Task_Primitives;\n with System.Task_Primitives.Operations;\n-with Ada.Unchecked_Conversion;\n \n package body System.Tasking.Debug is\n \n    package STPO renames System.Task_Primitives.Operations;\n \n-   function To_Integer is new\n-     Ada.Unchecked_Conversion (Task_Id, System.Task_Primitives.Task_Address);\n-\n    type Trace_Flag_Set is array (Character) of Boolean;\n \n    Trace_On : Trace_Flag_Set := ('A' .. 'Z' => False, others => True);\n \n+   Stderr_Fd : constant := 2;\n+   --  File descriptor for standard error\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n \n    procedure Write (Fd : Integer; S : String; Count : Integer);\n+   --  Write Count characters of S to the file descriptor Fd\n \n    procedure Put (S : String);\n-   --  Display S on standard output\n+   --  Display S on standard error\n \n    procedure Put_Line (S : String := \"\");\n-   --  Display S on standard output with an additional line terminator\n+   --  Display S on standard error with an additional line terminator\n+\n+   function Task_Image (T : Task_Id) return String;\n+   --  Return the relevant characters from T.Common.Task_Image\n+\n+   function Task_Id_Image (T : Task_Id) return String;\n+   --  Return the address in hexadecimal form\n \n    ------------------------\n    -- Continue_All_Tasks --\n@@ -134,16 +141,13 @@ package body System.Tasking.Debug is\n          return;\n       end if;\n \n-      Put (T.Common.Task_Image (1 .. T.Common.Task_Image_Len) & \": \" &\n-           Task_States'Image (T.Common.State));\n-\n+      Put (Task_Image (T) & \": \" & Task_States'Image (T.Common.State));\n       Parent := T.Common.Parent;\n \n       if Parent = null then\n          Put (\", parent: <none>\");\n       else\n-         Put (\", parent: \" &\n-              Parent.Common.Task_Image (1 .. Parent.Common.Task_Image_Len));\n+         Put (\", parent: \" & Task_Image (Parent));\n       end if;\n \n       Put (\", prio:\" & T.Common.Current_Priority'Img);\n@@ -165,7 +169,7 @@ package body System.Tasking.Debug is\n          Put (\", serving:\");\n \n          while Entry_Call /= null loop\n-            Put (To_Integer (Entry_Call.Self)'Img);\n+            Put (Task_Id_Image (Entry_Call.Self));\n             Entry_Call := Entry_Call.Acceptor_Prev_Call;\n          end loop;\n       end if;\n@@ -195,7 +199,7 @@ package body System.Tasking.Debug is\n \n    procedure Put (S : String) is\n    begin\n-      Write (2, S, S'Length);\n+      Write (Stderr_Fd, S, S'Length);\n    end Put;\n \n    --------------\n@@ -204,7 +208,7 @@ package body System.Tasking.Debug is\n \n    procedure Put_Line (S : String := \"\") is\n    begin\n-      Write (2, S & ASCII.LF, S'Length + 1);\n+      Write (Stderr_Fd, S & ASCII.LF, S'Length + 1);\n    end Put_Line;\n \n    ----------------------\n@@ -323,6 +327,35 @@ package body System.Tasking.Debug is\n       null;\n    end Task_Creation_Hook;\n \n+   ----------------\n+   -- Task_Id_Image --\n+   ----------------\n+\n+   function Task_Id_Image (T : Task_Id) return String is\n+   begin\n+      if T = null then\n+         return \"Null_Task_Id\";\n+      else\n+         return Address_Image (T.all'Address);\n+      end if;\n+   end Task_Id_Image;\n+\n+   ----------------\n+   -- Task_Image --\n+   ----------------\n+\n+   function Task_Image (T : Task_Id) return String is\n+   begin\n+      --  In case T.Common.Task_Image_Len is uninitialized junk, we check that\n+      --  it is in range, to make this more robust.\n+\n+      if T.Common.Task_Image_Len in T.Common.Task_Image'Range then\n+         return T.Common.Task_Image (1 .. T.Common.Task_Image_Len);\n+      else\n+         return T.Common.Task_Image;\n+      end if;\n+   end Task_Image;\n+\n    ---------------------------\n    -- Task_Termination_Hook --\n    ---------------------------\n@@ -344,13 +377,13 @@ package body System.Tasking.Debug is\n    is\n    begin\n       if Trace_On (Flag) then\n-         Put (To_Integer (Self_Id)'Img &\n+         Put (Task_Id_Image (Self_Id) &\n               ':' & Flag & ':' &\n-              Self_Id.Common.Task_Image (1 .. Self_Id.Common.Task_Image_Len) &\n+              Task_Image (Self_Id) &\n               ':');\n \n          if Other_Id /= null then\n-            Put (To_Integer (Other_Id)'Img & ':');\n+            Put (Task_Id_Image (Other_Id) & ':');\n          end if;\n \n          Put_Line (Msg);\n@@ -365,9 +398,10 @@ package body System.Tasking.Debug is\n       Discard : System.CRTL.ssize_t;\n       pragma Unreferenced (Discard);\n    begin\n-      Discard := System.CRTL.write (Fd, S (S'First)'Address,\n+      Discard := System.CRTL.write (Fd, S'Address,\n                                     System.CRTL.size_t (Count));\n-      --  Is it really right to ignore write errors here ???\n+      --  Ignore write errors here; this is just debugging output, and there's\n+      --  nothing to be done about errors anyway.\n    end Write;\n \n end System.Tasking.Debug;"}, {"sha": "7714526ae99ac5c8bd3438b4bacb4ab275af96a9", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae8beef0dff7546cf66d6e747b73efa5a724a84/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae8beef0dff7546cf66d6e747b73efa5a724a84/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=1ae8beef0dff7546cf66d6e747b73efa5a724a84", "patch": "@@ -1110,8 +1110,8 @@ package body Sem_Ch10 is\n          end;\n       end if;\n \n-      --  Deal with creating elaboration Boolean if needed. We create an\n-      --  elaboration boolean only for units that come from source since\n+      --  Deal with creating elaboration counter if needed. We create an\n+      --  elaboration counter only for units that come from source since\n       --  units manufactured by the compiler never need elab checks.\n \n       if Comes_From_Source (N)"}, {"sha": "2b095eabbf699e28247b717dedbfab1ad5552d6c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ae8beef0dff7546cf66d6e747b73efa5a724a84/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ae8beef0dff7546cf66d6e747b73efa5a724a84/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1ae8beef0dff7546cf66d6e747b73efa5a724a84", "patch": "@@ -907,7 +907,7 @@ package body Sem_Prag is\n                              (\"cannot mention state & in global refinement\",\n                               Item, Item_Id);\n                            Error_Msg_N\n-                             (\"\\\\use its constituents instead\", Item);\n+                             (\"\\use its constituents instead\", Item);\n                            return;\n \n                         --  If the reference to the abstract state appears in\n@@ -1168,7 +1168,7 @@ package body Sem_Prag is\n \n                Error_Msg_Name_1 := Chars (Subp_Id);\n                Error_Msg_NE\n-                 (\"\\\\& is not part of the input or output set of subprogram %\",\n+                 (\"\\& is not part of the input or output set of subprogram %\",\n                   Item, Item_Id);\n \n             --  The mode of the item and its role in pragma [Refined_]Depends\n@@ -2018,7 +2018,7 @@ package body Sem_Prag is\n                      Error_Msg_NE\n                        (\"cannot mention state & in global refinement\",\n                         Item, Item_Id);\n-                     Error_Msg_N (\"\\\\use its constituents instead\", Item);\n+                     Error_Msg_N (\"\\use its constituents instead\", Item);\n                      return;\n \n                   --  If the reference to the abstract state appears in an\n@@ -2166,7 +2166,7 @@ package body Sem_Prag is\n                        (\"global item & cannot have mode In_Out or Output\",\n                         Item, Item_Id);\n                      Error_Msg_NE\n-                       (\"\\\\item already appears as input of subprogram &\",\n+                       (\"\\item already appears as input of subprogram &\",\n                         Item, Context);\n \n                      --  Stop the traversal once an error has been detected\n@@ -3490,7 +3490,7 @@ package body Sem_Prag is\n                & \"(SPARK RM 7.2.6(5))\", Indic);\n             Error_Msg_Name_1 := Chars (Scope (State_Id));\n             Error_Msg_NE\n-              (\"\\\\& is not part of the hidden state of package %\",\n+              (\"\\& is not part of the hidden state of package %\",\n                Indic, Item_Id);\n \n          --  The item appears in the visible state space of some package. In\n@@ -3507,6 +3507,18 @@ package body Sem_Prag is\n                   Error_Msg_N\n                     (\"indicator Part_Of must denote an abstract state of \"\n                      & \"parent unit or descendant (SPARK RM 7.2.6(3))\", Indic);\n+\n+               --  If the unit is a public child of a private unit it cannot\n+               --  refine the state of a private parent, only that of a\n+               --  public ancestor or descendant thereof.\n+\n+               elsif not Private_Present\n+                           (Parent (Unit_Declaration_Node (Pack_Id)))\n+                 and then Is_Private_Descendant (Scope (State_Id))\n+               then\n+                  Error_Msg_N\n+                    (\"indicator Part_Of must denote the abstract state of \"\n+                     & \"a public ancestor\", State);\n                end if;\n \n             --  Indicator Part_Of is not needed when the related package is not\n@@ -3518,7 +3530,7 @@ package body Sem_Prag is\n                   & \"RM 7.2.6(5))\", Indic);\n                Error_Msg_Name_1 := Chars (Pack_Id);\n                Error_Msg_NE\n-                 (\"\\\\& is declared in the visible part of package %\",\n+                 (\"\\& is declared in the visible part of package %\",\n                   Indic, Item_Id);\n             end if;\n \n@@ -3532,7 +3544,7 @@ package body Sem_Prag is\n                   & \"package & (SPARK RM 7.2.6(2))\", Indic, Pack_Id);\n                Error_Msg_Name_1 := Chars (Pack_Id);\n                Error_Msg_NE\n-                 (\"\\\\& is declared in the private part of package %\",\n+                 (\"\\& is declared in the private part of package %\",\n                   Indic, Item_Id);\n             end if;\n \n@@ -3547,7 +3559,7 @@ package body Sem_Prag is\n             if Scope (State_Id) = Pack_Id then\n                Error_Msg_Name_1 := Chars (Pack_Id);\n                Error_Msg_NE\n-                 (\"\\\\& is declared in the body of package %\", Indic, Item_Id);\n+                 (\"\\& is declared in the body of package %\", Indic, Item_Id);\n             end if;\n          end if;\n \n@@ -6652,7 +6664,7 @@ package body Sem_Prag is\n                Error_Msg_N\n                  (\"& may not have Ghost convention\", E);\n                Error_Msg_N\n-                 (\"\\\\only functions are permitted to have Ghost convention\",\n+                 (\"\\only functions are permitted to have Ghost convention\",\n                   E);\n                return;\n             end if;\n@@ -21862,7 +21874,7 @@ package body Sem_Prag is\n \n             if Has_Refined_State then\n                Error_Msg_N\n-                 (\"\\\\check the use of constituents in dependence refinement\",\n+                 (\"\\check the use of constituents in dependence refinement\",\n                   Ref_Clause);\n             end if;\n          end if;\n@@ -22087,7 +22099,7 @@ package body Sem_Prag is\n \n             if Has_Refined_State then\n                Match_Error\n-                 (\"\\\\check the use of constituents in dependence refinement\",\n+                 (\"\\check the use of constituents in dependence refinement\",\n                   Dep_Input);\n             end if;\n \n@@ -22737,7 +22749,7 @@ package body Sem_Prag is\n                   end if;\n \n                   Error_Msg_NE\n-                    (\"\\\\constituent & is missing in output list\",\n+                    (\"\\constituent & is missing in output list\",\n                      N, Constit_Id);\n                end if;\n \n@@ -22898,7 +22910,7 @@ package body Sem_Prag is\n \n                Error_Msg_Name_1 := Global_Mode;\n                Error_Msg_Name_2 := Expect;\n-               Error_Msg_N (\"\\\\expected mode %, found mode %\", Item);\n+               Error_Msg_N (\"\\expected mode %, found mode %\", Item);\n             end Inconsistent_Mode_Error;\n \n          --  Start of processing for Check_Refined_Global_Item\n@@ -23395,7 +23407,7 @@ package body Sem_Prag is\n                        (\"& cannot act as constituent of state %\",\n                         Constit, Constit_Id);\n                      Error_Msg_NE\n-                       (\"\\\\Part_Of indicator specifies & as encapsulating \"\n+                       (\"\\Part_Of indicator specifies & as encapsulating \"\n                         & \"state\", Constit, Encapsulating_State (Constit_Id));\n                   end if;\n \n@@ -23612,10 +23624,10 @@ package body Sem_Prag is\n \n                   if Ekind (Constit_Id) = E_Abstract_State then\n                      Error_Msg_NE\n-                       (\"\\\\abstract state & defined #\", State, Constit_Id);\n+                       (\"\\abstract state & defined #\", State, Constit_Id);\n                   else\n                      Error_Msg_NE\n-                       (\"\\\\variable & defined #\", State, Constit_Id);\n+                       (\"\\variable & defined #\", State, Constit_Id);\n                   end if;\n \n                   Next_Elmt (Constit_Elmt);\n@@ -23679,7 +23691,7 @@ package body Sem_Prag is\n \n                   Error_Msg_N (\"reference to & not allowed\", Body_Ref);\n                   Error_Msg_Sloc := Sloc (State);\n-                  Error_Msg_N (\"\\\\refinement of & is visible#\", Body_Ref);\n+                  Error_Msg_N (\"\\refinement of & is visible#\", Body_Ref);\n \n                   Next_Elmt (Body_Ref_Elmt);\n                end loop;\n@@ -23995,10 +24007,10 @@ package body Sem_Prag is\n \n                if Ekind (State_Id) = E_Abstract_State then\n                   Error_Msg_NE\n-                    (\"\\\\abstract state & defined #\", Body_Id, State_Id);\n+                    (\"\\abstract state & defined #\", Body_Id, State_Id);\n                else\n                   Error_Msg_NE\n-                    (\"\\\\variable & defined #\", Body_Id, State_Id);\n+                    (\"\\variable & defined #\", Body_Id, State_Id);\n                end if;\n \n                Next_Elmt (State_Elmt);\n@@ -24607,7 +24619,7 @@ package body Sem_Prag is\n                   & \"(SPARK RM 7.2.6(3))\", Item_Id);\n                Error_Msg_Name_1 := Chars (Pack_Id);\n                Error_Msg_N\n-                 (\"\\\\& is declared in the visible part of private child \"\n+                 (\"\\& is declared in the visible part of private child \"\n                   & \"unit %\", Item_Id);\n             end if;\n          end if;\n@@ -24640,7 +24652,7 @@ package body Sem_Prag is\n                & \"(SPARK RM 7.2.6(2))\", Item_Id);\n             Error_Msg_Name_1 := Chars (Pack_Id);\n             Error_Msg_N\n-              (\"\\\\& is declared in the private part of package %\", Item_Id);\n+              (\"\\& is declared in the private part of package %\", Item_Id);\n          end if;\n       end if;\n    end Check_Missing_Part_Of;"}]}