{"sha": "191eb16d3adfc397f63d63c2bafa9be187f9f054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxZWIxNmQzYWRmYzM5N2Y2M2Q2M2MyYmFmYTliZTE4N2Y5ZjA1NA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-03-01T09:21:23Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-03-01T09:21:23Z"}, "message": "S/390: Get rid of Y constraint in rotate patterns.\n\nThis patch introduces substitution patterns to add PLUS const_int, and\nAND operands to patterns and uses this to rewrite the existing rotate\npattern.\n\ngcc/ChangeLog:\n\n2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/predicates.md (const_int_6bitset_operand): New\n        predicates.\n\t* config/s390/s390.md: Include subst.md.\n\t(\"rotl<mode>3\"): New expander.\n\t(\"rotl<mode>3\", \"*rotl<mode>3_and\"): Merge insn definitions into\n\t...\n\t(\"*rotl<mode>3<addr_style_op><masked_op>\"): New insn definition.\n\t* config/s390/subst.md: New file.\n\nFrom-SVN: r233843", "tree": {"sha": "7e280c310a8ce6431854ec7979908ba61c019e32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e280c310a8ce6431854ec7979908ba61c019e32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/191eb16d3adfc397f63d63c2bafa9be187f9f054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191eb16d3adfc397f63d63c2bafa9be187f9f054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191eb16d3adfc397f63d63c2bafa9be187f9f054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191eb16d3adfc397f63d63c2bafa9be187f9f054/comments", "author": null, "committer": null, "parents": [{"sha": "62d3f2615c6b22bf424ad17675d47b146d0dcfaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d3f2615c6b22bf424ad17675d47b146d0dcfaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d3f2615c6b22bf424ad17675d47b146d0dcfaa"}], "stats": {"total": 134, "additions": 111, "deletions": 23}, "files": [{"sha": "416eed73b8874069cb5f4834401d139b8c15752d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=191eb16d3adfc397f63d63c2bafa9be187f9f054", "patch": "@@ -1,3 +1,14 @@\n+2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/predicates.md (const_int_6bitset_operand): New\n+        predicates.\n+\t* config/s390/s390.md: Include subst.md.\n+\t(\"rotl<mode>3\"): New expander.\n+\t(\"rotl<mode>3\", \"*rotl<mode>3_and\"): Merge insn definitions into\n+\t...\n+\t(\"*rotl<mode>3<addr_style_op><masked_op>\"): New insn definition.\n+\t* config/s390/subst.md: New file.\n+\n 2016-03-01  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.md (\"op_type\", \"atype\", \"length\" attributes):"}, {"sha": "60a7edf8b51060d85c379142d43a6dcca2121485", "filename": "gcc/config/s390/constraints.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2Fconfig%2Fs390%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2Fconfig%2Fs390%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fconstraints.md?ref=191eb16d3adfc397f63d63c2bafa9be187f9f054", "patch": "@@ -36,6 +36,7 @@\n ;;         jyy: constant consisting of byte chunks being either 0 or 0xff\n ;;         jKK: constant vector with all elements having the same value and\n ;;              matching K constraint\n+;;         jm6: An integer operand with the lowest order 6 bits all ones.\n ;;    t -- Access registers 36 and 37.\n ;;    v -- Vector registers v0-v31.\n ;;    C -- A signed 8-bit constant (-128..127)\n@@ -415,6 +416,9 @@\n \t    (match_test \"const_vec_duplicate_p (op)\"))\n        (match_test \"satisfies_constraint_K (XVECEXP (op, 0, 0))\")))\n \n+(define_constraint \"jm6\"\n+  \"@internal An integer operand with the lowest order 6 bits all ones.\"\n+  (match_operand 0 \"const_int_6bitset_operand\"))\n \n ;;\n ;; Memory constraints follow."}, {"sha": "fefefb324745916e8b0cfb926fef4488ae3fa9b4", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=191eb16d3adfc397f63d63c2bafa9be187f9f054", "patch": "@@ -115,6 +115,10 @@\n   return true;\n })\n \n+; An integer operand with the lowest order 6 bits all ones.\n+(define_predicate \"const_int_6bitset_operand\"\n+ (and (match_code \"const_int\")\n+      (match_test \"(INTVAL (op) & 63) == 63\")))\n (define_predicate \"nonzero_shift_count_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 1, GET_MODE_BITSIZE (mode) - 1)\")))"}, {"sha": "43219dd8f0225ceebbbf9394ac8b63365dbc4025", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=191eb16d3adfc397f63d63c2bafa9be187f9f054", "patch": "@@ -2994,18 +2994,18 @@ s390_decompose_address (rtx addr, struct s390_address *out)\n bool\n s390_decompose_shift_count (rtx op, rtx *base, HOST_WIDE_INT *offset)\n {\n-  HOST_WIDE_INT off = 0;\n+  rtx off = NULL_RTX;\n \n   /* We can have an integer constant, an address register,\n      or a sum of the two.  */\n-  if (GET_CODE (op) == CONST_INT)\n+  if (CONST_SCALAR_INT_P (op))\n     {\n-      off = INTVAL (op);\n+      off = op;\n       op = NULL_RTX;\n     }\n-  if (op && GET_CODE (op) == PLUS && GET_CODE (XEXP (op, 1)) == CONST_INT)\n+  if (op && GET_CODE (op) == PLUS && CONST_SCALAR_INT_P (XEXP (op, 1)))\n     {\n-      off = INTVAL (XEXP (op, 1));\n+      off = XEXP (op, 1);\n       op = XEXP (op, 0);\n     }\n   while (op && GET_CODE (op) == SUBREG)\n@@ -3015,7 +3015,18 @@ s390_decompose_shift_count (rtx op, rtx *base, HOST_WIDE_INT *offset)\n     return false;\n \n   if (offset)\n-    *offset = off;\n+    {\n+      if (off == NULL_RTX)\n+\t*offset = 0;\n+      else if (CONST_INT_P (off))\n+\t*offset = INTVAL (off);\n+      else if (CONST_WIDE_INT_P (off))\n+\t/* The offset will anyway be cut down to 12 bits so take just\n+\t   the lowest order chunk of the wide int.  */\n+\t*offset = CONST_WIDE_INT_ELT (off, 0);\n+      else\n+\tgcc_unreachable ();\n+    }\n   if (base)\n     *base = op;\n "}, {"sha": "b7c037a5229f8f5fa50352b1007d45a81f4fabac", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=191eb16d3adfc397f63d63c2bafa9be187f9f054", "patch": "@@ -741,6 +741,8 @@\n (define_mode_attr asm_fcmp [(CCVEQ \"e\") (CCVFH \"h\") (CCVFHE \"he\")])\n (define_mode_attr insn_cmp [(CCVEQ \"eq\") (CCVH \"h\") (CCVHU \"hl\") (CCVFH \"h\") (CCVFHE \"he\")])\n \n+;; Subst pattern definitions\n+(include \"subst.md\")\n \n (include \"vector.md\")\n \n@@ -8376,28 +8378,23 @@\n ; rotl(di|si)3 instruction pattern(s).\n ;\n \n-; rll, rllg\n-(define_insn \"rotl<mode>3\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(rotate:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t    (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")))]\n+(define_expand \"rotl<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"\")\n+        (rotate:GPR (match_operand:GPR 1 \"register_operand\" \"\")\n+\t\t    (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"TARGET_CPU_ZARCH\"\n-  \"rll<g>\\t%0,%1,%Y2\"\n-  [(set_attr \"op_type\"  \"RSE\")\n-   (set_attr \"atype\"    \"reg\")\n-   (set_attr \"z10prop\" \"z10_super_E1\")])\n+  \"\")\n \n ; rll, rllg\n-(define_insn \"*rotl<mode>3_and\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n-\t(rotate:GPR (match_operand:GPR 1 \"register_operand\" \"d\")\n-\t\t    (and:SI (match_operand:SI 2 \"shift_count_or_setmem_operand\" \"Y\")\n-\t\t\t    (match_operand:SI 3 \"const_int_operand\"   \"n\"))))]\n-  \"TARGET_CPU_ZARCH && (INTVAL (operands[3]) & 63) == 63\"\n-  \"rll<g>\\t%0,%1,%Y2\"\n+(define_insn \"*rotl<mode>3<addr_style_op><masked_op>\"\n+  [(set (match_operand:GPR             0 \"register_operand\"  \"=d\")\n+\t(rotate:GPR (match_operand:GPR 1 \"register_operand\"   \"d\")\n+\t\t    (match_operand:SI  2 \"nonmemory_operand\" \"an\")))]\n+  \"TARGET_CPU_ZARCH\"\n+  \"rll<g>\\t%0,%1,<addr_style_op_ops>\"\n   [(set_attr \"op_type\"  \"RSE\")\n    (set_attr \"atype\"    \"reg\")\n-   (set_attr \"z10prop\" \"z10_super_E1\")])\n+   (set_attr \"z10prop\"  \"z10_super_E1\")])\n \n \n ;;"}, {"sha": "c3761a972a2bef1f4eec79177b83f9e1b6f708cf", "filename": "gcc/config/s390/subst.md", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2Fconfig%2Fs390%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191eb16d3adfc397f63d63c2bafa9be187f9f054/gcc%2Fconfig%2Fs390%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fsubst.md?ref=191eb16d3adfc397f63d63c2bafa9be187f9f054", "patch": "@@ -0,0 +1,61 @@\n+;;- Machine description for GNU compiler -- S/390 / zSeries version.\n+;;  Subst patterns.\n+;;  Copyright (C) 2016 Free Software Foundation, Inc.\n+;;  Contributed by Andreas Krebbel (Andreas.Krebbel@de.ibm.com)\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify it under\n+;; the terms of the GNU General Public License as published by the Free\n+;; Software Foundation; either version 3, or (at your option) any later\n+;; version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+;; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+;; for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_code_iterator SUBST [rotate])\n+\n+; This expands an register/immediate operand to a register+immediate\n+; operand to draw advantage of the address style operand format\n+; providing a addition for free.\n+(define_subst \"addr_style_op_subst\"\n+  [(set (match_operand:DSI 0 \"\" \"\")\n+        (SUBST:DSI (match_operand:DSI 1 \"\" \"\")\n+\t\t   (match_operand:SI 2 \"\" \"\")))]\n+  \"\"\n+  [(set (match_dup 0)\n+        (SUBST:DSI (match_dup 1)\n+\t\t   (plus:SI (match_operand:SI 2 \"register_operand\" \"a\")\n+\t\t\t    (match_operand 3 \"const_int_operand\"   \"n\"))))])\n+\n+; Use this in the insn name.\n+(define_subst_attr \"addr_style_op\"     \"addr_style_op_subst\" \"\" \"_plus\")\n+\n+; In the subst pattern the additional const int operand will be used\n+; as displacement.  In the normal version %Y is able to print the\n+; operand either as displacement or as base register.\n+(define_subst_attr \"addr_style_op_ops\" \"addr_style_op_subst\" \"%Y2\" \"%Y3(%2)\")\n+\n+\n+; This substitution adds an explicit AND operation to the second\n+; operand.  This way previous operations on the now masked out bits\n+; might get optimized away.\n+(define_subst \"masked_op_subst\"\n+  [(set (match_operand:DSI 0 \"\"           \"\")\n+        (SUBST:DSI (match_operand:DSI 1 \"\" \"\")\n+\t\t   (match_operand:SI  2 \"\" \"\")))]\n+  \"\"\n+  [(set (match_dup 0)\n+        (SUBST:DSI (match_dup 1)\n+\t\t   (and:SI (match_dup 2)\n+\t\t\t   (match_operand:SI 3 \"const_int_6bitset_operand\" \"jm6\"))))])\n+\n+; Use this in the insn name.\n+(define_subst_attr \"masked_op\" \"masked_op_subst\" \"\" \"_and\")\n+"}]}