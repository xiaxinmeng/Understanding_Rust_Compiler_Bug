{"sha": "081dc85073da351470b2851e8a93c769cb74f341", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgxZGM4NTA3M2RhMzUxNDcwYjI4NTFlOGE5M2M3NjljYjc0ZjM0MQ==", "commit": {"author": {"name": "Douglas Rupp", "email": "rupp@adacore.com", "date": "2020-04-07T21:05:57Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2020-10-23T15:21:38Z"}, "message": "Add a if-exists-then-else built-in spec function\n\nThis patch adds an if-exists-then-else\nbuiltin spec function, which tests for the existence of\na file and returns one or the other of the following\narguments depending on the result of the test.\n\nThis differs from the existing if-exists or\nif-exists-else function which return the name of the\ntested file if it exists.\n\nThis new function is of help to a forthcoming change for\nVxWorks where we check for the presence of a specific header\nfile to decide the name of a library to include in the link\nclosure.\n\n2020-10-23  Douglas Rupp  <rupp@adacore.com>\n\ngcc/\n\t* gcc.c (if-exists-then-else): New built-in spec function.\n\t* doc/invoke.texi: Document it.", "tree": {"sha": "537e1aec255eade2201b32dc8804fcf1447e84f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/537e1aec255eade2201b32dc8804fcf1447e84f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/081dc85073da351470b2851e8a93c769cb74f341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081dc85073da351470b2851e8a93c769cb74f341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/081dc85073da351470b2851e8a93c769cb74f341", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/081dc85073da351470b2851e8a93c769cb74f341/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "940e68b9de1981e9c25a7dddc5027354011f0518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940e68b9de1981e9c25a7dddc5027354011f0518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940e68b9de1981e9c25a7dddc5027354011f0518"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "3c3c51cb4b102ffc909638c2a7f589882033713b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081dc85073da351470b2851e8a93c769cb74f341/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081dc85073da351470b2851e8a93c769cb74f341/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=081dc85073da351470b2851e8a93c769cb74f341", "patch": "@@ -31685,6 +31685,19 @@ crt0%O%s %:if-exists(crti%O%s) \\\n %:if-exists-else(crtbeginT%O%s crtbegin%O%s)\n @end smallexample\n \n+@item @code{if-exists-then-else}\n+The @code{if-exists-then-else} spec function takes at least two arguments\n+and an optional third one. The first argument is an absolute pathname to a\n+file.  If the file exists, the function returns the second argument.\n+If the file does not exist, the function returns the third argument if there\n+is one, or NULL otherwise. This can be used to expand one text, or optionally\n+another, based on the existence of a file.  Here is a small example of its\n+usage:\n+\n+@smallexample\n+-l%:if-exists-then-else(%:getenv(VSB_DIR rtnet.h) rtnet net)\n+@end smallexample\n+\n @item @code{replace-outfile}\n The @code{replace-outfile} spec function takes two arguments.  It looks for the\n first argument in the outfiles array and replaces it with the second argument.  Here"}, {"sha": "337c27442a39ee90f579c0011804a4e75f958fc6", "filename": "gcc/gcc.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/081dc85073da351470b2851e8a93c769cb74f341/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/081dc85073da351470b2851e8a93c769cb74f341/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=081dc85073da351470b2851e8a93c769cb74f341", "patch": "@@ -416,6 +416,7 @@ static void try_generate_repro (const char **argv);\n static const char *getenv_spec_function (int, const char **);\n static const char *if_exists_spec_function (int, const char **);\n static const char *if_exists_else_spec_function (int, const char **);\n+static const char *if_exists_then_else_spec_function (int, const char **);\n static const char *sanitize_spec_function (int, const char **);\n static const char *replace_outfile_spec_function (int, const char **);\n static const char *remove_outfile_spec_function (int, const char **);\n@@ -1723,6 +1724,7 @@ static const struct spec_function static_spec_functions[] =\n   { \"getenv\",                   getenv_spec_function },\n   { \"if-exists\",\t\tif_exists_spec_function },\n   { \"if-exists-else\",\t\tif_exists_else_spec_function },\n+  { \"if-exists-then-else\",\tif_exists_then_else_spec_function },\n   { \"sanitize\",\t\t\tsanitize_spec_function },\n   { \"replace-outfile\",\t\treplace_outfile_spec_function },\n   { \"remove-outfile\",\t\tremove_outfile_spec_function },\n@@ -10087,6 +10089,29 @@ if_exists_else_spec_function (int argc, const char **argv)\n   return argv[1];\n }\n \n+/* if-exists-then-else built-in spec function.\n+\n+   Checks to see if the file specified by the absolute pathname in\n+   the first arg exists.  Returns the second arg if so, otherwise returns\n+   the third arg if it is present.  */\n+\n+static const char *\n+if_exists_then_else_spec_function (int argc, const char **argv)\n+{\n+\n+  /* Must have two or three arguments.  */\n+  if (argc != 2 && argc != 3)\n+    return NULL;\n+\n+  if (IS_ABSOLUTE_PATH (argv[0]) && ! access (argv[0], R_OK))\n+    return argv[1];\n+\n+  if (argc == 3)\n+    return argv[2];\n+\n+  return NULL;\n+}\n+\n /* sanitize built-in spec function.\n \n    This returns non-NULL, if sanitizing address, thread or"}]}