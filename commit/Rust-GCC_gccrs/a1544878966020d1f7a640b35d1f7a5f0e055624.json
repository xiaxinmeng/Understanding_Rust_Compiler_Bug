{"sha": "a1544878966020d1f7a640b35d1f7a5f0e055624", "node_id": "C_kwDOANBUbNoAKGExNTQ0ODc4OTY2MDIwZDFmN2E2NDBiMzVkMWY3YTVmMGUwNTU2MjQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-29T16:54:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-29T16:54:43Z"}, "message": "match.pd: Fix up 1 / X for unsigned X optimization [PR104280]\n\nOn Fri, Jan 28, 2022 at 11:38:23AM -0700, Jeff Law wrote:\n> Thanks.\u00a0 Given the original submission and most of the review work was done\n> prior to stage3 closing, I went ahead and installed this on the trunk.\n\nUnfortunately this breaks quite a lot of things.\nThe main problem is that GIMPLE allows EQ_EXPR etc. only with BOOLEAN_TYPE\nor with TYPE_PRECISION == 1 integral type (or vector boolean).\nViolating this causes verification failures in tree-cfg.cc in some cases,\nin other cases wrong-code issues because before it is verified we e.g.\ntransform\n1U / x\ninto\nx == 1U\nand later into\nx (because we assume that == type must be one of the above cases and\nwhen it is the same type as the type of the first operand, for boolean-ish\ncases it should be equivalent).\n\nFixed by changing that\n(eq @1 { build_one_cst (type); })\ninto\n(convert (eq:boolean_type_node @1 { build_one_cst (type); }))\nNote, I'm not 100% sure if :boolean_type_node is required in that case,\nI see some spots in match.pd that look exactly like this, while there is\ne.g. (convert (le ...)) that supposedly does the right thing too.\nThe signed integer 1/X case doesn't need changes changes, for\n(cond (le ...) ...)\nle gets correctly boolean_type_node and cond should use type.\nI've also reformatted it, some lines were too long, match.pd uses\nindentation by 1 column instead of 2 etc.\n\n2022-01-29  Jakub Jelinek  <jakub@redhat.com>\n\t    Andrew Pinski  <apinski@marvell.com>\n\n\tPR tree-optimization/104279\n\tPR tree-optimization/104280\n\tPR tree-optimization/104281\n\t* match.pd (1 / X -> X == 1 for unsigned X): Build eq with\n\tboolean_type_node and convert to type.  Formatting fixes.\n\n\t* gcc.dg/torture/pr104279.c: New test.\n\t* gcc.dg/torture/pr104280.c: New test.\n\t* gcc.dg/torture/pr104281.c: New test.", "tree": {"sha": "6578967d246f4f0b2147cb07cc2915b4772b552a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6578967d246f4f0b2147cb07cc2915b4772b552a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1544878966020d1f7a640b35d1f7a5f0e055624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1544878966020d1f7a640b35d1f7a5f0e055624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1544878966020d1f7a640b35d1f7a5f0e055624", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1544878966020d1f7a640b35d1f7a5f0e055624/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f2d6cfec1c2fe9570b98211be58329d8d7749b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6f2d6cfec1c2fe9570b98211be58329d8d7749b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6f2d6cfec1c2fe9570b98211be58329d8d7749b"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "b942cb2930a378b660f4fccabe4b87dddb46805a", "filename": "gcc/match.pd", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1544878966020d1f7a640b35d1f7a5f0e055624/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1544878966020d1f7a640b35d1f7a5f0e055624/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a1544878966020d1f7a640b35d1f7a5f0e055624", "patch": "@@ -435,18 +435,22 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && TYPE_UNSIGNED (type))\n    (trunc_divmod @0 @1))))\n \n- /* 1 / X -> X == 1 for unsigned integer X.\n-    1 / X -> X >= -1 && X <= 1 ? X : 0 for signed integer X.\n-    But not for 1 / 0 so that we can get proper warnings and errors,\n-    and not for 1-bit integers as they are edge cases better handled elsewhere. */\n-(simplify\n-  (trunc_div integer_onep@0 @1)\n-  (if (INTEGRAL_TYPE_P (type) && !integer_zerop (@1) && TYPE_PRECISION (type) > 1)\n-    (if (TYPE_UNSIGNED (type))\n-      (eq @1 { build_one_cst (type); })\n-      (with { tree utype = unsigned_type_for (type); }\n-        (cond (le (plus (convert:utype @1) { build_one_cst (utype); }) { build_int_cst (utype, 2); })\n-          @1 { build_zero_cst (type); })))))\n+/* 1 / X -> X == 1 for unsigned integer X.\n+   1 / X -> X >= -1 && X <= 1 ? X : 0 for signed integer X.\n+   But not for 1 / 0 so that we can get proper warnings and errors,\n+   and not for 1-bit integers as they are edge cases better handled\n+   elsewhere.  */\n+(simplify\n+ (trunc_div integer_onep@0 @1)\n+ (if (INTEGRAL_TYPE_P (type)\n+      && !integer_zerop (@1)\n+      && TYPE_PRECISION (type) > 1)\n+  (if (TYPE_UNSIGNED (type))\n+   (convert (eq:boolean_type_node @1 { build_one_cst (type); }))\n+   (with { tree utype = unsigned_type_for (type); }\n+    (cond (le (plus (convert:utype @1) { build_one_cst (utype); })\n+\t      { build_int_cst (utype, 2); })\n+     @1 { build_zero_cst (type); })))))\n \n /* Combine two successive divisions.  Note that combining ceil_div\n    and floor_div is trickier and combining round_div even more so.  */"}, {"sha": "7c4fc20b4d6660aba559f82e511c3cec16d1685e", "filename": "gcc/testsuite/gcc.dg/torture/pr104279.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1544878966020d1f7a640b35d1f7a5f0e055624/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104279.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1544878966020d1f7a640b35d1f7a5f0e055624/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104279.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104279.c?ref=a1544878966020d1f7a640b35d1f7a5f0e055624", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/104279 */\n+/* { dg-do compile } */\n+\n+unsigned a, b;\n+\n+int\n+main ()\n+{\n+  b = ~(0 || ~0);\n+  a = ~b / ~a;\n+  return 0;\n+}"}, {"sha": "c5a1d9bcd27b4adef0ddb2ec1f83cefa170fbeeb", "filename": "gcc/testsuite/gcc.dg/torture/pr104280.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1544878966020d1f7a640b35d1f7a5f0e055624/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104280.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1544878966020d1f7a640b35d1f7a5f0e055624/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104280.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104280.c?ref=a1544878966020d1f7a640b35d1f7a5f0e055624", "patch": "@@ -0,0 +1,16 @@\n+/* PR tree-optimization/104280 */\n+/* { dg-do run } */\n+\n+int\n+foo (unsigned b, int c)\n+{\n+  return b / c;\n+}\n+\n+int\n+main ()\n+{\n+  if (foo (1, 2) != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "35c8e20857817dcd685cb935c3649edce496fa8a", "filename": "gcc/testsuite/gcc.dg/torture/pr104281.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1544878966020d1f7a640b35d1f7a5f0e055624/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104281.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1544878966020d1f7a640b35d1f7a5f0e055624/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104281.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr104281.c?ref=a1544878966020d1f7a640b35d1f7a5f0e055624", "patch": "@@ -0,0 +1,22 @@\n+/* PR tree-optimization/104281 */\n+/* { dg-do run } */\n+\n+unsigned a = 1;\n+int b, c = 2;\n+long d;\n+\n+int\n+main ()\n+{\n+  while (1)\n+    {\n+      int m = a;\n+    L:\n+      a = ~(-(m || b & d));\n+      b = ((1 ^ a) / c);\n+      if (b)\n+\tgoto L;\n+      break;\n+    }\n+  return 0;\n+}"}]}