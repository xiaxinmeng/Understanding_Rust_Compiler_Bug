{"sha": "ca69bb98a2c517d34150332704a3e390f449134f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2OWJiOThhMmM1MTdkMzQxNTAzMzI3MDRhM2UzOTBmNDQ5MTM0Zg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2015-03-25T23:35:54Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2015-03-25T23:35:54Z"}, "message": "re PR testsuite/65526 (testsuite checks for arm vectorization support on non-arm targets)\n\nPR testsuite/65526\n* lib/target-supports.exp (check_effective_target_arm32): Fail early\nwhen target isn't arm*-*-*-*.\n(check_effective_target_arm_nothumb): Likewise.\n(check_effective_target_arm_little_endian): Likewise.\n(check_effective_target_arm_vect_no_misalign): Likewise.\n(check_effective_target_aarch64_little_endian): Fail early if target\nisn't aarch64*-*-*.\n\nFrom-SVN: r221677", "tree": {"sha": "27cd87f48c9b106d4bb941b7ef8495921ef3a720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27cd87f48c9b106d4bb941b7ef8495921ef3a720"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca69bb98a2c517d34150332704a3e390f449134f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca69bb98a2c517d34150332704a3e390f449134f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca69bb98a2c517d34150332704a3e390f449134f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca69bb98a2c517d34150332704a3e390f449134f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71e3f77e8c49516ee5f94c7b6af114dcd460e8df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e3f77e8c49516ee5f94c7b6af114dcd460e8df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e3f77e8c49516ee5f94c7b6af114dcd460e8df"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "06ce8761f1c10b2bbf1be4ddc6d61fc23d48020a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca69bb98a2c517d34150332704a3e390f449134f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca69bb98a2c517d34150332704a3e390f449134f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca69bb98a2c517d34150332704a3e390f449134f", "patch": "@@ -1,3 +1,14 @@\n+2015-03-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/65526\n+\t* lib/target-supports.exp (check_effective_target_arm32): Fail early\n+\twhen target isn't arm*-*-*-*.\n+\t(check_effective_target_arm_nothumb): Likewise.\n+\t(check_effective_target_arm_little_endian): Likewise.\n+\t(check_effective_target_arm_vect_no_misalign): Likewise.\n+\t(check_effective_target_aarch64_little_endian): Fail early if target\n+\tisn't aarch64*-*-*.\n+\n 2015-03-25  Sebastian Pop  <s.pop@samsung.com>\n \n \tPR tree-optimization/65177"}, {"sha": "f632d00832f07816b832716988e0f32acd932782", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca69bb98a2c517d34150332704a3e390f449134f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca69bb98a2c517d34150332704a3e390f449134f/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=ca69bb98a2c517d34150332704a3e390f449134f", "patch": "@@ -2373,6 +2373,10 @@ proc check_effective_target_aarch64_big_endian { } {\n \n # Return 1 if this is a AArch64 target supporting little endian\n proc check_effective_target_aarch64_little_endian { } {\n+    if { ![istarget aarch64*-*-*] } {\n+\treturn 0\n+    }\n+\n     return [check_no_compiler_messages aarch64_little_endian assembly {\n         #if !defined(__aarch64__) || defined(__AARCH64EB__)\n         #error FOO\n@@ -2382,6 +2386,10 @@ proc check_effective_target_aarch64_little_endian { } {\n \n # Return 1 if this is an arm target using 32-bit instructions\n proc check_effective_target_arm32 { } {\n+    if { ![istarget arm*-*-*] } {\n+\treturn 0\n+    }\n+\n     return [check_no_compiler_messages arm32 assembly {\n \t#if !defined(__arm__) || (defined(__thumb__) && !defined(__thumb2__))\n \t#error !__arm || __thumb__ && !__thumb2__\n@@ -2391,6 +2399,10 @@ proc check_effective_target_arm32 { } {\n \n # Return 1 if this is an arm target not using Thumb\n proc check_effective_target_arm_nothumb { } {\n+    if { ![istarget arm*-*-*] } {\n+\treturn 0\n+    }\n+\n     return [check_no_compiler_messages arm_nothumb assembly {\n \t#if !defined(__arm__) || (defined(__thumb__) || defined(__thumb2__))\n \t#error !__arm__ || __thumb || __thumb2__\n@@ -2400,6 +2412,10 @@ proc check_effective_target_arm_nothumb { } {\n \n # Return 1 if this is a little-endian ARM target\n proc check_effective_target_arm_little_endian { } {\n+    if { ![istarget arm*-*-*] } {\n+\treturn 0\n+    }\n+\n     return [check_no_compiler_messages arm_little_endian assembly {\n \t#if !defined(__arm__) || !defined(__ARMEL__)\n \t#error !__arm__ || !__ARMEL__\n@@ -2409,6 +2425,10 @@ proc check_effective_target_arm_little_endian { } {\n \n # Return 1 if this is an ARM target that only supports aligned vector accesses\n proc check_effective_target_arm_vect_no_misalign { } {\n+    if { ![istarget arm*-*-*] } {\n+\treturn 0\n+    }\n+\n     return [check_no_compiler_messages arm_vect_no_misalign assembly {\n \t#if !defined(__arm__) \\\n \t    || (defined(__ARM_FEATURE_UNALIGNED) \\"}]}