{"sha": "5eb99654a2c06c5547396318e121deb995076802", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWViOTk2NTRhMmMwNmM1NTQ3Mzk2MzE4ZTEyMWRlYjk5NTA3NjgwMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-08-21T02:41:51Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-08-21T02:41:51Z"}, "message": "alpha.c (TARGET_ASM_GLOBALIZE_LABEL): Define for unicosmk.\n\n\t* alpha.c (TARGET_ASM_GLOBALIZE_LABEL): Define for unicosmk.\n\t* alpha/elf.h (ASM_OUTPUT_EXTERNAL_LIBCALL,\n\tASM_OUTPUT_ALIGNED_BSS): Use target hook.\n\t* alpha/osf.h (ASM_OUTPUT_WEAK_ALIAS): Likewise.\n\t* alpha/unicosmk.h (ASM_GLOBALIZE_LABEL): Delete.\n\t* arm/aof.h (ASM_GLOBALIZE_LABEL): Likewise.\n\t(GLOBAL_ASM_OP): Define.\n\t* arm.c (aof_globalize_label): New function.\n\t(TARGET_ASM_GLOBALIZE_LABEL): Define for AOF.\n\t* arm/unknown-elf.h (ASM_OUTPUT_ALIGNED_BSS): Use target hook.\n\t* c4x.c (c4x_globalize_label): New function.\n\t(TARGET_ASM_GLOBALIZE_LABEL): Define for c4x.\n\t* c4x.h (ASM_GLOBALIZE_LABEL): Delete.\n\t(GLOBAL_ASM_OP): Define.\n\t* cris/aout.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Use target hook.\n\t* darwin-protos.h (darwin_globalize_label): Declare.\n\t* darwin.c (darwin_globalize_label): New function.\n\t* darwin.h (ASM_DECLARE_CLASS_REFERENCE): Use target hook.\n\t(ASM_GLOBALIZE_LABEL): Delete.\n\t(GLOBAL_ASM_OP, TARGET_ASM_GLOBALIZE_LABEL): Define.\n\t* dsp16xx.c (asm_output_common): Use target hook.\n\t* elfos.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Likewise.\n\t* frv.h (ASM_GLOBALIZE_LABEL): Delete.\n\t(GLOBAL_ASM_OP): Define.\n\t* i370.c (i370_globalize_label): New function.\n\t(TARGET_ASM_GLOBALIZE_LABEL): Define for i370.\n\t* i370.h (ASM_GLOBALIZE_LABEL): Delete.\n\t* i386.c (ix86_asm_file_end): Use target hook.\n\t* i386/sco5.h (ASM_GLOBALIZE_LABEL): Don't undef.\n\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Use target hook.\n\t* ia64.c (ia64_asm_output_external): Likewise.\n\t* ia64/sysv4.h: Update comment.\n\t* m32r.h (ASM_OUTPUT_ALIGNED_BSS): Use target hook.\n\t* mips/elf.h (ASM_OUTPUT_ALIGNED_BSS): Likewise.\n\t* mips/iris5.h (ASM_OUTPUT_WEAK_ALIAS): Use target hook.\n\t* mips/linux.h (ASM_OUTPUT_ALIGNED_BSS): Likewise.\n\t* mips.h (ASM_OUTPUT_ALIGNED_DECL_COMMON): Use target hook.\n\t* mmix-protos.h (mmix_asm_globalize_label): Delete.\n\t* mmix.c (mmix_asm_globalize_label): Likewise.\n\t* mmix.h (ASM_GLOBALIZE_LABEL): Likewise.\n\t(GLOBAL_ASM_OP): Define.\n\t* ns32k.c (ns32k_globalize_label): New function.\n\t* ns32k.h (TARGET_ASM_GLOBALIZE_LABEL): Define for ns32k.\n\t(ASM_GLOBALIZE_LABEL): Delete.\n\t* pa/pa-linux.h (ASM_GLOBALIZE_LABEL): Don't undef.\n\t(TARGET_ASM_GLOBALIZE_LABEL): Undefine.\n\t* pa.c (pa_globalize_label): New function.\n\t* pa.h (ASM_GLOBALIZE_LABEL): Delete.\n\t(TARGET_ASM_GLOBALIZE_LABEL): Define for pa.\n\t* rs6000/darwin.h (ASM_GLOBALIZE_LABEL): Delete.\n\t(GLOBAL_ASM_OP): Define.\n\t(TARGET_ASM_GLOBALIZE_LABEL): Undef.\n\t* rs6000/sysv4.h (ASM_OUTPUT_ALIGNED_BSS): Use target hook.\n\t* rs6000/xcoff.h (ASM_GLOBALIZE_LABEL): Delete.\n\t(GLOBAL_ASM_OP): Define.\n\t* v850.c (v850_output_aligned_bss): Use target hook.\n\t* vax.c (vms_globalize_label): New function.\n\t(TARGET_ASM_GLOBALIZE_LABEL): Define for vms.\n\t* vax/vms.h (ASM_GLOBALIZE_LABEL): Delete.\n\t(GLOBAL_ASM_OP): Define.\n\t* defaults.h (ASM_GLOBALIZE_LABEL): Delete.\n\t* doc/tm.texi: Update docs.\n\t* dwarf2out.c (default_eh_frame_section, output_die_symbol): Use\n\ttarget hook.\n\t* final.c (output_alternate_entry_point): Likewise.\n\t* hooks.c (hook_FILEptr_constcharptr_void): New function.\n\t* hooks.h (hook_FILEptr_constcharptr_void): Declare.\n\t* output.h (assemble_global): Delete.\n\t(default_globalize_label): Declare.\n\t* system.h (ASM_GLOBALIZE_LABEL): Poison.\n\t* target-def.h (TARGET_ASM_GLOBALIZE_LABEL): Define.\n\t(TARGET_ASM_OUT): Add TARGET_ASM_GLOBALIZE_LABEL.\n\t* target.h (gcc_target): Add globalize_label member.\n\t* varasm.c (asm_output_bss, asm_output_aligned_bss,\n\tglobalize_decl): Use target hook.\n\t(assemble_global): Delete.\n\t(default_globalize_label): New function.\n\nFrom-SVN: r56478", "tree": {"sha": "269c31451cd645fdc0e61e57ac97f847064a3806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/269c31451cd645fdc0e61e57ac97f847064a3806"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eb99654a2c06c5547396318e121deb995076802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb99654a2c06c5547396318e121deb995076802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb99654a2c06c5547396318e121deb995076802", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb99654a2c06c5547396318e121deb995076802/comments", "author": null, "committer": null, "parents": [{"sha": "f8f28a755cc2a489d56a7affb95b2671b08fa8b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f28a755cc2a489d56a7affb95b2671b08fa8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f28a755cc2a489d56a7affb95b2671b08fa8b8"}], "stats": {"total": 428, "additions": 265, "deletions": 163}, "files": [{"sha": "7094935b5257eb1d5078f4753edabbedb8036d50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -1,3 +1,83 @@\n+2002-08-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alpha.c (TARGET_ASM_GLOBALIZE_LABEL): Define for unicosmk.\n+\t* alpha/elf.h (ASM_OUTPUT_EXTERNAL_LIBCALL,\n+\tASM_OUTPUT_ALIGNED_BSS): Use target hook.\n+\t* alpha/osf.h (ASM_OUTPUT_WEAK_ALIAS): Likewise.\n+\t* alpha/unicosmk.h (ASM_GLOBALIZE_LABEL): Delete.\n+\t* arm/aof.h (ASM_GLOBALIZE_LABEL): Likewise.\n+\t(GLOBAL_ASM_OP): Define.\n+\t* arm.c (aof_globalize_label): New function.\n+\t(TARGET_ASM_GLOBALIZE_LABEL): Define for AOF.\n+\t* arm/unknown-elf.h (ASM_OUTPUT_ALIGNED_BSS): Use target hook.\n+\t* c4x.c (c4x_globalize_label): New function.\n+\t(TARGET_ASM_GLOBALIZE_LABEL): Define for c4x.\n+\t* c4x.h (ASM_GLOBALIZE_LABEL): Delete.\n+\t(GLOBAL_ASM_OP): Define.\n+\t* cris/aout.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Use target hook.\n+\t* darwin-protos.h (darwin_globalize_label): Declare.\n+\t* darwin.c (darwin_globalize_label): New function.\n+\t* darwin.h (ASM_DECLARE_CLASS_REFERENCE): Use target hook.\n+\t(ASM_GLOBALIZE_LABEL): Delete.\n+\t(GLOBAL_ASM_OP, TARGET_ASM_GLOBALIZE_LABEL): Define.\n+\t* dsp16xx.c (asm_output_common): Use target hook.\n+\t* elfos.h (ASM_OUTPUT_EXTERNAL_LIBCALL): Likewise.\n+\t* frv.h (ASM_GLOBALIZE_LABEL): Delete.\n+\t(GLOBAL_ASM_OP): Define.\n+\t* i370.c (i370_globalize_label): New function.\n+\t(TARGET_ASM_GLOBALIZE_LABEL): Define for i370.\n+\t* i370.h (ASM_GLOBALIZE_LABEL): Delete.\n+\t* i386.c (ix86_asm_file_end): Use target hook.\n+\t* i386/sco5.h (ASM_GLOBALIZE_LABEL): Don't undef.\n+\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Use target hook.\n+\t* ia64.c (ia64_asm_output_external): Likewise.\n+\t* ia64/sysv4.h: Update comment.\n+\t* m32r.h (ASM_OUTPUT_ALIGNED_BSS): Use target hook.\n+\t* mips/elf.h (ASM_OUTPUT_ALIGNED_BSS): Likewise.\n+\t* mips/iris5.h (ASM_OUTPUT_WEAK_ALIAS): Use target hook.\n+\t* mips/linux.h (ASM_OUTPUT_ALIGNED_BSS): Likewise.\n+\t* mips.h (ASM_OUTPUT_ALIGNED_DECL_COMMON): Use target hook.\n+\t* mmix-protos.h (mmix_asm_globalize_label): Delete.\n+\t* mmix.c (mmix_asm_globalize_label): Likewise.\n+\t* mmix.h (ASM_GLOBALIZE_LABEL): Likewise.\n+\t(GLOBAL_ASM_OP): Define.\n+\t* ns32k.c (ns32k_globalize_label): New function.\n+\t* ns32k.h (TARGET_ASM_GLOBALIZE_LABEL): Define for ns32k.\n+\t(ASM_GLOBALIZE_LABEL): Delete.\n+\t* pa/pa-linux.h (ASM_GLOBALIZE_LABEL): Don't undef.\n+\t(TARGET_ASM_GLOBALIZE_LABEL): Undefine.\n+\t* pa.c (pa_globalize_label): New function.\n+\t* pa.h (ASM_GLOBALIZE_LABEL): Delete.\n+\t(TARGET_ASM_GLOBALIZE_LABEL): Define for pa.\n+\t* rs6000/darwin.h (ASM_GLOBALIZE_LABEL): Delete.\n+\t(GLOBAL_ASM_OP): Define.\n+\t(TARGET_ASM_GLOBALIZE_LABEL): Undef.\n+\t* rs6000/sysv4.h (ASM_OUTPUT_ALIGNED_BSS): Use target hook.\n+\t* rs6000/xcoff.h (ASM_GLOBALIZE_LABEL): Delete.\n+\t(GLOBAL_ASM_OP): Define.\n+\t* v850.c (v850_output_aligned_bss): Use target hook.\n+\t* vax.c (vms_globalize_label): New function.\n+\t(TARGET_ASM_GLOBALIZE_LABEL): Define for vms.\n+\t* vax/vms.h (ASM_GLOBALIZE_LABEL): Delete.\n+\t(GLOBAL_ASM_OP): Define.\n+\t* defaults.h (ASM_GLOBALIZE_LABEL): Delete.\n+\t* doc/tm.texi: Update docs.\n+\t* dwarf2out.c (default_eh_frame_section, output_die_symbol): Use\n+\ttarget hook.\n+\t* final.c (output_alternate_entry_point): Likewise.\n+\t* hooks.c (hook_FILEptr_constcharptr_void): New function.\n+\t* hooks.h (hook_FILEptr_constcharptr_void): Declare.\n+\t* output.h (assemble_global): Delete.\n+\t(default_globalize_label): Declare.\n+\t* system.h (ASM_GLOBALIZE_LABEL): Poison.\n+\t* target-def.h (TARGET_ASM_GLOBALIZE_LABEL): Define.\n+\t(TARGET_ASM_OUT): Add TARGET_ASM_GLOBALIZE_LABEL.\n+\t* target.h (gcc_target): Add globalize_label member.\n+\t* varasm.c (asm_output_bss, asm_output_aligned_bss,\n+\tglobalize_decl): Use target hook.\n+\t(assemble_global): Delete.\n+\t(default_globalize_label): New function.\n+\n 2002-08-20  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* dsp16xx.h (dsp16xx_umulhi3_libcall): Delete."}, {"sha": "7734bc89399007faa637a2290effee28e097b3a0", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -245,6 +245,8 @@ static void unicosmk_unique_section PARAMS ((tree, int));\n # define TARGET_SECTION_TYPE_FLAGS unicosmk_section_type_flags\n # undef TARGET_ASM_UNIQUE_SECTION\n # define TARGET_ASM_UNIQUE_SECTION unicosmk_unique_section\n+# undef TARGET_ASM_GLOBALIZE_LABEL\n+# define TARGET_ASM_GLOBALIZE_LABEL hook_FILEptr_constcharptr_void\n #endif\n \n #undef TARGET_ASM_ALIGNED_HI_OP"}, {"sha": "806d95f4420df36d2636423e829088696b75e245", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -112,7 +112,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n #undef  ASM_OUTPUT_EXTERNAL_LIBCALL\n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\t\t\t\\\n-  ASM_GLOBALIZE_LABEL (FILE, XSTR (FUN, 0))\n+  (*targetm.asm_out.globalize_label) (FILE, XSTR (FUN, 0))\n \n /* This says how to output assembler code to declare an\n    uninitialized external linkage data object.  Under SVR4,\n@@ -156,7 +156,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\t\t\\\n+  (*targetm.asm_out.globalize_label) (FILE, NAME);\t       \t\t\\\n   ASM_OUTPUT_ALIGNED_LOCAL (FILE, NAME, SIZE, ALIGN);\t\t\t\\\n } while (0)\n "}, {"sha": "268c124c8cea0f89f38a70aa71314bf81e06d5b1", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -198,7 +198,7 @@ __enable_execute_stack (addr)\t\t\t\t\t\t\\\n #define ASM_OUTPUT_WEAK_ALIAS(FILE, NAME, VALUE)\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\\\n+      (*targetm.asm_out.globalize_label) (FILE, NAME);  \\\n       fputs (\"\\t.weakext\\t\", FILE);\t\t\t\\\n       assemble_name (FILE, NAME);\t\t\t\\\n       if (VALUE)\t\t\t\t\t\\"}, {"sha": "8f7b53db0718d2d5582e8d8269017d3ba5ffa6d7", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -349,12 +349,6 @@ ssib_section ()\t\t\t\\\n \n #undef ASM_OUTPUT_SOURCE_FILENAME\n \n-/* There is no directive for declaring a label as global. Instead, an \n-   additional colon must be appended when the label is defined.  */\n-\n-#undef ASM_GLOBALIZE_LABEL\n-#define ASM_GLOBALIZE_LABEL(FILE,NAME)\n-\n /* This is how to output a label for a jump table.  Arguments are the same as\n    for ASM_OUTPUT_INTERNAL_LABEL, except the insn for the jump table is\n    passed.  */"}, {"sha": "965337cf7006a81bd87437937e14167274047059", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -220,14 +220,8 @@ do\t\t\t\t\t\\\n \n extern int arm_main_function;\n \n-#define ASM_GLOBALIZE_LABEL(STREAM,NAME)\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  fprintf ((STREAM), \"\\tEXPORT\\t\");\t\t\t\\\n-  assemble_name ((STREAM), (NAME));\t\t\t\\\n-  fputc ('\\n', (STREAM));\t\t\t\t\\\n-  if ((NAME)[0] == 'm' && ! strcmp ((NAME), \"main\"))\t\\\n-    arm_main_function = 1;\t\t\t\t\\\n-} while (0)\n+/* Globalizing directive for a label.  */\n+#define GLOBAL_ASM_OP \"\\tEXPORT\\t\"\n \n #define ASM_OUTPUT_LABEL(STREAM,NAME)\t\\\n do {\t\t\t\t\t\\"}, {"sha": "56c7e276efc8f49d2bb4b100b655bb5556afe4b6", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -123,6 +123,9 @@ static void\t arm_elf_asm_named_section\tPARAMS ((const char *, unsigned int));\n #ifndef ARM_PE\n static void\t arm_encode_section_info\tPARAMS ((tree, int));\n #endif\n+#ifdef AOF_ASSEMBLER\n+static void\t aof_globalize_label\t\tPARAMS ((FILE *, const char *));\n+#endif\n \n #undef Hint\n #undef Mmode\n@@ -145,6 +148,8 @@ static void\t arm_encode_section_info\tPARAMS ((tree, int));\n #define TARGET_ASM_ALIGNED_HI_OP \"\\tDCW\\t\"\n #undef  TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP \"\\tDCD\\t\"\n+#undef TARGET_ASM_GLOBALIZE_LABEL\n+#define TARGET_ASM_GLOBALIZE_LABEL aof_globalize_label\n #else\n #undef  TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP NULL\n@@ -10950,6 +10955,16 @@ aof_dump_imports (f)\n       imports_list = imports_list->next;\n     }\n }\n+\n+static void\n+aof_globalize_label (stream, name)\n+     FILE *stream;\n+     const char *name;\n+{\n+  default_globalize_label (stream, name);\n+  if (! strcmp (name, \"main\"))\n+    arm_main_function = 1;\n+}\n #endif /* AOF_ASSEMBLER */\n \n #ifdef OBJECT_FORMAT_ELF"}, {"sha": "bf2eee2bb6904341e29c7b889449aaa0393ec6bf", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -61,7 +61,7 @@ Boston, MA 02111-1307, USA.  */\n       else\t\t\t\t\t\t\t\t\\\n \tbss_section ();\t\t\t\t\t\t\t\\\n       \t\t\t\t\t\t\t\t\t\\\n-      ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\t\t\\\n+      (*targetm.asm_out.globalize_label) (FILE, NAME);\t\t\t\\\n       \t\t\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_ALIGN (FILE, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "2ed42bee36290994ae951fb24d970db499ff1357", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -193,6 +193,7 @@ static void c4x_insert_attributes PARAMS ((tree, tree *));\n static void c4x_asm_named_section PARAMS ((const char *, unsigned int));\n static int c4x_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static void c4x_encode_section_info PARAMS ((tree, int));\n+static void c4x_globalize_label PARAMS ((FILE *, const char *));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -220,6 +221,9 @@ static void c4x_encode_section_info PARAMS ((tree, int));\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO c4x_encode_section_info\n \n+#undef TARGET_ASM_GLOBALIZE_LABEL\n+#define TARGET_ASM_GLOBALIZE_LABEL c4x_globalize_label\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override command line options.\n@@ -5045,3 +5049,11 @@ c4x_asm_named_section (name, flags)\n   fprintf (asm_out_file, \"\\t.sect\\t\\\"%s\\\"\\n\", name);\n }\n \n+static void\n+c4x_globalize_label (stream, name)\n+     FILE *stream;\n+     const char *name;\n+{\n+  default_globalize_label (stream, name);\n+  c4x_global_label (name);\n+}"}, {"sha": "80722cc32c67fca893680291c350f215e6bb302b", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -1704,13 +1704,8 @@ fini_section ()\t\t\t\t\t\t\t\\\n \n #define NO_DOT_IN_LABEL\t\t/* Only required for TI format.  */\n \n-#define ASM_GLOBALIZE_LABEL(FILE, NAME) \\\n-  do {                                  \\\n-    fprintf (FILE, \"\\t.global\\t\");\t\\\n-    assemble_name (FILE, NAME);\t\t\\\n-    fputs (\"\\n\", FILE); \t        \\\n-    c4x_global_label (NAME);\t\t\\\n-  } while (0);\n+/* Globalizing directive for a label.  */\n+#define GLOBAL_ASM_OP \"\\t.global\\t\"\n \n #define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \\\n c4x_external_ref (NAME)"}, {"sha": "fe99c769a0d6312eaf94dc582b6e3468ff9f28c0", "filename": "gcc/config/cris/aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fcris%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fcris%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Faout.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -277,7 +277,7 @@ Boston, MA 02111-1307, USA.  */\n #define SET_ASM_OP\t\"\\t.set\\t\"\n \n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\\\n-  ASM_GLOBALIZE_LABEL (FILE, XSTR (FUN, 0))\n+  (*targetm.asm_out.globalize_label) (FILE, XSTR (FUN, 0))\n \n #define ASM_WEAKEN_LABEL(FILE, NAME) \t\\\n   do\t\t\t\t\t\\"}, {"sha": "efce90af00cdcc58226464b5ef74811c1bb96bbb", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -114,3 +114,4 @@ extern void machopic_symbol_stub_section PARAMS ((void));\n extern void machopic_picsymbol_stub_section PARAMS ((void));\n extern void darwin_exception_section PARAMS ((void));\n extern void darwin_eh_frame_section PARAMS ((void));\n+extern void darwin_globalize_label PARAMS ((FILE *, const char *));"}, {"sha": "fc162d07ffff9b3c5ee8af856afa422c971d6f26", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -1285,5 +1285,14 @@ machopic_asm_out_destructor (symbol, priority)\n     fprintf (asm_out_file, \".reference .destructors_used\\n\");\n }\n \n+void\n+darwin_globalize_label (stream, name)\n+     FILE *stream;\n+     const char *name;\n+{\n+  if (!!strncmp (name, \"_OBJC_\", 6))\n+    default_globalize_label (stream, name);\n+}\n+\n #include \"gt-darwin.h\"\n "}, {"sha": "f6ed2946a393455329c3ac7293200fd5d8686585", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -504,15 +504,13 @@ objc_section_init ()\t\t\t\t\\\n \t   fprintf (FILE, \"\\t\");\t\t\t\t\t\\\n \t   assemble_name (FILE, NAME); \t\t\t\t\t\\\n \t   fprintf (FILE, \"=0\\n\");\t\t\t\t\t\\\n-\t   assemble_global (NAME);\t\t\t\t\t\\\n+\t   (*targetm.asm_out.globalize_label) (FILE, NAME);\t\t\\\n \t }\t\t\t\t\t\t\t\t\\\n        } while (0)\n \n-#undef ASM_GLOBALIZE_LABEL\n-#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n- do { const char *const _x = (NAME); if (!!strncmp (_x, \"_OBJC_\", 6)) { \\\n-  (fputs (\".globl \", FILE), assemble_name (FILE, _x), fputs (\"\\n\", FILE)); \\\n- }} while (0)\n+/* Globalizing directive for a label.  */\n+#define GLOBAL_ASM_OP \".globl \"\n+#define TARGET_ASM_GLOBALIZE_LABEL darwin_globalize_label\n \n #undef ASM_GENERATE_INTERNAL_LABEL\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\"}, {"sha": "b031aa2bdcb5ea2a93eebac5cec17c9fdcc3ee8f", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -2198,7 +2198,7 @@ asm_output_common(file, name, size, rounded)\n      int rounded;\n {\n     bss_section ();\n-    ASM_GLOBALIZE_LABEL (file, name);\n+    (*targetm.asm_out.globalize_label) (file, name);\n     assemble_name (file, name);\n     fputs (\":\", file);\n     if (rounded > 1)"}, {"sha": "8135ab70a6f54beedf28b4bcc2340be30684813f", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -172,7 +172,7 @@ Boston, MA 02111-1307, USA.  */\n    in each assembly file where they are referenced.  */\n \n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\\\n-  ASM_GLOBALIZE_LABEL (FILE, XSTR (FUN, 0))\n+  (*targetm.asm_out.globalize_label) (FILE, XSTR (FUN, 0))\n \n /* This says how to output assembler code to declare an\n    uninitialized external linkage data object.  Under SVR4,"}, {"sha": "0bd7b4decb3888743576216b8c2e17168e44e7c2", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -2997,17 +2997,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   fputs (\":\\n\", STREAM);\t\t\t\t\t\t\\\n } while (0)\n \n-/* A C statement (sans semicolon) to output to the stdio stream STREAM some\n-   commands that will make the label NAME global; that is, available for\n-   reference from other files.  Use the expression `assemble_name (STREAM,\n-   NAME)' to output the name itself; before and after that, output the\n-   additional assembler syntax for making that name global, and a newline.  */\n-#define ASM_GLOBALIZE_LABEL(STREAM, NAME)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  fputs (\"\\t.globl \", STREAM);\t\t\t\t\t\t\\\n-  assemble_name (STREAM, NAME);\t\t\t\t\t\t\\\n-  fputs (\"\\n\", STREAM);\t\t\t\t\t\t\t\\\n-} while (0)\n+/* Globalizing directive for a label.  */\n+#define GLOBAL_ASM_OP \"\\t.globl \"\n \n /* A C statement (sans semicolon) to output to the stdio stream STREAM a\n    reference in assembler syntax to a label named NAME.  This should add `_' to"}, {"sha": "e84ccc85a1488e095f98e709f9ecfedaadc9049e", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -101,6 +101,7 @@ static label_node_t * mvs_get_label PARAMS ((int));\n static void i370_label_scan PARAMS ((void));\n #ifdef TARGET_HLASM\n static bool i370_hlasm_assemble_integer PARAMS ((rtx, unsigned int, int));\n+static void i370_globalize_label PARAMS ((FILE *, const char *));\n #endif\n static void i370_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void i370_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n@@ -301,6 +302,8 @@ static const unsigned char ebcasc[256] =\n #define TARGET_ASM_ALIGNED_SI_OP NULL\n #undef TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER i370_hlasm_assemble_integer\n+#undef TARGET_ASM_GLOBALIZE_LABEL\n+#define TARGET_ASM_GLOBALIZE_LABEL i370_globalize_label\n #endif\n \n #undef TARGET_ASM_FUNCTION_PROLOGUE\n@@ -1416,6 +1419,19 @@ i370_output_function_prologue (f, l)\n   /* find all labels in this routine */\n   i370_label_scan ();\n }\n+\n+static void\n+i370_globalize_label (stream, name)\n+     FILE *stream;\n+     const char *name;\n+{\n+  char temp[MAX_MVS_LABEL_SIZE + 1];\n+  if (mvs_check_alias (name, temp) == 2)\n+    fprintf (stream, \"%s\\tALIAS\\tC'%s'\\n\", temp, name);\n+  fputs (\"\\tENTRY\\t\", stream);\n+  assemble_name (stream, name);\n+  putc ('\\n', stream);\n+}\n #endif /* TARGET_HLASM */\n \n "}, {"sha": "7bcbdf893a1beb44cace247335c8432c62b48dfe", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -1073,18 +1073,6 @@ enum reg_class\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define ASM_GLOBALIZE_LABEL(FILE, NAME)\t\t\t\t\t\\\n-{ \t\t\t\t\t\t\t\t\t\\\n-  char temp[MAX_MVS_LABEL_SIZE + 1];\t\t\t\t\t\\\n-  if (mvs_check_alias (NAME, temp) == 2)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\\tALIAS\\tC'%s'\\n\", temp, NAME);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  fputs (\"\\tENTRY\\t\", FILE);\t\t\t\t\t\t\\\n-  assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-  fputs (\"\\n\", FILE);\t\t\t\t\t\t\t\\\n-}\n-\n /* MVS externals are limited to 8 characters, upper case only.\n    The '_' is mapped to '@', except for MVS functions, then '#'.  */\n "}, {"sha": "2f66a01230b72e877d6ebe09e343f3cd05f5d463", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -3931,7 +3931,7 @@ ix86_asm_file_end (file)\n \t  (*targetm.asm_out.unique_section) (decl, 0);\n \t  named_section (decl, NULL, 0);\n \n-\t  ASM_GLOBALIZE_LABEL (file, name);\n+\t  (*targetm.asm_out.globalize_label) (file, name);\n \t  fputs (\"\\t.hidden\\t\", file);\n \t  assemble_name (file, name);\n \t  fputc ('\\n', file);"}, {"sha": "9d7c314d5a7c326b4aa7fe4c77c881965693edc7", "filename": "gcc/config/i386/sco5.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fi386%2Fsco5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fi386%2Fsco5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsco5.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -350,11 +350,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n   fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME);\n \n-#undef ASM_GLOBALIZE_LABEL\n-\n #undef ASM_OUTPUT_EXTERNAL_LIBCALL\n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\t\t\t\\\n-  if (TARGET_ELF) ASM_GLOBALIZE_LABEL (FILE, XSTR (FUN, 0))\n+  if (TARGET_ELF) (*targetm.asm_out.globalize_label) (FILE, XSTR (FUN, 0))\n \n #undef ASM_OUTPUT_INTERNAL_LABEL\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\t\t\\"}, {"sha": "08a2dfacbaf946511b7b5a2479cbde1d6b7e394f", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -4060,7 +4060,7 @@ ia64_asm_output_external (file, decl, name)\n   save_referenced = TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl));\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n-  ASM_GLOBALIZE_LABEL (file, name);\n+  (*targetm.asm_out.globalize_label) (file, name);\n   TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)) = save_referenced;\n }\n \f"}, {"sha": "3254fa5e2fd6c4a7a38ac5f007f930e8470661db", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -33,8 +33,8 @@\n    the Intel simulator.  So we must explicitly put variables in .bss\n    instead.  This matters only if we care about the Intel assembler.  */\n \n-/* This is asm_output_aligned_bss from varasm.c without the ASM_GLOBALIZE_LABEL\n-   call at the beginning.  */\n+/* This is asm_output_aligned_bss from varasm.c without the\n+   (*targetm.asm_out.globalize_label) call at the beginning.  */\n \n /* This is for final.c, because it is used by ASM_DECLARE_OBJECT_NAME.  */\n extern int size_directive_output;"}, {"sha": "2b3720dd3be637ad5b444fea70b700afdb093e9c", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -1852,7 +1852,7 @@ extern char m32r_punct_chars[256];\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\t\\\n+      (*targetm.asm_out.globalize_label) (FILE, NAME);\t\t\\\n       ASM_OUTPUT_ALIGNED_COMMON (FILE, NAME, SIZE, ALIGN);\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "6e9004b6e675ce7623a9dfa01b36971a11d9b8f3", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -106,7 +106,7 @@ do {\t\t\t\t\t\t\\\n #ifndef ASM_OUTPUT_ALIGNED_BSS\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n do {\t\t\t\t\t\t\t\t\t\\\n-  ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\t\t\\\n+  (*targetm.asm_out.globalize_label) (FILE, NAME);\t\t\t\\\n   if (SIZE > 0 && SIZE <= mips_section_threshold)\t\t\t\\\n     sbss_section ();\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\"}, {"sha": "e26d53bf2d84d01a8d82262af26b046eb462b08e", "filename": "gcc/config/mips/iris5.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmips%2Firis5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmips%2Firis5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis5.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -190,7 +190,7 @@ do {\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_WEAK_ALIAS(FILE, NAME, VALUE)\t\\\n   do\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\\\n-      ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\\\n+      (*targetm.asm_out.globalize_label) (FILE, NAME);  \\\n       fputs (\"\\t.weakext\\t\", FILE);\t\t\t\\\n       assemble_name (FILE, NAME);\t\t\t\\\n       if (VALUE)\t\t\t\t\t\\"}, {"sha": "d25cd51ddccb648c7fc8488dcdf09d8bb8a3ca70", "filename": "gcc/config/mips/linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmips%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmips%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -45,7 +45,7 @@ Boston, MA 02111-1307, USA.  */\n    `varasm.c' when defining this macro.  */\n #define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n do {\t\t\t\t\t\t\t\t\\\n-  ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\t\\\n+  (*targetm.asm_out.globalize_label) (FILE, NAME);\t\t\\\n   if (SIZE > 0 && SIZE <= mips_section_threshold)\t\t\\\n     sbss_section ();\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\\"}, {"sha": "ee5ccf2f48c3180359905e5f63aa51c5fb16fc99", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -4335,7 +4335,7 @@ while (0)\n \t    || DECL_INITIAL (DECL) == error_mark_node))\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tif (TREE_PUBLIC (DECL) && DECL_NAME (DECL))\t\t\t\\\n-\t  ASM_GLOBALIZE_LABEL (STREAM, NAME);\t\t\t\t\\\n+\t  (*targetm.asm_out.globalize_label) (STREAM, NAME);\t\t\\\n \t    \t\t\t\t\t\t\t\t\\\n \treadonly_data_section ();\t\t\t\t\t\\\n \tASM_OUTPUT_ALIGN (STREAM, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\"}, {"sha": "e8ef95e9895b8a13118ae13e8431b217ce5a9569", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -40,7 +40,6 @@ extern void mmix_output_quoted_string PARAMS ((FILE *, const char *, int));\n extern void mmix_asm_output_source_line  PARAMS ((FILE *, int));\n extern void mmix_asm_output_ascii PARAMS ((FILE *, const char *, int));\n extern void mmix_asm_output_label PARAMS ((FILE *, const char *));\n-extern void mmix_asm_globalize_label PARAMS ((FILE *, const char *));\n extern void mmix_asm_weaken_label PARAMS ((FILE *, const char *));\n extern void mmix_asm_output_labelref PARAMS ((FILE *, const char *));\n extern void mmix_asm_output_internal_label"}, {"sha": "deb6b1ef976289961e2ad988847b65ef153f2241", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -1520,18 +1520,6 @@ mmix_asm_declare_register_global (stream, decl, regno, name)\n      here.  */\n }\n \n-/* ASM_GLOBALIZE_LABEL.  */\n-\n-void\n-mmix_asm_globalize_label (stream, name)\n-     FILE * stream ATTRIBUTE_UNUSED;\n-     const char * name ATTRIBUTE_UNUSED;\n-{\n-  asm_fprintf (stream, \"\\t.global \");\n-  assemble_name (stream, name);\n-  putc ('\\n', stream);\n-}\n-\n /* ASM_WEAKEN_LABEL.  */\n \n void"}, {"sha": "5da23882b9b83f4e4eb1d1cd4878f33cb2c5c164", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -980,8 +980,7 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n #define ASM_DECLARE_REGISTER_GLOBAL(STREAM, DECL, REGNO, NAME) \\\n  mmix_asm_declare_register_global (STREAM, DECL, REGNO, NAME)\n \n-#define ASM_GLOBALIZE_LABEL(STREAM, NAME) \\\n- mmix_asm_globalize_label (STREAM, NAME)\n+#define GLOBAL_ASM_OP \"\\t.global \"\n \n #define ASM_WEAKEN_LABEL(STREAM, NAME) \\\n  mmix_asm_weaken_label (STREAM, NAME)"}, {"sha": "ee419a078851bdf454a651a3d7d64b0e3f27fd24", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -70,6 +70,9 @@ const struct attribute_spec ns32k_attribute_table[];\n static void ns32k_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void ns32k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void ns32k_encode_section_info PARAMS ((tree, int));\n+#ifdef COLLECT\n+static void ns32k_globalize_label PARAMS ((FILE *, const char *));\n+#endif\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -1573,3 +1576,13 @@ ns32k_encode_section_info (decl, first)\n \t   || ! TREE_PUBLIC (decl));\n     }\n }\n+\n+#ifdef COLLECT\n+static void\n+ns32k_globalize_label (stream, name)\n+     FILE *stream;\n+     const char *name;\n+{\n+  fprintf (stream, \"\\t.globl\\t%s\\n\", name);\n+}\n+#endif"}, {"sha": "7bc02d4ed9d5f5854b404ede1b3704a0cfbded60", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -1319,12 +1319,11 @@ __transfer_from_trampoline ()\t\t\\\n /* This is how to output a command to make the user-level label named NAME\n    defined for reference from other files.  */\n \n-#ifndef COLLECT\n+#ifdef COLLECT\n+#define TARGET_ASM_GLOBALIZE_LABEL ns32k_globalize_label\n+#else\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \".globl \"\n-#else\n-#define ASM_GLOBALIZE_LABEL(STREAM,NAME)\t\t\t\t\\\n-  fprintf ((STREAM), \"\\t.globl\\t%s\\n\", (NAME));\n #endif\n \n /* This is how to output an internal numbered label where"}, {"sha": "0fcb1e5095cabbb6943aec9085383560ce02d7a8", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -169,7 +169,7 @@ Boston, MA 02111-1307, USA.  */\n    ASM_GENERATE_INTERNAL_LABEL(), so do not define it here.  */\n \n /* Use the default.  */\n-#undef ASM_GLOBALIZE_LABEL\n+#undef TARGET_ASM_GLOBALIZE_LABEL\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \".globl \"\n "}, {"sha": "9f692537a4693aeda26926e9c1b712c7a6cb2e50", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -116,6 +116,7 @@ static void pa_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT))\n      ATTRIBUTE_UNUSED;\n static void pa_encode_section_info PARAMS ((tree, int));\n static const char *pa_strip_name_encoding PARAMS ((const char *));\n+static void pa_globalize_label PARAMS ((FILE *, const char *));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -7701,4 +7702,18 @@ pa_select_section (exp, reloc, align)\n     data_section ();\n }\n \n+static void\n+pa_globalize_label (stream, name)\n+     FILE *stream;\n+     const char *name;\n+{\n+  /* We only handle DATA objects here, functions are globalized in\n+     ASM_DECLARE_FUNCTION_NAME.  */\n+  if (! FUNCTION_NAME_P (name))\n+  {\n+    fputs (\"\\t.EXPORT \", stream);\n+    assemble_name (stream, name);\n+    fputs (\",DATA\\n\", stream);\n+  }\n+}\n #include \"gt-pa.h\""}, {"sha": "04e417f3640c1693250ffee1c1403d74d0a3ea47", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -1679,17 +1679,7 @@ do { \t\t\t\t\t\t\t\t\t\\\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%c$%s%04ld\", (PREFIX)[0], (PREFIX) + 1, (long)(NUM))\n \n-#define ASM_GLOBALIZE_LABEL(FILE, NAME)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    /* We only handle DATA objects here, functions are globalized in\t\\\n-       ASM_DECLARE_FUNCTION_NAME.  */\t\t\t\t\t\\\n-    if (! FUNCTION_NAME_P (NAME))\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tfputs (\"\\t.EXPORT \", FILE);\t\t\t\t\t\\\n-\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfputs (\",DATA\\n\", FILE);\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n+#define TARGET_ASM_GLOBALIZE_LABEL pa_globalize_label\n \n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)  \\\n   output_ascii ((FILE), (P), (SIZE))"}, {"sha": "f3e1d715aa5b6fb7977a42f5e3442a7ca399b6b2", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -103,13 +103,10 @@ Boston, MA 02111-1307, USA.  */\n #define RS6000_OUTPUT_BASENAME(FILE, NAME)\t\\\n     assemble_name (FILE, NAME);\n \n-/* This is how to output a command to make the user-level label named NAME\n-   defined for reference from other files.  */\n-\n-#undef ASM_GLOBALIZE_LABEL\n-#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n-  do { fputs (\"\\t.globl \", FILE);\t\\\n-       RS6000_OUTPUT_BASENAME (FILE, NAME); putc ('\\n', FILE);} while (0)\n+/* Globalizing directive for a label.  */\n+#undef GLOBAL_ASM_OP\n+#define GLOBAL_ASM_OP \"\\t.globl \"\n+#undef TARGET_ASM_GLOBALIZE_LABEL\n \n /* This is how to output an internal label prefix.  rs6000.c uses this\n    when generating traceback tables.  */"}, {"sha": "34cb80eeb2630c84383529e6ca63b168a35ea2eb", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -716,7 +716,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Describe how to emit uninitialized external linkage items.  */\n #define\tASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\t\t\\\n+  (*targetm.asm_out.globalize_label) (FILE, NAME);\t\t\t\\\n   ASM_OUTPUT_ALIGNED_LOCAL (FILE, NAME, SIZE, ALIGN);\t\t\t\\\n } while (0)\n "}, {"sha": "acc10def7482dc7c5f6f82c8e2cc617842bb8038", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -196,9 +196,8 @@ toc_section ()\t\t\t\t\t\t\\\n /* This is how to output a command to make the user-level label named NAME\n    defined for reference from other files.  */\n \n-#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\\\n-  do { fputs (\"\\t.globl \", FILE);\t\\\n-       RS6000_OUTPUT_BASENAME (FILE, NAME); putc ('\\n', FILE);} while (0)\n+/* Globalizing directive for a label.  */\n+#define GLOBAL_ASM_OP \"\\t.globl \"\n \n /* Output at beginning of assembler file.\n "}, {"sha": "80096781ae672ccb37e0fadd9714dcb129e649e0", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -2632,7 +2632,7 @@ v850_output_aligned_bss (file, decl, name, size, align)\n      int size;\n      int align;\n {\n-  ASM_GLOBALIZE_LABEL (file, name);\n+  (*targetm.asm_out.globalize_label) (file, name);\n   \n   switch (v850_get_data_area (decl))\n     {"}, {"sha": "9c929cc4d9f48ae7af4263418d085ad9fdc0a3e2", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -45,6 +45,7 @@ static void vms_asm_out_constructor PARAMS ((rtx, int));\n static void vms_asm_out_destructor PARAMS ((rtx, int));\n static void vms_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n static void vms_encode_section_info PARAMS ((tree, int));\n+static void vms_globalize_label PARAMS ((FILE *, const char *));\n #endif\n \f\n /* Initialize the GCC target structure.  */\n@@ -59,6 +60,8 @@ static void vms_encode_section_info PARAMS ((tree, int));\n #define TARGET_ASM_SELECT_SECTION vms_select_section\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO vms_encode_section_info\n+#undef TARGET_ASM_GLOBALIZE_LABEL\n+#define TARGET_ASM_GLOBALIZE_LABEL vms_globalize_label\n #endif\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n@@ -925,6 +928,17 @@ vms_encode_section_info (decl, first)\n   if (DECL_EXTERNAL (decl) && TREE_PUBLIC (decl))\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n }\n+\n+/* This is how to output a command to make the user-level label named NAME\n+   defined for reference from other files.  */\n+static void\n+vms_globalize_label (stream, name)\n+     FILE *stream;\n+     const char *name;\n+{\n+  default_globalize_label (stream, name);\n+  vms_check_external (NULL_TREE, name, 0);\n+}\n #endif /* VMS_TARGET */\n \f\n /* Additional support code for VMS host.  */"}, {"sha": "870ebaf04eb00225758a5f2b07a68c46d11216c9", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -90,16 +90,8 @@ Boston, MA 02111-1307, USA.  */\n /* This macro definition sets up a default value for `main' to return.  */\n #define DEFAULT_MAIN_RETURN  c_expand_return (integer_one_node)\n \f\n-/* This is how to output a command to make the user-level label named NAME\n-   defined for reference from other files.  */\n-\n-#undef ASM_GLOBALIZE_LABEL\n-#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\t\\\n-  do { fputs (\".globl \", FILE);\t\t\t\\\n-       assemble_name (FILE, NAME);\t\t\\\n-       fputs (\"\\n\", FILE);\t\t\t\\\n-       vms_check_external (NULL_TREE, NAME, 0); \\\n-     } while (0)\n+/* Globalizing directive for a label.  */\n+#define GLOBAL_ASM_OP \".globl \"\n \n /* Under VMS we write the actual size of the storage to be allocated even\n    though the symbol is external.  Although it is possible to give external"}, {"sha": "157aa015cf26fe6aea7313b4ab3f7da50dede3aa", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -154,19 +154,6 @@ do { fputs (integer_asm_op (POINTER_SIZE / UNITS_PER_WORD, TRUE), FILE); \\\n #define ASM_OUTPUT_LABELREF(FILE,NAME)  asm_fprintf ((FILE), \"%U%s\", (NAME))\n #endif\n \n-/* A C statement (sans semicolon) to output to the stdio stream FILE\n-   some commands that will make the label NAME global; that is,\n-   available for reference from other files.  */\n-\n-#if !defined(ASM_GLOBALIZE_LABEL) && defined(GLOBAL_ASM_OP)\n-#define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\t\\\n-  do {\t\t\t\t\t\t\\\n-      fputs (GLOBAL_ASM_OP, (FILE));\t\t\\\n-      assemble_name ((FILE), (NAME));\t\t\\\n-      fputc ('\\n', (FILE));\t\t\t\\\n-  } while (0)\n-#endif\n-\n /* Allow target to print debug info labels specially.  This is useful for\n    VLIW targets, since debug info labels should go into the middle of\n    instruction bundles instead of breaking them.  */"}, {"sha": "4caef1dce25f3d879273baf2d5677e1b11a0b103", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -6582,17 +6582,13 @@ nothing.\n You may wish to use @code{ASM_OUTPUT_SIZE_DIRECTIVE} and/or\n @code{ASM_OUTPUT_MEASURED_SIZE} in the definition of this macro.\n \n-@findex ASM_GLOBALIZE_LABEL\n-@item ASM_GLOBALIZE_LABEL (@var{stream}, @var{name})\n-A C statement (sans semicolon) to output to the stdio stream\n+@deftypefn {Target Hook} void TARGET_ASM_GLOBALIZE_LABEL (FILE *@var{stream}, const char *@var{name})\n+This target hook is a function to output to the stdio stream\n @var{stream} some commands that will make the label @var{name} global;\n-that is, available for reference from other files.  Use the expression\n-@code{assemble_name (@var{stream}, @var{name})} to output the name\n-itself; before and after that, output the additional assembler syntax\n-for making that name global, and a newline.\n+that is, available for reference from other files.\n \n-If you define @code{GLOBAL_ASM_OP}, a default definition is provided\n-which is correct for most systems.\n+The default implementation relies on a proper definition of\n+@code{GLOBAL_ASM_OP}.\n \n @findex ASM_WEAKEN_LABEL\n @item ASM_WEAKEN_LABEL (@var{stream}, @var{name})"}, {"sha": "cf692d653ee2bfc35c929c2dfc48269c34da855b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -122,7 +122,7 @@ default_eh_frame_section ()\n \n   data_section ();\n   ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n-  ASM_GLOBALIZE_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n+  (*targetm.asm_out.globalize_label) (asm_out_file, IDENTIFIER_POINTER (label));\n   ASM_OUTPUT_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n #endif\n }\n@@ -6122,7 +6122,7 @@ output_die_symbol (die)\n     /* We make these global, not weak; if the target doesn't support\n        .linkonce, it doesn't support combining the sections, so debugging\n        will break.  */\n-    ASM_GLOBALIZE_LABEL (asm_out_file, sym);\n+    (*targetm.asm_out.globalize_label) (asm_out_file, sym);\n \n   ASM_OUTPUT_LABEL (asm_out_file, sym);\n }"}, {"sha": "9d2c42632b575a23503f2608c6d4769687e016c7", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -1965,7 +1965,7 @@ output_alternate_entry_point (file, insn)\n       ASM_WEAKEN_LABEL (file, name);\n #endif\n     case LABEL_GLOBAL_ENTRY:\n-      ASM_GLOBALIZE_LABEL (file, name);\n+      (*targetm.asm_out.globalize_label) (file, name);\n     case LABEL_STATIC_ENTRY:\n #ifdef ASM_OUTPUT_TYPE_DIRECTIVE\n       ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");"}, {"sha": "0eb0e149ec6bd4ba2ed856de3bcdbb5bfaf7418d", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -54,3 +54,11 @@ hook_tree_int_void (a, b)\n      int b ATTRIBUTE_UNUSED;\n {\n }\n+\n+/* Generic hook that takes (FILE *, const char *) and does nothing.  */\n+void\n+hook_FILEptr_constcharptr_void (a, b)\n+     FILE *a ATTRIBUTE_UNUSED;\n+     const char *b ATTRIBUTE_UNUSED;\n+{\n+}"}, {"sha": "4b80c321ef8ee1c1f4a679073cf541ac2ff6261c", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -26,5 +26,6 @@ bool hook_void_bool_false PARAMS ((void));\n bool hook_tree_bool_false PARAMS ((tree));\n void hook_tree_int_void PARAMS ((tree, int));\n void hook_void_void PARAMS ((void));\n+void hook_FILEptr_constcharptr_void PARAMS ((FILE *, const char *));\n \n #endif"}, {"sha": "fadf5f8e6dced6b6e7ed462d78f6a1fb43776883", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -306,9 +306,6 @@ extern void assemble_string\t\tPARAMS ((const char *, int));\n extern void assemble_external_libcall\tPARAMS ((rtx));\n #endif\n \n-/* Declare the label NAME global.  */\n-extern void assemble_global\t\tPARAMS ((const char *));\n-\n /* Assemble a label named NAME.  */\n extern void assemble_label\t\tPARAMS ((const char *));\n extern void assemble_eh_label\t\tPARAMS ((const char *));\n@@ -540,6 +537,7 @@ extern void default_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t    unsigned HOST_WIDE_INT));\n extern const char *default_strip_name_encoding PARAMS ((const char *));\n extern bool default_binds_local_p PARAMS ((tree));\n+extern void default_globalize_label PARAMS ((FILE *, const char *));\n \n /* Emit data for vtable gc for GNU binutils.  */\n extern void assemble_vtable_entry PARAMS ((struct rtx_def *, HOST_WIDE_INT));"}, {"sha": "0a77c8fc1b3f57c6a4f1a6db296b75632942d888", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -604,7 +604,7 @@ typedef char _Bool;\n \tMD_INIT_BUILTINS MD_EXPAND_BUILTIN ASM_OUTPUT_CONSTRUCTOR\t\\\n \tASM_OUTPUT_DESTRUCTOR SIGNED_CHAR_SPEC MAX_CHAR_TYPE_SIZE\t\\\n \tWCHAR_UNSIGNED UNIQUE_SECTION SELECT_SECTION SELECT_RTX_SECTION\t\\\n-\tENCODE_SECTION_INFO STRIP_NAME_ENCODING\n+\tENCODE_SECTION_INFO STRIP_NAME_ENCODING ASM_GLOBALIZE_LABEL\n \n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "b2bf07479bdaf91fd1d937801a9089ce25a4cd5c", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -54,6 +54,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #define TARGET_ASM_INTEGER default_assemble_integer\n \n+#ifndef TARGET_ASM_GLOBALIZE_LABEL\n+#define TARGET_ASM_GLOBALIZE_LABEL default_globalize_label\n+#endif\n+\n #define TARGET_ASM_FUNCTION_PROLOGUE default_function_pro_epilogue\n #define TARGET_ASM_FUNCTION_EPILOGUE default_function_pro_epilogue\n #define TARGET_ASM_FUNCTION_END_PROLOGUE no_asm_to_stream\n@@ -140,6 +144,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \t\t\tTARGET_ASM_ALIGNED_INT_OP,\t\t\\\n \t\t\tTARGET_ASM_UNALIGNED_INT_OP,\t\t\\\n \t\t\tTARGET_ASM_INTEGER,\t\t\t\\\n+\t\t\tTARGET_ASM_GLOBALIZE_LABEL,\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_PROLOGUE,\t\t\\\n \t\t\tTARGET_ASM_FUNCTION_END_PROLOGUE,\t\\\n \t\t\tTARGET_ASM_FUNCTION_BEGIN_EPILOGUE,\t\\"}, {"sha": "b63fc0f59c8cf8406b74cd6570fbf02826ba5748", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -69,6 +69,9 @@ struct gcc_target\n        and UNALIGNED_OP are NULL.  */\n     bool (* integer) PARAMS ((rtx x, unsigned int size, int aligned_p));\n \n+    /* Output code that will globalize a label.  */\n+    void (* globalize_label) PARAMS ((FILE *, const char *));\n+\n     /* Output the assembler code for entry to a function.  */\n     void (* function_prologue) PARAMS ((FILE *, HOST_WIDE_INT));\n "}, {"sha": "b3ea8aa1c8523b8d64a89e40fd750252114cfcdc", "filename": "gcc/varasm.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb99654a2c06c5547396318e121deb995076802/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5eb99654a2c06c5547396318e121deb995076802", "patch": "@@ -506,7 +506,7 @@ asm_output_bss (file, decl, name, size, rounded)\n      const char *name;\n      int size ATTRIBUTE_UNUSED, rounded;\n {\n-  ASM_GLOBALIZE_LABEL (file, name);\n+  (*targetm.asm_out.globalize_label) (file, name);\n   bss_section ();\n #ifdef ASM_DECLARE_OBJECT_NAME\n   last_assemble_variable_decl = decl;\n@@ -534,7 +534,7 @@ asm_output_aligned_bss (file, decl, name, size, align)\n      const char *name;\n      int size, align;\n {\n-  ASM_GLOBALIZE_LABEL (file, name);\n+  (*targetm.asm_out.globalize_label) (file, name);\n   bss_section ();\n   ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n #ifdef ASM_DECLARE_OBJECT_NAME\n@@ -1754,15 +1754,6 @@ assemble_external_libcall (fun)\n #endif\n }\n \n-/* Declare the label NAME global.  */\n-\n-void\n-assemble_global (name)\n-     const char *name ATTRIBUTE_UNUSED;\n-{\n-  ASM_GLOBALIZE_LABEL (asm_out_file, name);\n-}\n-\n /* Assemble a label named NAME.  */\n \n void\n@@ -4548,7 +4539,7 @@ globalize_decl (decl)\n     }\n #endif\n \n-  ASM_GLOBALIZE_LABEL (asm_out_file, name);\n+  (*targetm.asm_out.globalize_label) (asm_out_file, name);\n }\n \n /* Emit an assembler directive to make the symbol for DECL an alias to\n@@ -5249,4 +5240,19 @@ default_binds_local_p (exp)\n   return local_p;\n }\n \n+/* Default function to output code that will globalize a label.  A\n+   target must define GLOBAL_ASM_OP or provide it's own function to\n+   globalize a label.  */\n+#ifdef GLOBAL_ASM_OP\n+void\n+default_globalize_label (stream, name)\n+     FILE * stream;\n+     const char *name;\n+{\n+  fputs (GLOBAL_ASM_OP, stream);\n+  assemble_name (stream, name);\n+  putc ('\\n', stream);\n+}\n+#endif /* GLOBAL_ASM_OP */\n+  \n #include \"gt-varasm.h\""}]}