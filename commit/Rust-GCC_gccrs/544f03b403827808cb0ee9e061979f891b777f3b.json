{"sha": "544f03b403827808cb0ee9e061979f891b777f3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ0ZjAzYjQwMzgyNzgwOGNiMGVlOWUwNjE5NzlmODkxYjc3N2YzYg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-07-22T21:33:57Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-22T21:33:57Z"}, "message": "varasm.c: Don't inlcude dbxout.h, sdbout.h or xcoffout.h.\n\n\t* varasm.c: Don't inlcude dbxout.h, sdbout.h or xcoffout.h.\n\t(asm_out_file): Remove redundant declaration.\n\t(assemble_asm): Remove old #if 0 block.\n\t(assemble_variable): Remove end of function; debug output is\n\tnow handled with global_decl.  Remove old #if 0 block.  Update.\n\tRemove saved_in_section and associated no-op code.\n\t* Makefile.in (varasm.o): Correct dependencies.\n\nFrom-SVN: r44248", "tree": {"sha": "702f4a6118a71586642e01b0c6acbc020c438243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/702f4a6118a71586642e01b0c6acbc020c438243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/544f03b403827808cb0ee9e061979f891b777f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544f03b403827808cb0ee9e061979f891b777f3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544f03b403827808cb0ee9e061979f891b777f3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544f03b403827808cb0ee9e061979f891b777f3b/comments", "author": null, "committer": null, "parents": [{"sha": "bad1f214eb0ef96ceaf055f034fe3b3fcef15283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad1f214eb0ef96ceaf055f034fe3b3fcef15283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad1f214eb0ef96ceaf055f034fe3b3fcef15283"}], "stats": {"total": 88, "additions": 14, "deletions": 74}, "files": [{"sha": "29f9d564e6d766d80ba95a5cbbfec391f9d104af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544f03b403827808cb0ee9e061979f891b777f3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544f03b403827808cb0ee9e061979f891b777f3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=544f03b403827808cb0ee9e061979f891b777f3b", "patch": "@@ -1,3 +1,13 @@\n+2001-07-22  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* varasm.c: Don't inlcude dbxout.h, sdbout.h or xcoffout.h.\n+\t(asm_out_file): Remove redundant declaration.\n+\t(assemble_asm): Remove old #if 0 block.\n+\t(assemble_variable): Remove end of function; debug output is\n+\tnow handled with global_decl.  Remove old #if 0 block.  Update.\n+\tRemove saved_in_section and associated no-op code.\n+\t* Makefile.in (varasm.o): Correct dependencies.\n+\n Sun Jul 22 17:55:11 2001  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/i386/freebsd-aout.h (ASM_PREFERRED_EH_DATA_FORMAT): Use"}, {"sha": "380e1cd676725c72083b00829a8158d4438ebf6a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544f03b403827808cb0ee9e061979f891b777f3b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544f03b403827808cb0ee9e061979f891b777f3b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=544f03b403827808cb0ee9e061979f891b777f3b", "patch": "@@ -1361,8 +1361,8 @@ errors.o : errors.c $(GCONFIG_H) $(SYSTEM_H) errors.h\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h \\\n-   function.h $(EXPR_H) hard-reg-set.h $(REGS_H) \\\n-   xcoffout.h output.h c-pragma.h toplev.h dbxout.h sdbout.h $(GGC_H) $(TM_P_H)\n+   function.h $(EXPR_H) hard-reg-set.h $(REGS_H) $(OBSTACK_H) \\\n+   output.h c-pragma.h toplev.h debug.h $(GGC_H) $(TM_P_H) $(HASHTAB_H)\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(EXPR_H) $(REGS_H) hard-reg-set.h \\\n    insn-config.h $(RECOG_H) output.h toplev.h except.h hash.h $(GGC_H) $(TM_P_H)"}, {"sha": "52a0268cf2318fb7f7f582a39b87110e52299377", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 72, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544f03b403827808cb0ee9e061979f891b777f3b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544f03b403827808cb0ee9e061979f891b777f3b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=544f03b403827808cb0ee9e061979f891b777f3b", "patch": "@@ -40,19 +40,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"real.h\"\n #include \"toplev.h\"\n-#include \"dbxout.h\"\n-#include \"sdbout.h\"\n #include \"obstack.h\"\n #include \"hashtab.h\"\n #include \"c-pragma.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"debug.h\"\n \n-#ifdef XCOFF_DEBUGGING_INFO\n-#include \"xcoffout.h\"\n-#endif\n-\n #ifndef TRAMPOLINE_ALIGNMENT\n #define TRAMPOLINE_ALIGNMENT FUNCTION_BOUNDARY\n #endif\n@@ -65,10 +59,6 @@ Boston, MA 02111-1307, USA.  */\n #define CHKR_PREFIX \"_CHKR_\"\n #define CHKR_PREFIX_SIZE (sizeof (CHKR_PREFIX) - 1)\n \n-/* File in which assembler code is being written.  */\n-\n-extern FILE *asm_out_file;\n-\n /* The (assembler) name of the first globally-visible object output.  */\n const char *first_global_object_name;\n const char *weak_global_object_name;\n@@ -807,20 +797,6 @@ assemble_asm (string)\n   fprintf (asm_out_file, \"\\t%s\\n\", TREE_STRING_POINTER (string));\n }\n \n-#if 0 /* This should no longer be needed, because\n-\t flag_gnu_linker should be 0 on these systems,\n-\t which should prevent any output\n-\t if ASM_OUTPUT_CONSTRUCTOR and ASM_OUTPUT_DESTRUCTOR are absent.  */\n-#if !(defined(DBX_DEBUGGING_INFO) && !defined(FASCIST_ASSEMBLER))\n-#ifndef ASM_OUTPUT_CONSTRUCTOR\n-#define ASM_OUTPUT_CONSTRUCTOR(file, name)\n-#endif\n-#ifndef ASM_OUTPUT_DESTRUCTOR\n-#define ASM_OUTPUT_DESTRUCTOR(file, name)\n-#endif\n-#endif\n-#endif /* 0 */\n-\n /* Record an element in the table of global destructors.\n    How this is done depends on what sort of assembler and linker\n    are in use.\n@@ -1228,7 +1204,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   register const char *name;\n   unsigned int align;\n   int reloc = 0;\n-  enum in_section saved_in_section;\n \n   last_assemble_variable_decl = 0;\n \n@@ -1291,7 +1266,7 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n       && ! host_integerp (DECL_SIZE_UNIT (decl), 1))\n     {\n       error_with_decl (decl, \"size of variable `%s' is too large\");\n-      goto finish;\n+      return;\n     }\n \n   name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n@@ -1380,14 +1355,9 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n            (decl, \"requested alignment for %s is greater than implemented alignment of %d.\",rounded);\n #endif\n        \n-#if 0 /* ??? We should either delete this or add a comment describing what\n-\t it was intended to do and why we shouldn't delete it.  */\n-      if (flag_shared_data)\n-\tdata_section ();\n-#endif\n       asm_emit_uninitialised (decl, name, size, rounded);\n \n-      goto finish;\n+      return;\n     }\n \n   /* Handle initialized definitions.\n@@ -1410,15 +1380,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n #endif\n       ASM_GLOBALIZE_LABEL (asm_out_file, name);\n     }\n-#if 0\n-  for (d = equivalents; d; d = TREE_CHAIN (d))\n-    {\n-      tree e = TREE_VALUE (d);\n-      if (TREE_PUBLIC (e) && DECL_NAME (e))\n-\tASM_GLOBALIZE_LABEL (asm_out_file,\n-\t\t\t     XSTR (XEXP (DECL_RTL (e), 0), 0));\n-    }\n-#endif\n \n   /* Output any data that we will need to use the address of.  */\n   if (DECL_INITIAL (decl) == error_mark_node)\n@@ -1439,14 +1400,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   if (in_text_section ())\n     DECL_IN_TEXT_SECTION (decl) = 1;\n \n-  /* Record current section so we can restore it if dbxout.c clobbers it.  */\n-  saved_in_section = in_section;\n-\n-  /* If the debugging output changed sections, reselect the section\n-     that's supposed to be selected.  */\n-  if (in_section != saved_in_section)\n-    variable_section (decl, reloc);\n-\n   /* Output the alignment of this data.  */\n   if (align > BITS_PER_UNIT)\n     ASM_OUTPUT_ALIGN (asm_out_file,\n@@ -1471,29 +1424,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \t/* Leave space for it.  */\n \tassemble_zeros (tree_low_cst (DECL_SIZE_UNIT (decl), 1));\n     }\n-\n- finish:\n-#ifdef XCOFF_DEBUGGING_INFO\n-  /* Unfortunately, the IBM assembler cannot handle stabx before the actual\n-     declaration.  When something like \".stabx  \"aa:S-2\",aa,133,0\" is emitted \n-     and `aa' hasn't been output yet, the assembler generates a stab entry with\n-     a value of zero, in addition to creating an unnecessary external entry\n-     for `aa'.  Hence, we must postpone dbxout_symbol to here at the end.  */\n-\n-  /* File-scope global variables are output here.  */\n-  if (write_symbols == XCOFF_DEBUG && top_level)\n-    {\n-      saved_in_section = in_section;\n-\n-      dbxout_symbol (decl, 0);\n-\n-      if (in_section != saved_in_section)\n-\tvariable_section (decl, reloc);\n-    }\n-#else\n-  /* There must be a statement after a label.  */\n-  ;\n-#endif\n }\n \n /* Return 1 if type TYPE contains any pointers.  */"}]}