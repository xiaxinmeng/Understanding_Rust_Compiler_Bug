{"sha": "ad6fdc197621e1f48d72df91f021c187949ba6c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ2ZmRjMTk3NjIxZTFmNDhkNzJkZjkxZjAyMWMxODc5NDliYTZjMg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-03-18T10:15:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-03-18T10:15:56Z"}, "message": "PR libstdc++/55977 (partial, std::vector and std::deque bits)\n\n2013-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/55977 (partial, std::vector and std::deque bits)\n\t* include/bits/stl_vector.h (_M_range_initialize(_InputIterator,\n\t_InputIterator, std::input_iterator_tag)): Use emplace_back.\n\t* include/bits/deque.tcc (_M_range_initialize(_InputIterator,\n\t_InputIterator, std::input_iterator_tag)): Likewise.\n\t* testsuite/23_containers/vector/cons/55977.cc: New.\n\t* testsuite/23_containers/deque/cons/55977.cc: Likewise.\n\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\nFrom-SVN: r196774", "tree": {"sha": "6fc41f02b4bc018516c1b4ae8f62d2fc9cab8d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fc41f02b4bc018516c1b4ae8f62d2fc9cab8d3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad6fdc197621e1f48d72df91f021c187949ba6c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6fdc197621e1f48d72df91f021c187949ba6c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad6fdc197621e1f48d72df91f021c187949ba6c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad6fdc197621e1f48d72df91f021c187949ba6c2/comments", "author": null, "committer": null, "parents": [{"sha": "9fa5223135cf837e920329b2aee6f87f9515d231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa5223135cf837e920329b2aee6f87f9515d231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa5223135cf837e920329b2aee6f87f9515d231"}], "stats": {"total": 156, "additions": 154, "deletions": 2}, "files": [{"sha": "81426dc2a895ed7d3109c6db22fb89aff81c4f9b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ad6fdc197621e1f48d72df91f021c187949ba6c2", "patch": "@@ -1,3 +1,17 @@\n+2013-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/55977 (partial, std::vector and std::deque bits)\n+\t* include/bits/stl_vector.h (_M_range_initialize(_InputIterator,\n+\t_InputIterator, std::input_iterator_tag)): Use emplace_back.\n+\t* include/bits/deque.tcc (_M_range_initialize(_InputIterator,\n+\t_InputIterator, std::input_iterator_tag)): Likewise.\n+\t* testsuite/23_containers/vector/cons/55977.cc: New.\n+\t* testsuite/23_containers/deque/cons/55977.cc: Likewise.\n+\t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\n 2013-03-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/55979"}, {"sha": "89c5ef76ba65b6a099f7727218c9130991e92988", "filename": "libstdc++-v3/include/bits/deque.tcc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fdeque.tcc?ref=ad6fdc197621e1f48d72df91f021c187949ba6c2", "patch": "@@ -381,7 +381,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         __try\n           {\n             for (; __first != __last; ++__first)\n+#if __cplusplus >= 201103L\n+\t      emplace_back(*__first);\n+#else\n               push_back(*__first);\n+#endif\n           }\n         __catch(...)\n           {"}, {"sha": "69c6e278c067dfbeb7b68cac814f7fecab6b0d11", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=ad6fdc197621e1f48d72df91f021c187949ba6c2", "patch": "@@ -1184,7 +1184,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t    _InputIterator __last, std::input_iterator_tag)\n         {\n \t  for (; __first != __last; ++__first)\n+#if __cplusplus >= 201103L\n+\t    emplace_back(*__first);\n+#else\n \t    push_back(*__first);\n+#endif\n \t}\n \n       // Called by the second initialize_dispatch above"}, {"sha": "ef2d7c01c8d74670ae23baefdc045b5c1357a640", "filename": "libstdc++-v3/testsuite/23_containers/deque/cons/55977.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F55977.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F55977.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fcons%2F55977.cc?ref=ad6fdc197621e1f48d72df91f021c187949ba6c2", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <utility>\n+#include <deque>\n+#include <iterator>\n+\n+template <class T>\n+struct MyAllocator\n+{\n+  std::allocator<T> base;\n+  typedef T         value_type;\n+\n+  // FIXME: these types shouldn't be required.\n+  typedef T*        pointer;\n+  typedef const T*  const_pointer;\n+  typedef T&        reference;\n+  typedef const T&  const_reference;\n+  template <typename U>\n+    struct rebind\n+    { typedef MyAllocator<U> other; };\n+\n+  MyAllocator() = default;\n+  template <class U>\n+  MyAllocator(const MyAllocator<U>& other) : base(other.base) {}\n+  T* allocate(std::size_t n) { return base.allocate(n); }\n+  void deallocate(T* p, std::size_t n) { return base.deallocate(p, n); }\n+  template <class U, class... Args>\n+  void construct(U* p, Args&&... args)\n+  {\n+    ::new (static_cast<void*>(p)) U(std::forward<Args>(args)...);\n+  }\n+};\n+\n+struct A\n+{\n+private:\n+  friend class MyAllocator<A>;\n+  A(int value) : value(value) {}\n+  int value;\n+public:\n+  A() : value() {}\n+  int get() const { return value; }\n+};\n+\n+void foo()\n+{\n+  std::deque<A, MyAllocator<A>> v1;\n+  const int i = 1;\n+  v1.emplace_back(i); // OK\n+  std::deque<A, MyAllocator<A>> v2(std::istream_iterator<int>(), {}); // ERROR\n+}"}, {"sha": "295d6b1d9421fb9f5d5646f6ec2c9c6b9e5daa46", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/55977.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F55977.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F55977.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F55977.cc?ref=ad6fdc197621e1f48d72df91f021c187949ba6c2", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <utility>\n+#include <vector>\n+#include <iterator>\n+\n+template <class T>\n+struct MyAllocator\n+{\n+  std::allocator<T> base;\n+  typedef T value_type;\n+  MyAllocator() = default;\n+  template <class U>\n+  MyAllocator(const MyAllocator<U>& other) : base(other.base) {}\n+  T* allocate(std::size_t n) { return base.allocate(n); }\n+  void deallocate(T* p, std::size_t n) { return base.deallocate(p, n); }\n+  template <class U, class... Args>\n+  void construct(U* p, Args&&... args)\n+  {\n+    ::new (static_cast<void*>(p)) U(std::forward<Args>(args)...);\n+  }\n+};\n+\n+struct A\n+{\n+private:\n+  friend class MyAllocator<A>;\n+  A(int value) : value(value) {}\n+  int value;\n+public:\n+  A() : value() {}\n+  int get() const { return value; }\n+};\n+\n+void foo()\n+{\n+  std::vector<A, MyAllocator<A>> v1;\n+  const int i = 1;\n+  v1.emplace_back(i); // OK\n+  std::vector<A, MyAllocator<A>> v2(std::istream_iterator<int>(), {}); // ERROR\n+}"}, {"sha": "64e46658bb8f55ea5a838963bc4ecb089ef7d1fa", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=ad6fdc197621e1f48d72df91f021c187949ba6c2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1236 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1240 }\n \n #include <vector>\n "}, {"sha": "a8d98cb8092fc52d5287b39ef253a4cc9911a065", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad6fdc197621e1f48d72df91f021c187949ba6c2/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=ad6fdc197621e1f48d72df91f021c187949ba6c2", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1277 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1281 }\n \n #include <vector>\n "}]}