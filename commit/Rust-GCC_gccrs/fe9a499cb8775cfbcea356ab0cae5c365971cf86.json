{"sha": "fe9a499cb8775cfbcea356ab0cae5c365971cf86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5YTQ5OWNiODc3NWNmYmNlYTM1NmFiMGNhZTVjMzY1OTcxY2Y4Ng==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-05-19T16:27:47Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-05-26T19:31:12Z"}, "message": "Convert Walloca pass to get_range_query.\n\nThis patch converts the Walloca pass to use an on-demand ranger\naccesible with get_range_query instead of having to create a ranger and pass\nit around.\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-warn-alloca.c (alloca_call_type): Use\n\t  get_range_query instead of query argument.\n\t(pass_walloca::execute): Enable and disable global ranger.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wstringop-overflow-55.c: Adapt for range query changes.\n\t* gcc.dg/pr80776-1.c: Same.", "tree": {"sha": "9a73184f03c93153627755df93d96e8eb114d2ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a73184f03c93153627755df93d96e8eb114d2ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe9a499cb8775cfbcea356ab0cae5c365971cf86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9a499cb8775cfbcea356ab0cae5c365971cf86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe9a499cb8775cfbcea356ab0cae5c365971cf86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9a499cb8775cfbcea356ab0cae5c365971cf86/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57bf375151111ba880e6060708c8b18a682f5b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bf375151111ba880e6060708c8b18a682f5b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57bf375151111ba880e6060708c8b18a682f5b20"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "72480f1d8cb41f5705759117a449c5bbb47f1ea9", "filename": "gcc/gimple-ssa-warn-alloca.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9a499cb8775cfbcea356ab0cae5c365971cf86/gcc%2Fgimple-ssa-warn-alloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9a499cb8775cfbcea356ab0cae5c365971cf86/gcc%2Fgimple-ssa-warn-alloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-alloca.c?ref=fe9a499cb8775cfbcea356ab0cae5c365971cf86", "patch": "@@ -165,7 +165,7 @@ adjusted_warn_limit (bool idx)\n // call was created by the gimplifier for a VLA.\n \n static class alloca_type_and_limit\n-alloca_call_type (range_query &query, gimple *stmt, bool is_vla)\n+alloca_call_type (gimple *stmt, bool is_vla)\n {\n   gcc_assert (gimple_alloca_call_p (stmt));\n   tree len = gimple_call_arg (stmt, 0);\n@@ -217,7 +217,7 @@ alloca_call_type (range_query &query, gimple *stmt, bool is_vla)\n   int_range_max r;\n   if (warn_limit_specified_p (is_vla)\n       && TREE_CODE (len) == SSA_NAME\n-      && query.range_of_expr (r, len, stmt)\n+      && get_range_query (cfun)->range_of_expr (r, len, stmt)\n       && !r.varying_p ())\n     {\n       // The invalid bits are anything outside of [0, MAX_SIZE].\n@@ -256,7 +256,7 @@ in_loop_p (gimple *stmt)\n unsigned int\n pass_walloca::execute (function *fun)\n {\n-  gimple_ranger ranger;\n+  gimple_ranger *ranger = enable_ranger (fun);\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, fun)\n     {\n@@ -290,7 +290,7 @@ pass_walloca::execute (function *fun)\n \t    continue;\n \n \t  class alloca_type_and_limit t\n-\t    = alloca_call_type (ranger, stmt, is_vla);\n+\t    = alloca_call_type (stmt, is_vla);\n \n \t  unsigned HOST_WIDE_INT adjusted_alloca_limit\n \t    = adjusted_warn_limit (false);\n@@ -383,6 +383,8 @@ pass_walloca::execute (function *fun)\n \t    }\n \t}\n     }\n+  ranger->export_global_ranges ();\n+  disable_ranger (fun);\n   return 0;\n }\n "}, {"sha": "8df5cb629aee52ed2be24ca1fa038e05079d42c8", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-55.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9a499cb8775cfbcea356ab0cae5c365971cf86/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9a499cb8775cfbcea356ab0cae5c365971cf86/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-55.c?ref=fe9a499cb8775cfbcea356ab0cae5c365971cf86", "patch": "@@ -66,15 +66,15 @@ void warn_ptrdiff_anti_range_add (ptrdiff_t i)\n {\n   i |= 1;\n \n-  char ca5[5];              // { dg-message \"at offset \\\\\\[1, 5]\" \"pr?????\" { xfail *-*-* } }\n+  char ca5[5];              // { dg-message \"at offset \\\\\\[1, 5]\" \"pr?????\" }\n   char *p0 = ca5;           // offset\n   char *p1 = p0 + i;        //  1-5\n   char *p2 = p1 + i;        //  2-5\n   char *p3 = p2 + i;        //  3-5\n   char *p4 = p3 + i;        //  4-5\n   char *p5 = p4 + i;        //   5\n \n-  memset (p5, 0, 5);        // { dg-warning \"writing 5 bytes into a region of size 0\" \"pr?????\" { xfail *-*-* } }\n+  memset (p5, 0, 5);        // { dg-warning \"writing 5 bytes into a region of size\" \"pr?????\" }\n \n   sink (p0, p1, p2, p3, p4, p5);\n }\n@@ -83,15 +83,15 @@ void warn_int_anti_range (int i)\n {\n   i |= 1;\n \n-  char ca5[5];              // { dg-message \"at offset \\\\\\[1, 5]\" \"pr?????\" { xfail *-*-* } }\n+  char ca5[5];              // { dg-message \"at offset \\\\\\[1, 5]\" \"pr?????\" }\n   char *p0 = ca5;           // offset\n   char *p1 = p0 + i;        //  1-5\n   char *p2 = p1 + i;        //  2-5\n   char *p3 = p2 + i;        //  3-5\n   char *p4 = p3 + i;        //  4-5\n   char *p5 = p4 + i;        //   5\n \n-  memset (p5, 0, 5);        // { dg-warning \"writing 5 bytes into a region of size 0\" \"pr?????\" { xfail *-*-* } }\n+  memset (p5, 0, 5);        // { dg-warning \"writing 5 bytes into a region of size\" \"pr?????\" }\n \n   sink (p0, p1, p2, p3, p4, p5);\n }"}, {"sha": "f3a120b67443a9e2cd3ebba5972736928bbeef5f", "filename": "gcc/testsuite/gcc.dg/pr80776-1.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9a499cb8775cfbcea356ab0cae5c365971cf86/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9a499cb8775cfbcea356ab0cae5c365971cf86/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80776-1.c?ref=fe9a499cb8775cfbcea356ab0cae5c365971cf86", "patch": "@@ -17,7 +17,5 @@ Foo (void)\n     __builtin_unreachable ();\n   if (! (0 <= i && i <= 999999))\n     __builtin_unreachable ();\n-  /* The correctness bits for [E]VRP cannot handle chained conditionals\n-     when deciding to ignore a unreachable branch for setting SSA range info. */\n-  sprintf (number, \"%d\", i); /* { dg-bogus \"writing\" \"\" { xfail *-*-* } } */\n+  sprintf (number, \"%d\", i); /* { dg-bogus \"writing\" \"\" } */\n }"}]}