{"sha": "d42ba2d233d03acd37c7d2c905e0947cc52bec49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQyYmEyZDIzM2QwM2FjZDM3YzdkMmM5MDVlMDk0N2NjNTJiZWM0OQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-11T20:22:12Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-11T20:22:12Z"}, "message": "Insert new exit block only when needed in transform_to_exit_first_loop_alt\n\n2015-11-11  Tom de Vries  <tom@codesourcery.com>\n\n\t* tree-parloops.c (transform_to_exit_first_loop_alt): Insert new exit\n\tblock only when needed.\n\nFrom-SVN: r230188", "tree": {"sha": "685611799a340786286ee3e625b08ba9bc7b6a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/685611799a340786286ee3e625b08ba9bc7b6a3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d42ba2d233d03acd37c7d2c905e0947cc52bec49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42ba2d233d03acd37c7d2c905e0947cc52bec49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d42ba2d233d03acd37c7d2c905e0947cc52bec49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42ba2d233d03acd37c7d2c905e0947cc52bec49/comments", "author": null, "committer": null, "parents": [{"sha": "c5bd8d521a810aea68cd831bcc2964dfb24b7d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5bd8d521a810aea68cd831bcc2964dfb24b7d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5bd8d521a810aea68cd831bcc2964dfb24b7d1d"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "8d6833017f5fcb08fb21c0217a52c77fe09901fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42ba2d233d03acd37c7d2c905e0947cc52bec49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42ba2d233d03acd37c7d2c905e0947cc52bec49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d42ba2d233d03acd37c7d2c905e0947cc52bec49", "patch": "@@ -1,3 +1,8 @@\n+2015-11-11  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* tree-parloops.c (transform_to_exit_first_loop_alt): Insert new exit\n+\tblock only when needed.\n+\n 2015-11-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha-protos.h (print_operand): Remove."}, {"sha": "6a49aa9688da718b3a29f516f8f9ff8d9b106862", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42ba2d233d03acd37c7d2c905e0947cc52bec49/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42ba2d233d03acd37c7d2c905e0947cc52bec49/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=d42ba2d233d03acd37c7d2c905e0947cc52bec49", "patch": "@@ -1695,36 +1695,50 @@ transform_to_exit_first_loop_alt (struct loop *loop,\n   /* Set the latch arguments of the new phis to ivtmp/sum_b.  */\n   flush_pending_stmts (post_inc_edge);\n \n-  /* Create a new empty exit block, inbetween the new loop header and the old\n-     exit block.  The function separate_decls_in_region needs this block to\n-     insert code that is active on loop exit, but not any other path.  */\n-  basic_block new_exit_block = split_edge (exit);\n+\n+  basic_block new_exit_block = NULL;\n+  if (!single_pred_p (exit->dest))\n+    {\n+      /* Create a new empty exit block, inbetween the new loop header and the\n+\t old exit block.  The function separate_decls_in_region needs this block\n+\t to insert code that is active on loop exit, but not any other path.  */\n+      new_exit_block = split_edge (exit);\n+    }\n \n   /* Insert and register the reduction exit phis.  */\n   for (gphi_iterator gsi = gsi_start_phis (exit_block);\n        !gsi_end_p (gsi);\n        gsi_next (&gsi))\n     {\n       gphi *phi = gsi.phi ();\n+      gphi *nphi = NULL;\n       tree res_z = PHI_RESULT (phi);\n+      tree res_c;\n \n-      /* Now that we have a new exit block, duplicate the phi of the old exit\n-\t block in the new exit block to preserve loop-closed ssa.  */\n-      edge succ_new_exit_block = single_succ_edge (new_exit_block);\n-      edge pred_new_exit_block = single_pred_edge (new_exit_block);\n-      tree res_y = copy_ssa_name (res_z, phi);\n-      gphi *nphi = create_phi_node (res_y, new_exit_block);\n-      tree res_c = PHI_ARG_DEF_FROM_EDGE (phi, succ_new_exit_block);\n-      add_phi_arg (nphi, res_c, pred_new_exit_block, UNKNOWN_LOCATION);\n-      add_phi_arg (phi, res_y, succ_new_exit_block, UNKNOWN_LOCATION);\n+      if (new_exit_block != NULL)\n+\t{\n+\t  /* Now that we have a new exit block, duplicate the phi of the old\n+\t     exit block in the new exit block to preserve loop-closed ssa.  */\n+\t  edge succ_new_exit_block = single_succ_edge (new_exit_block);\n+\t  edge pred_new_exit_block = single_pred_edge (new_exit_block);\n+\t  tree res_y = copy_ssa_name (res_z, phi);\n+\t  nphi = create_phi_node (res_y, new_exit_block);\n+\t  res_c = PHI_ARG_DEF_FROM_EDGE (phi, succ_new_exit_block);\n+\t  add_phi_arg (nphi, res_c, pred_new_exit_block, UNKNOWN_LOCATION);\n+\t  add_phi_arg (phi, res_y, succ_new_exit_block, UNKNOWN_LOCATION);\n+\t}\n+      else\n+\tres_c = PHI_ARG_DEF_FROM_EDGE (phi, exit);\n \n       if (virtual_operand_p (res_z))\n \tcontinue;\n \n       gimple *reduc_phi = SSA_NAME_DEF_STMT (res_c);\n       struct reduction_info *red = reduction_phi (reduction_list, reduc_phi);\n       if (red != NULL)\n-\tred->keep_res = nphi;\n+\tred->keep_res = (nphi != NULL\n+\t\t\t ? nphi\n+\t\t\t : phi);\n     }\n \n   /* We're going to cancel the loop at the end of gen_parallel_loop, but until"}]}