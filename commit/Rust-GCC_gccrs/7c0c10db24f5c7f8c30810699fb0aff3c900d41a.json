{"sha": "7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "node_id": "C_kwDOANBUbNoAKDdjMGMxMGRiMjRmNWM3ZjhjMzA4MTA2OTlmYjBhZmYzYzkwMGQ0MWE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-20T00:16:34Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-20T00:16:34Z"}, "message": "Daily bump.", "tree": {"sha": "52a921569410247aca9ba1ae386b94eaa95d6efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52a921569410247aca9ba1ae386b94eaa95d6efa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/comments", "author": null, "committer": null, "parents": [{"sha": "dbb093f4f15ea66f2ce5cd2dc1903a6894563356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbb093f4f15ea66f2ce5cd2dc1903a6894563356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbb093f4f15ea66f2ce5cd2dc1903a6894563356"}], "stats": {"total": 211, "additions": 210, "deletions": 1}, "files": [{"sha": "4842de2d052dadb386c7fbf7fbdbade29a04e0e7", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "patch": "@@ -1,3 +1,7 @@\n+2022-07-19  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* .gitignore: Do not ignore config.h.\n+\n 2022-07-15  Andrew Carlotti  <andrew.carlotti@arm.com>\n \n \t* MAINTAINERS: Add myself to Write After Approval."}, {"sha": "f6b565019dc6d89ae9155182e645ad11828aa876", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "patch": "@@ -1,3 +1,69 @@\n+2022-07-19  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::range_from_dom): Check\n+\t  for incoming ranges on join nodes and add to worklist.\n+\n+2022-07-19  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::resolve_dom): New.\n+\t(ranger_cache::range_from_dom): Put all nodes to be calculated\n+\tin the worklist and resolve after the dom walk.\n+\t* gimple-range-cache.h (resolve_dom): New prototype.\n+\n+2022-07-19  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* tree-cfg.cc (gimple_verify_flow_info): Check placement of\n+\treturns_twice calls.\n+\n+2022-07-19  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* cfghooks.cc (duplicate_block): Expand comment.\n+\t* tree-cfg.cc (gimple_can_duplicate_bb_p): Reject blocks with\n+\tcalls that may return twice.\n+\n+2022-07-19  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* tree-ssa-sink.cc (select_best_block): Punt if selected block\n+\thas incoming abnormal edges.\n+\n+2022-07-19  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/extend.texi: Remove trailing :.\n+\n+2022-07-19  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* tree-ssa-forwprop.cc (simplify_permutation): Use lhs type\n+\tinstead of TREE_TYPE (arg0) as result type in folding VEC_PERM_EXPR.\n+\n+2022-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106331\n+\t* builtins.cc (get_memory_rtx): Compute alignment from\n+\tthe original address and set MEM_OFFSET to unknown when\n+\twe create a MEM_EXPR from the base object of the address.\n+\n+2022-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/106334\n+\t* dwarf2out.cc (dwarf2out_register_external_die): Allow\n+\tmap entry re-use during WPA.\n+\n+2022-07-19  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/106264\n+\t* builtins.cc (fold_builtin_frexp): Call suppress_warning on\n+\tCOMPOUND_EXPR to silence spurious warning if result isn't used.\n+\t(fold_builtin_modf): Likewise.\n+\t(do_mpfr_remquo): Likewise.\n+\n+2022-07-19  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.cc (xtensa_rtx_costs):\n+\tChange the relative cost of '(set (reg) (const_int N))' where\n+\tN fits into signed 12-bit from 4 to 0 if optimizing for size.\n+\tAnd use the appropriate macro instead of the bare number 4.\n+\n 2022-07-18  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/106280"}, {"sha": "964c55ac941139b90cbb12a54d4e13d28840d357", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "patch": "@@ -1 +1 @@\n-20220719\n+20220720"}, {"sha": "884be1629bab95d3508f08f58d413523160f6db4", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "patch": "@@ -1,3 +1,26 @@\n+2022-07-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106321\n+\t* constraint-manager.h (bounded_ranges::get_count): New.\n+\t(bounded_ranges::get_range): New.\n+\t* engine.cc (impl_region_model_context::on_bounded_ranges): New.\n+\t* exploded-graph.h (impl_region_model_context::on_bounded_ranges):\n+\tNew decl.\n+\t* region-model.cc (region_model::apply_constraints_for_gswitch):\n+\tPotentially call ctxt->on_bounded_ranges.\n+\t* region-model.h (region_model_context::on_bounded_ranges): New\n+\tvfunc.\n+\t(noop_region_model_context::on_bounded_ranges): New.\n+\t(region_model_context_decorator::on_bounded_ranges): New.\n+\t* sm-taint.cc: Include \"analyzer/constraint-manager.h\".\n+\t(taint_state_machine::on_bounded_ranges): New.\n+\t* sm.h (state_machine::on_bounded_ranges): New.\n+\n+2022-07-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (exploded_graph::process_node): Show any description\n+\tof the out-edge when logging it for consideration.\n+\n 2022-07-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/106284"}, {"sha": "26649403e856daec7cc90b1b364e54531fa6a3bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "patch": "@@ -1,3 +1,26 @@\n+2022-07-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94894\n+\tPR c++/105766\n+\tPR c++/106201\n+\t* call.cc (enum conversion_kind): Add ck_deferred_bad enumerator.\n+\t(has_next): Return false for it.\n+\t(reference_binding): Return a ck_deferred_bad conversion instead\n+\tof an actual bad conversion when LOOKUP_SHORTCUT_BAD_CONVS is set.\n+\tRemove now obsolete early exit for the incomplete TO case.\n+\t(implicit_conversion_1): Don't mask out LOOKUP_SHORTCUT_BAD_CONVS.\n+\t(add_function_candidate): Set LOOKUP_SHORTCUT_BAD_CONVS iff\n+\tshortcut_bad_convs.\n+\t(missing_conversion_p): Also return true for a ck_deferred_bad\n+\tconversion.\n+\t* cp-tree.h (LOOKUP_SHORTCUT_BAD_CONVS): Define.\n+\n+2022-07-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* cp-objcp-common.cc (names_builtin_p): Return true for\n+\tRID_REF_CONSTRUCTS_FROM_TEMPORARY and\n+\tRID_REF_CONVERTS_FROM_TEMPORARY.\n+\n 2022-07-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/104477"}, {"sha": "929625898f02484af58591f8e92cf5ff80d0c95c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "patch": "@@ -1,3 +1,12 @@\n+2022-07-19  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103590\n+\t* resolve.cc (find_array_spec): Change function result to bool to\n+\tenable error recovery.  Generate error message for invalid array\n+\treference of non-array entity instead of an internal error.\n+\t(gfc_resolve_ref): Use function result from find_array_spec for\n+\terror recovery.\n+\n 2022-07-15  Steve Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/104313"}, {"sha": "d04b83cbfba82fef41ef0fe94a97349698e7d340", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "patch": "@@ -1,3 +1,38 @@\n+2022-07-19  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103590\n+\t* gfortran.dg/associate_54.f90: Adjust.\n+\t* gfortran.dg/associate_59.f90: New test.\n+\n+2022-07-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94894\n+\tPR c++/105766\n+\tPR c++/106201\n+\t* g++.dg/conversion/ref8.C: New test.\n+\t* g++.dg/conversion/ref9.C: New test.\n+\n+2022-07-19  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* gcc.dg/setjmp-7.c: New test.\n+\n+2022-07-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106321\n+\t* gcc.dg/analyzer/torture/taint-read-index-2.c: Add test coverage\n+\tfor switch statements.\n+\n+2022-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106331\n+\t* gfortran.dg/pr106331.f90: New testcase.\n+\n+2022-07-19  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Richard Biener  <rguenther@suse.de>\n+\n+\tPR c/106264\n+\t* gcc.dg/pr106264.c: New test case.\n+\n 2022-07-18  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ldist-24.c: XFAIL."}, {"sha": "25b9f51b04f0cf69da459e2b10bbc4c6f07995f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c0c10db24f5c7f8c30810699fb0aff3c900d41a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7c0c10db24f5c7f8c30810699fb0aff3c900d41a", "patch": "@@ -1,3 +1,52 @@\n+2022-07-19  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/debug.h [_GLIBCXX_DEBUG](__glibcxx_requires_string): Define\n+\tusing _GLIBCXX_DEBUG_PEDASSERT.\n+\t[_GLIBCXX_DEBUG](__glibcxx_requires_string_len): Likewise.\n+\t* include/debug/macros.h\n+\t(__glibcxx_check_string, __glibcxx_check_string_len): Move...\n+\t* include/debug/string\n+\t(__glibcxx_check_string, __glibcxx_check_string_len): ...here. And define depending\n+\ton _GLIBCXX_DEBUG_PEDANTIC no matter if _GLIBCXX_DEBUG is defined.\n+\tAdd using of std::string find, rfind, find_first_of, find_last_of, find_first_not_of\n+\tand find_last_not_of. Remove debug implementations having no debug assertion.\n+\t* testsuite/util/testsuite_string.h: New file. Provides __gnu_test::string and\n+\t__gnu_test::wtring which definition depends on _GLIBCXX_DEBUG.\n+\t* testsuite/21_strings/basic_string/debug/find1_neg.cc: New test case.\n+\t* testsuite/21_strings/basic_string/debug/find2_neg.cc: New test case.\n+\t* testsuite/21_strings/basic_string/operations/find/char/1.cc:\n+\tInclude <testsuite_string.h> and use __gnu_test::string.\n+\t* testsuite/21_strings/basic_string/operations/find/char/2.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/find/char/3.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/find/char/4.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/find/char/5.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/find/char/6.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/find/wchar_t/1.cc:\n+\tInclude <testsuite_string.h> and use __gnu_test::wstring.\n+\t* testsuite/21_strings/basic_string/operations/find/wchar_t/2.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/find/wchar_t/3.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/find/wchar_t/4.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/find/wchar_t/5.cc: Likewise.\n+\t* testsuite/21_strings/basic_string/operations/find/wchar_t/6.cc: Likewise.\n+\n+2022-07-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__cpp_lib_reference_from_temporary)\n+\t(reference_constructs_from_temporary)\n+\t(reference_converts_from_temporary): Only define when the\n+\tbuilt-ins are available.\n+\n+2022-07-19  Marco Falke  <falke.marco@gmail.com>\n+\n+\t* include/std/charconv (__from_chars_alnum_to_val): Replace\n+\timplicit conversion from int to unsigned char with explicit\n+\tcast.\n+\n+2022-07-19  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n+\n+\t* configure: Regnerate.\n+\t* configure.ac (newlib, *-rtems*): Remove HAVE_POLL.\n+\n 2022-07-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_algo.h"}]}