{"sha": "5380e3c137b2bb63acd789cd09d01a4edc0a01c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM4MGUzYzEzN2IyYmI2M2FjZDc4OWNkMDlkMDFhNGVkYzBhMDFjMw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-05-13T22:20:45Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-05-13T22:20:45Z"}, "message": "PR middle-end/100574 - ICE in size_remaining, at builtins.c\n\ngcc/ChangeLog:\n\n\tPR middle-end/100574\n\t* builtins.c (access_ref::get_ref): Improve detection of PHIs with\n\tall null arguments.", "tree": {"sha": "a08406f8860ea8674dc28fb7d4827097e59354f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a08406f8860ea8674dc28fb7d4827097e59354f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5380e3c137b2bb63acd789cd09d01a4edc0a01c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5380e3c137b2bb63acd789cd09d01a4edc0a01c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5380e3c137b2bb63acd789cd09d01a4edc0a01c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5380e3c137b2bb63acd789cd09d01a4edc0a01c3/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2efe245bb88bf4574e322ef7e6d2df83d9e13237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efe245bb88bf4574e322ef7e6d2df83d9e13237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2efe245bb88bf4574e322ef7e6d2df83d9e13237"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "e1b284846b1d1c530165c1c9a4de50eef600c9f2", "filename": "gcc/builtins.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5380e3c137b2bb63acd789cd09d01a4edc0a01c3/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5380e3c137b2bb63acd789cd09d01a4edc0a01c3/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5380e3c137b2bb63acd789cd09d01a4edc0a01c3", "patch": "@@ -362,15 +362,6 @@ access_ref::get_ref (vec<access_ref> *all_refs,\n \tsame_ref.offrng[1] = phi_arg_ref.offrng[1];\n     }\n \n-  if (phi_ref.sizrng[0] < 0)\n-    {\n-      /* Fail if none of the PHI's arguments resulted in updating PHI_REF\n-\t (perhaps because they have all been already visited by prior\n-\t recursive calls).  */\n-      psnlim->leave_phi (ref);\n-      return NULL_TREE;\n-    }\n-\n   if (!same_ref.ref && same_ref.offrng[0] != 0)\n     /* Clear BASE0 if not all the arguments refer to the same object and\n        if not all their offsets are zero-based.  This allows the final\n@@ -390,6 +381,15 @@ access_ref::get_ref (vec<access_ref> *all_refs,\n       phi_ref.parmarray = parmarray;\n     }\n \n+  if (phi_ref.sizrng[0] < 0)\n+    {\n+      /* Fail if none of the PHI's arguments resulted in updating PHI_REF\n+\t (perhaps because they have all been already visited by prior\n+\t recursive calls).  */\n+      psnlim->leave_phi (ref);\n+      return NULL_TREE;\n+    }\n+\n   /* Avoid changing *THIS.  */\n   if (pref && pref != this)\n     *pref = phi_ref;"}]}