{"sha": "811d3cd3df6ac9847ab3de583c0e03d941bd6898", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODExZDNjZDNkZjZhYzk4NDdhYjNkZTU4M2MwZTAzZDk0MWJkNjg5OA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-06-25T23:04:33Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-06-25T23:04:33Z"}, "message": "re PR fortran/36526 (pointer in pure function)\n\n2008-06-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/36526\n\t* interface.c (check_intents):  Correct error where the actual\n\targ was checked for a pointer argument, rather than the formal.\n\n2008-06-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/36526\n\t* gfortran.dg/proc_formal_proc_2.f90: New test.\n\nFrom-SVN: r137125", "tree": {"sha": "5499b47a64e3f601ea22fe21b340401bb7e10eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5499b47a64e3f601ea22fe21b340401bb7e10eec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/811d3cd3df6ac9847ab3de583c0e03d941bd6898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811d3cd3df6ac9847ab3de583c0e03d941bd6898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/811d3cd3df6ac9847ab3de583c0e03d941bd6898", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811d3cd3df6ac9847ab3de583c0e03d941bd6898/comments", "author": null, "committer": null, "parents": [{"sha": "0edb82cb9fcf3740ea944359a7e15c4f2ae57d55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0edb82cb9fcf3740ea944359a7e15c4f2ae57d55"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "3490e23fc90505de2a88e0dad74400974703d106", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811d3cd3df6ac9847ab3de583c0e03d941bd6898/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811d3cd3df6ac9847ab3de583c0e03d941bd6898/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=811d3cd3df6ac9847ab3de583c0e03d941bd6898", "patch": "@@ -1,3 +1,9 @@\n+2008-06-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/36526\n+\t* interface.c (check_intents):  Correct error where the actual\n+\targ was checked for a pointer argument, rather than the formal.\n+\n 2008-06-24  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34371"}, {"sha": "dc561291140c339aa27e7717357d73b216361850", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811d3cd3df6ac9847ab3de583c0e03d941bd6898/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811d3cd3df6ac9847ab3de583c0e03d941bd6898/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=811d3cd3df6ac9847ab3de583c0e03d941bd6898", "patch": "@@ -1,3 +1,8 @@\n+2008-06-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/36526\n+\t* gfortran.dg/proc_formal_proc_2.f90: New test.\n+\n 2008-06-25  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.c-torture/compile/20080625-1.c: New testcase."}, {"sha": "ec7d06eec78994ff03f674c84732b020ef202ba0", "filename": "gcc/testsuite/gfortran.dg/pure_formal_proc_2.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811d3cd3df6ac9847ab3de583c0e03d941bd6898/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_proc_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811d3cd3df6ac9847ab3de583c0e03d941bd6898/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_proc_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_proc_2.f90?ref=811d3cd3df6ac9847ab3de583c0e03d941bd6898", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do compile }\n+! Tests the fix for PR36526, in which the call to getStrLen would\n+! generate an error due to the use of a wrong symbol in interface.c\n+!\n+! Contributed by B\u00e1lint Aradi <aradi@bccms.uni-bremen.de>\n+!\n+module TestPure\n+  implicit none\n+\n+  type T1\n+    character(10) :: str\n+  end type T1\n+\n+contains\n+\n+  pure function getT1Len(self) result(t1len)\n+    type(T1), pointer :: self\n+    integer :: t1len\n+\n+    t1len = getStrLen(self%str)\n+\n+  end function getT1Len\n+\n+\n+  pure function getStrLen(str) result(length)\n+    character(*), intent(in) :: str\n+    integer :: length\n+\n+    length = len_trim(str)\n+\n+  end function getStrLen\n+\n+end module TestPure\n+\n+\n+program Test\n+  use TestPure\n+  implicit none\n+\n+  type(T1), pointer :: pT1\n+\n+  allocate(pT1)\n+  pT1%str = \"test\"\n+  write (*,*) getT1Len(pT1)\n+  deallocate(pT1)\n+\n+end program Test\n+! { dg-final { cleanup-modules \"TestPure\" } }"}]}