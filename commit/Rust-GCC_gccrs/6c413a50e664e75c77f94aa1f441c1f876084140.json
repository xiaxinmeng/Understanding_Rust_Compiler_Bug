{"sha": "6c413a50e664e75c77f94aa1f441c1f876084140", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM0MTNhNTBlNjY0ZTc1Yzc3Zjk0YWExZjQ0MWMxZjg3NjA4NDE0MA==", "commit": {"author": {"name": "Anthony Green", "email": "green@cygnus.com", "date": "1999-10-17T03:11:50Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "1999-10-17T03:11:50Z"}, "message": "ClassLoader.java (getSystemResource): Use getSystemClassLoader instead of ClassLoader.system.\n\n        * java/lang/ClassLoader.java (getSystemResource): Use\n        getSystemClassLoader instead of ClassLoader.system.\n        (getSystemResourceAsStream): Ditto.\n\n        * java/lang/natClassLoader.cc (redirect): Make static and\n        remove #ifdef INTERPRETER so it is always defined.\n        (getVMClassLoader0): Remove #ifdef INTERPRETER so it always\n        returns a VMClassLoader.\n\n        * java/util/ResourceBundle.java (trySomeGetBundle): Create a\n        PropertyResourceBundle if a properties file is found before a\n        ResourceBundle class.\n\nFrom-SVN: r30048", "tree": {"sha": "c92648414fd189d79211213f4fc2b16e607c106c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c92648414fd189d79211213f4fc2b16e607c106c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c413a50e664e75c77f94aa1f441c1f876084140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c413a50e664e75c77f94aa1f441c1f876084140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c413a50e664e75c77f94aa1f441c1f876084140", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c413a50e664e75c77f94aa1f441c1f876084140/comments", "author": null, "committer": null, "parents": [{"sha": "1b284f05acb025d025040466a23f9ca72548d7e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b284f05acb025d025040466a23f9ca72548d7e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b284f05acb025d025040466a23f9ca72548d7e7"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "0e6761c11ae8161080a96dc25b8e982f515560a0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c413a50e664e75c77f94aa1f441c1f876084140/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c413a50e664e75c77f94aa1f441c1f876084140/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6c413a50e664e75c77f94aa1f441c1f876084140", "patch": "@@ -1,3 +1,18 @@\n+1999-10-16  Anthony Green  <green@cygnus.com>\n+\n+\t* java/lang/ClassLoader.java (getSystemResource): Use\n+\tgetSystemClassLoader instead of ClassLoader.system.\n+\t(getSystemResourceAsStream): Ditto.\n+\n+\t* java/lang/natClassLoader.cc (redirect): Make static and\n+\tremove #ifdef INTERPRETER so it is always defined.\n+\t(getVMClassLoader0): Remove #ifdef INTERPRETER so it always\n+\treturns a VMClassLoader.\n+\n+\t* java/util/ResourceBundle.java (trySomeGetBundle): Create a\n+\tPropertyResourceBundle if a properties file is found before a\n+\tResourceBundle class.\n+\n 1999-10-15  Tom Tromey  <tromey@cygnus.com>\n \n \t* gij.cc (main): Formatting fixes."}, {"sha": "f04868d94e65ec83629d6f391a6f40a5855d7fdb", "filename": "libjava/java/lang/ClassLoader.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c413a50e664e75c77f94aa1f441c1f876084140/libjava%2Fjava%2Flang%2FClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c413a50e664e75c77f94aa1f441c1f876084140/libjava%2Fjava%2Flang%2FClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassLoader.java?ref=6c413a50e664e75c77f94aa1f441c1f876084140", "patch": "@@ -360,11 +360,11 @@ protected final void setSigners(Class claz, Object[] signers) {\n   protected native Class findLoadedClass(String name);\n \n   public static final InputStream getSystemResourceAsStream(String name) {\n-    return system.getResourceAsStream (name);\n+    return getSystemClassLoader().getResourceAsStream (name);\n   }\n \n   public static final URL getSystemResource(String name) {\n-    return system.getResource (name);\n+    return getSystemClassLoader().getResource (name);\n   }\n \n   /**"}, {"sha": "af4a4fab6321c3f7640dab3daf71d84060b37c4f", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c413a50e664e75c77f94aa1f441c1f876084140/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c413a50e664e75c77f94aa1f441c1f876084140/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=6c413a50e664e75c77f94aa1f441c1f876084140", "patch": "@@ -48,20 +48,14 @@ extern java::lang::Class ClassLoaderClass;\n \n /////////// java.lang.ClassLoader native methods ////////////\n \n-#ifdef INTERPRETER\n-gnu::gcj::runtime::VMClassLoader *redirect = 0;\n-#endif\n+static gnu::gcj::runtime::VMClassLoader *redirect = 0;\n \n java::lang::ClassLoader*\n java::lang::ClassLoader::getVMClassLoader0 ()\n {\n-#ifdef INTERPRETER\n-    if (redirect == 0)\n-\tredirect = new gnu::gcj::runtime::VMClassLoader;\n-    return redirect;\n-#else\n-    return 0;\n-#endif\n+  if (redirect == 0)\n+    redirect = new gnu::gcj::runtime::VMClassLoader;\n+  return redirect;\n }\n \n void"}, {"sha": "0c078cc1ee77ba7b6b6b8f9f40805cdb776312d0", "filename": "libjava/java/util/ResourceBundle.java", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c413a50e664e75c77f94aa1f441c1f876084140/libjava%2Fjava%2Futil%2FResourceBundle.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c413a50e664e75c77f94aa1f441c1f876084140/libjava%2Fjava%2Futil%2FResourceBundle.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FResourceBundle.java?ref=6c413a50e664e75c77f94aa1f441c1f876084140", "patch": "@@ -8,6 +8,8 @@\n \n package java.util;\n \n+import java.io.InputStream;\n+\n /**\n  * @author Anthony Green <green@cygnus.com>\n  * @date November 26, 1998.\n@@ -106,6 +108,23 @@ private static final ResourceBundle trySomeGetBundle (String bundleName,\n \t      // Fall through.\n \t    }\n \n+\t  // Look for a properties file.\n+\t  {\n+\t    InputStream i = \n+\t\tClassLoader.getSystemResourceAsStream (bundleName.replace ('.', '/') \n+\t\t\t\t\t\t       + \".properties\");\n+\t    if (i != null)\n+\t      {\n+\t\ttry {\n+\t\t  return new PropertyResourceBundle (i);\n+\t\t} catch (java.io.IOException e) {\n+\t\t  // The docs don't appear to define what happens in\n+\t\t  // this case, but it seems like continuing the\n+\t\t  // search is a reasonable thing to do.\n+\t\t}\n+\t      }\n+\t  }\n+\n \t  if (bundleName.equals(stopHere))\n \t    return result;\n \t  else"}]}