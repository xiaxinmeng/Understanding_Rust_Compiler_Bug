{"sha": "0a7dc4b6440faa8cd57c630f1e394a719469c399", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3ZGM0YjY0NDBmYWE4Y2Q1N2M2MzBmMWUzOTRhNzE5NDY5YzM5OQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-12-02T18:29:11Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-12-02T18:32:50Z"}, "message": "Adjust test to avoid ILP32 failures after r11-5622 (PR middle-end/97373)\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust expected warnings\n\tto correctly reflect the maximum object size.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-11.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-18.c: Same.", "tree": {"sha": "ec0ec321d8830b242edbd09057f06106bc82c421", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec0ec321d8830b242edbd09057f06106bc82c421"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a7dc4b6440faa8cd57c630f1e394a719469c399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7dc4b6440faa8cd57c630f1e394a719469c399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7dc4b6440faa8cd57c630f1e394a719469c399", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7dc4b6440faa8cd57c630f1e394a719469c399/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9776b4653bc4f8b568ea49fea4a7d7460e58b68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9776b4653bc4f8b568ea49fea4a7d7460e58b68a"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "3d238c4c3ed3cc34852c9f0c6b74bbe5db69f558", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-1.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7dc4b6440faa8cd57c630f1e394a719469c399/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7dc4b6440faa8cd57c630f1e394a719469c399/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c?ref=0a7dc4b6440faa8cd57c630f1e394a719469c399", "patch": "@@ -112,17 +112,24 @@ void test_sprintf_c_const (void)\n   T ( 3, \"%1$c%2$c\", '1', '2');\n \n   /* Verify that a warning is issued for exceeding INT_MAX bytes and\n-     not otherwise.  */\n-  T (-1, \"%*c\",  INT_MAX - 1, '1');\n-  T (-1, \"%*c\",  INT_MAX,     '1');\n-  T (-1, \"X%*c\", INT_MAX - 1, '1');\n-  T (-1, \"X%*c\", INT_MAX,     '1'); /* { dg-warning \"directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n-\n-  T (-1, \"%*c%*c\", INT_MAX - 1, '1', INT_MAX - 1, '2'); /* { dg-warning \"directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n-\n-  T (-1, \"%*cX\", INT_MAX - 2, '1');\n-  T (-1, \"%*cX\", INT_MAX - 1, '1');\n-  T (-1, \"%*cX\", INT_MAX,     '1'); /* { dg-warning \"output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+     not otherwise.  In ILP32 where the maximum object size is INT_MAX - 1\n+     bytes, the calls are diagnosed due to the overflow.  */\n+  T (-1, \"%*c\",  INT_MAX - 2, '1');\n+  T (-1, \"%*c\",  INT_MAX - 1, '1'); /* { dg-warning \"writing a terminating nul past the end\" \"ilp32\" { target ilp32 } } */\n+  T (-1, \"%*c\",  INT_MAX,     '1'); /* { dg-warning \"writing 2147483647 bytes into a region of size 2147483646\" \"il32\" { target ilp32 } } */\n+  T (-1, \"X%*c\", INT_MAX - 3, '1');\n+  T (-1, \"X%*c\", INT_MAX - 1, '1'); /* { dg-warning \"writing 2147483646 bytes into a region of size 2147483645\" \"ilp32\" { target ilp32 } } */\n+  T (-1, \"X%*c\", INT_MAX,     '1'); /* { dg-warning \"directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" \"lp64\" { target lp64 } } */\n+                                    /* { dg-warning \"directive writing 2147483647 bytes into a region of size 2147483645.\" \"lp32\" { target ilp32 } .-1 } */\n+\n+  T (-1, \"%*c%*c\", INT_MAX - 1, '1', INT_MAX - 1, '2'); /* { dg-warning \"directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" \"lp64\" { target lp64 } } */\n+  /* { dg-warning \"directive writing 2147483646 bytes into a region of size 0\" \"ilp32\" { target ilp32 } .-1 } */\n+\n+  T (-1, \"%*cX\", INT_MAX - 3, '1');\n+  T (-1, \"%*cX\", INT_MAX - 2, '1'); /* { dg-warning \"writing a terminating nul past the end of the destination\" \"ilp32\" { target ilp32} } */\n+  T (-1, \"%*cX\", INT_MAX - 1, '1'); /* { dg-warning \"'X' directive writing 1 byte into a region of size 0\" \"ilp32\" { target ilp32 } } */\n+  T (-1, \"%*cX\", INT_MAX,     '1'); /* { dg-warning \"output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" \"lp64\" { target lp64 } } */\n+  /* { dg-warning \"directive writing 2147483647 bytes into a region of size 2147483646\" \"ilp32\" { target ilp32 } .-1 } */\n }\n \n /* Verify that no warning is issued for calls that write into a flexible\n@@ -287,9 +294,11 @@ void test_sprintf_chk_s_const (void)\n \n   /* Verify that output in excess of INT_MAX bytes is diagnosed even\n      when the size of the destination object is unknown.  */\n-  T (-1, \"%*s\",  INT_MAX - 1, \"\");\n-  T (-1, \"%*s\",  INT_MAX,     \"\");\n-  T (-1, \"X%*s\", INT_MAX,     \"\"); /* { dg-warning \"directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" } */\n+  T (-1, \"%*s\",  INT_MAX - 2, \"\");\n+  T (-1, \"%*s\",  INT_MAX - 1, \"\"); /* { dg-warning \"writing a terminating nul past the end of the destination\" \"ilp32\" { target ilp32 } } */\n+  T (-1, \"%*s\",  INT_MAX,     \"\"); /* { dg-warning \"directive writing 2147483647 bytes into a region of size 2147483646\" \"ilp32\" { target ilp32 } } */\n+  T (-1, \"X%*s\", INT_MAX,     \"\"); /* { dg-warning \"directive output of \\[0-9\\]+ bytes causes result to exceed .INT_MAX.\" \"lp64\" { target lp64 } } */\n+  /* { dg-warning \"directive writing 2147483647 bytes into a region of size 2147483645\" \"ilp32\" { target ilp32 } .-1 } */\n \n   /* Multiple directives.  */\n "}, {"sha": "22f286dc818fac11618ebe10c7780c081f8d5631", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-11.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7dc4b6440faa8cd57c630f1e394a719469c399/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7dc4b6440faa8cd57c630f1e394a719469c399/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-11.c?ref=0a7dc4b6440faa8cd57c630f1e394a719469c399", "patch": "@@ -199,15 +199,21 @@ void test_narrow_string_with_width_and_precision (void)\n \n   /* The two directives below combined convert to [INT_MAX, INT_MAX + 1].\n      Since the lower end of the range doesn't exceed INT_MAX no warning\n-     is expected.  */\n+     is expected in LP64.  In ILP32 where the maximum object size is\n+     INT_MAX - 1, the call is diagnosed.  */\n+  T (-1, \"%*.*s%*.*s\",\n+     IR (imax - 6, imax - 3), IR (1, 2), SR (x, y),\n+     IR (       4,        6), IR (3, 4), SR (x, y));\n   T (-1, \"%*.*s%*.*s\",\n      IR (imax - 5, imax - 3), IR (1, 2), SR (x, y),\n      IR (       5,        6), IR (3, 4), SR (x, y));\n+  /* { dg-warning \"directive writing between 5 and 6 bytes into a region of size between 2 and 4\" \"ilp32\" { target ilp32 } .-3 } */\n \n   /* The three directives below (the two %s plus the space in between)\n      combined convert to [INT_MAX + 1, INT_MAX + 2].  Since the lower\n      end of the range exceeds INT_MAX a warning is expected.  */\n-  T (-1, \"%*.*s %*.*s\",                                     /* { dg-warning \"INT_MAX\" } */\n+  T (-1, \"%*.*s %*.*s\",                                     /* { dg-warning \"INT_MAX\" \"lp64\" { target lp64 } } */\n+     /* { dg-warning \"directive writing between 5 and 6 bytes into a region of size between 1 and 3\" \"ilp32\" { target ilp32 } .-1 } */\n      IR (imax - 5, imax - 3), IR (1, 2), SR (x, y),\n      IR (       5,        6), IR (3, 4), SR (x, y));\n "}, {"sha": "d30775dc62d33ab2628c8d66cb126ed620f411d3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-18.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7dc4b6440faa8cd57c630f1e394a719469c399/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7dc4b6440faa8cd57c630f1e394a719469c399/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-18.c?ref=0a7dc4b6440faa8cd57c630f1e394a719469c399", "patch": "@@ -118,9 +118,9 @@ void test_width_and_precision_out_of_range (char *d)\n   /* The range here happens to be a property of the compiler, not\n      one of the target.  */\n   T (\"%9223372036854775808i\", 0);    /* { dg-warning \"width out of range\" \"first\" } */\n-  /* { dg-warning \"exceeds .INT_MAX.\" \"second\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"directive writing \\\\d+ bytes into a region of size \\\\d+\" \"second\" { target *-*-* } .-1 } */\n   T (\"%.9223372036854775808i\", 0);   /* { dg-warning \"precision out of range\" \"first\" } */\n-  /* { dg-warning \"exceeds .INT_MAX.\" \"second\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"directive writing \\\\d+ bytes into a region of size \\\\d+\" \"second\" { target *-*-* } .-1 } */\n \n   /* The following is diagnosed by -Wformat (disabled here).  */\n   /* T (\"%9223372036854775808$i\", 0); */"}]}