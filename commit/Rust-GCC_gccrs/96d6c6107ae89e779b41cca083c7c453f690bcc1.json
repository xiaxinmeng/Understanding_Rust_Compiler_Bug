{"sha": "96d6c6107ae89e779b41cca083c7c453f690bcc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZkNmM2MTA3YWU4OWU3NzliNDFjY2EwODNjN2M0NTNmNjkwYmNjMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-01-02T19:48:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-01-02T19:48:02Z"}, "message": "tree.c (cp_valid_lang_attribute): Don't set CLASSTYPE_COM_INTERFACE for v3 ABI.\n\n        * tree.c (cp_valid_lang_attribute): Don't set CLASSTYPE_COM_INTERFACE\n        for v3 ABI.\n\n        * typeck.c (cp_truthvalue_conversion): New fn.\n        * cvt.c (ocp_convert): Use it.\n\n        * cp-tree.h: Lose c-common.c decls.\n\n        * typeck.c (build_unary_op): Restore old &a.f diagnostic code.\n        * cvt.c (convert_to_void): Use type_unknown_p.\n\nFrom-SVN: r38636", "tree": {"sha": "aa36d1aa0124a5c7b635fb6c694ef78e0c12e341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa36d1aa0124a5c7b635fb6c694ef78e0c12e341"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96d6c6107ae89e779b41cca083c7c453f690bcc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d6c6107ae89e779b41cca083c7c453f690bcc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d6c6107ae89e779b41cca083c7c453f690bcc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d6c6107ae89e779b41cca083c7c453f690bcc1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/381ddaa6e1e86b6c4b6702ee0ece25d81d19f7fa"}], "stats": {"total": 136, "additions": 85, "deletions": 51}, "files": [{"sha": "61bd1f269b16576b11741b69b52ce0a5c47d3e97", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96d6c6107ae89e779b41cca083c7c453f690bcc1", "patch": "@@ -1,5 +1,16 @@\n 2001-01-02  Jason Merrill  <jason@redhat.com>\n \n+\t* tree.c (cp_valid_lang_attribute): Don't set CLASSTYPE_COM_INTERFACE\n+\tfor v3 ABI.\n+\n+\t* typeck.c (cp_truthvalue_conversion): New fn.\n+\t* cvt.c (ocp_convert): Use it.\n+\n+\t* cp-tree.h: Lose c-common.c decls.\n+\n+\t* typeck.c (build_unary_op): Restore old &a.f diagnostic code.\n+\t* cvt.c (convert_to_void): Use type_unknown_p.\n+\n \t* typeck.c (strip_all_pointer_quals): Also strip quals from \n \tpointer-to-member types.\n "}, {"sha": "b0802e1977ece6ad5f821279cc1293e59a0bc9a5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=96d6c6107ae89e779b41cca083c7c453f690bcc1", "patch": "@@ -3190,40 +3190,6 @@ extern int warn_multichar;\n    flag_guiding_decls in do_friend. */\n extern int warn_nontemplate_friend;\n \n-/* in c-common.c */\n-extern void declare_function_name               PARAMS ((void));\n-extern void decl_attributes                     PARAMS ((tree, tree, tree));\n-extern void init_function_format_info\t\tPARAMS ((void));\n-extern void record_function_format\t\tPARAMS ((tree, tree, int, int, int));\n-extern void check_function_format\t\tPARAMS ((int *, tree, tree, tree));\n-/* Print an error message for invalid operands to arith operation CODE.\n-   NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n-extern void binary_op_error                     PARAMS ((enum tree_code));\n-extern tree canonical_type_variant              PARAMS ((tree));\n-/* Validate the expression after `case' and apply default promotions.  */\n-extern tree check_case_value                    PARAMS ((tree));\n-/* Concatenate a list of STRING_CST nodes into one STRING_CST.  */\n-extern tree combine_strings                     PARAMS ((tree));\n-extern void constant_expression_warning         PARAMS ((tree));\n-extern tree convert_and_check\t\t\tPARAMS ((tree, tree));\n-extern void overflow_warning\t\t\tPARAMS ((tree));\n-extern void unsigned_conversion_warning\t\tPARAMS ((tree, tree));\n-extern void c_apply_type_quals_to_decl          PARAMS ((int, tree));\n-\n-/* Read the rest of the current #-directive line.  */\n-extern char *get_directive_line                 PARAMS ((void));\n-#define GET_DIRECTIVE_LINE() get_directive_line ()\n-\n-/* Subroutine of build_binary_op, used for comparison operations.\n-   See if the operands have both been converted from subword integer types\n-   and, if so, perhaps change them both back to their original type.  */\n-extern tree shorten_compare                     PARAMS ((tree *, tree *, tree *, enum tree_code *));\n-/* Prepare expr to be an argument of a TRUTH_NOT_EXPR,\n-   or validate its data type for an `if' or `while' statement or ?..: exp.  */\n-extern tree truthvalue_conversion               PARAMS ((tree));\n-extern tree type_for_mode                       PARAMS ((enum machine_mode, int));\n-extern tree type_for_size                       PARAMS ((unsigned, int));\n-\n /* in decl{2}.c */\n /* A node that is a list (length 1) of error_mark_nodes.  */\n extern tree error_mark_list;\n@@ -4391,6 +4357,7 @@ extern tree frob_opname                         PARAMS ((tree));\n /* in tree.c */\n extern void init_tree\t\t\t        PARAMS ((void));\n extern int pod_type_p\t\t\t\tPARAMS ((tree));\n+extern tree canonical_type_variant              PARAMS ((tree));\n extern void unshare_base_binfos\t\t\tPARAMS ((tree));\n extern int member_p\t\t\t\tPARAMS ((tree));\n extern cp_lvalue_kind real_lvalue_p\t\tPARAMS ((tree));\n@@ -4470,6 +4437,7 @@ extern linkage_kind decl_linkage                PARAMS ((tree));\n \n /* in typeck.c */\n extern int string_conv_p\t\t\tPARAMS ((tree, tree, int));\n+extern tree cp_truthvalue_conversion\t\tPARAMS ((tree));\n extern tree condition_conversion\t\tPARAMS ((tree));\n extern tree target_type\t\t\t\tPARAMS ((tree));\n extern tree require_complete_type\t\tPARAMS ((tree));"}, {"sha": "7936983c28aba9d0e09586f4b8716bdd16ffd943", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=96d6c6107ae89e779b41cca083c7c453f690bcc1", "patch": "@@ -787,7 +787,7 @@ ocp_convert (type, expr, convtype, flags)\n \t    fn = TREE_OPERAND (expr, 0);\n \t  if (fn)\n \t    cp_warning (\"the address of `%D', will always be `true'\", fn);\n-\t  return truthvalue_conversion (e);\n+\t  return cp_truthvalue_conversion (e);\n \t}\n       return fold (convert_to_integer (type, e));\n     }\n@@ -976,19 +976,17 @@ convert_to_void (expr, implicit)\n   \n     if (TREE_CODE (probe) == ADDR_EXPR)\n       probe = TREE_OPERAND (expr, 0);\n-    if (!is_overloaded_fn (probe))\n-      ;/* OK */\n-    else if (really_overloaded_fn (probe))\n-        {\n-          /* [over.over] enumerates the places where we can take the address\n-             of an overloaded function, and this is not one of them.  */\n-          cp_pedwarn (\"%s has no context for overloaded function name `%E'\",\n-                      implicit ? implicit : \"void cast\", expr);\n-        }\n-    else if (implicit && probe == expr)\n+    if (type_unknown_p (probe))\n+      {\n+\t/* [over.over] enumerates the places where we can take the address\n+\t   of an overloaded function, and this is not one of them.  */\n+\tcp_pedwarn (\"%s cannot resolve address of overloaded function\",\n+\t\t    implicit ? implicit : \"void cast\");\n+      }\n+    else if (implicit && probe == expr && is_overloaded_fn (probe))\n       /* Only warn when there is no &.  */\n       cp_warning (\"%s is a reference, not call, to function `%E'\",\n-                    implicit, expr);\n+\t\t  implicit, expr);\n   }\n   \n   if (expr != error_mark_node && !VOID_TYPE_P (TREE_TYPE (expr)))"}, {"sha": "4f55c703240dcc7c4596ad01232708fbceb71748", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=96d6c6107ae89e779b41cca083c7c453f690bcc1", "patch": "@@ -2259,7 +2259,9 @@ cp_valid_lang_attribute (attr_name, attr_args, decl, type)\n \t  return 0;\n \t}\n \n-      CLASSTYPE_COM_INTERFACE (type) = 1;\n+      if (!flag_new_abi)\n+\t/* The v3 ABI is already COM compliant; don't set this flag.  */\n+\tCLASSTYPE_COM_INTERFACE (type) = 1;\n       return 1;\n     }\n   else if (is_attribute_p (\"init_priority\", attr_name))"}, {"sha": "947a1dbcedd42f48faf8efe13cc6373439f3b884", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=96d6c6107ae89e779b41cca083c7c453f690bcc1", "patch": "@@ -4348,7 +4348,21 @@ build_x_unary_op (code, xarg)\n   return exp;\n }\n \n-/* Just like truthvalue_conversion, but we want a CLEANUP_POINT_EXPR.  */\n+/* Like truthvalue_conversion, but handle pointer-to-member constants, where\n+   a null value is represented by an INTEGER_CST of -1.  */\n+\n+tree\n+cp_truthvalue_conversion (expr)\n+     tree expr;\n+{\n+  tree type = TREE_TYPE (expr);\n+  if (TYPE_PTRMEM_P (type))\n+    return build_binary_op (NE_EXPR, expr, integer_zero_node, 1);\n+  else\n+    return truthvalue_conversion (expr);\n+}\n+\n+/* Just like cp_truthvalue_conversion, but we want a CLEANUP_POINT_EXPR.  */\n    \n tree\n condition_conversion (expr)\n@@ -4682,15 +4696,31 @@ build_unary_op (code, xarg, noconvert)\n \t  return build1 (ADDR_EXPR, unknown_type_node, arg);\n \t}\n \n-      if (TREE_CODE (arg) == COMPONENT_REF && flag_ms_extensions\n-          && type_unknown_p (arg)\n+      if (TREE_CODE (arg) == COMPONENT_REF && type_unknown_p (arg)\n           && OVL_NEXT (TREE_OPERAND (arg, 1)) == NULL_TREE)\n         {\n \t  /* They're trying to take the address of a unique non-static\n-\t     member function.  This is ill-formed, except in microsoft-land.  */\n+\t     member function.  This is ill-formed (except in MS-land),\n+\t     but let's try to DTRT.\n+\t     Note: We only handle unique functions here because we don't\n+\t     want to complain if there's a static overload; non-unique\n+\t     cases will be handled by instantiate_type.  But we need to\n+\t     handle this case here to allow casts on the resulting PMF.\n+\t     We could defer this in non-MS mode, but it's easier to give\n+\t     a useful error here.  */\n \n \t  tree base = TREE_TYPE (TREE_OPERAND (arg, 0));\n \t  tree name = DECL_NAME (OVL_CURRENT (TREE_OPERAND (arg, 1)));\n+\n+\t  if (! flag_ms_extensions)\n+\t    {\n+\t      if (current_class_type\n+\t\t  && TREE_OPERAND (arg, 0) == current_class_ref)\n+\t\t/* An expression like &memfn.  */\n+\t\tcp_pedwarn (\"ISO C++ forbids taking the address of a non-static member function to form a pointer to member function.  Say `&%T::%D'\", base, name);\n+\t      else\n+\t\tcp_pedwarn (\"ISO C++ forbids taking the address of a bound member function to form a pointer to member function.  Say `&%T::%D'\", base, name);\n+\t    }\n \t  arg = build_offset_ref (base, name);\n         }\n         "}, {"sha": "e33ee2c8e5c6deb4e16d55dfe67d42ebc08badf0", "filename": "gcc/testsuite/g++.old-deja/g++.other/pmf7.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fpmf7.C?ref=96d6c6107ae89e779b41cca083c7c453f690bcc1", "patch": "@@ -0,0 +1,15 @@\n+// Test for proper diagnostics on trying to take the address of a non-static\n+// member function.\n+\n+struct A {\n+  void f ();\n+  void f (int);\n+  void g ();\n+};\n+\n+int main ()\n+{\n+  A a;\n+  &a.f;\t\t\t\t// ERROR - overloaded\n+  &a.g;\t\t\t\t// ERROR - can't write a pmf like this\n+}"}, {"sha": "21deeb528429971cbfea0a8502db2cfe4bcee281", "filename": "gcc/testsuite/g++.old-deja/g++.other/ptrmem10.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96d6c6107ae89e779b41cca083c7c453f690bcc1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem10.C?ref=96d6c6107ae89e779b41cca083c7c453f690bcc1", "patch": "@@ -0,0 +1,10 @@\n+// Test that we properly convert a constant ptm to bool.\n+\n+class A { };\n+\n+int main()\n+{\n+  int A::*const p = 0;\n+  if (p)\n+    return 1;\n+}"}]}