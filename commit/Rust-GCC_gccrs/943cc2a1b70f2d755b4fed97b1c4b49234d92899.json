{"sha": "943cc2a1b70f2d755b4fed97b1c4b49234d92899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzY2MyYTFiNzBmMmQ3NTViNGZlZDk3YjFjNGI0OTIzNGQ5Mjg5OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-31T00:52:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-31T00:52:57Z"}, "message": "libstdc++: Use double for unordered container load factors [PR 96958]\n\nMy previous commit for this PR changed the types from long double to\ndouble, but didn't change the uses of __builtin_ceill and\n__builtin_floorl. It also failed to change the non-inline functions in\nsrc/c++11/hashtable_c++0x.cc. This should fix it properly now.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/96958\n\t* include/bits/hashtable_policy.h (_Prime_rehash_policy)\n\t(_Power2_rehash_policy): Use ceil and floor instead of ceill and\n\tfloorl.\n\t* src/c++11/hashtable_c++0x.cc (_Prime_rehash_policy): Likewise.\n\tUse double instead of long double.", "tree": {"sha": "e80887a7fb15d206dd22375cb9650766db27e2f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e80887a7fb15d206dd22375cb9650766db27e2f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/943cc2a1b70f2d755b4fed97b1c4b49234d92899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943cc2a1b70f2d755b4fed97b1c4b49234d92899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943cc2a1b70f2d755b4fed97b1c4b49234d92899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943cc2a1b70f2d755b4fed97b1c4b49234d92899/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afb8da7faa9dfe5a0d94ed45a373d74c076784ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afb8da7faa9dfe5a0d94ed45a373d74c076784ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afb8da7faa9dfe5a0d94ed45a373d74c076784ab"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "28372979c873b4bb14e3d85818678d5812a1c50e", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943cc2a1b70f2d755b4fed97b1c4b49234d92899/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943cc2a1b70f2d755b4fed97b1c4b49234d92899/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=943cc2a1b70f2d755b4fed97b1c4b49234d92899", "patch": "@@ -458,7 +458,7 @@ namespace __detail\n     // Return a bucket count appropriate for n elements\n     std::size_t\n     _M_bkt_for_elements(std::size_t __n) const\n-    { return __builtin_ceill(__n / (double)_M_max_load_factor); }\n+    { return __builtin_ceil(__n / (double)_M_max_load_factor); }\n \n     // __n_bkt is current bucket count, __n_elt is current element count,\n     // and __n_ins is number of elements to be inserted.  Do we need to\n@@ -559,15 +559,15 @@ namespace __detail\n \t_M_next_resize = size_t(-1);\n       else\n \t_M_next_resize\n-\t  = __builtin_floorl(__res * (double)_M_max_load_factor);\n+\t  = __builtin_floor(__res * (double)_M_max_load_factor);\n \n       return __res;\n     }\n \n     // Return a bucket count appropriate for n elements\n     std::size_t\n     _M_bkt_for_elements(std::size_t __n) const noexcept\n-    { return __builtin_ceill(__n / (double)_M_max_load_factor); }\n+    { return __builtin_ceil(__n / (double)_M_max_load_factor); }\n \n     // __n_bkt is current bucket count, __n_elt is current element count,\n     // and __n_ins is number of elements to be inserted.  Do we need to\n@@ -587,11 +587,11 @@ namespace __detail\n \t      / (double)_M_max_load_factor;\n \t  if (__min_bkts >= __n_bkt)\n \t    return { true,\n-\t      _M_next_bkt(std::max<std::size_t>(__builtin_floorl(__min_bkts) + 1,\n+\t      _M_next_bkt(std::max<std::size_t>(__builtin_floor(__min_bkts) + 1,\n \t\t\t\t\t\t__n_bkt * _S_growth_factor)) };\n \n \t  _M_next_resize\n-\t    = __builtin_floorl(__n_bkt * (double)_M_max_load_factor);\n+\t    = __builtin_floor(__n_bkt * (double)_M_max_load_factor);\n \t  return { false, 0 };\n \t}\n       else"}, {"sha": "4dec2a84641e96706428d27185792bdf41259f17", "filename": "libstdc++-v3/src/c++11/hashtable_c++0x.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/943cc2a1b70f2d755b4fed97b1c4b49234d92899/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/943cc2a1b70f2d755b4fed97b1c4b49234d92899/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fhashtable_c%2B%2B0x.cc?ref=943cc2a1b70f2d755b4fed97b1c4b49234d92899", "patch": "@@ -58,7 +58,7 @@ namespace __detail\n \t  return 1;\n \n \t_M_next_resize =\n-\t  __builtin_floorl(__fast_bkt[__n] * (long double)_M_max_load_factor);\n+\t  __builtin_floor(__fast_bkt[__n] * (double)_M_max_load_factor);\n \treturn __fast_bkt[__n];\n       }\n \n@@ -81,7 +81,7 @@ namespace __detail\n       _M_next_resize = size_t(-1);\n     else\n       _M_next_resize =\n-\t__builtin_floorl(*__next_bkt * (long double)_M_max_load_factor);\n+\t__builtin_floor(*__next_bkt * (double)_M_max_load_factor);\n \n     return *__next_bkt;\n   }\n@@ -105,16 +105,16 @@ namespace __detail\n \t// If _M_next_resize is 0 it means that we have nothing allocated so\n \t// far and that we start inserting elements. In this case we start\n \t// with an initial bucket size of 11.\n-\tlong double __min_bkts\n+\tdouble __min_bkts\n \t  = std::max<std::size_t>(__n_elt + __n_ins, _M_next_resize ? 0 : 11)\n-\t  / (long double)_M_max_load_factor;\n+\t  / (double)_M_max_load_factor;\n \tif (__min_bkts >= __n_bkt)\n \t  return { true,\n-\t    _M_next_bkt(std::max<std::size_t>(__builtin_floorl(__min_bkts) + 1,\n+\t    _M_next_bkt(std::max<std::size_t>(__builtin_floor(__min_bkts) + 1,\n \t\t\t\t\t      __n_bkt * _S_growth_factor)) };\n \n \t_M_next_resize\n-\t  = __builtin_floorl(__n_bkt * (long double)_M_max_load_factor);\n+\t  = __builtin_floor(__n_bkt * (double)_M_max_load_factor);\n \treturn { false, 0 };\n       }\n     else"}]}