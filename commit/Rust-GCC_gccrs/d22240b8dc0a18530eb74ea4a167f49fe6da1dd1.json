{"sha": "d22240b8dc0a18530eb74ea4a167f49fe6da1dd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIyMjQwYjhkYzBhMTg1MzBlYjc0ZWE0YTE2N2Y0OWZlNmRhMWRkMQ==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2003-12-16T11:48:50Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2003-12-16T11:48:50Z"}, "message": "badalloc1.C: Tweak to pass with -pthread on FreeBSD systems.\n\n        * testsuite/g++.old-deja/g++.eh/badalloc1.C: Tweak to\n        pass with -pthread on FreeBSD systems.\n\nFrom-SVN: r74689", "tree": {"sha": "8afdb239a1e5939d4622fcbac1f649c37aa79dfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8afdb239a1e5939d4622fcbac1f649c37aa79dfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d22240b8dc0a18530eb74ea4a167f49fe6da1dd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22240b8dc0a18530eb74ea4a167f49fe6da1dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d22240b8dc0a18530eb74ea4a167f49fe6da1dd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22240b8dc0a18530eb74ea4a167f49fe6da1dd1/comments", "author": null, "committer": null, "parents": [{"sha": "9a3a96d0a5715e9d72a83a52f517ad6b78b9f685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a3a96d0a5715e9d72a83a52f517ad6b78b9f685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a3a96d0a5715e9d72a83a52f517ad6b78b9f685"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "d1cf3a4c172ab3e913d0c481dbd7fb33889966d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d22240b8dc0a18530eb74ea4a167f49fe6da1dd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d22240b8dc0a18530eb74ea4a167f49fe6da1dd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d22240b8dc0a18530eb74ea4a167f49fe6da1dd1", "patch": "@@ -1,3 +1,8 @@\n+2003-12-16  Loren James Rittle  <ljrittle@acm.org>\n+\n+\t* testsuite/g++.old-deja/g++.eh/badalloc1.C: Tweak to\n+\tpass with -pthread on FreeBSD systems.\n+\n 2003-12-16  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_file_end): Only write symbols that have"}, {"sha": "907474e13fac5470d316cb1d1e8a011dc73f42a1", "filename": "gcc/testsuite/g++.old-deja/g++.eh/badalloc1.C", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d22240b8dc0a18530eb74ea4a167f49fe6da1dd1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d22240b8dc0a18530eb74ea4a167f49fe6da1dd1/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fbadalloc1.C?ref=d22240b8dc0a18530eb74ea4a167f49fe6da1dd1", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run { xfail xstormy16-*-* *-*-darwin* } }\n-// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.\n // Contributed by Nathan Sidwell 6 June 2000 <nathan@codesourcery.com>\n \n // Check we can throw a bad_alloc exception when malloc dies.\n@@ -14,8 +14,15 @@ extern \"C\" void *memcpy(void *, const void *, size_t);\n #ifdef STACK_SIZE\n const int arena_size = 256;\n #else\n+#ifdef __FreeBSD__\n+// FreeBSD with threads requires even more space at initialization time.\n+#include \"bits/c++config.h\"\n+#include \"bits/gthr.h\"\n+const int arena_size = 131072;\n+#else\n const int arena_size = 32768;\n #endif\n+#endif\n \n struct object\n {\n@@ -98,6 +105,17 @@ void fn_catchthrow() throw(int)\n \n int main()\n {\n+#ifdef __FreeBSD__\n+// FreeBSD with threads fails the test unless each thread primes itself.\n+  if (__gthread_active_p())\n+    {\n+      try{fn_throw();}\n+      catch(int a){}\n+    }\n+// This was added to test with well-known idiom to detect regressions here\n+// rather than always failing with -pthread.\n+#endif\n+\n   fail = 1;\n \n   try{fn_throw();}"}]}