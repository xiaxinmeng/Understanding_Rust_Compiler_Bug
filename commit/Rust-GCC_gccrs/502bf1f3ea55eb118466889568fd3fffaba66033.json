{"sha": "502bf1f3ea55eb118466889568fd3fffaba66033", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAyYmYxZjNlYTU1ZWIxMTg0NjY4ODk1NjhmZDNmZmZhYmE2NjAzMw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T11:19:28Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T11:19:28Z"}, "message": "tree.def (TRY_FINALLY_EXPR, [...]): New tree nodes,\n\n`\n\t* tree.def (TRY_FINALLY_EXPR, GOTO_SUBROUTINE_EXPR):  New tree nodes,\n\t* expr.c (expand_expr):  Support new tree nodes.\n\nFrom-SVN: r25307", "tree": {"sha": "f942380e3b0c0d2249241bd8dcac07cf02ab1635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f942380e3b0c0d2249241bd8dcac07cf02ab1635"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/502bf1f3ea55eb118466889568fd3fffaba66033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502bf1f3ea55eb118466889568fd3fffaba66033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502bf1f3ea55eb118466889568fd3fffaba66033", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502bf1f3ea55eb118466889568fd3fffaba66033/comments", "author": null, "committer": null, "parents": [{"sha": "90a79256fe2141af2cac08a335fe4da72dc64b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a79256fe2141af2cac08a335fe4da72dc64b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90a79256fe2141af2cac08a335fe4da72dc64b1e"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "02305e1ea66b9ac2f64a2bf9185736055e652428", "filename": "gcc/tree.def", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502bf1f3ea55eb118466889568fd3fffaba66033/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502bf1f3ea55eb118466889568fd3fffaba66033/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=502bf1f3ea55eb118466889568fd3fffaba66033", "patch": "@@ -702,6 +702,27 @@ DEFTREECODE (POSTINCREMENT_EXPR, \"postincrement_expr\", 'e', 2)\n    evaluated unless an exception is throw.  */\n DEFTREECODE (TRY_CATCH_EXPR, \"try_catch_expr\", 'e', 2)\n \n+/* Evaluate the first operand.\n+   The second operand is a a cleanup expression which is evaluated\n+   before an exit (normal, exception, or jump out) from this expression.\n+\n+   Like a CLEANUP_POINT_EXPR/WITH_CLEANUP_EXPR combination, but those\n+   always copy the cleanup expression where needed.  In contrast,\n+   TRY_FINALLY_EXPR generates a jump to a cleanup subroutine.\n+   (At least conceptually; the optimizer could inline the cleanup\n+   subroutine in the same way it could inline normal subroutines.)\n+   TRY_FINALLY_EXPR should be used when the cleanup is actual statements\n+   in the source of the current function (which people might want to\n+   set breakpoints in).  */\n+DEFTREECODE (TRY_FINALLY_EXPR, \"try_finally\", 'e', 2)\n+\n+/* Used internally for cleanups in the implementation of TRY_FINALLY_EXPR.\n+   (Specifically, it is created by expand_expr, not front-ends.)\n+   Operand 0 is the rtx for the start of the subroutine we need to call.\n+   Operand 1 is the rtx for a variable in which to store the address\n+   of where the subroutine should return to.  */\n+DEFTREECODE (GOTO_SUBROUTINE_EXPR, \"goto_subroutine\", 'e', 2)\n+\n /* Pop the top element off the dynamic handler chain.  Used in\n    conjunction with setjmp/longjmp based exception handling, see\n    except.c for more details.  This is meant to be used only by the"}]}