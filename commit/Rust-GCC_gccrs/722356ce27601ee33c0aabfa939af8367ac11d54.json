{"sha": "722356ce27601ee33c0aabfa939af8367ac11d54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIyMzU2Y2UyNzYwMWVlMzNjMGFhYmZhOTM5YWY4MzY3YWMxMWQ1NA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-10-12T22:09:21Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-10-12T22:09:21Z"}, "message": "trans.c (Attribute_to_gnu): Use remove_conversions.\n\n\t* gcc-interface/trans.c (Attribute_to_gnu): Use remove_conversions.\n\t(push_range_check_info): Likewise.\n\t(gnat_to_gnu) <N_Code_Statement>: Likewise.\n\t* gcc-interface/utils2.c (build_unary_op) <INDIRECT_REF>: Likewise.\n\t(gnat_invariant_expr): Likewise.\n\t* gcc-interface/utils.c (compute_related_constant): Likewise.\n\t(max_size): Fix handling of SAVE_EXPR.\n\t(remove_conversions): Fix formatting.\n\nFrom-SVN: r179873", "tree": {"sha": "715fe2d48f137b425b9e5f3667210c13f8fb9dbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/715fe2d48f137b425b9e5f3667210c13f8fb9dbd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/722356ce27601ee33c0aabfa939af8367ac11d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/722356ce27601ee33c0aabfa939af8367ac11d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/722356ce27601ee33c0aabfa939af8367ac11d54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/722356ce27601ee33c0aabfa939af8367ac11d54/comments", "author": null, "committer": null, "parents": [{"sha": "4eb20b036e26aedb39beae5de3ec4efeb7a097e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eb20b036e26aedb39beae5de3ec4efeb7a097e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eb20b036e26aedb39beae5de3ec4efeb7a097e8"}], "stats": {"total": 61, "additions": 29, "deletions": 32}, "files": [{"sha": "a6cc689e91cb6b4edef2a928887b2358321f280a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/722356ce27601ee33c0aabfa939af8367ac11d54/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/722356ce27601ee33c0aabfa939af8367ac11d54/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=722356ce27601ee33c0aabfa939af8367ac11d54", "patch": "@@ -1,3 +1,14 @@\n+2011-10-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Attribute_to_gnu): Use remove_conversions.\n+\t(push_range_check_info): Likewise.\n+\t(gnat_to_gnu) <N_Code_Statement>: Likewise.\n+\t* gcc-interface/utils2.c (build_unary_op) <INDIRECT_REF>: Likewise.\n+\t(gnat_invariant_expr): Likewise.\n+\t* gcc-interface/utils.c (compute_related_constant): Likewise.\n+\t(max_size): Fix handling of SAVE_EXPR.\n+\t(remove_conversions): Fix formatting.\n+\n 2011-10-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (DECL_LOOP_PARM_P): New flag."}, {"sha": "faf5eb3f3ea34f24d387de885733cac8390e9843", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/722356ce27601ee33c0aabfa939af8367ac11d54/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/722356ce27601ee33c0aabfa939af8367ac11d54/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=722356ce27601ee33c0aabfa939af8367ac11d54", "patch": "@@ -1364,10 +1364,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t don't try to build a trampoline.  */\n       if (attribute == Attr_Code_Address)\n \t{\n-\t  for (gnu_expr = gnu_result;\n-\t       CONVERT_EXPR_P (gnu_expr);\n-\t       gnu_expr = TREE_OPERAND (gnu_expr, 0))\n-\t    TREE_CONSTANT (gnu_expr) = 1;\n+\t  gnu_expr = remove_conversions (gnu_result, false);\n \n \t  if (TREE_CODE (gnu_expr) == ADDR_EXPR)\n \t    TREE_NO_TRAMPOLINE (gnu_expr) = TREE_CONSTANT (gnu_expr) = 1;\n@@ -1378,10 +1375,7 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t a useful warning with -Wtrampolines.  */\n       else if (TREE_CODE (TREE_TYPE (gnu_prefix)) == FUNCTION_TYPE)\n \t{\n-\t  for (gnu_expr = gnu_result;\n-\t       CONVERT_EXPR_P (gnu_expr);\n-\t       gnu_expr = TREE_OPERAND (gnu_expr, 0))\n-\t    ;\n+\t  gnu_expr = remove_conversions (gnu_result, false);\n \n \t  if (TREE_CODE (gnu_expr) == ADDR_EXPR\n \t      && decl_function_context (TREE_OPERAND (gnu_expr, 0)))\n@@ -2156,8 +2150,7 @@ push_range_check_info (tree var)\n   if (VEC_empty (loop_info, gnu_loop_stack))\n     return NULL;\n \n-  while (CONVERT_EXPR_P (var) || TREE_CODE (var) == VIEW_CONVERT_EXPR)\n-    var = TREE_OPERAND (var, 0);\n+  var = remove_conversions (var, false);\n \n   if (TREE_CODE (var) != VAR_DECL)\n     return NULL;\n@@ -6139,7 +6132,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t     is modelled on the C front-end.  */\n \t\t  if (!allows_reg)\n \t\t    {\n-\t\t      STRIP_NOPS (output);\n+\t\t      output = remove_conversions (output, false);\n \t\t      if (TREE_CODE (output) == CONST_DECL\n \t\t\t  && DECL_CONST_CORRESPONDING_VAR (output))\n \t\t\toutput = DECL_CONST_CORRESPONDING_VAR (output);\n@@ -6167,7 +6160,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t     mark it addressable.  */\n \t\t  if (!allows_reg && allows_mem)\n \t\t    {\n-\t\t      STRIP_NOPS (input);\n+\t\t      input = remove_conversions (input, false);\n \t\t      if (TREE_CODE (input) == CONST_DECL\n \t\t\t  && DECL_CONST_CORRESPONDING_VAR (input))\n \t\t\tinput = DECL_CONST_CORRESPONDING_VAR (input);"}, {"sha": "272c192dbeecdafd4c20a14e8e4ac7dfe9183103", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/722356ce27601ee33c0aabfa939af8367ac11d54/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/722356ce27601ee33c0aabfa939af8367ac11d54/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=722356ce27601ee33c0aabfa939af8367ac11d54", "patch": "@@ -1147,11 +1147,11 @@ compute_related_constant (tree op0, tree op1)\n static tree\n split_plus (tree in, tree *pvar)\n {\n-  /* Strip NOPS in order to ease the tree traversal and maximize the\n-     potential for constant or plus/minus discovery. We need to be careful\n+  /* Strip conversions in order to ease the tree traversal and maximize the\n+     potential for constant or plus/minus discovery.  We need to be careful\n      to always return and set *pvar to bitsizetype trees, but it's worth\n      the effort.  */\n-  STRIP_NOPS (in);\n+  in = remove_conversions (in, false);\n \n   *pvar = convert (bitsizetype, in);\n \n@@ -2288,7 +2288,9 @@ max_size (tree exp, bool max_p)\n       switch (TREE_CODE_LENGTH (code))\n \t{\n \tcase 1:\n-\t  if (code == NON_LVALUE_EXPR)\n+\t  if (code == SAVE_EXPR)\n+\t    return exp;\n+\t  else if (code == NON_LVALUE_EXPR)\n \t    return max_size (TREE_OPERAND (exp, 0), max_p);\n \t  else\n \t    return\n@@ -2330,9 +2332,7 @@ max_size (tree exp, bool max_p)\n \t  }\n \n \tcase 3:\n-\t  if (code == SAVE_EXPR)\n-\t    return exp;\n-\t  else if (code == COND_EXPR)\n+\t  if (code == COND_EXPR)\n \t    return fold_build2 (max_p ? MAX_EXPR : MIN_EXPR, type,\n \t\t\t\tmax_size (TREE_OPERAND (exp, 1), max_p),\n \t\t\t\tmax_size (TREE_OPERAND (exp, 2), max_p));\n@@ -4359,8 +4359,9 @@ remove_conversions (tree exp, bool true_address)\n \treturn remove_conversions (TREE_OPERAND (exp, 0), true_address);\n       break;\n \n-    case VIEW_CONVERT_EXPR:  case NON_LVALUE_EXPR:\n     CASE_CONVERT:\n+    case VIEW_CONVERT_EXPR:\n+    case NON_LVALUE_EXPR:\n       return remove_conversions (TREE_OPERAND (exp, 0), true_address);\n \n     default:"}, {"sha": "10d12ef7ea3092b8a7fd35754c8a079d6ad68a0a", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/722356ce27601ee33c0aabfa939af8367ac11d54/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/722356ce27601ee33c0aabfa939af8367ac11d54/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=722356ce27601ee33c0aabfa939af8367ac11d54", "patch": "@@ -1277,13 +1277,8 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \n     case INDIRECT_REF:\n       {\n-\tbool can_never_be_null;\n-\ttree t = operand;\n-\n-\twhile (CONVERT_EXPR_P (t) || TREE_CODE (t) == VIEW_CONVERT_EXPR)\n-\t  t = TREE_OPERAND (t, 0);\n-\n-\tcan_never_be_null = DECL_P (t) && DECL_CAN_NEVER_BE_NULL_P (t);\n+\ttree t = remove_conversions (operand, false);\n+\tbool can_never_be_null = DECL_P (t) && DECL_CAN_NEVER_BE_NULL_P (t);\n \n \t/* If TYPE is a thin pointer, first convert to the fat pointer.  */\n \tif (TYPE_IS_THIN_POINTER_P (type)\n@@ -2608,16 +2603,13 @@ gnat_invariant_expr (tree expr)\n {\n   tree type = TREE_TYPE (expr), t;\n \n-  STRIP_NOPS (expr);\n+  expr = remove_conversions (expr, false);\n \n   while ((TREE_CODE (expr) == CONST_DECL\n \t  || (TREE_CODE (expr) == VAR_DECL && TREE_READONLY (expr)))\n \t && decl_function_context (expr) == current_function_decl\n \t && DECL_INITIAL (expr))\n-    {\n-      expr = DECL_INITIAL (expr);\n-      STRIP_NOPS (expr);\n-    }\n+    expr = remove_conversions (DECL_INITIAL (expr), false);\n \n   if (TREE_CONSTANT (expr))\n     return fold_convert (type, expr);"}]}