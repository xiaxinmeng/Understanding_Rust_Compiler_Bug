{"sha": "469225d8467fa26d92e1a66ab82e1f7963e3a7cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY5MjI1ZDg0NjdmYTI2ZDkyZTFhNjZhYjgyZTFmNzk2M2UzYTdjYw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-11T23:09:00Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-02-11T23:09:00Z"}, "message": "(expand_call): When setting n_named_args, depend on new\nmacro STRICT_ARGUMENT_NAMING.\n\nFrom-SVN: r8911", "tree": {"sha": "bef4801861b553c5f475d6104558a7b3d29398a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bef4801861b553c5f475d6104558a7b3d29398a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/469225d8467fa26d92e1a66ab82e1f7963e3a7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469225d8467fa26d92e1a66ab82e1f7963e3a7cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469225d8467fa26d92e1a66ab82e1f7963e3a7cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469225d8467fa26d92e1a66ab82e1f7963e3a7cc/comments", "author": null, "committer": null, "parents": [{"sha": "ecacce3776083c912a790422c7f54b91deecd7dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecacce3776083c912a790422c7f54b91deecd7dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecacce3776083c912a790422c7f54b91deecd7dc"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "1b5466b6af54b1a6ad930af350232f1ba6c976db", "filename": "gcc/calls.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/469225d8467fa26d92e1a66ab82e1f7963e3a7cc/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/469225d8467fa26d92e1a66ab82e1f7963e3a7cc/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=469225d8467fa26d92e1a66ab82e1f7963e3a7cc", "patch": "@@ -932,23 +932,29 @@ expand_call (exp, target, ignore)\n \n   /* Compute number of named args.\n      Normally, don't include the last named arg if anonymous args follow.\n-     (If no anonymous args follow, the result of list_length\n-     is actually one too large.)\n+     We do include the last named arg if STRICT_ARGUMENT_NAMING is defined.\n+     (If no anonymous args follow, the result of list_length is actually\n+     one too large.  This is harmless.)\n \n-     If SETUP_INCOMING_VARARGS is defined, this machine will be able to\n-     place unnamed args that were passed in registers into the stack.  So\n-     treat all args as named.  This allows the insns emitting for a specific\n-     argument list to be independent of the function declaration.\n+     If SETUP_INCOMING_VARARGS is defined and STRICT_ARGUMENT_NAMING is not,\n+     this machine will be able to place unnamed args that were passed in\n+     registers into the stack.  So treat all args as named.  This allows the\n+     insns emitting for a specific argument list to be independent of the\n+     function declaration.\n \n      If SETUP_INCOMING_VARARGS is not defined, we do not have any reliable\n      way to pass unnamed args in registers, so we must force them into\n      memory.  */\n-#ifndef SETUP_INCOMING_VARARGS\n+#if !defined(SETUP_INCOMING_VARARGS) || defined(STRICT_ARGUMENT_NAMING)\n   if (TYPE_ARG_TYPES (funtype) != 0)\n     n_named_args\n-      = list_length (TYPE_ARG_TYPES (funtype)) - 1\n+      = list_length (TYPE_ARG_TYPES (funtype))\n+#ifndef STRICT_ARGUMENT_NAMING\n+\t/* Don't include the last named arg.  */\n+\t- 1\n+#endif\n \t/* Count the struct value address, if it is passed as a parm.  */\n-\t+ structure_value_addr_parm;\n+\t+ structure_value_addr_parm);\n   else\n #endif\n     /* If we know nothing, treat all args as named.  */"}]}