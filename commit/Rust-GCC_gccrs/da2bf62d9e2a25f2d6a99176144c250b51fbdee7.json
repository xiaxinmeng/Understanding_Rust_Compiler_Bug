{"sha": "da2bf62d9e2a25f2d6a99176144c250b51fbdee7", "node_id": "C_kwDOANBUbNoAKGRhMmJmNjJkOWUyYTI1ZjJkNmE5OTE3NjE0NGMyNTBiNTFmYmRlZTc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-09T09:55:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-09T13:03:31Z"}, "message": "tree-optimization/104445 - check for vector extraction support\n\nThis adds a missing check to epilogue reduction re-use, namely\nthat we can do hi/lo extracts from the vector when demoting it\nto the epilogue vector size.\n\nI've chosen to add a can_vec_extract helper to optabs-query.h,\nin the future we might want to simplify the vectorizers life by\nhandling vector-from-vector extraction via BIT_FIELD_REFs during\nRTL expansion via the mode punning when the vec_extract is not\ndirectly supported.\n\nI'm not 100% sure we can always do the punning of the\nvec_extract result to a vector mode of the same size, but then\nI'm also not sure how to check for that (the vectorizer doesn't\nin other places it does that at the moment, but I suppose we\neventually just go through memory there)?\n\n2022-02-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104445\n\tPR tree-optimization/102832\n\t* optabs-query.h (can_vec_extract): New.\n\t* optabs-query.cc (can_vec_extract): Likewise.\n\t* tree-vect-loop.cc (vect_find_reusable_accumulator): Check\n\twe can extract a hi/lo part from the larger vector, rework\n\tcheck iteration from larger to smaller sizes.\n\n\t* gcc.dg/vect/pr104445.c: New testcase.", "tree": {"sha": "c9b7384cd0a3becee9cb8f89c0c407b79d9e76f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9b7384cd0a3becee9cb8f89c0c407b79d9e76f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da2bf62d9e2a25f2d6a99176144c250b51fbdee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2bf62d9e2a25f2d6a99176144c250b51fbdee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da2bf62d9e2a25f2d6a99176144c250b51fbdee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0b5fbfe90168d2e470aefb19e0cf31526290bc"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "713c098ba4ead34cf8d59046d75fc0ed62a11f33", "filename": "gcc/optabs-query.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/gcc%2Foptabs-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/gcc%2Foptabs-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.cc?ref=da2bf62d9e2a25f2d6a99176144c250b51fbdee7", "patch": "@@ -763,3 +763,31 @@ supports_vec_scatter_store_p (machine_mode mode)\n   return this_fn_optabs->supports_vec_scatter_store[mode] > 0;\n }\n \n+/* Whether we can extract part of the vector mode MODE as\n+   (scalar or vector) mode EXTR_MODE.  */\n+\n+bool\n+can_vec_extract (machine_mode mode, machine_mode extr_mode)\n+{\n+  unsigned m;\n+  if (!VECTOR_MODE_P (mode)\n+      || !constant_multiple_p (GET_MODE_SIZE (mode),\n+\t\t\t       GET_MODE_SIZE (extr_mode), &m))\n+    return false;\n+\n+  if (convert_optab_handler (vec_extract_optab, mode, extr_mode)\n+      != CODE_FOR_nothing)\n+    return true;\n+\n+  /* Besides a direct vec_extract we can also use an element extract from\n+     an integer vector mode with elements of the size of the extr_mode.  */\n+  scalar_int_mode imode;\n+  machine_mode vmode;\n+  if (!int_mode_for_size (GET_MODE_BITSIZE (extr_mode), 0).exists (&imode)\n+      || !related_vector_mode (mode, imode, m).exists (&vmode)\n+      || (convert_optab_handler (vec_extract_optab, vmode, imode)\n+\t  == CODE_FOR_nothing))\n+    return false;\n+  /* We assume we can pun mode to vmode and imode to extr_mode.  */\n+  return true;\n+}"}, {"sha": "b9c9fd6f64d90b8c3457bb06093b17dce6fcbfa7", "filename": "gcc/optabs-query.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/gcc%2Foptabs-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/gcc%2Foptabs-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.h?ref=da2bf62d9e2a25f2d6a99176144c250b51fbdee7", "patch": "@@ -195,6 +195,7 @@ bool can_atomic_load_p (machine_mode);\n bool lshift_cheap_p (bool);\n bool supports_vec_gather_load_p (machine_mode = E_VOIDmode);\n bool supports_vec_scatter_store_p (machine_mode = E_VOIDmode);\n+bool can_vec_extract (machine_mode, machine_mode);\n \n /* Version of find_widening_optab_handler_and_mode that operates on\n    specific mode types.  */"}, {"sha": "7cb4db5e4c7d390ee24d0ce783452cc9f8f05717", "filename": "gcc/testsuite/gcc.dg/vect/pr102832.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr102832.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr102832.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr102832.c?ref=da2bf62d9e2a25f2d6a99176144c250b51fbdee7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve -msve-vector-bits=128\" { target aarch64-*-* } } */\n+\n+int a, b;\n+char c;\n+signed char d(int e, int f) { return e - f; }\n+void g() {\n+  a = 0;\n+  for (; a >= -17; a = d(a, 1))\n+    c ^= b;\n+}"}, {"sha": "8ec3b3b0f1ebc9bacf2dfe1741111466fa25921a", "filename": "gcc/testsuite/gcc.dg/vect/pr104445.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104445.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104445.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104445.c?ref=da2bf62d9e2a25f2d6a99176144c250b51fbdee7", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-additional-options \"-mavx -mno-mmx\" { target x86_64-*-* i?86-*-* } } */\n+\n+signed char a;\n+signed char f (int i, int j)\n+{\n+  signed char c;\n+  while (i != 0)\n+  {\n+    a ^= j;\n+    ++c;\n+    ++i;\n+  }\n+  return c;\n+}"}, {"sha": "896218f23ea6fbd703076163b17ad40e984ed676", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da2bf62d9e2a25f2d6a99176144c250b51fbdee7/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=da2bf62d9e2a25f2d6a99176144c250b51fbdee7", "patch": "@@ -4997,17 +4997,21 @@ vect_find_reusable_accumulator (loop_vec_info loop_vinfo,\n   if (!constant_multiple_p (TYPE_VECTOR_SUBPARTS (old_vectype),\n \t\t\t    TYPE_VECTOR_SUBPARTS (vectype), &m))\n     return false;\n-  /* Check the intermediate vector types are available.  */\n-  while (m > 2)\n+  /* Check the intermediate vector types and operations are available.  */\n+  tree prev_vectype = old_vectype;\n+  poly_uint64 intermediate_nunits = TYPE_VECTOR_SUBPARTS (old_vectype);\n+  while (known_gt (intermediate_nunits, TYPE_VECTOR_SUBPARTS (vectype)))\n     {\n-      m /= 2;\n+      intermediate_nunits = exact_div (intermediate_nunits, 2);\n       tree intermediate_vectype = get_related_vectype_for_scalar_type\n-\t(TYPE_MODE (vectype), TREE_TYPE (vectype),\n-\t exact_div (TYPE_VECTOR_SUBPARTS (old_vectype), m));\n+\t(TYPE_MODE (vectype), TREE_TYPE (vectype), intermediate_nunits);\n       if (!intermediate_vectype\n \t  || !directly_supported_p (STMT_VINFO_REDUC_CODE (reduc_info),\n-\t\t\t\t    intermediate_vectype))\n+\t\t\t\t    intermediate_vectype)\n+\t  || !can_vec_extract (TYPE_MODE (prev_vectype),\n+\t\t\t       TYPE_MODE (intermediate_vectype)))\n \treturn false;\n+      prev_vectype = intermediate_vectype;\n     }\n \n   /* Non-SLP reductions might apply an adjustment after the reduction"}]}