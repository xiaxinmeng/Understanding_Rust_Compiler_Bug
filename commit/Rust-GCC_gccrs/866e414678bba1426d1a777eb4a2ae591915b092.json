{"sha": "866e414678bba1426d1a777eb4a2ae591915b092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY2ZTQxNDY3OGJiYTE0MjZkMWE3NzdlYjRhMmFlNTkxOTE1YjA5Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-27T04:04:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-27T04:04:40Z"}, "message": "re PR c++/47721 ([C++0x] Updated friendship rules?)\n\n\tPR c++/47721\n\t* parser.c (cp_parser_member_declaration): Allow friend T.\n\t* friend.c (make_friend_class): Ignore non-classes.\n\t* pt.c (instantiate_class_template_1): Handle TEMPLATE_TYPE_PARM.\n\nFrom-SVN: r174319", "tree": {"sha": "7375a36b894bcab99a69b2597ab44cb65898175b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7375a36b894bcab99a69b2597ab44cb65898175b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/866e414678bba1426d1a777eb4a2ae591915b092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866e414678bba1426d1a777eb4a2ae591915b092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/866e414678bba1426d1a777eb4a2ae591915b092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866e414678bba1426d1a777eb4a2ae591915b092/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ac537d7b4983abe5eebe510c798bede816c8165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ac537d7b4983abe5eebe510c798bede816c8165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ac537d7b4983abe5eebe510c798bede816c8165"}], "stats": {"total": 99, "additions": 90, "deletions": 9}, "files": [{"sha": "ed758c4e050b0b1f1f652e0d46abd539c55bf137", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=866e414678bba1426d1a777eb4a2ae591915b092", "patch": "@@ -1,5 +1,10 @@\n 2011-05-26  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/47721\n+\t* parser.c (cp_parser_member_declaration): Allow friend T.\n+\t* friend.c (make_friend_class): Ignore non-classes.\n+\t* pt.c (instantiate_class_template_1): Handle TEMPLATE_TYPE_PARM.\n+\n \tDR 1004\n \t* pt.c (convert_template_argument): Don't complain about using\n \tinjected-class-name as template template argument."}, {"sha": "36fcca4f737eca7a4937ee94ee8b844c1d096777", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=866e414678bba1426d1a777eb4a2ae591915b092", "patch": "@@ -226,7 +226,14 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \n   if (! MAYBE_CLASS_TYPE_P (friend_type))\n     {\n-      error (\"invalid type %qT declared %<friend%>\", friend_type);\n+      /* N1791: If the type specifier in a friend declaration designates a\n+\t (possibly cv-qualified) class type, that class is declared as a\n+\t friend; otherwise, the friend declaration is ignored.\n+\n+         So don't complain in C++0x mode.  */\n+      if (cxx_dialect < cxx0x)\n+\tpedwarn (input_location, complain ? 0 : OPT_pedantic,\n+\t\t \"invalid type %qT declared %<friend%>\", friend_type);\n       return;\n     }\n "}, {"sha": "135ab145fb86989544acedbd061ec61ff467155c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=866e414678bba1426d1a777eb4a2ae591915b092", "patch": "@@ -17758,9 +17758,10 @@ cp_parser_member_declaration (cp_parser* parser)\n \t    {\n \t      /* If the `friend' keyword was present, the friend must\n \t\t be introduced with a class-key.  */\n-\t       if (!declares_class_or_enum)\n-\t\t error_at (decl_spec_token_start->location,\n-\t\t\t   \"a class-key must be used when declaring a friend\");\n+\t       if (!declares_class_or_enum && cxx_dialect < cxx0x)\n+\t\t pedwarn (decl_spec_token_start->location, OPT_pedantic,\n+\t\t\t  \"in C++03 a class-key must be used \"\n+\t\t\t  \"when declaring a friend\");\n \t       /* In this case:\n \n \t\t    template <typename T> struct A {\n@@ -17769,10 +17770,12 @@ cp_parser_member_declaration (cp_parser* parser)\n \n \t\t  A<T>::B will be represented by a TYPENAME_TYPE, and\n \t\t  therefore not recognized by check_tag_decl.  */\n-\t       if (!type\n-\t\t   && decl_specifiers.type\n-\t\t   && TYPE_P (decl_specifiers.type))\n-\t\t type = decl_specifiers.type;\n+\t       if (!type)\n+\t\t {\n+\t\t   type = decl_specifiers.type;\n+\t\t   if (type && TREE_CODE (type) == TYPE_DECL)\n+\t\t     type = TREE_TYPE (type);\n+\t\t }\n \t       if (!type || !TYPE_P (type))\n \t\t error_at (decl_spec_token_start->location,\n \t\t\t   \"friend declaration does not name a class or \""}, {"sha": "767c4f6c584255154faaa701f81bf8c6749fc185", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=866e414678bba1426d1a777eb4a2ae591915b092", "patch": "@@ -8472,7 +8472,8 @@ instantiate_class_template_1 (tree type)\n \t\t    friend_type = TREE_TYPE (friend_type);\n \t\t  adjust_processing_template_decl = true;\n \t\t}\n-\t      else if (TREE_CODE (friend_type) == TYPENAME_TYPE)\n+\t      else if (TREE_CODE (friend_type) == TYPENAME_TYPE\n+\t\t       || TREE_CODE (friend_type) == TEMPLATE_TYPE_PARM)\n \t\t{\n \t\t  /* This could be either\n "}, {"sha": "a6ce74b472aaa568b396310be6233a365313b618", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=866e414678bba1426d1a777eb4a2ae591915b092", "patch": "@@ -1,5 +1,8 @@\n 2011-05-26  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/friend1.C: New.\n+\t* g++.dg/cpp0x/friend2.C: New.\n+\n \t* g++.dg/cpp0x/auto7.C: Update.\n \t* g++.dg/template/crash50.C: Adjust.\n \t* g++.dg/template/static9.C: Adjust."}, {"sha": "2cf4c3c715ad98ad59c651588827e46bab951a77", "filename": "gcc/testsuite/g++.dg/cpp0x/friend1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend1.C?ref=866e414678bba1426d1a777eb4a2ae591915b092", "patch": "@@ -0,0 +1,22 @@\n+// From N1791\n+// { dg-options -std=c++0x }\n+\n+class C;\n+typedef C Ct;\n+class X1 {\n+  friend C;\t\t// OK: class C is a friend\n+};\n+\n+class X2\n+{\n+  friend Ct;\t\t// OK: class C is a friend\n+  friend D;\t\t// { dg-error \"\" } no type-name D in scope\n+  friend class D;\t// OK: elaborated-type-specifier declares new class\n+};\n+\n+template <typename T> class R {\n+  friend T;\n+};\n+\n+R<C> rc;\t\t// class C is a friend of R<C>\n+R<int> Ri;\t\t// OK: \"friend int;\" is ignored"}, {"sha": "39276a05ac3803645e502ddabe46fa989514aa8a", "filename": "gcc/testsuite/g++.dg/cpp0x/friend2.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866e414678bba1426d1a777eb4a2ae591915b092/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ffriend2.C?ref=866e414678bba1426d1a777eb4a2ae591915b092", "patch": "@@ -0,0 +1,40 @@\n+// PR c++/47721\n+// { dg-options -std=c++0x }\n+\n+// template type parameter friend:\n+\n+template<class W>\n+class Q\n+{\n+  static const int I = 2;\n+public:\n+  friend W;\n+};\n+\n+struct B\n+{\n+  int ar[Q<B>::I];\n+};\n+\n+// bonus template template parameter friend:\n+\n+template <class T> struct A;\n+\n+template<template <class> class W>\n+class P\n+{\n+  static const int I = 2;\n+public:\n+  // I'm not sure this is well-formed, but I can't find anything\n+  // that says otherwise.\n+  template <class T> friend class W;\n+};\n+\n+template <class T>\n+struct A\n+{\n+  int ar[P<A>::I];\n+};\n+\n+A<int> a;\n+"}]}