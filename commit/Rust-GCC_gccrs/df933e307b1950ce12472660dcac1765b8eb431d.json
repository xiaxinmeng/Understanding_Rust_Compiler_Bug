{"sha": "df933e307b1950ce12472660dcac1765b8eb431d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY5MzNlMzA3YjE5NTBjZTEyNDcyNjYwZGNhYzE3NjViOGViNDMxZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-02T22:11:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-12-04T19:45:25Z"}, "message": "vec: Simplify use with C++11 range-based 'for'.\n\nIt looks cleaner if we can use a vec* directly as a range for the C++11\nrange-based 'for' loop, without needing to indirect from it, and also works\nwith null pointers.\n\nThe change in cp_parser_late_parsing_default_args is an example of how this\ncan be used to simplify a simple loop over a vector.  Reverse or subset\niteration will require adding range adaptors.\n\nI deliberately didn't format the new overloads for etags since they are\ntrivial.\n\ngcc/ChangeLog:\n\n\t* vec.h (begin, end): Add overloads for vec*.\n\t* tree.c (build_constructor_from_vec): Remove *.\n\ngcc/cp/ChangeLog:\n\n\t* decl2.c (clear_consteval_vfns): Remove *.\n\t* pt.c (do_auto_deduction): Remove *.\n\t* parser.c (cp_parser_late_parsing_default_args): Change loop\n\tto use range 'for'.", "tree": {"sha": "6eeefb7f2051c8c3525431d0e35f8b5668922172", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eeefb7f2051c8c3525431d0e35f8b5668922172"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df933e307b1950ce12472660dcac1765b8eb431d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df933e307b1950ce12472660dcac1765b8eb431d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df933e307b1950ce12472660dcac1765b8eb431d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df933e307b1950ce12472660dcac1765b8eb431d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b96802994acb47d5a86d9112d7b1eeda9418827f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96802994acb47d5a86d9112d7b1eeda9418827f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b96802994acb47d5a86d9112d7b1eeda9418827f"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "46069cb66a6b128972889ff62fda3dc46d32329c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df933e307b1950ce12472660dcac1765b8eb431d/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df933e307b1950ce12472660dcac1765b8eb431d/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=df933e307b1950ce12472660dcac1765b8eb431d", "patch": "@@ -1928,7 +1928,7 @@ static void\n clear_consteval_vfns (vec<tree> &consteval_vtables)\n {\n   for (tree vtable : consteval_vtables)\n-    for (constructor_elt &elt : *CONSTRUCTOR_ELTS (DECL_INITIAL (vtable)))\n+    for (constructor_elt &elt : CONSTRUCTOR_ELTS (DECL_INITIAL (vtable)))\n       {\n \ttree fn = cp_get_fndecl_from_callee (elt.value, /*fold*/false);\n \tif (fn && DECL_IMMEDIATE_FUNCTION_P (fn))"}, {"sha": "cc3da155032c8a1c46583cc66e706dcdd2ce7994", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df933e307b1950ce12472660dcac1765b8eb431d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df933e307b1950ce12472660dcac1765b8eb431d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=df933e307b1950ce12472660dcac1765b8eb431d", "patch": "@@ -30611,9 +30611,6 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n     {\n       tree default_arg = TREE_PURPOSE (parm);\n       tree parsed_arg;\n-      vec<tree, va_gc> *insts;\n-      tree copy;\n-      unsigned ix;\n \n       tree parmdecl = parms[i];\n       pushdecl (parmdecl);\n@@ -30633,8 +30630,7 @@ cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)\n       TREE_PURPOSE (parm) = parsed_arg;\n \n       /* Update any instantiations we've already created.  */\n-      for (insts = DEFPARSE_INSTANTIATIONS (default_arg), ix = 0;\n-\t   vec_safe_iterate (insts, ix, &copy); ix++)\n+      for (tree copy : DEFPARSE_INSTANTIATIONS (default_arg))\n \tTREE_PURPOSE (copy) = parsed_arg;\n     }\n "}, {"sha": "e991a323de8fb9f4146153d5167cd6d4c3c87ea9", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df933e307b1950ce12472660dcac1765b8eb431d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df933e307b1950ce12472660dcac1765b8eb431d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=df933e307b1950ce12472660dcac1765b8eb431d", "patch": "@@ -29280,7 +29280,7 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n       /* We don't recurse here because we can't deduce from a nested\n \t initializer_list.  */\n       if (CONSTRUCTOR_ELTS (init))\n-\tfor (constructor_elt &elt : *CONSTRUCTOR_ELTS (init))\n+\tfor (constructor_elt &elt : CONSTRUCTOR_ELTS (init))\n \t  elt.value = resolve_nondeduced_context (elt.value, complain);\n     }\n   else"}, {"sha": "02ce5ddcd4918a063636340ba98f473d5c69c92b", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df933e307b1950ce12472660dcac1765b8eb431d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df933e307b1950ce12472660dcac1765b8eb431d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=df933e307b1950ce12472660dcac1765b8eb431d", "patch": "@@ -2185,7 +2185,7 @@ build_constructor_from_vec (tree type, const vec<tree, va_gc> *vals)\n {\n   vec<constructor_elt, va_gc> *v = NULL;\n \n-  for (tree t : *vals)\n+  for (tree t : vals)\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, t);\n \n   return build_constructor (type, v);"}, {"sha": "09166f1bce6bb24891e845010a2cf1c4905f0ad8", "filename": "gcc/vec.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df933e307b1950ce12472660dcac1765b8eb431d/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df933e307b1950ce12472660dcac1765b8eb431d/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=df933e307b1950ce12472660dcac1765b8eb431d", "patch": "@@ -419,6 +419,16 @@ struct GTY((user)) vec\n {\n };\n \n+/* Allow C++11 range-based 'for' to work directly on vec<T>*.  */\n+template<typename T, typename A, typename L>\n+T* begin (vec<T,A,L> *v) { return v ? v->begin () : nullptr; }\n+template<typename T, typename A, typename L>\n+T* end (vec<T,A,L> *v) { return v ? v->end () : nullptr; }\n+template<typename T, typename A, typename L>\n+const T* begin (const vec<T,A,L> *v) { return v ? v->begin () : nullptr; }\n+template<typename T, typename A, typename L>\n+const T* end (const vec<T,A,L> *v) { return v ? v->end () : nullptr; }\n+\n /* Generic vec<> debug helpers.\n \n    These need to be instantiated for each vec<TYPE> used throughout"}]}