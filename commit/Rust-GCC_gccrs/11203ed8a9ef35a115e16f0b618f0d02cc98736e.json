{"sha": "11203ed8a9ef35a115e16f0b618f0d02cc98736e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEyMDNlZDhhOWVmMzVhMTE1ZTE2ZjBiNjE4ZjBkMDJjYzk4NzM2ZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-15T19:31:31Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-15T19:31:31Z"}, "message": "Use whether DImode variables are used as basis for chosing register alloc order dca\n\nFrom-SVN: r8087", "tree": {"sha": "ed4cff0b5ff3d162f1616563f0b4f47f4c3baae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed4cff0b5ff3d162f1616563f0b4f47f4c3baae9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11203ed8a9ef35a115e16f0b618f0d02cc98736e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11203ed8a9ef35a115e16f0b618f0d02cc98736e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11203ed8a9ef35a115e16f0b618f0d02cc98736e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11203ed8a9ef35a115e16f0b618f0d02cc98736e/comments", "author": null, "committer": null, "parents": [{"sha": "485fafaa1521a5db4994ec7d26d46a531f25d21e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/485fafaa1521a5db4994ec7d26d46a531f25d21e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/485fafaa1521a5db4994ec7d26d46a531f25d21e"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "0e9d4b3a6994641a010ea8fe807e361441ea4996", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11203ed8a9ef35a115e16f0b618f0d02cc98736e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11203ed8a9ef35a115e16f0b618f0d02cc98736e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=11203ed8a9ef35a115e16f0b618f0d02cc98736e", "patch": "@@ -172,18 +172,49 @@ order_regs_for_local_alloc ()\n     }\n \n   /* If users did not specify a register allocation order, favor eax\n-     normally except if cse is following jumps, then favor edx so\n-     that function returns are cse'ed */\n+     normally except if DImode variables are used, in which case\n+     favor edx before eax, which seems to cause less spill register\n+     not found messages.  */\n   else\n     {\n+      rtx insn;\n+\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \treg_alloc_order[i] = i;\n \n-      if (optimize && flag_cse_follow_jumps && !leaf_function_p ())\n+      if (optimize)\n \t{\n-\t  reg_alloc_order[0] = 1;\t/* edx */\n-\t  reg_alloc_order[1] = 2;\t/* ecx */\n-\t  reg_alloc_order[2] = 0;\t/* eax */\n+\t  int use_dca = FALSE;\n+\n+\t  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+\t    {\n+\t      if (GET_CODE (insn) == INSN)\n+\t\t{\n+\t\t  rtx set = NULL_RTX;\n+\t\t  rtx pattern = PATTERN (insn);\n+\n+\t\t  if (GET_CODE (pattern) == SET)\n+\t\t    set = pattern;\n+\n+\t\t  else if ((GET_CODE (pattern) == PARALLEL\n+\t\t\t    || GET_CODE (pattern) == SEQUENCE)\n+\t\t\t   && GET_CODE (XVECEXP (pattern, 0, 0)) == SET)\n+\t\t    set = XVECEXP (pattern, 0, 0);\n+\n+\t\t  if (set && GET_MODE (SET_SRC (set)) == DImode)\n+\t\t    {\n+\t\t      use_dca = TRUE;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t    }\n+\n+\t  if (use_dca)\n+\t    {\n+\t      reg_alloc_order[0] = 1;\t/* edx */\n+\t      reg_alloc_order[1] = 2;\t/* ecx */\n+\t      reg_alloc_order[2] = 0;\t/* eax */\n+\t    }\n \t}\n     }\n }"}]}