{"sha": "420e7dfad9f58f508c1bc9fef2d083236a43ad85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIwZTdkZmFkOWY1OGY1MDhjMWJjOWZlZjJkMDgzMjM2YTQzYWQ4NQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2002-02-20T13:53:13Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2002-02-20T13:53:13Z"}, "message": "expmed.c (store_bit_field): Do not store bit fields using SUBREG operations if...\n\n\n\t* expmed.c (store_bit_field): Do not store bit fields using SUBREG\n\toperations if the field does not start at a mode boundary.\n\nFrom-SVN: r49899", "tree": {"sha": "133766631cb712f6838b7f41de0fef40a3f49010", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/133766631cb712f6838b7f41de0fef40a3f49010"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/420e7dfad9f58f508c1bc9fef2d083236a43ad85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420e7dfad9f58f508c1bc9fef2d083236a43ad85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/420e7dfad9f58f508c1bc9fef2d083236a43ad85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/420e7dfad9f58f508c1bc9fef2d083236a43ad85/comments", "author": null, "committer": null, "parents": [{"sha": "1b7a2af6dd6962ce0a05f4df876cef50840198cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b7a2af6dd6962ce0a05f4df876cef50840198cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b7a2af6dd6962ce0a05f4df876cef50840198cd"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "dedb5317a0ee54007f076933559b8e536a294e7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420e7dfad9f58f508c1bc9fef2d083236a43ad85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420e7dfad9f58f508c1bc9fef2d083236a43ad85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=420e7dfad9f58f508c1bc9fef2d083236a43ad85", "patch": "@@ -1,3 +1,8 @@\n+2002-02-20  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* expmed.c (store_bit_field): Do not store bit fields using SUBREG\n+\toperations if the field does not start at a mode boundary.\n+\n 2001-02-20\tJoel Sherrill <joel@OARcorp.com>\n \n \t* config/a29k/rtems.h, config/arm/rtems-elf.h, config/h8300/rtems.h,"}, {"sha": "973cbf16b5c85cd91cf0718e231c42fbac31a654", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/420e7dfad9f58f508c1bc9fef2d083236a43ad85/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/420e7dfad9f58f508c1bc9fef2d083236a43ad85/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=420e7dfad9f58f508c1bc9fef2d083236a43ad85", "patch": "@@ -299,6 +299,7 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, total_size)\n   unsigned HOST_WIDE_INT offset = bitnum / unit;\n   unsigned HOST_WIDE_INT bitpos = bitnum % unit;\n   rtx op0 = str_rtx;\n+  int byte_offset;\n \n   enum machine_mode op_mode = mode_for_extraction (EP_insv, 3);\n \n@@ -333,11 +334,15 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, total_size)\n      done with a simple store.  For targets that support fast unaligned\n      memory, any naturally sized, unit aligned field can be done directly.  */\n      \n+  byte_offset = (bitnum % BITS_PER_WORD) / BITS_PER_UNIT\n+                + (offset * UNITS_PER_WORD);\n+\n   if (bitpos == 0\n       && bitsize == GET_MODE_BITSIZE (fieldmode)\n       && (GET_CODE (op0) != MEM\n-\t  ? (GET_MODE_SIZE (fieldmode) >= UNITS_PER_WORD\n+\t  ? ((GET_MODE_SIZE (fieldmode) >= UNITS_PER_WORD\n \t     || GET_MODE_SIZE (GET_MODE (op0)) == GET_MODE_SIZE (fieldmode))\n+            && byte_offset % GET_MODE_SIZE (fieldmode) == 0)\n \t  : (! SLOW_UNALIGNED_ACCESS (fieldmode, MEM_ALIGN (op0))\n \t     || (offset * BITS_PER_UNIT % bitsize == 0\n \t\t && MEM_ALIGN (op0) % GET_MODE_BITSIZE (fieldmode) == 0))))\n@@ -357,9 +362,7 @@ store_bit_field (str_rtx, bitsize, bitnum, fieldmode, value, total_size)\n \t\tabort ();\n \t    }\n \t  if (GET_CODE (op0) == REG)\n-\t    op0 = gen_rtx_SUBREG (fieldmode, op0,\n-\t\t\t\t  (bitnum % BITS_PER_WORD) / BITS_PER_UNIT\n-\t\t\t\t  + (offset * UNITS_PER_WORD));\n+\t    op0 = gen_rtx_SUBREG (fieldmode, op0, byte_offset);\n \t  else\n \t    op0 = adjust_address (op0, fieldmode, offset);\n \t}"}]}