{"sha": "a57b73a786880590e3c1bc9f885bf84c9ed187ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU3YjczYTc4Njg4MDU5MGUzYzFiYzlmODg1YmY4NGM5ZWQxODdjZQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2008-11-01T02:24:07Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2008-11-01T02:24:07Z"}, "message": "* config/rs6000/crtsavres.asm: Really, really delete.\n\nFrom-SVN: r141509", "tree": {"sha": "bf29b667d82d9dcb206c18badfa69a44adb45589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf29b667d82d9dcb206c18badfa69a44adb45589"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a57b73a786880590e3c1bc9f885bf84c9ed187ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a57b73a786880590e3c1bc9f885bf84c9ed187ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a57b73a786880590e3c1bc9f885bf84c9ed187ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a57b73a786880590e3c1bc9f885bf84c9ed187ce/comments", "author": null, "committer": null, "parents": [{"sha": "19ce673106ac50203824077718aee488a4945327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ce673106ac50203824077718aee488a4945327", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ce673106ac50203824077718aee488a4945327"}], "stats": {"total": 310, "additions": 4, "deletions": 306}, "files": [{"sha": "73bb0752a895ad01b411fedfb5106041d1dea8db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a57b73a786880590e3c1bc9f885bf84c9ed187ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a57b73a786880590e3c1bc9f885bf84c9ed187ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a57b73a786880590e3c1bc9f885bf84c9ed187ce", "patch": "@@ -1,3 +1,7 @@\n+2008-10-31  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/rs6000/crtsavres.asm: Really, really delete.\n+\n 2008-10-31  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/rs6000/rs6000.c (no_global_regs_above): Fix precedence"}, {"sha": "7fea5232885e0038074ffc7a7af1c916a3e5bd80", "filename": "gcc/config/rs6000/crtsavres.asm", "status": "removed", "additions": 0, "deletions": 306, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ce673106ac50203824077718aee488a4945327/gcc%2Fconfig%2Frs6000%2Fcrtsavres.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ce673106ac50203824077718aee488a4945327/gcc%2Fconfig%2Frs6000%2Fcrtsavres.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtsavres.asm?ref=19ce673106ac50203824077718aee488a4945327", "patch": "@@ -1,306 +0,0 @@\n-/*\n- * Special support for eabi and SVR4\n- *\n- *   Copyright (C) 1995, 1996, 1998, 2000, 2001 Free Software Foundation, Inc.\n- *   Written By Michael Meissner\n- *   64-bit support written by David Edelsohn\n- * \n- * This file is free software; you can redistribute it and/or modify it\n- * under the terms of the GNU General Public License as published by the\n- * Free Software Foundation; either version 2, or (at your option) any\n- * later version.\n- * \n- * In addition to the permissions in the GNU General Public License, the\n- * Free Software Foundation gives you unlimited permission to link the\n- * compiled version of this file with other programs, and to distribute\n- * those programs without any restriction coming from the use of this\n- * file.  (The General Public License restrictions do apply in other\n- * respects; for example, they cover modification of the file, and\n- * distribution when not linked into another program.)\n- * \n- * This file is distributed in the hope that it will be useful, but\n- * WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * General Public License for more details.\n- * \n- * You should have received a copy of the GNU General Public License\n- * along with this program; see the file COPYING.  If not, write to\n- * the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n- * Boston, MA 02110-1301, USA.\n- * \n- *    As a special exception, if you link this library with files\n- *    compiled with GCC to produce an executable, this does not cause\n- *    the resulting executable to be covered by the GNU General Public License.\n- *    This exception does not however invalidate any other reasons why\n- *    the executable file might be covered by the GNU General Public License.\n- */ \n-\n-/* Do any initializations needed for the eabi environment */\n-\n-\t.section \".text\"\n-\t#include \"ppc-asm.h\"\n-\n-/* On PowerPC64 Linux, these functions are provided by the linker.  */\n-#ifndef __powerpc64__\n-\n-/* Routines for saving floating point registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the floating point save area.  */\n-\n-FUNC_START(_savefpr_14)\tstfd\t14,-144(11)\t/* save fp registers */\n-FUNC_START(_savefpr_15)\tstfd\t15,-136(11)\n-FUNC_START(_savefpr_16)\tstfd\t16,-128(11)\n-FUNC_START(_savefpr_17)\tstfd\t17,-120(11)\n-FUNC_START(_savefpr_18)\tstfd\t18,-112(11)\n-FUNC_START(_savefpr_19)\tstfd\t19,-104(11)\n-FUNC_START(_savefpr_20)\tstfd\t20,-96(11)\n-FUNC_START(_savefpr_21)\tstfd\t21,-88(11)\n-FUNC_START(_savefpr_22)\tstfd\t22,-80(11)\n-FUNC_START(_savefpr_23)\tstfd\t23,-72(11)\n-FUNC_START(_savefpr_24)\tstfd\t24,-64(11)\n-FUNC_START(_savefpr_25)\tstfd\t25,-56(11)\n-FUNC_START(_savefpr_26)\tstfd\t26,-48(11)\n-FUNC_START(_savefpr_27)\tstfd\t27,-40(11)\n-FUNC_START(_savefpr_28)\tstfd\t28,-32(11)\n-FUNC_START(_savefpr_29)\tstfd\t29,-24(11)\n-FUNC_START(_savefpr_30)\tstfd\t30,-16(11)\n-FUNC_START(_savefpr_31)\tstfd\t31,-8(11)\n-\t\t\tblr\n-FUNC_END(_savefpr_31)\n-FUNC_END(_savefpr_30)\n-FUNC_END(_savefpr_29)\n-FUNC_END(_savefpr_28)\n-FUNC_END(_savefpr_27)\n-FUNC_END(_savefpr_26)\n-FUNC_END(_savefpr_25)\n-FUNC_END(_savefpr_24)\n-FUNC_END(_savefpr_23)\n-FUNC_END(_savefpr_22)\n-FUNC_END(_savefpr_21)\n-FUNC_END(_savefpr_20)\n-FUNC_END(_savefpr_19)\n-FUNC_END(_savefpr_18)\n-FUNC_END(_savefpr_17)\n-FUNC_END(_savefpr_16)\n-FUNC_END(_savefpr_15)\n-FUNC_END(_savefpr_14)\n-\n-/* Routines for saving integer registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the integer save area.  */\n-\n-FUNC_START(_savegpr_14)\tstw\t14,-72(11)\t/* save gp registers */\n-FUNC_START(_savegpr_15)\tstw\t15,-68(11)\n-FUNC_START(_savegpr_16)\tstw\t16,-64(11)\n-FUNC_START(_savegpr_17)\tstw\t17,-60(11)\n-FUNC_START(_savegpr_18)\tstw\t18,-56(11)\n-FUNC_START(_savegpr_19)\tstw\t19,-52(11)\n-FUNC_START(_savegpr_20)\tstw\t20,-48(11)\n-FUNC_START(_savegpr_21)\tstw\t21,-44(11)\n-FUNC_START(_savegpr_22)\tstw\t22,-40(11)\n-FUNC_START(_savegpr_23)\tstw\t23,-36(11)\n-FUNC_START(_savegpr_24)\tstw\t24,-32(11)\n-FUNC_START(_savegpr_25)\tstw\t25,-28(11)\n-FUNC_START(_savegpr_26)\tstw\t26,-24(11)\n-FUNC_START(_savegpr_27)\tstw\t27,-20(11)\n-FUNC_START(_savegpr_28)\tstw\t28,-16(11)\n-FUNC_START(_savegpr_29)\tstw\t29,-12(11)\n-FUNC_START(_savegpr_30)\tstw\t30,-8(11)\n-FUNC_START(_savegpr_31)\tstw\t31,-4(11)\n-\t\t\tblr\n-FUNC_END(_savegpr_31)\n-FUNC_END(_savegpr_30)\n-FUNC_END(_savegpr_29)\n-FUNC_END(_savegpr_28)\n-FUNC_END(_savegpr_27)\n-FUNC_END(_savegpr_26)\n-FUNC_END(_savegpr_25)\n-FUNC_END(_savegpr_24)\n-FUNC_END(_savegpr_23)\n-FUNC_END(_savegpr_22)\n-FUNC_END(_savegpr_21)\n-FUNC_END(_savegpr_20)\n-FUNC_END(_savegpr_19)\n-FUNC_END(_savegpr_18)\n-FUNC_END(_savegpr_17)\n-FUNC_END(_savegpr_16)\n-FUNC_END(_savegpr_15)\n-FUNC_END(_savegpr_14)\n-\n-/* Routines for restoring floating point registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the floating point save area.  */\n-\n-FUNC_START(_restfpr_14)\tlfd\t14,-144(11)\t/* restore fp registers */\n-FUNC_START(_restfpr_15)\tlfd\t15,-136(11)\n-FUNC_START(_restfpr_16)\tlfd\t16,-128(11)\n-FUNC_START(_restfpr_17)\tlfd\t17,-120(11)\n-FUNC_START(_restfpr_18)\tlfd\t18,-112(11)\n-FUNC_START(_restfpr_19)\tlfd\t19,-104(11)\n-FUNC_START(_restfpr_20)\tlfd\t20,-96(11)\n-FUNC_START(_restfpr_21)\tlfd\t21,-88(11)\n-FUNC_START(_restfpr_22)\tlfd\t22,-80(11)\n-FUNC_START(_restfpr_23)\tlfd\t23,-72(11)\n-FUNC_START(_restfpr_24)\tlfd\t24,-64(11)\n-FUNC_START(_restfpr_25)\tlfd\t25,-56(11)\n-FUNC_START(_restfpr_26)\tlfd\t26,-48(11)\n-FUNC_START(_restfpr_27)\tlfd\t27,-40(11)\n-FUNC_START(_restfpr_28)\tlfd\t28,-32(11)\n-FUNC_START(_restfpr_29)\tlfd\t29,-24(11)\n-FUNC_START(_restfpr_30)\tlfd\t30,-16(11)\n-FUNC_START(_restfpr_31)\tlfd\t31,-8(11)\n-\t\t\tblr\n-FUNC_END(_restfpr_31)\n-FUNC_END(_restfpr_30)\n-FUNC_END(_restfpr_29)\n-FUNC_END(_restfpr_28)\n-FUNC_END(_restfpr_27)\n-FUNC_END(_restfpr_26)\n-FUNC_END(_restfpr_25)\n-FUNC_END(_restfpr_24)\n-FUNC_END(_restfpr_23)\n-FUNC_END(_restfpr_22)\n-FUNC_END(_restfpr_21)\n-FUNC_END(_restfpr_20)\n-FUNC_END(_restfpr_19)\n-FUNC_END(_restfpr_18)\n-FUNC_END(_restfpr_17)\n-FUNC_END(_restfpr_16)\n-FUNC_END(_restfpr_15)\n-FUNC_END(_restfpr_14)\n-\n-/* Routines for restoring integer registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the integer restore area.  */\n-\n-FUNC_START(_restgpr_14)\tlwz\t14,-72(11)\t/* restore gp registers */\n-FUNC_START(_restgpr_15)\tlwz\t15,-68(11)\n-FUNC_START(_restgpr_16)\tlwz\t16,-64(11)\n-FUNC_START(_restgpr_17)\tlwz\t17,-60(11)\n-FUNC_START(_restgpr_18)\tlwz\t18,-56(11)\n-FUNC_START(_restgpr_19)\tlwz\t19,-52(11)\n-FUNC_START(_restgpr_20)\tlwz\t20,-48(11)\n-FUNC_START(_restgpr_21)\tlwz\t21,-44(11)\n-FUNC_START(_restgpr_22)\tlwz\t22,-40(11)\n-FUNC_START(_restgpr_23)\tlwz\t23,-36(11)\n-FUNC_START(_restgpr_24)\tlwz\t24,-32(11)\n-FUNC_START(_restgpr_25)\tlwz\t25,-28(11)\n-FUNC_START(_restgpr_26)\tlwz\t26,-24(11)\n-FUNC_START(_restgpr_27)\tlwz\t27,-20(11)\n-FUNC_START(_restgpr_28)\tlwz\t28,-16(11)\n-FUNC_START(_restgpr_29)\tlwz\t29,-12(11)\n-FUNC_START(_restgpr_30)\tlwz\t30,-8(11)\n-FUNC_START(_restgpr_31)\tlwz\t31,-4(11)\n-\t\t\tblr\n-FUNC_END(_restgpr_31)\n-FUNC_END(_restgpr_30)\n-FUNC_END(_restgpr_29)\n-FUNC_END(_restgpr_28)\n-FUNC_END(_restgpr_27)\n-FUNC_END(_restgpr_26)\n-FUNC_END(_restgpr_25)\n-FUNC_END(_restgpr_24)\n-FUNC_END(_restgpr_23)\n-FUNC_END(_restgpr_22)\n-FUNC_END(_restgpr_21)\n-FUNC_END(_restgpr_20)\n-FUNC_END(_restgpr_19)\n-FUNC_END(_restgpr_18)\n-FUNC_END(_restgpr_17)\n-FUNC_END(_restgpr_16)\n-FUNC_END(_restgpr_15)\n-FUNC_END(_restgpr_14)\n-\n-/* Routines for restoring floating point registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the floating point save area.  */\n-/* In addition to restoring the fp registers, it will return to the caller's */\n-/* caller */\n-\n-FUNC_START(_restfpr_14_x)\tlfd\t14,-144(11)\t/* restore fp registers */\n-FUNC_START(_restfpr_15_x)\tlfd\t15,-136(11)\n-FUNC_START(_restfpr_16_x)\tlfd\t16,-128(11)\n-FUNC_START(_restfpr_17_x)\tlfd\t17,-120(11)\n-FUNC_START(_restfpr_18_x)\tlfd\t18,-112(11)\n-FUNC_START(_restfpr_19_x)\tlfd\t19,-104(11)\n-FUNC_START(_restfpr_20_x)\tlfd\t20,-96(11)\n-FUNC_START(_restfpr_21_x)\tlfd\t21,-88(11)\n-FUNC_START(_restfpr_22_x)\tlfd\t22,-80(11)\n-FUNC_START(_restfpr_23_x)\tlfd\t23,-72(11)\n-FUNC_START(_restfpr_24_x)\tlfd\t24,-64(11)\n-FUNC_START(_restfpr_25_x)\tlfd\t25,-56(11)\n-FUNC_START(_restfpr_26_x)\tlfd\t26,-48(11)\n-FUNC_START(_restfpr_27_x)\tlfd\t27,-40(11)\n-FUNC_START(_restfpr_28_x)\tlfd\t28,-32(11)\n-FUNC_START(_restfpr_29_x)\tlfd\t29,-24(11)\n-FUNC_START(_restfpr_30_x)\tlfd\t30,-16(11)\n-FUNC_START(_restfpr_31_x)\tlwz\t0,4(11)\n-\t\t\t\tlfd\t31,-8(11)\n-\t\t\t\tmtlr\t0\n-\t\t\t\tmr\t1,11\n-\t\t\t\tblr\n-FUNC_END(_restfpr_31_x)\n-FUNC_END(_restfpr_30_x)\n-FUNC_END(_restfpr_29_x)\n-FUNC_END(_restfpr_28_x)\n-FUNC_END(_restfpr_27_x)\n-FUNC_END(_restfpr_26_x)\n-FUNC_END(_restfpr_25_x)\n-FUNC_END(_restfpr_24_x)\n-FUNC_END(_restfpr_23_x)\n-FUNC_END(_restfpr_22_x)\n-FUNC_END(_restfpr_21_x)\n-FUNC_END(_restfpr_20_x)\n-FUNC_END(_restfpr_19_x)\n-FUNC_END(_restfpr_18_x)\n-FUNC_END(_restfpr_17_x)\n-FUNC_END(_restfpr_16_x)\n-FUNC_END(_restfpr_15_x)\n-FUNC_END(_restfpr_14_x)\n-\n-/* Routines for restoring integer registers, called by the compiler.  */\n-/* Called with r11 pointing to the stack header word of the caller of the */\n-/* function, just beyond the end of the integer restore area.  */\n-\n-FUNC_START(_restgpr_14_x)\tlwz\t14,-72(11)\t/* restore gp registers */\n-FUNC_START(_restgpr_15_x)\tlwz\t15,-68(11)\n-FUNC_START(_restgpr_16_x)\tlwz\t16,-64(11)\n-FUNC_START(_restgpr_17_x)\tlwz\t17,-60(11)\n-FUNC_START(_restgpr_18_x)\tlwz\t18,-56(11)\n-FUNC_START(_restgpr_19_x)\tlwz\t19,-52(11)\n-FUNC_START(_restgpr_20_x)\tlwz\t20,-48(11)\n-FUNC_START(_restgpr_21_x)\tlwz\t21,-44(11)\n-FUNC_START(_restgpr_22_x)\tlwz\t22,-40(11)\n-FUNC_START(_restgpr_23_x)\tlwz\t23,-36(11)\n-FUNC_START(_restgpr_24_x)\tlwz\t24,-32(11)\n-FUNC_START(_restgpr_25_x)\tlwz\t25,-28(11)\n-FUNC_START(_restgpr_26_x)\tlwz\t26,-24(11)\n-FUNC_START(_restgpr_27_x)\tlwz\t27,-20(11)\n-FUNC_START(_restgpr_28_x)\tlwz\t28,-16(11)\n-FUNC_START(_restgpr_29_x)\tlwz\t29,-12(11)\n-FUNC_START(_restgpr_30_x)\tlwz\t30,-8(11)\n-FUNC_START(_restgpr_31_x)\tlwz\t0,4(11)\n-\t\t\t\tlwz\t31,-4(11)\n-\t\t\t\tmtlr\t0\n-\t\t\t\tmr\t1,11\n-\t\t\t\tblr\n-FUNC_END(_restgpr_31_x)\n-FUNC_END(_restgpr_30_x)\n-FUNC_END(_restgpr_29_x)\n-FUNC_END(_restgpr_28_x)\n-FUNC_END(_restgpr_27_x)\n-FUNC_END(_restgpr_26_x)\n-FUNC_END(_restgpr_25_x)\n-FUNC_END(_restgpr_24_x)\n-FUNC_END(_restgpr_23_x)\n-FUNC_END(_restgpr_22_x)\n-FUNC_END(_restgpr_21_x)\n-FUNC_END(_restgpr_20_x)\n-FUNC_END(_restgpr_19_x)\n-FUNC_END(_restgpr_18_x)\n-FUNC_END(_restgpr_17_x)\n-FUNC_END(_restgpr_16_x)\n-FUNC_END(_restgpr_15_x)\n-FUNC_END(_restgpr_14_x)\n-\n-#endif"}]}