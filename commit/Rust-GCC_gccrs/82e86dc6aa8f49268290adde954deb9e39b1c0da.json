{"sha": "82e86dc6aa8f49268290adde954deb9e39b1c0da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlODZkYzZhYThmNDkyNjgyOTBhZGRlOTU0ZGViOWUzOWIxYzBkYQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-18T09:14:23Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-03-18T09:14:23Z"}, "message": "i386.md: Remove empty predicates and/or constraints.\n\n\t* config/i386/i386.md: Remove empty predicates and/or constraints.\n\t* config/i386/sync.md: Ditto.\n\t* config/i386/sse.md: Ditto.\n\t* config/i386/mmx.md: Ditto.\n\t* config/i386/pentium.md: Ditto.\n\t* config/i386/athlon.md: Ditto.\n\nFrom-SVN: r185505", "tree": {"sha": "2b9e12933dd8cfaee94e3a8a3d8c74111986c58b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b9e12933dd8cfaee94e3a8a3d8c74111986c58b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82e86dc6aa8f49268290adde954deb9e39b1c0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e86dc6aa8f49268290adde954deb9e39b1c0da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e86dc6aa8f49268290adde954deb9e39b1c0da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e86dc6aa8f49268290adde954deb9e39b1c0da/comments", "author": null, "committer": null, "parents": [{"sha": "e555251484f9e346eca31fd5bb7f0ff89c9fb138", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e555251484f9e346eca31fd5bb7f0ff89c9fb138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e555251484f9e346eca31fd5bb7f0ff89c9fb138"}], "stats": {"total": 4351, "additions": 2175, "deletions": 2176}, "files": [{"sha": "c9744de78868a8a74265f5df3c21ce2eafdcee74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82e86dc6aa8f49268290adde954deb9e39b1c0da", "patch": "@@ -1,3 +1,12 @@\n+2012-03-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md: Remove empty predicates and/or constraints.\n+\t* config/i386/sync.md: Ditto.\n+\t* config/i386/sse.md: Ditto.\n+\t* config/i386/mmx.md: Ditto.\n+\t* config/i386/pentium.md: Ditto.\n+\t* config/i386/athlon.md: Ditto.\n+\n 2012-03-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52603\n@@ -38,7 +47,7 @@\n \t(vect_is_simple_use): Treat all constants as vec_constant_def.\n \n 2012-03-16  Richard Guenther  <rguenther@suse.de>\n-\tKai Tietz  <ktietz@redhat.com>\n+\t    Kai Tietz  <ktietz@redhat.com>\n \n \tPR middle-end/48814\n \t* gimplify.c (gimplify_self_mod_expr): Evaluate postfix\n@@ -131,8 +140,7 @@\n 2012-03-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/52568\n-\t* config/i386/i386.c (expand_vec_perm_vperm2f128_vblend): New\n-\tfunction.\n+\t* config/i386/i386.c (expand_vec_perm_vperm2f128_vblend): New function.\n \t(ix86_expand_vec_perm_const_1): Use it.\n \n \tPR target/52568\n@@ -209,8 +217,8 @@\n \n \t* config.gcc (target_type_format_char): New. Document it. Set it for\n \tarm*-*-* .\n-\t* configure.ac (gnu_unique_option): Use target_type_format_char in test.\n-\tComment rationale.\n+\t* configure.ac (gnu_unique_option): Use target_type_format_char\n+\tin test.  Comment rationale.\n \t* configure: Regenerate .\n \n 2012-03-15  Jakub Jelinek  <jakub@redhat.com>\n@@ -363,8 +371,7 @@\n \t* configure.ac (gcc_cv_ld_hidden): Remove *-*-solaris2.8*.\n \t(ld_tls_support): Remove Solaris 8 references.\n \t(lwp_dir, lwp_spec): Remove support for alternate thread library.\n-\t* acinclude.m4 (gcc_cv_initfini_array): Remove *-*-solaris2.*\n-\ttests.\n+\t* acinclude.m4 (gcc_cv_initfini_array): Remove *-*-solaris2.* tests.\n \t* configure: Regenerate.\n \t* config.in: Regenerate.\n \n@@ -435,8 +442,7 @@\n 2012-03-14  Martin Jambor  <mjambor@suse.cz>\n \n \t* expr.c (expand_assignment): Use expand_expr with EXPAND_WRITE\n-\twhen expanding MEM_REFs, MEM_TARGET_REFs and handled_component\n-\tbases.\n+\twhen expanding MEM_REFs, MEM_TARGET_REFs and handled_component bases.\n \t(expand_expr_real_1): Do not handle misalignment if modifier is\n \tEXPAND_WRITE.\n \n@@ -451,9 +457,8 @@\n 2012-03-14  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52582\n-\t* gimple-fold.c (canonicalize_constructor_val): Make sure\n-\twe have a cgraph node for a FUNCTION_DECL that comes from\n-\ta constructor.\n+\t* gimple-fold.c (canonicalize_constructor_val): Make sure we have\n+\ta cgraph node for a FUNCTION_DECL that comes from a constructor.\n \t(gimple_get_virt_method_for_binfo): Likewise.\n \n 2012-03-14  Richard Guenther  <rguenther@suse.de>\n@@ -647,9 +652,8 @@\n \t* config/i386/i386.c (ix86_option_override_internal): Properly\n \tset ix86_gen_leave and ix86_gen_monitor.  Check Pmode == DImode,\n \tinstead of TARGET_64BIT, to set ix86_gen_add3, ix86_gen_sub3,\n-\tix86_gen_one_cmpl2, ix86_gen_andsp,\n-\tix86_gen_allocate_stack_worker, ix86_gen_adjust_stack_and_probe\n-\tand ix86_gen_probe_stack_range.\n+\tix86_gen_one_cmpl2, ix86_gen_andsp, ix86_gen_allocate_stack_worker,\n+\tix86_gen_adjust_stack_and_probe and ix86_gen_probe_stack_range.\n \n \t* config/i386/sse.md (sse3_monitor64): Renamed to ...\n \t(sse3_monitor64_<mode>): This.\n@@ -691,9 +695,8 @@\n \t(alpha*-dec-osf*): Remove.\n \t* configure: Regenerate.\n \n-\t* config/alpha/host-osf.c, config/alpha/osf5.h,\n-\tconfig/alpha/osf5.opt, config/alpha/va_list.h, config/alpha/x-osf:\n-\tRemove.\n+\t* config/alpha/host-osf.c, config/alpha/osf5.h, config/alpha/osf5.opt,\n+\tconfig/alpha/va_list.h, config/alpha/x-osf: Remove.\n \n \t* config/alpha/alpha.h (TARGET_LD_BUGGY_LDGP): Remove.\n \t* config/alpha/alpha.c (struct machine_function): Update comment.\n@@ -784,10 +787,9 @@\n \n 2012-03-12  Richard Guenther  <rguenther@suse.de>\n \n-        * tree-sra.c (create_access_replacement): Only rename the\n-        replacement if we can rewrite it into SSA form.  Properly\n-        mark register typed replacements that we cannot rewrite\n-        with TREE_ADDRESSABLE.\n+\t* tree-sra.c (create_access_replacement): Only rename the replacement\n+\tif we can rewrite it into SSA form.  Properly mark register typed\n+\treplacements that we cannot rewrite with TREE_ADDRESSABLE.\n \t* tree-cfg.c (verify_expr): Fix BIT_FIELD_REF verification\n \tfor aggregate or BLKmode results.\n \n@@ -802,8 +804,7 @@\n 2012-02-12  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* doc/invoke.texi: Document -mrtm option.\n-\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_RTM_SET):\n-\tNew.\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_RTM_SET): New.\n \t(OPTION_MASK_ISA_RTM_UNSET): Ditto.\n \t(ix86_handle_option): Handle OPT_mrtm.\n \t* config.gcc (i[34567]86-*-*): Add rtmintrin.h and\n@@ -814,8 +815,8 @@\n \t__RTM__ if needed.\n \t(ix86_target_string): Define -mrtm option.\n \t(PTA_RTM): New.\n-\t(ix86_option_override_internal): Extend \"corei7-avx\" with\n-\tRTM option. Handle new option.\n+\t(ix86_option_override_internal): Extend \"corei7-avx\" with RTM option.\n+\tHandle new option.\n \t(ix86_valid_target_attribute_inner_p): Add OPT_mrtm.\n \t(ix86_builtins): Add IX86_BUILTIN_XBEGIN, IX86_BUILTIN_XEND,\n \tIX86_BUILTIN_XTEST.\n@@ -835,15 +836,14 @@\n \t(xtest): Ditto.\n \t(xtest_1): Ditto.\n \t* config/i386/i386.opt (mrtm): New.\n-\t* config/i386/immintrin.h: Include rtmintrin.h and\n-\txtestintrin.h.\n+\t* config/i386/immintrin.h: Include rtmintrin.h and xtestintrin.h.\n \t* config/i386/rtmintrin.h: New header.\n \t* config/i386/xtestintrin.h: Ditto.\n \n 2012-03-12  Tristan Gingold  <gingold@adacore.com>\n \n-\t* ginclude/stddef.h: Adjust previous patch.  Use __VMS__ instead\n-\tof VMS.\n+\t* ginclude/stddef.h: Adjust previous patch.\n+\tUse __VMS__ instead of VMS.\n \n 2012-03-12  Uros Bizjak  <ubizjak@gmail.com>\n \n@@ -857,8 +857,7 @@\n \t(C Dialect Options): Move -no-integrated-cpp documentation\n \tfrom here...\n \t(Preprocessor Options): ...to here.  Rewrite the description\n-\tso it makes more sense, and remove discussion of merging\n-\tfront ends.\n+\tso it makes more sense, and remove discussion of merging front ends.\n \n 2012-03-11  H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "401cb0daf766013dee6e8d0546fedb3a8d77104e", "filename": "gcc/config/i386/athlon.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fathlon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fathlon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fathlon.md?ref=82e86dc6aa8f49268290adde954deb9e39b1c0da", "patch": "@@ -40,7 +40,7 @@\n   (cond [(eq_attr \"type\" \"call,imul,idiv,other,multi,fcmov,fpspc,str,pop,leave\")\n \t   (const_string \"vector\")\n          (and (eq_attr \"type\" \"push\")\n-              (match_operand 1 \"memory_operand\" \"\"))\n+              (match_operand 1 \"memory_operand\"))\n \t   (const_string \"vector\")\n          (and (eq_attr \"type\" \"fmov\")\n \t      (and (eq_attr \"memory\" \"load,store\")\n@@ -574,17 +574,17 @@\n (define_insn_reservation \"athlon_movlpd_load\" 0\n \t\t\t (and (eq_attr \"cpu\" \"athlon\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n-\t\t\t\t   (match_operand:DF 1 \"memory_operand\" \"\")))\n+\t\t\t\t   (match_operand:DF 1 \"memory_operand\")))\n \t\t\t \"athlon-direct,athlon-fpload,athlon-fany\")\n (define_insn_reservation \"athlon_movlpd_load_k8\" 2\n \t\t\t (and (eq_attr \"cpu\" \"k8\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n-\t\t\t\t   (match_operand:DF 1 \"memory_operand\" \"\")))\n+\t\t\t\t   (match_operand:DF 1 \"memory_operand\")))\n \t\t\t \"athlon-direct,athlon-fploadk8,athlon-fstore\")\n (define_insn_reservation \"athlon_movsd_load_generic64\" 2\n \t\t\t (and (eq_attr \"cpu\" \"generic64\")\n \t\t\t      (and (eq_attr \"type\" \"ssemov\")\n-\t\t\t\t   (match_operand:DF 1 \"memory_operand\" \"\")))\n+\t\t\t\t   (match_operand:DF 1 \"memory_operand\")))\n \t\t\t \"athlon-double,athlon-fploadk8,(athlon-fstore+athlon-fmul)\")\n (define_insn_reservation \"athlon_movaps_load_k8\" 2\n \t\t\t (and (eq_attr \"cpu\" \"k8,generic64\")"}, {"sha": "d23c67b38bc95d14e6fe7c09f9ead38ac27407b0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1357, "deletions": 1357, "changes": 2714, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=82e86dc6aa8f49268290adde954deb9e39b1c0da"}, {"sha": "f06deb1fedf4a80d8b6f962fbc06d34f933a244f", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 122, "deletions": 122, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=82e86dc6aa8f49268290adde954deb9e39b1c0da", "patch": "@@ -69,8 +69,8 @@\n ;; This is essential for maintaining stable calling conventions.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:MMXMODEI8 1 \"nonimmediate_operand\" \"\"))]\n+  [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\")\n+\t(match_operand:MMXMODEI8 1 \"nonimmediate_operand\"))]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_move (<MODE>mode, operands);\n@@ -201,8 +201,8 @@\n    (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,TI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n (define_expand \"movv2sf\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:V2SF 1 \"nonimmediate_operand\" \"\"))]\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\")\n+\t(match_operand:V2SF 1 \"nonimmediate_operand\"))]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_move (V2SFmode, operands);\n@@ -318,25 +318,25 @@\n \n ;; %%% This multiword shite has got to go.\n (define_split\n-  [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\" \"\")\n-        (match_operand:MMXMODE 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\")\n+        (match_operand:MMXMODE 1 \"general_operand\"))]\n   \"!TARGET_64BIT && reload_completed\n    && !(MMX_REG_P (operands[0]) || SSE_REG_P (operands[0])\n \t|| MMX_REG_P (operands[1]) || SSE_REG_P (operands[1]))\"\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n \n (define_expand \"push<mode>1\"\n-  [(match_operand:MMXMODE 0 \"register_operand\" \"\")]\n+  [(match_operand:MMXMODE 0 \"register_operand\")]\n   \"TARGET_MMX\"\n {\n   ix86_expand_push (<MODE>mode, operands[0]);\n   DONE;\n })\n \n (define_expand \"movmisalign<mode>\"\n-  [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:MMXMODE 1 \"nonimmediate_operand\" \"\"))]\n+  [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\")\n+\t(match_operand:MMXMODE 1 \"nonimmediate_operand\"))]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_move (<MODE>mode, operands);\n@@ -359,10 +359,10 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_expand \"mmx_addv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n \t(plus:V2SF\n-\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")))]\n+\t  (match_operand:V2SF 1 \"nonimmediate_operand\")\n+\t  (match_operand:V2SF 2 \"nonimmediate_operand\")))]\n   \"TARGET_3DNOW\"\n   \"ix86_fixup_binary_operands_no_copy (PLUS, V2SFmode, operands);\")\n \n@@ -377,15 +377,15 @@\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_expand \"mmx_subv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n-        (minus:V2SF (match_operand:V2SF 1 \"register_operand\" \"\")\n-\t\t    (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+        (minus:V2SF (match_operand:V2SF 1 \"register_operand\")\n+\t\t    (match_operand:V2SF 2 \"nonimmediate_operand\")))]\n   \"TARGET_3DNOW\")\n \n (define_expand \"mmx_subrv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n-        (minus:V2SF (match_operand:V2SF 2 \"register_operand\" \"\")\n-\t\t    (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+        (minus:V2SF (match_operand:V2SF 2 \"register_operand\")\n+\t\t    (match_operand:V2SF 1 \"nonimmediate_operand\")))]\n   \"TARGET_3DNOW\")\n \n (define_insn \"*mmx_subv2sf3\"\n@@ -401,9 +401,9 @@\n    (set_attr \"mode\" \"V2SF\")])\n \n (define_expand \"mmx_mulv2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n-\t(mult:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")\n-\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n+\t(mult:V2SF (match_operand:V2SF 1 \"nonimmediate_operand\")\n+\t\t   (match_operand:V2SF 2 \"nonimmediate_operand\")))]\n   \"TARGET_3DNOW\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V2SFmode, operands);\")\n \n@@ -422,10 +422,10 @@\n ;; applied to NaNs.  Hopefully the optimizers won't get too smart on us.\n \n (define_expand \"mmx_<code>v2sf3\"\n-  [(set (match_operand:V2SF 0 \"register_operand\" \"\")\n+  [(set (match_operand:V2SF 0 \"register_operand\")\n         (smaxmin:V2SF\n-\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")))]\n+\t  (match_operand:V2SF 1 \"nonimmediate_operand\")\n+\t  (match_operand:V2SF 2 \"nonimmediate_operand\")))]\n   \"TARGET_3DNOW\"\n {\n   if (!flag_finite_math_only)\n@@ -568,9 +568,9 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_expand \"mmx_eqv2sf3\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"\")\n-\t(eq:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\" \"\")\n-\t\t (match_operand:V2SF 2 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:V2SI 0 \"register_operand\")\n+\t(eq:V2SI (match_operand:V2SF 1 \"nonimmediate_operand\")\n+\t\t (match_operand:V2SF 2 \"nonimmediate_operand\")))]\n   \"TARGET_3DNOW\"\n   \"ix86_fixup_binary_operands_no_copy (EQ, V2SFmode, operands);\")\n \n@@ -690,9 +690,9 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"vec_setv2sf\"\n-  [(match_operand:V2SF 0 \"register_operand\" \"\")\n-   (match_operand:SF 1 \"register_operand\" \"\")\n-   (match_operand 2 \"const_int_operand\" \"\")]\n+  [(match_operand:V2SF 0 \"register_operand\")\n+   (match_operand:SF 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_set (false, operands[0], operands[1],\n@@ -740,9 +740,9 @@\n    (set_attr \"mode\" \"DI,V4SF,SF,SF,SF,SF\")])\n \n (define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+  [(set (match_operand:SF 0 \"register_operand\")\n \t(vec_select:SF\n-\t  (match_operand:V2SF 1 \"memory_operand\" \"\")\n+\t  (match_operand:V2SF 1 \"memory_operand\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_MMX && reload_completed\"\n   [(const_int 0)]\n@@ -753,9 +753,9 @@\n })\n \n (define_expand \"vec_extractv2sf\"\n-  [(match_operand:SF 0 \"register_operand\" \"\")\n-   (match_operand:V2SF 1 \"register_operand\" \"\")\n-   (match_operand 2 \"const_int_operand\" \"\")]\n+  [(match_operand:SF 0 \"register_operand\")\n+   (match_operand:V2SF 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_extract (false, operands[0], operands[1],\n@@ -764,8 +764,8 @@\n })\n \n (define_expand \"vec_initv2sf\"\n-  [(match_operand:V2SF 0 \"register_operand\" \"\")\n-   (match_operand 1 \"\" \"\")]\n+  [(match_operand:V2SF 0 \"register_operand\")\n+   (match_operand 1)]\n   \"TARGET_SSE\"\n {\n   ix86_expand_vector_init (false, operands[0], operands[1]);\n@@ -779,10 +779,10 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_expand \"mmx_<plusminus_insn><mode>3\"\n-  [(set (match_operand:MMXMODEI8 0 \"register_operand\" \"\")\n+  [(set (match_operand:MMXMODEI8 0 \"register_operand\")\n \t(plusminus:MMXMODEI8\n-\t  (match_operand:MMXMODEI8 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:MMXMODEI8 2 \"nonimmediate_operand\" \"\")))]\n+\t  (match_operand:MMXMODEI8 1 \"nonimmediate_operand\")\n+\t  (match_operand:MMXMODEI8 2 \"nonimmediate_operand\")))]\n   \"TARGET_MMX || (TARGET_SSE2 && <MODE>mode == V1DImode)\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n@@ -798,10 +798,10 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_<plusminus_insn><mode>3\"\n-  [(set (match_operand:MMXMODE12 0 \"register_operand\" \"\")\n+  [(set (match_operand:MMXMODE12 0 \"register_operand\")\n \t(sat_plusminus:MMXMODE12\n-\t  (match_operand:MMXMODE12 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:MMXMODE12 2 \"nonimmediate_operand\" \"\")))]\n+\t  (match_operand:MMXMODE12 1 \"nonimmediate_operand\")\n+\t  (match_operand:MMXMODE12 2 \"nonimmediate_operand\")))]\n   \"TARGET_MMX\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n@@ -816,9 +816,9 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_mulv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n-        (mult:V4HI (match_operand:V4HI 1 \"nonimmediate_operand\" \"\")\n-\t\t   (match_operand:V4HI 2 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:V4HI 0 \"register_operand\")\n+        (mult:V4HI (match_operand:V4HI 1 \"nonimmediate_operand\")\n+\t\t   (match_operand:V4HI 2 \"nonimmediate_operand\")))]\n   \"TARGET_MMX\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V4HImode, operands);\")\n \n@@ -832,14 +832,14 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_smulv4hi3_highpart\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+  [(set (match_operand:V4HI 0 \"register_operand\")\n \t(truncate:V4HI\n \t  (lshiftrt:V4SI\n \t    (mult:V4SI\n \t      (sign_extend:V4SI\n-\t\t(match_operand:V4HI 1 \"nonimmediate_operand\" \"\"))\n+\t\t(match_operand:V4HI 1 \"nonimmediate_operand\"))\n \t      (sign_extend:V4SI\n-\t\t(match_operand:V4HI 2 \"nonimmediate_operand\" \"\")))\n+\t\t(match_operand:V4HI 2 \"nonimmediate_operand\")))\n \t    (const_int 16))))]\n   \"TARGET_MMX\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V4HImode, operands);\")\n@@ -860,14 +860,14 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_umulv4hi3_highpart\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+  [(set (match_operand:V4HI 0 \"register_operand\")\n \t(truncate:V4HI\n \t  (lshiftrt:V4SI\n \t    (mult:V4SI\n \t      (zero_extend:V4SI\n-\t\t(match_operand:V4HI 1 \"nonimmediate_operand\" \"\"))\n+\t\t(match_operand:V4HI 1 \"nonimmediate_operand\"))\n \t      (zero_extend:V4SI\n-\t\t(match_operand:V4HI 2 \"nonimmediate_operand\" \"\")))\n+\t\t(match_operand:V4HI 2 \"nonimmediate_operand\")))\n \t    (const_int 16))))]\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V4HImode, operands);\")\n@@ -889,16 +889,16 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_pmaddwd\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:V2SI 0 \"register_operand\")\n         (plus:V2SI\n \t  (mult:V2SI\n \t    (sign_extend:V2SI\n \t      (vec_select:V2HI\n-\t\t(match_operand:V4HI 1 \"nonimmediate_operand\" \"\")\n+\t\t(match_operand:V4HI 1 \"nonimmediate_operand\")\n \t\t(parallel [(const_int 0) (const_int 2)])))\n \t    (sign_extend:V2SI\n \t      (vec_select:V2HI\n-\t\t(match_operand:V4HI 2 \"nonimmediate_operand\" \"\")\n+\t\t(match_operand:V4HI 2 \"nonimmediate_operand\")\n \t\t(parallel [(const_int 0) (const_int 2)]))))\n \t  (mult:V2SI\n \t    (sign_extend:V2SI\n@@ -935,15 +935,15 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_pmulhrwv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+  [(set (match_operand:V4HI 0 \"register_operand\")\n \t(truncate:V4HI\n \t  (lshiftrt:V4SI\n \t    (plus:V4SI\n \t      (mult:V4SI\n \t        (sign_extend:V4SI\n-\t\t  (match_operand:V4HI 1 \"nonimmediate_operand\" \"\"))\n+\t\t  (match_operand:V4HI 1 \"nonimmediate_operand\"))\n \t        (sign_extend:V4SI\n-\t\t  (match_operand:V4HI 2 \"nonimmediate_operand\" \"\")))\n+\t\t  (match_operand:V4HI 2 \"nonimmediate_operand\")))\n \t      (const_vector:V4SI [(const_int 32768) (const_int 32768)\n \t\t\t\t  (const_int 32768) (const_int 32768)]))\n \t    (const_int 16))))]\n@@ -970,15 +970,15 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"sse2_umulv1siv1di3\"\n-  [(set (match_operand:V1DI 0 \"register_operand\" \"\")\n+  [(set (match_operand:V1DI 0 \"register_operand\")\n         (mult:V1DI\n \t  (zero_extend:V1DI\n \t    (vec_select:V1SI\n-\t      (match_operand:V2SI 1 \"nonimmediate_operand\" \"\")\n+\t      (match_operand:V2SI 1 \"nonimmediate_operand\")\n \t      (parallel [(const_int 0)])))\n \t  (zero_extend:V1DI\n \t    (vec_select:V1SI\n-\t      (match_operand:V2SI 2 \"nonimmediate_operand\" \"\")\n+\t      (match_operand:V2SI 2 \"nonimmediate_operand\")\n \t      (parallel [(const_int 0)])))))]\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V2SImode, operands);\")\n@@ -1000,10 +1000,10 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_<code>v4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+  [(set (match_operand:V4HI 0 \"register_operand\")\n         (smaxmin:V4HI\n-\t  (match_operand:V4HI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:V4HI 2 \"nonimmediate_operand\" \"\")))]\n+\t  (match_operand:V4HI 1 \"nonimmediate_operand\")\n+\t  (match_operand:V4HI 2 \"nonimmediate_operand\")))]\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, V4HImode, operands);\")\n \n@@ -1019,10 +1019,10 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_<code>v8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"\")\n+  [(set (match_operand:V8QI 0 \"register_operand\")\n         (umaxmin:V8QI\n-\t  (match_operand:V8QI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:V8QI 2 \"nonimmediate_operand\" \"\")))]\n+\t  (match_operand:V8QI 1 \"nonimmediate_operand\")\n+\t  (match_operand:V8QI 2 \"nonimmediate_operand\")))]\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, V8QImode, operands);\")\n \n@@ -1046,7 +1046,7 @@\n   \"psra<mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")\n    (set (attr \"length_immediate\")\n-     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+     (if_then_else (match_operand 2 \"const_int_operand\")\n        (const_string \"1\")\n        (const_string \"0\")))\n    (set_attr \"mode\" \"DI\")])\n@@ -1060,7 +1060,7 @@\n   \"p<vshift><mmxvecsize>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmxshft\")\n    (set (attr \"length_immediate\")\n-     (if_then_else (match_operand 2 \"const_int_operand\" \"\")\n+     (if_then_else (match_operand 2 \"const_int_operand\")\n        (const_string \"1\")\n        (const_string \"0\")))\n    (set_attr \"mode\" \"DI\")])\n@@ -1072,10 +1072,10 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_expand \"mmx_eq<mode>3\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"\")\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n         (eq:MMXMODEI\n-\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"\")))]\n+\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\")\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\")))]\n   \"TARGET_MMX\"\n   \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n \n@@ -1116,10 +1116,10 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_<code><mode>3\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"\")\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n \t(any_logic:MMXMODEI\n-\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\" \"\")\n-\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\" \"\")))]\n+\t  (match_operand:MMXMODEI 1 \"nonimmediate_operand\")\n+\t  (match_operand:MMXMODEI 2 \"nonimmediate_operand\")))]\n   \"TARGET_MMX\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n@@ -1258,12 +1258,12 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_pinsrw\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+  [(set (match_operand:V4HI 0 \"register_operand\")\n         (vec_merge:V4HI\n           (vec_duplicate:V4HI\n-            (match_operand:SI 2 \"nonimmediate_operand\" \"\"))\n-\t  (match_operand:V4HI 1 \"register_operand\" \"\")\n-          (match_operand:SI 3 \"const_0_to_3_operand\" \"\")))]\n+            (match_operand:SI 2 \"nonimmediate_operand\"))\n+\t  (match_operand:V4HI 1 \"register_operand\")\n+          (match_operand:SI 3 \"const_0_to_3_operand\")))]\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n {\n   operands[2] = gen_lowpart (HImode, operands[2]);\n@@ -1276,7 +1276,7 @@\n           (vec_duplicate:V4HI\n             (match_operand:HI 2 \"nonimmediate_operand\" \"rm\"))\n \t  (match_operand:V4HI 1 \"register_operand\" \"0\")\n-          (match_operand:SI 3 \"const_int_operand\" \"\")))]\n+          (match_operand:SI 3 \"const_int_operand\")))]\n   \"(TARGET_SSE || TARGET_3DNOW_A)\n    && ((unsigned) exact_log2 (INTVAL (operands[3]))\n        < GET_MODE_NUNITS (V4HImode))\"\n@@ -1304,9 +1304,9 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_pshufw\"\n-  [(match_operand:V4HI 0 \"register_operand\" \"\")\n-   (match_operand:V4HI 1 \"nonimmediate_operand\" \"\")\n-   (match_operand:SI 2 \"const_int_operand\" \"\")]\n+  [(match_operand:V4HI 0 \"register_operand\")\n+   (match_operand:V4HI 1 \"nonimmediate_operand\")\n+   (match_operand:SI 2 \"const_int_operand\")]\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n {\n   int mask = INTVAL (operands[2]);\n@@ -1322,10 +1322,10 @@\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y\")\n         (vec_select:V4HI\n           (match_operand:V4HI 1 \"nonimmediate_operand\" \"ym\")\n-          (parallel [(match_operand 2 \"const_0_to_3_operand\" \"\")\n-                     (match_operand 3 \"const_0_to_3_operand\" \"\")\n-                     (match_operand 4 \"const_0_to_3_operand\" \"\")\n-                     (match_operand 5 \"const_0_to_3_operand\" \"\")])))]\n+          (parallel [(match_operand 2 \"const_0_to_3_operand\")\n+                     (match_operand 3 \"const_0_to_3_operand\")\n+                     (match_operand 4 \"const_0_to_3_operand\")\n+                     (match_operand 5 \"const_0_to_3_operand\")])))]\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n {\n   int mask = 0;\n@@ -1385,9 +1385,9 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"vec_setv2si\"\n-  [(match_operand:V2SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"register_operand\" \"\")\n-   (match_operand 2 \"const_int_operand\" \"\")]\n+  [(match_operand:V2SI 0 \"register_operand\")\n+   (match_operand:SI 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_set (false, operands[0], operands[1],\n@@ -1441,9 +1441,9 @@\n    (set_attr \"mode\" \"DI,TI,TI,V4SF,SI,SI,SI\")])\n \n (define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n \t(vec_select:SI\n-\t  (match_operand:V2SI 1 \"memory_operand\" \"\")\n+\t  (match_operand:V2SI 1 \"memory_operand\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_MMX && reload_completed\"\n   [(const_int 0)]\n@@ -1454,9 +1454,9 @@\n })\n \n (define_expand \"vec_extractv2si\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:V2SI 1 \"register_operand\" \"\")\n-   (match_operand 2 \"const_int_operand\" \"\")]\n+  [(match_operand:SI 0 \"register_operand\")\n+   (match_operand:V2SI 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_extract (false, operands[0], operands[1],\n@@ -1465,18 +1465,18 @@\n })\n \n (define_expand \"vec_initv2si\"\n-  [(match_operand:V2SI 0 \"register_operand\" \"\")\n-   (match_operand 1 \"\" \"\")]\n+  [(match_operand:V2SI 0 \"register_operand\")\n+   (match_operand 1)]\n   \"TARGET_SSE\"\n {\n   ix86_expand_vector_init (false, operands[0], operands[1]);\n   DONE;\n })\n \n (define_expand \"vec_setv4hi\"\n-  [(match_operand:V4HI 0 \"register_operand\" \"\")\n-   (match_operand:HI 1 \"register_operand\" \"\")\n-   (match_operand 2 \"const_int_operand\" \"\")]\n+  [(match_operand:V4HI 0 \"register_operand\")\n+   (match_operand:HI 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_set (false, operands[0], operands[1],\n@@ -1485,9 +1485,9 @@\n })\n \n (define_expand \"vec_extractv4hi\"\n-  [(match_operand:HI 0 \"register_operand\" \"\")\n-   (match_operand:V4HI 1 \"register_operand\" \"\")\n-   (match_operand 2 \"const_int_operand\" \"\")]\n+  [(match_operand:HI 0 \"register_operand\")\n+   (match_operand:V4HI 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_extract (false, operands[0], operands[1],\n@@ -1496,18 +1496,18 @@\n })\n \n (define_expand \"vec_initv4hi\"\n-  [(match_operand:V4HI 0 \"register_operand\" \"\")\n-   (match_operand 1 \"\" \"\")]\n+  [(match_operand:V4HI 0 \"register_operand\")\n+   (match_operand 1)]\n   \"TARGET_SSE\"\n {\n   ix86_expand_vector_init (false, operands[0], operands[1]);\n   DONE;\n })\n \n (define_expand \"vec_setv8qi\"\n-  [(match_operand:V8QI 0 \"register_operand\" \"\")\n-   (match_operand:QI 1 \"register_operand\" \"\")\n-   (match_operand 2 \"const_int_operand\" \"\")]\n+  [(match_operand:V8QI 0 \"register_operand\")\n+   (match_operand:QI 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_set (false, operands[0], operands[1],\n@@ -1516,9 +1516,9 @@\n })\n \n (define_expand \"vec_extractv8qi\"\n-  [(match_operand:QI 0 \"register_operand\" \"\")\n-   (match_operand:V8QI 1 \"register_operand\" \"\")\n-   (match_operand 2 \"const_int_operand\" \"\")]\n+  [(match_operand:QI 0 \"register_operand\")\n+   (match_operand:V8QI 1 \"register_operand\")\n+   (match_operand 2 \"const_int_operand\")]\n   \"TARGET_MMX\"\n {\n   ix86_expand_vector_extract (false, operands[0], operands[1],\n@@ -1527,8 +1527,8 @@\n })\n \n (define_expand \"vec_initv8qi\"\n-  [(match_operand:V8QI 0 \"register_operand\" \"\")\n-   (match_operand 1 \"\" \"\")]\n+  [(match_operand:V8QI 0 \"register_operand\")\n+   (match_operand 1)]\n   \"TARGET_SSE\"\n {\n   ix86_expand_vector_init (false, operands[0], operands[1]);\n@@ -1542,15 +1542,15 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n (define_expand \"mmx_uavgv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\" \"\")\n+  [(set (match_operand:V8QI 0 \"register_operand\")\n \t(truncate:V8QI\n \t  (lshiftrt:V8HI\n \t    (plus:V8HI\n \t      (plus:V8HI\n \t\t(zero_extend:V8HI\n-\t\t  (match_operand:V8QI 1 \"nonimmediate_operand\" \"\"))\n+\t\t  (match_operand:V8QI 1 \"nonimmediate_operand\"))\n \t\t(zero_extend:V8HI\n-\t\t  (match_operand:V8QI 2 \"nonimmediate_operand\" \"\")))\n+\t\t  (match_operand:V8QI 2 \"nonimmediate_operand\")))\n \t      (const_vector:V8HI [(const_int 1) (const_int 1)\n \t\t\t\t  (const_int 1) (const_int 1)\n \t\t\t\t  (const_int 1) (const_int 1)\n@@ -1594,15 +1594,15 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_uavgv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\" \"\")\n+  [(set (match_operand:V4HI 0 \"register_operand\")\n \t(truncate:V4HI\n \t  (lshiftrt:V4SI\n \t    (plus:V4SI\n \t      (plus:V4SI\n \t\t(zero_extend:V4SI\n-\t\t  (match_operand:V4HI 1 \"nonimmediate_operand\" \"\"))\n+\t\t  (match_operand:V4HI 1 \"nonimmediate_operand\"))\n \t\t(zero_extend:V4SI\n-\t\t  (match_operand:V4HI 2 \"nonimmediate_operand\" \"\")))\n+\t\t  (match_operand:V4HI 2 \"nonimmediate_operand\")))\n \t      (const_vector:V4SI [(const_int 1) (const_int 1)\n \t\t\t\t  (const_int 1) (const_int 1)]))\n \t    (const_int 1))))]\n@@ -1648,9 +1648,9 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"mmx_maskmovq\"\n-  [(set (match_operand:V8QI 0 \"memory_operand\" \"\")\n-\t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"\")\n-\t\t      (match_operand:V8QI 2 \"register_operand\" \"\")\n+  [(set (match_operand:V8QI 0 \"memory_operand\")\n+\t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\")\n+\t\t      (match_operand:V8QI 2 \"register_operand\")\n \t\t      (match_dup 0)]\n \t\t     UNSPEC_MASKMOV))]\n   \"TARGET_SSE || TARGET_3DNOW_A\")"}, {"sha": "91a5dd03d6aa701ceebfd34578f3b482f9a7d78d", "filename": "gcc/config/i386/pentium.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fpentium.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fpentium.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpentium.md?ref=82e86dc6aa8f49268290adde954deb9e39b1c0da", "patch": "@@ -47,22 +47,22 @@\n \t (eq_attr \"type\" \"ibr\")\n \t   (const_string \"pv\")\n \t (and (eq_attr \"type\" \"ishift\")\n-\t      (match_operand 2 \"const_int_operand\" \"\"))\n+\t      (match_operand 2 \"const_int_operand\"))\n \t   (const_string \"pu\")\n \t (and (eq_attr \"type\" \"rotate\")\n-\t      (match_operand 2 \"const1_operand\" \"\"))\n+\t      (match_operand 2 \"const1_operand\"))\n \t   (const_string \"pu\")\n \t (and (eq_attr \"type\" \"ishift1\")\n-\t      (match_operand 1 \"const_int_operand\" \"\"))\n+\t      (match_operand 1 \"const_int_operand\"))\n \t   (const_string \"pu\")\n \t (and (eq_attr \"type\" \"rotate1\")\n-\t      (match_operand 1 \"const1_operand\" \"\"))\n+\t      (match_operand 1 \"const1_operand\"))\n \t   (const_string \"pu\")\n \t (and (eq_attr \"type\" \"call\")\n-\t      (match_operand 0 \"constant_call_address_operand\" \"\"))\n+\t      (match_operand 0 \"constant_call_address_operand\"))\n \t   (const_string \"pv\")\n \t (and (eq_attr \"type\" \"callv\")\n-\t      (match_operand 1 \"constant_call_address_operand\" \"\"))\n+\t      (match_operand 1 \"constant_call_address_operand\"))\n \t   (const_string \"pv\")\n \t]\n \t(const_string \"np\")))\n@@ -167,7 +167,7 @@\n (define_insn_reservation \"pent_fpstore\" 2\n   (and (eq_attr \"cpu\" \"pentium\")\n        (and (eq_attr \"type\" \"fmov\")\n-\t    (ior (match_operand 1 \"immediate_operand\" \"\")\n+\t    (ior (match_operand 1 \"immediate_operand\")\n \t\t (eq_attr \"memory\" \"store\"))))\n   \"(pentium-fp+pentium-np)*2\")\n "}, {"sha": "6b79a080cb4aa5193c744197134b263e4c82bb44", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 616, "deletions": 616, "changes": 1232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=82e86dc6aa8f49268290adde954deb9e39b1c0da"}, {"sha": "18ccabfc11283ece2707e4302bfdca4e8583ca7c", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e86dc6aa8f49268290adde954deb9e39b1c0da/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=82e86dc6aa8f49268290adde954deb9e39b1c0da", "patch": "@@ -46,7 +46,7 @@\n })\n \n (define_insn \"*sse2_lfence\"\n-  [(set (match_operand:BLK 0 \"\" \"\")\n+  [(set (match_operand:BLK 0)\n \t(unspec:BLK [(match_dup 0)] UNSPEC_LFENCE))]\n   \"TARGET_SSE2\"\n   \"lfence\"\n@@ -65,7 +65,7 @@\n })\n \n (define_insn \"*sse_sfence\"\n-  [(set (match_operand:BLK 0 \"\" \"\")\n+  [(set (match_operand:BLK 0)\n \t(unspec:BLK [(match_dup 0)] UNSPEC_SFENCE))]\n   \"TARGET_SSE || TARGET_3DNOW_A\"\n   \"sfence\"\n@@ -84,7 +84,7 @@\n })\n \n (define_insn \"mfence_sse2\"\n-  [(set (match_operand:BLK 0 \"\" \"\")\n+  [(set (match_operand:BLK 0)\n \t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))]\n   \"TARGET_64BIT || TARGET_SSE2\"\n   \"mfence\"\n@@ -94,15 +94,15 @@\n    (set_attr \"memory\" \"unknown\")])\n \n (define_insn \"mfence_nosse\"\n-  [(set (match_operand:BLK 0 \"\" \"\")\n+  [(set (match_operand:BLK 0)\n \t(unspec:BLK [(match_dup 0)] UNSPEC_MFENCE))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!(TARGET_64BIT || TARGET_SSE2)\"\n   \"lock{%;} or{l}\\t{$0, (%%esp)|DWORD PTR [esp], 0}\"\n   [(set_attr \"memory\" \"unknown\")])\n \n (define_expand \"mem_thread_fence\"\n-  [(match_operand:SI 0 \"const_int_operand\" \"\")]\t\t;; model\n+  [(match_operand:SI 0 \"const_int_operand\")]\t\t;; model\n   \"\"\n {\n   /* Unless this is a SEQ_CST fence, the i386 memory model is strong\n@@ -142,9 +142,9 @@\n    ])\n \n (define_expand \"atomic_load<mode>\"\n-  [(set (match_operand:ATOMIC 0 \"register_operand\" \"\")\n-\t(unspec:ATOMIC [(match_operand:ATOMIC 1 \"memory_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\")]\n+  [(set (match_operand:ATOMIC 0 \"register_operand\")\n+\t(unspec:ATOMIC [(match_operand:ATOMIC 1 \"memory_operand\")\n+\t\t\t(match_operand:SI 2 \"const_int_operand\")]\n \t\t       UNSPEC_MOVA))]\n   \"\"\n {\n@@ -200,9 +200,9 @@\n })\n \n (define_expand \"atomic_store<mode>\"\n-  [(set (match_operand:ATOMIC 0 \"memory_operand\" \"\")\n-\t(unspec:ATOMIC [(match_operand:ATOMIC 1 \"register_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\")]\n+  [(set (match_operand:ATOMIC 0 \"memory_operand\")\n+\t(unspec:ATOMIC [(match_operand:ATOMIC 1 \"register_operand\")\n+\t\t\t(match_operand:SI 2 \"const_int_operand\")]\n \t\t       UNSPEC_MOVA))]\n   \"\"\n {\n@@ -305,14 +305,14 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"atomic_compare_and_swap<mode>\"\n-  [(match_operand:QI 0 \"register_operand\" \"\")\t\t;; bool success output\n-   (match_operand:SWI124 1 \"register_operand\" \"\")\t;; oldval output\n-   (match_operand:SWI124 2 \"memory_operand\" \"\")\t\t;; memory\n-   (match_operand:SWI124 3 \"register_operand\" \"\")\t;; expected input\n-   (match_operand:SWI124 4 \"register_operand\" \"\")\t;; newval input\n-   (match_operand:SI 5 \"const_int_operand\" \"\")\t\t;; is_weak\n-   (match_operand:SI 6 \"const_int_operand\" \"\")\t\t;; success model\n-   (match_operand:SI 7 \"const_int_operand\" \"\")]\t\t;; failure model\n+  [(match_operand:QI 0 \"register_operand\")\t;; bool success output\n+   (match_operand:SWI124 1 \"register_operand\")\t;; oldval output\n+   (match_operand:SWI124 2 \"memory_operand\")\t;; memory\n+   (match_operand:SWI124 3 \"register_operand\")\t;; expected input\n+   (match_operand:SWI124 4 \"register_operand\")\t;; newval input\n+   (match_operand:SI 5 \"const_int_operand\")\t;; is_weak\n+   (match_operand:SI 6 \"const_int_operand\")\t;; success model\n+   (match_operand:SI 7 \"const_int_operand\")]\t;; failure model\n   \"TARGET_CMPXCHG\"\n {\n   emit_insn (gen_atomic_compare_and_swap_single<mode>\n@@ -332,14 +332,14 @@\n (define_mode_attr DCASHMODE [(DI \"SI\") (TI \"DI\")])\n \n (define_expand \"atomic_compare_and_swap<mode>\"\n-  [(match_operand:QI 0 \"register_operand\" \"\")\t\t;; bool success output\n-   (match_operand:CASMODE 1 \"register_operand\" \"\")\t;; oldval output\n-   (match_operand:CASMODE 2 \"memory_operand\" \"\")\t;; memory\n-   (match_operand:CASMODE 3 \"register_operand\" \"\")\t;; expected input\n-   (match_operand:CASMODE 4 \"register_operand\" \"\")\t;; newval input\n-   (match_operand:SI 5 \"const_int_operand\" \"\")\t\t;; is_weak\n-   (match_operand:SI 6 \"const_int_operand\" \"\")\t\t;; success model\n-   (match_operand:SI 7 \"const_int_operand\" \"\")]\t\t;; failure model\n+  [(match_operand:QI 0 \"register_operand\")\t;; bool success output\n+   (match_operand:CASMODE 1 \"register_operand\")\t;; oldval output\n+   (match_operand:CASMODE 2 \"memory_operand\")\t;; memory\n+   (match_operand:CASMODE 3 \"register_operand\")\t;; expected input\n+   (match_operand:CASMODE 4 \"register_operand\")\t;; newval input\n+   (match_operand:SI 5 \"const_int_operand\")\t;; is_weak\n+   (match_operand:SI 6 \"const_int_operand\")\t;; success model\n+   (match_operand:SI 7 \"const_int_operand\")]\t;; failure model\n   \"TARGET_CMPXCHG\"\n {\n   if (<MODE>mode == DImode && TARGET_64BIT)\n@@ -448,7 +448,7 @@\n   [(set (match_operand:SWI 0 \"register_operand\" \"=<r>\")\n \t(unspec_volatile:SWI\n \t  [(match_operand:SWI 1 \"memory_operand\" \"+m\")\n-\t   (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n+\t   (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n \t  UNSPECV_XCHG))\n    (set (match_dup 1)\n \t(plus:SWI (match_dup 1)\n@@ -461,20 +461,20 @@\n ;; __sync_fetch_and_add (x, -N) == N into just lock {add,sub,inc,dec}\n ;; followed by testing of flags instead of lock xadd and comparisons.\n (define_peephole2\n-  [(set (match_operand:SWI 0 \"register_operand\" \"\")\n-\t(match_operand:SWI 2 \"const_int_operand\" \"\"))\n+  [(set (match_operand:SWI 0 \"register_operand\")\n+\t(match_operand:SWI 2 \"const_int_operand\"))\n    (parallel [(set (match_dup 0)\n \t\t   (unspec_volatile:SWI\n-\t\t     [(match_operand:SWI 1 \"memory_operand\" \"\")\n-\t\t      (match_operand:SI 4 \"const_int_operand\" \"\")]\n+\t\t     [(match_operand:SWI 1 \"memory_operand\")\n+\t\t      (match_operand:SI 4 \"const_int_operand\")]\n \t\t     UNSPECV_XCHG))\n \t      (set (match_dup 1)\n \t\t   (plus:SWI (match_dup 1)\n \t\t\t     (match_dup 0)))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (match_dup 0)\n-\t\t     (match_operand:SWI 3 \"const_int_operand\" \"\")))]\n+\t\t     (match_operand:SWI 3 \"const_int_operand\")))]\n   \"peep2_reg_dead_p (3, operands[0])\n    && (unsigned HOST_WIDE_INT) INTVAL (operands[2])\n       == -(unsigned HOST_WIDE_INT) INTVAL (operands[3])\n@@ -492,7 +492,7 @@\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (unspec_volatile:SWI\n \t\t       [(match_operand:SWI 0 \"memory_operand\" \"+m\")\n-\t\t        (match_operand:SI 3 \"const_int_operand\" \"\")]\n+\t\t        (match_operand:SI 3 \"const_int_operand\")]\n \t\t       UNSPECV_XCHG)\n \t\t     (match_operand:SWI 2 \"const_int_operand\" \"i\")))\n    (set (match_dup 0)\n@@ -521,7 +521,7 @@\n   [(set (match_operand:SWI 0 \"register_operand\" \"=<r>\")\t\t;; output\n \t(unspec_volatile:SWI\n \t  [(match_operand:SWI 1 \"memory_operand\" \"+m\")\t\t;; memory\n-\t   (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; model\n+\t   (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n \t  UNSPECV_XCHG))\n    (set (match_dup 1)\n \t(match_operand:SWI 2 \"register_operand\" \"0\"))]\t\t;; input\n@@ -533,7 +533,7 @@\n \t(unspec_volatile:SWI\n \t  [(plus:SWI (match_dup 0)\n \t\t     (match_operand:SWI 1 \"nonmemory_operand\" \"<r><i>\"))\n-\t   (match_operand:SI 2 \"const_int_operand\" \"\")]\t\t;; model\n+\t   (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n@@ -557,7 +557,7 @@\n \t(unspec_volatile:SWI\n \t  [(minus:SWI (match_dup 0)\n \t\t      (match_operand:SWI 1 \"nonmemory_operand\" \"<r><i>\"))\n-\t   (match_operand:SI 2 \"const_int_operand\" \"\")]\t\t;; model\n+\t   (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n@@ -581,7 +581,7 @@\n \t(unspec_volatile:SWI\n \t  [(any_logic:SWI (match_dup 0)\n \t\t\t  (match_operand:SWI 1 \"nonmemory_operand\" \"<r><i>\"))\n-\t   (match_operand:SI 2 \"const_int_operand\" \"\")]\t\t;; model\n+\t   (match_operand:SI 2 \"const_int_operand\")]\t\t;; model\n \t  UNSPECV_LOCK))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\""}]}