{"sha": "4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "node_id": "C_kwDOANBUbNoAKDRmZTM0Y2RjYzgwYWMyMjViODA2NzBlYWJjMzhhYzVlMzFjZThhNWE", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-28T14:40:25Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-28T14:40:25Z"}, "message": "c: tree: target: C2x (...) function prototypes and va_start relaxation\n\nC2x allows function prototypes to be given as (...), a prototype\nmeaning a variable-argument function with no named arguments.  To\nallow such functions to access their arguments, requirements for\nva_start calls are relaxed so it ignores all but its first argument\n(i.e. subsequent arguments, if any, can be arbitrary pp-token\nsequences).\n\nImplement this feature accordingly.  The va_start relaxation in\n<stdarg.h> is itself easy: __builtin_va_start already supports a\nsecond argument of 0 instead of a parameter name, and calls get\nconverted internally to the form using 0 for that argument, so\n<stdarg.h> just needs changing to use a variadic macro that passes 0\nas the second argument of __builtin_va_start.  (This is done only in\nC2x mode, on the expectation that users of older standard would expect\nunsupported uses of va_start to be diagnosed.)\n\nFor the (...) functions, it's necessary to distinguish these from\nunprototyped functions, whereas previously C++ (...) functions and\nunprototyped functions both used NULL TYPE_ARG_TYPES.  A flag is added\nto tree_type_common to mark the (...) functions; as discussed on gcc@,\ndoing things this way is likely to be safer for unchanged code in GCC\nthan adding a different form of representation in TYPE_ARG_TYPES, or\nadding a flag that instead signals that the function is unprototyped.\n\nThere was previously an option\n-fallow-parameterless-variadic-functions to enable support for (...)\nprototypes.  The support was incomplete - it treated the functions as\nunprototyped, and only parsed some declarations, not e.g.\n\"int g (int (...));\".  This option is changed into a no-op ignored\noption; (...) is always accepted syntactically, with a pedwarn_c11\ncall to given required diagnostics when appropriate.  The peculiarity\nof a parameter list with __attribute__ followed by '...' being\naccepted with that option is removed.\n\nInterfaces in tree.cc that create function types are adjusted to set\nthis flag as appropriate.  It is of course possible that some existing\nusers of the functions to create variable-argument functions actually\nwanted unprototyped functions in the no-named-argument case, rather\nthan functions with a (...) prototype; some such cases in c-common.cc\n(for built-in functions and implicit function declarations) turn out\nto need updating for that reason.\n\nI didn't do anything to change how the C++ front end creates (...)\nfunction types.  It's very likely there are unchanged places in the\ncompiler that in fact turn out to need changes to work properly with\n(...) function prototypes.\n\nTarget setup_incoming_varargs hooks, where they used the information\npassed about the last named argument, needed updating to avoid using\nthat information in the (...) case.  Note that apart from the x86\nchanges, I haven't done any testing of those target changes beyond\nbuilding cc1 to check for syntax errors.  It's possible further\ntarget-specific fixes will be needed; target maintainers should watch\nout for failures of c2x-stdarg-4.c or c2x-stdarg-split-1a.c, the\nexecution tests, which would indicate that this feature is not working\ncorrectly.  Those tests also verify the case where there are named\narguments but the last named argument has a declaration that results\nin undefined behavior in previous C standard versions, such as a type\nchanged by the default argument promotions.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/\n\t* config/aarch64/aarch64.cc (aarch64_setup_incoming_varargs):\n\tCheck TYPE_NO_NAMED_ARGS_STDARG_P.\n\t* config/alpha/alpha.cc (alpha_setup_incoming_varargs): Likewise.\n\t* config/arc/arc.cc (arc_setup_incoming_varargs): Likewise.\n\t* config/arm/arm.cc (arm_setup_incoming_varargs): Likewise.\n\t* config/csky/csky.cc (csky_setup_incoming_varargs): Likewise.\n\t* config/epiphany/epiphany.cc (epiphany_setup_incoming_varargs):\n\tLikewise.\n\t* config/fr30/fr30.cc (fr30_setup_incoming_varargs): Likewise.\n\t* config/frv/frv.cc (frv_setup_incoming_varargs): Likewise.\n\t* config/ft32/ft32.cc (ft32_setup_incoming_varargs): Likewise.\n\t* config/i386/i386.cc (ix86_setup_incoming_varargs): Likewise.\n\t* config/ia64/ia64.cc (ia64_setup_incoming_varargs): Likewise.\n\t* config/loongarch/loongarch.cc\n\t(loongarch_setup_incoming_varargs): Likewise.\n\t* config/m32r/m32r.cc (m32r_setup_incoming_varargs): Likewise.\n\t* config/mcore/mcore.cc (mcore_setup_incoming_varargs): Likewise.\n\t* config/mips/mips.cc (mips_setup_incoming_varargs): Likewise.\n\t* config/mmix/mmix.cc (mmix_setup_incoming_varargs): Likewise.\n\t* config/nds32/nds32.cc (nds32_setup_incoming_varargs): Likewise.\n\t* config/nios2/nios2.cc (nios2_setup_incoming_varargs): Likewise.\n\t* config/riscv/riscv.cc (riscv_setup_incoming_varargs): Likewise.\n\t* config/rs6000/rs6000-call.cc (setup_incoming_varargs): Likewise.\n\t* config/sh/sh.cc (sh_setup_incoming_varargs): Likewise.\n\t* config/visium/visium.cc (visium_setup_incoming_varargs):\n\tLikewise.\n\t* config/vms/vms-c.cc (vms_c_common_override_options): Do not set\n\tflag_allow_parameterless_variadic_functions.\n\t* doc/invoke.texi (-fallow-parameterless-variadic-functions): Do\n\tnot document option.\n\t* function.cc (assign_parms): Call assign_parms_setup_varargs for\n\tTYPE_NO_NAMED_ARGS_STDARG_P case.\n\t* ginclude/stdarg.h [__STDC_VERSION__ > 201710L] (va_start): Make\n\tvariadic macro.  Pass second argument of 0 to __builtin_va_start.\n\t* target.def (setup_incoming_varargs): Update documentation.\n\t* doc/tm.texi: Regenerate.\n\t* tree-core.h (struct tree_type_common): Add\n\tno_named_args_stdarg_p.\n\t* tree-streamer-in.cc (unpack_ts_type_common_value_fields): Unpack\n\tTYPE_NO_NAMED_ARGS_STDARG_P.\n\t* tree-streamer-out.cc (pack_ts_type_common_value_fields): Pack\n\tTYPE_NO_NAMED_ARGS_STDARG_P.\n\t* tree.cc (type_cache_hasher::equal): Compare\n\tTYPE_NO_NAMED_ARGS_STDARG_P.\n\t(build_function_type): Add argument no_named_args_stdarg_p.\n\t(build_function_type_list_1, build_function_type_array_1)\n\t(reconstruct_complex_type): Update calls to build_function_type.\n\t(stdarg_p, prototype_p): Return true for (...) functions.\n\t(gimple_canonical_types_compatible_p): Compare\n\tTYPE_NO_NAMED_ARGS_STDARG_P.\n\t* tree.h (TYPE_NO_NAMED_ARGS_STDARG_P): New.\n\t(build_function_type): Update prototype.\n\ngcc/c-family/\n\t* c-common.cc (def_fn_type): Call build_function_type for\n\tzero-argument variable-argument function.\n\t(c_common_nodes_and_builtins): Build default_function_type with\n\tbuild_function_type.\n\t* c.opt (fallow-parameterless-variadic-functions): Mark as ignored\n\toption.\n\ngcc/c/\n\t* c-decl.cc (grokdeclarator): Pass\n\targ_info->no_named_args_stdarg_p to build_function_type.\n\t(grokparms): Check arg_info->no_named_args_stdarg_p before\n\tconverting () to (void).\n\t(build_arg_info): Initialize no_named_args_stdarg_p.\n\t(get_parm_info): Set no_named_args_stdarg_p.\n\t(start_function): Pass TYPE_NO_NAMED_ARGS_STDARG_P to\n\tbuild_function_type.\n\t(store_parm_decls): Count (...) functions as prototyped.\n\t* c-parser.cc (c_parser_direct_declarator): Allow '...' after open\n\tparenthesis to start parameter list.\n\t(c_parser_parms_list_declarator): Always allow '...' with no\n\targuments, call pedwarn_c11 and set no_named_args_stdarg_p.\n\t* c-tree.h (struct c_arg_info): Add field no_named_args_stdarg_p.\n\t* c-typeck.cc (composite_type): Handle\n\tTYPE_NO_NAMED_ARGS_STDARG_P.\n\t(function_types_compatible_p): Compare\n\tTYPE_NO_NAMED_ARGS_STDARG_P.\n\ngcc/fortran/\n\t* trans-types.cc (gfc_get_function_type): Do not use\n\tbuild_varargs_function_type_vec for unprototyped function.\n\ngcc/lto/\n\t* lto-common.cc (compare_tree_sccs_1): Compare\n\tTYPE_NO_NAMED_ARGS_STDARG_P.\n\ngcc/objc/\n\t* objc-next-runtime-abi-01.cc (build_next_objc_exception_stuff):\n\tUse build_function_type to build type of objc_setjmp_decl.\n\ngcc/testsuite/\n\t* gcc.dg/c11-stdarg-1.c, gcc.dg/c11-stdarg-2.c,\n\tgcc.dg/c11-stdarg-3.c, gcc.dg/c2x-stdarg-1.c,\n\tgcc.dg/c2x-stdarg-2.c, gcc.dg/c2x-stdarg-3.c,\n\tgcc.dg/c2x-stdarg-4.c, gcc.dg/gnu2x-stdarg-1.c,\n\tgcc.dg/torture/c2x-stdarg-split-1a.c,\n\tgcc.dg/torture/c2x-stdarg-split-1b.c: New tests.\n\t* gcc.dg/Wold-style-definition-2.c, gcc.dg/format/sentinel-1.c:\n\tUpdate expected diagnostics.\n\t* gcc.dg/c2x-nullptr-1.c (test5): Cast unused parameter to (void).\n\t* gcc.dg/diagnostic-token-ranges.c: Use -pedantic.  Expect warning\n\tin place of error.", "tree": {"sha": "db3484b3bd407d4efbe918ca7303aa09d68d818a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db3484b3bd407d4efbe918ca7303aa09d68d818a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "988dd22ec6665117e8587389ac85389f1c321c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/988dd22ec6665117e8587389ac85389f1c321c45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/988dd22ec6665117e8587389ac85389f1c321c45"}], "stats": {"total": 726, "additions": 621, "deletions": 105}, "files": [{"sha": "5890c18bdc361c04f327fb8287143cd607ecaa59", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -4064,7 +4064,8 @@ static tree builtin_types[(int) BT_LAST + 1];\n \n /* A helper function for c_common_nodes_and_builtins.  Build function type\n    for DEF with return type RET and N arguments.  If VAR is true, then the\n-   function should be variadic after those N arguments.\n+   function should be variadic after those N arguments, or, if N is zero,\n+   unprototyped.\n \n    Takes special care not to ICE if any of the types involved are\n    error_mark_node, which indicates that said type is not in fact available\n@@ -4093,7 +4094,10 @@ def_fn_type (builtin_type def, builtin_type ret, bool var, int n, ...)\n   if (t == error_mark_node)\n     goto egress;\n   if (var)\n-    t = build_varargs_function_type_array (t, n, args);\n+    if (n == 0)\n+      t = build_function_type (t, NULL_TREE);\n+    else\n+      t = build_varargs_function_type_array (t, n, args);\n   else\n     t = build_function_type_array (t, n, args);\n \n@@ -4661,8 +4665,7 @@ c_common_nodes_and_builtins (void)\n     uintptr_type_node =\n       TREE_TYPE (identifier_global_value (c_get_ident (UINTPTR_TYPE)));\n \n-  default_function_type\n-    = build_varargs_function_type_list (integer_type_node, NULL_TREE);\n+  default_function_type = build_function_type (integer_type_node, NULL_TREE);\n   unsigned_ptrdiff_type_node = c_common_unsigned_type (ptrdiff_type_node);\n \n   lang_hooks.decls.pushdecl"}, {"sha": "63a300ecd7c582394a455218909ac53a6ca5c75a", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -1512,8 +1512,8 @@ fall-virtual\n C++ ObjC++ WarnRemoved\n \n fallow-parameterless-variadic-functions\n-C ObjC Var(flag_allow_parameterless_variadic_functions)\n-Allow variadic functions without named parameter.\n+C ObjC Ignore\n+Does nothing. Preserved for backward compatibility.\n \n falt-external-templates\n C++ ObjC++ WarnRemoved"}, {"sha": "795c97134f2b45c636e140117778456a9107e8c5", "filename": "gcc/c/c-decl.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc%2Fc-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc%2Fc-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -7295,7 +7295,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \t      }\n \t    type_quals = TYPE_UNQUALIFIED;\n \n-\t    type = build_function_type (type, arg_types);\n+\t    type = build_function_type (type, arg_types,\n+\t\t\t\t\targ_info->no_named_args_stdarg_p);\n \t    declarator = declarator->declarator;\n \n \t    /* Set the TYPE_CONTEXTs for each tagged type which is local to\n@@ -8060,7 +8061,8 @@ grokparms (struct c_arg_info *arg_info, bool funcdef_flag)\n       /* In C2X, convert () to (void).  */\n       if (flag_isoc2x\n \t  && !arg_types\n-\t  && !arg_info->parms)\n+\t  && !arg_info->parms\n+\t  && !arg_info->no_named_args_stdarg_p)\n \targ_types = arg_info->types = void_list_node;\n \n       /* If there is a parameter of incomplete type in a definition,\n@@ -8130,6 +8132,7 @@ build_arg_info (void)\n   ret->others = NULL_TREE;\n   ret->pending_sizes = NULL;\n   ret->had_vla_unspec = 0;\n+  ret->no_named_args_stdarg_p = 0;\n   return ret;\n }\n \n@@ -8321,6 +8324,7 @@ get_parm_info (bool ellipsis, tree expr)\n   arg_info->types = types;\n   arg_info->others = others;\n   arg_info->pending_sizes = expr;\n+  arg_info->no_named_args_stdarg_p = ellipsis && !types;\n   return arg_info;\n }\n \f\n@@ -9935,7 +9939,8 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n       /* Make it return void instead.  */\n       TREE_TYPE (decl1)\n \t= build_function_type (void_type_node,\n-\t\t\t       TYPE_ARG_TYPES (TREE_TYPE (decl1)));\n+\t\t\t       TYPE_ARG_TYPES (TREE_TYPE (decl1)),\n+\t\t\t       TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (decl1)));\n     }\n \n   if (warn_about_return_type)\n@@ -10534,7 +10539,7 @@ store_parm_decls (void)\n      empty argument list was converted to (void) in grokparms; in\n      older C standard versions, it does not give the function a type\n      with a prototype for future calls.  */\n-  proto = arg_info->types != 0;\n+  proto = arg_info->types != 0 || arg_info->no_named_args_stdarg_p;\n \n   if (proto)\n     store_parm_decls_newstyle (fndecl, arg_info);"}, {"sha": "ca533c9c6673d7e0603feb238a16a4df7053792a", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -4213,7 +4213,8 @@ c_parser_direct_declarator (c_parser *parser, bool type_seen_p, c_dtr_syn kind,\n       if (kind != C_DTR_NORMAL\n \t  && (c_parser_next_token_starts_declspecs (parser)\n \t      || (!have_gnu_attrs\n-\t\t  && c_parser_nth_token_starts_std_attributes (parser, 1))\n+\t\t  && (c_parser_nth_token_starts_std_attributes (parser, 1)\n+\t\t      || c_parser_next_token_is (parser, CPP_ELLIPSIS)))\n \t      || c_parser_next_token_is (parser, CPP_CLOSE_PAREN)))\n \t{\n \t  struct c_arg_info *args\n@@ -4489,25 +4490,18 @@ c_parser_parms_list_declarator (c_parser *parser, tree attrs, tree expr,\n       c_parser_consume_token (parser);\n       return ret;\n     }\n-  if (c_parser_next_token_is (parser, CPP_ELLIPSIS))\n+  if (c_parser_next_token_is (parser, CPP_ELLIPSIS) && !have_gnu_attrs)\n     {\n       struct c_arg_info *ret = build_arg_info ();\n \n-      if (flag_allow_parameterless_variadic_functions)\n-        {\n-          /* F (...) is allowed.  */\n-          ret->types = NULL_TREE;\n-        }\n-      else\n-        {\n-          /* Suppress -Wold-style-definition for this case.  */\n-          ret->types = error_mark_node;\n-          error_at (c_parser_peek_token (parser)->location,\n-                    \"ISO C requires a named argument before %<...%>\");\n-        }\n+      ret->types = NULL_TREE;\n+      pedwarn_c11 (c_parser_peek_token (parser)->location, OPT_Wpedantic,\n+\t\t   \"ISO C requires a named argument before %<...%> \"\n+\t\t   \"before C2X\");\n       c_parser_consume_token (parser);\n       if (c_parser_next_token_is (parser, CPP_CLOSE_PAREN))\n \t{\n+\t  ret->no_named_args_stdarg_p = true;\n \t  c_parser_consume_token (parser);\n \t  return ret;\n \t}"}, {"sha": "facfc125371985bcf54e5e248ade272ea29fec3c", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -475,6 +475,8 @@ struct c_arg_info {\n   tree pending_sizes;\n   /* True when these arguments had [*].  */\n   BOOL_BITFIELD had_vla_unspec : 1;\n+  /* True when the arguments are a (...) prototype.  */\n+  BOOL_BITFIELD no_named_args_stdarg_p : 1;\n };\n \n /* A declarator.  */"}, {"sha": "052ae6db0009e150e383e026d27fcc5c263dfe4c", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -544,17 +544,19 @@ composite_type (tree t1, tree t2)\n \n \t/* Simple way if one arg fails to specify argument types.  */\n \tif (TYPE_ARG_TYPES (t1) == NULL_TREE)\n-\t {\n-\t    t1 = build_function_type (valtype, TYPE_ARG_TYPES (t2));\n+\t  {\n+\t    t1 = build_function_type (valtype, TYPE_ARG_TYPES (t2),\n+\t\t\t\t      TYPE_NO_NAMED_ARGS_STDARG_P (t2));\n \t    t1 = build_type_attribute_variant (t1, attributes);\n \t    return qualify_type (t1, t2);\n \t }\n \tif (TYPE_ARG_TYPES (t2) == NULL_TREE)\n-\t {\n-\t   t1 = build_function_type (valtype, TYPE_ARG_TYPES (t1));\n-\t   t1 = build_type_attribute_variant (t1, attributes);\n-\t   return qualify_type (t1, t2);\n-\t }\n+\t  {\n+\t    t1 = build_function_type (valtype, TYPE_ARG_TYPES (t1),\n+\t\t\t\t      TYPE_NO_NAMED_ARGS_STDARG_P (t1));\n+\t    t1 = build_type_attribute_variant (t1, attributes);\n+\t    return qualify_type (t1, t2);\n+\t  }\n \n \t/* If both args specify argument types, we must merge the two\n \t   lists, argument by argument.  */\n@@ -1702,6 +1704,8 @@ function_types_compatible_p (const_tree f1, const_tree f2,\n \n   if (args1 == NULL_TREE)\n     {\n+      if (TYPE_NO_NAMED_ARGS_STDARG_P (f1) != TYPE_NO_NAMED_ARGS_STDARG_P (f2))\n+\treturn 0;\n       if (!self_promoting_args_p (args2))\n \treturn 0;\n       /* If one of these types comes from a non-prototype fn definition,\n@@ -1715,6 +1719,8 @@ function_types_compatible_p (const_tree f1, const_tree f2,\n     }\n   if (args2 == NULL_TREE)\n     {\n+      if (TYPE_NO_NAMED_ARGS_STDARG_P (f1) != TYPE_NO_NAMED_ARGS_STDARG_P (f2))\n+\treturn 0;\n       if (!self_promoting_args_p (args1))\n \treturn 0;\n       if (TYPE_ACTUAL_ARG_TYPES (f2)"}, {"sha": "d1f979ebcf80333d957f8ad8631deef47dc693a5", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -19891,7 +19891,8 @@ aarch64_setup_incoming_varargs (cumulative_args_t cum_v,\n      argument.  Advance a local copy of CUM past the last \"real\" named\n      argument, to find out how many registers are left over.  */\n   local_cum = *cum;\n-  aarch64_function_arg_advance (pack_cumulative_args(&local_cum), arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    aarch64_function_arg_advance (pack_cumulative_args(&local_cum), arg);\n \n   /* Found out how many registers we need to save.\n      Honor tree-stdvar analysis results.  */"}, {"sha": "333f2c602c45871ba4562f14941118f4dbf64187", "filename": "gcc/config/alpha/alpha.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Falpha%2Falpha.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Falpha%2Falpha.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -6084,8 +6084,9 @@ alpha_setup_incoming_varargs (cumulative_args_t pcum,\n {\n   CUMULATIVE_ARGS cum = *get_cumulative_args (pcum);\n \n-  /* Skip the current argument.  */\n-  targetm.calls.function_arg_advance (pack_cumulative_args (&cum), arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    /* Skip the current argument.  */\n+    targetm.calls.function_arg_advance (pack_cumulative_args (&cum), arg);\n \n #if TARGET_ABI_OPEN_VMS\n   /* For VMS, we allocate space for all 6 arg registers plus a count."}, {"sha": "604a116e966ddaaddc3908c29283edc1f86c35af", "filename": "gcc/config/arc/arc.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Farc%2Farc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Farc%2Farc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -2450,7 +2450,8 @@ arc_setup_incoming_varargs (cumulative_args_t args_so_far,\n   /* We must treat `__builtin_va_alist' as an anonymous arg.  */\n \n   next_cum = *get_cumulative_args (args_so_far);\n-  arc_function_arg_advance (pack_cumulative_args (&next_cum), arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    arc_function_arg_advance (pack_cumulative_args (&next_cum), arg);\n   first_anon_arg = next_cum;\n \n   if (FUNCTION_ARG_REGNO_P (first_anon_arg))"}, {"sha": "2eb4d51e4a3ca28e97238bd913e993622cf4fdc1", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -29143,7 +29143,8 @@ arm_setup_incoming_varargs (cumulative_args_t pcum_v,\n   if (pcum->pcs_variant <= ARM_PCS_AAPCS_LOCAL)\n     {\n       nregs = pcum->aapcs_ncrn;\n-      if (nregs & 1)\n+      if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl))\n+\t  && (nregs & 1))\n \t{\n \t  int res = arm_needs_doubleword_align (arg.mode, arg.type);\n \t  if (res < 0 && warn_psabi)"}, {"sha": "537eee6ab88029171098f18d29daea1d36690d44", "filename": "gcc/config/csky/csky.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fcsky%2Fcsky.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fcsky%2Fcsky.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -2086,7 +2086,8 @@ csky_setup_incoming_varargs (cumulative_args_t pcum_v,\n \n   cfun->machine->uses_anonymous_args = 1;\n   local_cum = *pcum;\n-  csky_function_arg_advance (local_cum_v, arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    csky_function_arg_advance (local_cum_v, arg);\n   regs_to_push = CSKY_NPARM_REGS - local_cum.reg;\n   if (regs_to_push)\n     *pretend_size  = regs_to_push * UNITS_PER_WORD;"}, {"sha": "c4e3ceaeb2ab4b1866d3d2dab70f1f8a4721fbcb", "filename": "gcc/config/epiphany/epiphany.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fepiphany%2Fepiphany.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fepiphany%2Fepiphany.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -727,11 +727,13 @@ epiphany_setup_incoming_varargs (cumulative_args_t cum,\n   machine_function_t *mf = MACHINE_FUNCTION (cfun);\n \n   /* All BLKmode values are passed by reference.  */\n-  gcc_assert (arg.mode != BLKmode);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    gcc_assert (arg.mode != BLKmode);\n \n   next_cum = *get_cumulative_args (cum);\n-  next_cum = (ROUND_ADVANCE_CUM (next_cum, arg.mode, arg.type)\n-\t      + ROUND_ADVANCE_ARG (arg.mode, arg.type));\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    next_cum = (ROUND_ADVANCE_CUM (next_cum, arg.mode, arg.type)\n+\t\t+ ROUND_ADVANCE_ARG (arg.mode, arg.type));\n   first_anon_arg = next_cum;\n \n   if (first_anon_arg < MAX_EPIPHANY_PARM_REGS && !no_rtl)"}, {"sha": "334bb44e37f86124278cad7dc98ef80043bcfdef", "filename": "gcc/config/fr30/fr30.cc", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Ffr30%2Ffr30.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Ffr30%2Ffr30.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -471,16 +471,19 @@ fr30_setup_incoming_varargs (cumulative_args_t arg_regs_used_so_far_v,\n     = get_cumulative_args (arg_regs_used_so_far_v);\n   int size;\n \n-  /* All BLKmode values are passed by reference.  */\n-  gcc_assert (arg.mode != BLKmode);\n-\n-  /* ??? This run-time test as well as the code inside the if\n-     statement is probably unnecessary.  */\n-  if (targetm.calls.strict_argument_naming (arg_regs_used_so_far_v))\n-    /* If TARGET_STRICT_ARGUMENT_NAMING returns true, then the last named\n-       arg must not be treated as an anonymous arg.  */\n-    /* ??? This is a pointer increment, which makes no sense.  */\n-    arg_regs_used_so_far += fr30_num_arg_regs (arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    {\n+      /* All BLKmode values are passed by reference.  */\n+      gcc_assert (arg.mode != BLKmode);\n+\n+      /* ??? This run-time test as well as the code inside the if\n+\t statement is probably unnecessary.  */\n+      if (targetm.calls.strict_argument_naming (arg_regs_used_so_far_v))\n+\t/* If TARGET_STRICT_ARGUMENT_NAMING returns true, then the last named\n+\t   arg must not be treated as an anonymous arg.  */\n+\t/* ??? This is a pointer increment, which makes no sense.  */\n+\targ_regs_used_so_far += fr30_num_arg_regs (arg);\n+    }\n \n   size = FR30_NUM_ARG_REGS - (* arg_regs_used_so_far);\n "}, {"sha": "5cdb0bfe6e9fbb0b540b86e5dc32444330d55801", "filename": "gcc/config/frv/frv.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Ffrv%2Ffrv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Ffrv%2Ffrv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -2104,7 +2104,8 @@ frv_setup_incoming_varargs (cumulative_args_t cum_v,\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n \n-  if (TARGET_DEBUG_ARG)\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl))\n+      && TARGET_DEBUG_ARG)\n     fprintf (stderr,\n \t     \"setup_vararg: words = %2d, mode = %4s, pretend_size = %d, second_time = %d\\n\",\n \t     *cum, GET_MODE_NAME (arg.mode), *pretend_size, second_time);"}, {"sha": "d6b73d4868669e3fa572e917ce0f9db97e43e6fe", "filename": "gcc/config/ft32/ft32.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fft32%2Fft32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fft32%2Fft32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -634,8 +634,10 @@ ft32_setup_incoming_varargs (cumulative_args_t cum_v,\n \t\t\t     int *pretend_size, int no_rtl ATTRIBUTE_UNUSED)\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n-  int named_size =\n-    GET_MODE_SIZE (SImode) * (*cum - FT32_R0) + GET_MODE_SIZE (arg.mode);\n+  int named_size = 0;\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    named_size =\n+      GET_MODE_SIZE (SImode) * (*cum - FT32_R0) + GET_MODE_SIZE (arg.mode);\n \n   if (named_size < 24)\n     *pretend_size = 24 - named_size;"}, {"sha": "e775ba4ad6ccd7f2d6dafb3e783933d3e246535d", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -4559,7 +4559,8 @@ ix86_setup_incoming_varargs (cumulative_args_t cum_v,\n   /* For varargs, we do not want to skip the dummy va_dcl argument.\n      For stdargs, we do want to skip the last named argument.  */\n   next_cum = *cum;\n-  if (stdarg_p (fntype))\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl))\n+      && stdarg_p (fntype))\n     ix86_function_arg_advance (pack_cumulative_args (&next_cum), arg);\n \n   if (cum->call_abi == MS_ABI)"}, {"sha": "6df1ce736bcb6704aa204e58c1ecaea3c73ca255", "filename": "gcc/config/ia64/ia64.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fia64%2Fia64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fia64%2Fia64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -4596,8 +4596,9 @@ ia64_setup_incoming_varargs (cumulative_args_t cum,\n {\n   CUMULATIVE_ARGS next_cum = *get_cumulative_args (cum);\n \n-  /* Skip the current argument.  */\n-  ia64_function_arg_advance (pack_cumulative_args (&next_cum), arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    /* Skip the current argument.  */\n+    ia64_function_arg_advance (pack_cumulative_args (&next_cum), arg);\n \n   if (next_cum.words < MAX_ARGUMENT_SLOTS)\n     {"}, {"sha": "f54c233f90c69a42f08dcf9e1db3766dafed5ad6", "filename": "gcc/config/loongarch/loongarch.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Floongarch%2Floongarch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -756,7 +756,8 @@ loongarch_setup_incoming_varargs (cumulative_args_t cum,\n      argument.  Advance a local copy of CUM past the last \"real\" named\n      argument, to find out how many registers are left over.  */\n   local_cum = *get_cumulative_args (cum);\n-  loongarch_function_arg_advance (pack_cumulative_args (&local_cum), arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    loongarch_function_arg_advance (pack_cumulative_args (&local_cum), arg);\n \n   /* Found out how many registers we need to save.  */\n   gp_saved = MAX_ARGS_IN_REGISTERS - local_cum.num_gprs;"}, {"sha": "e3489fb4dc06880d653abf2481562d61a4e90004", "filename": "gcc/config/m32r/m32r.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fm32r%2Fm32r.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fm32r%2Fm32r.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -1287,11 +1287,15 @@ m32r_setup_incoming_varargs (cumulative_args_t cum,\n     return;\n \n   /* All BLKmode values are passed by reference.  */\n-  gcc_assert (arg.mode != BLKmode);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    gcc_assert (arg.mode != BLKmode);\n \n-  first_anon_arg = (ROUND_ADVANCE_CUM (*get_cumulative_args (cum),\n-\t\t\t\t       arg.mode, arg.type)\n-\t\t    + ROUND_ADVANCE_ARG (arg.mode, arg.type));\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    first_anon_arg = (ROUND_ADVANCE_CUM (*get_cumulative_args (cum),\n+\t\t\t\t\t arg.mode, arg.type)\n+\t\t      + ROUND_ADVANCE_ARG (arg.mode, arg.type));\n+  else\n+    first_anon_arg = *get_cumulative_args (cum);\n \n   if (first_anon_arg < M32R_MAX_PARM_REGS)\n     {"}, {"sha": "605d63b6a709bd6b4927730ef2cc80ac2c46ef0a", "filename": "gcc/config/mcore/mcore.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fmcore%2Fmcore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fmcore%2Fmcore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -1953,8 +1953,9 @@ mcore_setup_incoming_varargs (cumulative_args_t args_so_far_v,\n   /* We need to know how many argument registers are used before\n      the varargs start, so that we can push the remaining argument\n      registers during the prologue.  */\n-  number_of_regs_before_varargs\n-    = *args_so_far + mcore_num_arg_regs (arg.mode, arg.type);\n+  number_of_regs_before_varargs = *args_so_far;\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    number_of_regs_before_varargs += mcore_num_arg_regs (arg.mode, arg.type);\n   \n   /* There is a bug somewhere in the arg handling code.\n      Until I can find it this workaround always pushes the"}, {"sha": "0ac0248fb9e3f444c11312e46cfb4470df8e1a25", "filename": "gcc/config/mips/mips.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fmips%2Fmips.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fmips%2Fmips.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -6683,7 +6683,8 @@ mips_setup_incoming_varargs (cumulative_args_t cum,\n      argument.  Advance a local copy of CUM past the last \"real\" named\n      argument, to find out how many registers are left over.  */\n   local_cum = *get_cumulative_args (cum);\n-  mips_function_arg_advance (pack_cumulative_args (&local_cum), arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    mips_function_arg_advance (pack_cumulative_args (&local_cum), arg);\n \n   /* Found out how many registers we need to save.  */\n   gp_saved = MAX_ARGS_IN_REGISTERS - local_cum.num_gprs;"}, {"sha": "1ac7b883ac5c3632c3230759089d3cfab4488577", "filename": "gcc/config/mmix/mmix.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fmmix%2Fmmix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fmmix%2Fmmix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -999,7 +999,8 @@ mmix_setup_incoming_varargs (cumulative_args_t args_so_farp_v,\n \n   /* We assume that one argument takes up one register here.  That should\n      be true until we start messing with multi-reg parameters.  */\n-  if ((7 + (MMIX_FUNCTION_ARG_SIZE (arg.mode, arg.type))) / 8 != 1)\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl))\n+      && (7 + (MMIX_FUNCTION_ARG_SIZE (arg.mode, arg.type))) / 8 != 1)\n     internal_error (\"MMIX Internal: Last named vararg would not fit in a register\");\n }\n "}, {"sha": "639baef6c1752b3a992a72c48e93836ae9f87932", "filename": "gcc/config/nds32/nds32.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fnds32%2Fnds32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fnds32%2Fnds32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -2377,9 +2377,12 @@ nds32_setup_incoming_varargs (cumulative_args_t ca,\n      for varargs.  */\n   total_args_regs\n     = NDS32_MAX_GPR_REGS_FOR_ARGS + NDS32_GPR_ARG_FIRST_REGNUM;\n-  num_of_used_regs\n-    = NDS32_AVAILABLE_REGNUM_FOR_GPR_ARG (cum->gpr_offset, arg.mode, arg.type)\n-      + NDS32_NEED_N_REGS_FOR_ARG (arg.mode, arg.type);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    num_of_used_regs\n+      = NDS32_AVAILABLE_REGNUM_FOR_GPR_ARG (cum->gpr_offset, arg.mode, arg.type)\n+        + NDS32_NEED_N_REGS_FOR_ARG (arg.mode, arg.type);\n+  else\n+    num_of_used_regs = cum->gpr_offset + NDS32_GPR_ARG_FIRST_REGNUM;\n \n   remaining_reg_count = total_args_regs - num_of_used_regs;\n   *pretend_args_size = remaining_reg_count * UNITS_PER_WORD;"}, {"sha": "6a894ec345e537077c0cd90973ac319ca7527b49", "filename": "gcc/config/nios2/nios2.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fnios2%2Fnios2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fnios2%2Fnios2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -3524,7 +3524,8 @@ nios2_setup_incoming_varargs (cumulative_args_t cum_v,\n \n   cfun->machine->uses_anonymous_args = 1;\n   local_cum = *cum;\n-  nios2_function_arg_advance (local_cum_v, arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    nios2_function_arg_advance (local_cum_v, arg);\n \n   regs_to_push = NUM_ARG_REGS - local_cum.regs_used;\n "}, {"sha": "32f9ef9ade9f3e00f292bad67ae1cebb471b3367", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -3730,7 +3730,8 @@ riscv_setup_incoming_varargs (cumulative_args_t cum,\n      argument.  Advance a local copy of CUM past the last \"real\" named\n      argument, to find out how many registers are left over.  */\n   local_cum = *get_cumulative_args (cum);\n-  riscv_function_arg_advance (pack_cumulative_args (&local_cum), arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    riscv_function_arg_advance (pack_cumulative_args (&local_cum), arg);\n \n   /* Found out how many registers we need to save.  */\n   gp_saved = MAX_ARGS_IN_REGISTERS - local_cum.num_gprs;"}, {"sha": "6da4de67137871ee887f052ec87a937b9c1c8a88", "filename": "gcc/config/rs6000/rs6000-call.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -2253,7 +2253,9 @@ setup_incoming_varargs (cumulative_args_t cum,\n \n   /* Skip the last named argument.  */\n   next_cum = *get_cumulative_args (cum);\n-  rs6000_function_arg_advance_1 (&next_cum, arg.mode, arg.type, arg.named, 0);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    rs6000_function_arg_advance_1 (&next_cum, arg.mode, arg.type, arg.named,\n+\t\t\t\t   0);\n \n   if (DEFAULT_ABI == ABI_V4)\n     {\n@@ -2327,7 +2329,8 @@ setup_incoming_varargs (cumulative_args_t cum,\n       first_reg_offset = next_cum.words;\n       save_area = crtl->args.internal_arg_pointer;\n \n-      if (targetm.calls.must_pass_in_stack (arg))\n+      if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl))\n+\t  && targetm.calls.must_pass_in_stack (arg))\n \tfirst_reg_offset += rs6000_arg_size (TYPE_MODE (arg.type), arg.type);\n     }\n "}, {"sha": "1aec70a23d87716a41f2f335d2687fee539ac10d", "filename": "gcc/config/sh/sh.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fsh%2Fsh.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fsh%2Fsh.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -8183,11 +8183,12 @@ sh_setup_incoming_varargs (cumulative_args_t ca,\n   gcc_assert (cfun->stdarg);\n   if (TARGET_VARARGS_PRETEND_ARGS (current_function_decl))\n     {\n-      int named_parm_regs, anon_parm_regs;\n+      int named_parm_regs = 0, anon_parm_regs;\n \n-      named_parm_regs = (sh_round_reg (*get_cumulative_args (ca), arg.mode)\n-\t\t\t + CEIL (arg.promoted_size_in_bytes (),\n-\t\t\t\t UNITS_PER_WORD));\n+      if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+\tnamed_parm_regs = (sh_round_reg (*get_cumulative_args (ca), arg.mode)\n+\t\t\t   + CEIL (arg.promoted_size_in_bytes (),\n+\t\t\t\t   UNITS_PER_WORD));\n       anon_parm_regs = NPARM_REGS (SImode) - named_parm_regs;\n       if (anon_parm_regs > 0)\n \t*pretend_arg_size = anon_parm_regs * 4;"}, {"sha": "e7d15960fc7c316537f17004ea25c56bf908128a", "filename": "gcc/config/visium/visium.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fvisium%2Fvisium.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fvisium%2Fvisium.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -1481,7 +1481,8 @@ visium_setup_incoming_varargs (cumulative_args_t pcum_v,\n   /* The caller has advanced ARGS_SO_FAR up to, but not beyond, the last named\n      argument.  Advance a local copy of ARGS_SO_FAR past the last \"real\" named\n      argument, to find out how many registers are left over.  */\n-  TARGET_FUNCTION_ARG_ADVANCE (local_args_so_far, arg);\n+  if (!TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (current_function_decl)))\n+    TARGET_FUNCTION_ARG_ADVANCE (local_args_so_far, arg);\n \n   /* Find how many registers we need to save.  */\n   locargs = get_cumulative_args (local_args_so_far);"}, {"sha": "ccf6d5fe3b67bd2773900e745004ac2b40f0bf2e", "filename": "gcc/config/vms/vms-c.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fvms%2Fvms-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fconfig%2Fvms%2Fvms-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvms%2Fvms-c.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -455,9 +455,6 @@ vms_c_register_includes (const char *sysroot,\n void\n vms_c_common_override_options (void)\n {\n-  /* Allow variadic functions without parameters (as declared in starlet).  */\n-  flag_allow_parameterless_variadic_functions = TRUE;\n-\n   /* Initialize c_default_pointer_mode.  */\n   switch (flag_vms_pointer_size)\n     {"}, {"sha": "550aec87809046bdaef7b24cb3f41bf24747d9e1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -198,7 +198,7 @@ in the following sections.\n @item C Language Options\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n @gccoptlist{-ansi  -std=@var{standard}  -aux-info @var{filename} @gol\n--fallow-parameterless-variadic-functions  -fno-asm  @gol\n+-fno-asm  @gol\n -fno-builtin  -fno-builtin-@var{function}  -fcond-mismatch @gol\n -ffreestanding  -fgimple  -fgnu-tm  -fgnu89-inline  -fhosted @gol\n -flax-vector-conversions  -fms-extensions @gol\n@@ -2515,14 +2515,6 @@ character).  In the case of function definitions, a K&R-style list of\n arguments followed by their declarations is also provided, inside\n comments, after the declaration.\n \n-@item -fallow-parameterless-variadic-functions\n-@opindex fallow-parameterless-variadic-functions\n-Accept variadic functions without named parameters.\n-\n-Although it is possible to define such a function, this is not very\n-useful as it is not possible to read the arguments.  This is only\n-supported for C as this construct is allowed by C++.\n-\n @item -fno-asm\n @opindex fno-asm\n @opindex fasm"}, {"sha": "63c8a3177ee5a31024e101183b9d99106494fe4d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -5378,7 +5378,9 @@ pass all their arguments on the stack.\n The argument @var{args_so_far} points to the @code{CUMULATIVE_ARGS} data\n structure, containing the values that are obtained after processing the\n named arguments.  The argument @var{arg} describes the last of these named\n-arguments.\n+arguments.  The argument @var{arg} should not be used if the function type\n+satisfies @code{TYPE_NO_NAMED_ARGS_STDARG_P}, since in that case there are\n+no named arguments and all arguments are accessed with @code{va_arg}.\n \n The target hook should do two things: first, push onto the stack all the\n argument registers @emph{not} used for the named arguments, and second,"}, {"sha": "def7552ac67f5790c1458113cb44b2aaa0349fdb", "filename": "gcc/fortran/trans-types.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ffortran%2Ftrans-types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ffortran%2Ftrans-types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -3297,7 +3297,9 @@ gfc_get_function_type (gfc_symbol * sym, gfc_actual_arglist *actual_args,\n     type = gfc_sym_type (sym);\n \n   if (is_varargs)\n-    type = build_varargs_function_type_vec (type, typelist);\n+    /* This should be represented as an unprototyped type, not a type\n+       with (...) prototype.  */\n+    type = build_function_type (type, NULL_TREE);\n   else\n     type = build_function_type_vec (type, typelist);\n "}, {"sha": "d3da20ede7f2c6e03be152e2ac25c69dc78ae281", "filename": "gcc/function.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ffunction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ffunction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -3647,6 +3647,12 @@ assign_parms (tree fndecl)\n   assign_parms_initialize_all (&all);\n   fnargs = assign_parms_augmented_arg_list (&all);\n \n+  if (TYPE_NO_NAMED_ARGS_STDARG_P (TREE_TYPE (fndecl)))\n+    {\n+      struct assign_parm_data_one data = {};\n+      assign_parms_setup_varargs (&all, &data, false);\n+    }\n+\n   FOR_EACH_VEC_ELT (fnargs, i, parm)\n     {\n       struct assign_parm_data_one data;"}, {"sha": "c704c9ffcf212a83ca2f6765cf88440620649080", "filename": "gcc/ginclude/stdarg.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fginclude%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fginclude%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdarg.h?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -44,7 +44,11 @@ typedef __builtin_va_list __gnuc_va_list;\n    if this invocation was from the user program.  */\n #ifdef _STDARG_H\n \n+#if defined __STDC_VERSION__ && __STDC_VERSION__ > 201710L\n+#define va_start(v, ...)\t__builtin_va_start(v, 0)\n+#else\n #define va_start(v,l)\t__builtin_va_start(v,l)\n+#endif\n #define va_end(v)\t__builtin_va_end(v)\n #define va_arg(v,l)\t__builtin_va_arg(v,l)\n #if !defined(__STRICT_ANSI__) || __STDC_VERSION__ + 0 >= 199900L \\"}, {"sha": "f64309731fa824cd3bdf07d9d7e0302771585e81", "filename": "gcc/lto/lto-common.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Flto%2Flto-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Flto%2Flto-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -1270,6 +1270,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       if (AGGREGATE_TYPE_P (t1))\n \tcompare_values (TYPE_TYPELESS_STORAGE);\n       compare_values (TYPE_EMPTY_P);\n+      compare_values (TYPE_NO_NAMED_ARGS_STDARG_P);\n       compare_values (TYPE_PACKED);\n       compare_values (TYPE_RESTRICT);\n       compare_values (TYPE_USER_ALIGN);"}, {"sha": "8d41886902b0ac7590f6d9e59972c09c342cb422", "filename": "gcc/objc/objc-next-runtime-abi-01.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -2443,7 +2443,7 @@ build_next_objc_exception_stuff (void)\n   /* int _setjmp(...); */\n   /* If the user includes <setjmp.h>, this shall be superseded by\n      'int _setjmp(jmp_buf);' */\n-  temp_type = build_varargs_function_type_list (integer_type_node, NULL_TREE);\n+  temp_type = build_function_type (integer_type_node, NULL_TREE);\n   objc_setjmp_decl\n     = add_builtin_function (TAG_SETJMP, temp_type, 0, NOT_BUILT_IN, NULL, NULL_TREE);\n "}, {"sha": "25f94c19fa710a541c2aa3a0a5a5f912dd17ab25", "filename": "gcc/target.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -4680,7 +4680,9 @@ pass all their arguments on the stack.\\n\\\n The argument @var{args_so_far} points to the @code{CUMULATIVE_ARGS} data\\n\\\n structure, containing the values that are obtained after processing the\\n\\\n named arguments.  The argument @var{arg} describes the last of these named\\n\\\n-arguments.\\n\\\n+arguments.  The argument @var{arg} should not be used if the function type\\n\\\n+satisfies @code{TYPE_NO_NAMED_ARGS_STDARG_P}, since in that case there are\\n\\\n+no named arguments and all arguments are accessed with @code{va_arg}.\\n\\\n \\n\\\n The target hook should do two things: first, push onto the stack all the\\n\\\n argument registers @emph{not} used for the named arguments, and second,\\n\\"}, {"sha": "8e297c96411af015224737dd8382ea2504fe6425", "filename": "gcc/testsuite/gcc.dg/Wold-style-definition-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2FWold-style-definition-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2FWold-style-definition-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWold-style-definition-2.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -5,6 +5,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wold-style-definition\" } */\n \n-void bar1 ( ... ) {} /* { dg-error \"ISO C requires a named argument\" } */\n+void bar1 ( ... ) {}\n \n void bar2 (int a, ... ) {}"}, {"sha": "984577fe656fefd42d0e2a8db780a88a4fc4dd9e", "filename": "gcc/testsuite/gcc.dg/c11-stdarg-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-stdarg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-stdarg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-stdarg-1.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -0,0 +1,7 @@\n+/* Test variadic functions with no named parameters not supported in C11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+int f (...); /* { dg-error \"ISO C requires a named argument before\" } */\n+int g (int (...)); /* { dg-error \"ISO C requires a named argument before\" } */\n+int h (...) { return 0; } /* { dg-error \"ISO C requires a named argument before\" } */"}, {"sha": "bd115e8850c8e06a9a831c765983f4bba321ed46", "filename": "gcc/testsuite/gcc.dg/c11-stdarg-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-stdarg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-stdarg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-stdarg-2.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -0,0 +1,7 @@\n+/* Test variadic functions with no named parameters not supported in C11.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic\" } */\n+\n+int f (...); /* { dg-warning \"ISO C requires a named argument before\" } */\n+int g (int (...)); /* { dg-warning \"ISO C requires a named argument before\" } */\n+int h (...) { return 0; } /* { dg-warning \"ISO C requires a named argument before\" } */"}, {"sha": "009292461bd7df02636353fad4f535b9a552eeed", "filename": "gcc/testsuite/gcc.dg/c11-stdarg-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-stdarg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-stdarg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-stdarg-3.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -0,0 +1,8 @@\n+/* Test variadic functions with no named parameters not supported in C11, but\n+   diagnostic disabled with -Wno-c11-c2x-compat.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors -Wno-c11-c2x-compat\" } */\n+\n+int f (...);\n+int g (int (...));\n+int h (...) { return 0; }"}, {"sha": "9f2cb6c8256e1f52055140aef257434f4411aab5", "filename": "gcc/testsuite/gcc.dg/c2x-nullptr-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-nullptr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-nullptr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-nullptr-1.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -226,6 +226,7 @@ test4 (void)\n static void\n test5 (int i, ...)\n {\n+  (void) i;\n   va_list ap;\n   va_start (ap, i);\n   if (va_arg (ap, void *))"}, {"sha": "7def49d3ce220e014934bf7e4d1df9fc8634eb57", "filename": "gcc/testsuite/gcc.dg/c2x-stdarg-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-1.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -0,0 +1,22 @@\n+/* Test C2x variadic functions with no named parameters.  Compilation tests,\n+   valid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+int f (...);\n+int g (int (...));\n+int h (...) { return 0; }\n+\n+typedef int A[];\n+typedef int A2[2];\n+\n+A *f1 (...);\n+A2 *f1 (...);\n+A *f1 (...) { return 0; }\n+\n+A2 *f2 (...);\n+A *f2 (...);\n+A2 *f2 (...) { return 0; }\n+typeof (f1) f2;\n+\n+int t () { return f () + f (1) + f (1, 2) + h () + h (1.5, 2, f1) + g (f); }"}, {"sha": "27782401c93dd2c8fa4ae36102f0d7f0c4e6992d", "filename": "gcc/testsuite/gcc.dg/c2x-stdarg-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-2.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -0,0 +1,22 @@\n+/* Test C2x variadic functions with no named parameters.  Compilation tests,\n+   valid code, verify not considered unprototyped functions.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors -Wstrict-prototypes -Wold-style-definition\" } */\n+\n+int f (...);\n+int g (int (...));\n+int h (...) { return 0; }\n+\n+typedef int A[];\n+typedef int A2[2];\n+\n+A *f1 (...);\n+A2 *f1 (...);\n+A *f1 (...) { return 0; }\n+\n+A2 *f2 (...);\n+A *f2 (...);\n+A2 *f2 (...) { return 0; }\n+typeof (f1) f2;\n+\n+int t () { return f () + f (1) + f (1, 2) + h () + h (1.5, 2, f1) + g (f); }"}, {"sha": "e2e14063e91b9cbb624fed58716ab5ce5f665c39", "filename": "gcc/testsuite/gcc.dg/c2x-stdarg-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-3.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -0,0 +1,16 @@\n+/* Test C2x variadic functions with no named parameters.  Compilation tests,\n+   invalid code.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+int f (...); /* { dg-message \"previous declaration\" } */\n+int f (); /* { dg-error \"conflicting types\" } */\n+\n+int f2 (...); /* { dg-message \"previous declaration\" } */\n+int f2 (int); /* { dg-error \"conflicting types\" } */\n+\n+int g (); /* { dg-message \"previous declaration\" } */\n+int g (...); /* { dg-error \"conflicting types\" } */\n+\n+int g2 (int); /* { dg-message \"previous declaration\" } */\n+int g2 (...); /* { dg-error \"conflicting types\" } */"}, {"sha": "1f8718dec683c9c9288f3850d6f69b76a7f0e8d9", "filename": "gcc/testsuite/gcc.dg/c2x-stdarg-4.c", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-stdarg-4.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -0,0 +1,164 @@\n+/* Test C2x variadic functions with no named parameters, or last named\n+   parameter with a declaration not allowed in C17.  Execution tests.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+double\n+f (...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  double ret = va_arg (ap, int);\n+  ret += va_arg (ap, double);\n+  ret += va_arg (ap, int);\n+  ret += va_arg (ap, double);\n+  va_end (ap);\n+  return ret;\n+}\n+\n+void\n+g (...)\n+{\n+  va_list ap;\n+  va_start (ap, random ! ignored, ignored ** text);\n+  for (int i = 0; i < 10; i++)\n+    if (va_arg (ap, double) != i)\n+      abort ();\n+  va_end (ap);\n+}\n+\n+void\n+h1 (register int x, ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+h2 (int x(), ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+h3 (int x[10], ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+h4 (char x, ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+h5 (float x, ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+h6 (volatile long x, ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+struct s { char c[1000]; };\n+\n+void\n+h7 (volatile struct s x, ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+int\n+main ()\n+{\n+  if (f (1, 2.0, 3, 4.0) != 10.0)\n+    abort ();\n+  g (0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0);\n+  g (0.0f, 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f);\n+  h1 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h2 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h3 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h4 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h5 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h6 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h7 ((struct s) {}, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  exit (0);\n+}"}, {"sha": "31085be14211214d136db3d1bbb6a546752768e2", "filename": "gcc/testsuite/gcc.dg/diagnostic-token-ranges.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-token-ranges.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-token-ranges.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiagnostic-token-ranges.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-fdiagnostics-show-caret -Wc++-compat -std=c11\" } */\n+/* { dg-options \"-fdiagnostics-show-caret -Wc++-compat -std=c11 -pedantic\" } */\n \n /* Verify that various diagnostics show source code ranges.  */\n \n@@ -48,7 +48,7 @@ void test_identifier_conflicts_with_cplusplus (void)\n }\n \n extern void\n-bogus_varargs (...); /* { dg-error \"ISO C requires a named argument before '...'\" } */\n+bogus_varargs (...); /* { dg-warning \"ISO C requires a named argument before '...'\" } */\n /*\n { dg-begin-multiline-output \"\" }\n  bogus_varargs (...);"}, {"sha": "16c75a8a9612a9ce74f66be7fde5eeb6640275c5", "filename": "gcc/testsuite/gcc.dg/format/sentinel-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fsentinel-1.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -15,7 +15,7 @@ extern char *envp[];\n extern int a ATTR; /* { dg-warning \"applies to function types\" \"sentinel\" } */\n \n extern void foo1 (const char *, ...) ATTR; /* { dg-message \"note: declared here\" } */\n-extern void foo2 (...) ATTR; /* { dg-error \"ISO C requires|named arguments\" \"sentinel\" } */\n+extern void foo2 (...) ATTR;\n extern void foo3 () ATTR; /* { dg-warning \"named arguments\" \"sentinel\" } */\n extern void foo4 (const char *, int) ATTR; /* { dg-warning \"variadic functions\" \"sentinel\" } */\n extern void foo5 (const char *, ...) __attribute__ ((__sentinel__(1)));"}, {"sha": "bb64cdeb48a482ff70882005a88f758ee5bfdbf6", "filename": "gcc/testsuite/gcc.dg/gnu2x-stdarg-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-stdarg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-stdarg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgnu2x-stdarg-1.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -0,0 +1,8 @@\n+/* Test variadic functions with no named parameters do not accept GNU\n+   attributes before '...'.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu2x\" } */\n+\n+int f (__attribute__(()) ...); /* { dg-error \"expected\" } */\n+int g (int (__attribute__(()) ...)); /* { dg-error \"expected\" } */\n+int h (__attribute__(()) ...) { return 0; } /* { dg-error \"expected\" } */"}, {"sha": "f527b823287e4b2bde34126ec224311b6b1e39fd", "filename": "gcc/testsuite/gcc.dg/torture/c2x-stdarg-split-1a.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fc2x-stdarg-split-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fc2x-stdarg-split-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fc2x-stdarg-split-1a.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -0,0 +1,37 @@\n+/* Test C2x variadic functions with no named parameters, or last named\n+   parameter with a declaration not allowed in C17.  Execution tests split\n+   between source files.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+/* { dg-additional-sources \"c2x-stdarg-split-1b.c\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+double f (...);\n+void g (...);\n+void h1 (register int x, ...);\n+void h2 (int x(), ...);\n+void h3 (int x[10], ...);\n+void h4 (char x, ...);\n+void h5 (float x, ...);\n+void h6 (volatile long x, ...);\n+struct s { char c[1000]; };\n+void h7 (volatile struct s x, ...);\n+\n+int\n+main ()\n+{\n+  if (f (1, 2.0, 3, 4.0) != 10.0)\n+    abort ();\n+  g (0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0);\n+  g (0.0f, 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f);\n+  h1 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h2 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h3 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h4 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h5 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h6 (0, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  h7 ((struct s) {}, 0.0, 1, 2.0, 3, 4.0, 5, 6.0, 7, 8.0, 9);\n+  exit (0);\n+}"}, {"sha": "55a01b20beb8d56dc65b3be7a03a5e6974973b72", "filename": "gcc/testsuite/gcc.dg/torture/c2x-stdarg-split-1b.c", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fc2x-stdarg-split-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fc2x-stdarg-split-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fc2x-stdarg-split-1b.c?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -0,0 +1,147 @@\n+/* Test C2x variadic functions with no named parameters, or last named\n+   parameter with a declaration not allowed in C17.  Execution tests split\n+   between source files.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+double\n+f (...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  double ret = va_arg (ap, int);\n+  ret += va_arg (ap, double);\n+  ret += va_arg (ap, int);\n+  ret += va_arg (ap, double);\n+  va_end (ap);\n+  return ret;\n+}\n+\n+void\n+g (...)\n+{\n+  va_list ap;\n+  va_start (ap, random ! ignored, ignored ** text);\n+  for (int i = 0; i < 10; i++)\n+    if (va_arg (ap, double) != i)\n+      abort ();\n+  va_end (ap);\n+}\n+\n+void\n+h1 (register int x, ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+h2 (int x(), ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+h3 (int x[10], ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+h4 (char x, ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+h5 (float x, ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+void\n+h6 (volatile long x, ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}\n+\n+struct s { char c[1000]; };\n+\n+void\n+h7 (volatile struct s x, ...)\n+{\n+  va_list ap;\n+  va_start (ap);\n+  for (int i = 0; i < 10; i++)\n+    {\n+      if (va_arg (ap, double) != i)\n+\tabort ();\n+      i++;\n+      if (va_arg (ap, int) != i)\n+\tabort ();\n+    }\n+  va_end (ap);\n+}"}, {"sha": "af75522504fa701c16c41d49268c1cfe29c0619d", "filename": "gcc/tree-core.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -1717,7 +1717,8 @@ struct GTY(()) tree_type_common {\n   unsigned typeless_storage : 1;\n   unsigned empty_flag : 1;\n   unsigned indivisible_p : 1;\n-  unsigned spare : 16;\n+  unsigned no_named_args_stdarg_p : 1;\n+  unsigned spare : 15;\n \n   alias_set_type alias_set;\n   tree pointer_to;"}, {"sha": "0fa1eba86ab1346ce32312d10cf4bdda3b006787", "filename": "gcc/tree-streamer-in.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftree-streamer-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftree-streamer-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -398,6 +398,7 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n   if (AGGREGATE_TYPE_P (expr))\n     TYPE_TYPELESS_STORAGE (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_EMPTY_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  TYPE_NO_NAMED_ARGS_STDARG_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_PRECISION (expr) = bp_unpack_var_len_unsigned (bp);\n   SET_TYPE_ALIGN (expr, bp_unpack_var_len_unsigned (bp));\n #ifdef ACCEL_COMPILER"}, {"sha": "3bf95ffd66c68b22a944bf4ffda4ac32f0e81b6d", "filename": "gcc/tree-streamer-out.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftree-streamer-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftree-streamer-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -365,6 +365,7 @@ pack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n   if (AGGREGATE_TYPE_P (expr))\n     bp_pack_value (bp, TYPE_TYPELESS_STORAGE (expr), 1);\n   bp_pack_value (bp, TYPE_EMPTY_P (expr), 1);\n+  bp_pack_value (bp, TYPE_NO_NAMED_ARGS_STDARG_P (expr), 1);\n   bp_pack_var_len_unsigned (bp, TYPE_PRECISION (expr));\n   bp_pack_var_len_unsigned (bp, TYPE_ALIGN (expr));\n }"}, {"sha": "172098787dd924ec23101e7495cf0e67ca47d787", "filename": "gcc/tree.cc", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -6112,7 +6112,9 @@ type_cache_hasher::equal (type_hash *a, type_hash *b)\n \t\t\t\t      TYPE_FIELDS (b->type))));\n \n     case FUNCTION_TYPE:\n-      if (TYPE_ARG_TYPES (a->type) == TYPE_ARG_TYPES (b->type)\n+      if ((TYPE_ARG_TYPES (a->type) == TYPE_ARG_TYPES (b->type)\n+\t   && (TYPE_NO_NAMED_ARGS_STDARG_P (a->type)\n+\t       == TYPE_NO_NAMED_ARGS_STDARG_P (b->type)))\n \t  || (TYPE_ARG_TYPES (a->type)\n \t      && TREE_CODE (TYPE_ARG_TYPES (a->type)) == TREE_LIST\n \t      && TYPE_ARG_TYPES (b->type)\n@@ -7364,10 +7366,13 @@ maybe_canonicalize_argtypes (tree argtypes,\n    given arguments of types ARG_TYPES.\n    ARG_TYPES is a chain of TREE_LIST nodes whose TREE_VALUEs\n    are data type nodes for the arguments of the function.\n+   NO_NAMED_ARGS_STDARG_P is true if this is a prototyped\n+   variable-arguments function with (...) prototype (no named arguments).\n    If such a type has already been constructed, reuse it.  */\n \n tree\n-build_function_type (tree value_type, tree arg_types)\n+build_function_type (tree value_type, tree arg_types,\n+\t\t     bool no_named_args_stdarg_p)\n {\n   tree t;\n   inchash::hash hstate;\n@@ -7386,6 +7391,11 @@ build_function_type (tree value_type, tree arg_types)\n   t = make_node (FUNCTION_TYPE);\n   TREE_TYPE (t) = value_type;\n   TYPE_ARG_TYPES (t) = arg_types;\n+  if (no_named_args_stdarg_p)\n+    {\n+      gcc_assert (arg_types == NULL_TREE);\n+      TYPE_NO_NAMED_ARGS_STDARG_P (t) = 1;\n+    }\n \n   /* If we already have such a type, use the old one.  */\n   hashval_t hash = type_hash_canon_hash (t);\n@@ -7436,7 +7446,7 @@ build_function_type_list_1 (bool vaargs, tree return_type, va_list argp)\n       args = nreverse (args);\n       TREE_CHAIN (last) = void_list_node;\n     }\n-  args = build_function_type (return_type, args);\n+  args = build_function_type (return_type, args, vaargs && args == NULL_TREE);\n \n   return args;\n }\n@@ -7491,7 +7501,7 @@ build_function_type_array_1 (bool vaargs, tree return_type, int n,\n   for (i = n - 1; i >= 0; i--)\n     t = tree_cons (NULL_TREE, arg_types[i], t);\n \n-  return build_function_type (return_type, t);\n+  return build_function_type (return_type, t, vaargs && n == 0);\n }\n \n /* Build a function type.  RETURN_TYPE is the type returned by the\n@@ -9994,7 +10004,8 @@ reconstruct_complex_type (tree type, tree bottom)\n   else if (TREE_CODE (type) == FUNCTION_TYPE)\n     {\n       inner = reconstruct_complex_type (TREE_TYPE (type), bottom);\n-      outer = build_function_type (inner, TYPE_ARG_TYPES (type));\n+      outer = build_function_type (inner, TYPE_ARG_TYPES (type),\n+\t\t\t\t   TYPE_NO_NAMED_ARGS_STDARG_P (type));\n     }\n   else if (TREE_CODE (type) == METHOD_TYPE)\n     {\n@@ -11612,6 +11623,9 @@ stdarg_p (const_tree fntype)\n   if (!fntype)\n     return false;\n \n+  if (TYPE_NO_NAMED_ARGS_STDARG_P (fntype))\n+    return true;\n+\n   FOREACH_FUNCTION_ARGS (fntype, t, args_iter)\n     {\n       n = t;\n@@ -11629,6 +11643,9 @@ prototype_p (const_tree fntype)\n \n   gcc_assert (fntype != NULL_TREE);\n \n+  if (TYPE_NO_NAMED_ARGS_STDARG_P (fntype))\n+    return true;\n+\n   t = TYPE_ARG_TYPES (fntype);\n   return (t != NULL_TREE);\n }\n@@ -13647,7 +13664,9 @@ gimple_canonical_types_compatible_p (const_tree t1, const_tree t2,\n \t\t\t\t\t\ttrust_type_canonical))\n \treturn false;\n \n-      if (TYPE_ARG_TYPES (t1) == TYPE_ARG_TYPES (t2))\n+      if (TYPE_ARG_TYPES (t1) == TYPE_ARG_TYPES (t2)\n+\t  && (TYPE_NO_NAMED_ARGS_STDARG_P (t1)\n+\t      == TYPE_NO_NAMED_ARGS_STDARG_P (t2)))\n \treturn true;\n       else\n \t{"}, {"sha": "d6a5fdf6d81bf10044249c015083e6db8b35b519", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a", "patch": "@@ -772,6 +772,12 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    normal GNU extensions for target-specific vector types.  */\n #define TYPE_INDIVISIBLE_P(NODE) (TYPE_CHECK (NODE)->type_common.indivisible_p)\n \n+/* True if this is a stdarg function with no named arguments (C2x\n+   (...) prototype, where arguments can be accessed with va_start and\n+   va_arg), as opposed to an unprototyped function.  */\n+#define TYPE_NO_NAMED_ARGS_STDARG_P(NODE) \\\n+  (TYPE_CHECK (NODE)->type_common.no_named_args_stdarg_p)\n+\n /* In an IDENTIFIER_NODE, this means that assemble_name was called with\n    this string as an argument.  */\n #define TREE_SYMBOL_REFERENCED(NODE) \\\n@@ -4734,7 +4740,7 @@ extern tree build_array_type_1 (tree, tree, bool, bool, bool);\n extern tree build_array_type (tree, tree, bool = false);\n extern tree build_nonshared_array_type (tree, tree);\n extern tree build_array_type_nelts (tree, poly_uint64);\n-extern tree build_function_type (tree, tree);\n+extern tree build_function_type (tree, tree, bool = false);\n extern tree build_function_type_list (tree, ...);\n extern tree build_varargs_function_type_list (tree, ...);\n extern tree build_function_type_array (tree, int, tree *);"}]}