{"sha": "e3869a48fc2e5fbb9e8eb7058e5176446479673f", "node_id": "C_kwDOANBUbNoAKGUzODY5YTQ4ZmMyZTVmYmI5ZThlYjcwNThlNTE3NjQ0NjQ3OTY3M2Y", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-24T17:27:16Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:36:54Z"}, "message": "libstdc++: Remove useless base classes in pb_db tests\n\nThese function objects do not need to be adaptable, so stop deriving\nfrom deprecated classes. Also the 'inline' keyword is redundant on\nmember functions defined in the class body.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/ext/pb_ds/example/basic_multimap.cc: Remove\n\tunnecesary derivation from std::unary_function.\n\t* testsuite/ext/pb_ds/example/erase_if.cc: Likewise.\n\t* testsuite/ext/pb_ds/example/hash_illegal_resize.cc: Likewise.\n\t* testsuite/ext/pb_ds/example/hash_initial_size.cc: Likewise.\n\t* testsuite/ext/pb_ds/example/hash_load_set_change.cc: Likewise.\n\t* testsuite/ext/pb_ds/example/hash_mod.cc: Likewise.\n\t* testsuite/ext/pb_ds/example/hash_resize.cc: Likewise.\n\t* testsuite/ext/pb_ds/example/hash_shift_mask.cc: Likewise.\n\t* testsuite/ext/pb_ds/example/priority_queue_dijkstra.cc:\n\tLikewise.\n\t* testsuite/ext/pb_ds/example/ranged_hash.cc: Likewise.\n\t* testsuite/ext/pb_ds/example/store_hash.cc: Likewise.", "tree": {"sha": "5d2dc6faba7a7c0ce03262ee3bd94ead2c6f5213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d2dc6faba7a7c0ce03262ee3bd94ead2c6f5213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3869a48fc2e5fbb9e8eb7058e5176446479673f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3869a48fc2e5fbb9e8eb7058e5176446479673f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3869a48fc2e5fbb9e8eb7058e5176446479673f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3869a48fc2e5fbb9e8eb7058e5176446479673f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44967af830a8d887f0d7b6848d40e1c0870b6b0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44967af830a8d887f0d7b6848d40e1c0870b6b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44967af830a8d887f0d7b6848d40e1c0870b6b0e"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "143f3ee62e37100f1e8c51f7250c1922786fa05f", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/basic_multimap.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fbasic_multimap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fbasic_multimap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fbasic_multimap.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -51,9 +51,9 @@ using namespace __gnu_pbds;\n // A simple hash functor.\n // hash could serve instead of this functor, but it is not yet\n // standard everywhere.\n-struct string_hash : public unary_function<string, size_t>\n+struct string_hash\n {\n-  inline size_t\n+  size_t\n   operator()(const string& r_s) const\n   {\n     size_t ret = 0;"}, {"sha": "bb8e9c494a5eccc80aa198e7a48f776fd4618705", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/erase_if.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Ferase_if.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Ferase_if.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Ferase_if.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -48,15 +48,15 @@ using namespace __gnu_pbds;\n \n // The following functor takes a map's value-type object and returns\n // whether its key is between two numbers.\n-struct between : public unary_function<pair<const int, char>, bool>\n+struct between\n {\n   // Constructor taking two numbers determining a range.\n   between(int b, int e) : m_b(b), m_e(e)\n   { assert(m_b < m_e); }\n \n   // Operator determining whether a value-type object's key is within\n   // the range.\n-  inline bool\n+  bool\n   operator()(const pair<const int, char>& r_val)\n   { return r_val.first >= m_b&&  r_val.first < m_e; }\n "}, {"sha": "73eda50374c8392c68f9d8627f2dddf46f769c10", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_illegal_resize.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_illegal_resize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_illegal_resize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_illegal_resize.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -62,9 +62,9 @@ using namespace __gnu_pbds;\n // A simple hash functor.\n // hash could serve instead of this functor, but it is not yet\n // standard everywhere.\n-struct int_hash : public unary_function<int, size_t>\n+struct int_hash\n {\n-  inline size_t\n+  size_t\n   operator()(const int& r_i) const\n   { return r_i; }\n };"}, {"sha": "a69c9c99bd8f7c2045fc99bb9024def320261a64", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_initial_size.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_initial_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_initial_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_initial_size.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -49,9 +49,9 @@ using namespace __gnu_pbds;\n // A simple hash functor.\n // hash could serve instead of this functor, but it is not yet\n // standard everywhere.\n-struct int_hash : public unary_function<int, size_t>\n+struct int_hash\n {\n-  inline size_t\n+  size_t\n   operator()(const int& r_i) const\n   { return r_i; }\n };"}, {"sha": "8f7ed2767db7fd89e10c9dd5f1f1babc9d8bc401", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_load_set_change.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_load_set_change.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_load_set_change.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_load_set_change.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -51,9 +51,9 @@ using namespace __gnu_pbds;\n // A simple hash functor.\n // hash could serve instead of this functor, but it is not yet\n // standard everywhere.\n-struct int_hash : public unary_function<int, size_t>\n+struct int_hash\n {\n-  inline size_t\n+  size_t\n   operator()(int i) const\n   { return i; }\n };"}, {"sha": "d42e6d87c98e9904c8c1eec0bed28206060512a5", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_mod.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_mod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_mod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_mod.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -49,9 +49,9 @@ using namespace __gnu_pbds;\n // A simple hash functor.\n // hash could serve instead of this functor, but it is not yet\n // standard everywhere.\n-struct int_hash : public unary_function<int, size_t>\n+struct int_hash\n {\n-  inline size_t\n+  size_t\n   operator()(int i) const\n   { return i; }\n };"}, {"sha": "f8e4a7b8f9c3b539e5b3f414f36113bb9d4c8a52", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_resize.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_resize.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -50,9 +50,9 @@ using namespace __gnu_pbds;\n // A simple hash functor.\n // hash could serve instead of this functor, but it is not yet\n // standard everywhere.\n-struct int_hash : public unary_function<int, size_t>\n+struct int_hash\n {\n-  inline size_t\n+  size_t\n   operator()(const int& r_i) const\n   { return r_i; }\n };"}, {"sha": "0ea02dadc443dc2862b1bf0c65b353e3b6f2d16b", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/hash_shift_mask.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_shift_mask.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_shift_mask.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fhash_shift_mask.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -51,9 +51,9 @@ using namespace __gnu_pbds;\n \n // A simple hash functor. hash could serve instead of this functor,\n // but it is not yet standard everywhere.\n-struct simple_int_hash : public unary_function<int, size_t>\n+struct simple_int_hash\n {\n-  inline size_t\n+  size_t\n   operator()(int i) const\n   { return i; }\n };"}, {"sha": "d99ebff7010135e7170a603d7d1771340970d409", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/priority_queue_dijkstra.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fpriority_queue_dijkstra.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fpriority_queue_dijkstra.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fpriority_queue_dijkstra.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -61,9 +61,9 @@ using namespace __gnu_pbds;\n typedef std::pair<size_t, size_t> pq_value;\n \n // Comparison functor used to compare priority-queue value types.\n-struct pq_value_cmp : public binary_function<pq_value, pq_value, bool>\n+struct pq_value_cmp\n {\n-  inline bool\n+  bool\n   operator()(const pq_value& r_lhs, const pq_value& r_rhs) const\n   {\n     // Note that a value is considered smaller than a different value"}, {"sha": "86c37d41ecc24b17627081c22e6994fab64e3d64", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/ranged_hash.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Franged_hash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Franged_hash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Franged_hash.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -60,7 +60,6 @@ using namespace __gnu_pbds;\n  * for larger sizes it uses a more complicated hash function.\n  */\n class simple_string_ranged_hash_fn \n-  : public unary_function<string, size_t>\n {\n public:\n   typedef size_t size_type;"}, {"sha": "5dd9cb7c36cf731fa78cd9bb60ea5e82098b9509", "filename": "libstdc++-v3/testsuite/ext/pb_ds/example/store_hash.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fstore_hash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3869a48fc2e5fbb9e8eb7058e5176446479673f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fstore_hash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpb_ds%2Fexample%2Fstore_hash.cc?ref=e3869a48fc2e5fbb9e8eb7058e5176446479673f", "patch": "@@ -53,9 +53,9 @@ using namespace std;\n using namespace __gnu_pbds;\n \n // A string hash functor.\n-struct string_hash : public unary_function<string, size_t>\n+struct string_hash\n {\n-  inline size_t\n+  size_t\n   operator()(string str) const\n   {\n     string::const_iterator b = str.begin();"}]}