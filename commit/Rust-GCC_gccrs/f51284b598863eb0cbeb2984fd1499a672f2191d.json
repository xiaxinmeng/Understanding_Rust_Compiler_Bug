{"sha": "f51284b598863eb0cbeb2984fd1499a672f2191d", "node_id": "C_kwDOANBUbNoAKGY1MTI4NGI1OTg4NjNlYjBjYmViMjk4NGZkMTQ5OWE2NzJmMjE5MWQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-15T10:03:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-15T10:03:38Z"}, "message": "Merge #1380 #1381 #1382\n\n1380: Support aggregate types in transmute r=philberty a=philberty\n\nIn some testcases in libcore transmute is used on aggregate types like\r\narray's. The convert expression code assumes simple integer's. This this\r\npatch uses a gimple convert_expr to try and convert this type. This might\r\nchange to a generic memcpy at somepoint but lets try this first and see how\r\nit works.\r\n\n\n1381: Implement AST dump for ArithmeticOrLogicalExpr to fix unreachable r=philberty a=philberty\n\n\n\n1382: Support ast dump of generic parameters on functions r=philberty a=philberty\n\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "1eb75d74c937109d184ebd396d0eb4c7e58957f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eb75d74c937109d184ebd396d0eb4c7e58957f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f51284b598863eb0cbeb2984fd1499a672f2191d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0Tt6CRBK7hj4Ov3rIwAARNQIAD18HwsJIF9uW6Wlw154PqlH\nXnjsD/UcZz1nIYgek4o2b+Kt3dy2SRakZqv/K8id0zUo1irCJ9jrbLsWXdAg0oKw\nw98D72fuFPr6ozmKpZkvaSfIjuup/5ePCiNWQqiDf5fd6KKRYGeaisv2L6jLtYuc\nNUEHY06vihIIWuyG7CAIB1aPR03daSyjez/wvcctwH6/GaetbZOJL+Hods73W7aJ\nEhaT4aQcmtlnoaHi4czpcHwycgxG9KQKXXrAs56KJ1/eclqAHgFRjG10icSxf3b9\ngmobtGNdc4W7oI+kA9lVDmjYxTWkOunWZU2sPpHpVbGDBIyr1yQWlBv9xtII3jQ=\n=VPHK\n-----END PGP SIGNATURE-----\n", "payload": "tree 1eb75d74c937109d184ebd396d0eb4c7e58957f6\nparent d155a54785cb7b40ada7ae748997d717a4b27ab9\nparent 4b82481d850a35765919cf5c91e7e063d9bceb29\nparent 1347d23e09845b854ce50f8f857c062e04a89b60\nparent 2ff776d36416adbade8161eeda4ee478a288af87\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1657879418 +0000\ncommitter GitHub <noreply@github.com> 1657879418 +0000\n\nMerge #1380 #1381 #1382\n\n1380: Support aggregate types in transmute r=philberty a=philberty\n\nIn some testcases in libcore transmute is used on aggregate types like\r\narray's. The convert expression code assumes simple integer's. This this\r\npatch uses a gimple convert_expr to try and convert this type. This might\r\nchange to a generic memcpy at somepoint but lets try this first and see how\r\nit works.\r\n\n\n1381: Implement AST dump for ArithmeticOrLogicalExpr to fix unreachable r=philberty a=philberty\n\n\n\n1382: Support ast dump of generic parameters on functions r=philberty a=philberty\n\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51284b598863eb0cbeb2984fd1499a672f2191d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51284b598863eb0cbeb2984fd1499a672f2191d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51284b598863eb0cbeb2984fd1499a672f2191d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d155a54785cb7b40ada7ae748997d717a4b27ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d155a54785cb7b40ada7ae748997d717a4b27ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d155a54785cb7b40ada7ae748997d717a4b27ab9"}, {"sha": "4b82481d850a35765919cf5c91e7e063d9bceb29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b82481d850a35765919cf5c91e7e063d9bceb29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b82481d850a35765919cf5c91e7e063d9bceb29"}, {"sha": "1347d23e09845b854ce50f8f857c062e04a89b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1347d23e09845b854ce50f8f857c062e04a89b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1347d23e09845b854ce50f8f857c062e04a89b60"}, {"sha": "2ff776d36416adbade8161eeda4ee478a288af87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff776d36416adbade8161eeda4ee478a288af87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff776d36416adbade8161eeda4ee478a288af87"}], "stats": {"total": 84, "additions": 75, "deletions": 9}, "files": [{"sha": "3b02d84c3625f6ff3ff8879b9ae529fcce041321", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51284b598863eb0cbeb2984fd1499a672f2191d/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51284b598863eb0cbeb2984fd1499a672f2191d/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=f51284b598863eb0cbeb2984fd1499a672f2191d", "patch": "@@ -48,7 +48,11 @@ void\n Dump::go (AST::Crate &crate)\n {\n   for (auto &item : crate.items)\n-    item->accept_vis (*this);\n+    {\n+      stream << indentation;\n+      item->accept_vis (*this);\n+      stream << \"\\n\";\n+    }\n }\n \n void\n@@ -173,8 +177,40 @@ Dump::visit (ArithmeticOrLogicalExpr &expr)\n       stream << \"+\";\n       break;\n \n-    default:\n-      gcc_unreachable ();\n+    case ArithmeticOrLogicalOperator::SUBTRACT:\n+      stream << \"-\";\n+      break;\n+\n+    case ArithmeticOrLogicalOperator::MULTIPLY:\n+      stream << \"*\";\n+      break;\n+\n+    case ArithmeticOrLogicalOperator::DIVIDE:\n+      stream << \"/\";\n+      break;\n+\n+    case ArithmeticOrLogicalOperator::MODULUS:\n+      stream << \"%\";\n+      break;\n+\n+    case ArithmeticOrLogicalOperator::BITWISE_AND:\n+      stream << \"&\";\n+      break;\n+\n+    case ArithmeticOrLogicalOperator::BITWISE_OR:\n+      stream << \"|\";\n+      break;\n+\n+    case ArithmeticOrLogicalOperator::BITWISE_XOR:\n+      stream << \"^\";\n+      break;\n+\n+    case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n+      stream << \"<<\";\n+      break;\n+\n+    case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+      stream << \">>\";\n       break;\n     }\n \n@@ -401,8 +437,12 @@ Dump::visit (AsyncBlockExpr &expr)\n void\n Dump::visit (TypeParam &param)\n {\n-  // Is it possible to have a null type here?\n-  param.get_type ()->accept_vis (*this);\n+  stream << param.get_type_representation ();\n+  if (param.has_type ())\n+    {\n+      stream << \": \";\n+      param.get_type ()->accept_vis (*this);\n+    }\n }\n \n void\n@@ -473,8 +513,24 @@ Dump::visit (UseDeclaration &use_decl)\n void\n Dump::visit (Function &function)\n {\n-  stream << indentation << \"fn \" << function.get_function_name () << '(';\n+  stream << \"fn \" << function.get_function_name ();\n+\n+  if (function.has_generics ())\n+    {\n+      stream << \"<\";\n+      for (size_t i = 0; i < function.get_generic_params ().size (); i++)\n+\t{\n+\t  auto &param = function.get_generic_params ().at (i);\n+\t  param->accept_vis (*this);\n+\n+\t  bool has_next = (i + 1) < function.get_generic_params ().size ();\n+\t  if (has_next)\n+\t    stream << \", \";\n+\t}\n+      stream << \">\";\n+    }\n \n+  stream << '(';\n   auto &params = function.get_function_params ();\n   if (params.size () >= 1)\n     {"}, {"sha": "65eddfac9efcd1ba59a1b6561db1cc5ecca04977", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51284b598863eb0cbeb2984fd1499a672f2191d/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51284b598863eb0cbeb2984fd1499a672f2191d/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=f51284b598863eb0cbeb2984fd1499a672f2191d", "patch": "@@ -542,9 +542,19 @@ transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n \n   // BUILTIN transmute FN BODY BEGIN\n   tree result_type_tree = TREE_TYPE (DECL_RESULT (fndecl));\n-  tree result_expr\n-    = ctx->get_backend ()->convert_expression (result_type_tree,\n-\t\t\t\t\t       convert_me_expr, Location ());\n+  tree result_expr = error_mark_node;\n+  if (AGGREGATE_TYPE_P (TREE_TYPE (convert_me_expr)))\n+    {\n+      result_expr = fold_build1_loc (Location ().gcc_location (), CONVERT_EXPR,\n+\t\t\t\t     result_type_tree, convert_me_expr);\n+    }\n+  else\n+    {\n+      result_expr = ctx->get_backend ()->convert_expression (result_type_tree,\n+\t\t\t\t\t\t\t     convert_me_expr,\n+\t\t\t\t\t\t\t     Location ());\n+    }\n+\n   auto return_statement\n     = ctx->get_backend ()->return_statement (fndecl, {result_expr},\n \t\t\t\t\t     Location ());"}]}