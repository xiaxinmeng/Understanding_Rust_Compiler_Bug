{"sha": "5aadb69b902fee99885e81999ca9d4c2042464ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFhZGI2OWI5MDJmZWU5OTg4NWU4MTk5OWNhOWQ0YzIwNDI0NjRlZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-08-10T10:08:56Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-08-10T10:08:56Z"}, "message": "cons_overflow_neg.cc: Avoid -Wall warnings.\n\n2010-08-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Avoid -Wall\n\twarnings.\n\n\t* include/bits/shared_ptr.h (shared_ptr<>::shared_ptr\n\t(const shared_ptr<>&), shared_ptr(shared_ptr<>&&), weak_ptr<>::\n\tweak_ptr(const weak_ptr<>&), weak_ptr(const shared_ptr<>&)):\n\tConstrain appropriately via std::is_convertible, etc.\n\t* include/bits/shared_ptr_base.h: Likewise.\n\t* include/bits/unique_ptr.h (default_delete<>::\n\tdefault_delete(const default_delete<>&),\n\tunique_ptr<>::unique_ptr(unique_ptr<>&&), operator=(unique_ptr<>&&)):\n\tLikewise.\n\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-error\n\tline numbers.\n\t* testsuite/20_util/shared_ptr/cons/43820.cc: Likewise.\n\n\t* include/bits/unique_ptr.h (unique_ptr<>::unique_ptr(auto_ptr<>&&)):\n\tAdd.\n\t* include/std/memory: Adjust includes order.\n\t* testsuite/20_util/unique_ptr/cons/auto_ptr.cc: New.\n\t* testsuite/20_util/unique_ptr/cons/auto_ptr_neg.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/cons/auto_ptr_neg.cc: Minor tweaks.\n\nFrom-SVN: r163053", "tree": {"sha": "2ff98037ddef320ccc59d8fd077a61a69222b547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ff98037ddef320ccc59d8fd077a61a69222b547"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5aadb69b902fee99885e81999ca9d4c2042464ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aadb69b902fee99885e81999ca9d4c2042464ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aadb69b902fee99885e81999ca9d4c2042464ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aadb69b902fee99885e81999ca9d4c2042464ed/comments", "author": null, "committer": null, "parents": [{"sha": "e80c2726d26a882c2ef35108b46aa5981a7a4513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80c2726d26a882c2ef35108b46aa5981a7a4513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e80c2726d26a882c2ef35108b46aa5981a7a4513"}], "stats": {"total": 205, "additions": 167, "deletions": 38}, "files": [{"sha": "9a3aaca2b37271df1b5a7d4efb5d675c2743cb70", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -1,3 +1,29 @@\n+2010-08-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/20_util/ratio/cons/cons_overflow_neg.cc: Avoid -Wall\n+\twarnings.\n+\n+\t* include/bits/shared_ptr.h (shared_ptr<>::shared_ptr\n+\t(const shared_ptr<>&), shared_ptr(shared_ptr<>&&), weak_ptr<>::\n+\tweak_ptr(const weak_ptr<>&), weak_ptr(const shared_ptr<>&)):\n+\tConstrain appropriately via std::is_convertible, etc.\n+\t* include/bits/shared_ptr_base.h: Likewise.\n+\t* include/bits/unique_ptr.h (default_delete<>::\n+\tdefault_delete(const default_delete<>&),\n+\tunique_ptr<>::unique_ptr(unique_ptr<>&&), operator=(unique_ptr<>&&)):\n+\tLikewise.\n+\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust dg-error\n+\tline numbers.\n+\t* testsuite/20_util/shared_ptr/cons/43820.cc: Likewise.\n+\n+\t* include/bits/unique_ptr.h (unique_ptr<>::unique_ptr(auto_ptr<>&&)):\n+\tAdd.\n+\t* include/std/memory: Adjust includes order.\n+\t* testsuite/20_util/unique_ptr/cons/auto_ptr.cc: New.\n+\t* testsuite/20_util/unique_ptr/cons/auto_ptr_neg.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/cons/auto_ptr_neg.cc: Minor tweaks.\n+\n 2010-08-10  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/45228"}, {"sha": "fe79cdd1547d32d81234d5620dea3d064f38a652", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -206,8 +206,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  __r  A %shared_ptr.\n        *  @post   get() == __r.get() && use_count() == __r.use_count()\n        */\n-      template<typename _Tp1>\n-\tshared_ptr(const shared_ptr<_Tp1>& __r) : __shared_ptr<_Tp>(__r) { }\n+      template<typename _Tp1, typename = typename\n+\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n+\tshared_ptr(const shared_ptr<_Tp1>& __r)\n+        : __shared_ptr<_Tp>(__r) { }\n \n       /**\n        *  @brief  Move-constructs a %shared_ptr instance from @a __r.\n@@ -222,7 +224,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  __r  A %shared_ptr rvalue.\n        *  @post   *this contains the old value of @a __r, @a __r is empty.\n        */\n-      template<typename _Tp1>\n+      template<typename _Tp1, typename = typename\n+\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n \tshared_ptr(shared_ptr<_Tp1>&& __r)\n \t: __shared_ptr<_Tp>(std::move(__r)) { }\n \n@@ -366,11 +369,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     public:\n       weak_ptr() : __weak_ptr<_Tp>() { }\n \n-      template<typename _Tp1>\n+      template<typename _Tp1, typename = typename\n+\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n \tweak_ptr(const weak_ptr<_Tp1>& __r)\n \t: __weak_ptr<_Tp>(__r) { }\n \n-      template<typename _Tp1>\n+      template<typename _Tp1, typename = typename\n+\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n \tweak_ptr(const shared_ptr<_Tp1>& __r)\n \t: __weak_ptr<_Tp>(__r) { }\n "}, {"sha": "b9b0ed94b5446f3bf18a3783e9b665adb573b87c", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -601,7 +601,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       //  generated copy constructor, assignment, destructor are fine.\n \n-      template<typename _Tp1>\n+      template<typename _Tp1, typename = typename\n+\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n \t__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r)\n \t: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount) // never throws\n \t{ __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>) }\n@@ -613,7 +614,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t__r._M_ptr = 0;\n       }\n \n-      template<typename _Tp1>\n+      template<typename _Tp1, typename = typename\n+\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n \t__shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r)\n \t: _M_ptr(__r._M_ptr), _M_refcount() // never throws\n \t{\n@@ -965,15 +967,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       //\n       // It is not possible to avoid spurious access violations since\n       // in multithreaded programs __r._M_ptr may be invalidated at any point.\n-      template<typename _Tp1>\n+      template<typename _Tp1, typename = typename\n+\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n \t__weak_ptr(const __weak_ptr<_Tp1, _Lp>& __r)\n \t: _M_refcount(__r._M_refcount) // never throws\n \t{\n \t  __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>)\n \t  _M_ptr = __r.lock().get();\n \t}\n \n-      template<typename _Tp1>\n+      template<typename _Tp1, typename = typename\n+\t       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>\n \t__weak_ptr(const __shared_ptr<_Tp1, _Lp>& __r)\n \t: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount) // never throws\n \t{ __glibcxx_function_requires(_ConvertibleConcept<_Tp1*, _Tp*>) }"}, {"sha": "cf05ec2a4ea8735d662792a261821f8e143e6b49", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -49,7 +49,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       {\n \tdefault_delete() { }\n \n-\ttemplate<typename _Up>\n+\ttemplate<typename _Up, typename = typename\n+\t\t std::enable_if<std::is_convertible<_Up*, _Tp*>::value>::type>\n \t  default_delete(const default_delete<_Up>&) { }\n \n \tvoid\n@@ -133,14 +134,32 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       unique_ptr(unique_ptr&& __u) \n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n \n-      template<typename _Up, typename _Up_Deleter> \n+      template<typename _Up, typename _Up_Deleter, typename = typename\n+\tstd::enable_if\n+\t  <std::is_convertible<typename unique_ptr<_Up, _Up_Deleter>::pointer,\n+\t\t\t       pointer>::value\n+\t   && !std::is_array<_Up>::value\n+\t   && ((std::is_reference<_Tp_Deleter>::value\n+\t\t&& std::is_same<_Up_Deleter, _Tp_Deleter>::value)\n+\t       || (!std::is_reference<_Tp_Deleter>::value\n+\t\t   && std::is_convertible<_Up_Deleter, _Tp_Deleter>::value))>\n+             ::type>\n         unique_ptr(unique_ptr<_Up, _Up_Deleter>&& __u) \n         : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter()))\n \t{ }\n \n+#if _GLIBCXX_DEPRECATED\n+      template<typename _Up, typename = typename\n+\tstd::enable_if<std::is_convertible<_Up*, _Tp*>::value\n+\t\t       && std::is_same<_Tp_Deleter,\n+\t\t\t\t       default_delete<_Tp>>::value>::type>\n+        unique_ptr(auto_ptr<_Up>&& __u)\n+\t: _M_t(__u.release(), deleter_type()) { }\n+#endif\n+\n       // Destructor.\n       ~unique_ptr() { reset(); }\n-    \n+\n       // Assignment.\n       unique_ptr&\n       operator=(unique_ptr&& __u)\n@@ -150,7 +169,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         return *this;\n       }\n \n-      template<typename _Up, typename _Up_Deleter> \n+      template<typename _Up, typename _Up_Deleter, typename = typename\n+        std::enable_if\n+\t  <std::is_convertible<typename unique_ptr<_Up, _Up_Deleter>::pointer,\n+\t\t\t       pointer>::value\n+\t   && !std::is_array<_Up>::value>::type> \n         unique_ptr&\n         operator=(unique_ptr<_Up, _Up_Deleter>&& __u)\n \t{"}, {"sha": "42e948a30d08b296368a427bd5c8b3abd13f4d73", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -1,6 +1,7 @@\n // <memory> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+// 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -81,10 +82,10 @@\n #  include <type_traits>\n #  include <functional>\n #  include <debug/debug.h>\n-#  include <bits/unique_ptr.h>\n #  if _GLIBCXX_DEPRECATED\n #    include <backward/auto_ptr.h>\n #  endif\n+#  include <bits/unique_ptr.h>\n #  if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n #    include <tr1_impl/boost_sp_counted_base.h>\n #  else"}, {"sha": "252265c8d4157d6673e7e09d4b0001682963184b", "filename": "libstdc++-v3/testsuite/20_util/ratio/cons/cons_overflow_neg.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fratio%2Fcons%2Fcons_overflow_neg.cc?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -2,7 +2,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -24,26 +24,26 @@\n void\n test01()\n {\n-  std::ratio<INTMAX_MAX, INTMAX_MAX> r1;\n-  std::ratio<-INTMAX_MAX, INTMAX_MAX> r2;\n+  std::ratio<INTMAX_MAX, INTMAX_MAX> r1 __attribute__((unused));\n+  std::ratio<-INTMAX_MAX, INTMAX_MAX> r2 __attribute__((unused));\n }\n \n void\n test02()\n {\n-  std::ratio<INTMAX_MIN, 1> r1;\n+  std::ratio<INTMAX_MIN, 1> r1 __attribute__((unused));\n }\n \n void\n test03()\n {\n-  std::ratio<1, INTMAX_MIN> r1;\n+  std::ratio<1, INTMAX_MIN> r1 __attribute__((unused));\n }\n \n void\n test04()\n {\n-  std::ratio<1,0> r1;\n+  std::ratio<1,0> r1 __attribute__((unused));\n }\n \n // { dg-error \"instantiated from here\" \"\" { target *-*-* } 34 }"}, {"sha": "81d3a0f22bfe175cd21fd6ad6dca17c17307d490", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/43820.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2F43820.cc?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -35,6 +35,6 @@ void test01()\n   // { dg-error \"incomplete\" \"\" { target *-*-* } 566 }\n \n   std::shared_ptr<X> p9(ap());  // { dg-error \"here\" }\n-  // { dg-error \"incomplete\" \"\" { target *-*-* } 657 }\n+  // { dg-error \"incomplete\" \"\" { target *-*-* } 659 }\n \n }"}, {"sha": "b078a7df7988843e8458ed2b40f5ab39a8ecc8d6", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/auto_ptr_neg.cc", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fauto_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fauto_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fauto_ptr_neg.cc?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -21,28 +21,16 @@\n // 20.6.6.2 Template class shared_ptr [util.smartptr.shared]\n \n #include <memory>\n-#include <testsuite_hooks.h>\n \n struct A { };\n \n // 20.6.6.2.3 shared_ptr assignment [util.smartptr.shared.const]\n \n // Construction from const auto_ptr\n-int\n+void\n test01()\n {\n-  bool test __attribute__((unused)) = true;\n-\n   const std::auto_ptr<A> a;\n   std::shared_ptr<A> p(std::move(a)); // { dg-error \"no match\" }\n-\n-  return 0;\n-}\n-\n-int \n-main()\n-{\n-  test01();\n-  return 0;\n }\n // { dg-excess-errors \"candidates are\" }"}, {"sha": "f4b9838d040bfad189412c2139abd525714acaf5", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/auto_ptr.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fauto_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fauto_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fauto_ptr.cc?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.10 Class template unique_ptr [unique.ptr]\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct A { };\n+\n+// 20.9.10.2.1 unique_ptr constructors [unique.ptr.single.ctor] \n+\n+// Construction from auto_ptr\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::auto_ptr<A> a(new A);\n+  std::unique_ptr<A> a2(std::move(a));\n+  VERIFY( a.get() == nullptr );\n+  VERIFY( a2.get() != 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "76910c3c64a9700ade2ca2ffde5b4c743e297d9f", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/auto_ptr_neg.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fauto_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fauto_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fauto_ptr_neg.cc?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2010 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.9.10 Class template unique_ptr [unique.ptr]\n+\n+#include <memory>\n+\n+struct A { };\n+\n+// 20.9.10.2.1 unique_ptr constructors [unique.ptr.single.ctor] \n+\n+// Construction from const auto_ptr\n+void\n+test01()\n+{\n+  const std::auto_ptr<A> a(new A);\n+  std::unique_ptr<A> a2(std::move(a)); // { dg-error \"no match\" }\n+}\n+// { dg-excess-errors \"candidates are\" }"}, {"sha": "2635a332ff7a30833e4d50ce1abc11dfbe1c4be4", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aadb69b902fee99885e81999ca9d4c2042464ed/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=5aadb69b902fee99885e81999ca9d4c2042464ed", "patch": "@@ -41,9 +41,9 @@ main()\n   return 0;\n }\n \n-// { dg-warning \"note\" \"\" { target *-*-* } 324 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 423 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 862 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 327 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 446 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 864 }\n // { dg-warning \"note\" \"\" { target *-*-* } 580 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1027 }\n // { dg-warning \"note\" \"\" { target *-*-* } 340 }"}]}