{"sha": "71f3036b8a83da7fb559923bc80687ea1dabe14a", "node_id": "C_kwDOANBUbNoAKDcxZjMwMzZiOGE4M2RhN2ZiNTU5OTIzYmM4MDY4N2VhMWRhYmUxNGE", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-11-25T12:57:24Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-11-25T12:57:24Z"}, "message": "sve2: Fix expansion of division [PR107830]\n\nSVE has an actual division optab, and when using -Os we don't\noptimize the division away.  This means that we need to distinguish\nbetween a div which we can optimize and one we cannot even during\nexpansion.\n\ngcc/ChangeLog:\n\n\tPR target/107830\n\t* config/aarch64/aarch64.cc\n\t(aarch64_vectorize_can_special_div_by_constant): Check validity during\n\tcodegen phase as well.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/107830\n\t* gcc.target/aarch64/sve2/pr107830-1.c: New test.\n\t* gcc.target/aarch64/sve2/pr107830-2.c: New test.", "tree": {"sha": "3152e97958093f3241d6e2261196ce06fc9a69b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3152e97958093f3241d6e2261196ce06fc9a69b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71f3036b8a83da7fb559923bc80687ea1dabe14a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f3036b8a83da7fb559923bc80687ea1dabe14a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71f3036b8a83da7fb559923bc80687ea1dabe14a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71f3036b8a83da7fb559923bc80687ea1dabe14a/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f9d128f459e0c5ace8f7b85504d277b5a838daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f9d128f459e0c5ace8f7b85504d277b5a838daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f9d128f459e0c5ace8f7b85504d277b5a838daf"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "14f1994adf3a251a782a1784c509ac38bc017999", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f3036b8a83da7fb559923bc80687ea1dabe14a/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f3036b8a83da7fb559923bc80687ea1dabe14a/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=71f3036b8a83da7fb559923bc80687ea1dabe14a", "patch": "@@ -24351,12 +24351,17 @@ aarch64_vectorize_can_special_div_by_constant (enum tree_code code,\n   if ((flags & VEC_ANY_SVE) && !TARGET_SVE2)\n     return false;\n \n+  int pow = wi::exact_log2 (cst + 1);\n+  auto insn_code = maybe_code_for_aarch64_bitmask_udiv3 (TYPE_MODE (vectype));\n+  /* SVE actually has a div operator, we may have gotten here through\n+     that route.  */\n+  if (pow != (int) (element_precision (vectype) / 2)\n+      || insn_code == CODE_FOR_nothing)\n+    return false;\n+\n+  /* We can use the optimized pattern.  */\n   if (in0 == NULL_RTX && in1 == NULL_RTX)\n-    {\n-      wide_int val = wi::add (cst, 1);\n-      int pow = wi::exact_log2 (val);\n-      return pow == (int)(element_precision (vectype) / 2);\n-    }\n+    return true;\n \n   if (!VECTOR_TYPE_P (vectype))\n    return false;"}, {"sha": "6d8ee3615fdb0083dbde1e45a2826fb681726139", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/pr107830-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f3036b8a83da7fb559923bc80687ea1dabe14a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fpr107830-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f3036b8a83da7fb559923bc80687ea1dabe14a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fpr107830-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fpr107830-1.c?ref=71f3036b8a83da7fb559923bc80687ea1dabe14a", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target fopenmp } */\n+/* { dg-additional-options \"-Os -fopenmp\" } */\n+\n+void\n+f2 (int *a)\n+{\n+  unsigned int i;\n+\n+#pragma omp simd\n+  for (i = 0; i < 4; ++i)\n+    a[i / 3] -= 4;\n+}"}, {"sha": "4ec45d7a47e591263fa9acbfc7e6d3297e10a109", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/pr107830-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71f3036b8a83da7fb559923bc80687ea1dabe14a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fpr107830-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71f3036b8a83da7fb559923bc80687ea1dabe14a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fpr107830-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Fpr107830-2.c?ref=71f3036b8a83da7fb559923bc80687ea1dabe14a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3 -msve-vector-bits=512\" } */\n+\n+void f(unsigned short *restrict p1, unsigned int *restrict p2)\n+{\n+    for (int i = 0; i < 16; ++i)\n+      {\n+        p1[i] /= 0xff;\n+        p2[i] += 1;\n+      }\n+}\n+"}]}