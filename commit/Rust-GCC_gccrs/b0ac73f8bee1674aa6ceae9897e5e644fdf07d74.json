{"sha": "b0ac73f8bee1674aa6ceae9897e5e644fdf07d74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBhYzczZjhiZWUxNjc0YWE2Y2VhZTk4OTdlNWU2NDRmZGYwN2Q3NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2002-06-24T20:20:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2002-06-24T20:20:52Z"}, "message": "flow.c (propagate_one_insn): When removing an insn with a REG_LIBCALL note but not the entire libcall...\n\n        * flow.c (propagate_one_insn): When removing an insn\n        with a REG_LIBCALL note but not the entire libcall sequence,\n        delete the associated REG_RETVAL note.\n\nFrom-SVN: r54966", "tree": {"sha": "b52454698fe2836ed4844210c201bdc8945cfaac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b52454698fe2836ed4844210c201bdc8945cfaac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0ac73f8bee1674aa6ceae9897e5e644fdf07d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ac73f8bee1674aa6ceae9897e5e644fdf07d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ac73f8bee1674aa6ceae9897e5e644fdf07d74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ac73f8bee1674aa6ceae9897e5e644fdf07d74/comments", "author": null, "committer": null, "parents": [{"sha": "9e96203da46840cd22092cc60d23bab2eeee9ff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e96203da46840cd22092cc60d23bab2eeee9ff5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e96203da46840cd22092cc60d23bab2eeee9ff5"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "45a686c03c7839df2dd5debcb7c20a603c165217", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ac73f8bee1674aa6ceae9897e5e644fdf07d74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ac73f8bee1674aa6ceae9897e5e644fdf07d74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0ac73f8bee1674aa6ceae9897e5e644fdf07d74", "patch": "@@ -1,3 +1,9 @@\n+2002-06-24  Jeff Law <law@redhat.com>\n+\n+\t* flow.c (propagate_one_insn): When removing an insn\n+\twith a REG_LIBCALL note but not the entire libcall sequence,\n+\tdelete the associated REG_RETVAL note.\n+\n Mon Jun 24 21:05:09 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* lib1funcs.asm (sdivsi3): Add optimized SH64 implementations."}, {"sha": "aad646af0f65a8ba9d3b29be8920ad9e9eff363f", "filename": "gcc/flow.c", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ac73f8bee1674aa6ceae9897e5e644fdf07d74/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ac73f8bee1674aa6ceae9897e5e644fdf07d74/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=b0ac73f8bee1674aa6ceae9897e5e644fdf07d74", "patch": "@@ -1650,22 +1650,38 @@ propagate_one_insn (pbi, insn)\n       else\n \t{\n \n+\t/* If INSN contains a RETVAL note and is dead, but the libcall\n+\t   as a whole is not dead, then we want to remove INSN, but\n+\t   not the whole libcall sequence.\n+\n+\t   However, we need to also remove the dangling REG_LIBCALL\t\n+\t   note so that we do not have mis-matched LIBCALL/RETVAL\n+\t   notes.  In theory we could find a new location for the\n+\t   REG_RETVAL note, but it hardly seems worth the effort. \n+\n+\t   NOTE at this point will be the RETVAL note if it exists.  */\n \t  if (note)\n \t    {\n-\t      /* If INSN contains a RETVAL note and is dead, but the libcall\n-\t\t as a whole is not dead, then we want to remove INSN, but\n-\t\t not the whole libcall sequence.\n-\n-\t\t However, we need to also remove the dangling REG_LIBCALL\t\n-\t\t note so that we do not have mis-matched LIBCALL/RETVAL\n-\t\t notes.  In theory we could find a new location for the\n-\t\t REG_RETVAL note, but it hardly seems worth the effort.  */\n \t      rtx libcall_note;\n \t \n \t      libcall_note\n \t\t= find_reg_note (XEXP (note, 0), REG_LIBCALL, NULL_RTX);\n \t      remove_note (XEXP (note, 0), libcall_note);\n \t    }\n+\n+\t  /* Similarly if INSN contains a LIBCALL note, remove the\n+\t     dnagling REG_RETVAL note.  */\n+\t  note = find_reg_note (insn, REG_LIBCALL, NULL_RTX);\n+\t  if (note)\n+\t    {\n+\t      rtx retval_note;\n+\n+\t      retval_note\n+\t\t= find_reg_note (XEXP (note, 0), REG_RETVAL, NULL_RTX);\n+\t      remove_note (XEXP (note, 0), retval_note);\n+\t    }\n+\n+\t  /* Now delete INSN.  */\n \t  propagate_block_delete_insn (insn);\n \t}\n "}]}