{"sha": "3f598afe16222d0b8c8185415c6202e38e73cc2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1OThhZmUxNjIyMmQwYjhjODE4NTQxNWM2MjAyZTM4ZTczY2MyZA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-06-08T10:07:30Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-06-08T10:07:30Z"}, "message": "[AArch64, 1/6] Reimplement scalar fixed-point intrinsics\n\n        * config/aarch64/aarch64-builtins.c (TYPES_BINOP_USS): New\n        (TYPES_BINOP_SUS): Likewise.\n        (aarch64_simd_builtin_data): Update include file name.\n        (aarch64_builtins): Likewise.\n        * config/aarch64/aarch64-simd-builtins.def (scvtf): New entries\n        for conversion between scalar float-point and fixed-point.\n        (ucvtf): Likewise.\n        (fcvtzs): Likewise.\n        (fcvtzu): Likewise.\n        * config/aarch64/aarch64.md\n        (<FCVT_F2FIXED:fcvt_fixed_insn><GPF:mode>3: New\n        pattern for conversion between scalar float to fixed-pointer.\n        (<FCVT_FIXED2F:fcvt_fixed_insn><GPI:mode>: Likewise.\n        (UNSPEC_FCVTZS): New UNSPEC enumeration.\n        (UNSPEC_FCVTZU): Likewise.\n        (UNSPEC_SCVTF): Likewise.\n        (UNSPEC_UCVTF): Likewise.\n        * config/aarch64/arm_neon.h (vcvtd_n_f64_s64): Remove inline assembly.\n\tUse builtin.\n        (vcvtd_n_f64_u64): Likewise.\n        (vcvtd_n_s64_f64): Likewise.\n        (vcvtd_n_u64_f64): Likewise.\n        (vcvtd_n_f32_s32): Likewise.\n        (vcvts_n_f32_u32): Likewise.\n        (vcvtd_n_s32_f32): Likewise.\n        (vcvts_n_u32_f32): Likewise.\n        * config/aarch64/iterators.md (fcvt_target): Support integer to float\n\tmapping.\n        (FCVT_TARGET): Likewise.\n        (FCVT_FIXED2F): New iterator.\n        (FCVT_F2FIXED): Likewise.\n        (fcvt_fixed_insn): New define_int_attr.\n\nFrom-SVN: r237200", "tree": {"sha": "d21ac48597d175867a0170f4167211fa54801814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d21ac48597d175867a0170f4167211fa54801814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f598afe16222d0b8c8185415c6202e38e73cc2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f598afe16222d0b8c8185415c6202e38e73cc2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f598afe16222d0b8c8185415c6202e38e73cc2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f598afe16222d0b8c8185415c6202e38e73cc2d/comments", "author": null, "committer": null, "parents": [{"sha": "cd1d802aed1192b9393b519608e59b64c544db42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1d802aed1192b9393b519608e59b64c544db42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1d802aed1192b9393b519608e59b64c544db42"}], "stats": {"total": 246, "additions": 148, "deletions": 98}, "files": [{"sha": "937e86b3691122485a26eb675f7ba618419e3440", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f598afe16222d0b8c8185415c6202e38e73cc2d", "patch": "@@ -1,3 +1,38 @@\n+2016-06-08  Jiong Wang  <jiong.wang@arm.com>\n+\n+        * config/aarch64/aarch64-builtins.c (TYPES_BINOP_USS): New\n+        (TYPES_BINOP_SUS): Likewise.\n+        (aarch64_simd_builtin_data): Update include file name.\n+        (aarch64_builtins): Likewise.\n+        * config/aarch64/aarch64-simd-builtins.def (scvtf): New entries\n+        for conversion between scalar float-point and fixed-point.\n+        (ucvtf): Likewise.\n+        (fcvtzs): Likewise.\n+        (fcvtzu): Likewise.\n+        * config/aarch64/aarch64.md\n+        (<FCVT_F2FIXED:fcvt_fixed_insn><GPF:mode>3: New\n+        pattern for conversion between scalar float to fixed-pointer.\n+        (<FCVT_FIXED2F:fcvt_fixed_insn><GPI:mode>: Likewise.\n+        (UNSPEC_FCVTZS): New UNSPEC enumeration.\n+        (UNSPEC_FCVTZU): Likewise.\n+        (UNSPEC_SCVTF): Likewise.\n+        (UNSPEC_UCVTF): Likewise.\n+        * config/aarch64/arm_neon.h (vcvtd_n_f64_s64): Remove inline assembly.\n+\tUse builtin.\n+        (vcvtd_n_f64_u64): Likewise.\n+        (vcvtd_n_s64_f64): Likewise.\n+        (vcvtd_n_u64_f64): Likewise.\n+        (vcvtd_n_f32_s32): Likewise.\n+        (vcvts_n_f32_u32): Likewise.\n+        (vcvtd_n_s32_f32): Likewise.\n+        (vcvts_n_u32_f32): Likewise.\n+        * config/aarch64/iterators.md (fcvt_target): Support integer to float\n+\tmapping.\n+        (FCVT_TARGET): Likewise.\n+        (FCVT_FIXED2F): New iterator.\n+        (FCVT_F2FIXED): Likewise.\n+        (fcvt_fixed_insn): New define_int_attr.\n+\n 2016-06-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* predict.c (pass_strip_predict_hints::execute): Cleanup CFG if"}, {"sha": "262ea1c519f4f01a1a0726296994e40a48f26680", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=3f598afe16222d0b8c8185415c6202e38e73cc2d", "patch": "@@ -139,6 +139,14 @@ aarch64_types_binop_ssu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_unsigned };\n #define TYPES_BINOP_SSU (aarch64_types_binop_ssu_qualifiers)\n static enum aarch64_type_qualifiers\n+aarch64_types_binop_uss_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_none, qualifier_none };\n+#define TYPES_BINOP_USS (aarch64_types_binop_uss_qualifiers)\n+static enum aarch64_type_qualifiers\n+aarch64_types_binop_sus_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned, qualifier_none };\n+#define TYPES_BINOP_SUS (aarch64_types_binop_sus_qualifiers)\n+static enum aarch64_type_qualifiers\n aarch64_types_binopp_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_poly, qualifier_poly, qualifier_poly };\n #define TYPES_BINOPP (aarch64_types_binopp_qualifiers)"}, {"sha": "0b2f0631c740558c62cffe5715eaffa5ad0557a9", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=3f598afe16222d0b8c8185415c6202e38e73cc2d", "patch": "@@ -445,3 +445,9 @@\n   /* Implemented by aarch64_sqrdml<SQRDMLH_AS:rdma_as>h_laneq<mode>.  */\n   BUILTIN_VSDQ_HSI (QUADOP_LANE, sqrdmlah_laneq, 0)\n   BUILTIN_VSDQ_HSI (QUADOP_LANE, sqrdmlsh_laneq, 0)\n+\n+  /* Implemented by <FCVT_F2FIXED/FIXED2F:fcvt_fixed_insn><*><*>3.  */\n+  BUILTIN_GPI (BINOP, scvtf, 3)\n+  BUILTIN_GPI (BINOP_SUS, ucvtf, 3)\n+  BUILTIN_GPF (BINOP, fcvtzs, 3)\n+  BUILTIN_GPF (BINOP_USS, fcvtzu, 3)"}, {"sha": "926f2da53b617b18891f9bc932e85774ef08eec8", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=3f598afe16222d0b8c8185415c6202e38e73cc2d", "patch": "@@ -75,6 +75,8 @@\n     UNSPEC_CRC32H\n     UNSPEC_CRC32W\n     UNSPEC_CRC32X\n+    UNSPEC_FCVTZS\n+    UNSPEC_FCVTZU\n     UNSPEC_URECPE\n     UNSPEC_FRECPE\n     UNSPEC_FRECPS\n@@ -105,6 +107,7 @@\n     UNSPEC_NOP\n     UNSPEC_PRLG_STK\n     UNSPEC_RBIT\n+    UNSPEC_SCVTF\n     UNSPEC_SISD_NEG\n     UNSPEC_SISD_SSHL\n     UNSPEC_SISD_USHL\n@@ -122,6 +125,7 @@\n     UNSPEC_TLSLE24\n     UNSPEC_TLSLE32\n     UNSPEC_TLSLE48\n+    UNSPEC_UCVTF\n     UNSPEC_USHL_2S\n     UNSPEC_VSTRUCTDUMMY\n     UNSPEC_SP_SET\n@@ -4627,6 +4631,36 @@\n   [(set_attr \"type\" \"f_cvti2f\")]\n )\n \n+;; Convert between fixed-point and floating-point (scalar modes)\n+\n+(define_insn \"<FCVT_F2FIXED:fcvt_fixed_insn><GPF:mode>3\"\n+  [(set (match_operand:<GPF:FCVT_TARGET> 0 \"register_operand\" \"=r, w\")\n+\t(unspec:<GPF:FCVT_TARGET> [(match_operand:GPF 1 \"register_operand\" \"w, w\")\n+\t\t\t\t   (match_operand:SI 2 \"immediate_operand\" \"i, i\")]\n+\t FCVT_F2FIXED))]\n+  \"\"\n+  \"@\n+   <FCVT_F2FIXED:fcvt_fixed_insn>\\t%<w1>0, %<s>1, #%2\n+   <FCVT_F2FIXED:fcvt_fixed_insn>\\t%<s>0, %<s>1, #%2\"\n+  [(set_attr \"type\" \"f_cvtf2i, neon_fp_to_int_<GPF:Vetype>\")\n+   (set_attr \"fp\" \"yes, *\")\n+   (set_attr \"simd\" \"*, yes\")]\n+)\n+\n+(define_insn \"<FCVT_FIXED2F:fcvt_fixed_insn><GPI:mode>3\"\n+  [(set (match_operand:<GPI:FCVT_TARGET> 0 \"register_operand\" \"=w, w\")\n+\t(unspec:<GPI:FCVT_TARGET> [(match_operand:GPI 1 \"register_operand\" \"r, w\")\n+\t\t\t\t   (match_operand:SI 2 \"immediate_operand\" \"i, i\")]\n+\t FCVT_FIXED2F))]\n+  \"\"\n+  \"@\n+   <FCVT_FIXED2F:fcvt_fixed_insn>\\t%<s>0, %<w1>1, #%2\n+   <FCVT_FIXED2F:fcvt_fixed_insn>\\t%<s>0, %<s>1, #%2\"\n+  [(set_attr \"type\" \"f_cvti2f, neon_int_to_fp_<GPI:Vetype>\")\n+   (set_attr \"fp\" \"yes, *\")\n+   (set_attr \"simd\" \"*, yes\")]\n+)\n+\n ;; -------------------------------------------------------------------\n ;; Floating-point arithmetic\n ;; -------------------------------------------------------------------"}, {"sha": "8a0fba6513e572ede9f2e4aaf8d29baf6baf683d", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 52, "deletions": 96, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=3f598afe16222d0b8c8185415c6202e38e73cc2d", "patch": "@@ -6073,54 +6073,6 @@ vaddlvq_u32 (uint32x4_t a)\n        result;                                                          \\\n      })\n \n-#define vcvtd_n_f64_s64(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int64_t a_ = (a);                                                \\\n-       float64_t result;                                                \\\n-       __asm__ (\"scvtf %d0,%d1,%2\"                                      \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtd_n_f64_u64(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint64_t a_ = (a);                                               \\\n-       float64_t result;                                                \\\n-       __asm__ (\"ucvtf %d0,%d1,%2\"                                      \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtd_n_s64_f64(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float64_t a_ = (a);                                              \\\n-       int64_t result;                                                  \\\n-       __asm__ (\"fcvtzs %d0,%d1,%2\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvtd_n_u64_f64(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float64_t a_ = (a);                                              \\\n-       uint64_t result;                                                 \\\n-       __asm__ (\"fcvtzu %d0,%d1,%2\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n #define vcvtq_n_f32_s32(a, b)                                           \\\n   __extension__                                                         \\\n     ({                                                                  \\\n@@ -6217,54 +6169,6 @@ vaddlvq_u32 (uint32x4_t a)\n        result;                                                          \\\n      })\n \n-#define vcvts_n_f32_s32(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       int32_t a_ = (a);                                                \\\n-       float32_t result;                                                \\\n-       __asm__ (\"scvtf %s0,%s1,%2\"                                      \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvts_n_f32_u32(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       uint32_t a_ = (a);                                               \\\n-       float32_t result;                                                \\\n-       __asm__ (\"ucvtf %s0,%s1,%2\"                                      \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvts_n_s32_f32(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float32_t a_ = (a);                                              \\\n-       int32_t result;                                                  \\\n-       __asm__ (\"fcvtzs %s0,%s1,%2\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n-#define vcvts_n_u32_f32(a, b)                                           \\\n-  __extension__                                                         \\\n-    ({                                                                  \\\n-       float32_t a_ = (a);                                              \\\n-       uint32_t result;                                                 \\\n-       __asm__ (\"fcvtzu %s0,%s1,%2\"                                     \\\n-                : \"=w\"(result)                                          \\\n-                : \"w\"(a_), \"i\"(b)                                       \\\n-                : /* No clobbers */);                                   \\\n-       result;                                                          \\\n-     })\n-\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vcvtx_f32_f64 (float64x2_t a)\n {\n@@ -12830,6 +12734,58 @@ vcvt_high_f64_f32 (float32x4_t __a)\n   return __builtin_aarch64_vec_unpacks_hi_v4sf (__a);\n }\n \n+/* vcvt (<u>fixed-point -> float).  */\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vcvtd_n_f64_s64 (int64_t __a, const int __b)\n+{\n+  return __builtin_aarch64_scvtfdi (__a, __b);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vcvtd_n_f64_u64 (uint64_t __a, const int __b)\n+{\n+  return __builtin_aarch64_ucvtfdi_sus (__a, __b);\n+}\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vcvts_n_f32_s32 (int32_t __a, const int __b)\n+{\n+  return __builtin_aarch64_scvtfsi (__a, __b);\n+}\n+\n+__extension__ static __inline float32_t __attribute__ ((__always_inline__))\n+vcvts_n_f32_u32 (uint32_t __a, const int __b)\n+{\n+  return __builtin_aarch64_ucvtfsi_sus (__a, __b);\n+}\n+\n+/* vcvt (float -> <u>fixed-point).  */\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vcvtd_n_s64_f64 (float64_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzsdf (__a, __b);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcvtd_n_u64_f64 (float64_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzudf_uss (__a, __b);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvts_n_s32_f32 (float32_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzssf (__a, __b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvts_n_u32_f32 (float32_t __a, const int __b)\n+{\n+  return __builtin_aarch64_fcvtzusf_uss (__a, __b);\n+}\n+\n /* vcvt  (<u>int -> float)  */\n \n __extension__ static __inline float64_t __attribute__ ((__always_inline__))"}, {"sha": "2d59bed99b9d269c656e5c451246a16a7e13b8b8", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f598afe16222d0b8c8185415c6202e38e73cc2d/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=3f598afe16222d0b8c8185415c6202e38e73cc2d", "patch": "@@ -648,8 +648,11 @@\n (define_mode_attr atomic_sfx\n   [(QI \"b\") (HI \"h\") (SI \"\") (DI \"\")])\n \n-(define_mode_attr fcvt_target [(V2DF \"v2di\") (V4SF \"v4si\") (V2SF \"v2si\") (SF \"si\") (DF \"di\")])\n-(define_mode_attr FCVT_TARGET [(V2DF \"V2DI\") (V4SF \"V4SI\") (V2SF \"V2SI\") (SF \"SI\") (DF \"DI\")])\n+(define_mode_attr fcvt_target [(V2DF \"v2di\") (V4SF \"v4si\") (V2SF \"v2si\")\n+\t\t\t       (SF \"si\") (DF \"di\") (SI \"sf\") (DI \"df\")])\n+(define_mode_attr FCVT_TARGET [(V2DF \"V2DI\") (V4SF \"V4SI\") (V2SF \"V2SI\")\n+\t\t\t       (SF \"SI\") (DF \"DI\") (SI \"SF\") (DI \"DF\")])\n+\n \n ;; for the inequal width integer to fp conversions\n (define_mode_attr fcvt_iesize [(SF \"di\") (DF \"si\")])\n@@ -1002,6 +1005,9 @@\n (define_int_iterator FCVT [UNSPEC_FRINTZ UNSPEC_FRINTP UNSPEC_FRINTM\n \t\t\t    UNSPEC_FRINTA UNSPEC_FRINTN])\n \n+(define_int_iterator FCVT_F2FIXED [UNSPEC_FCVTZS UNSPEC_FCVTZU])\n+(define_int_iterator FCVT_FIXED2F [UNSPEC_SCVTF UNSPEC_UCVTF])\n+\n (define_int_iterator FRECP [UNSPEC_FRECPE UNSPEC_FRECPX])\n \n (define_int_iterator CRC [UNSPEC_CRC32B UNSPEC_CRC32H UNSPEC_CRC32W\n@@ -1138,6 +1144,11 @@\n \t\t\t       (UNSPEC_FRINTP \"ceil\") (UNSPEC_FRINTM \"floor\")\n \t\t\t       (UNSPEC_FRINTN \"frintn\")])\n \n+(define_int_attr fcvt_fixed_insn [(UNSPEC_SCVTF \"scvtf\")\n+\t\t\t\t  (UNSPEC_UCVTF \"ucvtf\")\n+\t\t\t\t  (UNSPEC_FCVTZS \"fcvtzs\")\n+\t\t\t\t  (UNSPEC_FCVTZU \"fcvtzu\")])\n+\n (define_int_attr perm_insn [(UNSPEC_ZIP1 \"zip\") (UNSPEC_ZIP2 \"zip\")\n \t\t\t    (UNSPEC_TRN1 \"trn\") (UNSPEC_TRN2 \"trn\")\n \t\t\t    (UNSPEC_UZP1 \"uzp\") (UNSPEC_UZP2 \"uzp\")])"}]}