{"sha": "e344dbf315197023671560d95663f162483c32f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0NGRiZjMxNTE5NzAyMzY3MTU2MGQ5NTY2M2YxNjI0ODNjMzJmNA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2004-04-30T11:28:57Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2004-04-30T11:28:57Z"}, "message": "flow.c (propagate_one_insn): Call mark_set_regs for stack pointer updates too.\n\n\t* flow.c (propagate_one_insn): Call mark_set_regs for stack pointer\n\tupdates too.\n\nFrom-SVN: r81334", "tree": {"sha": "12f6e7a9fa326b2cc4f21f968dbba068ed79ce10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12f6e7a9fa326b2cc4f21f968dbba068ed79ce10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e344dbf315197023671560d95663f162483c32f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e344dbf315197023671560d95663f162483c32f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e344dbf315197023671560d95663f162483c32f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e344dbf315197023671560d95663f162483c32f4/comments", "author": null, "committer": null, "parents": [{"sha": "65a939f7ac72e5ea2a631a321a04f754e0085641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65a939f7ac72e5ea2a631a321a04f754e0085641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65a939f7ac72e5ea2a631a321a04f754e0085641"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "cdf801a86298ceb08ecf6920622482d52aa02657", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e344dbf315197023671560d95663f162483c32f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e344dbf315197023671560d95663f162483c32f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e344dbf315197023671560d95663f162483c32f4", "patch": "@@ -1,3 +1,8 @@\n+2004-04-30  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* flow.c (propagate_one_insn): Call mark_set_regs for stack pointer\n+\tupdates too.\n+\n 2004-04-30  Paul Brook  <paul@codesourcery.com>\n \n \t* arm.c (arm_needs_doubleword_align): Use mode alignment."}, {"sha": "1cd08230c8e3703485d5ac07d11c17ee0b4deb30", "filename": "gcc/flow.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e344dbf315197023671560d95663f162483c32f4/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e344dbf315197023671560d95663f162483c32f4/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=e344dbf315197023671560d95663f162483c32f4", "patch": "@@ -1707,12 +1707,18 @@ propagate_one_insn (struct propagate_block_info *pbi, rtx insn)\n \t   && GET_CODE (SET_SRC (PATTERN (insn))) == PLUS\n \t   && XEXP (SET_SRC (PATTERN (insn)), 0) == stack_pointer_rtx\n \t   && GET_CODE (XEXP (SET_SRC (PATTERN (insn)), 1)) == CONST_INT)\n-    /* We have an insn to pop a constant amount off the stack.\n-       (Such insns use PLUS regardless of the direction of the stack,\n-       and any insn to adjust the stack by a constant is always a pop.)\n-       These insns, if not dead stores, have no effect on life, though\n-       they do have an effect on the memory stores we are tracking.  */\n-    invalidate_mems_from_set (pbi, stack_pointer_rtx);\n+    {\n+      /* We have an insn to pop a constant amount off the stack.\n+         (Such insns use PLUS regardless of the direction of the stack,\n+         and any insn to adjust the stack by a constant is always a pop\n+\t or part of a push.)\n+         These insns, if not dead stores, have no effect on life, though\n+         they do have an effect on the memory stores we are tracking.  */\n+      invalidate_mems_from_set (pbi, stack_pointer_rtx);\n+      /* Still, we need to update local_set, lest ifcvt.c:dead_or_predicable\n+\t concludes that the stack pointer is not modified.  */\n+      mark_set_regs (pbi, PATTERN (insn), insn);\n+    }\n   else\n     {\n       rtx note;"}]}