{"sha": "eec9ac3d090d032c9e5c7e549ada5742c1392ca0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjOWFjM2QwOTBkMDMyYzllNWM3ZTU0OWFkYTU3NDJjMTM5MmNhMA==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2001-07-20T13:27:40Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2001-07-20T13:27:40Z"}, "message": "com.c (ffecom_expr_intrinsic_): case FFEINTRIN_impIBITS: Remove TREE_SHIFT_FULLWIDTH define.\n\n2001-07-20  Toon Moene  <toon@moene.indiv.nluug.nl>\n\n\t* com.c (ffecom_expr_intrinsic_):\n\tcase FFEINTRIN_impIBITS: Remove TREE_SHIFT_FULLWIDTH define.\n\tcase FFEINTRIN_impISHFT: Ditto. Change LT_EXPR to NE_EXPR.\n\tcase FFEINTRIN_impISHFTC: Ditto.\n\tcase FFEINTRIN_impMVBITS: Ditto.\n\nFrom-SVN: r44196", "tree": {"sha": "3cf0ad6266d947fc40401633fa3235998b2a905b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cf0ad6266d947fc40401633fa3235998b2a905b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eec9ac3d090d032c9e5c7e549ada5742c1392ca0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec9ac3d090d032c9e5c7e549ada5742c1392ca0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eec9ac3d090d032c9e5c7e549ada5742c1392ca0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec9ac3d090d032c9e5c7e549ada5742c1392ca0/comments", "author": null, "committer": null, "parents": [{"sha": "4e01a8f6e5bbe139666992da66340c96d47cdf32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e01a8f6e5bbe139666992da66340c96d47cdf32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e01a8f6e5bbe139666992da66340c96d47cdf32"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "d28a47989dbd16b3c219bc76a1556e6aa01dba0e", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec9ac3d090d032c9e5c7e549ada5742c1392ca0/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec9ac3d090d032c9e5c7e549ada5742c1392ca0/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=eec9ac3d090d032c9e5c7e549ada5742c1392ca0", "patch": "@@ -1,3 +1,11 @@\n+2001-07-20  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* com.c (ffecom_expr_intrinsic_):\n+\tcase FFEINTRIN_impIBITS: Remove TREE_SHIFT_FULLWIDTH define.\n+\tcase FFEINTRIN_impISHFT: Ditto. Change LT_EXPR to NE_EXPR.\n+\tcase FFEINTRIN_impISHFTC: Ditto.\n+\tcase FFEINTRIN_impMVBITS: Ditto.\n+\n 2001-07-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* top.c (ffe_decode_option): Disallow lang-independent processing"}, {"sha": "5b4388f7997598297333bf74cc2d450474ab4d58", "filename": "gcc/f/com.c", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec9ac3d090d032c9e5c7e549ada5742c1392ca0/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec9ac3d090d032c9e5c7e549ada5742c1392ca0/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=eec9ac3d090d032c9e5c7e549ada5742c1392ca0", "patch": "@@ -4524,7 +4524,7 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t\t\t\t\t\t   integer_type_node,\n \t\t\t\t\t\t   TYPE_SIZE (uns_type),\n \t\t\t\t\t\t   arg3_tree))));\n-#if !defined(TREE_SHIFT_FULLWIDTH) || !TREE_SHIFT_FULLWIDTH\n+\t/* Fix up, because the RSHIFT_EXPR above can't shift over TYPE_SIZE.  */\n \texpr_tree\n \t  = ffecom_3 (COND_EXPR, tree_type,\n \t\t      ffecom_truth_value\n@@ -4533,7 +4533,6 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t\t\t\t integer_zero_node)),\n \t\t      expr_tree,\n \t\t      convert (tree_type, integer_zero_node));\n-#endif\n       }\n       return expr_tree;\n \n@@ -4569,18 +4568,17 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t\t\t\t\t ffecom_1 (NEGATE_EXPR,\n \t\t\t\t\t\t   integer_type_node,\n \t\t\t\t\t\t   arg2_tree))));\n-#if !defined(TREE_SHIFT_FULLWIDTH) || !TREE_SHIFT_FULLWIDTH\n+\t/* Fix up, because {L|R}SHIFT_EXPR don't go over TYPE_SIZE bounds.  */\n \texpr_tree\n \t  = ffecom_3 (COND_EXPR, tree_type,\n \t\t      ffecom_truth_value\n-\t\t      (ffecom_2 (LT_EXPR, integer_type_node,\n+\t\t      (ffecom_2 (NE_EXPR, integer_type_node,\n \t\t\t\t ffecom_1 (ABS_EXPR,\n \t\t\t\t\t   integer_type_node,\n \t\t\t\t\t   arg2_tree),\n \t\t\t\t TYPE_SIZE (uns_type))),\n \t\t      expr_tree,\n \t\t      convert (tree_type, integer_zero_node));\n-#endif\n \t/* Make sure SAVE_EXPRs get referenced early enough. */\n \texpr_tree\n \t  = ffecom_2 (COMPOUND_EXPR, tree_type,\n@@ -4610,7 +4608,7 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t\t      ffecom_1 (BIT_NOT_EXPR, tree_type,\n \t\t\t\tconvert (tree_type, integer_zero_node)),\n \t\t      arg3_tree);\n-#if !defined(TREE_SHIFT_FULLWIDTH) || !TREE_SHIFT_FULLWIDTH\n+\t/* Fix up, because LSHIFT_EXPR above can't shift over TYPE_SIZE.  */\n \tmask_arg1\n \t  = ffecom_3 (COND_EXPR, tree_type,\n \t\t      ffecom_truth_value\n@@ -4619,7 +4617,6 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t\t\t\t TYPE_SIZE (uns_type))),\n \t\t      mask_arg1,\n \t\t      convert (tree_type, integer_zero_node));\n-#endif\n \tmask_arg1 = ffecom_save_tree (mask_arg1);\n \tmasked_arg1\n \t  = ffecom_2 (BIT_AND_EXPR, tree_type,\n@@ -4768,7 +4765,7 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t\t\t\tconvert (arg4_type,\n \t\t\t\t\t integer_zero_node)),\n \t\t      arg5_plus_arg3);\n-#if !defined(TREE_SHIFT_FULLWIDTH) || !TREE_SHIFT_FULLWIDTH\n+\t/* Fix up, because LSHIFT_EXPR above can't shift over TYPE_SIZE.  */\n \tprep_arg4\n \t  = ffecom_3 (COND_EXPR, arg4_type,\n \t\t      ffecom_truth_value\n@@ -4778,7 +4775,6 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t\t\t\t\t  TYPE_SIZE (arg4_type)))),\n \t\t      prep_arg4,\n \t\t      convert (arg4_type, integer_zero_node));\n-#endif\n \tprep_arg4\n \t  = ffecom_2 (BIT_AND_EXPR, arg4_type,\n \t\t      arg4_tree,\n@@ -4796,7 +4792,8 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t  = ffecom_2 (BIT_IOR_EXPR, arg4_type,\n \t\t      prep_arg1,\n \t\t      prep_arg4);\n-#if !defined(TREE_SHIFT_FULLWIDTH) || !TREE_SHIFT_FULLWIDTH\n+\t/* Fix up (twice), because LSHIFT_EXPR above\n+\t   can't shift over TYPE_SIZE.  */\n \tprep_arg1\n \t  = ffecom_3 (COND_EXPR, arg4_type,\n \t\t      ffecom_truth_value\n@@ -4815,7 +4812,6 @@ ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t\t\t\t\t  TYPE_SIZE (arg4_type)))),\n \t\t      prep_arg1,\n \t\t      arg1_tree);\n-#endif\n \texpr_tree\n \t  = ffecom_2s (MODIFY_EXPR, void_type_node,\n \t\t       arg4_tree,"}]}