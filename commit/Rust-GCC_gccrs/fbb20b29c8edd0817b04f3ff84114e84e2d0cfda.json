{"sha": "fbb20b29c8edd0817b04f3ff84114e84e2d0cfda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJiMjBiMjljOGVkZDA4MTdiMDRmM2ZmODQxMTRlODRlMmQwY2ZkYQ==", "commit": {"author": {"name": "Basile Starynkevitch", "email": "bstarynk@gcc.gnu.org", "date": "2011-04-19T09:45:18Z"}, "committer": {"name": "Basile Starynkevitch", "email": "bstarynk@gcc.gnu.org", "date": "2011-04-19T09:45:18Z"}, "message": "gengtype.h: Updated copyright year.\n\n\n2011-04-19  Basile Starynkevitch  <basile@starynkevitch.net>\n\n\t* gengtype.h: Updated copyright year.\n\t(struct input_file_st): Add inpisplugin field.\n\t(type_fileloc): New function.\n\t* gengtype.c\n\t(write_typed_struct_alloc_def): Add gcc_assert.\n\t(write_typed_alloc_defns): Ditto. Don't output for plugin files.\n\t(write_typed_alloc_defns): Don't output for plugin files.\n\t(input_file_by_name): Clear inpisplugin field.\n\t(main): Set inpisplugin field for plugin files.\n\nFrom-SVN: r172705", "tree": {"sha": "f427734c80d0948a238a706be5a77352265369e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f427734c80d0948a238a706be5a77352265369e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda/comments", "author": null, "committer": null, "parents": [{"sha": "897e0a890fe6e35fb53f3f6185e9167e113fd102", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/897e0a890fe6e35fb53f3f6185e9167e113fd102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/897e0a890fe6e35fb53f3f6185e9167e113fd102"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "43aa85614dbf3189cc0ef8a6a5bd6a95698636d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbb20b29c8edd0817b04f3ff84114e84e2d0cfda", "patch": "@@ -1,3 +1,16 @@\n+\n+2011-04-19  Basile Starynkevitch  <basile@starynkevitch.net>\n+\n+\t* gengtype.h: Updated copyright year.\n+\t(struct input_file_st): Add inpisplugin field.\n+\t(type_fileloc): New function.\n+\t* gengtype.c\n+\t(write_typed_struct_alloc_def): Add gcc_assert.\n+\t(write_typed_alloc_defns): Ditto. Don't output for plugin files.\n+\t(write_typed_alloc_defns): Don't output for plugin files.\n+\t(input_file_by_name): Clear inpisplugin field.\n+\t(main): Set inpisplugin field for plugin files.\n+\n 2011-04-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* gengtype-state.c (string_eq): New.\n@@ -22,6 +35,7 @@\n \t* config/vms/vms-ar.c: New file.\n \t* config/vms/t-vmsnative: New file.\n \n+>>>>>>> .r172704\n 2011-04-18  Xinliang David Li  <davidxl@google.com>\n \n \t* final.c (dump_basic_block_info): Use ASM_COMMENT_START."}, {"sha": "cb0c77b241d72f2d2e71876055dd89f8857a0adb", "filename": "gcc/gengtype.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=fbb20b29c8edd0817b04f3ff84114e84e2d0cfda", "patch": "@@ -4235,6 +4235,7 @@ write_typed_struct_alloc_def (outf_p f,\n \t\t\t      enum alloc_quantity quantity,\n \t\t\t      enum alloc_zone zone)\n {\n+  gcc_assert (UNION_OR_STRUCT_P (s));\n   write_typed_alloc_def (f, variable_size_p (s), get_type_specifier (s),\n                          s->u.s.tag, allocator_type, quantity, zone);\n }\n@@ -4269,6 +4270,12 @@ write_typed_alloc_defns (outf_p f,\n     {\n       if (!USED_BY_TYPED_GC_P (s))\n \tcontinue;\n+      gcc_assert (UNION_OR_STRUCT_P (s));\n+      /* In plugin mode onput output ggc_alloc macro definitions\n+\t relevant to plugin input files.  */\n+      if (nb_plugin_files > 0 \n+\t  && ((s->u.s.line.file == NULL) || !s->u.s.line.file->inpisplugin))\n+\tcontinue;\n       write_typed_struct_alloc_def (f, s, \"\", single, any_zone);\n       write_typed_struct_alloc_def (f, s, \"cleared_\", single, any_zone);\n       write_typed_struct_alloc_def (f, s, \"vec_\", vector, any_zone);\n@@ -4287,6 +4294,14 @@ write_typed_alloc_defns (outf_p f,\n       s = p->type;\n       if (!USED_BY_TYPED_GC_P (s) || (strcmp (p->name, s->u.s.tag) == 0))\n \tcontinue;\n+      /* In plugin mode onput output ggc_alloc macro definitions\n+\t relevant to plugin input files.  */\n+      if (nb_plugin_files > 0) \n+\t{\n+\t  struct fileloc* filoc = type_fileloc(s);\n+\t  if (!filoc || !filoc->file->inpisplugin)\n+\t    continue;\n+\t};\n       write_typed_typedef_alloc_def (f, p, \"\", single, any_zone);\n       write_typed_typedef_alloc_def (f, p, \"cleared_\", single, any_zone);\n       write_typed_typedef_alloc_def (f, p, \"vec_\", vector, any_zone);\n@@ -4814,6 +4829,7 @@ input_file_by_name (const char* name)\n   f = XCNEWVAR (input_file, sizeof (input_file)+namlen+2);\n   f->inpbitmap = 0;\n   f->inpoutf = NULL;\n+  f->inpisplugin = false;\n   strcpy (f->inpname, name);\n   slot = htab_find_slot (input_file_htab, f, INSERT);\n   gcc_assert (slot != NULL);\n@@ -4945,8 +4961,11 @@ main (int argc, char **argv)\n \n       /* Parse our plugin files and augment the state.  */\n       for (ix = 0; ix < nb_plugin_files; ix++)\n-\tparse_file (get_input_file_name (plugin_files[ix]));\n-\n+\t{\n+\t  input_file* pluginput = plugin_files [ix];\n+\t  pluginput->inpisplugin = true;\n+\t  parse_file (get_input_file_name (pluginput));\n+\t}\n       if (hit_error)\n \treturn 1;\n "}, {"sha": "964cc31191725755799f2a552ec429e8cb1a4cf9", "filename": "gcc/gengtype.h", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbb20b29c8edd0817b04f3ff84114e84e2d0cfda/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=fbb20b29c8edd0817b04f3ff84114e84e2d0cfda", "patch": "@@ -1,5 +1,5 @@\n /* Process source files and output type information.\n-   Copyright (C) 2002, 2003, 2004, 2007, 2008, 2010 \n+   Copyright (C) 2002, 2003, 2004, 2007, 2008, 2010, 2011 \n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -33,6 +33,7 @@ struct input_file_st\n   struct outf* inpoutf;  /* Cached corresponding output file, computed\n                             in get_output_file_with_visibility.  */\n   lang_bitmap inpbitmap; /* The set of languages using this file.  */\n+  bool inpisplugin;      /* Flag set for plugin input files.  */\n   char inpname[1];       /* A variable-length array, ended by a null\n                             char.  */\n };\n@@ -328,6 +329,19 @@ extern struct type scalar_char;\n \n \n \n+/* Give the file location of a type, if any. */\n+static inline struct fileloc* \n+type_fileloc (type_p t)\n+{\n+  if (!t) \n+    return NULL;\n+  if (UNION_OR_STRUCT_P(t))\n+    return &t->u.s.line;\n+  if  (t->kind == TYPE_PARAM_STRUCT)\n+    return &t->u.param_struct.line;\n+  return NULL;\n+}\n+\n /* Structure representing an output file.  */\n struct outf\n {"}]}