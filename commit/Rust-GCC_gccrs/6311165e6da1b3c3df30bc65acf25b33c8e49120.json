{"sha": "6311165e6da1b3c3df30bc65acf25b33c8e49120", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMxMTE2NWU2ZGExYjNjM2RmMzBiYzY1YWNmMjViMzNjOGU0OTEyMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-01-11T15:42:27Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2007-01-11T15:42:27Z"}, "message": "Remove accidentally checked in hunk.\n\nFrom-SVN: r120676", "tree": {"sha": "760822f3798841b028d8b090cf489d01b8b82918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/760822f3798841b028d8b090cf489d01b8b82918"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6311165e6da1b3c3df30bc65acf25b33c8e49120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6311165e6da1b3c3df30bc65acf25b33c8e49120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6311165e6da1b3c3df30bc65acf25b33c8e49120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6311165e6da1b3c3df30bc65acf25b33c8e49120/comments", "author": null, "committer": null, "parents": [{"sha": "1aa6ca40fbf259b41619c8d9bac82f963b488160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa6ca40fbf259b41619c8d9bac82f963b488160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa6ca40fbf259b41619c8d9bac82f963b488160"}], "stats": {"total": 6, "additions": 2, "deletions": 4}, "files": [{"sha": "40009c218bf6b7816fce51a86b1f63a2434ed19c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6311165e6da1b3c3df30bc65acf25b33c8e49120/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6311165e6da1b3c3df30bc65acf25b33c8e49120/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6311165e6da1b3c3df30bc65acf25b33c8e49120", "patch": "@@ -6093,7 +6093,6 @@ cp_parser_constant_expression (cp_parser* parser,\n   parser->integral_constant_expression_p = true;\n   parser->allow_non_integral_constant_expression_p = allow_non_constant_p;\n   parser->non_integral_constant_expression_p = false;\n-  integral_constant_expr_p = true;\n   /* Although the grammar says \"conditional-expression\", we parse an\n      \"assignment-expression\", which also permits \"throw-expression\"\n      and the use of assignment operators.  In the case that\n@@ -6105,7 +6104,6 @@ cp_parser_constant_expression (cp_parser* parser,\n      constant.  */\n   expression = cp_parser_assignment_expression (parser, /*cast_p=*/false);\n   /* Restore the old settings.  */\n-  integral_constant_expr_p = false;\n   parser->integral_constant_expression_p\n     = saved_integral_constant_expression_p;\n   parser->allow_non_integral_constant_expression_p\n@@ -10313,8 +10311,8 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \t\t\t\t\t /*check_dependency_p=*/true,\n \t\t\t\t\t /*type_p=*/true,\n \t\t\t\t\t is_declaration);\n-  /* For everything but enumeration types, consider a template-id.\n-     For an enumeration type, consider only a plain identifier.  */\n+ /* For everything but enumeration types, consider a template-id.\n+    For an enumeration type, consider only a plain identifier.  */\n   if (tag_type != enum_type)\n     {\n       bool template_p = false;"}]}