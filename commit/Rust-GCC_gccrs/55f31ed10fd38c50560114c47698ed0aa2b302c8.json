{"sha": "55f31ed10fd38c50560114c47698ed0aa2b302c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVmMzFlZDEwZmQzOGM1MDU2MDExNGM0NzY5OGVkMGFhMmIzMDJjOA==", "commit": {"author": {"name": "Sebastian Peryt", "email": "sebastian.peryt@intel.com", "date": "2018-05-11T13:17:42Z"}, "committer": {"name": "Sebastian Peryt", "email": "speryt@gcc.gnu.org", "date": "2018-05-11T13:17:42Z"}, "message": "i386-common.c (OPTION_MASK_ISA_WAITPKG_SET, [...]): New defines.\n\n2018-05-11  Sebastian Peryt  <sebastian.peryt@intel.com>\n\ngcc/\n\n        * common/config/i386/i386-common.c (OPTION_MASK_ISA_WAITPKG_SET,\n        OPTION_MASK_ISA_WAITPKG_UNSET): New defines.\n        (ix86_handle_option): Handle -mwaitpkg.\n        * config.gcc: New header.\n        * config/i386/cpuid.h (bit_WAITPKG): New bit.\n        * config/i386/driver-i386.c (host_detect_local_cpu): Detect -mwaitpkg.\n        * config/i386/i386-builtin-types.def ((UINT8, UNSIGNED, UINT64)): New\n        function type.\n        * config/i386/i386-c.c (ix86_target_macros_internal): Handle\n        OPTION_MASK_ISA_WAITPKG.\n        * config/i386/i386.c (ix86_target_string): Add -mwaitpkg.\n        (ix86_option_override_internal): Add PTA_WAITPKG.\n        (ix86_valid_target_attribute_inner_p): Add -mwaitpkg.\n        (enum ix86_builtins): Add IX86_BUILTIN_UMONITOR, IX86_BUILTIN_UMWAIT,\n        IX86_BUILTIN_TPAUSE.\n        (ix86_init_mmx_sse_builtins): Define __builtin_ia32_umonitor,\n        __builtin_ia32_umwait and __builtin_ia32_tpause.\n        (ix86_expand_builtin): Expand IX86_BUILTIN_UMONITOR,\n        IX86_BUILTIN_UMWAIT, IX86_BUILTIN_TPAUSE.\n        * config/i386/i386.h (TARGET_WAITPKG, TARGET_WAITPKG_P): New.\n        * config/i386/i386.md (UNSPECV_UMWAIT, UNSPECV_UMONITOR,\n        UNSPECV_TPAUSE): New.\n        (umwait, umwait_rex64, umonitor_<mode>, tpause, tpause_rex64): New.\n        * config/i386/i386.opt: Add -mwaitpkg.\n        * config/i386/waitpkgintrin.h: New file.\n        * config/i386/x86intrin.h: New header.\n        * doc/invoke.texi: Add -mwaitpkg.\n\ngcc/testsuite/\n\n        * gcc.target/i386/tpause-1.c: New test.\n        * gcc.target/i386/umonitor-1.c: New test.\n\nFrom-SVN: r260161", "tree": {"sha": "5be5eee255e124ed77f310e674dc92f07c1bc408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5be5eee255e124ed77f310e674dc92f07c1bc408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55f31ed10fd38c50560114c47698ed0aa2b302c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f31ed10fd38c50560114c47698ed0aa2b302c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55f31ed10fd38c50560114c47698ed0aa2b302c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55f31ed10fd38c50560114c47698ed0aa2b302c8/comments", "author": {"login": "speryt", "id": 44768132, "node_id": "MDQ6VXNlcjQ0NzY4MTMy", "avatar_url": "https://avatars.githubusercontent.com/u/44768132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/speryt", "html_url": "https://github.com/speryt", "followers_url": "https://api.github.com/users/speryt/followers", "following_url": "https://api.github.com/users/speryt/following{/other_user}", "gists_url": "https://api.github.com/users/speryt/gists{/gist_id}", "starred_url": "https://api.github.com/users/speryt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/speryt/subscriptions", "organizations_url": "https://api.github.com/users/speryt/orgs", "repos_url": "https://api.github.com/users/speryt/repos", "events_url": "https://api.github.com/users/speryt/events{/privacy}", "received_events_url": "https://api.github.com/users/speryt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c40a8be80895679e8100e6ed32274bbed57d6543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c40a8be80895679e8100e6ed32274bbed57d6543", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c40a8be80895679e8100e6ed32274bbed57d6543"}], "stats": {"total": 358, "additions": 346, "deletions": 12}, "files": [{"sha": "aa93ad8f9633ac165b5887987f83c344de293f13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -1,3 +1,33 @@\n+2018-05-11  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_WAITPKG_SET,\n+\tOPTION_MASK_ISA_WAITPKG_UNSET): New defines.\n+\t(ix86_handle_option): Handle -mwaitpkg.\n+\t* config.gcc: New header.\n+\t* config/i386/cpuid.h (bit_WAITPKG): New bit.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect -mwaitpkg.\n+\t* config/i386/i386-builtin-types.def ((UINT8, UNSIGNED, UINT64)): New\n+\tfunction type.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n+\tOPTION_MASK_ISA_WAITPKG.\n+\t* config/i386/i386.c (ix86_target_string): Add -mwaitpkg.\n+\t(ix86_option_override_internal): Add PTA_WAITPKG.\n+\t(ix86_valid_target_attribute_inner_p): Add -mwaitpkg.\n+\t(enum ix86_builtins): Add IX86_BUILTIN_UMONITOR, IX86_BUILTIN_UMWAIT,\n+\tIX86_BUILTIN_TPAUSE.\n+\t(ix86_init_mmx_sse_builtins): Define __builtin_ia32_umonitor,\n+\t__builtin_ia32_umwait and __builtin_ia32_tpause.\n+\t(ix86_expand_builtin): Expand IX86_BUILTIN_UMONITOR,\n+\tIX86_BUILTIN_UMWAIT, IX86_BUILTIN_TPAUSE.\n+\t* config/i386/i386.h (TARGET_WAITPKG, TARGET_WAITPKG_P): New.\n+\t* config/i386/i386.md (UNSPECV_UMWAIT, UNSPECV_UMONITOR,\n+\tUNSPECV_TPAUSE): New.\n+\t(umwait, umwait_rex64, umonitor_<mode>, tpause, tpause_rex64): New.\n+\t* config/i386/i386.opt: Add -mwaitpkg.\n+\t* config/i386/waitpkgintrin.h: New file.\n+\t* config/i386/x86intrin.h: New header.\n+\t* doc/invoke.texi: Add -mwaitpkg.\n+\n 2018-05-11  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/85606"}, {"sha": "b17646c165ad4150acf51b343abfb62ff0446e8f", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -152,6 +152,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_VPCLMULQDQ_SET OPTION_MASK_ISA_VPCLMULQDQ\n #define OPTION_MASK_ISA_MOVDIRI_SET OPTION_MASK_ISA_MOVDIRI\n #define OPTION_MASK_ISA_MOVDIR64B_SET OPTION_MASK_ISA_MOVDIR64B\n+#define OPTION_MASK_ISA_WAITPKG_SET OPTION_MASK_ISA_WAITPKG\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -228,6 +229,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_VPCLMULQDQ_UNSET OPTION_MASK_ISA_VPCLMULQDQ\n #define OPTION_MASK_ISA_MOVDIRI_UNSET OPTION_MASK_ISA_MOVDIRI\n #define OPTION_MASK_ISA_MOVDIR64B_UNSET OPTION_MASK_ISA_MOVDIR64B\n+#define OPTION_MASK_ISA_WAITPKG_UNSET OPTION_MASK_ISA_WAITPKG\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -608,6 +610,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mwaitpkg:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_WAITPKG_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_WAITPKG_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_WAITPKG_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_WAITPKG_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx5124fmaps:\n       if (value)\n \t{"}, {"sha": "9c4a84931083bf0c16673477d0fd7e27e1226171", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -384,7 +384,8 @@ i[34567]86-*-*)\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n-\t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\"\n+\t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n+\t\t       waitpkgintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -413,7 +414,8 @@ x86_64-*-*)\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n \t\t       avx512vnnivlintrin.h vaesintrin.h vpclmulqdqintrin.h\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n-\t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\"\n+\t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n+\t\t       waitpkgintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "0672cf54a9b4fbca861f00aedf1e040451004972", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -98,6 +98,7 @@\n #define bit_AVX512VBMI\t(1 << 1)\n #define bit_PKU\t(1 << 3)\n #define bit_OSPKE\t(1 << 4)\n+#define bit_WAITPKG\t(1 << 5)\n #define bit_AVX512VBMI2\t(1 << 6)\n #define bit_SHSTK\t(1 << 7)\n #define bit_GFNI\t(1 << 8)"}, {"sha": "52891f9ecf062e9ebbd047a926454b9e1514796e", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -424,6 +424,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_avx512vnni = 0, has_vaes = 0;\n   unsigned int has_vpclmulqdq = 0;\n   unsigned int has_movdiri = 0, has_movdir64b = 0;\n+  unsigned int has_waitpkg = 0;\n \n   bool arch;\n \n@@ -527,6 +528,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \n       has_shstk = ecx & bit_SHSTK;\n       has_pconfig = edx & bit_PCONFIG;\n+      has_waitpkg = ecx & bit_WAITPKG;\n     }\n \n   if (max_level >= 13)\n@@ -1108,6 +1110,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *avx512bitalg = has_avx512bitalg ? \" -mavx512bitalg\" : \" -mno-avx512bitalg\";\n       const char *movdiri = has_movdiri ? \" -mmovdiri\" : \" -mno-movdiri\";\n       const char *movdir64b = has_movdir64b ? \" -mmovdir64b\" : \" -mno-movdir64b\";\n+      const char *waitpkg = has_waitpkg ? \" -mwaitpkg\" : \" -mno-waitpkg\";\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, sgx, bmi2,\n@@ -1120,7 +1123,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tavx512ifma, avx512vbmi, avx5124fmaps, avx5124vnniw,\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, shstk,\n \t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n-\t\t\tavx512bitalg, movdiri, movdir64b, NULL);\n+\t\t\tavx512bitalg, movdiri, movdir64b, waitpkg, NULL);\n     }\n \n done:"}, {"sha": "6a75415d1fd0301dff3b694c69dd2b9e55e4d1f9", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -290,6 +290,7 @@ DEF_FUNCTION_TYPE (VOID, UINT64)\n DEF_FUNCTION_TYPE (VOID, UINT64, PVOID)\n DEF_FUNCTION_TYPE (VOID, UNSIGNED)\n DEF_FUNCTION_TYPE (VOID, UNSIGNED, PVOID)\n+DEF_FUNCTION_TYPE (UINT8, UNSIGNED, UINT64)\n DEF_FUNCTION_TYPE (INT, PUSHORT)\n DEF_FUNCTION_TYPE (INT, PUNSIGNED)\n DEF_FUNCTION_TYPE (INT, PULONGLONG)"}, {"sha": "93766be7230674903385e4c7aadb428dee82aa40", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -516,6 +516,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__MOVDIRI__\");\n   if (isa_flag2 & OPTION_MASK_ISA_MOVDIR64B)\n     def_or_undef (parse_in, \"__MOVDIR64B__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_WAITPKG)\n+    def_or_undef (parse_in, \"__WAITPKG__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "ffb1386e80f370a8ca2f255acd9de40d0b44aa5e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -2772,7 +2772,8 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n     { \"-mclzero\",\tOPTION_MASK_ISA_CLZERO },\n     { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX },\n-    { \"-mmovdir64b\",\tOPTION_MASK_ISA_MOVDIR64B }\n+    { \"-mmovdir64b\",\tOPTION_MASK_ISA_MOVDIR64B },\n+    { \"-mwaitpkg\",\tOPTION_MASK_ISA_WAITPKG }\n   };\n   static struct ix86_target_opts isa_opts[] =\n   {\n@@ -3455,6 +3456,7 @@ ix86_option_override_internal (bool main_args_p,\n   const wide_int_bitmask PTA_RDPID (0, HOST_WIDE_INT_1U << 6);\n   const wide_int_bitmask PTA_PCONFIG (0, HOST_WIDE_INT_1U << 7);\n   const wide_int_bitmask PTA_WBNOINVD (0, HOST_WIDE_INT_1U << 8);\n+  const wide_int_bitmask PTA_WAITPKG (0, HOST_WIDE_INT_1U << 9);\n \n   const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n     | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;\n@@ -5387,6 +5389,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"vpclmulqdq\", OPT_mvpclmulqdq),\n     IX86_ATTR_ISA (\"movdiri\", OPT_mmovdiri),\n     IX86_ATTR_ISA (\"movdir64b\", OPT_mmovdir64b),\n+    IX86_ATTR_ISA (\"waitpkg\", OPT_mwaitpkg),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -30642,6 +30645,9 @@ enum ix86_builtins\n   IX86_BUILTIN_CLFLUSH,\n   IX86_BUILTIN_MONITOR,\n   IX86_BUILTIN_MWAIT,\n+  IX86_BUILTIN_UMONITOR,\n+  IX86_BUILTIN_UMWAIT,\n+  IX86_BUILTIN_TPAUSE,\n   IX86_BUILTIN_CLZERO,\n   IX86_BUILTIN_VEC_INIT_V2SI,\n   IX86_BUILTIN_VEC_INIT_V4HI,\n@@ -31973,6 +31979,14 @@ ix86_init_mmx_sse_builtins (void)\n   def_builtin2 (OPTION_MASK_ISA_CLZERO, \"__builtin_ia32_clzero\",\n \t\tVOID_FTYPE_PCVOID, IX86_BUILTIN_CLZERO);\n \n+  /* WAITPKG.  */\n+  def_builtin2 (OPTION_MASK_ISA_WAITPKG, \"__builtin_ia32_umonitor\",\n+\t       VOID_FTYPE_PVOID, IX86_BUILTIN_UMONITOR);\n+  def_builtin2 (OPTION_MASK_ISA_WAITPKG, \"__builtin_ia32_umwait\",\n+\t       UINT8_FTYPE_UNSIGNED_UINT64, IX86_BUILTIN_UMWAIT);\n+  def_builtin2 (OPTION_MASK_ISA_WAITPKG, \"__builtin_ia32_tpause\",\n+\t       UINT8_FTYPE_UNSIGNED_UINT64, IX86_BUILTIN_TPAUSE);\n+\n   /* Add FMA4 multi-arg argument instructions */\n   for (i = 0, d = bdesc_multi_arg; i < ARRAY_SIZE (bdesc_multi_arg); i++, d++)\n     {\n@@ -37048,6 +37062,82 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_insn (gen_mwaitx (op0, op1, op2));\n       return 0;\n \n+    case IX86_BUILTIN_UMONITOR:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = expand_normal (arg0);\n+\n+      op0 = ix86_zero_extend_to_Pmode (op0);\n+\n+      insn = (TARGET_64BIT\n+\t      ? gen_umonitor_di (op0)\n+\t      : gen_umonitor_si (op0));\n+\n+      emit_insn (insn);\n+      return 0;\n+\n+    case IX86_BUILTIN_UMWAIT:\n+    case IX86_BUILTIN_TPAUSE:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+\n+      if (!REG_P (op0))\n+\top0 = copy_to_mode_reg (SImode, op0);\n+\n+      op1 = force_reg (DImode, op1);\n+\n+      if (TARGET_64BIT)\n+\t{\n+\t  op2 = expand_simple_binop (DImode, LSHIFTRT, op1, GEN_INT (32),\n+\t\t\t\t     NULL, 1, OPTAB_DIRECT);\n+\t  switch (fcode)\n+\t    {\n+\t    case IX86_BUILTIN_UMWAIT:\n+\t      icode = CODE_FOR_umwait_rex64;\n+\t      break;\n+\t    case IX86_BUILTIN_TPAUSE:\n+\t      icode = CODE_FOR_tpause_rex64;\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\n+\t  op2 = gen_lowpart (SImode, op2);\n+\t  op1 = gen_lowpart (SImode, op1);\n+\t  pat = GEN_FCN (icode) (op0, op1, op2);\n+\t}\n+      else\n+\t{\n+\t  switch (fcode)\n+\t    {\n+\t    case IX86_BUILTIN_UMWAIT:\n+\t      icode = CODE_FOR_umwait;\n+\t      break;\n+\t    case IX86_BUILTIN_TPAUSE:\n+\t      icode = CODE_FOR_tpause;\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t  pat = GEN_FCN (icode) (op0, op1);\n+\t}\n+\n+      if (!pat)\n+\treturn 0;\n+\n+      emit_insn (pat);\n+\n+      if (target == 0\n+\t  || !register_operand (target, QImode))\n+\ttarget = gen_reg_rtx (QImode);\n+\n+      pat = gen_rtx_EQ (QImode, gen_rtx_REG (CCCmode, FLAGS_REG),\n+\t\t\tconst0_rtx);\n+      emit_insn (gen_rtx_SET (target, pat));\n+\n+      return target;\n+\n     case IX86_BUILTIN_CLZERO:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       op0 = expand_normal (arg0);"}, {"sha": "8fc980f3ca373ad9d7b0c0c31efaab58bc15383f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -189,6 +189,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_MOVDIRI_P(x) TARGET_ISA_MOVDIRI_P(x)\n #define TARGET_MOVDIR64B\tTARGET_ISA_MOVDIR64B\n #define TARGET_MOVDIR64B_P(x) TARGET_ISA_MOVDIR64B_P(x)\n+#define TARGET_WAITPKG\tTARGET_ISA_WAITPKG\n+#define TARGET_WAITPKG_P(x)\tTARGET_ISA_WAITPKG_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)"}, {"sha": "1ba352ac293734852867874ad59d6f38fb14afc9", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 63, "deletions": 6, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -289,8 +289,15 @@\n   UNSPECV_WRUSS\n   UNSPECV_SETSSBSY\n   UNSPECV_CLRSSBSY\n+\n+  ;; For MOVDIRI and MOVDIR64B support\n   UNSPECV_MOVDIRI\n   UNSPECV_MOVDIR64B\n+\n+  ;; For WAITPKG support\n+  UNSPECV_UMWAIT\n+  UNSPECV_UMONITOR\n+  UNSPECV_TPAUSE\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -20960,22 +20967,72 @@\n   \"wbnoinvd\"\n   [(set_attr \"type\" \"other\")])\n \n+;; MOVDIRI and MOVDIR64B\n+\n (define_insn \"movdiri<mode>\"\n-  [(unspec_volatile:SWI48[(match_operand:SWI48 0 \"memory_operand\" \"m\")\n-\t(match_operand:SWI48 1 \"register_operand\" \"r\")]\n-\t\t   UNSPECV_MOVDIRI)]\n+  [(unspec_volatile:SWI48 [(match_operand:SWI48 0 \"memory_operand\" \"m\")\n+\t\t\t   (match_operand:SWI48 1 \"register_operand\" \"r\")]\n+\t\t\t  UNSPECV_MOVDIRI)]\n   \"TARGET_MOVDIRI\"\n   \"movdiri\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"other\")])\n \n (define_insn \"movdir64b_<mode>\"\n-  [(unspec_volatile:XI[(match_operand:P 0 \"register_operand\" \"r\")\n-\t(match_operand:XI 1 \"memory_operand\")]\n-\t\t UNSPECV_MOVDIR64B)]\n+  [(unspec_volatile:XI [(match_operand:P 0 \"register_operand\" \"r\")\n+\t\t\t(match_operand:XI 1 \"memory_operand\")]\n+\t\t       UNSPECV_MOVDIR64B)]\n   \"TARGET_MOVDIR64B\"\n   \"movdir64b\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"other\")])\n \n+;; WAITPKG\n+\n+(define_insn \"umwait\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(unspec_volatile:CCC [(match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:DI 1 \"register_operand\" \"A\")]\n+\t\t\t     UNSPECV_UMWAIT))]\n+  \"!TARGET_64BIT && TARGET_WAITPKG\"\n+  \"umwait\\t%0\"\n+  [(set_attr \"length\" \"3\")])\n+\n+(define_insn \"umwait_rex64\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(unspec_volatile:CCC [(match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:SI 1 \"register_operand\" \"a\")\n+\t\t\t      (match_operand:SI 2 \"register_operand\" \"d\")]\n+\t\t\t     UNSPECV_UMWAIT))]\n+  \"TARGET_64BIT && TARGET_WAITPKG\"\n+  \"umwait\\t%0\"\n+  [(set_attr \"length\" \"3\")])\n+\n+(define_insn \"umonitor_<mode>\"\n+  [(unspec_volatile [(match_operand:P 0 \"register_operand\" \"r\")]\n+\t\t    UNSPECV_UMONITOR)]\n+  \"TARGET_WAITPKG\"\n+  \"umonitor\\t%0\"\n+  [(set (attr \"length\")\n+     (symbol_ref (\"(Pmode != word_mode) + 3\")))])\n+\n+(define_insn \"tpause\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(unspec_volatile:CCC [(match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:DI 1 \"register_operand\" \"A\")]\n+\t\t\t     UNSPECV_TPAUSE))]\n+  \"!TARGET_64BIT && TARGET_WAITPKG\"\n+  \"tpause\\t%0\"\n+  [(set_attr \"length\" \"3\")])\n+\n+(define_insn \"tpause_rex64\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(unspec_volatile:CCC [(match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:SI 1 \"register_operand\" \"a\")\n+\t\t\t      (match_operand:SI 2 \"register_operand\" \"d\")]\n+\t\t\t     UNSPECV_TPAUSE))]\n+  \"TARGET_64BIT && TARGET_WAITPKG\"\n+  \"tpause\\t%0\"\n+  [(set_attr \"length\" \"3\")])\n+\n (include \"mmx.md\")\n (include \"sse.md\")\n (include \"sync.md\")"}, {"sha": "eec702623d2647e2da04908bae3b1def2f019a2b", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -1055,3 +1055,7 @@ Support MOVDIRI built-in functions and code generation.\n mmovdir64b\n Target Report Mask(ISA_MOVDIR64B) Var(ix86_isa_flags2) Save\n Support MOVDIR64B built-in functions and code generation.\n+\n+mwaitpkg\n+Target Report Mask(ISA_WAITPKG) Var(ix86_isa_flags2) Save\n+Support WAITPKG built-in functions and code generation."}, {"sha": "8b68091bfde720bc037bcabf3f699547d03ca1e9", "filename": "gcc/config/i386/waitpkgintrin.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fwaitpkgintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fwaitpkgintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwaitpkgintrin.h?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -0,0 +1,63 @@\n+/* Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _X86INTRIN_H_INCLUDED\n+# error \"Never use <waitpkgintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _WAITPKG_H_INCLUDED\n+#define _WAITPKG_H_INCLUDED\n+\n+#ifndef __WAITPKG__\n+#pragma GCC push_options\n+#pragma GCC target(\"waitpkg\")\n+#define __DISABLE_WAITPKG__\n+#endif /* __WAITPKG__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_umonitor (void *__A)\n+{\n+  __builtin_ia32_umonitor (__A);\n+}\n+\n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_umwait (unsigned int __A, unsigned long long __B)\n+{\n+  return __builtin_ia32_umwait (__A, __B);\n+}\n+\n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_tpause (unsigned int __A, unsigned long long __B)\n+{\n+  return __builtin_ia32_tpause (__A, __B);\n+}\n+\n+#ifdef __DISABLE_WAITPKG__\n+#undef __DISABLE_WAITPKG__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_WAITPKG__ */\n+\n+#endif /* _WAITPKG_H_INCLUDED.  */"}, {"sha": "71a33feb7786c1f1c017c03979dab4b87dac5bdc", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -101,6 +101,8 @@\n \n #include <pkuintrin.h>\n \n+#include <waitpkgintrin.h>\n+\n #endif /* __iamcu__ */\n \n #endif /* _X86INTRIN_H_INCLUDED */"}, {"sha": "8066fd3f5cc904f33fb8f820a834ef07564a6409", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -1258,7 +1258,7 @@ See RS/6000 and PowerPC Options.\n -mprefetchwt1  -mclflushopt  -mxsavec  -mxsaves @gol\n -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop @gol\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp  -mmpx  @gol\n--mmwaitx  -mclzero  -mpku  -mthreads -mgfni  -mvaes  @gol\n+-mmwaitx  -mclzero  -mpku  -mthreads -mgfni  -mvaes  -mwaitpkg @gol\n -mshstk -mforce-indirect-call -mavx512vbmi2 @gol\n -mvpclmulqdq -mavx512bitalg -mmovdiri -mmovdir64b -mavx512vpopcntdq @gol\n -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n@@ -27246,6 +27246,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mvaes\n @opindex mvaes\n @need 200\n+@itemx -mwaitpkg\n+@opindex -mwaitpkg\n+@need 200\n @itemx -mvpclmulqdq\n @opindex mvpclmulqdq\n @need 200\n@@ -27263,7 +27266,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n-AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, BMI, BMI2, VAES,\n+AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, BMI, BMI2, VAES, WAITPKG,\n FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MPX, MWAITX, PKU, IBT, SHSTK, AVX512VBMI2,\n GFNI, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B,\n AVX512VPOPCNTDQ3DNow!@: or enhanced 3DNow!@: extended instruction sets."}, {"sha": "bc367196b1074c118510b64f3fe325c943435682", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -1,3 +1,8 @@\n+2018-05-11  Sebastian Peryt  <sebastian.peryt@intel.com>\n+\n+\t* gcc.target/i386/tpause-1.c: New test.\n+\t* gcc.target/i386/umonitor-1.c: New test.\n+\n 2018-05-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/85696"}, {"sha": "6b0d39344027b1c6fa247256515c7689b87b9df9", "filename": "gcc/testsuite/gcc.target/i386/tpause-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftpause-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftpause-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ftpause-1.c?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mwaitpkg\" } */\n+/* { dg-final { scan-assembler-times \"tpause\\[ \\\\t\\]+\\[^\\{\\n\\]*%\" 3 } } */\n+/* { dg-final { scan-assembler-times \"setc\\[ \\\\t\\]+\\[^\\{\\n\\]*%\" 3 } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned char\n+foo (unsigned x, unsigned y)\n+{\n+   return _tpause (x, y);\n+}\n+\n+unsigned char\n+bar (unsigned x, unsigned long long y)\n+{\n+   return _tpause (x, y);\n+}\n+\n+unsigned char\n+foo1 (void)\n+{\n+   return _tpause (0, 0);\n+}"}, {"sha": "d58e1e8d9b1a947294e5fea5611a538f470b0e93", "filename": "gcc/testsuite/gcc.target/i386/umonitor-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fumonitor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55f31ed10fd38c50560114c47698ed0aa2b302c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fumonitor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fumonitor-1.c?ref=55f31ed10fd38c50560114c47698ed0aa2b302c8", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mwaitpkg\" } */\n+/* { dg-final { scan-assembler-times \"umonitor\\[ \\\\t\\]+\\[^\\{\\n\\]*%\"  3 } } */\n+/* { dg-final { scan-assembler-times \"umwait\"  3 } } */\n+/* { dg-final { scan-assembler-times \"setc\\[ \\\\t\\]+\\[^\\{\\n\\]*%\" 3 } } */\n+\n+/* Verify that they work in both 32bit and 64bit.  */\n+\n+#include <x86intrin.h>\n+\n+unsigned char\n+foo (void *p, unsigned x, unsigned y)\n+{\n+   _umonitor (p);\n+   return _umwait (x, y);\n+}\n+\n+unsigned char\n+bar (void *p, unsigned x, unsigned long long y)\n+{\n+   _umonitor (p);\n+   return _umwait (x, y);\n+}\n+\n+unsigned char\n+foo1 (char *p)\n+{\n+   _umonitor (p);\n+   return _umwait (0, 0);\n+}"}]}