{"sha": "7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RiZDNkZTllNTBmNGM3MjYxOWYxYWI1ZGZjYjc3Y2JkODI2OWE2ZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-01-20T15:49:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:49:09Z"}, "message": "gnat_rm.texi (Allow_Integer_Address): Remove note about not allowed if address is non-private, no longer true.\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi (Allow_Integer_Address): Remove note about not\n\tallowed if address is non-private, no longer true.\n\t* sem_prag.adb (Analyze_Pragma, case Allow_Integer_Address):\n\tRemove check for address being private, causes difficulty when\n\tpragma used in gnat.adc file and is not needed, since we guard\n\tthis in Address_Integer_Convert_OK.\n\t* exp_ch7.adb: Minor reformatting.\n\t* sem_ch4.adb: Handle operator operands in Allow_Integer_Address mode.\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb (Apply_Range_Check): Remove gnatprove special\n\tcasing of exponentiation.\n\t* sem_res.adb (Resolve_Op_Expon): Apply range check to right\n\toperand for integer case to check range against Natural.\n\nFrom-SVN: r206833", "tree": {"sha": "c8c46af2f929af435dfa8c412687eb407790b1dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8c46af2f929af435dfa8c412687eb407790b1dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/comments", "author": null, "committer": null, "parents": [{"sha": "061828e3c2ece9a7327081c4f8e0283587175ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/061828e3c2ece9a7327081c4f8e0283587175ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/061828e3c2ece9a7327081c4f8e0283587175ff7"}], "stats": {"total": 78, "additions": 47, "deletions": 31}, "files": [{"sha": "395cc96cfbb843ca91f7d28c088b1b5e8e625427", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "patch": "@@ -1,3 +1,21 @@\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi (Allow_Integer_Address): Remove note about not\n+\tallowed if address is non-private, no longer true.\n+\t* sem_prag.adb (Analyze_Pragma, case Allow_Integer_Address):\n+\tRemove check for address being private, causes difficulty when\n+\tpragma used in gnat.adc file and is not needed, since we guard\n+\tthis in Address_Integer_Convert_OK.\n+\t* exp_ch7.adb: Minor reformatting.\n+\t* sem_ch4.adb: Handle operator operands in Allow_Integer_Address mode.\n+\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb (Apply_Range_Check): Remove gnatprove special\n+\tcasing of exponentiation.\n+\t* sem_res.adb (Resolve_Op_Expon): Apply range check to right\n+\toperand for integer case to check range against Natural.\n+\n 2014-01-20  Robert Dewar  <dewar@adacore.com>\n \n \t* s-tataat.adb: Minor reformatting."}, {"sha": "1e4cff810c56b7e0bf6ed6f336b2de00dda14eed", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "patch": "@@ -2797,19 +2797,6 @@ package body Checks is\n          return;\n       end if;\n \n-      --  Ensure that the exponent is a natural. The flag is set only in formal\n-      --  verification mode as the expander takes care of this check and there\n-      --  is no expansion phase in GNATprove_Mode.\n-\n-      --  Doesn't seem right to do this unconditionally, we should check the\n-      --  range of the exponent operand. If we do that, it seems like we should\n-      --  then set the flag unconditionally and have the expander check the\n-      --  flag to see whether to generate a check ???\n-\n-      if GNATprove_Mode and then Nkind (Expr) = N_Op_Expon then\n-         Set_Do_Range_Check (Right_Opnd (Expr));\n-      end if;\n-\n       Is_Unconstrained_Subscr_Ref :=\n         Is_Subscr_Ref and then not Is_Constrained (Arr_Typ);\n "}, {"sha": "9739cad531325737a16440fecfc82c3581bef9af", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "patch": "@@ -7987,7 +7987,7 @@ package body Exp_Ch7 is\n       --  signalling the decision outcome occurs before the cleanup actions.\n \n       if Opt.Suppress_Control_Flow_Optimizations\n-           and then Is_Boolean_Type (Typ)\n+        and then Is_Boolean_Type (Typ)\n       then\n          Expr :=\n            Make_If_Expression (Loc,"}, {"sha": "64bfce13f8d4fcf6ba0c30bdd6fb2236681b0582", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "patch": "@@ -1231,9 +1231,9 @@ pragma Allow_Integer_Address;\n @end smallexample\n \n @noindent\n-This configuration pragma is allowed only\n-if type @code{System.Address} is a private type,\n-which is true in most versions of GNAT. which means that integer values,\n+In almost all versions of GNAT, @code{System.Address} is a private\n+type in accordance with the implementation advice in the RM. This\n+means that integer values,\n in particular integer literals, are not allowed as address values.\n If the configuration pragma\n @code{Allow_Integer_Address} is given, then integer expressions may\n@@ -1263,12 +1263,6 @@ package AddrAsInt is\n end AddrAsInt;\n @end smallexample\n \n-@noindent\n-Note that these automatic conversions do not apply to expressions used\n-as subprogram arguments, because in general overloading can take place,\n-so that the required type is not fixed by the context. If necessary\n-adjust the type of the subprogram argument, e.g. by adding a conversion.\n-\n @node Pragma Annotate\n @unnumberedsec Pragma Annotate\n @findex Annotate"}, {"sha": "bf4e31774c406b4132e5340786c02416ab6da3eb", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "patch": "@@ -6367,16 +6367,33 @@ package body Sem_Ch4 is\n                                N_Op_Rem,\n                                N_Op_Subtract)\n             then\n+               --  If Allow_Integer_Address is active, check whether the\n+               --  operation becomes legal after converting an operand.\n+\n                if Is_Numeric_Type (Etype (L))\n                  and then not Is_Numeric_Type (Etype (R))\n                then\n-                  Resolve (R, Etype (L));\n+                  if Address_Integer_Convert_OK (Etype (R), Etype (L)) then\n+                     Rewrite (R,\n+                       Unchecked_Convert_To (Etype (L), Relocate_Node (R)));\n+                     Analyze_Arithmetic_Op (N);\n+\n+                  else\n+                     Resolve (R, Etype (L));\n+                  end if;\n                   return;\n \n                elsif Is_Numeric_Type (Etype (R))\n                  and then not Is_Numeric_Type (Etype (L))\n                then\n-                  Resolve (L, Etype (R));\n+                  if Address_Integer_Convert_OK (Etype (L), Etype (R)) then\n+                     Rewrite (L,\n+                       Unchecked_Convert_To (Etype (R), Relocate_Node (L)));\n+                     Analyze_Arithmetic_Op (N);\n+\n+                  else\n+                     Resolve (L, Etype (R));\n+                  end if;\n                   return;\n                end if;\n "}, {"sha": "7520856e3927c41d021019df56d44f2083f23f34", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "patch": "@@ -9853,12 +9853,6 @@ package body Sem_Prag is\n          when Pragma_Allow_Integer_Address =>\n             GNAT_Pragma;\n             Check_Arg_Count (0);\n-\n-            if not Is_Private_Type (RTE (RE_Address)) then\n-               Error_Pragma\n-                 (\"pragma% allowed only if Address is a private type\");\n-            end if;\n-\n             Opt.Allow_Integer_Address := True;\n \n          --------------"}, {"sha": "e9d62a48188bd343c6646e01243299430f8e6fdd", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7dbd3de9e50f4c72619f1ab5dfcb77cbd8269a6d", "patch": "@@ -8393,6 +8393,12 @@ package body Sem_Res is\n       Resolve (Left_Opnd (N), B_Typ);\n       Resolve (Right_Opnd (N), Standard_Integer);\n \n+      --  For integer types, right argument must be in Natural range\n+\n+      if Is_Integer_Type (Typ) then\n+         Apply_Scalar_Range_Check (Right_Opnd (N), Standard_Natural);\n+      end if;\n+\n       Check_Unset_Reference (Left_Opnd  (N));\n       Check_Unset_Reference (Right_Opnd (N));\n "}]}