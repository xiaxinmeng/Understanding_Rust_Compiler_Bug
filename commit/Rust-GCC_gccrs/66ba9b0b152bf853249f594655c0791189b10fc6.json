{"sha": "66ba9b0b152bf853249f594655c0791189b10fc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiYTliMGIxNTJiZjg1MzI0OWY1OTQ2NTVjMDc5MTE4OWIxMGZjNg==", "commit": {"author": {"name": "Shujing Zhao", "email": "pearly.zhao@oracle.com", "date": "2009-05-05T10:06:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-05-05T10:06:52Z"}, "message": "tree.h (strip_float_extensions): Remove duplicate declaration.\n\n2009-05-05  Shujing Zhao  <pearly.zhao@oracle.com>\n\n\t* tree.h (strip_float_extensions): Remove duplicate declaration.\n      \t(build_low_bits_mask, debug_fold_checksum, expand_function_end,\n      \texpand_function_start, stack_protect_prologue, stack_protect_epilogue,\n      \tblock_ultimate_origin): Rearrange the declarations line to match the\n      \tcomment that indicates the .c file which the functions are defined.\n      \t(dwarf2out_*, set_decl_rtl): Add comment.\n      \t(get_base_address): Adjust comment.\n      \t(change_decl_assembler_name, maybe_fold_*, build_addr): Rearrange the\n      \tdeclarations line and add comment.\n      \t(is_builtin_name): Add blank after function name, for clarity.\n\nFrom-SVN: r147122", "tree": {"sha": "6b46d92ee46960eaa0701b14acb5b63050c1a788", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b46d92ee46960eaa0701b14acb5b63050c1a788"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66ba9b0b152bf853249f594655c0791189b10fc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ba9b0b152bf853249f594655c0791189b10fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66ba9b0b152bf853249f594655c0791189b10fc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ba9b0b152bf853249f594655c0791189b10fc6/comments", "author": null, "committer": null, "parents": [{"sha": "5bbca03966e06a79f5dd06166f6998369256efa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bbca03966e06a79f5dd06166f6998369256efa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bbca03966e06a79f5dd06166f6998369256efa9"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "365176bc4dcb671edf5b6c474a6d7931c5696e42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ba9b0b152bf853249f594655c0791189b10fc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ba9b0b152bf853249f594655c0791189b10fc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66ba9b0b152bf853249f594655c0791189b10fc6", "patch": "@@ -1,3 +1,16 @@\n+2009-05-05  Shujing Zhao  <pearly.zhao@oracle.com>\n+\n+\t* tree.h (strip_float_extensions): Remove duplicate declaration.\n+      \t(build_low_bits_mask, debug_fold_checksum, expand_function_end,\n+      \texpand_function_start, stack_protect_prologue, stack_protect_epilogue,\n+      \tblock_ultimate_origin): Rearrange the declarations line to match the\n+      \tcomment that indicates the .c file which the functions are defined.\n+      \t(dwarf2out_*, set_decl_rtl): Add comment.\n+      \t(get_base_address): Adjust comment.\n+      \t(change_decl_assembler_name, maybe_fold_*, build_addr): Rearrange the\n+      \tdeclarations line and add comment.\n+      \t(is_builtin_name): Add blank after function name, for clarity.\n+\n 2009-05-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* attribs.c (decl_attributes): Use %qE for identifiers in"}, {"sha": "9f820122e12679520e15471a0e3c25316dff1ef4", "filename": "gcc/tree.h", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ba9b0b152bf853249f594655c0791189b10fc6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ba9b0b152bf853249f594655c0791189b10fc6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=66ba9b0b152bf853249f594655c0791189b10fc6", "patch": "@@ -4611,7 +4611,6 @@ extern unsigned crc32_string (unsigned, const char *);\n extern void clean_symbol_name (char *);\n extern tree get_file_function_name (const char *);\n extern tree get_callee_fndecl (const_tree);\n-extern void change_decl_assembler_name (tree, tree);\n extern int type_num_arguments (const_tree);\n extern bool associative_tree_code (enum tree_code);\n extern bool commutative_tree_code (enum tree_code);\n@@ -4626,6 +4625,10 @@ extern const char *get_name (tree);\n extern bool stdarg_p (tree);\n extern bool prototype_p (tree);\n extern bool auto_var_in_fn_p (const_tree, const_tree);\n+extern tree build_low_bits_mask (tree, unsigned);\n+\f\n+/* In cgraph.c */\n+extern void change_decl_assembler_name (tree, tree);\n \f\n /* In gimplify.c */\n extern tree unshare_expr (tree);\n@@ -4686,9 +4689,6 @@ extern void fold_defer_overflow_warnings (void);\n extern void fold_undefer_overflow_warnings (bool, const_gimple, int);\n extern void fold_undefer_and_ignore_overflow_warnings (void);\n extern bool fold_deferring_overflow_warnings_p (void);\n-extern tree maybe_fold_offset_to_reference (tree, tree, tree);\n-extern tree maybe_fold_offset_to_address (tree, tree, tree);\n-extern tree maybe_fold_stmt_addition (tree, tree, tree);\n \n extern tree force_fit_type_double (tree, unsigned HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t   int, bool);\n@@ -4751,7 +4751,6 @@ extern tree build_fold_addr_expr_with_type (tree, tree);\n extern tree build_fold_indirect_ref (tree);\n extern tree fold_indirect_ref (tree);\n extern tree constant_boolean_node (int, tree);\n-extern tree build_low_bits_mask (tree, unsigned);\n extern tree div_if_zero_remainder (enum tree_code, const_tree, const_tree);\n \n extern bool tree_swap_operands_p (const_tree, const_tree, bool);\n@@ -4778,6 +4777,7 @@ extern bool tree_expr_nonzero_warnv_p (tree, bool *);\n extern bool fold_real_zero_addition_p (const_tree, const_tree, int);\n extern tree combine_comparisons (enum tree_code, enum tree_code,\n \t\t\t\t enum tree_code, tree, tree, tree);\n+extern void debug_fold_checksum (const_tree);\n \n /* Return nonzero if CODE is a tree code that represents a truth value.  */\n static inline bool\n@@ -4805,18 +4805,16 @@ extern bool fold_builtin_next_arg (tree, bool);\n extern enum built_in_function builtin_mathfn_code (const_tree);\n extern tree build_function_call_expr (tree, tree);\n extern tree fold_builtin_call_array (tree, tree, int, tree *);\n-extern void debug_fold_checksum (const_tree);\n extern tree build_call_expr (tree, int, ...);\n extern tree mathfn_built_in (tree, enum built_in_function fn);\n-extern tree strip_float_extensions (tree);\n extern tree c_strlen (tree, int);\n extern tree std_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n extern tree build_va_arg_indirect_ref (tree);\n extern tree build_string_literal (int, const char *);\n extern bool validate_arglist (const_tree, ...);\n extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n extern int get_pointer_alignment (tree, unsigned int);\n-extern bool is_builtin_name(const char*);\n+extern bool is_builtin_name (const char*);\n extern int get_object_alignment (tree, unsigned int, unsigned int);\n extern tree fold_call_stmt (gimple, bool);\n extern tree gimple_fold_builtin_snprintf_chk (gimple, tree, enum built_in_function);\n@@ -4847,10 +4845,6 @@ extern tree type_hash_lookup (unsigned int, tree);\n extern void type_hash_add (unsigned int, tree);\n extern int simple_cst_list_equal (const_tree, const_tree);\n extern void dump_tree_statistics (void);\n-extern void expand_function_end (void);\n-extern void expand_function_start (tree);\n-extern void stack_protect_prologue (void);\n-extern void stack_protect_epilogue (void);\n extern void recompute_tree_invariant_for_addr_expr (tree);\n extern bool needs_to_live_in_memory (const_tree);\n extern tree reconstruct_complex_type (tree, tree);\n@@ -4865,7 +4859,6 @@ extern void build_common_builtin_nodes (void);\n extern tree build_nonstandard_integer_type (unsigned HOST_WIDE_INT, int);\n extern tree build_range_type (tree, tree, tree);\n extern HOST_WIDE_INT int_cst_value (const_tree);\n-extern tree build_addr (tree, tree);\n \n extern bool fields_compatible_p (const_tree, const_tree);\n extern tree find_compatible_field (tree, tree);\n@@ -4876,8 +4869,17 @@ extern tree *tree_block (tree);\n extern location_t *block_nonartificial_location (tree);\n extern location_t tree_nonartificial_location (tree);\n \n+extern tree block_ultimate_origin (const_tree);\n+\n+/* In tree-nested.c */\n+extern tree build_addr (tree, tree);\n+\n /* In function.c */\n extern void expand_main_function (void);\n+extern void expand_function_end (void);\n+extern void expand_function_start (tree);\n+extern void stack_protect_prologue (void);\n+extern void stack_protect_epilogue (void);\n extern void init_dummy_function_start (void);\n extern void expand_dummy_function_end (void);\n extern unsigned int init_function_for_compilation (void);\n@@ -4956,7 +4958,6 @@ extern bool gimple_alloca_call_p (const_gimple);\n extern bool alloca_call_p (const_tree);\n extern bool must_pass_in_stack_var_size (enum machine_mode, const_tree);\n extern bool must_pass_in_stack_var_size_or_pad (enum machine_mode, const_tree);\n-extern tree block_ultimate_origin (const_tree);\n \n /* In attribs.c.  */\n \n@@ -5012,6 +5013,7 @@ extern tree tree_overlaps_hard_reg_set (tree, HARD_REG_SET *);\n #endif\n \n \f\n+/* In dwarf2out.c */\n /* Interface of the DWARF2 unwind info support.  */\n \n /* Generate a new label for the CFI info to refer to.  */\n@@ -5071,6 +5073,7 @@ extern tree walk_tree_without_duplicates_1 (tree*, walk_tree_fn, void*,\n #define walk_tree_without_duplicates(a,b,c) \\\n \twalk_tree_without_duplicates_1 (a, b, c, NULL)\n \n+/* In emit-rtl.c */\n /* Assign the RTX to declaration.  */\n \n extern void set_decl_rtl (tree, rtx);\n@@ -5109,7 +5112,7 @@ extern int tree_node_sizes[];\n    restricted to creating gimple expressions.  */\n extern bool in_gimple_form;\n \n-/* In tree-gimple.c.  */\n+/* In gimple.c.  */\n extern tree get_base_address (tree t);\n \n /* In tree-vectorizer.c.  */\n@@ -5161,6 +5164,11 @@ struct GTY(()) tree_priority_map {\n #define tree_priority_map_hash tree_map_base_hash\n #define tree_priority_map_marked_p tree_map_base_marked_p\n \n+/* In tree-ssa-ccp.c */\n+extern tree maybe_fold_offset_to_reference (tree, tree, tree);\n+extern tree maybe_fold_offset_to_address (tree, tree, tree);\n+extern tree maybe_fold_stmt_addition (tree, tree, tree);\n+\n /* In tree-ssa-address.c.  */\n extern tree tree_mem_ref_addr (tree, tree);\n extern void copy_mem_ref_info (tree, tree);"}]}