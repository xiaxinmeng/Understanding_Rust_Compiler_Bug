{"sha": "0090cacae6e9f0d3649dff9e428ea92a10d69cfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA5MGNhY2FlNmU5ZjBkMzY0OWRmZjllNDI4ZWE5MmExMGQ2OWNmYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-07-15T19:16:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-07-15T19:16:29Z"}, "message": "re PR c++/60848 (Crash while experimenting with c++-0x initializer lists)\n\n\tPR c++/60848\n\tPR c++/61723\n\t* call.c (is_std_init_list): Don't check CLASSTYPE_TEMPLATE_INFO.\n\t* class.c (finish_struct): Reject invalid definition of\n\tstd::initializer_list.\n\nFrom-SVN: r212574", "tree": {"sha": "4d907344ad2b91570c02586a01550c3cf0448eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d907344ad2b91570c02586a01550c3cf0448eb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0090cacae6e9f0d3649dff9e428ea92a10d69cfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0090cacae6e9f0d3649dff9e428ea92a10d69cfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0090cacae6e9f0d3649dff9e428ea92a10d69cfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e27989c4f4ff56ea84f94135cfc8f574d66459bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27989c4f4ff56ea84f94135cfc8f574d66459bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27989c4f4ff56ea84f94135cfc8f574d66459bb"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "1d5b7d6423c40dc86aa8d22481de746fb79b5b7e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0090cacae6e9f0d3649dff9e428ea92a10d69cfa", "patch": "@@ -1,3 +1,11 @@\n+2014-07-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/60848\n+\tPR c++/61723\n+\t* call.c (is_std_init_list): Don't check CLASSTYPE_TEMPLATE_INFO.\n+\t* class.c (finish_struct): Reject invalid definition of\n+\tstd::initializer_list.\n+\n 2014-07-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* call.c (convert_like_real): Call print_z_candidate and inform only"}, {"sha": "ea8cb5f78c896787af3fc0a620800b2a628116d4", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=0090cacae6e9f0d3649dff9e428ea92a10d69cfa", "patch": "@@ -9701,7 +9701,6 @@ is_std_init_list (tree type)\n   type = TYPE_MAIN_VARIANT (type);\n   return (CLASS_TYPE_P (type)\n \t  && CP_TYPE_CONTEXT (type) == std_node\n-\t  && CLASSTYPE_TEMPLATE_INFO (type)\n \t  && strcmp (TYPE_NAME_STRING (type), \"initializer_list\") == 0);\n }\n "}, {"sha": "e4523c7b1f686fa4b4286a0b83433ea2fc755338", "filename": "gcc/cp/class.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0090cacae6e9f0d3649dff9e428ea92a10d69cfa", "patch": "@@ -6695,6 +6695,28 @@ finish_struct (tree t, tree attributes)\n   else\n     finish_struct_1 (t);\n \n+  if (is_std_init_list (t))\n+    {\n+      /* People keep complaining that the compiler crashes on an invalid\n+\t definition of initializer_list, so I guess we should explicitly\n+\t reject it.  What the compiler internals care about is that it's a\n+\t template and has a pointer field followed by an integer field.  */\n+      bool ok = false;\n+      if (processing_template_decl)\n+\t{\n+\t  tree f = next_initializable_field (TYPE_FIELDS (t));\n+\t  if (f && TREE_CODE (TREE_TYPE (f)) == POINTER_TYPE)\n+\t    {\n+\t      f = next_initializable_field (DECL_CHAIN (f));\n+\t      if (f && TREE_CODE (TREE_TYPE (f)) == INTEGER_TYPE)\n+\t\tok = true;\n+\t    }\n+\t}\n+      if (!ok)\n+\tfatal_error (\"definition of std::initializer_list does not match \"\n+\t\t     \"#include <initializer_list>\");\n+    }\n+\n   input_location = saved_loc;\n \n   TYPE_BEING_DEFINED (t) = 0;"}, {"sha": "fa4fb617b33e59fb33ea71ab8fca7ec68449f137", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist85.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist85.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist85.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist85.C?ref=0090cacae6e9f0d3649dff9e428ea92a10d69cfa", "patch": "@@ -3,12 +3,14 @@\n \n namespace std\n {\n-  struct initializer_list {};\n+  struct initializer_list {};\t// { dg-message \"initializer_list\" }\n }\n \n void foo(std::initializer_list &);\n \n void f()\n {\n-  foo({1, 2});\t\t\t// { dg-error \"\" }\n+  foo({1, 2});\n }\n+\n+// { dg-prune-output \"compilation terminated\" }"}, {"sha": "fd7586d27d08bb8787fa252d458fc681ea5bf4ad", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist87.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist87.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0090cacae6e9f0d3649dff9e428ea92a10d69cfa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist87.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist87.C?ref=0090cacae6e9f0d3649dff9e428ea92a10d69cfa", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/61723\n+// { dg-do compile { target c++11 } }\n+\n+namespace std {\n+  template < class > struct initializer_list // { dg-message \"initializer_list\" }\n+  {\n+#if BUG1\n+    int _M_len;\n+#endif\n+    const int *begin ();\n+    const int *end ();\n+  };\n+}\n+\n+struct J\n+{\n+    J (const int &);\n+    template < typename InputIterator > J (InputIterator, InputIterator);\n+    J (std::initializer_list < int >p1):J (p1.begin (), p1.end ()) { }\n+};\n+\n+struct L\n+{\n+    L ():dim (0) { }\n+    J dim;\n+};\n+\n+void\n+fn1 ()\n+{\n+    L spec;\n+    spec.dim = { };\n+}\n+\n+// { dg-prune-output \"compilation terminated\" }"}]}