{"sha": "7a163ec05c76c710d246c56ef8076a2cd38baf32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExNjNlYzA1Yzc2YzcxMGQyNDZjNTZlZjgwNzZhMmNkMzhiYWYzMg==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2002-12-20T03:49:20Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-12-20T03:49:20Z"}, "message": "Makefile.am (ordinary_java_source_files): Add org/xml/sax/helpers/NewInstance.java.\n\n2002-12-19  Anthony Green  <green@redhat.com>\n\n\t* Makefile.am (ordinary_java_source_files): Add\n\torg/xml/sax/helpers/NewInstance.java.\n\t* Makefile.in: Rebuilt.\n\t* org/xml/sax/package.html, org/xml/sax/ext/package.html,\n\torg/xml/sax/helpers/package.html: New files.\n\t* org/xml/sax/*: Upgrade to SAX 2.0.1 release from\n\thttp://www.saxproject.org.\n\nFrom-SVN: r60350", "tree": {"sha": "bc765c016644edf5697556965a00b30ff3ca18f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc765c016644edf5697556965a00b30ff3ca18f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a163ec05c76c710d246c56ef8076a2cd38baf32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a163ec05c76c710d246c56ef8076a2cd38baf32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a163ec05c76c710d246c56ef8076a2cd38baf32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a163ec05c76c710d246c56ef8076a2cd38baf32/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "51d6eed48eace41bef16aa1d4401e0fb081e7d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d6eed48eace41bef16aa1d4401e0fb081e7d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d6eed48eace41bef16aa1d4401e0fb081e7d5d"}], "stats": {"total": 17665, "additions": 9164, "deletions": 8501}, "files": [{"sha": "38db508ee8f472c1fcc63f4ee0f5652b204eb504", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,3 +1,13 @@\n+2002-12-19  Anthony Green  <green@redhat.com>\n+\n+\t* Makefile.am (ordinary_java_source_files): Add\n+\torg/xml/sax/helpers/NewInstance.java.\n+\t* Makefile.in: Rebuilt.\n+\t* org/xml/sax/package.html, org/xml/sax/ext/package.html,\n+\torg/xml/sax/helpers/package.html: New files.\n+\t* org/xml/sax/*: Upgrade to SAX 2.0.1 release from\n+\thttp://www.saxproject.org.\n+\n 2002-12-19  Andrew Haley  <aph@redhat.com>\n \n \t* java/util/natResourceBundle.cc: Include"}, {"sha": "d360acf7b9877d34d69b825a1fcd140b31b31fd8", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -2252,6 +2252,7 @@ org/xml/sax/helpers/AttributesImpl.java \\\n org/xml/sax/helpers/DefaultHandler.java \\\n org/xml/sax/helpers/LocatorImpl.java \\\n org/xml/sax/helpers/NamespaceSupport.java \\\n+org/xml/sax/helpers/NewInstance.java \\\n org/xml/sax/helpers/ParserAdapter.java \\\n org/xml/sax/helpers/ParserFactory.java \\\n org/xml/sax/helpers/XMLFilterImpl.java \\"}, {"sha": "a13769e702e861ef6f541b1d39cc4b63b673e8b2", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -2002,6 +2002,7 @@ org/xml/sax/helpers/AttributesImpl.java \\\n org/xml/sax/helpers/DefaultHandler.java \\\n org/xml/sax/helpers/LocatorImpl.java \\\n org/xml/sax/helpers/NamespaceSupport.java \\\n+org/xml/sax/helpers/NewInstance.java \\\n org/xml/sax/helpers/ParserAdapter.java \\\n org/xml/sax/helpers/ParserFactory.java \\\n org/xml/sax/helpers/XMLFilterImpl.java \\\n@@ -3701,6 +3702,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/org/xml/sax/helpers/DefaultHandler.P \\\n .deps/org/xml/sax/helpers/LocatorImpl.P \\\n .deps/org/xml/sax/helpers/NamespaceSupport.P \\\n+.deps/org/xml/sax/helpers/NewInstance.P \\\n .deps/org/xml/sax/helpers/ParserAdapter.P \\\n .deps/org/xml/sax/helpers/ParserFactory.P \\\n .deps/org/xml/sax/helpers/XMLFilterImpl.P \\"}, {"sha": "b1a647aa16e1911b0f4e201d0e00d2facf7e2f04", "filename": "libjava/org/xml/sax/AttributeList.java", "status": "modified", "additions": 193, "deletions": 191, "changes": 384, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FAttributeList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FAttributeList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FAttributeList.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,191 +1,193 @@\n-// SAX Attribute List Interface.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: AttributeList.java,v 1.1 2000/10/02 02:43:16 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-/**\r\n- * Interface for an element's attribute specifications.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This is the original SAX1 interface for reporting an element's\r\n- * attributes.  Unlike the new {@link org.xml.sax.Attributes Attributes}\r\n- * interface, it does not support Namespace-related information.</p>\r\n- *\r\n- * <p>When an attribute list is supplied as part of a\r\n- * {@link org.xml.sax.DocumentHandler#startElement startElement}\r\n- * event, the list will return valid results only during the\r\n- * scope of the event; once the event handler returns control\r\n- * to the parser, the attribute list is invalid.  To save a\r\n- * persistent copy of the attribute list, use the SAX1\r\n- * {@link org.xml.sax.helpers.AttributeListImpl AttributeListImpl}\r\n- * helper class.</p>\r\n- *\r\n- * <p>An attribute list includes only attributes that have been\r\n- * specified or defaulted: #IMPLIED attributes will not be included.</p>\r\n- *\r\n- * <p>There are two ways for the SAX application to obtain information\r\n- * from the AttributeList.  First, it can iterate through the entire\r\n- * list:</p>\r\n- *\r\n- * <pre>\r\n- * public void startElement (String name, AttributeList atts) {\r\n- *   for (int i = 0; i < atts.getLength(); i++) {\r\n- *     String name = atts.getName(i);\r\n- *     String type = atts.getType(i);\r\n- *     String value = atts.getValue(i);\r\n- *     [...]\r\n- *   }\r\n- * }\r\n- * </pre>\r\n- *\r\n- * <p>(Note that the result of getLength() will be zero if there\r\n- * are no attributes.)\r\n- *\r\n- * <p>As an alternative, the application can request the value or\r\n- * type of specific attributes:</p>\r\n- *\r\n- * <pre>\r\n- * public void startElement (String name, AttributeList atts) {\r\n- *   String identifier = atts.getValue(\"id\");\r\n- *   String label = atts.getValue(\"label\");\r\n- *   [...]\r\n- * }\r\n- * </pre>\r\n- *\r\n- * @deprecated This interface has been replaced by the SAX2\r\n- *             {@link org.xml.sax.Attributes Attributes}\r\n- *             interface, which includes Namespace support.\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.DocumentHandler#startElement startElement\r\n- * @see org.xml.sax.helpers.AttributeListImpl AttributeListImpl\r\n- */\r\n-public interface AttributeList {\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Iteration methods.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-\r\n-    /**\r\n-     * Return the number of attributes in this list.\r\n-     *\r\n-     * <p>The SAX parser may provide attributes in any\r\n-     * arbitrary order, regardless of the order in which they were\r\n-     * declared or specified.  The number of attributes may be\r\n-     * zero.</p>\r\n-     *\r\n-     * @return The number of attributes in the list.  \r\n-     */\r\n-    public abstract int getLength ();\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the name of an attribute in this list (by position).\r\n-     *\r\n-     * <p>The names must be unique: the SAX parser shall not include the\r\n-     * same attribute twice.  Attributes without values (those declared\r\n-     * #IMPLIED without a value specified in the start tag) will be\r\n-     * omitted from the list.</p>\r\n-     *\r\n-     * <p>If the attribute name has a namespace prefix, the prefix\r\n-     * will still be attached.</p>\r\n-     *\r\n-     * @param i The index of the attribute in the list (starting at 0).\r\n-     * @return The name of the indexed attribute, or null\r\n-     *         if the index is out of range.\r\n-     * @see #getLength \r\n-     */\r\n-    public abstract String getName (int i);\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the type of an attribute in the list (by position).\r\n-     *\r\n-     * <p>The attribute type is one of the strings \"CDATA\", \"ID\",\r\n-     * \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\",\r\n-     * or \"NOTATION\" (always in upper case).</p>\r\n-     *\r\n-     * <p>If the parser has not read a declaration for the attribute,\r\n-     * or if the parser does not report attribute types, then it must\r\n-     * return the value \"CDATA\" as stated in the XML 1.0 Recommentation\r\n-     * (clause 3.3.3, \"Attribute-Value Normalization\").</p>\r\n-     *\r\n-     * <p>For an enumerated attribute that is not a notation, the\r\n-     * parser will report the type as \"NMTOKEN\".</p>\r\n-     *\r\n-     * @param i The index of the attribute in the list (starting at 0).\r\n-     * @return The attribute type as a string, or\r\n-     *         null if the index is out of range.\r\n-     * @see #getLength \r\n-     * @see #getType(java.lang.String)\r\n-     */\r\n-    public abstract String getType (int i);\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the value of an attribute in the list (by position).\r\n-     *\r\n-     * <p>If the attribute value is a list of tokens (IDREFS,\r\n-     * ENTITIES, or NMTOKENS), the tokens will be concatenated\r\n-     * into a single string separated by whitespace.</p>\r\n-     *\r\n-     * @param i The index of the attribute in the list (starting at 0).\r\n-     * @return The attribute value as a string, or\r\n-     *         null if the index is out of range.\r\n-     * @see #getLength\r\n-     * @see #getValue(java.lang.String)\r\n-     */\r\n-    public abstract String getValue (int i);\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Lookup methods.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the type of an attribute in the list (by name).\r\n-     *\r\n-     * <p>The return value is the same as the return value for\r\n-     * getType(int).</p>\r\n-     *\r\n-     * <p>If the attribute name has a namespace prefix in the document,\r\n-     * the application must include the prefix here.</p>\r\n-     *\r\n-     * @param name The name of the attribute.\r\n-     * @return The attribute type as a string, or null if no\r\n-     *         such attribute exists.\r\n-     * @see #getType(int)\r\n-     */\r\n-    public abstract String getType (String name);\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the value of an attribute in the list (by name).\r\n-     *\r\n-     * <p>The return value is the same as the return value for\r\n-     * getValue(int).</p>\r\n-     *\r\n-     * <p>If the attribute name has a namespace prefix in the document,\r\n-     * the application must include the prefix here.</p>\r\n-     *\r\n-     * @param i The index of the attribute in the list.\r\n-     * @return The attribute value as a string, or null if\r\n-     *         no such attribute exists.\r\n-     * @see #getValue(int)\r\n-     */\r\n-    public abstract String getValue (String name);\r\n-    \r\n-}\r\n-\r\n-// end of AttributeList.java\r\n+// SAX Attribute List Interface.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: AttributeList.java,v 1.3.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+/**\n+ * Interface for an element's attribute specifications.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This is the original SAX1 interface for reporting an element's\n+ * attributes.  Unlike the new {@link org.xml.sax.Attributes Attributes}\n+ * interface, it does not support Namespace-related information.</p>\n+ *\n+ * <p>When an attribute list is supplied as part of a\n+ * {@link org.xml.sax.DocumentHandler#startElement startElement}\n+ * event, the list will return valid results only during the\n+ * scope of the event; once the event handler returns control\n+ * to the parser, the attribute list is invalid.  To save a\n+ * persistent copy of the attribute list, use the SAX1\n+ * {@link org.xml.sax.helpers.AttributeListImpl AttributeListImpl}\n+ * helper class.</p>\n+ *\n+ * <p>An attribute list includes only attributes that have been\n+ * specified or defaulted: #IMPLIED attributes will not be included.</p>\n+ *\n+ * <p>There are two ways for the SAX application to obtain information\n+ * from the AttributeList.  First, it can iterate through the entire\n+ * list:</p>\n+ *\n+ * <pre>\n+ * public void startElement (String name, AttributeList atts) {\n+ *   for (int i = 0; i < atts.getLength(); i++) {\n+ *     String name = atts.getName(i);\n+ *     String type = atts.getType(i);\n+ *     String value = atts.getValue(i);\n+ *     [...]\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * <p>(Note that the result of getLength() will be zero if there\n+ * are no attributes.)\n+ *\n+ * <p>As an alternative, the application can request the value or\n+ * type of specific attributes:</p>\n+ *\n+ * <pre>\n+ * public void startElement (String name, AttributeList atts) {\n+ *   String identifier = atts.getValue(\"id\");\n+ *   String label = atts.getValue(\"label\");\n+ *   [...]\n+ * }\n+ * </pre>\n+ *\n+ * @deprecated This interface has been replaced by the SAX2\n+ *             {@link org.xml.sax.Attributes Attributes}\n+ *             interface, which includes Namespace support.\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.DocumentHandler#startElement startElement\n+ * @see org.xml.sax.helpers.AttributeListImpl AttributeListImpl\n+ */\n+public interface AttributeList {\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Iteration methods.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+\n+    /**\n+     * Return the number of attributes in this list.\n+     *\n+     * <p>The SAX parser may provide attributes in any\n+     * arbitrary order, regardless of the order in which they were\n+     * declared or specified.  The number of attributes may be\n+     * zero.</p>\n+     *\n+     * @return The number of attributes in the list.  \n+     */\n+    public abstract int getLength ();\n+    \n+    \n+    /**\n+     * Return the name of an attribute in this list (by position).\n+     *\n+     * <p>The names must be unique: the SAX parser shall not include the\n+     * same attribute twice.  Attributes without values (those declared\n+     * #IMPLIED without a value specified in the start tag) will be\n+     * omitted from the list.</p>\n+     *\n+     * <p>If the attribute name has a namespace prefix, the prefix\n+     * will still be attached.</p>\n+     *\n+     * @param i The index of the attribute in the list (starting at 0).\n+     * @return The name of the indexed attribute, or null\n+     *         if the index is out of range.\n+     * @see #getLength \n+     */\n+    public abstract String getName (int i);\n+    \n+    \n+    /**\n+     * Return the type of an attribute in the list (by position).\n+     *\n+     * <p>The attribute type is one of the strings \"CDATA\", \"ID\",\n+     * \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\",\n+     * or \"NOTATION\" (always in upper case).</p>\n+     *\n+     * <p>If the parser has not read a declaration for the attribute,\n+     * or if the parser does not report attribute types, then it must\n+     * return the value \"CDATA\" as stated in the XML 1.0 Recommentation\n+     * (clause 3.3.3, \"Attribute-Value Normalization\").</p>\n+     *\n+     * <p>For an enumerated attribute that is not a notation, the\n+     * parser will report the type as \"NMTOKEN\".</p>\n+     *\n+     * @param i The index of the attribute in the list (starting at 0).\n+     * @return The attribute type as a string, or\n+     *         null if the index is out of range.\n+     * @see #getLength \n+     * @see #getType(java.lang.String)\n+     */\n+    public abstract String getType (int i);\n+    \n+    \n+    /**\n+     * Return the value of an attribute in the list (by position).\n+     *\n+     * <p>If the attribute value is a list of tokens (IDREFS,\n+     * ENTITIES, or NMTOKENS), the tokens will be concatenated\n+     * into a single string separated by whitespace.</p>\n+     *\n+     * @param i The index of the attribute in the list (starting at 0).\n+     * @return The attribute value as a string, or\n+     *         null if the index is out of range.\n+     * @see #getLength\n+     * @see #getValue(java.lang.String)\n+     */\n+    public abstract String getValue (int i);\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Lookup methods.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Return the type of an attribute in the list (by name).\n+     *\n+     * <p>The return value is the same as the return value for\n+     * getType(int).</p>\n+     *\n+     * <p>If the attribute name has a namespace prefix in the document,\n+     * the application must include the prefix here.</p>\n+     *\n+     * @param name The name of the attribute.\n+     * @return The attribute type as a string, or null if no\n+     *         such attribute exists.\n+     * @see #getType(int)\n+     */\n+    public abstract String getType (String name);\n+    \n+    \n+    /**\n+     * Return the value of an attribute in the list (by name).\n+     *\n+     * <p>The return value is the same as the return value for\n+     * getValue(int).</p>\n+     *\n+     * <p>If the attribute name has a namespace prefix in the document,\n+     * the application must include the prefix here.</p>\n+     *\n+     * @param i The index of the attribute in the list.\n+     * @return The attribute value as a string, or null if\n+     *         no such attribute exists.\n+     * @see #getValue(int)\n+     */\n+    public abstract String getValue (String name);\n+    \n+}\n+\n+// end of AttributeList.java"}, {"sha": "251fe206a00d175ffd97de9c4d381cda861e9e71", "filename": "libjava/org/xml/sax/Attributes.java", "status": "modified", "additions": 252, "deletions": 243, "changes": 495, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FAttributes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FAttributes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FAttributes.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,243 +1,252 @@\n-// Attributes.java - attribute list with Namespace support\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the public domain.\r\n-\r\n-// $Id: Attributes.java,v 1.1 2000/10/02 02:43:16 sboag Exp $\r\n-\r\n-\r\n-package org.xml.sax;\r\n-\r\n-\r\n-/**\r\n- * Interface for a list of XML attributes.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This interface allows access to a list of attributes in\r\n- * three different ways:</p>\r\n- *\r\n- * <ol>\r\n- * <li>by attribute index;</li>\r\n- * <li>by Namespace-qualified name; or</li>\r\n- * <li>by qualified (prefixed) name.</li>\r\n- * </ol>\r\n- *\r\n- * <p>The list will not contain attributes that were declared\r\n- * #IMPLIED but not specified in the start tag.  It will also not\r\n- * contain attributes used as Namespace declarations (xmlns*) unless\r\n- * the <code>http://xml.org/sax/features/namespace-prefixes</code> \r\n- * feature is set to <var>true</var> (it is <var>false</var> by \r\n- * default).</p>\r\n- *\r\n- * <p>If the namespace-prefixes feature (see above) is <var>false</var>, \r\n- * access by qualified name may not be available; if the \r\n- * <code>http://xml.org/sax/features/namespaces</code>\r\n- * feature is <var>false</var>, access by Namespace-qualified names \r\n- * may not be available.</p>\r\n- *\r\n- * <p>This interface replaces the now-deprecated SAX1 {@link\r\n- * org.xml.sax.AttributeList AttributeList} interface, which does not \r\n- * contain Namespace support.  In addition to Namespace support, it \r\n- * adds the <var>getIndex</var> methods (below).</p>\r\n- *\r\n- * <p>The order of attributes in the list is unspecified, and will\r\n- * vary from implementation to implementation.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.helpers.AttributeListImpl\r\n- */\r\n-public interface Attributes\r\n-{\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Indexed access.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Return the number of attributes in the list.\r\n-     *\r\n-     * <p>Once you know the number of attributes, you can iterate\r\n-     * through the list.</p>\r\n-     *\r\n-     * @return The number of attributes in the list.\r\n-     * @see #getURI(int)\r\n-     * @see #getLocalName(int)\r\n-     * @see #getQName(int)\r\n-     * @see #getType(int)\r\n-     * @see #getValue(int)\r\n-     */\r\n-    public abstract int getLength ();\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's Namespace URI by index.\r\n-     *\r\n-     * @param index The attribute index (zero-based).\r\n-     * @return The Namespace URI, or the empty string if none\r\n-     *         is available, or null if the index is out of\r\n-     *         range.\r\n-     * @see #getLength\r\n-     */\r\n-    public abstract String getURI (int index);\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's local name by index.\r\n-     *\r\n-     * @param index The attribute index (zero-based).\r\n-     * @return The local name, or the empty string if Namespace\r\n-     *         processing is not being performed, or null\r\n-     *         if the index is out of range.\r\n-     * @see #getLength\r\n-     */\r\n-    public abstract String getLocalName (int index);\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's XML 1.0 qualified name by index.\r\n-     *\r\n-     * @param index The attribute index (zero-based).\r\n-     * @return The XML 1.0 qualified name, or the empty string\r\n-     *         if none is available, or null if the index\r\n-     *         is out of range.\r\n-     * @see #getLength\r\n-     */\r\n-    public abstract String getQName (int index);\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's type by index.\r\n-     *\r\n-     * <p>The attribute type is one of the strings \"CDATA\", \"ID\",\r\n-     * \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\",\r\n-     * or \"NOTATION\" (always in upper case).</p>\r\n-     *\r\n-     * <p>If the parser has not read a declaration for the attribute,\r\n-     * or if the parser does not report attribute types, then it must\r\n-     * return the value \"CDATA\" as stated in the XML 1.0 Recommentation\r\n-     * (clause 3.3.3, \"Attribute-Value Normalization\").</p>\r\n-     *\r\n-     * <p>For an enumerated attribute that is not a notation, the\r\n-     * parser will report the type as \"NMTOKEN\".</p>\r\n-     *\r\n-     * @param index The attribute index (zero-based).\r\n-     * @return The attribute's type as a string, or null if the\r\n-     *         index is out of range.\r\n-     * @see #getLength\r\n-     */\r\n-    public abstract String getType (int index);\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's value by index.\r\n-     *\r\n-     * <p>If the attribute value is a list of tokens (IDREFS,\r\n-     * ENTITIES, or NMTOKENS), the tokens will be concatenated\r\n-     * into a single string with each token separated by a\r\n-     * single space.</p>\r\n-     *\r\n-     * @param index The attribute index (zero-based).\r\n-     * @return The attribute's value as a string, or null if the\r\n-     *         index is out of range.\r\n-     * @see #getLength\r\n-     */\r\n-    public abstract String getValue (int index);\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Name-based query.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Look up the index of an attribute by Namespace name.\r\n-     *\r\n-     * @param uri The Namespace URI, or the empty string if\r\n-     *        the name has no Namespace URI.\r\n-     * @param localName The attribute's local name.\r\n-     * @return The index of the attribute, or -1 if it does not\r\n-     *         appear in the list.\r\n-     */\r\n-    public int getIndex (String uri, String localPart);\r\n-\r\n-\r\n-    /**\r\n-     * Look up the index of an attribute by XML 1.0 qualified name.\r\n-     *\r\n-     * @param qName The qualified (prefixed) name.\r\n-     * @return The index of the attribute, or -1 if it does not\r\n-     *         appear in the list.\r\n-     */\r\n-    public int getIndex (String qName);\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's type by Namespace name.\r\n-     *\r\n-     * <p>See {@link #getType(int) getType(int)} for a description\r\n-     * of the possible types.</p>\r\n-     *\r\n-     * @param uri The Namespace URI, or the empty String if the\r\n-     *        name has no Namespace URI.\r\n-     * @param localName The local name of the attribute.\r\n-     * @return The attribute type as a string, or null if the\r\n-     *         attribute is not in the list or if Namespace\r\n-     *         processing is not being performed.\r\n-     */\r\n-    public abstract String getType (String uri, String localName);\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's type by XML 1.0 qualified name.\r\n-     *\r\n-     * <p>See {@link #getType(int) getType(int)} for a description\r\n-     * of the possible types.</p>\r\n-     *\r\n-     * @param qName The XML 1.0 qualified name.\r\n-     * @return The attribute type as a string, or null if the\r\n-     *         attribute is not in the list or if qualified names\r\n-     *         are not available.\r\n-     */\r\n-    public abstract String getType (String qName);\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's value by Namespace name.\r\n-     *\r\n-     * <p>See {@link #getValue(int) getValue(int)} for a description\r\n-     * of the possible values.</p>\r\n-     *\r\n-     * @param uri The Namespace URI, or the empty String if the\r\n-     *        name has no Namespace URI.\r\n-     * @param localName The local name of the attribute.\r\n-     * @return The attribute value as a string, or null if the\r\n-     *         attribute is not in the list.\r\n-     */\r\n-    public abstract String getValue (String uri, String localName);\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's value by XML 1.0 qualified name.\r\n-     *\r\n-     * <p>See {@link #getValue(int) getValue(int)} for a description\r\n-     * of the possible values.</p>\r\n-     *\r\n-     * @param qName The XML 1.0 qualified name.\r\n-     * @return The attribute value as a string, or null if the\r\n-     *         attribute is not in the list or if qualified names\r\n-     *         are not available.\r\n-     */\r\n-    public abstract String getValue (String qName);\r\n-\r\n-}\r\n-\r\n-// end of Attributes.java\r\n+// Attributes.java - attribute list with Namespace support\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the public domain.\n+\n+// $Id: Attributes.java,v 1.5.2.4 2002/01/29 21:34:14 dbrownell Exp $\n+\n+\n+package org.xml.sax;\n+\n+\n+/**\n+ * Interface for a list of XML attributes.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This interface allows access to a list of attributes in\n+ * three different ways:</p>\n+ *\n+ * <ol>\n+ * <li>by attribute index;</li>\n+ * <li>by Namespace-qualified name; or</li>\n+ * <li>by qualified (prefixed) name.</li>\n+ * </ol>\n+ *\n+ * <p>The list will not contain attributes that were declared\n+ * #IMPLIED but not specified in the start tag.  It will also not\n+ * contain attributes used as Namespace declarations (xmlns*) unless\n+ * the <code>http://xml.org/sax/features/namespace-prefixes</code> \n+ * feature is set to <var>true</var> (it is <var>false</var> by \n+ * default).\n+ * Because SAX2 conforms to the \"Namespaces in XML\" specification,\n+ * it does not give namespace declaration attributes a namespace URI.\n+ * Some other W3C specifications are in conflict with that, expecting\n+ * these declarations to be in a namespace.\n+ * Handler code may need to resolve that conflict.\n+ * </p>\n+ *\n+ * <p>If the namespace-prefixes feature (see above) is <var>false</var>, \n+ * access by qualified name may not be available; if the \n+ * <code>http://xml.org/sax/features/namespaces</code>\n+ * feature is <var>false</var>, access by Namespace-qualified names \n+ * may not be available.</p>\n+ *\n+ * <p>This interface replaces the now-deprecated SAX1 {@link\n+ * org.xml.sax.AttributeList AttributeList} interface, which does not \n+ * contain Namespace support.  In addition to Namespace support, it \n+ * adds the <var>getIndex</var> methods (below).</p>\n+ *\n+ * <p>The order of attributes in the list is unspecified, and will\n+ * vary from implementation to implementation.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.helpers.AttributesImpl\n+ * @see org.xml.sax.ext.DeclHandler#attributeDecl\n+ */\n+public interface Attributes\n+{\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Indexed access.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Return the number of attributes in the list.\n+     *\n+     * <p>Once you know the number of attributes, you can iterate\n+     * through the list.</p>\n+     *\n+     * @return The number of attributes in the list.\n+     * @see #getURI(int)\n+     * @see #getLocalName(int)\n+     * @see #getQName(int)\n+     * @see #getType(int)\n+     * @see #getValue(int)\n+     */\n+    public abstract int getLength ();\n+\n+\n+    /**\n+     * Look up an attribute's Namespace URI by index.\n+     *\n+     * @param index The attribute index (zero-based).\n+     * @return The Namespace URI, or the empty string if none\n+     *         is available, or null if the index is out of\n+     *         range.\n+     * @see #getLength\n+     */\n+    public abstract String getURI (int index);\n+\n+\n+    /**\n+     * Look up an attribute's local name by index.\n+     *\n+     * @param index The attribute index (zero-based).\n+     * @return The local name, or the empty string if Namespace\n+     *         processing is not being performed, or null\n+     *         if the index is out of range.\n+     * @see #getLength\n+     */\n+    public abstract String getLocalName (int index);\n+\n+\n+    /**\n+     * Look up an attribute's XML 1.0 qualified name by index.\n+     *\n+     * @param index The attribute index (zero-based).\n+     * @return The XML 1.0 qualified name, or the empty string\n+     *         if none is available, or null if the index\n+     *         is out of range.\n+     * @see #getLength\n+     */\n+    public abstract String getQName (int index);\n+\n+\n+    /**\n+     * Look up an attribute's type by index.\n+     *\n+     * <p>The attribute type is one of the strings \"CDATA\", \"ID\",\n+     * \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\",\n+     * or \"NOTATION\" (always in upper case).</p>\n+     *\n+     * <p>If the parser has not read a declaration for the attribute,\n+     * or if the parser does not report attribute types, then it must\n+     * return the value \"CDATA\" as stated in the XML 1.0 Recommentation\n+     * (clause 3.3.3, \"Attribute-Value Normalization\").</p>\n+     *\n+     * <p>For an enumerated attribute that is not a notation, the\n+     * parser will report the type as \"NMTOKEN\".</p>\n+     *\n+     * @param index The attribute index (zero-based).\n+     * @return The attribute's type as a string, or null if the\n+     *         index is out of range.\n+     * @see #getLength\n+     */\n+    public abstract String getType (int index);\n+\n+\n+    /**\n+     * Look up an attribute's value by index.\n+     *\n+     * <p>If the attribute value is a list of tokens (IDREFS,\n+     * ENTITIES, or NMTOKENS), the tokens will be concatenated\n+     * into a single string with each token separated by a\n+     * single space.</p>\n+     *\n+     * @param index The attribute index (zero-based).\n+     * @return The attribute's value as a string, or null if the\n+     *         index is out of range.\n+     * @see #getLength\n+     */\n+    public abstract String getValue (int index);\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Name-based query.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Look up the index of an attribute by Namespace name.\n+     *\n+     * @param uri The Namespace URI, or the empty string if\n+     *        the name has no Namespace URI.\n+     * @param localName The attribute's local name.\n+     * @return The index of the attribute, or -1 if it does not\n+     *         appear in the list.\n+     */\n+    public int getIndex (String uri, String localName);\n+\n+\n+    /**\n+     * Look up the index of an attribute by XML 1.0 qualified name.\n+     *\n+     * @param qName The qualified (prefixed) name.\n+     * @return The index of the attribute, or -1 if it does not\n+     *         appear in the list.\n+     */\n+    public int getIndex (String qName);\n+\n+\n+    /**\n+     * Look up an attribute's type by Namespace name.\n+     *\n+     * <p>See {@link #getType(int) getType(int)} for a description\n+     * of the possible types.</p>\n+     *\n+     * @param uri The Namespace URI, or the empty String if the\n+     *        name has no Namespace URI.\n+     * @param localName The local name of the attribute.\n+     * @return The attribute type as a string, or null if the\n+     *         attribute is not in the list or if Namespace\n+     *         processing is not being performed.\n+     */\n+    public abstract String getType (String uri, String localName);\n+\n+\n+    /**\n+     * Look up an attribute's type by XML 1.0 qualified name.\n+     *\n+     * <p>See {@link #getType(int) getType(int)} for a description\n+     * of the possible types.</p>\n+     *\n+     * @param qName The XML 1.0 qualified name.\n+     * @return The attribute type as a string, or null if the\n+     *         attribute is not in the list or if qualified names\n+     *         are not available.\n+     */\n+    public abstract String getType (String qName);\n+\n+\n+    /**\n+     * Look up an attribute's value by Namespace name.\n+     *\n+     * <p>See {@link #getValue(int) getValue(int)} for a description\n+     * of the possible values.</p>\n+     *\n+     * @param uri The Namespace URI, or the empty String if the\n+     *        name has no Namespace URI.\n+     * @param localName The local name of the attribute.\n+     * @return The attribute value as a string, or null if the\n+     *         attribute is not in the list.\n+     */\n+    public abstract String getValue (String uri, String localName);\n+\n+\n+    /**\n+     * Look up an attribute's value by XML 1.0 qualified name.\n+     *\n+     * <p>See {@link #getValue(int) getValue(int)} for a description\n+     * of the possible values.</p>\n+     *\n+     * @param qName The XML 1.0 qualified name.\n+     * @return The attribute value as a string, or null if the\n+     *         attribute is not in the list or if qualified names\n+     *         are not available.\n+     */\n+    public abstract String getValue (String qName);\n+\n+}\n+\n+// end of Attributes.java"}, {"sha": "06462c51eec446be547b5cf83e2aeaa383b65cac", "filename": "libjava/org/xml/sax/ContentHandler.java", "status": "modified", "additions": 408, "deletions": 374, "changes": 782, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FContentHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FContentHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FContentHandler.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,374 +1,408 @@\n-// ContentHandler.java - handle main document content.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the public domain.\r\n-\r\n-// $Id: ContentHandler.java,v 1.1 2000/10/02 02:43:16 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-\r\n-/**\r\n- * Receive notification of the logical content of a document.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This is the main interface that most SAX applications\r\n- * implement: if the application needs to be informed of basic parsing \r\n- * events, it implements this interface and registers an instance with \r\n- * the SAX parser using the {@link org.xml.sax.XMLReader#setContentHandler \r\n- * setContentHandler} method.  The parser uses the instance to report \r\n- * basic document-related events like the start and end of elements \r\n- * and character data.</p>\r\n- *\r\n- * <p>The order of events in this interface is very important, and\r\n- * mirrors the order of information in the document itself.  For\r\n- * example, all of an element's content (character data, processing\r\n- * instructions, and/or subelements) will appear, in order, between\r\n- * the startElement event and the corresponding endElement event.</p>\r\n- *\r\n- * <p>This interface is similar to the now-deprecated SAX 1.0\r\n- * DocumentHandler interface, but it adds support for Namespaces\r\n- * and for reporting skipped entities (in non-validating XML\r\n- * processors).</p>\r\n- *\r\n- * <p>Implementors should note that there is also a Java class\r\n- * {@link java.net.ContentHandler ContentHandler} in the java.net\r\n- * package; that means that it's probably a bad idea to do</p>\r\n- *\r\n- * <blockquote>\r\n- * import java.net.*;\r\n- * import org.xml.sax.*;\r\n- * </blockquote>\r\n- *\r\n- * <p>In fact, \"import ...*\" is usually a sign of sloppy programming\r\n- * anyway, so the user should consider this a feature rather than a\r\n- * bug.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.XMLReader\r\n- * @see org.xml.sax.DTDHandler\r\n- * @see org.xml.sax.ErrorHandler\r\n- */\r\n-public interface ContentHandler\r\n-{\r\n-\r\n-    /**\r\n-     * Receive an object for locating the origin of SAX document events.\r\n-     *\r\n-     * <p>SAX parsers are strongly encouraged (though not absolutely\r\n-     * required) to supply a locator: if it does so, it must supply\r\n-     * the locator to the application by invoking this method before\r\n-     * invoking any of the other methods in the ContentHandler\r\n-     * interface.</p>\r\n-     *\r\n-     * <p>The locator allows the application to determine the end\r\n-     * position of any document-related event, even if the parser is\r\n-     * not reporting an error.  Typically, the application will\r\n-     * use this information for reporting its own errors (such as\r\n-     * character content that does not match an application's\r\n-     * business rules).  The information returned by the locator\r\n-     * is probably not sufficient for use with a search engine.</p>\r\n-     *\r\n-     * <p>Note that the locator will return correct information only\r\n-     * during the invocation of the events in this interface.  The\r\n-     * application should not attempt to use it at any other time.</p>\r\n-     *\r\n-     * @param locator An object that can return the location of\r\n-     *                any SAX document event.\r\n-     * @see org.xml.sax.Locator\r\n-     */\r\n-    public void setDocumentLocator (Locator locator);\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of the beginning of a document.\r\n-     *\r\n-     * <p>The SAX parser will invoke this method only once, before any\r\n-     * other methods in this interface or in {@link org.xml.sax.DTDHandler\r\n-     * DTDHandler} (except for {@link #setDocumentLocator \r\n-     * setDocumentLocator}).</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see #endDocument\r\n-     */\r\n-    public void startDocument ()\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of the end of a document.\r\n-     *\r\n-     * <p>The SAX parser will invoke this method only once, and it will\r\n-     * be the last method invoked during the parse.  The parser shall\r\n-     * not invoke this method until it has either abandoned parsing\r\n-     * (because of an unrecoverable error) or reached the end of\r\n-     * input.</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see #startDocument\r\n-     */\r\n-    public void endDocument()\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Begin the scope of a prefix-URI Namespace mapping.\r\n-     *\r\n-     * <p>The information from this event is not necessary for\r\n-     * normal Namespace processing: the SAX XML reader will \r\n-     * automatically replace prefixes for element and attribute\r\n-     * names when the <code>http://xml.org/sax/features/namespaces</code>\r\n-     * feature is <var>true</var> (the default).</p>\r\n-     *\r\n-     * <p>There are cases, however, when applications need to\r\n-     * use prefixes in character data or in attribute values,\r\n-     * where they cannot safely be expanded automatically; the\r\n-     * start/endPrefixMapping event supplies the information\r\n-     * to the application to expand prefixes in those contexts\r\n-     * itself, if necessary.</p>\r\n-     *\r\n-     * <p>Note that start/endPrefixMapping events are not\r\n-     * guaranteed to be properly nested relative to each-other:\r\n-     * all startPrefixMapping events will occur before the\r\n-     * corresponding {@link #startElement startElement} event, \r\n-     * and all {@link #endPrefixMapping endPrefixMapping}\r\n-     * events will occur after the corresponding {@link #endElement\r\n-     * endElement} event, but their order is not otherwise \r\n-     * guaranteed.</p>\r\n-     *\r\n-     * <p>There should never be start/endPrefixMapping events for the\r\n-     * \"xml\" prefix, since it is predeclared and immutable.</p>\r\n-     *\r\n-     * @param prefix The Namespace prefix being declared.\r\n-     * @param uri The Namespace URI the prefix is mapped to.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see #endPrefixMapping\r\n-     * @see #startElement\r\n-     */\r\n-    public void startPrefixMapping (String prefix, String uri)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * End the scope of a prefix-URI mapping.\r\n-     *\r\n-     * <p>See {@link #startPrefixMapping startPrefixMapping} for \r\n-     * details.  This event will always occur after the corresponding \r\n-     * {@link #endElement endElement} event, but the order of \r\n-     * {@link #endPrefixMapping endPrefixMapping} events is not otherwise\r\n-     * guaranteed.</p>\r\n-     *\r\n-     * @param prefix The prefix that was being mapping.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see #startPrefixMapping\r\n-     * @see #endElement\r\n-     */\r\n-    public void endPrefixMapping (String prefix)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of the beginning of an element.\r\n-     *\r\n-     * <p>The Parser will invoke this method at the beginning of every\r\n-     * element in the XML document; there will be a corresponding\r\n-     * {@link #endElement endElement} event for every startElement event\r\n-     * (even when the element is empty). All of the element's content will be\r\n-     * reported, in order, before the corresponding endElement\r\n-     * event.</p>\r\n-     *\r\n-     * <p>This event allows up to three name components for each\r\n-     * element:</p>\r\n-     *\r\n-     * <ol>\r\n-     * <li>the Namespace URI;</li>\r\n-     * <li>the local name; and</li>\r\n-     * <li>the qualified (prefixed) name.</li>\r\n-     * </ol>\r\n-     *\r\n-     * <p>Any or all of these may be provided, depending on the\r\n-     * values of the <var>http://xml.org/sax/features/namespaces</var>\r\n-     * and the <var>http://xml.org/sax/features/namespace-prefixes</var>\r\n-     * properties:</p>\r\n-     *\r\n-     * <ul>\r\n-     * <li>the Namespace URI and local name are required when \r\n-     * the namespaces property is <var>true</var> (the default), and are\r\n-     * optional when the namespaces property is <var>false</var> (if one is\r\n-     * specified, both must be);</li>\r\n-     * <li>the qualified name is required when the namespace-prefixes property\r\n-     * is <var>true</var>, and is optional when the namespace-prefixes property\r\n-     * is <var>false</var> (the default).</li>\r\n-     * </ul>\r\n-     *\r\n-     * <p>Note that the attribute list provided will contain only\r\n-     * attributes with explicit values (specified or defaulted):\r\n-     * #IMPLIED attributes will be omitted.  The attribute list\r\n-     * will contain attributes used for Namespace declarations\r\n-     * (xmlns* attributes) only if the\r\n-     * <code>http://xml.org/sax/features/namespace-prefixes</code>\r\n-     * property is true (it is false by default, and support for a \r\n-     * true value is optional).</p>\r\n-     *\r\n-     * @param uri The Namespace URI, or the empty string if the\r\n-     *        element has no Namespace URI or if Namespace\r\n-     *        processing is not being performed.\r\n-     * @param localName The local name (without prefix), or the\r\n-     *        empty string if Namespace processing is not being\r\n-     *        performed.\r\n-     * @param qName The qualified name (with prefix), or the\r\n-     *        empty string if qualified names are not available.\r\n-     * @param atts The attributes attached to the element.  If\r\n-     *        there are no attributes, it shall be an empty\r\n-     *        Attributes object.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see #endElement\r\n-     * @see org.xml.sax.Attributes\r\n-     */\r\n-    public void startElement (String namespaceURI, String localName,\r\n-\t\t\t      String qName, Attributes atts)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of the end of an element.\r\n-     *\r\n-     * <p>The SAX parser will invoke this method at the end of every\r\n-     * element in the XML document; there will be a corresponding\r\n-     * {@link #startElement startElement} event for every endElement \r\n-     * event (even when the element is empty).</p>\r\n-     *\r\n-     * <p>For information on the names, see startElement.</p>\r\n-     *\r\n-     * @param uri The Namespace URI, or the empty string if the\r\n-     *        element has no Namespace URI or if Namespace\r\n-     *        processing is not being performed.\r\n-     * @param localName The local name (without prefix), or the\r\n-     *        empty string if Namespace processing is not being\r\n-     *        performed.\r\n-     * @param qName The qualified XML 1.0 name (with prefix), or the\r\n-     *        empty string if qualified names are not available.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     */\r\n-    public void endElement (String namespaceURI, String localName,\r\n-\t\t\t    String qName)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of character data.\r\n-     *\r\n-     * <p>The Parser will call this method to report each chunk of\r\n-     * character data.  SAX parsers may return all contiguous character\r\n-     * data in a single chunk, or they may split it into several\r\n-     * chunks; however, all of the characters in any single event\r\n-     * must come from the same external entity so that the Locator\r\n-     * provides useful information.</p>\r\n-     *\r\n-     * <p>The application must not attempt to read from the array\r\n-     * outside of the specified range.</p>\r\n-     *\r\n-     * <p>Note that some parsers will report whitespace in element\r\n-     * content using the {@link #ignorableWhitespace ignorableWhitespace}\r\n-     * method rather than this one (validating parsers <em>must</em> \r\n-     * do so).</p>\r\n-     *\r\n-     * @param ch The characters from the XML document.\r\n-     * @param start The start position in the array.\r\n-     * @param length The number of characters to read from the array.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see #ignorableWhitespace \r\n-     * @see org.xml.sax.Locator\r\n-     */\r\n-    public void characters (char ch[], int start, int length)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of ignorable whitespace in element content.\r\n-     *\r\n-     * <p>Validating Parsers must use this method to report each chunk\r\n-     * of whitespace in element content (see the W3C XML 1.0 recommendation,\r\n-     * section 2.10): non-validating parsers may also use this method\r\n-     * if they are capable of parsing and using content models.</p>\r\n-     *\r\n-     * <p>SAX parsers may return all contiguous whitespace in a single\r\n-     * chunk, or they may split it into several chunks; however, all of\r\n-     * the characters in any single event must come from the same\r\n-     * external entity, so that the Locator provides useful\r\n-     * information.</p>\r\n-     *\r\n-     * <p>The application must not attempt to read from the array\r\n-     * outside of the specified range.</p>\r\n-     *\r\n-     * @param ch The characters from the XML document.\r\n-     * @param start The start position in the array.\r\n-     * @param length The number of characters to read from the array.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see #characters\r\n-     */\r\n-    public void ignorableWhitespace (char ch[], int start, int length)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of a processing instruction.\r\n-     *\r\n-     * <p>The Parser will invoke this method once for each processing\r\n-     * instruction found: note that processing instructions may occur\r\n-     * before or after the main document element.</p>\r\n-     *\r\n-     * <p>A SAX parser must never report an XML declaration (XML 1.0,\r\n-     * section 2.8) or a text declaration (XML 1.0, section 4.3.1)\r\n-     * using this method.</p>\r\n-     *\r\n-     * @param target The processing instruction target.\r\n-     * @param data The processing instruction data, or null if\r\n-     *        none was supplied.  The data does not include any\r\n-     *        whitespace separating it from the target.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     */\r\n-    public void processingInstruction (String target, String data)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of a skipped entity.\r\n-     *\r\n-     * <p>The Parser will invoke this method once for each entity\r\n-     * skipped.  Non-validating processors may skip entities if they\r\n-     * have not seen the declarations (because, for example, the\r\n-     * entity was declared in an external DTD subset).  All processors\r\n-     * may skip external entities, depending on the values of the\r\n-     * <code>http://xml.org/sax/features/external-general-entities</code>\r\n-     * and the\r\n-     * <code>http://xml.org/sax/features/external-parameter-entities</code>\r\n-     * properties.</p>\r\n-     *\r\n-     * @param name The name of the skipped entity.  If it is a \r\n-     *        parameter entity, the name will begin with '%', and if\r\n-     *        it is the external DTD subset, it will be the string\r\n-     *        \"[dtd]\".\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     */\r\n-    public void skippedEntity (String name)\r\n-\tthrows SAXException;\r\n-}\r\n-\r\n-// end of ContentHandler.java\r\n+// ContentHandler.java - handle main document content.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the public domain.\n+\n+// $Id: ContentHandler.java,v 1.4.2.9 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+\n+/**\n+ * Receive notification of the logical content of a document.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This is the main interface that most SAX applications\n+ * implement: if the application needs to be informed of basic parsing \n+ * events, it implements this interface and registers an instance with \n+ * the SAX parser using the {@link org.xml.sax.XMLReader#setContentHandler \n+ * setContentHandler} method.  The parser uses the instance to report \n+ * basic document-related events like the start and end of elements \n+ * and character data.</p>\n+ *\n+ * <p>The order of events in this interface is very important, and\n+ * mirrors the order of information in the document itself.  For\n+ * example, all of an element's content (character data, processing\n+ * instructions, and/or subelements) will appear, in order, between\n+ * the startElement event and the corresponding endElement event.</p>\n+ *\n+ * <p>This interface is similar to the now-deprecated SAX 1.0\n+ * DocumentHandler interface, but it adds support for Namespaces\n+ * and for reporting skipped entities (in non-validating XML\n+ * processors).</p>\n+ *\n+ * <p>Implementors should note that there is also a Java class\n+ * {@link java.net.ContentHandler ContentHandler} in the java.net\n+ * package; that means that it's probably a bad idea to do</p>\n+ *\n+ * <blockquote>\n+ * import java.net.*;\n+ * import org.xml.sax.*;\n+ * </blockquote>\n+ *\n+ * <p>In fact, \"import ...*\" is usually a sign of sloppy programming\n+ * anyway, so the user should consider this a feature rather than a\n+ * bug.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.XMLReader\n+ * @see org.xml.sax.DTDHandler\n+ * @see org.xml.sax.ErrorHandler\n+ */\n+public interface ContentHandler\n+{\n+\n+    /**\n+     * Receive an object for locating the origin of SAX document events.\n+     *\n+     * <p>SAX parsers are strongly encouraged (though not absolutely\n+     * required) to supply a locator: if it does so, it must supply\n+     * the locator to the application by invoking this method before\n+     * invoking any of the other methods in the ContentHandler\n+     * interface.</p>\n+     *\n+     * <p>The locator allows the application to determine the end\n+     * position of any document-related event, even if the parser is\n+     * not reporting an error.  Typically, the application will\n+     * use this information for reporting its own errors (such as\n+     * character content that does not match an application's\n+     * business rules).  The information returned by the locator\n+     * is probably not sufficient for use with a search engine.</p>\n+     *\n+     * <p>Note that the locator will return correct information only\n+     * during the invocation of the events in this interface.  The\n+     * application should not attempt to use it at any other time.</p>\n+     *\n+     * @param locator An object that can return the location of\n+     *                any SAX document event.\n+     * @see org.xml.sax.Locator\n+     */\n+    public void setDocumentLocator (Locator locator);\n+\n+\n+    /**\n+     * Receive notification of the beginning of a document.\n+     *\n+     * <p>The SAX parser will invoke this method only once, before any\n+     * other event callbacks (except for {@link #setDocumentLocator \n+     * setDocumentLocator}).</p>\n+     *\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see #endDocument\n+     */\n+    public void startDocument ()\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Receive notification of the end of a document.\n+     *\n+     * <p>The SAX parser will invoke this method only once, and it will\n+     * be the last method invoked during the parse.  The parser shall\n+     * not invoke this method until it has either abandoned parsing\n+     * (because of an unrecoverable error) or reached the end of\n+     * input.</p>\n+     *\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see #startDocument\n+     */\n+    public void endDocument()\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Begin the scope of a prefix-URI Namespace mapping.\n+     *\n+     * <p>The information from this event is not necessary for\n+     * normal Namespace processing: the SAX XML reader will \n+     * automatically replace prefixes for element and attribute\n+     * names when the <code>http://xml.org/sax/features/namespaces</code>\n+     * feature is <var>true</var> (the default).</p>\n+     *\n+     * <p>There are cases, however, when applications need to\n+     * use prefixes in character data or in attribute values,\n+     * where they cannot safely be expanded automatically; the\n+     * start/endPrefixMapping event supplies the information\n+     * to the application to expand prefixes in those contexts\n+     * itself, if necessary.</p>\n+     *\n+     * <p>Note that start/endPrefixMapping events are not\n+     * guaranteed to be properly nested relative to each other:\n+     * all startPrefixMapping events will occur immediately before the\n+     * corresponding {@link #startElement startElement} event, \n+     * and all {@link #endPrefixMapping endPrefixMapping}\n+     * events will occur immediately after the corresponding\n+     * {@link #endElement endElement} event,\n+     * but their order is not otherwise \n+     * guaranteed.</p>\n+     *\n+     * <p>There should never be start/endPrefixMapping events for the\n+     * \"xml\" prefix, since it is predeclared and immutable.</p>\n+     *\n+     * @param prefix The Namespace prefix being declared.\n+     *\tAn empty string is used for the default element namespace,\n+     *\twhich has no prefix.\n+     * @param uri The Namespace URI the prefix is mapped to.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     * @see #endPrefixMapping\n+     * @see #startElement\n+     */\n+    public void startPrefixMapping (String prefix, String uri)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * End the scope of a prefix-URI mapping.\n+     *\n+     * <p>See {@link #startPrefixMapping startPrefixMapping} for \n+     * details.  These events will always occur immediately after the\n+     * corresponding {@link #endElement endElement} event, but the order of \n+     * {@link #endPrefixMapping endPrefixMapping} events is not otherwise\n+     * guaranteed.</p>\n+     *\n+     * @param prefix The prefix that was being mapping.\n+     *\tThis is the empty string when a default mapping scope ends.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     * @see #startPrefixMapping\n+     * @see #endElement\n+     */\n+    public void endPrefixMapping (String prefix)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Receive notification of the beginning of an element.\n+     *\n+     * <p>The Parser will invoke this method at the beginning of every\n+     * element in the XML document; there will be a corresponding\n+     * {@link #endElement endElement} event for every startElement event\n+     * (even when the element is empty). All of the element's content will be\n+     * reported, in order, before the corresponding endElement\n+     * event.</p>\n+     *\n+     * <p>This event allows up to three name components for each\n+     * element:</p>\n+     *\n+     * <ol>\n+     * <li>the Namespace URI;</li>\n+     * <li>the local name; and</li>\n+     * <li>the qualified (prefixed) name.</li>\n+     * </ol>\n+     *\n+     * <p>Any or all of these may be provided, depending on the\n+     * values of the <var>http://xml.org/sax/features/namespaces</var>\n+     * and the <var>http://xml.org/sax/features/namespace-prefixes</var>\n+     * properties:</p>\n+     *\n+     * <ul>\n+     * <li>the Namespace URI and local name are required when \n+     * the namespaces property is <var>true</var> (the default), and are\n+     * optional when the namespaces property is <var>false</var> (if one is\n+     * specified, both must be);</li>\n+     * <li>the qualified name is required when the namespace-prefixes property\n+     * is <var>true</var>, and is optional when the namespace-prefixes property\n+     * is <var>false</var> (the default).</li>\n+     * </ul>\n+     *\n+     * <p>Note that the attribute list provided will contain only\n+     * attributes with explicit values (specified or defaulted):\n+     * #IMPLIED attributes will be omitted.  The attribute list\n+     * will contain attributes used for Namespace declarations\n+     * (xmlns* attributes) only if the\n+     * <code>http://xml.org/sax/features/namespace-prefixes</code>\n+     * property is true (it is false by default, and support for a \n+     * true value is optional).</p>\n+     *\n+     * <p>Like {@link #characters characters()}, attribute values may have\n+     * characters that need more than one <code>char</code> value.  </p>\n+     *\n+     * @param uri The Namespace URI, or the empty string if the\n+     *        element has no Namespace URI or if Namespace\n+     *        processing is not being performed.\n+     * @param localName The local name (without prefix), or the\n+     *        empty string if Namespace processing is not being\n+     *        performed.\n+     * @param qName The qualified name (with prefix), or the\n+     *        empty string if qualified names are not available.\n+     * @param atts The attributes attached to the element.  If\n+     *        there are no attributes, it shall be an empty\n+     *        Attributes object.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see #endElement\n+     * @see org.xml.sax.Attributes\n+     */\n+    public void startElement (String uri, String localName,\n+\t\t\t      String qName, Attributes atts)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Receive notification of the end of an element.\n+     *\n+     * <p>The SAX parser will invoke this method at the end of every\n+     * element in the XML document; there will be a corresponding\n+     * {@link #startElement startElement} event for every endElement \n+     * event (even when the element is empty).</p>\n+     *\n+     * <p>For information on the names, see startElement.</p>\n+     *\n+     * @param uri The Namespace URI, or the empty string if the\n+     *        element has no Namespace URI or if Namespace\n+     *        processing is not being performed.\n+     * @param localName The local name (without prefix), or the\n+     *        empty string if Namespace processing is not being\n+     *        performed.\n+     * @param qName The qualified XML 1.0 name (with prefix), or the\n+     *        empty string if qualified names are not available.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     */\n+    public void endElement (String uri, String localName,\n+\t\t\t    String qName)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Receive notification of character data.\n+     *\n+     * <p>The Parser will call this method to report each chunk of\n+     * character data.  SAX parsers may return all contiguous character\n+     * data in a single chunk, or they may split it into several\n+     * chunks; however, all of the characters in any single event\n+     * must come from the same external entity so that the Locator\n+     * provides useful information.</p>\n+     *\n+     * <p>The application must not attempt to read from the array\n+     * outside of the specified range.</p>\n+     *\n+     * <p>Individual characters may consist of more than one Java\n+     * <code>char</code> value.  There are two important cases where this\n+     * happens, because characters can't be represented in just sixteen bits.\n+     * In one case, characters are represented in a <em>Surrogate Pair</em>,\n+     * using two special Unicode values. Such characters are in the so-called\n+     * \"Astral Planes\", with a code point above U+FFFF.  A second case involves\n+     * composite characters, such as a base character combining with one or\n+     * more accent characters. </p>\n+     *\n+     * <p> Your code should not assume that algorithms using\n+     * <code>char</code>-at-a-time idioms will be working in character\n+     * units; in some cases they will split characters.  This is relevant\n+     * wherever XML permits arbitrary characters, such as attribute values,\n+     * processing instruction data, and comments as well as in data reported\n+     * from this method.  It's also generally relevant whenever Java code\n+     * manipulates internationalized text; the issue isn't unique to XML.</p>\n+     *\n+     * <p>Note that some parsers will report whitespace in element\n+     * content using the {@link #ignorableWhitespace ignorableWhitespace}\n+     * method rather than this one (validating parsers <em>must</em> \n+     * do so).</p>\n+     *\n+     * @param ch The characters from the XML document.\n+     * @param start The start position in the array.\n+     * @param length The number of characters to read from the array.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see #ignorableWhitespace \n+     * @see org.xml.sax.Locator\n+     */\n+    public void characters (char ch[], int start, int length)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Receive notification of ignorable whitespace in element content.\n+     *\n+     * <p>Validating Parsers must use this method to report each chunk\n+     * of whitespace in element content (see the W3C XML 1.0 recommendation,\n+     * section 2.10): non-validating parsers may also use this method\n+     * if they are capable of parsing and using content models.</p>\n+     *\n+     * <p>SAX parsers may return all contiguous whitespace in a single\n+     * chunk, or they may split it into several chunks; however, all of\n+     * the characters in any single event must come from the same\n+     * external entity, so that the Locator provides useful\n+     * information.</p>\n+     *\n+     * <p>The application must not attempt to read from the array\n+     * outside of the specified range.</p>\n+     *\n+     * @param ch The characters from the XML document.\n+     * @param start The start position in the array.\n+     * @param length The number of characters to read from the array.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see #characters\n+     */\n+    public void ignorableWhitespace (char ch[], int start, int length)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Receive notification of a processing instruction.\n+     *\n+     * <p>The Parser will invoke this method once for each processing\n+     * instruction found: note that processing instructions may occur\n+     * before or after the main document element.</p>\n+     *\n+     * <p>A SAX parser must never report an XML declaration (XML 1.0,\n+     * section 2.8) or a text declaration (XML 1.0, section 4.3.1)\n+     * using this method.</p>\n+     *\n+     * <p>Like {@link #characters characters()}, processing instruction\n+     * data may have characters that need more than one <code>char</code>\n+     * value. </p>\n+     *\n+     * @param target The processing instruction target.\n+     * @param data The processing instruction data, or null if\n+     *        none was supplied.  The data does not include any\n+     *        whitespace separating it from the target.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     */\n+    public void processingInstruction (String target, String data)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Receive notification of a skipped entity.\n+     * This is not called for entity references within markup constructs\n+     * such as element start tags or markup declarations.  (The XML\n+     * recommendation requires reporting skipped external entities.\n+     * SAX also reports internal entity expansion/non-expansion, except\n+     * within markup constructs.)\n+     *\n+     * <p>The Parser will invoke this method each time the entity is\n+     * skipped.  Non-validating processors may skip entities if they\n+     * have not seen the declarations (because, for example, the\n+     * entity was declared in an external DTD subset).  All processors\n+     * may skip external entities, depending on the values of the\n+     * <code>http://xml.org/sax/features/external-general-entities</code>\n+     * and the\n+     * <code>http://xml.org/sax/features/external-parameter-entities</code>\n+     * properties.</p>\n+     *\n+     * @param name The name of the skipped entity.  If it is a \n+     *        parameter entity, the name will begin with '%', and if\n+     *        it is the external DTD subset, it will be the string\n+     *        \"[dtd]\".\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     */\n+    public void skippedEntity (String name)\n+\tthrows SAXException;\n+}\n+\n+// end of ContentHandler.java"}, {"sha": "ee84bb24c450d85729065febd51db6e0b93e1235", "filename": "libjava/org/xml/sax/DTDHandler.java", "status": "modified", "additions": 117, "deletions": 108, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FDTDHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FDTDHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FDTDHandler.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,108 +1,117 @@\n-// SAX DTD handler.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: DTDHandler.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-/**\r\n- * Receive notification of basic DTD-related events.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>If a SAX application needs information about notations and\r\n- * unparsed entities, then the application implements this \r\n- * interface and registers an instance with the SAX parser using \r\n- * the parser's setDTDHandler method.  The parser uses the \r\n- * instance to report notation and unparsed entity declarations to \r\n- * the application.</p>\r\n- *\r\n- * <p>Note that this interface includes only those DTD events that\r\n- * the XML recommendation <em>requires</em> processors to report:\r\n- * notation and unparsed entity declarations.</p>\r\n- *\r\n- * <p>The SAX parser may report these events in any order, regardless\r\n- * of the order in which the notations and unparsed entities were\r\n- * declared; however, all DTD events must be reported after the\r\n- * document handler's startDocument event, and before the first\r\n- * startElement event.</p>\r\n- *\r\n- * <p>It is up to the application to store the information for \r\n- * future use (perhaps in a hash table or object tree).\r\n- * If the application encounters attributes of type \"NOTATION\",\r\n- * \"ENTITY\", or \"ENTITIES\", it can use the information that it\r\n- * obtained through this interface to find the entity and/or\r\n- * notation corresponding with the attribute value.</p>\r\n- *\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.Parser#setDTDHandler\r\n- * @see org.xml.sax.HandlerBase \r\n- */\r\n-public interface DTDHandler {\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a notation declaration event.\r\n-     *\r\n-     * <p>It is up to the application to record the notation for later\r\n-     * reference, if necessary.</p>\r\n-     *\r\n-     * <p>At least one of publicId and systemId must be non-null.\r\n-     * If a system identifier is present, and it is a URL, the SAX\r\n-     * parser must resolve it fully before passing it to the\r\n-     * application through this event.</p>\r\n-     *\r\n-     * <p>There is no guarantee that the notation declaration will be\r\n-     * reported before any unparsed entities that use it.</p>\r\n-     *\r\n-     * @param name The notation name.\r\n-     * @param publicId The notation's public identifier, or null if\r\n-     *        none was given.\r\n-     * @param systemId The notation's system identifier, or null if\r\n-     *        none was given.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see #unparsedEntityDecl\r\n-     * @see org.xml.sax.AttributeList\r\n-     */\r\n-    public abstract void notationDecl (String name,\r\n-\t\t\t\t       String publicId,\r\n-\t\t\t\t       String systemId)\r\n-\tthrows SAXException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of an unparsed entity declaration event.\r\n-     *\r\n-     * <p>Note that the notation name corresponds to a notation\r\n-     * reported by the {@link #notationDecl notationDecl} event.  \r\n-     * It is up to the application to record the entity for later \r\n-     * reference, if necessary.</p>\r\n-     *\r\n-     * <p>If the system identifier is a URL, the parser must resolve it\r\n-     * fully before passing it to the application.</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @param name The unparsed entity's name.\r\n-     * @param publicId The entity's public identifier, or null if none\r\n-     *        was given.\r\n-     * @param systemId The entity's system identifier.\r\n-     * @param notation name The name of the associated notation.\r\n-     * @see #notationDecl\r\n-     * @see org.xml.sax.AttributeList\r\n-     */\r\n-    public abstract void unparsedEntityDecl (String name,\r\n-\t\t\t\t\t     String publicId,\r\n-\t\t\t\t\t     String systemId,\r\n-\t\t\t\t\t     String notationName)\r\n-\tthrows SAXException;\r\n-    \r\n-}\r\n-\r\n-// end of DTDHandler.java\r\n+// SAX DTD handler.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: DTDHandler.java,v 1.5.2.4 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+/**\n+ * Receive notification of basic DTD-related events.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>If a SAX application needs information about notations and\n+ * unparsed entities, then the application implements this \n+ * interface and registers an instance with the SAX parser using \n+ * the parser's setDTDHandler method.  The parser uses the \n+ * instance to report notation and unparsed entity declarations to \n+ * the application.</p>\n+ *\n+ * <p>Note that this interface includes only those DTD events that\n+ * the XML recommendation <em>requires</em> processors to report:\n+ * notation and unparsed entity declarations.</p>\n+ *\n+ * <p>The SAX parser may report these events in any order, regardless\n+ * of the order in which the notations and unparsed entities were\n+ * declared; however, all DTD events must be reported after the\n+ * document handler's startDocument event, and before the first\n+ * startElement event.\n+ * (If the {@link org.xml.sax.ext.LexicalHandler LexicalHandler} is\n+ * used, these events must also be reported before the endDTD event.)\n+ * </p>\n+ *\n+ * <p>It is up to the application to store the information for \n+ * future use (perhaps in a hash table or object tree).\n+ * If the application encounters attributes of type \"NOTATION\",\n+ * \"ENTITY\", or \"ENTITIES\", it can use the information that it\n+ * obtained through this interface to find the entity and/or\n+ * notation corresponding with the attribute value.</p>\n+ *\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.XMLReader#setDTDHandler\n+ */\n+public interface DTDHandler {\n+    \n+    \n+    /**\n+     * Receive notification of a notation declaration event.\n+     *\n+     * <p>It is up to the application to record the notation for later\n+     * reference, if necessary;\n+     * notations may appear as attribute values and in unparsed entity\n+     * declarations, and are sometime used with processing instruction\n+     * target names.</p>\n+     *\n+     * <p>At least one of publicId and systemId must be non-null.\n+     * If a system identifier is present, and it is a URL, the SAX\n+     * parser must resolve it fully before passing it to the\n+     * application through this event.</p>\n+     *\n+     * <p>There is no guarantee that the notation declaration will be\n+     * reported before any unparsed entities that use it.</p>\n+     *\n+     * @param name The notation name.\n+     * @param publicId The notation's public identifier, or null if\n+     *        none was given.\n+     * @param systemId The notation's system identifier, or null if\n+     *        none was given.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see #unparsedEntityDecl\n+     * @see org.xml.sax.Attributes\n+     */\n+    public abstract void notationDecl (String name,\n+\t\t\t\t       String publicId,\n+\t\t\t\t       String systemId)\n+\tthrows SAXException;\n+    \n+    \n+    /**\n+     * Receive notification of an unparsed entity declaration event.\n+     *\n+     * <p>Note that the notation name corresponds to a notation\n+     * reported by the {@link #notationDecl notationDecl} event.  \n+     * It is up to the application to record the entity for later \n+     * reference, if necessary;\n+     * unparsed entities may appear as attribute values. \n+     * </p>\n+     *\n+     * <p>If the system identifier is a URL, the parser must resolve it\n+     * fully before passing it to the application.</p>\n+     *\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @param name The unparsed entity's name.\n+     * @param publicId The entity's public identifier, or null if none\n+     *        was given.\n+     * @param systemId The entity's system identifier.\n+     * @param notationName The name of the associated notation.\n+     * @see #notationDecl\n+     * @see org.xml.sax.Attributes\n+     */\n+    public abstract void unparsedEntityDecl (String name,\n+\t\t\t\t\t     String publicId,\n+\t\t\t\t\t     String systemId,\n+\t\t\t\t\t     String notationName)\n+\tthrows SAXException;\n+    \n+}\n+\n+// end of DTDHandler.java"}, {"sha": "10c07b2f627d475ef383d1cb10d09fec62543ac4", "filename": "libjava/org/xml/sax/DocumentHandler.java", "status": "modified", "additions": 232, "deletions": 230, "changes": 462, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FDocumentHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FDocumentHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FDocumentHandler.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,230 +1,232 @@\n-// SAX document handler.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: DocumentHandler.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-/**\r\n- * Receive notification of general document events.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This was the main event-handling interface for SAX1; in\r\n- * SAX2, it has been replaced by {@link org.xml.sax.ContentHandler\r\n- * ContentHandler}, which provides Namespace support and reporting\r\n- * of skipped entities.  This interface is included in SAX2 only\r\n- * to support legacy SAX1 applications.</p>\r\n- *\r\n- * <p>The order of events in this interface is very important, and\r\n- * mirrors the order of information in the document itself.  For\r\n- * example, all of an element's content (character data, processing\r\n- * instructions, and/or subelements) will appear, in order, between\r\n- * the startElement event and the corresponding endElement event.</p>\r\n- *\r\n- * <p>Application writers who do not want to implement the entire\r\n- * interface can derive a class from HandlerBase, which implements\r\n- * the default functionality; parser writers can instantiate\r\n- * HandlerBase to obtain a default handler.  The application can find\r\n- * the location of any document event using the Locator interface\r\n- * supplied by the Parser through the setDocumentLocator method.</p>\r\n- *\r\n- * @deprecated This interface has been replaced by the SAX2\r\n- *             {@link org.xml.sax.ContentHandler ContentHandler}\r\n- *             interface, which includes Namespace support.\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.Parser#setDocumentHandler\r\n- * @see org.xml.sax.Locator\r\n- * @see org.xml.sax.HandlerBase\r\n- */\r\n-public interface DocumentHandler {\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive an object for locating the origin of SAX document events.\r\n-     *\r\n-     * <p>SAX parsers are strongly encouraged (though not absolutely\r\n-     * required) to supply a locator: if it does so, it must supply\r\n-     * the locator to the application by invoking this method before\r\n-     * invoking any of the other methods in the DocumentHandler\r\n-     * interface.</p>\r\n-     *\r\n-     * <p>The locator allows the application to determine the end\r\n-     * position of any document-related event, even if the parser is\r\n-     * not reporting an error.  Typically, the application will\r\n-     * use this information for reporting its own errors (such as\r\n-     * character content that does not match an application's\r\n-     * business rules).  The information returned by the locator\r\n-     * is probably not sufficient for use with a search engine.</p>\r\n-     *\r\n-     * <p>Note that the locator will return correct information only\r\n-     * during the invocation of the events in this interface.  The\r\n-     * application should not attempt to use it at any other time.</p>\r\n-     *\r\n-     * @param locator An object that can return the location of\r\n-     *                any SAX document event.\r\n-     * @see org.xml.sax.Locator\r\n-     */\r\n-    public abstract void setDocumentLocator (Locator locator);\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the beginning of a document.\r\n-     *\r\n-     * <p>The SAX parser will invoke this method only once, before any\r\n-     * other methods in this interface or in DTDHandler (except for\r\n-     * setDocumentLocator).</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     */\r\n-    public abstract void startDocument ()\r\n-\tthrows SAXException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the end of a document.\r\n-     *\r\n-     * <p>The SAX parser will invoke this method only once, and it will\r\n-     * be the last method invoked during the parse.  The parser shall\r\n-     * not invoke this method until it has either abandoned parsing\r\n-     * (because of an unrecoverable error) or reached the end of\r\n-     * input.</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     */\r\n-    public abstract void endDocument ()\r\n-\tthrows SAXException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the beginning of an element.\r\n-     *\r\n-     * <p>The Parser will invoke this method at the beginning of every\r\n-     * element in the XML document; there will be a corresponding\r\n-     * endElement() event for every startElement() event (even when the\r\n-     * element is empty). All of the element's content will be\r\n-     * reported, in order, before the corresponding endElement()\r\n-     * event.</p>\r\n-     *\r\n-     * <p>If the element name has a namespace prefix, the prefix will\r\n-     * still be attached.  Note that the attribute list provided will\r\n-     * contain only attributes with explicit values (specified or\r\n-     * defaulted): #IMPLIED attributes will be omitted.</p>\r\n-     *\r\n-     * @param name The element type name.\r\n-     * @param atts The attributes attached to the element, if any.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see #endElement\r\n-     * @see org.xml.sax.AttributeList \r\n-     */\r\n-    public abstract void startElement (String name, AttributeList atts)\r\n-\tthrows SAXException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the end of an element.\r\n-     *\r\n-     * <p>The SAX parser will invoke this method at the end of every\r\n-     * element in the XML document; there will be a corresponding\r\n-     * startElement() event for every endElement() event (even when the\r\n-     * element is empty).</p>\r\n-     *\r\n-     * <p>If the element name has a namespace prefix, the prefix will\r\n-     * still be attached to the name.</p>\r\n-     *\r\n-     * @param name The element type name\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     */\r\n-    public abstract void endElement (String name)\r\n-\tthrows SAXException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of character data.\r\n-     *\r\n-     * <p>The Parser will call this method to report each chunk of\r\n-     * character data.  SAX parsers may return all contiguous character\r\n-     * data in a single chunk, or they may split it into several\r\n-     * chunks; however, all of the characters in any single event\r\n-     * must come from the same external entity, so that the Locator\r\n-     * provides useful information.</p>\r\n-     *\r\n-     * <p>The application must not attempt to read from the array\r\n-     * outside of the specified range.</p>\r\n-     *\r\n-     * <p>Note that some parsers will report whitespace using the\r\n-     * ignorableWhitespace() method rather than this one (validating\r\n-     * parsers must do so).</p>\r\n-     *\r\n-     * @param ch The characters from the XML document.\r\n-     * @param start The start position in the array.\r\n-     * @param length The number of characters to read from the array.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see #ignorableWhitespace \r\n-     * @see org.xml.sax.Locator\r\n-     */\r\n-    public abstract void characters (char ch[], int start, int length)\r\n-\tthrows SAXException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of ignorable whitespace in element content.\r\n-     *\r\n-     * <p>Validating Parsers must use this method to report each chunk\r\n-     * of ignorable whitespace (see the W3C XML 1.0 recommendation,\r\n-     * section 2.10): non-validating parsers may also use this method\r\n-     * if they are capable of parsing and using content models.</p>\r\n-     *\r\n-     * <p>SAX parsers may return all contiguous whitespace in a single\r\n-     * chunk, or they may split it into several chunks; however, all of\r\n-     * the characters in any single event must come from the same\r\n-     * external entity, so that the Locator provides useful\r\n-     * information.</p>\r\n-     *\r\n-     * <p>The application must not attempt to read from the array\r\n-     * outside of the specified range.</p>\r\n-     *\r\n-     * @param ch The characters from the XML document.\r\n-     * @param start The start position in the array.\r\n-     * @param length The number of characters to read from the array.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see #characters\r\n-     */\r\n-    public abstract void ignorableWhitespace (char ch[], int start, int length)\r\n-\tthrows SAXException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a processing instruction.\r\n-     *\r\n-     * <p>The Parser will invoke this method once for each processing\r\n-     * instruction found: note that processing instructions may occur\r\n-     * before or after the main document element.</p>\r\n-     *\r\n-     * <p>A SAX parser should never report an XML declaration (XML 1.0,\r\n-     * section 2.8) or a text declaration (XML 1.0, section 4.3.1)\r\n-     * using this method.</p>\r\n-     *\r\n-     * @param target The processing instruction target.\r\n-     * @param data The processing instruction data, or null if\r\n-     *        none was supplied.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     */\r\n-    public abstract void processingInstruction (String target, String data)\r\n-\tthrows SAXException;\r\n-    \r\n-}\r\n-\r\n-// end of DocumentHandler.java\r\n+// SAX document handler.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: DocumentHandler.java,v 1.3.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+/**\n+ * Receive notification of general document events.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This was the main event-handling interface for SAX1; in\n+ * SAX2, it has been replaced by {@link org.xml.sax.ContentHandler\n+ * ContentHandler}, which provides Namespace support and reporting\n+ * of skipped entities.  This interface is included in SAX2 only\n+ * to support legacy SAX1 applications.</p>\n+ *\n+ * <p>The order of events in this interface is very important, and\n+ * mirrors the order of information in the document itself.  For\n+ * example, all of an element's content (character data, processing\n+ * instructions, and/or subelements) will appear, in order, between\n+ * the startElement event and the corresponding endElement event.</p>\n+ *\n+ * <p>Application writers who do not want to implement the entire\n+ * interface can derive a class from HandlerBase, which implements\n+ * the default functionality; parser writers can instantiate\n+ * HandlerBase to obtain a default handler.  The application can find\n+ * the location of any document event using the Locator interface\n+ * supplied by the Parser through the setDocumentLocator method.</p>\n+ *\n+ * @deprecated This interface has been replaced by the SAX2\n+ *             {@link org.xml.sax.ContentHandler ContentHandler}\n+ *             interface, which includes Namespace support.\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.Parser#setDocumentHandler\n+ * @see org.xml.sax.Locator\n+ * @see org.xml.sax.HandlerBase\n+ */\n+public interface DocumentHandler {\n+    \n+    \n+    /**\n+     * Receive an object for locating the origin of SAX document events.\n+     *\n+     * <p>SAX parsers are strongly encouraged (though not absolutely\n+     * required) to supply a locator: if it does so, it must supply\n+     * the locator to the application by invoking this method before\n+     * invoking any of the other methods in the DocumentHandler\n+     * interface.</p>\n+     *\n+     * <p>The locator allows the application to determine the end\n+     * position of any document-related event, even if the parser is\n+     * not reporting an error.  Typically, the application will\n+     * use this information for reporting its own errors (such as\n+     * character content that does not match an application's\n+     * business rules).  The information returned by the locator\n+     * is probably not sufficient for use with a search engine.</p>\n+     *\n+     * <p>Note that the locator will return correct information only\n+     * during the invocation of the events in this interface.  The\n+     * application should not attempt to use it at any other time.</p>\n+     *\n+     * @param locator An object that can return the location of\n+     *                any SAX document event.\n+     * @see org.xml.sax.Locator\n+     */\n+    public abstract void setDocumentLocator (Locator locator);\n+    \n+    \n+    /**\n+     * Receive notification of the beginning of a document.\n+     *\n+     * <p>The SAX parser will invoke this method only once, before any\n+     * other methods in this interface or in DTDHandler (except for\n+     * setDocumentLocator).</p>\n+     *\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     */\n+    public abstract void startDocument ()\n+\tthrows SAXException;\n+    \n+    \n+    /**\n+     * Receive notification of the end of a document.\n+     *\n+     * <p>The SAX parser will invoke this method only once, and it will\n+     * be the last method invoked during the parse.  The parser shall\n+     * not invoke this method until it has either abandoned parsing\n+     * (because of an unrecoverable error) or reached the end of\n+     * input.</p>\n+     *\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     */\n+    public abstract void endDocument ()\n+\tthrows SAXException;\n+    \n+    \n+    /**\n+     * Receive notification of the beginning of an element.\n+     *\n+     * <p>The Parser will invoke this method at the beginning of every\n+     * element in the XML document; there will be a corresponding\n+     * endElement() event for every startElement() event (even when the\n+     * element is empty). All of the element's content will be\n+     * reported, in order, before the corresponding endElement()\n+     * event.</p>\n+     *\n+     * <p>If the element name has a namespace prefix, the prefix will\n+     * still be attached.  Note that the attribute list provided will\n+     * contain only attributes with explicit values (specified or\n+     * defaulted): #IMPLIED attributes will be omitted.</p>\n+     *\n+     * @param name The element type name.\n+     * @param atts The attributes attached to the element, if any.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see #endElement\n+     * @see org.xml.sax.AttributeList \n+     */\n+    public abstract void startElement (String name, AttributeList atts)\n+\tthrows SAXException;\n+    \n+    \n+    /**\n+     * Receive notification of the end of an element.\n+     *\n+     * <p>The SAX parser will invoke this method at the end of every\n+     * element in the XML document; there will be a corresponding\n+     * startElement() event for every endElement() event (even when the\n+     * element is empty).</p>\n+     *\n+     * <p>If the element name has a namespace prefix, the prefix will\n+     * still be attached to the name.</p>\n+     *\n+     * @param name The element type name\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     */\n+    public abstract void endElement (String name)\n+\tthrows SAXException;\n+    \n+    \n+    /**\n+     * Receive notification of character data.\n+     *\n+     * <p>The Parser will call this method to report each chunk of\n+     * character data.  SAX parsers may return all contiguous character\n+     * data in a single chunk, or they may split it into several\n+     * chunks; however, all of the characters in any single event\n+     * must come from the same external entity, so that the Locator\n+     * provides useful information.</p>\n+     *\n+     * <p>The application must not attempt to read from the array\n+     * outside of the specified range.</p>\n+     *\n+     * <p>Note that some parsers will report whitespace using the\n+     * ignorableWhitespace() method rather than this one (validating\n+     * parsers must do so).</p>\n+     *\n+     * @param ch The characters from the XML document.\n+     * @param start The start position in the array.\n+     * @param length The number of characters to read from the array.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see #ignorableWhitespace \n+     * @see org.xml.sax.Locator\n+     */\n+    public abstract void characters (char ch[], int start, int length)\n+\tthrows SAXException;\n+    \n+    \n+    /**\n+     * Receive notification of ignorable whitespace in element content.\n+     *\n+     * <p>Validating Parsers must use this method to report each chunk\n+     * of ignorable whitespace (see the W3C XML 1.0 recommendation,\n+     * section 2.10): non-validating parsers may also use this method\n+     * if they are capable of parsing and using content models.</p>\n+     *\n+     * <p>SAX parsers may return all contiguous whitespace in a single\n+     * chunk, or they may split it into several chunks; however, all of\n+     * the characters in any single event must come from the same\n+     * external entity, so that the Locator provides useful\n+     * information.</p>\n+     *\n+     * <p>The application must not attempt to read from the array\n+     * outside of the specified range.</p>\n+     *\n+     * @param ch The characters from the XML document.\n+     * @param start The start position in the array.\n+     * @param length The number of characters to read from the array.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see #characters\n+     */\n+    public abstract void ignorableWhitespace (char ch[], int start, int length)\n+\tthrows SAXException;\n+    \n+    \n+    /**\n+     * Receive notification of a processing instruction.\n+     *\n+     * <p>The Parser will invoke this method once for each processing\n+     * instruction found: note that processing instructions may occur\n+     * before or after the main document element.</p>\n+     *\n+     * <p>A SAX parser should never report an XML declaration (XML 1.0,\n+     * section 2.8) or a text declaration (XML 1.0, section 4.3.1)\n+     * using this method.</p>\n+     *\n+     * @param target The processing instruction target.\n+     * @param data The processing instruction data, or null if\n+     *        none was supplied.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     */\n+    public abstract void processingInstruction (String target, String data)\n+\tthrows SAXException;\n+    \n+}\n+\n+// end of DocumentHandler.java"}, {"sha": "acc365aad630bd63912ed4d44c56a99863d18b2f", "filename": "libjava/org/xml/sax/EntityResolver.java", "status": "modified", "additions": 119, "deletions": 110, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FEntityResolver.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FEntityResolver.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FEntityResolver.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,110 +1,119 @@\n-// SAX entity resolver.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: EntityResolver.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-import java.io.IOException;\r\n-\r\n-\r\n-/**\r\n- * Basic interface for resolving entities.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>If a SAX application needs to implement customized handling\r\n- * for external entities, it must implement this interface and\r\n- * register an instance with the SAX driver using the\r\n- * {@link org.xml.sax.XMLReader#setEntityResolver setEntityResolver}\r\n- * method.</p>\r\n- *\r\n- * <p>The XML reader will then allow the application to intercept any\r\n- * external entities (including the external DTD subset and external\r\n- * parameter entities, if any) before including them.</p>\r\n- *\r\n- * <p>Many SAX applications will not need to implement this interface,\r\n- * but it will be especially useful for applications that build\r\n- * XML documents from databases or other specialised input sources,\r\n- * or for applications that use URI types other than URLs.</p>\r\n- *\r\n- * <p>The following resolver would provide the application\r\n- * with a special character stream for the entity with the system\r\n- * identifier \"http://www.myhost.com/today\":</p>\r\n- *\r\n- * <pre>\r\n- * import org.xml.sax.EntityResolver;\r\n- * import org.xml.sax.InputSource;\r\n- *\r\n- * public class MyResolver implements EntityResolver {\r\n- *   public InputSource resolveEntity (String publicId, String systemId)\r\n- *   {\r\n- *     if (systemId.equals(\"http://www.myhost.com/today\")) {\r\n- *              // return a special input source\r\n- *       MyReader reader = new MyReader();\r\n- *       return new InputSource(reader);\r\n- *     } else {\r\n- *              // use the default behaviour\r\n- *       return null;\r\n- *     }\r\n- *   }\r\n- * }\r\n- * </pre>\r\n- *\r\n- * <p>The application can also use this interface to redirect system\r\n- * identifiers to local URIs or to look up replacements in a catalog\r\n- * (possibly by using the public identifier).</p>\r\n- *\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.Parser#setEntityResolver\r\n- * @see org.xml.sax.InputSource\r\n- */\r\n-public interface EntityResolver {\r\n-    \r\n-    \r\n-    /**\r\n-     * Allow the application to resolve external entities.\r\n-     *\r\n-     * <p>The Parser will call this method before opening any external\r\n-     * entity except the top-level document entity (including the\r\n-     * external DTD subset, external entities referenced within the\r\n-     * DTD, and external entities referenced within the document\r\n-     * element): the application may request that the parser resolve\r\n-     * the entity itself, that it use an alternative URI, or that it\r\n-     * use an entirely different input source.</p>\r\n-     *\r\n-     * <p>Application writers can use this method to redirect external\r\n-     * system identifiers to secure and/or local URIs, to look up\r\n-     * public identifiers in a catalogue, or to read an entity from a\r\n-     * database or other input source (including, for example, a dialog\r\n-     * box).</p>\r\n-     *\r\n-     * <p>If the system identifier is a URL, the SAX parser must\r\n-     * resolve it fully before reporting it to the application.</p>\r\n-     *\r\n-     * @param publicId The public identifier of the external entity\r\n-     *        being referenced, or null if none was supplied.\r\n-     * @param systemId The system identifier of the external entity\r\n-     *        being referenced.\r\n-     * @return An InputSource object describing the new input source,\r\n-     *         or null to request that the parser open a regular\r\n-     *         URI connection to the system identifier.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @exception java.io.IOException A Java-specific IO exception,\r\n-     *            possibly the result of creating a new InputStream\r\n-     *            or Reader for the InputSource.\r\n-     * @see org.xml.sax.InputSource\r\n-     */\r\n-    public abstract InputSource resolveEntity (String publicId,\r\n-\t\t\t\t\t       String systemId)\r\n-\tthrows SAXException, IOException;\r\n-    \r\n-}\r\n-\r\n-// end of EntityResolver.java\r\n+// SAX entity resolver.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: EntityResolver.java,v 1.7.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+import java.io.IOException;\n+\n+\n+/**\n+ * Basic interface for resolving entities.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>If a SAX application needs to implement customized handling\n+ * for external entities, it must implement this interface and\n+ * register an instance with the SAX driver using the\n+ * {@link org.xml.sax.XMLReader#setEntityResolver setEntityResolver}\n+ * method.</p>\n+ *\n+ * <p>The XML reader will then allow the application to intercept any\n+ * external entities (including the external DTD subset and external\n+ * parameter entities, if any) before including them.</p>\n+ *\n+ * <p>Many SAX applications will not need to implement this interface,\n+ * but it will be especially useful for applications that build\n+ * XML documents from databases or other specialised input sources,\n+ * or for applications that use URI types other than URLs.</p>\n+ *\n+ * <p>The following resolver would provide the application\n+ * with a special character stream for the entity with the system\n+ * identifier \"http://www.myhost.com/today\":</p>\n+ *\n+ * <pre>\n+ * import org.xml.sax.EntityResolver;\n+ * import org.xml.sax.InputSource;\n+ *\n+ * public class MyResolver implements EntityResolver {\n+ *   public InputSource resolveEntity (String publicId, String systemId)\n+ *   {\n+ *     if (systemId.equals(\"http://www.myhost.com/today\")) {\n+ *              // return a special input source\n+ *       MyReader reader = new MyReader();\n+ *       return new InputSource(reader);\n+ *     } else {\n+ *              // use the default behaviour\n+ *       return null;\n+ *     }\n+ *   }\n+ * }\n+ * </pre>\n+ *\n+ * <p>The application can also use this interface to redirect system\n+ * identifiers to local URIs or to look up replacements in a catalog\n+ * (possibly by using the public identifier).</p>\n+ *\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.XMLReader#setEntityResolver\n+ * @see org.xml.sax.InputSource\n+ */\n+public interface EntityResolver {\n+    \n+    \n+    /**\n+     * Allow the application to resolve external entities.\n+     *\n+     * <p>The parser will call this method before opening any external\n+     * entity except the top-level document entity.  Such entities include\n+     * the external DTD subset and external parameter entities referenced\n+     * within the DTD (in either case, only if the parser reads external\n+     * parameter entities), and external general entities referenced\n+     * within the document element (if the parser reads external general\n+     * entities).  The application may request that the parser locate\n+     * the entity itself, that it use an alternative URI, or that it\n+     * use data provided by the application (as a character or byte\n+     * input stream).</p>\n+     *\n+     * <p>Application writers can use this method to redirect external\n+     * system identifiers to secure and/or local URIs, to look up\n+     * public identifiers in a catalogue, or to read an entity from a\n+     * database or other input source (including, for example, a dialog\n+     * box).  Neither XML nor SAX specifies a preferred policy for using\n+     * public or system IDs to resolve resources.  However, SAX specifies\n+     * how to interpret any InputSource returned by this method, and that\n+     * if none is returned, then the system ID will be dereferenced as\n+     * a URL.  </p>\n+     *\n+     * <p>If the system identifier is a URL, the SAX parser must\n+     * resolve it fully before reporting it to the application.</p>\n+     *\n+     * @param publicId The public identifier of the external entity\n+     *        being referenced, or null if none was supplied.\n+     * @param systemId The system identifier of the external entity\n+     *        being referenced.\n+     * @return An InputSource object describing the new input source,\n+     *         or null to request that the parser open a regular\n+     *         URI connection to the system identifier.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @exception java.io.IOException A Java-specific IO exception,\n+     *            possibly the result of creating a new InputStream\n+     *            or Reader for the InputSource.\n+     * @see org.xml.sax.InputSource\n+     */\n+    public abstract InputSource resolveEntity (String publicId,\n+\t\t\t\t\t       String systemId)\n+\tthrows SAXException, IOException;\n+    \n+}\n+\n+// end of EntityResolver.java"}, {"sha": "e82302093ad91d6e945b02a807e853d98398eec3", "filename": "libjava/org/xml/sax/ErrorHandler.java", "status": "modified", "additions": 125, "deletions": 123, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FErrorHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FErrorHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FErrorHandler.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,123 +1,125 @@\n-// SAX error handler.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: ErrorHandler.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-\r\n-/**\r\n- * Basic interface for SAX error handlers.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>If a SAX application needs to implement customized error\r\n- * handling, it must implement this interface and then register an\r\n- * instance with the XML reader using the\r\n- * {@link org.xml.sax.XMLReader#setErrorHandler setErrorHandler}\r\n- * method.  The parser will then report all errors and warnings\r\n- * through this interface.</p>\r\n- *\r\n- * <p><strong>WARNING:</strong> If an application does <em>not</em>\r\n- * register an ErrorHandler, XML parsing errors will go unreported\r\n- * and bizarre behaviour may result.</p>\r\n- *\r\n- * <p>For XML processing errors, a SAX driver must use this interface \r\n- * instead of throwing an exception: it is up to the application \r\n- * to decide whether to throw an exception for different types of \r\n- * errors and warnings.  Note, however, that there is no requirement that \r\n- * the parser continue to provide useful information after a call to \r\n- * {@link #fatalError fatalError} (in other words, a SAX driver class \r\n- * could catch an exception and report a fatalError).</p>\r\n- *\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.Parser#setErrorHandler\r\n- * @see org.xml.sax.SAXParseException \r\n- */\r\n-public interface ErrorHandler {\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a warning.\r\n-     *\r\n-     * <p>SAX parsers will use this method to report conditions that\r\n-     * are not errors or fatal errors as defined by the XML 1.0\r\n-     * recommendation.  The default behaviour is to take no action.</p>\r\n-     *\r\n-     * <p>The SAX parser must continue to provide normal parsing events\r\n-     * after invoking this method: it should still be possible for the\r\n-     * application to process the document through to the end.</p>\r\n-     *\r\n-     * <p>Filters may use this method to report other, non-XML warnings\r\n-     * as well.</p>\r\n-     *\r\n-     * @param exception The warning information encapsulated in a\r\n-     *                  SAX parse exception.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.SAXParseException \r\n-     */\r\n-    public abstract void warning (SAXParseException exception)\r\n-\tthrows SAXException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a recoverable error.\r\n-     *\r\n-     * <p>This corresponds to the definition of \"error\" in section 1.2\r\n-     * of the W3C XML 1.0 Recommendation.  For example, a validating\r\n-     * parser would use this callback to report the violation of a\r\n-     * validity constraint.  The default behaviour is to take no\r\n-     * action.</p>\r\n-     *\r\n-     * <p>The SAX parser must continue to provide normal parsing events\r\n-     * after invoking this method: it should still be possible for the\r\n-     * application to process the document through to the end.  If the\r\n-     * application cannot do so, then the parser should report a fatal\r\n-     * error even if the XML 1.0 recommendation does not require it to\r\n-     * do so.</p>\r\n-     *\r\n-     * <p>Filters may use this method to report other, non-XML errors\r\n-     * as well.</p>\r\n-     *\r\n-     * @param exception The error information encapsulated in a\r\n-     *                  SAX parse exception.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.SAXParseException \r\n-     */\r\n-    public abstract void error (SAXParseException exception)\r\n-\tthrows SAXException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a non-recoverable error.\r\n-     *\r\n-     * <p>This corresponds to the definition of \"fatal error\" in\r\n-     * section 1.2 of the W3C XML 1.0 Recommendation.  For example, a\r\n-     * parser would use this callback to report the violation of a\r\n-     * well-formedness constraint.</p>\r\n-     *\r\n-     * <p>The application must assume that the document is unusable\r\n-     * after the parser has invoked this method, and should continue\r\n-     * (if at all) only for the sake of collecting addition error\r\n-     * messages: in fact, SAX parsers are free to stop reporting any\r\n-     * other events once this method has been invoked.</p>\r\n-     *\r\n-     * @param exception The error information encapsulated in a\r\n-     *                  SAX parse exception.  \r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.SAXParseException\r\n-     */\r\n-    public abstract void fatalError (SAXParseException exception)\r\n-\tthrows SAXException;\r\n-    \r\n-}\r\n-\r\n-// end of ErrorHandler.java\r\n+// SAX error handler.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: ErrorHandler.java,v 1.4.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+\n+/**\n+ * Basic interface for SAX error handlers.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>If a SAX application needs to implement customized error\n+ * handling, it must implement this interface and then register an\n+ * instance with the XML reader using the\n+ * {@link org.xml.sax.XMLReader#setErrorHandler setErrorHandler}\n+ * method.  The parser will then report all errors and warnings\n+ * through this interface.</p>\n+ *\n+ * <p><strong>WARNING:</strong> If an application does <em>not</em>\n+ * register an ErrorHandler, XML parsing errors will go unreported\n+ * and bizarre behaviour may result.</p>\n+ *\n+ * <p>For XML processing errors, a SAX driver must use this interface \n+ * instead of throwing an exception: it is up to the application \n+ * to decide whether to throw an exception for different types of \n+ * errors and warnings.  Note, however, that there is no requirement that \n+ * the parser continue to provide useful information after a call to \n+ * {@link #fatalError fatalError} (in other words, a SAX driver class \n+ * could catch an exception and report a fatalError).</p>\n+ *\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.XMLReader#setErrorHandler\n+ * @see org.xml.sax.SAXParseException \n+ */\n+public interface ErrorHandler {\n+    \n+    \n+    /**\n+     * Receive notification of a warning.\n+     *\n+     * <p>SAX parsers will use this method to report conditions that\n+     * are not errors or fatal errors as defined by the XML 1.0\n+     * recommendation.  The default behaviour is to take no action.</p>\n+     *\n+     * <p>The SAX parser must continue to provide normal parsing events\n+     * after invoking this method: it should still be possible for the\n+     * application to process the document through to the end.</p>\n+     *\n+     * <p>Filters may use this method to report other, non-XML warnings\n+     * as well.</p>\n+     *\n+     * @param exception The warning information encapsulated in a\n+     *                  SAX parse exception.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.SAXParseException \n+     */\n+    public abstract void warning (SAXParseException exception)\n+\tthrows SAXException;\n+    \n+    \n+    /**\n+     * Receive notification of a recoverable error.\n+     *\n+     * <p>This corresponds to the definition of \"error\" in section 1.2\n+     * of the W3C XML 1.0 Recommendation.  For example, a validating\n+     * parser would use this callback to report the violation of a\n+     * validity constraint.  The default behaviour is to take no\n+     * action.</p>\n+     *\n+     * <p>The SAX parser must continue to provide normal parsing events\n+     * after invoking this method: it should still be possible for the\n+     * application to process the document through to the end.  If the\n+     * application cannot do so, then the parser should report a fatal\n+     * error even if the XML 1.0 recommendation does not require it to\n+     * do so.</p>\n+     *\n+     * <p>Filters may use this method to report other, non-XML errors\n+     * as well.</p>\n+     *\n+     * @param exception The error information encapsulated in a\n+     *                  SAX parse exception.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.SAXParseException \n+     */\n+    public abstract void error (SAXParseException exception)\n+\tthrows SAXException;\n+    \n+    \n+    /**\n+     * Receive notification of a non-recoverable error.\n+     *\n+     * <p>This corresponds to the definition of \"fatal error\" in\n+     * section 1.2 of the W3C XML 1.0 Recommendation.  For example, a\n+     * parser would use this callback to report the violation of a\n+     * well-formedness constraint.</p>\n+     *\n+     * <p>The application must assume that the document is unusable\n+     * after the parser has invoked this method, and should continue\n+     * (if at all) only for the sake of collecting addition error\n+     * messages: in fact, SAX parsers are free to stop reporting any\n+     * other events once this method has been invoked.</p>\n+     *\n+     * @param exception The error information encapsulated in a\n+     *                  SAX parse exception.  \n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.SAXParseException\n+     */\n+    public abstract void fatalError (SAXParseException exception)\n+\tthrows SAXException;\n+    \n+}\n+\n+// end of ErrorHandler.java"}, {"sha": "42c3a07e0e8ca831290876bb721253e4eb5acf7e", "filename": "libjava/org/xml/sax/HandlerBase.java", "status": "modified", "additions": 370, "deletions": 368, "changes": 738, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FHandlerBase.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FHandlerBase.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FHandlerBase.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,368 +1,370 @@\n-// SAX default handler base class.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: HandlerBase.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-/**\r\n- * Default base class for handlers.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class implements the default behaviour for four SAX1\r\n- * interfaces: EntityResolver, DTDHandler, DocumentHandler,\r\n- * and ErrorHandler.  It is now obsolete, but is included in SAX2 to\r\n- * support legacy SAX1 applications.  SAX2 applications should use\r\n- * the {@link org.xml.sax.helpers.DefaultHandler DefaultHandler}\r\n- * class instead.</p>\r\n- *\r\n- * <p>Application writers can extend this class when they need to\r\n- * implement only part of an interface; parser writers can\r\n- * instantiate this class to provide default handlers when the\r\n- * application has not supplied its own.</p>\r\n- *\r\n- * <p>Note that the use of this class is optional.</p>\r\n- *\r\n- * @deprecated This class works with the deprecated\r\n- *             {@link org.xml.sax.DocumentHandler DocumentHandler}\r\n- *             interface.  It has been replaced by the SAX2\r\n- *             {@link org.xml.sax.helpers.DefaultHandler DefaultHandler}\r\n- *             class.\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.EntityResolver\r\n- * @see org.xml.sax.DTDHandler\r\n- * @see org.xml.sax.DocumentHandler\r\n- * @see org.xml.sax.ErrorHandler\r\n- */\r\n-public class HandlerBase\r\n-    implements EntityResolver, DTDHandler, DocumentHandler, ErrorHandler\r\n-{\r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Default implementation of the EntityResolver interface.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    /**\r\n-     * Resolve an external entity.\r\n-     *\r\n-     * <p>Always return null, so that the parser will use the system\r\n-     * identifier provided in the XML document.  This method implements\r\n-     * the SAX default behaviour: application writers can override it\r\n-     * in a subclass to do special translations such as catalog lookups\r\n-     * or URI redirection.</p>\r\n-     *\r\n-     * @param publicId The public identifier, or null if none is\r\n-     *                 available.\r\n-     * @param systemId The system identifier provided in the XML \r\n-     *                 document.\r\n-     * @return The new input source, or null to require the\r\n-     *         default behaviour.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.EntityResolver#resolveEntity\r\n-     */\r\n-    public InputSource resolveEntity (String publicId, String systemId)\r\n-\tthrows SAXException\r\n-    {\r\n-\treturn null;\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Default implementation of DTDHandler interface.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a notation declaration.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass if they wish to keep track of the notations\r\n-     * declared in a document.</p>\r\n-     *\r\n-     * @param name The notation name.\r\n-     * @param publicId The notation public identifier, or null if not\r\n-     *                 available.\r\n-     * @param systemId The notation system identifier.\r\n-     * @see org.xml.sax.DTDHandler#notationDecl\r\n-     */\r\n-    public void notationDecl (String name, String publicId, String systemId)\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of an unparsed entity declaration.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to keep track of the unparsed entities\r\n-     * declared in a document.</p>\r\n-     *\r\n-     * @param name The entity name.\r\n-     * @param publicId The entity public identifier, or null if not\r\n-     *                 available.\r\n-     * @param systemId The entity system identifier.\r\n-     * @param notationName The name of the associated notation.\r\n-     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\r\n-     */\r\n-    public void unparsedEntityDecl (String name, String publicId,\r\n-\t\t\t\t    String systemId, String notationName)\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Default implementation of DocumentHandler interface.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive a Locator object for document events.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass if they wish to store the locator for use\r\n-     * with other document events.</p>\r\n-     *\r\n-     * @param locator A locator for all SAX document events.\r\n-     * @see org.xml.sax.DocumentHandler#setDocumentLocator\r\n-     * @see org.xml.sax.Locator\r\n-     */\r\n-    public void setDocumentLocator (Locator locator)\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the beginning of the document.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions at the beginning\r\n-     * of a document (such as allocating the root node of a tree or\r\n-     * creating an output file).</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.DocumentHandler#startDocument\r\n-     */\r\n-    public void startDocument ()\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the end of the document.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions at the beginning\r\n-     * of a document (such as finalising a tree or closing an output\r\n-     * file).</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.DocumentHandler#endDocument\r\n-     */\r\n-    public void endDocument ()\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the start of an element.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions at the start of\r\n-     * each element (such as allocating a new tree node or writing\r\n-     * output to a file).</p>\r\n-     *\r\n-     * @param name The element type name.\r\n-     * @param attributes The specified or defaulted attributes.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.DocumentHandler#startElement\r\n-     */\r\n-    public void startElement (String name, AttributeList attributes)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the end of an element.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions at the end of\r\n-     * each element (such as finalising a tree node or writing\r\n-     * output to a file).</p>\r\n-     *\r\n-     * @param name The element type name.\r\n-     * @param attributes The specified or defaulted attributes.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.DocumentHandler#endElement\r\n-     */\r\n-    public void endElement (String name)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of character data inside an element.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method to take specific actions for each chunk of character data\r\n-     * (such as adding the data to a node or buffer, or printing it to\r\n-     * a file).</p>\r\n-     *\r\n-     * @param ch The characters.\r\n-     * @param start The start position in the character array.\r\n-     * @param length The number of characters to use from the\r\n-     *               character array.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.DocumentHandler#characters\r\n-     */\r\n-    public void characters (char ch[], int start, int length)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of ignorable whitespace in element content.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method to take specific actions for each chunk of ignorable\r\n-     * whitespace (such as adding data to a node or buffer, or printing\r\n-     * it to a file).</p>\r\n-     *\r\n-     * @param ch The whitespace characters.\r\n-     * @param start The start position in the character array.\r\n-     * @param length The number of characters to use from the\r\n-     *               character array.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.DocumentHandler#ignorableWhitespace\r\n-     */\r\n-    public void ignorableWhitespace (char ch[], int start, int length)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a processing instruction.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions for each\r\n-     * processing instruction, such as setting status variables or\r\n-     * invoking other methods.</p>\r\n-     *\r\n-     * @param target The processing instruction target.\r\n-     * @param data The processing instruction data, or null if\r\n-     *             none is supplied.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.DocumentHandler#processingInstruction\r\n-     */\r\n-    public void processingInstruction (String target, String data)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Default implementation of the ErrorHandler interface.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a parser warning.\r\n-     *\r\n-     * <p>The default implementation does nothing.  Application writers\r\n-     * may override this method in a subclass to take specific actions\r\n-     * for each warning, such as inserting the message in a log file or\r\n-     * printing it to the console.</p>\r\n-     *\r\n-     * @param e The warning information encoded as an exception.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ErrorHandler#warning\r\n-     * @see org.xml.sax.SAXParseException\r\n-     */\r\n-    public void warning (SAXParseException e)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a recoverable parser error.\r\n-     *\r\n-     * <p>The default implementation does nothing.  Application writers\r\n-     * may override this method in a subclass to take specific actions\r\n-     * for each error, such as inserting the message in a log file or\r\n-     * printing it to the console.</p>\r\n-     *\r\n-     * @param e The warning information encoded as an exception.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ErrorHandler#warning\r\n-     * @see org.xml.sax.SAXParseException\r\n-     */\r\n-    public void error (SAXParseException e)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Report a fatal XML parsing error.\r\n-     *\r\n-     * <p>The default implementation throws a SAXParseException.\r\n-     * Application writers may override this method in a subclass if\r\n-     * they need to take specific actions for each fatal error (such as\r\n-     * collecting all of the errors into a single report): in any case,\r\n-     * the application must stop all regular processing when this\r\n-     * method is invoked, since the document is no longer reliable, and\r\n-     * the parser may no longer report parsing events.</p>\r\n-     *\r\n-     * @param e The error information encoded as an exception.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ErrorHandler#fatalError\r\n-     * @see org.xml.sax.SAXParseException\r\n-     */\r\n-    public void fatalError (SAXParseException e)\r\n-\tthrows SAXException\r\n-    {\r\n-\tthrow e;\r\n-    }\r\n-    \r\n-}\r\n-\r\n-// end of HandlerBase.java\r\n+// SAX default handler base class.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: HandlerBase.java,v 1.3.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+/**\n+ * Default base class for handlers.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class implements the default behaviour for four SAX1\n+ * interfaces: EntityResolver, DTDHandler, DocumentHandler,\n+ * and ErrorHandler.  It is now obsolete, but is included in SAX2 to\n+ * support legacy SAX1 applications.  SAX2 applications should use\n+ * the {@link org.xml.sax.helpers.DefaultHandler DefaultHandler}\n+ * class instead.</p>\n+ *\n+ * <p>Application writers can extend this class when they need to\n+ * implement only part of an interface; parser writers can\n+ * instantiate this class to provide default handlers when the\n+ * application has not supplied its own.</p>\n+ *\n+ * <p>Note that the use of this class is optional.</p>\n+ *\n+ * @deprecated This class works with the deprecated\n+ *             {@link org.xml.sax.DocumentHandler DocumentHandler}\n+ *             interface.  It has been replaced by the SAX2\n+ *             {@link org.xml.sax.helpers.DefaultHandler DefaultHandler}\n+ *             class.\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.EntityResolver\n+ * @see org.xml.sax.DTDHandler\n+ * @see org.xml.sax.DocumentHandler\n+ * @see org.xml.sax.ErrorHandler\n+ */\n+public class HandlerBase\n+    implements EntityResolver, DTDHandler, DocumentHandler, ErrorHandler\n+{\n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Default implementation of the EntityResolver interface.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    /**\n+     * Resolve an external entity.\n+     *\n+     * <p>Always return null, so that the parser will use the system\n+     * identifier provided in the XML document.  This method implements\n+     * the SAX default behaviour: application writers can override it\n+     * in a subclass to do special translations such as catalog lookups\n+     * or URI redirection.</p>\n+     *\n+     * @param publicId The public identifer, or null if none is\n+     *                 available.\n+     * @param systemId The system identifier provided in the XML \n+     *                 document.\n+     * @return The new input source, or null to require the\n+     *         default behaviour.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.EntityResolver#resolveEntity\n+     */\n+    public InputSource resolveEntity (String publicId, String systemId)\n+\tthrows SAXException\n+    {\n+\treturn null;\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Default implementation of DTDHandler interface.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Receive notification of a notation declaration.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass if they wish to keep track of the notations\n+     * declared in a document.</p>\n+     *\n+     * @param name The notation name.\n+     * @param publicId The notation public identifier, or null if not\n+     *                 available.\n+     * @param systemId The notation system identifier.\n+     * @see org.xml.sax.DTDHandler#notationDecl\n+     */\n+    public void notationDecl (String name, String publicId, String systemId)\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of an unparsed entity declaration.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to keep track of the unparsed entities\n+     * declared in a document.</p>\n+     *\n+     * @param name The entity name.\n+     * @param publicId The entity public identifier, or null if not\n+     *                 available.\n+     * @param systemId The entity system identifier.\n+     * @param notationName The name of the associated notation.\n+     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n+     */\n+    public void unparsedEntityDecl (String name, String publicId,\n+\t\t\t\t    String systemId, String notationName)\n+    {\n+\t// no op\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Default implementation of DocumentHandler interface.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Receive a Locator object for document events.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass if they wish to store the locator for use\n+     * with other document events.</p>\n+     *\n+     * @param locator A locator for all SAX document events.\n+     * @see org.xml.sax.DocumentHandler#setDocumentLocator\n+     * @see org.xml.sax.Locator\n+     */\n+    public void setDocumentLocator (Locator locator)\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of the beginning of the document.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions at the beginning\n+     * of a document (such as allocating the root node of a tree or\n+     * creating an output file).</p>\n+     *\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.DocumentHandler#startDocument\n+     */\n+    public void startDocument ()\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of the end of the document.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions at the beginning\n+     * of a document (such as finalising a tree or closing an output\n+     * file).</p>\n+     *\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.DocumentHandler#endDocument\n+     */\n+    public void endDocument ()\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of the start of an element.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions at the start of\n+     * each element (such as allocating a new tree node or writing\n+     * output to a file).</p>\n+     *\n+     * @param name The element type name.\n+     * @param attributes The specified or defaulted attributes.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.DocumentHandler#startElement\n+     */\n+    public void startElement (String name, AttributeList attributes)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of the end of an element.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions at the end of\n+     * each element (such as finalising a tree node or writing\n+     * output to a file).</p>\n+     *\n+     * @param name The element type name.\n+     * @param attributes The specified or defaulted attributes.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.DocumentHandler#endElement\n+     */\n+    public void endElement (String name)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of character data inside an element.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method to take specific actions for each chunk of character data\n+     * (such as adding the data to a node or buffer, or printing it to\n+     * a file).</p>\n+     *\n+     * @param ch The characters.\n+     * @param start The start position in the character array.\n+     * @param length The number of characters to use from the\n+     *               character array.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.DocumentHandler#characters\n+     */\n+    public void characters (char ch[], int start, int length)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of ignorable whitespace in element content.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method to take specific actions for each chunk of ignorable\n+     * whitespace (such as adding data to a node or buffer, or printing\n+     * it to a file).</p>\n+     *\n+     * @param ch The whitespace characters.\n+     * @param start The start position in the character array.\n+     * @param length The number of characters to use from the\n+     *               character array.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.DocumentHandler#ignorableWhitespace\n+     */\n+    public void ignorableWhitespace (char ch[], int start, int length)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of a processing instruction.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions for each\n+     * processing instruction, such as setting status variables or\n+     * invoking other methods.</p>\n+     *\n+     * @param target The processing instruction target.\n+     * @param data The processing instruction data, or null if\n+     *             none is supplied.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.DocumentHandler#processingInstruction\n+     */\n+    public void processingInstruction (String target, String data)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Default implementation of the ErrorHandler interface.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Receive notification of a parser warning.\n+     *\n+     * <p>The default implementation does nothing.  Application writers\n+     * may override this method in a subclass to take specific actions\n+     * for each warning, such as inserting the message in a log file or\n+     * printing it to the console.</p>\n+     *\n+     * @param e The warning information encoded as an exception.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ErrorHandler#warning\n+     * @see org.xml.sax.SAXParseException\n+     */\n+    public void warning (SAXParseException e)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of a recoverable parser error.\n+     *\n+     * <p>The default implementation does nothing.  Application writers\n+     * may override this method in a subclass to take specific actions\n+     * for each error, such as inserting the message in a log file or\n+     * printing it to the console.</p>\n+     *\n+     * @param e The warning information encoded as an exception.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ErrorHandler#warning\n+     * @see org.xml.sax.SAXParseException\n+     */\n+    public void error (SAXParseException e)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Report a fatal XML parsing error.\n+     *\n+     * <p>The default implementation throws a SAXParseException.\n+     * Application writers may override this method in a subclass if\n+     * they need to take specific actions for each fatal error (such as\n+     * collecting all of the errors into a single report): in any case,\n+     * the application must stop all regular processing when this\n+     * method is invoked, since the document is no longer reliable, and\n+     * the parser may no longer report parsing events.</p>\n+     *\n+     * @param e The error information encoded as an exception.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ErrorHandler#fatalError\n+     * @see org.xml.sax.SAXParseException\n+     */\n+    public void fatalError (SAXParseException e)\n+\tthrows SAXException\n+    {\n+\tthrow e;\n+    }\n+    \n+}\n+\n+// end of HandlerBase.java"}, {"sha": "f6c09071d47861173fc4082938170726ef1bdb87", "filename": "libjava/org/xml/sax/InputSource.java", "status": "modified", "additions": 336, "deletions": 321, "changes": 657, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FInputSource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FInputSource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FInputSource.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,321 +1,336 @@\n-// SAX input source.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: InputSource.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-import java.io.Reader;\r\n-import java.io.InputStream;\r\n-\r\n-/**\r\n- * A single input source for an XML entity.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class allows a SAX application to encapsulate information\r\n- * about an input source in a single object, which may include\r\n- * a public identifier, a system identifier, a byte stream (possibly\r\n- * with a specified encoding), and/or a character stream.</p>\r\n- *\r\n- * <p>There are two places that the application will deliver this\r\n- * input source to the parser: as the argument to the Parser.parse\r\n- * method, or as the return value of the EntityResolver.resolveEntity\r\n- * method.</p>\r\n- *\r\n- * <p>The SAX parser will use the InputSource object to determine how\r\n- * to read XML input.  If there is a character stream available, the\r\n- * parser will read that stream directly; if not, the parser will use\r\n- * a byte stream, if available; if neither a character stream nor a\r\n- * byte stream is available, the parser will attempt to open a URI\r\n- * connection to the resource identified by the system\r\n- * identifier.</p>\r\n- *\r\n- * <p>An InputSource object belongs to the application: the SAX parser\r\n- * shall never modify it in any way (it may modify a copy if \r\n- * necessary).</p>\r\n- *\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.Parser#parse\r\n- * @see org.xml.sax.EntityResolver#resolveEntity\r\n- * @see java.io.InputStream\r\n- * @see java.io.Reader\r\n- */\r\n-public class InputSource {\r\n-    \r\n-    /**\r\n-     * Zero-argument default constructor.\r\n-     *\r\n-     * @see #setPublicId\r\n-     * @see #setSystemId\r\n-     * @see #setByteStream\r\n-     * @see #setCharacterStream\r\n-     * @see #setEncoding\r\n-     */\r\n-    public InputSource ()\r\n-    {\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Create a new input source with a system identifier.\r\n-     *\r\n-     * <p>Applications may use setPublicId to include a \r\n-     * public identifier as well, or setEncoding to specify\r\n-     * the character encoding, if known.</p>\r\n-     *\r\n-     * <p>If the system identifier is a URL, it must be full resolved.</p>\r\n-     *\r\n-     * @param systemId The system identifier (URI).\r\n-     * @see #setPublicId\r\n-     * @see #setSystemId\r\n-     * @see #setByteStream\r\n-     * @see #setEncoding\r\n-     * @see #setCharacterStream\r\n-     */\r\n-    public InputSource (String systemId)\r\n-    {\r\n-\tsetSystemId(systemId);\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Create a new input source with a byte stream.\r\n-     *\r\n-     * <p>Application writers may use setSystemId to provide a base \r\n-     * for resolving relative URIs, setPublicId to include a \r\n-     * public identifier, and/or setEncoding to specify the object's\r\n-     * character encoding.</p>\r\n-     *\r\n-     * @param byteStream The raw byte stream containing the document.\r\n-     * @see #setPublicId\r\n-     * @see #setSystemId\r\n-     * @see #setEncoding\r\n-     * @see #setByteStream\r\n-     * @see #setCharacterStream\r\n-     */\r\n-    public InputSource (InputStream byteStream)\r\n-    {\r\n-\tsetByteStream(byteStream);\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Create a new input source with a character stream.\r\n-     *\r\n-     * <p>Application writers may use setSystemId() to provide a base \r\n-     * for resolving relative URIs, and setPublicId to include a \r\n-     * public identifier.</p>\r\n-     *\r\n-     * <p>The character stream shall not include a byte order mark.</p>\r\n-     *\r\n-     * @see #setPublicId\r\n-     * @see #setSystemId\r\n-     * @see #setByteStream\r\n-     * @see #setCharacterStream\r\n-     */\r\n-    public InputSource (Reader characterStream)\r\n-    {\r\n-\tsetCharacterStream(characterStream);\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Set the public identifier for this input source.\r\n-     *\r\n-     * <p>The public identifier is always optional: if the application\r\n-     * writer includes one, it will be provided as part of the\r\n-     * location information.</p>\r\n-     *\r\n-     * @param publicId The public identifier as a string.\r\n-     * @see #getPublicId\r\n-     * @see org.xml.sax.Locator#getPublicId\r\n-     * @see org.xml.sax.SAXParseException#getPublicId\r\n-     */\r\n-    public void setPublicId (String publicId)\r\n-    {\r\n-\tthis.publicId = publicId;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the public identifier for this input source.\r\n-     *\r\n-     * @return The public identifier, or null if none was supplied.\r\n-     * @see #setPublicId\r\n-     */\r\n-    public String getPublicId ()\r\n-    {\r\n-\treturn publicId;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Set the system identifier for this input source.\r\n-     *\r\n-     * <p>The system identifier is optional if there is a byte stream\r\n-     * or a character stream, but it is still useful to provide one,\r\n-     * since the application can use it to resolve relative URIs\r\n-     * and can include it in error messages and warnings (the parser\r\n-     * will attempt to open a connection to the URI only if\r\n-     * there is no byte stream or character stream specified).</p>\r\n-     *\r\n-     * <p>If the application knows the character encoding of the\r\n-     * object pointed to by the system identifier, it can register\r\n-     * the encoding using the setEncoding method.</p>\r\n-     *\r\n-     * <p>If the system ID is a URL, it must be fully resolved.</p>\r\n-     *\r\n-     * @param systemId The system identifier as a string.\r\n-     * @see #setEncoding\r\n-     * @see #getSystemId\r\n-     * @see org.xml.sax.Locator#getSystemId\r\n-     * @see org.xml.sax.SAXParseException#getSystemId\r\n-     */\r\n-    public void setSystemId (String systemId)\r\n-    {\r\n-\tthis.systemId = systemId;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the system identifier for this input source.\r\n-     *\r\n-     * <p>The getEncoding method will return the character encoding\r\n-     * of the object pointed to, or null if unknown.</p>\r\n-     *\r\n-     * <p>If the system ID is a URL, it will be fully resolved.</p>\r\n-     *\r\n-     * @return The system identifier.\r\n-     * @see #setSystemId\r\n-     * @see #getEncoding\r\n-     */\r\n-    public String getSystemId ()\r\n-    {\r\n-\treturn systemId;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Set the byte stream for this input source.\r\n-     *\r\n-     * <p>The SAX parser will ignore this if there is also a character\r\n-     * stream specified, but it will use a byte stream in preference\r\n-     * to opening a URI connection itself.</p>\r\n-     *\r\n-     * <p>If the application knows the character encoding of the\r\n-     * byte stream, it should set it with the setEncoding method.</p>\r\n-     *\r\n-     * @param byteStream A byte stream containing an XML document or\r\n-     *        other entity.\r\n-     * @see #setEncoding\r\n-     * @see #getByteStream\r\n-     * @see #getEncoding\r\n-     * @see java.io.InputStream\r\n-     */\r\n-    public void setByteStream (InputStream byteStream)\r\n-    {\r\n-\tthis.byteStream = byteStream;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the byte stream for this input source.\r\n-     *\r\n-     * <p>The getEncoding method will return the character\r\n-     * encoding for this byte stream, or null if unknown.</p>\r\n-     *\r\n-     * @return The byte stream, or null if none was supplied.\r\n-     * @see #getEncoding\r\n-     * @see #setByteStream\r\n-     */\r\n-    public InputStream getByteStream ()\r\n-    {\r\n-\treturn byteStream;\r\n-    }\r\n-    \r\n-    \r\n-    /** \r\n-     * Set the character encoding, if known.\r\n-     *\r\n-     * <p>The encoding must be a string acceptable for an\r\n-     * XML encoding declaration (see section 4.3.3 of the XML 1.0\r\n-     * recommendation).</p>\r\n-     *\r\n-     * <p>This method has no effect when the application provides a\r\n-     * character stream.</p>\r\n-     *\r\n-     * @param encoding A string describing the character encoding.\r\n-     * @see #setSystemId\r\n-     * @see #setByteStream\r\n-     * @see #getEncoding\r\n-     */\r\n-    public void setEncoding (String encoding)\r\n-    {\r\n-\tthis.encoding = encoding;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the character encoding for a byte stream or URI.\r\n-     *\r\n-     * @return The encoding, or null if none was supplied.\r\n-     * @see #setByteStream\r\n-     * @see #getSystemId\r\n-     * @see #getByteStream\r\n-     */\r\n-    public String getEncoding ()\r\n-    {\r\n-\treturn encoding;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Set the character stream for this input source.\r\n-     *\r\n-     * <p>If there is a character stream specified, the SAX parser\r\n-     * will ignore any byte stream and will not attempt to open\r\n-     * a URI connection to the system identifier.</p>\r\n-     *\r\n-     * @param characterStream The character stream containing the\r\n-     *        XML document or other entity.\r\n-     * @see #getCharacterStream\r\n-     * @see java.io.Reader\r\n-     */\r\n-    public void setCharacterStream (Reader characterStream)\r\n-    {\r\n-\tthis.characterStream = characterStream;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the character stream for this input source.\r\n-     *\r\n-     * @return The character stream, or null if none was supplied.\r\n-     * @see #setCharacterStream\r\n-     */\r\n-    public Reader getCharacterStream ()\r\n-    {\r\n-\treturn characterStream;\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal state.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    private String publicId;\r\n-    private String systemId;\r\n-    private InputStream byteStream;\r\n-    private String encoding;\r\n-    private Reader characterStream;\r\n-    \r\n-}\r\n-\r\n-// end of InputSource.java\r\n+// SAX input source.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: InputSource.java,v 1.5.2.4 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+import java.io.Reader;\n+import java.io.InputStream;\n+\n+/**\n+ * A single input source for an XML entity.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class allows a SAX application to encapsulate information\n+ * about an input source in a single object, which may include\n+ * a public identifier, a system identifier, a byte stream (possibly\n+ * with a specified encoding), and/or a character stream.</p>\n+ *\n+ * <p>There are two places that the application can deliver an\n+ * input source to the parser: as the argument to the Parser.parse\n+ * method, or as the return value of the EntityResolver.resolveEntity\n+ * method.</p>\n+ *\n+ * <p>The SAX parser will use the InputSource object to determine how\n+ * to read XML input.  If there is a character stream available, the\n+ * parser will read that stream directly, disregarding any text\n+ * encoding declaration found in that stream.\n+ * If there is no character stream, but there is\n+ * a byte stream, the parser will use that byte stream, using the\n+ * encoding specified in the InputSource or else (if no encoding is\n+ * specified) autodetecting the character encoding using an algorithm\n+ * such as the one in the XML specification.  If neither a character\n+ * stream nor a\n+ * byte stream is available, the parser will attempt to open a URI\n+ * connection to the resource identified by the system\n+ * identifier.</p>\n+ *\n+ * <p>An InputSource object belongs to the application: the SAX parser\n+ * shall never modify it in any way (it may modify a copy if \n+ * necessary).  However, standard processing of both byte and\n+ * character streams is to close them on as part of end-of-parse cleanup,\n+ * so applications should not attempt to re-use such streams after they\n+ * have been handed to a parser.  </p>\n+ *\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.XMLReader#parse(org.xml.sax.InputSource)\n+ * @see org.xml.sax.EntityResolver#resolveEntity\n+ * @see java.io.InputStream\n+ * @see java.io.Reader\n+ */\n+public class InputSource {\n+    \n+    /**\n+     * Zero-argument default constructor.\n+     *\n+     * @see #setPublicId\n+     * @see #setSystemId\n+     * @see #setByteStream\n+     * @see #setCharacterStream\n+     * @see #setEncoding\n+     */\n+    public InputSource ()\n+    {\n+    }\n+    \n+    \n+    /**\n+     * Create a new input source with a system identifier.\n+     *\n+     * <p>Applications may use setPublicId to include a \n+     * public identifier as well, or setEncoding to specify\n+     * the character encoding, if known.</p>\n+     *\n+     * <p>If the system identifier is a URL, it must be fully\n+     * resolved (it may not be a relative URL).</p>\n+     *\n+     * @param systemId The system identifier (URI).\n+     * @see #setPublicId\n+     * @see #setSystemId\n+     * @see #setByteStream\n+     * @see #setEncoding\n+     * @see #setCharacterStream\n+     */\n+    public InputSource (String systemId)\n+    {\n+\tsetSystemId(systemId);\n+    }\n+    \n+    \n+    /**\n+     * Create a new input source with a byte stream.\n+     *\n+     * <p>Application writers should use setSystemId() to provide a base \n+     * for resolving relative URIs, may use setPublicId to include a \n+     * public identifier, and may use setEncoding to specify the object's\n+     * character encoding.</p>\n+     *\n+     * @param byteStream The raw byte stream containing the document.\n+     * @see #setPublicId\n+     * @see #setSystemId\n+     * @see #setEncoding\n+     * @see #setByteStream\n+     * @see #setCharacterStream\n+     */\n+    public InputSource (InputStream byteStream)\n+    {\n+\tsetByteStream(byteStream);\n+    }\n+    \n+    \n+    /**\n+     * Create a new input source with a character stream.\n+     *\n+     * <p>Application writers should use setSystemId() to provide a base \n+     * for resolving relative URIs, and may use setPublicId to include a \n+     * public identifier.</p>\n+     *\n+     * <p>The character stream shall not include a byte order mark.</p>\n+     *\n+     * @see #setPublicId\n+     * @see #setSystemId\n+     * @see #setByteStream\n+     * @see #setCharacterStream\n+     */\n+    public InputSource (Reader characterStream)\n+    {\n+\tsetCharacterStream(characterStream);\n+    }\n+    \n+    \n+    /**\n+     * Set the public identifier for this input source.\n+     *\n+     * <p>The public identifier is always optional: if the application\n+     * writer includes one, it will be provided as part of the\n+     * location information.</p>\n+     *\n+     * @param publicId The public identifier as a string.\n+     * @see #getPublicId\n+     * @see org.xml.sax.Locator#getPublicId\n+     * @see org.xml.sax.SAXParseException#getPublicId\n+     */\n+    public void setPublicId (String publicId)\n+    {\n+\tthis.publicId = publicId;\n+    }\n+    \n+    \n+    /**\n+     * Get the public identifier for this input source.\n+     *\n+     * @return The public identifier, or null if none was supplied.\n+     * @see #setPublicId\n+     */\n+    public String getPublicId ()\n+    {\n+\treturn publicId;\n+    }\n+    \n+    \n+    /**\n+     * Set the system identifier for this input source.\n+     *\n+     * <p>The system identifier is optional if there is a byte stream\n+     * or a character stream, but it is still useful to provide one,\n+     * since the application can use it to resolve relative URIs\n+     * and can include it in error messages and warnings (the parser\n+     * will attempt to open a connection to the URI only if\n+     * there is no byte stream or character stream specified).</p>\n+     *\n+     * <p>If the application knows the character encoding of the\n+     * object pointed to by the system identifier, it can register\n+     * the encoding using the setEncoding method.</p>\n+     *\n+     * <p>If the system identifier is a URL, it must be fully\n+     * resolved (it may not be a relative URL).</p>\n+     *\n+     * @param systemId The system identifier as a string.\n+     * @see #setEncoding\n+     * @see #getSystemId\n+     * @see org.xml.sax.Locator#getSystemId\n+     * @see org.xml.sax.SAXParseException#getSystemId\n+     */\n+    public void setSystemId (String systemId)\n+    {\n+\tthis.systemId = systemId;\n+    }\n+    \n+    \n+    /**\n+     * Get the system identifier for this input source.\n+     *\n+     * <p>The getEncoding method will return the character encoding\n+     * of the object pointed to, or null if unknown.</p>\n+     *\n+     * <p>If the system ID is a URL, it will be fully resolved.</p>\n+     *\n+     * @return The system identifier, or null if none was supplied.\n+     * @see #setSystemId\n+     * @see #getEncoding\n+     */\n+    public String getSystemId ()\n+    {\n+\treturn systemId;\n+    }\n+    \n+    \n+    /**\n+     * Set the byte stream for this input source.\n+     *\n+     * <p>The SAX parser will ignore this if there is also a character\n+     * stream specified, but it will use a byte stream in preference\n+     * to opening a URI connection itself.</p>\n+     *\n+     * <p>If the application knows the character encoding of the\n+     * byte stream, it should set it with the setEncoding method.</p>\n+     *\n+     * @param byteStream A byte stream containing an XML document or\n+     *        other entity.\n+     * @see #setEncoding\n+     * @see #getByteStream\n+     * @see #getEncoding\n+     * @see java.io.InputStream\n+     */\n+    public void setByteStream (InputStream byteStream)\n+    {\n+\tthis.byteStream = byteStream;\n+    }\n+    \n+    \n+    /**\n+     * Get the byte stream for this input source.\n+     *\n+     * <p>The getEncoding method will return the character\n+     * encoding for this byte stream, or null if unknown.</p>\n+     *\n+     * @return The byte stream, or null if none was supplied.\n+     * @see #getEncoding\n+     * @see #setByteStream\n+     */\n+    public InputStream getByteStream ()\n+    {\n+\treturn byteStream;\n+    }\n+    \n+    \n+    /** \n+     * Set the character encoding, if known.\n+     *\n+     * <p>The encoding must be a string acceptable for an\n+     * XML encoding declaration (see section 4.3.3 of the XML 1.0\n+     * recommendation).</p>\n+     *\n+     * <p>This method has no effect when the application provides a\n+     * character stream.</p>\n+     *\n+     * @param encoding A string describing the character encoding.\n+     * @see #setSystemId\n+     * @see #setByteStream\n+     * @see #getEncoding\n+     */\n+    public void setEncoding (String encoding)\n+    {\n+\tthis.encoding = encoding;\n+    }\n+    \n+    \n+    /**\n+     * Get the character encoding for a byte stream or URI.\n+     * This value will be ignored when the application provides a\n+     * character stream.\n+     *\n+     * @return The encoding, or null if none was supplied.\n+     * @see #setByteStream\n+     * @see #getSystemId\n+     * @see #getByteStream\n+     */\n+    public String getEncoding ()\n+    {\n+\treturn encoding;\n+    }\n+    \n+    \n+    /**\n+     * Set the character stream for this input source.\n+     *\n+     * <p>If there is a character stream specified, the SAX parser\n+     * will ignore any byte stream and will not attempt to open\n+     * a URI connection to the system identifier.</p>\n+     *\n+     * @param characterStream The character stream containing the\n+     *        XML document or other entity.\n+     * @see #getCharacterStream\n+     * @see java.io.Reader\n+     */\n+    public void setCharacterStream (Reader characterStream)\n+    {\n+\tthis.characterStream = characterStream;\n+    }\n+    \n+    \n+    /**\n+     * Get the character stream for this input source.\n+     *\n+     * @return The character stream, or null if none was supplied.\n+     * @see #setCharacterStream\n+     */\n+    public Reader getCharacterStream ()\n+    {\n+\treturn characterStream;\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal state.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    private String publicId;\n+    private String systemId;\n+    private InputStream byteStream;\n+    private String encoding;\n+    private Reader characterStream;\n+    \n+}\n+\n+// end of InputSource.java"}, {"sha": "d94c3ea4abd2b6789679d115cb7f30633f562ed7", "filename": "libjava/org/xml/sax/Locator.java", "status": "modified", "additions": 136, "deletions": 126, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FLocator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FLocator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FLocator.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,126 +1,136 @@\n-// SAX locator interface for document events.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: Locator.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-\r\n-/**\r\n- * Interface for associating a SAX event with a document location.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>If a SAX parser provides location information to the SAX\r\n- * application, it does so by implementing this interface and then\r\n- * passing an instance to the application using the content\r\n- * handler's {@link org.xml.sax.ContentHandler#setDocumentLocator\r\n- * setDocumentLocator} method.  The application can use the\r\n- * object to obtain the location of any other content handler event\r\n- * in the XML source document.</p>\r\n- *\r\n- * <p>Note that the results returned by the object will be valid only\r\n- * during the scope of each content handler method: the application\r\n- * will receive unpredictable results if it attempts to use the\r\n- * locator at any other time.</p>\r\n- *\r\n- * <p>SAX parsers are not required to supply a locator, but they are\r\n- * very strongly encouraged to do so.  If the parser supplies a\r\n- * locator, it must do so before reporting any other document events.\r\n- * If no locator has been set by the time the application receives\r\n- * the {@link org.xml.sax.ContentHandler#startDocument startDocument}\r\n- * event, the application should assume that a locator is not \r\n- * available.</p>\r\n- *\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.ContentHandler#setDocumentLocator \r\n- */\r\n-public interface Locator {\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the public identifier for the current document event.\r\n-     *\r\n-     * <p>The return value is the public identifier of the document\r\n-     * entity or of the external parsed entity in which the markup\r\n-     * triggering the event appears.</p>\r\n-     *\r\n-     * @return A string containing the public identifier, or\r\n-     *         null if none is available.\r\n-     * @see #getSystemId\r\n-     */\r\n-    public abstract String getPublicId ();\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the system identifier for the current document event.\r\n-     *\r\n-     * <p>The return value is the system identifier of the document\r\n-     * entity or of the external parsed entity in which the markup\r\n-     * triggering the event appears.</p>\r\n-     *\r\n-     * <p>If the system identifier is a URL, the parser must resolve it\r\n-     * fully before passing it to the application.</p>\r\n-     *\r\n-     * @return A string containing the system identifier, or null\r\n-     *         if none is available.\r\n-     * @see #getPublicId\r\n-     */\r\n-    public abstract String getSystemId ();\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the line number where the current document event ends.\r\n-     *\r\n-     * <p><strong>Warning:</strong> The return value from the method\r\n-     * is intended only as an approximation for the sake of error\r\n-     * reporting; it is not intended to provide sufficient information\r\n-     * to edit the character content of the original XML document.</p>\r\n-     *\r\n-     * <p>The return value is an approximation of the line number\r\n-     * in the document entity or external parsed entity where the\r\n-     * markup triggering the event appears.</p>\r\n-     *\r\n-     * <p>If possible, the SAX driver should provide the line position \r\n-     * of the first character after the text associated with the document \r\n-     * event.  The first line in the document is line 1.</p>\r\n-     *\r\n-     * @return The line number, or -1 if none is available.\r\n-     * @see #getColumnNumber\r\n-     */\r\n-    public abstract int getLineNumber ();\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the column number where the current document event ends.\r\n-     *\r\n-     * <p><strong>Warning:</strong> The return value from the method\r\n-     * is intended only as an approximation for the sake of error\r\n-     * reporting; it is not intended to provide sufficient information\r\n-     * to edit the character content of the original XML document.</p>\r\n-     *\r\n-     * <p>The return value is an approximation of the column number\r\n-     * in the document entity or external parsed entity where the\r\n-     * markup triggering the event appears.</p>\r\n-     *\r\n-     * <p>If possible, the SAX driver should provide the line position \r\n-     * of the first character after the text associated with the document \r\n-     * event.</p>\r\n-     *\r\n-     * <p>If possible, the SAX driver should provide the line position \r\n-     * of the first character after the text associated with the document \r\n-     * event.  The first column in each line is column 1.</p>\r\n-     *\r\n-     * @return The column number, or -1 if none is available.\r\n-     * @see #getLineNumber\r\n-     */\r\n-    public abstract int getColumnNumber ();\r\n-    \r\n-}\r\n-\r\n-// end of Locator.java\r\n+// SAX locator interface for document events.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: Locator.java,v 1.4.2.5 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+\n+/**\n+ * Interface for associating a SAX event with a document location.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>If a SAX parser provides location information to the SAX\n+ * application, it does so by implementing this interface and then\n+ * passing an instance to the application using the content\n+ * handler's {@link org.xml.sax.ContentHandler#setDocumentLocator\n+ * setDocumentLocator} method.  The application can use the\n+ * object to obtain the location of any other SAX event\n+ * in the XML source document.</p>\n+ *\n+ * <p>Note that the results returned by the object will be valid only\n+ * during the scope of each callback method: the application\n+ * will receive unpredictable results if it attempts to use the\n+ * locator at any other time, or after parsing completes.</p>\n+ *\n+ * <p>SAX parsers are not required to supply a locator, but they are\n+ * very strongly encouraged to do so.  If the parser supplies a\n+ * locator, it must do so before reporting any other document events.\n+ * If no locator has been set by the time the application receives\n+ * the {@link org.xml.sax.ContentHandler#startDocument startDocument}\n+ * event, the application should assume that a locator is not \n+ * available.</p>\n+ *\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.ContentHandler#setDocumentLocator \n+ */\n+public interface Locator {\n+    \n+    \n+    /**\n+     * Return the public identifier for the current document event.\n+     *\n+     * <p>The return value is the public identifier of the document\n+     * entity or of the external parsed entity in which the markup\n+     * triggering the event appears.</p>\n+     *\n+     * @return A string containing the public identifier, or\n+     *         null if none is available.\n+     * @see #getSystemId\n+     */\n+    public abstract String getPublicId ();\n+    \n+    \n+    /**\n+     * Return the system identifier for the current document event.\n+     *\n+     * <p>The return value is the system identifier of the document\n+     * entity or of the external parsed entity in which the markup\n+     * triggering the event appears.</p>\n+     *\n+     * <p>If the system identifier is a URL, the parser must resolve it\n+     * fully before passing it to the application.  For example, a file\n+     * name must always be provided as a <em>file:...</em> URL, and other\n+     * kinds of relative URI are also resolved against their bases.</p>\n+     *\n+     * @return A string containing the system identifier, or null\n+     *         if none is available.\n+     * @see #getPublicId\n+     */\n+    public abstract String getSystemId ();\n+    \n+    \n+    /**\n+     * Return the line number where the current document event ends.\n+     * Lines are delimited by line ends, which are defined in\n+     * the XML specification.\n+     *\n+     * <p><strong>Warning:</strong> The return value from the method\n+     * is intended only as an approximation for the sake of diagnostics;\n+     * it is not intended to provide sufficient information\n+     * to edit the character content of the original XML document.\n+     * In some cases, these \"line\" numbers match what would be displayed\n+     * as columns, and in others they may not match the source text\n+     * due to internal entity expansion.  </p>\n+     *\n+     * <p>The return value is an approximation of the line number\n+     * in the document entity or external parsed entity where the\n+     * markup triggering the event appears.</p>\n+     *\n+     * <p>If possible, the SAX driver should provide the line position \n+     * of the first character after the text associated with the document \n+     * event.  The first line is line 1.</p>\n+     *\n+     * @return The line number, or -1 if none is available.\n+     * @see #getColumnNumber\n+     */\n+    public abstract int getLineNumber ();\n+    \n+    \n+    /**\n+     * Return the column number where the current document event ends.\n+     * This is one-based number of Java <code>char</code> values since\n+     * the last line end.\n+     *\n+     * <p><strong>Warning:</strong> The return value from the method\n+     * is intended only as an approximation for the sake of diagnostics;\n+     * it is not intended to provide sufficient information\n+     * to edit the character content of the original XML document.\n+     * For example, when lines contain combining character sequences, wide\n+     * characters, surrogate pairs, or bi-directional text, the value may\n+     * not correspond to the column in a text editor's display. </p>\n+     *\n+     * <p>The return value is an approximation of the column number\n+     * in the document entity or external parsed entity where the\n+     * markup triggering the event appears.</p>\n+     *\n+     * <p>If possible, the SAX driver should provide the line position \n+     * of the first character after the text associated with the document \n+     * event.  The first column in each line is column 1.</p>\n+     *\n+     * @return The column number, or -1 if none is available.\n+     * @see #getLineNumber\n+     */\n+    public abstract int getColumnNumber ();\n+    \n+}\n+\n+// end of Locator.java"}, {"sha": "2999265c4c396631595c5bdbce8f28b208a6a642", "filename": "libjava/org/xml/sax/Parser.java", "status": "modified", "additions": 209, "deletions": 207, "changes": 416, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FParser.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,207 +1,209 @@\n-// SAX parser interface.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: Parser.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-import java.io.IOException;\r\n-import java.util.Locale;\r\n-\r\n-\r\n-/**\r\n- * Basic interface for SAX (Simple API for XML) parsers.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This was the main event supplier interface for SAX1; it has\r\n- * been replaced in SAX2 by {@link org.xml.sax.XMLReader XMLReader},\r\n- * which includes Namespace support and sophisticated configurability\r\n- * and extensibility.</p>\r\n- *\r\n- * <p>All SAX1 parsers must implement this basic interface: it allows\r\n- * applications to register handlers for different types of events\r\n- * and to initiate a parse from a URI, or a character stream.</p>\r\n- *\r\n- * <p>All SAX1 parsers must also implement a zero-argument constructor\r\n- * (though other constructors are also allowed).</p>\r\n- *\r\n- * <p>SAX1 parsers are reusable but not re-entrant: the application\r\n- * may reuse a parser object (possibly with a different input source)\r\n- * once the first parse has completed successfully, but it may not\r\n- * invoke the parse() methods recursively within a parse.</p>\r\n- *\r\n- * @deprecated This interface has been replaced by the SAX2\r\n- *             {@link org.xml.sax.XMLReader XMLReader}\r\n- *             interface, which includes Namespace support.\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.EntityResolver\r\n- * @see org.xml.sax.DTDHandler\r\n- * @see org.xml.sax.DocumentHandler\r\n- * @see org.xml.sax.ErrorHandler\r\n- * @see org.xml.sax.HandlerBase\r\n- * @see org.xml.sax.InputSource\r\n- */\r\n-public interface Parser \r\n-{\r\n-    \r\n-    /**\r\n-     * Allow an application to request a locale for errors and warnings.\r\n-     *\r\n-     * <p>SAX parsers are not required to provide localisation for errors\r\n-     * and warnings; if they cannot support the requested locale,\r\n-     * however, they must throw a SAX exception.  Applications may\r\n-     * not request a locale change in the middle of a parse.</p>\r\n-     *\r\n-     * @param locale A Java Locale object.\r\n-     * @exception org.xml.sax.SAXException Throws an exception\r\n-     *            (using the previous or default locale) if the \r\n-     *            requested locale is not supported.\r\n-     * @see org.xml.sax.SAXException\r\n-     * @see org.xml.sax.SAXParseException\r\n-     */\r\n-    public abstract void setLocale (Locale locale)\r\n-\tthrows SAXException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Allow an application to register a custom entity resolver.\r\n-     *\r\n-     * <p>If the application does not register an entity resolver, the\r\n-     * SAX parser will resolve system identifiers and open connections\r\n-     * to entities itself (this is the default behaviour implemented in\r\n-     * HandlerBase).</p>\r\n-     *\r\n-     * <p>Applications may register a new or different entity resolver\r\n-     * in the middle of a parse, and the SAX parser must begin using\r\n-     * the new resolver immediately.</p>\r\n-     *\r\n-     * @param resolver The object for resolving entities.\r\n-     * @see EntityResolver\r\n-     * @see HandlerBase\r\n-     */\r\n-    public abstract void setEntityResolver (EntityResolver resolver);\r\n-    \r\n-    \r\n-    /**\r\n-     * Allow an application to register a DTD event handler.\r\n-     *\r\n-     * <p>If the application does not register a DTD handler, all DTD\r\n-     * events reported by the SAX parser will be silently\r\n-     * ignored (this is the default behaviour implemented by\r\n-     * HandlerBase).</p>\r\n-     *\r\n-     * <p>Applications may register a new or different\r\n-     * handler in the middle of a parse, and the SAX parser must\r\n-     * begin using the new handler immediately.</p>\r\n-     *\r\n-     * @param handler The DTD handler.\r\n-     * @see DTDHandler\r\n-     * @see HandlerBase\r\n-     */\r\n-    public abstract void setDTDHandler (DTDHandler handler);\r\n-    \r\n-    \r\n-    /**\r\n-     * Allow an application to register a document event handler.\r\n-     *\r\n-     * <p>If the application does not register a document handler, all\r\n-     * document events reported by the SAX parser will be silently\r\n-     * ignored (this is the default behaviour implemented by\r\n-     * HandlerBase).</p>\r\n-     *\r\n-     * <p>Applications may register a new or different handler in the\r\n-     * middle of a parse, and the SAX parser must begin using the new\r\n-     * handler immediately.</p>\r\n-     *\r\n-     * @param handler The document handler.\r\n-     * @see DocumentHandler\r\n-     * @see HandlerBase\r\n-     */\r\n-    public abstract void setDocumentHandler (DocumentHandler handler);\r\n-    \r\n-    \r\n-    /**\r\n-     * Allow an application to register an error event handler.\r\n-     *\r\n-     * <p>If the application does not register an error event handler,\r\n-     * all error events reported by the SAX parser will be silently\r\n-     * ignored, except for fatalError, which will throw a SAXException\r\n-     * (this is the default behaviour implemented by HandlerBase).</p>\r\n-     *\r\n-     * <p>Applications may register a new or different handler in the\r\n-     * middle of a parse, and the SAX parser must begin using the new\r\n-     * handler immediately.</p>\r\n-     *\r\n-     * @param handler The error handler.\r\n-     * @see ErrorHandler\r\n-     * @see SAXException\r\n-     * @see HandlerBase\r\n-     */\r\n-    public abstract void setErrorHandler (ErrorHandler handler);\r\n-    \r\n-    \r\n-    /**\r\n-     * Parse an XML document.\r\n-     *\r\n-     * <p>The application can use this method to instruct the SAX parser\r\n-     * to begin parsing an XML document from any valid input\r\n-     * source (a character stream, a byte stream, or a URI).</p>\r\n-     *\r\n-     * <p>Applications may not invoke this method while a parse is in\r\n-     * progress (they should create a new Parser instead for each\r\n-     * additional XML document).  Once a parse is complete, an\r\n-     * application may reuse the same Parser object, possibly with a\r\n-     * different input source.</p>\r\n-     *\r\n-     * @param source The input source for the top-level of the\r\n-     *        XML document.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @exception java.io.IOException An IO exception from the parser,\r\n-     *            possibly from a byte stream or character stream\r\n-     *            supplied by the application.\r\n-     * @see org.xml.sax.InputSource\r\n-     * @see #parse(java.lang.String)\r\n-     * @see #setEntityResolver\r\n-     * @see #setDTDHandler\r\n-     * @see #setDocumentHandler\r\n-     * @see #setErrorHandler\r\n-     */\r\n-    public abstract void parse (InputSource source)\r\n-\tthrows SAXException, IOException;\r\n-    \r\n-    \r\n-    /**\r\n-     * Parse an XML document from a system identifier (URI).\r\n-     *\r\n-     * <p>This method is a shortcut for the common case of reading a\r\n-     * document from a system identifier.  It is the exact\r\n-     * equivalent of the following:</p>\r\n-     *\r\n-     * <pre>\r\n-     * parse(new InputSource(systemId));\r\n-     * </pre>\r\n-     *\r\n-     * <p>If the system identifier is a URL, it must be fully resolved\r\n-     * by the application before it is passed to the parser.</p>\r\n-     *\r\n-     * @param systemId The system identifier (URI).\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @exception java.io.IOException An IO exception from the parser,\r\n-     *            possibly from a byte stream or character stream\r\n-     *            supplied by the application.\r\n-     * @see #parse(org.xml.sax.InputSource)\r\n-     */\r\n-    public abstract void parse (String systemId)\r\n-\tthrows SAXException, IOException;\r\n-    \r\n-}\r\n-\r\n-// end of Parser.java\r\n+// SAX parser interface.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: Parser.java,v 1.3.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+\n+/**\n+ * Basic interface for SAX (Simple API for XML) parsers.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This was the main event supplier interface for SAX1; it has\n+ * been replaced in SAX2 by {@link org.xml.sax.XMLReader XMLReader},\n+ * which includes Namespace support and sophisticated configurability\n+ * and extensibility.</p>\n+ *\n+ * <p>All SAX1 parsers must implement this basic interface: it allows\n+ * applications to register handlers for different types of events\n+ * and to initiate a parse from a URI, or a character stream.</p>\n+ *\n+ * <p>All SAX1 parsers must also implement a zero-argument constructor\n+ * (though other constructors are also allowed).</p>\n+ *\n+ * <p>SAX1 parsers are reusable but not re-entrant: the application\n+ * may reuse a parser object (possibly with a different input source)\n+ * once the first parse has completed successfully, but it may not\n+ * invoke the parse() methods recursively within a parse.</p>\n+ *\n+ * @deprecated This interface has been replaced by the SAX2\n+ *             {@link org.xml.sax.XMLReader XMLReader}\n+ *             interface, which includes Namespace support.\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.EntityResolver\n+ * @see org.xml.sax.DTDHandler\n+ * @see org.xml.sax.DocumentHandler\n+ * @see org.xml.sax.ErrorHandler\n+ * @see org.xml.sax.HandlerBase\n+ * @see org.xml.sax.InputSource\n+ */\n+public interface Parser \n+{\n+    \n+    /**\n+     * Allow an application to request a locale for errors and warnings.\n+     *\n+     * <p>SAX parsers are not required to provide localisation for errors\n+     * and warnings; if they cannot support the requested locale,\n+     * however, they must throw a SAX exception.  Applications may\n+     * not request a locale change in the middle of a parse.</p>\n+     *\n+     * @param locale A Java Locale object.\n+     * @exception org.xml.sax.SAXException Throws an exception\n+     *            (using the previous or default locale) if the \n+     *            requested locale is not supported.\n+     * @see org.xml.sax.SAXException\n+     * @see org.xml.sax.SAXParseException\n+     */\n+    public abstract void setLocale (Locale locale)\n+\tthrows SAXException;\n+    \n+    \n+    /**\n+     * Allow an application to register a custom entity resolver.\n+     *\n+     * <p>If the application does not register an entity resolver, the\n+     * SAX parser will resolve system identifiers and open connections\n+     * to entities itself (this is the default behaviour implemented in\n+     * HandlerBase).</p>\n+     *\n+     * <p>Applications may register a new or different entity resolver\n+     * in the middle of a parse, and the SAX parser must begin using\n+     * the new resolver immediately.</p>\n+     *\n+     * @param resolver The object for resolving entities.\n+     * @see EntityResolver\n+     * @see HandlerBase\n+     */\n+    public abstract void setEntityResolver (EntityResolver resolver);\n+    \n+    \n+    /**\n+     * Allow an application to register a DTD event handler.\n+     *\n+     * <p>If the application does not register a DTD handler, all DTD\n+     * events reported by the SAX parser will be silently\n+     * ignored (this is the default behaviour implemented by\n+     * HandlerBase).</p>\n+     *\n+     * <p>Applications may register a new or different\n+     * handler in the middle of a parse, and the SAX parser must\n+     * begin using the new handler immediately.</p>\n+     *\n+     * @param handler The DTD handler.\n+     * @see DTDHandler\n+     * @see HandlerBase\n+     */\n+    public abstract void setDTDHandler (DTDHandler handler);\n+    \n+    \n+    /**\n+     * Allow an application to register a document event handler.\n+     *\n+     * <p>If the application does not register a document handler, all\n+     * document events reported by the SAX parser will be silently\n+     * ignored (this is the default behaviour implemented by\n+     * HandlerBase).</p>\n+     *\n+     * <p>Applications may register a new or different handler in the\n+     * middle of a parse, and the SAX parser must begin using the new\n+     * handler immediately.</p>\n+     *\n+     * @param handler The document handler.\n+     * @see DocumentHandler\n+     * @see HandlerBase\n+     */\n+    public abstract void setDocumentHandler (DocumentHandler handler);\n+    \n+    \n+    /**\n+     * Allow an application to register an error event handler.\n+     *\n+     * <p>If the application does not register an error event handler,\n+     * all error events reported by the SAX parser will be silently\n+     * ignored, except for fatalError, which will throw a SAXException\n+     * (this is the default behaviour implemented by HandlerBase).</p>\n+     *\n+     * <p>Applications may register a new or different handler in the\n+     * middle of a parse, and the SAX parser must begin using the new\n+     * handler immediately.</p>\n+     *\n+     * @param handler The error handler.\n+     * @see ErrorHandler\n+     * @see SAXException\n+     * @see HandlerBase\n+     */\n+    public abstract void setErrorHandler (ErrorHandler handler);\n+    \n+    \n+    /**\n+     * Parse an XML document.\n+     *\n+     * <p>The application can use this method to instruct the SAX parser\n+     * to begin parsing an XML document from any valid input\n+     * source (a character stream, a byte stream, or a URI).</p>\n+     *\n+     * <p>Applications may not invoke this method while a parse is in\n+     * progress (they should create a new Parser instead for each\n+     * additional XML document).  Once a parse is complete, an\n+     * application may reuse the same Parser object, possibly with a\n+     * different input source.</p>\n+     *\n+     * @param source The input source for the top-level of the\n+     *        XML document.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @exception java.io.IOException An IO exception from the parser,\n+     *            possibly from a byte stream or character stream\n+     *            supplied by the application.\n+     * @see org.xml.sax.InputSource\n+     * @see #parse(java.lang.String)\n+     * @see #setEntityResolver\n+     * @see #setDTDHandler\n+     * @see #setDocumentHandler\n+     * @see #setErrorHandler\n+     */\n+    public abstract void parse (InputSource source)\n+\tthrows SAXException, IOException;\n+    \n+    \n+    /**\n+     * Parse an XML document from a system identifier (URI).\n+     *\n+     * <p>This method is a shortcut for the common case of reading a\n+     * document from a system identifier.  It is the exact\n+     * equivalent of the following:</p>\n+     *\n+     * <pre>\n+     * parse(new InputSource(systemId));\n+     * </pre>\n+     *\n+     * <p>If the system identifier is a URL, it must be fully resolved\n+     * by the application before it is passed to the parser.</p>\n+     *\n+     * @param systemId The system identifier (URI).\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @exception java.io.IOException An IO exception from the parser,\n+     *            possibly from a byte stream or character stream\n+     *            supplied by the application.\n+     * @see #parse(org.xml.sax.InputSource)\n+     */\n+    public abstract void parse (String systemId)\n+\tthrows SAXException, IOException;\n+    \n+}\n+\n+// end of Parser.java"}, {"sha": "b11d998edadc6bb4dba59b25a593336265c73df0", "filename": "libjava/org/xml/sax/SAXException.java", "status": "modified", "additions": 153, "deletions": 144, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FSAXException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FSAXException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FSAXException.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,144 +1,153 @@\n-// SAX exception class.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: SAXException.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-/**\r\n- * Encapsulate a general SAX error or warning.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class can contain basic error or warning information from\r\n- * either the XML parser or the application: a parser writer or\r\n- * application writer can subclass it to provide additional\r\n- * functionality.  SAX handlers may throw this exception or\r\n- * any exception subclassed from it.</p>\r\n- *\r\n- * <p>If the application needs to pass through other types of\r\n- * exceptions, it must wrap those exceptions in a SAXException\r\n- * or an exception derived from a SAXException.</p>\r\n- *\r\n- * <p>If the parser or application needs to include information about a\r\n- * specific location in an XML document, it should use the\r\n- * {@link org.xml.sax.SAXParseException SAXParseException} subclass.</p>\r\n- *\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.SAXParseException\r\n- */\r\n-public class SAXException extends Exception {\r\n-    \r\n-    \r\n-    /**\r\n-     * Create a new SAXException.\r\n-     *\r\n-     * @param message The error or warning message.\r\n-     * @see org.xml.sax.Parser#setLocale\r\n-     */\r\n-    public SAXException (String message) {\r\n-\tsuper(message);\r\n-\tthis.exception = null;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Create a new SAXException wrapping an existing exception.\r\n-     *\r\n-     * <p>The existing exception will be embedded in the new\r\n-     * one, and its message will become the default message for\r\n-     * the SAXException.</p>\r\n-     *\r\n-     * @param e The exception to be wrapped in a SAXException.\r\n-     */\r\n-    public SAXException (Exception e)\r\n-    {\r\n-\tsuper();\r\n-\tthis.exception = e;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Create a new SAXException from an existing exception.\r\n-     *\r\n-     * <p>The existing exception will be embedded in the new\r\n-     * one, but the new exception will have its own message.</p>\r\n-     *\r\n-     * @param message The detail message.\r\n-     * @param e The exception to be wrapped in a SAXException.\r\n-     * @see org.xml.sax.Parser#setLocale\r\n-     */\r\n-    public SAXException (String message, Exception e)\r\n-    {\r\n-\tsuper(message);\r\n-\tthis.exception = e;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Return a detail message for this exception.\r\n-     *\r\n-     * <p>If there is an embedded exception, and if the SAXException\r\n-     * has no detail message of its own, this method will return\r\n-     * the detail message from the embedded exception.</p>\r\n-     *\r\n-     * @return The error or warning message.\r\n-     * @see org.xml.sax.Parser#setLocale\r\n-     */\r\n-    public String getMessage ()\r\n-    {\r\n-\tString message = super.getMessage();\r\n-\t\r\n-\tif (message == null && exception != null) {\r\n-\t    return exception.getMessage();\r\n-\t} else {\r\n-\t    return message;\r\n-\t}\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the embedded exception, if any.\r\n-     *\r\n-     * @return The embedded exception, or null if there is none.\r\n-     */\r\n-    public Exception getException ()\r\n-    {\r\n-\treturn exception;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Override toString to pick up any embedded exception.\r\n-     *\r\n-     * @return A string representation of this exception.\r\n-     */\r\n-    public String toString ()\r\n-    {\r\n-\tif (exception != null) {\r\n-\t    return exception.toString();\r\n-\t} else {\r\n-\t    return super.toString();\r\n-\t}\r\n-    }\r\n-    \r\n-    \r\n-    \f\r\n-    //////////////////////////////////////////////////////////////////////\r\n-    // Internal state.\r\n-    //////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * @serial The embedded exception if tunnelling, or null.\r\n-     */    \r\n-    private Exception exception;\r\n-    \r\n-}\r\n-\r\n-// end of SAXException.java\r\n+// SAX exception class.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: SAXException.java,v 1.4.2.4 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+/**\n+ * Encapsulate a general SAX error or warning.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class can contain basic error or warning information from\n+ * either the XML parser or the application: a parser writer or\n+ * application writer can subclass it to provide additional\n+ * functionality.  SAX handlers may throw this exception or\n+ * any exception subclassed from it.</p>\n+ *\n+ * <p>If the application needs to pass through other types of\n+ * exceptions, it must wrap those exceptions in a SAXException\n+ * or an exception derived from a SAXException.</p>\n+ *\n+ * <p>If the parser or application needs to include information about a\n+ * specific location in an XML document, it should use the\n+ * {@link org.xml.sax.SAXParseException SAXParseException} subclass.</p>\n+ *\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.SAXParseException\n+ */\n+public class SAXException extends Exception {\n+\n+\n+    /**\n+     * Create a new SAXException.\n+     */\n+    public SAXException ()\n+    {\n+\tsuper();\n+\tthis.exception = null;\n+    }\n+    \n+    \n+    /**\n+     * Create a new SAXException.\n+     *\n+     * @param message The error or warning message.\n+     */\n+    public SAXException (String message) {\n+\tsuper(message);\n+\tthis.exception = null;\n+    }\n+    \n+    \n+    /**\n+     * Create a new SAXException wrapping an existing exception.\n+     *\n+     * <p>The existing exception will be embedded in the new\n+     * one, and its message will become the default message for\n+     * the SAXException.</p>\n+     *\n+     * @param e The exception to be wrapped in a SAXException.\n+     */\n+    public SAXException (Exception e)\n+    {\n+\tsuper();\n+\tthis.exception = e;\n+    }\n+    \n+    \n+    /**\n+     * Create a new SAXException from an existing exception.\n+     *\n+     * <p>The existing exception will be embedded in the new\n+     * one, but the new exception will have its own message.</p>\n+     *\n+     * @param message The detail message.\n+     * @param e The exception to be wrapped in a SAXException.\n+     */\n+    public SAXException (String message, Exception e)\n+    {\n+\tsuper(message);\n+\tthis.exception = e;\n+    }\n+    \n+    \n+    /**\n+     * Return a detail message for this exception.\n+     *\n+     * <p>If there is an embedded exception, and if the SAXException\n+     * has no detail message of its own, this method will return\n+     * the detail message from the embedded exception.</p>\n+     *\n+     * @return The error or warning message.\n+     */\n+    public String getMessage ()\n+    {\n+\tString message = super.getMessage();\n+\t\n+\tif (message == null && exception != null) {\n+\t    return exception.getMessage();\n+\t} else {\n+\t    return message;\n+\t}\n+    }\n+    \n+    \n+    /**\n+     * Return the embedded exception, if any.\n+     *\n+     * @return The embedded exception, or null if there is none.\n+     */\n+    public Exception getException ()\n+    {\n+\treturn exception;\n+    }\n+\n+\n+    /**\n+     * Override toString to pick up any embedded exception.\n+     *\n+     * @return A string representation of this exception.\n+     */\n+    public String toString ()\n+    {\n+\tif (exception != null) {\n+\t    return exception.toString();\n+\t} else {\n+\t    return super.toString();\n+\t}\n+    }\n+    \n+    \n+    \f\n+    //////////////////////////////////////////////////////////////////////\n+    // Internal state.\n+    //////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * @serial The embedded exception if tunnelling, or null.\n+     */    \n+    private Exception exception;\n+    \n+}\n+\n+// end of SAXException.java"}, {"sha": "83aac69a7d38d70c13ff3e8a2e35b0b65e764330", "filename": "libjava/org/xml/sax/SAXNotRecognizedException.java", "status": "modified", "additions": 55, "deletions": 44, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FSAXNotRecognizedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FSAXNotRecognizedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FSAXNotRecognizedException.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,44 +1,55 @@\n-// SAXNotRecognizedException.java - unrecognized feature or value.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the Public Domain.\r\n-\r\n-// $Id: SAXNotRecognizedException.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-\r\n-package org.xml.sax;\r\n-\r\n-\r\n-/**\r\n- * Exception class for an unrecognized identifier.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>An XMLReader will throw this exception when it finds an\r\n- * unrecognized feature or property identifier; SAX applications and\r\n- * extensions may use this class for other, similar purposes.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.SAXNotSupportedException\r\n- */\r\n-public class SAXNotRecognizedException extends SAXException\r\n-{\r\n-\r\n-    /**\r\n-     * Construct a new exception with the given message.\r\n-     *\r\n-     * @param message The text message of the exception.\r\n-     */\r\n-    public SAXNotRecognizedException (String message)\r\n-    {\r\n-\tsuper(message);\r\n-    }\r\n-\r\n-}\r\n-\r\n-// end of SAXNotRecognizedException.java\r\n+// SAXNotRecognizedException.java - unrecognized feature or value.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the Public Domain.\n+\n+// $Id: SAXNotRecognizedException.java,v 1.4.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+\n+package org.xml.sax;\n+\n+\n+/**\n+ * Exception class for an unrecognized identifier.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>An XMLReader will throw this exception when it finds an\n+ * unrecognized feature or property identifier; SAX applications and\n+ * extensions may use this class for other, similar purposes.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.SAXNotSupportedException\n+ */\n+public class SAXNotRecognizedException extends SAXException\n+{\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public SAXNotRecognizedException ()\n+    {\n+\tsuper();\n+    }\n+\n+\n+    /**\n+     * Construct a new exception with the given message.\n+     *\n+     * @param message The text message of the exception.\n+     */\n+    public SAXNotRecognizedException (String message)\n+    {\n+\tsuper(message);\n+    }\n+\n+}\n+\n+// end of SAXNotRecognizedException.java"}, {"sha": "2939eb192a55976a46c795213dde232adfa0734b", "filename": "libjava/org/xml/sax/SAXNotSupportedException.java", "status": "modified", "additions": 55, "deletions": 44, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FSAXNotSupportedException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FSAXNotSupportedException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FSAXNotSupportedException.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,44 +1,55 @@\n-// SAXNotSupportedException.java - unsupported feature or value.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the Public Domain.\r\n-\r\n-// $Id: SAXNotSupportedException.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-\r\n-package org.xml.sax;\r\n-\r\n-/**\r\n- * Exception class for an unsupported operation.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>An XMLReader will throw this exception when it recognizes a\r\n- * feature or property identifier, but cannot perform the requested\r\n- * operation (setting a state or value).  Other SAX2 applications and\r\n- * extensions may use this class for similar purposes.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.SAXNotRecognizedException \r\n- */\r\n-public class SAXNotSupportedException extends SAXException\r\n-{\r\n-\r\n-    /**\r\n-     * Construct a new exception with the given message.\r\n-     *\r\n-     * @param message The text message of the exception.\r\n-     */\r\n-    public SAXNotSupportedException (String message)\r\n-    {\r\n-\tsuper(message);\r\n-    }\r\n-\r\n-}\r\n-\r\n-// end of SAXNotSupportedException.java\r\n+// SAXNotSupportedException.java - unsupported feature or value.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the Public Domain.\n+\n+// $Id: SAXNotSupportedException.java,v 1.4.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+\n+package org.xml.sax;\n+\n+/**\n+ * Exception class for an unsupported operation.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>An XMLReader will throw this exception when it recognizes a\n+ * feature or property identifier, but cannot perform the requested\n+ * operation (setting a state or value).  Other SAX2 applications and\n+ * extensions may use this class for similar purposes.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.SAXNotRecognizedException \n+ */\n+public class SAXNotSupportedException extends SAXException\n+{\n+\n+    /**\n+     * Construct a new exception with no message.\n+     */\n+    public SAXNotSupportedException ()\n+    {\n+\tsuper();\n+    }\n+\n+\n+    /**\n+     * Construct a new exception with the given message.\n+     *\n+     * @param message The text message of the exception.\n+     */\n+    public SAXNotSupportedException (String message)\n+    {\n+\tsuper(message);\n+    }\n+\n+}\n+\n+// end of SAXNotSupportedException.java"}, {"sha": "e87d79f3f741732b49c0fc5cda972040e8683188", "filename": "libjava/org/xml/sax/SAXParseException.java", "status": "modified", "additions": 270, "deletions": 264, "changes": 534, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FSAXParseException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FSAXParseException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FSAXParseException.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,264 +1,270 @@\n-// SAX exception class.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: SAXParseException.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-/**\r\n- * Encapsulate an XML parse error or warning.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This exception will include information for locating the error\r\n- * in the original XML document.  Note that although the application\r\n- * will receive a SAXParseException as the argument to the handlers\r\n- * in the {@link org.xml.sax.ErrorHandler ErrorHandler} interface, \r\n- * the application is not actually required to throw the exception; \r\n- * instead, it can simply read the information in it and take a \r\n- * different action.</p>\r\n- *\r\n- * <p>Since this exception is a subclass of {@link org.xml.sax.SAXException \r\n- * SAXException}, it inherits the ability to wrap another exception.</p>\r\n- *\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.SAXException\r\n- * @see org.xml.sax.Locator\r\n- * @see org.xml.sax.ErrorHandler\r\n- */\r\n-public class SAXParseException extends SAXException {\r\n-    \r\n-    \f\r\n-    //////////////////////////////////////////////////////////////////////\r\n-    // Constructors.\r\n-    //////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Create a new SAXParseException from a message and a Locator.\r\n-     *\r\n-     * <p>This constructor is especially useful when an application is\r\n-     * creating its own exception from within a {@link org.xml.sax.ContentHandler\r\n-     * ContentHandler} callback.</p>\r\n-     *\r\n-     * @param message The error or warning message.\r\n-     * @param locator The locator object for the error or warning (may be\r\n-     *        null).\r\n-     * @see org.xml.sax.Locator\r\n-     * @see org.xml.sax.Parser#setLocale \r\n-     */\r\n-    public SAXParseException (String message, Locator locator) {\r\n-\tsuper(message);\r\n-\tif (locator != null) {\r\n-\t    init(locator.getPublicId(), locator.getSystemId(),\r\n-\t\t locator.getLineNumber(), locator.getColumnNumber());\r\n-\t} else {\r\n-\t    init(null, null, -1, -1);\r\n-\t}\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Wrap an existing exception in a SAXParseException.\r\n-     *\r\n-     * <p>This constructor is especially useful when an application is\r\n-     * creating its own exception from within a {@link org.xml.sax.ContentHandler\r\n-     * ContentHandler} callback, and needs to wrap an existing exception that is not a\r\n-     * subclass of {@link org.xml.sax.SAXException SAXException}.</p>\r\n-     *\r\n-     * @param message The error or warning message, or null to\r\n-     *                use the message from the embedded exception.\r\n-     * @param locator The locator object for the error or warning (may be\r\n-     *        null).\r\n-     * @param e Any exception.\r\n-     * @see org.xml.sax.Locator\r\n-     * @see org.xml.sax.Parser#setLocale\r\n-     */\r\n-    public SAXParseException (String message, Locator locator,\r\n-\t\t\t      Exception e) {\r\n-\tsuper(message, e);\r\n-\tif (locator != null) {\r\n-\t    init(locator.getPublicId(), locator.getSystemId(),\r\n-\t\t locator.getLineNumber(), locator.getColumnNumber());\r\n-\t} else {\r\n-\t    init(null, null, -1, -1);\r\n-\t}\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Create a new SAXParseException.\r\n-     *\r\n-     * <p>This constructor is most useful for parser writers.</p>\r\n-     *\r\n-     * <p>If the system identifier is a URL, the parser must resolve it\r\n-     * fully before creating the exception.</p>\r\n-     *\r\n-     * @param message The error or warning message.\r\n-     * @param publicId The public identifier of the entity that generated\r\n-     *                 the error or warning.\r\n-     * @param systemId The system identifier of the entity that generated\r\n-     *                 the error or warning.\r\n-     * @param lineNumber The line number of the end of the text that\r\n-     *                   caused the error or warning.\r\n-     * @param columnNumber The column number of the end of the text that\r\n-     *                     cause the error or warning.\r\n-     * @see org.xml.sax.Parser#setLocale\r\n-     */\r\n-    public SAXParseException (String message, String publicId, String systemId,\r\n-\t\t\t      int lineNumber, int columnNumber)\r\n-    {\r\n-\tsuper(message);\r\n-\tinit(publicId, systemId, lineNumber, columnNumber);\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Create a new SAXParseException with an embedded exception.\r\n-     *\r\n-     * <p>This constructor is most useful for parser writers who\r\n-     * need to wrap an exception that is not a subclass of\r\n-     * {@link org.xml.sax.SAXException SAXException}.</p>\r\n-     *\r\n-     * <p>If the system identifier is a URL, the parser must resolve it\r\n-     * fully before creating the exception.</p>\r\n-     *\r\n-     * @param message The error or warning message, or null to use\r\n-     *                the message from the embedded exception.\r\n-     * @param publicId The public identifier of the entity that generated\r\n-     *                 the error or warning.\r\n-     * @param systemId The system identifier of the entity that generated\r\n-     *                 the error or warning.\r\n-     * @param lineNumber The line number of the end of the text that\r\n-     *                   caused the error or warning.\r\n-     * @param columnNumber The column number of the end of the text that\r\n-     *                     cause the error or warning.\r\n-     * @param e Another exception to embed in this one.\r\n-     * @see org.xml.sax.Parser#setLocale\r\n-     */\r\n-    public SAXParseException (String message, String publicId, String systemId,\r\n-\t\t\t      int lineNumber, int columnNumber, Exception e)\r\n-    {\r\n-\tsuper(message, e);\r\n-\tinit(publicId, systemId, lineNumber, columnNumber);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Internal initialization method.\r\n-     *\r\n-     * @param publicId The public identifier of the entity which generated the exception,\r\n-     *        or null.\r\n-     * @param systemId The system identifier of the entity which generated the exception,\r\n-     *        or null.\r\n-     * @param lineNumber The line number of the error, or -1.\r\n-     * @param columnNumber The column number of the error, or -1.\r\n-     */\r\n-    private void init (String publicId, String systemId,\r\n-\t\t       int lineNumber, int columnNumber)\r\n-    {\r\n-\tthis.publicId = publicId;\r\n-\tthis.systemId = systemId;\r\n-\tthis.lineNumber = lineNumber;\r\n-\tthis.columnNumber = columnNumber;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the public identifier of the entity where the exception occurred.\r\n-     *\r\n-     * @return A string containing the public identifier, or null\r\n-     *         if none is available.\r\n-     * @see org.xml.sax.Locator#getPublicId\r\n-     */\r\n-    public String getPublicId ()\r\n-    {\r\n-\treturn this.publicId;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the system identifier of the entity where the exception occurred.\r\n-     *\r\n-     * <p>If the system identifier is a URL, it will be resolved\r\n-     * fully.</p>\r\n-     *\r\n-     * @return A string containing the system identifier, or null\r\n-     *         if none is available.\r\n-     * @see org.xml.sax.Locator#getSystemId\r\n-     */\r\n-    public String getSystemId ()\r\n-    {\r\n-\treturn this.systemId;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * The line number of the end of the text where the exception occurred.\r\n-     *\r\n-     * @return An integer representing the line number, or -1\r\n-     *         if none is available.\r\n-     * @see org.xml.sax.Locator#getLineNumber\r\n-     */\r\n-    public int getLineNumber ()\r\n-    {\r\n-\treturn this.lineNumber;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * The column number of the end of the text where the exception occurred.\r\n-     *\r\n-     * <p>The first column in a line is position 1.</p>\r\n-     *\r\n-     * @return An integer representing the column number, or -1\r\n-     *         if none is available.\r\n-     * @see org.xml.sax.Locator#getColumnNumber\r\n-     */\r\n-    public int getColumnNumber ()\r\n-    {\r\n-\treturn this.columnNumber;\r\n-    }\r\n-    \r\n-    \r\n-    \f\r\n-    //////////////////////////////////////////////////////////////////////\r\n-    // Internal state.\r\n-    //////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * @serial The public identifier, or null.\r\n-     * @see #getPublicId\r\n-     */    \r\n-    private String publicId;\r\n-\r\n-\r\n-    /**\r\n-     * @serial The system identifier, or null.\r\n-     * @see #getSystemId\r\n-     */\r\n-    private String systemId;\r\n-\r\n-\r\n-    /**\r\n-     * @serial The line number, or -1.\r\n-     * @see #getLineNumber\r\n-     */\r\n-    private int lineNumber;\r\n-\r\n-\r\n-    /**\r\n-     * @serial The column number, or -1.\r\n-     * @see #getColumnNumber\r\n-     */\r\n-    private int columnNumber;\r\n-    \r\n-}\r\n-\r\n-// end of SAXParseException.java\r\n+// SAX exception class.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: SAXParseException.java,v 1.3.2.5 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+/**\n+ * Encapsulate an XML parse error or warning.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This exception may include information for locating the error\n+ * in the original XML document, as if it came from a {@link Locator}\n+ * object.  Note that although the application\n+ * will receive a SAXParseException as the argument to the handlers\n+ * in the {@link org.xml.sax.ErrorHandler ErrorHandler} interface, \n+ * the application is not actually required to throw the exception; \n+ * instead, it can simply read the information in it and take a \n+ * different action.</p>\n+ *\n+ * <p>Since this exception is a subclass of {@link org.xml.sax.SAXException \n+ * SAXException}, it inherits the ability to wrap another exception.</p>\n+ *\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.SAXException\n+ * @see org.xml.sax.Locator\n+ * @see org.xml.sax.ErrorHandler\n+ */\n+public class SAXParseException extends SAXException {\n+    \n+    \f\n+    //////////////////////////////////////////////////////////////////////\n+    // Constructors.\n+    //////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Create a new SAXParseException from a message and a Locator.\n+     *\n+     * <p>This constructor is especially useful when an application is\n+     * creating its own exception from within a {@link org.xml.sax.ContentHandler\n+     * ContentHandler} callback.</p>\n+     *\n+     * @param message The error or warning message.\n+     * @param locator The locator object for the error or warning (may be\n+     *        null).\n+     * @see org.xml.sax.Locator\n+     */\n+    public SAXParseException (String message, Locator locator) {\n+\tsuper(message);\n+\tif (locator != null) {\n+\t    init(locator.getPublicId(), locator.getSystemId(),\n+\t\t locator.getLineNumber(), locator.getColumnNumber());\n+\t} else {\n+\t    init(null, null, -1, -1);\n+\t}\n+    }\n+    \n+    \n+    /**\n+     * Wrap an existing exception in a SAXParseException.\n+     *\n+     * <p>This constructor is especially useful when an application is\n+     * creating its own exception from within a {@link org.xml.sax.ContentHandler\n+     * ContentHandler} callback, and needs to wrap an existing exception that is not a\n+     * subclass of {@link org.xml.sax.SAXException SAXException}.</p>\n+     *\n+     * @param message The error or warning message, or null to\n+     *                use the message from the embedded exception.\n+     * @param locator The locator object for the error or warning (may be\n+     *        null).\n+     * @param e Any exception.\n+     * @see org.xml.sax.Locator\n+     */\n+    public SAXParseException (String message, Locator locator,\n+\t\t\t      Exception e) {\n+\tsuper(message, e);\n+\tif (locator != null) {\n+\t    init(locator.getPublicId(), locator.getSystemId(),\n+\t\t locator.getLineNumber(), locator.getColumnNumber());\n+\t} else {\n+\t    init(null, null, -1, -1);\n+\t}\n+    }\n+    \n+    \n+    /**\n+     * Create a new SAXParseException.\n+     *\n+     * <p>This constructor is most useful for parser writers.</p>\n+     *\n+     * <p>All parameters except the message are as if\n+     * they were provided by a {@link Locator}.  For example, if the\n+     * system identifier is a URL (including relative filename), the\n+     * caller must resolve it fully before creating the exception.</p>\n+     *\n+     *\n+     * @param message The error or warning message.\n+     * @param publicId The public identifer of the entity that generated\n+     *                 the error or warning.\n+     * @param systemId The system identifer of the entity that generated\n+     *                 the error or warning.\n+     * @param lineNumber The line number of the end of the text that\n+     *                   caused the error or warning.\n+     * @param columnNumber The column number of the end of the text that\n+     *                     cause the error or warning.\n+     */\n+    public SAXParseException (String message, String publicId, String systemId,\n+\t\t\t      int lineNumber, int columnNumber)\n+    {\n+\tsuper(message);\n+\tinit(publicId, systemId, lineNumber, columnNumber);\n+    }\n+    \n+    \n+    /**\n+     * Create a new SAXParseException with an embedded exception.\n+     *\n+     * <p>This constructor is most useful for parser writers who\n+     * need to wrap an exception that is not a subclass of\n+     * {@link org.xml.sax.SAXException SAXException}.</p>\n+     *\n+     * <p>All parameters except the message and exception are as if\n+     * they were provided by a {@link Locator}.  For example, if the\n+     * system identifier is a URL (including relative filename), the\n+     * caller must resolve it fully before creating the exception.</p>\n+     *\n+     * @param message The error or warning message, or null to use\n+     *                the message from the embedded exception.\n+     * @param publicId The public identifer of the entity that generated\n+     *                 the error or warning.\n+     * @param systemId The system identifer of the entity that generated\n+     *                 the error or warning.\n+     * @param lineNumber The line number of the end of the text that\n+     *                   caused the error or warning.\n+     * @param columnNumber The column number of the end of the text that\n+     *                     cause the error or warning.\n+     * @param e Another exception to embed in this one.\n+     */\n+    public SAXParseException (String message, String publicId, String systemId,\n+\t\t\t      int lineNumber, int columnNumber, Exception e)\n+    {\n+\tsuper(message, e);\n+\tinit(publicId, systemId, lineNumber, columnNumber);\n+    }\n+\n+\n+    /**\n+     * Internal initialization method.\n+     *\n+     * @param publicId The public identifier of the entity which generated the exception,\n+     *        or null.\n+     * @param systemId The system identifier of the entity which generated the exception,\n+     *        or null.\n+     * @param lineNumber The line number of the error, or -1.\n+     * @param columnNumber The column number of the error, or -1.\n+     */\n+    private void init (String publicId, String systemId,\n+\t\t       int lineNumber, int columnNumber)\n+    {\n+\tthis.publicId = publicId;\n+\tthis.systemId = systemId;\n+\tthis.lineNumber = lineNumber;\n+\tthis.columnNumber = columnNumber;\n+    }\n+    \n+    \n+    /**\n+     * Get the public identifier of the entity where the exception occurred.\n+     *\n+     * @return A string containing the public identifier, or null\n+     *         if none is available.\n+     * @see org.xml.sax.Locator#getPublicId\n+     */\n+    public String getPublicId ()\n+    {\n+\treturn this.publicId;\n+    }\n+    \n+    \n+    /**\n+     * Get the system identifier of the entity where the exception occurred.\n+     *\n+     * <p>If the system identifier is a URL, it will have been resolved\n+     * fully.</p>\n+     *\n+     * @return A string containing the system identifier, or null\n+     *         if none is available.\n+     * @see org.xml.sax.Locator#getSystemId\n+     */\n+    public String getSystemId ()\n+    {\n+\treturn this.systemId;\n+    }\n+    \n+    \n+    /**\n+     * The line number of the end of the text where the exception occurred.\n+     *\n+     * <p>The first line is line 1.</p>\n+     *\n+     * @return An integer representing the line number, or -1\n+     *         if none is available.\n+     * @see org.xml.sax.Locator#getLineNumber\n+     */\n+    public int getLineNumber ()\n+    {\n+\treturn this.lineNumber;\n+    }\n+    \n+    \n+    /**\n+     * The column number of the end of the text where the exception occurred.\n+     *\n+     * <p>The first column in a line is position 1.</p>\n+     *\n+     * @return An integer representing the column number, or -1\n+     *         if none is available.\n+     * @see org.xml.sax.Locator#getColumnNumber\n+     */\n+    public int getColumnNumber ()\n+    {\n+\treturn this.columnNumber;\n+    }\n+    \n+    \n+    \f\n+    //////////////////////////////////////////////////////////////////////\n+    // Internal state.\n+    //////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * @serial The public identifier, or null.\n+     * @see #getPublicId\n+     */    \n+    private String publicId;\n+\n+\n+    /**\n+     * @serial The system identifier, or null.\n+     * @see #getSystemId\n+     */\n+    private String systemId;\n+\n+\n+    /**\n+     * @serial The line number, or -1.\n+     * @see #getLineNumber\n+     */\n+    private int lineNumber;\n+\n+\n+    /**\n+     * @serial The column number, or -1.\n+     * @see #getColumnNumber\n+     */\n+    private int columnNumber;\n+    \n+}\n+\n+// end of SAXParseException.java"}, {"sha": "eaca11ca321b894f77a5b6acb1737dc58f2a21b3", "filename": "libjava/org/xml/sax/XMLFilter.java", "status": "modified", "additions": 67, "deletions": 65, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FXMLFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FXMLFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FXMLFilter.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,65 +1,67 @@\n-// XMLFilter.java - filter SAX2 events.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the Public Domain.\r\n-\r\n-// $Id: XMLFilter.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-\r\n-package org.xml.sax;\r\n-\r\n-\r\n-/**\r\n- * Interface for an XML filter.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>An XML filter is like an XML reader, except that it obtains its\r\n- * events from another XML reader rather than a primary source like\r\n- * an XML document or database.  Filters can modify a stream of\r\n- * events as they pass on to the final application.</p>\r\n- *\r\n- * <p>The XMLFilterImpl helper class provides a convenient base\r\n- * for creating SAX2 filters, by passing on all {@link org.xml.sax.EntityResolver\r\n- * EntityResolver}, {@link org.xml.sax.DTDHandler DTDHandler},\r\n- * {@link org.xml.sax.ContentHandler ContentHandler} and {@link org.xml.sax.ErrorHandler\r\n- * ErrorHandler} events automatically.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.helpers.XMLFilterImpl\r\n- */\r\n-public interface XMLFilter extends XMLReader\r\n-{\r\n-\r\n-    /**\r\n-     * Set the parent reader.\r\n-     *\r\n-     * <p>This method allows the application to link the filter to\r\n-     * a parent reader (which may be another filter).  The argument\r\n-     * may not be null.</p>\r\n-     *\r\n-     * @param parent The parent reader.\r\n-     */\r\n-    public abstract void setParent (XMLReader parent);\r\n-\r\n-\r\n-    /**\r\n-     * Get the parent reader.\r\n-     *\r\n-     * <p>This method allows the application to query the parent\r\n-     * reader (which may be another filter).  It is generally a\r\n-     * bad idea to perform any operations on the parent reader\r\n-     * directly: they should all pass through this filter.</p>\r\n-     *\r\n-     * @return The parent filter, or null if none has been set.\r\n-     */\r\n-    public abstract XMLReader getParent ();\r\n-\r\n-}\r\n-\r\n-// end of XMLFilter.java\r\n+// XMLFilter.java - filter SAX2 events.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the Public Domain.\n+\n+// $Id: XMLFilter.java,v 1.3.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+\n+package org.xml.sax;\n+\n+\n+/**\n+ * Interface for an XML filter.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>An XML filter is like an XML reader, except that it obtains its\n+ * events from another XML reader rather than a primary source like\n+ * an XML document or database.  Filters can modify a stream of\n+ * events as they pass on to the final application.</p>\n+ *\n+ * <p>The XMLFilterImpl helper class provides a convenient base\n+ * for creating SAX2 filters, by passing on all {@link org.xml.sax.EntityResolver\n+ * EntityResolver}, {@link org.xml.sax.DTDHandler DTDHandler},\n+ * {@link org.xml.sax.ContentHandler ContentHandler} and {@link org.xml.sax.ErrorHandler\n+ * ErrorHandler} events automatically.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.helpers.XMLFilterImpl\n+ */\n+public interface XMLFilter extends XMLReader\n+{\n+\n+    /**\n+     * Set the parent reader.\n+     *\n+     * <p>This method allows the application to link the filter to\n+     * a parent reader (which may be another filter).  The argument\n+     * may not be null.</p>\n+     *\n+     * @param parent The parent reader.\n+     */\n+    public abstract void setParent (XMLReader parent);\n+\n+\n+    /**\n+     * Get the parent reader.\n+     *\n+     * <p>This method allows the application to query the parent\n+     * reader (which may be another filter).  It is generally a\n+     * bad idea to perform any operations on the parent reader\n+     * directly: they should all pass through this filter.</p>\n+     *\n+     * @return The parent filter, or null if none has been set.\n+     */\n+    public abstract XMLReader getParent ();\n+\n+}\n+\n+// end of XMLFilter.java"}, {"sha": "23f3daf3a9f82298c3ee257ac7c2172ac1173cdd", "filename": "libjava/org/xml/sax/XMLReader.java", "status": "modified", "additions": 398, "deletions": 415, "changes": 813, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FXMLReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2FXMLReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2FXMLReader.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,415 +1,398 @@\n-// XMLReader.java - read an XML document.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the Public Domain.\r\n-\r\n-// $Id: XMLReader.java,v 1.1 2000/10/02 02:43:17 sboag Exp $\r\n-\r\n-package org.xml.sax;\r\n-\r\n-import java.io.IOException;\r\n-\r\n-\r\n-/**\r\n- * Interface for reading an XML document using callbacks.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p><strong>Note:</strong> despite its name, this interface does \r\n- * <em>not</em> extend the standard Java {@link java.io.Reader Reader} \r\n- * interface, because reading XML is a fundamentally different activity \r\n- * than reading character data.</p>\r\n- *\r\n- * <p>XMLReader is the interface that an XML parser's SAX2 driver must\r\n- * implement.  This interface allows an application to set and\r\n- * query features and properties in the parser, to register\r\n- * event handlers for document processing, and to initiate\r\n- * a document parse.</p>\r\n- *\r\n- * <p>All SAX interfaces are assumed to be synchronous: the\r\n- * {@link #parse parse} methods must not return until parsing\r\n- * is complete, and readers must wait for an event-handler callback\r\n- * to return before reporting the next event.</p>\r\n- *\r\n- * <p>This interface replaces the (now deprecated) SAX 1.0 {@link\r\n- * org.xml.sax.Parser Parser} interface.  The XMLReader interface\r\n- * contains two important enhancements over the old Parser\r\n- * interface:</p>\r\n- *\r\n- * <ol>\r\n- * <li>it adds a standard way to query and set features and \r\n- *  properties; and</li>\r\n- * <li>it adds Namespace support, which is required for many\r\n- *  higher-level XML standards.</li>\r\n- * </ol>\r\n- *\r\n- * <p>There are adapters available to convert a SAX1 Parser to\r\n- * a SAX2 XMLReader and vice-versa.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.XMLFilter\r\n- * @see org.xml.sax.helpers.ParserAdapter\r\n- * @see org.xml.sax.helpers.XMLReaderAdapter \r\n- */\r\n-public interface XMLReader\r\n-{\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Configuration.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Look up the value of a feature.\r\n-     *\r\n-     * <p>The feature name is any fully-qualified URI.  It is\r\n-     * possible for an XMLReader to recognize a feature name but\r\n-     * to be unable to return its value; this is especially true\r\n-     * in the case of an adapter for a SAX1 Parser, which has\r\n-     * no way of knowing whether the underlying parser is\r\n-     * performing validation or expanding external entities.</p>\r\n-     *\r\n-     * <p>All XMLReaders are required to recognize the\r\n-     * http://xml.org/sax/features/namespaces and the\r\n-     * http://xml.org/sax/features/namespace-prefixes feature names.</p>\r\n-     *\r\n-     * <p>Some feature values may be available only in specific\r\n-     * contexts, such as before, during, or after a parse.</p>\r\n-     *\r\n-     * <p>Typical usage is something like this:</p>\r\n-     *\r\n-     * <pre>\r\n-     * XMLReader r = new MySAXDriver();\r\n-     *\r\n-     *                         // try to activate validation\r\n-     * try {\r\n-     *   r.setFeature(\"http://xml.org/sax/features/validation\", true);\r\n-     * } catch (SAXException e) {\r\n-     *   System.err.println(\"Cannot activate validation.\"); \r\n-     * }\r\n-     *\r\n-     *                         // register event handlers\r\n-     * r.setContentHandler(new MyContentHandler());\r\n-     * r.setErrorHandler(new MyErrorHandler());\r\n-     *\r\n-     *                         // parse the first document\r\n-     * try {\r\n-     *   r.parse(\"http://www.foo.com/mydoc.xml\");\r\n-     * } catch (IOException e) {\r\n-     *   System.err.println(\"I/O exception reading XML document\");\r\n-     * } catch (SAXException e) {\r\n-     *   System.err.println(\"XML exception reading document.\");\r\n-     * }\r\n-     * </pre>\r\n-     *\r\n-     * <p>Implementors are free (and encouraged) to invent their own features,\r\n-     * using names built on their own URIs.</p>\r\n-     *\r\n-     * @param name The feature name, which is a fully-qualified URI.\r\n-     * @return The current state of the feature (true or false).\r\n-     * @exception org.xml.sax.SAXNotRecognizedException When the\r\n-     *            XMLReader does not recognize the feature name.\r\n-     * @exception org.xml.sax.SAXNotSupportedException When the\r\n-     *            XMLReader recognizes the feature name but \r\n-     *            cannot determine its value at this time.\r\n-     * @see #setFeature\r\n-     */\r\n-    public boolean getFeature (String name)\r\n-        throws SAXNotRecognizedException, SAXNotSupportedException;\r\n-\r\n-\r\n-    /**\r\n-     * Set the state of a feature.\r\n-     *\r\n-     * <p>The feature name is any fully-qualified URI.  It is\r\n-     * possible for an XMLReader to recognize a feature name but\r\n-     * to be unable to set its value; this is especially true\r\n-     * in the case of an adapter for a SAX1 {@link org.xml.sax.Parser Parser},\r\n-     * which has no way of affecting whether the underlying parser is\r\n-     * validating, for example.</p>\r\n-     *\r\n-     * <p>All XMLReaders are required to support setting\r\n-     * http://xml.org/sax/features/namespaces to true and\r\n-     * http://xml.org/sax/features/namespace-prefixes to false.</p>\r\n-     *\r\n-     * <p>Some feature values may be immutable or mutable only \r\n-     * in specific contexts, such as before, during, or after \r\n-     * a parse.</p>\r\n-     *\r\n-     * @param name The feature name, which is a fully-qualified URI.\r\n-     * @param state The requested state of the feature (true or false).\r\n-     * @exception org.xml.sax.SAXNotRecognizedException When the\r\n-     *            XMLReader does not recognize the feature name.\r\n-     * @exception org.xml.sax.SAXNotSupportedException When the\r\n-     *            XMLReader recognizes the feature name but \r\n-     *            cannot set the requested value.\r\n-     * @see #getFeature\r\n-     */\r\n-    public void setFeature (String name, boolean value)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException;\r\n-\r\n-\r\n-    /**\r\n-     * Look up the value of a property.\r\n-     *\r\n-     * <p>The property name is any fully-qualified URI.  It is\r\n-     * possible for an XMLReader to recognize a property name but\r\n-     * to be unable to return its state; this is especially true\r\n-     * in the case of an adapter for a SAX1 {@link org.xml.sax.Parser\r\n-     * Parser}.</p>\r\n-     *\r\n-     * <p>XMLReaders are not required to recognize any specific\r\n-     * property names, though an initial core set is documented for\r\n-     * SAX2.</p>\r\n-     *\r\n-     * <p>Some property values may be available only in specific\r\n-     * contexts, such as before, during, or after a parse.</p>\r\n-     *\r\n-     * <p>Implementors are free (and encouraged) to invent their own properties,\r\n-     * using names built on their own URIs.</p>\r\n-     *\r\n-     * @param name The property name, which is a fully-qualified URI.\r\n-     * @return The current value of the property.\r\n-     * @exception org.xml.sax.SAXNotRecognizedException When the\r\n-     *            XMLReader does not recognize the property name.\r\n-     * @exception org.xml.sax.SAXNotSupportedException When the\r\n-     *            XMLReader recognizes the property name but \r\n-     *            cannot determine its value at this time.\r\n-     * @see #setProperty\r\n-     */\r\n-    public Object getProperty (String name)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException;\r\n-\r\n-\r\n-    /**\r\n-     * Set the value of a property.\r\n-     *\r\n-     * <p>The property name is any fully-qualified URI.  It is\r\n-     * possible for an XMLReader to recognize a property name but\r\n-     * to be unable to set its value; this is especially true\r\n-     * in the case of an adapter for a SAX1 {@link org.xml.sax.Parser\r\n-     * Parser}.</p>\r\n-     *\r\n-     * <p>XMLReaders are not required to recognize setting\r\n-     * any specific property names, though a core set is provided with \r\n-     * SAX2.</p>\r\n-     *\r\n-     * <p>Some property values may be immutable or mutable only \r\n-     * in specific contexts, such as before, during, or after \r\n-     * a parse.</p>\r\n-     *\r\n-     * <p>This method is also the standard mechanism for setting\r\n-     * extended handlers.</p>\r\n-     *\r\n-     * @param name The property name, which is a fully-qualified URI.\r\n-     * @param state The requested value for the property.\r\n-     * @exception org.xml.sax.SAXNotRecognizedException When the\r\n-     *            XMLReader does not recognize the property name.\r\n-     * @exception org.xml.sax.SAXNotSupportedException When the\r\n-     *            XMLReader recognizes the property name but \r\n-     *            cannot set the requested value.\r\n-     */\r\n-    public void setProperty (String name, Object value)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException;\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Event handlers.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Allow an application to register an entity resolver.\r\n-     *\r\n-     * <p>If the application does not register an entity resolver,\r\n-     * the XMLReader will perform its own default resolution.</p>\r\n-     *\r\n-     * <p>Applications may register a new or different resolver in the\r\n-     * middle of a parse, and the SAX parser must begin using the new\r\n-     * resolver immediately.</p>\r\n-     *\r\n-     * @param resolver The entity resolver.\r\n-     * @exception java.lang.NullPointerException If the resolver \r\n-     *            argument is null.\r\n-     * @see #getEntityResolver\r\n-     */\r\n-    public void setEntityResolver (EntityResolver resolver);\r\n-\r\n-\r\n-    /**\r\n-     * Return the current entity resolver.\r\n-     *\r\n-     * @return The current entity resolver, or null if none\r\n-     *         has been registered.\r\n-     * @see #setEntityResolver\r\n-     */\r\n-    public EntityResolver getEntityResolver ();\r\n-\r\n-\r\n-    /**\r\n-     * Allow an application to register a DTD event handler.\r\n-     *\r\n-     * <p>If the application does not register a DTD handler, all DTD\r\n-     * events reported by the SAX parser will be silently ignored.</p>\r\n-     *\r\n-     * <p>Applications may register a new or different handler in the\r\n-     * middle of a parse, and the SAX parser must begin using the new\r\n-     * handler immediately.</p>\r\n-     *\r\n-     * @param handler The DTD handler.\r\n-     * @exception java.lang.NullPointerException If the handler \r\n-     *            argument is null.\r\n-     * @see #getDTDHandler\r\n-     */\r\n-    public void setDTDHandler (DTDHandler handler);\r\n-\r\n-\r\n-    /**\r\n-     * Return the current DTD handler.\r\n-     *\r\n-     * @return The current DTD handler, or null if none\r\n-     *         has been registered.\r\n-     * @see #setDTDHandler\r\n-     */\r\n-    public DTDHandler getDTDHandler ();\r\n-\r\n-\r\n-    /**\r\n-     * Allow an application to register a content event handler.\r\n-     *\r\n-     * <p>If the application does not register a content handler, all\r\n-     * content events reported by the SAX parser will be silently\r\n-     * ignored.</p>\r\n-     *\r\n-     * <p>Applications may register a new or different handler in the\r\n-     * middle of a parse, and the SAX parser must begin using the new\r\n-     * handler immediately.</p>\r\n-     *\r\n-     * @param handler The content handler.\r\n-     * @exception java.lang.NullPointerException If the handler \r\n-     *            argument is null.\r\n-     * @see #getContentHandler\r\n-     */\r\n-    public void setContentHandler (ContentHandler handler);\r\n-\r\n-\r\n-    /**\r\n-     * Return the current content handler.\r\n-     *\r\n-     * @return The current content handler, or null if none\r\n-     *         has been registered.\r\n-     * @see #setContentHandler\r\n-     */\r\n-    public ContentHandler getContentHandler ();\r\n-\r\n-\r\n-    /**\r\n-     * Allow an application to register an error event handler.\r\n-     *\r\n-     * <p>If the application does not register an error handler, all\r\n-     * error events reported by the SAX parser will be silently\r\n-     * ignored; however, normal processing may not continue.  It is\r\n-     * highly recommended that all SAX applications implement an\r\n-     * error handler to avoid unexpected bugs.</p>\r\n-     *\r\n-     * <p>Applications may register a new or different handler in the\r\n-     * middle of a parse, and the SAX parser must begin using the new\r\n-     * handler immediately.</p>\r\n-     *\r\n-     * @param handler The error handler.\r\n-     * @exception java.lang.NullPointerException If the handler \r\n-     *            argument is null.\r\n-     * @see #getErrorHandler\r\n-     */\r\n-    public void setErrorHandler (ErrorHandler handler);\r\n-\r\n-\r\n-    /**\r\n-     * Return the current error handler.\r\n-     *\r\n-     * @return The current error handler, or null if none\r\n-     *         has been registered.\r\n-     * @see #setErrorHandler\r\n-     */\r\n-    public ErrorHandler getErrorHandler ();\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Parsing.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-    /**\r\n-     * Parse an XML document.\r\n-     *\r\n-     * <p>The application can use this method to instruct the XML\r\n-     * reader to begin parsing an XML document from any valid input\r\n-     * source (a character stream, a byte stream, or a URI).</p>\r\n-     *\r\n-     * <p>Applications may not invoke this method while a parse is in\r\n-     * progress (they should create a new XMLReader instead for each\r\n-     * nested XML document).  Once a parse is complete, an\r\n-     * application may reuse the same XMLReader object, possibly with a\r\n-     * different input source.</p>\r\n-     *\r\n-     * <p>During the parse, the XMLReader will provide information\r\n-     * about the XML document through the registered event\r\n-     * handlers.</p>\r\n-     *\r\n-     * <p>This method is synchronous: it will not return until parsing\r\n-     * has ended.  If a client application wants to terminate \r\n-     * parsing early, it should throw an exception.</p>\r\n-     *\r\n-     * @param source The input source for the top-level of the\r\n-     *        XML document.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @exception java.io.IOException An IO exception from the parser,\r\n-     *            possibly from a byte stream or character stream\r\n-     *            supplied by the application.\r\n-     * @see org.xml.sax.InputSource\r\n-     * @see #parse(java.lang.String)\r\n-     * @see #setEntityResolver\r\n-     * @see #setDTDHandler\r\n-     * @see #setContentHandler\r\n-     * @see #setErrorHandler \r\n-     */\r\n-    public void parse (InputSource input)\r\n-\tthrows IOException, SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Parse an XML document from a system identifier (URI).\r\n-     *\r\n-     * <p>This method is a shortcut for the common case of reading a\r\n-     * document from a system identifier.  It is the exact\r\n-     * equivalent of the following:</p>\r\n-     *\r\n-     * <pre>\r\n-     * parse(new InputSource(systemId));\r\n-     * </pre>\r\n-     *\r\n-     * <p>If the system identifier is a URL, it must be fully resolved\r\n-     * by the application before it is passed to the parser.</p>\r\n-     *\r\n-     * @param systemId The system identifier (URI).\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @exception java.io.IOException An IO exception from the parser,\r\n-     *            possibly from a byte stream or character stream\r\n-     *            supplied by the application.\r\n-     * @see #parse(org.xml.sax.InputSource)\r\n-     */\r\n-    public void parse (String systemId)\r\n-\tthrows IOException, SAXException;\r\n-\r\n-}\r\n-\r\n-// end of XMLReader.java\r\n+// XMLReader.java - read an XML document.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the Public Domain.\n+\n+// $Id: XMLReader.java,v 1.3.2.5 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax;\n+\n+import java.io.IOException;\n+\n+\n+/**\n+ * Interface for reading an XML document using callbacks.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p><strong>Note:</strong> despite its name, this interface does \n+ * <em>not</em> extend the standard Java {@link java.io.Reader Reader} \n+ * interface, because reading XML is a fundamentally different activity \n+ * than reading character data.</p>\n+ *\n+ * <p>XMLReader is the interface that an XML parser's SAX2 driver must\n+ * implement.  This interface allows an application to set and\n+ * query features and properties in the parser, to register\n+ * event handlers for document processing, and to initiate\n+ * a document parse.</p>\n+ *\n+ * <p>All SAX interfaces are assumed to be synchronous: the\n+ * {@link #parse parse} methods must not return until parsing\n+ * is complete, and readers must wait for an event-handler callback\n+ * to return before reporting the next event.</p>\n+ *\n+ * <p>This interface replaces the (now deprecated) SAX 1.0 {@link\n+ * org.xml.sax.Parser Parser} interface.  The XMLReader interface\n+ * contains two important enhancements over the old Parser\n+ * interface (as well as some minor ones):</p>\n+ *\n+ * <ol>\n+ * <li>it adds a standard way to query and set features and \n+ *  properties; and</li>\n+ * <li>it adds Namespace support, which is required for many\n+ *  higher-level XML standards.</li>\n+ * </ol>\n+ *\n+ * <p>There are adapters available to convert a SAX1 Parser to\n+ * a SAX2 XMLReader and vice-versa.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.XMLFilter\n+ * @see org.xml.sax.helpers.ParserAdapter\n+ * @see org.xml.sax.helpers.XMLReaderAdapter \n+ */\n+public interface XMLReader\n+{\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Configuration.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Look up the value of a feature flag.\n+     *\n+     * <p>The feature name is any fully-qualified URI.  It is\n+     * possible for an XMLReader to recognize a feature name but\n+     * temporarily be unable to return its value.\n+     * Some feature values may be available only in specific\n+     * contexts, such as before, during, or after a parse.\n+     * Also, some feature values may not be programmatically accessible.\n+     * (In the case of an adapter for SAX1 {@link Parser}, there is no\n+     * implementation-independent way to expose whether the underlying\n+     * parser is performing validation, expanding external entities,\n+     * and so forth.) </p>\n+     *\n+     * <p>All XMLReaders are required to recognize the\n+     * http://xml.org/sax/features/namespaces and the\n+     * http://xml.org/sax/features/namespace-prefixes feature names.</p>\n+     *\n+     * <p>Typical usage is something like this:</p>\n+     *\n+     * <pre>\n+     * XMLReader r = new MySAXDriver();\n+     *\n+     *                         // try to activate validation\n+     * try {\n+     *   r.setFeature(\"http://xml.org/sax/features/validation\", true);\n+     * } catch (SAXException e) {\n+     *   System.err.println(\"Cannot activate validation.\"); \n+     * }\n+     *\n+     *                         // register event handlers\n+     * r.setContentHandler(new MyContentHandler());\n+     * r.setErrorHandler(new MyErrorHandler());\n+     *\n+     *                         // parse the first document\n+     * try {\n+     *   r.parse(\"http://www.foo.com/mydoc.xml\");\n+     * } catch (IOException e) {\n+     *   System.err.println(\"I/O exception reading XML document\");\n+     * } catch (SAXException e) {\n+     *   System.err.println(\"XML exception reading document.\");\n+     * }\n+     * </pre>\n+     *\n+     * <p>Implementors are free (and encouraged) to invent their own features,\n+     * using names built on their own URIs.</p>\n+     *\n+     * @param name The feature name, which is a fully-qualified URI.\n+     * @return The current value of the feature (true or false).\n+     * @exception org.xml.sax.SAXNotRecognizedException If the feature\n+     *            value can't be assigned or retrieved.\n+     * @exception org.xml.sax.SAXNotSupportedException When the\n+     *            XMLReader recognizes the feature name but \n+     *            cannot determine its value at this time.\n+     * @see #setFeature\n+     */\n+    public boolean getFeature (String name)\n+        throws SAXNotRecognizedException, SAXNotSupportedException;\n+\n+\n+    /**\n+     * Set the value of a feature flag.\n+     *\n+     * <p>The feature name is any fully-qualified URI.  It is\n+     * possible for an XMLReader to expose a feature value but\n+     * to be unable to change the current value.\n+     * Some feature values may be immutable or mutable only \n+     * in specific contexts, such as before, during, or after \n+     * a parse.</p>\n+     *\n+     * <p>All XMLReaders are required to support setting\n+     * http://xml.org/sax/features/namespaces to true and\n+     * http://xml.org/sax/features/namespace-prefixes to false.</p>\n+     *\n+     * @param name The feature name, which is a fully-qualified URI.\n+     * @param value The requested value of the feature (true or false).\n+     * @exception org.xml.sax.SAXNotRecognizedException If the feature\n+     *            value can't be assigned or retrieved.\n+     * @exception org.xml.sax.SAXNotSupportedException When the\n+     *            XMLReader recognizes the feature name but \n+     *            cannot set the requested value.\n+     * @see #getFeature\n+     */\n+    public void setFeature (String name, boolean value)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException;\n+\n+\n+    /**\n+     * Look up the value of a property.\n+     *\n+     * <p>The property name is any fully-qualified URI.  It is\n+     * possible for an XMLReader to recognize a property name but\n+     * temporarily be unable to return its value.\n+     * Some property values may be available only in specific\n+     * contexts, such as before, during, or after a parse.</p>\n+     *\n+     * <p>XMLReaders are not required to recognize any specific\n+     * property names, though an initial core set is documented for\n+     * SAX2.</p>\n+     *\n+     * <p>Implementors are free (and encouraged) to invent their own properties,\n+     * using names built on their own URIs.</p>\n+     *\n+     * @param name The property name, which is a fully-qualified URI.\n+     * @return The current value of the property.\n+     * @exception org.xml.sax.SAXNotRecognizedException If the property\n+     *            value can't be assigned or retrieved.\n+     * @exception org.xml.sax.SAXNotSupportedException When the\n+     *            XMLReader recognizes the property name but \n+     *            cannot determine its value at this time.\n+     * @see #setProperty\n+     */\n+    public Object getProperty (String name)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException;\n+\n+\n+    /**\n+     * Set the value of a property.\n+     *\n+     * <p>The property name is any fully-qualified URI.  It is\n+     * possible for an XMLReader to recognize a property name but\n+     * to be unable to change the current value.\n+     * Some property values may be immutable or mutable only \n+     * in specific contexts, such as before, during, or after \n+     * a parse.</p>\n+     *\n+     * <p>XMLReaders are not required to recognize setting\n+     * any specific property names, though a core set is defined by \n+     * SAX2.</p>\n+     *\n+     * <p>This method is also the standard mechanism for setting\n+     * extended handlers.</p>\n+     *\n+     * @param name The property name, which is a fully-qualified URI.\n+     * @param value The requested value for the property.\n+     * @exception org.xml.sax.SAXNotRecognizedException If the property\n+     *            value can't be assigned or retrieved.\n+     * @exception org.xml.sax.SAXNotSupportedException When the\n+     *            XMLReader recognizes the property name but \n+     *            cannot set the requested value.\n+     */\n+    public void setProperty (String name, Object value)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException;\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Event handlers.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Allow an application to register an entity resolver.\n+     *\n+     * <p>If the application does not register an entity resolver,\n+     * the XMLReader will perform its own default resolution.</p>\n+     *\n+     * <p>Applications may register a new or different resolver in the\n+     * middle of a parse, and the SAX parser must begin using the new\n+     * resolver immediately.</p>\n+     *\n+     * @param resolver The entity resolver.\n+     * @see #getEntityResolver\n+     */\n+    public void setEntityResolver (EntityResolver resolver);\n+\n+\n+    /**\n+     * Return the current entity resolver.\n+     *\n+     * @return The current entity resolver, or null if none\n+     *         has been registered.\n+     * @see #setEntityResolver\n+     */\n+    public EntityResolver getEntityResolver ();\n+\n+\n+    /**\n+     * Allow an application to register a DTD event handler.\n+     *\n+     * <p>If the application does not register a DTD handler, all DTD\n+     * events reported by the SAX parser will be silently ignored.</p>\n+     *\n+     * <p>Applications may register a new or different handler in the\n+     * middle of a parse, and the SAX parser must begin using the new\n+     * handler immediately.</p>\n+     *\n+     * @param handler The DTD handler.\n+     * @see #getDTDHandler\n+     */\n+    public void setDTDHandler (DTDHandler handler);\n+\n+\n+    /**\n+     * Return the current DTD handler.\n+     *\n+     * @return The current DTD handler, or null if none\n+     *         has been registered.\n+     * @see #setDTDHandler\n+     */\n+    public DTDHandler getDTDHandler ();\n+\n+\n+    /**\n+     * Allow an application to register a content event handler.\n+     *\n+     * <p>If the application does not register a content handler, all\n+     * content events reported by the SAX parser will be silently\n+     * ignored.</p>\n+     *\n+     * <p>Applications may register a new or different handler in the\n+     * middle of a parse, and the SAX parser must begin using the new\n+     * handler immediately.</p>\n+     *\n+     * @param handler The content handler.\n+     * @see #getContentHandler\n+     */\n+    public void setContentHandler (ContentHandler handler);\n+\n+\n+    /**\n+     * Return the current content handler.\n+     *\n+     * @return The current content handler, or null if none\n+     *         has been registered.\n+     * @see #setContentHandler\n+     */\n+    public ContentHandler getContentHandler ();\n+\n+\n+    /**\n+     * Allow an application to register an error event handler.\n+     *\n+     * <p>If the application does not register an error handler, all\n+     * error events reported by the SAX parser will be silently\n+     * ignored; however, normal processing may not continue.  It is\n+     * highly recommended that all SAX applications implement an\n+     * error handler to avoid unexpected bugs.</p>\n+     *\n+     * <p>Applications may register a new or different handler in the\n+     * middle of a parse, and the SAX parser must begin using the new\n+     * handler immediately.</p>\n+     *\n+     * @param handler The error handler.\n+     * @see #getErrorHandler\n+     */\n+    public void setErrorHandler (ErrorHandler handler);\n+\n+\n+    /**\n+     * Return the current error handler.\n+     *\n+     * @return The current error handler, or null if none\n+     *         has been registered.\n+     * @see #setErrorHandler\n+     */\n+    public ErrorHandler getErrorHandler ();\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Parsing.\n+    ////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Parse an XML document.\n+     *\n+     * <p>The application can use this method to instruct the XML\n+     * reader to begin parsing an XML document from any valid input\n+     * source (a character stream, a byte stream, or a URI).</p>\n+     *\n+     * <p>Applications may not invoke this method while a parse is in\n+     * progress (they should create a new XMLReader instead for each\n+     * nested XML document).  Once a parse is complete, an\n+     * application may reuse the same XMLReader object, possibly with a\n+     * different input source.</p>\n+     *\n+     * <p>During the parse, the XMLReader will provide information\n+     * about the XML document through the registered event\n+     * handlers.</p>\n+     *\n+     * <p>This method is synchronous: it will not return until parsing\n+     * has ended.  If a client application wants to terminate \n+     * parsing early, it should throw an exception.</p>\n+     *\n+     * @param source The input source for the top-level of the\n+     *        XML document.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @exception java.io.IOException An IO exception from the parser,\n+     *            possibly from a byte stream or character stream\n+     *            supplied by the application.\n+     * @see org.xml.sax.InputSource\n+     * @see #parse(java.lang.String)\n+     * @see #setEntityResolver\n+     * @see #setDTDHandler\n+     * @see #setContentHandler\n+     * @see #setErrorHandler \n+     */\n+    public void parse (InputSource input)\n+\tthrows IOException, SAXException;\n+\n+\n+    /**\n+     * Parse an XML document from a system identifier (URI).\n+     *\n+     * <p>This method is a shortcut for the common case of reading a\n+     * document from a system identifier.  It is the exact\n+     * equivalent of the following:</p>\n+     *\n+     * <pre>\n+     * parse(new InputSource(systemId));\n+     * </pre>\n+     *\n+     * <p>If the system identifier is a URL, it must be fully resolved\n+     * by the application before it is passed to the parser.</p>\n+     *\n+     * @param systemId The system identifier (URI).\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @exception java.io.IOException An IO exception from the parser,\n+     *            possibly from a byte stream or character stream\n+     *            supplied by the application.\n+     * @see #parse(org.xml.sax.InputSource)\n+     */\n+    public void parse (String systemId)\n+\tthrows IOException, SAXException;\n+\n+}"}, {"sha": "742f4648c90ff5097428b3494daf42598a2c25e2", "filename": "libjava/org/xml/sax/ext/DeclHandler.java", "status": "modified", "additions": 143, "deletions": 131, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fext%2FDeclHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fext%2FDeclHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fext%2FDeclHandler.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,131 +1,143 @@\n-// DeclHandler.java - Optional handler for DTD declaration events.\r\n-// Public Domain: no warranty.\r\n-// $Id: DeclHandler.java,v 1.1 2000/10/02 02:43:19 sboag Exp $\r\n-\r\n-package org.xml.sax.ext;\r\n-\r\n-import org.xml.sax.SAXException;\r\n-\r\n-\r\n-/**\r\n- * SAX2 extension handler for DTD declaration events.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This is an optional extension handler for SAX2 to provide\r\n- * information about DTD declarations in an XML document.  XML\r\n- * readers are not required to support this handler.</p>\r\n- *\r\n- * <p>Note that data-related DTD declarations (unparsed entities and\r\n- * notations) are already reported through the {@link\r\n- * org.xml.sax.DTDHandler DTDHandler} interface.</p>\r\n- *\r\n- * <p>If you are using the declaration handler together with a lexical\r\n- * handler, all of the events will occur between the\r\n- * {@link org.xml.sax.ext.LexicalHandler#startDTD startDTD} and the\r\n- * {@link org.xml.sax.ext.LexicalHandler#endDTD endDTD} events.</p>\r\n- *\r\n- * <p>To set the DeclHandler for an XML reader, use the\r\n- * {@link org.xml.sax.XMLReader#setProperty setProperty} method\r\n- * with the propertyId \"http://xml.org/sax/handlers/DeclHandler\".\r\n- * If the reader does not support declaration events, it will throw a\r\n- * {@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}\r\n- * or a\r\n- * {@link org.xml.sax.SAXNotSupportedException SAXNotSupportedException}\r\n- * when you attempt to register the handler.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0beta\r\n- * @see org.xml.sax.XMLReader\r\n- */\r\n-public interface DeclHandler\r\n-{\r\n-\r\n-    /**\r\n-     * Report an element type declaration.\r\n-     *\r\n-     * <p>The content model will consist of the string \"EMPTY\", the\r\n-     * string \"ANY\", or a parenthesised group, optionally followed\r\n-     * by an occurrence indicator.  The model will be normalized so\r\n-     * that all whitespace is removed,and will include the enclosing\r\n-     * parentheses.</p>\r\n-     *\r\n-     * @param name The element type name.\r\n-     * @param model The content model as a normalized string.\r\n-     * @exception SAXException The application may raise an exception.\r\n-     */\r\n-    public abstract void elementDecl (String name, String model)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Report an attribute type declaration.\r\n-     *\r\n-     * <p>Only the effective (first) declaration for an attribute will\r\n-     * be reported.  The type will be one of the strings \"CDATA\",\r\n-     * \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\",\r\n-     * \"ENTITIES\", or \"NOTATION\", or a parenthesized token group with \r\n-     * the separator \"|\" and all whitespace removed.</p>\r\n-     *\r\n-     * @param eName The name of the associated element.\r\n-     * @param aName The name of the attribute.\r\n-     * @param type A string representing the attribute type.\r\n-     * @param valueDefault A string representing the attribute default\r\n-     *        (\"#IMPLIED\", \"#REQUIRED\", or \"#FIXED\") or null if\r\n-     *        none of these applies.\r\n-     * @param value A string representing the attribute's default value,\r\n-     *        or null if there is none.\r\n-     * @exception SAXException The application may raise an exception.\r\n-     */\r\n-    public abstract void attributeDecl (String eName,\r\n-\t\t\t\t\tString aName,\r\n-\t\t\t\t\tString type,\r\n-\t\t\t\t\tString valueDefault,\r\n-\t\t\t\t\tString value)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Report an internal entity declaration.\r\n-     *\r\n-     * <p>Only the effective (first) declaration for each entity\r\n-     * will be reported.</p>\r\n-     *\r\n-     * @param name The name of the entity.  If it is a parameter\r\n-     *        entity, the name will begin with '%'.\r\n-     * @param value The replacement text of the entity.\r\n-     * @exception SAXException The application may raise an exception.\r\n-     * @see #externalEntityDecl\r\n-     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\r\n-     */\r\n-    public abstract void internalEntityDecl (String name, String value)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Report a parsed external entity declaration.\r\n-     *\r\n-     * <p>Only the effective (first) declaration for each entity\r\n-     * will be reported.</p>\r\n-     *\r\n-     * @param name The name of the entity.  If it is a parameter\r\n-     *        entity, the name will begin with '%'.\r\n-     * @param publicId The declared public identifier of the entity, or\r\n-     *        null if none was declared.\r\n-     * @param systemId The declared system identifier of the entity.\r\n-     * @exception SAXException The application may raise an exception.\r\n-     * @see #internalEntityDecl\r\n-     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\r\n-     */\r\n-    public abstract void externalEntityDecl (String name, String publicId,\r\n-\t\t\t\t\t     String systemId)\r\n-\tthrows SAXException;\r\n-\r\n-}\r\n-\r\n-// end of DeclHandler.java\r\n+// DeclHandler.java - Optional handler for DTD declaration events.\n+// http://www.saxproject.org\n+// Public Domain: no warranty.\n+// $Id: DeclHandler.java,v 1.2.2.5 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax.ext;\n+\n+import org.xml.sax.SAXException;\n+\n+\n+/**\n+ * SAX2 extension handler for DTD declaration events.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This is an optional extension handler for SAX2 to provide more\n+ * complete information about DTD declarations in an XML document.\n+ * XML readers are not required to recognize this handler, and it\n+ * is not part of core-only SAX2 distributions.</p>\n+ *\n+ * <p>Note that data-related DTD declarations (unparsed entities and\n+ * notations) are already reported through the {@link\n+ * org.xml.sax.DTDHandler DTDHandler} interface.</p>\n+ *\n+ * <p>If you are using the declaration handler together with a lexical\n+ * handler, all of the events will occur between the\n+ * {@link org.xml.sax.ext.LexicalHandler#startDTD startDTD} and the\n+ * {@link org.xml.sax.ext.LexicalHandler#endDTD endDTD} events.</p>\n+ *\n+ * <p>To set the DeclHandler for an XML reader, use the\n+ * {@link org.xml.sax.XMLReader#setProperty setProperty} method\n+ * with the property name\n+ * <code>http://xml.org/sax/properties/declaration-handler</code>\n+ * and an object implementing this interface (or null) as the value.\n+ * If the reader does not report declaration events, it will throw a\n+ * {@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}\n+ * when you attempt to register the handler.</p>\n+ *\n+ * @since SAX 2.0 (extensions 1.0)\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ */\n+public interface DeclHandler\n+{\n+\n+    /**\n+     * Report an element type declaration.\n+     *\n+     * <p>The content model will consist of the string \"EMPTY\", the\n+     * string \"ANY\", or a parenthesised group, optionally followed\n+     * by an occurrence indicator.  The model will be normalized so\n+     * that all parameter entities are fully resolved and all whitespace \n+     * is removed,and will include the enclosing parentheses.  Other\n+     * normalization (such as removing redundant parentheses or \n+     * simplifying occurrence indicators) is at the discretion of the\n+     * parser.</p>\n+     *\n+     * @param name The element type name.\n+     * @param model The content model as a normalized string.\n+     * @exception SAXException The application may raise an exception.\n+     */\n+    public abstract void elementDecl (String name, String model)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Report an attribute type declaration.\n+     *\n+     * <p>Only the effective (first) declaration for an attribute will\n+     * be reported.  The type will be one of the strings \"CDATA\",\n+     * \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\",\n+     * \"ENTITIES\", a parenthesized token group with \n+     * the separator \"|\" and all whitespace removed, or the word\n+     * \"NOTATION\" followed by a space followed by a parenthesized\n+     * token group with all whitespace removed.</p>\n+     *\n+     * <p>The value will be the value as reported to applications,\n+     * appropriately normalized and with entity and character\n+     * references expanded.  </p>\n+     *\n+     * @param eName The name of the associated element.\n+     * @param aName The name of the attribute.\n+     * @param type A string representing the attribute type.\n+     * @param mode A string representing the attribute defaulting mode\n+     *        (\"#IMPLIED\", \"#REQUIRED\", or \"#FIXED\") or null if\n+     *        none of these applies.\n+     * @param value A string representing the attribute's default value,\n+     *        or null if there is none.\n+     * @exception SAXException The application may raise an exception.\n+     */\n+    public abstract void attributeDecl (String eName,\n+\t\t\t\t\tString aName,\n+\t\t\t\t\tString type,\n+\t\t\t\t\tString mode,\n+\t\t\t\t\tString value)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Report an internal entity declaration.\n+     *\n+     * <p>Only the effective (first) declaration for each entity\n+     * will be reported.  All parameter entities in the value\n+     * will be expanded, but general entities will not.</p>\n+     *\n+     * @param name The name of the entity.  If it is a parameter\n+     *        entity, the name will begin with '%'.\n+     * @param value The replacement text of the entity.\n+     * @exception SAXException The application may raise an exception.\n+     * @see #externalEntityDecl\n+     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n+     */\n+    public abstract void internalEntityDecl (String name, String value)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Report a parsed external entity declaration.\n+     *\n+     * <p>Only the effective (first) declaration for each entity\n+     * will be reported.</p>\n+     *\n+     * @param name The name of the entity.  If it is a parameter\n+     *        entity, the name will begin with '%'.\n+     * @param publicId The declared public identifier of the entity, or\n+     *        null if none was declared.\n+     * @param systemId The declared system identifier of the entity.\n+     * @exception SAXException The application may raise an exception.\n+     * @see #internalEntityDecl\n+     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n+     */\n+    public abstract void externalEntityDecl (String name, String publicId,\n+\t\t\t\t\t     String systemId)\n+\tthrows SAXException;\n+\n+}\n+\n+// end of DeclHandler.java"}, {"sha": "15b2557c50420ab9896c28be6a2c5c7ec9f7f8d7", "filename": "libjava/org/xml/sax/ext/LexicalHandler.java", "status": "modified", "additions": 212, "deletions": 161, "changes": 373, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fext%2FLexicalHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fext%2FLexicalHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fext%2FLexicalHandler.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,161 +1,212 @@\n-// LexicalHandler.java - optional handler for lexical parse events.\r\n-// Public Domain: no warranty.\r\n-// $Id: LexicalHandler.java,v 1.1 2000/10/02 02:43:20 sboag Exp $\r\n-\r\n-package org.xml.sax.ext;\r\n-\r\n-import org.xml.sax.SAXException;\r\n-\r\n-/**\r\n- * SAX2 extension handler for lexical events.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This is an optional extension handler for SAX2 to provide\r\n- * lexical information about an XML document, such as comments\r\n- * and CDATA section boundaries; XML readers are not required to \r\n- * support this handler.</p>\r\n- *\r\n- * <p>The events in the lexical handler apply to the entire document,\r\n- * not just to the document element, and all lexical handler events\r\n- * must appear between the content handler's startDocument and\r\n- * endDocument events.</p>\r\n- *\r\n- * <p>To set the LexicalHandler for an XML reader, use the\r\n- * {@link org.xml.sax.XMLReader#setProperty setProperty} method\r\n- * with the propertyId \"http://xml.org/sax/handlers/LexicalHandler\".\r\n- * If the reader does not support lexical events, it will throw a\r\n- * {@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}\r\n- * or a\r\n- * {@link org.xml.sax.SAXNotSupportedException SAXNotSupportedException}\r\n- * when you attempt to register the handler.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0beta\r\n- * @see org.xml.sax.XMLReader#setProperty\r\n- * @see org.xml.sax.SAXNotRecognizedException\r\n- * @see org.xml.sax.SAXNotSupportedException\r\n- */\r\n-public interface LexicalHandler\r\n-{\r\n-\r\n-    /**\r\n-     * Report the start of DTD declarations, if any.\r\n-     *\r\n-     * <p>Any declarations are assumed to be in the internal subset\r\n-     * unless otherwise indicated by a {@link #startEntity startEntity}\r\n-     * event.</p>\r\n-     *\r\n-     * <p>Note that the start/endDTD events will appear within\r\n-     * the start/endDocument events from ContentHandler and\r\n-     * before the first startElement event.</p>\r\n-     *\r\n-     * @param name The document type name.\r\n-     * @param publicId The declared public identifier for the\r\n-     *        external DTD subset, or null if none was declared.\r\n-     * @param systemId The declared system identifier for the\r\n-     *        external DTD subset, or null if none was declared.\r\n-     * @exception SAXException The application may raise an\r\n-     *            exception.\r\n-     * @see #endDTD\r\n-     * @see #startEntity\r\n-     */\r\n-    public abstract void startDTD (String name, String publicId,\r\n-\t\t\t\t   String systemId)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Report the end of DTD declarations.\r\n-     *\r\n-     * @exception SAXException The application may raise an exception.\r\n-     * @see #startDTD\r\n-     */\r\n-    public abstract void endDTD ()\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Report the beginning of an entity in content.\r\n-     *\r\n-     * <p><strong>NOTE:</entity> entity references in attribute\r\n-     * values -- and the start and end of the document entity --\r\n-     * are never reported.</p>\r\n-     *\r\n-     * <p>The start and end of the external DTD subset are reported\r\n-     * using the pseudo-name \"[dtd]\".  All other events must be\r\n-     * properly nested within start/end entity events.</p>\r\n-     *\r\n-     * <p>Note that skipped entities will be reported through the\r\n-     * {@link org.xml.sax.ContentHandler#skippedEntity skippedEntity}\r\n-     * event, which is part of the ContentHandler interface.</p>\r\n-     *\r\n-     * @param name The name of the entity.  If it is a parameter\r\n-     *        entity, the name will begin with '%'.\r\n-     * @exception SAXException The application may raise an exception.\r\n-     * @see #endEntity\r\n-     * @see org.xml.sax.ext.DeclHandler#internalEntityDecl\r\n-     * @see org.xml.sax.ext.DeclHandler#externalEntityDecl\r\n-     */\r\n-    public abstract void startEntity (String name)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Report the end of an entity.\r\n-     *\r\n-     * @param name The name of the entity that is ending.\r\n-     * @exception SAXException The application may raise an exception.\r\n-     * @see #startEntity\r\n-     */\r\n-    public abstract void endEntity (String name)\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Report the start of a CDATA section.\r\n-     *\r\n-     * <p>The contents of the CDATA section will be reported through\r\n-     * the regular {@link org.xml.sax.ContentHandler#characters\r\n-     * characters} event.</p>\r\n-     *\r\n-     * @exception SAXException The application may raise an exception.\r\n-     * @see #endCDATA\r\n-     */\r\n-    public abstract void startCDATA ()\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Report the end of a CDATA section.\r\n-     *\r\n-     * @exception SAXException The application may raise an exception.\r\n-     * @see #startCDATA\r\n-     */\r\n-    public abstract void endCDATA ()\r\n-\tthrows SAXException;\r\n-\r\n-\r\n-    /**\r\n-     * Report an XML comment anywhere in the document.\r\n-     *\r\n-     * <p>This callback will be used for comments inside or outside the\r\n-     * document element, including comments in the external DTD\r\n-     * subset (if read).</p>\r\n-     *\r\n-     * @param ch An array holding the characters in the comment.\r\n-     * @param start The starting position in the array.\r\n-     * @param length The number of characters to use from the array.\r\n-     * @exception SAXException The application may raise an exception.\r\n-     */\r\n-    public abstract void comment (char ch[], int start, int length)\r\n-\tthrows SAXException;\r\n-\r\n-}\r\n-\r\n-// end of LexicalHandler.java\r\n+// LexicalHandler.java - optional handler for lexical parse events.\n+// http://www.saxproject.org\n+// Public Domain: no warranty.\n+// $Id: LexicalHandler.java,v 1.2.2.4 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax.ext;\n+\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * SAX2 extension handler for lexical events.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This is an optional extension handler for SAX2 to provide\n+ * lexical information about an XML document, such as comments\n+ * and CDATA section boundaries.\n+ * XML readers are not required to recognize this handler, and it\n+ * is not part of core-only SAX2 distributions.</p>\n+ *\n+ * <p>The events in the lexical handler apply to the entire document,\n+ * not just to the document element, and all lexical handler events\n+ * must appear between the content handler's startDocument and\n+ * endDocument events.</p>\n+ *\n+ * <p>To set the LexicalHandler for an XML reader, use the\n+ * {@link org.xml.sax.XMLReader#setProperty setProperty} method\n+ * with the property name\n+ * <code>http://xml.org/sax/properties/lexical-handler</code>\n+ * and an object implementing this interface (or null) as the value.\n+ * If the reader does not report lexical events, it will throw a\n+ * {@link org.xml.sax.SAXNotRecognizedException SAXNotRecognizedException}\n+ * when you attempt to register the handler.</p>\n+ *\n+ * @since SAX 2.0 (extensions 1.0)\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ */\n+public interface LexicalHandler\n+{\n+\n+    /**\n+     * Report the start of DTD declarations, if any.\n+     *\n+     * <p>This method is intended to report the beginning of the\n+     * DOCTYPE declaration; if the document has no DOCTYPE declaration,\n+     * this method will not be invoked.</p>\n+     *\n+     * <p>All declarations reported through \n+     * {@link org.xml.sax.DTDHandler DTDHandler} or\n+     * {@link org.xml.sax.ext.DeclHandler DeclHandler} events must appear\n+     * between the startDTD and {@link #endDTD endDTD} events.\n+     * Declarations are assumed to belong to the internal DTD subset\n+     * unless they appear between {@link #startEntity startEntity}\n+     * and {@link #endEntity endEntity} events.  Comments and\n+     * processing instructions from the DTD should also be reported\n+     * between the startDTD and endDTD events, in their original \n+     * order of (logical) occurrence; they are not required to\n+     * appear in their correct locations relative to DTDHandler\n+     * or DeclHandler events, however.</p>\n+     *\n+     * <p>Note that the start/endDTD events will appear within\n+     * the start/endDocument events from ContentHandler and\n+     * before the first \n+     * {@link org.xml.sax.ContentHandler#startElement startElement}\n+     * event.</p>\n+     *\n+     * @param name The document type name.\n+     * @param publicId The declared public identifier for the\n+     *        external DTD subset, or null if none was declared.\n+     * @param systemId The declared system identifier for the\n+     *        external DTD subset, or null if none was declared.\n+     *        (Note that this is not resolved against the document\n+     *        base URI.)\n+     * @exception SAXException The application may raise an\n+     *            exception.\n+     * @see #endDTD\n+     * @see #startEntity\n+     */\n+    public abstract void startDTD (String name, String publicId,\n+\t\t\t\t   String systemId)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Report the end of DTD declarations.\n+     *\n+     * <p>This method is intended to report the end of the\n+     * DOCTYPE declaration; if the document has no DOCTYPE declaration,\n+     * this method will not be invoked.</p>\n+     *\n+     * @exception SAXException The application may raise an exception.\n+     * @see #startDTD\n+     */\n+    public abstract void endDTD ()\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Report the beginning of some internal and external XML entities.\n+     *\n+     * <p>The reporting of parameter entities (including\n+     * the external DTD subset) is optional, and SAX2 drivers that\n+     * report LexicalHandler events may not implement it; you can use the\n+     * <code\n+     * >http://xml.org/sax/features/lexical-handler/parameter-entities</code>\n+     * feature to query or control the reporting of parameter entities.</p>\n+     *\n+     * <p>General entities are reported with their regular names,\n+     * parameter entities have '%' prepended to their names, and \n+     * the external DTD subset has the pseudo-entity name \"[dtd]\".</p>\n+     *\n+     * <p>When a SAX2 driver is providing these events, all other \n+     * events must be properly nested within start/end entity \n+     * events.  There is no additional requirement that events from \n+     * {@link org.xml.sax.ext.DeclHandler DeclHandler} or\n+     * {@link org.xml.sax.DTDHandler DTDHandler} be properly ordered.</p>\n+     *\n+     * <p>Note that skipped entities will be reported through the\n+     * {@link org.xml.sax.ContentHandler#skippedEntity skippedEntity}\n+     * event, which is part of the ContentHandler interface.</p>\n+     *\n+     * <p>Because of the streaming event model that SAX uses, some\n+     * entity boundaries cannot be reported under any \n+     * circumstances:</p>\n+     *\n+     * <ul>\n+     * <li>general entities within attribute values</li>\n+     * <li>parameter entities within declarations</li>\n+     * </ul>\n+     *\n+     * <p>These will be silently expanded, with no indication of where\n+     * the original entity boundaries were.</p>\n+     *\n+     * <p>Note also that the boundaries of character references (which\n+     * are not really entities anyway) are not reported.</p>\n+     *\n+     * <p>All start/endEntity events must be properly nested.\n+     *\n+     * @param name The name of the entity.  If it is a parameter\n+     *        entity, the name will begin with '%', and if it is the\n+     *        external DTD subset, it will be \"[dtd]\".\n+     * @exception SAXException The application may raise an exception.\n+     * @see #endEntity\n+     * @see org.xml.sax.ext.DeclHandler#internalEntityDecl\n+     * @see org.xml.sax.ext.DeclHandler#externalEntityDecl \n+     */\n+    public abstract void startEntity (String name)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Report the end of an entity.\n+     *\n+     * @param name The name of the entity that is ending.\n+     * @exception SAXException The application may raise an exception.\n+     * @see #startEntity\n+     */\n+    public abstract void endEntity (String name)\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Report the start of a CDATA section.\n+     *\n+     * <p>The contents of the CDATA section will be reported through\n+     * the regular {@link org.xml.sax.ContentHandler#characters\n+     * characters} event; this event is intended only to report\n+     * the boundary.</p>\n+     *\n+     * @exception SAXException The application may raise an exception.\n+     * @see #endCDATA\n+     */\n+    public abstract void startCDATA ()\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Report the end of a CDATA section.\n+     *\n+     * @exception SAXException The application may raise an exception.\n+     * @see #startCDATA\n+     */\n+    public abstract void endCDATA ()\n+\tthrows SAXException;\n+\n+\n+    /**\n+     * Report an XML comment anywhere in the document.\n+     *\n+     * <p>This callback will be used for comments inside or outside the\n+     * document element, including comments in the external DTD\n+     * subset (if read).  Comments in the DTD must be properly\n+     * nested inside start/endDTD and start/endEntity events (if\n+     * used).</p>\n+     *\n+     * @param ch An array holding the characters in the comment.\n+     * @param start The starting position in the array.\n+     * @param length The number of characters to use from the array.\n+     * @exception SAXException The application may raise an exception.\n+     */\n+    public abstract void comment (char ch[], int start, int length)\n+\tthrows SAXException;\n+\n+}\n+\n+// end of LexicalHandler.java"}, {"sha": "bbb02f9276b47028f57410df6d364dc8fe2deb9a", "filename": "libjava/org/xml/sax/ext/package.html", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fext%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fext%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fext%2Fpackage.html?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -0,0 +1,49 @@\n+<HTML><HEAD>\n+\n+</HEAD><BODY>\n+\n+<p>\n+This package contains interfaces to optional SAX2 handlers.\n+\n+<p>See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+for more information about SAX.</p>\n+\n+<p>\n+The package is independent of the SAX2 core, though the functionality\n+exposed generally needs to be implemented within a parser.\n+That independence has several consequences:</p>\n+\n+<ul>\n+\n+<li>SAX2 drivers are <em>not</em> required to recognize these handlers,\n+and you cannot assume that the class files will be present in every SAX2\n+installation.</li>\n+\n+<li>This package may be updated independently of SAX2 (i.e. new\n+handlers may be added without updating SAX2 itself).</li>\n+\n+<li>The handlers are not implemented by the SAX2\n+<code>org.xml.sax.helpers.DefaultHandler</code> or\n+<code>org.xml.sax.helpers.XMLFilterImpl</code> classes.\n+You can subclass these if you need such behaviour.</li>\n+\n+<li>The handlers need to be registered differently than regular SAX2\n+handlers.</li>\n+\n+</ul>\n+\n+<p>This package, SAX2-ext, is a standardized extension to SAX2.  It is\n+designed both to allow SAX parsers to pass certain types of information\n+to applications, and to serve as a simple model for other SAX2 parser\n+extension packages.  Not all such extension packages should need to\n+be recognized directly by parsers, however.\n+As an example, most schema systems can be cleanly layered on top\n+of parsers supporting the standardized SAX2 interfaces.  </p>\n+\n+<p><strong>NOTE:</strong> this package alone does add any\n+functionality; it simply provides optional interfaces for SAX2 drivers\n+to use.  You must use a SAX2 driver that recognizes these interfaces if\n+you actually want to have access to lexical and declaration\n+information.</p>\n+\n+</BODY></HTML>"}, {"sha": "6cabed4fe8b8785051c268ff7f8037f8f0c73d1c", "filename": "libjava/org/xml/sax/helpers/AttributeListImpl.java", "status": "modified", "additions": 312, "deletions": 310, "changes": 622, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FAttributeListImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FAttributeListImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FAttributeListImpl.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,310 +1,312 @@\n-// SAX default implementation for AttributeList.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: AttributeListImpl.java,v 1.1 2000/10/02 02:43:20 sboag Exp $\r\n-\r\n-package org.xml.sax.helpers;\r\n-\r\n-import org.xml.sax.AttributeList;\r\n-\r\n-import java.util.Vector;\r\n-\r\n-\r\n-/**\r\n- * Default implementation for AttributeList.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>AttributeList implements the deprecated SAX1 {@link\r\n- * org.xml.sax.AttributeList AttributeList} interface, and has been\r\n- * replaced by the new SAX2 {@link org.xml.sax.helpers.AttributesImpl\r\n- * AttributesImpl} interface.</p>\r\n- *\r\n- * <p>This class provides a convenience implementation of the SAX\r\n- * {@link org.xml.sax.AttributeList AttributeList} interface.  This \r\n- * implementation is useful both for SAX parser writers, who can use \r\n- * it to provide attributes to the application, and for SAX application \r\n- * writers, who can use it to create a persistent copy of an element's \r\n- * attribute specifications:</p>\r\n- *\r\n- * <pre>\r\n- * private AttributeList myatts;\r\n- *\r\n- * public void startElement (String name, AttributeList atts)\r\n- * {\r\n- *              // create a persistent copy of the attribute list\r\n- *              // for use outside this method\r\n- *   myatts = new AttributeListImpl(atts);\r\n- *   [...]\r\n- * }\r\n- * </pre>\r\n- *\r\n- * <p>Please note that SAX parsers are not required to use this\r\n- * class to provide an implementation of AttributeList; it is\r\n- * supplied only as an optional convenience.  In particular, \r\n- * parser writers are encouraged to invent more efficient\r\n- * implementations.</p>\r\n- *\r\n- * @deprecated This class implements a deprecated interface,\r\n- *             {@link org.xml.sax.AttributeList AttributeList};\r\n- *             that interface has been replaced by\r\n- *             {@link org.xml.sax.Attributes Attributes},\r\n- *             which is implemented in the\r\n- *             {@link org.xml.sax.helpers.AttributesImpl \r\n- *            AttributesImpl} helper class.\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.AttributeList\r\n- * @see org.xml.sax.DocumentHandler#startElement \r\n- */\r\n-public class AttributeListImpl implements AttributeList\r\n-{\r\n-    \r\n-    /**\r\n-     * Create an empty attribute list.\r\n-     *\r\n-     * <p>This constructor is most useful for parser writers, who\r\n-     * will use it to create a single, reusable attribute list that\r\n-     * can be reset with the clear method between elements.</p>\r\n-     *\r\n-     * @see #addAttribute\r\n-     * @see #clear\r\n-     */\r\n-    public AttributeListImpl ()\r\n-    {\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Construct a persistent copy of an existing attribute list.\r\n-     *\r\n-     * <p>This constructor is most useful for application writers,\r\n-     * who will use it to create a persistent copy of an existing\r\n-     * attribute list.</p>\r\n-     *\r\n-     * @param atts The attribute list to copy\r\n-     * @see org.xml.sax.DocumentHandler#startElement\r\n-     */\r\n-    public AttributeListImpl (AttributeList atts)\r\n-    {\r\n-\tsetAttributeList(atts);\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Methods specific to this class.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Set the attribute list, discarding previous contents.\r\n-     *\r\n-     * <p>This method allows an application writer to reuse an\r\n-     * attribute list easily.</p>\r\n-     *\r\n-     * @param atts The attribute list to copy.\r\n-     */\r\n-    public void setAttributeList (AttributeList atts)\r\n-    {\r\n-\tint count = atts.getLength();\r\n-\t\r\n-\tclear();\r\n-\t\r\n-\tfor (int i = 0; i < count; i++) {\r\n-\t    addAttribute(atts.getName(i), atts.getType(i), atts.getValue(i));\r\n-\t}\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Add an attribute to an attribute list.\r\n-     *\r\n-     * <p>This method is provided for SAX parser writers, to allow them\r\n-     * to build up an attribute list incrementally before delivering\r\n-     * it to the application.</p>\r\n-     *\r\n-     * @param name The attribute name.\r\n-     * @param type The attribute type (\"NMTOKEN\" for an enumeration).\r\n-     * @param value The attribute value (must not be null).\r\n-     * @see #removeAttribute\r\n-     * @see org.xml.sax.DocumentHandler#startElement\r\n-     */\r\n-    public void addAttribute (String name, String type, String value)\r\n-    {\r\n-\tnames.addElement(name);\r\n-\ttypes.addElement(type);\r\n-\tvalues.addElement(value);\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Remove an attribute from the list.\r\n-     *\r\n-     * <p>SAX application writers can use this method to filter an\r\n-     * attribute out of an AttributeList.  Note that invoking this\r\n-     * method will change the length of the attribute list and\r\n-     * some of the attribute's indices.</p>\r\n-     *\r\n-     * <p>If the requested attribute is not in the list, this is\r\n-     * a no-op.</p>\r\n-     *\r\n-     * @param name The attribute name.\r\n-     * @see #addAttribute\r\n-     */\r\n-    public void removeAttribute (String name)\r\n-    {\r\n-\tint i = names.indexOf(name);\r\n-\t\r\n-\tif (i >= 0) {\r\n-\t    names.removeElementAt(i);\r\n-\t    types.removeElementAt(i);\r\n-\t    values.removeElementAt(i);\r\n-\t}\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Clear the attribute list.\r\n-     *\r\n-     * <p>SAX parser writers can use this method to reset the attribute\r\n-     * list between DocumentHandler.startElement events.  Normally,\r\n-     * it will make sense to reuse the same AttributeListImpl object\r\n-     * rather than allocating a new one each time.</p>\r\n-     *\r\n-     * @see org.xml.sax.DocumentHandler#startElement\r\n-     */\r\n-    public void clear ()\r\n-    {\r\n-\tnames.removeAllElements();\r\n-\ttypes.removeAllElements();\r\n-\tvalues.removeAllElements();\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.AttributeList\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the number of attributes in the list.\r\n-     *\r\n-     * @return The number of attributes in the list.\r\n-     * @see org.xml.sax.AttributeList#getLength\r\n-     */\r\n-    public int getLength ()\r\n-    {\r\n-\treturn names.size();\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the name of an attribute (by position).\r\n-     *\r\n-     * @param i The position of the attribute in the list.\r\n-     * @return The attribute name as a string, or null if there\r\n-     *         is no attribute at that position.\r\n-     * @see org.xml.sax.AttributeList#getName(int)\r\n-     */\r\n-    public String getName (int i)\r\n-    {\r\n-\tif (i < 0) {\r\n-\t    return null;\r\n-\t}\r\n-\ttry {\r\n-\t    return (String)names.elementAt(i);\r\n-\t} catch (ArrayIndexOutOfBoundsException e) {\r\n-\t    return null;\r\n-\t}\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the type of an attribute (by position).\r\n-     *\r\n-     * @param i The position of the attribute in the list.\r\n-     * @return The attribute type as a string (\"NMTOKEN\" for an\r\n-     *         enumeration, and \"CDATA\" if no declaration was\r\n-     *         read), or null if there is no attribute at\r\n-     *         that position.\r\n-     * @see org.xml.sax.AttributeList#getType(int)\r\n-     */\r\n-    public String getType (int i)\r\n-    {\r\n-\tif (i < 0) {\r\n-\t    return null;\r\n-\t}\r\n-\ttry {\r\n-\t    return (String)types.elementAt(i);\r\n-\t} catch (ArrayIndexOutOfBoundsException e) {\r\n-\t    return null;\r\n-\t}\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the value of an attribute (by position).\r\n-     *\r\n-     * @param i The position of the attribute in the list.\r\n-     * @return The attribute value as a string, or null if\r\n-     *         there is no attribute at that position.\r\n-     * @see org.xml.sax.AttributeList#getValue(int)\r\n-     */\r\n-    public String getValue (int i)\r\n-    {\r\n-\tif (i < 0) {\r\n-\t    return null;\r\n-\t}\r\n-\ttry {\r\n-\t    return (String)values.elementAt(i);\r\n-\t} catch (ArrayIndexOutOfBoundsException e) {\r\n-\t    return null;\r\n-\t}\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the type of an attribute (by name).\r\n-     *\r\n-     * @param name The attribute name.\r\n-     * @return The attribute type as a string (\"NMTOKEN\" for an\r\n-     *         enumeration, and \"CDATA\" if no declaration was\r\n-     *         read).\r\n-     * @see org.xml.sax.AttributeList#getType(java.lang.String)\r\n-     */\r\n-    public String getType (String name)\r\n-    {\r\n-\treturn getType(names.indexOf(name));\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Get the value of an attribute (by name).\r\n-     *\r\n-     * @param name The attribute name.\r\n-     * @see org.xml.sax.AttributeList#getValue(java.lang.String)\r\n-     */\r\n-    public String getValue (String name)\r\n-    {\r\n-\treturn getValue(names.indexOf(name));\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal state.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-    Vector names = new Vector();\r\n-    Vector types = new Vector();\r\n-    Vector values = new Vector();\r\n-\r\n-}\r\n-\r\n-// end of AttributeListImpl.java\r\n+// SAX default implementation for AttributeList.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: AttributeListImpl.java,v 1.3.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax.helpers;\n+\n+import org.xml.sax.AttributeList;\n+\n+import java.util.Vector;\n+\n+\n+/**\n+ * Default implementation for AttributeList.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>AttributeList implements the deprecated SAX1 {@link\n+ * org.xml.sax.AttributeList AttributeList} interface, and has been\n+ * replaced by the new SAX2 {@link org.xml.sax.helpers.AttributesImpl\n+ * AttributesImpl} interface.</p>\n+ *\n+ * <p>This class provides a convenience implementation of the SAX\n+ * {@link org.xml.sax.AttributeList AttributeList} interface.  This \n+ * implementation is useful both for SAX parser writers, who can use \n+ * it to provide attributes to the application, and for SAX application \n+ * writers, who can use it to create a persistent copy of an element's \n+ * attribute specifications:</p>\n+ *\n+ * <pre>\n+ * private AttributeList myatts;\n+ *\n+ * public void startElement (String name, AttributeList atts)\n+ * {\n+ *              // create a persistent copy of the attribute list\n+ *              // for use outside this method\n+ *   myatts = new AttributeListImpl(atts);\n+ *   [...]\n+ * }\n+ * </pre>\n+ *\n+ * <p>Please note that SAX parsers are not required to use this\n+ * class to provide an implementation of AttributeList; it is\n+ * supplied only as an optional convenience.  In particular, \n+ * parser writers are encouraged to invent more efficient\n+ * implementations.</p>\n+ *\n+ * @deprecated This class implements a deprecated interface,\n+ *             {@link org.xml.sax.AttributeList AttributeList};\n+ *             that interface has been replaced by\n+ *             {@link org.xml.sax.Attributes Attributes},\n+ *             which is implemented in the\n+ *             {@link org.xml.sax.helpers.AttributesImpl \n+ *            AttributesImpl} helper class.\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.AttributeList\n+ * @see org.xml.sax.DocumentHandler#startElement \n+ */\n+public class AttributeListImpl implements AttributeList\n+{\n+    \n+    /**\n+     * Create an empty attribute list.\n+     *\n+     * <p>This constructor is most useful for parser writers, who\n+     * will use it to create a single, reusable attribute list that\n+     * can be reset with the clear method between elements.</p>\n+     *\n+     * @see #addAttribute\n+     * @see #clear\n+     */\n+    public AttributeListImpl ()\n+    {\n+    }\n+    \n+    \n+    /**\n+     * Construct a persistent copy of an existing attribute list.\n+     *\n+     * <p>This constructor is most useful for application writers,\n+     * who will use it to create a persistent copy of an existing\n+     * attribute list.</p>\n+     *\n+     * @param atts The attribute list to copy\n+     * @see org.xml.sax.DocumentHandler#startElement\n+     */\n+    public AttributeListImpl (AttributeList atts)\n+    {\n+\tsetAttributeList(atts);\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Methods specific to this class.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Set the attribute list, discarding previous contents.\n+     *\n+     * <p>This method allows an application writer to reuse an\n+     * attribute list easily.</p>\n+     *\n+     * @param atts The attribute list to copy.\n+     */\n+    public void setAttributeList (AttributeList atts)\n+    {\n+\tint count = atts.getLength();\n+\t\n+\tclear();\n+\t\n+\tfor (int i = 0; i < count; i++) {\n+\t    addAttribute(atts.getName(i), atts.getType(i), atts.getValue(i));\n+\t}\n+    }\n+    \n+    \n+    /**\n+     * Add an attribute to an attribute list.\n+     *\n+     * <p>This method is provided for SAX parser writers, to allow them\n+     * to build up an attribute list incrementally before delivering\n+     * it to the application.</p>\n+     *\n+     * @param name The attribute name.\n+     * @param type The attribute type (\"NMTOKEN\" for an enumeration).\n+     * @param value The attribute value (must not be null).\n+     * @see #removeAttribute\n+     * @see org.xml.sax.DocumentHandler#startElement\n+     */\n+    public void addAttribute (String name, String type, String value)\n+    {\n+\tnames.addElement(name);\n+\ttypes.addElement(type);\n+\tvalues.addElement(value);\n+    }\n+    \n+    \n+    /**\n+     * Remove an attribute from the list.\n+     *\n+     * <p>SAX application writers can use this method to filter an\n+     * attribute out of an AttributeList.  Note that invoking this\n+     * method will change the length of the attribute list and\n+     * some of the attribute's indices.</p>\n+     *\n+     * <p>If the requested attribute is not in the list, this is\n+     * a no-op.</p>\n+     *\n+     * @param name The attribute name.\n+     * @see #addAttribute\n+     */\n+    public void removeAttribute (String name)\n+    {\n+\tint i = names.indexOf(name);\n+\t\n+\tif (i >= 0) {\n+\t    names.removeElementAt(i);\n+\t    types.removeElementAt(i);\n+\t    values.removeElementAt(i);\n+\t}\n+    }\n+    \n+    \n+    /**\n+     * Clear the attribute list.\n+     *\n+     * <p>SAX parser writers can use this method to reset the attribute\n+     * list between DocumentHandler.startElement events.  Normally,\n+     * it will make sense to reuse the same AttributeListImpl object\n+     * rather than allocating a new one each time.</p>\n+     *\n+     * @see org.xml.sax.DocumentHandler#startElement\n+     */\n+    public void clear ()\n+    {\n+\tnames.removeAllElements();\n+\ttypes.removeAllElements();\n+\tvalues.removeAllElements();\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.AttributeList\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Return the number of attributes in the list.\n+     *\n+     * @return The number of attributes in the list.\n+     * @see org.xml.sax.AttributeList#getLength\n+     */\n+    public int getLength ()\n+    {\n+\treturn names.size();\n+    }\n+    \n+    \n+    /**\n+     * Get the name of an attribute (by position).\n+     *\n+     * @param i The position of the attribute in the list.\n+     * @return The attribute name as a string, or null if there\n+     *         is no attribute at that position.\n+     * @see org.xml.sax.AttributeList#getName(int)\n+     */\n+    public String getName (int i)\n+    {\n+\tif (i < 0) {\n+\t    return null;\n+\t}\n+\ttry {\n+\t    return (String)names.elementAt(i);\n+\t} catch (ArrayIndexOutOfBoundsException e) {\n+\t    return null;\n+\t}\n+    }\n+    \n+    \n+    /**\n+     * Get the type of an attribute (by position).\n+     *\n+     * @param i The position of the attribute in the list.\n+     * @return The attribute type as a string (\"NMTOKEN\" for an\n+     *         enumeration, and \"CDATA\" if no declaration was\n+     *         read), or null if there is no attribute at\n+     *         that position.\n+     * @see org.xml.sax.AttributeList#getType(int)\n+     */\n+    public String getType (int i)\n+    {\n+\tif (i < 0) {\n+\t    return null;\n+\t}\n+\ttry {\n+\t    return (String)types.elementAt(i);\n+\t} catch (ArrayIndexOutOfBoundsException e) {\n+\t    return null;\n+\t}\n+    }\n+    \n+    \n+    /**\n+     * Get the value of an attribute (by position).\n+     *\n+     * @param i The position of the attribute in the list.\n+     * @return The attribute value as a string, or null if\n+     *         there is no attribute at that position.\n+     * @see org.xml.sax.AttributeList#getValue(int)\n+     */\n+    public String getValue (int i)\n+    {\n+\tif (i < 0) {\n+\t    return null;\n+\t}\n+\ttry {\n+\t    return (String)values.elementAt(i);\n+\t} catch (ArrayIndexOutOfBoundsException e) {\n+\t    return null;\n+\t}\n+    }\n+    \n+    \n+    /**\n+     * Get the type of an attribute (by name).\n+     *\n+     * @param name The attribute name.\n+     * @return The attribute type as a string (\"NMTOKEN\" for an\n+     *         enumeration, and \"CDATA\" if no declaration was\n+     *         read).\n+     * @see org.xml.sax.AttributeList#getType(java.lang.String)\n+     */\n+    public String getType (String name)\n+    {\n+\treturn getType(names.indexOf(name));\n+    }\n+    \n+    \n+    /**\n+     * Get the value of an attribute (by name).\n+     *\n+     * @param name The attribute name.\n+     * @see org.xml.sax.AttributeList#getValue(java.lang.String)\n+     */\n+    public String getValue (String name)\n+    {\n+\treturn getValue(names.indexOf(name));\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal state.\n+    ////////////////////////////////////////////////////////////////////\n+\n+    Vector names = new Vector();\n+    Vector types = new Vector();\n+    Vector values = new Vector();\n+\n+}\n+\n+// end of AttributeListImpl.java"}, {"sha": "d16cb335664df5f10df292e29fb5687d4c3c008b", "filename": "libjava/org/xml/sax/helpers/AttributesImpl.java", "status": "modified", "additions": 620, "deletions": 606, "changes": 1226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FAttributesImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FAttributesImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FAttributesImpl.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,606 +1,620 @@\n-// AttributesImpl.java - default implementation of Attributes.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the public domain.\r\n-\r\n-// $Id: AttributesImpl.java,v 1.2 2001/05/31 16:03:17 garyp Exp $\r\n-\r\n-\r\n-package org.xml.sax.helpers;\r\n-\r\n-import org.xml.sax.Attributes;\r\n-\r\n-\r\n-/**\r\n- * Default implementation of the Attributes interface.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class provides a default implementation of the SAX2\r\n- * {@link org.xml.sax.Attributes Attributes} interface, with the \r\n- * addition of manipulators so that the list can be modified or \r\n- * reused.</p>\r\n- *\r\n- * <p>There are two typical uses of this class:</p>\r\n- *\r\n- * <ol>\r\n- * <li>to take a persistent snapshot of an Attributes object\r\n- *  in a {@link org.xml.sax.ContentHandler#startElement startElement} event; or</li>\r\n- * <li>to construct or modify an Attributes object in a SAX2 driver or filter.</li>\r\n- * </ol>\r\n- *\r\n- * <p>This class replaces the now-deprecated SAX1 {@link \r\n- * org.xml.sax.helpers.AttributeListImpl AttributeListImpl}\r\n- * class; in addition to supporting the updated Attributes\r\n- * interface rather than the deprecated {@link org.xml.sax.AttributeList\r\n- * AttributeList} interface, it also includes a much more efficient \r\n- * implementation using a single array rather than a set of Vectors.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- */\r\n-public class AttributesImpl implements Attributes\r\n-{\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Constructors.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Construct a new, empty AttributesImpl object.\r\n-     */\r\n-    public AttributesImpl ()\r\n-    {\r\n-\tlength = 0;\r\n-\tdata = null;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Copy an existing Attributes object.\r\n-     *\r\n-     * <p>This constructor is especially useful inside a\r\n-     * {@link org.xml.sax.ContentHandler#startElement startElement} event.</p>\r\n-     *\r\n-     * @param atts The existing Attributes object.\r\n-     */\r\n-    public AttributesImpl (Attributes atts)\r\n-    {\r\n-\tsetAttributes(atts);\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.Attributes.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Return the number of attributes in the list.\r\n-     *\r\n-     * @return The number of attributes in the list.\r\n-     * @see org.xml.sax.Attributes#getLength\r\n-     */\r\n-    public int getLength ()\r\n-    {\r\n-\treturn length;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return an attribute's Namespace URI.\r\n-     *\r\n-     * @param index The attribute's index (zero-based).\r\n-     * @return The Namespace URI, the empty string if none is\r\n-     *         available, or null if the index is out of range.\r\n-     * @see org.xml.sax.Attributes#getURI\r\n-     */\r\n-    public String getURI (int index)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    return data[index*5];\r\n-\t} else {\r\n-\t    return null;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return an attribute's local name.\r\n-     *\r\n-     * @param index The attribute's index (zero-based).\r\n-     * @return The attribute's local name, the empty string if \r\n-     *         none is available, or null if the index if out of range.\r\n-     * @see org.xml.sax.Attributes#getLocalName\r\n-     */\r\n-    public String getLocalName (int index)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    return data[index*5+1];\r\n-\t} else {\r\n-\t    return null;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return an attribute's qualified (prefixed) name.\r\n-     *\r\n-     * @param index The attribute's index (zero-based).\r\n-     * @return The attribute's qualified name, the empty string if \r\n-     *         none is available, or null if the index is out of bounds.\r\n-     * @see org.xml.sax.Attributes#getQName\r\n-     */\r\n-    public String getQName (int index)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    return data[index*5+2];\r\n-\t} else {\r\n-\t    return null;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return an attribute's type by index.\r\n-     *\r\n-     * @param index The attribute's index (zero-based).\r\n-     * @return The attribute's type, \"CDATA\" if the type is unknown, or null\r\n-     *         if the index is out of bounds.\r\n-     * @see org.xml.sax.Attributes#getType(int)\r\n-     */\r\n-    public String getType (int index)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    return data[index*5+3];\r\n-\t} else {\r\n-\t    return null;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return an attribute's value by index.\r\n-     *\r\n-     * @param index The attribute's index (zero-based).\r\n-     * @return The attribute's value or null if the index is out of bounds.\r\n-     * @see org.xml.sax.Attributes#getValue(int)\r\n-     */\r\n-    public String getValue (int index)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    return data[index*5+4];\r\n-\t} else {\r\n-\t    return null;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's index by Namespace name.\r\n-     *\r\n-     * <p>In many cases, it will be more efficient to look up the name once and\r\n-     * use the index query methods rather than using the name query methods\r\n-     * repeatedly.</p>\r\n-     *\r\n-     * @param uri The attribute's Namespace URI, or the empty\r\n-     *        string if none is available.\r\n-     * @param localName The attribute's local name.\r\n-     * @return The attribute's index, or -1 if none matches.\r\n-     * @see org.xml.sax.Attributes#getIndex(java.lang.String,java.lang.String)\r\n-     */\r\n-    public int getIndex (String uri, String localName)\r\n-    {\r\n-\tint max = length * 5;\r\n-\tfor (int i = 0; i < max; i += 5) {\r\n-\t    if (data[i].equals(uri) && data[i+1].equals(localName)) {\r\n-\t\treturn i / 5;\r\n-\t    }\r\n-\t} \r\n-\treturn -1;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's index by qualified (prefixed) name.\r\n-     *\r\n-     * @param qName The qualified name.\r\n-     * @return The attribute's index, or -1 if none matches.\r\n-     * @see org.xml.sax.Attributes#getIndex(java.lang.String)\r\n-     */\r\n-    public int getIndex (String qName)\r\n-    {\r\n-\tint max = length * 5;\r\n-\tfor (int i = 0; i < max; i += 5) {\r\n-\t    if (data[i+2].equals(qName)) {\r\n-\t\treturn i / 5;\r\n-\t    }\r\n-\t} \r\n-\treturn -1;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's type by Namespace-qualified name.\r\n-     *\r\n-     * @param uri The Namespace URI, or the empty string for a name\r\n-     *        with no explicit Namespace URI.\r\n-     * @param localName The local name.\r\n-     * @return The attribute's type, or null if there is no\r\n-     *         matching attribute.\r\n-     * @see org.xml.sax.Attributes#getType(java.lang.String,java.lang.String)\r\n-     */\r\n-    public String getType (String uri, String localName)\r\n-    {\r\n-\tint max = length * 5;\r\n-\tfor (int i = 0; i < max; i += 5) {\r\n-\t    if (data[i].equals(uri) && data[i+1].equals(localName)) {\r\n-\t\treturn data[i+3];\r\n-\t    }\r\n-\t} \r\n-\treturn null;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's type by qualified (prefixed) name.\r\n-     *\r\n-     * @param qName The qualified name.\r\n-     * @return The attribute's type, or null if there is no\r\n-     *         matching attribute.\r\n-     * @see org.xml.sax.Attributes#getType(java.lang.String)\r\n-     */\r\n-    public String getType (String qName)\r\n-    {\r\n-\tint max = length * 5;\r\n-\tfor (int i = 0; i < max; i += 5) {\r\n-\t    if (data[i+2].equals(qName)) {\r\n-\t\treturn data[i+3];\r\n-\t    }\r\n-\t}\r\n-\treturn null;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's value by Namespace-qualified name.\r\n-     *\r\n-     * @param uri The Namespace URI, or the empty string for a name\r\n-     *        with no explicit Namespace URI.\r\n-     * @param localName The local name.\r\n-     * @return The attribute's value, or null if there is no\r\n-     *         matching attribute.\r\n-     * @see org.xml.sax.Attributes#getValue(java.lang.String,java.lang.String)\r\n-     */\r\n-    public String getValue (String uri, String localName)\r\n-    {\r\n-\tint max = length * 5;\r\n-\tfor (int i = 0; i < max; i += 5) {\r\n-\t    if (data[i].equals(uri) && data[i+1].equals(localName)) {\r\n-\t\treturn data[i+4];\r\n-\t    }\r\n-\t}\r\n-\treturn null;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Look up an attribute's value by qualified (prefixed) name.\r\n-     *\r\n-     * @param qName The qualified name.\r\n-     * @return The attribute's value, or null if there is no\r\n-     *         matching attribute.\r\n-     * @see org.xml.sax.Attributes#getValue(java.lang.String)\r\n-     */\r\n-    public String getValue (String qName)\r\n-    {\r\n-\tint max = length * 5;\r\n-\tfor (int i = 0; i < max; i += 5) {\r\n-\t    if (data[i+2].equals(qName)) {\r\n-\t\treturn data[i+4];\r\n-\t    }\r\n-\t}\r\n-\treturn null;\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Manipulators.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Clear the attribute list for reuse.\r\n-     *\r\n-     * <p>Note that no memory is actually freed by this call:\r\n-     * the current arrays are kept so that they can be \r\n-     * reused.</p>\r\n-     */\r\n-    public void clear ()\r\n-    {\r\n-\tlength = 0;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Copy an entire Attributes object.\r\n-     *\r\n-     * <p>It may be more efficient to reuse an existing object\r\n-     * rather than constantly allocating new ones.</p>\r\n-     * \r\n-     * @param atts The attributes to copy.\r\n-     */\r\n-    public void setAttributes (Attributes atts)\r\n-    {\r\n-\tclear();\r\n-\tlength = atts.getLength();\r\n-\tdata = new String[length*5]; \r\n-\tfor (int i = 0; i < length; i++) {\r\n-\t    data[i*5] = atts.getURI(i);\r\n-\t    data[i*5+1] = atts.getLocalName(i);\r\n-\t    data[i*5+2] = atts.getQName(i);\r\n-\t    data[i*5+3] = atts.getType(i);\r\n-\t    data[i*5+4] = atts.getValue(i);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Add an attribute to the end of the list.\r\n-     *\r\n-     * <p>For the sake of speed, this method does no checking\r\n-     * to see if the attribute is already in the list: that is\r\n-     * the responsibility of the application.</p>\r\n-     *\r\n-     * @param uri The Namespace URI, or the empty string if\r\n-     *        none is available or Namespace processing is not\r\n-     *        being performed.\r\n-     * @param localName The local name, or the empty string if\r\n-     *        Namespace processing is not being performed.\r\n-     * @param qName The qualified (prefixed) name, or the empty string\r\n-     *        if qualified names are not available.\r\n-     * @param type The attribute type as a string.\r\n-     * @param value The attribute value.\r\n-     */\r\n-    public void addAttribute (String uri, String localName, String qName,\r\n-\t\t\t      String type, String value)\r\n-    {\r\n-\tensureCapacity(length+1);\r\n-\tdata[length*5] = uri;\r\n-\tdata[length*5+1] = localName;\r\n-\tdata[length*5+2] = qName;\r\n-\tdata[length*5+3] = type;\r\n-\tdata[length*5+4] = value;\r\n-\tlength++;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set an attribute in the list.\r\n-     *\r\n-     * <p>For the sake of speed, this method does no checking\r\n-     * for name conflicts or well-formedness: such checks are the\r\n-     * responsibility of the application.</p>\r\n-     *\r\n-     * @param index The index of the attribute (zero-based).\r\n-     * @param uri The Namespace URI, or the empty string if\r\n-     *        none is available or Namespace processing is not\r\n-     *        being performed.\r\n-     * @param localName The local name, or the empty string if\r\n-     *        Namespace processing is not being performed.\r\n-     * @param qName The qualified name, or the empty string\r\n-     *        if qualified names are not available.\r\n-     * @param type The attribute type as a string.\r\n-     * @param value The attribute value.\r\n-     * @exception java.lang.ArrayIndexOutOfBoundsException When the\r\n-     *            supplied index does not point to an attribute\r\n-     *            in the list.\r\n-     */\r\n-    public void setAttribute (int index, String uri, String localName,\r\n-\t\t\t      String qName, String type, String value)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    data[index*5] = uri;\r\n-\t    data[index*5+1] = localName;\r\n-\t    data[index*5+2] = qName;\r\n-\t    data[index*5+3] = type;\r\n-\t    data[index*5+4] = value;\r\n-\t} else {\r\n-\t    badIndex(index);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Remove an attribute from the list.\r\n-     *\r\n-     * @param index The index of the attribute (zero-based).\r\n-     * @exception java.lang.ArrayIndexOutOfBoundsException When the\r\n-     *            supplied index does not point to an attribute\r\n-     *            in the list.\r\n-     */\r\n-    public void removeAttribute (int index)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    data[index*5] = null;\r\n-\t    data[index*5+1] = null;\r\n-\t    data[index*5+2] = null;\r\n-\t    data[index*5+3] = null;\r\n-\t    data[index*5+4] = null;\r\n-\t    if (index < length - 1) {\r\n-\t\tSystem.arraycopy(data, (index+1)*5, data, index*5,\r\n-\t\t\t\t (length-index-1)*5);\r\n-\t    }\r\n-\t    length--;\r\n-\t} else {\r\n-\t    badIndex(index);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the Namespace URI of a specific attribute.\r\n-     *\r\n-     * @param index The index of the attribute (zero-based).\r\n-     * @param uri The attribute's Namespace URI, or the empty\r\n-     *        string for none.\r\n-     * @exception java.lang.ArrayIndexOutOfBoundsException When the\r\n-     *            supplied index does not point to an attribute\r\n-     *            in the list.\r\n-     */\r\n-    public void setURI (int index, String uri)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    data[index*5] = uri;\r\n-\t} else {\r\n-\t    badIndex(index);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the local name of a specific attribute.\r\n-     *\r\n-     * @param index The index of the attribute (zero-based).\r\n-     * @param localName The attribute's local name, or the empty\r\n-     *        string for none.\r\n-     * @exception java.lang.ArrayIndexOutOfBoundsException When the\r\n-     *            supplied index does not point to an attribute\r\n-     *            in the list.\r\n-     */\r\n-    public void setLocalName (int index, String localName)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    data[index*5+1] = localName;\r\n-\t} else {\r\n-\t    badIndex(index);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the qualified name of a specific attribute.\r\n-     *\r\n-     * @param index The index of the attribute (zero-based).\r\n-     * @param qName The attribute's qualified name, or the empty\r\n-     *        string for none.\r\n-     * @exception java.lang.ArrayIndexOutOfBoundsException When the\r\n-     *            supplied index does not point to an attribute\r\n-     *            in the list.\r\n-     */\r\n-    public void setQName (int index, String qName)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    data[index*5+2] = qName;\r\n-\t} else {\r\n-\t    badIndex(index);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the type of a specific attribute.\r\n-     *\r\n-     * @param index The index of the attribute (zero-based).\r\n-     * @param type The attribute's type.\r\n-     * @exception java.lang.ArrayIndexOutOfBoundsException When the\r\n-     *            supplied index does not point to an attribute\r\n-     *            in the list.\r\n-     */\r\n-    public void setType (int index, String type)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    data[index*5+3] = type;\r\n-\t} else {\r\n-\t    badIndex(index);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the value of a specific attribute.\r\n-     *\r\n-     * @param index The index of the attribute (zero-based).\r\n-     * @param value The attribute's value.\r\n-     * @exception java.lang.ArrayIndexOutOfBoundsException When the\r\n-     *            supplied index does not point to an attribute\r\n-     *            in the list.\r\n-     */\r\n-    public void setValue (int index, String value)\r\n-    {\r\n-\tif (index >= 0 && index < length) {\r\n-\t    data[index*5+4] = value;\r\n-\t} else {\r\n-\t    badIndex(index);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal methods.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Ensure the internal array's capacity.\r\n-     *\r\n-     * @param n The minimum number of attributes that the array must\r\n-     *        be able to hold.\r\n-     */\r\n-    private void ensureCapacity (int n)\r\n-    {\r\n-\tif (n > 0 && data == null) {\r\n-\t    data = new String[25];\r\n-\t}\r\n-\r\n-\tint max = data.length;\r\n-\tif (max >= n * 5) {\r\n-\t    return;\r\n-\t}\r\n-\r\n-\r\n-\twhile (max < n * 5) {\r\n-\t    max *= 2;\r\n-\t}\r\n-\tString newData[] = new String[max];\r\n-\tSystem.arraycopy(data, 0, newData, 0, length*5);\r\n-\tdata = newData;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Report a bad array index in a manipulator.\r\n-     *\r\n-     * @param index The index to report.\r\n-     * @exception java.lang.ArrayIndexOutOfBoundsException Always.\r\n-     */\r\n-    private void badIndex (int index)\r\n-\tthrows ArrayIndexOutOfBoundsException\r\n-    {\r\n-\tString msg =\r\n-\t    \"Attempt to modify attribute at illegal index: \" + index;\r\n-\tthrow new ArrayIndexOutOfBoundsException(msg);\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal state.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-    int length;\r\n-    String data [];\r\n-\r\n-}\r\n-\r\n-// end of AttributesImpl.java\r\n-\r\n+// AttributesImpl.java - default implementation of Attributes.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the public domain.\n+\n+// $Id: AttributesImpl.java,v 1.6.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+\n+package org.xml.sax.helpers;\n+\n+import org.xml.sax.Attributes;\n+\n+\n+/**\n+ * Default implementation of the Attributes interface.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class provides a default implementation of the SAX2\n+ * {@link org.xml.sax.Attributes Attributes} interface, with the \n+ * addition of manipulators so that the list can be modified or \n+ * reused.</p>\n+ *\n+ * <p>There are two typical uses of this class:</p>\n+ *\n+ * <ol>\n+ * <li>to take a persistent snapshot of an Attributes object\n+ *  in a {@link org.xml.sax.ContentHandler#startElement startElement} event; or</li>\n+ * <li>to construct or modify an Attributes object in a SAX2 driver or filter.</li>\n+ * </ol>\n+ *\n+ * <p>This class replaces the now-deprecated SAX1 {@link \n+ * org.xml.sax.helpers.AttributeListImpl AttributeListImpl}\n+ * class; in addition to supporting the updated Attributes\n+ * interface rather than the deprecated {@link org.xml.sax.AttributeList\n+ * AttributeList} interface, it also includes a much more efficient \n+ * implementation using a single array rather than a set of Vectors.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ */\n+public class AttributesImpl implements Attributes\n+{\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Constructors.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Construct a new, empty AttributesImpl object.\n+     */\n+    public AttributesImpl ()\n+    {\n+\tlength = 0;\n+\tdata = null;\n+    }\n+\n+\n+    /**\n+     * Copy an existing Attributes object.\n+     *\n+     * <p>This constructor is especially useful inside a\n+     * {@link org.xml.sax.ContentHandler#startElement startElement} event.</p>\n+     *\n+     * @param atts The existing Attributes object.\n+     */\n+    public AttributesImpl (Attributes atts)\n+    {\n+\tsetAttributes(atts);\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.Attributes.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Return the number of attributes in the list.\n+     *\n+     * @return The number of attributes in the list.\n+     * @see org.xml.sax.Attributes#getLength\n+     */\n+    public int getLength ()\n+    {\n+\treturn length;\n+    }\n+\n+\n+    /**\n+     * Return an attribute's Namespace URI.\n+     *\n+     * @param index The attribute's index (zero-based).\n+     * @return The Namespace URI, the empty string if none is\n+     *         available, or null if the index is out of range.\n+     * @see org.xml.sax.Attributes#getURI\n+     */\n+    public String getURI (int index)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    return data[index*5];\n+\t} else {\n+\t    return null;\n+\t}\n+    }\n+\n+\n+    /**\n+     * Return an attribute's local name.\n+     *\n+     * @param index The attribute's index (zero-based).\n+     * @return The attribute's local name, the empty string if \n+     *         none is available, or null if the index if out of range.\n+     * @see org.xml.sax.Attributes#getLocalName\n+     */\n+    public String getLocalName (int index)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    return data[index*5+1];\n+\t} else {\n+\t    return null;\n+\t}\n+    }\n+\n+\n+    /**\n+     * Return an attribute's qualified (prefixed) name.\n+     *\n+     * @param index The attribute's index (zero-based).\n+     * @return The attribute's qualified name, the empty string if \n+     *         none is available, or null if the index is out of bounds.\n+     * @see org.xml.sax.Attributes#getQName\n+     */\n+    public String getQName (int index)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    return data[index*5+2];\n+\t} else {\n+\t    return null;\n+\t}\n+    }\n+\n+\n+    /**\n+     * Return an attribute's type by index.\n+     *\n+     * @param index The attribute's index (zero-based).\n+     * @return The attribute's type, \"CDATA\" if the type is unknown, or null\n+     *         if the index is out of bounds.\n+     * @see org.xml.sax.Attributes#getType(int)\n+     */\n+    public String getType (int index)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    return data[index*5+3];\n+\t} else {\n+\t    return null;\n+\t}\n+    }\n+\n+\n+    /**\n+     * Return an attribute's value by index.\n+     *\n+     * @param index The attribute's index (zero-based).\n+     * @return The attribute's value or null if the index is out of bounds.\n+     * @see org.xml.sax.Attributes#getValue(int)\n+     */\n+    public String getValue (int index)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    return data[index*5+4];\n+\t} else {\n+\t    return null;\n+\t}\n+    }\n+\n+\n+    /**\n+     * Look up an attribute's index by Namespace name.\n+     *\n+     * <p>In many cases, it will be more efficient to look up the name once and\n+     * use the index query methods rather than using the name query methods\n+     * repeatedly.</p>\n+     *\n+     * @param uri The attribute's Namespace URI, or the empty\n+     *        string if none is available.\n+     * @param localName The attribute's local name.\n+     * @return The attribute's index, or -1 if none matches.\n+     * @see org.xml.sax.Attributes#getIndex(java.lang.String,java.lang.String)\n+     */\n+    public int getIndex (String uri, String localName)\n+    {\n+\tint max = length * 5;\n+\tfor (int i = 0; i < max; i += 5) {\n+\t    if (data[i].equals(uri) && data[i+1].equals(localName)) {\n+\t\treturn i / 5;\n+\t    }\n+\t} \n+\treturn -1;\n+    }\n+\n+\n+    /**\n+     * Look up an attribute's index by qualified (prefixed) name.\n+     *\n+     * @param qName The qualified name.\n+     * @return The attribute's index, or -1 if none matches.\n+     * @see org.xml.sax.Attributes#getIndex(java.lang.String)\n+     */\n+    public int getIndex (String qName)\n+    {\n+\tint max = length * 5;\n+\tfor (int i = 0; i < max; i += 5) {\n+\t    if (data[i+2].equals(qName)) {\n+\t\treturn i / 5;\n+\t    }\n+\t} \n+\treturn -1;\n+    }\n+\n+\n+    /**\n+     * Look up an attribute's type by Namespace-qualified name.\n+     *\n+     * @param uri The Namespace URI, or the empty string for a name\n+     *        with no explicit Namespace URI.\n+     * @param localName The local name.\n+     * @return The attribute's type, or null if there is no\n+     *         matching attribute.\n+     * @see org.xml.sax.Attributes#getType(java.lang.String,java.lang.String)\n+     */\n+    public String getType (String uri, String localName)\n+    {\n+\tint max = length * 5;\n+\tfor (int i = 0; i < max; i += 5) {\n+\t    if (data[i].equals(uri) && data[i+1].equals(localName)) {\n+\t\treturn data[i+3];\n+\t    }\n+\t} \n+\treturn null;\n+    }\n+\n+\n+    /**\n+     * Look up an attribute's type by qualified (prefixed) name.\n+     *\n+     * @param qName The qualified name.\n+     * @return The attribute's type, or null if there is no\n+     *         matching attribute.\n+     * @see org.xml.sax.Attributes#getType(java.lang.String)\n+     */\n+    public String getType (String qName)\n+    {\n+\tint max = length * 5;\n+\tfor (int i = 0; i < max; i += 5) {\n+\t    if (data[i+2].equals(qName)) {\n+\t\treturn data[i+3];\n+\t    }\n+\t}\n+\treturn null;\n+    }\n+\n+\n+    /**\n+     * Look up an attribute's value by Namespace-qualified name.\n+     *\n+     * @param uri The Namespace URI, or the empty string for a name\n+     *        with no explicit Namespace URI.\n+     * @param localName The local name.\n+     * @return The attribute's value, or null if there is no\n+     *         matching attribute.\n+     * @see org.xml.sax.Attributes#getValue(java.lang.String,java.lang.String)\n+     */\n+    public String getValue (String uri, String localName)\n+    {\n+\tint max = length * 5;\n+\tfor (int i = 0; i < max; i += 5) {\n+\t    if (data[i].equals(uri) && data[i+1].equals(localName)) {\n+\t\treturn data[i+4];\n+\t    }\n+\t}\n+\treturn null;\n+    }\n+\n+\n+    /**\n+     * Look up an attribute's value by qualified (prefixed) name.\n+     *\n+     * @param qName The qualified name.\n+     * @return The attribute's value, or null if there is no\n+     *         matching attribute.\n+     * @see org.xml.sax.Attributes#getValue(java.lang.String)\n+     */\n+    public String getValue (String qName)\n+    {\n+\tint max = length * 5;\n+\tfor (int i = 0; i < max; i += 5) {\n+\t    if (data[i+2].equals(qName)) {\n+\t\treturn data[i+4];\n+\t    }\n+\t}\n+\treturn null;\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Manipulators.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Clear the attribute list for reuse.\n+     *\n+     * <p>Note that little memory is freed by this call:\n+     * the current array is kept so it can be \n+     * reused.</p>\n+     */\n+    public void clear ()\n+    {\n+\tif (data != null) {\n+\t    for (int i = 0; i < (length * 5); i++)\n+\t\tdata [i] = null;\n+\t}\n+\tlength = 0;\n+    }\n+\n+\n+    /**\n+     * Copy an entire Attributes object.\n+     *\n+     * <p>It may be more efficient to reuse an existing object\n+     * rather than constantly allocating new ones.</p>\n+     * \n+     * @param atts The attributes to copy.\n+     */\n+    public void setAttributes (Attributes atts)\n+    {\n+        clear();\n+        length = atts.getLength();\n+        if (length > 0) {\n+            data = new String[length*5];\n+            for (int i = 0; i < length; i++) {\n+                data[i*5] = atts.getURI(i);\n+                data[i*5+1] = atts.getLocalName(i);\n+                data[i*5+2] = atts.getQName(i);\n+                data[i*5+3] = atts.getType(i);\n+                data[i*5+4] = atts.getValue(i);\n+            }\n+\t}\n+    }\n+\n+\n+    /**\n+     * Add an attribute to the end of the list.\n+     *\n+     * <p>For the sake of speed, this method does no checking\n+     * to see if the attribute is already in the list: that is\n+     * the responsibility of the application.</p>\n+     *\n+     * @param uri The Namespace URI, or the empty string if\n+     *        none is available or Namespace processing is not\n+     *        being performed.\n+     * @param localName The local name, or the empty string if\n+     *        Namespace processing is not being performed.\n+     * @param qName The qualified (prefixed) name, or the empty string\n+     *        if qualified names are not available.\n+     * @param type The attribute type as a string.\n+     * @param value The attribute value.\n+     */\n+    public void addAttribute (String uri, String localName, String qName,\n+\t\t\t      String type, String value)\n+    {\n+\tensureCapacity(length+1);\n+\tdata[length*5] = uri;\n+\tdata[length*5+1] = localName;\n+\tdata[length*5+2] = qName;\n+\tdata[length*5+3] = type;\n+\tdata[length*5+4] = value;\n+\tlength++;\n+    }\n+\n+\n+    /**\n+     * Set an attribute in the list.\n+     *\n+     * <p>For the sake of speed, this method does no checking\n+     * for name conflicts or well-formedness: such checks are the\n+     * responsibility of the application.</p>\n+     *\n+     * @param index The index of the attribute (zero-based).\n+     * @param uri The Namespace URI, or the empty string if\n+     *        none is available or Namespace processing is not\n+     *        being performed.\n+     * @param localName The local name, or the empty string if\n+     *        Namespace processing is not being performed.\n+     * @param qName The qualified name, or the empty string\n+     *        if qualified names are not available.\n+     * @param type The attribute type as a string.\n+     * @param value The attribute value.\n+     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n+     *            supplied index does not point to an attribute\n+     *            in the list.\n+     */\n+    public void setAttribute (int index, String uri, String localName,\n+\t\t\t      String qName, String type, String value)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    data[index*5] = uri;\n+\t    data[index*5+1] = localName;\n+\t    data[index*5+2] = qName;\n+\t    data[index*5+3] = type;\n+\t    data[index*5+4] = value;\n+\t} else {\n+\t    badIndex(index);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Remove an attribute from the list.\n+     *\n+     * @param index The index of the attribute (zero-based).\n+     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n+     *            supplied index does not point to an attribute\n+     *            in the list.\n+     */\n+    public void removeAttribute (int index)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    if (index < length - 1) {\n+\t\tSystem.arraycopy(data, (index+1)*5, data, index*5,\n+\t\t\t\t (length-index-1)*5);\n+\t    }\n+\t    index = (length - 1) * 5;\n+\t    data [index++] = null;\n+\t    data [index++] = null;\n+\t    data [index++] = null;\n+\t    data [index++] = null;\n+\t    data [index] = null;\n+\t    length--;\n+\t} else {\n+\t    badIndex(index);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Set the Namespace URI of a specific attribute.\n+     *\n+     * @param index The index of the attribute (zero-based).\n+     * @param uri The attribute's Namespace URI, or the empty\n+     *        string for none.\n+     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n+     *            supplied index does not point to an attribute\n+     *            in the list.\n+     */\n+    public void setURI (int index, String uri)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    data[index*5] = uri;\n+\t} else {\n+\t    badIndex(index);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Set the local name of a specific attribute.\n+     *\n+     * @param index The index of the attribute (zero-based).\n+     * @param localName The attribute's local name, or the empty\n+     *        string for none.\n+     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n+     *            supplied index does not point to an attribute\n+     *            in the list.\n+     */\n+    public void setLocalName (int index, String localName)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    data[index*5+1] = localName;\n+\t} else {\n+\t    badIndex(index);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Set the qualified name of a specific attribute.\n+     *\n+     * @param index The index of the attribute (zero-based).\n+     * @param qName The attribute's qualified name, or the empty\n+     *        string for none.\n+     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n+     *            supplied index does not point to an attribute\n+     *            in the list.\n+     */\n+    public void setQName (int index, String qName)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    data[index*5+2] = qName;\n+\t} else {\n+\t    badIndex(index);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Set the type of a specific attribute.\n+     *\n+     * @param index The index of the attribute (zero-based).\n+     * @param type The attribute's type.\n+     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n+     *            supplied index does not point to an attribute\n+     *            in the list.\n+     */\n+    public void setType (int index, String type)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    data[index*5+3] = type;\n+\t} else {\n+\t    badIndex(index);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Set the value of a specific attribute.\n+     *\n+     * @param index The index of the attribute (zero-based).\n+     * @param value The attribute's value.\n+     * @exception java.lang.ArrayIndexOutOfBoundsException When the\n+     *            supplied index does not point to an attribute\n+     *            in the list.\n+     */\n+    public void setValue (int index, String value)\n+    {\n+\tif (index >= 0 && index < length) {\n+\t    data[index*5+4] = value;\n+\t} else {\n+\t    badIndex(index);\n+\t}\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal methods.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Ensure the internal array's capacity.\n+     *\n+     * @param n The minimum number of attributes that the array must\n+     *        be able to hold.\n+     */\n+    private void ensureCapacity (int n)    {\n+        if (n <= 0) {\n+            return;\n+        }\n+        int max;\n+        if (data == null || data.length == 0) {\n+            max = 25;\n+        }\n+        else if (data.length >= n * 5) {\n+            return;\n+        }\n+        else {\n+            max = data.length;\n+        }\n+        while (max < n * 5) {\n+            max *= 2;\n+        }\n+\n+        String newData[] = new String[max];\n+        if (length > 0) {\n+            System.arraycopy(data, 0, newData, 0, length*5);\n+        }\n+        data = newData;\n+    }\n+\n+\n+    /**\n+     * Report a bad array index in a manipulator.\n+     *\n+     * @param index The index to report.\n+     * @exception java.lang.ArrayIndexOutOfBoundsException Always.\n+     */\n+    private void badIndex (int index)\n+\tthrows ArrayIndexOutOfBoundsException\n+    {\n+\tString msg =\n+\t    \"Attempt to modify attribute at illegal index: \" + index;\n+\tthrow new ArrayIndexOutOfBoundsException(msg);\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal state.\n+    ////////////////////////////////////////////////////////////////////\n+\n+    int length;\n+    String data [];\n+\n+}\n+\n+// end of AttributesImpl.java\n+"}, {"sha": "873e754a1a57d48be481902314bd26e0fb3c766c", "filename": "libjava/org/xml/sax/helpers/DefaultHandler.java", "status": "modified", "additions": 468, "deletions": 447, "changes": 915, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FDefaultHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FDefaultHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FDefaultHandler.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,447 +1,468 @@\n-// DefaultHandler.java - default implementation of the core handlers.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the public domain.\r\n-\r\n-// $Id: DefaultHandler.java,v 1.1 2000/10/02 02:43:20 sboag Exp $\r\n-\r\n-package org.xml.sax.helpers;\r\n-\r\n-import org.xml.sax.InputSource;\r\n-import org.xml.sax.Locator;\r\n-import org.xml.sax.Attributes;\r\n-import org.xml.sax.EntityResolver;\r\n-import org.xml.sax.DTDHandler;\r\n-import org.xml.sax.ContentHandler;\r\n-import org.xml.sax.ErrorHandler;\r\n-import org.xml.sax.SAXException;\r\n-import org.xml.sax.SAXParseException;\r\n-\r\n-\r\n-/**\r\n- * Default base class for SAX2 event handlers.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class is available as a convenience base class for SAX2\r\n- * applications: it provides default implementations for all of the\r\n- * callbacks in the four core SAX2 handler classes:</p>\r\n- *\r\n- * <ul>\r\n- * <li>{@link org.xml.sax.EntityResolver EntityResolver}</li>\r\n- * <li>{@link org.xml.sax.DTDHandler DTDHandler}</li>\r\n- * <li>{@link org.xml.sax.ContentHandler ContentHandler}</li>\r\n- * <li>{@link org.xml.sax.ErrorHandler ErrorHandler}</li>\r\n- * </ul>\r\n- *\r\n- * <p>Application writers can extend this class when they need to\r\n- * implement only part of an interface; parser writers can\r\n- * instantiate this class to provide default handlers when the\r\n- * application has not supplied its own.</p>\r\n- *\r\n- * <p>This class replaces the deprecated SAX1\r\n- * {@link org.xml.sax.HandlerBase HandlerBase} class.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.EntityResolver\r\n- * @see org.xml.sax.DTDHandler\r\n- * @see org.xml.sax.ContentHandler\r\n- * @see org.xml.sax.ErrorHandler\r\n- */\r\n-public class DefaultHandler\r\n-    implements EntityResolver, DTDHandler, ContentHandler, ErrorHandler\r\n-{\r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Default implementation of the EntityResolver interface.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    /**\r\n-     * Resolve an external entity.\r\n-     *\r\n-     * <p>Always return null, so that the parser will use the system\r\n-     * identifier provided in the XML document.  This method implements\r\n-     * the SAX default behaviour: application writers can override it\r\n-     * in a subclass to do special translations such as catalog lookups\r\n-     * or URI redirection.</p>\r\n-     *\r\n-     * @param publicId The public identifier, or null if none is\r\n-     *                 available.\r\n-     * @param systemId The system identifier provided in the XML \r\n-     *                 document.\r\n-     * @return The new input source, or null to require the\r\n-     *         default behaviour.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.EntityResolver#resolveEntity\r\n-     */\r\n-    public InputSource resolveEntity (String publicId, String systemId)\r\n-\tthrows SAXException\r\n-    {\r\n-\treturn null;\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Default implementation of DTDHandler interface.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a notation declaration.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass if they wish to keep track of the notations\r\n-     * declared in a document.</p>\r\n-     *\r\n-     * @param name The notation name.\r\n-     * @param publicId The notation public identifier, or null if not\r\n-     *                 available.\r\n-     * @param systemId The notation system identifier.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.DTDHandler#notationDecl\r\n-     */\r\n-    public void notationDecl (String name, String publicId, String systemId)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of an unparsed entity declaration.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to keep track of the unparsed entities\r\n-     * declared in a document.</p>\r\n-     *\r\n-     * @param name The entity name.\r\n-     * @param publicId The entity public identifier, or null if not\r\n-     *                 available.\r\n-     * @param systemId The entity system identifier.\r\n-     * @param notationName The name of the associated notation.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\r\n-     */\r\n-    public void unparsedEntityDecl (String name, String publicId,\r\n-\t\t\t\t    String systemId, String notationName)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Default implementation of ContentHandler interface.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive a Locator object for document events.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass if they wish to store the locator for use\r\n-     * with other document events.</p>\r\n-     *\r\n-     * @param locator A locator for all SAX document events.\r\n-     * @see org.xml.sax.ContentHandler#setDocumentLocator\r\n-     * @see org.xml.sax.Locator\r\n-     */\r\n-    public void setDocumentLocator (Locator locator)\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the beginning of the document.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions at the beginning\r\n-     * of a document (such as allocating the root node of a tree or\r\n-     * creating an output file).</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ContentHandler#startDocument\r\n-     */\r\n-    public void startDocument ()\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the end of the document.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions at the end\r\n-     * of a document (such as finalising a tree or closing an output\r\n-     * file).</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ContentHandler#endDocument\r\n-     */\r\n-    public void endDocument ()\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of the start of a Namespace mapping.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions at the start of\r\n-     * each Namespace prefix scope (such as storing the prefix mapping).</p>\r\n-     *\r\n-     * @param prefix The Namespace prefix being declared.\r\n-     * @param uri The Namespace URI mapped to the prefix.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ContentHandler#startPrefixMapping\r\n-     */\r\n-    public void startPrefixMapping (String prefix, String uri)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of the end of a Namespace mapping.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions at the end of\r\n-     * each prefix mapping.</p>\r\n-     *\r\n-     * @param prefix The Namespace prefix being declared.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ContentHandler#endPrefixMapping\r\n-     */\r\n-    public void endPrefixMapping (String prefix)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the start of an element.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions at the start of\r\n-     * each element (such as allocating a new tree node or writing\r\n-     * output to a file).</p>\r\n-     *\r\n-     * @param name The element type name.\r\n-     * @param attributes The specified or defaulted attributes.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ContentHandler#startElement\r\n-     */\r\n-    public void startElement (String uri, String localName,\r\n-\t\t\t      String qName, Attributes attributes)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of the end of an element.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions at the end of\r\n-     * each element (such as finalising a tree node or writing\r\n-     * output to a file).</p>\r\n-     *\r\n-     * @param name The element type name.\r\n-     * @param attributes The specified or defaulted attributes.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ContentHandler#endElement\r\n-     */\r\n-    public void endElement (String uri, String localName, String qName)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of character data inside an element.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method to take specific actions for each chunk of character data\r\n-     * (such as adding the data to a node or buffer, or printing it to\r\n-     * a file).</p>\r\n-     *\r\n-     * @param ch The characters.\r\n-     * @param start The start position in the character array.\r\n-     * @param length The number of characters to use from the\r\n-     *               character array.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ContentHandler#characters\r\n-     */\r\n-    public void characters (char ch[], int start, int length)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of ignorable whitespace in element content.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method to take specific actions for each chunk of ignorable\r\n-     * whitespace (such as adding data to a node or buffer, or printing\r\n-     * it to a file).</p>\r\n-     *\r\n-     * @param ch The whitespace characters.\r\n-     * @param start The start position in the character array.\r\n-     * @param length The number of characters to use from the\r\n-     *               character array.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ContentHandler#ignorableWhitespace\r\n-     */\r\n-    public void ignorableWhitespace (char ch[], int start, int length)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a processing instruction.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions for each\r\n-     * processing instruction, such as setting status variables or\r\n-     * invoking other methods.</p>\r\n-     *\r\n-     * @param target The processing instruction target.\r\n-     * @param data The processing instruction data, or null if\r\n-     *             none is supplied.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ContentHandler#processingInstruction\r\n-     */\r\n-    public void processingInstruction (String target, String data)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Receive notification of a skipped entity.\r\n-     *\r\n-     * <p>By default, do nothing.  Application writers may override this\r\n-     * method in a subclass to take specific actions for each\r\n-     * processing instruction, such as setting status variables or\r\n-     * invoking other methods.</p>\r\n-     *\r\n-     * @param name The name of the skipped entity.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ContentHandler#processingInstruction\r\n-     */\r\n-    public void skippedEntity (String name)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Default implementation of the ErrorHandler interface.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a parser warning.\r\n-     *\r\n-     * <p>The default implementation does nothing.  Application writers\r\n-     * may override this method in a subclass to take specific actions\r\n-     * for each warning, such as inserting the message in a log file or\r\n-     * printing it to the console.</p>\r\n-     *\r\n-     * @param e The warning information encoded as an exception.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ErrorHandler#warning\r\n-     * @see org.xml.sax.SAXParseException\r\n-     */\r\n-    public void warning (SAXParseException e)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Receive notification of a recoverable parser error.\r\n-     *\r\n-     * <p>The default implementation does nothing.  Application writers\r\n-     * may override this method in a subclass to take specific actions\r\n-     * for each error, such as inserting the message in a log file or\r\n-     * printing it to the console.</p>\r\n-     *\r\n-     * @param e The warning information encoded as an exception.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ErrorHandler#warning\r\n-     * @see org.xml.sax.SAXParseException\r\n-     */\r\n-    public void error (SAXParseException e)\r\n-\tthrows SAXException\r\n-    {\r\n-\t// no op\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Report a fatal XML parsing error.\r\n-     *\r\n-     * <p>The default implementation throws a SAXParseException.\r\n-     * Application writers may override this method in a subclass if\r\n-     * they need to take specific actions for each fatal error (such as\r\n-     * collecting all of the errors into a single report): in any case,\r\n-     * the application must stop all regular processing when this\r\n-     * method is invoked, since the document is no longer reliable, and\r\n-     * the parser may no longer report parsing events.</p>\r\n-     *\r\n-     * @param e The error information encoded as an exception.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @see org.xml.sax.ErrorHandler#fatalError\r\n-     * @see org.xml.sax.SAXParseException\r\n-     */\r\n-    public void fatalError (SAXParseException e)\r\n-\tthrows SAXException\r\n-    {\r\n-\tthrow e;\r\n-    }\r\n-    \r\n-}\r\n-\r\n-// end of DefaultHandler.java\r\n+// DefaultHandler.java - default implementation of the core handlers.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the public domain.\n+\n+// $Id: DefaultHandler.java,v 1.5.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax.helpers;\n+\n+import java.io.IOException;\n+\n+import org.xml.sax.InputSource;\n+import org.xml.sax.Locator;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.EntityResolver;\n+import org.xml.sax.DTDHandler;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+\n+\n+/**\n+ * Default base class for SAX2 event handlers.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class is available as a convenience base class for SAX2\n+ * applications: it provides default implementations for all of the\n+ * callbacks in the four core SAX2 handler classes:</p>\n+ *\n+ * <ul>\n+ * <li>{@link org.xml.sax.EntityResolver EntityResolver}</li>\n+ * <li>{@link org.xml.sax.DTDHandler DTDHandler}</li>\n+ * <li>{@link org.xml.sax.ContentHandler ContentHandler}</li>\n+ * <li>{@link org.xml.sax.ErrorHandler ErrorHandler}</li>\n+ * </ul>\n+ *\n+ * <p>Application writers can extend this class when they need to\n+ * implement only part of an interface; parser writers can\n+ * instantiate this class to provide default handlers when the\n+ * application has not supplied its own.</p>\n+ *\n+ * <p>This class replaces the deprecated SAX1\n+ * {@link org.xml.sax.HandlerBase HandlerBase} class.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson,\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.EntityResolver\n+ * @see org.xml.sax.DTDHandler\n+ * @see org.xml.sax.ContentHandler\n+ * @see org.xml.sax.ErrorHandler\n+ */\n+public class DefaultHandler\n+    implements EntityResolver, DTDHandler, ContentHandler, ErrorHandler\n+{\n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Default implementation of the EntityResolver interface.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    /**\n+     * Resolve an external entity.\n+     *\n+     * <p>Always return null, so that the parser will use the system\n+     * identifier provided in the XML document.  This method implements\n+     * the SAX default behaviour: application writers can override it\n+     * in a subclass to do special translations such as catalog lookups\n+     * or URI redirection.</p>\n+     *\n+     * @param publicId The public identifer, or null if none is\n+     *                 available.\n+     * @param systemId The system identifier provided in the XML \n+     *                 document.\n+     * @return The new input source, or null to require the\n+     *         default behaviour.\n+     * @exception java.io.IOException If there is an error setting\n+     *            up the new input source.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.EntityResolver#resolveEntity\n+     */\n+    public InputSource resolveEntity (String publicId, String systemId)\n+\tthrows IOException, SAXException\n+    {\n+\treturn null;\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Default implementation of DTDHandler interface.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Receive notification of a notation declaration.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass if they wish to keep track of the notations\n+     * declared in a document.</p>\n+     *\n+     * @param name The notation name.\n+     * @param publicId The notation public identifier, or null if not\n+     *                 available.\n+     * @param systemId The notation system identifier.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.DTDHandler#notationDecl\n+     */\n+    public void notationDecl (String name, String publicId, String systemId)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of an unparsed entity declaration.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to keep track of the unparsed entities\n+     * declared in a document.</p>\n+     *\n+     * @param name The entity name.\n+     * @param publicId The entity public identifier, or null if not\n+     *                 available.\n+     * @param systemId The entity system identifier.\n+     * @param notationName The name of the associated notation.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n+     */\n+    public void unparsedEntityDecl (String name, String publicId,\n+\t\t\t\t    String systemId, String notationName)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Default implementation of ContentHandler interface.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Receive a Locator object for document events.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass if they wish to store the locator for use\n+     * with other document events.</p>\n+     *\n+     * @param locator A locator for all SAX document events.\n+     * @see org.xml.sax.ContentHandler#setDocumentLocator\n+     * @see org.xml.sax.Locator\n+     */\n+    public void setDocumentLocator (Locator locator)\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of the beginning of the document.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions at the beginning\n+     * of a document (such as allocating the root node of a tree or\n+     * creating an output file).</p>\n+     *\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ContentHandler#startDocument\n+     */\n+    public void startDocument ()\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of the end of the document.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions at the end\n+     * of a document (such as finalising a tree or closing an output\n+     * file).</p>\n+     *\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ContentHandler#endDocument\n+     */\n+    public void endDocument ()\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+\n+\n+    /**\n+     * Receive notification of the start of a Namespace mapping.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions at the start of\n+     * each Namespace prefix scope (such as storing the prefix mapping).</p>\n+     *\n+     * @param prefix The Namespace prefix being declared.\n+     * @param uri The Namespace URI mapped to the prefix.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ContentHandler#startPrefixMapping\n+     */\n+    public void startPrefixMapping (String prefix, String uri)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+\n+\n+    /**\n+     * Receive notification of the end of a Namespace mapping.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions at the end of\n+     * each prefix mapping.</p>\n+     *\n+     * @param prefix The Namespace prefix being declared.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ContentHandler#endPrefixMapping\n+     */\n+    public void endPrefixMapping (String prefix)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of the start of an element.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions at the start of\n+     * each element (such as allocating a new tree node or writing\n+     * output to a file).</p>\n+     *\n+     * @param uri The Namespace URI, or the empty string if the\n+     *        element has no Namespace URI or if Namespace\n+     *        processing is not being performed.\n+     * @param localName The local name (without prefix), or the\n+     *        empty string if Namespace processing is not being\n+     *        performed.\n+     * @param qName The qualified name (with prefix), or the\n+     *        empty string if qualified names are not available.\n+     * @param atts The attributes attached to the element.  If\n+     *        there are no attributes, it shall be an empty\n+     *        Attributes object.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ContentHandler#startElement\n+     */\n+    public void startElement (String uri, String localName,\n+\t\t\t      String qName, Attributes attributes)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of the end of an element.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions at the end of\n+     * each element (such as finalising a tree node or writing\n+     * output to a file).</p>\n+     *\n+     * @param uri The Namespace URI, or the empty string if the\n+     *        element has no Namespace URI or if Namespace\n+     *        processing is not being performed.\n+     * @param localName The local name (without prefix), or the\n+     *        empty string if Namespace processing is not being\n+     *        performed.\n+     * @param qName The qualified name (with prefix), or the\n+     *        empty string if qualified names are not available.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ContentHandler#endElement\n+     */\n+    public void endElement (String uri, String localName, String qName)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of character data inside an element.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method to take specific actions for each chunk of character data\n+     * (such as adding the data to a node or buffer, or printing it to\n+     * a file).</p>\n+     *\n+     * @param ch The characters.\n+     * @param start The start position in the character array.\n+     * @param length The number of characters to use from the\n+     *               character array.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ContentHandler#characters\n+     */\n+    public void characters (char ch[], int start, int length)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of ignorable whitespace in element content.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method to take specific actions for each chunk of ignorable\n+     * whitespace (such as adding data to a node or buffer, or printing\n+     * it to a file).</p>\n+     *\n+     * @param ch The whitespace characters.\n+     * @param start The start position in the character array.\n+     * @param length The number of characters to use from the\n+     *               character array.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ContentHandler#ignorableWhitespace\n+     */\n+    public void ignorableWhitespace (char ch[], int start, int length)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of a processing instruction.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions for each\n+     * processing instruction, such as setting status variables or\n+     * invoking other methods.</p>\n+     *\n+     * @param target The processing instruction target.\n+     * @param data The processing instruction data, or null if\n+     *             none is supplied.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ContentHandler#processingInstruction\n+     */\n+    public void processingInstruction (String target, String data)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+\n+\n+    /**\n+     * Receive notification of a skipped entity.\n+     *\n+     * <p>By default, do nothing.  Application writers may override this\n+     * method in a subclass to take specific actions for each\n+     * processing instruction, such as setting status variables or\n+     * invoking other methods.</p>\n+     *\n+     * @param name The name of the skipped entity.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ContentHandler#processingInstruction\n+     */\n+    public void skippedEntity (String name)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Default implementation of the ErrorHandler interface.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Receive notification of a parser warning.\n+     *\n+     * <p>The default implementation does nothing.  Application writers\n+     * may override this method in a subclass to take specific actions\n+     * for each warning, such as inserting the message in a log file or\n+     * printing it to the console.</p>\n+     *\n+     * @param e The warning information encoded as an exception.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ErrorHandler#warning\n+     * @see org.xml.sax.SAXParseException\n+     */\n+    public void warning (SAXParseException e)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Receive notification of a recoverable parser error.\n+     *\n+     * <p>The default implementation does nothing.  Application writers\n+     * may override this method in a subclass to take specific actions\n+     * for each error, such as inserting the message in a log file or\n+     * printing it to the console.</p>\n+     *\n+     * @param e The warning information encoded as an exception.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ErrorHandler#warning\n+     * @see org.xml.sax.SAXParseException\n+     */\n+    public void error (SAXParseException e)\n+\tthrows SAXException\n+    {\n+\t// no op\n+    }\n+    \n+    \n+    /**\n+     * Report a fatal XML parsing error.\n+     *\n+     * <p>The default implementation throws a SAXParseException.\n+     * Application writers may override this method in a subclass if\n+     * they need to take specific actions for each fatal error (such as\n+     * collecting all of the errors into a single report): in any case,\n+     * the application must stop all regular processing when this\n+     * method is invoked, since the document is no longer reliable, and\n+     * the parser may no longer report parsing events.</p>\n+     *\n+     * @param e The error information encoded as an exception.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @see org.xml.sax.ErrorHandler#fatalError\n+     * @see org.xml.sax.SAXParseException\n+     */\n+    public void fatalError (SAXParseException e)\n+\tthrows SAXException\n+    {\n+\tthrow e;\n+    }\n+    \n+}\n+\n+// end of DefaultHandler.java"}, {"sha": "4b297eabd9ce6e1152d4424d681a6e3fbd3623b5", "filename": "libjava/org/xml/sax/helpers/LocatorImpl.java", "status": "modified", "additions": 214, "deletions": 212, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FLocatorImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FLocatorImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FLocatorImpl.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,212 +1,214 @@\n-// SAX default implementation for Locator.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: LocatorImpl.java,v 1.1 2000/10/02 02:43:20 sboag Exp $\r\n-\r\n-package org.xml.sax.helpers;\r\n-\r\n-import org.xml.sax.Locator;\r\n-\r\n-\r\n-/**\r\n- * Provide an optional convenience implementation of Locator.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class is available mainly for application writers, who\r\n- * can use it to make a persistent snapshot of a locator at any\r\n- * point during a document parse:</p>\r\n- *\r\n- * <pre>\r\n- * Locator locator;\r\n- * Locator startloc;\r\n- *\r\n- * public void setLocator (Locator locator)\r\n- * {\r\n- *         // note the locator\r\n- *   this.locator = locator;\r\n- * }\r\n- *\r\n- * public void startDocument ()\r\n- * {\r\n- *         // save the location of the start of the document\r\n- *         // for future use.\r\n- *   Locator startloc = new LocatorImpl(locator);\r\n- * }\r\n- *</pre>\r\n- *\r\n- * <p>Normally, parser writers will not use this class, since it\r\n- * is more efficient to provide location information only when\r\n- * requested, rather than constantly updating a Locator object.</p>\r\n- *\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.Locator Locator\r\n- */\r\n-public class LocatorImpl implements Locator\r\n-{\r\n-    \r\n-    \r\n-    /**\r\n-     * Zero-argument constructor.\r\n-     *\r\n-     * <p>This will not normally be useful, since the main purpose\r\n-     * of this class is to make a snapshot of an existing Locator.</p>\r\n-     */\r\n-    public LocatorImpl ()\r\n-    {\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Copy constructor.\r\n-     *\r\n-     * <p>Create a persistent copy of the current state of a locator.\r\n-     * When the original locator changes, this copy will still keep\r\n-     * the original values (and it can be used outside the scope of\r\n-     * DocumentHandler methods).</p>\r\n-     *\r\n-     * @param locator The locator to copy.\r\n-     */\r\n-    public LocatorImpl (Locator locator)\r\n-    {\r\n-\tsetPublicId(locator.getPublicId());\r\n-\tsetSystemId(locator.getSystemId());\r\n-\tsetLineNumber(locator.getLineNumber());\r\n-\tsetColumnNumber(locator.getColumnNumber());\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.Locator\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the saved public identifier.\r\n-     *\r\n-     * @return The public identifier as a string, or null if none\r\n-     *         is available.\r\n-     * @see org.xml.sax.Locator#getPublicId\r\n-     * @see #setPublicId\r\n-     */\r\n-    public String getPublicId ()\r\n-    {\r\n-\treturn publicId;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the saved system identifier.\r\n-     *\r\n-     * @return The system identifier as a string, or null if none\r\n-     *         is available.\r\n-     * @see org.xml.sax.Locator#getSystemId\r\n-     * @see #setSystemId\r\n-     */\r\n-    public String getSystemId ()\r\n-    {\r\n-\treturn systemId;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the saved line number (1-based).\r\n-     *\r\n-     * @return The line number as an integer, or -1 if none is available.\r\n-     * @see org.xml.sax.Locator#getLineNumber\r\n-     * @see #setLineNumber\r\n-     */\r\n-    public int getLineNumber ()\r\n-    {\r\n-\treturn lineNumber;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Return the saved column number (1-based).\r\n-     *\r\n-     * @return The column number as an integer, or -1 if none is available.\r\n-     * @see org.xml.sax.Locator#getColumnNumber\r\n-     * @see #setColumnNumber\r\n-     */\r\n-    public int getColumnNumber ()\r\n-    {\r\n-\treturn columnNumber;\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Setters for the properties (not in org.xml.sax.Locator)\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    \r\n-    /**\r\n-     * Set the public identifier for this locator.\r\n-     *\r\n-     * @param publicId The new public identifier, or null \r\n-     *        if none is available.\r\n-     * @see #getPublicId\r\n-     */\r\n-    public void setPublicId (String publicId)\r\n-    {\r\n-\tthis.publicId = publicId;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Set the system identifier for this locator.\r\n-     *\r\n-     * @param systemId The new system identifier, or null \r\n-     *        if none is available.\r\n-     * @see #getSystemId\r\n-     */\r\n-    public void setSystemId (String systemId)\r\n-    {\r\n-\tthis.systemId = systemId;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Set the line number for this locator (1-based).\r\n-     *\r\n-     * @param lineNumber The line number, or -1 if none is available.\r\n-     * @see #getLineNumber\r\n-     */\r\n-    public void setLineNumber (int lineNumber)\r\n-    {\r\n-\tthis.lineNumber = lineNumber;\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Set the column number for this locator (1-based).\r\n-     *\r\n-     * @param columnNumber The column number, or -1 if none is available.\r\n-     * @see #getColumnNumber\r\n-     */\r\n-    public void setColumnNumber (int columnNumber)\r\n-    {\r\n-\tthis.columnNumber = columnNumber;\r\n-    }\r\n-    \r\n-    \r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal state.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    \r\n-    private String publicId;\r\n-    private String systemId;\r\n-    private int lineNumber;\r\n-    private int columnNumber;\r\n-    \r\n-}\r\n-\r\n-// end of LocatorImpl.java\r\n+// SAX default implementation for Locator.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: LocatorImpl.java,v 1.3.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax.helpers;\n+\n+import org.xml.sax.Locator;\n+\n+\n+/**\n+ * Provide an optional convenience implementation of Locator.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class is available mainly for application writers, who\n+ * can use it to make a persistent snapshot of a locator at any\n+ * point during a document parse:</p>\n+ *\n+ * <pre>\n+ * Locator locator;\n+ * Locator startloc;\n+ *\n+ * public void setLocator (Locator locator)\n+ * {\n+ *         // note the locator\n+ *   this.locator = locator;\n+ * }\n+ *\n+ * public void startDocument ()\n+ * {\n+ *         // save the location of the start of the document\n+ *         // for future use.\n+ *   Locator startloc = new LocatorImpl(locator);\n+ * }\n+ *</pre>\n+ *\n+ * <p>Normally, parser writers will not use this class, since it\n+ * is more efficient to provide location information only when\n+ * requested, rather than constantly updating a Locator object.</p>\n+ *\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.Locator Locator\n+ */\n+public class LocatorImpl implements Locator\n+{\n+    \n+    \n+    /**\n+     * Zero-argument constructor.\n+     *\n+     * <p>This will not normally be useful, since the main purpose\n+     * of this class is to make a snapshot of an existing Locator.</p>\n+     */\n+    public LocatorImpl ()\n+    {\n+    }\n+    \n+    \n+    /**\n+     * Copy constructor.\n+     *\n+     * <p>Create a persistent copy of the current state of a locator.\n+     * When the original locator changes, this copy will still keep\n+     * the original values (and it can be used outside the scope of\n+     * DocumentHandler methods).</p>\n+     *\n+     * @param locator The locator to copy.\n+     */\n+    public LocatorImpl (Locator locator)\n+    {\n+\tsetPublicId(locator.getPublicId());\n+\tsetSystemId(locator.getSystemId());\n+\tsetLineNumber(locator.getLineNumber());\n+\tsetColumnNumber(locator.getColumnNumber());\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.Locator\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Return the saved public identifier.\n+     *\n+     * @return The public identifier as a string, or null if none\n+     *         is available.\n+     * @see org.xml.sax.Locator#getPublicId\n+     * @see #setPublicId\n+     */\n+    public String getPublicId ()\n+    {\n+\treturn publicId;\n+    }\n+    \n+    \n+    /**\n+     * Return the saved system identifier.\n+     *\n+     * @return The system identifier as a string, or null if none\n+     *         is available.\n+     * @see org.xml.sax.Locator#getSystemId\n+     * @see #setSystemId\n+     */\n+    public String getSystemId ()\n+    {\n+\treturn systemId;\n+    }\n+    \n+    \n+    /**\n+     * Return the saved line number (1-based).\n+     *\n+     * @return The line number as an integer, or -1 if none is available.\n+     * @see org.xml.sax.Locator#getLineNumber\n+     * @see #setLineNumber\n+     */\n+    public int getLineNumber ()\n+    {\n+\treturn lineNumber;\n+    }\n+    \n+    \n+    /**\n+     * Return the saved column number (1-based).\n+     *\n+     * @return The column number as an integer, or -1 if none is available.\n+     * @see org.xml.sax.Locator#getColumnNumber\n+     * @see #setColumnNumber\n+     */\n+    public int getColumnNumber ()\n+    {\n+\treturn columnNumber;\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Setters for the properties (not in org.xml.sax.Locator)\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    \n+    /**\n+     * Set the public identifier for this locator.\n+     *\n+     * @param publicId The new public identifier, or null \n+     *        if none is available.\n+     * @see #getPublicId\n+     */\n+    public void setPublicId (String publicId)\n+    {\n+\tthis.publicId = publicId;\n+    }\n+    \n+    \n+    /**\n+     * Set the system identifier for this locator.\n+     *\n+     * @param systemId The new system identifier, or null \n+     *        if none is available.\n+     * @see #getSystemId\n+     */\n+    public void setSystemId (String systemId)\n+    {\n+\tthis.systemId = systemId;\n+    }\n+    \n+    \n+    /**\n+     * Set the line number for this locator (1-based).\n+     *\n+     * @param lineNumber The line number, or -1 if none is available.\n+     * @see #getLineNumber\n+     */\n+    public void setLineNumber (int lineNumber)\n+    {\n+\tthis.lineNumber = lineNumber;\n+    }\n+    \n+    \n+    /**\n+     * Set the column number for this locator (1-based).\n+     *\n+     * @param columnNumber The column number, or -1 if none is available.\n+     * @see #getColumnNumber\n+     */\n+    public void setColumnNumber (int columnNumber)\n+    {\n+\tthis.columnNumber = columnNumber;\n+    }\n+    \n+    \n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal state.\n+    ////////////////////////////////////////////////////////////////////\n+    \n+    private String publicId;\n+    private String systemId;\n+    private int lineNumber;\n+    private int columnNumber;\n+    \n+}\n+\n+// end of LocatorImpl.java"}, {"sha": "917a7f75dce93fc13a0f609caa9db9b4b101bb92", "filename": "libjava/org/xml/sax/helpers/NamespaceSupport.java", "status": "modified", "additions": 770, "deletions": 689, "changes": 1459, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FNamespaceSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FNamespaceSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FNamespaceSupport.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,689 +1,770 @@\n-// NamespaceSupport.java - generic Namespace support for SAX.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// This class is in the Public Domain.  NO WARRANTY!\r\n-\r\n-// $Id: NamespaceSupport.java,v 1.1 2000/10/02 02:43:20 sboag Exp $\r\n-\r\n-package org.xml.sax.helpers;\r\n-\r\n-import java.util.EmptyStackException;\r\n-import java.util.Enumeration;\r\n-import java.util.Hashtable;\r\n-import java.util.Vector;\r\n-\r\n-\r\n-/**\r\n- * Encapsulate Namespace logic for use by SAX drivers.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class encapsulates the logic of Namespace processing:\r\n- * it tracks the declarations currently in force for each context\r\n- * and automatically processes qualified XML 1.0 names into their\r\n- * Namespace parts; it can also be used in reverse for generating\r\n- * XML 1.0 from Namespaces.</p>\r\n- *\r\n- * <p>Namespace support objects are reusable, but the reset method\r\n- * must be invoked between each session.</p>\r\n- *\r\n- * <p>Here is a simple session:</p>\r\n- *\r\n- * <pre>\r\n- * String parts[] = new String[3];\r\n- * NamespaceSupport support = new NamespaceSupport();\r\n- *\r\n- * support.pushContext();\r\n- * support.declarePrefix(\"\", \"http://www.w3.org/1999/xhtml\");\r\n- * support.declarePrefix(\"dc\", \"http://www.purl.org/dc#\");\r\n- *\r\n- * String parts[] = support.processName(\"p\", parts, false);\r\n- * System.out.println(\"Namespace URI: \" + parts[0]);\r\n- * System.out.println(\"Local name: \" + parts[1]);\r\n- * System.out.println(\"Raw name: \" + parts[2]);\r\n-\r\n- * String parts[] = support.processName(\"dc:title\", parts, false);\r\n- * System.out.println(\"Namespace URI: \" + parts[0]);\r\n- * System.out.println(\"Local name: \" + parts[1]);\r\n- * System.out.println(\"Raw name: \" + parts[2]);\r\n-\r\n- * support.popContext();\r\n- * </pre>\r\n- *\r\n- * <p>Note that this class is optimized for the use case where most\r\n- * elements do not contain Namespace declarations: if the same\r\n- * prefix/URI mapping is repeated for each context (for example), this\r\n- * class will be somewhat less efficient.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- */\r\n-public class NamespaceSupport\r\n-{\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Constants.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * The XML Namespace as a constant.\r\n-     *\r\n-     * <p>This is the Namespace URI that is automatically mapped\r\n-     * to the \"xml\" prefix.</p>\r\n-     */\r\n-    public final static String XMLNS =\r\n-\t\"http://www.w3.org/XML/1998/namespace\";\r\n-\r\n-\r\n-    /**\r\n-     * An empty enumeration.\r\n-     */\r\n-    private final static Enumeration EMPTY_ENUMERATION =\r\n-\tnew Vector().elements();\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Constructor.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Create a new Namespace support object.\r\n-     */\r\n-    public NamespaceSupport ()\r\n-    {\r\n-\treset();\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Context management.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Reset this Namespace support object for reuse.\r\n-     *\r\n-     * <p>It is necessary to invoke this method before reusing the\r\n-     * Namespace support object for a new session.</p>\r\n-     */\r\n-    public void reset ()\r\n-    {\r\n-\tcontexts = new Context[32];\r\n-\tcontextPos = 0;\r\n-\tcontexts[contextPos] = currentContext = new Context();\r\n-\tcurrentContext.declarePrefix(\"xml\", XMLNS);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Start a new Namespace context.\r\n-     *\r\n-     * <p>Normally, you should push a new context at the beginning\r\n-     * of each XML element: the new context will automatically inherit\r\n-     * the declarations of its parent context, but it will also keep\r\n-     * track of which declarations were made within this context.</p>\r\n-     *\r\n-     * <p>The Namespace support object always starts with a base context\r\n-     * already in force: in this context, only the \"xml\" prefix is\r\n-     * declared.</p>\r\n-     *\r\n-     * @see #popContext\r\n-     */\r\n-    public void pushContext ()\r\n-    {\r\n-\tint max = contexts.length;\r\n-\tcontextPos++;\r\n-\r\n-\t\t\t\t// Extend the array if necessary\r\n-\tif (contextPos >= max) {\r\n-\t    Context newContexts[] = new Context[max*2];\r\n-\t    System.arraycopy(contexts, 0, newContexts, 0, max);\r\n-\t    max *= 2;\r\n-\t    contexts = newContexts;\r\n-\t}\r\n-\r\n-\t\t\t\t// Allocate the context if necessary.\r\n-\tcurrentContext = contexts[contextPos];\r\n-\tif (currentContext == null) {\r\n-\t    contexts[contextPos] = currentContext = new Context();\r\n-\t}\r\n-\r\n-\t\t\t\t// Set the parent, if any.\r\n-\tif (contextPos > 0) {\r\n-\t    currentContext.setParent(contexts[contextPos - 1]);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Revert to the previous Namespace context.\r\n-     *\r\n-     * <p>Normally, you should pop the context at the end of each\r\n-     * XML element.  After popping the context, all Namespace prefix\r\n-     * mappings that were previously in force are restored.</p>\r\n-     *\r\n-     * <p>You must not attempt to declare additional Namespace\r\n-     * prefixes after popping a context, unless you push another\r\n-     * context first.</p>\r\n-     *\r\n-     * @see #pushContext\r\n-     */\r\n-    public void popContext ()\r\n-    {\r\n-\tcontextPos--;\r\n-\tif (contextPos < 0) {\r\n-\t    throw new EmptyStackException();\r\n-\t}\r\n-\tcurrentContext = contexts[contextPos];\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Operations within a context.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Declare a Namespace prefix.\r\n-     *\r\n-     * <p>This method declares a prefix in the current Namespace\r\n-     * context; the prefix will remain in force until this context\r\n-     * is popped, unless it is shadowed in a descendant context.</p>\r\n-     *\r\n-     * <p>To declare a default Namespace, use the empty string.  The\r\n-     * prefix must not be \"xml\" or \"xmlns\".</p>\r\n-     *\r\n-     * <p>Note that you must <em>not</em> declare a prefix after\r\n-     * you've pushed and popped another Namespace.</p>\r\n-     *\r\n-     * <p>Note that there is an asymmetry in this library: while {@link\r\n-     * #getPrefix getPrefix} will not return the default \"\" prefix,\r\n-     * even if you have declared one; to check for a default prefix,\r\n-     * you have to look it up explicitly using {@link #getURI getURI}.\r\n-     * This asymmetry exists to make it easier to look up prefixes\r\n-     * for attribute names, where the default prefix is not allowed.</p>\r\n-     *\r\n-     * @param prefix The prefix to declare, or null for the empty\r\n-     *        string.\r\n-     * @param uri The Namespace URI to associate with the prefix.\r\n-     * @return true if the prefix was legal, false otherwise\r\n-     * @see #processName\r\n-     * @see #getURI\r\n-     * @see #getPrefix\r\n-     */\r\n-    public boolean declarePrefix (String prefix, String uri)\r\n-    {\r\n-\tif (prefix.equals(\"xml\") || prefix.equals(\"xmlns\")) {\r\n-\t    return false;\r\n-\t} else {\r\n-\t    currentContext.declarePrefix(prefix, uri);\r\n-\t    return true;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Process a raw XML 1.0 name.\r\n-     *\r\n-     * <p>This method processes a raw XML 1.0 name in the current\r\n-     * context by removing the prefix and looking it up among the\r\n-     * prefixes currently declared.  The return value will be the\r\n-     * array supplied by the caller, filled in as follows:</p>\r\n-     *\r\n-     * <dl>\r\n-     * <dt>parts[0]</dt>\r\n-     * <dd>The Namespace URI, or an empty string if none is\r\n-     *  in use.</dd>\r\n-     * <dt>parts[1]</dt>\r\n-     * <dd>The local name (without prefix).</dd>\r\n-     * <dt>parts[2]</dt>\r\n-     * <dd>The original raw name.</dd>\r\n-     * </dl>\r\n-     *\r\n-     * <p>All of the strings in the array will be internalized.  If\r\n-     * the raw name has a prefix that has not been declared, then\r\n-     * the return value will be null.</p>\r\n-     *\r\n-     * <p>Note that attribute names are processed differently than\r\n-     * element names: an unprefixed element name will received the\r\n-     * default Namespace (if any), while an unprefixed element name\r\n-     * will not.</p>\r\n-     *\r\n-     * @param qName The raw XML 1.0 name to be processed.\r\n-     * @param parts An array supplied by the caller, capable of\r\n-     *        holding at least three members.\r\n-     * @param isAttribute A flag indicating whether this is an\r\n-     *        attribute name (true) or an element name (false).\r\n-     * @return The supplied array holding three internalized strings \r\n-     *        representing the Namespace URI (or empty string), the\r\n-     *        local name, and the raw XML 1.0 name; or null if there\r\n-     *        is an undeclared prefix.\r\n-     * @see #declarePrefix\r\n-     * @see java.lang.String#intern */\r\n-    public String [] processName (String qName, String parts[],\r\n-\t\t\t\t  boolean isAttribute)\r\n-    {\r\n-\tString myParts[] = currentContext.processName(qName, isAttribute);\r\n-\tif (myParts == null) {\r\n-\t    return null;\r\n-\t} else {\r\n-\t    parts[0] = myParts[0];\r\n-\t    parts[1] = myParts[1];\r\n-\t    parts[2] = myParts[2];\r\n-\t    return parts;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Look up a prefix and get the currently-mapped Namespace URI.\r\n-     *\r\n-     * <p>This method looks up the prefix in the current context.\r\n-     * Use the empty string (\"\") for the default Namespace.</p>\r\n-     *\r\n-     * @param prefix The prefix to look up.\r\n-     * @return The associated Namespace URI, or null if the prefix\r\n-     *         is undeclared in this context.\r\n-     * @see #getPrefix\r\n-     * @see #getPrefixes\r\n-     */\r\n-    public String getURI (String prefix)\r\n-    {\r\n-\treturn currentContext.getURI(prefix);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return an enumeration of all prefixes currently declared.\r\n-     *\r\n-     * <p><strong>Note:</strong> if there is a default prefix, it will not be\r\n-     * returned in this enumeration; check for the default prefix\r\n-     * using the {@link #getURI getURI} with an argument of \"\".</p>\r\n-     *\r\n-     * @return An enumeration of all prefixes declared in the\r\n-     *         current context except for the empty (default)\r\n-     *         prefix.\r\n-     * @see #getDeclaredPrefixes\r\n-     * @see #getURI\r\n-     */\r\n-    public Enumeration getPrefixes ()\r\n-    {\r\n-\treturn currentContext.getPrefixes();\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return one of the prefixes mapped to a Namespace URI.\r\n-     *\r\n-     * <p>If more than one prefix is currently mapped to the same\r\n-     * URI, this method will make an arbitrary selection; if you\r\n-     * want all of the prefixes, use the {@link #getPrefixes}\r\n-     * method instead.</p>\r\n-     *\r\n-     * <p><strong>Note:</strong> this will never return the empty (default) prefix;\r\n-     * to check for a default prefix, use the {@link #getURI getURI}\r\n-     * method with an argument of \"\".</p>\r\n-     *\r\n-     * @param uri The Namespace URI.\r\n-     * @param isAttribute true if this prefix is for an attribute\r\n-     *        (and the default Namespace is not allowed).\r\n-     * @return One of the prefixes currently mapped to the URI supplied,\r\n-     *         or null if none is mapped or if the URI is assigned to\r\n-     *         the default Namespace.\r\n-     * @see #getPrefixes(java.lang.String)\r\n-     * @see #getURI\r\n-     */\r\n-    public String getPrefix (String uri)\r\n-    {\r\n-\treturn currentContext.getPrefix(uri);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return an enumeration of all prefixes currently declared for a URI.\r\n-     *\r\n-     * <p>This method returns prefixes mapped to a specific Namespace\r\n-     * URI.  The xml: prefix will be included.  If you want only one\r\n-     * prefix that's mapped to the Namespace URI, and you don't care \r\n-     * which one you get, use the {@link #getPrefix getPrefix}\r\n-     *  method instead.</p>\r\n-     *\r\n-     * <p><strong>Note:</strong> the empty (default) prefix is <em>never</em> included\r\n-     * in this enumeration; to check for the presence of a default\r\n-     * Namespace, use the {@link #getURI getURI} method with an\r\n-     * argument of \"\".</p>\r\n-     *\r\n-     * @param uri The Namespace URI.\r\n-     * @return An enumeration of all prefixes declared in the\r\n-     *         current context.\r\n-     * @see #getPrefix\r\n-     * @see #getDeclaredPrefixes\r\n-     * @see #getURI\r\n-     */\r\n-    public Enumeration getPrefixes (String uri)\r\n-    {\r\n-\tVector prefixes = new Vector();\r\n-\tEnumeration allPrefixes = getPrefixes();\r\n-\twhile (allPrefixes.hasMoreElements()) {\r\n-\t    String prefix = (String)allPrefixes.nextElement();\r\n-\t    if (uri.equals(getURI(prefix))) {\r\n-\t\tprefixes.addElement(prefix);\r\n-\t    }\r\n-\t}\r\n-\treturn prefixes.elements();\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return an enumeration of all prefixes declared in this context.\r\n-     *\r\n-     * <p>The empty (default) prefix will be included in this \r\n-     * enumeration; note that this behaviour differs from that of\r\n-     * {@link #getPrefix} and {@link #getPrefixes}.</p>\r\n-     *\r\n-     * @return An enumeration of all prefixes declared in this\r\n-     *         context.\r\n-     * @see #getPrefixes\r\n-     * @see #getURI\r\n-     */\r\n-    public Enumeration getDeclaredPrefixes ()\r\n-    {\r\n-\treturn currentContext.getDeclaredPrefixes();\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal state.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-    private Context contexts[];\r\n-    private Context currentContext;\r\n-    private int contextPos;\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal classes.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-    /**\r\n-     * Internal class for a single Namespace context.\r\n-     *\r\n-     * <p>This module caches and reuses Namespace contexts, so the number allocated\r\n-     * will be equal to the element depth of the document, not to the total\r\n-     * number of elements (i.e. 5-10 rather than tens of thousands).</p>\r\n-     */\r\n-    final class Context {\r\n-\r\n-\t/**\r\n-\t * Create the root-level Namespace context.\r\n-\t */\r\n-\tContext ()\r\n-\t{\r\n-\t    copyTables();\r\n-\t}\r\n-\t\r\n-\t\r\n-\t/**\r\n-\t * (Re)set the parent of this Namespace context.\r\n-\t *\r\n-\t * @param context The parent Namespace context object.\r\n-\t */\r\n-\tvoid setParent (Context parent)\r\n-\t{\r\n-\t    this.parent = parent;\r\n-\t    declarations = null;\r\n-\t    prefixTable = parent.prefixTable;\r\n-\t    uriTable = parent.uriTable;\r\n-\t    elementNameTable = parent.elementNameTable;\r\n-\t    attributeNameTable = parent.attributeNameTable;\r\n-\t    defaultNS = parent.defaultNS;\r\n-\t    tablesDirty = false;\r\n-\t}\r\n-\t\r\n-\t\r\n-\t/**\r\n-\t * Declare a Namespace prefix for this context.\r\n-\t *\r\n-\t * @param prefix The prefix to declare.\r\n-\t * @param uri The associated Namespace URI.\r\n-\t * @see org.xml.sax.helpers.NamespaceSupport#declarePrefix\r\n-\t */\r\n-\tvoid declarePrefix (String prefix, String uri)\r\n-\t{\r\n-\t\t\t\t// Lazy processing...\r\n-\t    if (!tablesDirty) {\r\n-\t\tcopyTables();\r\n-\t    }\r\n-\t    if (declarations == null) {\r\n-\t\tdeclarations = new Vector();\r\n-\t    }\r\n-\t    \r\n-\t    prefix = prefix.intern();\r\n-\t    uri = uri.intern();\r\n-\t    if (\"\".equals(prefix)) {\r\n-\t\tif (\"\".equals(uri)) {\r\n-\t\t    defaultNS = null;\r\n-\t\t} else {\r\n-\t\t    defaultNS = uri;\r\n-\t\t}\r\n-\t    } else {\r\n-\t\tprefixTable.put(prefix, uri);\r\n-\t\turiTable.put(uri, prefix); // may wipe out another prefix\r\n-\t    }\r\n-\t    declarations.addElement(prefix);\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Process a raw XML 1.0 name in this context.\r\n-\t *\r\n-\t * @param qName The raw XML 1.0 name.\r\n-\t * @param isAttribute true if this is an attribute name.\r\n-\t * @return An array of three strings containing the\r\n-\t *         URI part (or empty string), the local part,\r\n-\t *         and the raw name, all internalized, or null\r\n-\t *         if there is an undeclared prefix.\r\n-\t * @see org.xml.sax.helpers.NamespaceSupport#processName\r\n-\t */\r\n-\tString [] processName (String qName, boolean isAttribute)\r\n-\t{\r\n-\t    String name[];\r\n-\t    Hashtable table;\r\n-\t    \r\n-\t\t\t\t// Select the appropriate table.\r\n-\t    if (isAttribute) {\r\n-\t\ttable = elementNameTable;\r\n-\t    } else {\r\n-\t\ttable = attributeNameTable;\r\n-\t    }\r\n-\t    \r\n-\t\t\t\t// Start by looking in the cache, and\r\n-\t\t\t\t// return immediately if the name\r\n-\t\t\t\t// is already known in this content\r\n-\t    name = (String[])table.get(qName);\r\n-\t    if (name != null) {\r\n-\t\treturn name;\r\n-\t    }\r\n-\t    \r\n-\t\t\t\t// We haven't seen this name in this\r\n-\t\t\t\t// context before.\r\n-\t    name = new String[3];\r\n-\t    int index = qName.indexOf(':');\r\n-\t    \r\n-\t    \r\n-\t\t\t\t// No prefix.\r\n-\t    if (index == -1) {\r\n-\t\tif (isAttribute || defaultNS == null) {\r\n-\t\t    name[0] = \"\";\r\n-\t\t} else {\r\n-\t\t    name[0] = defaultNS;\r\n-\t\t}\r\n-\t\tname[1] = qName.intern();\r\n-\t\tname[2] = name[1];\r\n-\t    }\r\n-\t    \r\n-\t\t\t\t// Prefix\r\n-\t    else {\r\n-\t\tString prefix = qName.substring(0, index);\r\n-\t\tString local = qName.substring(index+1);\r\n-\t\tString uri;\r\n-\t\tif (\"\".equals(prefix)) {\r\n-\t\t    uri = defaultNS;\r\n-\t\t} else {\r\n-\t\t    uri = (String)prefixTable.get(prefix);\r\n-\t\t}\r\n-\t\tif (uri == null) {\r\n-\t\t    return null;\r\n-\t\t}\r\n-\t\tname[0] = uri;\r\n-\t\tname[1] = local.intern();\r\n-\t\tname[2] = qName.intern();\r\n-\t    }\r\n-\t    \r\n-\t\t\t\t// Save in the cache for future use.\r\n-\t    table.put(name[2], name);\r\n-\t    tablesDirty = true;\r\n-\t    return name;\r\n-\t}\r\n-\t\r\n-\r\n-\t/**\r\n-\t * Look up the URI associated with a prefix in this context.\r\n-\t *\r\n-\t * @param prefix The prefix to look up.\r\n-\t * @return The associated Namespace URI, or null if none is\r\n-\t *         declared.\t\r\n-\t * @see org.xml.sax.helpers.NamespaceSupport#getURI\r\n-\t */\r\n-\tString getURI (String prefix)\r\n-\t{\r\n-\t    if (\"\".equals(prefix)) {\r\n-\t\treturn defaultNS;\r\n-\t    } else if (prefixTable == null) {\r\n-\t\treturn null;\r\n-\t    } else {\r\n-\t\treturn (String)prefixTable.get(prefix);\r\n-\t    }\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Look up one of the prefixes associated with a URI in this context.\r\n-\t *\r\n-\t * <p>Since many prefixes may be mapped to the same URI,\r\n-\t * the return value may be unreliable.</p>\r\n-\t *\r\n-\t * @param uri The URI to look up.\r\n-\t * @return The associated prefix, or null if none is declared.\r\n-\t * @see org.xml.sax.helpers.NamespaceSupport#getPrefix\r\n-\t */\r\n-\tString getPrefix (String uri)\r\n-\t{\r\n-\t    if (uriTable == null) {\r\n-\t\treturn null;\r\n-\t    } else {\r\n-\t\treturn (String)uriTable.get(uri);\r\n-\t    }\r\n-\t}\r\n-\t\r\n-\t\r\n-\t/**\r\n-\t * Return an enumeration of prefixes declared in this context.\r\n-\t *\r\n-\t * @return An enumeration of prefixes (possibly empty).\r\n-\t * @see org.xml.sax.helpers.NamespaceSupport#getDeclaredPrefixes\r\n-\t */\r\n-\tEnumeration getDeclaredPrefixes ()\r\n-\t{\r\n-\t    if (declarations == null) {\r\n-\t\treturn EMPTY_ENUMERATION;\r\n-\t    } else {\r\n-\t\treturn declarations.elements();\r\n-\t    }\r\n-\t}\r\n-\t\r\n-\t\r\n-\t/**\r\n-\t * Return an enumeration of all prefixes currently in force.\r\n-\t *\r\n-\t * <p>The default prefix, if in force, is <em>not</em>\r\n-\t * returned, and will have to be checked for separately.</p>\r\n-\t *\r\n-\t * @return An enumeration of prefixes (never empty).\r\n-\t * @see org.xml.sax.helpers.NamespaceSupport#getPrefixes\r\n-\t */\r\n-\tEnumeration getPrefixes ()\r\n-\t{\r\n-\t    if (prefixTable == null) {\r\n-\t\treturn EMPTY_ENUMERATION;\r\n-\t    } else {\r\n-\t\treturn prefixTable.keys();\r\n-\t    }\r\n-\t}\r\n-\t\r\n-\t\r\n-\f\r\n-\t////////////////////////////////////////////////////////////////\r\n-\t// Internal methods.\r\n-\t////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-\t/**\r\n-\t * Copy on write for the internal tables in this context.\r\n-\t *\r\n-\t * <p>This class is optimized for the normal case where most\r\n-\t * elements do not contain Namespace declarations.</p>\r\n-\t */\t\r\n-\tprivate void copyTables ()\r\n-\t{\r\n-\t    if (prefixTable != null) {\r\n-\t\tprefixTable = (Hashtable)prefixTable.clone();\r\n-\t    } else {\r\n-\t\tprefixTable = new Hashtable();\r\n-\t    }\r\n-\t    if (uriTable != null) {\r\n-\t\turiTable = (Hashtable)uriTable.clone();\r\n-\t    } else {\r\n-\t\turiTable = new Hashtable();\r\n-\t    }\r\n-\t    elementNameTable = new Hashtable();\r\n-\t    attributeNameTable = new Hashtable();\r\n-\t    tablesDirty = true;\r\n-\t}\r\n-\r\n-\r\n-\f\r\n-\t////////////////////////////////////////////////////////////////\r\n-\t// Protected state.\r\n-\t////////////////////////////////////////////////////////////////\r\n-\t\r\n-\tHashtable prefixTable;\r\n-\tHashtable uriTable;\r\n-\tHashtable elementNameTable;\r\n-\tHashtable attributeNameTable;\r\n-\tString defaultNS = null;\r\n-\t\r\n-\r\n-\f\r\n-\t////////////////////////////////////////////////////////////////\r\n-\t// Internal state.\r\n-\t////////////////////////////////////////////////////////////////\r\n-\t\r\n-\tprivate Vector declarations = null;\r\n-\tprivate boolean tablesDirty = false;\r\n-\tprivate Context parent = null;\r\n-    }\r\n-}\r\n-\r\n-// end of NamespaceSupport.java\r\n+// NamespaceSupport.java - generic Namespace support for SAX.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// This class is in the Public Domain.  NO WARRANTY!\n+\n+// $Id: NamespaceSupport.java,v 1.6.2.5 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax.helpers;\n+\n+import java.util.EmptyStackException;\n+import java.util.Enumeration;\n+import java.util.Hashtable;\n+import java.util.Vector;\n+\n+\n+/**\n+ * Encapsulate Namespace logic for use by applications using SAX,\n+ * or internally by SAX drivers.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class encapsulates the logic of Namespace processing:\n+ * it tracks the declarations currently in force for each context\n+ * and automatically processes qualified XML 1.0 names into their\n+ * Namespace parts; it can also be used in reverse for generating\n+ * XML 1.0 from Namespaces.</p>\n+ *\n+ * <p>Namespace support objects are reusable, but the reset method\n+ * must be invoked between each session.</p>\n+ *\n+ * <p>Here is a simple session:</p>\n+ *\n+ * <pre>\n+ * String parts[] = new String[3];\n+ * NamespaceSupport support = new NamespaceSupport();\n+ *\n+ * support.pushContext();\n+ * support.declarePrefix(\"\", \"http://www.w3.org/1999/xhtml\");\n+ * support.declarePrefix(\"dc\", \"http://www.purl.org/dc#\");\n+ *\n+ * parts = support.processName(\"p\", parts, false);\n+ * System.out.println(\"Namespace URI: \" + parts[0]);\n+ * System.out.println(\"Local name: \" + parts[1]);\n+ * System.out.println(\"Raw name: \" + parts[2]);\n+ *\n+ * parts = support.processName(\"dc:title\", parts, false);\n+ * System.out.println(\"Namespace URI: \" + parts[0]);\n+ * System.out.println(\"Local name: \" + parts[1]);\n+ * System.out.println(\"Raw name: \" + parts[2]);\n+ *\n+ * support.popContext();\n+ * </pre>\n+ *\n+ * <p>Note that this class is optimized for the use case where most\n+ * elements do not contain Namespace declarations: if the same\n+ * prefix/URI mapping is repeated for each context (for example), this\n+ * class will be somewhat less efficient.</p>\n+ *\n+ * <p>Although SAX drivers (parsers) may choose to use this class to\n+ * implement namespace handling, they are not required to do so.\n+ * Applications must track namespace information themselves if they\n+ * want to use namespace information.\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ */\n+public class NamespaceSupport\n+{\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Constants.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * The XML Namespace URI as a constant.\n+     * The value is <code>http://www.w3.org/XML/1998/namespace</code>\n+     * as defined in the XML Namespaces specification.\n+     *\n+     * <p>This is the Namespace URI that is automatically mapped\n+     * to the \"xml\" prefix.</p>\n+     */\n+    public final static String XMLNS =\n+\t\"http://www.w3.org/XML/1998/namespace\";\n+\n+\n+    /**\n+     * An empty enumeration.\n+     */\n+    private final static Enumeration EMPTY_ENUMERATION =\n+\tnew Vector().elements();\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Constructor.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Create a new Namespace support object.\n+     */\n+    public NamespaceSupport ()\n+    {\n+\treset();\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Context management.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Reset this Namespace support object for reuse.\n+     *\n+     * <p>It is necessary to invoke this method before reusing the\n+     * Namespace support object for a new session.</p>\n+     */\n+    public void reset ()\n+    {\n+\tcontexts = new Context[32];\n+\tcontextPos = 0;\n+\tcontexts[contextPos] = currentContext = new Context();\n+\tcurrentContext.declarePrefix(\"xml\", XMLNS);\n+    }\n+\n+\n+    /**\n+     * Start a new Namespace context.\n+     * The new context will automatically inherit\n+     * the declarations of its parent context, but it will also keep\n+     * track of which declarations were made within this context.\n+     *\n+     * <p>Event callback code should start a new context once per element.\n+     * This means being ready to call this in either of two places.\n+     * For elements that don't include namespace declarations, the\n+     * <em>ContentHandler.startElement()</em> callback is the right place.\n+     * For elements with such a declaration, it'd done in the first\n+     * <em>ContentHandler.startPrefixMapping()</em> callback.\n+     * A boolean flag can be used to\n+     * track whether a context has been started yet.  When either of\n+     * those methods is called, it checks the flag to see if a new context\n+     * needs to be started.  If so, it starts the context and sets the\n+     * flag.  After <em>ContentHandler.startElement()</em>\n+     * does that, it always clears the flag.\n+     *\n+     * <p>Normally, SAX drivers would push a new context at the beginning\n+     * of each XML element.  Then they perform a first pass over the\n+     * attributes to process all namespace declarations, making\n+     * <em>ContentHandler.startPrefixMapping()</em> callbacks.\n+     * Then a second pass is made, to determine the namespace-qualified\n+     * names for all attributes and for the element name.\n+     * Finally all the information for the\n+     * <em>ContentHandler.startElement()</em> callback is available,\n+     * so it can then be made.\n+     *\n+     * <p>The Namespace support object always starts with a base context\n+     * already in force: in this context, only the \"xml\" prefix is\n+     * declared.</p>\n+     *\n+     * @see org.xml.sax.ContentHandler\n+     * @see #popContext\n+     */\n+    public void pushContext ()\n+    {\n+\tint max = contexts.length;\n+\n+\tcontexts [contextPos].declsOK = false;\n+\tcontextPos++;\n+\n+\t\t\t\t// Extend the array if necessary\n+\tif (contextPos >= max) {\n+\t    Context newContexts[] = new Context[max*2];\n+\t    System.arraycopy(contexts, 0, newContexts, 0, max);\n+\t    max *= 2;\n+\t    contexts = newContexts;\n+\t}\n+\n+\t\t\t\t// Allocate the context if necessary.\n+\tcurrentContext = contexts[contextPos];\n+\tif (currentContext == null) {\n+\t    contexts[contextPos] = currentContext = new Context();\n+\t}\n+\n+\t\t\t\t// Set the parent, if any.\n+\tif (contextPos > 0) {\n+\t    currentContext.setParent(contexts[contextPos - 1]);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Revert to the previous Namespace context.\n+     *\n+     * <p>Normally, you should pop the context at the end of each\n+     * XML element.  After popping the context, all Namespace prefix\n+     * mappings that were previously in force are restored.</p>\n+     *\n+     * <p>You must not attempt to declare additional Namespace\n+     * prefixes after popping a context, unless you push another\n+     * context first.</p>\n+     *\n+     * @see #pushContext\n+     */\n+    public void popContext ()\n+    {\n+\tcontexts[contextPos].clear();\n+\tcontextPos--;\n+\tif (contextPos < 0) {\n+\t    throw new EmptyStackException();\n+\t}\n+\tcurrentContext = contexts[contextPos];\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Operations within a context.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Declare a Namespace prefix.  All prefixes must be declared\n+     * before they are referenced.  For example, a SAX driver (parser)\n+     * would scan an element's attributes\n+     * in two passes:  first for namespace declarations,\n+     * then a second pass using {@link #processName processName()} to\n+     * interpret prefixes against (potentially redefined) prefixes.\n+     *\n+     * <p>This method declares a prefix in the current Namespace\n+     * context; the prefix will remain in force until this context\n+     * is popped, unless it is shadowed in a descendant context.</p>\n+     *\n+     * <p>To declare the default element Namespace, use the empty string as\n+     * the prefix.</p>\n+     *\n+     * <p>Note that you must <em>not</em> declare a prefix after\n+     * you've pushed and popped another Namespace context, or\n+     * treated the declarations phase as complete by processing\n+     * a prefixed name.</p>\n+     *\n+     * <p>Note that there is an asymmetry in this library: {@link\n+     * #getPrefix getPrefix} will not return the \"\" prefix,\n+     * even if you have declared a default element namespace.\n+     * To check for a default namespace,\n+     * you have to look it up explicitly using {@link #getURI getURI}.\n+     * This asymmetry exists to make it easier to look up prefixes\n+     * for attribute names, where the default prefix is not allowed.</p>\n+     *\n+     * @param prefix The prefix to declare, or the empty string to\n+     *\tindicate the default element namespace.  This may never have\n+     *\tthe value \"xml\" or \"xmlns\".\n+     * @param uri The Namespace URI to associate with the prefix.\n+     * @return true if the prefix was legal, false otherwise\n+     * @exception IllegalStateException when a prefix is declared\n+     *\tafter looking up a name in the context, or after pushing\n+     *\tanother context on top of it.\n+     *\n+     * @see #processName\n+     * @see #getURI\n+     * @see #getPrefix\n+     */\n+    public boolean declarePrefix (String prefix, String uri)\n+    {\n+\tif (prefix.equals(\"xml\") || prefix.equals(\"xmlns\")) {\n+\t    return false;\n+\t} else {\n+\t    currentContext.declarePrefix(prefix, uri);\n+\t    return true;\n+\t}\n+    }\n+\n+\n+    /**\n+     * Process a raw XML 1.0 name, after all declarations in the current\n+     * context have been handled by {@link #declarePrefix declarePrefix()}.\n+     *\n+     * <p>This method processes a raw XML 1.0 name in the current\n+     * context by removing the prefix and looking it up among the\n+     * prefixes currently declared.  The return value will be the\n+     * array supplied by the caller, filled in as follows:</p>\n+     *\n+     * <dl>\n+     * <dt>parts[0]</dt>\n+     * <dd>The Namespace URI, or an empty string if none is\n+     *  in use.</dd>\n+     * <dt>parts[1]</dt>\n+     * <dd>The local name (without prefix).</dd>\n+     * <dt>parts[2]</dt>\n+     * <dd>The original raw name.</dd>\n+     * </dl>\n+     *\n+     * <p>All of the strings in the array will be internalized.  If\n+     * the raw name has a prefix that has not been declared, then\n+     * the return value will be null.</p>\n+     *\n+     * <p>Note that attribute names are processed differently than\n+     * element names: an unprefixed element name will received the\n+     * default Namespace (if any), while an unprefixed attribute name\n+     * will not.</p>\n+     *\n+     * @param qName The raw XML 1.0 name to be processed.\n+     * @param parts An array supplied by the caller, capable of\n+     *        holding at least three members.\n+     * @param isAttribute A flag indicating whether this is an\n+     *        attribute name (true) or an element name (false).\n+     * @return The supplied array holding three internalized strings \n+     *        representing the Namespace URI (or empty string), the\n+     *        local name, and the raw XML 1.0 name; or null if there\n+     *        is an undeclared prefix.\n+     * @see #declarePrefix\n+     * @see java.lang.String#intern */\n+    public String [] processName (String qName, String parts[],\n+\t\t\t\t  boolean isAttribute)\n+    {\n+\tString myParts[] = currentContext.processName(qName, isAttribute);\n+\tif (myParts == null) {\n+\t    return null;\n+\t} else {\n+\t    parts[0] = myParts[0];\n+\t    parts[1] = myParts[1];\n+\t    parts[2] = myParts[2];\n+\t    return parts;\n+\t}\n+    }\n+\n+\n+    /**\n+     * Look up a prefix and get the currently-mapped Namespace URI.\n+     *\n+     * <p>This method looks up the prefix in the current context.\n+     * Use the empty string (\"\") for the default Namespace.</p>\n+     *\n+     * @param prefix The prefix to look up.\n+     * @return The associated Namespace URI, or null if the prefix\n+     *         is undeclared in this context.\n+     * @see #getPrefix\n+     * @see #getPrefixes\n+     */\n+    public String getURI (String prefix)\n+    {\n+\treturn currentContext.getURI(prefix);\n+    }\n+\n+\n+    /**\n+     * Return an enumeration of all prefixes currently declared.\n+     *\n+     * <p><strong>Note:</strong> if there is a default prefix, it will not be\n+     * returned in this enumeration; check for the default prefix\n+     * using the {@link #getURI getURI} with an argument of \"\".</p>\n+     *\n+     * @return An enumeration of all prefixes declared in the\n+     *         current context except for the empty (default)\n+     *         prefix.\n+     * @see #getDeclaredPrefixes\n+     * @see #getURI\n+     */\n+    public Enumeration getPrefixes ()\n+    {\n+\treturn currentContext.getPrefixes();\n+    }\n+\n+\n+    /**\n+     * Return one of the prefixes mapped to a Namespace URI.\n+     *\n+     * <p>If more than one prefix is currently mapped to the same\n+     * URI, this method will make an arbitrary selection; if you\n+     * want all of the prefixes, use the {@link #getPrefixes}\n+     * method instead.</p>\n+     *\n+     * <p><strong>Note:</strong> this will never return the empty (default) prefix;\n+     * to check for a default prefix, use the {@link #getURI getURI}\n+     * method with an argument of \"\".</p>\n+     *\n+     * @param uri The Namespace URI.\n+     * @param isAttribute true if this prefix is for an attribute\n+     *        (and the default Namespace is not allowed).\n+     * @return One of the prefixes currently mapped to the URI supplied,\n+     *         or null if none is mapped or if the URI is assigned to\n+     *         the default Namespace.\n+     * @see #getPrefixes(java.lang.String)\n+     * @see #getURI\n+     */\n+    public String getPrefix (String uri)\n+    {\n+\treturn currentContext.getPrefix(uri);\n+    }\n+\n+\n+    /**\n+     * Return an enumeration of all prefixes currently declared for a URI.\n+     *\n+     * <p>This method returns prefixes mapped to a specific Namespace\n+     * URI.  The xml: prefix will be included.  If you want only one\n+     * prefix that's mapped to the Namespace URI, and you don't care \n+     * which one you get, use the {@link #getPrefix getPrefix}\n+     *  method instead.</p>\n+     *\n+     * <p><strong>Note:</strong> the empty (default) prefix is <em>never</em> included\n+     * in this enumeration; to check for the presence of a default\n+     * Namespace, use the {@link #getURI getURI} method with an\n+     * argument of \"\".</p>\n+     *\n+     * @param uri The Namespace URI.\n+     * @return An enumeration of all prefixes declared in the\n+     *         current context.\n+     * @see #getPrefix\n+     * @see #getDeclaredPrefixes\n+     * @see #getURI\n+     */\n+    public Enumeration getPrefixes (String uri)\n+    {\n+\tVector prefixes = new Vector();\n+\tEnumeration allPrefixes = getPrefixes();\n+\twhile (allPrefixes.hasMoreElements()) {\n+\t    String prefix = (String)allPrefixes.nextElement();\n+\t    if (uri.equals(getURI(prefix))) {\n+\t\tprefixes.addElement(prefix);\n+\t    }\n+\t}\n+\treturn prefixes.elements();\n+    }\n+\n+\n+    /**\n+     * Return an enumeration of all prefixes declared in this context.\n+     *\n+     * <p>The empty (default) prefix will be included in this \n+     * enumeration; note that this behaviour differs from that of\n+     * {@link #getPrefix} and {@link #getPrefixes}.</p>\n+     *\n+     * @return An enumeration of all prefixes declared in this\n+     *         context.\n+     * @see #getPrefixes\n+     * @see #getURI\n+     */\n+    public Enumeration getDeclaredPrefixes ()\n+    {\n+\treturn currentContext.getDeclaredPrefixes();\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal state.\n+    ////////////////////////////////////////////////////////////////////\n+\n+    private Context contexts[];\n+    private Context currentContext;\n+    private int contextPos;\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal classes.\n+    ////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Internal class for a single Namespace context.\n+     *\n+     * <p>This module caches and reuses Namespace contexts,\n+     * so the number allocated\n+     * will be equal to the element depth of the document, not to the total\n+     * number of elements (i.e. 5-10 rather than tens of thousands).\n+     * Also, data structures used to represent contexts are shared when\n+     * possible (child contexts without declarations) to further reduce\n+     * the amount of memory that's consumed.\n+     * </p>\n+     */\n+    final class Context {\n+\n+\t/**\n+\t * Create the root-level Namespace context.\n+\t */\n+\tContext ()\n+\t{\n+\t    copyTables();\n+\t}\n+\t\n+\t\n+\t/**\n+\t * (Re)set the parent of this Namespace context.\n+\t * The context must either have been freshly constructed,\n+\t * or must have been cleared.\n+\t *\n+\t * @param context The parent Namespace context object.\n+\t */\n+\tvoid setParent (Context parent)\n+\t{\n+\t    this.parent = parent;\n+\t    declarations = null;\n+\t    prefixTable = parent.prefixTable;\n+\t    uriTable = parent.uriTable;\n+\t    elementNameTable = parent.elementNameTable;\n+\t    attributeNameTable = parent.attributeNameTable;\n+\t    defaultNS = parent.defaultNS;\n+\t    declSeen = false;\n+\t    declsOK = true;\n+\t}\n+\n+\t/**\n+\t * Makes associated state become collectible,\n+\t * invalidating this context.\n+\t * {@link #setParent} must be called before\n+\t * this context may be used again.\n+\t */\n+\tvoid clear ()\n+\t{\n+\t    parent = null;\n+\t    prefixTable = null;\n+\t    uriTable = null;\n+\t    elementNameTable = null;\n+\t    attributeNameTable = null;\n+\t    defaultNS = null;\n+\t}\n+\t\n+\t\n+\t/**\n+\t * Declare a Namespace prefix for this context.\n+\t *\n+\t * @param prefix The prefix to declare.\n+\t * @param uri The associated Namespace URI.\n+\t * @see org.xml.sax.helpers.NamespaceSupport#declarePrefix\n+\t */\n+\tvoid declarePrefix (String prefix, String uri)\n+\t{\n+\t\t\t\t// Lazy processing...\n+\t    if (!declsOK)\n+\t\tthrow new IllegalStateException (\n+\t\t    \"can't declare any more prefixes in this context\");\n+\t    if (!declSeen) {\n+\t\tcopyTables();\n+\t    }\n+\t    if (declarations == null) {\n+\t\tdeclarations = new Vector();\n+\t    }\n+\t    \n+\t    prefix = prefix.intern();\n+\t    uri = uri.intern();\n+\t    if (\"\".equals(prefix)) {\n+\t\tif (\"\".equals(uri)) {\n+\t\t    defaultNS = null;\n+\t\t} else {\n+\t\t    defaultNS = uri;\n+\t\t}\n+\t    } else {\n+\t\tprefixTable.put(prefix, uri);\n+\t\turiTable.put(uri, prefix); // may wipe out another prefix\n+\t    }\n+\t    declarations.addElement(prefix);\n+\t}\n+\n+\n+\t/**\n+\t * Process a raw XML 1.0 name in this context.\n+\t *\n+\t * @param qName The raw XML 1.0 name.\n+\t * @param isAttribute true if this is an attribute name.\n+\t * @return An array of three strings containing the\n+\t *         URI part (or empty string), the local part,\n+\t *         and the raw name, all internalized, or null\n+\t *         if there is an undeclared prefix.\n+\t * @see org.xml.sax.helpers.NamespaceSupport#processName\n+\t */\n+\tString [] processName (String qName, boolean isAttribute)\n+\t{\n+\t    String name[];\n+\t    Hashtable table;\n+\t    \n+\t    \t\t\t// detect errors in call sequence\n+\t    declsOK = false;\n+\n+\t\t\t\t// Select the appropriate table.\n+\t    if (isAttribute) {\n+\t\ttable = attributeNameTable;\n+\t    } else {\n+\t\ttable = elementNameTable;\n+\t    }\n+\t    \n+\t\t\t\t// Start by looking in the cache, and\n+\t\t\t\t// return immediately if the name\n+\t\t\t\t// is already known in this content\n+\t    name = (String[])table.get(qName);\n+\t    if (name != null) {\n+\t\treturn name;\n+\t    }\n+\t    \n+\t\t\t\t// We haven't seen this name in this\n+\t\t\t\t// context before.  Maybe in the parent\n+\t\t\t\t// context, but we can't assume prefix\n+\t\t\t\t// bindings are the same.\n+\t    name = new String[3];\n+\t    name[2] = qName.intern();\n+\t    int index = qName.indexOf(':');\n+\t    \n+\t    \n+\t\t\t\t// No prefix.\n+\t    if (index == -1) {\n+\t\tif (isAttribute || defaultNS == null) {\n+\t\t    name[0] = \"\";\n+\t\t} else {\n+\t\t    name[0] = defaultNS;\n+\t\t}\n+\t\tname[1] = name[2];\n+\t    }\n+\t    \n+\t\t\t\t// Prefix\n+\t    else {\n+\t\tString prefix = qName.substring(0, index);\n+\t\tString local = qName.substring(index+1);\n+\t\tString uri;\n+\t\tif (\"\".equals(prefix)) {\n+\t\t    uri = defaultNS;\n+\t\t} else {\n+\t\t    uri = (String)prefixTable.get(prefix);\n+\t\t}\n+\t\tif (uri == null) {\n+\t\t    return null;\n+\t\t}\n+\t\tname[0] = uri;\n+\t\tname[1] = local.intern();\n+\t    }\n+\t    \n+\t\t\t\t// Save in the cache for future use.\n+\t\t\t\t// (Could be shared with parent context...)\n+\t    table.put(name[2], name);\n+\t    return name;\n+\t}\n+\t\n+\n+\t/**\n+\t * Look up the URI associated with a prefix in this context.\n+\t *\n+\t * @param prefix The prefix to look up.\n+\t * @return The associated Namespace URI, or null if none is\n+\t *         declared.\t\n+\t * @see org.xml.sax.helpers.NamespaceSupport#getURI\n+\t */\n+\tString getURI (String prefix)\n+\t{\n+\t    if (\"\".equals(prefix)) {\n+\t\treturn defaultNS;\n+\t    } else if (prefixTable == null) {\n+\t\treturn null;\n+\t    } else {\n+\t\treturn (String)prefixTable.get(prefix);\n+\t    }\n+\t}\n+\n+\n+\t/**\n+\t * Look up one of the prefixes associated with a URI in this context.\n+\t *\n+\t * <p>Since many prefixes may be mapped to the same URI,\n+\t * the return value may be unreliable.</p>\n+\t *\n+\t * @param uri The URI to look up.\n+\t * @return The associated prefix, or null if none is declared.\n+\t * @see org.xml.sax.helpers.NamespaceSupport#getPrefix\n+\t */\n+\tString getPrefix (String uri)\n+\t{\n+\t    if (uriTable == null) {\n+\t\treturn null;\n+\t    } else {\n+\t\treturn (String)uriTable.get(uri);\n+\t    }\n+\t}\n+\t\n+\t\n+\t/**\n+\t * Return an enumeration of prefixes declared in this context.\n+\t *\n+\t * @return An enumeration of prefixes (possibly empty).\n+\t * @see org.xml.sax.helpers.NamespaceSupport#getDeclaredPrefixes\n+\t */\n+\tEnumeration getDeclaredPrefixes ()\n+\t{\n+\t    if (declarations == null) {\n+\t\treturn EMPTY_ENUMERATION;\n+\t    } else {\n+\t\treturn declarations.elements();\n+\t    }\n+\t}\n+\t\n+\t\n+\t/**\n+\t * Return an enumeration of all prefixes currently in force.\n+\t *\n+\t * <p>The default prefix, if in force, is <em>not</em>\n+\t * returned, and will have to be checked for separately.</p>\n+\t *\n+\t * @return An enumeration of prefixes (never empty).\n+\t * @see org.xml.sax.helpers.NamespaceSupport#getPrefixes\n+\t */\n+\tEnumeration getPrefixes ()\n+\t{\n+\t    if (prefixTable == null) {\n+\t\treturn EMPTY_ENUMERATION;\n+\t    } else {\n+\t\treturn prefixTable.keys();\n+\t    }\n+\t}\n+\t\n+\t\n+\f\n+\t////////////////////////////////////////////////////////////////\n+\t// Internal methods.\n+\t////////////////////////////////////////////////////////////////\n+\n+\n+\t/**\n+\t * Copy on write for the internal tables in this context.\n+\t *\n+\t * <p>This class is optimized for the normal case where most\n+\t * elements do not contain Namespace declarations.</p>\n+\t */\t\n+\tprivate void copyTables ()\n+\t{\n+\t    if (prefixTable != null) {\n+\t\tprefixTable = (Hashtable)prefixTable.clone();\n+\t    } else {\n+\t\tprefixTable = new Hashtable();\n+\t    }\n+\t    if (uriTable != null) {\n+\t\turiTable = (Hashtable)uriTable.clone();\n+\t    } else {\n+\t\turiTable = new Hashtable();\n+\t    }\n+\t    elementNameTable = new Hashtable();\n+\t    attributeNameTable = new Hashtable();\n+\t    declSeen = true;\n+\t}\n+\n+\n+\f\n+\t////////////////////////////////////////////////////////////////\n+\t// Protected state.\n+\t////////////////////////////////////////////////////////////////\n+\t\n+\tHashtable prefixTable;\n+\tHashtable uriTable;\n+\tHashtable elementNameTable;\n+\tHashtable attributeNameTable;\n+\tString defaultNS = null;\n+\tboolean declsOK = true;\n+\t\n+\n+\f\n+\t////////////////////////////////////////////////////////////////\n+\t// Internal state.\n+\t////////////////////////////////////////////////////////////////\n+\t\n+\tprivate Vector declarations = null;\n+\tprivate boolean declSeen = false;\n+\tprivate Context parent = null;\n+    }\n+}\n+\n+// end of NamespaceSupport.java"}, {"sha": "7d107a65239227135cc71b12c4686d242ceb8231", "filename": "libjava/org/xml/sax/helpers/NewInstance.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FNewInstance.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FNewInstance.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FNewInstance.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -0,0 +1,80 @@\n+// NewInstance.java - create a new instance of a class by name.\n+// http://www.saxproject.org\n+// Written by Edwin Goei, edwingo@apache.org\n+// and by David Brownell, dbrownell@users.sourceforge.net\n+// NO WARRANTY!  This class is in the Public Domain.\n+\n+// $Id: NewInstance.java,v 1.1.2.4 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax.helpers;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.InvocationTargetException;\n+\n+/**\n+ * Create a new instance of a class by name.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class contains a static method for creating an instance of a\n+ * class from an explicit class name.  It tries to use the thread's context\n+ * ClassLoader if possible and falls back to using\n+ * Class.forName(String).</p>\n+ *\n+ * <p>This code is designed to compile and run on JDK version 1.1 and later\n+ * including versions of Java 2.</p>\n+ *\n+ * @author Edwin Goei, David Brownell\n+ * @version 2.0.1 (sax2r2)\n+ */\n+class NewInstance {\n+\n+    /**\n+     * Creates a new instance of the specified class name\n+     *\n+     * Package private so this code is not exposed at the API level.\n+     */\n+    static Object newInstance (ClassLoader classLoader, String className)\n+        throws ClassNotFoundException, IllegalAccessException,\n+            InstantiationException\n+    {\n+        Class driverClass;\n+        if (classLoader == null) {\n+            driverClass = Class.forName(className);\n+        } else {\n+            driverClass = classLoader.loadClass(className);\n+        }\n+        return driverClass.newInstance();\n+    }\n+\n+    /**\n+     * Figure out which ClassLoader to use.  For JDK 1.2 and later use\n+     * the context ClassLoader.\n+     */           \n+    static ClassLoader getClassLoader ()\n+    {\n+        Method m = null;\n+\n+        try {\n+            m = Thread.class.getMethod(\"getContextClassLoader\", null);\n+        } catch (NoSuchMethodException e) {\n+            // Assume that we are running JDK 1.1, use the current ClassLoader\n+            return NewInstance.class.getClassLoader();\n+        }\n+\n+        try {\n+            return (ClassLoader) m.invoke(Thread.currentThread(), null);\n+        } catch (IllegalAccessException e) {\n+            // assert(false)\n+            throw new UnknownError(e.getMessage());\n+        } catch (InvocationTargetException e) {\n+            // assert(e.getTargetException() instanceof SecurityException)\n+            throw new UnknownError(e.getMessage());\n+        }\n+    }\n+}"}, {"sha": "ca66a9e2dc77ff665794f65732b899b468d6e7e2", "filename": "libjava/org/xml/sax/helpers/ParserAdapter.java", "status": "modified", "additions": 1026, "deletions": 1008, "changes": 2034, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FParserAdapter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FParserAdapter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FParserAdapter.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,1008 +1,1026 @@\n-// ParserAdapter.java - adapt a SAX1 Parser to a SAX2 XMLReader.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the public domain.\r\n-\r\n-// $Id: ParserAdapter.java,v 1.1 2000/10/02 02:43:20 sboag Exp $\r\n-\r\n-package org.xml.sax.helpers;\r\n-\r\n-import java.io.IOException;\r\n-import java.util.Enumeration;\r\n-\r\n-import org.xml.sax.Parser;\t// deprecated\r\n-import org.xml.sax.InputSource;\r\n-import org.xml.sax.Locator;\r\n-import org.xml.sax.AttributeList; // deprecated\r\n-import org.xml.sax.EntityResolver;\r\n-import org.xml.sax.DTDHandler;\r\n-import org.xml.sax.DocumentHandler; // deprecated\r\n-import org.xml.sax.ErrorHandler;\r\n-import org.xml.sax.SAXException;\r\n-import org.xml.sax.SAXParseException;\r\n-\r\n-import org.xml.sax.XMLReader;\r\n-import org.xml.sax.Attributes;\r\n-import org.xml.sax.ContentHandler;\r\n-import org.xml.sax.SAXNotRecognizedException;\r\n-import org.xml.sax.SAXNotSupportedException;\r\n-\r\n-\r\n-/**\r\n- * Adapt a SAX1 Parser as a SAX2 XMLReader.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class wraps a SAX1 {@link org.xml.sax.Parser Parser}\r\n- * and makes it act as a SAX2 {@link org.xml.sax.XMLReader XMLReader},\r\n- * with feature, property, and Namespace support.  Note\r\n- * that it is not possible to report {@link org.xml.sax.ContentHandler#skippedEntity\r\n- * skippedEntity} events, since SAX1 does not make that information available.</p>\r\n- *\r\n- * <p>This adapter does not test for duplicate Namespace-qualified\r\n- * attribute names.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.helpers.XMLReaderAdapter\r\n- * @see org.xml.sax.XMLReader\r\n- * @see org.xml.sax.Parser\r\n- */\r\n-public class ParserAdapter implements XMLReader, DocumentHandler\r\n-{\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Constructors.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Construct a new parser adapter.\r\n-     *\r\n-     * <p>Use the \"org.xml.sax.parser\" property to locate the\r\n-     * embedded SAX1 driver.</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException If the embedded driver\r\n-     *            cannot be instantiated or if the\r\n-     *            org.xml.sax.parser property is not specified.\r\n-     */\r\n-    public ParserAdapter ()\r\n-      throws SAXException\r\n-    {\r\n-\tsuper();\r\n-\r\n-\tString driver = System.getProperty(\"org.xml.sax.parser\");\r\n-\r\n-\ttry {\r\n-\t    setup(ParserFactory.makeParser());\r\n-\t} catch (ClassNotFoundException e1) {\r\n-\t    throw new\r\n-\t\tSAXException(\"Cannot find SAX1 driver class \" +\r\n-\t\t\t     driver, e1);\r\n-\t} catch (IllegalAccessException e2) {\r\n-\t    throw new\r\n-\t\tSAXException(\"SAX1 driver class \" +\r\n-\t\t\t     driver +\r\n-\t\t\t     \" found but cannot be loaded\", e2);\r\n-\t} catch (InstantiationException e3) {\r\n-\t    throw new\r\n-\t\tSAXException(\"SAX1 driver class \" +\r\n-\t\t\t     driver +\r\n-\t\t\t     \" loaded but cannot be instantiated\", e3);\r\n-\t} catch (ClassCastException e4) {\r\n-\t    throw new\r\n-\t\tSAXException(\"SAX1 driver class \" +\r\n-\t\t\t     driver +\r\n-\t\t\t     \" does not implement org.xml.sax.Parser\");\r\n-\t} catch (NullPointerException e5) {\r\n-\t    throw new \r\n-\t\tSAXException(\"System property org.xml.sax.parser not specified\");\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Construct a new parser adapter.\r\n-     *\r\n-     * <p>Note that the embedded parser cannot be changed once the\r\n-     * adapter is created; to embed a different parser, allocate\r\n-     * a new ParserAdapter.</p>\r\n-     *\r\n-     * @param parser The SAX1 parser to embed.\r\n-     * @exception java.lang.NullPointerException If the parser parameter\r\n-     *            is null.\r\n-     */\r\n-    public ParserAdapter (Parser parser)\r\n-    {\r\n-\tsuper();\r\n-\tsetup(parser);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Internal setup method.\r\n-     *\r\n-     * @param parser The embedded parser.\r\n-     * @exception java.lang.NullPointerException If the parser parameter\r\n-     *            is null.\r\n-     */\r\n-    private void setup (Parser parser)\r\n-    {\r\n-\tif (parser == null) {\r\n-\t    throw new\r\n-\t\tNullPointerException(\"Parser argument must not be null\");\r\n-\t}\r\n-\tthis.parser = parser;\r\n-\tatts = new AttributesImpl();\r\n-\tnsSupport = new NamespaceSupport();\r\n-\tattAdapter = new AttributeListAdapter();\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.XMLReader.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    //\r\n-    // Internal constants for the sake of convenience.\r\n-    //\r\n-    private final static String FEATURES = \"http://xml.org/sax/features/\";\r\n-    private final static String NAMESPACES = FEATURES + \"namespaces\";\r\n-    private final static String NAMESPACE_PREFIXES = FEATURES + \"namespace-prefixes\";\r\n-    private final static String VALIDATION = FEATURES + \"validation\";\r\n-    private final static String EXTERNAL_GENERAL =\r\n-\tFEATURES + \"external-general-entities\";\r\n-    private final static String EXTERNAL_PARAMETER =\r\n-\tFEATURES + \"external-parameter-entities\";\r\n-\r\n-\r\n-    /**\r\n-     * Set a feature for the parser.\r\n-     *\r\n-     * <p>The only features supported are namespaces and \r\n-     * namespace-prefixes.</p>\r\n-     *\r\n-     * @param name The feature name, as a complete URI.\r\n-     * @param state The requested feature state.\r\n-     * @exception org.xml.sax.SAXNotRecognizedException If the feature\r\n-     *            name is not known.\r\n-     * @exception org.xml.sax.SAXNotSupportedException If the feature\r\n-     *            state is not supported.\r\n-     * @see org.xml.sax.XMLReader#setFeature\r\n-     */\r\n-    public void setFeature (String name, boolean state)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException\r\n-    {\r\n-\tif (name.equals(NAMESPACES)) {\r\n-\t    checkNotParsing(\"feature\", name);\r\n-\t    namespaces = state;\r\n-\t    if (!namespaces && !prefixes) {\r\n-\t\tprefixes = true;\r\n-\t    }\r\n-\t} else if (name.equals(NAMESPACE_PREFIXES)) {\r\n-\t    checkNotParsing(\"feature\", name);\r\n-\t    prefixes = state;\r\n-\t    if (!prefixes && !namespaces) {\r\n-\t\tnamespaces = true;\r\n-\t    }\r\n-\t} else if (name.equals(VALIDATION) ||\r\n-\t\t   name.equals(EXTERNAL_GENERAL) ||\r\n-\t\t   name.equals(EXTERNAL_PARAMETER)) {\r\n-\t    throw new SAXNotSupportedException(\"Feature: \" + name);\r\n-\t} else {\r\n-\t    throw new SAXNotRecognizedException(\"Feature: \" + name);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Check a parser feature.\r\n-     *\r\n-     * <p>The only features supported are namespaces and \r\n-     * namespace-prefixes.</p>\r\n-     *\r\n-     * @param name The feature name, as a complete URI.\r\n-     * @return The current feature state.\r\n-     * @exception org.xml.sax.SAXNotRecognizedException If the feature\r\n-     *            name is not known.\r\n-     * @exception org.xml.sax.SAXNotSupportedException If querying the\r\n-     *            feature state is not supported.\r\n-     * @see org.xml.sax.XMLReader#setFeature\r\n-     */\r\n-    public boolean getFeature (String name)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException\r\n-    {\r\n-\tif (name.equals(NAMESPACES)) {\r\n-\t    return namespaces;\r\n-\t} else if (name.equals(NAMESPACE_PREFIXES)) {\r\n-\t    return prefixes;\r\n-\t} else if (name.equals(VALIDATION) ||\r\n-\t\t   name.equals(EXTERNAL_GENERAL) ||\r\n-\t\t   name.equals(EXTERNAL_PARAMETER)) {\r\n-\t    throw new SAXNotSupportedException(\"Feature: \" + name);\r\n-\t} else {\r\n-\t    throw new SAXNotRecognizedException(\"Feature: \" + name);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set a parser property.\r\n-     *\r\n-     * <p>No special properties are currently supported.</p>\r\n-     *\r\n-     * @param name The property name.\r\n-     * @param value The property value.\r\n-     * @exception org.xml.sax.SAXNotRecognizedException If the feature\r\n-     *            name is not known.\r\n-     * @exception org.xml.sax.SAXNotSupportedException If the feature\r\n-     *            state is not supported.\r\n-     * @see org.xml.sax.XMLReader#setProperty\r\n-     */\r\n-    public void setProperty (String name, Object value)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException\r\n-    {\r\n-\tthrow new SAXNotRecognizedException(\"Property: \" + name);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Get a parser property.\r\n-     *\r\n-     * <p>No special properties are currently supported.</p>\r\n-     *\r\n-     * @param name The property name.\r\n-     * @return The property value.\r\n-     * @exception org.xml.sax.SAXNotRecognizedException If the feature\r\n-     *            name is not known.\r\n-     * @exception org.xml.sax.SAXNotSupportedException If the feature\r\n-     *            state is not supported.\r\n-     * @see org.xml.sax.XMLReader#getProperty\r\n-     */\r\n-    public Object getProperty (String name)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException\r\n-    {\r\n-\tthrow new SAXNotRecognizedException(\"Property: \" + name);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the entity resolver.\r\n-     *\r\n-     * @param resolver The new entity resolver.\r\n-     * @exception java.lang.NullPointerException If the entity resolver\r\n-     *            parameter is null.\r\n-     * @see org.xml.sax.XMLReader#setEntityResolver\r\n-     */\r\n-    public void setEntityResolver (EntityResolver resolver)\r\n-    {\r\n-\tif (resolver == null) {\r\n-\t    throw new NullPointerException(\"Null entity resolver\");\r\n-\t}\r\n-\tentityResolver = resolver;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return the current entity resolver.\r\n-     *\r\n-     * @return The current entity resolver, or null if none was supplied.\r\n-     * @see org.xml.sax.XMLReader#getEntityResolver\r\n-     */\r\n-    public EntityResolver getEntityResolver ()\r\n-    {\r\n-\treturn entityResolver;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the DTD handler.\r\n-     *\r\n-     * @param resolver The new DTD handler.\r\n-     * @exception java.lang.NullPointerException If the DTD handler\r\n-     *            parameter is null.\r\n-     * @see org.xml.sax.XMLReader#setEntityResolver\r\n-     */\r\n-    public void setDTDHandler (DTDHandler handler)\r\n-    {\r\n-\tif (handler == null) {\r\n-\t    throw new NullPointerException(\"Null DTD handler\");\r\n-\t}\r\n-\tdtdHandler = handler;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return the current DTD handler.\r\n-     *\r\n-     * @return The current DTD handler, or null if none was supplied.\r\n-     * @see org.xml.sax.XMLReader#getEntityResolver\r\n-     */\r\n-    public DTDHandler getDTDHandler ()\r\n-    {\r\n-\treturn dtdHandler;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the content handler.\r\n-     *\r\n-     * @param resolver The new content handler.\r\n-     * @exception java.lang.NullPointerException If the content handler\r\n-     *            parameter is null.\r\n-     * @see org.xml.sax.XMLReader#setEntityResolver\r\n-     */\r\n-    public void setContentHandler (ContentHandler handler)\r\n-    {\r\n-\tif (handler == null) {\r\n-\t    throw new NullPointerException(\"Null content handler\");\r\n-\t}\r\n-\tcontentHandler = handler;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return the current content handler.\r\n-     *\r\n-     * @return The current content handler, or null if none was supplied.\r\n-     * @see org.xml.sax.XMLReader#getEntityResolver\r\n-     */\r\n-    public ContentHandler getContentHandler ()\r\n-    {\r\n-\treturn contentHandler;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the error handler.\r\n-     *\r\n-     * @param resolver The new error handler.\r\n-     * @exception java.lang.NullPointerException If the error handler\r\n-     *            parameter is null.\r\n-     * @see org.xml.sax.XMLReader#setEntityResolver\r\n-     */\r\n-    public void setErrorHandler (ErrorHandler handler)\r\n-    {\r\n-\tif (handler == null) {\r\n-\t    throw new NullPointerException(\"Null error handler\");\r\n-\t}\r\n-\terrorHandler = handler;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Return the current error handler.\r\n-     *\r\n-     * @return The current error handler, or null if none was supplied.\r\n-     * @see org.xml.sax.XMLReader#getEntityResolver\r\n-     */\r\n-    public ErrorHandler getErrorHandler ()\r\n-    {\r\n-\treturn errorHandler;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Parse an XML document.\r\n-     *\r\n-     * @param systemId The absolute URL of the document.\r\n-     * @exception java.io.IOException If there is a problem reading\r\n-     *            the raw content of the document.\r\n-     * @exception org.xml.sax.SAXException If there is a problem\r\n-     *            processing the document.\r\n-     * @see #parse(org.xml.sax.InputSource)\r\n-     * @see org.xml.sax.Parser#parse(java.lang.String)\r\n-     */\r\n-    public void parse (String systemId)\r\n-\tthrows IOException, SAXException\r\n-    {\r\n-\tparse(new InputSource(systemId));\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Parse an XML document.\r\n-     *\r\n-     * @param input An input source for the document.\r\n-     * @exception java.io.IOException If there is a problem reading\r\n-     *            the raw content of the document.\r\n-     * @exception org.xml.sax.SAXException If there is a problem\r\n-     *            processing the document.\r\n-     * @see #parse(java.lang.String)\r\n-     * @see org.xml.sax.Parser#parse(org.xml.sax.InputSource)\r\n-     */\r\n-    public void parse (InputSource input)\r\n-\tthrows IOException, SAXException\r\n-    {\r\n-\tif (parsing) {\r\n-\t    throw new SAXException(\"Parser is already in use\");\r\n-\t}\r\n-\tsetupParser();\r\n-\tparsing = true;\r\n-\ttry {\r\n-\t    parser.parse(input);\r\n-\t} finally {\r\n-\t    parsing = false;\r\n-\t}\r\n-\tparsing = false;\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.DocumentHandler.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX1 document locator event.\r\n-     *\r\n-     * @param locator A document locator.\r\n-     * @see org.xml.sax.ContentHandler#setDocumentLocator\r\n-     */\r\n-    public void setDocumentLocator (Locator locator)\r\n-    {\r\n-\tthis.locator = locator;\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.setDocumentLocator(locator);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX1 start document event.\r\n-     *\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.DocumentHandler#startDocument\r\n-     */\r\n-    public void startDocument ()\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.startDocument();\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX1 end document event.\r\n-     *\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.DocumentHandler#endDocument\r\n-     */\r\n-    public void endDocument ()\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.endDocument();\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX1 startElement event.\r\n-     *\r\n-     * <p>If necessary, perform Namespace processing.</p>\r\n-     *\r\n-     * @param qName The qualified (prefixed) name.\r\n-     * @param qAtts The XML 1.0 attribute list (with qnames).\r\n-     */\r\n-    public void startElement (String qName, AttributeList qAtts)\r\n-\tthrows SAXException\r\n-    {\r\n-\t\t\t\t// If we're not doing Namespace\r\n-\t\t\t\t// processing, dispatch this quickly.\r\n-\tif (!namespaces) {\r\n-\t    if (contentHandler != null) {\r\n-\t\tattAdapter.setAttributeList(qAtts);\r\n-\t\tcontentHandler.startElement(\"\", \"\", qName.intern(),\r\n-\t\t\t\t\t    attAdapter);\r\n-\t    }\r\n-\t    return;\r\n-\t}\r\n-\r\n-\r\n-\t\t\t\t// OK, we're doing Namespace processing.\r\n-\tnsSupport.pushContext();\r\n-\tboolean seenDecl = false;\r\n-\tatts.clear();\r\n-\t\r\n-\t\t\t\t// Take a first pass and copy all\r\n-\t\t\t\t// attributes into the SAX2 attribute\r\n-\t\t\t\t// list, noting any Namespace \r\n-\t\t\t\t// declarations.\r\n-\tint length = qAtts.getLength();\r\n-\tfor (int i = 0; i < length; i++) {\r\n-\t    String attQName = qAtts.getName(i);\r\n-\t    String type = qAtts.getType(i);\r\n-\t    String value = qAtts.getValue(i);\r\n-\r\n-\t\t\t\t// Found a declaration...\r\n-\t    if (attQName.startsWith(\"xmlns\")) {\r\n-\t\tString prefix;\r\n-\t\tint n = attQName.indexOf(':');\r\n-\t\tif (n == -1) {\r\n-\t\t    prefix = \"\";\r\n-\t\t} else {\r\n-\t\t    prefix = attQName.substring(n+1);\r\n-\t\t}\r\n-\t\tif (!nsSupport.declarePrefix(prefix, value)) {\r\n-\t\t    reportError(\"Illegal Namespace prefix: \" + prefix);\r\n-\t\t}\r\n-\t\tif (contentHandler != null) {\r\n-\t\t    contentHandler.startPrefixMapping(prefix, value);\r\n-\t\t}\r\n-\t\t\t\t// We may still have to add this to\r\n-\t\t\t\t// the list.\r\n-\t\tif (prefixes) {\r\n-\t\t    atts.addAttribute(\"\", \"\", attQName.intern(),\r\n-\t\t\t\t      type, value);\r\n-\t\t}\r\n-\t\tseenDecl = true;\r\n-\r\n-\t\t\t\t// This isn't a declaration.\r\n-\t    } else {\r\n-\t\tString attName[] = processName(attQName, true);\r\n-\t\tatts.addAttribute(attName[0], attName[1], attName[2],\r\n-\t\t\t\t  type, value);\r\n-\t    }\r\n-\t}\r\n-\t\r\n-\t\t\t\t// If there was a Namespace declaration,\r\n-\t\t\t\t// we have to make a second pass just\r\n-\t\t\t\t// to be safe -- this will happen very\r\n-\t\t\t\t// rarely, possibly only once for each\r\n-\t\t\t\t// document.\r\n-\tif (seenDecl) {\r\n-\t    length = atts.getLength();\r\n-\t    for (int i = 0; i < length; i++) {\r\n-\t\tString attQName = atts.getQName(i);\r\n-\t\tif (!attQName.startsWith(\"xmlns\")) {\r\n-\t\t    String attName[] = processName(attQName, true);\r\n-\t\t    atts.setURI(i, attName[0]);\r\n-\t\t    atts.setLocalName(i, attName[1]);\r\n-\t\t}\r\n-\t    }\r\n-\t}\r\n-\r\n-\t\t\t\t// OK, finally report the event.\r\n-\tif (contentHandler != null) {\r\n-\t    String name[] = processName(qName, false);\r\n-\t    contentHandler.startElement(name[0], name[1], name[2], atts);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX1 end element event.\r\n-     *\r\n-     * @param qName The qualified (prefixed) name.\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.DocumentHandler#endElement\r\n-     */\r\n-    public void endElement (String qName)\r\n-\tthrows SAXException\r\n-    {\r\n-\t\t\t\t// If we're not doing Namespace\r\n-\t\t\t\t// processing, dispatch this quickly.\r\n-\tif (!namespaces) {\r\n-\t    if (contentHandler != null) {\r\n-\t\tcontentHandler.endElement(\"\", \"\", qName.intern());\r\n-\t    }\r\n-\t    return;\r\n-\t}\r\n-\r\n-\t\t\t\t// Split the name.\r\n-\tString names[] = processName(qName, false);\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.endElement(names[0], names[1], names[2]);\r\n-\t    Enumeration prefixes = nsSupport.getDeclaredPrefixes();\r\n-\t    while (prefixes.hasMoreElements()) {\r\n-\t\tString prefix = (String)prefixes.nextElement();\r\n-\t\tcontentHandler.endPrefixMapping(prefix);\r\n-\t    }\r\n-\t}\r\n-\tnsSupport.popContext();\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX1 characters event.\r\n-     *\r\n-     * @param ch An array of characters.\r\n-     * @param start The starting position in the array.\r\n-     * @param length The number of characters to use.\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.DocumentHandler#characters\r\n-     */\r\n-    public void characters (char ch[], int start, int length)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.characters(ch, start, length);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX1 ignorable whitespace event.\r\n-     *\r\n-     * @param ch An array of characters.\r\n-     * @param start The starting position in the array.\r\n-     * @param length The number of characters to use.\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.DocumentHandler#ignorableWhitespace\r\n-     */\r\n-    public void ignorableWhitespace (char ch[], int start, int length)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.ignorableWhitespace(ch, start, length);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX1 processing instruction event.\r\n-     *\r\n-     * @param target The processing instruction target.\r\n-     * @param data The remainder of the processing instruction\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.DocumentHandler#processingInstruction\r\n-     */\r\n-    public void processingInstruction (String target, String data)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.processingInstruction(target, data);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal utility methods.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Initialize the parser before each run.\r\n-     */\r\n-    private void setupParser ()\r\n-    {\r\n-\tnsSupport.reset();\r\n-\r\n-\tif (entityResolver != null) {\r\n-\t    parser.setEntityResolver(entityResolver);\r\n-\t}\r\n-\tif (dtdHandler != null) {\r\n-\t    parser.setDTDHandler(dtdHandler);\r\n-\t}\r\n-\tif (errorHandler != null) {\r\n-\t    parser.setErrorHandler(errorHandler);\r\n-\t}\r\n-\tparser.setDocumentHandler(this);\r\n-\tlocator = null;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Process a qualified (prefixed) name.\r\n-     *\r\n-     * <p>If the name has an undeclared prefix, use only the qname\r\n-     * and make an ErrorHandler.error callback in case the app is\r\n-     * interested.</p>\r\n-     *\r\n-     * @param qName The qualified (prefixed) name.\r\n-     * @param isAttribute true if this is an attribute name.\r\n-     * @return The name split into three parts.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception if there is an error callback.\r\n-     */\r\n-    private String [] processName (String qName, boolean isAttribute)\r\n-\tthrows SAXException\r\n-    {\r\n-\tString parts[] = nsSupport.processName(qName, nameParts,\r\n-\t\t\t\t\t       isAttribute);\r\n-\tif (parts == null) {\r\n-\t    parts = new String[3];\r\n-\t    parts[2] = qName.intern();\r\n-\t    reportError(\"Undeclared prefix: \" + qName);\r\n-\t}\r\n-\treturn parts;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Report a non-fatal error.\r\n-     *\r\n-     * @param message The error message.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception.\r\n-     */\r\n-    void reportError (String message)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (errorHandler == null) {\r\n-\t    return;\r\n-\t}\r\n-\r\n-\tSAXParseException e;\r\n-\tif (locator != null) {\r\n-\t    e = new SAXParseException(message, locator);\r\n-\t} else {\r\n-\t    e = new SAXParseException(message, null, null, -1, -1);\r\n-\t}\r\n-\terrorHandler.error(e);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Throw an exception if we are parsing.\r\n-     *\r\n-     * <p>Use this method to detect illegal feature or\r\n-     * property changes.</p>\r\n-     *\r\n-     * @param type The type of thing (feature or property).\r\n-     * @param name The feature or property name.\r\n-     * @exception org.xml.sax.SAXNotSupportedException If a\r\n-     *            document is currently being parsed.\r\n-     */\r\n-    private void checkNotParsing (String type, String name)\r\n-\tthrows SAXNotSupportedException\r\n-    {\r\n-\tif (parsing) {\r\n-\t    throw new SAXNotSupportedException(\"Cannot change \" +\r\n-\t\t\t\t\t       type + ' ' +\r\n-\t\t\t\t\t       name + \" while parsing\");\r\n-\t\t\t\t\t       \r\n-\t}\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal state.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-    private NamespaceSupport nsSupport;\r\n-    private AttributeListAdapter attAdapter;\r\n-\r\n-    private boolean parsing = false;\r\n-    private String nameParts[] = new String[3];\r\n-\r\n-    private Parser parser = null;\r\n-\r\n-    private AttributesImpl atts = null;\r\n-\r\n-\t\t\t\t// Features\r\n-    private boolean namespaces = true;\r\n-    private boolean prefixes = false;\r\n-\r\n-\t\t\t\t// Properties\r\n-\r\n-\t\t\t\t// Handlers\r\n-    Locator locator;\r\n-\r\n-    EntityResolver entityResolver = null;\r\n-    DTDHandler dtdHandler = null;\r\n-    ContentHandler contentHandler = null;\r\n-    ErrorHandler errorHandler = null;\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Inner class to wrap an AttributeList when not doing NS proc.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX1 AttributeList as a SAX2 Attributes object.\r\n-     *\r\n-     * <p>This class is in the Public Domain, and comes with NO\r\n-     * WARRANTY of any kind.</p>\r\n-     *\r\n-     * <p>This wrapper class is used only when Namespace support\r\n-     * is disabled -- it provides pretty much a direct mapping\r\n-     * from SAX1 to SAX2, except that names and types are \r\n-     * interned whenever requested.</p>\r\n-     */\r\n-    final class AttributeListAdapter implements Attributes\r\n-    {\r\n-\r\n-\t/**\r\n-\t * Construct a new adapter.\r\n-\t */\r\n-\tAttributeListAdapter ()\r\n-\t{\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Set the embedded AttributeList.\r\n-\t *\r\n-\t * <p>This method must be invoked before any of the others\r\n-\t * can be used.</p>\r\n-\t *\r\n-\t * @param The SAX1 attribute list (with qnames).\r\n-\t */\r\n-\tvoid setAttributeList (AttributeList qAtts)\r\n-\t{\r\n-\t    this.qAtts = qAtts;\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the length of the attribute list.\r\n-\t *\r\n-\t * @return The number of attributes in the list.\r\n-\t * @see org.xml.sax.Attributes#getLength\r\n-\t */\r\n-\tpublic int getLength ()\r\n-\t{\r\n-\t    return qAtts.getLength();\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the Namespace URI of the specified attribute.\r\n-\t *\r\n-\t * @param The attribute's index.\r\n-\t * @return Always the empty string.\r\n-\t * @see org.xml.sax.Attributes#getURI\r\n-\t */\r\n-\tpublic String getURI (int i)\r\n-\t{\r\n-\t    return \"\";\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the local name of the specified attribute.\r\n-\t *\r\n-\t * @param The attribute's index.\r\n-\t * @return Always the empty string.\r\n-\t * @see org.xml.sax.Attributes#getLocalName\r\n-\t */\r\n-\tpublic String getLocalName (int i)\r\n-\t{\r\n-\t    return \"\";\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the qualified (prefixed) name of the specified attribute.\r\n-\t *\r\n-\t * @param The attribute's index.\r\n-\t * @return The attribute's qualified name, internalized.\r\n-\t */\r\n-\tpublic String getQName (int i)\r\n-\t{\r\n-\t    return qAtts.getName(i).intern();\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the type of the specified attribute.\r\n-\t *\r\n-\t * @param The attribute's index.\r\n-\t * @return The attribute's type as an internalized string.\r\n-\t */\r\n-\tpublic String getType (int i)\r\n-\t{\r\n-\t    return qAtts.getType(i).intern();\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the value of the specified attribute.\r\n-\t *\r\n-\t * @param The attribute's index.\r\n-\t * @return The attribute's value.\r\n-\t */\r\n-\tpublic String getValue (int i)\r\n-\t{\r\n-\t    return qAtts.getValue(i);\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Look up an attribute index by Namespace name.\r\n-\t *\r\n-\t * @param uri The Namespace URI or the empty string.\r\n-\t * @param localName The local name.\r\n-\t * @return The attributes index, or -1 if none was found.\r\n-\t * @see org.xml.sax.Attributes#getIndex(java.lang.String,java.lang.String)\r\n-\t */\r\n-\tpublic int getIndex (String uri, String localName)\r\n-\t{\r\n-\t    return -1;\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Look up an attribute index by qualified (prefixed) name.\r\n-\t *\r\n-\t * @param qName The qualified name.\r\n-\t * @return The attributes index, or -1 if none was found.\r\n-\t * @see org.xml.sax.Attributes#getIndex(java.lang.String)\r\n-\t */\r\n-\tpublic int getIndex (String qName)\r\n-\t{\r\n-\t    int max = atts.getLength();\r\n-\t    for (int i = 0; i < max; i++) {\r\n-\t\tif (qAtts.getName(i).equals(qName)) {\r\n-\t\t    return i;\r\n-\t\t}\r\n-\t    }\r\n-\t    return -1;\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Look up the type of an attribute by Namespace name.\r\n-\t *\r\n-\t * @param uri The Namespace URI\r\n-\t * @param localName The local name.\r\n-\t * @return The attribute's type as an internalized string.\r\n-\t */\r\n-\tpublic String getType (String uri, String localName)\r\n-\t{\r\n-\t    return null;\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Look up the type of an attribute by qualified (prefixed) name.\r\n-\t *\r\n-\t * @param qName The qualified name.\r\n-\t * @return The attribute's type as an internalized string.\r\n-\t */\r\n-\tpublic String getType (String qName)\r\n-\t{\r\n-\t    return qAtts.getType(qName).intern();\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Look up the value of an attribute by Namespace name.\r\n-\t *\r\n-\t * @param uri The Namespace URI\r\n-\t * @param localName The local name.\r\n-\t * @return The attribute's value.\r\n-\t */\r\n-\tpublic String getValue (String uri, String localName)\r\n-\t{\r\n-\t    return null;\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Look up the value of an attribute by qualified (prefixed) name.\r\n-\t *\r\n-\t * @param qName The qualified name.\r\n-\t * @return The attribute's value.\r\n-\t */\r\n-\tpublic String getValue (String qName)\r\n-\t{\r\n-\t    return qAtts.getValue(qName);\r\n-\t}\r\n-\r\n-\tprivate AttributeList qAtts;\r\n-    }\r\n-}\r\n-\r\n-// end of ParserAdapter.java\r\n+// ParserAdapter.java - adapt a SAX1 Parser to a SAX2 XMLReader.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the public domain.\n+\n+// $Id: ParserAdapter.java,v 1.8.2.4 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax.helpers;\n+\n+import java.io.IOException;\n+import java.util.Enumeration;\n+import java.util.Vector;\n+\n+import org.xml.sax.Parser;\t// deprecated\n+import org.xml.sax.InputSource;\n+import org.xml.sax.Locator;\n+import org.xml.sax.AttributeList; // deprecated\n+import org.xml.sax.EntityResolver;\n+import org.xml.sax.DTDHandler;\n+import org.xml.sax.DocumentHandler; // deprecated\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXNotRecognizedException;\n+import org.xml.sax.SAXNotSupportedException;\n+\n+\n+/**\n+ * Adapt a SAX1 Parser as a SAX2 XMLReader.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class wraps a SAX1 {@link org.xml.sax.Parser Parser}\n+ * and makes it act as a SAX2 {@link org.xml.sax.XMLReader XMLReader},\n+ * with feature, property, and Namespace support.  Note\n+ * that it is not possible to report {@link org.xml.sax.ContentHandler#skippedEntity\n+ * skippedEntity} events, since SAX1 does not make that information available.</p>\n+ *\n+ * <p>This adapter does not test for duplicate Namespace-qualified\n+ * attribute names.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.helpers.XMLReaderAdapter\n+ * @see org.xml.sax.XMLReader\n+ * @see org.xml.sax.Parser\n+ */\n+public class ParserAdapter implements XMLReader, DocumentHandler\n+{\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Constructors.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Construct a new parser adapter.\n+     *\n+     * <p>Use the \"org.xml.sax.parser\" property to locate the\n+     * embedded SAX1 driver.</p>\n+     *\n+     * @exception SAXException If the embedded driver\n+     *            cannot be instantiated or if the\n+     *            org.xml.sax.parser property is not specified.\n+     */\n+    public ParserAdapter ()\n+      throws SAXException\n+    {\n+\tsuper();\n+\n+\tString driver = System.getProperty(\"org.xml.sax.parser\");\n+\n+\ttry {\n+\t    setup(ParserFactory.makeParser());\n+\t} catch (ClassNotFoundException e1) {\n+\t    throw new\n+\t\tSAXException(\"Cannot find SAX1 driver class \" +\n+\t\t\t     driver, e1);\n+\t} catch (IllegalAccessException e2) {\n+\t    throw new\n+\t\tSAXException(\"SAX1 driver class \" +\n+\t\t\t     driver +\n+\t\t\t     \" found but cannot be loaded\", e2);\n+\t} catch (InstantiationException e3) {\n+\t    throw new\n+\t\tSAXException(\"SAX1 driver class \" +\n+\t\t\t     driver +\n+\t\t\t     \" loaded but cannot be instantiated\", e3);\n+\t} catch (ClassCastException e4) {\n+\t    throw new\n+\t\tSAXException(\"SAX1 driver class \" +\n+\t\t\t     driver +\n+\t\t\t     \" does not implement org.xml.sax.Parser\");\n+\t} catch (NullPointerException e5) {\n+\t    throw new \n+\t\tSAXException(\"System property org.xml.sax.parser not specified\");\n+\t}\n+    }\n+\n+\n+    /**\n+     * Construct a new parser adapter.\n+     *\n+     * <p>Note that the embedded parser cannot be changed once the\n+     * adapter is created; to embed a different parser, allocate\n+     * a new ParserAdapter.</p>\n+     *\n+     * @param parser The SAX1 parser to embed.\n+     * @exception java.lang.NullPointerException If the parser parameter\n+     *            is null.\n+     */\n+    public ParserAdapter (Parser parser)\n+    {\n+\tsuper();\n+\tsetup(parser);\n+    }\n+\n+\n+    /**\n+     * Internal setup method.\n+     *\n+     * @param parser The embedded parser.\n+     * @exception java.lang.NullPointerException If the parser parameter\n+     *            is null.\n+     */\n+    private void setup (Parser parser)\n+    {\n+\tif (parser == null) {\n+\t    throw new\n+\t\tNullPointerException(\"Parser argument must not be null\");\n+\t}\n+\tthis.parser = parser;\n+\tatts = new AttributesImpl();\n+\tnsSupport = new NamespaceSupport();\n+\tattAdapter = new AttributeListAdapter();\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.XMLReader.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    //\n+    // Internal constants for the sake of convenience.\n+    //\n+    private final static String FEATURES = \"http://xml.org/sax/features/\";\n+    private final static String NAMESPACES = FEATURES + \"namespaces\";\n+    private final static String NAMESPACE_PREFIXES = FEATURES + \"namespace-prefixes\";\n+\n+\n+    /**\n+     * Set a feature flag for the parser.\n+     *\n+     * <p>The only features recognized are namespaces and \n+     * namespace-prefixes.</p>\n+     *\n+     * @param name The feature name, as a complete URI.\n+     * @param value The requested feature value.\n+     * @exception SAXNotRecognizedException If the feature\n+     *            can't be assigned or retrieved.\n+     * @exception SAXNotSupportedException If the feature\n+     *            can't be assigned that value.\n+     * @see org.xml.sax.XMLReader#setFeature\n+     */\n+    public void setFeature (String name, boolean value)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException\n+    {\n+\tif (name.equals(NAMESPACES)) {\n+\t    checkNotParsing(\"feature\", name);\n+\t    namespaces = value;\n+\t    if (!namespaces && !prefixes) {\n+\t\tprefixes = true;\n+\t    }\n+\t} else if (name.equals(NAMESPACE_PREFIXES)) {\n+\t    checkNotParsing(\"feature\", name);\n+\t    prefixes = value;\n+\t    if (!prefixes && !namespaces) {\n+\t\tnamespaces = true;\n+\t    }\n+\t} else {\n+\t    throw new SAXNotRecognizedException(\"Feature: \" + name);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Check a parser feature flag.\n+     *\n+     * <p>The only features recognized are namespaces and \n+     * namespace-prefixes.</p>\n+     *\n+     * @param name The feature name, as a complete URI.\n+     * @return The current feature value.\n+     * @exception SAXNotRecognizedException If the feature\n+     *            value can't be assigned or retrieved.\n+     * @exception SAXNotSupportedException If the\n+     *            feature is not currently readable.\n+     * @see org.xml.sax.XMLReader#setFeature\n+     */\n+    public boolean getFeature (String name)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException\n+    {\n+\tif (name.equals(NAMESPACES)) {\n+\t    return namespaces;\n+\t} else if (name.equals(NAMESPACE_PREFIXES)) {\n+\t    return prefixes;\n+\t} else {\n+\t    throw new SAXNotRecognizedException(\"Feature: \" + name);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Set a parser property.\n+     *\n+     * <p>No properties are currently recognized.</p>\n+     *\n+     * @param name The property name.\n+     * @param value The property value.\n+     * @exception SAXNotRecognizedException If the property\n+     *            value can't be assigned or retrieved.\n+     * @exception SAXNotSupportedException If the property\n+     *            can't be assigned that value.\n+     * @see org.xml.sax.XMLReader#setProperty\n+     */\n+    public void setProperty (String name, Object value)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException\n+    {\n+\tthrow new SAXNotRecognizedException(\"Property: \" + name);\n+    }\n+\n+\n+    /**\n+     * Get a parser property.\n+     *\n+     * <p>No properties are currently recognized.</p>\n+     *\n+     * @param name The property name.\n+     * @return The property value.\n+     * @exception SAXNotRecognizedException If the property\n+     *            value can't be assigned or retrieved.\n+     * @exception SAXNotSupportedException If the property\n+     *            value is not currently readable.\n+     * @see org.xml.sax.XMLReader#getProperty\n+     */\n+    public Object getProperty (String name)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException\n+    {\n+\tthrow new SAXNotRecognizedException(\"Property: \" + name);\n+    }\n+\n+\n+    /**\n+     * Set the entity resolver.\n+     *\n+     * @param resolver The new entity resolver.\n+     * @see org.xml.sax.XMLReader#setEntityResolver\n+     */\n+    public void setEntityResolver (EntityResolver resolver)\n+    {\n+\tentityResolver = resolver;\n+    }\n+\n+\n+    /**\n+     * Return the current entity resolver.\n+     *\n+     * @return The current entity resolver, or null if none was supplied.\n+     * @see org.xml.sax.XMLReader#getEntityResolver\n+     */\n+    public EntityResolver getEntityResolver ()\n+    {\n+\treturn entityResolver;\n+    }\n+\n+\n+    /**\n+     * Set the DTD handler.\n+     *\n+     * @param resolver The new DTD handler.\n+     * @see org.xml.sax.XMLReader#setEntityResolver\n+     */\n+    public void setDTDHandler (DTDHandler handler)\n+    {\n+\tdtdHandler = handler;\n+    }\n+\n+\n+    /**\n+     * Return the current DTD handler.\n+     *\n+     * @return The current DTD handler, or null if none was supplied.\n+     * @see org.xml.sax.XMLReader#getEntityResolver\n+     */\n+    public DTDHandler getDTDHandler ()\n+    {\n+\treturn dtdHandler;\n+    }\n+\n+\n+    /**\n+     * Set the content handler.\n+     *\n+     * @param resolver The new content handler.\n+     * @see org.xml.sax.XMLReader#setEntityResolver\n+     */\n+    public void setContentHandler (ContentHandler handler)\n+    {\n+\tcontentHandler = handler;\n+    }\n+\n+\n+    /**\n+     * Return the current content handler.\n+     *\n+     * @return The current content handler, or null if none was supplied.\n+     * @see org.xml.sax.XMLReader#getEntityResolver\n+     */\n+    public ContentHandler getContentHandler ()\n+    {\n+\treturn contentHandler;\n+    }\n+\n+\n+    /**\n+     * Set the error handler.\n+     *\n+     * @param resolver The new error handler.\n+     * @see org.xml.sax.XMLReader#setEntityResolver\n+     */\n+    public void setErrorHandler (ErrorHandler handler)\n+    {\n+\terrorHandler = handler;\n+    }\n+\n+\n+    /**\n+     * Return the current error handler.\n+     *\n+     * @return The current error handler, or null if none was supplied.\n+     * @see org.xml.sax.XMLReader#getEntityResolver\n+     */\n+    public ErrorHandler getErrorHandler ()\n+    {\n+\treturn errorHandler;\n+    }\n+\n+\n+    /**\n+     * Parse an XML document.\n+     *\n+     * @param systemId The absolute URL of the document.\n+     * @exception java.io.IOException If there is a problem reading\n+     *            the raw content of the document.\n+     * @exception SAXException If there is a problem\n+     *            processing the document.\n+     * @see #parse(org.xml.sax.InputSource)\n+     * @see org.xml.sax.Parser#parse(java.lang.String)\n+     */\n+    public void parse (String systemId)\n+\tthrows IOException, SAXException\n+    {\n+\tparse(new InputSource(systemId));\n+    }\n+\n+\n+    /**\n+     * Parse an XML document.\n+     *\n+     * @param input An input source for the document.\n+     * @exception java.io.IOException If there is a problem reading\n+     *            the raw content of the document.\n+     * @exception SAXException If there is a problem\n+     *            processing the document.\n+     * @see #parse(java.lang.String)\n+     * @see org.xml.sax.Parser#parse(org.xml.sax.InputSource)\n+     */\n+    public void parse (InputSource input)\n+\tthrows IOException, SAXException\n+    {\n+\tif (parsing) {\n+\t    throw new SAXException(\"Parser is already in use\");\n+\t}\n+\tsetupParser();\n+\tparsing = true;\n+\ttry {\n+\t    parser.parse(input);\n+\t} finally {\n+\t    parsing = false;\n+\t}\n+\tparsing = false;\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.DocumentHandler.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Adapter implementation method; do not call.\n+     * Adapt a SAX1 document locator event.\n+     *\n+     * @param locator A document locator.\n+     * @see org.xml.sax.ContentHandler#setDocumentLocator\n+     */\n+    public void setDocumentLocator (Locator locator)\n+    {\n+\tthis.locator = locator;\n+\tif (contentHandler != null) {\n+\t    contentHandler.setDocumentLocator(locator);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Adapter implementation method; do not call.\n+     * Adapt a SAX1 start document event.\n+     *\n+     * @exception SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.DocumentHandler#startDocument\n+     */\n+    public void startDocument ()\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.startDocument();\n+\t}\n+    }\n+\n+\n+    /**\n+     * Adapter implementation method; do not call.\n+     * Adapt a SAX1 end document event.\n+     *\n+     * @exception SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.DocumentHandler#endDocument\n+     */\n+    public void endDocument ()\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.endDocument();\n+\t}\n+    }\n+\n+\n+    /**\n+     * Adapter implementation method; do not call.\n+     * Adapt a SAX1 startElement event.\n+     *\n+     * <p>If necessary, perform Namespace processing.</p>\n+     *\n+     * @param qName The qualified (prefixed) name.\n+     * @param qAtts The XML 1.0 attribute list (with qnames).\n+     * @exception SAXException The client may raise a\n+     *            processing exception.\n+     */\n+    public void startElement (String qName, AttributeList qAtts)\n+\tthrows SAXException\n+    {\n+\t\t\t\t// These are exceptions from the\n+\t\t\t\t// first pass; they should be\n+\t\t\t\t// ignored if there's a second pass,\n+\t\t\t\t// but reported otherwise.\n+\tVector exceptions = null;\n+\n+\t\t\t\t// If we're not doing Namespace\n+\t\t\t\t// processing, dispatch this quickly.\n+\tif (!namespaces) {\n+\t    if (contentHandler != null) {\n+\t\tattAdapter.setAttributeList(qAtts);\n+\t\tcontentHandler.startElement(\"\", \"\", qName.intern(),\n+\t\t\t\t\t    attAdapter);\n+\t    }\n+\t    return;\n+\t}\n+\n+\n+\t\t\t\t// OK, we're doing Namespace processing.\n+\tnsSupport.pushContext();\n+\tint length = qAtts.getLength();\n+\t\n+\t\t\t\t// First pass:  handle NS decls\n+\tfor (int i = 0; i < length; i++) {\n+\t    String attQName = qAtts.getName(i);\n+\n+\t    if (!attQName.startsWith(\"xmlns\"))\n+\t\tcontinue;\n+\t\t\t\t// Could be a declaration...\n+\t    String prefix;\n+\t    int n = attQName.indexOf(':');\n+\n+\t    \t\t\t// xmlns=...\n+\t    if (n == -1 && attQName.length () == 5) {\n+\t\tprefix = \"\";\n+\t    } else if (n != 5) {\n+\t\t// XML namespaces spec doesn't discuss \"xmlnsf:oo\"\n+\t\t// (and similarly named) attributes ... at most, warn\n+\t\tcontinue;\n+\t    } else \t\t// xmlns:foo=...\n+\t\tprefix = attQName.substring(n+1);\n+\n+\t    String value = qAtts.getValue(i);\n+\t    if (!nsSupport.declarePrefix(prefix, value)) {\n+\t\treportError(\"Illegal Namespace prefix: \" + prefix);\n+\t\tcontinue;\n+\t    }\n+\t    if (contentHandler != null)\n+\t\tcontentHandler.startPrefixMapping(prefix, value);\n+\t}\n+\t\n+\t\t\t\t// Second pass: copy all relevant\n+\t\t\t\t// attributes into the SAX2 AttributeList\n+\t\t\t\t// using updated prefix bindings\n+\tatts.clear();\n+\tfor (int i = 0; i < length; i++) {\n+\t    String attQName = qAtts.getName(i);\n+\t    String type = qAtts.getType(i);\n+\t    String value = qAtts.getValue(i);\n+\n+\t\t\t\t// Declaration?\n+\t    if (attQName.startsWith(\"xmlns\")) {\n+\t\tString prefix;\n+\t\tint n = attQName.indexOf(':');\n+\n+\t\tif (n == -1 && attQName.length () == 5) {\n+\t\t    prefix = \"\";\n+\t\t} else if (n != 5) {\n+\t\t    // XML namespaces spec doesn't discuss \"xmlnsf:oo\"\n+\t\t    // (and similarly named) attributes ... ignore\n+\t\t    prefix = null;\n+\t\t} else {\n+\t\t    prefix = attQName.substring(n+1);\n+\t\t}\n+\t\t\t\t// Yes, decl:  report or prune\n+\t\tif (prefix != null) {\n+\t\t    if (prefixes)\n+\t\t\tatts.addAttribute(\"\", \"\", attQName.intern(),\n+\t\t\t\t      type, value);\n+\t\t    continue;\n+\t\t}\n+\t    } \n+\n+\t\t\t\t// Not a declaration -- report\n+\t    try {\n+\t\tString attName[] = processName(attQName, true, true);\n+\t\tatts.addAttribute(attName[0], attName[1], attName[2],\n+\t\t\t\t  type, value);\n+\t    } catch (SAXException e) {\n+\t\tif (exceptions == null)\n+\t\t    exceptions = new Vector();\n+\t\texceptions.addElement(e);\n+\t\tatts.addAttribute(\"\", attQName, attQName, type, value);\n+\t    }\n+\t}\n+\t\n+\t// now handle the deferred exception reports\n+\tif (exceptions != null && errorHandler != null) {\n+\t    for (int i = 0; i < exceptions.size(); i++)\n+\t\terrorHandler.error((SAXParseException)\n+\t\t\t\t(exceptions.elementAt(i)));\n+\t}\n+\n+\t\t\t\t// OK, finally report the event.\n+\tif (contentHandler != null) {\n+\t    String name[] = processName(qName, false, false);\n+\t    contentHandler.startElement(name[0], name[1], name[2], atts);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Adapter implementation method; do not call.\n+     * Adapt a SAX1 end element event.\n+     *\n+     * @param qName The qualified (prefixed) name.\n+     * @exception SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.DocumentHandler#endElement\n+     */\n+    public void endElement (String qName)\n+\tthrows SAXException\n+    {\n+\t\t\t\t// If we're not doing Namespace\n+\t\t\t\t// processing, dispatch this quickly.\n+\tif (!namespaces) {\n+\t    if (contentHandler != null) {\n+\t\tcontentHandler.endElement(\"\", \"\", qName.intern());\n+\t    }\n+\t    return;\n+\t}\n+\n+\t\t\t\t// Split the name.\n+\tString names[] = processName(qName, false, false);\n+\tif (contentHandler != null) {\n+\t    contentHandler.endElement(names[0], names[1], names[2]);\n+\t    Enumeration prefixes = nsSupport.getDeclaredPrefixes();\n+\t    while (prefixes.hasMoreElements()) {\n+\t\tString prefix = (String)prefixes.nextElement();\n+\t\tcontentHandler.endPrefixMapping(prefix);\n+\t    }\n+\t}\n+\tnsSupport.popContext();\n+    }\n+\n+\n+    /**\n+     * Adapter implementation method; do not call.\n+     * Adapt a SAX1 characters event.\n+     *\n+     * @param ch An array of characters.\n+     * @param start The starting position in the array.\n+     * @param length The number of characters to use.\n+     * @exception SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.DocumentHandler#characters\n+     */\n+    public void characters (char ch[], int start, int length)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.characters(ch, start, length);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Adapter implementation method; do not call.\n+     * Adapt a SAX1 ignorable whitespace event.\n+     *\n+     * @param ch An array of characters.\n+     * @param start The starting position in the array.\n+     * @param length The number of characters to use.\n+     * @exception SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.DocumentHandler#ignorableWhitespace\n+     */\n+    public void ignorableWhitespace (char ch[], int start, int length)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.ignorableWhitespace(ch, start, length);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Adapter implementation method; do not call.\n+     * Adapt a SAX1 processing instruction event.\n+     *\n+     * @param target The processing instruction target.\n+     * @param data The remainder of the processing instruction\n+     * @exception SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.DocumentHandler#processingInstruction\n+     */\n+    public void processingInstruction (String target, String data)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.processingInstruction(target, data);\n+\t}\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal utility methods.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Initialize the parser before each run.\n+     */\n+    private void setupParser ()\n+    {\n+\tnsSupport.reset();\n+\n+\tif (entityResolver != null) {\n+\t    parser.setEntityResolver(entityResolver);\n+\t}\n+\tif (dtdHandler != null) {\n+\t    parser.setDTDHandler(dtdHandler);\n+\t}\n+\tif (errorHandler != null) {\n+\t    parser.setErrorHandler(errorHandler);\n+\t}\n+\tparser.setDocumentHandler(this);\n+\tlocator = null;\n+    }\n+\n+\n+    /**\n+     * Process a qualified (prefixed) name.\n+     *\n+     * <p>If the name has an undeclared prefix, use only the qname\n+     * and make an ErrorHandler.error callback in case the app is\n+     * interested.</p>\n+     *\n+     * @param qName The qualified (prefixed) name.\n+     * @param isAttribute true if this is an attribute name.\n+     * @return The name split into three parts.\n+     * @exception SAXException The client may throw\n+     *            an exception if there is an error callback.\n+     */\n+    private String [] processName (String qName, boolean isAttribute,\n+\t\t\t\t   boolean useException)\n+\tthrows SAXException\n+    {\n+\tString parts[] = nsSupport.processName(qName, nameParts,\n+\t\t\t\t\t       isAttribute);\n+\tif (parts == null) {\n+\t    if (useException)\n+\t\tthrow makeException(\"Undeclared prefix: \" + qName);\n+\t    reportError(\"Undeclared prefix: \" + qName);\n+\t    parts = new String[3];\n+\t    parts[0] = parts[1] = \"\";\n+\t    parts[2] = qName.intern();\n+\t}\n+\treturn parts;\n+    }\n+\n+\n+    /**\n+     * Report a non-fatal error.\n+     *\n+     * @param message The error message.\n+     * @exception SAXException The client may throw\n+     *            an exception.\n+     */\n+    void reportError (String message)\n+\tthrows SAXException\n+    {\n+\tif (errorHandler != null)\n+\t    errorHandler.error(makeException(message));\n+    }\n+\n+    \n+    /**\n+     * Construct an exception for the current context.\n+     *\n+     * @param message The error message.\n+     */\n+    private SAXParseException makeException (String message)\n+    {\n+\tif (locator != null) {\n+\t    return new SAXParseException(message, locator);\n+\t} else {\n+\t    return new SAXParseException(message, null, null, -1, -1);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Throw an exception if we are parsing.\n+     *\n+     * <p>Use this method to detect illegal feature or\n+     * property changes.</p>\n+     *\n+     * @param type The type of thing (feature or property).\n+     * @param name The feature or property name.\n+     * @exception SAXNotSupportedException If a\n+     *            document is currently being parsed.\n+     */\n+    private void checkNotParsing (String type, String name)\n+\tthrows SAXNotSupportedException\n+    {\n+\tif (parsing) {\n+\t    throw new SAXNotSupportedException(\"Cannot change \" +\n+\t\t\t\t\t       type + ' ' +\n+\t\t\t\t\t       name + \" while parsing\");\n+\t\t\t\t\t       \n+\t}\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal state.\n+    ////////////////////////////////////////////////////////////////////\n+\n+    private NamespaceSupport nsSupport;\n+    private AttributeListAdapter attAdapter;\n+\n+    private boolean parsing = false;\n+    private String nameParts[] = new String[3];\n+\n+    private Parser parser = null;\n+\n+    private AttributesImpl atts = null;\n+\n+\t\t\t\t// Features\n+    private boolean namespaces = true;\n+    private boolean prefixes = false;\n+\n+\t\t\t\t// Properties\n+\n+\t\t\t\t// Handlers\n+    Locator locator;\n+\n+    EntityResolver entityResolver = null;\n+    DTDHandler dtdHandler = null;\n+    ContentHandler contentHandler = null;\n+    ErrorHandler errorHandler = null;\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Inner class to wrap an AttributeList when not doing NS proc.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Adapt a SAX1 AttributeList as a SAX2 Attributes object.\n+     *\n+     * <p>This class is in the Public Domain, and comes with NO\n+     * WARRANTY of any kind.</p>\n+     *\n+     * <p>This wrapper class is used only when Namespace support\n+     * is disabled -- it provides pretty much a direct mapping\n+     * from SAX1 to SAX2, except that names and types are \n+     * interned whenever requested.</p>\n+     */\n+    final class AttributeListAdapter implements Attributes\n+    {\n+\n+\t/**\n+\t * Construct a new adapter.\n+\t */\n+\tAttributeListAdapter ()\n+\t{\n+\t}\n+\n+\n+\t/**\n+\t * Set the embedded AttributeList.\n+\t *\n+\t * <p>This method must be invoked before any of the others\n+\t * can be used.</p>\n+\t *\n+\t * @param The SAX1 attribute list (with qnames).\n+\t */\n+\tvoid setAttributeList (AttributeList qAtts)\n+\t{\n+\t    this.qAtts = qAtts;\n+\t}\n+\n+\n+\t/**\n+\t * Return the length of the attribute list.\n+\t *\n+\t * @return The number of attributes in the list.\n+\t * @see org.xml.sax.Attributes#getLength\n+\t */\n+\tpublic int getLength ()\n+\t{\n+\t    return qAtts.getLength();\n+\t}\n+\n+\n+\t/**\n+\t * Return the Namespace URI of the specified attribute.\n+\t *\n+\t * @param The attribute's index.\n+\t * @return Always the empty string.\n+\t * @see org.xml.sax.Attributes#getURI\n+\t */\n+\tpublic String getURI (int i)\n+\t{\n+\t    return \"\";\n+\t}\n+\n+\n+\t/**\n+\t * Return the local name of the specified attribute.\n+\t *\n+\t * @param The attribute's index.\n+\t * @return Always the empty string.\n+\t * @see org.xml.sax.Attributes#getLocalName\n+\t */\n+\tpublic String getLocalName (int i)\n+\t{\n+\t    return \"\";\n+\t}\n+\n+\n+\t/**\n+\t * Return the qualified (prefixed) name of the specified attribute.\n+\t *\n+\t * @param The attribute's index.\n+\t * @return The attribute's qualified name, internalized.\n+\t */\n+\tpublic String getQName (int i)\n+\t{\n+\t    return qAtts.getName(i).intern();\n+\t}\n+\n+\n+\t/**\n+\t * Return the type of the specified attribute.\n+\t *\n+\t * @param The attribute's index.\n+\t * @return The attribute's type as an internalized string.\n+\t */\n+\tpublic String getType (int i)\n+\t{\n+\t    return qAtts.getType(i).intern();\n+\t}\n+\n+\n+\t/**\n+\t * Return the value of the specified attribute.\n+\t *\n+\t * @param The attribute's index.\n+\t * @return The attribute's value.\n+\t */\n+\tpublic String getValue (int i)\n+\t{\n+\t    return qAtts.getValue(i);\n+\t}\n+\n+\n+\t/**\n+\t * Look up an attribute index by Namespace name.\n+\t *\n+\t * @param uri The Namespace URI or the empty string.\n+\t * @param localName The local name.\n+\t * @return The attributes index, or -1 if none was found.\n+\t * @see org.xml.sax.Attributes#getIndex(java.lang.String,java.lang.String)\n+\t */\n+\tpublic int getIndex (String uri, String localName)\n+\t{\n+\t    return -1;\n+\t}\n+\n+\n+\t/**\n+\t * Look up an attribute index by qualified (prefixed) name.\n+\t *\n+\t * @param qName The qualified name.\n+\t * @return The attributes index, or -1 if none was found.\n+\t * @see org.xml.sax.Attributes#getIndex(java.lang.String)\n+\t */\n+\tpublic int getIndex (String qName)\n+\t{\n+\t    int max = atts.getLength();\n+\t    for (int i = 0; i < max; i++) {\n+\t\tif (qAtts.getName(i).equals(qName)) {\n+\t\t    return i;\n+\t\t}\n+\t    }\n+\t    return -1;\n+\t}\n+\n+\n+\t/**\n+\t * Look up the type of an attribute by Namespace name.\n+\t *\n+\t * @param uri The Namespace URI\n+\t * @param localName The local name.\n+\t * @return The attribute's type as an internalized string.\n+\t */\n+\tpublic String getType (String uri, String localName)\n+\t{\n+\t    return null;\n+\t}\n+\n+\n+\t/**\n+\t * Look up the type of an attribute by qualified (prefixed) name.\n+\t *\n+\t * @param qName The qualified name.\n+\t * @return The attribute's type as an internalized string.\n+\t */\n+\tpublic String getType (String qName)\n+\t{\n+\t    return qAtts.getType(qName).intern();\n+\t}\n+\n+\n+\t/**\n+\t * Look up the value of an attribute by Namespace name.\n+\t *\n+\t * @param uri The Namespace URI\n+\t * @param localName The local name.\n+\t * @return The attribute's value.\n+\t */\n+\tpublic String getValue (String uri, String localName)\n+\t{\n+\t    return null;\n+\t}\n+\n+\n+\t/**\n+\t * Look up the value of an attribute by qualified (prefixed) name.\n+\t *\n+\t * @param qName The qualified name.\n+\t * @return The attribute's value.\n+\t */\n+\tpublic String getValue (String qName)\n+\t{\n+\t    return qAtts.getValue(qName);\n+\t}\n+\n+\tprivate AttributeList qAtts;\n+    }\n+}\n+\n+// end of ParserAdapter.java"}, {"sha": "acedfd13ae4a57aadce9e2c1069a3196c8e2f98c", "filename": "libjava/org/xml/sax/helpers/ParserFactory.java", "status": "modified", "additions": 129, "deletions": 129, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FParserFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FParserFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FParserFactory.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,129 +1,129 @@\n-// SAX parser factory.\r\n-// No warranty; no copyright -- use this as you will.\r\n-// $Id: ParserFactory.java,v 1.1 2000/10/02 02:43:20 sboag Exp $\r\n-\r\n-package org.xml.sax.helpers;\r\n-\r\n-import java.lang.ClassNotFoundException;\r\n-import java.lang.IllegalAccessException;\r\n-import java.lang.InstantiationException;\r\n-import java.lang.SecurityException;\r\n-import java.lang.ClassCastException;\r\n-\r\n-import org.xml.sax.Parser;\r\n-\r\n-\r\n-/**\r\n- * Java-specific class for dynamically loading SAX parsers.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p><strong>Note:</strong> This class is designed to work with the now-deprecated\r\n- * SAX1 {@link org.xml.sax.Parser Parser} class.  SAX2 applications should use\r\n- * {@link org.xml.sax.helpers.XMLReaderFactory XMLReaderFactory} instead.</p>\r\n- *\r\n- * <p>ParserFactory is not part of the platform-independent definition\r\n- * of SAX; it is an additional convenience class designed\r\n- * specifically for Java XML application writers.  SAX applications\r\n- * can use the static methods in this class to allocate a SAX parser\r\n- * dynamically at run-time based either on the value of the\r\n- * `org.xml.sax.parser' system property or on a string containing the class\r\n- * name.</p>\r\n- *\r\n- * <p>Note that the application still requires an XML parser that\r\n- * implements SAX1.</p>\r\n- *\r\n- * @deprecated This class works with the deprecated\r\n- *             {@link org.xml.sax.Parser Parser}\r\n- *             interface.\r\n- * @since SAX 1.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.Parser\r\n- * @see java.lang.Class\r\n- */\r\n-public class ParserFactory {\r\n-    \r\n-    \r\n-    /**\r\n-     * Private null constructor.\r\n-     */\r\n-    private ParserFactory ()\r\n-    {\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Create a new SAX parser using the `org.xml.sax.parser' system property.\r\n-     *\r\n-     * <p>The named class must exist and must implement the\r\n-     * {@link org.xml.sax.Parser Parser} interface.</p>\r\n-     *\r\n-     * @exception java.lang.NullPointerException There is no value\r\n-     *            for the `org.xml.sax.parser' system property.\r\n-     * @exception java.lang.ClassNotFoundException The SAX parser\r\n-     *            class was not found (check your CLASSPATH).\r\n-     * @exception IllegalAccessException The SAX parser class was\r\n-     *            found, but you do not have permission to load\r\n-     *            it.\r\n-     * @exception InstantiationException The SAX parser class was\r\n-     *            found but could not be instantiated.\r\n-     * @exception java.lang.ClassCastException The SAX parser class\r\n-     *            was found and instantiated, but does not implement\r\n-     *            org.xml.sax.Parser.\r\n-     * @see #makeParser(java.lang.String)\r\n-     * @see org.xml.sax.Parser\r\n-     */\r\n-    public static Parser makeParser ()\r\n-\tthrows ClassNotFoundException,\r\n-\tIllegalAccessException, \r\n-\tInstantiationException,\r\n-\tNullPointerException,\r\n-\tClassCastException\r\n-    {\r\n-\tString className = System.getProperty(\"org.xml.sax.parser\");\r\n-\tif (className == null) {\r\n-\t    throw new NullPointerException(\"No value for sax.parser property\");\r\n-\t} else {\r\n-\t    return makeParser(className);\r\n-\t}\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Create a new SAX parser object using the class name provided.\r\n-     *\r\n-     * <p>The named class must exist and must implement the\r\n-     * {@link org.xml.sax.Parser Parser} interface.</p>\r\n-     *\r\n-     * @param className A string containing the name of the\r\n-     *                  SAX parser class.\r\n-     * @exception java.lang.ClassNotFoundException The SAX parser\r\n-     *            class was not found (check your CLASSPATH).\r\n-     * @exception IllegalAccessException The SAX parser class was\r\n-     *            found, but you do not have permission to load\r\n-     *            it.\r\n-     * @exception InstantiationException The SAX parser class was\r\n-     *            found but could not be instantiated.\r\n-     * @exception java.lang.ClassCastException The SAX parser class\r\n-     *            was found and instantiated, but does not implement\r\n-     *            org.xml.sax.Parser.\r\n-     * @see #makeParser()\r\n-     * @see org.xml.sax.Parser\r\n-     */\r\n-    public static Parser makeParser (String className)\r\n-\tthrows ClassNotFoundException,\r\n-\tIllegalAccessException, \r\n-\tInstantiationException,\r\n-\tClassCastException\r\n-    {\r\n-\treturn (Parser)(Class.forName(className).newInstance());\r\n-    }\r\n-    \r\n-}\r\n-\r\n-// end of ParserFactory.java\r\n+// SAX parser factory.\n+// http://www.saxproject.org\n+// No warranty; no copyright -- use this as you will.\n+// $Id: ParserFactory.java,v 1.4.2.3 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax.helpers;\n+\n+import java.lang.ClassNotFoundException;\n+import java.lang.IllegalAccessException;\n+import java.lang.InstantiationException;\n+import java.lang.SecurityException;\n+import java.lang.ClassCastException;\n+\n+import org.xml.sax.Parser;\n+\n+\n+/**\n+ * Java-specific class for dynamically loading SAX parsers.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p><strong>Note:</strong> This class is designed to work with the now-deprecated\n+ * SAX1 {@link org.xml.sax.Parser Parser} class.  SAX2 applications should use\n+ * {@link org.xml.sax.helpers.XMLReaderFactory XMLReaderFactory} instead.</p>\n+ *\n+ * <p>ParserFactory is not part of the platform-independent definition\n+ * of SAX; it is an additional convenience class designed\n+ * specifically for Java XML application writers.  SAX applications\n+ * can use the static methods in this class to allocate a SAX parser\n+ * dynamically at run-time based either on the value of the\n+ * `org.xml.sax.parser' system property or on a string containing the class\n+ * name.</p>\n+ *\n+ * <p>Note that the application still requires an XML parser that\n+ * implements SAX1.</p>\n+ *\n+ * @deprecated This class works with the deprecated\n+ *             {@link org.xml.sax.Parser Parser}\n+ *             interface.\n+ * @since SAX 1.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ */\n+public class ParserFactory {\n+    \n+    \n+    /**\n+     * Private null constructor.\n+     */\n+    private ParserFactory ()\n+    {\n+    }\n+    \n+    \n+    /**\n+     * Create a new SAX parser using the `org.xml.sax.parser' system property.\n+     *\n+     * <p>The named class must exist and must implement the\n+     * {@link org.xml.sax.Parser Parser} interface.</p>\n+     *\n+     * @exception java.lang.NullPointerException There is no value\n+     *            for the `org.xml.sax.parser' system property.\n+     * @exception java.lang.ClassNotFoundException The SAX parser\n+     *            class was not found (check your CLASSPATH).\n+     * @exception IllegalAccessException The SAX parser class was\n+     *            found, but you do not have permission to load\n+     *            it.\n+     * @exception InstantiationException The SAX parser class was\n+     *            found but could not be instantiated.\n+     * @exception java.lang.ClassCastException The SAX parser class\n+     *            was found and instantiated, but does not implement\n+     *            org.xml.sax.Parser.\n+     * @see #makeParser(java.lang.String)\n+     * @see org.xml.sax.Parser\n+     */\n+    public static Parser makeParser ()\n+\tthrows ClassNotFoundException,\n+\tIllegalAccessException, \n+\tInstantiationException,\n+\tNullPointerException,\n+\tClassCastException\n+    {\n+\tString className = System.getProperty(\"org.xml.sax.parser\");\n+\tif (className == null) {\n+\t    throw new NullPointerException(\"No value for sax.parser property\");\n+\t} else {\n+\t    return makeParser(className);\n+\t}\n+    }\n+    \n+    \n+    /**\n+     * Create a new SAX parser object using the class name provided.\n+     *\n+     * <p>The named class must exist and must implement the\n+     * {@link org.xml.sax.Parser Parser} interface.</p>\n+     *\n+     * @param className A string containing the name of the\n+     *                  SAX parser class.\n+     * @exception java.lang.ClassNotFoundException The SAX parser\n+     *            class was not found (check your CLASSPATH).\n+     * @exception IllegalAccessException The SAX parser class was\n+     *            found, but you do not have permission to load\n+     *            it.\n+     * @exception InstantiationException The SAX parser class was\n+     *            found but could not be instantiated.\n+     * @exception java.lang.ClassCastException The SAX parser class\n+     *            was found and instantiated, but does not implement\n+     *            org.xml.sax.Parser.\n+     * @see #makeParser()\n+     * @see org.xml.sax.Parser\n+     */\n+    public static Parser makeParser (String className)\n+\tthrows ClassNotFoundException,\n+\tIllegalAccessException, \n+\tInstantiationException,\n+\tClassCastException\n+    {\n+\treturn (Parser) NewInstance.newInstance (\n+\t\tNewInstance.getClassLoader (), className);\n+    }\n+    \n+}\n+"}, {"sha": "2f8480891315af55212bf75bed2b902d9c3a3d8b", "filename": "libjava/org/xml/sax/helpers/XMLFilterImpl.java", "status": "modified", "additions": 714, "deletions": 769, "changes": 1483, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FXMLFilterImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FXMLFilterImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FXMLFilterImpl.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,769 +1,714 @@\n-// XMLFilterImpl.java - base SAX2 filter implementation.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the Public Domain.\r\n-\r\n-// $Id: XMLFilterImpl.java,v 1.1 2000/10/02 02:43:20 sboag Exp $\r\n-\r\n-package org.xml.sax.helpers;\r\n-\r\n-import java.io.IOException;\r\n-\r\n-import org.xml.sax.XMLReader;\r\n-import org.xml.sax.XMLFilter;\r\n-import org.xml.sax.InputSource;\r\n-import org.xml.sax.Locator;\r\n-import org.xml.sax.Attributes;\r\n-import org.xml.sax.EntityResolver;\r\n-import org.xml.sax.DTDHandler;\r\n-import org.xml.sax.ContentHandler;\r\n-import org.xml.sax.ErrorHandler;\r\n-import org.xml.sax.SAXException;\r\n-import org.xml.sax.SAXParseException;\r\n-import org.xml.sax.SAXNotSupportedException;\r\n-import org.xml.sax.SAXNotRecognizedException;\r\n-\r\n-\r\n-/**\r\n- * Base class for deriving an XML filter.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class is designed to sit between an {@link org.xml.sax.XMLReader\r\n- * XMLReader} and the client application's event handlers.  By default, it\r\n- * does nothing but pass requests up to the reader and events\r\n- * on to the handlers unmodified, but subclasses can override\r\n- * specific methods to modify the event stream or the configuration\r\n- * requests as they pass through.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.XMLFilter\r\n- * @see org.xml.sax.XMLReader\r\n- * @see org.xml.sax.EntityResolver\r\n- * @see org.xml.sax.DTDHandler\r\n- * @see org.xml.sax.ContentHandler\r\n- * @see org.xml.sax.ErrorHandler\r\n- */\r\n-public class XMLFilterImpl\r\n-    implements XMLFilter, EntityResolver, DTDHandler, ContentHandler, ErrorHandler\r\n-{\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Constructors.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Construct an empty XML filter, with no parent.\r\n-     *\r\n-     * <p>This filter will have no parent: you must assign a parent\r\n-     * before you start a parse or do any configuration with\r\n-     * setFeature or setProperty.</p>\r\n-     *\r\n-     * @see org.xml.sax.XMLReader#setFeature\r\n-     * @see org.xml.sax.XMLReader#setProperty\r\n-     */\r\n-    public XMLFilterImpl ()\r\n-    {\r\n-\tsuper();\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Construct an XML filter with the specified parent.\r\n-     *\r\n-     * @see #setParent\r\n-     * @see #getParent\r\n-     */\r\n-    public XMLFilterImpl (XMLReader parent)\r\n-    {\r\n-        super();\r\n-\tsetParent(parent);\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.XMLFilter.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Set the parent reader.\r\n-     *\r\n-     * <p>This is the {@link org.xml.sax.XMLReader XMLReader} from which \r\n-     * this filter will obtain its events and to which it will pass its \r\n-     * configuration requests.  The parent may itself be another filter.</p>\r\n-     *\r\n-     * <p>If there is no parent reader set, any attempt to parse\r\n-     * or to set or get a feature or property will fail.</p>\r\n-     *\r\n-     * @param parent The parent XML reader.\r\n-     * @exception java.lang.NullPointerException If the parent is null.\r\n-     * @see #getParent\r\n-     */\r\n-    public void setParent (XMLReader parent)\r\n-    {\r\n-\tif (parent == null) {\r\n-\t    throw new NullPointerException(\"Null parent\");\r\n-\t}\r\n-\tthis.parent = parent;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Get the parent reader.\r\n-     *\r\n-     * @return The parent XML reader, or null if none is set.\r\n-     * @see #setParent\r\n-     */\r\n-    public XMLReader getParent ()\r\n-    {\r\n-\treturn parent;\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.XMLReader.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Set the state of a feature.\r\n-     *\r\n-     * <p>This will always fail if the parent is null.</p>\r\n-     *\r\n-     * @param name The feature name.\r\n-     * @param state The requested feature state.\r\n-     * @exception org.xml.sax.SAXNotRecognizedException When the\r\n-     *            XMLReader does not recognize the feature name.\r\n-     * @exception org.xml.sax.SAXNotSupportedException When the\r\n-     *            XMLReader recognizes the feature name but \r\n-     *            cannot set the requested value.\r\n-     * @see org.xml.sax.XMLReader#setFeature\r\n-     */\r\n-    public void setFeature (String name, boolean state)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException\r\n-    {\r\n-\tif (parent != null) {\r\n-\t    parent.setFeature(name, state);\r\n-\t} else {\r\n-\t    throw new SAXNotRecognizedException(\"Feature: \" + name);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Look up the state of a feature.\r\n-     *\r\n-     * <p>This will always fail if the parent is null.</p>\r\n-     *\r\n-     * @param name The feature name.\r\n-     * @return The current state of the feature.\r\n-     * @exception org.xml.sax.SAXNotRecognizedException When the\r\n-     *            XMLReader does not recognize the feature name.\r\n-     * @exception org.xml.sax.SAXNotSupportedException When the\r\n-     *            XMLReader recognizes the feature name but \r\n-     *            cannot determine its state at this time.\r\n-     * @see org.xml.sax.XMLReader#getFeature\r\n-     */\r\n-    public boolean getFeature (String name)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException\r\n-    {\r\n-\tif (parent != null) {\r\n-\t    return parent.getFeature(name);\r\n-\t} else {\r\n-\t    throw new SAXNotRecognizedException(\"Feature: \" + name);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the value of a property.\r\n-     *\r\n-     * <p>This will always fail if the parent is null.</p>\r\n-     *\r\n-     * @param name The property name.\r\n-     * @param state The requested property value.\r\n-     * @exception org.xml.sax.SAXNotRecognizedException When the\r\n-     *            XMLReader does not recognize the property name.\r\n-     * @exception org.xml.sax.SAXNotSupportedException When the\r\n-     *            XMLReader recognizes the property name but \r\n-     *            cannot set the requested value.\r\n-     * @see org.xml.sax.XMLReader#setProperty\r\n-     */\r\n-    public void setProperty (String name, Object value)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException\r\n-    {\r\n-\tif (parent != null) {\r\n-\t    parent.setProperty(name, value);\r\n-\t} else {\r\n-\t    throw new SAXNotRecognizedException(\"Property: \" + name);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Look up the value of a property.\r\n-     *\r\n-     * @param name The property name.\r\n-     * @return The current value of the property.\r\n-     * @exception org.xml.sax.SAXNotRecognizedException When the\r\n-     *            XMLReader does not recognize the feature name.\r\n-     * @exception org.xml.sax.SAXNotSupportedException When the\r\n-     *            XMLReader recognizes the property name but \r\n-     *            cannot determine its value at this time.\r\n-     * @see org.xml.sax.XMLReader#setFeature\r\n-     */\r\n-    public Object getProperty (String name)\r\n-\tthrows SAXNotRecognizedException, SAXNotSupportedException\r\n-    {\r\n-\tif (parent != null) {\r\n-\t    return parent.getProperty(name);\r\n-\t} else {\r\n-\t    throw new SAXNotRecognizedException(\"Property: \" + name);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the entity resolver.\r\n-     *\r\n-     * @param resolver The new entity resolver.\r\n-     * @exception java.lang.NullPointerException If the resolver\r\n-     *            is null.\r\n-     * @see org.xml.sax.XMLReader#setEntityResolver\r\n-     */\r\n-    public void setEntityResolver (EntityResolver resolver)\r\n-    {\r\n-\tif (resolver == null) {\r\n-\t    throw new NullPointerException(\"Null entity resolver\");\r\n-\t} else {\r\n-\t    entityResolver = resolver;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Get the current entity resolver.\r\n-     *\r\n-     * @return The current entity resolver, or null if none was set.\r\n-     * @see org.xml.sax.XMLReader#getEntityResolver\r\n-     */\r\n-    public EntityResolver getEntityResolver ()\r\n-    {\r\n-\treturn entityResolver;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the DTD event handler.\r\n-     *\r\n-     * @param resolver The new DTD handler.\r\n-     * @exception java.lang.NullPointerException If the handler\r\n-     *            is null.\r\n-     * @see org.xml.sax.XMLReader#setDTDHandler\r\n-     */\r\n-    public void setDTDHandler (DTDHandler handler)\r\n-    {\r\n-\tif (handler == null) {\r\n-\t    throw new NullPointerException(\"Null DTD handler\");\r\n-\t} else {\r\n-\t    dtdHandler = handler;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Get the current DTD event handler.\r\n-     *\r\n-     * @return The current DTD handler, or null if none was set.\r\n-     * @see org.xml.sax.XMLReader#getDTDHandler\r\n-     */\r\n-    public DTDHandler getDTDHandler ()\r\n-    {\r\n-\treturn dtdHandler;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the content event handler.\r\n-     *\r\n-     * @param resolver The new content handler.\r\n-     * @exception java.lang.NullPointerException If the handler\r\n-     *            is null.\r\n-     * @see org.xml.sax.XMLReader#setContentHandler\r\n-     */\r\n-    public void setContentHandler (ContentHandler handler)\r\n-    {\r\n-\tif (handler == null) {\r\n-\t    throw new NullPointerException(\"Null content handler\");\r\n-\t} else {\r\n-\t    contentHandler = handler;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Get the content event handler.\r\n-     *\r\n-     * @return The current content handler, or null if none was set.\r\n-     * @see org.xml.sax.XMLReader#getContentHandler\r\n-     */\r\n-    public ContentHandler getContentHandler ()\r\n-    {\r\n-\treturn contentHandler;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set the error event handler.\r\n-     *\r\n-     * @param handle The new error handler.\r\n-     * @exception java.lang.NullPointerException If the handler\r\n-     *            is null.\r\n-     * @see org.xml.sax.XMLReader#setErrorHandler\r\n-     */\r\n-    public void setErrorHandler (ErrorHandler handler)\r\n-    {\r\n-\tif (handler == null) {\r\n-\t    throw new NullPointerException(\"Null error handler\");\r\n-\t} else {\r\n-\t    errorHandler = handler;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Get the current error event handler.\r\n-     *\r\n-     * @return The current error handler, or null if none was set.\r\n-     * @see org.xml.sax.XMLReader#getErrorHandler\r\n-     */\r\n-    public ErrorHandler getErrorHandler ()\r\n-    {\r\n-\treturn errorHandler;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Parse a document.\r\n-     *\r\n-     * @param input The input source for the document entity.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @exception java.io.IOException An IO exception from the parser,\r\n-     *            possibly from a byte stream or character stream\r\n-     *            supplied by the application.\r\n-     * @see org.xml.sax.XMLReader#parse(org.xml.sax.InputSource)\r\n-     */\r\n-    public void parse (InputSource input)\r\n-\tthrows SAXException, IOException\r\n-    {\r\n-\tsetupParse();\r\n-\tparent.parse(input);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Parse a document.\r\n-     *\r\n-     * @param systemId The system identifier as a fully-qualified URI.\r\n-     * @exception org.xml.sax.SAXException Any SAX exception, possibly\r\n-     *            wrapping another exception.\r\n-     * @exception java.io.IOException An IO exception from the parser,\r\n-     *            possibly from a byte stream or character stream\r\n-     *            supplied by the application.\r\n-     * @see org.xml.sax.XMLReader#parse(java.lang.String)\r\n-     */\r\n-    public void parse (String systemId)\r\n-\tthrows SAXException, IOException\r\n-    {\r\n-\tparse(new InputSource(systemId));\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.EntityResolver.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Filter an external entity resolution.\r\n-     *\r\n-     * @param publicId The entity's public identifier, or null.\r\n-     * @param systemId The entity's system identifier.\r\n-     * @return A new InputSource or null for the default.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @exception java.io.IOException The client may throw an\r\n-     *            I/O-related exception while obtaining the\r\n-     *            new InputSource.\r\n-     * @see org.xml.sax.EntityResolver#resolveEntity\r\n-     */\r\n-    public InputSource resolveEntity (String publicId, String systemId)\r\n-\tthrows SAXException, IOException\r\n-    {\r\n-\tif (entityResolver != null) {\r\n-\t    return entityResolver.resolveEntity(publicId, systemId);\r\n-\t} else {\r\n-\t    return null;\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.DTDHandler.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-    \r\n-    /**\r\n-     * Filter a notation declaration event.\r\n-     *\r\n-     * @param name The notation name.\r\n-     * @param publicId The notation's public identifier, or null.\r\n-     * @param systemId The notation's system identifier, or null.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.DTDHandler#notationDecl\r\n-     */\r\n-    public void notationDecl (String name, String publicId, String systemId)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (dtdHandler != null) {\r\n-\t    dtdHandler.notationDecl(name, publicId, systemId);\r\n-\t}\r\n-    }\r\n-\r\n-    \r\n-    /**\r\n-     * Filter an unparsed entity declaration event.\r\n-     *\r\n-     * @param name The entity name.\r\n-     * @param publicId The entity's public identifier, or null.\r\n-     * @param systemId The entity's system identifier, or null.\r\n-     * @param notationName The name of the associated notation.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\r\n-     */\r\n-    public void unparsedEntityDecl (String name, String publicId,\r\n-\t\t\t\t    String systemId, String notationName)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (dtdHandler != null) {\r\n-\t    dtdHandler.unparsedEntityDecl(name, publicId, systemId,\r\n-\t\t\t\t\t  notationName);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.ContentHandler.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Filter a new document locator event.\r\n-     *\r\n-     * @param locator The document locator.\r\n-     * @see org.xml.sax.ContentHandler#setDocumentLocator\r\n-     */\r\n-    public void setDocumentLocator (Locator locator)\r\n-    {\r\n-\tthis.locator = locator;\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.setDocumentLocator(locator);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter a start document event.\r\n-     *\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ContentHandler#startDocument\r\n-     */\r\n-    public void startDocument ()\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.startDocument();\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter an end document event.\r\n-     *\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ContentHandler#endDocument\r\n-     */\r\n-    public void endDocument ()\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.endDocument();\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter a start Namespace prefix mapping event.\r\n-     *\r\n-     * @param prefix The Namespace prefix.\r\n-     * @param uri The Namespace URI.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ContentHandler#startPrefixMapping\r\n-     */\r\n-    public void startPrefixMapping (String prefix, String uri)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.startPrefixMapping(prefix, uri);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter an end Namespace prefix mapping event.\r\n-     *\r\n-     * @param prefix The Namespace prefix.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ContentHandler#endPrefixMapping\r\n-     */\r\n-    public void endPrefixMapping (String prefix)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.endPrefixMapping(prefix);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter a start element event.\r\n-     *\r\n-     * @param uri The element's Namespace URI, or the empty string.\r\n-     * @param localName The element's local name, or the empty string.\r\n-     * @param qName The element's qualified (prefixed) name, or the empty\r\n-     *        string.\r\n-     * @param atts The element's attributes.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ContentHandler#startElement\r\n-     */\r\n-    public void startElement (String uri, String localName, String qName,\r\n-\t\t\t      Attributes atts)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.startElement(uri, localName, qName, atts);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter an end element event.\r\n-     *\r\n-     * @param uri The element's Namespace URI, or the empty string.\r\n-     * @param localName The element's local name, or the empty string.\r\n-     * @param qName The element's qualified (prefixed) name, or the empty\r\n-     *        string.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ContentHandler#endElement\r\n-     */\r\n-    public void endElement (String uri, String localName, String qName)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.endElement(uri, localName, qName);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter a character data event.\r\n-     *\r\n-     * @param ch An array of characters.\r\n-     * @param start The starting position in the array.\r\n-     * @param length The number of characters to use from the array.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ContentHandler#characters\r\n-     */\r\n-    public void characters (char ch[], int start, int length)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.characters(ch, start, length);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter an ignorable whitespace event.\r\n-     *\r\n-     * @param ch An array of characters.\r\n-     * @param start The starting position in the array.\r\n-     * @param length The number of characters to use from the array.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ContentHandler#ignorableWhitespace\r\n-     */\r\n-    public void ignorableWhitespace (char ch[], int start, int length)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.ignorableWhitespace(ch, start, length);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter a processing instruction event.\r\n-     *\r\n-     * @param target The processing instruction target.\r\n-     * @param data The text following the target.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ContentHandler#processingInstruction\r\n-     */\r\n-    public void processingInstruction (String target, String data)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.processingInstruction(target, data);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter a skipped entity event.\r\n-     *\r\n-     * @param name The name of the skipped entity.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ContentHandler#skippedEntity\r\n-     */\r\n-    public void skippedEntity (String name)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (contentHandler != null) {\r\n-\t    contentHandler.skippedEntity(name);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.ErrorHandler.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Filter a warning event.\r\n-     *\r\n-     * @param e The nwarning as an exception.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ErrorHandler#warning\r\n-     */\r\n-    public void warning (SAXParseException e)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (errorHandler != null) {\r\n-\t    errorHandler.warning(e);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter an error event.\r\n-     *\r\n-     * @param e The error as an exception.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ErrorHandler#error\r\n-     */\r\n-    public void error (SAXParseException e)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (errorHandler != null) {\r\n-\t    errorHandler.error(e);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Filter a fatal error event.\r\n-     *\r\n-     * @param e The error as an exception.\r\n-     * @exception org.xml.sax.SAXException The client may throw\r\n-     *            an exception during processing.\r\n-     * @see org.xml.sax.ErrorHandler#fatalError\r\n-     */\r\n-    public void fatalError (SAXParseException e)\r\n-\tthrows SAXException\r\n-    {\r\n-\tif (errorHandler != null) {\r\n-\t    errorHandler.fatalError(e);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal methods.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Set up before a parse.\r\n-     *\r\n-     * <p>Before every parse, check whether the parent is\r\n-     * non-null, and re-register the filter for all of the \r\n-     * events.</p>\r\n-     */\r\n-    private void setupParse ()\r\n-    {\r\n-\tif (parent == null) {\r\n-\t    throw new NullPointerException(\"No parent for filter\");\r\n-\t}\r\n-\tparent.setEntityResolver(this);\r\n-\tparent.setDTDHandler(this);\r\n-\tparent.setContentHandler(this);\r\n-\tparent.setErrorHandler(this);\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal state.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-    private XMLReader parent = null;\r\n-    private Locator locator = null;\r\n-    private EntityResolver entityResolver = null;\r\n-    private DTDHandler dtdHandler = null;\r\n-    private ContentHandler contentHandler = null;\r\n-    private ErrorHandler errorHandler = null;\r\n-\r\n-}\r\n-\r\n-// end of XMLFilterImpl.java\r\n+// XMLFilterImpl.java - base SAX2 filter implementation.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the Public Domain.\n+\n+// $Id: XMLFilterImpl.java,v 1.3.2.7 2002/01/29 21:34:14 dbrownell Exp $\n+\n+package org.xml.sax.helpers;\n+\n+import java.io.IOException;\n+\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.XMLFilter;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.Locator;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.EntityResolver;\n+import org.xml.sax.DTDHandler;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+import org.xml.sax.SAXNotSupportedException;\n+import org.xml.sax.SAXNotRecognizedException;\n+\n+\n+/**\n+ * Base class for deriving an XML filter.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class is designed to sit between an {@link org.xml.sax.XMLReader\n+ * XMLReader} and the client application's event handlers.  By default, it\n+ * does nothing but pass requests up to the reader and events\n+ * on to the handlers unmodified, but subclasses can override\n+ * specific methods to modify the event stream or the configuration\n+ * requests as they pass through.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.XMLFilter\n+ * @see org.xml.sax.XMLReader\n+ * @see org.xml.sax.EntityResolver\n+ * @see org.xml.sax.DTDHandler\n+ * @see org.xml.sax.ContentHandler\n+ * @see org.xml.sax.ErrorHandler\n+ */\n+public class XMLFilterImpl\n+    implements XMLFilter, EntityResolver, DTDHandler, ContentHandler, ErrorHandler\n+{\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Constructors.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Construct an empty XML filter, with no parent.\n+     *\n+     * <p>This filter will have no parent: you must assign a parent\n+     * before you start a parse or do any configuration with\n+     * setFeature or setProperty, unless you use this as a pure event\n+     * consumer rather than as an {@link XMLReader}.</p>\n+     *\n+     * @see org.xml.sax.XMLReader#setFeature\n+     * @see org.xml.sax.XMLReader#setProperty\n+     * @see #setParent\n+     */\n+    public XMLFilterImpl ()\n+    {\n+\tsuper();\n+    }\n+\n+\n+    /**\n+     * Construct an XML filter with the specified parent.\n+     *\n+     * @see #setParent\n+     * @see #getParent\n+     */\n+    public XMLFilterImpl (XMLReader parent)\n+    {\n+        super();\n+\tsetParent(parent);\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.XMLFilter.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Set the parent reader.\n+     *\n+     * <p>This is the {@link org.xml.sax.XMLReader XMLReader} from which \n+     * this filter will obtain its events and to which it will pass its \n+     * configuration requests.  The parent may itself be another filter.</p>\n+     *\n+     * <p>If there is no parent reader set, any attempt to parse\n+     * or to set or get a feature or property will fail.</p>\n+     *\n+     * @param parent The parent XML reader.\n+     * @see #getParent\n+     */\n+    public void setParent (XMLReader parent)\n+    {\n+\tthis.parent = parent;\n+    }\n+\n+\n+    /**\n+     * Get the parent reader.\n+     *\n+     * @return The parent XML reader, or null if none is set.\n+     * @see #setParent\n+     */\n+    public XMLReader getParent ()\n+    {\n+\treturn parent;\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.XMLReader.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Set the value of a feature.\n+     *\n+     * <p>This will always fail if the parent is null.</p>\n+     *\n+     * @param name The feature name.\n+     * @param value The requested feature value.\n+     * @exception org.xml.sax.SAXNotRecognizedException If the feature\n+     *            value can't be assigned or retrieved from the parent.\n+     * @exception org.xml.sax.SAXNotSupportedException When the\n+     *            parent recognizes the feature name but \n+     *            cannot set the requested value.\n+     */\n+    public void setFeature (String name, boolean value)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException\n+    {\n+\tif (parent != null) {\n+\t    parent.setFeature(name, value);\n+\t} else {\n+\t    throw new SAXNotRecognizedException(\"Feature: \" + name);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Look up the value of a feature.\n+     *\n+     * <p>This will always fail if the parent is null.</p>\n+     *\n+     * @param name The feature name.\n+     * @return The current value of the feature.\n+     * @exception org.xml.sax.SAXNotRecognizedException If the feature\n+     *            value can't be assigned or retrieved from the parent.\n+     * @exception org.xml.sax.SAXNotSupportedException When the\n+     *            parent recognizes the feature name but \n+     *            cannot determine its value at this time.\n+     */\n+    public boolean getFeature (String name)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException\n+    {\n+\tif (parent != null) {\n+\t    return parent.getFeature(name);\n+\t} else {\n+\t    throw new SAXNotRecognizedException(\"Feature: \" + name);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Set the value of a property.\n+     *\n+     * <p>This will always fail if the parent is null.</p>\n+     *\n+     * @param name The property name.\n+     * @param value The requested property value.\n+     * @exception org.xml.sax.SAXNotRecognizedException If the property\n+     *            value can't be assigned or retrieved from the parent.\n+     * @exception org.xml.sax.SAXNotSupportedException When the\n+     *            parent recognizes the property name but \n+     *            cannot set the requested value.\n+     */\n+    public void setProperty (String name, Object value)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException\n+    {\n+\tif (parent != null) {\n+\t    parent.setProperty(name, value);\n+\t} else {\n+\t    throw new SAXNotRecognizedException(\"Property: \" + name);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Look up the value of a property.\n+     *\n+     * @param name The property name.\n+     * @return The current value of the property.\n+     * @exception org.xml.sax.SAXNotRecognizedException If the property\n+     *            value can't be assigned or retrieved from the parent.\n+     * @exception org.xml.sax.SAXNotSupportedException When the\n+     *            parent recognizes the property name but \n+     *            cannot determine its value at this time.\n+     */\n+    public Object getProperty (String name)\n+\tthrows SAXNotRecognizedException, SAXNotSupportedException\n+    {\n+\tif (parent != null) {\n+\t    return parent.getProperty(name);\n+\t} else {\n+\t    throw new SAXNotRecognizedException(\"Property: \" + name);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Set the entity resolver.\n+     *\n+     * @param resolver The new entity resolver.\n+     */\n+    public void setEntityResolver (EntityResolver resolver)\n+    {\n+\tentityResolver = resolver;\n+    }\n+\n+\n+    /**\n+     * Get the current entity resolver.\n+     *\n+     * @return The current entity resolver, or null if none was set.\n+     */\n+    public EntityResolver getEntityResolver ()\n+    {\n+\treturn entityResolver;\n+    }\n+\n+\n+    /**\n+     * Set the DTD event handler.\n+     *\n+     * @param resolver The new DTD handler.\n+     */\n+    public void setDTDHandler (DTDHandler handler)\n+    {\n+\tdtdHandler = handler;\n+    }\n+\n+\n+    /**\n+     * Get the current DTD event handler.\n+     *\n+     * @return The current DTD handler, or null if none was set.\n+     */\n+    public DTDHandler getDTDHandler ()\n+    {\n+\treturn dtdHandler;\n+    }\n+\n+\n+    /**\n+     * Set the content event handler.\n+     *\n+     * @param resolver The new content handler.\n+     */\n+    public void setContentHandler (ContentHandler handler)\n+    {\n+\tcontentHandler = handler;\n+    }\n+\n+\n+    /**\n+     * Get the content event handler.\n+     *\n+     * @return The current content handler, or null if none was set.\n+     */\n+    public ContentHandler getContentHandler ()\n+    {\n+\treturn contentHandler;\n+    }\n+\n+\n+    /**\n+     * Set the error event handler.\n+     *\n+     * @param handle The new error handler.\n+     */\n+    public void setErrorHandler (ErrorHandler handler)\n+    {\n+\terrorHandler = handler;\n+    }\n+\n+\n+    /**\n+     * Get the current error event handler.\n+     *\n+     * @return The current error handler, or null if none was set.\n+     */\n+    public ErrorHandler getErrorHandler ()\n+    {\n+\treturn errorHandler;\n+    }\n+\n+\n+    /**\n+     * Parse a document.\n+     *\n+     * @param input The input source for the document entity.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @exception java.io.IOException An IO exception from the parser,\n+     *            possibly from a byte stream or character stream\n+     *            supplied by the application.\n+     */\n+    public void parse (InputSource input)\n+\tthrows SAXException, IOException\n+    {\n+\tsetupParse();\n+\tparent.parse(input);\n+    }\n+\n+\n+    /**\n+     * Parse a document.\n+     *\n+     * @param systemId The system identifier as a fully-qualified URI.\n+     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n+     *            wrapping another exception.\n+     * @exception java.io.IOException An IO exception from the parser,\n+     *            possibly from a byte stream or character stream\n+     *            supplied by the application.\n+     */\n+    public void parse (String systemId)\n+\tthrows SAXException, IOException\n+    {\n+\tparse(new InputSource(systemId));\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.EntityResolver.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Filter an external entity resolution.\n+     *\n+     * @param publicId The entity's public identifier, or null.\n+     * @param systemId The entity's system identifier.\n+     * @return A new InputSource or null for the default.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     * @exception java.io.IOException The client may throw an\n+     *            I/O-related exception while obtaining the\n+     *            new InputSource.\n+     */\n+    public InputSource resolveEntity (String publicId, String systemId)\n+\tthrows SAXException, IOException\n+    {\n+\tif (entityResolver != null) {\n+\t    return entityResolver.resolveEntity(publicId, systemId);\n+\t} else {\n+\t    return null;\n+\t}\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.DTDHandler.\n+    ////////////////////////////////////////////////////////////////////\n+\n+    \n+    /**\n+     * Filter a notation declaration event.\n+     *\n+     * @param name The notation name.\n+     * @param publicId The notation's public identifier, or null.\n+     * @param systemId The notation's system identifier, or null.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void notationDecl (String name, String publicId, String systemId)\n+\tthrows SAXException\n+    {\n+\tif (dtdHandler != null) {\n+\t    dtdHandler.notationDecl(name, publicId, systemId);\n+\t}\n+    }\n+\n+    \n+    /**\n+     * Filter an unparsed entity declaration event.\n+     *\n+     * @param name The entity name.\n+     * @param publicId The entity's public identifier, or null.\n+     * @param systemId The entity's system identifier, or null.\n+     * @param notationName The name of the associated notation.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void unparsedEntityDecl (String name, String publicId,\n+\t\t\t\t    String systemId, String notationName)\n+\tthrows SAXException\n+    {\n+\tif (dtdHandler != null) {\n+\t    dtdHandler.unparsedEntityDecl(name, publicId, systemId,\n+\t\t\t\t\t  notationName);\n+\t}\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.ContentHandler.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Filter a new document locator event.\n+     *\n+     * @param locator The document locator.\n+     */\n+    public void setDocumentLocator (Locator locator)\n+    {\n+\tthis.locator = locator;\n+\tif (contentHandler != null) {\n+\t    contentHandler.setDocumentLocator(locator);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter a start document event.\n+     *\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void startDocument ()\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.startDocument();\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter an end document event.\n+     *\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void endDocument ()\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.endDocument();\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter a start Namespace prefix mapping event.\n+     *\n+     * @param prefix The Namespace prefix.\n+     * @param uri The Namespace URI.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void startPrefixMapping (String prefix, String uri)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.startPrefixMapping(prefix, uri);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter an end Namespace prefix mapping event.\n+     *\n+     * @param prefix The Namespace prefix.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void endPrefixMapping (String prefix)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.endPrefixMapping(prefix);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter a start element event.\n+     *\n+     * @param uri The element's Namespace URI, or the empty string.\n+     * @param localName The element's local name, or the empty string.\n+     * @param qName The element's qualified (prefixed) name, or the empty\n+     *        string.\n+     * @param atts The element's attributes.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void startElement (String uri, String localName, String qName,\n+\t\t\t      Attributes atts)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.startElement(uri, localName, qName, atts);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter an end element event.\n+     *\n+     * @param uri The element's Namespace URI, or the empty string.\n+     * @param localName The element's local name, or the empty string.\n+     * @param qName The element's qualified (prefixed) name, or the empty\n+     *        string.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void endElement (String uri, String localName, String qName)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.endElement(uri, localName, qName);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter a character data event.\n+     *\n+     * @param ch An array of characters.\n+     * @param start The starting position in the array.\n+     * @param length The number of characters to use from the array.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void characters (char ch[], int start, int length)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.characters(ch, start, length);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter an ignorable whitespace event.\n+     *\n+     * @param ch An array of characters.\n+     * @param start The starting position in the array.\n+     * @param length The number of characters to use from the array.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void ignorableWhitespace (char ch[], int start, int length)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.ignorableWhitespace(ch, start, length);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter a processing instruction event.\n+     *\n+     * @param target The processing instruction target.\n+     * @param data The text following the target.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void processingInstruction (String target, String data)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.processingInstruction(target, data);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter a skipped entity event.\n+     *\n+     * @param name The name of the skipped entity.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void skippedEntity (String name)\n+\tthrows SAXException\n+    {\n+\tif (contentHandler != null) {\n+\t    contentHandler.skippedEntity(name);\n+\t}\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.ErrorHandler.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Filter a warning event.\n+     *\n+     * @param e The warning as an exception.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void warning (SAXParseException e)\n+\tthrows SAXException\n+    {\n+\tif (errorHandler != null) {\n+\t    errorHandler.warning(e);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter an error event.\n+     *\n+     * @param e The error as an exception.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void error (SAXParseException e)\n+\tthrows SAXException\n+    {\n+\tif (errorHandler != null) {\n+\t    errorHandler.error(e);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Filter a fatal error event.\n+     *\n+     * @param e The error as an exception.\n+     * @exception org.xml.sax.SAXException The client may throw\n+     *            an exception during processing.\n+     */\n+    public void fatalError (SAXParseException e)\n+\tthrows SAXException\n+    {\n+\tif (errorHandler != null) {\n+\t    errorHandler.fatalError(e);\n+\t}\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal methods.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Set up before a parse.\n+     *\n+     * <p>Before every parse, check whether the parent is\n+     * non-null, and re-register the filter for all of the \n+     * events.</p>\n+     */\n+    private void setupParse ()\n+    {\n+\tif (parent == null) {\n+\t    throw new NullPointerException(\"No parent for filter\");\n+\t}\n+\tparent.setEntityResolver(this);\n+\tparent.setDTDHandler(this);\n+\tparent.setContentHandler(this);\n+\tparent.setErrorHandler(this);\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal state.\n+    ////////////////////////////////////////////////////////////////////\n+\n+    private XMLReader parent = null;\n+    private Locator locator = null;\n+    private EntityResolver entityResolver = null;\n+    private DTDHandler dtdHandler = null;\n+    private ContentHandler contentHandler = null;\n+    private ErrorHandler errorHandler = null;\n+\n+}\n+\n+// end of XMLFilterImpl.java"}, {"sha": "19c8d3f8e881a7daac865c9665fd33823bfc15b2", "filename": "libjava/org/xml/sax/helpers/XMLReaderAdapter.java", "status": "modified", "additions": 539, "deletions": 526, "changes": 1065, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FXMLReaderAdapter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FXMLReaderAdapter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FXMLReaderAdapter.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,526 +1,539 @@\n-// XMLReaderAdapter.java - adapt an SAX2 XMLReader to a SAX1 Parser\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the public domain.\r\n-\r\n-// $Id: XMLReaderAdapter.java,v 1.1 2000/10/02 02:43:20 sboag Exp $\r\n-\r\n-package org.xml.sax.helpers;\r\n-\r\n-import java.io.IOException;\r\n-import java.util.Locale;\r\n-\r\n-import org.xml.sax.Parser;\t// deprecated\r\n-import org.xml.sax.Locator;\r\n-import org.xml.sax.InputSource;\r\n-import org.xml.sax.AttributeList; // deprecated\r\n-import org.xml.sax.EntityResolver;\r\n-import org.xml.sax.DTDHandler;\r\n-import org.xml.sax.DocumentHandler; // deprecated\r\n-import org.xml.sax.ErrorHandler;\r\n-import org.xml.sax.SAXException;\r\n-\r\n-import org.xml.sax.XMLReader;\r\n-import org.xml.sax.Attributes;\r\n-import org.xml.sax.ContentHandler;\r\n-import org.xml.sax.SAXNotSupportedException;\r\n-\r\n-\r\n-/**\r\n- * Adapt a SAX2 XMLReader as a SAX1 Parser.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class wraps a SAX2 {@link org.xml.sax.XMLReader XMLReader}\r\n- * and makes it act as a SAX1 {@link org.xml.sax.Parser Parser}.  The XMLReader \r\n- * must support a true value for the \r\n- * http://xml.org/sax/features/namespace-prefixes property or parsing will fail\r\n- * with a {@link org.xml.sax.SAXException SAXException}; if the XMLReader \r\n- * supports a false value for the http://xml.org/sax/features/namespaces \r\n- * property, that will also be used to improve efficiency.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.Parser\r\n- * @see org.xml.sax.XMLReader\r\n- */\r\n-public class XMLReaderAdapter implements Parser, ContentHandler\r\n-{\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Constructor.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Create a new adapter.\r\n-     *\r\n-     * <p>Use the \"org.xml.sax.driver\" property to locate the SAX2\r\n-     * driver to embed.</p>\r\n-     *\r\n-     * @exception org.xml.sax.SAXException If the embedded driver\r\n-     *            cannot be instantiated or if the\r\n-     *            org.xml.sax.driver property is not specified.\r\n-     */\r\n-    public XMLReaderAdapter ()\r\n-      throws SAXException\r\n-    {\r\n-\tsetup(XMLReaderFactory.createXMLReader());\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Create a new adapter.\r\n-     *\r\n-     * <p>Create a new adapter, wrapped around a SAX2 XMLReader.\r\n-     * The adapter will make the XMLReader act like a SAX1\r\n-     * Parser.</p>\r\n-     *\r\n-     * @param xmlReader The SAX2 XMLReader to wrap.\r\n-     * @exception java.lang.NullPointerException If the argument is null.\r\n-     */\r\n-    public XMLReaderAdapter (XMLReader xmlReader)\r\n-    {\r\n-\tsetup(xmlReader);\r\n-    }\r\n-\r\n-\r\n-\r\n-    /**\r\n-     * Internal setup.\r\n-     *\r\n-     * @param xmlReader The embedded XMLReader.\r\n-     */\r\n-    private void setup (XMLReader xmlReader)\r\n-    {\r\n-\tif (xmlReader == null) {\r\n-\t    throw new NullPointerException(\"XMLReader must not be null\");\r\n-\t}\r\n-\tthis.xmlReader = xmlReader;\r\n-\tqAtts = new AttributesAdapter();\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.Parser.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Set the locale for error reporting.\r\n-     *\r\n-     * <p>This is not supported in SAX2, and will always throw\r\n-     * an exception.</p>\r\n-     *\r\n-     * @param The locale for error reporting.\r\n-     * @see org.xml.sax.Parser#setLocale\r\n-     */\r\n-    public void setLocale (Locale locale)\r\n-\tthrows SAXException\r\n-    {\r\n-\tthrow new SAXNotSupportedException(\"setLocale not supported\");\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Register the entity resolver.\r\n-     *\r\n-     * @param resolver The new resolver.\r\n-     * @see org.xml.sax.Parser#setEntityResolver\r\n-     */\r\n-    public void setEntityResolver (EntityResolver resolver)\r\n-    {\r\n-\txmlReader.setEntityResolver(resolver);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Register the DTD event handler.\r\n-     *\r\n-     * @param handler The new DTD event handler.\r\n-     * @see org.xml.sax.Parser#setDTDHandler\r\n-     */\r\n-    public void setDTDHandler (DTDHandler handler)\r\n-    {\r\n-\txmlReader.setDTDHandler(handler);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Register the SAX1 document event handler.\r\n-     *\r\n-     * <p>Note that the SAX1 document handler has no Namespace\r\n-     * support.</p>\r\n-     *\r\n-     * @param handler The new SAX1 document event handler.\r\n-     * @see org.xml.sax.Parser#setDocumentHandler\r\n-     */\r\n-    public void setDocumentHandler (DocumentHandler handler)\r\n-    {\r\n-\tdocumentHandler = handler;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Register the error event handler.\r\n-     *\r\n-     * @param handler The new error event handler.\r\n-     * @see org.xml.sax.Parser#setErrorHandler\r\n-     */\r\n-    public void setErrorHandler (ErrorHandler handler)\r\n-    {\r\n-\txmlReader.setErrorHandler(handler);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Parse the document.\r\n-     *\r\n-     * <p>This method will throw an exception if the embedded\r\n-     * XMLReader does not support the \r\n-     * http://xml.org/sax/features/namespace-prefixes property.</p>\r\n-     *\r\n-     * @param systemId The absolute URL of the document.\r\n-     * @exception java.io.IOException If there is a problem reading\r\n-     *            the raw content of the document.\r\n-     * @exception org.xml.sax.SAXException If there is a problem\r\n-     *            processing the document.\r\n-     * @see #parse(org.xml.sax.InputSource)\r\n-     * @see org.xml.sax.Parser#parse(java.lang.String)\r\n-     */\r\n-    public void parse (String systemId)\r\n-\tthrows IOException, SAXException\r\n-    {\r\n-\tparse(new InputSource(systemId));\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Parse the document.\r\n-     *\r\n-     * <p>This method will throw an exception if the embedded\r\n-     * XMLReader does not support the \r\n-     * http://xml.org/sax/features/namespace-prefixes property.</p>\r\n-     *\r\n-     * @param input An input source for the document.\r\n-     * @exception java.io.IOException If there is a problem reading\r\n-     *            the raw content of the document.\r\n-     * @exception org.xml.sax.SAXException If there is a problem\r\n-     *            processing the document.\r\n-     * @see #parse(java.lang.String)\r\n-     * @see org.xml.sax.Parser#parse(org.xml.sax.InputSource)\r\n-     */\r\n-    public void parse (InputSource input)\r\n-\tthrows IOException, SAXException\r\n-    {\r\n-\tsetupXMLReader();\r\n-\txmlReader.parse(input);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Set up the XML reader.\r\n-     */\r\n-    private void setupXMLReader ()\r\n-\tthrows SAXException\r\n-    {\r\n-\txmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\r\n-\ttry {\r\n-\t    xmlReader.setFeature(\"http://xml.org/sax/features/namespaces\",\r\n-\t                         false);\r\n-\t} catch (SAXException e) {\r\n-\t    // NO OP: it's just extra information, and we can ignore it\r\n-\t}\r\n-\txmlReader.setContentHandler(this);\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Implementation of org.xml.sax.ContentHandler.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Set a document locator.\r\n-     *\r\n-     * @param locator The document locator.\r\n-     * @see org.xml.sax.ContentHandler#setDocumentLocator\r\n-     */\r\n-    public void setDocumentLocator (Locator locator)\r\n-    {\r\n-\tdocumentHandler.setDocumentLocator(locator);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Start document event.\r\n-     *\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.ContentHandler#startDocument\r\n-     */\r\n-    public void startDocument ()\r\n-\tthrows SAXException\r\n-    {\r\n-\tdocumentHandler.startDocument();\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * End document event.\r\n-     *\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.ContentHandler#endDocument\r\n-     */\r\n-    public void endDocument ()\r\n-\tthrows SAXException\r\n-    {\r\n-\tdocumentHandler.endDocument();\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX2 start prefix mapping event.\r\n-     *\r\n-     * @param prefix The prefix being mapped.\r\n-     * @param uri The Namespace URI being mapped to.\r\n-     * @see org.xml.sax.ContentHandler#startPrefixMapping\r\n-     */\r\n-    public void startPrefixMapping (String prefix, String uri)\r\n-    {\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX2 end prefix mapping event.\r\n-     *\r\n-     * @param prefix The prefix being mapped.\r\n-     * @see org.xml.sax.ContentHandler#endPrefixMapping\r\n-     */\r\n-    public void endPrefixMapping (String prefix)\r\n-    {\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX2 start element event.\r\n-     *\r\n-     * @param uri The Namespace URI.\r\n-     * @param localName The Namespace local name.\r\n-     * @param qName The qualified (prefixed) name.\r\n-     * @param atts The SAX2 attributes.\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.ContentHandler#endDocument\r\n-     */\r\n-    public void startElement (String uri, String localName,\r\n-\t\t\t      String qName, Attributes atts)\r\n-\tthrows SAXException\r\n-    {\r\n-\tqAtts.setAttributes(atts);\r\n-\tdocumentHandler.startElement(qName, qAtts);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX2 end element event.\r\n-     *\r\n-     * @param uri The Namespace URI.\r\n-     * @param localName The Namespace local name.\r\n-     * @param qName The qualified (prefixed) name.\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.ContentHandler#endElement\r\n-     */\r\n-    public void endElement (String uri, String localName,\r\n-\t\t\t    String qName)\r\n-\tthrows SAXException\r\n-    {\r\n-\tdocumentHandler.endElement(qName);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX2 characters event.\r\n-     *\r\n-     * @param ch An array of characters.\r\n-     * @param start The starting position in the array.\r\n-     * @param length The number of characters to use.\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.ContentHandler#characters\r\n-     */\r\n-    public void characters (char ch[], int start, int length)\r\n-\tthrows SAXException\r\n-    {\r\n-\tdocumentHandler.characters(ch, start, length);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX2 ignorable whitespace event.\r\n-     *\r\n-     * @param ch An array of characters.\r\n-     * @param start The starting position in the array.\r\n-     * @param length The number of characters to use.\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.ContentHandler#ignorableWhitespace\r\n-     */\r\n-    public void ignorableWhitespace (char ch[], int start, int length)\r\n-\tthrows SAXException\r\n-    {\r\n-\tdocumentHandler.ignorableWhitespace(ch, start, length);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX2 processing instruction event.\r\n-     *\r\n-     * @param target The processing instruction target.\r\n-     * @param data The remainder of the processing instruction\r\n-     * @exception org.xml.sax.SAXException The client may raise a\r\n-     *            processing exception.\r\n-     * @see org.xml.sax.ContentHandler#processingInstruction\r\n-     */\r\n-    public void processingInstruction (String target, String data)\r\n-\tthrows SAXException\r\n-    {\r\n-\tdocumentHandler.processingInstruction(target, data);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Adapt a SAX2 skipped entity event.\r\n-     *\r\n-     * @param name The name of the skipped entity.\r\n-     * @see org.xml.sax.ContentHandler#skippedEntity\r\n-     */\r\n-    public void skippedEntity (String name)\r\n-\tthrows SAXException\r\n-    {\r\n-    }\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal state.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-    XMLReader xmlReader;\r\n-    DocumentHandler documentHandler;\r\n-    AttributesAdapter qAtts;\r\n-\r\n-\r\n-\f\r\n-    ////////////////////////////////////////////////////////////////////\r\n-    // Internal class.\r\n-    ////////////////////////////////////////////////////////////////////\r\n-\r\n-\r\n-    /**\r\n-     * Internal class to wrap a SAX2 Attributes object for SAX1.\r\n-     */\r\n-    final class AttributesAdapter implements AttributeList\r\n-    {\r\n-\tAttributesAdapter ()\r\n-\t{\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Set the embedded Attributes object.\r\n-\t *\r\n-\t * @param The embedded SAX2 Attributes.\r\n-\t */ \r\n-\tvoid setAttributes (Attributes attributes)\r\n-\t{\r\n-\t    this.attributes = attributes;\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the number of attributes.\r\n-\t *\r\n-\t * @return The length of the attribute list.\r\n-\t * @see org.xml.sax.AttributeList#getLength\r\n-\t */\r\n-\tpublic int getLength ()\r\n-\t{\r\n-\t    return attributes.getLength();\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the qualified (prefixed) name of an attribute by position.\r\n-\t *\r\n-\t * @return The qualified name.\r\n-\t * @see org.xml.sax.AttributeList#getName\r\n-\t */\r\n-\tpublic String getName (int i)\r\n-\t{\r\n-\t    return attributes.getQName(i);\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the type of an attribute by position.\r\n-\t *\r\n-\t * @return The type.\r\n-\t * @see org.xml.sax.AttributeList#getType(int)\r\n-\t */\r\n-\tpublic String getType (int i)\r\n-\t{\r\n-\t    return attributes.getType(i);\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the value of an attribute by position.\r\n-\t *\r\n-\t * @return The value.\r\n-\t * @see org.xml.sax.AttributeList#getValue(int)\r\n-\t */\r\n-\tpublic String getValue (int i)\r\n-\t{\r\n-\t    return attributes.getValue(i);\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the type of an attribute by qualified (prefixed) name.\r\n-\t *\r\n-\t * @return The type.\r\n-\t * @see org.xml.sax.AttributeList#getType(java.lang.String)\r\n-\t */\r\n-\tpublic String getType (String qName)\r\n-\t{\r\n-\t    return attributes.getType(qName);\r\n-\t}\r\n-\r\n-\r\n-\t/**\r\n-\t * Return the value of an attribute by qualified (prefixed) name.\r\n-\t *\r\n-\t * @return The value.\r\n-\t * @see org.xml.sax.AttributeList#getValue(java.lang.String)\r\n-\t */\r\n-\tpublic String getValue (String qName)\r\n-\t{\r\n-\t    return attributes.getValue(qName);\r\n-\t}\r\n-\r\n-\tprivate Attributes attributes;\r\n-    }\r\n-\r\n-}\r\n-\r\n-// end of XMLReaderAdapter.java\r\n+// XMLReaderAdapter.java - adapt an SAX2 XMLReader to a SAX1 Parser\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// NO WARRANTY!  This class is in the public domain.\n+\n+// $Id: XMLReaderAdapter.java,v 1.5.2.3 2002/01/29 21:34:15 dbrownell Exp $\n+\n+package org.xml.sax.helpers;\n+\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+import org.xml.sax.Parser;\t// deprecated\n+import org.xml.sax.Locator;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.AttributeList; // deprecated\n+import org.xml.sax.EntityResolver;\n+import org.xml.sax.DTDHandler;\n+import org.xml.sax.DocumentHandler; // deprecated\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXNotSupportedException;\n+\n+\n+/**\n+ * Adapt a SAX2 XMLReader as a SAX1 Parser.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class wraps a SAX2 {@link org.xml.sax.XMLReader XMLReader}\n+ * and makes it act as a SAX1 {@link org.xml.sax.Parser Parser}.  The XMLReader \n+ * must support a true value for the \n+ * http://xml.org/sax/features/namespace-prefixes property or parsing will fail\n+ * with a {@link org.xml.sax.SAXException SAXException}; if the XMLReader \n+ * supports a false value for the http://xml.org/sax/features/namespaces \n+ * property, that will also be used to improve efficiency.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson\n+ * @version 2.0.1 (sax2r2)\n+ * @see org.xml.sax.Parser\n+ * @see org.xml.sax.XMLReader\n+ */\n+public class XMLReaderAdapter implements Parser, ContentHandler\n+{\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Constructor.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Create a new adapter.\n+     *\n+     * <p>Use the \"org.xml.sax.driver\" property to locate the SAX2\n+     * driver to embed.</p>\n+     *\n+     * @exception org.xml.sax.SAXException If the embedded driver\n+     *            cannot be instantiated or if the\n+     *            org.xml.sax.driver property is not specified.\n+     */\n+    public XMLReaderAdapter ()\n+      throws SAXException\n+    {\n+\tsetup(XMLReaderFactory.createXMLReader());\n+    }\n+\n+\n+    /**\n+     * Create a new adapter.\n+     *\n+     * <p>Create a new adapter, wrapped around a SAX2 XMLReader.\n+     * The adapter will make the XMLReader act like a SAX1\n+     * Parser.</p>\n+     *\n+     * @param xmlReader The SAX2 XMLReader to wrap.\n+     * @exception java.lang.NullPointerException If the argument is null.\n+     */\n+    public XMLReaderAdapter (XMLReader xmlReader)\n+    {\n+\tsetup(xmlReader);\n+    }\n+\n+\n+\n+    /**\n+     * Internal setup.\n+     *\n+     * @param xmlReader The embedded XMLReader.\n+     */\n+    private void setup (XMLReader xmlReader)\n+    {\n+\tif (xmlReader == null) {\n+\t    throw new NullPointerException(\"XMLReader must not be null\");\n+\t}\n+\tthis.xmlReader = xmlReader;\n+\tqAtts = new AttributesAdapter();\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.Parser.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Set the locale for error reporting.\n+     *\n+     * <p>This is not supported in SAX2, and will always throw\n+     * an exception.</p>\n+     *\n+     * @param The locale for error reporting.\n+     * @see org.xml.sax.Parser#setLocale\n+     * @exception org.xml.sax.SAXException Thrown unless overridden.\n+     */\n+    public void setLocale (Locale locale)\n+\tthrows SAXException\n+    {\n+\tthrow new SAXNotSupportedException(\"setLocale not supported\");\n+    }\n+\n+\n+    /**\n+     * Register the entity resolver.\n+     *\n+     * @param resolver The new resolver.\n+     * @see org.xml.sax.Parser#setEntityResolver\n+     */\n+    public void setEntityResolver (EntityResolver resolver)\n+    {\n+\txmlReader.setEntityResolver(resolver);\n+    }\n+\n+\n+    /**\n+     * Register the DTD event handler.\n+     *\n+     * @param handler The new DTD event handler.\n+     * @see org.xml.sax.Parser#setDTDHandler\n+     */\n+    public void setDTDHandler (DTDHandler handler)\n+    {\n+\txmlReader.setDTDHandler(handler);\n+    }\n+\n+\n+    /**\n+     * Register the SAX1 document event handler.\n+     *\n+     * <p>Note that the SAX1 document handler has no Namespace\n+     * support.</p>\n+     *\n+     * @param handler The new SAX1 document event handler.\n+     * @see org.xml.sax.Parser#setDocumentHandler\n+     */\n+    public void setDocumentHandler (DocumentHandler handler)\n+    {\n+\tdocumentHandler = handler;\n+    }\n+\n+\n+    /**\n+     * Register the error event handler.\n+     *\n+     * @param handler The new error event handler.\n+     * @see org.xml.sax.Parser#setErrorHandler\n+     */\n+    public void setErrorHandler (ErrorHandler handler)\n+    {\n+\txmlReader.setErrorHandler(handler);\n+    }\n+\n+\n+    /**\n+     * Parse the document.\n+     *\n+     * <p>This method will throw an exception if the embedded\n+     * XMLReader does not support the \n+     * http://xml.org/sax/features/namespace-prefixes property.</p>\n+     *\n+     * @param systemId The absolute URL of the document.\n+     * @exception java.io.IOException If there is a problem reading\n+     *            the raw content of the document.\n+     * @exception org.xml.sax.SAXException If there is a problem\n+     *            processing the document.\n+     * @see #parse(org.xml.sax.InputSource)\n+     * @see org.xml.sax.Parser#parse(java.lang.String)\n+     */\n+    public void parse (String systemId)\n+\tthrows IOException, SAXException\n+    {\n+\tparse(new InputSource(systemId));\n+    }\n+\n+\n+    /**\n+     * Parse the document.\n+     *\n+     * <p>This method will throw an exception if the embedded\n+     * XMLReader does not support the \n+     * http://xml.org/sax/features/namespace-prefixes property.</p>\n+     *\n+     * @param input An input source for the document.\n+     * @exception java.io.IOException If there is a problem reading\n+     *            the raw content of the document.\n+     * @exception org.xml.sax.SAXException If there is a problem\n+     *            processing the document.\n+     * @see #parse(java.lang.String)\n+     * @see org.xml.sax.Parser#parse(org.xml.sax.InputSource)\n+     */\n+    public void parse (InputSource input)\n+\tthrows IOException, SAXException\n+    {\n+\tsetupXMLReader();\n+\txmlReader.parse(input);\n+    }\n+\n+\n+    /**\n+     * Set up the XML reader.\n+     */\n+    private void setupXMLReader ()\n+\tthrows SAXException\n+    {\n+\txmlReader.setFeature(\"http://xml.org/sax/features/namespace-prefixes\", true);\n+\ttry {\n+\t    xmlReader.setFeature(\"http://xml.org/sax/features/namespaces\",\n+\t                         false);\n+\t} catch (SAXException e) {\n+\t    // NO OP: it's just extra information, and we can ignore it\n+\t}\n+\txmlReader.setContentHandler(this);\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Implementation of org.xml.sax.ContentHandler.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Set a document locator.\n+     *\n+     * @param locator The document locator.\n+     * @see org.xml.sax.ContentHandler#setDocumentLocator\n+     */\n+    public void setDocumentLocator (Locator locator)\n+    {\n+\tif (documentHandler != null)\n+\t    documentHandler.setDocumentLocator(locator);\n+    }\n+\n+\n+    /**\n+     * Start document event.\n+     *\n+     * @exception org.xml.sax.SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.ContentHandler#startDocument\n+     */\n+    public void startDocument ()\n+\tthrows SAXException\n+    {\n+\tif (documentHandler != null)\n+\t    documentHandler.startDocument();\n+    }\n+\n+\n+    /**\n+     * End document event.\n+     *\n+     * @exception org.xml.sax.SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.ContentHandler#endDocument\n+     */\n+    public void endDocument ()\n+\tthrows SAXException\n+    {\n+\tif (documentHandler != null)\n+\t    documentHandler.endDocument();\n+    }\n+\n+\n+    /**\n+     * Adapt a SAX2 start prefix mapping event.\n+     *\n+     * @param prefix The prefix being mapped.\n+     * @param uri The Namespace URI being mapped to.\n+     * @see org.xml.sax.ContentHandler#startPrefixMapping\n+     */\n+    public void startPrefixMapping (String prefix, String uri)\n+    {\n+    }\n+\n+\n+    /**\n+     * Adapt a SAX2 end prefix mapping event.\n+     *\n+     * @param prefix The prefix being mapped.\n+     * @see org.xml.sax.ContentHandler#endPrefixMapping\n+     */\n+    public void endPrefixMapping (String prefix)\n+    {\n+    }\n+\n+\n+    /**\n+     * Adapt a SAX2 start element event.\n+     *\n+     * @param uri The Namespace URI.\n+     * @param localName The Namespace local name.\n+     * @param qName The qualified (prefixed) name.\n+     * @param atts The SAX2 attributes.\n+     * @exception org.xml.sax.SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.ContentHandler#endDocument\n+     */\n+    public void startElement (String uri, String localName,\n+\t\t\t      String qName, Attributes atts)\n+\tthrows SAXException\n+    {\n+\tif (documentHandler != null) {\n+\t    qAtts.setAttributes(atts);\n+\t    documentHandler.startElement(qName, qAtts);\n+\t}\n+    }\n+\n+\n+    /**\n+     * Adapt a SAX2 end element event.\n+     *\n+     * @param uri The Namespace URI.\n+     * @param localName The Namespace local name.\n+     * @param qName The qualified (prefixed) name.\n+     * @exception org.xml.sax.SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.ContentHandler#endElement\n+     */\n+    public void endElement (String uri, String localName,\n+\t\t\t    String qName)\n+\tthrows SAXException\n+    {\n+\tif (documentHandler != null)\n+\t    documentHandler.endElement(qName);\n+    }\n+\n+\n+    /**\n+     * Adapt a SAX2 characters event.\n+     *\n+     * @param ch An array of characters.\n+     * @param start The starting position in the array.\n+     * @param length The number of characters to use.\n+     * @exception org.xml.sax.SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.ContentHandler#characters\n+     */\n+    public void characters (char ch[], int start, int length)\n+\tthrows SAXException\n+    {\n+\tif (documentHandler != null)\n+\t    documentHandler.characters(ch, start, length);\n+    }\n+\n+\n+    /**\n+     * Adapt a SAX2 ignorable whitespace event.\n+     *\n+     * @param ch An array of characters.\n+     * @param start The starting position in the array.\n+     * @param length The number of characters to use.\n+     * @exception org.xml.sax.SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.ContentHandler#ignorableWhitespace\n+     */\n+    public void ignorableWhitespace (char ch[], int start, int length)\n+\tthrows SAXException\n+    {\n+\tif (documentHandler != null)\n+\t    documentHandler.ignorableWhitespace(ch, start, length);\n+    }\n+\n+\n+    /**\n+     * Adapt a SAX2 processing instruction event.\n+     *\n+     * @param target The processing instruction target.\n+     * @param data The remainder of the processing instruction\n+     * @exception org.xml.sax.SAXException The client may raise a\n+     *            processing exception.\n+     * @see org.xml.sax.ContentHandler#processingInstruction\n+     */\n+    public void processingInstruction (String target, String data)\n+\tthrows SAXException\n+    {\n+\tif (documentHandler != null)\n+\t    documentHandler.processingInstruction(target, data);\n+    }\n+\n+\n+    /**\n+     * Adapt a SAX2 skipped entity event.\n+     *\n+     * @param name The name of the skipped entity.\n+     * @see org.xml.sax.ContentHandler#skippedEntity\n+     * @exception org.xml.sax.SAXException Throwable by subclasses.\n+     */\n+    public void skippedEntity (String name)\n+\tthrows SAXException\n+    {\n+    }\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal state.\n+    ////////////////////////////////////////////////////////////////////\n+\n+    XMLReader xmlReader;\n+    DocumentHandler documentHandler;\n+    AttributesAdapter qAtts;\n+\n+\n+\f\n+    ////////////////////////////////////////////////////////////////////\n+    // Internal class.\n+    ////////////////////////////////////////////////////////////////////\n+\n+\n+    /**\n+     * Internal class to wrap a SAX2 Attributes object for SAX1.\n+     */\n+    final class AttributesAdapter implements AttributeList\n+    {\n+\tAttributesAdapter ()\n+\t{\n+\t}\n+\n+\n+\t/**\n+\t * Set the embedded Attributes object.\n+\t *\n+\t * @param The embedded SAX2 Attributes.\n+\t */ \n+\tvoid setAttributes (Attributes attributes)\n+\t{\n+\t    this.attributes = attributes;\n+\t}\n+\n+\n+\t/**\n+\t * Return the number of attributes.\n+\t *\n+\t * @return The length of the attribute list.\n+\t * @see org.xml.sax.AttributeList#getLength\n+\t */\n+\tpublic int getLength ()\n+\t{\n+\t    return attributes.getLength();\n+\t}\n+\n+\n+\t/**\n+\t * Return the qualified (prefixed) name of an attribute by position.\n+\t *\n+\t * @return The qualified name.\n+\t * @see org.xml.sax.AttributeList#getName\n+\t */\n+\tpublic String getName (int i)\n+\t{\n+\t    return attributes.getQName(i);\n+\t}\n+\n+\n+\t/**\n+\t * Return the type of an attribute by position.\n+\t *\n+\t * @return The type.\n+\t * @see org.xml.sax.AttributeList#getType(int)\n+\t */\n+\tpublic String getType (int i)\n+\t{\n+\t    return attributes.getType(i);\n+\t}\n+\n+\n+\t/**\n+\t * Return the value of an attribute by position.\n+\t *\n+\t * @return The value.\n+\t * @see org.xml.sax.AttributeList#getValue(int)\n+\t */\n+\tpublic String getValue (int i)\n+\t{\n+\t    return attributes.getValue(i);\n+\t}\n+\n+\n+\t/**\n+\t * Return the type of an attribute by qualified (prefixed) name.\n+\t *\n+\t * @return The type.\n+\t * @see org.xml.sax.AttributeList#getType(java.lang.String)\n+\t */\n+\tpublic String getType (String qName)\n+\t{\n+\t    return attributes.getType(qName);\n+\t}\n+\n+\n+\t/**\n+\t * Return the value of an attribute by qualified (prefixed) name.\n+\t *\n+\t * @return The value.\n+\t * @see org.xml.sax.AttributeList#getValue(java.lang.String)\n+\t */\n+\tpublic String getValue (String qName)\n+\t{\n+\t    return attributes.getValue(qName);\n+\t}\n+\n+\tprivate Attributes attributes;\n+    }\n+\n+}\n+\n+// end of XMLReaderAdapter.java"}, {"sha": "e1fa80c84cfb16e4adb57ec7813d4acd92f7baf5", "filename": "libjava/org/xml/sax/helpers/XMLReaderFactory.java", "status": "modified", "additions": 203, "deletions": 136, "changes": 339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FXMLReaderFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FXMLReaderFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2FXMLReaderFactory.java?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -1,136 +1,203 @@\n-// XMLReaderFactory.java - factory for creating a new reader.\r\n-// Written by David Megginson, sax@megginson.com\r\n-// NO WARRANTY!  This class is in the Public Domain.\r\n-\r\n-// $Id: XMLReaderFactory.java,v 1.1 2000/10/02 02:43:20 sboag Exp $\r\n-\r\n-package org.xml.sax.helpers;\r\n-import org.xml.sax.Parser;\r\n-import org.xml.sax.XMLReader;\r\n-import org.xml.sax.SAXException;\r\n-\r\n-\r\n-/**\r\n- * Factory for creating an XML reader.\r\n- *\r\n- * <blockquote>\r\n- * <em>This module, both source code and documentation, is in the\r\n- * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\r\n- * </blockquote>\r\n- *\r\n- * <p>This class contains static methods for creating an XML reader\r\n- * from an explicit class name, or for creating an XML reader based\r\n- * on the value of the <code>org.xml.sax.driver</code> system \r\n- * property:</p>\r\n- *\r\n- * <pre>\r\n- * try {\r\n- *   XMLReader myReader = XMLReaderFactory.createXMLReader();\r\n- * } catch (SAXException e) {\r\n- *   System.err.println(e.getMessage());\r\n- * }\r\n- * </pre>\r\n- *\r\n- * <p>Note that these methods will not be usable in environments where\r\n- * system properties are not accessible or where the application or\r\n- * applet is not permitted to load classes dynamically.</p>\r\n- *\r\n- * <p><strong>Note to implementors:</strong> SAX implementations in specialized\r\n- * environments may replace this class with a different one optimized for the\r\n- * environment, as long as its method signatures remain the same.</p>\r\n- *\r\n- * @since SAX 2.0\r\n- * @author David Megginson, \r\n- *         <a href=\"mailto:sax@megginson.com\">sax@megginson.com</a>\r\n- * @version 2.0\r\n- * @see org.xml.sax.XMLReader\r\n- */\r\n-final public class XMLReaderFactory\r\n-{\r\n-\r\n-    /**\r\n-     * Private constructor.\r\n-     *\r\n-     * <p>This constructor prevents the class from being instantiated.</p>\r\n-     */\r\n-    private XMLReaderFactory ()\r\n-    {\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Attempt to create an XML reader from a system property.\r\n-     *\r\n-     * <p>This method uses the value of the system property\r\n-     * \"org.xml.sax.driver\" as the full name of a Java class\r\n-     * and tries to instantiate that class as a SAX2 \r\n-     * XMLReader.</p>\r\n-     *\r\n-     * <p>Note that many Java interpreters allow system properties\r\n-     * to be specified on the command line.</p>\r\n-     *\r\n-     * @return A new XMLReader.\r\n-     * @exception org.xml.sax.SAXException If the value of the\r\n-     *            \"org.xml.sax.driver\" system property is null,\r\n-     *            or if the class cannot be loaded and instantiated.\r\n-     * @see #createXMLReader(java.lang.String)\r\n-     */\r\n-    public static XMLReader createXMLReader ()\r\n-\tthrows SAXException\r\n-    {\r\n-\tString className = System.getProperty(\"org.xml.sax.driver\");\r\n-\tif (className == null) {\r\n-\t    Parser parser;\r\n-\t    try {\r\n-\t\tparser = ParserFactory.makeParser();\r\n-\t    } catch (Exception e) {\r\n-\t\tparser = null;\r\n-\t    }\r\n-\t    if (parser == null) {\r\n-\t\tthrow new\r\n-\t\t    SAXException(\"System property org.xml.sax.driver not specified\");\r\n-\t    } else {\r\n-\t\treturn new ParserAdapter(parser);\r\n-\t    }\r\n-\t} else {\r\n-\t    return createXMLReader(className);\r\n-\t}\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Attempt to create an XML reader from a class name.\r\n-     *\r\n-     * <p>Given a class name, this method attempts to load\r\n-     * and instantiate the class as an XML reader.</p>\r\n-     *\r\n-     * @return A new XML reader.\r\n-     * @exception org.xml.sax.SAXException If the class cannot be\r\n-     *            loaded, instantiated, and cast to XMLReader.\r\n-     * @see #createXMLReader()\r\n-     */\r\n-    public static XMLReader createXMLReader (String className)\r\n-\tthrows SAXException\r\n-    {\r\n-\ttry {\r\n-\t    return (XMLReader)(Class.forName(className).newInstance());\r\n-\t} catch (ClassNotFoundException e1) {\r\n-\t    throw new SAXException(\"SAX2 driver class \" + className +\r\n-\t\t\t\t   \" not found\", e1);\r\n-\t} catch (IllegalAccessException e2) {\r\n-\t    throw new SAXException(\"SAX2 driver class \" + className +\r\n-\t\t\t\t   \" found but cannot be loaded\", e2);\r\n-\t} catch (InstantiationException e3) {\r\n-\t    throw new SAXException(\"SAX2 driver class \" + className +\r\n-\t\t\t\t   \" loaded but cannot be instantiated (no empty public constructor?)\",\r\n-\t\t\t\t   e3);\r\n-\t} catch (ClassCastException e4) {\r\n-\t    throw new SAXException(\"SAX2 driver class \" + className +\r\n-\t\t\t\t   \" does not implement XMLReader\", e4);\r\n-\t}\r\n-\t\t\t\t   \r\n-    }\r\n-\r\n-}\r\n-\r\n-// end of XMLReaderFactory.java\r\n+// XMLReaderFactory.java - factory for creating a new reader.\n+// http://www.saxproject.org\n+// Written by David Megginson\n+// and by David Brownell\n+// NO WARRANTY!  This class is in the Public Domain.\n+\n+// $Id: XMLReaderFactory.java,v 1.5.2.4 2002/01/29 21:34:15 dbrownell Exp $\n+\n+package org.xml.sax.helpers;\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.SAXException;\n+\n+\n+/**\n+ * Factory for creating an XML reader.\n+ *\n+ * <blockquote>\n+ * <em>This module, both source code and documentation, is in the\n+ * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n+ * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+ * for further information.\n+ * </blockquote>\n+ *\n+ * <p>This class contains static methods for creating an XML reader\n+ * from an explicit class name, or based on runtime defaults:</p>\n+ *\n+ * <pre>\n+ * try {\n+ *   XMLReader myReader = XMLReaderFactory.createXMLReader();\n+ * } catch (SAXException e) {\n+ *   System.err.println(e.getMessage());\n+ * }\n+ * </pre>\n+ *\n+ * <p><strong>Note to Distributions bundled with parsers:</strong>\n+ * You should modify the implementation of the no-arguments\n+ * <em>createXMLReader</em> to handle cases where the external\n+ * configuration mechanisms aren't set up.  That method should do its\n+ * best to return a parser when one is in the class path, even when\n+ * nothing bound its class name to <code>org.xml.sax.driver</code> so\n+ * those configuration mechanisms would see it.</p>\n+ *\n+ * @since SAX 2.0\n+ * @author David Megginson, David Brownell\n+ * @version 2.0.1 (sax2r2)\n+ */\n+final public class XMLReaderFactory\n+{\n+    /**\n+     * Private constructor.\n+     *\n+     * <p>This constructor prevents the class from being instantiated.</p>\n+     */\n+    private XMLReaderFactory ()\n+    {\n+    }\n+\n+    private static final String property = \"org.xml.sax.driver\";\n+\n+    /**\n+     * Attempt to create an XMLReader from system defaults.\n+     * In environments which can support it, the name of the XMLReader\n+     * class is determined by trying each these options in order, and\n+     * using the first one which succeeds:</p> <ul>\n+     *\n+     * <li>If the system property <code>org.xml.sax.driver</code>\n+     * has a value, that is used as an XMLReader class name. </li>\n+     *\n+     * <li>The JAR \"Services API\" is used to look for a class name\n+     * in the <em>META-INF/services/org.xml.sax.driver</em> file in\n+     * jarfiles available to the runtime.</li>\n+     *\n+     * <li> SAX parser distributions are strongly encouraged to provide\n+     * a default XMLReader class name that will take effect only when\n+     * previous options (on this list) are not successful.</li>\n+     *\n+     * <li>Finally, if {@link ParserFactory#makeParser()} can\n+     * return a system default SAX1 parser, that parser is wrapped in\n+     * a {@link ParserAdapter}.  (This is a migration aid for SAX1\n+     * environments, where the <code>org.xml.sax.parser</code> system\n+     * property will often be usable.) </li>\n+     *\n+     * </ul>\n+     *\n+     * <p> In environments such as small embedded systems, which can not\n+     * support that flexibility, other mechanisms to determine the default\n+     * may be used. </p>\n+     *\n+     * <p>Note that many Java environments allow system properties to be\n+     * initialized on a command line.  This means that <em>in most cases</em>\n+     * setting a good value for that property ensures that calls to this\n+     * method will succeed, except when security policies intervene.\n+     * This will also maximize application portability to older SAX\n+     * environments, with less robust implementations of this method.\n+     * </p>\n+     *\n+     * @return A new XMLReader.\n+     * @exception org.xml.sax.SAXException If no default XMLReader class\n+     *            can be identified and instantiated.\n+     * @see #createXMLReader(java.lang.String)\n+     */\n+    public static XMLReader createXMLReader ()\n+\tthrows SAXException\n+    {\n+\tString\t\tclassName = null;\n+\tClassLoader\tloader = NewInstance.getClassLoader ();\n+\t\n+\t// 1. try the JVM-instance-wide system property\n+\ttry { className = System.getProperty (property); }\n+\tcatch (Exception e) { /* normally fails for applets */ }\n+\n+\t// 2. if that fails, try META-INF/services/\n+\tif (className == null) {\n+\t    try {\n+\t\tString\t\tservice = \"META-INF/services/\" + property;\n+\t\tInputStream\tin;\n+\t\tBufferedReader\treader;\n+\n+\t\tif (loader == null)\n+\t\t    in = ClassLoader.getSystemResourceAsStream (service);\n+\t\telse\n+\t\t    in = loader.getResourceAsStream (service);\n+\n+\t\tif (in != null) {\n+\t\t    reader = new BufferedReader (\n+\t\t\t    new InputStreamReader (in, \"UTF8\"));\n+\t\t    className = reader.readLine ();\n+\t\t    in.close ();\n+\t\t}\n+\t    } catch (Exception e) {\n+\t    }\n+\t}\n+\n+\t// 3. Distro-specific fallback\n+\tif (className == null) {\n+// BEGIN DISTRIBUTION-SPECIFIC\n+\n+\t    // EXAMPLE:\n+\t    // className = \"com.example.sax.XmlReader\";\n+\t    // or a $JAVA_HOME/jre/lib/*properties setting...\n+\n+// END DISTRIBUTION-SPECIFIC\n+\t}\n+\t\n+\t// do we know the XMLReader implementation class yet?\n+\tif (className != null)\n+\t    return loadClass (loader, className);\n+\n+\t// 4. panic -- adapt any SAX1 parser\n+\ttry {\n+\t    return new ParserAdapter (ParserFactory.makeParser ());\n+\t} catch (Exception e) {\n+\t    throw new SAXException (\"Can't create default XMLReader; \"\n+\t\t    + \"is system property org.xml.sax.driver set?\");\n+\t}\n+    }\n+\n+\n+    /**\n+     * Attempt to create an XML reader from a class name.\n+     *\n+     * <p>Given a class name, this method attempts to load\n+     * and instantiate the class as an XML reader.</p>\n+     *\n+     * <p>Note that this method will not be usable in environments where\n+     * the caller (perhaps an applet) is not permitted to load classes\n+     * dynamically.</p>\n+     *\n+     * @return A new XML reader.\n+     * @exception org.xml.sax.SAXException If the class cannot be\n+     *            loaded, instantiated, and cast to XMLReader.\n+     * @see #createXMLReader()\n+     */\n+    public static XMLReader createXMLReader (String className)\n+\tthrows SAXException\n+    {\n+\treturn loadClass (NewInstance.getClassLoader (), className);\n+    }\n+\n+    private static XMLReader loadClass (ClassLoader loader, String className)\n+    throws SAXException\n+    {\n+\ttry {\n+\t    return (XMLReader) NewInstance.newInstance (loader, className);\n+\t} catch (ClassNotFoundException e1) {\n+\t    throw new SAXException(\"SAX2 driver class \" + className +\n+\t\t\t\t   \" not found\", e1);\n+\t} catch (IllegalAccessException e2) {\n+\t    throw new SAXException(\"SAX2 driver class \" + className +\n+\t\t\t\t   \" found but cannot be loaded\", e2);\n+\t} catch (InstantiationException e3) {\n+\t    throw new SAXException(\"SAX2 driver class \" + className +\n+\t   \" loaded but cannot be instantiated (no empty public constructor?)\",\n+\t\t\t\t   e3);\n+\t} catch (ClassCastException e4) {\n+\t    throw new SAXException(\"SAX2 driver class \" + className +\n+\t\t\t\t   \" does not implement XMLReader\", e4);\n+\t}\n+    }\n+}"}, {"sha": "458d1229c477f33665a369aecd1cc4fa73a52046", "filename": "libjava/org/xml/sax/helpers/package.html", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fhelpers%2Fpackage.html?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -0,0 +1,13 @@\n+<HTML><HEAD>\n+\n+<!-- $Id: package.html,v 1.3.2.1 2001/11/09 20:32:58 dbrownell Exp $ -->\n+\n+</HEAD><BODY>\n+\n+<p>This package contains \"helper\" classes, including\n+support for bootstrapping SAX-based applications.\n+\n+<p>See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+for more information about SAX.</p>\n+\n+</BODY></HTML>"}, {"sha": "25f4b86cdf368f7b5dd2185351ed9fe120c3d131", "filename": "libjava/org/xml/sax/package.html", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a163ec05c76c710d246c56ef8076a2cd38baf32/libjava%2Forg%2Fxml%2Fsax%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Forg%2Fxml%2Fsax%2Fpackage.html?ref=7a163ec05c76c710d246c56ef8076a2cd38baf32", "patch": "@@ -0,0 +1,164 @@\n+<html><head>\n+\n+<!-- $Id: package.html,v 1.2.2.2 2002/01/12 21:42:21 dbrownell Exp $ -->\n+\n+</head><body>\n+\n+<p> This package provides the core SAX APIs.\n+Some SAX1 APIs are deprecated to encourage integration of\n+namespace-awareness into designs of new applications\n+and into maintainance of existing infrastructure. </p>\n+\n+<p>See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n+for more information about SAX.</p>\n+\n+\n+<h2> SAX2 Standard Feature Flags </h2>\n+\n+<p> One of the essential characteristics of SAX2 is that it added\n+feature flags which can be used to examine and perhaps modify\n+parser modes, in particular modes such as validation.\n+Since features are identified by (absolute) URIs, anyone\n+can define such features.   \n+Currently defined standard feature URIs have the prefix\n+<code>http://xml.org/sax/features/</code> before an identifier such as\n+<code>validation</code>.  Turn features on or off using\n+<em>setFeature</em>.  Those standard identifiers are: </p>\n+\n+\n+<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\" width=\"100%\">\n+    <tr align=\"center\" bgcolor=\"#ccccff\">\n+\t<th>Feature ID</th>\n+\t<th>Default</th>\n+\t<th>Description</th>\n+\t</tr>\n+\n+    <tr>\n+\t<td>external-general-entities</td>\n+\t<td><em>unspecified</em></td>\n+\t<td> Reports whether this parser processes external\n+\t    general entities; always true if validating</td>\n+\t</tr>\n+\n+    <tr>\n+\t<td>external-parameter-entities</td>\n+\t<td><em>unspecified</em></td>\n+\t<td> Reports whether this parser processes external\n+\t    parameter entities; always true if validating</td>\n+\t</tr>\n+\n+    <tr>\n+\t<td>lexical-handler/parameter-entities</td>\n+\t<td><em>unspecified</em></td>\n+\t<td> true indicates that the LexicalHandler will report the\n+\t    beginning and end of parameter entities\n+\t    </td>\n+\t</tr>\n+\n+    <tr>\n+\t<td>namespaces</td>\n+\t<td>true</td>\n+\t<td> true indicates namespace URIs and unprefixed local names\n+\t    for element and attribute names will be available </td>\n+\t</tr>\n+\n+    <tr>\n+\t<td>namespace-prefixes</td>\n+\t<td>false</td>\n+\t<td> true indicates XML 1.0 names (with prefixes) and attributes\n+\t    (including <em>xmlns*</em> attributes) will be available </td>\n+\t</tr>\n+\n+    <tr>\n+\t<td>string-interning</td>\n+\t<td><em>unspecified</em></td>\n+\t<td> true if all XML names (for elements, prefixes, attributes,\n+\t    entities, notations, and local names),\n+\t    as well as Namespace URIs, will have been interned\n+\t    using <em>java.lang.String.intern</em>. This supports fast\n+\t    testing of equality/inequality against string constants.</td>\n+\t</tr>\n+\n+    <tr>\n+\t<td>validation</td>\n+\t<td><em>unspecified</em></td>\n+\t<td> controls whether the parser is reporting all validity\n+\t    errors; if true, all external entities will be read.  </td>\n+\t</tr>\n+\n+</table>\n+\n+<p> Support for the default values of the\n+<em>namespaces</em> and <em>namespace-prefixes</em>\n+properties is required.\n+</p>\n+\n+<p> For default values not specified by SAX2,\n+each XMLReader implementation specifies its default,\n+or may choose not to expose the feature flag.\n+Unless otherwise specified here,\n+implementations may support changing current values\n+of these standard feature flags, but not while parsing.\n+</p>\n+\n+<h2> SAX2 Standard Handler and Property IDs </h2>\n+\n+<p> For parser interface characteristics that are described\n+as objects, a separate namespace is defined.  The\n+objects in this namespace are again identified by URI, and\n+the standard property URIs have the prefix\n+<code>http://xml.org/sax/properties/</code> before an identifier such as\n+<code>lexical-handler</code> or\n+<code>dom-node</code>.  Manage those properties using\n+<em>setProperty()</em>.  Those identifiers are: </p>\n+\n+<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\" width=\"100%\">\n+    <tr align=\"center\" bgcolor=\"#ccccff\">\n+\t<th>Property ID</th>\n+\t<th>Description</th>\n+\t</tr>\n+\n+    <tr>\n+\t<td>declaration-handler</td>\n+\t<td> Used to see most DTD declarations except those treated\n+\t    as lexical (\"document element name is ...\") or which are\n+\t    mandatory for all SAX parsers (<em>DTDHandler</em>).\n+\t    The Object must implement <a href=\"ext/DeclHandler.html\"\n+\t    ><em>org.xml.sax.ext.DeclHandler</em></a>.\n+\t    </td>\n+\t</tr>\n+\n+    <tr>\n+\t<td>dom-node</td>\n+\t<td> For \"DOM Walker\" style parsers, which ignore their\n+\t    <em>parser.parse()</em> parameters, this is used to\n+\t    specify the DOM (sub)tree being walked by the parser.\n+\t    The Object must implement the\n+\t    <em>org.w3c.dom.Node</em> interface.\n+\t    </td>\n+\t</tr>\n+\n+    <tr>\n+\t<td>lexical-handler</td>\n+\t<td> Used to see some syntax events that are essential in some\n+\t    applications:  comments, CDATA delimeters, selected general\n+\t    entity inclusions, and the start and end of the DTD\n+\t    (and declaration of document element name).\n+\t    The Object must implement <a href=\"ext/LexicalHandler.html\"\n+\t    ><em>org.xml.sax.ext.LexicalHandler</em></a>.\n+\t    </td>\n+\t</tr>\n+\n+    <tr>\n+\t<td>xml-string</td>\n+\t<td> Readable only during a parser callback, this exposes a <b>TBS</b>\n+\t    chunk of characters responsible for the current event. </td>\n+\t</tr>\n+\n+</table>\n+\n+<p> All of these standard properties are optional;\n+XMLReader implementations need not support them.\n+</p>\n+\n+</body></html>"}]}