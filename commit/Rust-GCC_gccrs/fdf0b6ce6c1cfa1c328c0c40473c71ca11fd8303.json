{"sha": "fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303", "node_id": "C_kwDOANBUbNoAKGZkZjBiNmNlNmMxY2ZhMWMzMjhjMGM0MDQ3M2M3MWNhMTFmZDgzMDM", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-10-02T15:15:38Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-10-03T20:03:56Z"}, "message": "coroutines: Fail with a sorry when presented with a VLA [PR 101765].\n\nWe do not support this yet.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR c++/101765\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (register_local_var_uses): Emit a sorry if\n\twe encounter a VLA in the coroutine local variables.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/pr101765.C: New test.", "tree": {"sha": "5076292a7ea47921a9134dc1e7084969a9cf25aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5076292a7ea47921a9134dc1e7084969a9cf25aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "650beb110538097b9c3e8600149b333a83e7e836", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650beb110538097b9c3e8600149b333a83e7e836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650beb110538097b9c3e8600149b333a83e7e836"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "9017902e6fb6f5ea3a5b15ec77bd8d61ee4b5588", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303", "patch": "@@ -3927,6 +3927,16 @@ register_local_var_uses (tree *stmt, int *do_subtree, void *d)\n \t  if (local_var.is_static)\n \t    continue;\n \n+\t  poly_uint64 size;\n+\t  if (TREE_CODE (lvtype) == ARRAY_TYPE\n+\t      && !poly_int_tree_p (DECL_SIZE_UNIT (lvar), &size))\n+\t    {\n+\t      sorry_at (local_var.def_loc, \"variable length arrays are not\"\n+\t\t\t\" yet supported in coroutines\");\n+\t      /* Ignore it, this is broken anyway.  */\n+\t      continue;\n+\t    }\n+\n \t  lvd->local_var_seen = true;\n \t  /* If this var is a lambda capture proxy, we want to leave it alone,\n \t     and later rewrite the DECL_VALUE_EXPR to indirect through the"}, {"sha": "49a49d1129950857af47e0f14d7e30564f96ed5b", "filename": "gcc/testsuite/g++.dg/coroutines/pr101765.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr101765.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr101765.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr101765.C?ref=fdf0b6ce6c1cfa1c328c0c40473c71ca11fd8303", "patch": "@@ -0,0 +1,45 @@\n+// We cannot compile this yet, much run it - but one day it might be\n+// feasible, so do the minimum for now.\n+// { dg-additional-options \" -fsyntax-only -Wno-vla\" }\n+\n+#include \"coro.h\"\n+\n+// boiler-plate for tests of codegen\n+#include \"coro1-ret-int-yield-int.h\"\n+\n+struct coro1\n+foo (int arg) noexcept\n+{\n+  PRINTF (\"foo arg = %d\\n\", arg);\n+  char arr[arg]; /* { dg-message \"sorry, unimplemented: variable length arrays are not yet supported in coroutines\" \"\" { target *-*-* } } */\n+  if (arg < 4)\n+    co_return -6174;\n+  else\n+    for (int i = 0; i < arg; ++i) arr[i] = (char) i;\n+  co_yield (int) arr[2];\n+  co_return (int) arr[3];\n+}\n+\n+int main ()\n+{\n+  PRINT (\"main: create coro1\");\n+  struct coro1 x = foo (10);\n+  PRINT (\"main: got coro1 - resuming\");\n+  if (x.handle.done())\n+    abort();\n+  x.handle.resume();\n+  PRINT (\"main: after resume\");\n+  int y = x.handle.promise().get_value();\n+  if ( y == -6174 )\n+    {\n+      PRINT (\"main: saw -6174\");\n+      return 1;\n+    }\n+  else if ( y != 2 )\n+    abort;\n+  x.handle.resume();\n+  y = x.handle.promise().get_value();\n+  if ( y != 3 )\n+    abort ();\n+  return 0;\n+}"}]}