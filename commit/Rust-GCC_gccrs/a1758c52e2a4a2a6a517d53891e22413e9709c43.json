{"sha": "a1758c52e2a4a2a6a517d53891e22413e9709c43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE3NThjNTJlMmE0YTJhNmE1MTdkNTM4OTFlMjI0MTNlOTcwOWM0Mw==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2006-11-07T01:49:55Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2006-11-07T01:49:55Z"}, "message": "intrinsic.texi: Added documentation for FTELL, GETLOG, and HOSTNM intrinsics.\n\n* intrinsic.texi: Added documentation for FTELL, GETLOG, and HOSTNM intrinsics.\n\nFrom-SVN: r118538", "tree": {"sha": "2a1f22f202de76dc4442ee685853e1e79af39953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a1f22f202de76dc4442ee685853e1e79af39953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1758c52e2a4a2a6a517d53891e22413e9709c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1758c52e2a4a2a6a517d53891e22413e9709c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1758c52e2a4a2a6a517d53891e22413e9709c43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1758c52e2a4a2a6a517d53891e22413e9709c43/comments", "author": null, "committer": null, "parents": [{"sha": "d19a4469cbcb74450ab897a2459d58d40f5ca25a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19a4469cbcb74450ab897a2459d58d40f5ca25a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19a4469cbcb74450ab897a2459d58d40f5ca25a"}], "stats": {"total": 96, "additions": 80, "deletions": 16}, "files": [{"sha": "4e39d06f4e45276279e4349fe484b8de58ba1110", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1758c52e2a4a2a6a517d53891e22413e9709c43/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1758c52e2a4a2a6a517d53891e22413e9709c43/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a1758c52e2a4a2a6a517d53891e22413e9709c43", "patch": "@@ -1,3 +1,8 @@\n+2006-11-04  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* intrinsic.texi: Added documentation for FTELL, GETLOG, and\n+\tHOSTNM intrinsics.\n+\n 2006-11-06  Erik Edelmann  <eedelman@gcc.gnu.org>\n \n \tPR fortran/29630"}, {"sha": "f4df01f3557ce8548a8d7d9fad0dfc5ca3351c64", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 75, "deletions": 16, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1758c52e2a4a2a6a517d53891e22413e9709c43/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1758c52e2a4a2a6a517d53891e22413e9709c43/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=a1758c52e2a4a2a6a517d53891e22413e9709c43", "patch": "@@ -3878,20 +3878,45 @@ Subroutine\n @node FTELL\n @section @code{FTELL} --- Current stream position\n @findex @code{FTELL} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Retrieves the current position within an open file.\n+\n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n+Subroutine, function\n+\n @item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{CALL FTELL(UNIT, OFFSET)}\n+@item @code{OFFSET = FTELL(UNIT)}\n+@end multitable\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{OFFSET}  @tab Shall of type @code{INTEGER}.\n+@item @var{UNIT}    @tab Shall of type @code{INTEGER}.\n+@end multitable\n+\n @item @emph{Return value}:\n+In either syntax, @var{OFFSET} is set to the current offset of unit\n+number @var{UNIT}, or to @math{-1} if the unit is not currently open.\n+\n @item @emph{Example}:\n+@smallexample\n+PROGRAM test_ftell\n+  INTEGER :: i\n+  OPEN(10, FILE=\"temp.dat\")\n+  CALL ftell(10,i)\n+  WRITE(*,*) i\n+END PROGRAM\n+@end smallexample\n \n @item @emph{See also}:\n @ref{FSEEK}\n@@ -4216,37 +4241,53 @@ kind.\n See @code{GETPID} for an example.\n \n @item @emph{See also}:\n-@ref{GETPID}\n+@ref{GETPID}, @ref{GETUID}\n @end table\n \n \n \n @node GETLOG\n @section @code{GETLOG} --- Get login name\n @findex @code{GETLOG} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Gets the username under which the program is running.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL GETLOG(LOGIN)}\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{LOGIN} @tab Shall be of type @code{CHARACTER(*)}.\n+@end multitable\n+\n @item @emph{Return value}:\n+Stores the current user name in @var{LOGIN}.  (On systems where \n+the @code{getlogin(3)} function is not implemented, this will\n+return a blank string.)\n+\n @item @emph{Example}:\n-@item @emph{Specific names}:\n+@smallexample\n+PROGRAM TEST_GETLOG\n+  CHARACTER(32) :: login\n+  CALL GETLOG(login)\n+  WRITE(*,*) login\n+END PROGRAM\n+@end smallexample\n+\n @item @emph{See also}:\n+@ref{GETUID}\n @end table\n \n \n \n-\n @node GETPID\n @section @code{GETPID} --- Process ID function\n @findex @code{GETPID} intrinsic\n@@ -4279,6 +4320,8 @@ program info\n end program info\n @end smallexample\n \n+@item @emph{See also}:\n+@ref{GETGID}, @ref{GETUID}\n @end table\n \n \n@@ -4310,7 +4353,7 @@ kind.\n See @code{GETPID} for an example.\n \n @item @emph{See also}:\n-@ref{GETPID}\n+@ref{GETPID}, @ref{GETLOG}\n @end table\n \n \n@@ -4345,22 +4388,38 @@ Subroutine\n @node HOSTNM\n @section @code{HOSTNM} --- Get system host name\n @findex @code{HOSTNM} intrinsic\n-@cindex undocumented intrinsic \n-\n-Intrinsic implemented, documentation pending.\n \n @table @asis\n @item @emph{Description}:\n+Retrieves the host name of the system on which the program is running.\n+\n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n+Subroutine, function\n+\n @item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{CALL HOSTNM(NAME, STATUS)}\n+@item @code{STATUS = HOSTNM(NAME)}\n+@end multitable\n+\n @item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{NAME}    @tab Shall of type @code{CHARACTER(*)}.\n+@item @var{STATUS}  @tab (Optional) status flag of type @code{INTEGER}.\n+                         Returns 0 on success, or a system specific error\n+                         code otherwise.\n+@end multitable\n+\n @item @emph{Return value}:\n-@item @emph{Example}:\n-@item @emph{Specific names}:\n-@item @emph{See also}:\n+In either syntax, @var{NAME} is set to the current hostname if it can\n+be obtained, or to a blank string otherwise.\n+\n @end table\n \n "}]}