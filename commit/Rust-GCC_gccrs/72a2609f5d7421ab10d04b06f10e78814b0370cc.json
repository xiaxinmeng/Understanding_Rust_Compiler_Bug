{"sha": "72a2609f5d7421ab10d04b06f10e78814b0370cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhMjYwOWY1ZDc0MjFhYjEwZDA0YjA2ZjEwZTc4ODE0YjAzNzBjYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-11-24T12:57:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-11-24T12:57:37Z"}, "message": "re PR middle-end/37135 (code size increase for struct assignment)\n\n\tPR middle-end/37135\n\t* dse.c (find_shift_sequence): Optimize extraction from a constant.\n\nFrom-SVN: r142157", "tree": {"sha": "f665d5278a21eaab0e6a13d9c9e2d0869b83709d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f665d5278a21eaab0e6a13d9c9e2d0869b83709d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72a2609f5d7421ab10d04b06f10e78814b0370cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a2609f5d7421ab10d04b06f10e78814b0370cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72a2609f5d7421ab10d04b06f10e78814b0370cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72a2609f5d7421ab10d04b06f10e78814b0370cc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b19c351a4f1dc42504e2867883f71f7bd122cbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b19c351a4f1dc42504e2867883f71f7bd122cbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b19c351a4f1dc42504e2867883f71f7bd122cbb"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "ecb4f628a50b229689efa2bcab84894c6a1b2643", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a2609f5d7421ab10d04b06f10e78814b0370cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a2609f5d7421ab10d04b06f10e78814b0370cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72a2609f5d7421ab10d04b06f10e78814b0370cc", "patch": "@@ -1,3 +1,8 @@\n+2008-11-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/37135\n+\t* dse.c (find_shift_sequence): Optimize extraction from a constant.\n+\n 2008-11-23  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (function_arg): Revert 2008-10-26 change."}, {"sha": "d7fb2d8aa20cdbc0c96b02e11289761c34017b02", "filename": "gcc/dse.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72a2609f5d7421ab10d04b06f10e78814b0370cc/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72a2609f5d7421ab10d04b06f10e78814b0370cc/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=72a2609f5d7421ab10d04b06f10e78814b0370cc", "patch": "@@ -1447,6 +1447,29 @@ find_shift_sequence (int access_size,\n       rtx target, new_reg, shift_seq, insn, new_lhs;\n       int cost;\n \n+      /* If a constant was stored into memory, try to simplify it here,\n+\t otherwise the cost of the shift might preclude this optimization\n+\t e.g. at -Os, even when no actual shift will be needed.  */\n+      if (CONSTANT_P (store_info->rhs))\n+\t{\n+\t  unsigned int byte = subreg_lowpart_offset (new_mode, store_mode);\n+\t  rtx ret = simplify_subreg (new_mode, store_info->rhs, store_mode,\n+\t\t\t\t     byte);\n+\t  if (ret && CONSTANT_P (ret))\n+\t    {\n+\t      ret = simplify_const_binary_operation (LSHIFTRT, new_mode,\n+\t\t\t\t\t\t     ret, GEN_INT (shift));\n+\t      if (ret && CONSTANT_P (ret))\n+\t\t{\n+\t\t  byte = subreg_lowpart_offset (read_mode, new_mode);\n+\t\t  ret = simplify_subreg (read_mode, ret, new_mode, byte);\n+\t\t  if (ret && CONSTANT_P (ret)\n+\t\t      && rtx_cost (ret, SET, speed) <= COSTS_N_INSNS (1))\n+\t\t    return ret;\n+\t\t}\n+\t    }\n+\t}\n+\n       /* Try a wider mode if truncating the store mode to NEW_MODE\n \t requires a real instruction.  */\n       if (GET_MODE_BITSIZE (new_mode) < GET_MODE_BITSIZE (store_mode)"}]}