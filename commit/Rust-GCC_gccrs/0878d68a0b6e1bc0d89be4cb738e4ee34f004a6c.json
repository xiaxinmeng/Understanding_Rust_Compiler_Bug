{"sha": "0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg3OGQ2OGEwYjZlMWJjMGQ4OWJlNGNiNzM4ZTRlZTM0ZjAwNGE2Yw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2014-01-31T12:59:44Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2014-01-31T12:59:44Z"}, "message": "extend.texi (Vector Extensions): Document ?: in C++.\n\n2014-01-31  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* doc/extend.texi (Vector Extensions): Document ?: in C++.\n\nFrom-SVN: r207340", "tree": {"sha": "850ff8d54ef12cd970222d67cd8343205375f8b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/850ff8d54ef12cd970222d67cd8343205375f8b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c02e13986163b2cb9fb312ed2dd5d4cbcee65e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c02e13986163b2cb9fb312ed2dd5d4cbcee65e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c02e13986163b2cb9fb312ed2dd5d4cbcee65e7"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "db13a3e77caa52f0b2162d748d43b8348729543b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c", "patch": "@@ -1,3 +1,7 @@\n+2014-01-31  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* doc/extend.texi (Vector Extensions): Document ?: in C++.\n+\n 2014-01-31  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/59990"}, {"sha": "ee98b2c09be670932c44255468c0de53a442b89a", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0878d68a0b6e1bc0d89be4cb738e4ee34f004a6c", "patch": "@@ -7233,6 +7233,19 @@ c = a >  b;     /* The result would be @{0, 0,-1, 0@}  */\n c = a == b;     /* The result would be @{0,-1, 0,-1@}  */\n @end smallexample\n \n+In C++, the ternary operator @code{?:} is available. @code{a?b:c}, where\n+@code{b} and @code{c} are vectors of the same type and @code{a} is an\n+integer vector with the same number of elements of the same size as @code{b}\n+and @code{c}, computes all three arguments and creates a vector\n+@code{@{a[0]?b[0]:c[0], a[1]?b[1]:c[1], @dots{}@}}.  Note that unlike in\n+OpenCL, @code{a} is thus interpreted as @code{a != 0} and not @code{a < 0}.\n+As in the case of binary operations, this syntax is also accepted when\n+one of @code{b} or @code{c} is a scalar that is then transformed into a\n+vector. If both @code{b} and @code{c} are scalars and the type of\n+@code{true?b:c} has the same size as the element type of @code{a}, then\n+@code{b} and @code{c} are converted to a vector type whose elements have\n+this type and with the same number of elements as @code{a}.\n+\n Vector shuffling is available using functions\n @code{__builtin_shuffle (vec, mask)} and\n @code{__builtin_shuffle (vec0, vec1, mask)}."}]}