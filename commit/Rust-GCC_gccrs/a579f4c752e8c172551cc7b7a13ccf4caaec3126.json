{"sha": "a579f4c752e8c172551cc7b7a13ccf4caaec3126", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU3OWY0Yzc1MmU4YzE3MjU1MWNjN2I3YTEzY2NmNGNhYWVjMzEyNg==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-01-15T17:50:01Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-01-15T17:50:01Z"}, "message": "[AArch64] Remove TODO (redundant type conversions) in arm_neon.h\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c (aarch64_types_unopus_qualifiers):\n\tNew.\n\t(TYPES_UNOPUS): Likewise.\n\t* config/aarch64/aarch64-simd-builtins.def (lbtruncuv2sf): Correct\n\tbuiltin type, from UNOP to UNOPUS.\n\t(lbtruncuv4sf): Likewise.\n\t(lbtruncuv2df): Likewise.\n\t(lrounduv2sf): Likewise.\n\t(lrounduv4sf): Likewise.\n\t(lrounduv2df): Likewise.\n\t(lroundusf): Likewise.\n\t(lroundusf): Likewise.\n\t(lceiluv2sf): Likewise.\n\t(lceiluv4sf): Likewise.\n\t(lceiluv2df): Likewise.\n\t(lceilusf): Likewise.\n\t(lceiludf): Likewise.\n\t(lflooruv2sf): Likewise.\n\t(lflooruv4sf): Likewise.\n\t(lflooruv2df): Likewise.\n\t(lfloorusf): Likewise.\n\t(lfloorudf): Likewise.\n\t(lfrintnuv2sf): Likewise.\n\t(lfrintnuv4sf): Likewise.\n\t(lfrintnuv2df): Likewise.\n\t(lfrintnusf): Likewise.\n\t(lfrintnudf): Likewise.\n\t* config/aarch64/arm_neon.h (vcvt_u32_f32): Remove unncessary type\n\tconversion.\n\t(vcvtq_u32_f32): Likewise.\n\t(vcvtq_u64_f64): Likewise.\n\t(vcvta_u32_f32): Likewise.\n\t(vcvtaq_u32_f32): Likewise.\n\t(vcvtaq_u64_f64): Likewise.\n\t(vcvtm_u32_f32): Likewise.\n\t(vcvtmq_u32_f32): Likewise.\n\t(vcvtmq_u64_f64): Likewise.\n\t(vcvtn_u32_f32): Likwise.\n\t(vcvtnq_u32_f32): Likewise.\n\t(vcvtnq_u64_f64): Likewise.\n\t(vcvtp_u32_f32): Likewise.\n\t(vcvtpq_u32_f32): Likewise.\n\t(vcvtpq_u64_f64): Likewise.\n\t(vcvtmd_u64_f64): Likewise.\n\t(vcvtms_u32_f32): Likewise.\n\t(vcvtad_u64_f64): Likewise.\n\t(vcvtas_u32_f32): Likewise.\n\t(vcvtnd_u64_f64): Likewise.\n\t(vcvtns_u32_f32): Likewise.\n\t(vcvtpd_u64_f64): Likewise.\n\t(vcvtps_u32_f32): Likewise.\n\nFrom-SVN: r232444", "tree": {"sha": "96796bf33f97999d5a232c1c776e2025850b8889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96796bf33f97999d5a232c1c776e2025850b8889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a579f4c752e8c172551cc7b7a13ccf4caaec3126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a579f4c752e8c172551cc7b7a13ccf4caaec3126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a579f4c752e8c172551cc7b7a13ccf4caaec3126", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a579f4c752e8c172551cc7b7a13ccf4caaec3126/comments", "author": null, "committer": null, "parents": [{"sha": "bad00732aa98fdd074843c0868d2ca54f192691a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bad00732aa98fdd074843c0868d2ca54f192691a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bad00732aa98fdd074843c0868d2ca54f192691a"}], "stats": {"total": 180, "additions": 104, "deletions": 76}, "files": [{"sha": "ba191dceafd2b43da9236c321ffaa6cbcf21dbc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a579f4c752e8c172551cc7b7a13ccf4caaec3126/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a579f4c752e8c172551cc7b7a13ccf4caaec3126/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a579f4c752e8c172551cc7b7a13ccf4caaec3126", "patch": "@@ -1,3 +1,57 @@\n+2016-01-15  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_types_unopus_qualifiers):\n+\tNew.\n+\t(TYPES_UNOPUS): Likewise.\n+\t* config/aarch64/aarch64-simd-builtins.def (lbtruncuv2sf): Correct\n+\tbuiltin type, from UNOP to UNOPUS.\n+\t(lbtruncuv4sf): Likewise.\n+\t(lbtruncuv2df): Likewise.\n+\t(lrounduv2sf): Likewise.\n+\t(lrounduv4sf): Likewise.\n+\t(lrounduv2df): Likewise.\n+\t(lroundusf): Likewise.\n+\t(lroundusf): Likewise.\n+\t(lceiluv2sf): Likewise.\n+\t(lceiluv4sf): Likewise.\n+\t(lceiluv2df): Likewise.\n+\t(lceilusf): Likewise.\n+\t(lceiludf): Likewise.\n+\t(lflooruv2sf): Likewise.\n+\t(lflooruv4sf): Likewise.\n+\t(lflooruv2df): Likewise.\n+\t(lfloorusf): Likewise.\n+\t(lfloorudf): Likewise.\n+\t(lfrintnuv2sf): Likewise.\n+\t(lfrintnuv4sf): Likewise.\n+\t(lfrintnuv2df): Likewise.\n+\t(lfrintnusf): Likewise.\n+\t(lfrintnudf): Likewise.\n+\t* config/aarch64/arm_neon.h (vcvt_u32_f32): Remove unncessary type\n+\tconversion.\n+\t(vcvtq_u32_f32): Likewise.\n+\t(vcvtq_u64_f64): Likewise.\n+\t(vcvta_u32_f32): Likewise.\n+\t(vcvtaq_u32_f32): Likewise.\n+\t(vcvtaq_u64_f64): Likewise.\n+\t(vcvtm_u32_f32): Likewise.\n+\t(vcvtmq_u32_f32): Likewise.\n+\t(vcvtmq_u64_f64): Likewise.\n+\t(vcvtn_u32_f32): Likwise.\n+\t(vcvtnq_u32_f32): Likewise.\n+\t(vcvtnq_u64_f64): Likewise.\n+\t(vcvtp_u32_f32): Likewise.\n+\t(vcvtpq_u32_f32): Likewise.\n+\t(vcvtpq_u64_f64): Likewise.\n+\t(vcvtmd_u64_f64): Likewise.\n+\t(vcvtms_u32_f32): Likewise.\n+\t(vcvtad_u64_f64): Likewise.\n+\t(vcvtas_u32_f32): Likewise.\n+\t(vcvtnd_u64_f64): Likewise.\n+\t(vcvtns_u32_f32): Likewise.\n+\t(vcvtpd_u64_f64): Likewise.\n+\t(vcvtps_u32_f32): Likewise.\n+\t\n 2016-01-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_if_then_else_costs): Handle"}, {"sha": "925034b626ce83671bd6d711b538e3e30d182e17", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a579f4c752e8c172551cc7b7a13ccf4caaec3126/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a579f4c752e8c172551cc7b7a13ccf4caaec3126/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=a579f4c752e8c172551cc7b7a13ccf4caaec3126", "patch": "@@ -119,6 +119,10 @@ aarch64_types_unopu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned };\n #define TYPES_UNOPU (aarch64_types_unopu_qualifiers)\n static enum aarch64_type_qualifiers\n+aarch64_types_unopus_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_none };\n+#define TYPES_UNOPUS (aarch64_types_unopus_qualifiers)\n+static enum aarch64_type_qualifiers\n aarch64_types_binop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_maybe_immediate };\n #define TYPES_BINOP (aarch64_types_binop_qualifiers)"}, {"sha": "dd045792b21f84b9587be08a07db0e0081e0c484", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a579f4c752e8c172551cc7b7a13ccf4caaec3126/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a579f4c752e8c172551cc7b7a13ccf4caaec3126/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=a579f4c752e8c172551cc7b7a13ccf4caaec3126", "patch": "@@ -275,9 +275,9 @@\n   VAR1 (UNOP, lbtruncv4sf, 2, v4si)\n   VAR1 (UNOP, lbtruncv2df, 2, v2di)\n \n-  VAR1 (UNOP, lbtruncuv2sf, 2, v2si)\n-  VAR1 (UNOP, lbtruncuv4sf, 2, v4si)\n-  VAR1 (UNOP, lbtruncuv2df, 2, v2di)\n+  VAR1 (UNOPUS, lbtruncuv2sf, 2, v2si)\n+  VAR1 (UNOPUS, lbtruncuv4sf, 2, v4si)\n+  VAR1 (UNOPUS, lbtruncuv2df, 2, v2di)\n \n   VAR1 (UNOP, lroundv2sf, 2, v2si)\n   VAR1 (UNOP, lroundv4sf, 2, v4si)\n@@ -286,43 +286,43 @@\n   VAR1 (UNOP, lroundsf, 2, si)\n   VAR1 (UNOP, lrounddf, 2, di)\n \n-  VAR1 (UNOP, lrounduv2sf, 2, v2si)\n-  VAR1 (UNOP, lrounduv4sf, 2, v4si)\n-  VAR1 (UNOP, lrounduv2df, 2, v2di)\n-  VAR1 (UNOP, lroundusf, 2, si)\n-  VAR1 (UNOP, lroundudf, 2, di)\n+  VAR1 (UNOPUS, lrounduv2sf, 2, v2si)\n+  VAR1 (UNOPUS, lrounduv4sf, 2, v4si)\n+  VAR1 (UNOPUS, lrounduv2df, 2, v2di)\n+  VAR1 (UNOPUS, lroundusf, 2, si)\n+  VAR1 (UNOPUS, lroundudf, 2, di)\n \n   VAR1 (UNOP, lceilv2sf, 2, v2si)\n   VAR1 (UNOP, lceilv4sf, 2, v4si)\n   VAR1 (UNOP, lceilv2df, 2, v2di)\n \n-  VAR1 (UNOP, lceiluv2sf, 2, v2si)\n-  VAR1 (UNOP, lceiluv4sf, 2, v4si)\n-  VAR1 (UNOP, lceiluv2df, 2, v2di)\n-  VAR1 (UNOP, lceilusf, 2, si)\n-  VAR1 (UNOP, lceiludf, 2, di)\n+  VAR1 (UNOPUS, lceiluv2sf, 2, v2si)\n+  VAR1 (UNOPUS, lceiluv4sf, 2, v4si)\n+  VAR1 (UNOPUS, lceiluv2df, 2, v2di)\n+  VAR1 (UNOPUS, lceilusf, 2, si)\n+  VAR1 (UNOPUS, lceiludf, 2, di)\n \n   VAR1 (UNOP, lfloorv2sf, 2, v2si)\n   VAR1 (UNOP, lfloorv4sf, 2, v4si)\n   VAR1 (UNOP, lfloorv2df, 2, v2di)\n \n-  VAR1 (UNOP, lflooruv2sf, 2, v2si)\n-  VAR1 (UNOP, lflooruv4sf, 2, v4si)\n-  VAR1 (UNOP, lflooruv2df, 2, v2di)\n-  VAR1 (UNOP, lfloorusf, 2, si)\n-  VAR1 (UNOP, lfloorudf, 2, di)\n+  VAR1 (UNOPUS, lflooruv2sf, 2, v2si)\n+  VAR1 (UNOPUS, lflooruv4sf, 2, v4si)\n+  VAR1 (UNOPUS, lflooruv2df, 2, v2di)\n+  VAR1 (UNOPUS, lfloorusf, 2, si)\n+  VAR1 (UNOPUS, lfloorudf, 2, di)\n \n   VAR1 (UNOP, lfrintnv2sf, 2, v2si)\n   VAR1 (UNOP, lfrintnv4sf, 2, v4si)\n   VAR1 (UNOP, lfrintnv2df, 2, v2di)\n   VAR1 (UNOP, lfrintnsf, 2, si)\n   VAR1 (UNOP, lfrintndf, 2, di)\n \n-  VAR1 (UNOP, lfrintnuv2sf, 2, v2si)\n-  VAR1 (UNOP, lfrintnuv4sf, 2, v4si)\n-  VAR1 (UNOP, lfrintnuv2df, 2, v2di)\n-  VAR1 (UNOP, lfrintnusf, 2, si)\n-  VAR1 (UNOP, lfrintnudf, 2, di)\n+  VAR1 (UNOPUS, lfrintnuv2sf, 2, v2si)\n+  VAR1 (UNOPUS, lfrintnuv4sf, 2, v4si)\n+  VAR1 (UNOPUS, lfrintnuv2df, 2, v2di)\n+  VAR1 (UNOPUS, lfrintnusf, 2, si)\n+  VAR1 (UNOPUS, lfrintnudf, 2, di)\n \n   /* Implemented by <optab><fcvt_target><VDQF:mode>2.  */\n   VAR1 (UNOP, floatv2si, 2, v2sf)"}, {"sha": "1334d64c7b41957c469ec809a523ed84a106d67a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 23, "deletions": 53, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a579f4c752e8c172551cc7b7a13ccf4caaec3126/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a579f4c752e8c172551cc7b7a13ccf4caaec3126/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=a579f4c752e8c172551cc7b7a13ccf4caaec3126", "patch": "@@ -13203,9 +13203,7 @@ vcvt_s32_f32 (float32x2_t __a)\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vcvt_u32_f32 (float32x2_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint32x2_t) __builtin_aarch64_lbtruncuv2sfv2si (__a);\n+  return __builtin_aarch64_lbtruncuv2sfv2si_us (__a);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n@@ -13217,9 +13215,7 @@ vcvtq_s32_f32 (float32x4_t __a)\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcvtq_u32_f32 (float32x4_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint32x4_t) __builtin_aarch64_lbtruncuv4sfv4si (__a);\n+  return __builtin_aarch64_lbtruncuv4sfv4si_us (__a);\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n@@ -13231,9 +13227,7 @@ vcvtq_s64_f64 (float64x2_t __a)\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vcvtq_u64_f64 (float64x2_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint64x2_t) __builtin_aarch64_lbtruncuv2dfv2di (__a);\n+  return __builtin_aarch64_lbtruncuv2dfv2di_us (__a);\n }\n \n /* vcvta  */\n@@ -13247,7 +13241,7 @@ vcvtad_s64_f64 (float64_t __a)\n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n vcvtad_u64_f64 (float64_t __a)\n {\n-  return __builtin_aarch64_lroundudfdi (__a);\n+  return __builtin_aarch64_lroundudfdi_us (__a);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n@@ -13259,7 +13253,7 @@ vcvtas_s32_f32 (float32_t __a)\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vcvtas_u32_f32 (float32_t __a)\n {\n-  return __builtin_aarch64_lroundusfsi (__a);\n+  return __builtin_aarch64_lroundusfsi_us (__a);\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n@@ -13271,9 +13265,7 @@ vcvta_s32_f32 (float32x2_t __a)\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vcvta_u32_f32 (float32x2_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint32x2_t) __builtin_aarch64_lrounduv2sfv2si (__a);\n+  return __builtin_aarch64_lrounduv2sfv2si_us (__a);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n@@ -13285,9 +13277,7 @@ vcvtaq_s32_f32 (float32x4_t __a)\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcvtaq_u32_f32 (float32x4_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint32x4_t) __builtin_aarch64_lrounduv4sfv4si (__a);\n+  return __builtin_aarch64_lrounduv4sfv4si_us (__a);\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n@@ -13299,9 +13289,7 @@ vcvtaq_s64_f64 (float64x2_t __a)\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vcvtaq_u64_f64 (float64x2_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint64x2_t) __builtin_aarch64_lrounduv2dfv2di (__a);\n+  return __builtin_aarch64_lrounduv2dfv2di_us (__a);\n }\n \n /* vcvtm  */\n@@ -13315,7 +13303,7 @@ vcvtmd_s64_f64 (float64_t __a)\n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n vcvtmd_u64_f64 (float64_t __a)\n {\n-  return __builtin_aarch64_lfloorudfdi (__a);\n+  return __builtin_aarch64_lfloorudfdi_us (__a);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n@@ -13327,7 +13315,7 @@ vcvtms_s32_f32 (float32_t __a)\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vcvtms_u32_f32 (float32_t __a)\n {\n-  return __builtin_aarch64_lfloorusfsi (__a);\n+  return __builtin_aarch64_lfloorusfsi_us (__a);\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n@@ -13339,9 +13327,7 @@ vcvtm_s32_f32 (float32x2_t __a)\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vcvtm_u32_f32 (float32x2_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint32x2_t) __builtin_aarch64_lflooruv2sfv2si (__a);\n+  return __builtin_aarch64_lflooruv2sfv2si_us (__a);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n@@ -13353,9 +13339,7 @@ vcvtmq_s32_f32 (float32x4_t __a)\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcvtmq_u32_f32 (float32x4_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint32x4_t) __builtin_aarch64_lflooruv4sfv4si (__a);\n+  return __builtin_aarch64_lflooruv4sfv4si_us (__a);\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n@@ -13367,9 +13351,7 @@ vcvtmq_s64_f64 (float64x2_t __a)\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vcvtmq_u64_f64 (float64x2_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint64x2_t) __builtin_aarch64_lflooruv2dfv2di (__a);\n+  return __builtin_aarch64_lflooruv2dfv2di_us (__a);\n }\n \n /* vcvtn  */\n@@ -13383,7 +13365,7 @@ vcvtnd_s64_f64 (float64_t __a)\n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n vcvtnd_u64_f64 (float64_t __a)\n {\n-  return __builtin_aarch64_lfrintnudfdi (__a);\n+  return __builtin_aarch64_lfrintnudfdi_us (__a);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n@@ -13395,7 +13377,7 @@ vcvtns_s32_f32 (float32_t __a)\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vcvtns_u32_f32 (float32_t __a)\n {\n-  return __builtin_aarch64_lfrintnusfsi (__a);\n+  return __builtin_aarch64_lfrintnusfsi_us (__a);\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n@@ -13407,9 +13389,7 @@ vcvtn_s32_f32 (float32x2_t __a)\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vcvtn_u32_f32 (float32x2_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint32x2_t) __builtin_aarch64_lfrintnuv2sfv2si (__a);\n+  return __builtin_aarch64_lfrintnuv2sfv2si_us (__a);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n@@ -13421,9 +13401,7 @@ vcvtnq_s32_f32 (float32x4_t __a)\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcvtnq_u32_f32 (float32x4_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint32x4_t) __builtin_aarch64_lfrintnuv4sfv4si (__a);\n+  return __builtin_aarch64_lfrintnuv4sfv4si_us (__a);\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n@@ -13435,9 +13413,7 @@ vcvtnq_s64_f64 (float64x2_t __a)\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vcvtnq_u64_f64 (float64x2_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint64x2_t) __builtin_aarch64_lfrintnuv2dfv2di (__a);\n+  return __builtin_aarch64_lfrintnuv2dfv2di_us (__a);\n }\n \n /* vcvtp  */\n@@ -13451,7 +13427,7 @@ vcvtpd_s64_f64 (float64_t __a)\n __extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n vcvtpd_u64_f64 (float64_t __a)\n {\n-  return __builtin_aarch64_lceiludfdi (__a);\n+  return __builtin_aarch64_lceiludfdi_us (__a);\n }\n \n __extension__ static __inline int32_t __attribute__ ((__always_inline__))\n@@ -13463,7 +13439,7 @@ vcvtps_s32_f32 (float32_t __a)\n __extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n vcvtps_u32_f32 (float32_t __a)\n {\n-  return __builtin_aarch64_lceilusfsi (__a);\n+  return __builtin_aarch64_lceilusfsi_us (__a);\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n@@ -13475,9 +13451,7 @@ vcvtp_s32_f32 (float32x2_t __a)\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vcvtp_u32_f32 (float32x2_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint32x2_t) __builtin_aarch64_lceiluv2sfv2si (__a);\n+  return __builtin_aarch64_lceiluv2sfv2si_us (__a);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n@@ -13489,9 +13463,7 @@ vcvtpq_s32_f32 (float32x4_t __a)\n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vcvtpq_u32_f32 (float32x4_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint32x4_t) __builtin_aarch64_lceiluv4sfv4si (__a);\n+  return __builtin_aarch64_lceiluv4sfv4si_us (__a);\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n@@ -13503,9 +13475,7 @@ vcvtpq_s64_f64 (float64x2_t __a)\n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vcvtpq_u64_f64 (float64x2_t __a)\n {\n-  /* TODO: This cast should go away when builtins have\n-     their correct types.  */\n-  return (uint64x2_t) __builtin_aarch64_lceiluv2dfv2di (__a);\n+  return __builtin_aarch64_lceiluv2dfv2di_us (__a);\n }\n \n /* vdup_n  */"}]}