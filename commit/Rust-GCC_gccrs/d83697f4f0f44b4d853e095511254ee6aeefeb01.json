{"sha": "d83697f4f0f44b4d853e095511254ee6aeefeb01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgzNjk3ZjRmMGY0NGI0ZDg1M2UwOTU1MTEyNTRlZTZhZWVmZWIwMQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-09-26T12:38:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-09-26T12:38:08Z"}, "message": "Makefile.def: Make all-gcc depend on all-libbacktrace.\n\n./:\t* Makefile.def: Make all-gcc depend on all-libbacktrace.\n\t* Makefile.in: Rebuild.\ngcc/:\n\t* diagnostic.c: Include \"demangle.h\" and \"backtrace.h\".\n\t(bt_stop): New static array.\n\t(bt_callback, bt_err_callback): New static functions.\n\t(diagnostic_action_after_output): Call backtrace_full for DK_ICE.\n\t* Makefile.in (BACKTRACE): New variable.\n\t(BACKTRACEINC, LIBBACKTRACE): New variables.\n\t(BACKTRACE_H): New variable.\n\t(LIBDEPS, LIBS): Add $(LIBBACKTRACE).\n\t(INCLUDES): Add $(BACKTRACEINC).\n\t(diagnostic.o): Depend upon $(DEMANGLE_H) and $(BACKTRACE_H).\n\nFrom-SVN: r191757", "tree": {"sha": "4cd99601f0770b6683b8099f845efc0cb209f0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cd99601f0770b6683b8099f845efc0cb209f0f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d83697f4f0f44b4d853e095511254ee6aeefeb01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83697f4f0f44b4d853e095511254ee6aeefeb01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d83697f4f0f44b4d853e095511254ee6aeefeb01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d83697f4f0f44b4d853e095511254ee6aeefeb01/comments", "author": null, "committer": null, "parents": [{"sha": "ba45a61315a195eccfe337f87e3f03cffff8430d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba45a61315a195eccfe337f87e3f03cffff8430d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba45a61315a195eccfe337f87e3f03cffff8430d"}], "stats": {"total": 165, "additions": 154, "deletions": 11}, "files": [{"sha": "6da506e39aca7dbccac9d6432c2ffd2803b986bd", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83697f4f0f44b4d853e095511254ee6aeefeb01/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83697f4f0f44b4d853e095511254ee6aeefeb01/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d83697f4f0f44b4d853e095511254ee6aeefeb01", "patch": "@@ -1,3 +1,8 @@\n+2012-09-26  Ian Lance Taylor  <iant@google.com>\n+\n+\t* Makefile.def: Make all-gcc depend on all-libbacktrace.\n+\t* Makefile.in: Rebuild.\n+\n 2012-09-21  Anthony Green  <green@moxielogic.com>\n \n \t* config/moxie/moxie.opt: Add -mno-crt0 option."}, {"sha": "b3430a4e82ec0ab72eae6ac53d85679c9697471b", "filename": "Makefile.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83697f4f0f44b4d853e095511254ee6aeefeb01/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83697f4f0f44b4d853e095511254ee6aeefeb01/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=d83697f4f0f44b4d853e095511254ee6aeefeb01", "patch": "@@ -305,6 +305,7 @@ dependencies = { module=all-gcc; on=all-build-flex; };\n dependencies = { module=all-gcc; on=all-build-libiberty; };\n dependencies = { module=all-gcc; on=all-build-fixincludes; };\n dependencies = { module=all-gcc; on=all-zlib; };\n+dependencies = { module=all-gcc; on=all-libbacktrace; hard=true; };\n dependencies = { module=all-gcc; on=all-libcpp; hard=true; };\n dependencies = { module=all-gcc; on=all-libdecnumber; hard=true; };\n dependencies = { module=all-gcc; on=all-libiberty; };"}, {"sha": "2cdd08cf491eb12ecea93faf9a1ab5979d58469a", "filename": "Makefile.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83697f4f0f44b4d853e095511254ee6aeefeb01/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83697f4f0f44b4d853e095511254ee6aeefeb01/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=d83697f4f0f44b4d853e095511254ee6aeefeb01", "patch": "@@ -44825,6 +44825,14 @@ all-stage3-gcc: maybe-all-stage3-zlib\n all-stage4-gcc: maybe-all-stage4-zlib\n all-stageprofile-gcc: maybe-all-stageprofile-zlib\n all-stagefeedback-gcc: maybe-all-stagefeedback-zlib\n+all-gcc: all-libbacktrace\n+\n+all-stage1-gcc: all-stage1-libbacktrace\n+all-stage2-gcc: all-stage2-libbacktrace\n+all-stage3-gcc: all-stage3-libbacktrace\n+all-stage4-gcc: all-stage4-libbacktrace\n+all-stageprofile-gcc: all-stageprofile-libbacktrace\n+all-stagefeedback-gcc: all-stagefeedback-libbacktrace\n all-gcc: all-libcpp\n \n all-stage1-gcc: all-stage1-libcpp"}, {"sha": "6b723e498d015df8dcb527a3bdda569d5fde633f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83697f4f0f44b4d853e095511254ee6aeefeb01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83697f4f0f44b4d853e095511254ee6aeefeb01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d83697f4f0f44b4d853e095511254ee6aeefeb01", "patch": "@@ -1,3 +1,16 @@\n+2012-09-26  Ian Lance Taylor  <iant@google.com>\n+\n+\t* diagnostic.c: Include \"demangle.h\" and \"backtrace.h\".\n+\t(bt_stop): New static array.\n+\t(bt_callback, bt_err_callback): New static functions.\n+\t(diagnostic_action_after_output): Call backtrace_full for DK_ICE.\n+\t* Makefile.in (BACKTRACE): New variable.\n+\t(BACKTRACEINC, LIBBACKTRACE): New variables.\n+\t(BACKTRACE_H): New variable.\n+\t(LIBDEPS, LIBS): Add $(LIBBACKTRACE).\n+\t(INCLUDES): Add $(BACKTRACEINC).\n+\t(diagnostic.o): Depend upon $(DEMANGLE_H) and $(BACKTRACE_H).\n+\n 2012-09-25  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/51274"}, {"sha": "b036e884e57a107373428a825487f9c4e7de9e0d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83697f4f0f44b4d853e095511254ee6aeefeb01/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83697f4f0f44b4d853e095511254ee6aeefeb01/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d83697f4f0f44b4d853e095511254ee6aeefeb01", "patch": "@@ -346,6 +346,11 @@ DECNUMFMT = $(srcdir)/../libdecnumber/$(enable_decimal_float)\n DECNUMINC = -I$(DECNUM) -I$(DECNUMFMT) -I../libdecnumber\n LIBDECNUMBER = ../libdecnumber/libdecnumber.a\n \n+# The backtrace library.\n+BACKTRACE = $(srcdir)/../libbacktrace\n+BACKTRACEINC = -I$(BACKTRACE)\n+LIBBACKTRACE = ../libbacktrace/.libs/libbacktrace.a\n+\n # Target to use when installing include directory.  Either\n # install-headers-tar, install-headers-cpio or install-headers-cp.\n INSTALL_HEADERS_DIR = @build_install_headers_dir@\n@@ -906,6 +911,7 @@ OPTS_H = $(INPUT_H) $(VEC_H) opts.h\n DECNUM_H = $(DECNUM)/decContext.h $(DECNUM)/decDPD.h $(DECNUM)/decNumber.h \\\n \t$(DECNUMFMT)/decimal32.h $(DECNUMFMT)/decimal64.h \\\n \t$(DECNUMFMT)/decimal128.h $(DECNUMFMT)/decimal128Local.h\n+BACKTRACE_H = $(BACKTRACE)/backtrace.h\n MKDEPS_H = $(srcdir)/../libcpp/include/mkdeps.h\n SYMTAB_H = $(srcdir)/../libcpp/include/symtab.h $(OBSTACK_H)\n CPP_ID_DATA_H = $(CPPLIB_H) $(srcdir)/../libcpp/include/cpp-id-data.h\n@@ -988,16 +994,16 @@ BUILD_LIBIBERTY = $(build_libobjdir)/libiberty/libiberty.a\n \n # Dependencies on the intl and portability libraries.\n LIBDEPS= libcommon.a $(CPPLIB) $(LIBIBERTY) $(LIBINTL_DEP) $(LIBICONV_DEP) \\\n-\t$(LIBDECNUMBER)\n+\t$(LIBDECNUMBER) $(LIBBACKTRACE)\n \n # Likewise, for use in the tools that must run on this machine\n # even if we are cross-building GCC.\n BUILD_LIBDEPS= $(BUILD_LIBIBERTY)\n \n # How to link with both our special library facilities\n # and the system's installed libraries.\n-LIBS = @LIBS@ libcommon.a $(CPPLIB) $(LIBINTL) $(LIBICONV) $(LIBIBERTY) \\\n-\t$(LIBDECNUMBER) $(HOST_LIBS)\n+LIBS = @LIBS@ libcommon.a $(CPPLIB) $(LIBINTL) $(LIBICONV) $(LIBBACKTRACE) \\\n+\t$(LIBIBERTY) $(LIBDECNUMBER) $(HOST_LIBS)\n BACKENDLIBS = $(CLOOGLIBS) $(GMPLIBS) $(PLUGINLIBS) $(HOST_LIBS) \\\n \t$(ZLIB)\n # Any system libraries needed just for GNAT.\n@@ -1029,7 +1035,7 @@ BUILD_ERRORS = build/errors.o\n # libintl.h will be found in ../intl if we are using the included libintl.\n INCLUDES = -I. -I$(@D) -I$(srcdir) -I$(srcdir)/$(@D) \\\n \t   -I$(srcdir)/../include @INCINTL@ \\\n-\t   $(CPPINC) $(GMPINC) $(DECNUMINC) \\\n+\t   $(CPPINC) $(GMPINC) $(DECNUMINC) $(BACKTRACEINC) \\\n \t   $(CLOOGINC) $(ISLINC)\n \n .c.o:\n@@ -2614,7 +2620,8 @@ fold-const.o : fold-const.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(GGC_H) $(TM_P_H) langhooks.h $(MD5_H) intl.h $(TARGET_H) \\\n    $(GIMPLE_H) realmpfr.h $(TREE_FLOW_H)\n diagnostic.o : diagnostic.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   version.h $(INPUT_H) intl.h $(DIAGNOSTIC_H) diagnostic.def\n+   version.h $(DEMANGLE_H) $(INPUT_H) intl.h $(BACKTRACE_H) $(DIAGNOSTIC_H) \\\n+   diagnostic.def\n opts.o : opts.c $(OPTS_H) $(OPTIONS_H) $(DIAGNOSTIC_CORE_H) $(CONFIG_H) $(SYSTEM_H) \\\n    coretypes.h $(TM_H) \\\n    $(DIAGNOSTIC_H) insn-attr-common.h intl.h $(COMMON_TARGET_H) \\"}, {"sha": "afe958d7623e275b4b78f275a1e2aea2a1e7c0fb", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 115, "deletions": 6, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d83697f4f0f44b4d853e095511254ee6aeefeb01/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d83697f4f0f44b4d853e095511254ee6aeefeb01/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=d83697f4f0f44b4d853e095511254ee6aeefeb01", "patch": "@@ -27,8 +27,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"version.h\"\n+#include \"demangle.h\"\n #include \"input.h\"\n #include \"intl.h\"\n+#include \"backtrace.h\"\n #include \"diagnostic.h\"\n \n #define pedantic_warning_kind(DC)\t\t\t\\\n@@ -296,6 +298,99 @@ diagnostic_show_locus (diagnostic_context * context,\n   pp_set_prefix (context->printer, saved_prefix);\n }\n \n+/* Functions at which to stop the backtrace print.  It's not\n+   particularly helpful to print the callers of these functions.  */\n+\n+static const char * const bt_stop[] =\n+{\n+  \"main\",\n+  \"toplev_main\",\n+  \"execute_one_pass\",\n+  \"compile_file\",\n+};\n+\n+/* A callback function passed to the backtrace_full function.  */\n+\n+static int\n+bt_callback (void *data, uintptr_t pc, const char *filename, int lineno,\n+\t     const char *function)\n+{\n+  int *pcount = (int *) data;\n+\n+  /* If we don't have any useful information, don't print\n+     anything.  */\n+  if (filename == NULL && function == NULL)\n+    return 0;\n+\n+  /* Skip functions in diagnostic.c.  */\n+  if (*pcount == 0\n+      && filename != NULL\n+      && strcmp (lbasename(filename), \"diagnostic.c\") == 0)\n+    return 0;\n+\n+  /* Print up to 20 functions.  We could make this a --param, but\n+     since this is only for debugging just use a constant for now.  */\n+  if (*pcount >= 20)\n+    {\n+      /* Returning a non-zero value stops the backtrace.  */\n+      return 1;\n+    }\n+  ++*pcount;\n+\n+  char *alc = NULL;\n+  if (function != NULL)\n+    {\n+      char *str = cplus_demangle_v3 (function,\n+\t\t\t\t     (DMGL_VERBOSE | DMGL_ANSI\n+\t\t\t\t      | DMGL_GNU_V3 | DMGL_PARAMS));\n+      if (str != NULL)\n+\t{\n+\t  alc = str;\n+\t  function = str;\n+\t}\n+\n+      for (size_t i = 0; i < ARRAY_SIZE (bt_stop); ++i)\n+\t{\n+\t  size_t len = strlen (bt_stop[i]);\n+\t  if (strncmp (function, bt_stop[i], len) == 0\n+\t      && (function[len] == '\\0' || function[len] == '('))\n+\t    {\n+\t      if (alc != NULL)\n+\t\tfree (alc);\n+\t      /* Returning a non-zero value stops the backtrace.  */\n+\t      return 1;\n+\t    }\n+\t}\n+    }\n+\n+  fprintf (stderr, \"0x%lx %s\\n\\t%s:%d\\n\",\n+\t   pc,\n+\t   function == NULL ? \"???\" : function,\n+\t   filename == NULL ? \"???\" : filename,\n+\t   lineno);\n+\n+  if (alc != NULL)\n+    free (alc);\n+\n+  return 0;\n+}\n+\n+/* A callback function passed to the backtrace_full function.  This is\n+   called if backtrace_full has an error.  */\n+\n+static void\n+bt_err_callback (void *data ATTRIBUTE_UNUSED, const char *msg, int errnum)\n+{\n+  if (errnum < 0)\n+    {\n+      /* This means that no debug info was available.  Just quietly\n+\t skip printing backtrace info.  */\n+      return;\n+    }\n+  fprintf (stderr, \"%s%s%s\\n\", msg, errnum == 0 ? \"\" : \": \",\n+\t   errnum == 0 ? \"\" : xstrerror (errnum));\n+}\n+\n /* Take any action which is expected to happen after the diagnostic\n    is written out.  This function does not always return.  */\n static void\n@@ -334,13 +429,27 @@ diagnostic_action_after_output (diagnostic_context *context,\n       break;\n \n     case DK_ICE:\n-      if (context->abort_on_error)\n-\treal_abort ();\n+      {\n+\tstruct backtrace_state *state =\n+\t  backtrace_create_state (NULL, 0, bt_err_callback, NULL);\n+\tint count = 0;\n+\tif (state != NULL)\n+\t  backtrace_full (state, 2, bt_callback, bt_err_callback,\n+\t\t\t  (void *) &count);\n+\n+\tif (context->abort_on_error)\n+\t  real_abort ();\n+\n+\tfnotice (stderr, \"Please submit a full bug report,\\n\"\n+\t\t \"with preprocessed source if appropriate.\\n\");\n+\tif (count > 0)\n+\t  fnotice (stderr,\n+\t\t   (\"Please include the complete backtrace \"\n+\t\t    \"with any bug report.\\n\"));\n+\tfnotice (stderr, \"See %s for instructions.\\n\", bug_report_url);\n \n-      fnotice (stderr, \"Please submit a full bug report,\\n\"\n-\t       \"with preprocessed source if appropriate.\\n\"\n-\t       \"See %s for instructions.\\n\", bug_report_url);\n-      exit (ICE_EXIT_CODE);\n+\texit (ICE_EXIT_CODE);\n+      }\n \n     case DK_FATAL:\n       if (context->abort_on_error)"}]}