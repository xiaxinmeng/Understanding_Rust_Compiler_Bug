{"sha": "9401eb0730362688b0a1c603d1685fd3f783d170", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQwMWViMDczMDM2MjY4OGIwYTFjNjAzZDE2ODVmZDNmNzgzZDE3MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-20T18:30:48Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-20T18:30:48Z"}, "message": "[C++ PATCH] AS_BASETYPE\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg01376.html\n\t* class.c (layout_class_type): Cleanup as-base creation, determine\n\tmode here.\n\t(finish_struct_1): ... not here.\n\nFrom-SVN: r253954", "tree": {"sha": "1379d40cf81c1b75e26eea670536a16dafeb7fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1379d40cf81c1b75e26eea670536a16dafeb7fe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9401eb0730362688b0a1c603d1685fd3f783d170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9401eb0730362688b0a1c603d1685fd3f783d170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9401eb0730362688b0a1c603d1685fd3f783d170", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9401eb0730362688b0a1c603d1685fd3f783d170/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "253e8d21509d7685ce9d515061305cdf604cc005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253e8d21509d7685ce9d515061305cdf604cc005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/253e8d21509d7685ce9d515061305cdf604cc005"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "ed89364a16ebfb50b8aa89e679f40385527506f5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9401eb0730362688b0a1c603d1685fd3f783d170/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9401eb0730362688b0a1c603d1685fd3f783d170/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9401eb0730362688b0a1c603d1685fd3f783d170", "patch": "@@ -1,3 +1,9 @@\n+2017-10-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* class.c (layout_class_type): Cleanup as-base creation, determine\n+\tmode here.\n+\t(finish_struct_1): ... not here.\n+\n 2017-10-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/82600"}, {"sha": "9ef50657caebdcb246421564457aa41a7a75ff8e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9401eb0730362688b0a1c603d1685fd3f783d170/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9401eb0730362688b0a1c603d1685fd3f783d170/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9401eb0730362688b0a1c603d1685fd3f783d170", "patch": "@@ -5992,8 +5992,6 @@ layout_class_type (tree t, tree *virtuals_p)\n   bool last_field_was_bitfield = false;\n   /* The location at which the next field should be inserted.  */\n   tree *next_field;\n-  /* T, as a base class.  */\n-  tree base_t;\n \n   /* Keep track of the first non-static data member.  */\n   non_static_data_members = TYPE_FIELDS (t);\n@@ -6218,15 +6216,11 @@ layout_class_type (tree t, tree *virtuals_p)\n      that the type is laid out they are no longer important.  */\n   remove_zero_width_bit_fields (t);\n \n-  /* Create the version of T used for virtual bases.  We do not use\n-     make_class_type for this version; this is an artificial type.  For\n-     a POD type, we just reuse T.  */\n   if (CLASSTYPE_NON_LAYOUT_POD_P (t) || CLASSTYPE_EMPTY_P (t))\n     {\n-      base_t = make_node (TREE_CODE (t));\n-\n-      /* Set the size and alignment for the new type.  */\n-      tree eoc;\n+      /* T needs a different layout as a base (eliding virtual bases\n+\t or whatever).  Create that version.  */\n+      tree base_t = make_node (TREE_CODE (t));\n \n       /* If the ABI version is not at least two, and the last\n \t field was a bit-field, RLI may not be on a byte\n@@ -6235,7 +6229,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t indicates the total number of bits used.  Therefore,\n \t rli_size_so_far, rather than rli_size_unit_so_far, is\n \t used to compute TYPE_SIZE_UNIT.  */\n-      eoc = end_of_class (t, /*include_virtuals_p=*/0);\n+      tree eoc = end_of_class (t, /*include_virtuals_p=*/0);\n       TYPE_SIZE_UNIT (base_t)\n \t= size_binop (MAX_EXPR,\n \t\t      fold_convert (sizetype,\n@@ -6252,7 +6246,8 @@ layout_class_type (tree t, tree *virtuals_p)\n       SET_TYPE_ALIGN (base_t, rli->record_align);\n       TYPE_USER_ALIGN (base_t) = TYPE_USER_ALIGN (t);\n \n-      /* Copy the fields from T.  */\n+      /* Copy the non-static data members of T. This will include its\n+\t direct non-virtual bases & vtable.  */\n       next_field = &TYPE_FIELDS (base_t);\n       for (field = TYPE_FIELDS (t); field; field = DECL_CHAIN (field))\n \tif (TREE_CODE (field) == FIELD_DECL)\n@@ -6263,9 +6258,14 @@ layout_class_type (tree t, tree *virtuals_p)\n \t  }\n       *next_field = NULL_TREE;\n \n+      /* We use the base type for trivial assignments, and hence it\n+\t needs a mode.  */\n+      compute_record_mode (base_t);\n+\n+      TYPE_CONTEXT (base_t) = t;\n+\n       /* Record the base version of the type.  */\n       CLASSTYPE_AS_BASE (t) = base_t;\n-      TYPE_CONTEXT (base_t) = t;\n     }\n   else\n     CLASSTYPE_AS_BASE (t) = t;\n@@ -6822,11 +6822,6 @@ finish_struct_1 (tree t)\n \n   set_class_bindings (t);\n \n-  if (CLASSTYPE_AS_BASE (t) != t)\n-    /* We use the base type for trivial assignments, and hence it\n-       needs a mode.  */\n-    compute_record_mode (CLASSTYPE_AS_BASE (t));\n-\n   /* With the layout complete, check for flexible array members and\n      zero-length arrays that might overlap other members in the final\n      layout.  */"}]}