{"sha": "46e3b90f7e326c672c4ecddf5287f603a89d03ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZlM2I5MGY3ZTMyNmM2NzJjNGVjZGRmNTI4N2Y2MDNhODlkMDNlZg==", "commit": {"author": {"name": "Mark Shinwell", "email": "shinwell@codesourcery.com", "date": "2007-01-08T08:33:42Z"}, "committer": {"name": "Mark Shinwell", "email": "shinwell@gcc.gnu.org", "date": "2007-01-08T08:33:42Z"}, "message": "re PR tree-optimization/29877 (out of SSA (TER) extends variable life of variable beyond original declared)\n\n\tPR tree-optimization/29877\n\tgcc/\n\t* tree-ssa-ter.c (is_replaceable_p): Deem assignments with\n\ta register variable on the RHS to not be replaceable.\n\n\tgcc/testsuite/\n\t* gcc.dg/pr16194.c: Skip test entirely if we don't know the\n\tname of a hard register for the target concerned.  Adjust dg-error\n\tdirectives to cope with new behaviour of TER.\n\nFrom-SVN: r120571", "tree": {"sha": "86d028c760c73cbf43467080ea39ca9e8bbad562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d028c760c73cbf43467080ea39ca9e8bbad562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46e3b90f7e326c672c4ecddf5287f603a89d03ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e3b90f7e326c672c4ecddf5287f603a89d03ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e3b90f7e326c672c4ecddf5287f603a89d03ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e3b90f7e326c672c4ecddf5287f603a89d03ef/comments", "author": null, "committer": null, "parents": [{"sha": "99fc25020d47424e0c0b0da370e2e18540b96b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99fc25020d47424e0c0b0da370e2e18540b96b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99fc25020d47424e0c0b0da370e2e18540b96b73"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "371f10565390f266652a18a9da8d2f6224d46fb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e3b90f7e326c672c4ecddf5287f603a89d03ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e3b90f7e326c672c4ecddf5287f603a89d03ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46e3b90f7e326c672c4ecddf5287f603a89d03ef", "patch": "@@ -1,3 +1,9 @@\n+2007-01-08  Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\tPR tree-optimization/29877\n+\t* tree-ssa-ter.c (is_replaceable_p): Deem assignments with\n+\ta register variable on the RHS to not be replaceable.\n+\n 2007-01-08  Chen Liqin  <liqin@sunnorth.com.cn>\n \t* config/score/t-score-elf (MULTILIB_OPTIONS): Change.\n \t* config/score/predicates.md (const_uimm5, sr0_operand, const_simm12,"}, {"sha": "47dce00a90819a56d57d283ebc697f231ff5fa6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e3b90f7e326c672c4ecddf5287f603a89d03ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e3b90f7e326c672c4ecddf5287f603a89d03ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=46e3b90f7e326c672c4ecddf5287f603a89d03ef", "patch": "@@ -1,3 +1,10 @@\n+2007-01-08  Mark Shinwell  <shinwell@codesourcery.com>\n+\n+\tPR tree-optimization/29877\n+\t* gcc.dg/pr16194.c: Skip test entirely if we don't know the\n+\tname of a hard register for the target concerned.  Adjust dg-error\n+\tdirectives to cope with new behaviour of TER.\n+\n 2007-01-07  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/28986"}, {"sha": "eeb779eb66d6c99218741929f803fc7dec50f50f", "filename": "gcc/testsuite/gcc.dg/pr16194.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e3b90f7e326c672c4ecddf5287f603a89d03ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr16194.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e3b90f7e326c672c4ecddf5287f603a89d03ef/gcc%2Ftestsuite%2Fgcc.dg%2Fpr16194.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr16194.c?ref=46e3b90f7e326c672c4ecddf5287f603a89d03ef", "patch": "@@ -2,6 +2,7 @@\n /* { dg-options \"-O\" } */\n /* { dg-bogus \"internal compiler error\" \"ICE\" { target *-*-* } 0 } */\n \n+#undef SKIP\n #define ASMDECL __asm (REG);\n #define CLOBBER_LIST : REG\n #define INP_CLOBBER_LIST : CLOBBER_LIST\n@@ -18,17 +19,15 @@\n # define REG \"6\"\n #elif defined (__x86_64__)\n # define REG \"rax\"\n+#elif defined (__m68k__)\n+# define REG \"%d0\"\n #else\n-  /* Make this test harmless for any target not recognized above.  */\n-# undef ASMDECL\n-# define ASMDECL\n-# define REG \"conflict\"\n-# undef CLOBBER_LIST\n-# define CLOBBER_LIST\n-# undef INP_CLOBBER_LIST\n-# define INP_CLOBBER_LIST\n+/* Make this test harmless for any target not recognized above.  */\n+# define SKIP 1\n #endif\n \n+#ifndef SKIP\n+\n struct A\n {\n   int a;\n@@ -47,7 +46,7 @@ struct C\n void bug (void)\n {\n   register char* dst ASMDECL;\n-  __asm__ (\"\":\"=g\"(*dst): : REG); /* { dg-error \"conflict\" } */\n+  __asm__ (\"\":\"=g\"(*dst): : REG);\n }\n \n /* The tree optimizers currently prevent us from finding an overlap -\n@@ -56,12 +55,22 @@ void bug (void)\n void bug2 (void)\n {\n   register char* dst ASMDECL;\n-  __asm__ (\"\": :\"g\"(*dst) CLOBBER_LIST); /* { dg-error \"conflict\" } */\n+  __asm__ (\"\": :\"g\"(*dst) CLOBBER_LIST);\n }\n \n void\n foo (void)\n {\n   register struct C *dst ASMDECL;\n-  __asm__ (\"\" : \"=g\"(dst->c.b[1].a) INP_CLOBBER_LIST); /* { dg-error \"conflict\" } */\n+  __asm__ (\"\" : \"=g\"(dst->c.b[1].a) INP_CLOBBER_LIST);\n }\n+\n+#else\n+\n+int main ()\n+{\n+  return 0;\n+}\n+\n+#endif\n+"}, {"sha": "c6b7ab39dce29f5ef86d6da8e0e380d307f1b0c3", "filename": "gcc/tree-ssa-ter.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46e3b90f7e326c672c4ecddf5287f603a89d03ef/gcc%2Ftree-ssa-ter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46e3b90f7e326c672c4ecddf5287f603a89d03ef/gcc%2Ftree-ssa-ter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ter.c?ref=46e3b90f7e326c672c4ecddf5287f603a89d03ef", "patch": "@@ -393,6 +393,12 @@ is_replaceable_p (tree stmt)\n       && FLOAT_TYPE_P (TREE_TYPE (GENERIC_TREE_OPERAND (stmt, 1))))\n     return false;\n \n+  /* An assignment with a register variable on the RHS is not\n+     replaceable.  */\n+  if (TREE_CODE (GENERIC_TREE_OPERAND (stmt, 1)) == VAR_DECL\n+      && DECL_HARD_REGISTER (GENERIC_TREE_OPERAND (stmt, 1)))\n+    return false;\n+\n   /* Calls to functions with side-effects cannot be replaced.  */\n   if ((call_expr = get_call_expr_in (stmt)) != NULL_TREE)\n     {"}]}