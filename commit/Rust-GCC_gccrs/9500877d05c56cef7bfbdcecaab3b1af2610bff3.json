{"sha": "9500877d05c56cef7bfbdcecaab3b1af2610bff3", "node_id": "C_kwDOANBUbNoAKDk1MDA4NzdkMDVjNTZjZWY3YmZiZGNlY2FhYjNiMWFmMjYxMGJmZjM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-30T09:55:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-30T11:00:56Z"}, "message": "tree-optimization/107919 - uninit diagnostic predicate simplification\n\nWe fail to simplify\n\n        ((_145 != 0B) AND (_531 == 2) AND (_109 == 0))\n        OR ((NOT (_145 != 0B)) AND (_531 == 2) AND (_109 == 0))\n        OR ((NOT (_531 == 2)) AND (_109 == 0))\n\nbecause the existing simplification of !A && B || A && B is implemented\ntoo simplistic.  The following re-implements that which fixes the\nbogus uninit diagnostic when using -O1 but not yet at -O2.\n\n\tPR tree-optimization/107919\n\t* gimple-predicate-analysis.cc (predicate::simplify_2):\n\tHandle predicates of arbitrary length.\n\n\t* g++.dg/warn/Wuninitialized-pr107919-1.C: New testcase.", "tree": {"sha": "060d420699da00ccf5c95ca0a34bec48ec781143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/060d420699da00ccf5c95ca0a34bec48ec781143"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9500877d05c56cef7bfbdcecaab3b1af2610bff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9500877d05c56cef7bfbdcecaab3b1af2610bff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9500877d05c56cef7bfbdcecaab3b1af2610bff3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9500877d05c56cef7bfbdcecaab3b1af2610bff3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7716ee1e90412f785cba20acffd59fc7461302cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7716ee1e90412f785cba20acffd59fc7461302cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7716ee1e90412f785cba20acffd59fc7461302cb"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "23be4b69babaa65f3e153dbe7567ced17ea9b757", "filename": "gcc/gimple-predicate-analysis.cc", "status": "modified", "additions": 28, "deletions": 43, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9500877d05c56cef7bfbdcecaab3b1af2610bff3/gcc%2Fgimple-predicate-analysis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9500877d05c56cef7bfbdcecaab3b1af2610bff3/gcc%2Fgimple-predicate-analysis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-predicate-analysis.cc?ref=9500877d05c56cef7bfbdcecaab3b1af2610bff3", "patch": "@@ -1257,64 +1257,49 @@ predicate::simplify_2 ()\n   /* (X AND Y) OR (!X AND Y) is equivalent to Y.\n      (X AND Y) OR (X AND !Y) is equivalent to X.  */\n \n-  unsigned n = m_preds.length ();\n-  for (unsigned i = 0; i < n; i++)\n+  for (unsigned i = 0; i < m_preds.length (); i++)\n     {\n       pred_chain &a_chain = m_preds[i];\n-      if (a_chain.length () != 2)\n-\tcontinue;\n-\n-      /* Create copies since the chain may be released below before\n-\t the copy is added to the other chain.  */\n-      const pred_info x = a_chain[0];\n-      const pred_info y = a_chain[1];\n \n-      for (unsigned j = 0; j < n; j++)\n+      for (unsigned j = i + 1; j < m_preds.length (); j++)\n \t{\n-\t  if (j == i)\n-\t    continue;\n-\n \t  pred_chain &b_chain = m_preds[j];\n-\t  if (b_chain.length () != 2)\n+\t  if (b_chain.length () != a_chain.length ())\n \t    continue;\n \n-\t  const pred_info &x2 = b_chain[0];\n-\t  const pred_info &y2 = b_chain[1];\n-\n-\t  if (pred_equal_p (x, x2) && pred_neg_p (y, y2))\n+\t  unsigned neg_idx = -1U;\n+\t  for (unsigned k = 0; k < a_chain.length (); ++k)\n \t    {\n-\t      /* Kill a_chain.  */\n-\t      b_chain.release ();\n-\t      a_chain.release ();\n-\t      b_chain.safe_push (x);\n-\t      simplified = true;\n-\t      break;\n+\t      if (pred_equal_p (a_chain[k], b_chain[k]))\n+\t\tcontinue;\n+\t      if (neg_idx != -1U)\n+\t\t{\n+\t\t  neg_idx = -1U;\n+\t\t  break;\n+\t\t}\n+\t      if (pred_neg_p (a_chain[k], b_chain[k]))\n+\t\tneg_idx = k;\n+\t      else\n+\t\tbreak;\n \t    }\n-\t  if (pred_neg_p (x, x2) && pred_equal_p (y, y2))\n+\t  /* If we found equal chains with one negated predicate\n+\t     simplify.  */\n+\t  if (neg_idx != -1U)\n \t    {\n-\t      /* Kill a_chain.  */\n-\t      a_chain.release ();\n-\t      b_chain.release ();\n-\t      b_chain.safe_push (y);\n+\t      a_chain.ordered_remove (neg_idx);\n+\t      m_preds.ordered_remove (j);\n \t      simplified = true;\n+\t      if (a_chain.is_empty ())\n+\t\t{\n+\t\t  /* A && !A simplifies to true, wipe the whole predicate.  */\n+\t\t  for (unsigned k = 0; k < m_preds.length (); ++k)\n+\t\t    m_preds[k].release ();\n+\t\t  m_preds.truncate (0);\n+\t\t}\n \t      break;\n \t    }\n \t}\n     }\n-  /* Now clean up the chain.  */\n-  if (simplified)\n-    {\n-      pred_chain_union s_preds = vNULL;\n-      for (unsigned i = 0; i < n; i++)\n-\t{\n-\t  if (m_preds[i].is_empty ())\n-\t    continue;\n-\t  s_preds.safe_push (m_preds[i]);\n-\t}\n-      m_preds.release ();\n-      m_preds = s_preds;\n-      s_preds = vNULL;\n-    }\n \n   return simplified;\n }"}, {"sha": "dd631dc8bfe7b18af3018c91160d9413f3ef7dfd", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-pr107919-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9500877d05c56cef7bfbdcecaab3b1af2610bff3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-pr107919-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9500877d05c56cef7bfbdcecaab3b1af2610bff3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-pr107919-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-pr107919-1.C?ref=9500877d05c56cef7bfbdcecaab3b1af2610bff3", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++17 }\n+// { dg-options \"-O -Wuninitialized\" }\n+\n+#include <memory>\n+#include <variant>\n+\n+using Event = std::variant<std::variant<std::tuple<std::unique_ptr<int>>>, int, char>;\n+\n+void do_something(void* storage)\n+{\n+  Event event {};\n+  auto& swappedValue = *reinterpret_cast<Event*>(storage);\n+  std::swap(event, swappedValue);\n+}"}]}