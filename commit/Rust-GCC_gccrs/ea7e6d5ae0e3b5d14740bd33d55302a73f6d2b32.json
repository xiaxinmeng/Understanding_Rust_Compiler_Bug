{"sha": "ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE3ZTZkNWFlMGUzYjVkMTQ3NDBiZDMzZDU1MzAyYTczZjZkMmIzMg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2008-03-05T17:20:26Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2008-03-05T17:20:26Z"}, "message": "cfg.c: Include tree-flow.h.\n\n        * cfg.c: Include tree-flow.h.\n        (remove_edge_raw): Call redirect_edge_var_map_clear.\n        (redirect_edge_succ_nodup): Call redirect_edge_var_map_dup.\n        * tree-flow-inline.h (redirect_edge_var_map_def): New.\n        (redirect_edge_var_map_result): New.\n        * tree-cfgcleanup.c (remove_forwarder_block_with_phi): Replace\n        PENDING_STMT use with redirect_edge_var_map_*.\n        * tree-ssa.c (edge_var_maps): New definition.\n        (redirect_edge_var_map_add): New.\n        (redirect_edge_var_map_clear): New.\n        (redirect_edge_var_map_dup): New.\n        (redirect_edge_var_map_vector): New.\n        (redirect_edge_var_map_destroy): New.\n        (ssa_redirect_edge): Replace PENDING_STMT use with\n        redirect_edge_var_map_*.\n        (flush_pending_stmts): Same.\n        (delete_tree_ssa): Destroy edge var map.\n        * tree-flow.h (struct _edge_var_map): New.\n        Define edge_var_map vector type.\n        Declare redirect_edge_var_map_* prototypes.\n        * Makefile.in (cfg.o): Depend on TREE_FLOW_H.\n        * tree-cfg.c (reinstall_phi_args): Replace\n        PENDING_STMT use with redirect_edge_var_map_*.\n\nFrom-SVN: r132903", "tree": {"sha": "581bbd0f679ef1aaf0ad42e7d8f0b56620d3e34a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/581bbd0f679ef1aaf0ad42e7d8f0b56620d3e34a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7d95bfef5d2b7515ca51bfaba63b3ef70452adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d95bfef5d2b7515ca51bfaba63b3ef70452adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d95bfef5d2b7515ca51bfaba63b3ef70452adf"}], "stats": {"total": 264, "additions": 232, "deletions": 32}, "files": [{"sha": "fd052fbe3a558ede44aa4f71d0b12c016e4219ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "patch": "@@ -1,3 +1,29 @@\n+2008-03-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* cfg.c: Include tree-flow.h.\n+\t(remove_edge_raw): Call redirect_edge_var_map_clear.\n+\t(redirect_edge_succ_nodup): Call redirect_edge_var_map_dup.\n+\t* tree-flow-inline.h (redirect_edge_var_map_def): New.\n+\t(redirect_edge_var_map_result): New.\n+\t* tree-cfgcleanup.c (remove_forwarder_block_with_phi): Replace\n+\tPENDING_STMT use with redirect_edge_var_map_*.\n+\t* tree-ssa.c (edge_var_maps): New definition.\n+\t(redirect_edge_var_map_add): New.\n+\t(redirect_edge_var_map_clear): New.\n+\t(redirect_edge_var_map_dup): New.\n+\t(redirect_edge_var_map_vector): New.\n+\t(redirect_edge_var_map_destroy): New.\n+\t(ssa_redirect_edge): Replace PENDING_STMT use with\n+\tredirect_edge_var_map_*.\n+\t(flush_pending_stmts): Same.\n+\t(delete_tree_ssa): Destroy edge var map.\n+\t* tree-flow.h (struct _edge_var_map): New.\n+\tDefine edge_var_map vector type.\n+\tDeclare redirect_edge_var_map_* prototypes.\n+\t* Makefile.in (cfg.o): Depend on TREE_FLOW_H.\n+\t* tree-cfg.c (reinstall_phi_args): Replace\n+\tPENDING_STMT use with redirect_edge_var_map_*.\n+\n 2008-03-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/35472"}, {"sha": "4522e1dffbf127334a20b029d3eb508c93e6c55c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "patch": "@@ -2643,7 +2643,7 @@ auto-inc-dec.o : auto-inc-dec.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n cfg.o : cfg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(FLAGS_H) \\\n    $(REGS_H) hard-reg-set.h output.h toplev.h $(FUNCTION_H) except.h $(GGC_H) \\\n    $(TM_P_H) $(TIMEVAR_H) $(OBSTACK_H) $(TREE_H) alloc-pool.h \\\n-   $(HASHTAB_H) $(DF_H) $(CFGLOOP_H)\n+   $(HASHTAB_H) $(DF_H) $(CFGLOOP_H) $(TREE_FLOW_H)\n cfghooks.o: cfghooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TIMEVAR_H) toplev.h $(CFGLOOP_H)\n cfgexpand.o : cfgexpand.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\"}, {"sha": "fe8dba984cf576dbf6dd28bf59d3aadddb2d6408", "filename": "gcc/cfg.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "patch": "@@ -67,6 +67,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"df.h\"\n #include \"cfgloop.h\"\n+#include \"tree-flow.h\"\n \n /* The obstack on which the flow graph components are allocated.  */\n \n@@ -359,6 +360,9 @@ remove_edge_raw (edge e)\n   disconnect_src (e);\n   disconnect_dest (e);\n \n+  /* This is probably not needed, but it doesn't hurt.  */\n+  redirect_edge_var_map_clear (e);\n+\n   free_edge (e);\n }\n \n@@ -395,6 +399,7 @@ redirect_edge_succ_nodup (edge e, basic_block new_succ)\n \ts->probability = REG_BR_PROB_BASE;\n       s->count += e->count;\n       remove_edge (e);\n+      redirect_edge_var_map_dup (s, e);\n       e = s;\n     }\n   else"}, {"sha": "71a6c9ad667a89988dec53c1a1cd15644361d6e8", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "patch": "@@ -3031,24 +3031,28 @@ bsi_insert_on_edge_immediate (edge e, tree stmt)\n static void\n reinstall_phi_args (edge new_edge, edge old_edge)\n {\n-  tree var, phi;\n+  tree phi;\n+  edge_var_map_vector v;\n+  edge_var_map *vm;\n+  int i;\n \n-  if (!PENDING_STMT (old_edge))\n+  v = redirect_edge_var_map_vector (old_edge);\n+  if (!v)\n     return;\n \n-  for (var = PENDING_STMT (old_edge), phi = phi_nodes (new_edge->dest);\n-       var && phi;\n-       var = TREE_CHAIN (var), phi = PHI_CHAIN (phi))\n+  for (i = 0, phi = phi_nodes (new_edge->dest);\n+       VEC_iterate (edge_var_map, v, i, vm) && phi;\n+       i++, phi = PHI_CHAIN (phi))\n     {\n-      tree result = TREE_PURPOSE (var);\n-      tree arg = TREE_VALUE (var);\n+      tree result = redirect_edge_var_map_result (vm);\n+      tree arg = redirect_edge_var_map_def (vm);\n \n       gcc_assert (result == PHI_RESULT (phi));\n \n       add_phi_arg (phi, arg, new_edge);\n     }\n \n-  PENDING_STMT (old_edge) = NULL;\n+  redirect_edge_var_map_clear (old_edge);\n }\n \n /* Returns the basic block after which the new basic block created"}, {"sha": "aaaacd9fb33b1917c5b676f13a14dc0e16ef075c", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "patch": "@@ -748,7 +748,7 @@ remove_forwarder_block_with_phi (basic_block bb)\n \t  if (phi_alternatives_equal (dest, s, succ))\n \t    {\n \t      e = redirect_edge_and_branch (e, dest);\n-\t      PENDING_STMT (e) = NULL_TREE;\n+\t      redirect_edge_var_map_clear (e);\n \t      continue;\n \t    }\n \n@@ -771,15 +771,18 @@ remove_forwarder_block_with_phi (basic_block bb)\n \n \t  if (TREE_CODE (def) == SSA_NAME)\n \t    {\n-\t      tree var;\n+\t      edge_var_map_vector head;\n+\t      edge_var_map *vm;\n+\t      size_t i;\n \n \t      /* If DEF is one of the results of PHI nodes removed during\n \t\t redirection, replace it with the PHI argument that used\n \t\t to be on E.  */\n-\t      for (var = PENDING_STMT (e); var; var = TREE_CHAIN (var))\n+\t      head = redirect_edge_var_map_vector (e);\n+\t      for (i = 0; VEC_iterate (edge_var_map, head, i, vm); ++i)\n \t\t{\n-\t\t  tree old_arg = TREE_PURPOSE (var);\n-\t\t  tree new_arg = TREE_VALUE (var);\n+\t\t  tree old_arg = redirect_edge_var_map_result (vm);\n+\t\t  tree new_arg = redirect_edge_var_map_def (vm);\n \n \t\t  if (def == old_arg)\n \t\t    {\n@@ -792,7 +795,7 @@ remove_forwarder_block_with_phi (basic_block bb)\n \t  add_phi_arg (phi, def, s);\n \t}\n \n-      PENDING_STMT (e) = NULL;\n+      redirect_edge_var_map_clear (e);\n     }\n \n   /* Update the dominators.  */"}, {"sha": "7bc21b8bd3d8b4ba5d6445ff9da5603d06ad0282", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "patch": "@@ -1842,4 +1842,20 @@ gimple_mem_ref_stats (const struct function *fn)\n {\n   return &fn->gimple_df->mem_ref_stats;\n }\n+\n+/* Given an edge_var_map V, return the PHI arg definition.  */\n+\n+static inline tree\n+redirect_edge_var_map_def (edge_var_map *v)\n+{\n+  return v->def;\n+}\n+\n+/* Given an edge_var_map V, return the PHI result.  */\n+\n+static inline tree\n+redirect_edge_var_map_result (edge_var_map *v)\n+{\n+  return v->result;\n+}\n #endif /* _TREE_FLOW_INLINE_H  */"}, {"sha": "1e3c92a91dc081f171f197aecf0c29475139c7d4", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "patch": "@@ -879,7 +879,30 @@ typedef bool (*walk_use_def_chains_fn) (tree, tree, void *);\n /* In tree-ssa-alias-warnings.c  */\n extern void strict_aliasing_warning_backend (void);\n \n+\n /* In tree-ssa.c  */\n+\n+/* Mapping for redirected edges.  */\n+struct _edge_var_map GTY(())\n+{\n+  tree result;\t\t\t/* PHI result.  */\n+  tree def;\t\t\t/* PHI arg definition.  */\n+};\n+typedef struct _edge_var_map edge_var_map;\n+\n+DEF_VEC_O(edge_var_map);\n+DEF_VEC_ALLOC_O(edge_var_map, heap);\n+\n+/* A vector of var maps.  */\n+typedef VEC(edge_var_map, heap) *edge_var_map_vector;\n+\n+extern void redirect_edge_var_map_add (edge, tree, tree);\n+extern void redirect_edge_var_map_clear (edge);\n+extern void redirect_edge_var_map_dup (edge, edge);\n+extern edge_var_map_vector redirect_edge_var_map_vector (edge);\n+extern void redirect_edge_var_map_destroy (void);\n+\n+\n extern void init_tree_ssa (void);\n extern edge ssa_redirect_edge (edge, basic_block);\n extern void flush_pending_stmts (edge);\n@@ -892,6 +915,7 @@ extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *, bool);\n extern bool stmt_references_memory_p (tree);\n extern bool ssa_undefined_value_p (tree);\n \n+\n /* In tree-into-ssa.c  */\n void update_ssa (unsigned);\n void delete_update_ssa (void);"}, {"sha": "a036346dee2bc74e6fec7f0e293069983263ebf8", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 139, "deletions": 17, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=ea7e6d5ae0e3b5d14740bd33d55302a73f6d2b32", "patch": "@@ -45,32 +45,147 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"toplev.h\"\n \n+/* Pointer map of variable mappings, keyed by edge.  */\n+static struct pointer_map_t *edge_var_maps;\n+\n+\n+/* Add a mapping with PHI RESULT and PHI DEF associated with edge E.  */\n+\n+void\n+redirect_edge_var_map_add (edge e, tree result, tree def)\n+{\n+  void **slot;\n+  edge_var_map_vector old_head, head;\n+  edge_var_map new_node;\n+\n+  if (edge_var_maps == NULL)\n+    edge_var_maps = pointer_map_create ();\n+\n+  slot = pointer_map_insert (edge_var_maps, e);\n+  old_head = head = *slot;\n+  if (!head)\n+    {\n+      head = VEC_alloc (edge_var_map, heap, 5);\n+      *slot = head;\n+    }\n+  new_node.def = def;\n+  new_node.result = result;\n+\n+  VEC_safe_push (edge_var_map, heap, head, &new_node);\n+  if (old_head != head)\n+    {\n+      /* The push did some reallocation.  Update the pointer map.  */\n+      *slot = head;\n+    }\n+}\n+\n+\n+/* Clear the var mappings in edge E.  */\n+\n+void\n+redirect_edge_var_map_clear (edge e)\n+{\n+  void **slot;\n+  edge_var_map_vector head;\n+\n+  if (!edge_var_maps)\n+    return;\n+\n+  slot = pointer_map_contains (edge_var_maps, e);\n+\n+  if (slot)\n+    {\n+      head = *slot;\n+      VEC_free (edge_var_map, heap, head);\n+      *slot = NULL;\n+    }\n+}\n+\n+\n+/* Duplicate the redirected var mappings in OLDE in NEWE.\n+\n+   Since we can't remove a mapping, let's just duplicate it.  This assumes a\n+   pointer_map can have multiple edges mapping to the same var_map (many to\n+   one mapping), since we don't remove the previous mappings.  */\n+\n+void\n+redirect_edge_var_map_dup (edge newe, edge olde)\n+{\n+  void **new_slot, **old_slot; edge_var_map_vector head;\n+\n+  if (!edge_var_maps)\n+    return;\n+\n+  new_slot = pointer_map_insert (edge_var_maps, newe);\n+  old_slot = pointer_map_contains (edge_var_maps, olde);\n+  if (!old_slot)\n+    return;\n+  head = *old_slot;\n+\n+  if (head)\n+    *new_slot = VEC_copy (edge_var_map, heap, head);\n+  else\n+    *new_slot = VEC_alloc (edge_var_map, heap, 5);\n+}\n+\n+\n+/* Return the varable mappings for a given edge.  If there is none, return\n+   NULL.  */\n+\n+edge_var_map_vector\n+redirect_edge_var_map_vector (edge e)\n+{\n+  void **slot;\n+\n+  /* Hey, what kind of idiot would... you'd be surprised.  */\n+  if (!edge_var_maps)\n+    return NULL;\n+\n+  slot = pointer_map_contains (edge_var_maps, e);\n+  if (!slot)\n+    return NULL;\n+\n+  return (edge_var_map_vector) *slot;\n+}\n+\n+\n+/* Clear the edge variable mappings.  */\n+\n+void\n+redirect_edge_var_map_destroy (void)\n+{\n+  if (edge_var_maps)\n+    {\n+      pointer_map_destroy (edge_var_maps);\n+      edge_var_maps = NULL;\n+    }\n+}\n+\n+\n /* Remove the corresponding arguments from the PHI nodes in E's\n    destination block and redirect it to DEST.  Return redirected edge.\n-   The list of removed arguments is stored in PENDING_STMT (e).  */\n+   The list of removed arguments is stored in a vector accessed\n+   through edge_var_maps.  */\n \n edge\n ssa_redirect_edge (edge e, basic_block dest)\n {\n   tree phi;\n-  tree list = NULL, *last = &list;\n-  tree src, dst, node;\n+\n+  redirect_edge_var_map_clear (e);\n \n   /* Remove the appropriate PHI arguments in E's destination block.  */\n   for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n     {\n-      if (PHI_ARG_DEF (phi, e->dest_idx) == NULL_TREE)\n+      tree def = PHI_ARG_DEF (phi, e->dest_idx);\n+\n+      if (def == NULL_TREE)\n \tcontinue;\n \n-      src = PHI_ARG_DEF (phi, e->dest_idx);\n-      dst = PHI_RESULT (phi);\n-      node = build_tree_list (dst, src);\n-      *last = node;\n-      last = &TREE_CHAIN (node);\n+      redirect_edge_var_map_add (e, PHI_RESULT (phi), def);\n     }\n \n   e = redirect_edge_succ_nodup (e, dest);\n-  PENDING_STMT (e) = list;\n \n   return e;\n }\n@@ -81,20 +196,24 @@ ssa_redirect_edge (edge e, basic_block dest)\n void\n flush_pending_stmts (edge e)\n {\n-  tree phi, arg;\n+  tree phi;\n+  edge_var_map_vector v;\n+  edge_var_map *vm;\n+  int i;\n \n-  if (!PENDING_STMT (e))\n+  v = redirect_edge_var_map_vector (e);\n+  if (!v)\n     return;\n \n-  for (phi = phi_nodes (e->dest), arg = PENDING_STMT (e);\n-       phi;\n-       phi = PHI_CHAIN (phi), arg = TREE_CHAIN (arg))\n+  for (phi = phi_nodes (e->dest), i = 0;\n+       phi && VEC_iterate (edge_var_map, v, i, vm);\n+       phi = PHI_CHAIN (phi), i++)\n     {\n-      tree def = TREE_VALUE (arg);\n+      tree def = redirect_edge_var_map_def (vm);\n       add_phi_arg (phi, def, e);\n     }\n \n-  PENDING_STMT (e) = NULL;\n+  redirect_edge_var_map_clear (e);\n }\n \n /* Return true if SSA_NAME is malformed and mark it visited.\n@@ -920,6 +1039,9 @@ delete_tree_ssa (void)\n   delete_mem_ref_stats (cfun);\n \n   cfun->gimple_df = NULL;\n+\n+  /* We no longer need the edge variable maps.  */\n+  redirect_edge_var_map_destroy ();\n }\n \n /* Helper function for useless_type_conversion_p.  */"}]}