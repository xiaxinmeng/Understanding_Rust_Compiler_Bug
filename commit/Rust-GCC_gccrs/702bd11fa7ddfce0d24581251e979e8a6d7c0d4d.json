{"sha": "702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "node_id": "C_kwDOANBUbNoAKDcwMmJkMTFmYTdkZGZjZTBkMjQ1ODEyNTFlOTc5ZThhNmQ3YzBkNGQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-17T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-17T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "6ca13e21e6448652742ba9a5437c654e43c5fdd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ca13e21e6448652742ba9a5437c654e43c5fdd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/comments", "author": null, "committer": null, "parents": [{"sha": "ed12749a3c9d9569a2c23df2e0db2136dcd3512d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed12749a3c9d9569a2c23df2e0db2136dcd3512d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed12749a3c9d9569a2c23df2e0db2136dcd3512d"}], "stats": {"total": 598, "additions": 597, "deletions": 1}, "files": [{"sha": "db1438819744d118025d8d869536f6a70f86e166", "filename": "gcc/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,112 @@\n+2022-05-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c/105492\n+\t* attribs.cc (decl_attributes): Fix broken typedefs here.\n+\n+2022-05-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105103\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/varargs.o.\n+\t* doc/invoke.texi: Add -Wanalyzer-va-arg-type-mismatch,\n+\t-Wanalyzer-va-list-exhausted, -Wanalyzer-va-list-leak, and\n+\t-Wanalyzer-va-list-use-after-va-end.\n+\n+2022-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-match.h (gimple_build): Move code_helper overloads ...\n+\t* gimple-fold.h (gimple_build): ... here.\n+\t(gimple_build): Transition to new worker API.  Provide\n+\toverloads from sequence-based API.\n+\t(gimple_convert): Likewise.\n+\t(gimple_convert_to_ptrofftype): Likewise.\n+\t(gimple_build_vector_from_val): Likewise.\n+\t(gimple_build_vector): Likewise.\n+\t(gimple_build_round_up): Likewise.\n+\t* gimple-fold.cc (gimple_build_insert_seq): New helper.\n+\t(gimple_build): Use it.  Transition combined_fn and code_helper\n+\tAPI parts.\n+\t(gimple_convert): Transition to new worker API.\n+\t(gimple_convert_to_ptrofftype): Likewise.\n+\t(gimple_build_vector_from_val): Likewise.\n+\t(gimple_build_vector): Likewise.\n+\t(gimple_build_round_up): Likewise.\n+\n+2022-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-match.h (code_helper): Move class ...\n+\t* tree.h (code_helper): ... here.\n+\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* opts-global.cc (write_langs): Add comment.\n+\n+2022-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* dwarf2out.cc (loc_list_from_tree_1) <TRUTH_NOT_EXPR>: Do a logical\n+\tinstead of a bitwise negation.\n+\t<COND_EXPR>: Swap the operands if the condition is TRUTH_NOT_EXPR.\n+\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* attribs.cc (diag_attr_exclusions): Use ARRAY_SIZE.\n+\t(decls_mismatched_attributes): Likewise.\n+\t* builtins.cc (c_strlen): Likewise.\n+\t* cfg.cc (DEF_BASIC_BLOCK_FLAG): Likewise.\n+\t* common/config/aarch64/aarch64-common.cc (aarch64_option_init_struct): Likewise.\n+\t* config/aarch64/aarch64-builtins.cc (aarch64_lookup_simd_builtin_type): Likewise.\n+\t(aarch64_init_simd_builtin_types): Likewise.\n+\t(aarch64_init_builtin_rsqrt): Likewise.\n+\t* config/aarch64/aarch64.cc (is_madd_op): Likewise.\n+\t* config/arm/arm-builtins.cc (arm_lookup_simd_builtin_type): Likewise.\n+\t(arm_init_simd_builtin_types): Likewise.\n+\t* config/avr/gen-avr-mmcu-texi.cc (mcus[ARRAY_SIZE): Likewise.\n+\t(c_prefix): Likewise.\n+\t(main): Likewise.\n+\t* config/c6x/c6x.cc (N_SAVE_ORDER): Likewise.\n+\t* config/darwin-c.cc (darwin_register_frameworks): Likewise.\n+\t* config/gcn/mkoffload.cc (process_obj): Likewise.\n+\t* config/i386/i386-builtins.cc (get_builtin_code_for_version): Likewise.\n+\t(fold_builtin_cpu): Likewise.\n+\t* config/m32c/m32c.cc (PUSHM_N): Likewise.\n+\t* config/nvptx/mkoffload.cc (process): Likewise.\n+\t* config/rs6000/driver-rs6000.cc (host_detect_local_cpu): Likewise.\n+\t* config/s390/s390.cc (NR_C_MODES): Likewise.\n+\t* config/tilepro/gen-mul-tables.cc (find_sequences): Likewise.\n+\t(create_insn_code_compression_table): Likewise.\n+\t* config/vms/vms.cc (NBR_CRTL_NAMES): Likewise.\n+\t* diagnostic-format-json.cc (json_from_expanded_location): Likewise.\n+\t* dwarf2out.cc (ARRAY_SIZE): Likewise.\n+\t* genhooks.cc (emit_documentation): Likewise.\n+\t(emit_init_macros): Likewise.\n+\t* gimple-ssa-sprintf.cc (format_floating): Likewise.\n+\t* gimple-ssa-warn-access.cc (memmodel_name): Likewise.\n+\t* godump.cc (keyword_hash_init): Likewise.\n+\t* hash-table.cc (hash_table_higher_prime_index): Likewise.\n+\t* input.cc (for_each_line_table_case): Likewise.\n+\t* ipa-free-lang-data.cc (free_lang_data): Likewise.\n+\t* ipa-inline.cc (sanitize_attrs_match_for_inline_p): Likewise.\n+\t* optc-save-gen.awk: Likewise.\n+\t* spellcheck.cc (test_metric_conditions): Likewise.\n+\t* tree-vect-slp-patterns.cc (sizeof): Likewise.\n+\t(ARRAY_SIZE): Likewise.\n+\t* tree.cc (build_common_tree_nodes): Likewise.\n+\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* opts-global.cc (write_langs): Allocate at least one byte.\n+\n+2022-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd (A cmp B ? A : B -> min/max): New patterns\n+\tcarried over from fold_cond_expr_with_comparison.\n+\n+2022-05-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/105587\n+\t* config/i386/i386-expand.cc\n+\t(expand_vec_perm_pslldq_psrldq_por): Fail when (d->perm[i] ==\n+\td->perm[i-1] + 1) && d->perm[i] == nelt && start != -1.\n+\n 2022-05-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md: Remove constraints when used with"}, {"sha": "260f74988e693606f3b458a0bc37a1ab1bcd6850", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1 +1 @@\n-20220516\n+20220517"}, {"sha": "67676b830fe83696e5475546ad4968e15c1ec114", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,267 @@\n+2022-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch7.adb (Inspect_Untagged_Record_Completion): Also move the\n+\tequality operator on the homonym chain if there is another equality\n+\toperator in the private part.\n+\n+2022-05-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Disable value\n+\tpropagation when analysing the constant that holds the\n+\tLoop_Entry prefix value.\n+\n+2022-05-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Address_Checks): Remove call to\n+\tKill_Current_Values for subprogram entities, because this\n+\troutine only does something for object entities.\n+\n+2022-05-16  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Finalizer): Disable late evaluation of\n+\tpostconditions for functions returning types which where\n+\tHas_Unconstrained_Elements is true or are unconstrained arrays.\n+\n+2022-05-16  Etienne Servais  <servais@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Qualified_Expression): Freeze\n+\tTarget_Type.\n+\n+2022-05-16  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-aridou.adb (Double_Divide): Add intermediate\n+\tassertions.\n+\n+2022-05-16  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* lib-writ.adb (Output_CUDA_Symbols): Check for null packages.\n+\n+2022-05-16  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* libgnat/g-debpoo.ads: Improve documentation of the\n+\tStack_Trace_Depth parameter.\n+\n+2022-05-16  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* init.c (__gnat_install_handler) [__QNX__]: Save sigaction's\n+\treturn value in err before checking err's value.  Fix incorrect\n+\tsignal names in perror messages.\n+\n+2022-05-16  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* init.c (__gnat_install_handler) [__QNX__]: Set\n+\tact.sa_sigaction rather than act.sa_handler.\n+\n+2022-05-16  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* cstreams.c: Add <stdlib.h> #include.\n+\n+2022-05-16  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* terminals.c: Remove bzero #define on HP/UX or Solaris\n+\tplatforms.\n+\t(child_setup_tty): Replace bzero call by equivalent call to\n+\tmemset.\n+\n+2022-05-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_util.ads (Storage_Model_Support): Revise comments on most\n+\toperations within this nested package to reflect that they can\n+\tnow be passed either a type that has aspect Storage_Model_Type\n+\tor an object of such a type.  Change the names of the relevant\n+\tformals to SM_Obj_Or_Type. Also, add more precise semantic\n+\tdescriptions in some cases, and declare the subprograms in a\n+\tmore logical order.\n+\t* sem_util.adb (Storage_Model_Support.Storage_Model_Object): Add\n+\tan assertion that the type must specify aspect\n+\tDesignated_Storage_Model, rather than returning Empty when it\n+\tdoesn't specify that aspect.\n+\t(Storage_Model_Support.Storage_Model_Type): Add an assertion\n+\tthat formal must be an object whose type specifies aspect\n+\tStorage_Model_Type, rather than returning Empty for when it\n+\tdoesn't have such a type (and test Has_Storage_Model_Type_Aspect\n+\trather than Find_Value_Of_Aspect).\n+\t(Storage_Model_Support.Get_Storage_Model_Type_Entity): Allow\n+\tboth objects and types, and add an assertion that the type (or\n+\tthe type of the object) has a value for aspect\n+\tStorage_Model_Type.\n+\n+2022-05-16  Etienne Servais  <servais@adacore.com>\n+\n+\t* checks.adb (Apply_Arithmetic_Overflow_Minimized_Eliminated):\n+\tFix condition to return.\n+\n+2022-05-16  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Update comment.\n+\n+2022-05-16  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Iterated_Association): Create scope\n+\taround N_Iterated_Element_Association handling. Analyze a copy\n+\tof the Loop_Parameter_Specification. Call Analyze instead\n+\tAnalyze_* to be more homogeneous.\n+\t(Sem_Ch5): Remove now unused package.\n+\n+2022-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Insert_Actions) <N_Iterated_Component_Association>:\n+\tClimb up out of the node if the actions come from Discrete_Choices.\n+\n+2022-05-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_disp.adb (Check_Dispatching_Context): When checking to see\n+\twhether an expression occurs in a class-wide pre/post-condition,\n+\talso check for the possibility that it occurs in a class-wide\n+\tpreconditions subprogram that was introduced as part of\n+\texpansion. Without this fix, some legal calls occuring in\n+\tclass-wide preconditions may be incorrectly flagged as violating\n+\tthe \"a call to an abstract subprogram must be dispatching\" rule.\n+\n+2022-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inline.adb (Cleanup_Scopes): Test the underlying type.\n+\n+2022-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_util.ads (Is_Entity_Of_Quantified_Expression): Declare.\n+\t* sem_util.adb (Is_Entity_Of_Quantified_Expression): New\n+\tpredicate.\n+\t(New_Copy_Tree): Deal with all entities of quantified\n+\texpressions.\n+\t* sem_ch13.adb (Build_Predicate_Functions): Get rid of\n+\tsuperfluous tree copying and remove obsolete code.\n+\t* sem_ch6.adb (Fully_Conformant_Expressions): Deal with all\n+\tentities of quantified expressions.\n+\n+2022-05-16  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Finalize_Statements): Add Last_POC_Call\n+\tvariable to keep track of the last \"early finalization\" call\n+\tgenerated for type extension's finalization procedure. If\n+\tnon-empty, then this will indicate the point at which to insert\n+\tthe call to the parent type's finalization procedure. Modify\n+\tnested function Process_Component_List_For_Finalize to set this\n+\tvariable (and avoid setting it during a recursive call).  If\n+\tLast_POC_Call is empty, then insert the parent finalization call\n+\tbefore, rather than after, the finalization code for the\n+\textension components.\n+\n+2022-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo-utils.adb (Remove_Entity): Fix couple of oversights.\n+\t* exp_ch3.adb (Is_User_Defined_Equality): Delete.\n+\t(User_Defined_Eq): Call Get_User_Defined_Equality.\n+\t(Make_Eq_Body): Likewise.\n+\t(Predefined_Primitive_Eq_Body): Call Is_User_Defined_Equality.\n+\t* exp_ch4.adb (Build_Eq_Call): Call Get_User_Defined_Equality.\n+\t(Is_Equality): Delete.\n+\t(User_Defined_Primitive_Equality_Op): Likewise.\n+\t(Find_Aliased_Equality): Call Is_User_Defined_Equality.\n+\t(Expand_N_Op_Eq): Call Underlying_Type unconditionally.\n+\tDo not implement AI12-0101 + AI05-0123 here.\n+\t(Expand_Set_Membership): Call Resolve_Membership_Equality.\n+\t* exp_ch6.adb (Expand_Call_Helper): Remove obsolete code.\n+\t* sem_aux.ads (Is_Record_Or_Limited_Type): Delete.\n+\t* sem_aux.adb (Is_Record_Or_Limited_Type): Likewise.\n+\t* sem_ch4.ads (Nondispatching_Call_To_Abstract_Operation): Declare.\n+\t* sem_ch4.adb (Analyze_Call): Call Call_Abstract_Operation.\n+\t(Analyze_Membership_Op): Call Resolve_Membership_Equality.\n+\t(Nondispatching_Call_To_Abstract_Operation): New procedure.\n+\t(Remove_Abstract_Operations): Call it.\n+\t* sem_ch6.adb (Check_Untagged_Equality): Remove obsolete error and\n+\tcall Is_User_Defined_Equality.\n+\t* sem_ch7.adb (Inspect_Untagged_Record_Completion): New procedure\n+\timplementing AI12-0101 + AI05-0123.\n+\t(Analyze_Package_Specification): Call it.\n+\t(Declare_Inherited_Private_Subprograms): Minor tweak.\n+\t(Uninstall_Declarations): Likewise.\n+\t* sem_disp.adb (Check_Direct_Call): Adjust to new implementation\n+\tof Is_User_Defined_Equality.\n+\t* sem_res.ads (Resolve_Membership_Equality): Declare.\n+\t* sem_res.adb (Resolve): Replace direct error handling with call to\n+\tNondispatching_Call_To_Abstract_Operation\n+\t(Resolve_Call): Likewise.\n+\t(Resolve_Equality_Op): Likewise.  mplement AI12-0413.\n+\t(Resolve_Membership_Equality): New procedure.\n+\t(Resolve_Membership_Op): Call Get_User_Defined_Equality.\n+\t* sem_util.ads (Get_User_Defined_Eq): Rename into...\n+\t(Get_User_Defined_Equality): ...this.\n+\t* sem_util.adb (Get_User_Defined_Eq): Rename into...\n+\t(Get_User_Defined_Equality): ...this. Call Is_User_Defined_Equality.\n+\t(Is_User_Defined_Equality): Also check the profile but remove tests\n+\ton Comes_From_Source and Parent.\n+\t* sinfo.ads (Generic_Parent_Type): Adjust field description.\n+\t* uintp.ads (Ubool): Invoke user-defined equality in predicate.\n+\n+2022-05-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (User_Defined_Eq): Replace duplicated code with a\n+\tcall to Get_User_Defined_Eq.\n+\n+2022-05-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Untagged_Equality): Exit early when the\n+\toutcome of a loop is already known.\n+\n+2022-05-16  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* Makefile.rtl: Add aarch64 to the list of CPUs for which\n+\tGNATLIB_SHARED maps to gnatlib-shared-dual for vxworks7r2.\n+\n+2022-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Negation): Minor tweak.\n+\t(Analyze_Unary_Op): Likewise.\n+\n+2022-05-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Assignment): Adjust to the new definition of\n+\tIncomplete_View field.\n+\t* sem_ch10.ads (Decorate_Type): Declare.\n+\t* sem_ch10.adb (Decorate_Type): Move to library level.\n+\t(Install_Limited_With_Clause): In the already analyzed case, also\n+\tdeal with incomplete type declarations present in the sources and\n+\tsimplify the replacement code.\n+\t(Build_Shadow_Entity): Deal with swapped views in package body.\n+\t(Restore_Chain_For_Shadow): Deal with incomplete type declarations\n+\tpresent in the sources.\n+\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Adjust to the new\n+\tdefinition of Incomplete_View field.\n+\t(Build_Incomplete_Type_Declaration): Small consistency tweak.\n+\tSet the incomplete type as the Incomplete_View of the full type.\n+\tIf the scope is a package with a limited view, build a shadow\n+\tentity for the incomplete type.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): When replacing\n+\tthe limited view of a CW type as designated type of an anonymous\n+\taccess return type, get to the CW type of the incomplete view of\n+\tthe tagged type, if any.\n+\t(Collect_Primitive_Operations): Adjust to the new definition of\n+\tIncomplete_View field.\n+\t* sinfo.ads (Incomplete_View): Denote the entity itself instead\n+\tof its declaration.\n+\t* sem_util.adb: Remove call to Defining_Entity.\n+\n+2022-05-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Type_Or_Variable_Has_Enabled_Property): Given a\n+\tsubtype recurse into its base type.\n+\n+2022-05-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Type_Or_Variable_Has_Enabled_Property): Clarify.\n+\n+2022-05-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Is_Enabled): Remove; use Is_Enabled_Pragma\n+\tinstead.\n+\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* locales.c (iso_639_1_to_639_3): Use ARRAY_SIZE.\n+\t(language_name_to_639_3): Likewise.\n+\t(country_name_to_3166): Likewise.\n+\n 2022-05-13  Alexandre Oliva  <oliva@adacore.com>\n \n \t* gcc-interface/decl.cc (is_cplusplus_method): Build proper"}, {"sha": "e4f67fe4baad0d57e8d549134ab7e1b64d500083", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,83 @@\n+2022-05-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105103\n+\t* analyzer.cc (make_label_text_n): New.\n+\t* analyzer.h (class var_arg_region): New forward decl.\n+\t(make_label_text_n): New decl.\n+\t* analyzer.opt (Wanalyzer-va-arg-type-mismatch): New option.\n+\t(Wanalyzer-va-list-exhausted): New option.\n+\t(Wanalyzer-va-list-leak): New option.\n+\t(Wanalyzer-va-list-use-after-va-end): New option.\n+\t* checker-path.cc (call_event::get_desc): Split out decl access\n+\tinto..\n+\t(call_event::get_caller_fndecl): ...this new function and...\n+\t(call_event::get_callee_fndecl): ...this new function.\n+\t* checker-path.h (call_event::get_desc): Drop \"FINAL\".\n+\t(call_event::get_caller_fndecl): New decl.\n+\t(call_event::get_callee_fndecl): New decl.\n+\t(class call_event): Make fields protected.\n+\t* diagnostic-manager.cc (null_assignment_sm_context::warn): New\n+\toverload.\n+\t(null_assignment_sm_context::get_new_program_state): New.\n+\t(diagnostic_manager::add_events_for_superedge): Move case\n+\tSUPEREDGE_CALL to a new pending_diagnostic::add_call_event vfunc.\n+\t* engine.cc (impl_sm_context::warn): Implement new override.\n+\t(impl_sm_context::get_new_program_state): New.\n+\t* pending-diagnostic.cc: Include \"analyzer/diagnostic-manager.h\",\n+\t\"cpplib.h\", \"digraph.h\", \"ordered-hash-map.h\", \"cfg.h\",\n+\t\"basic-block.h\", \"gimple.h\", \"gimple-iterator.h\", \"cgraph.h\"\n+\t\"analyzer/supergraph.h\", \"analyzer/program-state.h\",\n+\t\"alloc-pool.h\", \"fibonacci_heap.h\", \"shortest-paths.h\",\n+\t\"sbitmap.h\", \"analyzer/exploded-graph.h\", \"diagnostic-path.h\",\n+\tand \"analyzer/checker-path.h\".\n+\t(ht_ident_eq): New.\n+\t(fixup_location_in_macro_p): New.\n+\t(pending_diagnostic::fixup_location): New.\n+\t(pending_diagnostic::add_call_event): New.\n+\t* pending-diagnostic.h (pending_diagnostic::fixup_location): Drop\n+\tno-op inline implementation in favor of the more complex\n+\timplementation above.\n+\t(pending_diagnostic::add_call_event): New vfunc.\n+\t* region-model-impl-calls.cc: Include \"analyzer/sm.h\",\n+\t\"diagnostic-path.h\", and \"analyzer/pending-diagnostic.h\".\n+\t* region-model-manager.cc\n+\t(region_model_manager::get_var_arg_region): New.\n+\t(region_model_manager::log_stats): Log m_var_arg_regions.\n+\t* region-model.cc (region_model::on_call_pre): Handle IFN_VA_ARG,\n+\tBUILT_IN_VA_START, and BUILT_IN_VA_COPY.\n+\t(region_model::on_call_post): Handle BUILT_IN_VA_END.\n+\t(region_model::get_representative_path_var_1): Handle RK_VAR_ARG.\n+\t(region_model::push_frame): Push variadic arguments.\n+\t* region-model.h (region_model_manager::get_var_arg_region): New\n+\tdecl.\n+\t(region_model_manager::m_var_arg_regions): New field.\n+\t(region_model::impl_call_va_start): New decl.\n+\t(region_model::impl_call_va_copy): New decl.\n+\t(region_model::impl_call_va_arg): New decl.\n+\t(region_model::impl_call_va_end): New decl.\n+\t* region.cc (alloca_region::dump_to_pp): Dump the id.\n+\t(var_arg_region::dump_to_pp): New.\n+\t(var_arg_region::get_frame_region): New.\n+\t* region.h (enum region_kind): Add RK_VAR_ARG.\n+\t(region::dyn_cast_var_arg_region): New.\n+\t(class var_arg_region): New.\n+\t(is_a_helper <const var_arg_region *>::test): New.\n+\t(struct default_hash_traits<var_arg_region::key_t>): New.\n+\t* sm.cc (make_checkers): Call make_va_list_state_machine.\n+\t* sm.h (sm_context::warn): New vfunc.\n+\t(sm_context::get_old_svalue): Drop unused decl.\n+\t(sm_context::get_new_program_state): New vfunc.\n+\t(make_va_list_state_machine): New decl.\n+\t* varargs.cc: New file.\n+\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* engine.cc (exploded_node::get_dot_fillcolor): Use ARRAY_SIZE.\n+\t* function-set.cc (test_stdio_example): Likewise.\n+\t* sm-file.cc (get_file_using_fns): Likewise.\n+\t* sm-malloc.cc (malloc_state_machine::unaffected_by_call_p): Likewise.\n+\t* sm-signal.cc (get_async_signal_unsafe_fns): Likewise.\n+\n 2022-05-13  Richard Biener  <rguenther@suse.de>\n \n \t* supergraph.cc: Re-order gimple-fold.h include."}, {"sha": "1f825cfde7b2bd2c793bce042200512aa184f426", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,21 @@\n+2022-05-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c/105492\n+\t* c-attribs.cc (handle_mode_attribute): Don't fix broken typedefs\n+\there.\n+\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-common.cc (ARRAY_SIZE): Use ARRAY_SIZE.\n+\t(c_common_nodes_and_builtins): Likewise.\n+\t* c-format.cc (check_tokens): Likewise.\n+\t(check_plain): Likewise.\n+\t* c-pragma.cc (c_pp_lookup_pragma): Likewise.\n+\t(init_pragma): Likewise.\n+\t* known-headers.cc (get_string_macro_hint): Likewise.\n+\t(get_stdlib_header_for_name): Likewise.\n+\t* c-attribs.cc: Likewise.\n+\n 2022-05-13  Richard Biener  <rguenther@suse.de>\n \n \t* c-omp.cc: Remove gimple-fold.h include."}, {"sha": "30c385820b8e167768a53678c57c8f646d70a2f1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,7 @@\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-decl.cc (match_builtin_function_types): Use ARRAY_SIZE.\n+\n 2022-05-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.cc (c_parse_init): Register omp_all_memory as keyword"}, {"sha": "9b11d50458e087cf1056e4e2970bd6da5a06f044", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,14 @@\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* module.cc (depset::entity_kind_name): Use ARRAY_SIZE.\n+\t* name-lookup.cc (get_std_name_hint): Likewise.\n+\t* parser.cc (cp_parser_new): Likewise.\n+\n+2022-05-16  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* pt.cc (tsubst_omp_clauses): Added OMP_CLAUSE_HAS_DEVICE_ADDR.\n+\t* semantics.cc (finish_omp_clauses): Added template decl processing.\n+\n 2022-05-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100502"}, {"sha": "d3ac0bc1f62d243c1e8e6e40fe591e833ae380bf", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,28 @@\n+2022-05-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 60bfa0ee7.\n+\t* dmd/VERSION: Update version to v2.100.0.\n+\t* d-builtins.cc (d_init_versions): Update for new front-end interface.\n+\t* d-codegen.cc (d_decl_context): Use resolvedLinkage to get\n+\tdeclaration linkage.\n+\t(build_struct_literal): Track offset in bits.\n+\t* d-gimplify.cc (d_gimplify_modify_expr): Check both operands for a\n+\tbit-field reference.\n+\t* d-lang.cc (d_handle_option): Handle -fpreview=bitfields, remove\n+\t-frevert=markdown and -ftransition=vmarkdown.\n+\t(d_post_options): Set flag_rtti and flag_exceptions if -fno-druntime\n+\twas seen on command-line.\n+\t(d_parse_file): Update for new front-end interface.\n+\t(d_type_promotes_to): Use resolvedLinkage to get declaration linkage.\n+\t* decl.cc (make_thunk): Likewise.\n+\t* expr.cc (ExprVisitor::visit (CatAssignExp *)): Remove lowering for\n+\tappending of an element or array to another array.\n+\t* lang.opt (fpreview=bitfields): New option.\n+\t(frevert=markdown): Remove.\n+\t(ftransition=vmarkdown): Remove.\n+\t* types.cc (layout_aggregate_members): Ignore anonymous fields in\n+\ttotal count.\n+\n 2022-04-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 313d28b3d."}, {"sha": "09c741e0b65d3a15e4965398b46471901b4d3b99", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,10 @@\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* frontend-passes.cc (gfc_code_walker): Use ARRAY_SIZE.\n+\t* openmp.cc (gfc_match_omp_context_selector_specification): Likewise.\n+\t* trans-intrinsic.cc (conv_intrinsic_ieee_builtin): Likewise.\n+\t* trans-types.cc (gfc_get_array_descr_info): Likewise.\n+\n 2022-05-13  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* trans-openmp.cc (gfc_trans_omp_clauses): When mapping nondescriptor"}, {"sha": "341766be9ca2d5e2f7541a4c274b9c22039af8f1", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,9 @@\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* jit-builtins.cc (find_builtin_by_name): Use ARRAY_SIZE.\n+\t(get_string_for_type_id): Likewise.\n+\t* jit-recording.cc (recording::context::context): Likewise.\n+\n 2022-04-14  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* jit-playback.cc (new_bitcast): Cast values returned by tree_to_uhwi"}, {"sha": "31c3bc25493e7e2c5f5923ce26833a98a1f38bce", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,8 @@\n+2022-05-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-common.cc (lto_resolution_read): Use ARRAY_SIZE.\n+\t* lto-lang.cc (lto_init): Likewise.\n+\n 2022-03-23  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/104285"}, {"sha": "3d963eb02db459891605128b940c18a6fa51dd6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,29 @@\n+2022-05-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/105103\n+\t* gcc.dg/analyzer/stdarg-1.c: New test.\n+\t* gcc.dg/analyzer/stdarg-2.c: New test.\n+\t* gcc.dg/analyzer/stdarg-fmtstring-1.c: New test.\n+\t* gcc.dg/analyzer/stdarg-lto-1-a.c: New test.\n+\t* gcc.dg/analyzer/stdarg-lto-1-b.c: New test.\n+\t* gcc.dg/analyzer/stdarg-lto-1.h: New test.\n+\t* gcc.dg/analyzer/stdarg-sentinel-1.c: New test.\n+\t* gcc.dg/analyzer/stdarg-types-1.c: New test.\n+\t* gcc.dg/analyzer/stdarg-types-2.c: New test.\n+\n+2022-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/105577\n+\t* g++.dg/torture/pr105577.C: New testcase.\n+\n+2022-05-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/torture/pr105598.c: New testcase.\n+\n+2022-05-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr105587.c: New test.\n+\n 2022-05-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/100502"}, {"sha": "344f79598c394ac253ea2c190ec832686d15f18e", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,9 @@\n+2022-05-16  Marcel Vollweiler  <marcel@codesourcery.com>\n+\n+\t* testsuite/libgomp.c++/target-has-device-addr-7.C: New test.\n+\t* testsuite/libgomp.c++/target-has-device-addr-8.C: New test.\n+\t* testsuite/libgomp.c++/target-has-device-addr-9.C: New test.\n+\n 2022-05-13  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/target-nowait-array-section.f90: New test."}, {"sha": "5541f205333072e344f2c1b68dc5d3e1fd414f14", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,14 @@\n+2022-05-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* libdruntime/MERGE: Merge upstream druntime 94bd5bcb.\n+\t* libdruntime/Makefile.am (ALL_DRUNTIME_INSTALL_DSOURCES): Add\n+\t$(DRUNTIME_DSOURCES_ELF).\n+\t(ALL_DRUNTIME_SOURCES): Likewise.\n+\t(DRUNTIME_DSOURCES_ELF): New variable.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* src/MERGE: Merge upstream phobos 3a1cd9a01.\n+\t* testsuite/libphobos.init_fini/custom_gc.d: Update test.\n+\n 2022-04-28  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/MERGE: Merge upstream druntime e361d200."}, {"sha": "794fbfecb40a2b0572c0c9a9a403ebe99c168caa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/702bd11fa7ddfce0d24581251e979e8a6d7c0d4d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=702bd11fa7ddfce0d24581251e979e8a6d7c0d4d", "patch": "@@ -1,3 +1,27 @@\n+2022-05-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/prerequisites.xml: Fix attributes for external\n+\thyperlink.\n+\t* doc/html/manual/setup.html: Regenerate.\n+\n+2022-05-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2023.xml: Update with gcc-12 support.\n+\t* doc/html/*: Regenerate.\n+\n+2022-05-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/intro.xml: Include new chapter.\n+\t* doc/xml/manual/status_cxx2020.xml: Tweak release numbers.\n+\t* doc/xml/manual/status_cxx2023.xml: New file.\n+\t* doc/html/*: Regenerate.\n+\n+2022-05-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/html/manual/status.html: Regenerate.\n+\t* doc/xml/manual/status_cxx2020.xml: Fix supported version for\n+\tC++20 bit operations.\n+\n 2022-05-13  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/std_thread.h (thread::_State, thread::_State_ptr):"}]}