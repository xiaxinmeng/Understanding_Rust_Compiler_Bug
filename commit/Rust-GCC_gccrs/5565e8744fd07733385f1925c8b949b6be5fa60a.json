{"sha": "5565e8744fd07733385f1925c8b949b6be5fa60a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2NWU4NzQ0ZmQwNzczMzM4NWYxOTI1YzhiOTQ5YjZiZTVmYTYwYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-09-14T18:31:13Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-09-14T18:31:13Z"}, "message": "combine.c (simplify_comparison): Convert (ne (and (lshiftrt (xor X CST) Y) 1) 0) into (eq (and (lshiftrt X Y) 1) 0).\n\n\t* combine.c (simplify_comparison): Convert\n\t(ne (and (lshiftrt (xor X CST) Y) 1) 0) into\n\t(eq (and (lshiftrt X Y) 1) 0).\n\nFrom-SVN: r71385", "tree": {"sha": "a5b0797e155ac4bac07ebe1b9ec20cf022d82477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b0797e155ac4bac07ebe1b9ec20cf022d82477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5565e8744fd07733385f1925c8b949b6be5fa60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5565e8744fd07733385f1925c8b949b6be5fa60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5565e8744fd07733385f1925c8b949b6be5fa60a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5565e8744fd07733385f1925c8b949b6be5fa60a/comments", "author": null, "committer": null, "parents": [{"sha": "83a00410f54676140ee0aa3f057f99ea6086d8a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a00410f54676140ee0aa3f057f99ea6086d8a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a00410f54676140ee0aa3f057f99ea6086d8a2"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "bf770b8c9d376bc19b42b14caee6320356c08d63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5565e8744fd07733385f1925c8b949b6be5fa60a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5565e8744fd07733385f1925c8b949b6be5fa60a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5565e8744fd07733385f1925c8b949b6be5fa60a", "patch": "@@ -1,3 +1,9 @@\n+2003-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* combine.c (simplify_comparison): Convert\n+\t(ne (and (lshiftrt (xor X CST) Y) 1) 0) into\n+\t(eq (and (lshiftrt X Y) 1) 0).\n+\n 2003-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* alias.c: Follow spelling conventions."}, {"sha": "c18c36e80917c4ba7f2351a1a77047e9990b7949", "filename": "gcc/combine.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5565e8744fd07733385f1925c8b949b6be5fa60a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5565e8744fd07733385f1925c8b949b6be5fa60a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=5565e8744fd07733385f1925c8b949b6be5fa60a", "patch": "@@ -10983,19 +10983,30 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \t    }\n \n \t  /* Convert (ne (and (lshiftrt (not X)) 1) 0) to\n-\t     (eq (and (lshiftrt X) 1) 0).  */\n+\t     (eq (and (lshiftrt X) 1) 0).\n+\t     Also handle the case where (not X) is expressed using xor.  */\n \t  if (const_op == 0 && equality_comparison_p\n \t      && XEXP (op0, 1) == const1_rtx\n-\t      && GET_CODE (XEXP (op0, 0)) == LSHIFTRT\n-\t      && GET_CODE (XEXP (XEXP (op0, 0), 0)) == NOT)\n-\t    {\n-\t      op0 = simplify_and_const_int\n-\t\t(op0, mode,\n-\t\t gen_rtx_LSHIFTRT (mode, XEXP (XEXP (XEXP (op0, 0), 0), 0),\n-\t\t\t\t   XEXP (XEXP (op0, 0), 1)),\n-\t\t (HOST_WIDE_INT) 1);\n-\t      code = (code == NE ? EQ : NE);\n-\t      continue;\n+\t      && GET_CODE (XEXP (op0, 0)) == LSHIFTRT)\n+\t    {\n+\t      rtx shift_op = XEXP (XEXP (op0, 0), 0);\n+\t      rtx shift_count = XEXP (XEXP (op0, 0), 1);\n+\n+\t      if (GET_CODE (shift_op) == NOT\n+\t\t  || (GET_CODE (shift_op) == XOR\n+\t\t      && GET_CODE (XEXP (shift_op, 1)) == CONST_INT\n+\t\t      && GET_CODE (shift_count) == CONST_INT\n+\t\t      && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n+\t\t      && (INTVAL (XEXP (shift_op, 1))\n+\t\t\t  == (HOST_WIDE_INT) 1 << INTVAL (shift_count))))\n+\t\t{\n+\t\t  op0 = simplify_and_const_int\n+\t\t    (NULL_RTX, mode,\n+\t\t     gen_rtx_LSHIFTRT (mode, XEXP (shift_op, 0), shift_count),\n+\t\t     (HOST_WIDE_INT) 1);\n+\t\t  code = (code == NE ? EQ : NE);\n+\t\t  continue;\n+\t\t}\n \t    }\n \t  break;\n "}]}