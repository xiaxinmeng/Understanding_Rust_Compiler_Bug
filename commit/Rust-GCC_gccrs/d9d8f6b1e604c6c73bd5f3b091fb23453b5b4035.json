{"sha": "d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkOGY2YjFlNjA0YzZjNzNiZDVmM2IwOTFmYjIzNDUzYjViNDAzNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-03-06T09:40:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-03-06T09:40:06Z"}, "message": "parser.c (cp_lexer_set_source_position): New.\n\n2014-03-06  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* parser.c (cp_lexer_set_source_position): New.\n\t(cp_parser_mem_initializer): Use it.\n    \t(cp_parser_postfix_open_square_expression): Likewise.\n    \t(cp_parser_parenthesized_expression_list): Likewise.\n    \t(cp_parser_new_initializer): Likewise.\n    \t(cp_parser_jump_statement): Likewise.\n    \t(cp_parser_initializer): Likewise.\n    \t(cp_parser_functional_cast): Likewise.\n\nFrom-SVN: r208378", "tree": {"sha": "5fcc360ae8bcb23e6d2dc1db58baede17b590377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fcc360ae8bcb23e6d2dc1db58baede17b590377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035/comments", "author": null, "committer": null, "parents": [{"sha": "f3ba16d0589db7548b76f381102759f2c4cc7558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ba16d0589db7548b76f381102759f2c4cc7558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ba16d0589db7548b76f381102759f2c4cc7558"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "70db35c1de9991ca2fa7fbdc3505115d4016e74b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035", "patch": "@@ -1,3 +1,14 @@\n+2014-03-06  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* parser.c (cp_lexer_set_source_position): New.\n+\t(cp_parser_mem_initializer): Use it.\n+    \t(cp_parser_postfix_open_square_expression): Likewise.\n+    \t(cp_parser_parenthesized_expression_list): Likewise.\n+    \t(cp_parser_new_initializer): Likewise.\n+    \t(cp_parser_jump_statement): Likewise.\n+    \t(cp_parser_initializer): Likewise.\n+    \t(cp_parser_functional_cast): Likewise.\n+\n 2014-03-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/60409"}, {"sha": "8bc1126e2382e1608d44cf137d12c13eea4b2d59", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d9d8f6b1e604c6c73bd5f3b091fb23453b5b4035", "patch": "@@ -844,6 +844,14 @@ cp_lexer_set_source_position_from_token (cp_token *token)\n     }\n }\n \n+/* Update the globals input_location and the input file stack from LEXER.  */\n+static inline void\n+cp_lexer_set_source_position (cp_lexer *lexer)\n+{\n+  cp_token *token = cp_lexer_peek_token (lexer);\n+  cp_lexer_set_source_position_from_token (token);\n+}\n+\n /* Return a pointer to the next token in the token stream, but do not\n    consume it.  */\n \n@@ -6359,8 +6367,7 @@ cp_parser_postfix_open_square_expression (cp_parser *parser,\n       if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t{\n \t  bool expr_nonconst_p;\n-\t  cp_token *token = cp_lexer_peek_token (parser->lexer);\n-\t  cp_lexer_set_source_position_from_token (token);\n+\t  cp_lexer_set_source_position (parser->lexer);\n \t  maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t  index = cp_parser_braced_list (parser, &expr_nonconst_p);\n \t  if (flag_cilkplus\n@@ -6673,8 +6680,7 @@ cp_parser_parenthesized_expression_list (cp_parser* parser,\n \t    if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t      {\n \t\t/* A braced-init-list.  */\n-\t\tcp_token *token = cp_lexer_peek_token (parser->lexer);\n-\t\tcp_lexer_set_source_position_from_token (token);\n+\t\tcp_lexer_set_source_position (parser->lexer);\n \t\tmaybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t\texpr = cp_parser_braced_list (parser, &expr_non_constant_p);\n \t\tif (non_constant_p && expr_non_constant_p)\n@@ -7523,8 +7529,7 @@ cp_parser_new_initializer (cp_parser* parser)\n     {\n       tree t;\n       bool expr_non_constant_p;\n-      cp_token *token = cp_lexer_peek_token (parser->lexer);\n-      cp_lexer_set_source_position_from_token (token);\n+      cp_lexer_set_source_position (parser->lexer);\n       maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       t = cp_parser_braced_list (parser, &expr_non_constant_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (t) = 1;\n@@ -10681,8 +10686,7 @@ cp_parser_jump_statement (cp_parser* parser)\n \n \tif (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n \t  {\n-\t    cp_token *token = cp_lexer_peek_token (parser->lexer);\n-\t    cp_lexer_set_source_position_from_token (token);\n+\t    cp_lexer_set_source_position (parser->lexer);\n \t    maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n \t    expr = cp_parser_braced_list (parser, &expr_non_constant_p);\n \t  }\n@@ -12361,8 +12365,7 @@ cp_parser_mem_initializer (cp_parser* parser)\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n     {\n       bool expr_non_constant_p;\n-      cp_token *token = cp_lexer_peek_token (parser->lexer);\n-      cp_lexer_set_source_position_from_token (token);\n+      cp_lexer_set_source_position (parser->lexer);\n       maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       expression_list = cp_parser_braced_list (parser, &expr_non_constant_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (expression_list) = 1;\n@@ -18816,8 +18819,7 @@ cp_parser_initializer (cp_parser* parser, bool* is_direct_init,\n     }\n   else if (token->type == CPP_OPEN_BRACE)\n     {\n-      cp_token *token = cp_lexer_peek_token (parser->lexer);\n-      cp_lexer_set_source_position_from_token (token);\n+      cp_lexer_set_source_position (parser->lexer);\n       maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       init = cp_parser_braced_list (parser, non_constant_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (init) = 1;\n@@ -23253,8 +23255,7 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n \n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n     {\n-      cp_token *token = cp_lexer_peek_token (parser->lexer);\n-      cp_lexer_set_source_position_from_token (token);\n+      cp_lexer_set_source_position (parser->lexer);\n       maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);\n       expression_list = cp_parser_braced_list (parser, &nonconst_p);\n       CONSTRUCTOR_IS_DIRECT_INIT (expression_list) = 1;"}]}