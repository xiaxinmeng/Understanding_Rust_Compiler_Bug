{"sha": "e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg2YWU3YmFiM2YwMWM3ZDM1ZDM2ZmMxOWMyYTM5YTQ4ZDAxYjY0Yw==", "commit": {"author": {"name": "Li Jia He", "email": "helijia@linux.ibm.com", "date": "2019-02-20T02:35:39Z"}, "committer": {"name": "Li Jia He", "email": "helijia@gcc.gnu.org", "date": "2019-02-20T02:35:39Z"}, "message": "[rs6000] fix PR 88100, range check for vec_splat_{su}{8,16,32}\n\nGCC revision 259524 implemented range check for the vec_splat_{su}{8,16,32}\nbuiltins.  However, as a consequence of the implementation, the range check\nis not done correctly for the expected vspltis[bhw]\u00a0instructions. \u00a0The result\nis that we may not get a valid error message if the valid range of the data\nis exceeded.\n\nAlthough the input of the function prototype of vec_splat_{su}{8,16,32} is\nconst int, the actual data usage range is limited to the data range of 5 bits\nsigned.  We should limit the int_cst.val[0] data to the 5 bit signed data range\nwithout any modification in the input arg0 parameter.  However, the sext_hwi\nfunction intercepts the data of TREE_INT_CST_LOW (arg0) as size bits in the\nsext_hwi (TREE_INT_CST_LOW (arg0), size) statement.  This will cause some of\nthe excess data to fall within the range of 5 bits signed, so that the correct\ndiagnostic information cannot be generated, we need to remove the sext_hwi to\nensure that the input data has not been modified.\n\nThis patch fix range check for the vec_splat_s[8,16,32] builtins.  The argument\nmust be a 5-bit const int as specified for the vspltis[bhw] instructions.\n\nfor gcc/ChangeLog\n\n\tPR target/88100\n\t* gcc/config/rs6000/rs6000.c (rs6000_gimple_fold_builtin)\n\t<case ALTIVEC_BUILTIN_VSPLTISB, ALTIVEC_BUILTIN_VSPLTISH,\n\tALTIVEC_BUILTIN_VSPLTISW>: Don't convert the operand before\n\trange checking it.\n\nfor gcc/testsuite/ChangeLog\n\n\tPR target/88100\n\t* gcc/testsuite/gcc.target/powerpc/pr88100.c: New testcase.\n\nFrom-SVN: r269033", "tree": {"sha": "16f96736c8b6aa41169c68b90183299498ed9670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f96736c8b6aa41169c68b90183299498ed9670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c/comments", "author": {"login": "HLJ2009", "id": 18440836, "node_id": "MDQ6VXNlcjE4NDQwODM2", "avatar_url": "https://avatars.githubusercontent.com/u/18440836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HLJ2009", "html_url": "https://github.com/HLJ2009", "followers_url": "https://api.github.com/users/HLJ2009/followers", "following_url": "https://api.github.com/users/HLJ2009/following{/other_user}", "gists_url": "https://api.github.com/users/HLJ2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/HLJ2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HLJ2009/subscriptions", "organizations_url": "https://api.github.com/users/HLJ2009/orgs", "repos_url": "https://api.github.com/users/HLJ2009/repos", "events_url": "https://api.github.com/users/HLJ2009/events{/privacy}", "received_events_url": "https://api.github.com/users/HLJ2009/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d35a27a8353b57ed11fa1cb7d747edf1c4faa01"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "b18b23cef5effddc82e0660d16cc51a86918eff3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c", "patch": "@@ -1,3 +1,11 @@\n+2019-02-20  Li Jia He  <helijia@linux.ibm.com>\n+\n+\tPR target/88100\n+\t* gcc/config/rs6000/rs6000.c (rs6000_gimple_fold_builtin)\n+\t<case ALTIVEC_BUILTIN_VSPLTISB, ALTIVEC_BUILTIN_VSPLTISH,\n+\tALTIVEC_BUILTIN_VSPLTISW>: Don't convert the operand before\n+\trange checking it.\n+\n 2019-02-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/gcn/gcn.c (print_operand): Fix typo."}, {"sha": "b1249bcf7167e6ff48c1f32f5c1b0a1ce10be948", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c", "patch": "@@ -16105,22 +16105,13 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case ALTIVEC_BUILTIN_VSPLTISH:\n     case ALTIVEC_BUILTIN_VSPLTISW:\n       {\n-\tint size;\n-\tif (fn_code == ALTIVEC_BUILTIN_VSPLTISB)\n-\t  size = 8;\n-\telse if (fn_code == ALTIVEC_BUILTIN_VSPLTISH)\n-\t  size = 16;\n-\telse\n-\t  size = 32;\n-\n \targ0 = gimple_call_arg (stmt, 0);\n \tlhs = gimple_call_lhs (stmt);\n \n \t/* Only fold the vec_splat_*() if the lower bits of arg 0 is a\n \t   5-bit signed constant in range -16 to +15.  */\n \tif (TREE_CODE (arg0) != INTEGER_CST\n-\t    || !IN_RANGE (sext_hwi (TREE_INT_CST_LOW (arg0), size),\n-\t\t\t  -16, 15))\n+\t    || !IN_RANGE (TREE_INT_CST_LOW (arg0), -16, 15))\n \t  return false;\n \tgimple_seq stmts = NULL;\n \tlocation_t loc = gimple_location (stmt);"}, {"sha": "231a6f3bc6fb48eb77bfe1d362bbd8a2bc25e8bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c", "patch": "@@ -1,3 +1,8 @@\n+2019-02-20  Li Jia He  <helijia@linux.ibm.com>\n+\n+\tPR target/88100\n+\t* gcc/testsuite/gcc.target/powerpc/pr88100.c: New testcase.\n+\n 2019-02-19  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gcc.target/arm/pr88850.c: Block -mfloat-abi override."}, {"sha": "4452145ce958edb5a984da044a49e9109a487f65", "filename": "gcc/testsuite/gcc.target/powerpc/pr88100.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr88100.c?ref=e86ae7bab3f01c7d35d36fc19c2a39a48d01b64c", "patch": "@@ -0,0 +1,44 @@\n+/* PR88100.  Verify that rs6000 gimple-folding code handles the\n+   vec_splat_{su}{8,16,32} invalid data properly. */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+vector unsigned char\n+splatu1 (void)\n+{\n+  return vec_splat_u8(0x100);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+}\n+\n+vector unsigned short\n+splatu2 (void)\n+{\n+  return vec_splat_u16(0x10000);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+}\n+\n+vector unsigned int\n+splatu3 (void)\n+{\n+  return vec_splat_u32(0x10000000);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+}\n+\n+vector signed char\n+splats1 (void)\n+{\n+  return vec_splat_s8(0x100);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+}\n+\n+vector signed short\n+splats2 (void)\n+{\n+  return vec_splat_s16(0x10000);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+}\n+\n+vector signed int\n+splats3 (void)\n+{\n+  return vec_splat_s32(0x10000000);/* { dg-error \"argument 1 must be a 5-bit signed literal\" } */\n+}"}]}