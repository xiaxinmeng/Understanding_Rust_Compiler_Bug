{"sha": "e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNiM2ZhNDVhNGY5NDgxNzJiNWE2N2M5YjVjODMwZTU1MTlhNmQyNA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-08-08T12:08:31Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-08-08T12:08:31Z"}, "message": "driver-sparc.c: New file.\n\n\tgcc:\n\t* config/sparc/driver-sparc.c: New file.\n\t* config/sparc/x-sparc: New file.\n\t* config.host: Use driver-sparc.o, sparc/x-sparc on\n\tsparc*-*-solaris2*.\n\t* config/sparc/sparc.opt (native): New value for enum\n\tprocessor_type.\n\t* config/sparc/sparc-opts.h (PROCESSOR_NATIVE): Declare.\n\t* config/sparc/sparc.c (sparc_option_override): Abort if\n\tPROCESSOR_NATIVE gets here.\n\t* config/sparc/sol2.h [__sparc__] (host_detect_local_cpu): Declare.\n\t(EXTRA_SPEC_FUNCTIONS, MCPU_MTUNE_NATIVE_SPECS,\n\tDRIVER_SELF_SPECS): Define.\n\t* doc/invoke.texi (SPARC Options, -mcpu): Document native.\n\t(SPARC Options, -mtune): Likewise.\n\t* configure.ac (EXTRA_GCC_LIBS): Check for libkstat.\n\tSubstitute result.\n\t* configure: Regenerate.\n\t* Makefile.in (EXTRA_GCC_LIBS): Set.\n\t(xgcc$(exeext)): Add $(EXTRA_GCC_LIBS).\n\t(cpp$(exeext)): Likewise.\n\n\tgcc/cp:\n\t* Make-lang.in (g++$(exeext)): Add $(EXTRA_GCC_LIBS).\n\n\tgcc/fortran:\n\t* Make-lang.in (gfortran$(exeext)): Add $(EXTRA_GCC_LIBS).\n\n\tgcc/go:\n\t* Make-lang.in (gccgo$(exeext)): Add $(EXTRA_GCC_LIBS).\n\n\tgcc/java:\n\t* Make-lang.in ($(XGCJ)$(exeext)): Add $(EXTRA_GCC_LIBS).\n\nFrom-SVN: r177559", "tree": {"sha": "439a79b47394f0d2379508ef29b4d60d24bf72f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/439a79b47394f0d2379508ef29b4d60d24bf72f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce6bfa50fa3131aea4b3506f2fd5fe0f5274840c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce6bfa50fa3131aea4b3506f2fd5fe0f5274840c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce6bfa50fa3131aea4b3506f2fd5fe0f5274840c"}], "stats": {"total": 176, "additions": 166, "deletions": 10}, "files": [{"sha": "f8f4ea608c0b015a639ee4b656b93ae2133d482b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -1,3 +1,26 @@\n+2011-08-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/sparc/driver-sparc.c: New file.\n+\t* config/sparc/x-sparc: New file.\n+\t* config.host: Use driver-sparc.o, sparc/x-sparc on\n+\tsparc*-*-solaris2*.\n+\t* config/sparc/sparc.opt (native): New value for enum\n+\tprocessor_type.\n+\t* config/sparc/sparc-opts.h (PROCESSOR_NATIVE): Declare.\n+\t* config/sparc/sparc.c (sparc_option_override): Abort if\n+\tPROCESSOR_NATIVE gets here.\n+\t* config/sparc/sol2.h [__sparc__] (host_detect_local_cpu): Declare.\n+\t(EXTRA_SPEC_FUNCTIONS, MCPU_MTUNE_NATIVE_SPECS,\n+\tDRIVER_SELF_SPECS): Define.\n+\t* doc/invoke.texi (SPARC Options, -mcpu): Document native.\n+\t(SPARC Options, -mtune): Likewise.\n+\t* configure.ac (EXTRA_GCC_LIBS): Check for libkstat.\n+\tSubstitute result.\n+\t* configure: Regenerate.\n+\t* Makefile.in (EXTRA_GCC_LIBS): Set.\n+\t(xgcc$(exeext)): Add $(EXTRA_GCC_LIBS).\n+\t(cpp$(exeext)): Likewise.\n+\n 2011-08-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vrp.c (extract_range_from_unary_expr_1): New function,"}, {"sha": "368100b0835112c3bacb45fb778bffd7af4194d5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -714,6 +714,9 @@ EXTRA_OBJS = @extra_objs@\n # the gcc driver.\n EXTRA_GCC_OBJS =@extra_gcc_objs@\n \n+# List of extra libraries that should be linked with the gcc driver.\n+EXTRA_GCC_LIBS = @EXTRA_GCC_LIBS@\n+\n # List of additional header files to install.\n EXTRA_HEADERS =@extra_headers_list@\n \n@@ -1808,15 +1811,17 @@ libcommon.a: $(OBJS-libcommon)\n xgcc$(exeext): $(GCC_OBJS) gccspec.o libcommon-target.a $(LIBDEPS) \\\n \t$(EXTRA_GCC_OBJS)\n \t+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ $(GCC_OBJS) \\\n-\t  gccspec.o $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBS)\n+\t  gccspec.o $(EXTRA_GCC_OBJS) libcommon-target.a \\\n+\t  $(EXTRA_GCC_LIBS) $(LIBS)\n \n # cpp is to cpp0 as gcc is to cc1.\n # The only difference from xgcc is that it's linked with cppspec.o\n # instead of gccspec.o.\n cpp$(exeext): $(GCC_OBJS) cppspec.o libcommon-target.a $(LIBDEPS) \\\n \t$(EXTRA_GCC_OBJS)\n \t+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ $(GCC_OBJS) \\\n-\t  cppspec.o $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBS)\n+\t  cppspec.o $(EXTRA_GCC_OBJS) libcommon-target.a \\\n+\t  $(EXTRA_GCC_LIBS) $(LIBS)\n \n # Dump a specs file to make -B./ read these specs over installed ones.\n $(SPECS): xgcc$(exeext)"}, {"sha": "61a00b57843455d8ff9913d06c001d5209a34b0b", "filename": "gcc/config.host", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -157,6 +157,14 @@ case ${host} in\n \t;;\n     esac\n     ;;\n+  sparc*-*-solaris2*)\n+    case ${target} in\n+      sparc*-*-solaris2*)\n+\thost_extra_gcc_objs=\"driver-sparc.o\"\n+\thost_xmake_file=\"${host_xmake_file} sparc/x-sparc\"\n+\t;;\n+    esac\n+    ;;\n esac\n \n # Machine-specific settings."}, {"sha": "86afbbefe52fbb8335040931eabeaf5f9ce12dfc", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -157,6 +157,22 @@ along with GCC; see the file COPYING3.  If not see\n %{!m32:%{!m64:%(cpp_arch_default)}} \\\n \"\n \n+/* -mcpu=native handling only makes sense with compiler running on\n+   a SPARC chip.  */\n+#if defined(__sparc__)\n+extern const char *host_detect_local_cpu (int argc, const char **argv);\n+# define EXTRA_SPEC_FUNCTIONS\t\t\t\t\t\t\\\n+  { \"local_cpu_detect\", host_detect_local_cpu },\n+\n+# define MCPU_MTUNE_NATIVE_SPECS\t\t\t\t\t\\\n+   \" %{mcpu=native:%<mcpu=native %:local_cpu_detect(cpu)}\"\t\t\\\n+   \" %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n+#else\n+# define MCPU_MTUNE_NATIVE_SPECS \"\"\n+#endif\n+\n+#define DRIVER_SELF_SPECS MCPU_MTUNE_NATIVE_SPECS\n+\n #undef\tCC1_SPEC\n #if DEFAULT_ARCH32_P\n #define CC1_SPEC \"\\"}, {"sha": "aef69b4d3c9698d51337a59dce05d9ff933d0ab4", "filename": "gcc/config/sparc/sparc-opts.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-opts.h?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -41,7 +41,8 @@ enum processor_type {\n   PROCESSOR_ULTRASPARC,\n   PROCESSOR_ULTRASPARC3,\n   PROCESSOR_NIAGARA,\n-  PROCESSOR_NIAGARA2\n+  PROCESSOR_NIAGARA2,\n+  PROCESSOR_NATIVE\n };\n \n #endif"}, {"sha": "d4c64d01d26539ad206dca71e200906a47988ab2", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -911,6 +911,8 @@ sparc_option_override (void)\n     case PROCESSOR_NIAGARA2:\n       sparc_costs = &niagara2_costs;\n       break;\n+    case PROCESSOR_NATIVE:\n+      gcc_unreachable ();\n     };\n \n #ifdef TARGET_DEFAULT_LONG_DOUBLE_128"}, {"sha": "84bf2883c4b754f3adf71622bb1262acc0a4e571", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -100,6 +100,9 @@ Schedule code for given CPU\n Enum\n Name(sparc_processor_type) Type(enum processor_type)\n \n+EnumValue\n+Enum(sparc_processor_type) String(native) Value(PROCESSOR_NATIVE) DriverOnly\n+\n EnumValue\n Enum(sparc_processor_type) String(v7) Value(PROCESSOR_V7)\n "}, {"sha": "8ffe93ac79ec477e4d68ddb4c0c1e0891d2d39f0", "filename": "gcc/configure", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -735,6 +735,7 @@ LIBICONV_DEP\n LTLIBICONV\n LIBICONV\n LDEXP_LIB\n+EXTRA_GCC_LIBS\n GNAT_LIBEXC\n COLLECT2_LIBS\n CXXCPP\n@@ -8744,6 +8745,69 @@ GNAT_LIBEXC=\"$LIBS\"\n LIBS=\"$save_LIBS\"\n \n \n+# To support -mcpu=native on Solaris/SPARC, we need libkstat.\n+save_LIBS=\"$LIBS\"\n+LIBS=\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing kstat_open\" >&5\n+$as_echo_n \"checking for library containing kstat_open... \" >&6; }\n+if test \"${ac_cv_search_kstat_open+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char kstat_open ();\n+int\n+main ()\n+{\n+return kstat_open ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_lib in '' kstat; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_search_kstat_open=$ac_res\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if test \"${ac_cv_search_kstat_open+set}\" = set; then :\n+  break\n+fi\n+done\n+if test \"${ac_cv_search_kstat_open+set}\" = set; then :\n+\n+else\n+  ac_cv_search_kstat_open=no\n+fi\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_kstat_open\" >&5\n+$as_echo \"$ac_cv_search_kstat_open\" >&6; }\n+ac_res=$ac_cv_search_kstat_open\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+\n+fi\n+\n+EXTRA_GCC_LIBS=\"$LIBS\"\n+LIBS=\"$save_LIBS\"\n+\n+\n # Some systems put ldexp and frexp in libm instead of libc; assume\n # they're both in the same place.  jcf-dump needs them.\n save_LIBS=\"$LIBS\"\n@@ -17763,7 +17827,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17766 \"configure\"\n+#line 17830 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17869,7 +17933,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17872 \"configure\"\n+#line 17936 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "a897b81943cc31395bd0c0cf427f51802a6ed76c", "filename": "gcc/configure.ac", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -974,6 +974,14 @@ GNAT_LIBEXC=\"$LIBS\"\n LIBS=\"$save_LIBS\"\n AC_SUBST(GNAT_LIBEXC)\n \n+# To support -mcpu=native on Solaris/SPARC, we need libkstat.\n+save_LIBS=\"$LIBS\"\n+LIBS=\n+AC_SEARCH_LIBS(kstat_open, kstat)\n+EXTRA_GCC_LIBS=\"$LIBS\"\n+LIBS=\"$save_LIBS\"\n+AC_SUBST(EXTRA_GCC_LIBS)\n+\n # Some systems put ldexp and frexp in libm instead of libc; assume\n # they're both in the same place.  jcf-dump needs them.\n save_LIBS=\"$LIBS\""}, {"sha": "8c74b2ddff89c792e54a727371a8cd7af0a3ef6a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -1,3 +1,7 @@\n+2011-08-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Make-lang.in (g++$(exeext)): Add $(EXTRA_GCC_LIBS).\n+\n 2011-08-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/48993"}, {"sha": "6944ce972a8a8aecc079ad1dff0ffe55d5f63b54", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -63,7 +63,8 @@ g++spec.o: $(srcdir)/cp/g++spec.c $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \\\n GXX_OBJS = $(GCC_OBJS) g++spec.o\n g++$(exeext): $(GXX_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)\n \t+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n-\t  $(GXX_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBS)\n+\t  $(GXX_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \\\n+\t  $(EXTRA_GCC_LIBS) $(LIBS)\n \n # Create a version of the g++ driver which calls the cross-compiler.\n g++-cross$(exeext): g++$(exeext)"}, {"sha": "30c58b229d52b55d25a2eda2953fe7bb846fab81", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -17263,6 +17263,11 @@ for machine type @var{cpu_type}.  Supported values for @var{cpu_type} are\n @samp{sparclet}, @samp{tsc701}, @samp{v9}, @samp{ultrasparc},\n @samp{ultrasparc3}, @samp{niagara} and @samp{niagara2}.\n \n+Native Solaris toolchains also support the value @samp{native},\n+which selects the best architecture option for the host processor.\n+@option{-mcpu=native} has no effect if GCC does not recognize\n+the processor.\n+\n Default instruction scheduling parameters are used for values that select\n an architecture and not an implementation.  These are @samp{v7}, @samp{v8},\n @samp{sparclite}, @samp{sparclet}, @samp{v9}.\n@@ -17327,7 +17332,8 @@ The same values for @option{-mcpu=@var{cpu_type}} can be used for\n that select a particular CPU implementation.  Those are @samp{cypress},\n @samp{supersparc}, @samp{hypersparc}, @samp{leon}, @samp{f930}, @samp{f934},\n @samp{sparclite86x}, @samp{tsc701}, @samp{ultrasparc}, @samp{ultrasparc3},\n-@samp{niagara}, and @samp{niagara2}.\n+@samp{niagara}, and @samp{niagara2}.  With native Solaris toolchains,\n+@samp{native} can also be used.\n \n @item -mv8plus\n @itemx -mno-v8plus"}, {"sha": "2ead4fadebbb6949bbefbccf250cd84bfe2a25f0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -1,3 +1,7 @@\n+2011-08-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Make-lang.in (gfortran$(exeext)): Add $(EXTRA_GCC_LIBS).\n+\n 2011-08-07  Janus Weil  <janus@gcc.gnu.org>\n \t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n "}, {"sha": "9f524b3bce9cf499ebb3550293d53e8c92552bdf", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -88,7 +88,8 @@ GFORTRAN_D_OBJS = $(GCC_OBJS) gfortranspec.o\n gfortran$(exeext): $(GFORTRAN_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \\\n \t$(LIBDEPS)\n \t+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n-\t  $(GFORTRAN_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBS)\n+\t  $(GFORTRAN_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \\\n+\t  $(EXTRA_GCC_LIBS) $(LIBS)\n \n # Create a version of the gfortran driver which calls the cross-compiler.\n gfortran-cross$(exeext): gfortran$(exeext)"}, {"sha": "549bc03712f7c2980857aa0f35b646b0629bd51c", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -1,3 +1,7 @@\n+2011-08-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Make-lang.in (gccgo$(exeext)): Add $(EXTRA_GCC_LIBS).\n+\n 2011-08-02  Roberto Lublinerman  <rluble@gmail.com>\n \n \t* Make-lang.in (GO_OBJS): Add go/ast-dump.o."}, {"sha": "1fe43f57ce1b5f6bfc306a668785c80e5ee8528e", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -39,7 +39,8 @@ gospec.o: $(srcdir)/go/gospec.c $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) \\\n GCCGO_OBJS = $(GCC_OBJS) gospec.o\n gccgo$(exeext): $(GCCGO_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)\n \t$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n-\t  $(GCCGO_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBS)\n+\t  $(GCCGO_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \\\n+\t  $(EXTRA_GCC_LIBS) $(LIBS)\n \n # Use strict warnings.\n go-warn = $(STRICT_WARN)"}, {"sha": "21d29e4b26fe9d1e0cbaa72742eb069efbb7c478", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -1,3 +1,7 @@\n+2011-08-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Make-lang.in ($(XGCJ)$(exeext)): Add $(EXTRA_GCC_LIBS).\n+\n 2011-07-19  Richard Guenther  <rguenther@suse.de>\n \n \t* builtins.c (static): Use fold_build_pointer_plus."}, {"sha": "6dd2f09dca8f4d7ae48422fe3668b23909ac309b", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3b3fa45a4f948172b5a67c9b5c830e5519a6d24/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=e3b3fa45a4f948172b5a67c9b5c830e5519a6d24", "patch": "@@ -66,7 +66,8 @@ jvspec.o: $(srcdir)/java/jvspec.c $(SYSTEM_H) coretypes.h $(TM_H) \\\n $(XGCJ)$(exeext): $(GCC_OBJS) jvspec.o java/jcf-path.o \\\n \t   libcommon-target.a $(LIBDEPS) $(EXTRA_GCC_OBJS)\n \t+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ $(GCC_OBJS) \\\n-\t  jvspec.o java/jcf-path.o $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBS)\n+\t  jvspec.o java/jcf-path.o $(EXTRA_GCC_OBJS) libcommon-target.a \\\n+\t  $(EXTRA_GCC_LIBS) $(LIBS)\n \n # Create a version of the $(XGCJ) driver which calls the cross-compiler.\n $(XGCJ)-cross$(exeext): $(XGCJ)$(exeext)"}]}