{"sha": "320aba9c08dfc4c677a90a5c3fa152ff90c674b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwYWJhOWMwOGRmYzRjNjc3YTkwYTVjM2ZhMTUyZmY5MGM2NzRiNA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-07-08T21:59:51Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-07-08T21:59:51Z"}, "message": "(function_arg): Add explicit checks for FIELD_DECLs.\n\n(mips_function_value): Add explicit checks for FIELD_DECLs, and save\nthem in the array FIELDS.  When returning structure with 1 float field,\nenclose it in a PARALLEL and set the PARALLEL mode correctly.\n\nFrom-SVN: r12412", "tree": {"sha": "7146c693ba33647272fdad7890ff11f58adea80e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7146c693ba33647272fdad7890ff11f58adea80e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/320aba9c08dfc4c677a90a5c3fa152ff90c674b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320aba9c08dfc4c677a90a5c3fa152ff90c674b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320aba9c08dfc4c677a90a5c3fa152ff90c674b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320aba9c08dfc4c677a90a5c3fa152ff90c674b4/comments", "author": null, "committer": null, "parents": [{"sha": "f7a61b839f7d938fc37a9b9fd671bbd7800f1d09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a61b839f7d938fc37a9b9fd671bbd7800f1d09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a61b839f7d938fc37a9b9fd671bbd7800f1d09"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "3c95564e8f779623be6c5280e56963a98cfe94e8", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320aba9c08dfc4c677a90a5c3fa152ff90c674b4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320aba9c08dfc4c677a90a5c3fa152ff90c674b4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=320aba9c08dfc4c677a90a5c3fa152ff90c674b4", "patch": "@@ -3070,7 +3070,8 @@ function_arg (cum, mode, type, named)\n \n \t  /* First check to see if there is any such field.  */\n \t  for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n-\t    if (TREE_CODE (TREE_TYPE (field)) == REAL_TYPE\n+\t    if (TREE_CODE (field) == FIELD_DECL\n+\t\t&& TREE_CODE (TREE_TYPE (field)) == REAL_TYPE\n \t\t&& TYPE_PRECISION (TREE_TYPE (field)) == BITS_PER_WORD\n \t\t&& (TREE_INT_CST_LOW (DECL_FIELD_BITPOS (field))\n \t\t    % BITS_PER_WORD == 0))\n@@ -3111,7 +3112,9 @@ function_arg (cum, mode, type, named)\n \t\t  rtx reg;\n \n \t\t  for (; field; field = TREE_CHAIN (field))\n-\t\t    if (TREE_INT_CST_LOW (DECL_FIELD_BITPOS (field)) >= bitpos)\n+\t\t    if (TREE_CODE (field) == FIELD_DECL\n+\t\t\t&& (TREE_INT_CST_LOW (DECL_FIELD_BITPOS (field))\n+\t\t\t    >= bitpos))\n \t\t      break;\n \n \t\t  if (field\n@@ -5733,35 +5736,46 @@ mips_function_value (valtype, func)\n     {\n       /* A struct with only one or two floating point fields is returned in\n \t the floating point registers.  */\n-      tree field;\n+      tree field, fields[2];\n       int i;\n \n       for (i = 0, field = TYPE_FIELDS (valtype); field;\n-\t   field = TREE_CHAIN (field), i++)\n+\t   field = TREE_CHAIN (field))\n \t{\n-\t  /* ??? For C++, must ignore everything that isn't a FIELD_DECL.  */\n+\t  if (TREE_CODE (field) != FIELD_DECL)\n+\t    continue;\n \t  if (TREE_CODE (TREE_TYPE (field)) != REAL_TYPE || i >= 2)\n \t    break;\n+\n+\t  fields[i++] = field;\n \t}\n \t  \n       /* Must check i, so that we reject structures with no elements.  */\n       if (! field)\n \t{\n \t  if (i == 1)\n \t    {\n-\t      mode = TYPE_MODE (TYPE_FIELDS (valtype));\n-\t      reg = FP_RETURN;\n+\t      /* The structure has DImode, but we don't allow DImode values\n+\t\t in FP registers, so we use a PARALLEL even though it isn't\n+\t\t strictly necessary.  */\n+\t      enum machine_mode field_mode = TYPE_MODE (TREE_TYPE (fields[0]));\n+\n+\t      return gen_rtx (PARALLEL, mode,\n+\t\t\t      gen_rtvec (1,\n+\t\t\t\t\t gen_rtx (EXPR_LIST, VOIDmode,\n+\t\t\t\t\t\t  gen_rtx (REG, field_mode, FP_RETURN),\n+\t\t\t\t\t\t  const0_rtx)));\n \t    }\n \t  else if (i == 2)\n \t    {\n \t      enum machine_mode first_mode\n-\t\t= TYPE_MODE (TREE_TYPE (TYPE_FIELDS (valtype)));\n+\t\t= TYPE_MODE (TREE_TYPE (fields[0]));\n \t      enum machine_mode second_mode\n-\t\t= TYPE_MODE (TREE_TYPE (TREE_CHAIN (TYPE_FIELDS (valtype))));\n+\t\t= TYPE_MODE (TREE_TYPE (fields[1]));\n \t      int first_offset\n-\t\t= TREE_INT_CST_LOW (DECL_FIELD_BITPOS (TYPE_FIELDS (valtype)));\n+\t\t= TREE_INT_CST_LOW (DECL_FIELD_BITPOS (fields[0]));\n \t      int second_offset\n-\t\t= TREE_INT_CST_LOW (DECL_FIELD_BITPOS (TREE_CHAIN (TYPE_FIELDS (valtype))));\n+\t\t= TREE_INT_CST_LOW (DECL_FIELD_BITPOS (fields[1]));\n \n \t      return gen_rtx (PARALLEL, mode,\n \t\t\t      gen_rtvec (2,"}]}