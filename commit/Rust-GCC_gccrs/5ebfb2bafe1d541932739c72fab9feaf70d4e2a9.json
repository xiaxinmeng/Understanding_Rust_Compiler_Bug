{"sha": "5ebfb2bafe1d541932739c72fab9feaf70d4e2a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWViZmIyYmFmZTFkNTQxOTMyNzM5YzcyZmFiOWZlYWY3MGQ0ZTJhOQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-04-08T17:05:33Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-04-08T17:05:33Z"}, "message": "Fix mains args in eabi; use reg_names to print out registers\n\nFrom-SVN: r11673", "tree": {"sha": "bc9b143d6810f43f17a2982857726d05d2406683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc9b143d6810f43f17a2982857726d05d2406683"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ebfb2bafe1d541932739c72fab9feaf70d4e2a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ebfb2bafe1d541932739c72fab9feaf70d4e2a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ebfb2bafe1d541932739c72fab9feaf70d4e2a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ebfb2bafe1d541932739c72fab9feaf70d4e2a9/comments", "author": null, "committer": null, "parents": [{"sha": "cdf5b8851c9a19c17fe865fa7bb1dc3b7ee30432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdf5b8851c9a19c17fe865fa7bb1dc3b7ee30432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdf5b8851c9a19c17fe865fa7bb1dc3b7ee30432"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "9a35b2f212dcf67eaf292950d97bd4ead91474ed", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ebfb2bafe1d541932739c72fab9feaf70d4e2a9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ebfb2bafe1d541932739c72fab9feaf70d4e2a9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5ebfb2bafe1d541932739c72fab9feaf70d4e2a9", "patch": "@@ -2199,7 +2199,7 @@ print_operand (file, x, code)\n       /* Write second word of DImode or DFmode reference.  Works on register\n \t or non-indexed memory only.  */\n       if (GET_CODE (x) == REG)\n-\tfprintf (file, \"%d\", REGNO (x) + 1);\n+\tfprintf (file, \"%s\", reg_names[REGNO (x) + 1]);\n       else if (GET_CODE (x) == MEM)\n \t{\n \t  /* Handle possible auto-increment.  Since it is pre-increment and\n@@ -2413,7 +2413,7 @@ print_operand (file, x, code)\n     case 'Y':\n       /* Like 'L', for third word of TImode  */\n       if (GET_CODE (x) == REG)\n-\tfprintf (file, \"%d\", REGNO (x) + 2);\n+\tfprintf (file, \"%s\", reg_names[REGNO (x) + 2]);\n       else if (GET_CODE (x) == MEM)\n \t{\n \t  if (GET_CODE (XEXP (x, 0)) == PRE_INC\n@@ -2461,7 +2461,7 @@ print_operand (file, x, code)\n     case 'Z':\n       /* Like 'L', for last word of TImode.  */\n       if (GET_CODE (x) == REG)\n-\tfprintf (file, \"%d\", REGNO (x) + 3);\n+\tfprintf (file, \"%s\", reg_names[REGNO (x) + 3]);\n       else if (GET_CODE (x) == MEM)\n \t{\n \t  if (GET_CODE (XEXP (x, 0)) == PRE_INC\n@@ -3126,7 +3126,7 @@ output_prolog (file, size)\n   if (info->main_save_p)\n     {\n       int regno;\n-      int loc = info->main_save_offset;\n+      int loc = info->main_save_offset + sp_offset;\n       int size = info->main_size;\n \n       for (regno = 3; size > 0; regno++, loc -= reg_size, size -= reg_size)\n@@ -3256,16 +3256,12 @@ output_prolog (file, size)\n \t\tasm_fprintf (file, load_reg, reg_names[regno], loc, reg_names[1]);\n \t    }\n \t  else\n-\t    {\t\t\t/* for large AIX/NT frames, reg 0 above contains -frame size */\n-\t\t\t\t/* for V.4, we need to reload -frame size */\n-\t      loc = info->main_save_offset;\n-\t      if (DEFAULT_ABI == ABI_V4 && info->total_size > 32767)\n-\t\t{\n-\t\t  int neg_size = - info->total_size;\n-\t\t  asm_fprintf (file, \"\\t{liu|lis} %s,%d\\n\\t{oril|ori} %s,%s,%d\\n\",\n-\t\t\t       reg_names[0], (neg_size >> 16) & 0xffff,\n-\t\t\t       reg_names[0], reg_names[0], neg_size & 0xffff);\n-\t\t}\n+\t    {\n+\t      int neg_size = info->main_save_offset - info->total_size;\n+\t      loc = 0;\n+\t      asm_fprintf (file, \"\\t{liu|lis} %s,%d\\n\\t{oril|ori} %s,%s,%d\\n\",\n+\t\t\t   reg_names[0], (neg_size >> 16) & 0xffff,\n+\t\t\t   reg_names[0], reg_names[0], neg_size & 0xffff);\n \n \t      asm_fprintf (file, \"\\t{sf|subf} %s,%s,%s\\n\", reg_names[0], reg_names[0],\n \t\t\t   reg_names[1]);"}]}