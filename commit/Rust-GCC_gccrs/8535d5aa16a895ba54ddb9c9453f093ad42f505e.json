{"sha": "8535d5aa16a895ba54ddb9c9453f093ad42f505e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUzNWQ1YWExNmE4OTViYTU0ZGRiOWM5NDUzZjA5M2FkNDJmNTA1ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-06-03T23:17:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-06-03T23:17:09Z"}, "message": "parser.c (cp_parser_unqualified_id): Use build_min_nt_loc in five places.\n\n2019-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* parser.c (cp_parser_unqualified_id): Use build_min_nt_loc in\n      \tfive places.\n\nFrom-SVN: r271893", "tree": {"sha": "277eb962ed411a1060584e2cac14e8d7505fac7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/277eb962ed411a1060584e2cac14e8d7505fac7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8535d5aa16a895ba54ddb9c9453f093ad42f505e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8535d5aa16a895ba54ddb9c9453f093ad42f505e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8535d5aa16a895ba54ddb9c9453f093ad42f505e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8535d5aa16a895ba54ddb9c9453f093ad42f505e/comments", "author": null, "committer": null, "parents": [{"sha": "c533ffe04d5fc1baa85dddd8fd5f651128cf11ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c533ffe04d5fc1baa85dddd8fd5f651128cf11ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c533ffe04d5fc1baa85dddd8fd5f651128cf11ed"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "338490de9ef1fea8b5b6bc72360276ac9f6920ea", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535d5aa16a895ba54ddb9c9453f093ad42f505e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535d5aa16a895ba54ddb9c9453f093ad42f505e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8535d5aa16a895ba54ddb9c9453f093ad42f505e", "patch": "@@ -1,3 +1,8 @@\n+2019-06-03  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* parser.c (cp_parser_unqualified_id): Use build_min_nt_loc in\n+\tfive places.\n+\n 2019-06-01  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/85254"}, {"sha": "94411447e1dd536547a44ca17f6c1d961a6d9816", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8535d5aa16a895ba54ddb9c9453f093ad42f505e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8535d5aa16a895ba54ddb9c9453f093ad42f505e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8535d5aa16a895ba54ddb9c9453f093ad42f505e", "patch": "@@ -6052,7 +6052,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t\t    && constructor_name_p (token->u.value, scope))))\n \t  {\n \t    cp_lexer_consume_token (parser->lexer);\n-\t    return cp_expr (build_nt (BIT_NOT_EXPR, scope), loc);\n+\t    return build_min_nt_loc (loc, BIT_NOT_EXPR, scope);\n \t  }\n \n \t/* ~auto means the destructor of whatever the object is.  */\n@@ -6063,7 +6063,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t\t       \"%<~auto%> only available with \"\n \t\t       \"%<-std=c++14%> or %<-std=gnu++14%>\");\n \t    cp_lexer_consume_token (parser->lexer);\n-\t    return cp_expr (build_nt (BIT_NOT_EXPR, make_auto (), loc));\n+\t    return build_min_nt_loc (loc, BIT_NOT_EXPR, make_auto ());\n \t  }\n \n \t/* If there was an explicit qualification (S::~T), first look\n@@ -6153,16 +6153,16 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t\t   time.  */\n \t\ttype_decl = cp_parser_identifier (parser);\n \t\tif (type_decl != error_mark_node)\n-\t\t  type_decl = build_nt (BIT_NOT_EXPR, type_decl);\n-\t\treturn cp_expr (type_decl, loc);\n+\t\t  type_decl = build_min_nt_loc (loc, BIT_NOT_EXPR, type_decl);\n+\t\treturn type_decl;\n \t      }\n \t  }\n \t/* If an error occurred, assume that the name of the\n \t   destructor is the same as the name of the qualifying\n \t   class.  That allows us to keep parsing after running\n \t   into ill-formed destructor names.  */\n \tif (type_decl == error_mark_node && scope)\n-\t  return build_nt (BIT_NOT_EXPR, scope);\n+\t  return build_min_nt_loc (loc, BIT_NOT_EXPR, scope);\n \telse if (type_decl == error_mark_node)\n \t  return error_mark_node;\n \n@@ -6189,7 +6189,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \t\t    \"typedef-name %qD used as destructor declarator\",\n \t\t    type_decl);\n \n-\treturn cp_expr (build_nt (BIT_NOT_EXPR, TREE_TYPE (type_decl), loc));\n+\treturn build_min_nt_loc (loc, BIT_NOT_EXPR, TREE_TYPE (type_decl));\n       }\n \n     case CPP_KEYWORD:"}]}