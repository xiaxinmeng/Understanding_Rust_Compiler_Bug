{"sha": "a25454eae3fe9086b3fd4c17619bb90087577798", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI1NDU0ZWFlM2ZlOTA4NmIzZmQ0YzE3NjE5YmI5MDA4NzU3Nzc5OA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-11-10T15:45:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-11-10T15:45:55Z"}, "message": "match.pd: Implement pattern from simplify_mult.\n\n2014-11-10  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd: Implement pattern from simplify_mult.\n\t* tree-ssa-forwprop.c (simplify_mult): Remove.\n\t(pass_forwprop::execute): Do not call simplify_mult.\n\nFrom-SVN: r217290", "tree": {"sha": "88c8cade21e8b1b63b0c857578fd173e5cbff792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88c8cade21e8b1b63b0c857578fd173e5cbff792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a25454eae3fe9086b3fd4c17619bb90087577798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25454eae3fe9086b3fd4c17619bb90087577798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a25454eae3fe9086b3fd4c17619bb90087577798", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a25454eae3fe9086b3fd4c17619bb90087577798/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6be4c4ece59c3ee69e38acf065d2b760587f6eb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be4c4ece59c3ee69e38acf065d2b760587f6eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6be4c4ece59c3ee69e38acf065d2b760587f6eb0"}], "stats": {"total": 69, "additions": 14, "deletions": 55}, "files": [{"sha": "784c57a9b75e1da511691efc337a27513ffdbfb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25454eae3fe9086b3fd4c17619bb90087577798/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25454eae3fe9086b3fd4c17619bb90087577798/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a25454eae3fe9086b3fd4c17619bb90087577798", "patch": "@@ -1,3 +1,9 @@\n+2014-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd: Implement pattern from simplify_mult.\n+\t* tree-ssa-forwprop.c (simplify_mult): Remove.\n+\t(pass_forwprop::execute): Do not call simplify_mult.\n+\n 2014-11-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63800"}, {"sha": "f4f9b8dca397f4266beea756c9323becb27b473c", "filename": "gcc/match.pd", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25454eae3fe9086b3fd4c17619bb90087577798/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25454eae3fe9086b3fd4c17619bb90087577798/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a25454eae3fe9086b3fd4c17619bb90087577798", "patch": "@@ -443,3 +443,11 @@ along with GCC; see the file COPYING3.  If not see\n        && operand_equal_p (@1, build_low_bits_mask (TREE_TYPE (@1),\n \t\t\t\t\t\t    TYPE_PRECISION (type)), 0))\n    (convert @0)))\n+\n+\n+/* (X /[ex] A) * A -> X.  */\n+(simplify\n+  (mult (convert? (exact_div @0 @1)) @1)\n+  /* Look through a sign-changing conversion.  */\n+  (if (TYPE_PRECISION (TREE_TYPE (@0)) == TYPE_PRECISION (type))\n+   (convert @0)))"}, {"sha": "2d6a9fb8638afde47006bb61766cdeae0355f4bd", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a25454eae3fe9086b3fd4c17619bb90087577798/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a25454eae3fe9086b3fd4c17619bb90087577798/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=a25454eae3fe9086b3fd4c17619bb90087577798", "patch": "@@ -2588,54 +2588,6 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n   return true;\n }\n \n-/* Simplify multiplications.\n-   Return true if a transformation applied, otherwise return false.  */\n-\n-static bool\n-simplify_mult (gimple_stmt_iterator *gsi)\n-{\n-  gimple stmt = gsi_stmt (*gsi);\n-  tree arg1 = gimple_assign_rhs1 (stmt);\n-  tree arg2 = gimple_assign_rhs2 (stmt);\n-\n-  if (TREE_CODE (arg1) != SSA_NAME)\n-    return false;\n-\n-  gimple def_stmt = SSA_NAME_DEF_STMT (arg1);\n-  if (!is_gimple_assign (def_stmt))\n-    return false;\n-\n-  /* Look through a sign-changing conversion.  */\n-  if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n-    {\n-      if (TYPE_PRECISION (TREE_TYPE (gimple_assign_lhs (def_stmt)))\n-\t  != TYPE_PRECISION (TREE_TYPE (gimple_assign_rhs1 (def_stmt)))\n-\t  || TREE_CODE (gimple_assign_rhs1 (def_stmt)) != SSA_NAME)\n-\treturn false;\n-      def_stmt = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (def_stmt));\n-      if (!is_gimple_assign (def_stmt))\n-\treturn false;\n-    }\n-\n-  if (gimple_assign_rhs_code (def_stmt) == EXACT_DIV_EXPR)\n-    {\n-      if (operand_equal_p (gimple_assign_rhs2 (def_stmt), arg2, 0))\n-\t{\n-\t  tree res = gimple_assign_rhs1 (def_stmt);\n-\t  if (useless_type_conversion_p (TREE_TYPE (arg1), TREE_TYPE (res)))\n-\t    gimple_assign_set_rhs_with_ops (gsi, TREE_CODE (res), res,\n-\t\t\t\t\t    NULL_TREE);\n-\t  else\n-\t    gimple_assign_set_rhs_with_ops (gsi, NOP_EXPR, res, NULL_TREE);\n-\t  gcc_assert (gsi_stmt (*gsi) == stmt);\n-\t  update_stmt (stmt);\n-\t  return true;\n-\t}\n-    }\n-\n-  return false;\n-}\n-\n \n /* Primitive \"lattice\" function for gimple_simplify.  */\n \n@@ -2853,13 +2805,6 @@ pass_forwprop::execute (function *fun)\n \t\t\t  || code == BIT_XOR_EXPR)\n \t\t\t && simplify_rotate (&gsi))\n \t\t  changed = true;\n-\t\telse if (code == MULT_EXPR)\n-\t\t  {\n-\t\t    changed = simplify_mult (&gsi);\n-\t\t    if (changed\n-\t\t\t&& maybe_clean_or_replace_eh_stmt (stmt, stmt))\n-\t\t      bitmap_set_bit (to_purge, bb->index);\n-\t\t  }\n \t\telse if (code == PLUS_EXPR\n \t\t\t || code == MINUS_EXPR)\n \t\t  {"}]}