{"sha": "e1133c0205a7e2a65834a1af780b8da15eead2a9", "node_id": "C_kwDOANBUbNoAKGUxMTMzYzAyMDVhN2UyYTY1ODM0YTFhZjc4MGI4ZGExNWVlYWQyYTk", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-07T21:15:46Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-08T19:00:32Z"}, "message": "rtl: ICE with thread_local and inline asm  [PR104777]\n\nIn r270550, Jakub fixed classify_insn to handle asm goto: if the asm can\njump to a label, the insn should be a JUMP_INSN.\n\nHowever, as the following testcase shows, non-null ASM_OPERANDS_LABEL_VEC\ndoesn't guarantee that the rtx has any actual labels it can branch to.\nHere, the rtvec has 0 elements because expand_asm_stmt created it:\n\n  rtvec labelvec = rtvec_alloc (nlabels); // nlabels == 0\n\nThis causes an ICE in update_br_prob_note: BRANCH_EDGE (bb) crashes\nbecause there's no branch edge.  I think we can fix this by checking\nthat there is at least one label the asm can jump to before wrapping\nthe ASM_OPERANDS in a JUMP_INSN.\n\n\tPR rtl-optimization/104777\n\ngcc/ChangeLog:\n\n\t* rtl.cc (classify_insn): For ASM_OPERANDS, return JUMP_INSN only if\n\tASM_OPERANDS_LABEL_VEC has at least one element.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/torture/tls/pr104777.c: New test.", "tree": {"sha": "a28e28ea0b6de226326d501cf7b71dca07d4ff9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a28e28ea0b6de226326d501cf7b71dca07d4ff9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1133c0205a7e2a65834a1af780b8da15eead2a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1133c0205a7e2a65834a1af780b8da15eead2a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1133c0205a7e2a65834a1af780b8da15eead2a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1133c0205a7e2a65834a1af780b8da15eead2a9/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ed4df521db9d66782d3f9cf291fc2564cf313a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ed4df521db9d66782d3f9cf291fc2564cf313a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ed4df521db9d66782d3f9cf291fc2564cf313a"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "86c322b19ca109677f6da589e85cfa3ccfd18e0a", "filename": "gcc/rtl.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1133c0205a7e2a65834a1af780b8da15eead2a9/gcc%2Frtl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1133c0205a7e2a65834a1af780b8da15eead2a9/gcc%2Frtl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.cc?ref=e1133c0205a7e2a65834a1af780b8da15eead2a9", "patch": "@@ -765,7 +765,7 @@ classify_insn (rtx x)\n     return CALL_INSN;\n   if (ANY_RETURN_P (x))\n     return JUMP_INSN;\n-  if (GET_CODE (x) == ASM_OPERANDS && ASM_OPERANDS_LABEL_VEC (x))\n+  if (GET_CODE (x) == ASM_OPERANDS && ASM_OPERANDS_LABEL_LENGTH (x))\n     return JUMP_INSN;\n   if (GET_CODE (x) == SET)\n     {\n@@ -794,7 +794,7 @@ classify_insn (rtx x)\n       if (has_return_p)\n \treturn JUMP_INSN;\n       if (GET_CODE (XVECEXP (x, 0, 0)) == ASM_OPERANDS\n-\t  && ASM_OPERANDS_LABEL_VEC (XVECEXP (x, 0, 0)))\n+\t  && ASM_OPERANDS_LABEL_LENGTH (XVECEXP (x, 0, 0)))\n \treturn JUMP_INSN;\n     }\n #ifdef GENERATOR_FILE"}, {"sha": "abaf59731fcc75798716d2d45de9590a9e23b8d4", "filename": "gcc/testsuite/gcc.dg/torture/tls/pr104777.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1133c0205a7e2a65834a1af780b8da15eead2a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftls%2Fpr104777.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1133c0205a7e2a65834a1af780b8da15eead2a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftls%2Fpr104777.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftls%2Fpr104777.c?ref=e1133c0205a7e2a65834a1af780b8da15eead2a9", "patch": "@@ -0,0 +1,30 @@\n+/* PR rtl-optimization/104777 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target tls } */\n+ \n+int savestate_r;\n+int savestate_ssb;\n+extern void abort();\n+__thread int  loop;\n+void f (void)\n+{\n+  int savestate_r0_5;\n+  int savestate_r1_6;\n+\n+  __asm__(\"\" : \"=m\" (savestate_ssb), \"=r\" (savestate_r));\n+  savestate_r0_5 = savestate_r;\n+  if (savestate_r0_5 == 0)\n+  {\n+    __asm__ __volatile__(\"\" :  : \"m\" (loop));\n+    abort ();\n+  }\n+\n+  __asm__(\"\" : \"=m\" (savestate_ssb), \"=r\" (savestate_r));\n+  savestate_r1_6 = savestate_r;\n+  if (savestate_r1_6 != 0)\n+    return;\n+\n+  __asm__ __volatile__(\"\" :  : \"m\" (loop));\n+  abort ();\n+\n+}"}]}