{"sha": "8590e4d096e4636c9384f7f885b979026861c29f", "node_id": "C_kwDOANBUbNoAKDg1OTBlNGQwOTZlNDYzNmM5Mzg0ZjdmODg1Yjk3OTAyNjg2MWMyOWY", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2023-03-01T02:54:03Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2023-03-02T01:10:12Z"}, "message": "analyzer: Support errno for newlib\n\nWithout this definition, the errno definition for newlib\nisn't recognized as such, and these tests fail for newlib\ntargets:\n\nFAIL: gcc.dg/analyzer/call-summaries-errno.c  (test for warnings, line 16)\nFAIL: gcc.dg/analyzer/call-summaries-errno.c (test for excess errors)\nFAIL: gcc.dg/analyzer/errno-1.c  (test for warnings, line 20)\nFAIL: gcc.dg/analyzer/errno-1.c (test for excess errors)\nFAIL: gcc.dg/analyzer/flex-without-call-summaries.c (test for excess errors)\nFAIL: gcc.dg/analyzer/isatty-1.c  (test for warnings, line 31)\nFAIL: gcc.dg/analyzer/isatty-1.c  (test for warnings, line 35)\nFAIL: gcc.dg/analyzer/isatty-1.c  (test for warnings, line 46)\nFAIL: gcc.dg/analyzer/isatty-1.c  (test for warnings, line 56)\nFAIL: gcc.dg/analyzer/isatty-1.c (test for excess errors)\n\ngcc/analyzer:\n\t* kf.cc (register_known_functions): Add __errno function for newlib.", "tree": {"sha": "0df324b10d8ed396e63ead39ac6413708253d7a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0df324b10d8ed396e63ead39ac6413708253d7a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8590e4d096e4636c9384f7f885b979026861c29f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8590e4d096e4636c9384f7f885b979026861c29f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8590e4d096e4636c9384f7f885b979026861c29f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8590e4d096e4636c9384f7f885b979026861c29f/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "854a268dccd7976bfc17584be8f9b2afa6c51fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/854a268dccd7976bfc17584be8f9b2afa6c51fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/854a268dccd7976bfc17584be8f9b2afa6c51fa0"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "ed5f70398e1d2930855217c11f972775b183433d", "filename": "gcc/analyzer/kf.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8590e4d096e4636c9384f7f885b979026861c29f/gcc%2Fanalyzer%2Fkf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8590e4d096e4636c9384f7f885b979026861c29f/gcc%2Fanalyzer%2Fkf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fkf.cc?ref=8590e4d096e4636c9384f7f885b979026861c29f", "patch": "@@ -1033,9 +1033,11 @@ register_known_functions (known_function_manager &kfm)\n        and OS X like this:\n \t extern int * __error(void);\n \t #define errno (*__error())\n+       and similarly __errno for newlib.\n        Add these as synonyms for \"__errno_location\".  */\n     kfm.add (\"___errno\", make_unique<kf_errno_location> ());\n     kfm.add (\"__error\", make_unique<kf_errno_location> ());\n+    kfm.add (\"__errno\", make_unique<kf_errno_location> ());\n   }\n \n   /* Language-specific support functions.  */"}]}