{"sha": "bb8a23ac3387977602c2632ad6f2b383a4c8f0c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI4YTIzYWMzMzg3OTc3NjAyYzI2MzJhZDZmMmIzODNhNGM4ZjBjNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-12-28T14:08:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-12-28T14:08:07Z"}, "message": "lwg-active.html, [...]: Import Revision 40.\n\n2005-12-28  Paolo Carlini  <pcarlini@suse.de>\n\n\t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 40.\n\nFrom-SVN: r109108", "tree": {"sha": "29136e5f170ab533c0ebbce7408ebac6d6314291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29136e5f170ab533c0ebbce7408ebac6d6314291"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb8a23ac3387977602c2632ad6f2b383a4c8f0c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb8a23ac3387977602c2632ad6f2b383a4c8f0c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb8a23ac3387977602c2632ad6f2b383a4c8f0c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb8a23ac3387977602c2632ad6f2b383a4c8f0c4/comments", "author": null, "committer": null, "parents": [{"sha": "b3482bb16a2f03b91e76e02ef453e762120b93c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3482bb16a2f03b91e76e02ef453e762120b93c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3482bb16a2f03b91e76e02ef453e762120b93c9"}], "stats": {"total": 391, "additions": 352, "deletions": 39}, "files": [{"sha": "ef546e60d770798c70836b2bd496a5210086b8bd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a23ac3387977602c2632ad6f2b383a4c8f0c4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a23ac3387977602c2632ad6f2b383a4c8f0c4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bb8a23ac3387977602c2632ad6f2b383a4c8f0c4", "patch": "@@ -1,3 +1,7 @@\n+2005-12-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 40.\n+\n 2005-12-28  Chris Jefferson  <chris@bubblescope.net>\n \n \t* testsuite/testsuite_allocator.h (check_deallocate_null): Return true."}, {"sha": "fc705efb44261306ba9952894352780627edca1a", "filename": "libstdc++-v3/docs/html/ext/lwg-active.html", "status": "modified", "additions": 316, "deletions": 14, "changes": 330, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a23ac3387977602c2632ad6f2b383a4c8f0c4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a23ac3387977602c2632ad6f2b383a4c8f0c4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html?ref=bb8a23ac3387977602c2632ad6f2b383a4c8f0c4", "patch": "@@ -1,15 +1,18 @@\n <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n-<html><head><title>C++ Standard Library Active Issues List</title></head>\n+<html><head><title>C++ Standard Library Active Issues List</title>\n+\n+<style>ins {background-color:#FFFFA0}\n+del {background-color:#FFFFA0}</style></head>\n \n <body bgcolor=\"#ffffff\" text=\"#000000\">\n <table>\n <tbody><tr>\n <td align=\"left\">Doc. no.</td>\n-<td align=\"left\">N1908=05-0168</td>\n+<td align=\"left\">N1926=05-0186</td>\n </tr>\n <tr>\n <td align=\"left\">Date:</td>\n-<td align=\"left\">2005-10-23</td>\n+<td align=\"left\">2005-12-16</td>\n </tr>\n <tr>\n <td align=\"left\">Project:</td>\n@@ -20,7 +23,7 @@\n <td align=\"left\">Howard Hinnant &lt;howard.hinnant@gmail.com&gt;</td>\n </tr>\n </tbody></table>\n-<h1>C++ Standard Library Active Issues List (Revision R39)</h1>\n+<h1>C++ Standard Library Active Issues List (Revision R40)</h1>\n   <p>Reference ISO/IEC IS 14882:1998(E)</p>\n   <p>Also see:</p>\n   <ul>\n@@ -88,6 +91,10 @@ <h1>C++ Standard Library Active Issues List (Revision R39)</h1>\n   directory as the issues list files.  </p>\n <h2>Revision History</h2>\n <ul>\n+<li>R40: \n+2005-12-16 mid-term mailing.\n+Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#529\">529</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#535\">535</a>.\n+</li>\n <li>R39: \n 2005-10-14 post-Mont Tremblant mailing.\n Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#526\">526</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#528\">528</a>.\n@@ -901,7 +908,7 @@ <h2>Active Issues</h2>\n <hr>\n <a name=\"258\"><h3>258.&nbsp;Missing allocator requirement</h3></a><p><b>Section:</b>&nbsp;20.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.allocator.requirements\"> [lib.allocator.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;22 Aug 2000</p>\n <p>\n-&gt;From lib-7752:\n+From lib-7752:\n </p>\n \n <p>\n@@ -2408,7 +2415,7 @@ <h2>Active Issues</h2>\n   might reasonably swallow the exception, or call abort, or do\n   something even more drastic.]</i></p>\n <hr>\n-<a name=\"419\"><h3>419.&nbsp;istream extractors not setting failbit if eofbit is already set</h3></a><p><b>Section:</b>&nbsp;27.6.1.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream::sentry\"> [lib.istream::sentry]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2003</p>\n+<a name=\"419\"></a><h3><a name=\"419\">419.&nbsp;istream extractors not setting failbit if eofbit is already set</a></h3><p><b>Section:</b>&nbsp;27.6.1.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream::sentry\"> [lib.istream::sentry]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2003</p>\n         <p>\n \n 27.6.1.1.2, p2 says that istream::sentry ctor prepares for input if is.good()\n@@ -2726,7 +2733,7 @@ <h2>Active Issues</h2>\n   negative.  Martin will do that review.]</i></p>\n \n <hr>\n-<a name=\"424\"><h3>424.&nbsp;normative notes</h3></a><p><b>Section:</b>&nbsp;17.3.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.structure.summary\"> [lib.structure.summary]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2003</p>\n+<a name=\"424\"></a><h3><a name=\"424\">424.&nbsp;normative notes</a></h3><p><b>Section:</b>&nbsp;17.3.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.structure.summary\"> [lib.structure.summary]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2003</p>\n \n <p>\n The text in 17.3.1.1, p1 says:\n@@ -2838,7 +2845,7 @@ <h2>Active Issues</h2>\n   performance, so we don't want to require specific checking.  We\n   need wording to express this decision.]</i></p>\n <hr>\n-<a name=\"431\"><h3>431.&nbsp;Swapping containers with unequal allocators</h3></a><p><b>Section:</b>&nbsp;20.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.allocator.requirements\"> [lib.allocator.requirements]</a>, 25 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.algorithms\"> [lib.algorithms]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;20 Sep 2003</p>\n+<a name=\"431\"></a><h3><a name=\"431\">431.&nbsp;Swapping containers with unequal allocators</a></h3><p><b>Section:</b>&nbsp;20.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.allocator.requirements\"> [lib.allocator.requirements]</a>, 25 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.algorithms\"> [lib.algorithms]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;20 Sep 2003</p>\n <p>Clause 20.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.allocator.requirements\"> [lib.allocator.requirements]</a> paragraph 4 says that implementations\n   are permitted to supply containers that are unable to cope with\n   allocator instances and that container implementations may assume\n@@ -3101,7 +3108,7 @@ <h2>Active Issues</h2>\n </code>\n \n <hr>\n-<a name=\"459\"></a><h3><a name=\"459\">459.&nbsp;Requirement for widening in stage 2 is overspecification</a></h3><p><b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;16 Mar 2004</p>\n+<a name=\"459\"><h3>459.&nbsp;Requirement for widening in stage 2 is overspecification</h3></a><p><b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;16 Mar 2004</p>\n <p>When parsing strings of wide-character digits, the standard\n   requires the library to widen narrow-character \"atoms\" and compare\n   the widened atoms against the characters that are being parsed.\n@@ -3812,7 +3819,7 @@ <h2>Active Issues</h2>\n   provide wording.]</i></p>\n \n <hr>\n-<a name=\"484\"><h3>484.&nbsp;Convertible to T</h3></a><p><b>Section:</b>&nbsp;24.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.input.iterators\"> [lib.input.iterators]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Chris&nbsp; <b>Date:</b>&nbsp;16 Sep 2004</p>\n+<a name=\"484\"><h3>484.&nbsp;Convertible to T</h3></a><p><b>Section:</b>&nbsp;24.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.input.iterators\"> [lib.input.iterators]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Chris Jefferson&nbsp; <b>Date:</b>&nbsp;16 Sep 2004</p>\n <p>From comp.std.c++:</p>\n \n <p>\n@@ -3856,7 +3863,7 @@ <h2>Active Issues</h2>\n  overloads. It's a minor problem but a real one. So leave open for\n  now, hope we solve it as part of iterator redesign.]</i></p>\n <hr>\n-<a name=\"485\"><h3>485.&nbsp;output iterator insufficently constrained</h3></a><p><b>Section:</b>&nbsp;24.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.output.iterators\"> [lib.output.iterators]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Chris&nbsp; <b>Date:</b>&nbsp;13 Oct 2004</p>\n+<a name=\"485\"><h3>485.&nbsp;output iterator insufficently constrained</h3></a><p><b>Section:</b>&nbsp;24.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.output.iterators\"> [lib.output.iterators]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Chris Jefferson&nbsp; <b>Date:</b>&nbsp;13 Oct 2004</p>\n <p>\n The note on 24.1.2 Output iterators insufficently limits what can be\n performed on output iterators. While it requires that each iterator is\n@@ -4826,7 +4833,7 @@ <h2>Active Issues</h2>\n <blockquote><pre>typedef  RealType  input_type;\n </pre></blockquote>\n <hr>\n-<a name=\"512\"></a><h3><a name=\"512\">512.&nbsp;Seeding subtract_with_carry_01 from a single unsigned long</a></h3><p><b>Section:</b>&nbsp;TR1 5.1.4.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.eng.sub1\"> [tr.rand.eng.sub1]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<a name=\"512\"><h3>512.&nbsp;Seeding subtract_with_carry_01 from a single unsigned long</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.4.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.eng.sub1\"> [tr.rand.eng.sub1]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n <p>\n Paragraph 8 specifies the algorithm by which a subtract_with_carry_01  engine\n is to be seeded given a single unsigned long.  This algorithm is seriously\n@@ -5117,7 +5124,7 @@ <h2>Active Issues</h2>\n </blockquote>\n <p><b>Proposed resolution:</b></p>\n <hr>\n-<a name=\"522\"></a><h3><a name=\"522\">522.&nbsp;Tuple doesn't define swap</a></h3><p><b>Section:</b>&nbsp;TR1 6.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.tuple\"> [tr.tuple]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Andy Koenig&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<a name=\"522\"><h3>522.&nbsp;Tuple doesn't define swap</h3></a><p><b>Section:</b>&nbsp;TR1 6.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.tuple\"> [tr.tuple]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Andy Koenig&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n <p>\n Tuple doesn't define swap().  It should.\n </p>\n@@ -5301,7 +5308,7 @@ <h2>Active Issues</h2>\n </p>\n <p><b>Proposed resolution:</b></p>\n <hr>\n-<a name=\"526\"></a><h3><a name=\"526\">526.&nbsp;Is it undefined if a function in the standard changes in parameters?</a></h3><p><b>Section:</b>&nbsp;23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Chris Jefferson&nbsp; <b>Date:</b>&nbsp;14 Sep 2005</p>\n+<a name=\"526\"><h3>526.&nbsp;Is it undefined if a function in the standard changes in parameters?</h3></a><p><b>Section:</b>&nbsp;23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Chris Jefferson&nbsp; <b>Date:</b>&nbsp;14 Sep 2005</p>\n <p>\n Problem: There are a number of places in the C++ standard library where\n it is possible to write what appear to be sensible ways of calling\n@@ -5463,5 +5470,300 @@ <h2>Active Issues</h2>\n collapse into a single signature.</ins>\n </p>\n \n+<hr>\n+<a name=\"529\"><h3>529.&nbsp;The standard encourages redundant and confusing preconditions</h3></a><p><b>Section:</b>&nbsp;17.4.3.8 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.res.on.required\"> [lib.res.on.required]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;David Abrahams&nbsp; <b>Date:</b>&nbsp;25 Oct 2005</p>\n+<p>\n+17.4.3.8/1 says:\n+</p>\n+\n+<blockquote>\n+Violation of the preconditions specified in a function's \n+Required behavior: paragraph results in undefined behavior unless the \n+function's Throws: paragraph specifies throwing an exception when the \n+precondition is violated.\n+</blockquote>\n+\n+<p>\n+This implies that a precondition violation can lead to defined\n+behavior.  That conflicts with the only reasonable definition of\n+precondition: that a violation leads to undefined behavior.  Any other\n+definition muddies the waters when it comes to analyzing program\n+correctness, because precondition violations may be routinely done in\n+correct code (e.g. you can use std::vector::at with the full\n+expectation that you'll get an exception when your index is out of\n+range, catch the exception, and continue).  Not only is it a bad\n+example to set, but it encourages needless complication and redundancy\n+in the standard.  For example:\n+</p>\n+\n+<blockquote><pre>  21 Strings library \n+  21.3.3 basic_string capacity\n+\n+  void resize(size_type n, charT c);\n+\n+  5 Requires: n &lt;= max_size()\n+  6 Throws: length_error if n &gt; max_size().\n+  7 Effects: Alters the length of the string designated by *this as follows:\n+</pre></blockquote>\n+\n+<p>\n+The Requires clause is entirely redundant and can be dropped.  We\n+could make that simplifying change (and many others like it) even\n+without changing 17.4.3.8/1; the wording there just seems to encourage\n+the redundant and error-prone Requires: clause.\n+</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+1. Change 17.4.3.8/1 to read:\n+</p>\n+\n+<blockquote>\n+Violation of the preconditions specified in a function's\n+<i>Required behavior:</i> paragraph results in undefined behavior\n+<del>unless the function's <i>Throws:</i> paragraph specifies throwing\n+an exception when the precondition is violated</del>.\n+</blockquote>\n+\n+<p>\n+2. Go through and remove redundant Requires: clauses.  Specifics to be\n+   provided by Dave A.\n+</p>\n+<hr>\n+<a name=\"530\"><h3>530.&nbsp;Must elements of a string be contiguous?</h3></a><p><b>Section:</b>&nbsp;21.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.basic.string\"> [lib.basic.string]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;15 Nov 2005</p>\n+<p>Issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#69\">69</a>, which was incorporated into C++03, mandated\n+&nbsp;&nbsp; that the elements of a vector must be stored in contiguous memory.\n+&nbsp;&nbsp; Should the same also apply to <tt>basic_string</tt>?</p>\n+\n+<p>We almost require contiguity already. Clause 23.3.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.multiset\"> [lib.multiset]</a>\n+&nbsp; defines <tt>operator[]</tt> as <tt>data()[pos]</tt>. What's missing\n+&nbsp; is a similar guarantee if we access the string's elements via the\n+&nbsp; iterator interface.</p>\n+\n+<p>Given the existence of <tt>data()</tt>, and the definition of\n+&nbsp; <tt>operator[]</tt> and <tt>at</tt> in terms of <tt>data</tt>,\n+&nbsp; I don't believe it's possible to write a useful and standard-\n+&nbsp; conforming <tt>basic_string</tt> that isn't contiguous. I'm not\n+&nbsp; aware of any non-contiguous implementation. We should just require\n+&nbsp; it.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Add the following text to the end of 23.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.associative\"> [lib.associative]</a>,\n+paragraph 2. </p>\n+\n+<blockquote>\n+&nbsp; <p>The characters in a string are stored contiguously, meaning that if\n+&nbsp; <tt>s</tt> is a <tt>basic_string&lt;charT, Allocator&gt;</tt>, then\n+&nbsp; it obeys the identity\n+&nbsp; <tt>&amp;*(s.begin() + n) == &amp;*s.begin() + n</tt>\n+&nbsp; for all <tt>0 &lt;= n &lt; s.size()</tt>.\n+  </p>\n+</blockquote>\n+<hr>\n+<a name=\"531\"><h3>531.&nbsp;array forms of unformatted input functions</h3></a><p><b>Section:</b>&nbsp;27.6.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.unformatted\"> [lib.istream.unformatted]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;23 Nov 2005</p>\n+<p>\n+The array forms of unformatted input functions don't seem to have well-defined\n+semantics for zero-element arrays in a couple of cases. The affected ones\n+(<tt>istream::get()</tt> and <tt>istream::getline()</tt>) are supposed to\n+terminate when <tt>(n - 1)</tt> characters are stored, which obviously can\n+never be true when <tt>(n == 0)</tt> holds to start with. See\n+c++std-lib-16071.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+I suggest changing 27.6.1.3, p7 (<tt>istream::get()</tt>), bullet 1 to read:\n+</p>\n+        <p>\n+            </p><ul>\n+                <li>\n+                    <tt>(n &lt; 1)</tt> is true or <tt>(n - 1)</tt> characters\n+                    are stored;\n+                </li>\n+            </ul>\n+        <p></p>\n+        <p>\n+\n+and similarly p17 (<tt>istream::getline()</tt>), bullet 3 to:\n+\n+        </p>\n+        <p>\n+            </p><ul>\n+                <li>\n+                    <tt>(n &lt; 1)</tt> is true or <tt>(n - 1)</tt> characters\n+                    are stored (in which case the function calls\n+                    <tt>setstate(failbit)</tt>).\n+                </li>\n+            </ul>\n+        <p></p>\n+\n+        <p>\n+\n+In addition, to clarify that <tt>istream::getline()</tt> must not store the\n+terminating NUL character unless the the array has non-zero size, Robert\n+Klarer suggests in c++std-lib-16082 to change 27.6.1.3, p20 to read:\n+\n+        </p>\n+        <p>\n+            </p><blockquote>\n+\n+In any case, provided <tt>(n &gt; 0)</tt> is true, it then stores a null character\n+(using charT()) into the next successive location of the array.\n+\n+            </blockquote>\n+        <p></p>\n+<hr>\n+<a name=\"532\"><h3>532.&nbsp;Tuple comparison</h3></a><p><b>Section:</b>&nbsp;TR1 6.1.3.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.tuple.rel\"> [tr.tuple.rel]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;David Abrahams&nbsp; <b>Date:</b>&nbsp;29 Nov 2005</p>\n+<p>\n+Where possible, tuple comparison operators &lt;,&lt;=,=&gt;, and &gt; ought to be\n+defined in terms of std::less rather than operator&lt;, in order to\n+support comparison of tuples of pointers.  \n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+change 6.1.3.5/5 from:\n+</p>\n+\n+<blockquote>\n+  Returns: The result of a lexicographical comparison between t and\n+  u. The result is defined as: (bool)(get&lt;0&gt;(t) &lt; get&lt;0&gt;(u)) ||\n+  (!(bool)(get&lt;0&gt;(u) &lt; get&lt;0&gt;(t)) &amp;&amp; ttail &lt; utail), where rtail for\n+  some tuple r is a tuple containing all but the first element of\n+  r. For any two zero-length tuples e and f, e &lt; f returns false.\n+</blockquote>\n+\n+<p>\n+to:\n+</p>\n+\n+<blockquote>\n+<p>\n+  Returns: The result of a lexicographical comparison between t and\n+  u. For any two zero-length tuples e and f, e &lt; f returns false.\n+  Otherwise, the result is defined as: cmp( get&lt;0&gt;(t), get&lt;0&gt;(u)) ||\n+  (!cmp(get&lt;0&gt;(u), get&lt;0&gt;(t)) &amp;&amp; ttail &lt; utail), where rtail for some\n+  tuple r is a tuple containing all but the first element of r, and\n+  cmp(x,y) is an unspecified function template defined as follows.\n+</p>\n+<p>\n+  Where T is the type of x and U is the type of y:\n+</p>\n+\n+<p>\n+     if T and U are pointer types and T is convertible to U, returns\n+     less&lt;U&gt;()(x,y)\n+</p>\n+\n+<p>\n+     otherwise, if T and U are pointer types, returns less&lt;T&gt;()(x,y)\n+</p>\n+\n+<p>\n+     otherwise, returns (bool)(x &lt; y)\n+</p>\n+</blockquote>\n+<hr>\n+<a name=\"533\"><h3>533.&nbsp;typo in 2.2.3.10/1</h3></a><p><b>Section:</b>&nbsp;TR1 2.2.3.10 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.util.smartptr.getdeleter\"> [tr.util.smartptr.getdeleter]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Paolo Carlini&nbsp; <b>Date:</b>&nbsp;9 Nov 2005</p>\n+<p>\n+I'm seeing something that looks like a typo. The Return of <tt>get_deleter</tt>\n+says:\n+</p>\n+<blockquote>\n+If <tt>*this</tt> <i>owns</i> a deleter <tt>d</tt>...\n+</blockquote>\n+<p>\n+but <tt>get_deleter</tt> is a free function!\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Therefore, I think should be:\n+</p>\n+<blockquote>\n+If <tt><del>*this</del> <ins>p</ins></tt> <i>owns</i> a deleter <tt>d</tt>...\n+</blockquote>\n+<hr>\n+<a name=\"534\"><h3>534.&nbsp;Missing basic_string members</h3></a><p><b>Section:</b>&nbsp;21.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.basic.string\"> [lib.basic.string]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Alisdair Meredith&nbsp; <b>Date:</b>&nbsp;16 Nov 2005</p>\n+<p>\n+OK, we all know std::basic_string is bloated and already has way too\n+many members.  However, I propose it is missing 3 useful members that\n+are often expected by users believing it is a close approximation of the\n+container concept.  All 3 are listed in table 71 as 'optional'\n+</p>\n+\n+<p>\n+i/  pop_back.\n+</p>\n+\n+<p>\n+This is the one I feel most strongly about, as I only just discovered it\n+was missing as we are switching to a more conforming standard library\n+&lt;g&gt;\n+</p>\n+\n+<p>\n+I find it particularly inconsistent to support push_back, but not\n+pop_back.\n+</p>\n+\n+<p>\n+ii/ back.\n+</p>\n+\n+<p>\n+There are certainly cases where I want to examine the last character of\n+a string before deciding to append, or to trim trailing path separators\n+from directory names etc.  *rbegin() somehow feels inelegant.\n+</p>\n+\n+<p>\n+iii/ front\n+</p>\n+\n+<p>\n+This one I don't feel strongly about, but if I can get the first two,\n+this one feels that it should be added as a 'me too' for consistency.\n+</p>\n+\n+<p>\n+I believe this would be similarly useful to the data() member recently\n+added to vector, or at() member added to the maps.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+</p>\n+<hr>\n+<a name=\"535\"><h3>535.&nbsp;std::string::swap specification poorly worded</h3></a><p><b>Section:</b>&nbsp;21.3.5.8 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string::swap\"> [lib.string::swap]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Beman Dawes&nbsp; <b>Date:</b>&nbsp;14 Dec 2005</p>\n+<p>\n+std::string::swap currently says for effects and postcondition:\n+</p>\n+\n+<blockquote>\n+<p>\n+<i>Effects:</i> Swaps the contents of the two strings.\n+</p>\n+\n+<p>\n+<i>Postcondition:</i> <tt>*this</tt> contains the characters that were in <tt><i>s</i></tt>,\n+<tt><i>s</i></tt> contains the characters that were in <tt>*this</tt>.\n+</p>\n+</blockquote>\n+\n+<p>\n+Specifying both Effects and Postcondition seems redundant, and the postcondition\n+needs to be made stronger. Users would be unhappy if the characters were not in\n+the same order after the swap.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<blockquote>\n+<p>\n+<del><i>Effects:</i> Swaps the contents of the two strings.</del>\n+</p>\n+\n+<p>\n+<i>Postcondition:</i> <tt>*this</tt> contains the <ins>same sequence of</ins>\n+characters that <del>were</del> <ins>was</ins> in <tt><i>s</i></tt>,\n+<tt><i>s</i></tt> contains the <ins>same sequence of</ins> characters that\n+<del>were</del> <ins>was</ins> in <tt>*this</tt>.\n+</p>\n+</blockquote>\n <p>----- End of document -----</p>\n </body></html>\n\\ No newline at end of file"}, {"sha": "01c251dc46261a86aa46ed005b67b56de5e85bd3", "filename": "libstdc++-v3/docs/html/ext/lwg-defects.html", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a23ac3387977602c2632ad6f2b383a4c8f0c4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a23ac3387977602c2632ad6f2b383a4c8f0c4/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html?ref=bb8a23ac3387977602c2632ad6f2b383a4c8f0c4", "patch": "@@ -1,15 +1,18 @@\n <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n-<html><head><title>C++ Standard Library Defect Report List</title></head>\n+<html><head><title>C++ Standard Library Defect Report List</title>\n+\n+<style>ins {background-color:#FFFFA0}\n+del {background-color:#FFFFA0}</style></head>\n \n <body bgcolor=\"#ffffff\" text=\"#000000\">\n <table>\n <tbody><tr>\n <td align=\"left\">Doc. no.</td>\n-<td align=\"left\">N1909=05-0169</td>\n+<td align=\"left\">N1927=05-0187</td>\n </tr>\n <tr>\n <td align=\"left\">Date:</td>\n-<td align=\"left\">2005-10-23</td>\n+<td align=\"left\">2005-12-16</td>\n </tr>\n <tr>\n <td align=\"left\">Project:</td>\n@@ -20,7 +23,7 @@\n <td align=\"left\">Howard Hinnant &lt;howard.hinnant@gmail.com&gt;</td>\n </tr>\n </tbody></table>\n-<h1>C++ Standard Library Defect Report List (Revision R39)</h1>\n+<h1>C++ Standard Library Defect Report List (Revision R40)</h1>\n   <p>Reference ISO/IEC IS 14882:1998(E)</p>\n   <p>Also see:</p>\n     <ul>\n@@ -42,6 +45,10 @@ <h1>C++ Standard Library Defect Report List (Revision R39)</h1>\n   document.</p>\n <h2>Revision History</h2>\n <ul>\n+<li>R40: \n+2005-12-16 mid-term mailing.\n+Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#529\">529</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#535\">535</a>.\n+</li>\n <li>R39: \n 2005-10-14 post-Mont Tremblant mailing.\n Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#526\">526</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#528\">528</a>.\n@@ -642,7 +649,7 @@ <h2>Defect Reports</h2>\n <p>See 99-0040/N1216, October 22, 1999, by Stephen D. Clamage for the analysis\n supporting to the proposed resolution.</p>\n <hr>\n-<a name=\"11\"><h3>11.&nbsp;Bitset minor problems</h3></a><p><b>Section:</b>&nbsp;23.3.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.template.bitset\"> [lib.template.bitset]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;22 Jan 1998</p>\n+<a name=\"11\"></a><h3><a name=\"11\">11.&nbsp;Bitset minor problems</a></h3><p><b>Section:</b>&nbsp;23.3.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.template.bitset\"> [lib.template.bitset]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;22 Jan 1998</p>\n <p>(1) bitset&lt;&gt;::operator[] is mentioned in the class synopsis (23.3.5), but it is\n not documented in 23.3.5.2. </p>\n \n@@ -731,7 +738,7 @@ <h2>Defect Reports</h2>\n <tt>do_narrow</tt> and <tt>do_widen</tt> should be copied \n from 22.2.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.ctype.special\"> [lib.facet.ctype.special]</a>.</p>\n <hr>\n-<a name=\"17\"><h3>17.&nbsp;Bad bool parsing</h3></a><p><b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n+<a name=\"17\"></a><h3><a name=\"17\">17.&nbsp;Bad bool parsing</a></h3><p><b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n <p>This section describes the process of parsing a text boolean value from the input\n stream. It does not say it recognizes either of the sequences \"true\" or\n \"false\" and returns the corresponding bool value; instead, it says it recognizes\n@@ -810,7 +817,7 @@ <h2>Defect Reports</h2>\n   <tt>err==str.failbit</tt>. --end example]</p>\n </blockquote>\n <hr>\n-<a name=\"18\"><h3>18.&nbsp;Get(...bool&amp;) omitted</h3></a><p><b>Section:</b>&nbsp;22.2.2.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.members\"> [lib.facet.num.get.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n+<a name=\"18\"></a><h3><a name=\"18\">18.&nbsp;Get(...bool&amp;) omitted</a></h3><p><b>Section:</b>&nbsp;22.2.2.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.members\"> [lib.facet.num.get.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n <p>In the list of num_get&lt;&gt; non-virtual members on page 22-23, the member\n that parses bool values was omitted from the list of definitions of non-virtual\n members, though it is listed in the class definition and the corresponding\n@@ -894,7 +901,7 @@ <h2>Defect Reports</h2>\n believes to have been the original intent.</p>\n \n <hr>\n-<a name=\"24\"></a><h3><a name=\"24\">24.&nbsp;\"do_convert\" doesn't exist</a></h3><p><b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n+<a name=\"24\"><h3>24.&nbsp;\"do_convert\" doesn't exist</h3></a><p><b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n <p>The description of codecvt&lt;&gt;::do_out and do_in mentions a\n symbol \"do_convert\" which is not defined in the\n standard. This is a leftover from an edit, and should be \"do_in\n@@ -2068,7 +2075,7 @@ <h2>Defect Reports</h2>\n </p>\n \n <p>\n-In 27.6.1.3, [lib.istream.unformatted], paragraph 5.  Change the\n+In 27.6.1.3, [lib.istream.unformatted], paragraph 7.  Change the\n beginning of the first sentence of the effects clause from \"Extracts\n characters\" to \"Behaves as an unformatted input function (as described\n in 27.6.1.3, paragraph 1).  After constructing a sentry object, extracts\n@@ -2246,7 +2253,7 @@ <h2>Defect Reports</h2>\n by Judy Ward and Matt Austern.  This proposed resolution is section\n VI of that paper.</p>\n <hr>\n-<a name=\"61\"><h3>61.&nbsp;Ambiguity in iostreams exception policy</h3></a><p><b>Section:</b>&nbsp;27.6.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.unformatted\"> [lib.istream.unformatted]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n+<a name=\"61\"></a><h3><a name=\"61\">61.&nbsp;Ambiguity in iostreams exception policy</a></h3><p><b>Section:</b>&nbsp;27.6.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.unformatted\"> [lib.istream.unformatted]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n <p>The introduction to the section on unformatted input (27.6.1.3)\n says that every unformatted input function catches all exceptions that\n were thrown during input, sets badbit, and then conditionally rethrows\n@@ -2340,7 +2347,7 @@ <h2>Defect Reports</h2>\n   (27.4.4.3), then the caught exception is rethrown. </p>\n </blockquote>\n <hr>\n-<a name=\"66\"><h3>66.&nbsp;Strstreambuf::setbuf</h3></a><p><b>Section:</b>&nbsp;D.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/future.html#depr.strstreambuf.virtuals\"> [depr.strstreambuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;18 Aug 1998</p>\n+<a name=\"66\"></a><h3><a name=\"66\">66.&nbsp;Strstreambuf::setbuf</a></h3><p><b>Section:</b>&nbsp;D.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/future.html#depr.strstreambuf.virtuals\"> [depr.strstreambuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;18 Aug 1998</p>\n <p>D.7.1.3, paragraph 19, says that strstreambuf::setbuf\n \"Performs an operation that is defined separately for each class\n derived from strstreambuf\". This is obviously an incorrect\n@@ -2752,7 +2759,7 @@ <h2>Defect Reports</h2>\n possibilities.  The proposed resolution makes it clear that these two\n functions do get characters from a streambuf.</p>\n <hr>\n-<a name=\"92\"></a><h3><a name=\"92\">92.&nbsp;Incomplete Algorithm Requirements</a></h3><p><b>Section:</b>&nbsp;25 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.algorithms\"> [lib.algorithms]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Nico Josuttis&nbsp; <b>Date:</b>&nbsp;29 Sep 1998</p>\n+<a name=\"92\"><h3>92.&nbsp;Incomplete Algorithm Requirements</h3></a><p><b>Section:</b>&nbsp;25 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.algorithms\"> [lib.algorithms]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Nico Josuttis&nbsp; <b>Date:</b>&nbsp;29 Sep 1998</p>\n <p>The standard does not state, how often a function object is copied,\n called, or the order of calls inside an algorithm. This may lead to\n surprising/buggy behavior. Consider the following example: </p>\n@@ -3662,7 +3669,7 @@ <h2>Defect Reports</h2>\n <tt>do_scan_not()</tt> to return a <tt> const\n charT*</tt>. </p>\n <hr>\n-<a name=\"125\"></a><h3><a name=\"125\">125.&nbsp;valarray&lt;T&gt;::operator!() return type is inconsistent</a></h3><p><b>Section:</b>&nbsp;26.3.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.template.valarray\"> [lib.template.valarray]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Judy Ward&nbsp; <b>Date:</b>&nbsp;15 Dec 1998</p>\n+<a name=\"125\"><h3>125.&nbsp;valarray&lt;T&gt;::operator!() return type is inconsistent</h3></a><p><b>Section:</b>&nbsp;26.3.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.template.valarray\"> [lib.template.valarray]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Judy Ward&nbsp; <b>Date:</b>&nbsp;15 Dec 1998</p>\n <p>In Section 26.3.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.template.valarray\"> [lib.template.valarray]</a> valarray&lt;T&gt;::operator!() is\n declared to return a valarray&lt;T&gt;, but in Section 26.3.2.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.valarray.unary\"> [lib.valarray.unary]</a> it is declared to return a valarray&lt;bool&gt;. The\n latter appears to be correct. </p>\n@@ -6450,7 +6457,7 @@ <h2>Defect Reports</h2>\n   to <tt>swap</tt>.  Also, in 26.3.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.valarray.transcend\"> [lib.valarray.transcend]</a> paragraph 1,\n   state that the valarray transcendentals use unqualified lookup.</p>\n <hr>\n-<a name=\"227\"><h3>227.&nbsp;std::swap() should require CopyConstructible or DefaultConstructible arguments</h3></a><p><b>Section:</b>&nbsp;25.2.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.swap\"> [lib.alg.swap]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;09 Apr 2000</p>\n+<a name=\"227\"></a><h3><a name=\"227\">227.&nbsp;std::swap() should require CopyConstructible or DefaultConstructible arguments</a></h3><p><b>Section:</b>&nbsp;25.2.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.swap\"> [lib.alg.swap]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;09 Apr 2000</p>\n <p>25.2.2 reads:</p>\n <blockquote>\n   <p><tt>  template&lt;class T&gt; void swap(T&amp; a, T&amp; b);</tt><br>\n@@ -7029,7 +7036,7 @@ <h2>Defect Reports</h2>\n ]</i></p>\n \n <hr>\n-<a name=\"242\"><h3>242.&nbsp;Side effects of function objects</h3></a><p><b>Section:</b>&nbsp;25.2.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.transform\"> [lib.alg.transform]</a>, 26.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.numeric.ops\"> [lib.numeric.ops]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Angelika Langer&nbsp; <b>Date:</b>&nbsp;May 15 2000</p>\n+<a name=\"242\"></a><h3><a name=\"242\">242.&nbsp;Side effects of function objects</a></h3><p><b>Section:</b>&nbsp;25.2.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.transform\"> [lib.alg.transform]</a>, 26.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.numeric.ops\"> [lib.numeric.ops]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Angelika Langer&nbsp; <b>Date:</b>&nbsp;May 15 2000</p>\n <p>The algorithms transform(), accumulate(), inner_product(),\n partial_sum(), and adjacent_difference() require that the function\n object supplied to them shall not have any side effects.</p>\n@@ -7330,7 +7337,7 @@ <h2>Defect Reports</h2>\n <p>The original proposed resolution said that iterators and references\n would remain \"valid\".  The new proposed resolution clarifies what that\n means.  Note that this only applies to the case of equal allocators.\n-&gt;From 20.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.allocator.requirements\"> [lib.allocator.requirements]</a> paragraph 4, the behavior of list when\n+From 20.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.allocator.requirements\"> [lib.allocator.requirements]</a> paragraph 4, the behavior of list when\n allocators compare nonequal is outside the scope of the standard.</p>\n <hr>\n <a name=\"251\"><h3>251.&nbsp;basic_stringbuf missing allocator_type</h3></a><p><b>Section:</b>&nbsp;27.7.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf\"> [lib.stringbuf]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jul 2000</p>\n@@ -10598,7 +10605,7 @@ <h2>Defect Reports</h2>\n <hr>\n <a name=\"338\"><h3>338.&nbsp; is whitespace allowed between `-' and a digit?</h3></a><p><b>Section:</b>&nbsp;22.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.categories\"> [lib.locale.categories]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;17 Sep 2001</p>\n <p>\n-&gt;From Stage 2 processing in 22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>, p8 and 9 (the\n+From Stage 2 processing in 22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>, p8 and 9 (the\n original text or the text corrected by the proposed resolution of\n issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#221\">221</a>) it seems clear that no whitespace is allowed\n within a number, but 22.2.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.numpunct\"> [lib.locale.numpunct]</a>, p2, which gives the\n@@ -11080,7 +11087,7 @@ <h2>Defect Reports</h2>\n <p><i>[Cura\ufffdao: LWG reviewed PR.]</i></p>\n \n <hr>\n-<a name=\"355\"></a><h3><a name=\"355\">355.&nbsp;Operational semantics for a.back()</a></h3><p><b>Section:</b>&nbsp;23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Yaroslav Mironov&nbsp; <b>Date:</b>&nbsp;23 Jan 2002</p>\n+<a name=\"355\"><h3>355.&nbsp;Operational semantics for a.back()</h3></a><p><b>Section:</b>&nbsp;23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Yaroslav Mironov&nbsp; <b>Date:</b>&nbsp;23 Jan 2002</p>\n \n <p>Table 68 \"Optional Sequence Operations\" in 23.1.1/12\n specifies operational semantics for \"a.back()\" as\n@@ -11149,8 +11156,8 @@ <h2>Defect Reports</h2>\n \"*tmp\" to \"return *tmp;\"]</i></p>\n \n <hr>\n-<a name=\"358\"></a><h3><a name=\"358\">358.&nbsp;interpreting <tt>thousands_sep</tt> after a <tt>decimal_point</tt>\n-</a></h3><p><b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;12 Mar 2002</p>\n+<a name=\"358\"><h3>358.&nbsp;interpreting <tt>thousands_sep</tt> after a <tt>decimal_point</tt>\n+</h3></a><p><b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;12 Mar 2002</p>\n <p>\n I don't think <tt>thousands_sep</tt> is being treated correctly after\n decimal_point has been seen. Since grouping applies only to the\n@@ -11432,7 +11439,7 @@ <h2>Defect Reports</h2>\n <p><b>Rationale:</b></p>\n <p>Fixes an obvious typo.</p>\n <hr>\n-<a name=\"373\"></a><h3><a name=\"373\">373.&nbsp;Are basic_istream and basic_ostream to use (exceptions()&amp;badbit) != 0 ?</a></h3><p><b>Section:</b>&nbsp;27.6.1.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.formatted.reqmts\"> [lib.istream.formatted.reqmts]</a>, 27.6.2.5.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.formatted.reqmts\"> [lib.ostream.formatted.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Keith Baker&nbsp; <b>Date:</b>&nbsp;23 Jul 2002</p>\n+<a name=\"373\"><h3>373.&nbsp;Are basic_istream and basic_ostream to use (exceptions()&amp;badbit) != 0 ?</h3></a><p><b>Section:</b>&nbsp;27.6.1.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.formatted.reqmts\"> [lib.istream.formatted.reqmts]</a>, 27.6.2.5.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.formatted.reqmts\"> [lib.ostream.formatted.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Keith Baker&nbsp; <b>Date:</b>&nbsp;23 Jul 2002</p>\n \n <p>\n In 27.6.1.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.formatted.reqmts\"> [lib.istream.formatted.reqmts]</a> and 27.6.2.5.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.formatted.reqmts\"> [lib.ostream.formatted.reqmts]</a>\n@@ -11449,7 +11456,7 @@ <h2>Defect Reports</h2>\n <p><b>Rationale:</b></p>\n <p>Fixes an obvious typo.</p>\n <hr>\n-<a name=\"375\"></a><h3><a name=\"375\">375.&nbsp;basic_ios should be ios_base in 27.7.1.3</a></h3><p><b>Section:</b>&nbsp;27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;14 Aug 2002</p>\n+<a name=\"375\"><h3>375.&nbsp;basic_ios should be ios_base in 27.7.1.3</h3></a><p><b>Section:</b>&nbsp;27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;14 Aug 2002</p>\n <p>\n In Section 27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>: Table 90, Table 91, and paragraph\n 14 all contain references to \"basic_ios::\" which should be\n@@ -11531,7 +11538,7 @@ <h2>Defect Reports</h2>\n elements was needed to terminate a sequence given the value of state.\"\n </p>\n <hr>\n-<a name=\"381\"></a><h3><a name=\"381\">381.&nbsp;detection of invalid mbstate_t in codecvt</a></h3><p><b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;6 Sep 2002</p>\n+<a name=\"381\"><h3>381.&nbsp;detection of invalid mbstate_t in codecvt</h3></a><p><b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;6 Sep 2002</p>\n <p>\n All but one codecvt member functions that take a state_type argument\n list as one of their preconditions that the state_type argument have\n@@ -12743,7 +12750,7 @@ <h2>Defect Reports</h2>\n uninitialized characters.  Positioning is only allowable over the\n initialized range.</p>\n <hr>\n-<a name=\"434\"><h3>434.&nbsp;bitset::to_string() hard to use</h3></a><p><b>Section:</b>&nbsp;23.3.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.bitset.members\"> [lib.bitset.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;15 Oct 2003</p>\n+<a name=\"434\"></a><h3><a name=\"434\">434.&nbsp;bitset::to_string() hard to use</a></h3><p><b>Section:</b>&nbsp;23.3.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.bitset.members\"> [lib.bitset.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;15 Oct 2003</p>\n <p>\n It has been pointed out a number of times that the bitset to_string() member\n function template is tedious to use since callers must explicitly specify the\n@@ -13788,7 +13795,7 @@ <h2>Defect Reports</h2>\n   Post-Redmond: Martin provided wording.]</i></p>\n \n <hr>\n-<a name=\"468\"><h3>468.&nbsp;unexpected consequences of ios_base::operator void*()</h3></a><p><b>Section:</b>&nbsp;27.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostate.flags\"> [lib.iostate.flags]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jun 2004</p>\n+<a name=\"468\"></a><h3><a name=\"468\">468.&nbsp;unexpected consequences of ios_base::operator void*()</a></h3><p><b>Section:</b>&nbsp;27.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostate.flags\"> [lib.iostate.flags]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jun 2004</p>\n \n <p>The program below is required to compile but when run it typically\n produces unexpected results due to the user-defined conversion from"}]}