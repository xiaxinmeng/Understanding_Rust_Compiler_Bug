{"sha": "d0337ddca57bd43865679081a4a8d26502d4fd83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAzMzdkZGNhNTdiZDQzODY1Njc5MDgxYTRhOGQyNjUwMmQ0ZmQ4Mw==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-24T08:02:30Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-24T08:02:30Z"}, "message": "AVX-512. Add insert insn patterns.\n\ngcc/\n\t* config/i386/i386.c\n\t(CODE_FOR_avx2_extracti128): Rename to ...\n\t(CODE_FOR_avx_vextractf128v4di): this.\n\t(CODE_FOR_avx2_inserti128): Rename to ...\n\t(CODE_FOR_avx_vinsertf128v4di): this.\n\t(ix86_expand_args_builtin): Handle CODE_FOR_avx_vinsertf128v4di,\n\tCODE_FOR_avx_vextractf128v4di.\n\t(ix86_expand_args_builtin): Handle CODE_FOR_avx512dq_vinsertf32x8_mask,\n\tCODE_FOR_avx512dq_vinserti32x8_mask, CODE_FOR_avx512vl_vinsertv4df,\n\tCODE_FOR_avx512vl_vinsertv4di, CODE_FOR_avx512vl_vinsertv8sf,\n\tCODE_FOR_avx512vl_vinsertv8si.\n\t* config/i386/sse.md\n\t(define_expand\n\t\"<extract_type>_vinsert<shuffletype><extract_suf>_mask\"): Use\n\tAVX512_VEC mode iterator.\n\t(define_insn\n\t\"<mask_codefor><extract_type>_vinsert<shuffletype><extract_suf>_1<mask_name>\"):\n\tDitto.\n\t(define_expand\n\t\"<extract_type_2>_vinsert<shuffletype><extract_suf_2>_mask\"): Use\n\tAVX512_VEC_2 mode iterator.\n\t(define_insn \"vec_set_lo_<mode><mask_name>\"): New.\n\t(define_insn \"vec_set_hi_<mode><mask_name>\"): Ditto.\n\t(define_expand \"avx512vl_vinsert<mode>\"): Ditto.\n\t(define_insn \"avx2_vec_set_lo_v4di\"): Delete.\n\t(define_insn \"avx2_vec_set_hi_v4di\"): Ditto.\n\t(define_insn \"vec_set_lo_<mode><mask_name>\"): Add masking.\n\t(define_insn \"vec_set_hi_<mode><mask_name>\"): Ditto.\n\t(define_insn \"vec_set_lo_<mode><mask_name>\"): Ditto.\n\t(define_insn \"vec_set_hi_<mode><mask_name>\"): Ditto.\n\t(define_expand \"avx2_extracti128\"): Delete.\n\t(define_expand \"avx2_inserti128\"): Ditto.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215542", "tree": {"sha": "529d638019f91feba59ef4d586ed5c2bd0ee887d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/529d638019f91feba59ef4d586ed5c2bd0ee887d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0337ddca57bd43865679081a4a8d26502d4fd83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0337ddca57bd43865679081a4a8d26502d4fd83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0337ddca57bd43865679081a4a8d26502d4fd83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0337ddca57bd43865679081a4a8d26502d4fd83/comments", "author": null, "committer": null, "parents": [{"sha": "f95dcc81045c8eb1bd86f7223704c14690f7d401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f95dcc81045c8eb1bd86f7223704c14690f7d401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f95dcc81045c8eb1bd86f7223704c14690f7d401"}], "stats": {"total": 337, "additions": 186, "deletions": 151}, "files": [{"sha": "a6da7a44e474125af2831aecceffb842ea2cc194", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0337ddca57bd43865679081a4a8d26502d4fd83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0337ddca57bd43865679081a4a8d26502d4fd83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0337ddca57bd43865679081a4a8d26502d4fd83", "patch": "@@ -1,3 +1,45 @@\n+2014-09-24  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.c\n+\t(CODE_FOR_avx2_extracti128): Rename to ...\n+\t(CODE_FOR_avx_vextractf128v4di): this.\n+\t(CODE_FOR_avx2_inserti128): Rename to ...\n+\t(CODE_FOR_avx_vinsertf128v4di): this.\n+\t(ix86_expand_args_builtin): Handle CODE_FOR_avx_vinsertf128v4di,\n+\tCODE_FOR_avx_vextractf128v4di.\n+\t(ix86_expand_args_builtin): Handle CODE_FOR_avx512dq_vinsertf32x8_mask,\n+\tCODE_FOR_avx512dq_vinserti32x8_mask, CODE_FOR_avx512vl_vinsertv4df,\n+\tCODE_FOR_avx512vl_vinsertv4di, CODE_FOR_avx512vl_vinsertv8sf,\n+\tCODE_FOR_avx512vl_vinsertv8si.\n+\t* config/i386/sse.md\n+\t(define_expand\n+\t\"<extract_type>_vinsert<shuffletype><extract_suf>_mask\"): Use\n+\tAVX512_VEC mode iterator.\n+\t(define_insn\n+\t\"<mask_codefor><extract_type>_vinsert<shuffletype><extract_suf>_1<mask_name>\"):\n+\tDitto.\n+\t(define_expand\n+\t\"<extract_type_2>_vinsert<shuffletype><extract_suf_2>_mask\"): Use\n+\tAVX512_VEC_2 mode iterator.\n+\t(define_insn \"vec_set_lo_<mode><mask_name>\"): New.\n+\t(define_insn \"vec_set_hi_<mode><mask_name>\"): Ditto.\n+\t(define_expand \"avx512vl_vinsert<mode>\"): Ditto.\n+\t(define_insn \"avx2_vec_set_lo_v4di\"): Delete.\n+\t(define_insn \"avx2_vec_set_hi_v4di\"): Ditto.\n+\t(define_insn \"vec_set_lo_<mode><mask_name>\"): Add masking.\n+\t(define_insn \"vec_set_hi_<mode><mask_name>\"): Ditto.\n+\t(define_insn \"vec_set_lo_<mode><mask_name>\"): Ditto.\n+\t(define_insn \"vec_set_hi_<mode><mask_name>\"): Ditto.\n+\t(define_expand \"avx2_extracti128\"): Delete.\n+\t(define_expand \"avx2_inserti128\"): Ditto.\n+\n 2014-09-24  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "0843da35adacff3447c57f4dd2d322f66f3fc80b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0337ddca57bd43865679081a4a8d26502d4fd83/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0337ddca57bd43865679081a4a8d26502d4fd83/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d0337ddca57bd43865679081a4a8d26502d4fd83", "patch": "@@ -29961,8 +29961,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_permv4df, \"__builtin_ia32_permdf256\", IX86_BUILTIN_VPERMDF256, UNKNOWN, (int) V4DF_FTYPE_V4DF_INT },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_permv4di, \"__builtin_ia32_permdi256\", IX86_BUILTIN_VPERMDI256, UNKNOWN, (int) V4DI_FTYPE_V4DI_INT },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_permv2ti, \"__builtin_ia32_permti256\", IX86_BUILTIN_VPERMTI256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_extracti128, \"__builtin_ia32_extract128i256\", IX86_BUILTIN_VEXTRACT128I256, UNKNOWN, (int) V2DI_FTYPE_V4DI_INT },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_inserti128, \"__builtin_ia32_insert128i256\", IX86_BUILTIN_VINSERT128I256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V2DI_INT },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx_vextractf128v4di, \"__builtin_ia32_extract128i256\", IX86_BUILTIN_VEXTRACT128I256, UNKNOWN, (int) V2DI_FTYPE_V4DI_INT },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx_vinsertf128v4di, \"__builtin_ia32_insert128i256\", IX86_BUILTIN_VINSERT128I256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V2DI_INT },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_ashlvv4di, \"__builtin_ia32_psllv4di\", IX86_BUILTIN_PSLLVV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_ashlvv2di, \"__builtin_ia32_psllv2di\", IX86_BUILTIN_PSLLVV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_ashlvv8si, \"__builtin_ia32_psllv8si\", IX86_BUILTIN_PSLLVV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n@@ -34053,8 +34053,8 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t  if (!match)\n \t    switch (icode)\n \t      {\n-\t      case CODE_FOR_avx2_inserti128:\n-\t      case CODE_FOR_avx2_extracti128:\n+\t      case CODE_FOR_avx_vinsertf128v4di:\n+\t      case CODE_FOR_avx_vextractf128v4di:\n \t\terror (\"the last argument must be an 1-bit immediate\");\n \t\treturn const0_rtx;\n \n@@ -34120,6 +34120,12 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n \t      case CODE_FOR_avx512f_vinserti64x4_mask:\n \t      case CODE_FOR_avx512f_vextractf64x4_mask:\n \t      case CODE_FOR_avx512f_vextracti64x4_mask:\n+\t      case CODE_FOR_avx512dq_vinsertf32x8_mask:\n+\t      case CODE_FOR_avx512dq_vinserti32x8_mask:\n+\t      case CODE_FOR_avx512vl_vinsertv4df:\n+\t      case CODE_FOR_avx512vl_vinsertv4di:\n+\t      case CODE_FOR_avx512vl_vinsertv8sf:\n+\t      case CODE_FOR_avx512vl_vinsertv8si:\n \t\terror (\"the last argument must be a 1-bit immediate\");\n \t\treturn const0_rtx;\n "}, {"sha": "2dd79d0296c12d4de4d7b1e2ba5efbda496712e8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 134, "deletions": 147, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0337ddca57bd43865679081a4a8d26502d4fd83/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0337ddca57bd43865679081a4a8d26502d4fd83/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=d0337ddca57bd43865679081a4a8d26502d4fd83", "patch": "@@ -11199,80 +11199,64 @@\n    (set_attr \"prefix\" \"orig,orig,vex,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"avx512f_vinsert<shuffletype>32x4_mask\"\n-  [(match_operand:V16FI 0 \"register_operand\")\n-   (match_operand:V16FI 1 \"register_operand\")\n+(define_expand \"<extract_type>_vinsert<shuffletype><extract_suf>_mask\"\n+  [(match_operand:AVX512_VEC 0 \"register_operand\")\n+   (match_operand:AVX512_VEC 1 \"register_operand\")\n    (match_operand:<ssequartermode> 2 \"nonimmediate_operand\")\n    (match_operand:SI 3 \"const_0_to_3_operand\")\n-   (match_operand:V16FI 4 \"register_operand\")\n+   (match_operand:AVX512_VEC 4 \"register_operand\")\n    (match_operand:<avx512fmaskmode> 5 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n-  switch (INTVAL (operands[3]))\n-    {\n-    case 0:\n-      emit_insn (gen_avx512f_vinsert<shuffletype>32x4_1_mask (operands[0],\n-          operands[1], operands[2], GEN_INT (0xFFF), operands[4],\n-\t  operands[5]));\n-      break;\n-    case 1:\n-      emit_insn (gen_avx512f_vinsert<shuffletype>32x4_1_mask (operands[0],\n-          operands[1], operands[2], GEN_INT (0xF0FF), operands[4],\n-\t  operands[5]));\n-      break;\n-    case 2:\n-      emit_insn (gen_avx512f_vinsert<shuffletype>32x4_1_mask (operands[0],\n-          operands[1], operands[2], GEN_INT (0xFF0F), operands[4],\n-\t  operands[5]));\n-      break;\n-    case 3:\n-      emit_insn (gen_avx512f_vinsert<shuffletype>32x4_1_mask (operands[0],\n-          operands[1], operands[2], GEN_INT (0xFFF0), operands[4],\n-\t  operands[5]));\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n+  int mask,selector;\n+  mask = INTVAL (operands[3]);\n+  selector = GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 4 ?\n+    0xFFFF ^ (0xF000 >> mask * 4)\n+    : 0xFF ^ (0xC0 >> mask * 2);\n+  emit_insn (gen_<extract_type>_vinsert<shuffletype><extract_suf>_1_mask\n+    (operands[0], operands[1], operands[2], GEN_INT (selector),\n+     operands[4], operands[5]));\n   DONE;\n-\n })\n \n-(define_insn \"<mask_codefor>avx512f_vinsert<shuffletype>32x4_1<mask_name>\"\n-  [(set (match_operand:V16FI 0 \"register_operand\" \"=v\")\n-\t(vec_merge:V16FI\n-\t  (match_operand:V16FI 1 \"register_operand\" \"v\")\n-\t  (vec_duplicate:V16FI\n+(define_insn \"<mask_codefor><extract_type>_vinsert<shuffletype><extract_suf>_1<mask_name>\"\n+  [(set (match_operand:AVX512_VEC 0 \"register_operand\" \"=v\")\n+\t(vec_merge:AVX512_VEC\n+\t  (match_operand:AVX512_VEC 1 \"register_operand\" \"v\")\n+\t  (vec_duplicate:AVX512_VEC\n \t\t(match_operand:<ssequartermode> 2 \"nonimmediate_operand\" \"vm\"))\n \t  (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_AVX512F\"\n {\n   int mask;\n-  if (INTVAL (operands[3]) == 0xFFF)\n-      mask = 0;\n-  else if ( INTVAL (operands[3]) == 0xF0FF)\n-      mask = 1;\n-  else if ( INTVAL (operands[3]) == 0xFF0F)\n-      mask = 2;\n-  else if ( INTVAL (operands[3]) == 0xFFF0)\n-      mask = 3;\n+  int selector = INTVAL (operands[3]);\n+\n+  if (selector == 0xFFF || selector == 0x3F)\n+    mask = 0;\n+  else if ( selector == 0xF0FF || selector == 0xCF)\n+    mask = 1;\n+  else if ( selector == 0xFF0F || selector == 0xF3)\n+    mask = 2;\n+  else if ( selector == 0xFFF0 || selector == 0xFC)\n+    mask = 3;\n   else\n       gcc_unreachable ();\n \n   operands[3] = GEN_INT (mask);\n \n-  return \"vinsert<shuffletype>32x4\\t{%3, %2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2, %3}\";\n+  return \"vinsert<shuffletype><extract_suf>\\t{%3, %2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2, %3}\";\n }\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"avx512f_vinsert<shuffletype>64x4_mask\"\n-  [(match_operand:V8FI 0 \"register_operand\")\n-   (match_operand:V8FI 1 \"register_operand\")\n+(define_expand \"<extract_type_2>_vinsert<shuffletype><extract_suf_2>_mask\"\n+  [(match_operand:AVX512_VEC_2 0 \"register_operand\")\n+   (match_operand:AVX512_VEC_2 1 \"register_operand\")\n    (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\")\n    (match_operand:SI 3 \"const_0_to_1_operand\")\n-   (match_operand:V8FI 4 \"register_operand\")\n+   (match_operand:AVX512_VEC_2 4 \"register_operand\")\n    (match_operand:<avx512fmaskmode> 5 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n@@ -11288,6 +11272,40 @@\n   DONE;\n })\n \n+(define_insn \"vec_set_lo_<mode><mask_name>\"\n+  [(set (match_operand:V16FI 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V16FI\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (match_operand:V16FI 1 \"register_operand\" \"v\")\n+\t    (parallel [(const_int 8) (const_int 9)\n+\t      (const_int 10) (const_int 11)\n+\t      (const_int 12) (const_int 13)\n+              (const_int 14) (const_int 15)]))))]\n+  \"TARGET_AVX512DQ\"\n+  \"vinsert<shuffletype>32x8\\t{$0x0, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, $0x0}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vec_set_hi_<mode><mask_name>\"\n+  [(set (match_operand:V16FI 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V16FI\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")\n+\t  (vec_select:<ssehalfvecmode>\n+\t    (match_operand:V16FI 1 \"register_operand\" \"v\")\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t      (const_int 2) (const_int 3)\n+\t      (const_int 4) (const_int 5)\n+              (const_int 6) (const_int 7)]))))]\n+  \"TARGET_AVX512DQ\"\n+  \"vinsert<shuffletype>32x8\\t{$0x1, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, $0x1}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n (define_insn \"vec_set_lo_<mode><mask_name>\"\n   [(set (match_operand:V8FI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V8FI\n@@ -16330,6 +16348,34 @@\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"orig,vex\")])\n \n+(define_expand \"avx512vl_vinsert<mode>\"\n+  [(match_operand:VI48F_256 0 \"register_operand\")\n+   (match_operand:VI48F_256 1 \"register_operand\")\n+   (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\")\n+   (match_operand:SI 3 \"const_0_to_1_operand\")\n+   (match_operand:VI48F_256 4 \"register_operand\")\n+   (match_operand:<avx512fmaskmode> 5 \"register_operand\")]\n+  \"TARGET_AVX512VL\"\n+{\n+  rtx (*insn)(rtx, rtx, rtx, rtx, rtx);\n+\n+  switch (INTVAL (operands[3]))\n+    {\n+    case 0:\n+      insn = gen_vec_set_lo_<mode>_mask;\n+      break;\n+    case 1:\n+      insn = gen_vec_set_hi_<mode>_mask;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  emit_insn (insn (operands[0], operands[1], operands[2], operands[4],\n+\t\t   operands[5]));\n+  DONE;\n+})\n+\n (define_expand \"avx_vinsertf128<mode>\"\n   [(match_operand:V_256 0 \"register_operand\")\n    (match_operand:V_256 1 \"register_operand\")\n@@ -16355,92 +16401,82 @@\n   DONE;\n })\n \n-(define_insn \"avx2_vec_set_lo_v4di\"\n-  [(set (match_operand:V4DI 0 \"register_operand\" \"=x\")\n-\t(vec_concat:V4DI\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")\n-\t  (vec_select:V2DI\n-\t    (match_operand:V4DI 1 \"register_operand\" \"x\")\n-\t    (parallel [(const_int 2) (const_int 3)]))))]\n-  \"TARGET_AVX2\"\n-  \"vinserti128\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n-\n-(define_insn \"avx2_vec_set_hi_v4di\"\n-  [(set (match_operand:V4DI 0 \"register_operand\" \"=x\")\n-\t(vec_concat:V4DI\n-\t  (vec_select:V2DI\n-\t    (match_operand:V4DI 1 \"register_operand\" \"x\")\n-\t    (parallel [(const_int 0) (const_int 1)]))\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX2\"\n-  \"vinserti128\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n-  [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"OI\")])\n-\n-(define_insn \"vec_set_lo_<mode>\"\n-  [(set (match_operand:VI8F_256 0 \"register_operand\" \"=x\")\n+(define_insn \"vec_set_lo_<mode><mask_name>\"\n+  [(set (match_operand:VI8F_256 0 \"register_operand\" \"=v\")\n \t(vec_concat:VI8F_256\n-\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")\n \t  (vec_select:<ssehalfvecmode>\n-\t    (match_operand:VI8F_256 1 \"register_operand\" \"x\")\n+\t    (match_operand:VI8F_256 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX\"\n-  \"vinsert<i128>\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n+{\n+  if (TARGET_AVX512VL)\n+    return \"vinsert<shuffletype>64x2\\t{$0x0, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x0}\";\n+  else\n+    return \"vinsert<i128>\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\";\n+}\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"vec_set_hi_<mode>\"\n-  [(set (match_operand:VI8F_256 0 \"register_operand\" \"=x\")\n+(define_insn \"vec_set_hi_<mode><mask_name>\"\n+  [(set (match_operand:VI8F_256 0 \"register_operand\" \"=v\")\n \t(vec_concat:VI8F_256\n \t  (vec_select:<ssehalfvecmode>\n-\t    (match_operand:VI8F_256 1 \"register_operand\" \"x\")\n+\t    (match_operand:VI8F_256 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0) (const_int 1)]))\n-\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")))]\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX\"\n-  \"vinsert<i128>\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n+{\n+  if (TARGET_AVX512VL)\n+    return \"vinsert<shuffletype>64x2\\t{$0x1, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x1}\";\n+  else\n+    return \"vinsert<i128>\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\";\n+}\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"vec_set_lo_<mode>\"\n-  [(set (match_operand:VI4F_256 0 \"register_operand\" \"=x\")\n+(define_insn \"vec_set_lo_<mode><mask_name>\"\n+  [(set (match_operand:VI4F_256 0 \"register_operand\" \"=v\")\n \t(vec_concat:VI4F_256\n-\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")\n \t  (vec_select:<ssehalfvecmode>\n-\t    (match_operand:VI4F_256 1 \"register_operand\" \"x\")\n+\t    (match_operand:VI4F_256 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n   \"TARGET_AVX\"\n-  \"vinsert<i128>\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\"\n+{\n+  if (TARGET_AVX512VL)\n+    return \"vinsert<shuffletype>32x4\\t{$0x0, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x0}\";\n+  else\n+    return \"vinsert<i128>\\t{$0x0, %2, %1, %0|%0, %1, %2, 0x0}\";\n+}\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"vec_set_hi_<mode>\"\n-  [(set (match_operand:VI4F_256 0 \"register_operand\" \"=x\")\n+(define_insn \"vec_set_hi_<mode><mask_name>\"\n+  [(set (match_operand:VI4F_256 0 \"register_operand\" \"=v\")\n \t(vec_concat:VI4F_256\n \t  (vec_select:<ssehalfvecmode>\n-\t    (match_operand:VI4F_256 1 \"register_operand\" \"x\")\n+\t    (match_operand:VI4F_256 1 \"register_operand\" \"v\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))\n-\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"xm\")))]\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX\"\n-  \"vinsert<i128>\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\"\n+{\n+  if (TARGET_AVX512VL)\n+    return \"vinsert<shuffletype>32x4\\t{$0x1, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x1}\";\n+  else\n+    return \"vinsert<i128>\\t{$0x1, %2, %1, %0|%0, %1, %2, 0x1}\";\n+}\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -16611,55 +16647,6 @@\n   DONE;\n })\n \n-(define_expand \"avx2_extracti128\"\n-  [(match_operand:V2DI 0 \"nonimmediate_operand\")\n-   (match_operand:V4DI 1 \"register_operand\")\n-   (match_operand:SI 2 \"const_0_to_1_operand\")]\n-  \"TARGET_AVX2\"\n-{\n-  rtx (*insn)(rtx, rtx);\n-\n-  switch (INTVAL (operands[2]))\n-    {\n-    case 0:\n-      insn = gen_vec_extract_lo_v4di;\n-      break;\n-    case 1:\n-      insn = gen_vec_extract_hi_v4di;\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  emit_insn (insn (operands[0], operands[1]));\n-  DONE;\n-})\n-\n-(define_expand \"avx2_inserti128\"\n-  [(match_operand:V4DI 0 \"register_operand\")\n-   (match_operand:V4DI 1 \"register_operand\")\n-   (match_operand:V2DI 2 \"nonimmediate_operand\")\n-   (match_operand:SI 3 \"const_0_to_1_operand\")]\n-  \"TARGET_AVX2\"\n-{\n-  rtx (*insn)(rtx, rtx, rtx);\n-\n-  switch (INTVAL (operands[3]))\n-    {\n-    case 0:\n-      insn = gen_avx2_vec_set_lo_v4di;\n-      break;\n-    case 1:\n-      insn = gen_avx2_vec_set_hi_v4di;\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  emit_insn (insn (operands[0], operands[1], operands[2]));\n-  DONE;\n-})\n-\n (define_insn \"<avx2_avx512>_ashrv<mode><mask_name>\"\n   [(set (match_operand:VI48_AVX512F_AVX512VL 0 \"register_operand\" \"=v\")\n \t(ashiftrt:VI48_AVX512F_AVX512VL"}]}