{"sha": "7f2ab886272973c37d305161e89f9f4873cabb7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2YyYWI4ODYyNzI5NzNjMzdkMzA1MTYxZTg5ZjlmNDg3M2NhYmI3ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-14T18:56:12Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-14T18:56:12Z"}, "message": "(FUNCTION_PROLOGUE, FUNCTION_EPILOGUE):\n\nIf omitting frame pointer, output an adjspd if necessary.\nUse movd to save registers if four or less need saving.\nSet DEPTH properly.\n\nFrom-SVN: r5320", "tree": {"sha": "be76589d757d736a94d4aea1af433f2df17c1874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be76589d757d736a94d4aea1af433f2df17c1874"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f2ab886272973c37d305161e89f9f4873cabb7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f2ab886272973c37d305161e89f9f4873cabb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f2ab886272973c37d305161e89f9f4873cabb7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f2ab886272973c37d305161e89f9f4873cabb7d/comments", "author": null, "committer": null, "parents": [{"sha": "36b505688d346254c6a9162e8016aec25cd31811", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b505688d346254c6a9162e8016aec25cd31811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b505688d346254c6a9162e8016aec25cd31811"}], "stats": {"total": 69, "additions": 52, "deletions": 17}, "files": [{"sha": "d05690e5648e1d1b2eb45aa67902b4591f6e33ef", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 52, "deletions": 17, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f2ab886272973c37d305161e89f9f4873cabb7d/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f2ab886272973c37d305161e89f9f4873cabb7d/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=7f2ab886272973c37d305161e89f9f4873cabb7d", "patch": "@@ -511,6 +511,11 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, GEN_AND_FP_REGS,\n  *  .\n  *\n  * If a frame pointer is not needed we need assembler of the form\n+ *\n+ *  # Make space on the stack\n+ *\n+ *  adjspd <local stack space + 4>\n+ *\n  *  # Save any general purpose registers necessary\n  *\n  *  save [<general purpose regs to save>]\n@@ -529,20 +534,32 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, GEN_AND_FP_REGS,\n   for (regno = 0; regno < 8; regno++)\t\t\t\t\\\n     if (regs_ever_live[regno]\t\t\t\t\t\\\n \t&& ! call_used_regs[regno])\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      *bufp++ = regno; g_regs_used++;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+        *bufp++ = regno; g_regs_used++;\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n   *bufp = -1;\t\t\t\t\t\t\t\\\n   for (; regno < 16; regno++)\t\t\t\t\t\\\n-    if (regs_ever_live[regno] && !call_used_regs[regno]) {\t\\\n-      *fbufp++ = regno;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n+    if (regs_ever_live[regno] && !call_used_regs[regno])\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+        *fbufp++ = regno;\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n   *fbufp = -1;\t\t\t\t\t\t\t\\\n   bufp = used_regs_buf;\t\t\t\t\t\t\\\n   if (frame_pointer_needed)\t\t\t\t\t\\\n     fprintf (FILE, \"\\tenter [\");\t\t\t\t\\\n-  else if (g_regs_used)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\tsave [\");\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (SIZE)\t\t\t\t\t\t\t\\\n+        fprintf (FILE, \"\\tadjspd %d\\n\", SIZE + 4);\t\t\\\n+      if (g_regs_used && g_regs_used > 4)\t\t\t\\\n+        fprintf (FILE, \"\\tsave [\");\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  while (*bufp >= 0)\t\t\t\t\t\\\n+            fprintf (FILE, \"\\tmovd r%d,tos\\n\", *bufp++);\t\\\n+\t  g_regs_used = 0;\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (*bufp >= 0)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"r%d\", *bufp++);\t\t\t\t\\\n@@ -610,7 +627,12 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, GEN_AND_FP_REGS,\n     .\n     .\n     .\n-    restore [<general purpose regs to save>]  */\n+    restore [<general purpose regs to save>]\n+\n+    # reclaim space allocated on stack\n+\n+    adjspd <-(local stack space + 4)> */\n+\n \n #define FUNCTION_EPILOGUE(FILE, SIZE) \\\n { register int regno, g_regs_used = 0, f_regs_used = 0;\t\t\\\n@@ -619,16 +641,17 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, GEN_AND_FP_REGS,\n   extern char call_used_regs[];\t\t\t\t\t\\\n   *fbufp++ = -2;\t\t\t\t\t\t\\\n   for (regno = 8; regno < 16; regno++)\t\t\t\t\\\n-    if (regs_ever_live[regno] && !call_used_regs[regno]) {\t\\\n+    if (regs_ever_live[regno] && !call_used_regs[regno])\t\\\n+      {\t\t\t\t\t\t\t\t\\\n        *fbufp++ = regno; f_regs_used++;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n   fbufp--;\t\t\t\t\t\t\t\\\n   for (regno = 0; regno < 8; regno++)\t\t\t\t\\\n     if (regs_ever_live[regno]\t\t\t\t\t\\\n \t&& ! call_used_regs[regno])\t\t\t\t\\\n-    {                                                         \t\\\n-      *bufp++ = regno; g_regs_used++;\t\t\t\t\\\n-    }                                                         \t\\\n+      {                                                        \t\\\n+        *bufp++ = regno; g_regs_used++;\t\t\t\t\\\n+      }                                                        \t\\\n   while (fbufp > used_fregs_buf)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       if ((*fbufp & 1) && fbufp[0] == fbufp[-1] + 1)\t\t\\\n@@ -640,8 +663,17 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, GEN_AND_FP_REGS,\n     }\t\t\t\t\t\t\t\t\\\n   if (frame_pointer_needed)\t\t\t\t\t\\\n     fprintf (FILE, \"\\texit [\");\t\t\t\t\t\\\n-  else if (g_regs_used)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\trestore [\");\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (g_regs_used && g_regs_used > 4)\t\t\t\\\n+        fprintf (FILE, \"\\trestore [\");\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\t\\\n+\t  while (bufp > used_regs_buf)\t\t\t\t\\\n+            fprintf (FILE, \"\\tmovd tos,r%d\\n\", *--bufp);\t\\\n+\t  g_regs_used = 0;\t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   while (bufp > used_regs_buf)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"r%d\", *--bufp);\t\t\t\t\\\n@@ -650,6 +682,8 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, GEN_AND_FP_REGS,\n     }\t\t\t\t\t\t\t\t\\\n   if (g_regs_used || frame_pointer_needed)\t\t\t\\\n     fprintf (FILE, \"]\\n\");\t\t\t\t\t\\\n+  if (SIZE && !frame_pointer_needed)\t\t\t\t\\\n+    fprintf (FILE, \"\\tadjspd %d\\n\", -(SIZE + 4));\t\t\\\n   if (current_function_pops_args)\t\t\t\t\\\n     fprintf (FILE, \"\\tret %d\\n\", current_function_pops_args);\t\\\n   else fprintf (FILE, \"\\tret 0\\n\"); }\n@@ -666,7 +700,8 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, GEN_AND_FP_REGS,\n   for (regno = 0; regno < 16; regno++)\t\t\t\t\\\n     if (regs_ever_live[regno] && ! call_used_regs[regno])\t\\\n       offset += 4;\t\t\t\t\t\t\\\n-  (DEPTH) = offset - get_frame_size ();\t\t\t\t\\\n+  (DEPTH) = (offset + get_frame_size ()\t\t\t\t\\\n+\t     + (get_frame_size () == 0 ? 0 : 4));\t\t\\\n }\n \f\n "}]}