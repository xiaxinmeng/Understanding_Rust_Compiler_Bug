{"sha": "9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "node_id": "C_kwDOANBUbNoAKDljNmE0YmVlZWQ1NzJmOWUyMzVmODgxZTAwYWQ4YzYzYjZiY2M5ZGY", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-02-25T14:58:47Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-04T13:54:02Z"}, "message": "c++: Remove cdtor_label\n\nJakub pointed out that cdtor_label is unnecessary, we should get all the\ndesired semantics with a normal return.\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (struct language_function): Remove x_cdtor_label.\n\t(cdtor_label, LABEL_DECL_CDTOR): Remove.\n\t* constexpr.cc (returns): Don't check LABEL_DECL_CDTOR.\n\t(cxx_eval_constant_expression): Don't call returns.\n\t* decl.cc (check_goto): Don't check cdtor_label.\n\t(start_preparsed_function): And don't set it.\n\t(finish_constructor_body, finish_destructor_body): Remove.\n\t(finish_function_body): Don't call them.\n\t* typeck.cc (check_return_expr): Handle cdtor_returns_this here.\n\t* semantics.cc (finish_return_stmt): Not here.", "tree": {"sha": "356ad0232c7b7fa9861bd7124187ec792219087d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/356ad0232c7b7fa9861bd7124187ec792219087d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eca04dc8555f5fae462fbd16386da9aaf38a0711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca04dc8555f5fae462fbd16386da9aaf38a0711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca04dc8555f5fae462fbd16386da9aaf38a0711"}], "stats": {"total": 65, "additions": 12, "deletions": 53}, "files": [{"sha": "9b1e71857fc7907645ac0ace3fce8e34046d1395", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "patch": "@@ -6060,9 +6060,7 @@ static bool\n returns (tree *jump_target)\n {\n   return *jump_target\n-    && (TREE_CODE (*jump_target) == RETURN_EXPR\n-\t|| (TREE_CODE (*jump_target) == LABEL_DECL\n-\t    && LABEL_DECL_CDTOR (*jump_target)));\n+    && TREE_CODE (*jump_target) == RETURN_EXPR;\n }\n \n static bool\n@@ -7473,9 +7471,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \n     case GOTO_EXPR:\n       if (breaks (&TREE_OPERAND (t, 0))\n-\t  || continues (&TREE_OPERAND (t, 0))\n-\t  /* Allow for jumping to a cdtor_label.  */\n-\t  || returns (&TREE_OPERAND (t, 0)))\n+\t  || continues (&TREE_OPERAND (t, 0)))\n \t*jump_target = TREE_OPERAND (t, 0);\n       else\n \t{"}, {"sha": "663fe7a20fc584e46f7dc84d739437010740d5e1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "patch": "@@ -543,7 +543,6 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       DECL_CONSTRAINT_VAR_P (in a PARM_DECL)\n       TEMPLATE_DECL_COMPLEX_ALIAS_P (in TEMPLATE_DECL)\n       DECL_INSTANTIATING_NSDMI_P (in a FIELD_DECL)\n-      LABEL_DECL_CDTOR (in LABEL_DECL)\n       USING_DECL_UNRELATED_P (in USING_DECL)\n    3: DECL_IN_AGGR_P.\n    4: DECL_C_BIT_FIELD (in a FIELD_DECL)\n@@ -2057,7 +2056,6 @@ struct named_label_hash : ggc_remove <named_label_entry *>\n struct GTY(()) language_function {\n   struct c_language_function base;\n \n-  tree x_cdtor_label;\n   tree x_current_class_ptr;\n   tree x_current_class_ref;\n   tree x_eh_spec_block;\n@@ -2091,13 +2089,6 @@ struct GTY(()) language_function {\n \n #define cp_function_chain (cfun->language)\n \n-/* In a constructor destructor, the point at which all derived class\n-   destroying/construction has been done.  I.e., just before a\n-   constructor returns, or before any base class destroying will be done\n-   in a destructor.  */\n-\n-#define cdtor_label cp_function_chain->x_cdtor_label\n-\n /* When we're processing a member function, current_class_ptr is the\n    PARM_DECL for the `this' pointer.  The current_class_ref is an\n    expression for `*this'.  */\n@@ -4278,11 +4269,6 @@ get_vec_init_expr (tree t)\n #define DECL_LOCAL_DECL_ALIAS(NODE)\t\t\t\\\n   DECL_ACCESS ((gcc_checking_assert (DECL_LOCAL_DECL_P (NODE)), NODE))\n \n-/* Nonzero if NODE is the target for genericization of 'return' stmts\n-   in constructors/destructors of targetm.cxx.cdtor_returns_this targets.  */\n-#define LABEL_DECL_CDTOR(NODE) \\\n-  DECL_LANG_FLAG_2 (LABEL_DECL_CHECK (NODE))\n-\n /* True if NODE was declared with auto in its return type, but it has\n    started compilation and so the return type might have been changed by\n    return type deduction; its declared return type should be found in"}, {"sha": "c9110db796adb2c9e0d775b0065580236e077619", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "patch": "@@ -3613,11 +3613,6 @@ check_goto (tree decl)\n   if (TREE_CODE (decl) != LABEL_DECL)\n     return;\n \n-  /* We didn't record any information about this label when we created it,\n-     and there's not much point since it's trivial to analyze as a return.  */\n-  if (decl == cdtor_label)\n-    return;\n-\n   hashval_t hash = IDENTIFIER_HASH_VALUE (DECL_NAME (decl));\n   named_label_entry **slot\n     = named_labels->find_slot_with_hash (DECL_NAME (decl), hash, NO_INSERT);\n@@ -17325,14 +17320,6 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \n   ++function_depth;\n \n-  if (DECL_DESTRUCTOR_P (decl1)\n-      || (DECL_CONSTRUCTOR_P (decl1)\n-\t  && targetm.cxx.cdtor_returns_this ()))\n-    {\n-      cdtor_label = create_artificial_label (input_location);\n-      LABEL_DECL_CDTOR (cdtor_label) = true;\n-    }\n-\n   start_fname_decls ();\n \n   store_parm_decls (current_function_parms);\n@@ -17503,9 +17490,6 @@ finish_constructor_body (void)\n \n   if (targetm.cxx.cdtor_returns_this ())\n     {\n-      /* Any return from a constructor will end up here.  */\n-      add_stmt (build_stmt (input_location, LABEL_EXPR, cdtor_label));\n-\n       val = DECL_ARGUMENTS (current_function_decl);\n       suppress_warning (val, OPT_Wuse_after_free);\n       val = build2 (MODIFY_EXPR, TREE_TYPE (val),\n@@ -17592,10 +17576,6 @@ finish_destructor_body (void)\n {\n   tree exprstmt;\n \n-  /* Any return from a destructor will end up here; that way all base\n-     and member cleanups will be run when the function returns.  */\n-  add_stmt (build_stmt (input_location, LABEL_EXPR, cdtor_label));\n-\n   if (targetm.cxx.cdtor_returns_this ())\n     {\n       tree val;"}, {"sha": "10478d1afeb68000770165d0aecaf7ff39e884c6", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "patch": "@@ -1238,17 +1238,6 @@ finish_return_stmt (tree expr)\n     {\n       if (warn_sequence_point)\n \tverify_sequence_points (expr);\n-\n-      if (DECL_DESTRUCTOR_P (current_function_decl)\n-\t  || (DECL_CONSTRUCTOR_P (current_function_decl)\n-\t      && targetm.cxx.cdtor_returns_this ()))\n-\t{\n-\t  /* Similarly, all destructors must run destructors for\n-\t     base-classes before returning.  So, all returns in a\n-\t     destructor get sent to the DTOR_LABEL; finish_function emits\n-\t     code to return a value there.  */\n-\t  return finish_goto_stmt (cdtor_label);\n-\t}\n     }\n \n   r = build_stmt (input_location, RETURN_EXPR, expr);"}, {"sha": "57e55ed48d1c093f54829e891b87b43c06086f42", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6a4beeed572f9e235f881e00ad8c63b6bcc9df/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=9c6a4beeed572f9e235f881e00ad8c63b6bcc9df", "patch": "@@ -10447,7 +10447,11 @@ check_return_expr (tree retval, bool *no_warning)\n     {\n       if (retval)\n \terror_at (loc, \"returning a value from a destructor\");\n-      return NULL_TREE;\n+\n+      if (targetm.cxx.cdtor_returns_this ())\n+\tretval = current_class_ptr;\n+      else\n+\treturn NULL_TREE;\n     }\n   else if (DECL_CONSTRUCTOR_P (current_function_decl))\n     {\n@@ -10458,7 +10462,11 @@ check_return_expr (tree retval, bool *no_warning)\n       else if (retval)\n \t/* You can't return a value from a constructor.  */\n \terror_at (loc, \"returning a value from a constructor\");\n-      return NULL_TREE;\n+\n+      if (targetm.cxx.cdtor_returns_this ())\n+\tretval = current_class_ptr;\n+      else\n+\treturn NULL_TREE;\n     }\n \n   const tree saved_retval = retval;"}]}