{"sha": "736f9bed34c0420063c3c01b520099711040d345", "node_id": "C_kwDOANBUbNoAKDczNmY5YmVkMzRjMDQyMDA2M2MzYzAxYjUyMDA5OTcxMTA0MGQzNDU", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-09-29T17:51:33Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-11T13:38:10Z"}, "message": "[Ada] Move rewriting of boxes in aggregates from resolution to expansion\n\ngcc/ada/\n\n\t* exp_aggr.adb (Initialize_Record_Component): Add assertion\n\tabout one of the parameters, so that illegal attempts to\n\tinitialize record components with Empty node are detected early\n\ton.\n\t(Build_Record_Aggr_Code): Handle boxes in aggregate component\n\tassociations just the components with no initialization in\n\tBuild_Record_Init_Proc.\n\t* sem_aggr.adb (Resolve_Record_Aggregate): For components that\n\trequire simple initialization carry boxes from resolution to\n\texpansion.\n\t* sem_util.adb (Needs_Simple_Initialization): Remove redundant\n\tparen.", "tree": {"sha": "04a4c86a4310cb786ef985599c6c33d2eaafefe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04a4c86a4310cb786ef985599c6c33d2eaafefe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/736f9bed34c0420063c3c01b520099711040d345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736f9bed34c0420063c3c01b520099711040d345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/736f9bed34c0420063c3c01b520099711040d345", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/736f9bed34c0420063c3c01b520099711040d345/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bafcab05cbff1cc98e3ca867b4474401eec729b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bafcab05cbff1cc98e3ca867b4474401eec729b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bafcab05cbff1cc98e3ca867b4474401eec729b"}], "stats": {"total": 98, "additions": 29, "deletions": 69}, "files": [{"sha": "ebc7a873ee87141d0795a6c5d772ed7b22e903c0", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736f9bed34c0420063c3c01b520099711040d345/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736f9bed34c0420063c3c01b520099711040d345/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=736f9bed34c0420063c3c01b520099711040d345", "patch": "@@ -3209,6 +3209,8 @@ package body Exp_Aggr is\n          Init_Stmt : Node_Id;\n \n       begin\n+         pragma Assert (Nkind (Init_Expr) in N_Subexpr);\n+\n          --  Protect the initialization statements from aborts. Generate:\n \n          --    Abort_Defer;\n@@ -3793,6 +3795,26 @@ package body Exp_Aggr is\n                 With_Default_Init => True,\n                 Constructor_Ref   => Expression (Comp)));\n \n+         elsif Box_Present (Comp)\n+           and then Needs_Simple_Initialization (Etype (Selector))\n+         then\n+            Comp_Expr :=\n+              Make_Selected_Component (Loc,\n+                Prefix        => New_Copy_Tree (Target),\n+                Selector_Name => New_Occurrence_Of (Selector, Loc));\n+\n+            Initialize_Record_Component\n+              (Rec_Comp  => Comp_Expr,\n+               Comp_Typ  => Etype (Selector),\n+               Init_Expr => Get_Simple_Init_Val\n+                              (Typ  => Etype (Selector),\n+                               N    => Comp,\n+                               Size =>\n+                                 (if Known_Esize (Selector)\n+                                  then Esize (Selector)\n+                                  else Uint_0)),\n+               Stmts     => L);\n+\n          --  Ada 2005 (AI-287): For each default-initialized component generate\n          --  a call to the corresponding IP subprogram if available.\n "}, {"sha": "527342f32d11fc642345990dff6f471fff585279", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 6, "deletions": 68, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736f9bed34c0420063c3c01b520099711040d345/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736f9bed34c0420063c3c01b520099711040d345/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=736f9bed34c0420063c3c01b520099711040d345", "patch": "@@ -5387,74 +5387,12 @@ package body Sem_Aggr is\n                      Assoc_List => New_Assoc_List);\n                   Set_Has_Self_Reference (N);\n \n-               --  A box-defaulted access component gets the value null. Also\n-               --  included are components of private types whose underlying\n-               --  type is an access type. In either case set the type of the\n-               --  literal, for subsequent use in semantic checks.\n-\n-               elsif Present (Underlying_Type (Ctyp))\n-                 and then Is_Access_Type (Underlying_Type (Ctyp))\n-               then\n-                  --  If the component's type is private with an access type as\n-                  --  its underlying type then we have to create an unchecked\n-                  --  conversion to satisfy type checking.\n-\n-                  if Is_Private_Type (Ctyp) then\n-                     declare\n-                        Qual_Null : constant Node_Id :=\n-                                      Make_Qualified_Expression (Sloc (N),\n-                                        Subtype_Mark =>\n-                                          New_Occurrence_Of\n-                                            (Underlying_Type (Ctyp), Sloc (N)),\n-                                        Expression   => Make_Null (Sloc (N)));\n-\n-                        Convert_Null : constant Node_Id :=\n-                                         Unchecked_Convert_To\n-                                           (Ctyp, Qual_Null);\n-\n-                     begin\n-                        Analyze_And_Resolve (Convert_Null, Ctyp);\n-                        Add_Association\n-                          (Component  => Component,\n-                           Expr       => Convert_Null,\n-                           Assoc_List => New_Assoc_List);\n-                     end;\n-\n-                  --  Otherwise the component type is non-private\n-\n-                  else\n-                     Expr := Make_Null (Sloc (N));\n-                     Set_Etype (Expr, Ctyp);\n-\n-                     Add_Association\n-                       (Component  => Component,\n-                        Expr       => Expr,\n-                        Assoc_List => New_Assoc_List);\n-                  end if;\n-\n-               --  Ada 2012: If component is scalar with default value, use it\n-               --  by converting it to Ctyp, so that subtype constraints are\n-               --  checked.\n-\n-               elsif Is_Scalar_Type (Ctyp)\n-                 and then Has_Default_Aspect (Ctyp)\n-               then\n-                  declare\n-                     Conv : constant Node_Id :=\n-                       Convert_To\n-                         (Typ  => Ctyp,\n-                          Expr =>\n-                            New_Copy_Tree\n-                              (Default_Aspect_Value\n-                                 (First_Subtype (Underlying_Type (Ctyp)))));\n-\n-                  begin\n-                     Analyze_And_Resolve (Conv, Ctyp);\n-                     Add_Association\n-                       (Component  => Component,\n-                        Expr       => Conv,\n-                        Assoc_List => New_Assoc_List);\n-                  end;\n+               elsif Needs_Simple_Initialization (Ctyp) then\n+                  Add_Association\n+                    (Component      => Component,\n+                     Expr           => Empty,\n+                     Assoc_List     => New_Assoc_List,\n+                     Is_Box_Present => True);\n \n                elsif Has_Non_Null_Base_Init_Proc (Ctyp)\n                  or else not Expander_Active"}, {"sha": "4f8426ab53f84252d137016c48b4e7c3b0584da3", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/736f9bed34c0420063c3c01b520099711040d345/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/736f9bed34c0420063c3c01b520099711040d345/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=736f9bed34c0420063c3c01b520099711040d345", "patch": "@@ -23121,7 +23121,7 @@ package body Sem_Util is\n       --  types.\n \n       elsif Is_Access_Type (Typ)\n-        or else (Consider_IS_NS and then (Is_Scalar_Type (Typ)))\n+        or else (Consider_IS_NS and then Is_Scalar_Type (Typ))\n       then\n          return True;\n "}]}