{"sha": "d067e238cbf20a659f024b342253230b28eb5a7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA2N2UyMzhjYmYyMGE2NTlmMDI0YjM0MjI1MzIzMGIyOGViNWE3Zg==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2016-05-10T16:08:42Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-05-10T16:08:42Z"}, "message": "re PR target/70799 (STV pass does not convert DImode shifts)\n\ngcc/\n\n\tPR target/70799\n\t* config/i386/i386.c (dimode_scalar_to_vector_candidate_p): Allow\n\tinteger constants.\n\t(dimode_scalar_chain::vector_const_cost): New.\n\t(dimode_scalar_chain::compute_convert_gain): Handle constants.\n\t(dimode_scalar_chain::convert_op): Likewise.\n\t(dimode_scalar_chain::convert_insn): Likewise.\n\ngcc/testsuite/\n\n\tPR target/70799\n\t* gcc.target/i386/pr70799-1.c: New test.\n\nFrom-SVN: r236090", "tree": {"sha": "317727736b5a60a6de6445b45a37dce757feb7b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/317727736b5a60a6de6445b45a37dce757feb7b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d067e238cbf20a659f024b342253230b28eb5a7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d067e238cbf20a659f024b342253230b28eb5a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d067e238cbf20a659f024b342253230b28eb5a7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d067e238cbf20a659f024b342253230b28eb5a7f/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e3af2a4e0f65adf5cfb2d4faf48eeab94eff280"}], "stats": {"total": 126, "additions": 120, "deletions": 6}, "files": [{"sha": "a2257cea32ced016672a1cac6ebab775e6e1ec1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e238cbf20a659f024b342253230b28eb5a7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e238cbf20a659f024b342253230b28eb5a7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d067e238cbf20a659f024b342253230b28eb5a7f", "patch": "@@ -1,3 +1,13 @@\n+2016-05-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR target/70799\n+\t* config/i386/i386.c (dimode_scalar_to_vector_candidate_p): Allow\n+\tinteger constants.\n+\t(dimode_scalar_chain::vector_const_cost): New.\n+\t(dimode_scalar_chain::compute_convert_gain): Handle constants.\n+\t(dimode_scalar_chain::convert_op): Likewise.\n+\t(dimode_scalar_chain::convert_insn): Likewise.\n+\n 2016-05-10  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* dwarf2out.c (resolve_args_picking_1): Consider DW_OP_neg as an"}, {"sha": "530a6e84a0c2e196aa6b83635a89f039749d534c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 64, "deletions": 6, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e238cbf20a659f024b342253230b28eb5a7f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e238cbf20a659f024b342253230b28eb5a7f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d067e238cbf20a659f024b342253230b28eb5a7f", "patch": "@@ -2789,7 +2789,8 @@ dimode_scalar_to_vector_candidate_p (rtx_insn *insn)\n     return convertible_comparison_p (insn);\n \n   /* We are interested in DImode promotion only.  */\n-  if (GET_MODE (src) != DImode\n+  if ((GET_MODE (src) != DImode\n+       && !CONST_INT_P (src))\n       || GET_MODE (dst) != DImode)\n     return false;\n \n@@ -2809,24 +2810,31 @@ dimode_scalar_to_vector_candidate_p (rtx_insn *insn)\n       return true;\n \n     case MEM:\n+    case CONST_INT:\n       return REG_P (dst);\n \n     default:\n       return false;\n     }\n \n-  if (!REG_P (XEXP (src, 0)) && !MEM_P (XEXP (src, 0))\n+  if (!REG_P (XEXP (src, 0))\n+      && !MEM_P (XEXP (src, 0))\n+      && !CONST_INT_P (XEXP (src, 0))\n       /* Check for andnot case.  */\n       && (GET_CODE (src) != AND\n \t  || GET_CODE (XEXP (src, 0)) != NOT\n \t  || !REG_P (XEXP (XEXP (src, 0), 0))))\n       return false;\n \n-  if (!REG_P (XEXP (src, 1)) && !MEM_P (XEXP (src, 1)))\n+  if (!REG_P (XEXP (src, 1))\n+      && !MEM_P (XEXP (src, 1))\n+      && !CONST_INT_P (XEXP (src, 1)))\n       return false;\n \n-  if (GET_MODE (XEXP (src, 0)) != DImode\n-      || GET_MODE (XEXP (src, 1)) != DImode)\n+  if ((GET_MODE (XEXP (src, 0)) != DImode\n+       && !CONST_INT_P (XEXP (src, 0)))\n+      || (GET_MODE (XEXP (src, 1)) != DImode\n+\t  && !CONST_INT_P (XEXP (src, 1))))\n     return false;\n \n   return true;\n@@ -3120,6 +3128,7 @@ class dimode_scalar_chain : public scalar_chain\n   void convert_reg (unsigned regno);\n   void make_vector_copies (unsigned regno);\n   void convert_registers ();\n+  int vector_const_cost (rtx exp);\n };\n \n class timode_scalar_chain : public scalar_chain\n@@ -3328,6 +3337,19 @@ scalar_chain::build (bitmap candidates, unsigned insn_uid)\n   BITMAP_FREE (queue);\n }\n \n+/* Return a cost of building a vector costant\n+   instead of using a scalar one.  */\n+\n+int\n+dimode_scalar_chain::vector_const_cost (rtx exp)\n+{\n+  gcc_assert (CONST_INT_P (exp));\n+\n+  if (standard_sse_constant_p (exp, V2DImode))\n+    return COSTS_N_INSNS (1);\n+  return ix86_cost->sse_load[1];\n+}\n+\n /* Compute a gain for chain conversion.  */\n \n int\n@@ -3359,11 +3381,25 @@ dimode_scalar_chain::compute_convert_gain ()\n \t       || GET_CODE (src) == IOR\n \t       || GET_CODE (src) == XOR\n \t       || GET_CODE (src) == AND)\n-\tgain += ix86_cost->add;\n+\t{\n+\t  gain += ix86_cost->add;\n+\t  if (CONST_INT_P (XEXP (src, 0)))\n+\t    gain -= vector_const_cost (XEXP (src, 0));\n+\t  if (CONST_INT_P (XEXP (src, 1)))\n+\t    gain -= vector_const_cost (XEXP (src, 1));\n+\t}\n       else if (GET_CODE (src) == COMPARE)\n \t{\n \t  /* Assume comparison cost is the same.  */\n \t}\n+      else if (GET_CODE (src) == CONST_INT)\n+\t{\n+\t  if (REG_P (dst))\n+\t    gain += COSTS_N_INSNS (2);\n+\t  else if (MEM_P (dst))\n+\t    gain += 2 * ix86_cost->int_store[2] - ix86_cost->sse_store[1];\n+\t  gain -= vector_const_cost (src);\n+\t}\n       else\n \tgcc_unreachable ();\n     }\n@@ -3639,6 +3675,24 @@ dimode_scalar_chain::convert_op (rtx *op, rtx_insn *insn)\n \t  }\n       *op = gen_rtx_SUBREG (V2DImode, *op, 0);\n     }\n+  else if (CONST_INT_P (*op))\n+    {\n+      rtx vec_cst;\n+      rtx tmp = gen_rtx_SUBREG (V2DImode, gen_reg_rtx (DImode), 0);\n+\n+      /* Prefer all ones vector in case of -1.  */\n+      if (constm1_operand (*op, GET_MODE (*op)))\n+\tvec_cst = CONSTM1_RTX (V2DImode);\n+      else\n+\tvec_cst = gen_rtx_CONST_VECTOR (V2DImode,\n+\t\t\t\t\tgen_rtvec (2, *op, const0_rtx));\n+\n+      if (!standard_sse_constant_p (vec_cst, V2DImode))\n+\tvec_cst = validize_mem (force_const_mem (V2DImode, vec_cst));\n+\n+      emit_insn_before (gen_move_insn (tmp, vec_cst), insn);\n+      *op = tmp;\n+    }\n   else\n     {\n       gcc_assert (SUBREG_P (*op));\n@@ -3711,6 +3765,10 @@ dimode_scalar_chain::convert_insn (rtx_insn *insn)\n \t\t\t    UNSPEC_PTEST);\n       break;\n \n+    case CONST_INT:\n+      convert_op (&src, insn);\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "7ab92a51390ca6bb35b929458cb64e879d6917ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e238cbf20a659f024b342253230b28eb5a7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e238cbf20a659f024b342253230b28eb5a7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d067e238cbf20a659f024b342253230b28eb5a7f", "patch": "@@ -1,3 +1,8 @@\n+2016-05-10  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR target/70799\n+\t* gcc.target/i386/pr70799-1.c: New test.\n+\n 2016-05-10  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gnat.dg/debug6.adb, gnat.dg/debug6_pkg.ads: New testcase."}, {"sha": "0abbfb9fe797c8be83fe8ab1854bdce973818f1f", "filename": "gcc/testsuite/gcc.target/i386/pr70799-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d067e238cbf20a659f024b342253230b28eb5a7f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d067e238cbf20a659f024b342253230b28eb5a7f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70799-1.c?ref=d067e238cbf20a659f024b342253230b28eb5a7f", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/pr70799 */\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2 -march=slm\" } */\n+/* { dg-final { scan-assembler \"pxor\" } } */\n+/* { dg-final { scan-assembler \"pcmpeqd\" } } */\n+/* { dg-final { scan-assembler \"movdqa\\[ \\\\t\\]+.LC0\" } } */\n+\n+long long a, b, c;\n+\n+void test1 (void)\n+{\n+  long long t;\n+  if (a)\n+    t = 0LL;\n+  else\n+    t = b;\n+  a = c & t;\n+  b = c | t;\n+}\n+\n+void test2 (void)\n+{\n+  long long t;\n+  if (a)\n+    t = -1LL;\n+  else\n+    t = b;\n+  a = c & t;\n+  b = c | t;\n+}\n+\n+void test3 (void)\n+{\n+  long long t;\n+  if (a)\n+    t = 0xf0f0f0f0f0f0f0f0LL;\n+  else\n+    t = b;\n+  a = c & t;\n+  b = c | t;\n+}"}]}