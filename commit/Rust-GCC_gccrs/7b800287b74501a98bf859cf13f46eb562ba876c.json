{"sha": "7b800287b74501a98bf859cf13f46eb562ba876c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4MDAyODdiNzQ1MDFhOThiZjg1OWNmMTNmNDZlYjU2MmJhODc2Yw==", "commit": {"author": {"name": "Chris Fairles", "email": "chris.fairles@gmail.com", "date": "2008-09-03T17:46:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-03T17:46:09Z"}, "message": "condition_variable: Use new deleted ctors.\n\n2008-09-03  Chris Fairles  <chris.fairles@gmail.com>\n\n        * include/std/condition_variable: Use new deleted ctors.\n        * include/std/mutex: Likewise plus implement timed_mutex, \n\trecursive_timed_mutex and call_once.\n\t* src/condition_variable.cc: Implement wait(). Use gthread types.\n\tRemove _GTHREADS_HAS_COND checks in favor of global\n\t_GLIBCXX_HAS_GTHREADS.\n\t* src/mutex.cc (call_once): Implementation using TLS with mutex\n\tfallback.\n\t* config/abi/pre/gnu.ver: Add exported symbols.\n\t* testsuite/lib/libstdc++.exp (check_v3_target_gthreads): New.\n\t* testsuite/lib/dg-options.exp (dg-require-gthreads): Likewise.\n\t* testsuite/30_threads/lock_guard/requirements/typedefs.cc: Use\n\tdg-require-gthreads and dg-require-cstdint.\n\t* testsuite/30_threads/lock_guard/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/30_threads/mutex/dest/destructor_locked.cc: Likewise.\n\t* testsuite/30_threads/mutex/native_handle/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/cons/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/requirements/typedefs.cc: Likewise.\n\t* testsuite/30_threads/mutex/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/mutex/lock/1.cc: Likewise.\n\t* testsuite/30_threads/mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc:\n\tLikewise.\n        * testsuite/30_threads/recursive_mutex/native_handle/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_mutex/cons/1.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/requirements/typedefs.cc:\n\tLikewise.\n        * testsuite/30_threads/recursive_mutex/try_lock/1.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/try_lock/2.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/lock/1.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/requirements/typedefs.cc: Likewise.\n        * testsuite/30_threads/mutex/cons/assign_neg.cc: Also adjust dg-error\n\tlines for deleted members.\n        * testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n        * testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/call_once/once_flag.cc: New.\n\t* testsuite/30_threads/call_once/call_once1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable/cons/1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable/cons/copy_neg.cc: Likewise\n\t* testsuite/30_threads/condition_variable/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/condition_variable_any/cons/1.cc: Likewise.\n\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n\tLikewise.\n\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n\tLikewise.\n\t* testsuite/30_threads/timed_mutex/dest/destructor_locked.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/native_handle/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/2.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/cons/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/requirements/typedefs.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/lock/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_for/1.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_for/2.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_for/3.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc: \n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc: \n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc: \n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/native_handle/1.cc: \n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc: \n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/lock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/lock/2.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/unlock/1.cc: Likewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc:\n\tLikewise.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc:\n\tLikewise.\n\t* testsuite/30_threads/unique_lock/modifiers/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/modifiers/2.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/2.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/3.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/4.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/5.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/cons/6.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/1.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/2.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/3.cc: Likewise.\n\t* testsuite/30_threads/unique_lock/locking/4.cc: Likewise.\n\nFrom-SVN: r139943", "tree": {"sha": "d4e66635e0cfe9caf75b3797c3a505af165f7817", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4e66635e0cfe9caf75b3797c3a505af165f7817"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b800287b74501a98bf859cf13f46eb562ba876c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b800287b74501a98bf859cf13f46eb562ba876c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b800287b74501a98bf859cf13f46eb562ba876c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b800287b74501a98bf859cf13f46eb562ba876c/comments", "author": {"login": "chrisfearless", "id": 812000, "node_id": "MDQ6VXNlcjgxMjAwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/812000?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrisfearless", "html_url": "https://github.com/chrisfearless", "followers_url": "https://api.github.com/users/chrisfearless/followers", "following_url": "https://api.github.com/users/chrisfearless/following{/other_user}", "gists_url": "https://api.github.com/users/chrisfearless/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrisfearless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrisfearless/subscriptions", "organizations_url": "https://api.github.com/users/chrisfearless/orgs", "repos_url": "https://api.github.com/users/chrisfearless/repos", "events_url": "https://api.github.com/users/chrisfearless/events{/privacy}", "received_events_url": "https://api.github.com/users/chrisfearless/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "169e477d01458add996e74fe9fd67f9c803a7334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/169e477d01458add996e74fe9fd67f9c803a7334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/169e477d01458add996e74fe9fd67f9c803a7334"}], "stats": {"total": 3256, "additions": 3065, "deletions": 191}, "files": [{"sha": "89e0b2a7f2d2af43f246084829e8aa66e4dd77b8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,3 +1,111 @@\n+2008-09-03  Chris Fairles  <chris.fairles@gmail.com>\n+\n+        * include/std/condition_variable: Use new deleted ctors.\n+        * include/std/mutex: Likewise plus implement timed_mutex, \n+\trecursive_timed_mutex and call_once.\n+\t* src/condition_variable.cc: Implement wait(). Use gthread types.\n+\tRemove _GTHREADS_HAS_COND checks in favor of global\n+\t_GLIBCXX_HAS_GTHREADS.\n+\t* src/mutex.cc (call_once): Implementation using TLS with mutex\n+\tfallback.\n+\t* config/abi/pre/gnu.ver: Add exported symbols.\n+\t* testsuite/lib/libstdc++.exp (check_v3_target_gthreads): New.\n+\t* testsuite/lib/dg-options.exp (dg-require-gthreads): Likewise.\n+\t* testsuite/30_threads/lock_guard/requirements/typedefs.cc: Use\n+\tdg-require-gthreads and dg-require-cstdint.\n+\t* testsuite/30_threads/lock_guard/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/30_threads/mutex/dest/destructor_locked.cc: Likewise.\n+\t* testsuite/30_threads/mutex/native_handle/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/requirements/typedefs.cc: Likewise.\n+\t* testsuite/30_threads/mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc:\n+\tLikewise.\n+        * testsuite/30_threads/recursive_mutex/native_handle/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_mutex/cons/1.cc: Likewise.\n+        * testsuite/30_threads/recursive_mutex/requirements/typedefs.cc:\n+\tLikewise.\n+        * testsuite/30_threads/recursive_mutex/try_lock/1.cc: Likewise.\n+        * testsuite/30_threads/recursive_mutex/try_lock/2.cc: Likewise.\n+        * testsuite/30_threads/recursive_mutex/lock/1.cc: Likewise.\n+        * testsuite/30_threads/recursive_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/requirements/typedefs.cc: Likewise.\n+        * testsuite/30_threads/mutex/cons/assign_neg.cc: Also adjust dg-error\n+\tlines for deleted members.\n+        * testsuite/30_threads/mutex/cons/copy_neg.cc: Likewise.\n+        * testsuite/30_threads/recursive_mutex/cons/assign_neg.cc: Likewise.\n+        * testsuite/30_threads/recursive_mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/call_once/once_flag.cc: New.\n+\t* testsuite/30_threads/call_once/call_once1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable/cons/copy_neg.cc: Likewise\n+\t* testsuite/30_threads/condition_variable/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/timed_mutex/dest/destructor_locked.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/native_handle/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/2.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/cons/assign_neg.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/cons/copy_neg.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/requirements/typedefs.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_for/1.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_for/2.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_for/3.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc: \n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc: \n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc: \n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/native_handle/1.cc: \n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc: \n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/lock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/lock/2.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/unlock/1.cc: Likewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/unique_lock/modifiers/1.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/modifiers/2.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/1.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/2.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/3.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/4.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/5.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/cons/6.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/1.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/2.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/3.cc: Likewise.\n+\t* testsuite/30_threads/unique_lock/locking/4.cc: Likewise.\n+\n 2008-09-01  Mark Mitchell  <mark@codesourcery.com>\n \n \t* include/std/type_traits (__make_unsigned_selector<>): Consider"}, {"sha": "7f940121dc86745128420b4f58fc3ffba0b400d8", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -860,13 +860,25 @@ GLIBCXX_3.4.11 {\n     _ZTSSt10lock_error;\n     _ZNKSt10lock_error4whatEv;\n \n+    _ZSt11__once_call;\n+    _ZSt15__once_callable;\n+    _ZSt14__once_functor;\n+    _ZSt11__once_lock;\n+    _ZSt12__once_mutex;\n+    __once_proxy;\n+\n     # condition_variable\n     _ZNSt18condition_variable10notify_allEv;\n     _ZNSt18condition_variable10notify_oneEv;\n+    _ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE;\n     _ZNSt18condition_variableC1Ev;\n     _ZNSt18condition_variableC2Ev;\n     _ZNSt18condition_variableD1Ev;\n     _ZNSt18condition_variableD2Ev;\n+    _ZNSt22condition_variable_anyC1Ev;\n+    _ZNSt22condition_variable_anyC2Ev;\n+    _ZNSt22condition_variable_anyD1Ev;\n+    _ZNSt22condition_variable_anyD2Ev;\n \n     # system_error\n     _ZSt18get_posix_categoryv;"}, {"sha": "f2035d6de73bdd48559d60906ec5f18cb89a87dd", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 69, "deletions": 31, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -40,33 +40,25 @@\n # include <c++0x_warning.h>\n #else\n \n+#include <chrono>\n #include <mutex> // unique_lock\n \n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+\n namespace std \n {\n-  namespace chrono\n-  {\n-    template<typename _Rep, typename _Period>\n-      struct duration;\n-\n-    template<typename _Clock, typename _Duration>\n-      struct time_point;\n-  }\n-\n   /// condition_variable\n   class condition_variable\n   {\n   public:\n-\n-#if __GTHREAD_HAS_COND\n-    typedef __gthread_cond_t native_handle_type;\n-#else\n-    typedef int native_handle_type;\n-#endif\n+    typedef __gthread_cond_t* native_handle_type;\n \n     condition_variable();\n     ~condition_variable();\n \n+    condition_variable(const condition_variable&) = delete;\n+    condition_variable& operator=(const condition_variable&) = delete;\n+\n     void \n     notify_one();\n \n@@ -87,7 +79,23 @@ namespace std\n     template<typename _Clock, typename _Duration>\n       bool \n       wait_until(unique_lock<mutex>& __lock, \n-\t\t const chrono::time_point<_Clock, _Duration>& __atime);\n+\t\t const chrono::time_point<_Clock, _Duration>& __atime)\n+      {\n+\tchrono::time_point<_Clock, chrono::seconds>  __s =\n+          chrono::time_point_cast<chrono::seconds>(__atime);\n+\n+\tchrono::nanoseconds __ns =\n+          chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n+\n+        __gthread_time_t __ts = {\n+          static_cast<std::time_t>(__s.time_since_epoch().count()),\n+          static_cast<long>(__ns.count())\n+        };\n+\t\n+\t__gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(), &__ts);\n+\t\n+\treturn __clock_t::now() < __atime;\n+      }\n \n     template<typename _Clock, typename _Duration, typename _Predicate>\n       bool\n@@ -98,7 +106,8 @@ namespace std\n     template<typename _Rep, typename _Period>\n       bool\n       wait_for(unique_lock<mutex>& __lock,\n-\t       const chrono::duration<_Rep, _Period>& __rtime);\n+\t       const chrono::duration<_Rep, _Period>& __rtime)\n+      { return __wait_for_impl(__rtime); }\n \n     template<typename _Rep, typename _Period, typename _Predicate>\n       bool\n@@ -107,27 +116,56 @@ namespace std\n \t       _Predicate __p);\n \n     native_handle_type \n-    native_handle() { return _M_cond; }\n+    native_handle() \n+    { return &_M_cond; }\n \n   private:\n-    native_handle_type\t_M_cond;\n-    condition_variable(const condition_variable&);\n-    condition_variable& operator=(const condition_variable&);\n+    __gthread_cond_t _M_cond;\n+    mutex _M_internal_mutex;\n+\n+#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n+    typedef chrono::monotonic_clock __clock_t;\n+#else\n+    typedef chrono::high_resolution_clock __clock_t;\n+#endif\n+\n+    template<typename _Rep, typename _Period>\n+      typename enable_if<\n+        ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+      __wait_for_impl(unique_lock<mutex>& __lock,\n+\t\t      const chrono::duration<_Rep, _Period>& __rtime)\n+      { \n+\t__clock_t::time_point __atime = __clock_t::now()\n+\t  + chrono::duration_cast<__clock_t::duration>(__rtime);\n+\t\n+\treturn wait_until(__lock, __atime);\n+      }\n+    \n+    template<typename _Rep, typename _Period>\n+      typename enable_if<\n+        !ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+      __wait_for_impl(unique_lock<mutex>& __lock,\n+\t\t      const chrono::duration<_Rep, _Period>& __rtime)\n+      { \n+\t__clock_t::time_point __atime = __clock_t::now()\n+\t  + ++chrono::duration_cast<__clock_t::duration>(__rtime);\n+\t\n+\treturn wait_until(__lock, __atime);\n+      }    \n   };\n \n   /// condition_variable_any\n   // Like above, only mutex may not have try_lock.\n   class condition_variable_any\n   {\n   public:\n-#if __GTHREAD_HAS_COND\n-    typedef __gthread_cond_t native_handle_type;\n-#else\n-    typedef int native_handle_type;\n-#endif\n+    typedef __gthread_cond_t* native_handle_type;\n \n     condition_variable_any();\n     ~condition_variable_any();\n+    \n+    condition_variable_any(const condition_variable_any&) = delete;\n+    condition_variable_any& operator=(const condition_variable_any&) = delete;\n \n     void \n     notify_one();\n@@ -166,16 +204,16 @@ namespace std\n \t       const chrono::duration<_Rep, _Period>& __rtime, _Predicate __p);\n \n     native_handle_type \n-    native_handle() { return _M_cond; }\n+    native_handle()\n+    { return &_M_cond; }\n \n   private:\n-    native_handle_type\t_M_cond;\n-    condition_variable_any(const condition_variable_any&);\n-    condition_variable_any& operator=(const condition_variable_any&);\n+    __gthread_cond_t _M_cond;\n   };\n-\n }\n \n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n #endif // _GLIBCXX_CONDITION_VARIABLE"}, {"sha": "5e6ba9c271556ed59b32c36ad33dd2f81365d35d", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 340, "deletions": 102, "changes": 442, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -41,39 +41,40 @@\n # include <c++0x_warning.h>\n #else\n \n-#include <exception>\n #include <cstddef>\n+#include <chrono>\n+#include <exception>\n+#include <type_traits>\n+#include <functional>\n+#include <system_error>\n #include <bits/functexcept.h>\n #include <bits/gthr.h>\n+#include <bits/move.h> // for std::swap\n+\n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n \n namespace std\n {\n-  namespace chrono\n-  {\n-    template<typename _Rep, typename _Period>\n-      struct duration;\n-\n-    template<typename _Clock, typename _Duration>\n-      struct time_point;\n-  }\n-\n   /// mutex\n   class mutex\n   {\n   public:\n-    typedef __gthread_mutex_t native_handle_type;\n+    typedef __gthread_mutex_t* native_handle_type;\n \n     mutex()\n     {\n       // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n-#if defined __GTHREAD_MUTEX_INIT\n-      native_handle_type __tmp = __GTHREAD_MUTEX_INIT;\n+#ifdef __GTHREAD_MUTEX_INIT\n+      __gthread_mutex_t __tmp = __GTHREAD_MUTEX_INIT;\n       _M_mutex = __tmp;\n #else\n       __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n #endif\n     }\n \n+    mutex(const mutex&) = delete;\n+    mutex& operator=(const mutex&) = delete;\n+\n     void\n     lock()\n     {\n@@ -100,31 +101,32 @@ namespace std\n \n     native_handle_type\n     native_handle()\n-    { return _M_mutex; }\n+    { return &_M_mutex; }\n \n   private:\n-    native_handle_type _M_mutex;\n-    mutex(const mutex&);\n-    mutex& operator=(const mutex&);\n+    __gthread_mutex_t _M_mutex;\n   };\n \n   /// recursive_mutex\n   class recursive_mutex\n   {\n   public:\n-    typedef __gthread_recursive_mutex_t native_handle_type;\n+    typedef __gthread_recursive_mutex_t* native_handle_type;\n \n     recursive_mutex()\n     {\n       // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n-#if defined __GTHREAD_RECURSIVE_MUTEX_INIT\n-      native_handle_type __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n+#ifdef __GTHREAD_RECURSIVE_MUTEX_INIT\n+      __gthread_recursive_mutex_t __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n       _M_mutex = __tmp;\n #else\n       __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION(&_M_mutex);\n #endif\n     }\n \n+    recursive_mutex(const recursive_mutex&) = delete;\n+    recursive_mutex& operator=(const recursive_mutex&) = delete;\n+\n     void\n     lock()\n     {\n@@ -139,85 +141,227 @@ namespace std\n     try_lock()\n     {\n       // XXX EINVAL, EAGAIN, EBUSY\n-     return !__gthread_recursive_mutex_trylock(&_M_mutex);\n+      return !__gthread_recursive_mutex_trylock(&_M_mutex);\n     }\n \n     void\n     unlock()\n     {\n       // XXX EINVAL, EAGAIN, EBUSY\n-     __gthread_recursive_mutex_unlock(&_M_mutex);\n+      __gthread_recursive_mutex_unlock(&_M_mutex);\n     }\n \n     native_handle_type\n     native_handle()\n-    { return _M_mutex; }\n+    { return &_M_mutex; }\n \n   private:\n-    native_handle_type _M_mutex;\n-\n-    recursive_mutex(const recursive_mutex&);\n-    recursive_mutex& operator=(const recursive_mutex&);\n+    __gthread_recursive_mutex_t  _M_mutex;\n   };\n \n   /// timed_mutex\n   class timed_mutex\n-  {\n+  {  \n   public:\n-    typedef __gthread_mutex_t native_handle_type;\n+    typedef __gthread_mutex_t* native_handle_type;\n \n-    void lock();\n-    bool try_lock();\n+    timed_mutex()\n+    {\n+#ifdef __GTHREAD_MUTEX_INIT\n+      __gthread_mutex_t __tmp = __GTHREAD_MUTEX_INIT;\n+      _M_mutex = __tmp;\n+#else\n+      __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);\n+#endif\n+    }\n+\n+    timed_mutex(const timed_mutex&) = delete;\n+    timed_mutex& operator=(const timed_mutex&) = delete;\n+\n+    void\n+    lock()\n+    {\n+      int __e = __gthread_mutex_lock(&_M_mutex);\n+\n+      // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)\n+      if (__e)\n+\t__throw_system_error(__e);\n+    }\n+\n+    bool\n+    try_lock()\n+    {\n+      // XXX EINVAL, EAGAIN, EBUSY\n+      return !__gthread_mutex_trylock(&_M_mutex);\n+    }\n \n     template <class _Rep, class _Period>\n       bool\n-      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime);\n+      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n+      { return __try_lock_for_impl(__rtime); }\n \n     template <class _Clock, class _Duration>\n       bool\n-      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime);\n+      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n+      { \n+\tchrono::time_point<_Clock, chrono::seconds> __s =\n+          chrono::time_point_cast<chrono::seconds>(__atime);\n+\n+\tchrono::nanoseconds __ns =\n+          chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n+\n+        __gthread_time_t __ts = {\n+          static_cast<std::time_t>(__s.time_since_epoch().count()),\n+          static_cast<long>(__ns.count())\n+        };\n \n-    void unlock();\n+\treturn !__gthread_mutex_timedlock(&_M_mutex, &__ts);\t\n+      }\n+\n+    void\n+    unlock()\n+    {\n+      // XXX EINVAL, EAGAIN, EBUSY\n+      __gthread_mutex_unlock(&_M_mutex);\n+    }\n \n     native_handle_type\n     native_handle()\n-    { return _M_mutex; }\n+    { return &_M_mutex; }\n     \n   private:\n-    native_handle_type _M_mutex;\n+    __gthread_mutex_t _M_mutex;\n+    \n+#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n+    typedef chrono::monotonic_clock __clock_t;\n+#else\n+    typedef chrono::high_resolution_clock __clock_t;\n+#endif\n \n-    timed_mutex(const timed_mutex&);\n-    timed_mutex& operator=(const timed_mutex&);\n+    template<typename _Rep, typename _Period>\n+      typename enable_if<\n+        ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+      __try_lock_for_impl(const chrono::duration<_Rep, _Period>& __rtime)\n+      {\n+        __clock_t::time_point __atime = __clock_t::now()\n+          + chrono::duration_cast<__clock_t::duration>(__rtime);\n+\n+        return try_lock_until(__atime);\n+      }\n+\n+    template <typename _Rep, typename _Period>\n+      typename enable_if<\n+        !ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+      __try_lock_for_impl(const chrono::duration<_Rep, _Period>& __rtime)\n+      {\n+        __clock_t::time_point __atime = __clock_t::now()\n+\t  + ++chrono::duration_cast<__clock_t::duration>(__rtime);\n+\n+        return try_lock_until(__atime);\n+      }\n   };\n \n   /// recursive_timed_mutex\n   class recursive_timed_mutex\n   {\n   public:\n-    typedef __gthread_mutex_t native_handle_type;\n+    typedef __gthread_recursive_mutex_t* native_handle_type;\n+\n+    recursive_timed_mutex()\n+    {\n+      // XXX EAGAIN, ENOMEM, EPERM, EBUSY(may), EINVAL(may)\n+#ifdef __GTHREAD_RECURSIVE_MUTEX_INIT\n+      __gthread_recursive_mutex_t __tmp = __GTHREAD_RECURSIVE_MUTEX_INIT;\n+      _M_mutex = __tmp;\n+#else\n+      __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION(&_M_mutex);\n+#endif\n+    }\n+\n+    recursive_timed_mutex(const recursive_timed_mutex&) = delete;\n+    recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;\n+\n+    void\n+    lock()\n+    {\n+      int __e = __gthread_recursive_mutex_lock(&_M_mutex);\n+\n+      // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)\n+      if (__e)\n+\t__throw_system_error(__e);\n+    }\n \n-    void lock();\n-    bool try_lock();\n+    bool\n+    try_lock()\n+    {\n+      // XXX EINVAL, EAGAIN, EBUSY\n+      return !__gthread_recursive_mutex_trylock(&_M_mutex);\n+    }\n \n     template <class _Rep, class _Period>\n       bool\n-      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime);\n+      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n+      { return __try_lock_for_impl(__rtime); }\n \n     template <class _Clock, class _Duration>\n       bool\n-      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime);\n+      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n+      { \n+\tchrono::time_point<_Clock, chrono::seconds>  __s =\n+          chrono::time_point_cast<chrono::seconds>(__atime);\n+\n+\tchrono::nanoseconds __ns =\n+          chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n \n-    void unlock();\n+        __gthread_time_t __ts = {\n+          static_cast<std::time_t>(__s.time_since_epoch().count()),\n+          static_cast<long>(__ns.count())\n+        };\n+\n+        return !__gthread_recursive_mutex_timedlock(&_M_mutex, &__ts);\n+      }\n+\n+    void\n+    unlock()\n+    {\n+      // XXX EINVAL, EAGAIN, EBUSY\n+      __gthread_recursive_mutex_unlock(&_M_mutex);\n+    }\n \n     native_handle_type\n     native_handle()\n-    { return _M_mutex; }\n-    \n+    { return &_M_mutex; }\n+\n   private:\n-    native_handle_type _M_mutex;\n+    __gthread_recursive_mutex_t _M_mutex;\n \n-    recursive_timed_mutex(const recursive_timed_mutex&);\n-    recursive_timed_mutex& operator=(const recursive_timed_mutex&);\n+#ifdef _GLIBCXX_USE_CLOCK_MONOTONIC\n+    typedef chrono::monotonic_clock __clock_t;\n+#else\n+    typedef chrono::high_resolution_clock __clock_t;\n+#endif\n+\n+    template<typename _Rep, typename _Period>\n+      typename enable_if<\n+        ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+      __try_lock_for_impl(const chrono::duration<_Rep, _Period>& __rtime)\n+      {\n+        __clock_t::time_point __atime = __clock_t::now()\n+          + chrono::duration_cast<__clock_t::duration>(__rtime);\n+\n+        return try_lock_until(__atime);\n+      }\n+\n+    template <typename _Rep, typename _Period>\n+      typename enable_if<\n+        !ratio_less_equal<__clock_t::period, _Period>::value, bool>::type\n+      __try_lock_for_impl(const chrono::duration<_Rep, _Period>& __rtime)\n+      {\n+        __clock_t::time_point __atime = __clock_t::now()\n+\t  + ++chrono::duration_cast<__clock_t::duration>(__rtime);\n+\n+        return try_lock_until(__atime);\n+      }\n   };\n \n   /// Do not acquire ownership of the mutex.\n@@ -260,10 +404,11 @@ namespace std\n       ~lock_guard()\n       { _M_device.unlock(); }\n \n+      lock_guard(const lock_guard&) = delete;\n+      lock_guard& operator=(const lock_guard&) = delete;\n+\n     private:\n       mutex_type&  _M_device;\n-      lock_guard(lock_guard const&);\n-      lock_guard& operator=(lock_guard const&);\n     };\n \n   /// unique_lock\n@@ -272,13 +417,13 @@ namespace std\n     {\n     public:\n       typedef _Mutex mutex_type;\n-\n+      \n       unique_lock()\n-      : _M_device(NULL), _M_owns(false)\n+      : _M_device(0), _M_owns(false)\n       { }\n \n       explicit unique_lock(mutex_type& __m)\n-      : _M_device(&__m)\n+      : _M_device(&__m), _M_owns(false)\n       {\n \tlock();\n \t_M_owns = true;\n@@ -300,67 +445,127 @@ namespace std\n \n       template<typename _Clock, typename _Duration>\n \tunique_lock(mutex_type& __m, \n-\t\t    const chrono::time_point<_Clock, _Duration>& __atime);\n+\t\t    const chrono::time_point<_Clock, _Duration>& __atime)\n+\t: _M_device(&__m), _M_owns(_M_device->try_lock_until(__atime))\n+\t{ }\n \n       template<typename _Rep, typename _Period>\n \tunique_lock(mutex_type& __m, \n-\t\t    const chrono::duration<_Rep, _Period>& __rtime);\n+\t\t    const chrono::duration<_Rep, _Period>& __rtime)\n+\t: _M_device(&__m), _M_owns(_M_device->try_lock_for(__rtime))\n+\t{ }\n \n       ~unique_lock()\n       {\n \tif (_M_owns)\n \t  unlock();\n       }\n \n-      unique_lock(unique_lock&&);\n+      unique_lock(const unique_lock&) = delete;\n+      unique_lock& operator=(const unique_lock&) = delete;\n+\n+      unique_lock(unique_lock&& __u)\n+      : _M_device(__u._M_device), _M_owns(__u._M_owns)\n+      {\n+\t__u._M_device = 0;\n+\t__u._M_owns = false;\n+      }\n+\n+      unique_lock& operator=(unique_lock&& __u)\n+      {\n+        if(_M_owns)\n+\t  unlock();\n+\t\n+\tunique_lock(std::move(__u)).swap(*this);\n \n-      unique_lock& operator=(unique_lock&&);\n+\t__u._M_device = 0;\n+\t__u._M_owns = false;\n+\t\n+\treturn *this;\n+      }\n \n       void\n       lock()\n       {\n-\tif (_M_device && !_M_owns)\n-\t  _M_device->lock();\n+\tif (!_M_device)\n+\t  __throw_system_error(posix_error::operation_not_permitted);\n+\telse if (_M_owns)\n+\t  __throw_system_error(posix_error::resource_deadlock_would_occur);\n \telse\n-\t  throw lock_error();\n+\t  {\n+\t    _M_device->lock();\n+\t    _M_owns = true;\n+\t  }\n       }\n \n       bool\n       try_lock()\n       {\n-\tbool __ret = false;\n-\tif (_M_device && !_M_owns)\n-\t  __ret = _M_device->try_lock();\n-\telse\n-\t  throw lock_error();\n-\treturn __ret;\n+\tif (!_M_device)\n+          __throw_system_error(posix_error::operation_not_permitted);\n+        else if (_M_owns)\n+          __throw_system_error(posix_error::resource_deadlock_would_occur);\n+        else\n+\t  {\n+\t    _M_owns = _M_device->try_lock();\t    \n+\t    return _M_owns;\n+\t  }\n       }\n \n+      template<typename _Clock, typename _Duration>\n+        bool\n+        try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n+        {\n+\t  if (!_M_device)\n+\t    __throw_system_error(posix_error::operation_not_permitted);\n+\t  else if (_M_owns)\n+\t    __throw_system_error(posix_error::resource_deadlock_would_occur);\n+\t  else\n+\t    {\n+\t      _M_owns = _M_device->try_lock_until(__atime);\n+\t      return _M_owns;\n+\t    }\n+\t}\n+      \n+      template<typename _Rep, typename _Period>\n+\tbool\n+\ttry_lock_for(const chrono::duration<_Rep, _Period>& __rtime)\n+        {\n+\t  if (!_M_device)\n+\t    __throw_system_error(posix_error::operation_not_permitted);\n+\t  else if (_M_owns)\n+\t    __throw_system_error(posix_error::resource_deadlock_would_occur);\n+\t  else\n+\t    {\n+\t      _M_owns = _M_device->try_lock_for(__rtime);\n+\t      return _M_owns;\n+\t    }\n+\t }\n+\n       void\n       unlock()\n       {\n-\tif (_M_device && _M_owns)\n-\t  _M_device->unlock();\n-\telse\n-\t  throw lock_error();\n+        if (!_M_owns)\n+          __throw_system_error(posix_error::operation_not_permitted);\n+        else if (_M_device)\n+          {\n+            _M_device->unlock();\n+            _M_owns = false;\n+          }\n       }\n-\n-      template<typename _Rep, typename _Period>\n-\tbool\n-\ttry_lock_for(const chrono::duration<_Rep, _Period>& __rtime);\n-\n-      template<typename _Clock, typename _Duration>\n-\tbool\n-\ttry_lock_until(const chrono::time_point<_Clock, _Duration>& __atime);\n-\n+      \n       void\n-      swap(unique_lock&& __u);\n+      swap(unique_lock&& __u)\n+      {\n+\tstd::swap(_M_device, __u._M_device);\n+\tstd::swap(_M_owns, __u._M_owns);\n+      }\n \n       mutex_type*\n       release()\n       {\n \tmutex_type* __ret = _M_device;\n-\t_M_device = NULL;\n+\t_M_device = 0;\n \t_M_owns = false;\n \treturn __ret;\n       }\n@@ -369,36 +574,36 @@ namespace std\n       owns_lock() const\n       { return _M_owns; }\n \n-      operator bool () const\n+      /* explicit */ operator bool () const\n       { return owns_lock(); }\n \n       mutex_type*\n       mutex() const\n       { return _M_device; }\n \n     private:\n-      unique_lock(unique_lock const&);\n-      unique_lock& operator=(unique_lock const&);\n-\n       mutex_type*\t_M_device;\n       bool\t\t_M_owns; // XXX use atomic_bool\n     };\n \n   template<typename _Mutex>\n-    void\n-    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y);\n+    inline void\n+    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y)\n+    { __x.swap(__y); }\n \n   template<typename _Mutex>\n-    void\n-    swap(unique_lock<_Mutex>&& __x, unique_lock<_Mutex>& __y);\n+    inline void\n+    swap(unique_lock<_Mutex>&& __x, unique_lock<_Mutex>& __y)\n+    { __x.swap(__y); }\n \n   template<typename _Mutex>\n-    void\n-    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>&& __y);\n+    inline void\n+    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>&& __y)\n+    { __x.swap(__y); }\n \n   template<typename _L1, typename _L2, typename ..._L3>\n     int\n-    try_lock(_L1&, _L2&, _L3&...);\n+    try_lock(_L1& __l1, _L2& __l2, _L3&... __l3);\n \n   template<typename _L1, typename _L2, typename ..._L3>\n     void\n@@ -410,30 +615,63 @@ namespace std\n     typedef __gthread_once_t __native_type;\n \n     once_flag()\n-    {\n-      __native_type __tmp = __GTHREAD_ONCE_INIT;\n-      _M_once = __tmp;\n-    }\n+    : _M_once(__GTHREAD_ONCE_INIT)\n+    { }\n+    \n+    once_flag(const once_flag&) = delete;\n+    once_flag& operator=(const once_flag&) = delete;\n \n-    __native_type&\n-    _M_get() { return _M_once; }\n+    template<typename _Callable, typename... _Args>\n+      friend void\n+      call_once(once_flag& __once, _Callable __f, _Args&&... __args);\n \n   private:\n     __native_type  _M_once;\n-    once_flag(const once_flag&);\n-    once_flag& operator=(const once_flag&);\n   };\n \n+#ifdef _GLIBCXX_HAVE_TLS\n+  extern __thread void* __once_callable;\n+  extern __thread void (*__once_call)();\n+\n+  template<typename _Callable>\n+    void __once_call_impl()\n+    {\n+      (*(_Callable*)__once_callable)();\n+    }\n+#else\n+  extern function<void()> __once_functor;\n+  extern unique_lock<mutex> __once_functor_lock;\n+#endif\n+\n+  extern \"C\" void __once_proxy();\n+\n   template<typename _Callable, typename... _Args>\n     void\n     call_once(once_flag& __once, _Callable __f, _Args&&... __args)\n     {\n-      int __e = __gthread_once(&(__once._M_get()), __f(__args...));\n+#ifdef _GLIBCXX_HAVE_TLS\n+      auto __bound_functor = bind(__f, __args...);\n+      __once_callable = &__bound_functor;\n+      __once_call = &__once_call_impl<decltype(__bound_functor)>;\n+#else\n+      __once_functor_lock.lock();\n+      __once_functor = bind(__f, __args...);\n+#endif\n+     \n+      int __e = __gthread_once(&(__once._M_once), &__once_proxy);\n+\n+#ifndef _GLIBCXX_HAVE_TLS      \n+      if (__once_functor_lock)\n+\t__once_functor_lock.unlock();\n+#endif\n+\n       if (__e)\n \t__throw_system_error(__e);\n     }\n }\n \n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1\n+\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n #endif // _GLIBCXX_MUTEX"}, {"sha": "f1ae33a9bab854ae12c37a5d2e00b106406eb8f1", "filename": "libstdc++-v3/src/condition_variable.cc", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -29,56 +29,80 @@\n \n #include <condition_variable>\n \n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+\n namespace std\n {\n   condition_variable::condition_variable()\n   {\n-#if __GTHREAD_HAS_COND\n-# if defined __GTHREAD_COND_INIT\n-    native_handle_type __tmp = __GTHREAD_COND_INIT;\n+#ifdef __GTHREAD_COND_INIT\n+    __gthread_cond_t __tmp = __GTHREAD_COND_INIT;\n     _M_cond = __tmp;\n-# else\n+#else\n     int __e = __gthread_cond_init(&_M_cond, NULL);\n-    if ( __e)\n+\n+    if (__e)\n       __throw_system_error(__e);\n-# endif\n #endif\n   }\n \n   condition_variable::~condition_variable()\n   {\n-#if __GTHREAD_HAS_COND\n     // XXX no thread blocked\n-    /* int __e = */ pthread_cond_destroy(&_M_cond);\n+    /* int __e = */ __gthread_cond_destroy(&_M_cond);\n     // if __e == EBUSY then blocked\n-#endif\n   }\n \n+  void\n+  condition_variable::wait(unique_lock<mutex>& __lock)\n+  {\n+    int __e = __gthread_cond_wait(&_M_cond, __lock.mutex()->native_handle());\n+\n+    if (__e)\n+      __throw_system_error(__e);    \n+  }\n+  \n   void \n   condition_variable::notify_one()\n   { \n-#if __GTHREAD_HAS_COND\n-    int __e = pthread_cond_signal(&_M_cond);\n+    lock_guard<mutex> __lock(_M_internal_mutex);\n+    int __e = __gthread_cond_signal(&_M_cond);\n \n     // XXX not in spec\n     // EINVAL\n-    if ( __e)\n+    if (__e)\n       __throw_system_error(__e);\n-#endif\n   }\n \n   void \n   condition_variable::notify_all()\n   { \n-#if __GTHREAD_HAS_COND\n-    int __e = pthread_cond_broadcast(&_M_cond);\n+    lock_guard<mutex> __lock(_M_internal_mutex);\n+    int __e = __gthread_cond_broadcast(&_M_cond);\n \n     // XXX not in spec\n     // EINVAL\n-    if ( __e)\n+    if (__e)\n       __throw_system_error(__e);\n-#endif\n   }\n \n+  condition_variable_any::condition_variable_any()\n+  {\n+#ifdef __GTHREAD_COND_INIT\n+    __gthread_cond_t __tmp = __GTHREAD_COND_INIT;\n+    _M_cond = __tmp;\n+#else\n+    int __e = __gthread_cond_init(&_M_cond, NULL);\n+\n+    if (__e)\n+      __throw_system_error(__e);\n+#endif\n+  }\n+  \n+  condition_variable_any::~condition_variable_any()\n+  {\n+    __gthread_cond_destroy(&_M_cond);\n+  } \n }\n \n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "8fae0302fda0686476bcb8d838a59478c968275d", "filename": "libstdc++-v3/src/mutex.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -29,6 +29,8 @@\n \n #include <mutex>\n \n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+\n namespace std\n {\n   const defer_lock_t defer_lock = defer_lock_t();\n@@ -38,5 +40,29 @@ namespace std\n   const char*\n   lock_error::what() const throw()\n   { return \"std::lock_error\"; }\n+\n+#ifdef _GLIBCXX_HAVE_TLS\n+  __thread void* __once_callable;\n+  __thread void (*__once_call)();\n+#else\n+  // explicit instantiation due to -fno-implicit-instantiation\n+  template class function<void()>;\n+  function<void()> __once_functor;\n+  mutex __once_mutex;\n+  unique_lock<mutex> __once_functor_lock(__once_mutex, defer_lock);\n+#endif\n+\n+  extern \"C\"\n+  {\n+    void __once_proxy()\n+    {\n+#ifndef _GLIBCXX_HAVE_TLS\n+      function<void()> __once_call = std::move(__once_functor);\n+      __once_functor_lock.unlock();\n+#endif\n+      __once_call();\n+    }\n+  }\n }\n \n+#endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "00e4502a324e9929cf7a07efbdc658943b3e852a", "filename": "libstdc++-v3/testsuite/30_threads/call_once/call_once1.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fcall_once1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,68 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+std::once_flag value_flag;\n+int value = 1;\n+\n+void add_to_value(int i)\n+{\n+  value += i;\n+}\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::call_once(value_flag, add_to_value, 2);\n+      std::call_once(value_flag, add_to_value, 2);\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  VERIFY( value == 3 );\n+\n+  return 0;\n+}"}, {"sha": "d972c3c3b41754258b93cc05859a41f3e3d5fd07", "filename": "libstdc++-v3/testsuite/30_threads/call_once/once_flag.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fonce_flag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fonce_flag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2Fonce_flag.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  std::once_flag once_flag;\n+}"}, {"sha": "4ddbd7ec4fd38708be7a3ab8536ca16ec3a5ad40", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/1.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <condition_variable>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::condition_variable c1;\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "331a8146ca82a86a620cc0c166ed54709c92442c", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/assign_neg.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fassign_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <condition_variable>\n+\n+void test01()\n+{\n+  // assign\n+  std::condition_variable c1;\n+  std::condition_variable c2;\n+  c1 = c2;\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 40 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 60 }"}, {"sha": "329279f8926c97276bf28cbbfdd66519c48f4bcc", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/cons/copy_neg.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fcons%2Fcopy_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <condition_variable>\n+\n+void test01()\n+{\n+  // copy\n+  std::condition_variable c1;\n+  std::condition_variable c2(c1);\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 39 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 59 }"}, {"sha": "d69ed765efab10ca71f22d04d648ebef1131c905", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/1.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <condition_variable>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::condition_variable_any c1;\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "7cdd252a59ae9fe18ef883071162ab2e0fae3877", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/assign_neg.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <condition_variable>\n+\n+void test01()\n+{\n+  // assign\n+  std::condition_variable_any c1;\n+  std::condition_variable_any c2;\n+  c1 = c2;\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 40 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 168 }"}, {"sha": "d71e955800da55abf08893d106417f9629d8058d", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/copy_neg.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <condition_variable>\n+\n+void test01()\n+{\n+  // copy\n+  std::condition_variable_any c1;\n+  std::condition_variable_any c2(c1);\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 39 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 167 }"}, {"sha": "7c30499a74ddcbaedcdfe2c764d42c303f911f44", "filename": "libstdc++-v3/testsuite/30_threads/headers/condition_variable/types_std_c++0x.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fcondition_variable%2Ftypes_std_c%2B%2B0x.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,7 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "c5ef4061cff8806656787de1ca151052dbf3e423", "filename": "libstdc++-v3/testsuite/30_threads/headers/mutex/types_std_c++0x.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fheaders%2Fmutex%2Ftypes_std_c%2B%2B0x.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,7 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" } \n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "ec9598778c2f24e397f60c4dbf98ee7b22db1d89", "filename": "libstdc++-v3/testsuite/30_threads/lock_guard/requirements/explicit_instantiation.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Fexplicit_instantiation.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,8 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" } \n+// { dg-require-gthreads \"\" }\n+\n // 2008-03-14 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2008 Free Software Foundation, Inc."}, {"sha": "e4be75ec7844e45d2862e23f2b6b1f0fb6fe06a5", "filename": "libstdc++-v3/testsuite/30_threads/lock_guard/requirements/typedefs.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Flock_guard%2Frequirements%2Ftypedefs.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,8 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" } \n+// { dg-require-gthreads \"\" }\n+\n // 2008-03-14 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2008 Free Software Foundation, Inc."}, {"sha": "1f5f086d271ac5a6f6eb8f65f88b41c7ab970dad", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/1.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,9 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* } }\n-// { dg-options \"-pthread -std=gnu++0x\" }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "388743dfb6711d2ee841ed7dbbd4e30fa4ce395a", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/assign_neg.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fassign_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,7 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //\n@@ -38,5 +40,6 @@ void test01()\n   mutex_type m2;\n   m1 = m2;\n }\n-// { dg-error \"within this context\" \"\" { target *-*-* } 39 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 108 } \n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 41 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 76 }"}, {"sha": "37daed3611d31529f7e50a2e0e049608a9e41a03", "filename": "libstdc++-v3/testsuite/30_threads/mutex/cons/copy_neg.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fcons%2Fcopy_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,7 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //\n@@ -37,5 +39,6 @@ void test01()\n   mutex_type m1;\n   mutex_type m2(m1);\n }\n-// { dg-error \"within this context\" \"\" { target *-*-* } 38 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 107 } \n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 40 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 75 }"}, {"sha": "76a585cc0efc040f4e1aa0fc1337d1ff92529772", "filename": "libstdc++-v3/testsuite/30_threads/mutex/dest/destructor_locked.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fdest%2Fdestructor_locked.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,9 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* } }\n-// { dg-options \"-pthread -std=gnu++0x\" }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "3b22953b572a550afdac756c871add0652a7030d", "filename": "libstdc++-v3/testsuite/30_threads/mutex/lock/1.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Flock%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,9 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* } }\n-// { dg-options \"-pthread -std=gnu++0x\" }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "97eadb5e0defe75989d93e745140f84d7524072a", "filename": "libstdc++-v3/testsuite/30_threads/mutex/native_handle/1.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,9 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* } }\n-// { dg-options \"-pthread -std=gnu++0x\" }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //\n@@ -41,6 +45,7 @@ int main()\n     {\n       mutex_type m;\n       mutex_type::native_handle_type n = m.native_handle();\n+      (void)n;\n     }\n   catch (const std::system_error& e)\n     {"}, {"sha": "358e8f31a318cf5f50538d702a60a08ac80cfd8e", "filename": "libstdc++-v3/testsuite/30_threads/mutex/requirements/typedefs.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Frequirements%2Ftypedefs.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,7 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n // 2008-03-18 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2008 Free Software Foundation, Inc."}, {"sha": "d67e356122afea72585f8121c06917aaf93db9e1", "filename": "libstdc++-v3/testsuite/30_threads/mutex/try_lock/1.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,9 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* } }\n-// { dg-options \"-pthread -std=gnu++0x\" }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "e5d43cdfebd19369711c5c15277ec02eff25db9c", "filename": "libstdc++-v3/testsuite/30_threads/mutex/try_lock/2.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Ftry_lock%2F2.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,9 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* } }\n-// { dg-options \"-pthread -std=gnu++0x\" }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "695b69b9a662343fb1f2a9d867491dc5bc7d2ee7", "filename": "libstdc++-v3/testsuite/30_threads/mutex/unlock/1.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Funlock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Funlock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Funlock%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,9 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* } }\n-// { dg-options \"-pthread -std=gnu++0x\" }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "f322edafffc95ce911e3f5720bf3c292023a33c5", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/1.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,9 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* } }\n-// { dg-options \"-pthread -std=gnu++0x\" }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "1ca7f1c6c5d2492a32ecd7899eb5e8b4d0ef7e5a", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/assign_neg.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fassign_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,7 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //\n@@ -38,5 +40,6 @@ void test01()\n   mutex_type m2;\n   m1 = m2;\n }\n-// { dg-error \"within this context\" \"\" { target *-*-* } 39 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 160 } \n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 41 } \n+// { dg-error \"deleted function\" \"\" { target *-*-* } 128 }"}, {"sha": "d7322453c5cf98440d203e525b9956395c438a1a", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/cons/copy_neg.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fcons%2Fcopy_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,7 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //\n@@ -37,5 +39,6 @@ void test01()\n   mutex_type m1;\n   mutex_type m2(m1);\n }\n-// { dg-error \"within this context\" \"\" { target *-*-* } 38 } \n-// { dg-error \"is private\" \"\" { target *-*-* } 159 } \n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 40 } \n+// { dg-error \"deleted function\" \"\" { target *-*-* } 127 }"}, {"sha": "ac22512ff504c972505e63184adf3b273d9adf67", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/dest/destructor_locked.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fdest%2Fdestructor_locked.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,9 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* } }\n-// { dg-options \"-pthread -std=gnu++0x\" }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //"}, {"sha": "ba495ff85fab532fadac5e6c4acf27fc4baa49ac", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/native_handle/1.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,9 @@\n-// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* } }\n-// { dg-options \"-pthread -std=gnu++0x\" }\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n \n // Copyright (C) 2008 Free Software Foundation, Inc.\n //\n@@ -41,6 +45,7 @@ int main()\n     {\n       mutex_type m;\n       mutex_type::native_handle_type n = m.native_handle();\n+      (void)n;\n     }\n   catch (const std::system_error& e)\n     {"}, {"sha": "81ce7c33b4aaa3873f4067703ac6e23f89856d5e", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/requirements/typedefs.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Frequirements%2Ftypedefs.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,8 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n // 2008-03-18 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2008 Free Software Foundation, Inc."}, {"sha": "20f7f07efafe6e0689368619e629c8295ba3b2e1", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m1;\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "28320937ec88d8eaa2c638c715facd1bbd5097cd", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/assign_neg.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fassign_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::recursive_timed_mutex mutex_type;\n+  mutex_type m1;\n+  mutex_type m2;\n+  m1 = m2;\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 41 } \n+// { dg-error \"deleted function\" \"\" { target *-*-* } 282 }"}, {"sha": "95eda1f3939ab0a6017be95cbef89615dd117a54", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/cons/copy_neg.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fcons%2Fcopy_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::recursive_timed_mutex mutex_type;\n+  mutex_type m1;\n+  mutex_type m2(m1);\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 40 } \n+// { dg-error \"deleted function\" \"\" { target *-*-* } 281 }"}, {"sha": "df9588c1429921df568720ab5813bd14ff57e30d", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/dest/destructor_locked.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fdest%2Fdestructor_locked.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      // Destroying locked mutex raises system error, or undefined.\n+      // POSIX == may fail with EBUSY.\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "0599797ce9830172a3f871f78a571241289bd594", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/lock/1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+\n+      // Lock already locked mutex.\n+      try\n+\t{\n+\t  // XXX Will block.\n+\t  // m.lock();\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "311149377b5c8466940e17dcf8b164e2b1cac507", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/lock/2.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Flock%2F2.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+\n+      // Lock already locked mutex.\n+      try\n+\t{\n+\t  // XXX Will not block.\n+\t  // m.lock();\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "39c67efc5518c62a43176397842a1c2b607629c6", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/native_handle/1.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      mutex_type::native_handle_type n = m.native_handle();\n+      (void)n;\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "fd323fe5d35090773d1781c644b626a7f5afeafa", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/requirements/typedefs.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Frequirements%2Ftypedefs.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// 2008-03-18 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::recursive_timed_mutex test_type;\n+  typedef test_type::native_handle_type type;\n+}"}, {"sha": "96536482dc59546884244c418a92bd3ef09d2d43", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      bool b = m.try_lock();\n+      VERIFY( b );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "36ca9c0cde6b058241117ecb21aadee9e2b3b0a9", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock/2.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock%2F2.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,73 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \"-std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \"-std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \"-std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      try\n+\t{\n+\t  b = m.try_lock();\n+\t  VERIFY( b );\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "3f278a6522239e15b92cd7dae1e22f5216791578", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_for/1.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,62 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <chrono>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+  \n+  try \n+    {\n+      mutex_type m;\n+      bool b = m.try_lock_for(std::chrono::seconds(1));\n+      VERIFY( b );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "f93a8b64cabc03aa1a592c148c0ac0546f1d1181", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_for/2.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F2.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <chrono>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+  typedef std::chrono::duration<int64_t, std::pico> picoseconds;\n+\n+  try \n+    {\n+      mutex_type m;\n+      bool b = m.try_lock_for(picoseconds(1));\n+      VERIFY( b );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "530a084a50d4c86d30c2444b049f581580d5260f", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_for/3.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_for%2F3.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,79 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  std::chrono::seconds s(1);\n+  \n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      try\n+\t{\n+\t  b = m.try_lock_for(s);\n+\t  VERIFY( b );\n+\t  m.unlock();\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+      catch(...)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "96536482dc59546884244c418a92bd3ef09d2d43", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      bool b = m.try_lock();\n+      VERIFY( b );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "d3eda2f923d795cc69d337f20f8760e63a38354b", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/2.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F2.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      try\n+\t{\n+\t  b = m.try_lock();\n+\t  VERIFY( b );\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "c7136854f1712799436cc8947c5358dc32b6d851", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/unlock/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Funlock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Funlock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Funlock%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::recursive_timed_mutex mutex_type;\n+\n+  try \n+    {\n+      // Unlock mutex that hasn't been locked.\n+      mutex_type m;\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      // POSIX == EPERM\n+      VERIFY( true );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "4d36b83c08a119d08de9937798f2f0cae5d917f9", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,58 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m1;\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "719ef0cb24a64d671ba16b6e261a774fccb7cb40", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/assign_neg.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fassign_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::timed_mutex mutex_type;\n+  mutex_type m1;\n+  mutex_type m2;\n+  m1 = m2;\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 41 } \n+// { dg-error \"deleted function\" \"\" { target *-*-* } 179 }"}, {"sha": "20f309e9bb5e961a4fc8a349cdcca7b746204d6e", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/cons/copy_neg.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fcons%2Fcopy_neg.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // assign\n+  typedef std::timed_mutex mutex_type;\n+  mutex_type m1;\n+  mutex_type m2(m1);\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 40 } \n+// { dg-error \"deleted function\" \"\" { target *-*-* } 178 }"}, {"sha": "9f78c63305d19e791858e9f952965018580e3a77", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/dest/destructor_locked.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fdest%2Fdestructor_locked.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fdest%2Fdestructor_locked.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fdest%2Fdestructor_locked.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      // Destroying locked mutex raises system error, or undefined.\n+      // POSIX == may fail with EBUSY.\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "c94760d90ea35fde92f7af06c01d5cb07c6f5a76", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/lock/1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Flock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Flock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Flock%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+\n+      // Lock already locked mutex.\n+      try\n+\t{\n+\t  // XXX Will block.\n+\t  // m.lock();\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "34db1e9dbe56c7ed8b32f0011dc4b07f189f2dbf", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/native_handle/1.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,60 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      mutex_type::native_handle_type n = m.native_handle();\n+      (void)n;\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "2447c957eb929e1d81a15caf8a2214b6fb889812", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/requirements/typedefs.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Frequirements%2Ftypedefs.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// 2008-07-23 Chris Fairles <chris.fairles@gmail.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::timed_mutex test_type;\n+  typedef test_type::native_handle_type type;\n+}"}, {"sha": "2823c371754381ade3753d786935e42e2615b565", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      bool b = m.try_lock();\n+      VERIFY( b );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "4c264675b61ffe509f227d2a564d61ffca84167f", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock/2.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock%2F2.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      try\n+\t{\n+\t  b = m.try_lock();\n+\t  VERIFY( !b );\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "9d761b9668a62c3166e4cd42c07c275d02256960", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_for/1.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,62 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <chrono>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+  \n+  try \n+    {\n+      mutex_type m;\n+      bool b = m.try_lock_for(std::chrono::seconds(1));\n+      VERIFY( b );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "6463281ef82b2871d754ea78a1438d0850fe94c9", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_for/2.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F2.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <chrono>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+  typedef std::chrono::duration<int64_t, std::pico> picoseconds;\n+\n+  try \n+    {\n+      mutex_type m;\n+      bool b = m.try_lock_for(picoseconds(1));\n+      VERIFY( b );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "eeb330dc6c951d10002f02648c5892928582e27d", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_for/3.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_for%2F3.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,74 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+\n+  std::chrono::seconds s(1);\n+  \n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      try\n+\t{\n+\t  b = m.try_lock_for(s);\n+\t  VERIFY( !b );\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "2823c371754381ade3753d786935e42e2615b565", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      bool b = m.try_lock();\n+      VERIFY( b );\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "4c264675b61ffe509f227d2a564d61ffca84167f", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/2.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F2.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,72 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+\n+  try \n+    {\n+      mutex_type m;\n+      m.lock();\n+      bool b;\n+\n+      try\n+\t{\n+\t  b = m.try_lock();\n+\t  VERIFY( !b );\n+\t}\n+      catch (const std::system_error& e)\n+\t{\n+\t  VERIFY( false );\n+\t}\n+\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "7c118bf500ad4499272f518d885b7718dea03351", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/unlock/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Funlock%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Funlock%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Funlock%2F1.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <mutex>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef std::timed_mutex mutex_type;\n+\n+  try \n+    {\n+      // Unlock mutex that hasn't been locked.\n+      mutex_type m;\n+      m.unlock();\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      // POSIX == EPERM\n+      VERIFY( true );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+\n+  return 0;\n+}"}, {"sha": "5e9272988b79641efe112fa42505b2a5ed3180b6", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/requirements/explicit_instantiation.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Fexplicit_instantiation.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,8 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n // 2008-03-14 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2008 Free Software Foundation, Inc."}, {"sha": "a4939873ea8dbc6fa75797d854b20adc639263d1", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/requirements/typedefs.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Frequirements%2Ftypedefs.cc?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1,5 +1,8 @@\n-// { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n // 2008-03-14 Benjamin Kosnik <bkoz@redhat.com>\n \n // Copyright (C) 2008 Free Software Foundation, Inc."}, {"sha": "927aa47a58c6aeac6dad8170211744221b48343e", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -106,3 +106,12 @@ proc dg-require-atomic-builtins { args } {\n     }\n     return\n }\n+\n+proc dg-require-gthreads { args } {\n+    if { ![ check_v3_target_gthreads ] } {\n+        upvar dg-do-what dg-do-what\n+        set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+        return\n+    }\n+    return\n+}"}, {"sha": "23060b4cc866b6a62bca0f144f27096c42172a54", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b800287b74501a98bf859cf13f46eb562ba876c/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=7b800287b74501a98bf859cf13f46eb562ba876c", "patch": "@@ -1091,7 +1091,7 @@ proc check_v3_target_atomic_builtins { } {\n \tset et_atomic_builtins 0\n \n \t# Set up and compile a C++0x test program that depends\n-\t# on the C99 stdint facilities to be available.\n+\t# on the atomic builtin facilities to be available.\n \tset src atomic_builtins[pid].cc\n \tset exe atomic_builtins[pid].exe\n \n@@ -1120,3 +1120,61 @@ proc check_v3_target_atomic_builtins { } {\n     verbose \"check_v3_target_atomic_builtins: $et_atomic_builtins\" 2\n     return $et_atomic_builtins\n }\n+\n+proc check_v3_target_gthreads { } {\n+    global cxxflags\n+    global DEFAULT_CXXFLAGS\n+    global et_gthreads\n+\n+    global tool\n+\n+    if { ![info exists et_gthreads_target_name] } {\n+        set et_gthreads_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_gthreads_target_name } {\n+        verbose \"check_v3_target_gthreads: `$et_gthreads_target_name'\" 2\n+        set et_gthreads_target_name $current_target\n+        if [info exists et_gthreads] {\n+            verbose \"check_v3_target_gthreads: removing cached result\" 2\n+            unset et_gthreads\n+        }\n+    }\n+\n+    if [info exists et_gthreads] {\n+        verbose \"check_v3_target_gthreads: using cached result\" 2\n+    } else {\n+        set et_gthreads 0\n+\n+        # Set up and compile a C++0x test program that depends\n+        # on the gthreads facilities to be available.\n+        set src gthreads[pid].cc\n+        set exe gthreads[pid].exe\n+\n+        set f [open $src \"w\"]\n+\tputs $f \"#include <bits/c++config.h>\"\n+        puts $f \"int main()\"\n+        puts $f \"#ifdef _GLIBCXX_HAS_GTHREADS\"\n+        puts $f \"{ return 0; }\"\n+        puts $f \"#endif\"\n+        close $f\n+\n+        set cxxflags_saved $cxxflags\n+        set cxxflags \"$cxxflags $DEFAULT_CXXFLAGS -Werror\"\n+\n+        set lines [v3_target_compile $src $exe executable \"\"]\n+        set cxxflags $cxxflags_saved\n+        file delete $src\n+\n+        if [string match \"\" $lines] {\n+            # No error message, compilation succeeded.\n+            set et_gthreads 1\n+        } else {\n+            verbose \"check_v3_target_gthreads: compilation failed\" 2\n+        }\n+    }\n+    verbose \"check_v3_target_gthreads: $et_gthreads\" 2\n+    return $et_gthreads\n+}"}]}