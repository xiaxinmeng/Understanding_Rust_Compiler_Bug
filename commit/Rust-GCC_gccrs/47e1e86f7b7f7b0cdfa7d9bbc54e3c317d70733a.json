{"sha": "47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlMWU4NmY3YjdmN2IwY2RmYTdkOWJiYzU0ZTNjMzE3ZDcwNzMzYQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-07-23T09:24:58Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-07-23T09:24:58Z"}, "message": "[ARM] Enable arm target in ira-shrinkwrap-prep* testcases.\n\n[gcc/]\n\n\t* config/arm/arm.c (arm_get_frame_offsets): If both r3 and other\n\tcallee-saved registers are available for padding purpose\n\tand r3 is not mandatory, then prefer use those callee-saved\n\tinstead of r3.\n\n[gcc/testsuite]\n\n\t* gcc.dg/ira-shrinkwrap-prep-1.c (target): Add arm_nothumb.\n\t* gcc.dg/ira-shrinkwrap-prep-2.c (target): Likewise.\n\t* gcc.dg/pr10474.c (target): Likewise.\n\nFrom-SVN: r212927", "tree": {"sha": "740fcdba03dd0baf18da8718fdeabcbd8a4ab363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/740fcdba03dd0baf18da8718fdeabcbd8a4ab363"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/comments", "author": null, "committer": null, "parents": [{"sha": "e9a8fc239e24b5afc496a5f8595c3dc2c476b1c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a8fc239e24b5afc496a5f8595c3dc2c476b1c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a8fc239e24b5afc496a5f8595c3dc2c476b1c2"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "9ed778339807f752e245af10e6642662da120a2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a", "patch": "@@ -1,3 +1,10 @@\n+2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/arm/arm.c (arm_get_frame_offsets): If both r3 and other\n+\tcallee-saved registers are available for padding purpose\n+\tand r3 is not mandatory, then prefer use those callee-saved\n+\tinstead of r3.\n+\n 2014-07-23  Richard Biener  <rguenther@suse.de>\n \n \t* params.def (PARAM_MAX_COMBINE_INSNS): New."}, {"sha": "d459ddbe699627aae7fa7be4c5ce66764b80dcae", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a", "patch": "@@ -20832,30 +20832,47 @@ arm_get_frame_offsets (void)\n \t{\n \t  int reg = -1;\n \n+\t  /* Register r3 is caller-saved.  Normally it does not need to be\n+\t     saved on entry by the prologue.  However if we choose to save\n+\t     it for padding then we may confuse the compiler into thinking\n+\t     a prologue sequence is required when in fact it is not.  This\n+\t     will occur when shrink-wrapping if r3 is used as a scratch\n+\t     register and there are no other callee-saved writes.\n+\n+\t     This situation can be avoided when other callee-saved registers\n+\t     are available and r3 is not mandatory if we choose a callee-saved\n+\t     register for padding.  */\n+\t  bool prefer_callee_reg_p = false;\n+\n \t  /* If it is safe to use r3, then do so.  This sometimes\n \t     generates better code on Thumb-2 by avoiding the need to\n \t     use 32-bit push/pop instructions.  */\n           if (! any_sibcall_could_use_r3 ()\n \t      && arm_size_return_regs () <= 12\n \t      && (offsets->saved_regs_mask & (1 << 3)) == 0\n-              && (TARGET_THUMB2\n+\t      && (TARGET_THUMB2\n \t\t  || !(TARGET_LDRD && current_tune->prefer_ldrd_strd)))\n \t    {\n \t      reg = 3;\n+\t      if (!(TARGET_LDRD && current_tune->prefer_ldrd_strd))\n+\t\tprefer_callee_reg_p = true;\n+\t    }\n+\t  if (reg == -1\n+\t      || prefer_callee_reg_p)\n+\t    {\n+\t      for (i = 4; i <= (TARGET_THUMB1 ? LAST_LO_REGNUM : 11); i++)\n+\t\t{\n+\t\t  /* Avoid fixed registers; they may be changed at\n+\t\t     arbitrary times so it's unsafe to restore them\n+\t\t     during the epilogue.  */\n+\t\t  if (!fixed_regs[i]\n+\t\t      && (offsets->saved_regs_mask & (1 << i)) == 0)\n+\t\t    {\n+\t\t      reg = i;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n \t    }\n-\t  else\n-\t    for (i = 4; i <= (TARGET_THUMB1 ? LAST_LO_REGNUM : 11); i++)\n-\t      {\n-\t\t/* Avoid fixed registers; they may be changed at\n-\t\t   arbitrary times so it's unsafe to restore them\n-\t\t   during the epilogue.  */\n-\t\tif (!fixed_regs[i]\n-\t\t    && (offsets->saved_regs_mask & (1 << i)) == 0)\n-\t\t  {\n-\t\t    reg = i;\n-\t\t    break;\n-\t\t  }\n-\t      }\n \n \t  if (reg != -1)\n \t    {"}, {"sha": "1ef656362e220ea61242ff71b8f334312923d8e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a", "patch": "@@ -1,3 +1,9 @@\n+2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.dg/ira-shrinkwrap-prep-1.c (target): Add arm_nothumb.\n+\t* gcc.dg/ira-shrinkwrap-prep-2.c (target): Likewise.\n+\t* gcc.dg/pr10474.c (target): Likewise.\n+\n 2014-07-22  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/61160"}, {"sha": "5360844f4a47f0bc1985959d10ebdf3915018741", "filename": "gcc/testsuite/gcc.dg/ira-shrinkwrap-prep-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-1.c?ref=47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { { x86_64-*-* && lp64 } || { powerpc*-*-* && lp64 } } } } */\n+/* { dg-do compile { target { { x86_64-*-* && lp64 } || { { powerpc*-*-* && lp64 } || arm_nothumb } } } } */\n /* { dg-options \"-O3 -fdump-rtl-ira -fdump-rtl-pro_and_epilogue -fno-use-caller-save\"  } */\n \n long __attribute__((noinline, noclone))"}, {"sha": "d242cac8435749e61fcd1fb1fb2b60075f5dac2b", "filename": "gcc/testsuite/gcc.dg/ira-shrinkwrap-prep-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fira-shrinkwrap-prep-2.c?ref=47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { { x86_64-*-* && lp64 } || { powerpc*-*-* && lp64 } } } } */\n+/* { dg-do compile { target { { x86_64-*-* && lp64 } || { { powerpc*-*-* && lp64 } || arm_nothumb } } } } */\n /* { dg-options \"-O3 -fdump-rtl-ira -fdump-rtl-pro_and_epilogue -fno-use-caller-save\"  } */\n \n long __attribute__((noinline, noclone))"}, {"sha": "803fa108506bb6909897f7de6371839fd01b5329", "filename": "gcc/testsuite/gcc.dg/pr10474.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr10474.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr10474.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr10474.c?ref=47e1e86f7b7f7b0cdfa7d9bbc54e3c317d70733a", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { { x86_64-*-* && lp64 } || { powerpc*-*-* && lp64 } } } } */\n+/* { dg-do compile { target { { x86_64-*-* && lp64 } || { { powerpc*-*-* && lp64 } || arm_nothumb } } } } */\n /* { dg-options \"-O3 -fdump-rtl-pro_and_epilogue\"  } */\n \n void f(int *i)"}]}