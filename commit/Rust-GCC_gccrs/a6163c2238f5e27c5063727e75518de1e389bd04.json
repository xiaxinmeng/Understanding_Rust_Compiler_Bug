{"sha": "a6163c2238f5e27c5063727e75518de1e389bd04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYxNjNjMjIzOGY1ZTI3YzUwNjM3MjdlNzU1MThkZTFlMzg5YmQwNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-06-30T21:45:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-06-30T21:45:28Z"}, "message": "sparc-protos.h (output_cbranch): Constify return value.\n\n\t* config/sparc/sparc-protos.h (output_cbranch): Constify return\n\tvalue.\n\t(output_v9branch): Likewise.\n\t(sparc_v8plus_shift): Likewise.  Rename into output_v8plus_shift.\n\t* config/sparc/sparc.c (output_cbranch): Constify return value.\n\tPrettify output for delay slots.\n\t(output_v9branch): Likewise.\n\t(sparc_v8plus_shift): Constify return value.  Rename into\n\toutput_v8plus_shift.\n\t* config/sparc/sparc.md (ashldi3_v8plus): Adjust call to\n\tsparc_v8plus_shift.\n\t(ashrdi3_v8plus): Likewise.\n\t(lshrdi3_v8plus): Likewise.\n\t(call_address_struct_value_sp32): Prettify output for delay slots.\n\t(call_symbolic_struct_value_sp32): Likewise.\n\t(call_address_untyped_struct_value_sp32): Likewise.\n\t(call_symbolic_untyped_struct_value_sp32): Likewise.\n\nFrom-SVN: r83934", "tree": {"sha": "b041bf48bf0c44d407affc506309dfdec16ff695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b041bf48bf0c44d407affc506309dfdec16ff695"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6163c2238f5e27c5063727e75518de1e389bd04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6163c2238f5e27c5063727e75518de1e389bd04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6163c2238f5e27c5063727e75518de1e389bd04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6163c2238f5e27c5063727e75518de1e389bd04/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c66b6c6689525b38af7cf9ea184fdef3d54d34f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c66b6c6689525b38af7cf9ea184fdef3d54d34f4"}], "stats": {"total": 72, "additions": 46, "deletions": 26}, "files": [{"sha": "3ea59d6eb24f7c2cdcce6ab5bcaa3fbbec2fb403", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163c2238f5e27c5063727e75518de1e389bd04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163c2238f5e27c5063727e75518de1e389bd04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6163c2238f5e27c5063727e75518de1e389bd04", "patch": "@@ -1,3 +1,23 @@\n+2004-06-30  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc-protos.h (output_cbranch): Constify return\n+\tvalue.\n+\t(output_v9branch): Likewise.\n+\t(sparc_v8plus_shift): Likewise.  Rename into output_v8plus_shift.\n+\t* config/sparc/sparc.c (output_cbranch): Constify return value.\n+\tPrettify output for delay slots.\n+\t(output_v9branch): Likewise.\n+\t(sparc_v8plus_shift): Constify return value.  Rename into\n+\toutput_v8plus_shift.\n+\t* config/sparc/sparc.md (ashldi3_v8plus): Adjust call to\n+\tsparc_v8plus_shift.\n+\t(ashrdi3_v8plus): Likewise.\n+\t(lshrdi3_v8plus): Likewise.\n+\t(call_address_struct_value_sp32): Prettify output for delay slots.\n+\t(call_symbolic_struct_value_sp32): Likewise.\n+\t(call_address_untyped_struct_value_sp32): Likewise.\n+\t(call_symbolic_untyped_struct_value_sp32): Likewise.\n+\n 2004-06-30  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* common.opt (ftree-loop-optimize): New flag."}, {"sha": "fc3e17fdda2950375957b71026881e0ccfdae58f", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163c2238f5e27c5063727e75518de1e389bd04/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163c2238f5e27c5063727e75518de1e389bd04/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=a6163c2238f5e27c5063727e75518de1e389bd04", "patch": "@@ -83,10 +83,11 @@ extern void sparc_emit_set_const64 (rtx, rtx);\n extern void sparc_emit_set_symbolic_const64 (rtx, rtx, rtx);\n extern int sparc_splitdi_legitimate (rtx, rtx);\n extern int sparc_absnegfloat_split_legitimate (rtx, rtx);\n-extern char *output_cbranch (rtx, rtx, int, int, int, int, rtx);\n+extern const char *output_cbranch (rtx, rtx, int, int, int, int, rtx);\n extern const char *output_return (rtx);\n extern const char *output_sibcall (rtx, rtx);\n-extern char *output_v9branch (rtx, rtx, int, int, int, int, int, rtx);\n+extern const char *output_v8plus_shift (rtx *, rtx, const char *);\n+extern const char *output_v9branch (rtx, rtx, int, int, int, int, int, rtx);\n extern void emit_v9_brxx_insn (enum rtx_code, rtx, rtx);\n extern void print_operand (FILE *, rtx, int);\n extern int mems_ok_for_ldd_peep (rtx, rtx, rtx);\n@@ -110,7 +111,6 @@ extern int reg_unused_after (rtx, rtx);\n extern int register_ok_for_ldd (rtx);\n extern int registers_ok_for_ldd_peep (rtx, rtx);\n extern int v9_regcmp_p (enum rtx_code);\n-extern char *sparc_v8plus_shift (rtx *, rtx, const char *);\n /* Function used for V8+ code generation.  Returns 1 if the high\n    32 bits of REG are 0 before INSN.  */   \n extern int sparc_check_64 (rtx, rtx);"}, {"sha": "01530cfe2b7034ce6c6028dcc46cbee75690a5b1", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163c2238f5e27c5063727e75518de1e389bd04/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163c2238f5e27c5063727e75518de1e389bd04/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a6163c2238f5e27c5063727e75518de1e389bd04", "patch": "@@ -5825,11 +5825,11 @@ sparc_gimplify_va_arg (tree valist, tree type, tree *pre_p, tree *post_p)\n \n    INSN, if set, is the insn.  */\n \n-char *\n+const char *\n output_cbranch (rtx op, rtx dest, int label, int reversed, int annul,\n \t\tint noop, rtx insn)\n {\n-  static char string[50];\n+  static char string[64];\n   enum rtx_code code = GET_CODE (op);\n   rtx cc_reg = XEXP (op, 0);\n   enum machine_mode mode = GET_MODE (cc_reg);\n@@ -5845,7 +5845,7 @@ output_cbranch (rtx op, rtx dest, int label, int reversed, int annul,\n      to\n \n      be,pn %xcc, .+12\n-     nop\n+      nop\n      ba .LC30\n \n      and\n@@ -5855,7 +5855,7 @@ output_cbranch (rtx op, rtx dest, int label, int reversed, int annul,\n      to\n \n      fbe,pt %fcc2, .+16\n-     nop\n+      nop\n      ba .LC29  */\n \n   far = get_attr_length (insn) >= 3;\n@@ -6048,10 +6048,10 @@ output_cbranch (rtx op, rtx dest, int label, int reversed, int annul,\n   p = strchr (p, '\\0');\n   if (far)\n     {\n-      strcpy (p, \".+12\\n\\tnop\\n\\tb\\t\");\n+      strcpy (p, \".+12\\n\\t nop\\n\\tb\\t\");\n       if (annul || noop)\n         p[3] = '6';\n-      p += 13;\n+      p += 14;\n     }\n   *p++ = '%';\n   *p++ = 'l';\n@@ -6060,7 +6060,7 @@ output_cbranch (rtx op, rtx dest, int label, int reversed, int annul,\n   *p++ = label + '0';\n   *p = '\\0';\n   if (noop)\n-    strcpy (p, \"\\n\\tnop\");\n+    strcpy (p, \"\\n\\t nop\");\n \n   return string;\n }\n@@ -6289,11 +6289,11 @@ sparc_emit_fixunsdi (rtx *operands, enum machine_mode mode)\n \n    NOOP is nonzero if we have to follow this branch by a noop.  */\n \n-char *\n+const char *\n output_v9branch (rtx op, rtx dest, int reg, int label, int reversed,\n \t\t int annul, int noop, rtx insn)\n {\n-  static char string[50];\n+  static char string[64];\n   enum rtx_code code = GET_CODE (op);\n   enum machine_mode mode = GET_MODE (XEXP (op, 0));\n   rtx note;\n@@ -6308,7 +6308,7 @@ output_v9branch (rtx op, rtx dest, int reg, int label, int reversed,\n      to\n      \n      brz,pn %g1, .+12\n-     nop\n+      nop\n      ba,pt %xcc, .LC30\n      \n      and\n@@ -6318,7 +6318,7 @@ output_v9branch (rtx op, rtx dest, int reg, int label, int reversed,\n      to\n      \n      brlz,pt %o1, .+16\n-     nop\n+      nop\n      ba,pt %xcc, .LC29  */\n \n   far = get_attr_length (insn) >= 3;\n@@ -6399,10 +6399,10 @@ output_v9branch (rtx op, rtx dest, int reg, int label, int reversed,\n \t    veryfar = 0;\n \t}\n \n-      strcpy (p, \".+12\\n\\tnop\\n\\t\");\n+      strcpy (p, \".+12\\n\\t nop\\n\\t\");\n       if (annul || noop)\n         p[3] = '6';\n-      p += 11;\n+      p += 12;\n       if (veryfar)\n \t{\n \t  strcpy (p, \"b\\t\");\n@@ -6420,7 +6420,7 @@ output_v9branch (rtx op, rtx dest, int reg, int label, int reversed,\n   *p = '\\0';\n \n   if (noop)\n-    strcpy (p, \"\\n\\tnop\");\n+    strcpy (p, \"\\n\\t nop\");\n \n   return string;\n }\n@@ -7721,8 +7721,8 @@ sparc_check_64 (rtx x, rtx insn)\n \n /* Returns assembly code to perform a DImode shift using\n    a 64-bit global or out register on SPARC-V8+.  */\n-char *\n-sparc_v8plus_shift (rtx *operands, rtx insn, const char *opcode)\n+const char *\n+output_v8plus_shift (rtx *operands, rtx insn, const char *opcode)\n {\n   static char asm_code[60];\n "}, {"sha": "7f6c3fbead0eae5f71c3da497316e9dfa4cb1088", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163c2238f5e27c5063727e75518de1e389bd04/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163c2238f5e27c5063727e75518de1e389bd04/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=a6163c2238f5e27c5063727e75518de1e389bd04", "patch": "@@ -6978,7 +6978,7 @@\n \t\t   (match_operand:SI 2 \"arith_operand\" \"rI,rI,rI\")))\n    (clobber (match_scratch:SI 3 \"=X,X,&h\"))]\n   \"TARGET_V8PLUS\"\n-  { return sparc_v8plus_shift (operands, insn, \"sllx\"); }\n+  \"* return output_v8plus_shift (operands, insn, \\\"sllx\\\");\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5,5,6\")])\n \n@@ -7095,7 +7095,7 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI,rI,rI\")))\n    (clobber (match_scratch:SI 3 \"=X,X,&h\"))]\n   \"TARGET_V8PLUS\"\n-  { return sparc_v8plus_shift (operands, insn, \"srax\"); }\n+  \"* return output_v8plus_shift (operands, insn, \\\"srax\\\");\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5,5,6\")])\n \n@@ -7184,7 +7184,7 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI,rI,rI\")))\n    (clobber (match_scratch:SI 3 \"=X,X,&h\"))]\n   \"TARGET_V8PLUS\"\n-  { return sparc_v8plus_shift (operands, insn, \"srlx\"); }\n+  \"* return output_v8plus_shift (operands, insn, \\\"srlx\\\");\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5,5,6\")])\n \n@@ -7435,7 +7435,7 @@\n    (clobber (reg:SI 15))]\n   ;;- Do not use operand 1 for most machines.\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n-  \"call\\t%a0, %1\\n\\tnop\\n\\tunimp\\t%2\"\n+  \"call\\t%a0, %1\\n\\t nop\\n\\tunimp\\t%2\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n    (set_attr \"length\" \"3\")])\n \n@@ -7448,7 +7448,7 @@\n    (clobber (reg:SI 15))]\n   ;;- Do not use operand 1 for most machines.\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n-  \"call\\t%a0, %1\\n\\tnop\\n\\tunimp\\t%2\"\n+  \"call\\t%a0, %1\\n\\t nop\\n\\tunimp\\t%2\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n    (set_attr \"length\" \"3\")])\n \n@@ -7461,7 +7461,7 @@\n    (clobber (reg:SI 15))]\n   ;;- Do not use operand 1 for most machines.\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n-  \"call\\t%a0, %1\\n\\tnop\\n\\tnop\"\n+  \"call\\t%a0, %1\\n\\t nop\\n\\tnop\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n    (set_attr \"length\" \"3\")])\n \n@@ -7474,7 +7474,7 @@\n    (clobber (reg:SI 15))]\n   ;;- Do not use operand 1 for most machines.\n   \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n-  \"call\\t%a0, %1\\n\\tnop\\n\\tnop\"\n+  \"call\\t%a0, %1\\n\\t nop\\n\\tnop\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n    (set_attr \"length\" \"3\")])\n "}]}