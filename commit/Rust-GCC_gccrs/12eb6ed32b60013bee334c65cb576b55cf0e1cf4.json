{"sha": "12eb6ed32b60013bee334c65cb576b55cf0e1cf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJlYjZlZDMyYjYwMDEzYmVlMzM0YzY1Y2I1NzZiNTVjZjBlMWNmNA==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2010-12-31T11:43:48Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2010-12-31T11:43:48Z"}, "message": "pdp11.h (PRINT_OPERAND): Delete.\n\n* config/pdp11/pdp11.h (PRINT_OPERAND): Delete.\n* config/pdp11/pdp11.c (TARGET_PRINT_OPERAND,\nTARGET_PRINT_OPERAND_PUNCT_VALID_P): Define\n(pdp11_asm_print_operand, pdp11_asm_print_operand_punct_valid_p):\nNew function.\n* config/pdp11/pdp11.md (tablejump): Fix generated assembly.\n\nFrom-SVN: r168368", "tree": {"sha": "df55d90642b79c23565d792b83509236e9b9f15d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df55d90642b79c23565d792b83509236e9b9f15d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12eb6ed32b60013bee334c65cb576b55cf0e1cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12eb6ed32b60013bee334c65cb576b55cf0e1cf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12eb6ed32b60013bee334c65cb576b55cf0e1cf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12eb6ed32b60013bee334c65cb576b55cf0e1cf4/comments", "author": null, "committer": null, "parents": [{"sha": "4afeb65c3248e4ece2720ea616d9333bdedaf5ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afeb65c3248e4ece2720ea616d9333bdedaf5ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4afeb65c3248e4ece2720ea616d9333bdedaf5ff"}], "stats": {"total": 90, "additions": 64, "deletions": 26}, "files": [{"sha": "6820d8d82b1276f996231663a7d03c4193fd01e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12eb6ed32b60013bee334c65cb576b55cf0e1cf4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12eb6ed32b60013bee334c65cb576b55cf0e1cf4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12eb6ed32b60013bee334c65cb576b55cf0e1cf4", "patch": "@@ -1,3 +1,12 @@\n+2010-12-31  Paul Koning  <ni1d@arrl.net>\n+\n+\t* config/pdp11/pdp11.h (PRINT_OPERAND): Delete.\n+\t* config/pdp11/pdp11.c (TARGET_PRINT_OPERAND,\n+\tTARGET_PRINT_OPERAND_PUNCT_VALID_P): Define\n+\t(pdp11_asm_print_operand, pdp11_asm_print_operand_punct_valid_p):\n+\tNew function.\n+\t* config/pdp11/pdp11.md (tablejump): Fix generated assembly.\n+\n 2010-12-31  Joern Rennecke  <amylaar@spamcop.net>\n \n \tPR target/47111"}, {"sha": "21f97d2127d770305ea4a4c5926a049ec45567e1", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12eb6ed32b60013bee334c65cb576b55cf0e1cf4/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12eb6ed32b60013bee334c65cb576b55cf0e1cf4/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=12eb6ed32b60013bee334c65cb576b55cf0e1cf4", "patch": "@@ -235,6 +235,12 @@ static const struct default_options pdp11_option_optimization_table[] =\n \n #undef  TARGET_ASM_FUNCTION_SECTION\n #define TARGET_ASM_FUNCTION_SECTION pdp11_function_section\n+\n+#undef  TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND pdp11_asm_print_operand\n+\n+#undef  TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P pdp11_asm_print_operand_punct_valid_p\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n \n@@ -721,13 +727,54 @@ pdp11_asm_output_var (FILE *file, const char *name, int size,\n {\n   if (align > 8)\n     fprintf (file, \"\\n\\t.even\\n\");\n-  fprintf (file, \".globl \");\n-  assemble_name (file, name);\n+  if (global)\n+    {\n+      fprintf (file, \".globl \");\n+      assemble_name (file, name);\n+    }\n   fprintf (file, \"\\n\");\n   assemble_name (file, name);\n   fprintf (file, \": .=.+ %#ho\\n\", (unsigned short)size);\n }\n \n+static void\n+pdp11_asm_print_operand (FILE *file, rtx x, int code)\n+{\n+  REAL_VALUE_TYPE r;\n+  long sval[2];\n+ \n+  if (code == '#')\n+    fprintf (file, \"#\");\n+  else if (code == '@')\n+    {\n+      if (TARGET_UNIX_ASM)\n+\tfprintf (file, \"*\");\n+      else\n+\tfprintf (file, \"@\");\n+    }\n+  else if (GET_CODE (x) == REG)\n+    fprintf (file, \"%s\", reg_names[REGNO (x)]);\n+  else if (GET_CODE (x) == MEM)\n+    output_address (XEXP (x, 0));\n+  else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) != SImode)\n+    {\n+      REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n+      REAL_VALUE_TO_TARGET_DOUBLE (r, sval);\n+      fprintf (file, \"$%#lo\", sval[0] >> 16);\n+    }\n+  else\n+    {\n+      putc ('$', file);\n+      output_addr_const_pdp11 (file, x);\n+    }\n+}\n+\n+static bool\n+pdp11_asm_print_operand_punct_valid_p (char c)\n+{\n+  return (c == '#' || c == '@');\n+}\n+\n void\n print_operand_address (FILE *file, register rtx addr)\n {"}, {"sha": "fc36f5b67f0c0f4e7773eca595c037a76bcd95c9", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12eb6ed32b60013bee334c65cb576b55cf0e1cf4/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12eb6ed32b60013bee334c65cb576b55cf0e1cf4/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=12eb6ed32b60013bee334c65cb576b55cf0e1cf4", "patch": "@@ -658,27 +658,6 @@ extern struct rtx_def *cc0_reg_rtx;\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN) \\\n     pdp11_asm_output_var (FILE, NAME, SIZE, ALIGN, false)\n \n-/* Print operand X (an rtx) in assembler syntax to file FILE.\n-   CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n-   For `%' followed by punctuation, CODE is the punctuation and X is null.\n-\n-*/\n-\n-\n-#define PRINT_OPERAND(FILE, X, CODE)  \\\n-{ if (CODE == '#') fprintf (FILE, \"#\");\t\t\t\t\t\\\n-  else if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\", reg_names[REGNO (X)]);\t\t\t\t\\\n-  else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n-    output_address (XEXP (X, 0));\t\t\t\t\t\\\n-  else if (GET_CODE (X) == CONST_DOUBLE && GET_MODE (X) != SImode)\t\\\n-    { REAL_VALUE_TYPE r;\t\t\t\t\t\t\\\n-      long sval[2];\t\t\t\t\t\t\t\\\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, X);\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_DOUBLE (r, sval);\t\t\t\t\\\n-      fprintf (FILE, \"$%#lo\", sval[0] >> 16); }\t\t\t\t\\\n-  else { putc ('$', FILE); output_addr_const_pdp11 (FILE, X); }}\n-\f\n /* Print a memory address as an operand to reference that memory location.  */\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)  \\"}, {"sha": "1c6542685b742afb53546ec94e84e9a09515512e", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12eb6ed32b60013bee334c65cb576b55cf0e1cf4/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12eb6ed32b60013bee334c65cb576b55cf0e1cf4/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=12eb6ed32b60013bee334c65cb576b55cf0e1cf4", "patch": "@@ -1212,11 +1212,14 @@\n   [(set_attr \"length\" \"4\")])\n \n (define_insn \"tablejump\"\n-  [(set (pc) (match_operand:HI 0 \"general_operand\" \"rR,Q\"))\n+  [(set (pc) (match_operand:HI 0 \"general_operand\" \"r,R,Q\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n-  \"jmp %0\"\n-  [(set_attr \"length\" \"2,4\")])\n+  \"@\n+  jmp (%0)\n+  jmp %@%0\n+  jmp %@%0\"\n+  [(set_attr \"length\" \"2,2,4\")])\n \n ;; indirect jump - let's be conservative!\n ;; allow only register_operand, even though we could also "}]}