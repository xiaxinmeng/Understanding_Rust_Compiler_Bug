{"sha": "8935589b496f755e08cadf26d8ceddf0dd6e0968", "node_id": "C_kwDOANBUbNoAKDg5MzU1ODliNDk2Zjc1NWUwOGNhZGYyNmQ4Y2VkZGYwZGQ2ZTA5Njg", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-02-15T22:31:34Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-04T13:21:01Z"}, "message": "OMP lowering: Regimplify 'OMP_CLAUSE_MAP_DECL_MAKE_ADDRESSABLE' DECLs [PR100280, PR104132, PR104133]\n\n... by generalizing the existing 'gcc/omp-low.cc:task_shared_vars'.\n\nFix-up for commit 9b32c1669aad5459dd053424f9967011348add83\n\"OpenACC 'kernels' decomposition: Mark variables used in\nsynthesized data clauses as addressable [PR100280]\".\n\n\tPR middle-end/100280\n\tPR middle-end/104132\n\tPR middle-end/104133\n\tgcc/\n\t* omp-low.cc (task_shared_vars): Rename to\n\t'make_addressable_vars'.  Adjust all users.\n\t(scan_sharing_clauses) <OMP_CLAUSE_MAP> Use it for\n\t'OMP_CLAUSE_MAP_DECL_MAKE_ADDRESSABLE' DECLs, too.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-3.c: Adjust.\n\t* c-c++-common/goacc/kernels-decompose-pr104061-1-4.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104132-1.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-pr104133-1.c: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c:\n\tExtend.", "tree": {"sha": "e73c89cdf9d6d3d9937f741c4b3a240905511890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e73c89cdf9d6d3d9937f741c4b3a240905511890"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8935589b496f755e08cadf26d8ceddf0dd6e0968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8935589b496f755e08cadf26d8ceddf0dd6e0968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8935589b496f755e08cadf26d8ceddf0dd6e0968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8935589b496f755e08cadf26d8ceddf0dd6e0968/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de6e81ea961219d0726db67776d11ce75a4cae1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6e81ea961219d0726db67776d11ce75a4cae1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6e81ea961219d0726db67776d11ce75a4cae1b"}], "stats": {"total": 155, "additions": 95, "deletions": 60}, "files": [{"sha": "5ce3a50709a44420c963a4a473ecb8465685ff89", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8935589b496f755e08cadf26d8ceddf0dd6e0968/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8935589b496f755e08cadf26d8ceddf0dd6e0968/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=8935589b496f755e08cadf26d8ceddf0dd6e0968", "patch": "@@ -188,7 +188,7 @@ struct omp_context\n static splay_tree all_contexts;\n static int taskreg_nesting_level;\n static int target_nesting_level;\n-static bitmap task_shared_vars;\n+static bitmap make_addressable_vars;\n static bitmap global_nonaddressable_vars;\n static vec<omp_context *> taskreg_contexts;\n static vec<gomp_task *> task_cpyfns;\n@@ -572,9 +572,9 @@ use_pointer_for_field (tree decl, omp_context *shared_ctx)\n \t      /* Taking address of OUTER in lower_send_shared_vars\n \t\t might need regimplification of everything that uses the\n \t\t variable.  */\n-\t      if (!task_shared_vars)\n-\t\ttask_shared_vars = BITMAP_ALLOC (NULL);\n-\t      bitmap_set_bit (task_shared_vars, DECL_UID (outer));\n+\t      if (!make_addressable_vars)\n+\t\tmake_addressable_vars = BITMAP_ALLOC (NULL);\n+\t      bitmap_set_bit (make_addressable_vars, DECL_UID (outer));\n \t      TREE_ADDRESSABLE (outer) = 1;\n \t    }\n \t  return true;\n@@ -601,13 +601,13 @@ omp_copy_decl_2 (tree var, tree name, tree type, omp_context *ctx)\n   else\n     record_vars (copy);\n \n-  /* If VAR is listed in task_shared_vars, it means it wasn't\n-     originally addressable and is just because task needs to take\n-     it's address.  But we don't need to take address of privatizations\n+  /* If VAR is listed in make_addressable_vars, it wasn't\n+     originally addressable, but was only later made so.\n+     We don't need to take address of privatizations\n      from that var.  */\n   if (TREE_ADDRESSABLE (var)\n-      && ((task_shared_vars\n-\t   && bitmap_bit_p (task_shared_vars, DECL_UID (var)))\n+      && ((make_addressable_vars\n+\t   && bitmap_bit_p (make_addressable_vars, DECL_UID (var)))\n \t  || (global_nonaddressable_vars\n \t      && bitmap_bit_p (global_nonaddressable_vars, DECL_UID (var)))))\n     TREE_ADDRESSABLE (copy) = 0;\n@@ -1502,6 +1502,9 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t      gcc_checking_assert (DECL_P (decl));\n \n \t      gcc_checking_assert (!TREE_ADDRESSABLE (decl));\n+\t      if (!make_addressable_vars)\n+\t\tmake_addressable_vars = BITMAP_ALLOC (NULL);\n+\t      bitmap_set_bit (make_addressable_vars, DECL_UID (decl));\n \t      TREE_ADDRESSABLE (decl) = 1;\n \n \t      if (dump_enabled_p ())\n@@ -2402,11 +2405,11 @@ finish_taskreg_scan (omp_context *ctx)\n   if (ctx->record_type == NULL_TREE)\n     return;\n \n-  /* If any task_shared_vars were needed, verify all\n+  /* If any make_addressable_vars were needed, verify all\n      OMP_CLAUSE_SHARED clauses on GIMPLE_OMP_{PARALLEL,TASK,TEAMS}\n      statements if use_pointer_for_field hasn't changed\n      because of that.  If it did, update field types now.  */\n-  if (task_shared_vars)\n+  if (make_addressable_vars)\n     {\n       tree c;\n \n@@ -2421,7 +2424,7 @@ finish_taskreg_scan (omp_context *ctx)\n \t       the receiver side will use them directly.  */\n \t    if (is_global_var (maybe_lookup_decl_in_outer_ctx (decl, ctx)))\n \t      continue;\n-\t    if (!bitmap_bit_p (task_shared_vars, DECL_UID (decl))\n+\t    if (!bitmap_bit_p (make_addressable_vars, DECL_UID (decl))\n \t\t|| !use_pointer_for_field (decl, ctx))\n \t      continue;\n \t    tree field = lookup_field (decl, ctx);\n@@ -14071,7 +14074,7 @@ lower_omp_teams (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \n /* Callback for lower_omp_1.  Return non-NULL if *tp needs to be\n    regimplified.  If DATA is non-NULL, lower_omp_1 is outside\n-   of OMP context, but with task_shared_vars set.  */\n+   of OMP context, but with make_addressable_vars set.  */\n \n static tree\n lower_omp_regimplify_p (tree *tp, int *walk_subtrees,\n@@ -14085,9 +14088,9 @@ lower_omp_regimplify_p (tree *tp, int *walk_subtrees,\n       && DECL_HAS_VALUE_EXPR_P (t))\n     return t;\n \n-  if (task_shared_vars\n+  if (make_addressable_vars\n       && DECL_P (t)\n-      && bitmap_bit_p (task_shared_vars, DECL_UID (t)))\n+      && bitmap_bit_p (make_addressable_vars, DECL_UID (t)))\n     return t;\n \n   /* If a global variable has been privatized, TREE_CONSTANT on\n@@ -14172,7 +14175,7 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   if (gimple_has_location (stmt))\n     input_location = gimple_location (stmt);\n \n-  if (task_shared_vars)\n+  if (make_addressable_vars)\n     memset (&wi, '\\0', sizeof (wi));\n \n   /* If we have issued syntax errors, avoid doing any heavy lifting.\n@@ -14189,7 +14192,7 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n     case GIMPLE_COND:\n       {\n \tgcond *cond_stmt = as_a <gcond *> (stmt);\n-\tif ((ctx || task_shared_vars)\n+\tif ((ctx || make_addressable_vars)\n \t    && (walk_tree (gimple_cond_lhs_ptr (cond_stmt),\n \t\t\t   lower_omp_regimplify_p,\n \t\t\t   ctx ? NULL : &wi, NULL)\n@@ -14281,7 +14284,7 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       lower_omp_critical (gsi_p, ctx);\n       break;\n     case GIMPLE_OMP_ATOMIC_LOAD:\n-      if ((ctx || task_shared_vars)\n+      if ((ctx || make_addressable_vars)\n \t  && walk_tree (gimple_omp_atomic_load_rhs_ptr (\n \t\t\t  as_a <gomp_atomic_load *> (stmt)),\n \t\t\tlower_omp_regimplify_p, ctx ? NULL : &wi, NULL))\n@@ -14402,7 +14405,7 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \n     default:\n     regimplify:\n-      if ((ctx || task_shared_vars)\n+      if ((ctx || make_addressable_vars)\n \t  && walk_gimple_op (stmt, lower_omp_regimplify_p,\n \t\t\t     ctx ? NULL : &wi))\n \t{\n@@ -14466,10 +14469,10 @@ execute_lower_omp (void)\n \n   if (all_contexts->root)\n     {\n-      if (task_shared_vars)\n+      if (make_addressable_vars)\n \tpush_gimplify_context ();\n       lower_omp (&body, NULL);\n-      if (task_shared_vars)\n+      if (make_addressable_vars)\n \tpop_gimplify_context (NULL);\n     }\n \n@@ -14478,7 +14481,7 @@ execute_lower_omp (void)\n       splay_tree_delete (all_contexts);\n       all_contexts = NULL;\n     }\n-  BITMAP_FREE (task_shared_vars);\n+  BITMAP_FREE (make_addressable_vars);\n   BITMAP_FREE (global_nonaddressable_vars);\n \n   /* If current function is a method, remove artificial dummy VAR_DECL created"}, {"sha": "e106fc32c4fd625dee06e303ad7fb2c80a26f305", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-3.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8935589b496f755e08cadf26d8ceddf0dd6e0968/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8935589b496f755e08cadf26d8ceddf0dd6e0968/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-3.c?ref=8935589b496f755e08cadf26d8ceddf0dd6e0968", "patch": "@@ -1,12 +1,6 @@\n /* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n \n-/* { dg-additional-options \"-fchecking\" }\n-   { dg-ice TODO }\n-   { dg-prune-output {D\\.[0-9]+ = arr_0\\.0 \\+ k;} }\n-   { dg-prune-output {during GIMPLE pass: lower} } */\n-\n /* { dg-additional-options \"-fcompare-debug\" } -- w/o debug compiled first.\n-   { dg-bogus {error: during '-fcompare-debug' recompilation} TODO { xfail *-*-* } 0 }\n    { dg-bogus {error: [^\\n\\r]+: '-fcompare-debug' failure \\(length\\)} TODO { xfail *-*-* } 0 } */\n /* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n \n@@ -35,11 +29,10 @@ foo (void)\n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k1 } */\n     /* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n-    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n-    /* { dg-bogus {note: variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {w/o debug} { target *-*-* } l_loop_k1 }\n+       { dg-bogus {note: variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_loop_k1 } */\n     /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n     for (k = 0; k < 2; k++)\n       arr_0 += k;\n-      /* { dg-bogus {error: invalid operands in binary operation} {w/ debug} { xfail *-*-* } .-1 } */\n   }\n }"}, {"sha": "bedbb0a30ebf880758dc0921b4f8d16e78f7e5e0", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104061-1-4.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8935589b496f755e08cadf26d8ceddf0dd6e0968/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8935589b496f755e08cadf26d8ceddf0dd6e0968/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104061-1-4.c?ref=8935589b496f755e08cadf26d8ceddf0dd6e0968", "patch": "@@ -1,11 +1,7 @@\n /* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n \n-/* { dg-additional-options \"-fchecking\" }\n-   { dg-ice TODO }\n-   { dg-prune-output {D\\.[0-9]+ = arr_0\\.0 \\+ k;} }\n-   { dg-prune-output {during GIMPLE pass: lower} } */\n-\n-/* { dg-additional-options \"-g -fcompare-debug\" } -- w/ debug compiled first.  */\n+/* { dg-additional-options \"-g -fcompare-debug\" } -- w/ debug compiled first.\n+   { dg-bogus {error: [^\\n\\r]+: '-fcompare-debug' failure \\(length\\)} TODO { xfail *-*-* } 0 } */\n /* { dg-additional-options \"-O1\" } so that we may get some 'GIMPLE_DEBUG's.  */\n \n /* { dg-additional-options \"-fopt-info-all-omp\" } */\n@@ -32,12 +28,11 @@ foo (void)\n \n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k1 } */\n-    /* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_loop_k1 } */\n-    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {} { xfail *-*-* } l_loop_k1 } */\n-    /* { dg-bogus {note: variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_loop_k1 } */\n-    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-note {variable 'k' in 'private' clause isn't candidate for adjusting OpenACC privatization level: not addressable} {w/o debug} { target *-*-* } l_loop_k1 }\n+       { dg-bogus {note: variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {w/ debug} { xfail *-*-* } l_loop_k1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n     for (k = 0; k < 2; k++)\n       arr_0 += k;\n-      /* { dg-bogus {error: invalid operands in binary operation} {w/ debug} { xfail *-*-* } .-1 } */\n   }\n }"}, {"sha": "42ec4418e400978e3da5c464918327e95116c79d", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104132-1.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8935589b496f755e08cadf26d8ceddf0dd6e0968/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104132-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8935589b496f755e08cadf26d8ceddf0dd6e0968/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104132-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104132-1.c?ref=8935589b496f755e08cadf26d8ceddf0dd6e0968", "patch": "@@ -1,11 +1,5 @@\n /* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n \n-/* { dg-additional-options \"-fchecking\" }\n-   { dg-ice TODO }\n-   { dg-prune-output {k = 0 \\+ \\.offset\\.[0-9]+;} }\n-   { dg-prune-output {k = 0 \\+ 2;} }\n-   { dg-prune-output {during IPA pass: \\*free_lang_data} } */\n-\n /* { dg-additional-options \"-fopt-info-all-omp\" } */\n \n /* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n@@ -27,14 +21,15 @@ foo (void)\n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k1 } */\n     /* { dg-note {variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n     for (k = 0; k < 2; k++)\n       arr_0 = k;\n \n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k2 } */\n     /* { dg-note {variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_k2 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k2 } */\n     for (k = 0; k < 2; k++)\n       arr_0 = k;\n   }\n }\n-/* { dg-bogus {error: non-register as LHS of binary operation} {} { xfail *-*-* } .-1 } */"}, {"sha": "47ea2b92959092c6534ff8524ad57b12bfda7d18", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104133-1.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8935589b496f755e08cadf26d8ceddf0dd6e0968/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104133-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8935589b496f755e08cadf26d8ceddf0dd6e0968/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104133-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104133-1.c?ref=8935589b496f755e08cadf26d8ceddf0dd6e0968", "patch": "@@ -1,11 +1,5 @@\n /* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n \n-/* { dg-additional-options \"-fchecking\" }\n-   { dg-ice TODO }\n-   { dg-prune-output {D\\.[0-9]+ = arr_0\\.0 \\+ k;} }\n-   { dg-prune-output {D\\.[0-9]+ = arr_0\\.1 \\+ k;} }\n-   { dg-prune-output {during GIMPLE pass: lower} } */\n-\n /* { dg-additional-options \"-fopt-info-all-omp\" } */\n \n /* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n@@ -29,14 +23,15 @@ foo (void)\n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k1 } */\n     /* { dg-note {variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_k1 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k1 } */\n     for (k = 0; k < 2; k++)\n       arr_0 += k;\n \n     /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n #pragma acc loop /* { dg-line l_loop_k2 } */\n     /* { dg-note {variable 'k' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_k2 } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_k2 } */\n     for (k = 0; k < 2; k++)\n       arr_0 += k;\n-      /* { dg-bogus {error: invalid operands in binary operation} {} { xfail *-*-* } .-1 } */\n   }\n }"}, {"sha": "049b3a44b03f793f75a5071aadcc9b5da6f97a05", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c", "status": "modified", "additions": 58, "deletions": 4, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8935589b496f755e08cadf26d8ceddf0dd6e0968/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8935589b496f755e08cadf26d8ceddf0dd6e0968/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c?ref=8935589b496f755e08cadf26d8ceddf0dd6e0968", "patch": "@@ -7,28 +7,36 @@\n \n /* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n    { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n-   for testing/documenting aspects of that functionality.  */\n+   Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n+   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n \n /* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n    passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n    so to maintain compatibility with earlier Tcl releases, we manually\n    initialize counter variables:\n-   { dg-line l_dummy[variable c_compute 0 c_loop_i 0] }\n+   { dg-line l_dummy[variable c_compute 0 c_loop_c 0 c_loop_i 0] }\n    { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n    \"WARNING: dg-line var l_dummy defined, but not used\".  */\n \n #undef NDEBUG\n #include <assert.h>\n \n+static int g1;\n+static int g2;\n+\n int main()\n {\n   int a = 0;\n   /*TODO Without making 'a' addressable, for GCN offloading we will not see the expected value copied out.  (But it does work for nvptx offloading, strange...)  */\n   (volatile int *) &a;\n #define N 123\n   int b[N] = { 0 };\n+  unsigned long long f1;\n+  /*TODO See above.  */\n+  (volatile void *) &f1;\n \n #pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {variable 'g2\\.0' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } l_compute$c_compute } */\n   {\n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     int c = 234;\n@@ -46,11 +54,57 @@ int main()\n \n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     a = c;\n+\n+    /* PR104132, PR104133 */\n+    {\n+      /* Use the 'kernels'-top-level 'int c' as loop variable.  */\n+\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_c[incr c_loop_c] } */\n+      /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      for (c = 0; c < N / 2; c++)\n+\tb[c] -= 10;\n+\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_c[incr c_loop_c] } */\n+      /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      for (c = 0; c < N / 2; c++)\n+\tg1 = c;\n+\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_c[incr c_loop_c] } */\n+      /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      for (c = 0; c <= N; c++)\n+\tg2 += c;\n+\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+      f1 = 1;\n+      /* { dg-note {forwarded loop nest in OpenACC 'kernels' region to 'parloops' for analysis} {} { target *-*-* } .+1 } */\n+#pragma acc loop /* { dg-line l_loop_c[incr c_loop_c] } */\n+      /* { dg-note {variable 'c' in 'private' clause is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_loop_c$c_loop_c } */\n+      for (c = 20; c > 0; --c)\n+\tf1 *= c;\n+\n+      /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+      if (c != 234)\n+\t__builtin_abort ();\n+      /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+    }\n   }\n \n-  for (int i = 0; i < N; ++i)\n-    assert (b[i] == 234);\n   assert (a == 234);\n+  for (int i = 0; i < N; ++i)\n+    if (i < N / 2)\n+      assert (b[i] == 234 - 10);\n+    else\n+      assert (b[i] == 234);\n+  assert (g1 == N / 2 - 1);\n+  assert (g2 == N * (N + 1) / 2);\n+  assert (f1 == 2432902008176640000ULL);\n \n   return 0;\n }"}]}