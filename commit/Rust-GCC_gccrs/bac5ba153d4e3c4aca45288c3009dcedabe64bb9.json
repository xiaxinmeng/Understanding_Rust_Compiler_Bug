{"sha": "bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFjNWJhMTUzZDRlM2M0YWNhNDUyODhjMzAwOWRjZWRhYmU2NGJiOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:27:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:27:18Z"}, "message": "[multiple changes]\n\n2016-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb, exp_ch9.adb, einfo.adb, sem_ch4.adb, sem_ch6.adb: Minor\n\treformatting.\n\n2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Allocator): If the designated type\n\tis a private derived type with no discriminants, examine its\n\tunderlying_full_view to determine whether the full view has\n\tdefaulted discriminants, so their defaults can be used in the\n\tcall to the initialization procedure for the designated object.\n\nFrom-SVN: r235740", "tree": {"sha": "ea18b4c8bf24ff54f5d9fc9e9a1065eeafc43678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea18b4c8bf24ff54f5d9fc9e9a1065eeafc43678"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/comments", "author": null, "committer": null, "parents": [{"sha": "42f11e4c26a824c2fa4b8f9bfc9e4af69fe86dc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f11e4c26a824c2fa4b8f9bfc9e4af69fe86dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42f11e4c26a824c2fa4b8f9bfc9e4af69fe86dc8"}], "stats": {"total": 213, "additions": 123, "deletions": 90}, "files": [{"sha": "51ba99854e9ddacd5ad664e5dc4db8a654aa381f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "patch": "@@ -1,3 +1,16 @@\n+2016-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb, exp_ch9.adb, einfo.adb, sem_ch4.adb, sem_ch6.adb: Minor\n+\treformatting.\n+\n+2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Allocator): If the designated type\n+\tis a private derived type with no discriminants, examine its\n+\tunderlying_full_view to determine whether the full view has\n+\tdefaulted discriminants, so their defaults can be used in the\n+\tcall to the initialization procedure for the designated object.\n+\n 2016-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_prag.adb, comperr.adb: Minor reformatting."}, {"sha": "c6a0935b3e66e724f8ee6d3ab42c7fa3f36f9b4f", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "patch": "@@ -5908,7 +5908,7 @@ package body Einfo is\n \n    procedure Set_Original_Protected_Subprogram (Id : E; V : N) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Procedure, E_Function));\n+      pragma Assert (Ekind_In (Id, E_Function, E_Procedure));\n       Set_Node41 (Id, V);\n    end Set_Original_Protected_Subprogram;\n "}, {"sha": "cb1c117b30bc8a2ba522207a36c9e30acca35c6d", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "patch": "@@ -4503,12 +4503,25 @@ package body Exp_Ch4 is\n                      Dis := True;\n                      Typ := T;\n \n-                  elsif Is_Private_Type (T)\n-                    and then Present (Full_View (T))\n-                    and then Has_Discriminants (Full_View (T))\n-                  then\n-                     Dis := True;\n-                     Typ := Full_View (T);\n+                  --  Type may be a private type with no visible discriminants\n+                  --  in which case check full view if in scope, or the\n+                  --  underlying_full_view if dealing with a type whose full\n+                  --  view may be derived from a private type whose own full\n+                  --  view has discriminants.\n+\n+                  elsif Is_Private_Type (T) then\n+                     if Present (Full_View (T))\n+                       and then Has_Discriminants (Full_View (T))\n+                     then\n+                        Dis := True;\n+                        Typ := Full_View (T);\n+\n+                     elsif Present (Underlying_Full_View (T))\n+                       and then Has_Discriminants (Underlying_Full_View (T))\n+                     then\n+                        Dis := True;\n+                        Typ := Underlying_Full_View (T);\n+                     end if;\n                   end if;\n \n                   if Dis then"}, {"sha": "68c6dcb957531fadf3e659867aeff04014b2f586", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "patch": "@@ -2558,9 +2558,9 @@ package body Exp_Ch9 is\n          end if;\n \n          return\n-           Type_Conformant_Parameters (\n-             Parameter_Specifications (Iface_Op_Spec),\n-             Parameter_Specifications (Wrapper_Spec));\n+           Type_Conformant_Parameters\n+             (Parameter_Specifications (Iface_Op_Spec),\n+              Parameter_Specifications (Wrapper_Spec));\n       end Overriding_Possible;\n \n       -----------------------\n@@ -2609,14 +2609,13 @@ package body Exp_Ch9 is\n \n             Append_To (New_Formals,\n               Make_Parameter_Specification (Loc,\n-                Defining_Identifier =>\n+                Defining_Identifier    =>\n                   Make_Defining_Identifier (Loc,\n-                    Chars                  => Chars\n-                                             (Defining_Identifier (Formal))),\n-                    In_Present             => In_Present  (Formal),\n-                    Out_Present            => Out_Present (Formal),\n-                    Null_Exclusion_Present => Null_Exclusion_Present (Formal),\n-                    Parameter_Type         => Param_Type));\n+                    Chars => Chars (Defining_Identifier (Formal))),\n+                In_Present             => In_Present  (Formal),\n+                Out_Present            => Out_Present (Formal),\n+                Null_Exclusion_Present => Null_Exclusion_Present (Formal),\n+                Parameter_Type         => Param_Type));\n \n             Next (Formal);\n          end loop;\n@@ -2776,13 +2775,16 @@ package body Exp_Ch9 is\n \n          else\n             pragma Assert (Is_Private_Primitive_Subprogram (Subp_Id));\n+\n             Obj_Param :=\n               Make_Parameter_Specification (Loc,\n                 Defining_Identifier =>\n                   Make_Defining_Identifier (Loc, Name_uO),\n-                In_Present  => In_Present (Parent (First_Entity (Subp_Id))),\n-                Out_Present => Ekind (Subp_Id) /= E_Function,\n-                  Parameter_Type => New_Occurrence_Of (Obj_Typ, Loc));\n+                In_Present          =>\n+                  In_Present (Parent (First_Entity (Subp_Id))),\n+                Out_Present         => Ekind (Subp_Id) /= E_Function,\n+                Parameter_Type      => New_Occurrence_Of (Obj_Typ, Loc));\n+\n             Prepend_To (New_Formals, Obj_Param);\n          end if;\n \n@@ -4195,8 +4197,7 @@ package body Exp_Ch9 is\n                       Unprotected_Mode => 'N');\n \n    begin\n-      if Ekind (Defining_Unit_Name (Specification (N))) =\n-           E_Subprogram_Body\n+      if Ekind (Defining_Unit_Name (Specification (N))) = E_Subprogram_Body\n       then\n          Decl := Unit_Declaration_Node (Corresponding_Spec (N));\n       else\n@@ -4238,17 +4239,17 @@ package body Exp_Ch9 is\n       if Nkind (Specification (Decl)) = N_Procedure_Specification then\n          New_Spec :=\n            Make_Procedure_Specification (Loc,\n-             Defining_Unit_Name => New_Id,\n+             Defining_Unit_Name       => New_Id,\n              Parameter_Specifications => New_Plist);\n \n       --  Create a new specification for the anonymous subprogram type\n \n       else\n          New_Spec :=\n            Make_Function_Specification (Loc,\n-             Defining_Unit_Name => New_Id,\n+             Defining_Unit_Name       => New_Id,\n              Parameter_Specifications => New_Plist,\n-             Result_Definition =>\n+             Result_Definition        =>\n                Copy_Result_Type (Result_Definition (Specification (Decl))));\n \n          Set_Return_Present (Defining_Unit_Name (New_Spec));\n@@ -9654,22 +9655,22 @@ package body Exp_Ch9 is\n                 Present (Interfaces (Corresponding_Record_Type (Prot_Typ)))\n             then\n                declare\n+                  Found     : Boolean := False;\n                   Prim_Elmt : Elmt_Id;\n                   Prim_Op   : Node_Id;\n-                  Found     : Boolean := False;\n \n                begin\n                   Prim_Elmt :=\n                     First_Elmt\n                       (Primitive_Operations\n-                         (Corresponding_Record_Type (Prot_Typ)));\n+                        (Corresponding_Record_Type (Prot_Typ)));\n \n                   while Present (Prim_Elmt) loop\n                      Prim_Op := Node (Prim_Elmt);\n \n                      if Is_Primitive_Wrapper (Prim_Op)\n-                       and then (Wrapped_Entity (Prim_Op))\n-                                   = Defining_Entity (Specification (Comp))\n+                       and then Wrapped_Entity (Prim_Op) =\n+                                  Defining_Entity (Specification (Comp))\n                      then\n                         Found := True;\n                         exit;\n@@ -9684,6 +9685,7 @@ package body Exp_Ch9 is\n                          Specification =>\n                            Build_Protected_Sub_Specification\n                              (Comp, Prot_Typ, Dispatching_Mode));\n+\n                      Insert_After (Current_Node, Sub);\n                      Analyze (Sub);\n \n@@ -9740,19 +9742,19 @@ package body Exp_Ch9 is\n                Body_Arr :=\n                  Make_Object_Declaration (Loc,\n                    Defining_Identifier => Body_Id,\n-                   Aliased_Present => True,\n-                   Object_Definition =>\n+                   Aliased_Present     => True,\n+                   Object_Definition   =>\n                      Make_Subtype_Indication (Loc,\n                        Subtype_Mark =>\n                          New_Occurrence_Of\n                            (RTE (RE_Protected_Entry_Body_Array), Loc),\n-                       Constraint =>\n+                       Constraint   =>\n                          Make_Index_Or_Discriminant_Constraint (Loc,\n                            Constraints => New_List (\n                               Make_Range (Loc,\n                                 Make_Integer_Literal (Loc, 1),\n                                 Make_Integer_Literal (Loc, E_Count))))),\n-                   Expression => Entries_Aggr);\n+                   Expression          => Entries_Aggr);\n \n             when System_Tasking_Protected_Objects_Single_Entry =>\n                Body_Arr :=\n@@ -9761,7 +9763,8 @@ package body Exp_Ch9 is\n                    Aliased_Present     => True,\n                    Object_Definition   =>\n                      New_Occurrence_Of (RTE (RE_Entry_Body), Loc),\n-                   Expression => Remove_Head (Expressions (Entries_Aggr)));\n+                   Expression          =>\n+                     Remove_Head (Expressions (Entries_Aggr)));\n \n             when others =>\n                raise Program_Error;"}, {"sha": "18ebc25ab77ca83fbe778ffb8802961bfd5ed9c4", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "patch": "@@ -19828,8 +19828,8 @@ package body Sem_Ch3 is\n                                    (Subp_Id => Prim,\n                                     Obj_Typ => Conc_Typ,\n                                     Formals =>\n-                                      Parameter_Specifications (\n-                                        Parent (Prim))));\n+                                      Parameter_Specifications\n+                                        (Parent (Prim))));\n \n                            Insert_After (Curr_Nod, Wrap_Spec);\n                            Curr_Nod := Wrap_Spec;"}, {"sha": "dd140c165cb7397e11ce9cf87375a94acacd69d8", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "patch": "@@ -9022,9 +9022,10 @@ package body Sem_Ch4 is\n             --  Exp_Ch9.Build_Selected_Name).\n \n             elsif Is_Protected_Type (Obj_Type) then\n-               return Present (Original_Protected_Subprogram (Prim_Op))\n-                 and then Chars (Original_Protected_Subprogram (Prim_Op))\n-                            = Chars (Subprog);\n+               return\n+                 Present (Original_Protected_Subprogram (Prim_Op))\n+                   and then Chars (Original_Protected_Subprogram (Prim_Op)) =\n+                              Chars (Subprog);\n             end if;\n \n             return False;"}, {"sha": "244e7a1dbb82d4ac5495e83d6eaa55ffda448a44", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 54, "deletions": 51, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac5ba153d4e3c4aca45288c3009dcedabe64bb9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=bac5ba153d4e3c4aca45288c3009dcedabe64bb9", "patch": "@@ -6491,13 +6491,6 @@ package body Sem_Ch6 is\n         (Prim_Params  : List_Id;\n          Iface_Params : List_Id) return Boolean\n       is\n-         Iface_Id     : Entity_Id;\n-         Iface_Param  : Node_Id;\n-         Iface_Typ    : Entity_Id;\n-         Prim_Id      : Entity_Id;\n-         Prim_Param   : Node_Id;\n-         Prim_Typ     : Entity_Id;\n-\n          function Is_Implemented\n            (Ifaces_List : Elist_Id;\n             Iface       : Entity_Id) return Boolean;\n@@ -6527,6 +6520,15 @@ package body Sem_Ch6 is\n             return False;\n          end Is_Implemented;\n \n+         --  Local variables\n+\n+         Iface_Id     : Entity_Id;\n+         Iface_Param  : Node_Id;\n+         Iface_Typ    : Entity_Id;\n+         Prim_Id      : Entity_Id;\n+         Prim_Param   : Node_Id;\n+         Prim_Typ     : Entity_Id;\n+\n       --  Start of processing for Matches_Prefixed_View_Profile\n \n       begin\n@@ -6539,17 +6541,17 @@ package body Sem_Ch6 is\n \n          Prim_Param := First (Prim_Params);\n \n-         --  The first parameter of the potentially overridden subprogram\n-         --  must be an interface implemented by Prim.\n+         --  The first parameter of the potentially overridden subprogram must\n+         --  be an interface implemented by Prim.\n \n          if not Is_Interface (Iface_Typ)\n            or else not Is_Implemented (Ifaces_List, Iface_Typ)\n          then\n             return False;\n          end if;\n \n-         --  The checks on the object parameters are done, move onto the\n-         --  rest of the parameters.\n+         --  The checks on the object parameters are done, move onto the rest\n+         --  of the parameters.\n \n          if not In_Scope then\n             Prim_Param := Next (Prim_Param);\n@@ -6568,15 +6570,15 @@ package body Sem_Ch6 is\n               and then Is_Concurrent_Type (Designated_Type (Prim_Typ))\n             then\n                Iface_Typ := Designated_Type (Iface_Typ);\n-               Prim_Typ := Designated_Type (Prim_Typ);\n+               Prim_Typ  := Designated_Type (Prim_Typ);\n             end if;\n \n             --  Case of multiple interface types inside a parameter profile\n \n             --     (Obj_Param : in out Iface; ...; Param : Iface)\n \n-            --  If the interface type is implemented, then the matching type\n-            --  in the primitive should be the implementing record type.\n+            --  If the interface type is implemented, then the matching type in\n+            --  the primitive should be the implementing record type.\n \n             if Ekind (Iface_Typ) = E_Record_Type\n               and then Is_Interface (Iface_Typ)\n@@ -6626,9 +6628,9 @@ package body Sem_Ch6 is\n          return;\n       end if;\n \n-      --  Search for the concurrent declaration since it contains the list\n-      --  of all implemented interfaces. In this case, the subprogram is\n-      --  declared within the scope of a protected or a task type.\n+      --  Search for the concurrent declaration since it contains the list of\n+      --  all implemented interfaces. In this case, the subprogram is declared\n+      --  within the scope of a protected or a task type.\n \n       if Present (Scope (Def_Id))\n         and then Is_Concurrent_Type (Scope (Def_Id))\n@@ -6658,10 +6660,10 @@ package body Sem_Ch6 is\n          then\n             In_Scope := False;\n \n-         --  This case occurs when the concurrent type is declared within\n-         --  a generic unit. As a result the corresponding record has been\n-         --  built and used as the type of the first formal, we just have\n-         --  to retrieve the corresponding concurrent type.\n+         --  This case occurs when the concurrent type is declared within a\n+         --  generic unit. As a result the corresponding record has been built\n+         --  and used as the type of the first formal, we just have to retrieve\n+         --  the corresponding concurrent type.\n \n          elsif Is_Concurrent_Record_Type (Typ)\n            and then not Is_Class_Wide_Type (Typ)\n@@ -6693,9 +6695,8 @@ package body Sem_Ch6 is\n          Subp      : Entity_Id := Empty;\n \n       begin\n-         --  Traverse the homonym chain, looking for a potentially\n-         --  overridden subprogram that belongs to an implemented\n-         --  interface.\n+         --  Traverse the homonym chain, looking for a potentially overridden\n+         --  subprogram that belongs to an implemented interface.\n \n          Hom := Current_Entity_In_Scope (Def_Id);\n          while Present (Hom) loop\n@@ -6710,11 +6711,10 @@ package body Sem_Ch6 is\n             then\n                null;\n \n-            --  Entries and procedures can override abstract or null\n-            --  interface procedures.\n+            --  Entries and procedures can override abstract or null interface\n+            --  procedures.\n \n-            elsif (Ekind (Def_Id) = E_Procedure\n-                    or else Ekind (Def_Id) = E_Entry)\n+            elsif Ekind_In (Def_Id, E_Entry, E_Procedure)\n               and then Ekind (Subp) = E_Procedure\n               and then Matches_Prefixed_View_Profile\n                          (Parameter_Specifications (Parent (Def_Id)),\n@@ -6723,17 +6723,16 @@ package body Sem_Ch6 is\n                Candidate := Subp;\n \n                --  For an overridden subprogram Subp, check whether the mode\n-               --  of its first parameter is correct depending on the kind\n-               --  of synchronized type.\n+               --  of its first parameter is correct depending on the kind of\n+               --  synchronized type.\n \n                declare\n                   Formal : constant Node_Id := First_Formal (Candidate);\n \n                begin\n                   --  In order for an entry or a protected procedure to\n-                  --  override, the first parameter of the overridden\n-                  --  routine must be of mode \"out\", \"in out\" or\n-                  --  access-to-variable.\n+                  --  override, the first parameter of the overridden routine\n+                  --  must be of mode \"out\", \"in out\" or access-to-variable.\n \n                   if Ekind_In (Candidate, E_Entry, E_Procedure)\n                     and then Is_Protected_Type (Typ)\n@@ -6744,9 +6743,9 @@ package body Sem_Ch6 is\n                   then\n                      null;\n \n-                  --  All other cases are OK since a task entry or routine\n-                  --  does not have a restriction on the mode of the first\n-                  --  parameter of the overridden interface routine.\n+                  --  All other cases are OK since a task entry or routine does\n+                  --  not have a restriction on the mode of the first parameter\n+                  --  of the overridden interface routine.\n \n                   else\n                      Overridden_Subp := Candidate;\n@@ -6768,8 +6767,8 @@ package body Sem_Ch6 is\n \n                --  If an inherited subprogram is implemented by a protected\n                --  function, then the first parameter of the inherited\n-               --  subprogram shall be of mode in, but not an\n-               --  access-to-variable parameter (RM 9.4(11/9)\n+               --  subprogram shall be of mode in, but not an access-to-\n+               --  variable parameter (RM 9.4(11/9)\n \n                if Present (First_Formal (Subp))\n                  and then Ekind (First_Formal (Subp)) = E_In_Parameter\n@@ -9692,7 +9691,8 @@ package body Sem_Ch6 is\n       -- Has_Matching_Entry_Or_Subprogram --\n       --------------------------------------\n \n-      function Has_Matching_Entry_Or_Subprogram (E : Entity_Id) return Boolean\n+      function Has_Matching_Entry_Or_Subprogram\n+        (E : Entity_Id) return Boolean\n       is\n          function Check_Conforming_Parameters\n            (E1_Param : Node_Id;\n@@ -9738,12 +9738,13 @@ package body Sem_Ch6 is\n \n          begin\n             while Present (Param_E1) and then Present (Param_E2) loop\n-               if Ekind (Defining_Identifier (Param_E1))\n-                    /= Ekind (Defining_Identifier (Param_E2))\n+               if Ekind (Defining_Identifier (Param_E1)) /=\n+                    Ekind (Defining_Identifier (Param_E2))\n                  or else not\n-                   Conforming_Types (Find_Parameter_Type (Param_E1),\n-                                     Find_Parameter_Type (Param_E2),\n-                                     Subtype_Conformant)\n+                   Conforming_Types\n+                     (Find_Parameter_Type (Param_E1),\n+                      Find_Parameter_Type (Param_E2),\n+                      Subtype_Conformant)\n                then\n                   return False;\n                end if;\n@@ -9799,7 +9800,7 @@ package body Sem_Ch6 is\n \n          begin\n             --  Search for entities in the enclosing scope of this synchonized\n-            --  type\n+            --  type.\n \n             pragma Assert (Is_Concurrent_Type (Conc_Typ));\n             Push_Scope (Scope (Conc_Typ));\n@@ -9841,7 +9842,7 @@ package body Sem_Ch6 is\n \n          begin\n             --  Temporarily decorate the first parameter of Subp as controlling\n-            --  formal; required to invoke Subtype_Conformant()\n+            --  formal, required to invoke Subtype_Conformant.\n \n             Set_Is_Controlling_Formal (First_Entity (Subp));\n \n@@ -9866,6 +9867,7 @@ package body Sem_Ch6 is\n             end loop;\n \n             Set_Is_Controlling_Formal (First_Entity (Subp), ICF);\n+\n             return Empty;\n          end Matching_Original_Protected_Subprogram;\n \n@@ -9882,8 +9884,8 @@ package body Sem_Ch6 is\n            and then Is_Concurrent_Record_Type (Etype (First_Entity (E)))\n          then\n             if Scope (E) =\n-                 Scope (Corresponding_Concurrent_Type (\n-                          Etype (First_Entity (E))))\n+                 Scope (Corresponding_Concurrent_Type\n+                         (Etype (First_Entity (E))))\n               and then\n                 Present\n                   (Matching_Entry_Or_Subprogram\n@@ -9913,8 +9915,8 @@ package body Sem_Ch6 is\n            and then\n              Present\n                (Matching_Original_Protected_Subprogram\n-                  (Corresponding_Concurrent_Type (Etype (First_Entity (E))),\n-                   Subp => E))\n+                 (Corresponding_Concurrent_Type (Etype (First_Entity (E))),\n+                  Subp => E))\n          then\n             Report_Conflict (E,\n               Matching_Original_Protected_Subprogram\n@@ -9944,8 +9946,8 @@ package body Sem_Ch6 is\n       ----------------------------\n \n       function Is_Private_Declaration (E : Entity_Id) return Boolean is\n-         Priv_Decls : List_Id;\n          Decl       : constant Node_Id := Unit_Declaration_Node (E);\n+         Priv_Decls : List_Id;\n \n       begin\n          if Is_Package_Or_Generic_Package (Current_Scope)\n@@ -9979,6 +9981,7 @@ package body Sem_Ch6 is\n       is\n          AO : constant Entity_Id := Alias (Old_E);\n          AN : constant Entity_Id := Alias (New_E);\n+\n       begin\n          return Scope (AO) /= Scope (AN)\n            or else No (DTC_Entity (AO))"}]}