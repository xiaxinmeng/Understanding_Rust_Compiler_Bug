{"sha": "63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNlNzQ5YTgxM2ZlZDRhN2FmZjZmZjVhYTY4MTE4NTVkZWIyYmMyYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@purist.soma.redhat.com", "date": "2000-11-21T23:44:50Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-11-21T23:44:50Z"}, "message": "strstream.h: Replace with...\n\n\n2000-11-21  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* include/backward/strstream.h: Replace with...\n\t* include/bits/std_strstream.h: ...this. Move.\n\t* include/backward/complex.h: Remove SGIisms.\n\t* include/backward/streambuf.h: Same.\n\t* include/backward/stream.h: Same.\n\t* include/backward/ostream.h: Same.\n\t* include/backward/istream.h: Same.\n\t* include/backward/iostream.h: Same.\n\t* include/backward/iomanip.h: Same.\n\t* include/backward/fstream.h: Same.\n\t* libsupc++/new.h: Add using declarations for bad_alloc,\n\tnothrow_t, and nothrow, move to ...\n\t* include/backward/new.h: ...here.\n\nFrom-SVN: r37631", "tree": {"sha": "66540c35133775ef91c8eb993f863bb3e193f95d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66540c35133775ef91c8eb993f863bb3e193f95d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/comments", "author": null, "committer": null, "parents": [{"sha": "f45d23308a29f90253329b100d4952fe99adb993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f45d23308a29f90253329b100d4952fe99adb993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f45d23308a29f90253329b100d4952fe99adb993"}], "stats": {"total": 567, "additions": 241, "deletions": 326}, "files": [{"sha": "853e3603a8a5ffd4dfdb1e7bab31b06fafa3ff15", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -1,3 +1,19 @@\n+2000-11-21  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* include/backward/strstream.h: Replace with...\n+\t* include/bits/std_strstream.h: ...this. Move.\n+\t* include/backward/complex.h: Remove SGIisms.\n+\t* include/backward/streambuf.h: Same.\n+\t* include/backward/stream.h: Same.\n+\t* include/backward/ostream.h: Same.\n+\t* include/backward/istream.h: Same.\n+\t* include/backward/iostream.h: Same.\n+\t* include/backward/iomanip.h: Same.\n+\t* include/backward/fstream.h: Same.\n+\t* libsupc++/new.h: Add using declarations for bad_alloc,\n+\tnothrow_t, and nothrow, move to ...\n+\t* include/backward/new.h: ...here.\n+\n 2000-11-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* porting.texi: New file.\n@@ -12,10 +28,6 @@\n \t\n 2000-11-21  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n-\t* libsupc++/new.h: Add using declarations for bad_alloc,\n-\tnothrow_t, and nothrow.\n-\t* include/backward/new.h: Remove duplicate file, as libsupc++ has it.\n-\n \t* acinclude.m4 (AC_LC_MESSAGES): Check for locale.h.\n \t* aclocal.m4: Regenerate.\n \t* configure: Renerate."}, {"sha": "055eef9af11328563016170602fbb577a7447875", "filename": "libstdc++-v3/include/backward/complex.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fcomplex.h?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright (C) 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -29,18 +28,14 @@\n #ifndef _CPP_BACKWARD_COMPLEX_H\n #define _CPP_BACKWARD_COMPLEX_H 1\n \n-#include <bits/stl_config.h>\n #include <bits/std_complex.h>\n \n-#ifdef __STL_USE_NAMESPACES\n-using __STD::complex;\n-#endif /* __STL_USE_NAMESPACES */\n-\n-typedef complex<float> float_complex;\n-typedef complex<double> double_complex;\n-typedef complex<long double> long_double_complex;\n+using std::complex;\n+typedef complex<float> \t\tfloat_complex;\n+typedef complex<double> \tdouble_complex;\n+typedef complex<long double> \tlong_double_complex;\n \n-#endif /* _CPP_BACKWARD_COMPLEX_H */\n+#endif\n \n // Local Variables:\n // mode:C++"}, {"sha": "b98ee3c4c401a41d1f2ca79c46000b68f5c140b7", "filename": "libstdc++-v3/include/backward/fstream.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffstream.h?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -30,20 +30,17 @@\n \n #include <bits/std_fstream.h>\n \n-#ifdef __STL_USE_NAMESPACES\n-using __STD::ifstream;\n-using __STD::ofstream;\n-using __STD::fstream;\n+using std::ifstream;\n+using std::ofstream;\n+using std::fstream;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n-using __STD::wifstream;\n-using __STD::wofstream;\n-using __STD::wfstream;\n+using std::wifstream;\n+using std::wofstream;\n+using std::wfstream;\n #endif\n \n-#endif /* __STL_USE_NAMESPACES */\n-\n-#endif /* _CPP_BACKWARD_FSTREAM_H */\n+#endif\n \n // Local Variables:\n // mode:C++"}, {"sha": "76b209c1fd95ceb9b7105276e778322ee8302d05", "filename": "libstdc++-v3/include/backward/iomanip.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright (C) 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -32,16 +31,14 @@\n #include <backward/iostream.h>\n #include <bits/std_iomanip.h>\n \n-#ifdef __STL_USE_NAMESPACES\n-using __STD::resetiosflags;\n-using __STD::setiosflags;\n-using __STD::setbase;\n-using __STD::setfill;\n-using __STD::setprecision;\n-using __STD::setw;\n-#endif /* __STL_USE_NAMESPACES */\n+using std::resetiosflags;\n+using std::setiosflags;\n+using std::setbase;\n+using std::setfill;\n+using std::setprecision;\n+using std::setw;\n \n-#endif /* _CPP_BACKWARD_IOMANIP_H */\n+#endif\n \n // Local Variables:\n // mode:C++"}, {"sha": "7656bce6638a57699f6c71d292da609441c8555c", "filename": "libstdc++-v3/include/backward/iostream.h", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiostream.h?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -31,29 +30,27 @@\n \n #include <bits/std_iostream.h>\n \n-#ifdef __STL_USE_NAMESPACES\n-using __STD::iostream;\n-using __STD::ostream;\n-using __STD::istream;\n-using __STD::ios;\n-using __STD::streambuf;\n-\n-using __STD::cout;\n-using __STD::cin;\n-using __STD::cerr;\n-using __STD::clog;\n+using std::iostream;\n+using std::ostream;\n+using std::istream;\n+using std::ios;\n+using std::streambuf;\n+\n+using std::cout;\n+using std::cin;\n+using std::cerr;\n+using std::clog;\n #ifdef _GLIBCPP_USE_WCHAR_T\n-using __STD::wcout;\n-using __STD::wcin;\n-using __STD::wcerr;\n-using __STD::wclog;\n+using std::wcout;\n+using std::wcin;\n+using std::wcerr;\n+using std::wclog;\n #endif\n \n-using __STD::endl;\n-using __STD::ends;\n-#endif /* __STL_USE_NAMESPACES */\n+using std::endl;\n+using std::ends;\n \n-#endif /* _CPP_BACKWARD_IOSTREAM_H */\n+#endif\n \n // Local Variables:\n // mode:C++"}, {"sha": "c80c474565ffe48133affd44e8020dec200217ac", "filename": "libstdc++-v3/include/backward/istream.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -30,8 +30,13 @@\n \n #include <backward/iostream.h>\n \n-#endif /* _CPP_BACKWARD_ISTREAM_H */\n+#endif\n \n // Local Variables:\n // mode:C++\n // End:\n+\n+\n+\n+\n+"}, {"sha": "f04e3585a22fa8a6831cf5afce5ed4e2a8fd2924", "filename": "libstdc++-v3/include/backward/new.h", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fnew.h?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -1,21 +1,22 @@\n+// -*- C++ -*- forwarding header.\n+// Copyright (C) 2000 Free Software Foundation\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// This file is part of GNU CC.\n //\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n // any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n+// \n+// GNU CC is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n+// \n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -26,21 +27,15 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _CPP_BACKWARD_NEW_H\n-#define _CPP_BACKWARD_NEW_H 1\n-\n-#include <bits/std_new.h>\n+#ifndef __NEW_H__\n+#define __NEW_H__\n \n-#ifdef __STL_USE_NAMESPACES\n-using __STD::bad_alloc;\n-using __STD::nothrow_t;\n-using __STD::nothrow;\n-using __STD::new_handler;\n-using __STD::set_new_handler;\n-#endif /* __STL_USE_NAMESPACES */\n+#include <new>\n \n-#endif /* _CPP_BACKWARD_NEW_H */\n+using std::bad_alloc;\n+using std::nothrow_t;\n+using std::nothrow;\n+using std::new_handler;\n+using std::set_new_handler;\n \n-// Local Variables:\n-// mode:C++\n-// End:\n+#endif // __NEW_H__"}, {"sha": "aa129b571e722690da7e70a2bcfcc5a41f1a57d5", "filename": "libstdc++-v3/include/backward/ostream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -30,7 +30,7 @@\n \n #include <backward/iostream.h>\n \n-#endif /* _CPP_BACKWARD_OSTREAM_H */\n+#endif \n \n // Local Variables:\n // mode:C++"}, {"sha": "0207f693787ee682fc43f8c8b4f9f9aae3cdda3f", "filename": "libstdc++-v3/include/backward/stream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -30,7 +30,7 @@\n \n #include <backward/iostream.h>\n \n-#endif /* _CPP_BACKWARD_STREAM_H */\n+#endif \n \n // Local Variables:\n // mode:C++"}, {"sha": "a0df9f6440d7db4600924aaea20fd1f2491d2cf6", "filename": "libstdc++-v3/include/backward/streambuf.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstreambuf.h?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright (C) 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -31,11 +30,9 @@\n \n #include <bits/std_streambuf.h>\n \n-#ifdef __STL_USE_NAMESPACES\n-using __STD::streambuf;\n-#endif /* __STL_USE_NAMESPACES */\n+using std::streambuf;\n \n-#endif /* _CPP_BACKWARD_STREAMBUF_H */\n+#endif \n \n // Local Variables:\n // mode:C++"}, {"sha": "0a6a129f4ef674aeca71214dc9695a1f718077ff", "filename": "libstdc++-v3/include/backward/strstream.h", "status": "modified", "additions": 157, "deletions": 40, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63e749a813fed4a7aff6ff5aa6811855deb2bc2c/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h?ref=63e749a813fed4a7aff6ff5aa6811855deb2bc2c", "patch": "@@ -1,44 +1,161 @@\n-// Copyright (C) 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#ifndef _CPP_BACKWARD_STRSTREAM_H\n-#define _CPP_BACKWARD_STRSTREAM_H 1\n-\n-#include <bits/std_strstream.h>\n-\n-#ifdef __STL_USE_NAMESPACES\n-using __STD::strstreambuf;\n-using __STD::istrstream;\n-using __STD::ostrstream;\n-using __STD::strstream;\n-#endif /* __STL_USE_NAMESPACES */\n-\n-#endif /* _CPP_BACKWARD_STRSTREAM_H */\n+/*\n+ * Copyright (c) 1998\n+ * Silicon Graphics Computer Systems, Inc.\n+ *\n+ * Permission to use, copy, modify, distribute and sell this software\n+ * and its documentation for any purpose is hereby granted without fee,\n+ * provided that the above copyright notice appear in all copies and\n+ * that both that copyright notice and this permission notice appear\n+ * in supporting documentation.  Silicon Graphics makes no\n+ * representations about the suitability of this software for any\n+ * purpose.  It is provided \"as is\" without express or implied warranty.\n+ */\n+\n+// WARNING: The classes defined in this header are DEPRECATED.  This\n+// header is defined in section D.7.1 of the C++ standard, and it\n+// MAY BE REMOVED in a future standard revision.  You should use the\n+// header <sstream> instead.\n+\n+#ifndef __SGI_STL_STRSTREAM\n+#define __SGI_STL_STRSTREAM\n+\n+#if defined(__sgi) && !defined(__GNUC__) && !defined(_STANDARD_C_PLUS_PLUS)\n+#error This header file requires the -LANG:std option\n+#endif\n+\n+#include <bits/std_iosfwd.h>\n+#include <bits/std_ios.h>\n+#include <bits/std_istream.h>\n+#include <bits/std_ostream.h>\n+#include <bits/std_string.h>\n+\n+__STL_BEGIN_NAMESPACE\n+\n+//----------------------------------------------------------------------\n+// Class strstreambuf, a streambuf class that manages an array of char.\n+// Note that this class is not a template.\n+\n+class strstreambuf : public basic_streambuf<char, char_traits<char> >\n+{\n+public:                         // Types.\n+  typedef char_traits<char>              _Traits;\n+  typedef basic_streambuf<char, _Traits> _Base;\n+\n+public:                         // Constructor, destructor\n+  explicit strstreambuf(streamsize __initial_capacity = 0);\n+  strstreambuf(void* (*__alloc)(size_t), void (*__free)(void*));\n+\n+  strstreambuf(char* __get, streamsize __n, char* __put = 0);\n+  strstreambuf(signed char* __get, streamsize __n, signed char* __put = 0);\n+  strstreambuf(unsigned char* __get, streamsize __n, unsigned char* __put=0);\n+\n+  strstreambuf(const char* __get, streamsize __n);\n+  strstreambuf(const signed char* __get, streamsize __n);\n+  strstreambuf(const unsigned char* __get, streamsize __n);\n+\n+  virtual ~strstreambuf();\n+\n+public:                         // strstreambuf operations.\n+  void freeze(bool = true);\n+  char* str();\n+  int pcount() const;\n+\n+protected:                      // Overridden virtual member functions.\n+  virtual int_type overflow(int_type __c  = _Traits::eof());\n+  virtual int_type pbackfail(int_type __c = _Traits::eof());\n+  virtual int_type underflow();\n+  virtual _Base* setbuf(char* __buf, streamsize __n);\n+  virtual pos_type seekoff(off_type __off, ios_base::seekdir __dir,\n+                           ios_base::openmode __mode\n+                                      = ios_base::in | ios_base::out);\n+  virtual pos_type seekpos(pos_type __pos, ios_base::openmode __mode\n+                                      = ios_base::in | ios_base::out);\n+\n+private:                        // Helper functions.\n+  // Dynamic allocation, possibly using _M_alloc_fun and _M_free_fun.\n+  char* _M_alloc(size_t);\n+  void  _M_free(char*);\n+\n+  // Helper function used in constructors.\n+  void _M_setup(char* __get, char* __put, streamsize __n);\n+\n+private:                        // Data members.\n+  void* (*_M_alloc_fun)(size_t);\n+  void  (*_M_free_fun)(void*);\n+\n+  bool _M_dynamic  : 1;\n+  bool _M_frozen   : 1;\n+  bool _M_constant : 1;\n+};\n+\n+//----------------------------------------------------------------------\n+// Class istrstream, an istream that manages a strstreambuf.\n+\n+class istrstream : public basic_istream<char>\n+{\n+public:\n+  explicit istrstream(char*);\n+  explicit istrstream(const char*);\n+  istrstream(char* , streamsize);\n+  istrstream(const char*, streamsize);\n+  virtual ~istrstream();\n+\n+  strstreambuf* rdbuf() const;\n+  char* str();\n+\n+private:\n+  strstreambuf _M_buf;\n+};\n+\n+//----------------------------------------------------------------------\n+// Class ostrstream\n+\n+class ostrstream : public basic_ostream<char>\n+{\n+public:\n+  ostrstream();\n+  ostrstream(char*, int, ios_base::openmode = ios_base::out);\n+  virtual ~ostrstream();\n+\n+  strstreambuf* rdbuf() const;\n+  void freeze(bool = true);\n+  char* str();\n+  int pcount() const;\n+\n+private:\n+  strstreambuf _M_buf;\n+};\n+\n+//----------------------------------------------------------------------\n+// Class strstream\n+\n+class strstream : public basic_iostream<char>\n+{\n+public:\n+  typedef char                        char_type;\n+  typedef char_traits<char>::int_type int_type;\n+  typedef char_traits<char>::pos_type pos_type;\n+  typedef char_traits<char>::off_type off_type;\n+\n+  strstream();\n+  strstream(char*, int, ios_base::openmode = ios_base::in | ios_base::out);\n+  virtual ~strstream();\n+\n+  strstreambuf* rdbuf() const;\n+  void freeze(bool = true);\n+  int pcount() const;\n+  char* str();\n+\n+private:\n+  strstreambuf _M_buf;\n+};\n+\n+__STL_END_NAMESPACE\n+\n+#endif /* __SGI_STL_STRSTREAM */\n \n // Local Variables:\n // mode:C++\n // End:\n+\n+"}, {"sha": "2f784b36fcee5ee11e466e6ba838a069fa1855db", "filename": "libstdc++-v3/include/bits/std_strstream.h", "status": "removed", "additions": 0, "deletions": 159, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45d23308a29f90253329b100d4952fe99adb993/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_strstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45d23308a29f90253329b100d4952fe99adb993/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_strstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_strstream.h?ref=f45d23308a29f90253329b100d4952fe99adb993", "patch": "@@ -1,159 +0,0 @@\n-/*\n- * Copyright (c) 1998\n- * Silicon Graphics Computer Systems, Inc.\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- */\n-\n-// WARNING: The classes defined in this header are DEPRECATED.  This\n-// header is defined in section D.7.1 of the C++ standard, and it\n-// MAY BE REMOVED in a future standard revision.  You should use the\n-// header <sstream> instead.\n-\n-#ifndef __SGI_STL_STRSTREAM\n-#define __SGI_STL_STRSTREAM\n-\n-#if defined(__sgi) && !defined(__GNUC__) && !defined(_STANDARD_C_PLUS_PLUS)\n-#error This header file requires the -LANG:std option\n-#endif\n-\n-#include <bits/std_iosfwd.h>\n-#include <bits/std_ios.h>\n-#include <bits/std_istream.h>\n-#include <bits/std_ostream.h>\n-#include <bits/std_string.h>\n-\n-__STL_BEGIN_NAMESPACE\n-\n-//----------------------------------------------------------------------\n-// Class strstreambuf, a streambuf class that manages an array of char.\n-// Note that this class is not a template.\n-\n-class strstreambuf : public basic_streambuf<char, char_traits<char> >\n-{\n-public:                         // Types.\n-  typedef char_traits<char>              _Traits;\n-  typedef basic_streambuf<char, _Traits> _Base;\n-\n-public:                         // Constructor, destructor\n-  explicit strstreambuf(streamsize __initial_capacity = 0);\n-  strstreambuf(void* (*__alloc)(size_t), void (*__free)(void*));\n-\n-  strstreambuf(char* __get, streamsize __n, char* __put = 0);\n-  strstreambuf(signed char* __get, streamsize __n, signed char* __put = 0);\n-  strstreambuf(unsigned char* __get, streamsize __n, unsigned char* __put=0);\n-\n-  strstreambuf(const char* __get, streamsize __n);\n-  strstreambuf(const signed char* __get, streamsize __n);\n-  strstreambuf(const unsigned char* __get, streamsize __n);\n-\n-  virtual ~strstreambuf();\n-\n-public:                         // strstreambuf operations.\n-  void freeze(bool = true);\n-  char* str();\n-  int pcount() const;\n-\n-protected:                      // Overridden virtual member functions.\n-  virtual int_type overflow(int_type __c  = _Traits::eof());\n-  virtual int_type pbackfail(int_type __c = _Traits::eof());\n-  virtual int_type underflow();\n-  virtual _Base* setbuf(char* __buf, streamsize __n);\n-  virtual pos_type seekoff(off_type __off, ios_base::seekdir __dir,\n-                           ios_base::openmode __mode\n-                                      = ios_base::in | ios_base::out);\n-  virtual pos_type seekpos(pos_type __pos, ios_base::openmode __mode\n-                                      = ios_base::in | ios_base::out);\n-\n-private:                        // Helper functions.\n-  // Dynamic allocation, possibly using _M_alloc_fun and _M_free_fun.\n-  char* _M_alloc(size_t);\n-  void  _M_free(char*);\n-\n-  // Helper function used in constructors.\n-  void _M_setup(char* __get, char* __put, streamsize __n);\n-\n-private:                        // Data members.\n-  void* (*_M_alloc_fun)(size_t);\n-  void  (*_M_free_fun)(void*);\n-\n-  bool _M_dynamic  : 1;\n-  bool _M_frozen   : 1;\n-  bool _M_constant : 1;\n-};\n-\n-//----------------------------------------------------------------------\n-// Class istrstream, an istream that manages a strstreambuf.\n-\n-class istrstream : public basic_istream<char>\n-{\n-public:\n-  explicit istrstream(char*);\n-  explicit istrstream(const char*);\n-  istrstream(char* , streamsize);\n-  istrstream(const char*, streamsize);\n-  virtual ~istrstream();\n-\n-  strstreambuf* rdbuf() const;\n-  char* str();\n-\n-private:\n-  strstreambuf _M_buf;\n-};\n-\n-//----------------------------------------------------------------------\n-// Class ostrstream\n-\n-class ostrstream : public basic_ostream<char>\n-{\n-public:\n-  ostrstream();\n-  ostrstream(char*, int, ios_base::openmode = ios_base::out);\n-  virtual ~ostrstream();\n-\n-  strstreambuf* rdbuf() const;\n-  void freeze(bool = true);\n-  char* str();\n-  int pcount() const;\n-\n-private:\n-  strstreambuf _M_buf;\n-};\n-\n-//----------------------------------------------------------------------\n-// Class strstream\n-\n-class strstream : public basic_iostream<char>\n-{\n-public:\n-  typedef char                        char_type;\n-  typedef char_traits<char>::int_type int_type;\n-  typedef char_traits<char>::pos_type pos_type;\n-  typedef char_traits<char>::off_type off_type;\n-\n-  strstream();\n-  strstream(char*, int, ios_base::openmode = ios_base::in | ios_base::out);\n-  virtual ~strstream();\n-\n-  strstreambuf* rdbuf() const;\n-  void freeze(bool = true);\n-  int pcount() const;\n-  char* str();\n-\n-private:\n-  strstreambuf _M_buf;\n-};\n-\n-__STL_END_NAMESPACE\n-\n-#endif /* __SGI_STL_STRSTREAM */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "cb1fa4cb5caa3becee3728a9a79acb64649d8205", "filename": "libstdc++-v3/libsupc++/new.h", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f45d23308a29f90253329b100d4952fe99adb993/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f45d23308a29f90253329b100d4952fe99adb993/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew.h?ref=f45d23308a29f90253329b100d4952fe99adb993", "patch": "@@ -1,38 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-// Copyright (C) 2000 Free Software Foundation\n-\n-// This file is part of GNU CC.\n-//\n-// GNU CC is free software; you can redistribute it and/or modify\n-// it under the terms of the GNU General Public License as published by\n-// the Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-// \n-// GNU CC is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-// \n-// You should have received a copy of the GNU General Public License\n-// along with GNU CC; see the file COPYING.  If not, write to\n-// the Free Software Foundation, 59 Temple Place - Suite 330,\n-// Boston, MA 02111-1307, USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-#ifndef __NEW_H__\n-#define __NEW_H__\n-\n-#include <new>\n-\n-using std::new_handler;\n-using std::set_new_handler;\n-\n-#endif // __NEW_H__"}]}