{"sha": "65fed0cb234b7fb05da20b74be80460bffd96a06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVmZWQwY2IyMzRiN2ZiMDVkYTIwYjc0YmU4MDQ2MGJmZmQ5NmEwNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-27T11:27:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-27T11:27:14Z"}, "message": "(expand_asm_operands): Handle input operands that may not be in a\nregister.\n\nFrom-SVN: r10060", "tree": {"sha": "a50614a77a7491dae026120f8d6792ad40ebf768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a50614a77a7491dae026120f8d6792ad40ebf768"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65fed0cb234b7fb05da20b74be80460bffd96a06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fed0cb234b7fb05da20b74be80460bffd96a06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65fed0cb234b7fb05da20b74be80460bffd96a06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65fed0cb234b7fb05da20b74be80460bffd96a06/comments", "author": null, "committer": null, "parents": [{"sha": "2ecc7cad44f6880075acfc4c12a99c6593f82d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ecc7cad44f6880075acfc4c12a99c6593f82d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ecc7cad44f6880075acfc4c12a99c6593f82d3a"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "02ef0db2bf6a2635c8ae5f7bd3411e709c952fa3", "filename": "gcc/stmt.c", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65fed0cb234b7fb05da20b74be80460bffd96a06/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65fed0cb234b7fb05da20b74be80460bffd96a06/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=65fed0cb234b7fb05da20b74be80460bffd96a06", "patch": "@@ -1517,6 +1517,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   for (tail = inputs; tail; tail = TREE_CHAIN (tail))\n     {\n       int j;\n+      int allows_reg = 0;\n \n       /* If there's an erroneous arg, emit no insn,\n \t because the ASM_INPUT would get VOIDmode\n@@ -1532,23 +1533,65 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n       /* Make sure constraint has neither `=' nor `+'.  */\n \n-      for (j = 0; j < TREE_STRING_LENGTH (TREE_PURPOSE (tail)); j++)\n-\tif (TREE_STRING_POINTER (TREE_PURPOSE (tail))[j] == '='\n-\t    || TREE_STRING_POINTER (TREE_PURPOSE (tail))[j] == '+')\n+      for (j = 0; j < TREE_STRING_LENGTH (TREE_PURPOSE (tail)) - 1; j++)\n+\tswitch (TREE_STRING_POINTER (TREE_PURPOSE (tail))[j])\n \t  {\n+\t  case '+':   case '=':\n \t    error (\"input operand constraint contains `%c'\",\n \t\t   TREE_STRING_POINTER (TREE_PURPOSE (tail))[j]);\n \t    return;\n+\n+\t  case '?':  case '!':  case '*':  case '%':  case '&':\n+\t  case '0':  case '1':  case '2':  case '3':  case '4':\n+\t  case 'V':  case 'm':  case 'o':  case '<':  case '>':\n+\t  case 'E':  case 'F':  case 'G':  case 'H':  case 'X':\n+\t  case 's':  case 'i':  case 'n':\n+\t  case 'I':  case 'J':  case 'K':  case 'L':  case 'M':\n+\t  case 'N':  case 'O':  case 'P':  case ',':\n+#ifdef EXTRA_CONSTRAINT\n+\t  case 'Q':  case 'R':  case 'S':  case 'T':  case 'U':\n+#endif\n+\t    break;\n+\n+\t  case 'p':  case 'g':  case 'r':\n+\t  default:\n+\t    allows_reg = 1;\n+\t    break;\n \t  }\n \n+      if (! allows_reg)\n+\tmark_addressable (TREE_VALUE (tail));\n+\n       XVECEXP (body, 3, i)      /* argvec */\n \t= expand_expr (TREE_VALUE (tail), NULL_RTX, VOIDmode, 0);\n       if (CONSTANT_P (XVECEXP (body, 3, i))\n \t  && ! general_operand (XVECEXP (body, 3, i),\n \t\t\t\tTYPE_MODE (TREE_TYPE (TREE_VALUE (tail)))))\n-\tXVECEXP (body, 3, i)\n-\t  = force_reg (TYPE_MODE (TREE_TYPE (TREE_VALUE (tail))),\n-\t\t       XVECEXP (body, 3, i));\n+\t{\n+\t  if (allows_reg)\n+\t    XVECEXP (body, 3, i)\n+\t      = force_reg (TYPE_MODE (TREE_TYPE (TREE_VALUE (tail))),\n+\t\t\t   XVECEXP (body, 3, i));\n+\t  else\n+\t    XVECEXP (body, 3, i)\n+\t      = force_const_mem (TYPE_MODE (TREE_TYPE (TREE_VALUE (tail))),\n+\t\t\t\t XVECEXP (body, 3, i));\n+\t}\n+\n+      if (! allows_reg\n+\t  && (GET_CODE (XVECEXP (body, 3, i)) == REG\n+\t      || GET_CODE (XVECEXP (body, 3, i)) == SUBREG\n+\t      || GET_CODE (XVECEXP (body, 3, i)) == CONCAT))\n+\t{\n+\t  tree type = TREE_TYPE (TREE_VALUE (tail));\n+\t  rtx memloc = assign_stack_temp (TYPE_MODE (type),\n+\t\t\t\t\t  int_size_in_bytes (type), 1);\n+\n+\t  MEM_IN_STRUCT_P (memloc) = AGGREGATE_TYPE_P (type);\n+\t  emit_move_insn (memloc, XVECEXP (body, 3, i));\n+\t  XVECEXP (body, 3, i) = memloc;\n+\t}\n+\t  \n       XVECEXP (body, 4, i)      /* constraints */\n \t= gen_rtx (ASM_INPUT, TYPE_MODE (TREE_TYPE (TREE_VALUE (tail))),\n \t\t   TREE_STRING_POINTER (TREE_PURPOSE (tail)));"}]}