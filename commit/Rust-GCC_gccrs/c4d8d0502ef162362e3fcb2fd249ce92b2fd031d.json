{"sha": "c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkOGQwNTAyZWYxNjIzNjJlM2ZjYjJmZDI0OWNlOTJiMmZkMDMxZA==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2018-04-01T10:07:40Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-04-01T10:07:40Z"}, "message": "[NDS32] Add relax optimization as new pass.\n\ngcc/\n\t* config.gcc (nds32): Add nds32-relax-opt.o into extra_objs.\n\t* config/nds32/constants.md (unspec_volatile_element): Add\n\tUNSPEC_VOLATILE_RELAX_GROUP.\n\t* config/nds32/nds32-relax-opt.c: New file.\n\t* config/nds32/nds32-predicates.c\n\t(nds32_symbol_load_store_p): New function.\n\t* config/nds32/nds32-protos.h\n\t(nds32_symbol_load_store_p): Declare function.\n\t(make_pass_nds32_relax_opt): Declare new rtl pass function.\n\t* config/nds32/nds32.c\n\t(nds32_register_pass): New function to register pass.\n\t(nds32_register_passes): New function to register passes.\n\t* config/nds32/nds32.md (relax_group): New pattern.\n\t* config/nds32/nds32.opt (mrelax-hint): New option.\n\t* config/nds32/t-nds32 (nds32-relax-opt.o): New dependency.\n\nCo-Authored-By: Kito Cheng <kito.cheng@gmail.com>\nCo-Authored-By: Kuan-Lin Chen <kuanlinchentw@gmail.com>\n\nFrom-SVN: r258998", "tree": {"sha": "915ac14e84f80b187e396843dc44e8e84449d4a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/915ac14e84f80b187e396843dc44e8e84449d4a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af08e51d09f41630023466e7135217ffd43f96c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af08e51d09f41630023466e7135217ffd43f96c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af08e51d09f41630023466e7135217ffd43f96c7"}], "stats": {"total": 451, "additions": 447, "deletions": 4}, "files": [{"sha": "29c82d92faa30fdea1e3bb1343b2ce2dc3f8a1cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "patch": "@@ -1,3 +1,23 @@\n+2018-04-01  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\t    Kito Cheng  <kito.cheng@gmail.com>\n+\t    Kuan-Lin Chen <kuanlinchentw@gmail.com>\n+\n+\t* config.gcc (nds32): Add nds32-relax-opt.o into extra_objs.\n+\t* config/nds32/constants.md (unspec_volatile_element): Add\n+\tUNSPEC_VOLATILE_RELAX_GROUP.\n+\t* config/nds32/nds32-relax-opt.c: New file.\n+\t* config/nds32/nds32-predicates.c\n+\t(nds32_symbol_load_store_p): New function.\n+\t* config/nds32/nds32-protos.h\n+\t(nds32_symbol_load_store_p): Declare function.\n+\t(make_pass_nds32_relax_opt): Declare new rtl pass function.\n+\t* config/nds32/nds32.c\n+\t(nds32_register_pass): New function to register pass.\n+\t(nds32_register_passes): New function to register passes.\n+\t* config/nds32/nds32.md (relax_group): New pattern.\n+\t* config/nds32/nds32.opt (mrelax-hint): New option.\n+\t* config/nds32/t-nds32 (nds32-relax-opt.o): New dependency.\n+\n 2018-04-01  Kito Cheng  <kito.cheng@gmail.com>\n \n \t* config/nds32/t-nds32: Modify files dependency."}, {"sha": "b8a9877b432420e21100cfe55378a0ace267729b", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "patch": "@@ -445,7 +445,7 @@ mips*-*-*)\n nds32*)\n \tcpu_type=nds32\n \textra_headers=\"nds32_intrinsic.h\"\n-\textra_objs=\"nds32-cost.o nds32-intrinsic.o nds32-isr.o nds32-md-auxiliary.o nds32-pipelines-auxiliary.o nds32-predicates.o nds32-memory-manipulation.o nds32-fp-as-gp.o\"\n+\textra_objs=\"nds32-cost.o nds32-intrinsic.o nds32-isr.o nds32-md-auxiliary.o nds32-pipelines-auxiliary.o nds32-predicates.o nds32-memory-manipulation.o nds32-fp-as-gp.o nds32-relax-opt.o\"\n \t;;\n nios2-*-*)\n \tcpu_type=nios2"}, {"sha": "77fb71c34200cc045f3273d5bbfe6375012921b1", "filename": "gcc/config/nds32/constants.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fconstants.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fconstants.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fconstants.md?ref=c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "patch": "@@ -53,6 +53,8 @@\n   UNSPEC_VOLATILE_MTUSR\n   UNSPEC_VOLATILE_SETGIE_EN\n   UNSPEC_VOLATILE_SETGIE_DIS\n+\n+  UNSPEC_VOLATILE_RELAX_GROUP\n   UNSPEC_VOLATILE_POP25_RETURN\n ])\n "}, {"sha": "c313efcb83199c40d9f373e16bf4baf84a8bf35a", "filename": "gcc/config/nds32/nds32-predicates.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32-predicates.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32-predicates.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-predicates.c?ref=c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "patch": "@@ -35,6 +35,7 @@\n #include \"emit-rtl.h\"\n #include \"recog.h\"\n #include \"tm-constrs.h\"\n+#include \"insn-attr.h\"\n \n /* ------------------------------------------------------------------------ */\n \n@@ -414,4 +415,37 @@ nds32_can_use_bitci_p (int ival)\n \t  && satisfies_constraint_Iu15 (gen_int_mode (~ival, SImode)));\n }\n \n+/* Return true if is load/store with SYMBOL_REF addressing mode\n+   and memory mode is SImode.  */\n+bool\n+nds32_symbol_load_store_p (rtx_insn *insn)\n+{\n+  rtx mem_src = NULL_RTX;\n+\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_LOAD:\n+      mem_src = SET_SRC (PATTERN (insn));\n+      break;\n+    case TYPE_STORE:\n+      mem_src = SET_DEST (PATTERN (insn));\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  /* Find load/store insn with addressing mode is SYMBOL_REF.  */\n+  if (mem_src != NULL_RTX)\n+    {\n+      if ((GET_CODE (mem_src) == ZERO_EXTEND)\n+\t  || (GET_CODE (mem_src) == SIGN_EXTEND))\n+\tmem_src = XEXP (mem_src, 0);\n+\n+      if ((GET_CODE (XEXP (mem_src, 0)) == SYMBOL_REF)\n+\t   || (GET_CODE (XEXP (mem_src, 0)) == LO_SUM))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n /* ------------------------------------------------------------------------ */"}, {"sha": "1387cca62ea643e4e242c6152c28dd13a226ad8e", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "patch": "@@ -109,6 +109,8 @@ extern int nds32_adjust_insn_length (rtx_insn *, int);\n \n extern int nds32_fp_as_gp_check_available (void);\n \n+extern bool nds32_symbol_load_store_p (rtx_insn *);\n+\n /* Auxiliary functions for jump table generation.  */\n \n extern const char *nds32_output_casesi_pc_relative (rtx *);\n@@ -164,4 +166,7 @@ extern int nds32_address_cost_impl (rtx, machine_mode, addr_space_t, bool);\n /* Auxiliary functions for pre-define marco.  */\n extern void nds32_cpu_cpp_builtins(struct cpp_reader *);\n \n+/* Functions for create nds32 specific optimization pass.  */\n+extern rtl_opt_pass *make_pass_nds32_relax_opt (gcc::context *);\n+\n /* ------------------------------------------------------------------------ */"}, {"sha": "0349be4725d2aacb356864f6a7ccf06be6e0621d", "filename": "gcc/config/nds32/nds32-relax-opt.c", "status": "added", "additions": 324, "deletions": 0, "changes": 324, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32-relax-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32-relax-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-relax-opt.c?ref=c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "patch": "@@ -0,0 +1,324 @@\n+/* relax-opt pass of Andes NDS32 cpu for GNU compiler\n+   Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+   Contributed by Andes Technology Corporation.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* ------------------------------------------------------------------------ */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"backend.h\"\n+#include \"target.h\"\n+#include \"rtl.h\"\n+#include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"attribs.h\"\n+#include \"df.h\"\n+#include \"memmodel.h\"\n+#include \"tm_p.h\"\n+#include \"optabs.h\"\t\t/* For GEN_FCN.  */\n+#include \"regs.h\"\n+#include \"emit-rtl.h\"\n+#include \"recog.h\"\n+#include \"diagnostic-core.h\"\n+#include \"stor-layout.h\"\n+#include \"varasm.h\"\n+#include \"calls.h\"\n+#include \"output.h\"\n+#include \"explow.h\"\n+#include \"expr.h\"\n+#include \"tm-constrs.h\"\n+#include \"builtins.h\"\n+#include \"cpplib.h\"\n+#include \"insn-attr.h\"\n+#include \"cfgrtl.h\"\n+#include \"tree-pass.h\"\n+\n+/* This is used to create unique relax hint id value.\n+   The initial value is 0.  */\n+static int relax_group_id = 0;\n+\n+/* Group the following pattern as relax candidates:\n+\n+   1. sethi\t$ra, hi20(sym)\n+      ori\t$ra, $ra, lo12(sym)\n+    ==>\n+      addi.gp\t$ra, sym\n+\n+   2. sethi\t$ra, hi20(sym)\n+      lwi\t$rb, [$ra + lo12(sym)]\n+    ==>\n+      lwi.gp\t$rb, [(sym)]\n+\n+   3. sethi\t$ra, hi20(sym)\n+      ori\t$ra, $ra, lo12(sym)\n+      lwi\t$rb, [$ra]\n+      swi\t$rc, [$ra]\n+    ==>\n+      lwi37\t$rb, [(sym)]\n+      swi37\t$rc, [(sym)] */\n+\n+/* Return true if is load/store with REG addressing mode\n+   and memory mode is SImode.  */\n+static bool\n+nds32_reg_base_load_store_p (rtx_insn *insn)\n+{\n+  rtx mem_src = NULL_RTX;\n+\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_LOAD:\n+      mem_src = SET_SRC (PATTERN (insn));\n+      break;\n+    case TYPE_STORE:\n+      mem_src = SET_DEST (PATTERN (insn));\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  /* Find load/store insn with addressing mode is REG.  */\n+  if (mem_src != NULL_RTX)\n+    {\n+      if ((GET_CODE (mem_src) == ZERO_EXTEND)\n+\t  || (GET_CODE (mem_src) == SIGN_EXTEND))\n+\tmem_src = XEXP (mem_src, 0);\n+\n+      if (GET_CODE (XEXP (mem_src, 0)) == REG)\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Return true if insn is a sp/fp base or sp/fp plus load-store instruction.  */\n+\n+static bool\n+nds32_sp_base_or_plus_load_store_p (rtx_insn *insn)\n+{\n+  rtx mem_src = NULL_RTX;\n+\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_LOAD:\n+      mem_src = SET_SRC (PATTERN (insn));\n+      break;\n+    case TYPE_STORE:\n+      mem_src = SET_DEST (PATTERN (insn));\n+      break;\n+    default:\n+      break;\n+    }\n+  /* Find load/store insn with addressing mode is REG.  */\n+  if (mem_src != NULL_RTX)\n+    {\n+      if ((GET_CODE (mem_src) == ZERO_EXTEND)\n+\t  || (GET_CODE (mem_src) == SIGN_EXTEND))\n+\tmem_src = XEXP (mem_src, 0);\n+\n+      if ((GET_CODE (XEXP (mem_src, 0)) == PLUS))\n+\tmem_src = XEXP (mem_src, 0);\n+\n+      if (REG_P (XEXP (mem_src, 0))\n+\t  && ((frame_pointer_needed\n+\t       && REGNO (XEXP (mem_src, 0)) == FP_REGNUM)\n+\t      || REGNO (XEXP (mem_src, 0)) == SP_REGNUM))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Return true if is load with [REG + REG/CONST_INT]  addressing mode.  */\n+static bool\n+nds32_plus_reg_load_store_p (rtx_insn *insn)\n+{\n+  rtx mem_src = NULL_RTX;\n+\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_LOAD:\n+      mem_src = SET_SRC (PATTERN (insn));\n+      break;\n+    case TYPE_STORE:\n+      mem_src = SET_DEST (PATTERN (insn));\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  /* Find load/store insn with addressing mode is [REG + REG/CONST].  */\n+  if (mem_src != NULL_RTX)\n+    {\n+      if ((GET_CODE (mem_src) == ZERO_EXTEND)\n+\t  || (GET_CODE (mem_src) == SIGN_EXTEND))\n+\tmem_src = XEXP (mem_src, 0);\n+\n+      if ((GET_CODE (XEXP (mem_src, 0)) == PLUS))\n+\tmem_src = XEXP (mem_src, 0);\n+      else\n+\treturn false;\n+\n+      if (GET_CODE (XEXP (mem_src, 0)) == REG)\n+\treturn true;\n+\n+    }\n+\n+  return false;\n+}\n+\n+/* Group the relax candidates with group id.  */\n+static void\n+nds32_group_insns (rtx sethi)\n+{\n+  df_ref def_record, use_record;\n+  df_link *link;\n+  rtx_insn *use_insn = NULL;\n+  rtx group_id;\n+\n+  def_record = DF_INSN_DEFS (sethi);\n+\n+  for (link = DF_REF_CHAIN (def_record); link; link = link->next)\n+    {\n+      if (!DF_REF_INSN_INFO (link->ref))\n+\tcontinue;\n+\n+      use_insn = DF_REF_INSN (link->ref);\n+\n+      /* Skip if define insn and use insn not in the same basic block.  */\n+      if (!dominated_by_p (CDI_DOMINATORS,\n+\t\t\t   BLOCK_FOR_INSN (use_insn),\n+\t\t\t   BLOCK_FOR_INSN (sethi)))\n+\treturn;\n+\n+      /* Skip if the low-part used register is from different high-part\n+\t instructions.  */\n+      use_record = DF_INSN_USES (use_insn);\n+      if (DF_REF_CHAIN (use_record) && DF_REF_CHAIN (use_record)->next)\n+\treturn;\n+\n+      /* Skip if use_insn not active insn.  */\n+      if (!active_insn_p (use_insn))\n+\treturn;\n+\n+     /* Initial use_insn_type.  */\n+      if (!(recog_memoized (use_insn) == CODE_FOR_lo_sum\n+\t    || nds32_symbol_load_store_p (use_insn)\n+\t    || (nds32_reg_base_load_store_p (use_insn)\n+\t\t&&!nds32_sp_base_or_plus_load_store_p (use_insn))))\n+\treturn;\n+    }\n+\n+  group_id = GEN_INT (relax_group_id);\n+  /* Insert .relax_* directive for sethi.  */\n+  emit_insn_before (gen_relax_group (group_id), sethi);\n+\n+  /* Scan the use insns and insert the directive.  */\n+  for (link = DF_REF_CHAIN (def_record); link; link = link->next)\n+    {\n+      if (!DF_REF_INSN_INFO (link->ref))\n+\tcontinue;\n+\n+      use_insn = DF_REF_INSN (link->ref);\n+\n+      /* Insert .relax_* directive.  */\n+      if (active_insn_p (use_insn))\n+\temit_insn_before (gen_relax_group (group_id), use_insn);\n+    }\n+\n+  relax_group_id++;\n+}\n+\n+/* Group the relax candidate instructions for linker.  */\n+static void\n+nds32_relax_group (void)\n+{\n+  rtx_insn *insn;\n+\n+  compute_bb_for_insn ();\n+\n+  df_chain_add_problem (DF_DU_CHAIN | DF_UD_CHAIN);\n+  df_insn_rescan_all ();\n+  df_analyze ();\n+  df_set_flags (DF_DEFER_INSN_RESCAN);\n+  calculate_dominance_info (CDI_DOMINATORS);\n+\n+  insn = get_insns ();\n+  gcc_assert (NOTE_P (insn));\n+\n+  for (insn = next_active_insn (insn); insn; insn = next_active_insn (insn))\n+    {\n+      if (NONJUMP_INSN_P (insn))\n+\t{\n+\t  /* Find sethi ra, symbol  instruction.  */\n+\t  if (recog_memoized (insn) == CODE_FOR_sethi\n+\t      && nds32_symbolic_operand (XEXP (SET_SRC (PATTERN (insn)), 0),\n+\t\t\t\t\t SImode))\n+\t    nds32_group_insns (insn);\n+\t}\n+    }\n+\n+  /* We must call df_finish_pass manually because it should be invoked before\n+     BB information is destroyed. Hence we cannot set the TODO_df_finish flag\n+     to the pass manager.  */\n+  df_insn_rescan_all ();\n+  df_finish_pass (false);\n+  free_dominance_info (CDI_DOMINATORS);\n+}\n+\n+static unsigned int\n+nds32_relax_opt (void)\n+{\n+  if (TARGET_RELAX_HINT)\n+    nds32_relax_group ();\n+  return 1;\n+}\n+\n+const pass_data pass_data_nds32_relax_opt =\n+{\n+  RTL_PASS,\t\t\t\t/* type */\n+  \"relax_opt\",\t\t\t\t/* name */\n+  OPTGROUP_NONE,\t\t\t/* optinfo_flags */\n+  TV_MACH_DEP,\t\t\t\t/* tv_id */\n+  0,\t\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_df_finish,\t\t\t/* todo_flags_finish */\n+};\n+\n+class pass_nds32_relax_opt : public rtl_opt_pass\n+{\n+public:\n+  pass_nds32_relax_opt (gcc::context *ctxt)\n+    : rtl_opt_pass (pass_data_nds32_relax_opt, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  bool gate (function *) { return TARGET_RELAX_HINT; }\n+  unsigned int execute (function *) { return nds32_relax_opt (); }\n+};\n+\n+rtl_opt_pass *\n+make_pass_nds32_relax_opt (gcc::context *ctxt)\n+{\n+  return new pass_nds32_relax_opt (ctxt);\n+}"}, {"sha": "bdbff14109b4ac328a76fc142bba4ef30f4dafda", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "patch": "@@ -29,6 +29,7 @@\n #include \"target.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n+#include \"tree-pass.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"df.h\"\n@@ -48,6 +49,7 @@\n #include \"tm-constrs.h\"\n #include \"builtins.h\"\n #include \"cpplib.h\"\n+#include \"context.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -1227,6 +1229,36 @@ nds32_legitimate_index_p (machine_mode outer_mode,\n     }\n }\n \n+static void\n+nds32_register_pass (\n+  rtl_opt_pass *(*make_pass_func) (gcc::context *),\n+  enum pass_positioning_ops pass_pos,\n+  const char *ref_pass_name)\n+{\n+  opt_pass *new_opt_pass = make_pass_func (g);\n+\n+  struct register_pass_info insert_pass =\n+    {\n+      new_opt_pass,\t/* pass */\n+      ref_pass_name,\t/* reference_pass_name */\n+      1,\t\t/* ref_pass_instance_number */\n+      pass_pos\t\t/* po_op */\n+    };\n+\n+  register_pass (&insert_pass);\n+}\n+\n+/* This function is called from nds32_option_override ().\n+   All new passes should be registered here.  */\n+static void\n+nds32_register_passes (void)\n+{\n+  nds32_register_pass (\n+    make_pass_nds32_relax_opt,\n+    PASS_POS_INSERT_AFTER,\n+    \"mach\");\n+}\n+\n /* ------------------------------------------------------------------------ */\n \n /* PART 3: Implement target hook stuff definitions.  */\n@@ -2776,6 +2808,8 @@ nds32_option_override (void)\n   /* Currently, we don't support PIC code generation yet.  */\n   if (flag_pic)\n     sorry (\"position-independent code not supported\");\n+\n+  nds32_register_passes ();\n }\n \n \f"}, {"sha": "e9bd7914effbcfe7d02fe8ec8d16450606c5a2fb", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "patch": "@@ -179,7 +179,7 @@\n \n ;; We use nds32_symbolic_operand to limit that only CONST/SYMBOL_REF/LABEL_REF\n ;; are able to match such instruction template.\n-(define_insn \"*move_addr\"\n+(define_insn \"move_addr\"\n   [(set (match_operand:SI 0 \"register_operand\"       \"=l, r\")\n \t(match_operand:SI 1 \"nds32_symbolic_operand\" \" i, i\"))]\n   \"\"\n@@ -188,7 +188,7 @@\n    (set_attr \"length\"  \"8\")])\n \n \n-(define_insn \"*sethi\"\n+(define_insn \"sethi\"\n   [(set (match_operand:SI 0 \"register_operand\"                \"=r\")\n \t(high:SI (match_operand:SI 1 \"nds32_symbolic_operand\" \" i\")))]\n   \"\"\n@@ -197,7 +197,7 @@\n    (set_attr \"length\" \"4\")])\n \n \n-(define_insn \"*lo_sum\"\n+(define_insn \"lo_sum\"\n   [(set (match_operand:SI 0 \"register_operand\"                  \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\"       \" r\")\n \t\t   (match_operand:SI 2 \"nds32_symbolic_operand\" \" i\")))]\n@@ -2370,6 +2370,13 @@ create_template:\n \n ;; Pseudo NOPs\n \n+(define_insn \"relax_group\"\n+  [(unspec_volatile [(match_operand:SI 0 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_RELAX_GROUP)]\n+  \"\"\n+  \".relax_hint %0\"\n+  [(set_attr \"length\" \"0\")]\n+)\n+\n (define_insn \"pop25return\"\n   [(return)\n    (unspec_volatile:SI [(reg:SI LP_REGNUM)] UNSPEC_VOLATILE_POP25_RETURN)]"}, {"sha": "d6d2f20dbacd0372f8ef55348d19c292c24cea7d", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "patch": "@@ -77,6 +77,10 @@ m16-bit\n Target Report Mask(16_BIT)\n Generate 16-bit instructions.\n \n+mrelax-hint\n+Target Report Mask(RELAX_HINT)\n+Insert relax hint for linker to do relaxation.\n+\n mvh\n Target Report Mask(VH)\n Enable Virtual Hosting support."}, {"sha": "0f1c3857c2a57a250dd78b377c5eff7baa0a52c4", "filename": "gcc/config/nds32/t-nds32", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Ft-nds32", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4d8d0502ef162362e3fcb2fd249ce92b2fd031d/gcc%2Fconfig%2Fnds32%2Ft-nds32", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Ft-nds32?ref=c4d8d0502ef162362e3fcb2fd249ce92b2fd031d", "patch": "@@ -118,3 +118,16 @@ nds32-fp-as-gp.o: \\\n   intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/nds32/nds32-fp-as-gp.c\n+\n+nds32-relax-opt.o: \\\n+  $(srcdir)/config/nds32/nds32-relax-opt.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n+  $(RTL_H) $(TREE_H) $(HASH_TABLE_H) $(OBSTACK_H) $(REGS_H) hard-reg-set.h \\\n+  insn-config.h conditions.h output.h dumpfile.h \\\n+  $(INSN_ATTR_H) $(FLAGS_H) reload.h $(FUNCTION_H) \\\n+  $(EXPR_H) $(OPTABS_H) $(RECOG_H) $(CGRAPH_H) \\\n+  $(GGC_H) except.h $(C_PRAGMA_H) $(TM_P_H) \\\n+  $(TARGET_H) $(TARGET_DEF_H) debug.h langhooks.h $(DF_H) \\\n+  intl.h libfuncs.h $(PARAMS_H) $(OPTS_H)\n+\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t\t$(srcdir)/config/nds32/nds32-relax-opt.c"}]}