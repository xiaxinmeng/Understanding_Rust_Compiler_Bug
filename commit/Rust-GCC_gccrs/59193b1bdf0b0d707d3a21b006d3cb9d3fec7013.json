{"sha": "59193b1bdf0b0d707d3a21b006d3cb9d3fec7013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkxOTNiMWJkZjBiMGQ3MDdkM2EyMWIwMDZkM2NiOWQzZmVjNzAxMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-11-07T06:25:30Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-11-07T06:25:30Z"}, "message": "[PR87874] avoid const-wide-int subreg in LRA\n\nJust like CONST_INT, CONST_WIDE_INT is VOIDmode, so LRA might be\ntempted to build a SUBREG to \"convert\" it to the wanted mode.  That's\nno use.  Test for CONST_SCALAR_INT_P instead of CONST_INT_P so that we\nskip the subreg creation for both.\n\nfor  gcc/ChangeLog\n\n\tPR rtl-optimization/87874\n\t* lra.c (lra_substitute_pseudo): Do not create a subreg for\n\tconst wide ints.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR rtl-optimization/87874\n\t* gcc.dg/pr87874.c: New.\n\nFrom-SVN: r265860", "tree": {"sha": "baa2a3a8ccecccdcb8110541d7a9f419fc409709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baa2a3a8ccecccdcb8110541d7a9f419fc409709"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013/comments", "author": null, "committer": null, "parents": [{"sha": "513c11068ff08576975039c37d6d6f7192f8f190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513c11068ff08576975039c37d6d6f7192f8f190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/513c11068ff08576975039c37d6d6f7192f8f190"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "d1fde63c79c1fe4843e10eaed8c0bbd573168938", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59193b1bdf0b0d707d3a21b006d3cb9d3fec7013", "patch": "@@ -1,3 +1,9 @@\n+2018-11-07  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR rtl-optimization/87874\n+\t* lra.c (lra_substitute_pseudo): Do not create a subreg for\n+\tconst wide ints.\n+\n 2018-11-06  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \t* config/rs6000/rs6000.md (bswap<mode>2): Force address into register"}, {"sha": "5d58d90f3a6b1fbcee9c78a60339db9da066beac", "filename": "gcc/lra.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=59193b1bdf0b0d707d3a21b006d3cb9d3fec7013", "patch": "@@ -1961,7 +1961,7 @@ lra_substitute_pseudo (rtx *loc, int old_regno, rtx new_reg, bool subreg_p,\n       machine_mode inner_mode = GET_MODE (new_reg);\n \n       if (mode != inner_mode\n-\t  && ! (CONST_INT_P (new_reg) && SCALAR_INT_MODE_P (mode)))\n+\t  && ! (CONST_SCALAR_INT_P (new_reg) && SCALAR_INT_MODE_P (mode)))\n \t{\n \t  poly_uint64 offset = 0;\n \t  if (partial_subreg_p (mode, inner_mode)"}, {"sha": "66a09d6895e27e429798e6986ab668e0dcaf4c13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59193b1bdf0b0d707d3a21b006d3cb9d3fec7013", "patch": "@@ -1,3 +1,8 @@\n+2018-11-07  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR rtl-optimization/87874\n+\t* gcc.dg/pr87874.c: New.\n+\n 2018-11-06  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* gcc.target/s390/load-and-test-fp-1.c: Accept cdb."}, {"sha": "3ab5dcf68ffba77de349d3b7bfc4e0f0dbdb2168", "filename": "gcc/testsuite/gcc.dg/pr87874.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87874.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59193b1bdf0b0d707d3a21b006d3cb9d3fec7013/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87874.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87874.c?ref=59193b1bdf0b0d707d3a21b006d3cb9d3fec7013", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-g -O1 -fgcse -fno-dce -fno-tree-ccp -fno-tree-coalesce-vars -fno-tree-copy-prop -fno-tree-dce -fno-tree-dominator-opts -fno-tree-fre -fno-tree-loop-optimize -fno-tree-sink\" } */\n+\n+int *vk;\n+int m2;\n+#if __SIZEOF_INT128__\n+__int128 nb;\n+\n+void\n+em (int u5, int fo, int s7)\n+{\n+  for (;;)\n+    {\n+      long int es;\n+\n+      es = !!u5 ? (!!fo && !!m2) : fo;\n+      if (es == 0)\n+        if (nb == *vk)\n+          {\n+            const unsigned long int uint64_max = 18446744073709551615ul;\n+            __int128 ks = uint64_max / 2 + 1;\n+\n+            while (s7 < 1)\n+              while (nb < 2)\n+                {\n+                  for (ks = 0; ks < 3; ++ks)\n+                    {\n+                    }\n+\n+                  ++nb;\n+                }\n+          }\n+    }\n+}\n+#endif"}]}