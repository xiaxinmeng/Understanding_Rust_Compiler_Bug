{"sha": "3ff01d4d50e41aa121a583fd69d42626045127af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZmMDFkNGQ1MGU0MWFhMTIxYTU4M2ZkNjlkNDI2MjYwNDUxMjdhZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-17T13:49:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-17T13:49:48Z"}, "message": "arc.c (arc_cpu_string): Make static.\n\n\t* config/arc/arc.c (arc_cpu_string): Make static.  Default to \"base\"\n\t(arc_text_string, arc_data_string, arc_rodata_string): Make static.\n\t(TARGET_HANDLE_OPTION): Override default.\n\t(arc_handle_option): New function.\n\t(arc_init): Remove code to set arch_cpu_string.\n\t* config/arc/arc.h (target_flags, TARGET_MASK_MANGLE_CPU)\n\t(TARGET_MANGLE_CPU, TARGET_MASK_MANGLE_CPU_LIBGCC)\n\t(TARGET_MANGLE_CPU_LIBGCC, TARGET_MASK_ALIGN_LOOPS, TARGET_ALIGN_LOOPS)\n\t(TARGET_MASK_BIG_ENDIAN, TARGET_BIG_ENDIAN, TARGET_MASK_NO_COND_EXEC)\n\t(TARGET_NO_COND_EXEC, TARGET_SWITCHES, TARGET_DEFAULT)\n\t(SUBTARGET_SWITCHES, arc_cpu_string, arc_text_string, arc_data_string)\n\t(arc_rodata_string, TARGET_OPTIONS): Delete.\n\t* config/arc/arc.opt: New file.\n\nFrom-SVN: r96607", "tree": {"sha": "236c09eb9ea6ca592f2398156e0f8eb197b7cbb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/236c09eb9ea6ca592f2398156e0f8eb197b7cbb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ff01d4d50e41aa121a583fd69d42626045127af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff01d4d50e41aa121a583fd69d42626045127af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff01d4d50e41aa121a583fd69d42626045127af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff01d4d50e41aa121a583fd69d42626045127af/comments", "author": null, "committer": null, "parents": [{"sha": "7416ab0243ea8eb35c6aa375db603755c2ec7706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7416ab0243ea8eb35c6aa375db603755c2ec7706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7416ab0243ea8eb35c6aa375db603755c2ec7706"}], "stats": {"total": 181, "additions": 91, "deletions": 90}, "files": [{"sha": "c4d37bf9f2b6cf9f1f3c47db11fed8327b68f6aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff01d4d50e41aa121a583fd69d42626045127af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff01d4d50e41aa121a583fd69d42626045127af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ff01d4d50e41aa121a583fd69d42626045127af", "patch": "@@ -1,3 +1,19 @@\n+2005-03-17  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/arc/arc.c (arc_cpu_string): Make static.  Default to \"base\"\n+\t(arc_text_string, arc_data_string, arc_rodata_string): Make static.\n+\t(TARGET_HANDLE_OPTION): Override default.\n+\t(arc_handle_option): New function.\n+\t(arc_init): Remove code to set arch_cpu_string.\n+\t* config/arc/arc.h (target_flags, TARGET_MASK_MANGLE_CPU)\n+\t(TARGET_MANGLE_CPU, TARGET_MASK_MANGLE_CPU_LIBGCC)\n+\t(TARGET_MANGLE_CPU_LIBGCC, TARGET_MASK_ALIGN_LOOPS, TARGET_ALIGN_LOOPS)\n+\t(TARGET_MASK_BIG_ENDIAN, TARGET_BIG_ENDIAN, TARGET_MASK_NO_COND_EXEC)\n+\t(TARGET_NO_COND_EXEC, TARGET_SWITCHES, TARGET_DEFAULT)\n+\t(SUBTARGET_SWITCHES, arc_cpu_string, arc_text_string, arc_data_string)\n+\t(arc_rodata_string, TARGET_OPTIONS): Delete.\n+\t* config/arc/arc.opt: New file.\n+\n 2005-03-17  Richard Henderson  <rth@redhat.com>\n \n \t* doc/extend.texi (Weak Pragmas): New section."}, {"sha": "ba8a256acbd3d6f2933281e4de6194b103ebe317", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 41, "deletions": 23, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff01d4d50e41aa121a583fd69d42626045127af/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff01d4d50e41aa121a583fd69d42626045127af/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=3ff01d4d50e41aa121a583fd69d42626045127af", "patch": "@@ -43,8 +43,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"target-def.h\"\n \n-/* Which cpu we're compiling for (NULL(=base), ???).  */\n-const char *arc_cpu_string;\n+/* Which cpu we're compiling for.  */\n+static const char *arc_cpu_string = \"base\";\n int arc_cpu_type;\n \n /* Name of mangle string to add to symbols to separate code compiled for each\n@@ -57,9 +57,9 @@ rtx arc_compare_op0, arc_compare_op1;\n \n /* Name of text, data, and rodata sections, as specified on command line.\n    Selected by -m{text,data,rodata} flags.  */\n-const char *arc_text_string = ARC_DEFAULT_TEXT_SECTION;\n-const char *arc_data_string = ARC_DEFAULT_DATA_SECTION;\n-const char *arc_rodata_string = ARC_DEFAULT_RODATA_SECTION;\n+static const char *arc_text_string = ARC_DEFAULT_TEXT_SECTION;\n+static const char *arc_data_string = ARC_DEFAULT_DATA_SECTION;\n+static const char *arc_rodata_string = ARC_DEFAULT_RODATA_SECTION;\n \n /* Name of text, data, and rodata sections used in varasm.c.  */\n const char *arc_text_section;\n@@ -86,6 +86,7 @@ static int arc_ccfsm_target_label;\n    arc_print_operand.  */\n static int last_insn_set_cc_p;\n static int current_insn_set_cc_p;\n+static bool arc_handle_option (size_t, const char *, int);\n static void record_cc_ref (rtx);\n static void arc_init_reg_tables (void);\n static int get_arc_condition_code (rtx);\n@@ -126,6 +127,9 @@ static bool arc_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n #undef TARGET_ASM_EXTERNAL_LIBCALL\n #define TARGET_ASM_EXTERNAL_LIBCALL arc_external_libcall\n \n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION arc_handle_option\n+\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS arc_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -150,31 +154,45 @@ static bool arc_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+/* Implement TARGET_HANDLE_OPTION.  */\n+\n+static bool\n+arc_handle_option (size_t code, const char *arg, int value ATTRIBUTE_UNUSED)\n+{\n+  switch (code)\n+    {\n+    case OPT_mcpu_:\n+      if (strcmp (arg, \"base\") == 0 || ARC_EXTENSION_CPU (arg))\n+\t{\n+\t  arc_cpu_string = arg;\n+\t  return true;\n+\t}\n+      return false;\n+\n+    case OPT_mtext_:\n+      arc_text_string = arg;\n+      return true;\n+\n+    case OPT_mdata_:\n+      arc_data_string = arg;\n+      return true;\n+\n+    case OPT_mrodata_:\n+      arc_rodata_string = arg;\n+      return true;\n+\n+    default:\n+      return true;\n+    }\n+}\n+\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n \n void\n arc_init (void)\n {\n   char *tmp;\n   \n-  if (arc_cpu_string == 0\n-      || !strcmp (arc_cpu_string, \"base\"))\n-    {\n-      /* Ensure we have a printable value for the .cpu pseudo-op.  */\n-      arc_cpu_string = \"base\";\n-      arc_cpu_type = 0;\n-      arc_mangle_cpu = NULL;\n-    }\n-  else if (ARC_EXTENSION_CPU (arc_cpu_string))\n-    ; /* nothing to do */\n-  else\n-    {\n-      error (\"bad value (%s) for -mcpu switch\", arc_cpu_string);\n-      arc_cpu_string = \"base\";\n-      arc_cpu_type = 0;\n-      arc_mangle_cpu = NULL;\n-    }\n-\n   /* Set the pseudo-ops for the various standard sections.  */\n   arc_text_section = tmp = xmalloc (strlen (arc_text_string) + sizeof (ARC_SECTION_FORMAT) + 1);\n   sprintf (tmp, ARC_SECTION_FORMAT, arc_text_string);"}, {"sha": "dfc88fe8c1b557a33a87903aa759a4e58f53cb56", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff01d4d50e41aa121a583fd69d42626045127af/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff01d4d50e41aa121a583fd69d42626045127af/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=3ff01d4d50e41aa121a583fd69d42626045127af", "patch": "@@ -72,79 +72,12 @@ Boston, MA 02111-1307, USA.  */\n \n #define ENDFILE_SPEC \"crtfini.o%s\"\n \f\n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-\n-extern int target_flags;\n-\n-/* Mangle all user symbols for the specified cpu.\n-   ARC's can be shipped in which a collection of cpus are coupled together.\n-   Each CPU may be different in some way, and thus we may need to distinguish\n-   code compiled for one to ensure it isn't linked with code compiled for\n-   another.  */\n-#define TARGET_MASK_MANGLE_CPU 1\n-#define TARGET_MANGLE_CPU (target_flags & TARGET_MASK_MANGLE_CPU)\n-\n-#if 0\n-/* Mangle libgcc symbols by adding a suffix for the specified cpu.  */\n-#define TARGET_MASK_MANGLE_CPU_LIBGCC 2\n-#define TARGET_MANGLE_CPU_LIBGCC (target_flags & TARGET_MASK_MANGLE_CPU_LIBGCC)\n-#endif\n-\n-/* Align loops to 32 byte boundaries (cache line size).  */\n-#define TARGET_MASK_ALIGN_LOOPS 4\n-#define TARGET_ALIGN_LOOPS (target_flags & TARGET_MASK_ALIGN_LOOPS)\n-\n-/* Big Endian.  */\n-#define TARGET_MASK_BIG_ENDIAN 8\n-#define TARGET_BIG_ENDIAN (target_flags & TARGET_MASK_BIG_ENDIAN)\n-\n-/* Turn off conditional execution optimization,\n-   so we can see how well it does, or in case it's buggy.  */\n-#define TARGET_MASK_NO_COND_EXEC 0x10\n-#define TARGET_NO_COND_EXEC (target_flags & TARGET_MASK_NO_COND_EXEC)\n-\n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-#define TARGET_SWITCHES \\\n-{ \\\n-    { \"mangle-cpu\",\t\tTARGET_MASK_MANGLE_CPU },\t\t\\\n-    { \"no-mangle-cpu\",\t\t-TARGET_MASK_MANGLE_CPU },\t\t\\\n-/*  { \"mangle-cpu-libgcc\",\tTARGET_MASK_MANGLE_CPU_LIBGCC }, */\t\\\n-/*  { \"no-mangle-cpu-libgcc\",\t-TARGET_MASK_MANGLE_CPU_LIBGCC }, */\t\\\n-    { \"align-loops\",\t\tTARGET_MASK_ALIGN_LOOPS },\t\t\\\n-    { \"no-align-loops\",\t\t-TARGET_MASK_ALIGN_LOOPS },\t\t\\\n-    { \"big-endian\",\t\tTARGET_MASK_BIG_ENDIAN },\t\t\\\n-    { \"little-endian\",\t\t-TARGET_MASK_BIG_ENDIAN },\t\t\\\n-    { \"no-cond-exec\",\t\tTARGET_MASK_NO_COND_EXEC },\t\t\\\n-    SUBTARGET_SWITCHES\t\t\t\t\t\t\t\\\n-    { \"\", TARGET_DEFAULT }\t\t\t\t\t\t\\\n-}\n-\n-#define TARGET_DEFAULT (0)\n-\n-#define SUBTARGET_SWITCHES\n-\n /* Instruction set characteristics.\n    These are internal macros, set by the appropriate -mcpu= option.  */\n \n /* Nonzero means the cpu has a barrel shifter.  */\n #define TARGET_SHIFTER 0\n \n-extern const char *arc_cpu_string;\n-extern const char *arc_text_string,*arc_data_string,*arc_rodata_string;\n-\n-#define TARGET_OPTIONS \\\n-{\t\t\t\t\t\\\n-  { \"cpu=\",\t&arc_cpu_string, 0},\t\\\n-  { \"text=\",\t&arc_text_string, 0},\t\\\n-  { \"data=\",\t&arc_data_string, 0},\t\\\n-  { \"rodata=\",\t&arc_rodata_string, 0},\t\\\n-}\n-\n /* Which cpu we're compiling for.  */\n extern int arc_cpu_type;\n "}, {"sha": "3b14746a63408c810408de251659cd9058e86a09", "filename": "gcc/config/arc/arc.opt", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ff01d4d50e41aa121a583fd69d42626045127af/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ff01d4d50e41aa121a583fd69d42626045127af/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=3ff01d4d50e41aa121a583fd69d42626045127af", "patch": "@@ -0,0 +1,34 @@\n+malign-loops\n+Target Undocumented Report Mask(ALIGN_LOOPS)\n+\n+mbig-endian\n+Target Undocumented Report RejectNegative Mask(BIG_ENDIAN)\n+\n+mlittle-endian\n+Target Undocumented Report RejectNegative InverseMask(BIG_ENDIAN)\n+\n+mmangle-cpu\n+Target Report Mask(MANGLE_CPU)\n+Prepend the name of the cpu to all public symbol names\n+\n+; mmangle-cpu-libgcc\n+; Target Undocumented Mask(MANGLE_CPU_LIBGC)\n+\n+mno-cond-exec\n+Target Undocumented Report RejectNegative Mask(NO_COND_EXEC)\n+\n+mcpu=\n+Target RejectNegative Joined\n+-mcpu=CPU\tCompile code for ARC variant CPU\n+\n+mtext=\n+Target RejectNegative Joined\n+-mtext=SECTION\tPut functions in SECTION\n+\n+mdata=\n+Target RejectNegative Joined\n+-mdata=SECTION\tPut data in SECTION\n+\n+mrodata=\n+Target RejectNegative Joined\n+-mrodata=SECTION\tPut read-only data in SECTION"}]}