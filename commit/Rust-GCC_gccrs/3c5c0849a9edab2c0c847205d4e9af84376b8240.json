{"sha": "3c5c0849a9edab2c0c847205d4e9af84376b8240", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1YzA4NDlhOWVkYWIyYzBjODQ3MjA1ZDRlOWFmODQzNzZiODI0MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-08-30T15:50:40Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-30T15:50:40Z"}, "message": "cp-tree.h (start_handler_parms): New function.\n\n\t* cp-tree.h (start_handler_parms): New function.\n\t(expand_start_catch_block): Take only one parameter.\n\t(start_handler_parms): New function.\n\t* decl.c (start_handler_parms): Define it.\n\t* except.c (process_start_catch_block): Take only one parameter.\n\tDon't call grokdeclarator here.\n\t(expand_start_catch_block): Don't call grokdeclarator here,\n\teither.\n\t* parse.y (handler_args): Adjust call to\n\texpand_start_catch_block.  Use start_handler_parms.\n\t* pt.c (push_template_decl_real): Make permanent lists have\n\tpermanent elements.\n\t(tsubst_expr): Adjust calls to expand_start_catch_block\n\tappropriately.\n\t* semantics.c (expand_stmt): Likewise.\n\nFrom-SVN: r28983", "tree": {"sha": "5b846d04a97fe82f68c5d979bea9b865ea583bb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b846d04a97fe82f68c5d979bea9b865ea583bb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5c0849a9edab2c0c847205d4e9af84376b8240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5c0849a9edab2c0c847205d4e9af84376b8240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5c0849a9edab2c0c847205d4e9af84376b8240", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5c0849a9edab2c0c847205d4e9af84376b8240/comments", "author": null, "committer": null, "parents": [{"sha": "7d53d8239f0be395acacbdfb156a3752195512a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d53d8239f0be395acacbdfb156a3752195512a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d53d8239f0be395acacbdfb156a3752195512a3"}], "stats": {"total": 336, "additions": 189, "deletions": 147}, "files": [{"sha": "4194bacefcbd5369ab11f573eadc07e4988b87be", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c5c0849a9edab2c0c847205d4e9af84376b8240", "patch": "@@ -1,3 +1,21 @@\n+1999-08-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (start_handler_parms): New function.\n+\t(expand_start_catch_block): Take only one parameter.\n+\t(start_handler_parms): New function.\n+\t* decl.c (start_handler_parms): Define it.\n+\t* except.c (process_start_catch_block): Take only one parameter.\n+\tDon't call grokdeclarator here.\n+\t(expand_start_catch_block): Don't call grokdeclarator here,\n+\teither.\n+\t* parse.y (handler_args): Adjust call to\n+\texpand_start_catch_block.  Use start_handler_parms.\n+\t* pt.c (push_template_decl_real): Make permanent lists have\n+\tpermanent elements.\n+\t(tsubst_expr): Adjust calls to expand_start_catch_block\n+\tappropriately.\n+\t* semantics.c (expand_stmt): Likewise.\n+\t\n 1999-08-29  Alex Samuel  <samuel@codesourcery.com>\n \n \t* pt.c (push_template_decl_real): Use template declaration from"}, {"sha": "ac5ecdca9efbf215f4044d0b3c0def49830e63be", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3c5c0849a9edab2c0c847205d4e9af84376b8240", "patch": "@@ -2932,6 +2932,7 @@ extern void finish_decl\t\t\t\tPROTO((tree, tree, tree));\n extern void maybe_inject_for_scope_var          PROTO((tree));\n extern void initialize_local_var                PROTO((tree, tree, int));\n extern void expand_static_init\t\t\tPROTO((tree, tree));\n+extern void start_handler_parms                 PROTO((tree, tree));\n extern int complete_array_type\t\t\tPROTO((tree, tree, int));\n extern tree build_ptrmemfunc_type\t\tPROTO((tree));\n /* the grokdeclarator prototype is in decl.h */\n@@ -3080,7 +3081,7 @@ extern int cp_line_of\t\t\t\tPROTO((tree));\n \n /* in except.c */\n extern void init_exception_processing\t\tPROTO((void));\n-extern void expand_start_catch_block\t\tPROTO((tree, tree));\n+extern void expand_start_catch_block\t\tPROTO((tree));\n extern void expand_end_catch_block\t\tPROTO((void));\n extern void expand_builtin_throw\t\tPROTO((void));\n extern void expand_start_eh_spec\t\tPROTO((void));\n@@ -3349,6 +3350,7 @@ extern tree begin_function_try_block            PROTO((void));\n extern void finish_function_try_block           PROTO((tree));\n extern void finish_function_handler_sequence    PROTO((tree));\n extern tree begin_handler                       PROTO((void));\n+extern void start_handler_parms                 PROTO((tree, tree));\n extern void finish_handler_parms                PROTO((tree));\n extern void finish_handler                      PROTO((tree));\n extern void finish_cleanup                      PROTO((tree, tree));"}, {"sha": "024bd52212159302f8ccf2dfb03c04d628fb22e9", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3c5c0849a9edab2c0c847205d4e9af84376b8240", "patch": "@@ -8317,6 +8317,27 @@ expand_static_init (decl, init)\n       static_aggregates = perm_tree_cons (init, decl, static_aggregates);\n     }\n }\n+\n+/* Finish the declaration of a catch-parameter.  */\n+\n+void\n+start_handler_parms (declspecs, declarator)\n+     tree declspecs;\n+     tree declarator;\n+{\n+  tree decl;\n+  if (declspecs)\n+    {\n+      decl = grokdeclarator (declarator, declspecs, CATCHPARM,\n+\t\t\t     1, NULL_TREE);\n+      if (decl == NULL_TREE)\n+\terror (\"invalid catch parameter\");\n+    }\n+  else\n+    decl = NULL_TREE;\n+  expand_start_catch_block (decl);\n+}\n+\n \f\n /* Make TYPE a complete type based on INITIAL_VALUE.\n    Return 0 if successful, 1 if INITIAL_VALUE can't be deciphered,"}, {"sha": "f4615ad077ba263e0bbe818bb1502a63d815cb30", "filename": "gcc/cp/except.c", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=3c5c0849a9edab2c0c847205d4e9af84376b8240", "patch": "@@ -51,7 +51,7 @@ static tree get_eh_caught PROTO((void));\n static tree get_eh_handlers PROTO((void));\n #endif\n static tree do_pop_exception PROTO((void));\n-static void process_start_catch_block PROTO((tree, tree));\n+static void process_start_catch_block PROTO((tree));\n static tree build_eh_type_type_ref PROTO((tree));\n static tree build_terminate_handler PROTO((void));\n static tree alloc_eh_object PROTO((tree));\n@@ -513,17 +513,17 @@ build_terminate_handler ()\n    (ie: it ends up as the \"else\" clause rather than an \"else if\" clause) */\n \n void\n-expand_start_catch_block (declspecs, declarator)\n-     tree declspecs, declarator;\n+expand_start_catch_block (decl)\n+     tree decl;\n {\n-  tree decl;\n-\n   if (building_stmt_tree ())\n     {\n-      if (declspecs)\n+      if (decl)\n \t{\n-\t  decl = grokdeclarator (declarator, declspecs, CATCHPARM,\n-\t\t\t\t 1, NULL_TREE);\n+ \t  /* We must ensure that DECL_CONTEXT is set up before we call\n+ \t     push_template_decl; that code depends on DECL_CONTEXT\n+ \t     being set correctly.  */\n+ \t  DECL_CONTEXT (decl) = current_function_decl;\n \t  if (processing_template_decl)\n \t    decl = push_template_decl (decl);\n \t  pushdecl (decl);\n@@ -535,7 +535,7 @@ expand_start_catch_block (declspecs, declarator)\n   if (! doing_eh (1))\n     return;\n \n-  process_start_catch_block (declspecs, declarator);\n+  process_start_catch_block (decl);\n }\n \n /* This function performs the expand_start_catch_block functionality for \n@@ -544,27 +544,18 @@ expand_start_catch_block (declspecs, declarator)\n    nothing additional. */\n \n static void \n-process_start_catch_block (declspecs, declarator)\n-     tree declspecs, declarator;\n+process_start_catch_block (decl)\n+     tree decl;\n {\n-  tree decl = NULL_TREE;\n   tree init;\n \n   /* Create a binding level for the eh_info and the exception object\n      cleanup.  */\n   pushlevel (0);\n   expand_start_bindings (0);\n \n-\n-  if (declspecs)\n-    {\n-      decl = grokdeclarator (declarator, declspecs, CATCHPARM, 1, NULL_TREE);\n-\n-      if (decl == NULL_TREE)\n-\terror (\"invalid catch parameter\");\n-      else if (!complete_ptr_ref_or_void_ptr_p (TREE_TYPE (decl), NULL_TREE))\n-        decl = NULL_TREE;\n-    }\n+  if (decl && !complete_ptr_ref_or_void_ptr_p (TREE_TYPE (decl), NULL_TREE))\n+    decl = NULL_TREE;\n \n   if (decl)\n     start_catch_handler (build_eh_type_type_ref (TREE_TYPE (decl)));\n@@ -701,7 +692,7 @@ expand_end_eh_spec (raises)\n   int count = 0;\n \n   expand_start_all_catch ();\n-  expand_start_catch_block (NULL_TREE, NULL_TREE);\n+  expand_start_catch_block (NULL_TREE);\n \n   /* Build up an array of type_infos.  */\n   for (; raises && TREE_VALUE (raises); raises = TREE_CHAIN (raises))"}, {"sha": "f70555f77de25051aac0d98b45202f1122e3faf9", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 107, "deletions": 105, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=3c5c0849a9edab2c0c847205d4e9af84376b8240", "patch": "@@ -720,17 +720,17 @@ static const short yyrline[] = { 0,\n   3267,  3268,  3271,  3271,  3274,  3274,  3277,  3277,  3279,  3281,\n   3283,  3285,  3291,  3297,  3300,  3303,  3309,  3311,  3313,  3317,\n   3319,  3320,  3321,  3323,  3326,  3329,  3332,  3338,  3342,  3344,\n-  3347,  3349,  3352,  3356,  3358,  3361,  3363,  3366,  3383,  3389,\n-  3392,  3394,  3396,  3400,  3403,  3404,  3412,  3416,  3420,  3423,\n-  3424,  3430,  3433,  3436,  3438,  3442,  3447,  3450,  3460,  3465,\n-  3466,  3473,  3476,  3479,  3481,  3484,  3486,  3496,  3510,  3514,\n-  3517,  3519,  3523,  3527,  3530,  3533,  3535,  3539,  3541,  3548,\n-  3555,  3558,  3562,  3566,  3570,  3576,  3580,  3585,  3587,  3590,\n-  3595,  3601,  3612,  3615,  3617,  3621,  3629,  3632,  3636,  3639,\n-  3641,  3643,  3649,  3654,  3657,  3659,  3661,  3663,  3665,  3667,\n-  3669,  3671,  3673,  3675,  3677,  3679,  3681,  3683,  3685,  3687,\n-  3689,  3691,  3693,  3695,  3697,  3699,  3701,  3703,  3705,  3707,\n-  3709,  3711,  3713,  3715,  3717,  3719,  3722,  3724\n+  3347,  3349,  3352,  3356,  3358,  3361,  3363,  3366,  3383,  3391,\n+  3394,  3396,  3398,  3402,  3405,  3406,  3414,  3418,  3422,  3425,\n+  3426,  3432,  3435,  3438,  3440,  3444,  3449,  3452,  3462,  3467,\n+  3468,  3475,  3478,  3481,  3483,  3486,  3488,  3498,  3512,  3516,\n+  3519,  3521,  3525,  3529,  3532,  3535,  3537,  3541,  3543,  3550,\n+  3557,  3560,  3564,  3568,  3572,  3578,  3582,  3587,  3589,  3592,\n+  3597,  3603,  3614,  3617,  3619,  3623,  3631,  3634,  3638,  3641,\n+  3643,  3645,  3651,  3656,  3659,  3661,  3663,  3665,  3667,  3669,\n+  3671,  3673,  3675,  3677,  3679,  3681,  3683,  3685,  3687,  3689,\n+  3691,  3693,  3695,  3697,  3699,  3701,  3703,  3705,  3707,  3709,\n+  3711,  3713,  3715,  3717,  3719,  3721,  3724,  3726\n };\n #endif\n \n@@ -7742,111 +7742,113 @@ case 775:\n     break;}\n case 778:\n #line 3368 \"parse.y\"\n-{ expand_start_catch_block (NULL_TREE, NULL_TREE); ;\n+{ expand_start_catch_block (NULL_TREE); ;\n     break;}\n case 779:\n #line 3384 \"parse.y\"\n-{ check_for_new_type (\"inside exception declarations\", yyvsp[-1].ftype);\n-\t\t  expand_start_catch_block (TREE_PURPOSE (yyvsp[-1].ftype.t),\n-\t\t\t\t\t    TREE_VALUE (yyvsp[-1].ftype.t)); ;\n+{ \n+\t\t  check_for_new_type (\"inside exception declarations\", yyvsp[-1].ftype);\n+\t\t  start_handler_parms (TREE_PURPOSE (yyvsp[-1].ftype.t),\n+\t\t\t\t       TREE_VALUE (yyvsp[-1].ftype.t));\n+\t\t;\n     break;}\n case 780:\n-#line 3391 \"parse.y\"\n+#line 3393 \"parse.y\"\n { finish_label_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 781:\n-#line 3393 \"parse.y\"\n+#line 3395 \"parse.y\"\n { finish_label_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 782:\n-#line 3395 \"parse.y\"\n+#line 3397 \"parse.y\"\n { finish_label_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 783:\n-#line 3397 \"parse.y\"\n+#line 3399 \"parse.y\"\n { finish_label_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 784:\n-#line 3402 \"parse.y\"\n+#line 3404 \"parse.y\"\n { finish_expr_stmt (yyvsp[-1].ttype); ;\n     break;}\n case 786:\n-#line 3405 \"parse.y\"\n+#line 3407 \"parse.y\"\n { if (pedantic)\n \t\t    pedwarn (\"ANSI C++ forbids compound statements inside for initializations\");\n \t\t;\n     break;}\n case 787:\n-#line 3414 \"parse.y\"\n+#line 3416 \"parse.y\"\n { emit_line_note (input_filename, lineno);\n \t\t  yyval.ttype = NULL_TREE; ;\n     break;}\n case 788:\n-#line 3417 \"parse.y\"\n+#line 3419 \"parse.y\"\n { emit_line_note (input_filename, lineno); ;\n     break;}\n case 789:\n-#line 3422 \"parse.y\"\n+#line 3424 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 791:\n-#line 3425 \"parse.y\"\n+#line 3427 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 792:\n-#line 3432 \"parse.y\"\n+#line 3434 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 795:\n-#line 3439 \"parse.y\"\n+#line 3441 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;\n     break;}\n case 796:\n-#line 3444 \"parse.y\"\n+#line 3446 \"parse.y\"\n { yyval.ttype = build_tree_list (yyval.ttype, yyvsp[-1].ttype); ;\n     break;}\n case 797:\n-#line 3449 \"parse.y\"\n+#line 3451 \"parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyval.ttype, NULL_TREE); ;\n     break;}\n case 798:\n-#line 3451 \"parse.y\"\n+#line 3453 \"parse.y\"\n { yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;\n     break;}\n case 799:\n-#line 3462 \"parse.y\"\n+#line 3464 \"parse.y\"\n {\n \t\t  yyval.ttype = empty_parms();\n \t\t;\n     break;}\n case 801:\n-#line 3467 \"parse.y\"\n+#line 3469 \"parse.y\"\n { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE, yyvsp[0].ftype.t), 0);\n \t\t  check_for_new_type (\"inside parameter list\", yyvsp[0].ftype); ;\n     break;}\n case 802:\n-#line 3475 \"parse.y\"\n+#line 3477 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyval.ttype, 0); ;\n     break;}\n case 803:\n-#line 3477 \"parse.y\"\n+#line 3479 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;\n     break;}\n case 804:\n-#line 3480 \"parse.y\"\n+#line 3482 \"parse.y\"\n { yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;\n     break;}\n case 805:\n-#line 3482 \"parse.y\"\n+#line 3484 \"parse.y\"\n { yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE,\n \t\t\t\t\t\t\t yyvsp[-1].ftype.t), 1); ;\n     break;}\n case 806:\n-#line 3485 \"parse.y\"\n+#line 3487 \"parse.y\"\n { yyval.ttype = finish_parmlist (NULL_TREE, 1); ;\n     break;}\n case 807:\n-#line 3487 \"parse.y\"\n+#line 3489 \"parse.y\"\n {\n \t\t  /* This helps us recover from really nasty\n \t\t     parse errors, for example, a missing right\n@@ -7858,7 +7860,7 @@ case 807:\n \t\t;\n     break;}\n case 808:\n-#line 3497 \"parse.y\"\n+#line 3499 \"parse.y\"\n {\n \t\t  /* This helps us recover from really nasty\n \t\t     parse errors, for example, a missing right\n@@ -7871,99 +7873,99 @@ case 808:\n \t\t;\n     break;}\n case 809:\n-#line 3512 \"parse.y\"\n+#line 3514 \"parse.y\"\n { maybe_snarf_defarg (); ;\n     break;}\n case 810:\n-#line 3514 \"parse.y\"\n+#line 3516 \"parse.y\"\n { yyval.ttype = yyvsp[0].ttype; ;\n     break;}\n case 813:\n-#line 3525 \"parse.y\"\n+#line 3527 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[0].ftype);\n \t\t  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ftype.t); ;\n     break;}\n case 814:\n-#line 3528 \"parse.y\"\n+#line 3530 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t); ;\n     break;}\n case 815:\n-#line 3531 \"parse.y\"\n+#line 3533 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[0].ftype);\n \t\t  yyval.ttype = chainon (yyval.ttype, yyvsp[0].ftype.t); ;\n     break;}\n case 816:\n-#line 3534 \"parse.y\"\n+#line 3536 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;\n     break;}\n case 817:\n-#line 3536 \"parse.y\"\n+#line 3538 \"parse.y\"\n { yyval.ttype = chainon (yyval.ttype, build_tree_list (yyvsp[0].ttype, yyvsp[-2].ttype)); ;\n     break;}\n case 819:\n-#line 3542 \"parse.y\"\n+#line 3544 \"parse.y\"\n { check_for_new_type (\"in a parameter list\", yyvsp[-1].ftype);\n \t\t  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[-1].ftype.t); ;\n     break;}\n case 820:\n-#line 3552 \"parse.y\"\n+#line 3554 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); ;\n     break;}\n case 821:\n-#line 3556 \"parse.y\"\n+#line 3558 \"parse.y\"\n { yyval.ftype.t = build_tree_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 822:\n-#line 3559 \"parse.y\"\n+#line 3561 \"parse.y\"\n { yyval.ftype.t = build_tree_list (build_decl_list (NULL_TREE, yyvsp[-1].ftype.t),\n \t\t\t\t\t  yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 823:\n-#line 3563 \"parse.y\"\n+#line 3565 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;\n     break;}\n case 824:\n-#line 3567 \"parse.y\"\n+#line 3569 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[0].ftype.t);\n \t\t  yyval.ftype.t = build_tree_list (specs, NULL_TREE); \n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;\n     break;}\n case 825:\n-#line 3571 \"parse.y\"\n+#line 3573 \"parse.y\"\n { tree specs = strip_attrs (yyvsp[-1].ttype);\n \t\t  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); \n \t\t  yyval.ftype.new_type_flag = 0; ;\n     break;}\n case 826:\n-#line 3578 \"parse.y\"\n+#line 3580 \"parse.y\"\n { yyval.ftype.t = build_tree_list (NULL_TREE, yyvsp[0].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag;  ;\n     break;}\n case 827:\n-#line 3581 \"parse.y\"\n+#line 3583 \"parse.y\"\n { yyval.ftype.t = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t);\n \t\t  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;  ;\n     break;}\n case 830:\n-#line 3592 \"parse.y\"\n+#line 3594 \"parse.y\"\n { see_typename (); ;\n     break;}\n case 831:\n-#line 3597 \"parse.y\"\n+#line 3599 \"parse.y\"\n {\n \t\t  error (\"type specifier omitted for parameter\");\n \t\t  yyval.ttype = build_tree_list (integer_type_node, NULL_TREE);\n \t\t;\n     break;}\n case 832:\n-#line 3602 \"parse.y\"\n+#line 3604 \"parse.y\"\n {\n \t\t  error (\"type specifier omitted for parameter\");\n \t\t  if (TREE_CODE (yyval.ttype) == SCOPE_REF\n@@ -7974,192 +7976,192 @@ case 832:\n \t\t;\n     break;}\n case 833:\n-#line 3614 \"parse.y\"\n+#line 3616 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 834:\n-#line 3616 \"parse.y\"\n+#line 3618 \"parse.y\"\n { yyval.ttype = yyvsp[-1].ttype; ;\n     break;}\n case 835:\n-#line 3618 \"parse.y\"\n+#line 3620 \"parse.y\"\n { yyval.ttype = empty_except_spec; ;\n     break;}\n case 836:\n-#line 3623 \"parse.y\"\n+#line 3625 \"parse.y\"\n {\n \t\t  check_for_new_type (\"exception specifier\", yyvsp[0].ftype);\n \t\t  yyval.ttype = groktypename (yyvsp[0].ftype.t);\n \t\t;\n     break;}\n case 837:\n-#line 3631 \"parse.y\"\n+#line 3633 \"parse.y\"\n { yyval.ttype = add_exception_specifier (NULL_TREE, yyvsp[0].ttype, 1); ;\n     break;}\n case 838:\n-#line 3633 \"parse.y\"\n+#line 3635 \"parse.y\"\n { yyval.ttype = add_exception_specifier (yyvsp[-2].ttype, yyvsp[0].ttype, 1); ;\n     break;}\n case 839:\n-#line 3638 \"parse.y\"\n+#line 3640 \"parse.y\"\n { yyval.ttype = NULL_TREE; ;\n     break;}\n case 840:\n-#line 3640 \"parse.y\"\n+#line 3642 \"parse.y\"\n { yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 841:\n-#line 3642 \"parse.y\"\n+#line 3644 \"parse.y\"\n { yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;\n     break;}\n case 842:\n-#line 3644 \"parse.y\"\n+#line 3646 \"parse.y\"\n { tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);\n \t\t  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);\n \t\t;\n     break;}\n case 843:\n-#line 3651 \"parse.y\"\n+#line 3653 \"parse.y\"\n { got_scope = NULL_TREE; ;\n     break;}\n case 844:\n-#line 3656 \"parse.y\"\n+#line 3658 \"parse.y\"\n { yyval.ttype = ansi_opname[MULT_EXPR]; ;\n     break;}\n case 845:\n-#line 3658 \"parse.y\"\n+#line 3660 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUNC_DIV_EXPR]; ;\n     break;}\n case 846:\n-#line 3660 \"parse.y\"\n+#line 3662 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUNC_MOD_EXPR]; ;\n     break;}\n case 847:\n-#line 3662 \"parse.y\"\n+#line 3664 \"parse.y\"\n { yyval.ttype = ansi_opname[PLUS_EXPR]; ;\n     break;}\n case 848:\n-#line 3664 \"parse.y\"\n+#line 3666 \"parse.y\"\n { yyval.ttype = ansi_opname[MINUS_EXPR]; ;\n     break;}\n case 849:\n-#line 3666 \"parse.y\"\n+#line 3668 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_AND_EXPR]; ;\n     break;}\n case 850:\n-#line 3668 \"parse.y\"\n+#line 3670 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_IOR_EXPR]; ;\n     break;}\n case 851:\n-#line 3670 \"parse.y\"\n+#line 3672 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_XOR_EXPR]; ;\n     break;}\n case 852:\n-#line 3672 \"parse.y\"\n+#line 3674 \"parse.y\"\n { yyval.ttype = ansi_opname[BIT_NOT_EXPR]; ;\n     break;}\n case 853:\n-#line 3674 \"parse.y\"\n+#line 3676 \"parse.y\"\n { yyval.ttype = ansi_opname[COMPOUND_EXPR]; ;\n     break;}\n case 854:\n-#line 3676 \"parse.y\"\n+#line 3678 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 855:\n-#line 3678 \"parse.y\"\n+#line 3680 \"parse.y\"\n { yyval.ttype = ansi_opname[LT_EXPR]; ;\n     break;}\n case 856:\n-#line 3680 \"parse.y\"\n+#line 3682 \"parse.y\"\n { yyval.ttype = ansi_opname[GT_EXPR]; ;\n     break;}\n case 857:\n-#line 3682 \"parse.y\"\n+#line 3684 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 858:\n-#line 3684 \"parse.y\"\n+#line 3686 \"parse.y\"\n { yyval.ttype = ansi_assopname[yyvsp[0].code]; ;\n     break;}\n case 859:\n-#line 3686 \"parse.y\"\n+#line 3688 \"parse.y\"\n { yyval.ttype = ansi_opname [MODIFY_EXPR]; ;\n     break;}\n case 860:\n-#line 3688 \"parse.y\"\n+#line 3690 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 861:\n-#line 3690 \"parse.y\"\n+#line 3692 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 862:\n-#line 3692 \"parse.y\"\n+#line 3694 \"parse.y\"\n { yyval.ttype = ansi_opname[POSTINCREMENT_EXPR]; ;\n     break;}\n case 863:\n-#line 3694 \"parse.y\"\n+#line 3696 \"parse.y\"\n { yyval.ttype = ansi_opname[PREDECREMENT_EXPR]; ;\n     break;}\n case 864:\n-#line 3696 \"parse.y\"\n+#line 3698 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_ANDIF_EXPR]; ;\n     break;}\n case 865:\n-#line 3698 \"parse.y\"\n+#line 3700 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_ORIF_EXPR]; ;\n     break;}\n case 866:\n-#line 3700 \"parse.y\"\n+#line 3702 \"parse.y\"\n { yyval.ttype = ansi_opname[TRUTH_NOT_EXPR]; ;\n     break;}\n case 867:\n-#line 3702 \"parse.y\"\n+#line 3704 \"parse.y\"\n { yyval.ttype = ansi_opname[COND_EXPR]; ;\n     break;}\n case 868:\n-#line 3704 \"parse.y\"\n+#line 3706 \"parse.y\"\n { yyval.ttype = ansi_opname[yyvsp[0].code]; ;\n     break;}\n case 869:\n-#line 3706 \"parse.y\"\n+#line 3708 \"parse.y\"\n { yyval.ttype = ansi_opname[COMPONENT_REF]; ;\n     break;}\n case 870:\n-#line 3708 \"parse.y\"\n+#line 3710 \"parse.y\"\n { yyval.ttype = ansi_opname[MEMBER_REF]; ;\n     break;}\n case 871:\n-#line 3710 \"parse.y\"\n+#line 3712 \"parse.y\"\n { yyval.ttype = ansi_opname[CALL_EXPR]; ;\n     break;}\n case 872:\n-#line 3712 \"parse.y\"\n+#line 3714 \"parse.y\"\n { yyval.ttype = ansi_opname[ARRAY_REF]; ;\n     break;}\n case 873:\n-#line 3714 \"parse.y\"\n+#line 3716 \"parse.y\"\n { yyval.ttype = ansi_opname[NEW_EXPR]; ;\n     break;}\n case 874:\n-#line 3716 \"parse.y\"\n+#line 3718 \"parse.y\"\n { yyval.ttype = ansi_opname[DELETE_EXPR]; ;\n     break;}\n case 875:\n-#line 3718 \"parse.y\"\n+#line 3720 \"parse.y\"\n { yyval.ttype = ansi_opname[VEC_NEW_EXPR]; ;\n     break;}\n case 876:\n-#line 3720 \"parse.y\"\n+#line 3722 \"parse.y\"\n { yyval.ttype = ansi_opname[VEC_DELETE_EXPR]; ;\n     break;}\n case 877:\n-#line 3723 \"parse.y\"\n+#line 3725 \"parse.y\"\n { yyval.ttype = grokoptypename (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;\n     break;}\n case 878:\n-#line 3725 \"parse.y\"\n+#line 3727 \"parse.y\"\n { yyval.ttype = ansi_opname[ERROR_MARK]; ;\n     break;}\n }\n@@ -8384,7 +8386,7 @@ case 878:\n     }\n   return 1;\n }\n-#line 3728 \"parse.y\"\n+#line 3730 \"parse.y\"\n \n \n #ifdef SPEW_DEBUG"}, {"sha": "ef96a0b51061910d59efce638d3bd5bbdf22a6ca", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=3c5c0849a9edab2c0c847205d4e9af84376b8240", "patch": "@@ -3365,7 +3365,7 @@ type_specifier_seq:\n \n handler_args:\n \t  '(' ELLIPSIS ')'\n-\t\t{ expand_start_catch_block (NULL_TREE, NULL_TREE); }\n+\t\t{ expand_start_catch_block (NULL_TREE); }\n \t/* This doesn't allow reference parameters, the below does.\n \t| '(' type_specifier_seq absdcl ')'\n \t\t{ check_for_new_type (\"inside exception declarations\", $2);\n@@ -3381,9 +3381,11 @@ handler_args:\n \t\t  expand_start_catch_block ($2.t, $3); }\n \tThis allows reference parameters...  */\n \t| '(' parm ')'\n-\t\t{ check_for_new_type (\"inside exception declarations\", $2);\n-\t\t  expand_start_catch_block (TREE_PURPOSE ($2.t),\n-\t\t\t\t\t    TREE_VALUE ($2.t)); }\n+\t\t{ \n+\t\t  check_for_new_type (\"inside exception declarations\", $2);\n+\t\t  start_handler_parms (TREE_PURPOSE ($2.t),\n+\t\t\t\t       TREE_VALUE ($2.t));\n+\t\t}\n \t;\n \n label_colon:"}, {"sha": "15d5fdfd0f85be3d21f723b0ca072f2761fc5b65", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3c5c0849a9edab2c0c847205d4e9af84376b8240", "patch": "@@ -2599,7 +2599,7 @@ push_template_decl_real (decl, is_friend)\n   if (primary)\n     DECL_PRIMARY_TEMPLATE (tmpl) = tmpl;\n \n-  info = perm_tree_cons (tmpl, args, NULL_TREE);\n+  info = perm_tree_cons (tmpl, copy_to_permanent (args), NULL_TREE);\n \n   if (DECL_IMPLICIT_TYPEDEF_P (decl))\n     {\n@@ -7465,14 +7465,11 @@ tsubst_expr (t, args, complain, in_decl)\n       lineno = STMT_LINENO (t);\n       stmt = begin_handler ();\n       if (HANDLER_PARMS (t))\n-\t{\n-\t  tree d = HANDLER_PARMS (t);\n-\t  expand_start_catch_block\n-\t    (tsubst (TREE_OPERAND (d, 1), args, complain, in_decl),\n-\t     tsubst (TREE_OPERAND (d, 0), args, complain, in_decl));\n-\t}\n+\texpand_start_catch_block\n+\t  (tsubst (DECL_STMT_DECL (HANDLER_PARMS (t)), \n+\t\t   args, complain, in_decl));\n       else\n-\texpand_start_catch_block (NULL_TREE, NULL_TREE);\n+\texpand_start_catch_block (NULL_TREE);\n       finish_handler_parms (stmt);\n       tsubst_expr (HANDLER_BODY (t), args, complain, in_decl);\n       finish_handler (stmt);"}, {"sha": "d8018c4898fafe62c59ac81951b090745dbbf984", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3c5c0849a9edab2c0c847205d4e9af84376b8240", "patch": "@@ -2182,13 +2182,9 @@ expand_stmt (t)\n       lineno = STMT_LINENO (t);\n       begin_handler ();\n       if (HANDLER_PARMS (t))\n-\t{\n-\t  tree d = HANDLER_PARMS (t);\n-\t  expand_start_catch_block (TREE_OPERAND (d, 1),\n-\t\t\t\t    TREE_OPERAND (d, 0));\n-\t}\n+\texpand_start_catch_block (DECL_STMT_DECL (HANDLER_PARMS (t)));\n       else\n-\texpand_start_catch_block (NULL_TREE, NULL_TREE);\n+\texpand_start_catch_block (NULL_TREE);\n       finish_handler_parms (NULL_TREE);\n       expand_stmt (HANDLER_BODY (t));\n       finish_handler (NULL_TREE);"}, {"sha": "4564633ee3dec7a80820fee1e638551ac373834e", "filename": "gcc/testsuite/g++.old-deja/g++.eh/tmpl5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5c0849a9edab2c0c847205d4e9af84376b8240/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Ftmpl5.C?ref=3c5c0849a9edab2c0c847205d4e9af84376b8240", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+template <class T = int>\n+struct S\n+{\n+  void f ()\n+    {\n+      try {\n+      } catch (int) {\n+      }\n+    }\n+};"}]}