{"sha": "3f6a1bb12de0649cff2b45b44b36b761afea96dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y2YTFiYjEyZGUwNjQ5Y2ZmMmI0NWI0NGIzNmI3NjFhZmVhOTZkZA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-10-24T14:49:47Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-10-24T14:49:47Z"}, "message": "re PR target/50820 ([avr] Use EIND consistently)\n\n\tPR target/50820\n\tPort from 4.6 branch r180379\n\t* doc/invoke.texi (AVR Options): New subsubsection to explain EIND\n\thandling and indirect jump/calls on devices > 128k.\n\nFrom-SVN: r180388", "tree": {"sha": "cdd3cab843ce2817087ada108b3eed0ec5e2b2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd3cab843ce2817087ada108b3eed0ec5e2b2b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f6a1bb12de0649cff2b45b44b36b761afea96dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f6a1bb12de0649cff2b45b44b36b761afea96dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f6a1bb12de0649cff2b45b44b36b761afea96dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f6a1bb12de0649cff2b45b44b36b761afea96dd/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d33d151c1d174f6d8e51894f6193e13bbe6984e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d33d151c1d174f6d8e51894f6193e13bbe6984e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d33d151c1d174f6d8e51894f6193e13bbe6984e"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "efe02f745d3381979920698bf70ab0b0564b634c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f6a1bb12de0649cff2b45b44b36b761afea96dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f6a1bb12de0649cff2b45b44b36b761afea96dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f6a1bb12de0649cff2b45b44b36b761afea96dd", "patch": "@@ -1,3 +1,10 @@\n+2011-10-24  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50820\n+\tPort from 4.6 branch r180379\n+\t* doc/invoke.texi (AVR Options): New subsubsection to explain EIND\n+\thandling and indirect jump/calls on devices > 128k.\n+\n 2011-10-24  Anatoly Sokolov  <aesok@post.ru>\n \t    Georg-Johann Lay  <avr@gjlay.de>\n "}, {"sha": "b297628bda5c6c5c042fcf03c8ae533ae3e8e12f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f6a1bb12de0649cff2b45b44b36b761afea96dd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f6a1bb12de0649cff2b45b44b36b761afea96dd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3f6a1bb12de0649cff2b45b44b36b761afea96dd", "patch": "@@ -10723,6 +10723,117 @@ sbiw r26, const\n @end example\n @end table\n \n+@subsubsection @code{EIND} and Devices with more than 128k Bytes of Flash\n+\n+Pointers in the implementation are 16 bits wide.\n+The address of a function or label is represented as word address so\n+that indirect jumps and calls can address any code address in the\n+range of 64k words.\n+\n+In order to faciliate indirect jump on devices with more than 128k\n+bytes of program memory space, there is a special function register called\n+@code{EIND} that serves as most significant part of the target address\n+when @code{EICALL} or @code{EIJMP} instructions are used.\n+\n+Indirect jumps and calls on these devices are handled as follows and\n+are subject to some limitations:\n+\n+@itemize @bullet\n+\n+@item\n+The compiler never sets @code{EIND}.\n+\n+@item\n+The startup code from libgcc never sets @code{EIND}.\n+Notice that startup code is a blend of code from libgcc and avr-libc.\n+For the impact of avr-libc on @code{EIND}, see the\n+@w{@uref{http://nongnu.org/avr-libc/user-manual,avr-libc user manual}}.\n+\n+@item\n+The compiler uses @code{EIND} implicitely in @code{EICALL}/@code{EIJMP}\n+instructions or might read @code{EIND} directly.\n+\n+@item\n+The compiler assumes that @code{EIND} never changes during the startup\n+code or run of the application. In particular, @code{EIND} is not\n+saved/restored in function or interrupt service routine\n+prologue/epilogue.\n+\n+@item\n+It is legitimate for user-specific startup code to set up @code{EIND}\n+early, for example by means of initialization code located in\n+section @code{.init3}, and thus prior to general startup code that\n+initializes RAM and calls constructors.\n+\n+@item\n+For indirect calls to functions and computed goto, the linker will\n+generate @emph{stubs}. Stubs are jump pads sometimes also called\n+@emph{trampolines}. Thus, the indirect call/jump will jump to such a stub.\n+The stub contains a direct jump to the desired address.\n+\n+@item\n+Stubs will be generated automatically by the linker if\n+the following two conditions are met:\n+@itemize @minus\n+\n+@item The address of a label is taken by means of the @code{gs} modifier\n+(short for @emph{generate stubs}) like so:\n+@example\n+LDI r24, lo8(gs(@var{func}))\n+LDI r25, hi8(gs(@var{func}))\n+@end example\n+@item The final location of that label is in a code segment\n+@emph{outside} the segment where the stubs are located.\n+@end itemize\n+\n+@item\n+The compiler will emit such @code{gs} modifiers for code labels in the\n+following situations:\n+@itemize @minus\n+@item Taking address of a function or code label.\n+@item Computed goto.\n+@item If prologue-save function is used, see @option{-mcall-prologues}\n+command line option.\n+@item Switch/case dispatch tables. If you do not want such dispatch\n+tables you can specify the @option{-fno-jump-tables} command line option.\n+@item C and C++ constructors/destructors called during startup/shutdown.\n+@item If the tools hit a @code{gs()} modifier explained above.\n+@end itemize\n+\n+@item\n+The default linker script is arranged for code with @code{EIND = 0}.\n+If code is supposed to work for a setup with @code{EIND != 0}, a custom\n+linker script has to be used in order to place the sections whose\n+name start with @code{.trampolines} into the segment where @code{EIND}\n+points to.\n+\n+@item\n+Jumping to non-symbolic addresses like so is @emph{not} supported:\n+\n+@example\n+int main (void)\n+@{\n+    /* Call function at word address 0x2 */\n+    return ((int(*)(void)) 0x2)();\n+@}\n+@end example\n+\n+Instead, a stub has to be set up:\n+\n+@example\n+int main (void)\n+@{\n+    extern int func_4 (void);\n+\n+    /* Call function at byte address 0x4 */\n+    return func_4();\n+@}\n+@end example\n+\n+and the application be linked with @code{-Wl,--defsym,func_4=0x4}.\n+Alternatively, @code{func_4} can be defined in the linker script.\n+@end itemize\n+\n @node Blackfin Options\n @subsection Blackfin Options\n @cindex Blackfin Options"}]}