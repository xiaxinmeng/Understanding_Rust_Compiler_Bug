{"sha": "eba20412b43dbb36c57f4235e3a3fff2eb88ba9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJhMjA0MTJiNDNkYmIzNmM1N2Y0MjM1ZTNhM2ZmZjJlYjg4YmE5YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-16T14:18:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-16T14:18:50Z"}, "message": "Replace _Equal_helper with simpler class template\n\nBy defining the new helper inside _Hashtable_base it doesn't need all\nthe template parameters to be provided, and by making it only\nresponsible for checking a possibly-cached hash code it only has to do\none thing.  The caller can use the equality predicate itself instead of\nduplicating that in the helper template.\n\n\t* include/bits/hashtable_policy.h (_Equal_helper): Remove.\n\t(_Hashtable_base::_Equal_hash_code): Define new class template.\n\t(_Hashtable_base::_M_equals): Use _Equal_hash_code instead of\n\t_Equal_helper.\n\nFrom-SVN: r271291", "tree": {"sha": "f6aedff73a51e31b3499f8379ab4cc2d539c5ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6aedff73a51e31b3499f8379ab4cc2d539c5ab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eba20412b43dbb36c57f4235e3a3fff2eb88ba9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba20412b43dbb36c57f4235e3a3fff2eb88ba9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eba20412b43dbb36c57f4235e3a3fff2eb88ba9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba20412b43dbb36c57f4235e3a3fff2eb88ba9a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f6ea96860f448ba4cc5bf1e7570b6181611328b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6ea96860f448ba4cc5bf1e7570b6181611328b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6ea96860f448ba4cc5bf1e7570b6181611328b"}], "stats": {"total": 59, "additions": 23, "deletions": 36}, "files": [{"sha": "060d92a0a27a51aad7623ce61cbf7d5b04da6a97", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba20412b43dbb36c57f4235e3a3fff2eb88ba9a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba20412b43dbb36c57f4235e3a3fff2eb88ba9a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eba20412b43dbb36c57f4235e3a3fff2eb88ba9a", "patch": "@@ -1,5 +1,10 @@\n 2019-05-16  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/hashtable_policy.h (_Equal_helper): Remove.\n+\t(_Hashtable_base::_Equal_hash_code): Define new class template.\n+\t(_Hashtable_base::_M_equals): Use _Equal_hash_code instead of\n+\t_Equal_helper.\n+\n \t* include/bits/hashtable_policy.h (_Hashtable_ebo_helper::_S_get):\n \tReplace with _M_get non-static member function.\n \t(_Hashtable_ebo_helper::_S_cget): Replace with _M_cget non-static"}, {"sha": "86589e9a2d68da04332ee5957957dbfd020da82c", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 18, "deletions": 36, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eba20412b43dbb36c57f4235e3a3fff2eb88ba9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eba20412b43dbb36c57f4235e3a3fff2eb88ba9a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=eba20412b43dbb36c57f4235e3a3fff2eb88ba9a", "patch": "@@ -1403,38 +1403,6 @@ namespace __detail\n       _M_h2() const { return __ebo_h2::_M_cget(); }\n     };\n \n-  /**\n-   *  Primary class template _Equal_helper.\n-   *\n-   */\n-  template <typename _Key, typename _Value, typename _ExtractKey,\n-\t    typename _Equal, typename _HashCodeType,\n-\t    bool __cache_hash_code>\n-  struct _Equal_helper;\n-\n-  /// Specialization.\n-  template<typename _Key, typename _Value, typename _ExtractKey,\n-\t   typename _Equal, typename _HashCodeType>\n-  struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>\n-  {\n-    static bool\n-    _S_equals(const _Equal& __eq, const _ExtractKey& __extract,\n-\t      const _Key& __k, _HashCodeType __c, _Hash_node<_Value, true>* __n)\n-    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }\n-  };\n-\n-  /// Specialization.\n-  template<typename _Key, typename _Value, typename _ExtractKey,\n-\t   typename _Equal, typename _HashCodeType>\n-  struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, false>\n-  {\n-    static bool\n-    _S_equals(const _Equal& __eq, const _ExtractKey& __extract,\n-\t      const _Key& __k, _HashCodeType, _Hash_node<_Value, false>* __n)\n-    { return __eq(__k, __extract(__n->_M_v())); }\n-  };\n-\n-\n   /// Partial specialization used when nodes contain a cached hash code.\n   template<typename _Key, typename _Value, typename _ExtractKey,\n \t   typename _H1, typename _H2, typename _Hash>\n@@ -1788,8 +1756,22 @@ namespace __detail\n \t\t\t\t\t\t     iterator>::type;\n   private:\n     using _EqualEBO = _Hashtable_ebo_helper<0, _Equal>;\n-    using _EqualHelper =  _Equal_helper<_Key, _Value, _ExtractKey, _Equal,\n-\t\t\t\t\t__hash_code, __hash_cached::value>;\n+\n+    template<typename _NodeT>\n+      struct _Equal_hash_code\n+      {\n+       static bool\n+       _S_equals(__hash_code, const _NodeT&)\n+       { return true; }\n+      };\n+\n+    template<typename _Ptr2>\n+      struct _Equal_hash_code<_Hash_node<_Ptr2, true>>\n+      {\n+       static bool\n+       _S_equals(__hash_code __c, const _Hash_node<_Ptr2, true>& __n)\n+       { return __c == __n._M_hash_code; }\n+      };\n \n   protected:\n     _Hashtable_base() = default;\n@@ -1801,8 +1783,8 @@ namespace __detail\n     bool\n     _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const\n     {\n-      return _EqualHelper::_S_equals(_M_eq(), this->_M_extract(),\n-\t\t\t\t     __k, __c, __n);\n+      return _Equal_hash_code<__node_type>::_S_equals(__c, *__n)\n+\t&& _M_eq()(__k, this->_M_extract()(__n->_M_v()));\n     }\n \n     void"}]}