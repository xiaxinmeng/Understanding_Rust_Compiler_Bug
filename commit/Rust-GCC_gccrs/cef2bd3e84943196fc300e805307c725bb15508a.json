{"sha": "cef2bd3e84943196fc300e805307c725bb15508a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VmMmJkM2U4NDk0MzE5NmZjMzAwZTgwNTMwN2M3MjViYjE1NTA4YQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-06-01T15:43:59Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-06-01T15:43:59Z"}, "message": "sdbout.h: Use ISO C90 prototypes.\n\n\t* sdbout.h: Use ISO C90 prototypes.\n\n\t* sdbout.c (CONTIN): Removed empty macro.\n\t(sdbout_one_type): Remove CONTIN usages.\n\tRemove ^Ls.\n\t(tag_of_ru_type): Remove #if 0'ed function.\n\t(sdbout_symbol): Remove #if 0'ed code.\n\t(sdbout_one_type): Remove a #if 1.\n\t(sdbout_one_type): Remove #if 0'ed code.\n\t(sdbout_init): Remove RMS_QUICK_HACK_1 code.\n\tRemove PARAMS, use ISO C90 prototypes for all functions.\n\nFrom-SVN: r67294", "tree": {"sha": "030b3bb1f1cdc229d7dd0733be17c6937b3979dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/030b3bb1f1cdc229d7dd0733be17c6937b3979dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cef2bd3e84943196fc300e805307c725bb15508a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef2bd3e84943196fc300e805307c725bb15508a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef2bd3e84943196fc300e805307c725bb15508a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef2bd3e84943196fc300e805307c725bb15508a/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43194145177a029d4f0a1e958b4a9d1baeeaf0a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43194145177a029d4f0a1e958b4a9d1baeeaf0a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43194145177a029d4f0a1e958b4a9d1baeeaf0a0"}], "stats": {"total": 247, "additions": 92, "deletions": 155}, "files": [{"sha": "a100bbc359eb088040d561c30e2328c4f78be586", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef2bd3e84943196fc300e805307c725bb15508a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef2bd3e84943196fc300e805307c725bb15508a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cef2bd3e84943196fc300e805307c725bb15508a", "patch": "@@ -1,3 +1,17 @@\n+2003-06-01  Andreas Jaeger  <aj@suse.de>\n+\n+\t* sdbout.h: Use ISO C90 prototypes.\n+\n+\t* sdbout.c (CONTIN): Removed empty macro.\n+\t(sdbout_one_type): Remove CONTIN usages.\n+\tRemove ^Ls.\n+\t(tag_of_ru_type): Remove #if 0'ed function.\n+\t(sdbout_symbol): Remove #if 0'ed code.\n+\t(sdbout_one_type): Remove a #if 1.\n+\t(sdbout_one_type): Remove #if 0'ed code.\n+\t(sdbout_init): Remove RMS_QUICK_HACK_1 code.\n+\tRemove PARAMS, use ISO C90 prototypes for all functions.\n+\n 2003-06-01  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* rtl.def (CONST_DOUBLE): Update comment."}, {"sha": "0af958c79247895d7f5733bf59f5e82a504f44c3", "filename": "gcc/sdbout.c", "status": "modified", "additions": 75, "deletions": 152, "changes": 227, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef2bd3e84943196fc300e805307c725bb15508a/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef2bd3e84943196fc300e805307c725bb15508a/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=cef2bd3e84943196fc300e805307c725bb15508a", "patch": "@@ -1,6 +1,6 @@\n /* Output sdb-format symbol table information from GNU compiler.\n    Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -98,45 +98,42 @@ extern tree current_function_decl;\n \n #include \"sdbout.h\"\n \n-static void sdbout_init\t\t\tPARAMS ((const char *));\n-static void sdbout_finish\t\tPARAMS ((const char *));\n-static void sdbout_start_source_file\tPARAMS ((unsigned int, const char *));\n-static void sdbout_end_source_file\tPARAMS ((unsigned int));\n-static void sdbout_begin_block\t\tPARAMS ((unsigned int, unsigned int));\n-static void sdbout_end_block\t\tPARAMS ((unsigned int, unsigned int));\n-static void sdbout_source_line\t\tPARAMS ((unsigned int, const char *));\n-static void sdbout_end_epilogue\t\tPARAMS ((unsigned int, const char *));\n-static void sdbout_global_decl\t\tPARAMS ((tree));\n+static void sdbout_init\t\t\t(const char *);\n+static void sdbout_finish\t\t(const char *);\n+static void sdbout_start_source_file\t(unsigned int, const char *);\n+static void sdbout_end_source_file\t(unsigned int);\n+static void sdbout_begin_block\t\t(unsigned int, unsigned int);\n+static void sdbout_end_block\t\t(unsigned int, unsigned int);\n+static void sdbout_source_line\t\t(unsigned int, const char *);\n+static void sdbout_end_epilogue\t\t(unsigned int, const char *);\n+static void sdbout_global_decl\t\t(tree);\n #ifndef MIPS_DEBUGGING_INFO\n-static void sdbout_begin_prologue\tPARAMS ((unsigned int, const char *));\n+static void sdbout_begin_prologue\t(unsigned int, const char *);\n #endif\n-static void sdbout_end_prologue\t\tPARAMS ((unsigned int, const char *));\n-static void sdbout_begin_function\tPARAMS ((tree));\n-static void sdbout_end_function\t\tPARAMS ((unsigned int));\n-static void sdbout_toplevel_data\tPARAMS ((tree));\n-static void sdbout_label\t\tPARAMS ((rtx));\n-static char *gen_fake_label\t\tPARAMS ((void));\n-static int plain_type\t\t\tPARAMS ((tree));\n-static int template_name_p\t\tPARAMS ((tree));\n-static void sdbout_record_type_name\tPARAMS ((tree));\n-static int plain_type_1\t\t\tPARAMS ((tree, int));\n-static void sdbout_block\t\tPARAMS ((tree));\n-static void sdbout_syms\t\t\tPARAMS ((tree));\n+static void sdbout_end_prologue\t\t(unsigned int, const char *);\n+static void sdbout_begin_function\t(tree);\n+static void sdbout_end_function\t\t(unsigned int);\n+static void sdbout_toplevel_data\t(tree);\n+static void sdbout_label\t\t(rtx);\n+static char *gen_fake_label\t\t(void);\n+static int plain_type\t\t\t(tree);\n+static int template_name_p\t\t(tree);\n+static void sdbout_record_type_name\t(tree);\n+static int plain_type_1\t\t\t(tree, int);\n+static void sdbout_block\t\t(tree);\n+static void sdbout_syms\t\t\t(tree);\n #ifdef SDB_ALLOW_FORWARD_REFERENCES\n-static void sdbout_queue_anonymous_type\tPARAMS ((tree));\n-static void sdbout_dequeue_anonymous_types PARAMS ((void));\n+static void sdbout_queue_anonymous_type\t(tree);\n+static void sdbout_dequeue_anonymous_types (void);\n #endif\n-static void sdbout_type\t\t\tPARAMS ((tree));\n-static void sdbout_field_types\t\tPARAMS ((tree));\n-static void sdbout_one_type\t\tPARAMS ((tree));\n-static void sdbout_parms\t\tPARAMS ((tree));\n-static void sdbout_reg_parms\t\tPARAMS ((tree));\n-static void sdbout_global_decl\t\tPARAMS ((tree));\n-\f\n-/* Random macros describing parts of SDB data.  */\n+static void sdbout_type\t\t\t(tree);\n+static void sdbout_field_types\t\t(tree);\n+static void sdbout_one_type\t\t(tree);\n+static void sdbout_parms\t\t(tree);\n+static void sdbout_reg_parms\t\t(tree);\n+static void sdbout_global_decl\t\t(tree);\n \n-/* Put something here if lines get too long */\n-#define CONTIN\n+/* Random macros describing parts of SDB data.  */\n \n /* Default value of delimiter is \";\".  */\n #ifndef SDB_DELIM\n@@ -171,7 +168,7 @@ static void sdbout_global_decl\t\tPARAMS ((tree));\n #ifndef PUT_SDB_DEF\n #define PUT_SDB_DEF(a)\t\t\t\t\\\n do { fprintf (asm_out_file, \"\\t.def\\t\");\t\\\n-     assemble_name (asm_out_file, a); \t\\\n+     assemble_name (asm_out_file, a);\t\\\n      fprintf (asm_out_file, SDB_DELIM); } while (0)\n #endif\n \n@@ -301,7 +298,7 @@ struct sdb_file\n static struct sdb_file *current_file;\n \n #endif /* MIPS_DEBUGGING_INFO */\n-\f\n+\n /* The debug hooks structure.  */\n const struct gcc_debug_hooks sdb_debug_hooks =\n {\n@@ -334,30 +331,11 @@ const struct gcc_debug_hooks sdb_debug_hooks =\n   sdbout_label,\t\t\t/* label */\n   debug_nothing_int\t\t/* handle_pch */\n };\n-\f\n-#if 0\n-\n-/* return the tag identifier for type\n- */\n-\n-char *\n-tag_of_ru_type (type,link)\n-     tree type,link;\n-{\n-  if (TYPE_SYMTAB_ADDRESS (type))\n-    return TYPE_SYMTAB_ADDRESS (type);\n-  if (link && TREE_PURPOSE (link)\n-      && IDENTIFIER_POINTER (TREE_PURPOSE (link)))\n-    TYPE_SYMTAB_ADDRESS (type) = IDENTIFIER_POINTER (TREE_PURPOSE (link));\n-  else\n-    return (char *) TYPE_SYMTAB_ADDRESS (type);\n-}\n-#endif\n \n /* Return a unique string to name an anonymous type.  */\n \n static char *\n-gen_fake_label ()\n+gen_fake_label (void)\n {\n   char label[10];\n   char *labelstr;\n@@ -366,7 +344,7 @@ gen_fake_label ()\n   labelstr = xstrdup (label);\n   return labelstr;\n }\n-\f\n+\n /* Return the number which describes TYPE for SDB.\n    For pointers, etc., this function is recursive.\n    Each record, union or enumeral type must already have had a\n@@ -399,8 +377,7 @@ static int sdb_dims[SDB_MAX_DIM];\n static int sdb_type_size = -1;\n \n static int\n-plain_type (type)\n-     tree type;\n+plain_type (tree type)\n {\n   int val = plain_type_1 (type, 0);\n \n@@ -430,8 +407,7 @@ plain_type (type)\n }\n \n static int\n-template_name_p (name)\n-     tree name;\n+template_name_p (tree name)\n {\n   const char *ptr = IDENTIFIER_POINTER (name);\n   while (*ptr && *ptr != '<')\n@@ -441,8 +417,7 @@ template_name_p (name)\n }\n \n static void\n-sdbout_record_type_name (type)\n-     tree type;\n+sdbout_record_type_name (tree type)\n {\n   const char *name = 0;\n   int no_name;\n@@ -492,9 +467,7 @@ sdbout_record_type_name (type)\n    infinite loop.  */\n \n static int\n-plain_type_1 (type, level)\n-     tree type;\n-     int level;\n+plain_type_1 (tree type, int level)\n {\n   if (type == 0)\n     type = void_type_node;\n@@ -656,7 +629,7 @@ plain_type_1 (type, level)\n       return 0;\n     }\n }\n-\f\n+\n /* Output the symbols defined in block number DO_BLOCK.\n \n    This function works by walking the tree structure of blocks,\n@@ -665,8 +638,7 @@ plain_type_1 (type, level)\n static int do_block = 0;\n \n static void\n-sdbout_block (block)\n-     tree block;\n+sdbout_block (tree block)\n {\n   while (block)\n     {\n@@ -688,12 +660,11 @@ sdbout_block (block)\n       block = BLOCK_CHAIN (block);\n     }\n }\n-\f\n+\n /* Call sdbout_symbol on each decl in the chain SYMS.  */\n \n static void\n-sdbout_syms (syms)\n-     tree syms;\n+sdbout_syms (tree syms)\n {\n   while (syms)\n     {\n@@ -707,9 +678,7 @@ sdbout_syms (syms)\n    LOCAL is nonzero if the symbol is not file-scope.  */\n \n void\n-sdbout_symbol (decl, local)\n-     tree decl;\n-     int local;\n+sdbout_symbol (tree decl, int local)\n {\n   tree type = TREE_TYPE (decl);\n   tree context = NULL_TREE;\n@@ -719,12 +688,6 @@ sdbout_symbol (decl, local)\n \n   sdbout_one_type (type);\n \n-#if 0 /* This loses when functions are marked to be ignored,\n-\t which happens in the C++ front end.  */\n-  if (DECL_IGNORED_P (decl))\n-    return;\n-#endif\n-\n   switch (TREE_CODE (decl))\n     {\n     case CONST_DECL:\n@@ -939,13 +902,12 @@ sdbout_symbol (decl, local)\n   PUT_SDB_TYPE (plain_type (type));\n   PUT_SDB_ENDEF;\n }\n-\f\n+\n /* Output SDB information for a top-level initialized variable\n    that has been delayed.  */\n \n static void\n-sdbout_toplevel_data (decl)\n-     tree decl;\n+sdbout_toplevel_data (tree decl)\n {\n   tree type = TREE_TYPE (decl);\n \n@@ -970,20 +932,19 @@ sdbout_toplevel_data (decl)\n   PUT_SDB_TYPE (plain_type (type));\n   PUT_SDB_ENDEF;\n }\n-\f\n+\n #ifdef SDB_ALLOW_FORWARD_REFERENCES\n \n /* Machinery to record and output anonymous types.  */\n \n static void\n-sdbout_queue_anonymous_type (type)\n-     tree type;\n+sdbout_queue_anonymous_type (tree type)\n {\n   anonymous_types = tree_cons (NULL_TREE, type, anonymous_types);\n }\n \n static void\n-sdbout_dequeue_anonymous_types ()\n+sdbout_dequeue_anonymous_types (void)\n {\n   tree types, link;\n \n@@ -1003,13 +964,12 @@ sdbout_dequeue_anonymous_types ()\n }\n \n #endif\n-\f\n+\n /* Given a chain of ..._TYPE nodes, all of which have names,\n    output definitions of those names, as typedefs.  */\n \n void\n-sdbout_types (types)\n-     tree types;\n+sdbout_types (tree types)\n {\n   tree link;\n \n@@ -1022,8 +982,7 @@ sdbout_types (types)\n }\n \n static void\n-sdbout_type (type)\n-     tree type;\n+sdbout_type (tree type)\n {\n   if (type == error_mark_node)\n     type = integer_type_node;\n@@ -1037,8 +996,7 @@ sdbout_type (type)\n    Now james@bigtex.cactus.org says to try them.  */\n \n static void\n-sdbout_field_types (type)\n-     tree type;\n+sdbout_field_types (tree type)\n {\n   tree tail;\n \n@@ -1066,8 +1024,7 @@ sdbout_field_types (type)\n    It may NOT be called recursively.  */\n \n static void\n-sdbout_one_type (type)\n-     tree type;\n+sdbout_one_type (tree type)\n {\n   if (current_function_decl != NULL_TREE\n       && DECL_SECTION_NAME (current_function_decl) != NULL_TREE)\n@@ -1092,7 +1049,7 @@ sdbout_one_type (type)\n \treturn;\n \n       TREE_ASM_WRITTEN (type) = 1;\n-#if 1\n+\n       /* This is reputed to cause trouble with the following case,\n \t but perhaps checking TYPE_SIZE above will fix it.  */\n \n@@ -1110,9 +1067,6 @@ sdbout_one_type (type)\n \t  int ccccc;\n \t} badtype;   */\n \n-#if 0\n-      TREE_ASM_BEING_WRITTEN (type) = 1;\n-#endif\n       /* This change, which ought to make better output,\n \t used to make the COFF assembler unhappy.\n \t Changes involving KNOWN_TYPE_TAG may fix the problem.  */\n@@ -1121,10 +1075,6 @@ sdbout_one_type (type)\n \t are not used if forward references are in use.  */\n       if (TREE_CODE (type) != ENUMERAL_TYPE)\n \tsdbout_field_types (type);\n-#if 0\n-      TREE_ASM_WRITTEN (type) = 1;\n-#endif\n-#endif\n \n       /* Output a structure type.  */\n       {\n@@ -1196,7 +1146,6 @@ sdbout_one_type (type)\n \t\telse\n \t\t  continue;\n \n-\t\tCONTIN;\n \t\tPUT_SDB_DEF (IDENTIFIER_POINTER (child_type_name));\n \t\tPUT_SDB_INT_VAL (tree_low_cst (BINFO_OFFSET (child), 0));\n \t\tPUT_SDB_SCL (member_scl);\n@@ -1235,7 +1184,6 @@ sdbout_one_type (type)\n \t      {\n \t\tconst char *name;\n \n-\t\tCONTIN;\n \t\tname = IDENTIFIER_POINTER (DECL_NAME (tem));\n \t\tPUT_SDB_DEF (name);\n \t\tif (DECL_BIT_FIELD_TYPE (tem))\n@@ -1268,7 +1216,7 @@ sdbout_one_type (type)\n       }\n     }\n }\n-\f\n+\n /* The following two functions output definitions of function parameters.\n    Each parameter gets a definition locating it in the parameter list.\n    Each parameter that is a register variable gets a second definition\n@@ -1282,8 +1230,7 @@ sdbout_one_type (type)\n    of all the parms in PARMS, which is a chain of PARM_DECL nodes.  */\n \n static void\n-sdbout_parms (parms)\n-     tree parms;\n+sdbout_parms (tree parms)\n {\n   for (; parms; parms = TREE_CHAIN (parms))\n     if (DECL_NAME (parms))\n@@ -1415,8 +1362,7 @@ sdbout_parms (parms)\n    PARMS is a chain of PARM_DECL nodes.  */\n \n static void\n-sdbout_reg_parms (parms)\n-     tree parms;\n+sdbout_reg_parms (tree parms)\n {\n   for (; parms; parms = TREE_CHAIN (parms))\n     if (DECL_NAME (parms))\n@@ -1469,13 +1415,12 @@ sdbout_reg_parms (parms)\n \t  }\n       }\n }\n-\f\n+\n /* Output debug information for a global DECL.  Called from toplev.c\n    after compilation proper has finished.  */\n \n static void\n-sdbout_global_decl (decl)\n-     tree decl;\n+sdbout_global_decl (tree decl)\n {\n   if (TREE_CODE (decl) == VAR_DECL\n       && !DECL_EXTERNAL (decl)\n@@ -1498,8 +1443,7 @@ sdbout_global_decl (decl)\n    definition.  See comment in sdbout_global_decl.  */\n \n static void\n-sdbout_finish (main_filename)\n-     const char *main_filename ATTRIBUTE_UNUSED;\n+sdbout_finish (const char *main_filename ATTRIBUTE_UNUSED)\n {\n   tree decl = (*lang_hooks.decls.getdecls) ();\n   unsigned int len = list_length (decl);\n@@ -1525,7 +1469,7 @@ sdbout_finish (main_filename)\n \n   free (vec);\n }\n-\f\n+\n /* Describe the beginning of an internal block within a function.\n    Also output descriptions of variables defined in this block.\n \n@@ -1535,9 +1479,7 @@ sdbout_finish (main_filename)\n    if the count starts at 0 for the outermost one.  */\n \n static void\n-sdbout_begin_block (line, n)\n-     unsigned int line;\n-     unsigned int n;\n+sdbout_begin_block (unsigned int line, unsigned int n)\n {\n   tree decl = current_function_decl;\n   MAKE_LINE_SAFE (line);\n@@ -1572,9 +1514,7 @@ sdbout_begin_block (line, n)\n /* Describe the end line-number of an internal block within a function.  */\n \n static void\n-sdbout_end_block (line, n)\n-     unsigned int line;\n-     unsigned int n ATTRIBUTE_UNUSED;\n+sdbout_end_block (unsigned int line, unsigned int n ATTRIBUTE_UNUSED)\n {\n   MAKE_LINE_SAFE (line);\n \n@@ -1609,8 +1549,7 @@ sdbout_source_line (line, filename)\n    Called from assemble_start_function.  */\n \n static void\n-sdbout_begin_function (decl)\n-     tree decl ATTRIBUTE_UNUSED;\n+sdbout_begin_function (tree decl ATTRIBUTE_UNUSED)\n {\n   sdbout_symbol (current_function_decl, 0);\n }\n@@ -1623,9 +1562,7 @@ sdbout_begin_function (decl)\n \n #ifndef MIPS_DEBUGGING_INFO\n static void\n-sdbout_begin_prologue (line, file)\n-     unsigned int line;\n-     const char *file ATTRIBUTE_UNUSED;\n+sdbout_begin_prologue (unsigned int line, const char *file ATTRIBUTE_UNUSED)\n {\n   sdbout_end_prologue (line, file);\n }\n@@ -1646,8 +1583,7 @@ sdbout_end_prologue (line, file)\n    Describe end of outermost block.  */\n \n static void\n-sdbout_end_function (line)\n-     unsigned int line;\n+sdbout_end_function (unsigned int line)\n {\n #ifdef SDB_ALLOW_FORWARD_REFERENCES\n   sdbout_dequeue_anonymous_types ();\n@@ -1664,9 +1600,8 @@ sdbout_end_function (line)\n    Called after the epilogue is output.  */\n \n static void\n-sdbout_end_epilogue (line, file)\n-     unsigned int line ATTRIBUTE_UNUSED;\n-     const char *file ATTRIBUTE_UNUSED;\n+sdbout_end_epilogue (unsigned int line ATTRIBUTE_UNUSED,\n+\t\t     const char *file ATTRIBUTE_UNUSED)\n {\n   const char *const name ATTRIBUTE_UNUSED\n     = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (current_function_decl));\n@@ -1685,8 +1620,7 @@ sdbout_end_epilogue (line, file)\n    is present.  */\n \n static void\n-sdbout_label (insn)\n-     rtx insn;\n+sdbout_label (rtx insn)\n {\n   PUT_SDB_DEF (LABEL_NAME (insn));\n   PUT_SDB_VAL (insn);\n@@ -1698,9 +1632,8 @@ sdbout_label (insn)\n /* Change to reading from a new source file.  */\n \n static void\n-sdbout_start_source_file (line, filename)\n-     unsigned int line ATTRIBUTE_UNUSED;\n-     const char *filename ATTRIBUTE_UNUSED;\n+sdbout_start_source_file (unsigned int line ATTRIBUTE_UNUSED,\n+\t\t\t  const char *filename ATTRIBUTE_UNUSED)\n {\n #ifdef MIPS_DEBUGGING_INFO\n   struct sdb_file *n = (struct sdb_file *) xmalloc (sizeof *n);\n@@ -1715,8 +1648,7 @@ sdbout_start_source_file (line, filename)\n /* Revert to reading a previous source file.  */\n \n static void\n-sdbout_end_source_file (line)\n-     unsigned int line ATTRIBUTE_UNUSED;\n+sdbout_end_source_file (unsigned int line ATTRIBUTE_UNUSED)\n {\n #ifdef MIPS_DEBUGGING_INFO\n   struct sdb_file *next;\n@@ -1731,22 +1663,13 @@ sdbout_end_source_file (line)\n /* Set up for SDB output at the start of compilation.  */\n \n static void\n-sdbout_init (input_file_name)\n-     const char *input_file_name ATTRIBUTE_UNUSED;\n+sdbout_init (const char *input_file_name ATTRIBUTE_UNUSED)\n {\n #ifdef MIPS_DEBUGGING_INFO\n   current_file = (struct sdb_file *) xmalloc (sizeof *current_file);\n   current_file->next = NULL;\n   current_file->name = input_file_name;\n #endif\n-\n-#ifdef RMS_QUICK_HACK_1\n-  tree t;\n-  for (t = (*lang_hooks.decls.getdecls) (); t; t = TREE_CHAIN (t))\n-    if (DECL_NAME (t) && IDENTIFIER_POINTER (DECL_NAME (t)) != 0\n-\t&& !strcmp (IDENTIFIER_POINTER (DECL_NAME (t)), \"__vtbl_ptr_type\"))\n-      sdbout_symbol (t, 0);\n-#endif  \n }\n \n #else  /* SDB_DEBUGGING_INFO */"}, {"sha": "5f2b47931e49abba81243e95afe40f2d820e650d", "filename": "gcc/sdbout.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cef2bd3e84943196fc300e805307c725bb15508a/gcc%2Fsdbout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cef2bd3e84943196fc300e805307c725bb15508a/gcc%2Fsdbout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.h?ref=cef2bd3e84943196fc300e805307c725bb15508a", "patch": "@@ -1,5 +1,5 @@\n /* sdbout.h - Various declarations for functions found in sdbout.c\n-   Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000, 2003 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -18,5 +18,5 @@ along with GCC; see the file COPYING.  If not, write to the Free\n Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n 02111-1307, USA.  */\n \n-extern void sdbout_symbol\t\tPARAMS ((tree, int));\n-extern void sdbout_types\t\tPARAMS ((tree));\n+extern void sdbout_symbol (tree, int);\n+extern void sdbout_types (tree);"}]}