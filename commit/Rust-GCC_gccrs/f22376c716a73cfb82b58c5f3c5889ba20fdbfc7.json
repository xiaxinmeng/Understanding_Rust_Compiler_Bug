{"sha": "f22376c716a73cfb82b58c5f3c5889ba20fdbfc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyMzc2YzcxNmE3M2NmYjgyYjU4YzVmM2M1ODg5YmEyMGZkYmZjNw==", "commit": {"author": {"name": "Christian Iseli", "email": "Christian.Iseli@lslsun.epfl.ch", "date": "1997-10-17T15:46:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-17T15:46:57Z"}, "message": "regclass.c (record_address_regs): Look at REG_OK_FOR_{BASE,INDEX}_P for hard regs to determine base and index...\n\n        * regclass.c (record_address_regs): Look at REG_OK_FOR_{BASE,INDEX}_P\n        for hard regs to determine base and index registers.\n\nFrom-SVN: r15954", "tree": {"sha": "61e23b048b828f49ad3bd66ac314adcfbd0768d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61e23b048b828f49ad3bd66ac314adcfbd0768d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f22376c716a73cfb82b58c5f3c5889ba20fdbfc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22376c716a73cfb82b58c5f3c5889ba20fdbfc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f22376c716a73cfb82b58c5f3c5889ba20fdbfc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22376c716a73cfb82b58c5f3c5889ba20fdbfc7/comments", "author": null, "committer": null, "parents": [{"sha": "b8fb2d721d6299b18eced2ce5ef777a6196cb507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8fb2d721d6299b18eced2ce5ef777a6196cb507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8fb2d721d6299b18eced2ce5ef777a6196cb507"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "8d6ca261aee8326e16e0ecd512e006186a915a37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22376c716a73cfb82b58c5f3c5889ba20fdbfc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22376c716a73cfb82b58c5f3c5889ba20fdbfc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f22376c716a73cfb82b58c5f3c5889ba20fdbfc7", "patch": "@@ -1,5 +1,8 @@\n Fri Oct 17 12:29:48 1997  Christian Iseli  <Christian.Iseli@lslsun.epfl.ch>\n \n+\t* regclass.c (record_address_regs): Look at REG_OK_FOR_{BASE,INDEX}_P\n+\tfor hard regs to determine base and index registers.\n+\n \t* reload.c (debug_reload_to_stream): New function.  Specify stream\n  \tinto which to write debug info.\n \t(debug_reload): Modify to call debug_reload_to_stream with stderr."}, {"sha": "45ee16ee20289e0d6d1b24a124a69e12b5780727", "filename": "gcc/regclass.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22376c716a73cfb82b58c5f3c5889ba20fdbfc7/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22376c716a73cfb82b58c5f3c5889ba20fdbfc7/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=f22376c716a73cfb82b58c5f3c5889ba20fdbfc7", "patch": "@@ -1539,6 +1539,32 @@ record_address_regs (x, class, scale)\n \telse if (code1 == SYMBOL_REF || code1 == CONST || code1 == LABEL_REF)\n \t  record_address_regs (arg0, INDEX_REG_CLASS, scale);\n \n+\t/* Look for the sum of two registers where the first is definitely\n+\t   a base register or the second is definitely an index register. */\n+\n+\telse if (code0 == REG && code1 == REG\n+\t\t && ((REGNO (arg0) < FIRST_PSEUDO_REGISTER \n+\t\t      && REG_OK_FOR_BASE_P (arg0))\n+\t\t     || ((REGNO (arg1) < FIRST_PSEUDO_REGISTER \n+\t\t\t  && REG_OK_FOR_INDEX_P (arg1)))))\n+\t  {\n+\t    record_address_regs (arg0, BASE_REG_CLASS, scale);\n+\t    record_address_regs (arg1, INDEX_REG_CLASS, scale);\n+\t  }\n+\n+\t/* Look for the sum of two registers where the first is definitely\n+\t   an index register or the second is definitely a base register. */\n+\n+\telse if (code0 == REG && code1 == REG\n+\t\t && ((REGNO (arg1) < FIRST_PSEUDO_REGISTER \n+\t\t      && REG_OK_FOR_BASE_P (arg1))\n+\t\t     || ((REGNO (arg0) < FIRST_PSEUDO_REGISTER \n+\t\t\t  && REG_OK_FOR_INDEX_P (arg0)))))\n+\t  {\n+\t    record_address_regs (arg0, INDEX_REG_CLASS, scale);\n+\t    record_address_regs (arg1, BASE_REG_CLASS, scale);\n+\t  }\n+\n \t/* If this the sum of two registers where the first is known to be a \n \t   pointer, it must be a base register with the second an index.  */\n "}]}