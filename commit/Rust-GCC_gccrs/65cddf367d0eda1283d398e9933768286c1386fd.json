{"sha": "65cddf367d0eda1283d398e9933768286c1386fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjZGRmMzY3ZDBlZGExMjgzZDM5OGU5OTMzNzY4Mjg2YzEzODZmZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T12:53:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T12:53:03Z"}, "message": "[multiple changes]\n\n2015-10-16  Bob Duff  <duff@adacore.com>\n\n\t* adadecode.h, adadecode.c (ada_demangle): Remove\n\tada_demangle, no longer used.\n\t* a-except-2005.adb: Bring System.Traceback.Symbolic into the\n\tclosure.\n\n2015-10-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb, sem_util.ads (Get_Reference_Discriminant): Utility to\n\tlocate the access discriminant that supports implicit dereference on a\n\trecord type.\n\t(Is_OK_Variable_For_Out_Parameter): Reject other illegal uses\n\tof Implicit_Dereference on an access_to_constant when actual\n\tparameter is a rewritten variable or function call.\n\nFrom-SVN: r228886", "tree": {"sha": "cbd04fbbd93f8a27552d700f1b75927c1be21334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbd04fbbd93f8a27552d700f1b75927c1be21334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65cddf367d0eda1283d398e9933768286c1386fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65cddf367d0eda1283d398e9933768286c1386fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65cddf367d0eda1283d398e9933768286c1386fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65cddf367d0eda1283d398e9933768286c1386fd/comments", "author": null, "committer": null, "parents": [{"sha": "f9105bfacd6119d197885897857f82e7a7cfdde1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9105bfacd6119d197885897857f82e7a7cfdde1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9105bfacd6119d197885897857f82e7a7cfdde1"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "40e07ce2d0f3ced30b447ef56933d368699f4285", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=65cddf367d0eda1283d398e9933768286c1386fd", "patch": "@@ -1,3 +1,19 @@\n+2015-10-16  Bob Duff  <duff@adacore.com>\n+\n+\t* adadecode.h, adadecode.c (ada_demangle): Remove\n+\tada_demangle, no longer used.\n+\t* a-except-2005.adb: Bring System.Traceback.Symbolic into the\n+\tclosure.\n+\n+2015-10-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads (Get_Reference_Discriminant): Utility to\n+\tlocate the access discriminant that supports implicit dereference on a\n+\trecord type.\n+\t(Is_OK_Variable_For_Out_Parameter): Reject other illegal uses\n+\tof Implicit_Dereference on an access_to_constant when actual\n+\tparameter is a rewritten variable or function call.\n+\n 2015-10-16  Bob Duff  <duff@adacore.com>\n \n \t* a-tags.adb, s-trasym.adb, s-trasym.ads: Make sure we don't get"}, {"sha": "92bec03f294b8cde0ed5a2c50d790ed723c84482", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=65cddf367d0eda1283d398e9933768286c1386fd", "patch": "@@ -44,6 +44,16 @@ with System.Soft_Links;       use System.Soft_Links;\n with System.WCh_Con;          use System.WCh_Con;\n with System.WCh_StW;          use System.WCh_StW;\n \n+pragma Warnings (Off);\n+--  Suppress complaints about Symbolic not being referenced, and about it not\n+--  having pragma Preelaborate.\n+with System.Traceback.Symbolic;\n+--  Bring Symbolic into the closure. If it is the s-trasym-dwarf.adb version,\n+--  it will install symbolic tracebacks as the default decorator. Otherwise,\n+--  symbolic tracebacks are not supported, and we fall back to hexadecimal\n+--  addresses.\n+pragma Warnings (On);\n+\n package body Ada.Exceptions is\n \n    pragma Suppress (All_Checks);"}, {"sha": "8c9c7ab7a88f78582af43f898e6b701bc7950662", "filename": "gcc/ada/adadecode.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2Fadadecode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2Fadadecode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadadecode.c?ref=65cddf367d0eda1283d398e9933768286c1386fd", "patch": "@@ -368,17 +368,6 @@ __gnat_decode (const char *coded_name, char *ada_name, int verbose)\n extern \"C\" {\n #endif\n \n-#ifdef IN_RTS\n-char *\n-ada_demangle (const char *coded_name)\n-{\n-  char ada_name[2048];\n-\n-  __gnat_decode (coded_name, ada_name, 0);\n-  return xstrdup (ada_name);\n-}\n-#endif\n-\n void\n get_encoding (const char *coded_name, char *encoding)\n {"}, {"sha": "03848e74d8303756eefef7230041dd8629707584", "filename": "gcc/ada/adadecode.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2Fadadecode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2Fadadecode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadadecode.h?ref=65cddf367d0eda1283d398e9933768286c1386fd", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *           Copyright (C) 2001-2011, Free Software Foundation, Inc.        *\n+ *           Copyright (C) 2001-2015, Free Software Foundation, Inc.        *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -51,11 +51,6 @@ extern void __gnat_decode (const char *, char *, int);\n    from the encoded form. The Ada encodings are described in exp_dbug.ads.  */\n extern void get_encoding (const char *, char *);\n \n-/* ada_demangle is added for COMPATIBILITY ONLY. It has the name of the\n-   function used in the binutils and GDB. Always consider using __gnat_decode\n-   instead of ada_demangle. Caller must free the pointer returned.  */\n-extern char *ada_demangle (const char *);\n-\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "efdf3266a3e5f4c928edc31447be72cfb88f8a5d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=65cddf367d0eda1283d398e9933768286c1386fd", "patch": "@@ -7794,6 +7794,26 @@ package body Sem_Util is\n       end if;\n    end Get_Reason_String;\n \n+   --------------------------------\n+   -- Get_Reference_Discriminant --\n+   --------------------------------\n+\n+   function Get_Reference_Discriminant (Typ : Entity_Id) return Entity_Id is\n+      D : Entity_Id;\n+   begin\n+      D := First_Discriminant (Typ);\n+      while Present (D) loop\n+         if Has_Implicit_Dereference (D) then\n+            return D;\n+         end if;\n+         Next_Discriminant (D);\n+      end loop;\n+\n+      --  Type must have a proper access discriminant.\n+\n+      pragma Assert (False);\n+   end Get_Reference_Discriminant;\n+\n    ---------------------------\n    -- Get_Referenced_Object --\n    ---------------------------\n@@ -12233,7 +12253,15 @@ package body Sem_Util is\n            and then\n              Has_Implicit_Dereference (Etype (Name (Original_Node (AV))))\n          then\n-            return True;\n+\n+            --  Check that this is not a constant reference.\n+\n+            return not Is_Access_Constant (Etype (Prefix (AV)));\n+\n+         elsif Has_Implicit_Dereference (Etype (Original_Node (AV))) then\n+            return\n+              not Is_Access_Constant (Etype\n+                (Get_Reference_Discriminant (Etype (Original_Node (AV)))));\n \n          else\n             return Is_OK_Variable_For_Out_Formal (Original_Node (AV));"}, {"sha": "70ffa636e9fddf776dd651fabf421357487de737", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65cddf367d0eda1283d398e9933768286c1386fd/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=65cddf367d0eda1283d398e9933768286c1386fd", "patch": "@@ -909,6 +909,10 @@ package Sem_Util is\n    --  literal or concatenation of string literals. An error is given for\n    --  any other form.\n \n+   function Get_Reference_Discriminant (Typ : Entity_Id) return Entity_Id;\n+   --  If Typ has Implicit_Dereference, return discriminant specified in\n+   --  the corresponding aspect.\n+\n    function Get_Referenced_Object (N : Node_Id) return Node_Id;\n    --  Given a node, return the renamed object if the node represents a renamed\n    --  object, otherwise return the node unchanged. The node may represent an"}]}