{"sha": "a9a7654d850a7140d1e0d636f2cc375308bb2c32", "node_id": "C_kwDOANBUbNoAKGE5YTc2NTRkODUwYTcxNDBkMWUwZDYzNmYyY2MzNzUzMDhiYjJjMzI", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-12-13T21:57:27Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-12-13T22:45:45Z"}, "message": "Get rid of lambdas within AST::Union\n\nThese constructs make working with the IR needlessly complicated for\nstatic analysis. Replace with simple for loops, and delete the old\nUnion::iterate () method.\n\nFixes: #716", "tree": {"sha": "b40ea16242ef40c829df297c9042eeb20c1d47d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b40ea16242ef40c829df297c9042eeb20c1d47d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9a7654d850a7140d1e0d636f2cc375308bb2c32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a7654d850a7140d1e0d636f2cc375308bb2c32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9a7654d850a7140d1e0d636f2cc375308bb2c32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9a7654d850a7140d1e0d636f2cc375308bb2c32/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c3ad67d19b7e74b1c89a6ad42f2bb0c5fb172e0"}], "stats": {"total": 97, "additions": 42, "deletions": 55}, "files": [{"sha": "a18a8e6e42a4b26d2001cc69583f11a70b9c1a94", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a7654d850a7140d1e0d636f2cc375308bb2c32/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a7654d850a7140d1e0d636f2cc375308bb2c32/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=a9a7654d850a7140d1e0d636f2cc375308bb2c32", "patch": "@@ -2472,15 +2472,6 @@ class Union : public VisItem\n   std::vector<StructField> &get_variants () { return variants; }\n   const std::vector<StructField> &get_variants () const { return variants; }\n \n-  void iterate (std::function<bool (StructField &)> cb)\n-  {\n-    for (auto &variant : variants)\n-      {\n-\tif (!cb (variant))\n-\t  return;\n-      }\n-  }\n-\n   std::vector<std::unique_ptr<GenericParam>> &get_generic_params ()\n   {\n     return generic_params;"}, {"sha": "60315dba0e347ddbff3e9616da0bc8fb37345bff", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a7654d850a7140d1e0d636f2cc375308bb2c32/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a7654d850a7140d1e0d636f2cc375308bb2c32/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=a9a7654d850a7140d1e0d636f2cc375308bb2c32", "patch": "@@ -325,28 +325,28 @@ class ASTLoweringItem : public ASTLoweringBase\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     std::vector<HIR::StructField> variants;\n-    union_decl.iterate ([&] (AST::StructField &variant) mutable -> bool {\n-      HIR::Visibility vis = HIR::Visibility::create_public ();\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (variant.get_field_type ().get ());\n-\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, variant.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n-\n-      HIR::StructField translated_variant (mapping, variant.get_field_name (),\n-\t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n-\t\t\t\t\t   vis, variant.get_locus (),\n-\t\t\t\t\t   variant.get_outer_attrs ());\n+    for (AST::StructField &variant : union_decl.get_variants ())\n+      {\n+\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Type *type\n+\t  = ASTLoweringType::translate (variant.get_field_type ().get ());\n+\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, variant.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n \n-      if (struct_field_name_exists (variants, translated_variant))\n-\treturn false;\n+\tHIR::StructField translated_variant (mapping, variant.get_field_name (),\n+\t\t\t\t\t     std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t     vis, variant.get_locus (),\n+\t\t\t\t\t     variant.get_outer_attrs ());\n \n-      variants.push_back (std::move (translated_variant));\n-      return true;\n-    });\n+\tif (struct_field_name_exists (variants, translated_variant))\n+\t  break;\n+\n+\tvariants.push_back (std::move (translated_variant));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, union_decl.get_node_id (),"}, {"sha": "27fdd22f708cc99f07db1b4649646fb21b2ef261", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a7654d850a7140d1e0d636f2cc375308bb2c32/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a7654d850a7140d1e0d636f2cc375308bb2c32/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=a9a7654d850a7140d1e0d636f2cc375308bb2c32", "patch": "@@ -258,28 +258,28 @@ class ASTLoweringStmt : public ASTLoweringBase\n     HIR::Visibility vis = HIR::Visibility::create_public ();\n \n     std::vector<HIR::StructField> variants;\n-    union_decl.iterate ([&] (AST::StructField &variant) mutable -> bool {\n-      HIR::Visibility vis = HIR::Visibility::create_public ();\n-      HIR::Type *type\n-\t= ASTLoweringType::translate (variant.get_field_type ().get ());\n-\n-      auto crate_num = mappings->get_current_crate ();\n-      Analysis::NodeMapping mapping (crate_num, variant.get_node_id (),\n-\t\t\t\t     mappings->get_next_hir_id (crate_num),\n-\t\t\t\t     mappings->get_next_localdef_id (\n-\t\t\t\t       crate_num));\n-\n-      HIR::StructField translated_variant (mapping, variant.get_field_name (),\n-\t\t\t\t\t   std::unique_ptr<HIR::Type> (type),\n-\t\t\t\t\t   vis, variant.get_locus (),\n-\t\t\t\t\t   variant.get_outer_attrs ());\n+    for (AST::StructField &variant : union_decl.get_variants ())\n+      {\n+\tHIR::Visibility vis = HIR::Visibility::create_public ();\n+\tHIR::Type *type\n+\t  = ASTLoweringType::translate (variant.get_field_type ().get ());\n+\n+\tauto crate_num = mappings->get_current_crate ();\n+\tAnalysis::NodeMapping mapping (crate_num, variant.get_node_id (),\n+\t\t\t\t       mappings->get_next_hir_id (crate_num),\n+\t\t\t\t       mappings->get_next_localdef_id (\n+\t\t\t\t\t crate_num));\n \n-      if (struct_field_name_exists (variants, translated_variant))\n-\treturn false;\n+\tHIR::StructField translated_variant (mapping, variant.get_field_name (),\n+\t\t\t\t\t     std::unique_ptr<HIR::Type> (type),\n+\t\t\t\t\t     vis, variant.get_locus (),\n+\t\t\t\t\t     variant.get_outer_attrs ());\n \n-      variants.push_back (std::move (translated_variant));\n-      return true;\n-    });\n+\tif (struct_field_name_exists (variants, translated_variant))\n+\t  break;\n+\n+\tvariants.push_back (std::move (translated_variant));\n+      }\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, union_decl.get_node_id (),"}, {"sha": "b3035ed75f1da7bea31858a9722747d306f22eb4", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a7654d850a7140d1e0d636f2cc375308bb2c32/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a7654d850a7140d1e0d636f2cc375308bb2c32/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=a9a7654d850a7140d1e0d636f2cc375308bb2c32", "patch": "@@ -331,11 +331,9 @@ class ResolveItem : public ResolverBase\n     if (union_decl.has_where_clause ())\n       ResolveWhereClause::Resolve (union_decl.get_where_clause ());\n \n-    union_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n+    for (AST::StructField &field : union_decl.get_variants ())\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       union_decl.get_node_id ());\n-      return true;\n-    });\n \n     resolver->get_type_scope ().pop ();\n   }"}, {"sha": "ce6875c1fce65b663a6237d0537a403ceedc3f23", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9a7654d850a7140d1e0d636f2cc375308bb2c32/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9a7654d850a7140d1e0d636f2cc375308bb2c32/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=a9a7654d850a7140d1e0d636f2cc375308bb2c32", "patch": "@@ -267,11 +267,9 @@ class ResolveStmt : public ResolverBase\n \t  }\n       }\n \n-    union_decl.iterate ([&] (AST::StructField &field) mutable -> bool {\n+    for (AST::StructField &field : union_decl.get_variants ())\n       ResolveType::go (field.get_field_type ().get (),\n \t\t       union_decl.get_node_id ());\n-      return true;\n-    });\n \n     resolver->get_type_scope ().pop ();\n   }"}]}