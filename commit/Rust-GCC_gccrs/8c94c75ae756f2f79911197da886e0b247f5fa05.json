{"sha": "8c94c75ae756f2f79911197da886e0b247f5fa05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM5NGM3NWFlNzU2ZjJmNzk5MTExOTdkYTg4NmUwYjI0N2Y1ZmEwNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-02-01T06:58:27Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-02-01T06:58:27Z"}, "message": "parser.c (cp_parser_primary_expression): Don't complain about floating-point literals in integral constant expressions...\n\n\t* parser.c (cp_parser_primary_expression): Don't complain about\n\tfloating-point literals in integral constant expressions when\n\t!pedantic.\n\n\t* gjavah.c (print_field_info): Mark static data members of\n\tfloating-point type with \"__extension__\".\n\nFrom-SVN: r94527", "tree": {"sha": "e8f7f02f5415bb65aea3439c2bb6dfc0a6b67b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8f7f02f5415bb65aea3439c2bb6dfc0a6b67b42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c94c75ae756f2f79911197da886e0b247f5fa05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c94c75ae756f2f79911197da886e0b247f5fa05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c94c75ae756f2f79911197da886e0b247f5fa05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c94c75ae756f2f79911197da886e0b247f5fa05/comments", "author": null, "committer": null, "parents": [{"sha": "ddf2a54af5d8339de80656f0a9d6a65a4c0cf6a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf2a54af5d8339de80656f0a9d6a65a4c0cf6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf2a54af5d8339de80656f0a9d6a65a4c0cf6a4"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "e964d83063cb1cb5f3cad4e70e045b744da8ccfd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c94c75ae756f2f79911197da886e0b247f5fa05/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c94c75ae756f2f79911197da886e0b247f5fa05/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8c94c75ae756f2f79911197da886e0b247f5fa05", "patch": "@@ -1,3 +1,9 @@\n+2005-01-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* parser.c (cp_parser_primary_expression): Don't complain about\n+\tfloating-point literals in integral constant expressions when\n+\t!pedantic.\n+\n 2005-02-01  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* parser.c (cp_parser_template_id): Revert comment patch too."}, {"sha": "7450f1838d46677806607fde683b74450a4d66be", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c94c75ae756f2f79911197da886e0b247f5fa05/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c94c75ae756f2f79911197da886e0b247f5fa05/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8c94c75ae756f2f79911197da886e0b247f5fa05", "patch": "@@ -2682,7 +2682,8 @@ cp_parser_primary_expression (cp_parser *parser,\n \t constant expression if they are cast to an integral or\n \t enumeration type.  */\n       if (TREE_CODE (token->value) == REAL_CST\n-\t  && parser->integral_constant_expression_p)\n+\t  && parser->integral_constant_expression_p\n+\t  && pedantic)\n \t{\n \t  /* CAST_P will be set even in invalid code like \"int(2.7 +\n \t     ...)\".   Therefore, we have to check that the next token"}, {"sha": "287a8ccb4f6730a7faa7230ff27cce0d1715a516", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c94c75ae756f2f79911197da886e0b247f5fa05/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c94c75ae756f2f79911197da886e0b247f5fa05/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8c94c75ae756f2f79911197da886e0b247f5fa05", "patch": "@@ -1,3 +1,8 @@\n+2005-01-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gjavah.c (print_field_info): Mark static data members of\n+\tfloating-point type with \"__extension__\".\n+\n 2005-02-01  Ranjit Mathew  <rmathew@hotmail.com>\n \n \tPR java/9157"}, {"sha": "9db37d38a9b9630ca4b3992442b72aec9607d99a", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c94c75ae756f2f79911197da886e0b247f5fa05/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c94c75ae756f2f79911197da886e0b247f5fa05/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=8c94c75ae756f2f79911197da886e0b247f5fa05", "patch": "@@ -768,8 +768,6 @@ print_field_info (FILE *stream, JCF* jcf, int name_index, int sig_index,\n \t  print_cxx_classname (stream, \"#define \", jcf, jcf->this_class, 1);\n \t  fputs (\"_\", stream);\n \t}\n-      else\n-\tfputs (\"static \", stream);\n \n       if ((flags & ACC_FINAL) && current_field_value > 0)\n \t{\n@@ -783,7 +781,7 @@ print_field_info (FILE *stream, JCF* jcf, int name_index, int sig_index,\n \t\tjint num;\n \t\tint most_negative = 0;\n \t\tif (! flag_jni)\n-\t\t  fputs (\"const jint \", stream);\n+\t\t  fputs (\"static const jint \", stream);\n \t\tprint_field_name (stream, jcf, name_index, 0);\n \t\tfputs (flag_jni ? \" \" : \" = \", stream);\n \t\tnum = JPOOL_INT (jcf, current_field_value);\n@@ -805,7 +803,7 @@ print_field_info (FILE *stream, JCF* jcf, int name_index, int sig_index,\n \t\tjlong num;\n \t\tint most_negative = 0;\n \t\tif (! flag_jni)\n-\t\t  fputs (\"const jlong \", stream);\n+\t\t  fputs (\"static const jlong \", stream);\n \t\tprint_field_name (stream, jcf, name_index, 0);\n \t\tfputs (flag_jni ? \" \" : \" = \", stream);\n \t\tnum = JPOOL_LONG (jcf, current_field_value);\n@@ -826,7 +824,11 @@ print_field_info (FILE *stream, JCF* jcf, int name_index, int sig_index,\n \t      {\n \t\tjfloat fnum = JPOOL_FLOAT (jcf, current_field_value);\n \t\tif (! flag_jni)\n-\t\t  fputs (\"const jfloat \", stream);\n+\t\t  /* ISO C++ does not allow initialization of a static\n+\t\t     data member of floating-point type.  Thus, this\n+\t\t     code is making use of an undocumented GNU C++\n+\t\t     extension.  */\n+\t\t  fputs (\"__extension__ static const jfloat \", stream);\n \t\tprint_field_name (stream, jcf, name_index, 0);\n \t\tjni_print_float (stream, fnum);\n \t      }\n@@ -835,7 +837,11 @@ print_field_info (FILE *stream, JCF* jcf, int name_index, int sig_index,\n \t      {\n \t\tjdouble dnum = JPOOL_DOUBLE (jcf, current_field_value);\n \t\tif (! flag_jni)\n-\t\t  fputs (\"const jdouble \", stream);\n+\t\t  /* ISO C++ does not allow initialization of a static\n+\t\t     data member of floating-point type.  Thus, this\n+\t\t     code is making use of an undocumented GNU C++\n+\t\t     extension.  */\n+\t\t  fputs (\"__extension__ static const jdouble \", stream);\n \t\tprint_field_name (stream, jcf, name_index, 0);\n \t\tjni_print_double (stream, dnum);\n \t      }"}]}