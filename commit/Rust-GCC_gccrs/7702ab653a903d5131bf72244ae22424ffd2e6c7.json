{"sha": "7702ab653a903d5131bf72244ae22424ffd2e6c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwMmFiNjUzYTkwM2Q1MTMxYmY3MjI0NGFlMjI0MjRmZmQyZTZjNw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-18T05:36:02Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-18T05:36:02Z"}, "message": "revert: [multiple changes]\n\n2018-10-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPartial revert.\n\t2018-10-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/list (list<>::cbegin()): Use C++11 direct\n\tinitialization.\n\t(list<>::cend()): Likewise.\n\t(list<>::erase(const_iterator, const_iterator)): Ensure consistent\n\titerator comparisons.\n\t(list<>::splice(const_iterator, list&&, const_iterator,\n\tconst_iterator)): Likewise.\n\n\tPartial revert.\n\t2018-10-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/vector (vector<>::cbegin()): Use C++11 direct\n\tinitialization.\n\t(vector<>::cend()): Likewise.\n\t(vector<>::insert(const_iterator, const _Tp&)): Use consistent\n\titerator comparison.\n\t(vector<>::erase(const_iterator)): Likewise.\n\t(vector<>::erase(const_iterator, const_iterator)): Likewise.\n\nFrom-SVN: r265259", "tree": {"sha": "a8dba8d07c66827a75c8a94144d149404e751bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8dba8d07c66827a75c8a94144d149404e751bf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7702ab653a903d5131bf72244ae22424ffd2e6c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7702ab653a903d5131bf72244ae22424ffd2e6c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7702ab653a903d5131bf72244ae22424ffd2e6c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7702ab653a903d5131bf72244ae22424ffd2e6c7/comments", "author": null, "committer": null, "parents": [{"sha": "7bed4de21bc9b45df88c0972cf58a52ab83cf1b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bed4de21bc9b45df88c0972cf58a52ab83cf1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bed4de21bc9b45df88c0972cf58a52ab83cf1b6"}], "stats": {"total": 63, "additions": 41, "deletions": 22}, "files": [{"sha": "426c7d8b29c7a22f2ea3a35749d84582031359ba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7702ab653a903d5131bf72244ae22424ffd2e6c7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7702ab653a903d5131bf72244ae22424ffd2e6c7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7702ab653a903d5131bf72244ae22424ffd2e6c7", "patch": "@@ -1,3 +1,27 @@\n+2018-10-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPartial revert.\n+\t2018-10-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/list (list<>::cbegin()): Use C++11 direct\n+\tinitialization.\n+\t(list<>::cend()): Likewise.\n+\t(list<>::erase(const_iterator, const_iterator)): Ensure consistent\n+\titerator comparisons.\n+\t(list<>::splice(const_iterator, list&&, const_iterator,\n+\tconst_iterator)): Likewise.\n+\n+\tPartial revert.\n+\t2018-10-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/debug/vector (vector<>::cbegin()): Use C++11 direct\n+\tinitialization.\n+\t(vector<>::cend()): Likewise.\n+\t(vector<>::insert(const_iterator, const _Tp&)): Use consistent\n+\titerator comparison.\n+\t(vector<>::erase(const_iterator)): Likewise.\n+\t(vector<>::erase(const_iterator, const_iterator)): Likewise.\n+\n 2018-10-17  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/87619"}, {"sha": "aab146d058bf245546c3c264e07803c2856583b9", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7702ab653a903d5131bf72244ae22424ffd2e6c7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7702ab653a903d5131bf72244ae22424ffd2e6c7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=7702ab653a903d5131bf72244ae22424ffd2e6c7", "patch": "@@ -244,11 +244,11 @@ namespace __debug\n #if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n-      { return { _Base::begin(), this }; }\n+      { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n       cend() const noexcept\n-      { return { _Base::end(), this }; }\n+      { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n       crbegin() const noexcept\n@@ -521,14 +521,13 @@ namespace __debug\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// 151. can't currently clear() empty container\n \t__glibcxx_check_erase_range(__first, __last);\n-\tfor (__decltype(__first.base()) __victim = __first.base();\n+\tfor (_Base_const_iterator __victim = __first.base();\n \t     __victim != __last.base(); ++__victim)\n \t  {\n-\t    _GLIBCXX_DEBUG_VERIFY(\n-\t\t__victim != __first._M_get_sequence()->_M_base().end(),\n-\t\t_M_message(__gnu_debug::__msg_valid_range)\n-\t\t._M_iterator(__first, \"position\")\n-\t\t._M_iterator(__last, \"last\"));\n+\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::end(),\n+\t\t\t\t  _M_message(__gnu_debug::__msg_valid_range)\n+\t\t\t\t  ._M_iterator(__first, \"position\")\n+\t\t\t\t  ._M_iterator(__last, \"last\"));\n \t    this->_M_invalidate_if(_Equal(__victim));\n \t  }\n \n@@ -622,14 +621,13 @@ namespace __debug\n \t// We used to perform the splice_alloc check:  not anymore, redundant\n \t// after implementing the relevant bits of N1599.\n \n-\tfor (__decltype(__first.base()) __tmp = __first.base();\n+\tfor (_Base_const_iterator __tmp = __first.base();\n \t     __tmp != __last.base(); ++__tmp)\n \t  {\n-\t    _GLIBCXX_DEBUG_VERIFY(\n-\t\t__tmp != __first._M_get_sequence()->_M_base().end(),\n-\t\t_M_message(__gnu_debug::__msg_valid_range)\n-\t\t._M_iterator(__first, \"first\")\n-\t\t._M_iterator(__last, \"last\"));\n+\t    _GLIBCXX_DEBUG_VERIFY(__tmp != _Base::end(),\n+\t\t\t\t  _M_message(__gnu_debug::__msg_valid_range)\n+\t\t\t\t  ._M_iterator(__first, \"first\")\n+\t\t\t\t  ._M_iterator(__last, \"last\"));\n \t    _GLIBCXX_DEBUG_VERIFY(std::__addressof(__x) != this\n \t\t\t\t  || __tmp != __position.base(),\n \t\t\t\t_M_message(__gnu_debug::__msg_splice_overlap)"}, {"sha": "0b712ba24e9d7672a49f270bdda499e6fbbccb3f", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7702ab653a903d5131bf72244ae22424ffd2e6c7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7702ab653a903d5131bf72244ae22424ffd2e6c7/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=7702ab653a903d5131bf72244ae22424ffd2e6c7", "patch": "@@ -328,11 +328,11 @@ namespace __debug\n #if __cplusplus >= 201103L\n       const_iterator\n       cbegin() const noexcept\n-      { return { _Base::begin(), this }; }\n+      { return const_iterator(_Base::begin(), this); }\n \n       const_iterator\n       cend() const noexcept\n-      { return { _Base::end(), this }; }\n+      { return const_iterator(_Base::end(), this); }\n \n       const_reverse_iterator\n       crbegin() const noexcept\n@@ -542,8 +542,7 @@ namespace __debug\n       {\n \t__glibcxx_check_insert(__position);\n \tbool __realloc = this->_M_requires_reallocation(this->size() + 1);\n-\tdifference_type __offset\n-\t  = __position.base() - __position._M_get_sequence()->_M_base().begin();\n+\tdifference_type __offset = __position.base() - _Base::begin();\n \t_Base_iterator __res = _Base::insert(__position.base(), __x);\n \tif (__realloc)\n \t  this->_M_invalidate_all();\n@@ -662,8 +661,7 @@ namespace __debug\n #endif\n       {\n \t__glibcxx_check_erase(__position);\n-\tdifference_type __offset\n-\t  = __position.base() - __position._M_get_sequence()->_M_base().begin();\n+\tdifference_type __offset = __position.base() - _Base::begin();\n \t_Base_iterator __res = _Base::erase(__position.base());\n \tthis->_M_invalidate_after_nth(__offset);\n \treturn iterator(__res, this);\n@@ -682,8 +680,7 @@ namespace __debug\n \n \tif (__first.base() != __last.base())\n \t  {\n-\t    difference_type __offset =\n-\t      __first.base() - __first._M_get_sequence()->_M_base().begin();\n+\t    difference_type __offset = __first.base() - _Base::begin();\n \t    _Base_iterator __res = _Base::erase(__first.base(),\n \t\t\t\t\t\t__last.base());\n \t    this->_M_invalidate_after_nth(__offset);"}]}