{"sha": "87e1e42b707bfc714a970c912da511bce72cfdb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdlMWU0MmI3MDdiZmM3MTRhOTcwYzkxMmRhNTExYmNlNzJjZmRiNw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-15T18:22:26Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-15T18:22:26Z"}, "message": "tree-ssa-ccp.c (ccp_fold): Also read from constant values and fold constant aggregate refs.\n\n2008-03-15  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-ccp.c (ccp_fold): Also read from constant values\n\tand fold constant aggregate refs.\n\t(fold_const_aggregate_ref): Handle string constants\n\tand constructors in ARRAY_REFs.  Handle INDIRECT_REF.\n\t(evaluate_stmt): Simplify now that ccp_fold folds constant\n\taggregate refs.\n\n\t* gcc.dg/tree-ssa/ssa-ccp-16.c: New testcase.\n\nFrom-SVN: r133257", "tree": {"sha": "91d6796e36eb2d8677834e63073b7541cc505389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d6796e36eb2d8677834e63073b7541cc505389"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87e1e42b707bfc714a970c912da511bce72cfdb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e1e42b707bfc714a970c912da511bce72cfdb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e1e42b707bfc714a970c912da511bce72cfdb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e1e42b707bfc714a970c912da511bce72cfdb7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "107276837fb7b50449dc3f1a5ad3d48c82661094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107276837fb7b50449dc3f1a5ad3d48c82661094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107276837fb7b50449dc3f1a5ad3d48c82661094"}], "stats": {"total": 70, "additions": 60, "deletions": 10}, "files": [{"sha": "c3f2d7d65c8637253c796fea7e22a2960c73a0f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e1e42b707bfc714a970c912da511bce72cfdb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e1e42b707bfc714a970c912da511bce72cfdb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87e1e42b707bfc714a970c912da511bce72cfdb7", "patch": "@@ -1,3 +1,12 @@\n+2008-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-ccp.c (ccp_fold): Also read from constant values\n+\tand fold constant aggregate refs.\n+\t(fold_const_aggregate_ref): Handle string constants\n+\tand constructors in ARRAY_REFs.  Handle INDIRECT_REF.\n+\t(evaluate_stmt): Simplify now that ccp_fold folds constant\n+\taggregate refs.\n+\n 2008-03-15  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.md (insv): Use gen_insv_t2 and gen_insv_zero."}, {"sha": "da901b2e23d988c5109f32461d9b5a3b3853e5d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e1e42b707bfc714a970c912da511bce72cfdb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e1e42b707bfc714a970c912da511bce72cfdb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87e1e42b707bfc714a970c912da511bce72cfdb7", "patch": "@@ -1,3 +1,7 @@\n+2008-03-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-ccp-16.c: New testcase.\n+\n 2008-03-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR testsuite/35184"}, {"sha": "33f9744d37d1a3885a2e5d14a3038228789c2ba3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e1e42b707bfc714a970c912da511bce72cfdb7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e1e42b707bfc714a970c912da511bce72cfdb7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-16.c?ref=87e1e42b707bfc714a970c912da511bce72cfdb7", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-ccp1\" } */\n+\n+static const int x;\n+\n+int test1 (void)\n+{\n+  char *p = \"hello\";\n+  int i = x;\n+  i = i + 5;\n+  return p[i];\n+}\n+\n+int test2 (void)\n+{\n+  int i = x;\n+  i = i + 5;\n+  return \"hello\"[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 0;\" 2 \"ccp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"ccp1\" } } */"}, {"sha": "f087a8d89486d5919fe4a6ef033847fa7d1b1ba1", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e1e42b707bfc714a970c912da511bce72cfdb7/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e1e42b707bfc714a970c912da511bce72cfdb7/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=87e1e42b707bfc714a970c912da511bce72cfdb7", "patch": "@@ -984,6 +984,12 @@ ccp_fold (tree stmt)\n       return fold_binary (code, TREE_TYPE (rhs), op0, op1);\n     }\n \n+  else if (kind == tcc_declaration)\n+    return get_symbol_constant_value (rhs);\n+\n+  else if (kind == tcc_reference)\n+    return fold_const_aggregate_ref (rhs);\n+\n   /* We may be able to fold away calls to builtin functions if their\n      arguments are constants.  */\n   else if (code == CALL_EXPR\n@@ -1062,6 +1068,11 @@ fold_const_aggregate_ref (tree t)\n \t  ctor = fold_const_aggregate_ref (base);\n \t  break;\n \n+\tcase STRING_CST:\n+\tcase CONSTRUCTOR:\n+\t  ctor = base;\n+\t  break;\n+\n \tdefault:\n \t  return NULL_TREE;\n \t}\n@@ -1162,7 +1173,18 @@ fold_const_aggregate_ref (tree t)\n \t  return fold_build1 (TREE_CODE (t), TREE_TYPE (t), c);\n \tbreak;\n       }\n-    \n+\n+    case INDIRECT_REF:\n+      {\n+\ttree base = TREE_OPERAND (t, 0);\n+\tif (TREE_CODE (base) == SSA_NAME\n+\t    && (value = get_value (base))\n+\t    && value->lattice_val == CONSTANT\n+\t    && TREE_CODE (value->value) == ADDR_EXPR)\n+\t  return fold_const_aggregate_ref (TREE_OPERAND (value->value, 0));\n+\tbreak;\n+      }\n+\n     default:\n       break;\n     }\n@@ -1190,15 +1212,8 @@ evaluate_stmt (tree stmt)\n     simplified = ccp_fold (stmt);\n   /* If the statement is likely to have a VARYING result, then do not\n      bother folding the statement.  */\n-  if (likelyvalue == VARYING)\n+  else if (likelyvalue == VARYING)\n     simplified = get_rhs (stmt);\n-  /* If the statement is an ARRAY_REF or COMPONENT_REF into constant\n-     aggregates, extract the referenced constant.  Otherwise the\n-     statement is likely to have an UNDEFINED value, and there will be\n-     nothing to do.  Note that fold_const_aggregate_ref returns\n-     NULL_TREE if the first case does not match.  */\n-  else if (!simplified)\n-    simplified = fold_const_aggregate_ref (get_rhs (stmt));\n \n   is_constant = simplified && is_gimple_min_invariant (simplified);\n \n@@ -1265,7 +1280,7 @@ visit_assignment (tree stmt, tree *output_p)\n     }\n   else\n     /* Evaluate the statement.  */\n-      val = evaluate_stmt (stmt);\n+    val = evaluate_stmt (stmt);\n \n   /* If the original LHS was a VIEW_CONVERT_EXPR, modify the constant\n      value to be a VIEW_CONVERT_EXPR of the old constant value."}]}