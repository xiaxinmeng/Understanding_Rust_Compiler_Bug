{"sha": "b8362a2315c3ac45d0fc13844900c44669cab385", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgzNjJhMjMxNWMzYWM0NWQwZmMxMzg0NDkwMGM0NDY2OWNhYjM4NQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-19T15:22:33Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-19T15:22:33Z"}, "message": "InputStreamChannel.java: New file.\n\n2003-12-19  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/InputStreamChannel.java: New file.\n\t* java/nio/channels/Channels.java (newChannel): Implemented.\n\nFrom-SVN: r74838", "tree": {"sha": "987f4ac4139c37f26744dcb00d68a206a8b27667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/987f4ac4139c37f26744dcb00d68a206a8b27667"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8362a2315c3ac45d0fc13844900c44669cab385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8362a2315c3ac45d0fc13844900c44669cab385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8362a2315c3ac45d0fc13844900c44669cab385", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8362a2315c3ac45d0fc13844900c44669cab385/comments", "author": null, "committer": null, "parents": [{"sha": "7dff81909b3f64e1db23ab1e83039f1b9e57c5d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dff81909b3f64e1db23ab1e83039f1b9e57c5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dff81909b3f64e1db23ab1e83039f1b9e57c5d8"}], "stats": {"total": 100, "additions": 97, "deletions": 3}, "files": [{"sha": "65a3e0318bcbe939adb0a304fa50931cb9e371d4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8362a2315c3ac45d0fc13844900c44669cab385/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8362a2315c3ac45d0fc13844900c44669cab385/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b8362a2315c3ac45d0fc13844900c44669cab385", "patch": "@@ -1,3 +1,8 @@\n+2003-12-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/InputStreamChannel.java: New file.\n+\t* java/nio/channels/Channels.java (newChannel): Implemented.\n+\n 2003-12-19  Michael Koch  <konqueror@gmx.de>\n \n \t* java/util/SimpleTimeZone.java"}, {"sha": "49e8b3c7e732c138759f2faaa74a0a8e5c9c802d", "filename": "libjava/gnu/java/nio/InputStreamChannel.java", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8362a2315c3ac45d0fc13844900c44669cab385/libjava%2Fgnu%2Fjava%2Fnio%2FInputStreamChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8362a2315c3ac45d0fc13844900c44669cab385/libjava%2Fgnu%2Fjava%2Fnio%2FInputStreamChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FInputStreamChannel.java?ref=b8362a2315c3ac45d0fc13844900c44669cab385", "patch": "@@ -0,0 +1,88 @@\n+/* InputStreamChannel.java -- \n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.nio;\n+\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.ClosedChannelException;\n+import java.nio.channels.ReadableByteChannel;\n+\n+/**\n+ * @author Michael Koch\n+ */\n+public final class InputStreamChannel implements ReadableByteChannel\n+{\n+  private boolean closed = false;\n+  private InputStream in;\n+  \n+  public InputStreamChannel (InputStream in)\n+  {\n+    super();\n+    this.in = in;\n+  }\n+\n+  public void close() throws IOException\n+  {\n+    if (!closed)\n+      {\n+        in.close();\n+        closed = true;\n+      }\n+  }\n+\n+  public boolean isOpen()\n+  {\n+    return !closed;\n+  }\n+\n+  public int read (ByteBuffer dst) throws IOException\n+  {\n+    if (!isOpen())\n+      throw new ClosedChannelException();\n+    \n+    byte[] buffer = new byte [dst.remaining()];\n+    int readBytes = in.read (buffer);\n+\n+    if (readBytes > 0)\n+      dst.put (buffer, 0, readBytes);\n+\n+    return readBytes;\n+  }\n+}"}, {"sha": "caad49c90feb1a09491472044dbab6dcccd8824a", "filename": "libjava/java/nio/channels/Channels.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8362a2315c3ac45d0fc13844900c44669cab385/libjava%2Fjava%2Fnio%2Fchannels%2FChannels.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8362a2315c3ac45d0fc13844900c44669cab385/libjava%2Fjava%2Fnio%2Fchannels%2FChannels.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2FChannels.java?ref=b8362a2315c3ac45d0fc13844900c44669cab385", "patch": "@@ -1,5 +1,5 @@\n /* Channels.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,6 +37,7 @@\n \n package java.nio.channels;\n \n+import gnu.java.nio.InputStreamChannel;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.io.Reader;\n@@ -69,9 +70,9 @@ public static OutputStream newOutputStream (WritableByteChannel ch)\n   /**\n    * Constructs a channel that reads bytes from the given stream.\n    */\n-  public static ReadableByteChannel newChannel (InputStream in)\n+  public static ReadableByteChannel newChannel(InputStream in)\n   {\n-    throw new Error (\"not implemented\");\n+    return new InputStreamChannel(in);\n   }\n   \n   /**"}]}