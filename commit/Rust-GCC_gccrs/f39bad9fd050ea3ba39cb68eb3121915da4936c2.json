{"sha": "f39bad9fd050ea3ba39cb68eb3121915da4936c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM5YmFkOWZkMDUwZWEzYmEzOWNiNjhlYjMxMjE5MTVkYTQ5MzZjMg==", "commit": {"author": {"name": "Pat Haugen", "email": "pthaugen@us.ibm.com", "date": "2017-02-08T20:49:14Z"}, "committer": {"name": "Pat Haugen", "email": "pthaugen@gcc.gnu.org", "date": "2017-02-08T20:49:14Z"}, "message": "re PR target/78604 (test case gcc.target/powerpc/p8vector-vectorize-1.c fails starting with r242750)\n\n\tPR target/78604\n\t* config/rs6000/rs6000.c (rs6000_emit_vector_cond_expr): Invert\n\tcondition/operands for integer GE/LE/GEU/LEU operations.\n\n\t* gcc.target/powerpc/pr78604.c: New.\n\nFrom-SVN: r245285", "tree": {"sha": "b67b1778faa3a904921e85fd03aad506c7779111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b67b1778faa3a904921e85fd03aad506c7779111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f39bad9fd050ea3ba39cb68eb3121915da4936c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39bad9fd050ea3ba39cb68eb3121915da4936c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f39bad9fd050ea3ba39cb68eb3121915da4936c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39bad9fd050ea3ba39cb68eb3121915da4936c2/comments", "author": null, "committer": null, "parents": [{"sha": "fc00b9ced74248a0ab1e75312bde434d81a3ec00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc00b9ced74248a0ab1e75312bde434d81a3ec00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc00b9ced74248a0ab1e75312bde434d81a3ec00"}], "stats": {"total": 142, "additions": 141, "deletions": 1}, "files": [{"sha": "11c96925491c862c490c6d474417c24364b990e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39bad9fd050ea3ba39cb68eb3121915da4936c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39bad9fd050ea3ba39cb68eb3121915da4936c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f39bad9fd050ea3ba39cb68eb3121915da4936c2", "patch": "@@ -1,3 +1,9 @@\n+2017-02-08  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\tPR target/78604\n+\t* config/rs6000/rs6000.c (rs6000_emit_vector_cond_expr): Invert\n+\tcondition/operands for integer GE/LE/GEU/LEU operations.\n+\n 2017-02-08  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR translation/79397"}, {"sha": "10cbea97bed6c1821f8b33bdaa41cd96192ba139", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39bad9fd050ea3ba39cb68eb3121915da4936c2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39bad9fd050ea3ba39cb68eb3121915da4936c2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f39bad9fd050ea3ba39cb68eb3121915da4936c2", "patch": "@@ -25150,12 +25150,29 @@ rs6000_emit_vector_cond_expr (rtx dest, rtx op_true, rtx op_false,\n \treturn 0;\n       break;\n \n-      /* Mark unsigned tests with CCUNSmode.  */\n+    case GE:\n+    case LE:\n+      if (GET_MODE_CLASS (mask_mode) == MODE_VECTOR_INT)\n+\t{\n+\t  /* Invert condition to avoid compound test.  */\n+\t  invert_move = true;\n+\t  rcode = reverse_condition (rcode);\n+\t}\n+      break;\n+\n     case GTU:\n     case GEU:\n     case LTU:\n     case LEU:\n+      /* Mark unsigned tests with CCUNSmode.  */\n       cc_mode = CCUNSmode;\n+\n+      /* Invert condition to avoid compound test if necessary.  */\n+      if (rcode == GEU || rcode == LEU)\n+\t{\n+\t  invert_move = true;\n+\t  rcode = reverse_condition (rcode);\n+\t}\n       break;\n \n     default:"}, {"sha": "ba3016571d184d7f97b3b2d53cb2388f5305685c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39bad9fd050ea3ba39cb68eb3121915da4936c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39bad9fd050ea3ba39cb68eb3121915da4936c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f39bad9fd050ea3ba39cb68eb3121915da4936c2", "patch": "@@ -1,3 +1,8 @@\n+2017-02-08  Pat Haugen  <pthaugen@us.ibm.com>\n+\n+\tPR target/78604\n+\t* gcc.target/powerpc/pr78604.c: New.\n+\n 2017-02-08  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \tPR target/68972"}, {"sha": "2ee5ab9b12c7238839a74f9ee0c8220cd0cab034", "filename": "gcc/testsuite/gcc.target/powerpc/pr78604.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f39bad9fd050ea3ba39cb68eb3121915da4936c2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78604.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f39bad9fd050ea3ba39cb68eb3121915da4936c2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78604.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78604.c?ref=f39bad9fd050ea3ba39cb68eb3121915da4936c2", "patch": "@@ -0,0 +1,112 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O2 -ftree-vectorize\" } */\n+\n+#ifndef SIZE\n+#define SIZE 1024\n+#endif\n+\n+#ifndef ALIGN\n+#define ALIGN 32\n+#endif\n+\n+#ifndef TYPE\n+#define TYPE long long\n+#endif\n+\n+#ifndef SIGN_TYPE\n+#define SIGN_TYPE signed TYPE\n+#endif\n+\n+#ifndef UNS_TYPE\n+#define UNS_TYPE unsigned TYPE\n+#endif\n+\n+#define ALIGN_ATTR __attribute__((__aligned__(ALIGN)))\n+\n+SIGN_TYPE\tsa[SIZE] ALIGN_ATTR;\n+SIGN_TYPE\tsb[SIZE] ALIGN_ATTR;\n+SIGN_TYPE\tsc[SIZE] ALIGN_ATTR;\n+\n+UNS_TYPE\tua[SIZE] ALIGN_ATTR;\n+UNS_TYPE\tub[SIZE] ALIGN_ATTR;\n+UNS_TYPE\tuc[SIZE] ALIGN_ATTR;\n+\n+void\n+sign_lt (SIGN_TYPE val1, SIGN_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = (sb[i] < sc[i]) ? val1 : val2;\n+}\n+\n+void\n+sign_lte (SIGN_TYPE val1, SIGN_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = (sb[i] <= sc[i]) ? val1 : val2;\n+}\n+\n+void\n+sign_gt (SIGN_TYPE val1, SIGN_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = (sb[i] > sc[i]) ? val1 : val2;\n+}\n+\n+void\n+sign_gte (SIGN_TYPE val1, SIGN_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    sa[i] = (sb[i] >= sc[i]) ? val1 : val2;\n+}\n+\n+\n+void\n+uns_lt (UNS_TYPE val1, UNS_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = (ub[i] < uc[i]) ? val1 : val2;\n+}\n+\n+void\n+uns_lte (UNS_TYPE val1, UNS_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = (ub[i] <= uc[i]) ? val1 : val2;\n+}\n+\n+void\n+uns_gt (UNS_TYPE val1, UNS_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = (ub[i] > uc[i]) ? val1 : val2;\n+}\n+\n+void\n+uns_gte (UNS_TYPE val1, UNS_TYPE val2)\n+{\n+  unsigned long i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    ua[i] = (ub[i] >= uc[i]) ? val1 : val2;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mvcmpgtsd\\M} 4 } } */\n+/* { dg-final { scan-assembler-times {\\mvcmpgtud\\M} 4 } } */\n+/* { dg-final { scan-assembler-not   {\\mvcmpequd\\M} } } */"}]}