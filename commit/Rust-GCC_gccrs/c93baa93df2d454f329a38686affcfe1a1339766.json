{"sha": "c93baa93df2d454f329a38686affcfe1a1339766", "node_id": "C_kwDOANBUbNoAKGM5M2JhYTkzZGYyZDQ1NGYzMjlhMzg2ODZhZmZjZmUxYTEzMzk3NjY", "commit": {"author": {"name": "Will Hawkins", "email": "whh8b@obs.cr", "date": "2022-10-20T00:05:59Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-08T17:35:14Z"}, "message": "libstdc++: Refactor implementation of operator+ for std::string\n\nUntil now operator+(char*, string) and operator+(string, char*) had\ndifferent performance characteristics. The former required a single\nmemory allocation and the latter required two. This patch makes the\nperformance equal.\n\nAfter consultation with Jonathan, it seemed like a good idea to create a\nsingle function that performed one-allocation string concatenation that\ncould be used by various different version of operator+. This patch adds\nsuch a function and calls it from the relevant implementations.\n\nCo-authored-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (__str_cat): Add common function\n\tthat performs single-allocation string concatenation.\n\t(operator+): Use __str_cat.\n\t* include/bits/basic_string.tcc (operator+): Move to .h and\n\tdefine inline using __str_cat.\n\nSigned-off-by: Will Hawkins <whh8b@obs.cr>", "tree": {"sha": "7286e8a2461912156a1e524152ae9de8ea8547bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7286e8a2461912156a1e524152ae9de8ea8547bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c93baa93df2d454f329a38686affcfe1a1339766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93baa93df2d454f329a38686affcfe1a1339766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93baa93df2d454f329a38686affcfe1a1339766", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93baa93df2d454f329a38686affcfe1a1339766/comments", "author": {"login": "hawkinsw", "id": 8715530, "node_id": "MDQ6VXNlcjg3MTU1MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/8715530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hawkinsw", "html_url": "https://github.com/hawkinsw", "followers_url": "https://api.github.com/users/hawkinsw/followers", "following_url": "https://api.github.com/users/hawkinsw/following{/other_user}", "gists_url": "https://api.github.com/users/hawkinsw/gists{/gist_id}", "starred_url": "https://api.github.com/users/hawkinsw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hawkinsw/subscriptions", "organizations_url": "https://api.github.com/users/hawkinsw/orgs", "repos_url": "https://api.github.com/users/hawkinsw/repos", "events_url": "https://api.github.com/users/hawkinsw/events{/privacy}", "received_events_url": "https://api.github.com/users/hawkinsw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "564b11184650a494d97d9e89b984664ae142a24a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/564b11184650a494d97d9e89b984664ae142a24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/564b11184650a494d97d9e89b984664ae142a24a"}], "stats": {"total": 107, "additions": 49, "deletions": 58}, "files": [{"sha": "9c2b57f5a1d7b145c62186d92c980f50d7e23424", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 49, "deletions": 17, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93baa93df2d454f329a38686affcfe1a1339766/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93baa93df2d454f329a38686affcfe1a1339766/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=c93baa93df2d454f329a38686affcfe1a1339766", "patch": "@@ -3485,6 +3485,24 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n _GLIBCXX_END_NAMESPACE_CXX11\n #endif\n \n+  template<typename _Str>\n+    _GLIBCXX20_CONSTEXPR\n+    inline _Str\n+    __str_concat(typename _Str::value_type const* __lhs,\n+\t\t typename _Str::size_type __lhs_len,\n+\t\t typename _Str::value_type const* __rhs,\n+\t\t typename _Str::size_type __rhs_len,\n+\t\t typename _Str::allocator_type const& __a)\n+    {\n+      typedef typename _Str::allocator_type allocator_type;\n+      typedef __gnu_cxx::__alloc_traits<allocator_type> _Alloc_traits;\n+      _Str __str(_Alloc_traits::_S_select_on_copy(__a));\n+      __str.reserve(__lhs_len + __rhs_len);\n+      __str.append(__lhs, __lhs_len);\n+      __str.append(__rhs, __rhs_len);\n+      return __str;\n+    }\n+\n   // operator+\n   /**\n    *  @brief  Concatenate two strings.\n@@ -3494,13 +3512,14 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n-    basic_string<_CharT, _Traits, _Alloc>\n+    inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     {\n-      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);\n-      __str.append(__rhs);\n-      return __str;\n+      typedef basic_string<_CharT, _Traits, _Alloc> _Str;\n+      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),\n+\t\t\t\t     __rhs.c_str(), __rhs.size(),\n+\t\t\t\t     __lhs.get_allocator());\n     }\n \n   /**\n@@ -3511,9 +3530,16 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n-    basic_string<_CharT,_Traits,_Alloc>\n+    inline basic_string<_CharT,_Traits,_Alloc>\n     operator+(const _CharT* __lhs,\n-\t      const basic_string<_CharT,_Traits,_Alloc>& __rhs);\n+\t      const basic_string<_CharT,_Traits,_Alloc>& __rhs)\n+    {\n+      __glibcxx_requires_string(__lhs);\n+      typedef basic_string<_CharT, _Traits, _Alloc> _Str;\n+      return std::__str_concat<_Str>(__lhs, _Traits::length(__lhs),\n+\t\t\t\t     __rhs.c_str(), __rhs.size(),\n+\t\t\t\t     __rhs.get_allocator());\n+    }\n \n   /**\n    *  @brief  Concatenate character and string.\n@@ -3523,8 +3549,14 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n-    basic_string<_CharT,_Traits,_Alloc>\n-    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);\n+    inline basic_string<_CharT,_Traits,_Alloc>\n+    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs)\n+    {\n+      typedef basic_string<_CharT, _Traits, _Alloc> _Str;\n+      return std::__str_concat<_Str>(__builtin_addressof(__lhs), 1,\n+\t\t\t\t     __rhs.c_str(), __rhs.size(),\n+\t\t\t\t     __rhs.get_allocator());\n+    }\n \n   /**\n    *  @brief  Concatenate string and C string.\n@@ -3538,11 +3570,12 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const _CharT* __rhs)\n     {\n-      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);\n-      __str.append(__rhs);\n-      return __str;\n+      __glibcxx_requires_string(__rhs);\n+      typedef basic_string<_CharT, _Traits, _Alloc> _Str;\n+      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),\n+\t\t\t\t     __rhs, _Traits::length(__rhs),\n+\t\t\t\t     __lhs.get_allocator());\n     }\n-\n   /**\n    *  @brief  Concatenate string and character.\n    *  @param __lhs  First string.\n@@ -3554,11 +3587,10 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)\n     {\n-      typedef basic_string<_CharT, _Traits, _Alloc>\t__string_type;\n-      typedef typename __string_type::size_type\t\t__size_type;\n-      __string_type __str(__lhs);\n-      __str.append(__size_type(1), __rhs);\n-      return __str;\n+      typedef basic_string<_CharT, _Traits, _Alloc> _Str;\n+      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),\n+\t\t\t\t     __builtin_addressof(__rhs), 1,\n+\t\t\t\t     __lhs.get_allocator());\n     }\n \n #if __cplusplus >= 201103L"}, {"sha": "56114f120ba726abc0f7c52f12823d0ff26d9269", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93baa93df2d454f329a38686affcfe1a1339766/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93baa93df2d454f329a38686affcfe1a1339766/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=c93baa93df2d454f329a38686affcfe1a1339766", "patch": "@@ -605,47 +605,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n # define _GLIBCXX_STRING_CONSTEXPR\n #endif\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n-    basic_string<_CharT, _Traits, _Alloc>\n-    operator+(const _CharT* __lhs,\n-\t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n-    {\n-      __glibcxx_requires_string(__lhs);\n-      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n-      typedef typename __string_type::size_type\t  __size_type;\n-      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n-\trebind<_CharT>::other _Char_alloc_type;\n-      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;\n-      const __size_type __len = _Traits::length(__lhs);\n-      __string_type __str(_Alloc_traits::_S_select_on_copy(\n-          __rhs.get_allocator()));\n-      __str.reserve(__len + __rhs.size());\n-      __str.append(__lhs, __len);\n-      __str.append(__rhs);\n-      return __str;\n-    }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    _GLIBCXX20_CONSTEXPR\n-    basic_string<_CharT, _Traits, _Alloc>\n-    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n-    {\n-      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n-      typedef typename __string_type::size_type\t  __size_type;\n-      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n-\trebind<_CharT>::other _Char_alloc_type;\n-      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;\n-      __string_type __str(_Alloc_traits::_S_select_on_copy(\n-          __rhs.get_allocator()));\n-      const __size_type __len = __rhs.size();\n-      __str.reserve(__len + 1);\n-      __str.append(__size_type(1), __lhs);\n-      __str.append(__rhs);\n-      return __str;\n-    }\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type"}]}