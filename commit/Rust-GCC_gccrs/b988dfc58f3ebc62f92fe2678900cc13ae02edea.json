{"sha": "b988dfc58f3ebc62f92fe2678900cc13ae02edea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk4OGRmYzU4ZjNlYmM2MmY5MmZlMjY3ODkwMGNjMTNhZTAyZWRlYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-04-09T06:14:32Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-04-09T06:14:32Z"}, "message": "fstream.tcc (filebuf::seekpos): Fix.\n\n\n2002-04-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/5180\n\t* include/bits/fstream.tcc (filebuf::seekpos): Fix.\n\t* include/std/std_fstream.h: Clean.\n\t* include/bits/ostream.tcc: Remove extraneous variables.\n\t* include/bits/sstream.tcc (stringbuf::seekoff): Be strict about\n\topen modes and which modes.\n\t(stringbuf::seekpos): Same.\n\t* testsuite/27_io/stringbuf_virtuals.cc: New tests.\n\nFrom-SVN: r52057", "tree": {"sha": "d736fe8e961fce328e0ed710bb828c3c517c9a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d736fe8e961fce328e0ed710bb828c3c517c9a3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b988dfc58f3ebc62f92fe2678900cc13ae02edea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b988dfc58f3ebc62f92fe2678900cc13ae02edea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b988dfc58f3ebc62f92fe2678900cc13ae02edea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b988dfc58f3ebc62f92fe2678900cc13ae02edea/comments", "author": null, "committer": null, "parents": [{"sha": "973348ec02f0fdcca718a96f0440b0f845a03a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/973348ec02f0fdcca718a96f0440b0f845a03a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/973348ec02f0fdcca718a96f0440b0f845a03a2f"}], "stats": {"total": 162, "additions": 109, "deletions": 53}, "files": [{"sha": "64e40fae66903bfa2d8b6585dbe18f8306dcca7f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b988dfc58f3ebc62f92fe2678900cc13ae02edea", "patch": "@@ -1,3 +1,14 @@\n+2002-04-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tlibstdc++/5180\n+\t* include/bits/fstream.tcc (filebuf::seekpos): Fix.\n+\t* include/std/std_fstream.h: Clean.\n+\t* include/bits/ostream.tcc: Remove extraneous variables.\n+\t* include/bits/sstream.tcc (stringbuf::seekoff): Be strict about\n+\topen modes and which modes.\n+\t(stringbuf::seekpos): Same.\n+\t* testsuite/27_io/stringbuf_virtuals.cc: New tests.\n+\t\n 2002-04-05  Jonathan Wakely <jw@kayari.org>\n \n \t* include/bits/stl_algo.h (unique_copy, __gcd, rotate, rotate_copy,"}, {"sha": "0117d57fc4c9b0ea3f52cb4da1ff9bc2dd897330", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=b988dfc58f3ebc62f92fe2678900cc13ae02edea", "patch": "@@ -560,17 +560,17 @@ namespace std\n     seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)\n     {\n       pos_type __ret =  pos_type(off_type(-1)); \n-      bool __testopen = this->is_open();\n-      bool __testin = __mode & ios_base::in && _M_mode & ios_base::in;\n-      bool __testout = __mode & ios_base::out && _M_mode & ios_base::out;\n+      bool __testin = _M_mode & ios_base::in;\n+      bool __testout = _M_mode & ios_base::out;\n \n       // Should probably do has_facet checks here.\n       int __width = use_facet<__codecvt_type>(_M_buf_locale).encoding();\n       if (__width < 0)\n \t__width = 0;\n-      bool __testfail = __off != 0  && __width <= 0;\n+      bool __testfail = __off != 0 && __width <= 0;\n       \n-      if (__testopen && !__testfail && (__testin || __testout))\n+      if (this->is_open() && !__testfail \n+\t  && __mode & _M_mode && (__testin || __testout))\n \t{\n \t  // Ditch any pback buffers to avoid confusion.\n \t  _M_pback_destroy();\n@@ -615,13 +615,10 @@ namespace std\n     basic_filebuf<_CharT, _Traits>::\n     seekpos(pos_type __pos, ios_base::openmode __mode)\n     {\n-      pos_type __ret;\n-      off_type __off = __pos;\n-\n-      __ret = this->seekoff(__off, ios_base::beg, __mode); \n-\n-      _M_last_overflowed = false;\t\n-      return __ret;\n+#ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n+// 171. Strange seekpos() semantics due to joint position\n+      return this->seekoff(off_type(__pos), ios_base::beg, __mode);\n+#endif\n     }\n \n   template<typename _CharT, typename _Traits>"}, {"sha": "5c4799b9caacd91f1586725475fdcf803fd59ff2", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=b988dfc58f3ebc62f92fe2678900cc13ae02edea", "patch": "@@ -419,9 +419,7 @@ namespace std\n     basic_ostream<_CharT, _Traits>::tellp()\n     {\n       pos_type __ret = pos_type(-1);\n-      bool __testok = this->fail() != true;\n-      \n-      if (__testok)\n+      if (!this->fail())\n \t__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);\n       return __ret;\n     }\n@@ -431,9 +429,7 @@ namespace std\n     basic_ostream<_CharT, _Traits>&\n     basic_ostream<_CharT, _Traits>::seekp(pos_type __pos)\n     {\n-      bool __testok = this->fail() != true;\n-      \n-      if (__testok)\n+      if (!this->fail())\n \t{\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?\n@@ -452,9 +448,7 @@ namespace std\n     basic_ostream<_CharT, _Traits>::\n     seekp(off_type __off, ios_base::seekdir __d)\n     {\n-      bool __testok = this->fail() != true;\n-      \n-      if (__testok)\n+      if (!this->fail())\n \t{\n #ifdef _GLIBCPP_RESOLVE_LIB_DEFECTS\n // 136.  seekp, seekg setting wrong streams?"}, {"sha": "6aec6e8558aa23d2e3b79093b1a67f9bd8a6d761", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 43, "deletions": 30, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=b988dfc58f3ebc62f92fe2678900cc13ae02edea", "patch": "@@ -124,21 +124,23 @@ namespace std\n       bool __testin = __mode & ios_base::in && _M_mode & ios_base::in;\n       bool __testout = __mode & ios_base::out && _M_mode & ios_base::out;\n       bool __testboth = __testin && __testout && __way != ios_base::cur;\n-      \n-      if (_M_buf_size && ((__testin != __testout) || __testboth))\n+      __testin &= !(__mode & ios_base::out);\n+      __testout &= !(__mode & ios_base::in);\n+\n+      if (_M_buf_size && (__testin || __testout || __testboth))\n \t{\n \t  char_type* __beg = _M_buf;\n \t  char_type* __curi = NULL;\n \t  char_type* __curo = NULL;\n \t  char_type* __endi = NULL;\n \t  char_type* __endo = NULL;\n \n-\t  if (__testin)\n+\t  if (__testin || __testboth)\n \t    {\n \t      __curi = this->gptr();\n \t      __endi = this->egptr();\n \t    }\n-\t  if (__testout)\n+\t  if (__testout || __testboth)\n \t    {\n \t      __curo = this->pptr();\n \t      __endo = this->epptr();\n@@ -157,13 +159,13 @@ namespace std\n \t      __newoffo = __endo - __beg;\n \t    }\n \n-\t  if (__testin\n+\t  if ((__testin || __testboth)\n \t      && __newoffi + __off >= 0 && __endi - __beg >= __newoffi + __off)\n \t    {\n \t      _M_in_cur = __beg + __newoffi + __off;\n \t      __ret = pos_type(__newoffi);\n \t    }\n-\t  if (__testout\n+\t  if ((__testout || __testboth)\n \t      && __newoffo + __off >= 0 && __endo - __beg >= __newoffo + __off)\n \t    {\n \t      _M_out_cur_move(__newoffo + __off - (_M_out_cur - __beg));\n@@ -179,33 +181,44 @@ namespace std\n     seekpos(pos_type __sp, ios_base::openmode __mode)\n     {\n       pos_type __ret =  pos_type(off_type(-1)); \n-      off_type __pos = __sp._M_position();\n-      char_type* __beg = NULL;\n-      char_type* __end = NULL;\n-      bool __testin = __mode & ios_base::in && _M_mode & ios_base::in;\n-      bool __testout = __mode & ios_base::out && _M_mode & ios_base::out;\n       \n-      if (__testin)\n-\t{\n-\t  __beg = this->eback();\n-\t  __end = this->egptr();\n-\t}\n-      if (__testout)\n-\t{\n-\t  __beg = this->pbase();\n-\t  __end = _M_buf + _M_buf_size;\n-\t}\n- \n-      if (0 <= __pos && __pos <= __end - __beg)\n+      if (_M_buf_size)\n \t{\n-\t  // Need to set both of these if applicable\n-\t  if (__testin)\n-\t    _M_in_cur = _M_in_beg + __pos;\n-\t  if (__testout)\n-\t    _M_out_cur_move((__pos) - (_M_out_cur - __beg));\n-\t  __ret = pos_type(off_type(__pos));\n+\t  off_type __pos = __sp._M_position();\n+\t  char_type* __beg = NULL;\n+\t  char_type* __end = NULL;\n+\t  bool __testin = __mode & ios_base::in && _M_mode & ios_base::in;\n+\t  bool __testout = __mode & ios_base::out && _M_mode & ios_base::out;\n+\t  bool __testboth = __testin && __testout;\n+\t  __testin &= !(__mode & ios_base::out);\n+\t  __testout &= !(__mode & ios_base::in);\n+\t  \n+\t  // NB: Ordered.\n+\t  bool __testposi = false;\n+\t  bool __testposo = false;\n+\t  if (__testin || __testboth)\n+\t    {\n+\t      __beg = this->eback();\n+\t      __end = this->egptr();\n+\t      if (0 <= __pos && __pos <= __end - __beg)\n+\t\t__testposi = true;\n+\t    }\n+\t  if (__testout || __testboth)\n+\t    {\n+\t      __beg = this->pbase();\n+\t      __end = _M_buf + _M_buf_size;\n+\t      if (0 <= __pos && __pos <= __end - __beg)\n+\t\t__testposo = true;\n+\t    }\n+\t  if (__testposi || __testposo)\n+\t    {\n+\t      if (__testposi)\n+\t\t_M_in_cur = _M_in_beg + __pos;\n+\t      if (__testposo)\n+\t\t_M_out_cur_move((__pos) - (_M_out_cur - __beg));\n+\t      __ret = pos_type(off_type(__pos));\n+\t    }\n \t}\n-      \n       return __ret;\n     }\n "}, {"sha": "c462e7bd188baaaf4a6f2aa17da4a49e608b2a48", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=b988dfc58f3ebc62f92fe2678900cc13ae02edea", "patch": "@@ -306,7 +306,7 @@ namespace std\n       void\n       open(const char* __s, ios_base::openmode __mode = ios_base::in)\n       {\n-\tif (_M_filebuf.open(__s, __mode | ios_base::in) == NULL)\n+\tif (!_M_filebuf.open(__s, __mode | ios_base::in))\n \t  this->setstate(ios_base::failbit);\n       }\n "}, {"sha": "318bb72fa8a131bd82c256726752c9a9092915c3", "filename": "libstdc++-v3/testsuite/27_io/stringbuf_virtuals.cc", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf_virtuals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b988dfc58f3ebc62f92fe2678900cc13ae02edea/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf_virtuals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf_virtuals.cc?ref=b988dfc58f3ebc62f92fe2678900cc13ae02edea", "patch": "@@ -1,6 +1,6 @@\n // 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,9 +38,50 @@ void test01()\n   VERIFY( std::strncmp(strlit, buf, strlitsize) != 0 );\n }\n \n+void test02(std::stringbuf& in, bool pass)\n+{\n+  using namespace std;\n+  typedef streambuf::pos_type pos_type;\n+  typedef streambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n+\n+  // seekoff\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::in);\n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::out); \n+  VERIFY( p == bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg); \n+  VERIFY( p == bad );\n+\n+\n+  // seekpos\n+  p = in.pubseekpos(0, ios_base::in);\n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekpos(0, ios_base::out); \n+  VERIFY( p == bad );\n+\n+  p = in.pubseekpos(0); \n+  VERIFY( p == bad );\n+}\n+\n int main() \n {\n+  using namespace std;\n   test01();\n \n+  // movie star, submarine scientist!\n+  stringbuf in1(\"Hedy Lamarr\", ios_base::in);\n+  stringbuf in2(ios_base::in);\n+  stringbuf in3(\"\", ios_base::in);\n+  test02(in1, true);\n+  test02(in2, false);\n+  test02(in3, false);\n+\n   return 0;\n }"}]}