{"sha": "bfc2cdb1e73647b7f9a53649a63623f91b2c3207", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZjMmNkYjFlNzM2NDdiN2Y5YTUzNjQ5YTYzNjIzZjkxYjJjMzIwNw==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2007-08-14T08:47:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:47:36Z"}, "message": "exp_dist.adb (PolyORB_Support.Build_TypeCode_Function): When creating typecode parameters for a union (in a variant record)...\n\n2007-08-14  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_dist.adb (PolyORB_Support.Build_TypeCode_Function): When creating\n\ttypecode parameters for a union (in a variant record), remove\n\textraneous layer of Any wrapping for member label.\n\t(Expand_Receiving_Stubs_Bodies): For an RCI package body that has\n\telabration statements, register the package with the name server\n\tat the beginning, not at the end, of the elaboration statements so\n\tthat they can create remote access to subprogram values that designate\n\tremote subprograms from the package.\n\nFrom-SVN: r127449", "tree": {"sha": "b17bc40fba8bf5c913c674fcbdfb1e4fb6925c62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b17bc40fba8bf5c913c674fcbdfb1e4fb6925c62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfc2cdb1e73647b7f9a53649a63623f91b2c3207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc2cdb1e73647b7f9a53649a63623f91b2c3207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfc2cdb1e73647b7f9a53649a63623f91b2c3207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc2cdb1e73647b7f9a53649a63623f91b2c3207/comments", "author": null, "committer": null, "parents": [{"sha": "9f6ea00a897b1143ecd36624912711d3d92c42c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6ea00a897b1143ecd36624912711d3d92c42c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6ea00a897b1143ecd36624912711d3d92c42c3"}], "stats": {"total": 259, "additions": 127, "deletions": 132}, "files": [{"sha": "c60e3d212c3f920e25716e264b32f41917f6a977", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 127, "deletions": 132, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc2cdb1e73647b7f9a53649a63623f91b2c3207/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc2cdb1e73647b7f9a53649a63623f91b2c3207/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=bfc2cdb1e73647b7f9a53649a63623f91b2c3207", "patch": "@@ -489,11 +489,12 @@ package body Exp_Dist is\n    type RPC_Target (PCS_Kind : PCS_Names) is record\n       case PCS_Kind is\n          when Name_PolyORB_DSA =>\n-            Object       : Node_Id;\n+            Object : Node_Id;\n             --  An expression whose value is a PolyORB reference to the target\n             --  object.\n+\n          when others           =>\n-            Partition    : Entity_Id;\n+            Partition : Entity_Id;\n             --  A variable containing the Partition_ID of the target parition\n \n             RPC_Receiver : Node_Id;\n@@ -605,9 +606,8 @@ package body Exp_Dist is\n \n       --  Support for generating DSA code that uses the GARLIC PCS\n \n-      --  The subprograms below provide the GARLIC versions of\n-      --  the corresponding Specific_<subprogram> routine declared\n-      --  above.\n+      --  The subprograms below provide the GARLIC versions of the\n+      --  corresponding Specific_<subprogram> routine declared above.\n \n       procedure Add_RACW_Features\n         (RACW_Type         : Entity_Id;\n@@ -642,8 +642,8 @@ package body Exp_Dist is\n          Controlling_Parameter : Entity_Id) return RPC_Target;\n \n       procedure Build_Stub_Type\n-        (RACW_Type : Entity_Id;\n-         Stub_Type : Entity_Id;\n+        (RACW_Type         : Entity_Id;\n+         Stub_Type         : Entity_Id;\n          Stub_Type_Decl    : out Node_Id;\n          RPC_Receiver_Decl : out Node_Id);\n \n@@ -680,9 +680,8 @@ package body Exp_Dist is\n \n       --  Support for generating DSA code that uses the PolyORB PCS\n \n-      --  The subprograms below provide the PolyORB versions of\n-      --  the corresponding Specific_<subprogram> routine declared\n-      --  above.\n+      --  The subprograms below provide the PolyORB versions of the\n+      --  corresponding Specific_<subprogram> routine declared above.\n \n       procedure Add_RACW_Features\n         (RACW_Type         : Entity_Id;\n@@ -763,13 +762,15 @@ package body Exp_Dist is\n          --  over the PolyORB generic middleware components, it is necessary to\n          --  generate several supporting subprograms for each application data\n          --  type used in inter-partition communication. These subprograms are:\n-         --    * a Typecode function returning a high-level description of the\n-         --      type's structure;\n-         --    * two conversion functions allowing conversion of values of the\n-         --      type from and to the generic data containers used by PolyORB.\n-         --      These generic containers are called 'Any' type values after\n-         --      the CORBA terminology, and hence the conversion subprograms\n-         --      are named To_Any and From_Any.\n+\n+         --    A Typecode function returning a high-level description of the\n+         --    type's structure;\n+\n+         --    Two conversion functions allowing conversion of values of the\n+         --    type from and to the generic data containers used by PolyORB.\n+         --    These generic containers are called 'Any' type values after the\n+         --    CORBA terminology, and hence the conversion subprograms are\n+         --    named To_Any and From_Any.\n \n          function Build_From_Any_Call\n            (Typ   : Entity_Id;\n@@ -871,30 +872,30 @@ package body Exp_Dist is\n       --  Subprogram id 0 is reserved for calls received from\n       --  remote access-to-subprogram dereferences.\n \n-      Current_Declaration       : Node_Id;\n-      Loc                       : constant Source_Ptr := Sloc (Pkg_Spec);\n-      RCI_Instantiation         : Node_Id;\n-      Subp_Stubs                : Node_Id;\n-      Subp_Str                  : String_Id;\n+      Current_Declaration : Node_Id;\n+      Loc                 : constant Source_Ptr := Sloc (Pkg_Spec);\n+      RCI_Instantiation   : Node_Id;\n+      Subp_Stubs          : Node_Id;\n+      Subp_Str            : String_Id;\n \n    begin\n       --  The first thing added is an instantiation of the generic package\n-      --  System.Partition_Interface.RCI_Locator with the name of this\n-      --  remote package. This will act as an interface with the name server\n-      --  to determine the Partition_ID and the RPC_Receiver for the\n-      --  receiver of this package.\n+      --  System.Partition_Interface.RCI_Locator with the name of this remote\n+      --  package. This will act as an interface with the name server to\n+      --  determine the Partition_ID and the RPC_Receiver for the receiver\n+      --  of this package.\n \n       RCI_Instantiation := RCI_Package_Locator (Loc, Pkg_Spec);\n       RCI_Cache         := Defining_Unit_Name (RCI_Instantiation);\n \n       Append_To (Decls, RCI_Instantiation);\n       Analyze (RCI_Instantiation);\n \n-      --  For each subprogram declaration visible in the spec, we do\n-      --  build a body. We also increment a counter to assign a different\n-      --  Subprogram_Id to each subprograms. The receiving stubs processing\n-      --  do use the same mechanism and will thus assign the same Id and\n-      --  do the correct dispatching.\n+      --  For each subprogram declaration visible in the spec, we do build a\n+      --  body. We also increment a counter to assign a different Subprogram_Id\n+      --  to each subprograms. The receiving stubs processing do use the same\n+      --  mechanism and will thus assign the same Id and do the correct\n+      --  dispatching.\n \n       Overload_Counter_Table.Reset;\n       PolyORB_Support.Reserve_NamingContext_Methods;\n@@ -994,8 +995,7 @@ package body Exp_Dist is\n       if Nkind (Parameter) = N_Defining_Identifier then\n          Get_Name_String (Chars (Parameter));\n       else\n-         Get_Name_String (Chars (Defining_Identifier\n-                                  (Parameter)));\n+         Get_Name_String (Chars (Defining_Identifier (Parameter)));\n       end if;\n \n       Parameter_Name_String := String_From_Name_Buffer;\n@@ -1010,8 +1010,8 @@ package body Exp_Dist is\n          Parameter_Mode := New_Occurrence_Of (RTE (RE_Mode_In), Loc);\n \n       else\n-         Parameter_Mode := Parameter_Passing_Mode (Loc,\n-                             Parameter, Constrained);\n+         Parameter_Mode :=\n+           Parameter_Passing_Mode (Loc, Parameter, Constrained);\n       end if;\n \n       return\n@@ -1166,6 +1166,7 @@ package body Exp_Dist is\n       else\n          --  Validate_RACW_Primitives will be called when the designated type\n          --  is frozen, see Exp_Ch3.Freeze_Type.\n+\n          --  ??? Shouldn't we have a pragma Assert (not Is_Frozen (Desig))?\n \n          Add_Access_Type_To_Process (E => Desig, A => RACW_Type);\n@@ -1218,31 +1219,28 @@ package body Exp_Dist is\n       Current_Primitive_Spec   : Node_Id;\n       Current_Primitive_Decl   : Node_Id;\n       Current_Primitive_Number : Int := 0;\n-\n-      Current_Primitive_Alias : Node_Id;\n-\n-      Current_Receiver      : Entity_Id;\n-      Current_Receiver_Body : Node_Id;\n-\n-      RPC_Receiver_Decl : Node_Id;\n-\n-      Possibly_Asynchronous : Boolean;\n+      Current_Primitive_Alias  : Node_Id;\n+      Current_Receiver         : Entity_Id;\n+      Current_Receiver_Body    : Node_Id;\n+      RPC_Receiver_Decl        : Node_Id;\n+      Possibly_Asynchronous    : Boolean;\n \n    begin\n       if not Expander_Active then\n          return;\n       end if;\n \n       if not Is_RAS then\n-         RPC_Receiver := Make_Defining_Identifier (Loc,\n-                           New_Internal_Name ('P'));\n-         Specific_Build_RPC_Receiver_Body (\n-           RPC_Receiver => RPC_Receiver,\n-           Request      => RPC_Receiver_Request,\n-           Subp_Id      => RPC_Receiver_Subp_Id,\n-           Subp_Index   => RPC_Receiver_Subp_Index,\n-           Stmts        => RPC_Receiver_Statements,\n-           Decl         => RPC_Receiver_Decl);\n+         RPC_Receiver :=\n+           Make_Defining_Identifier (Loc,\n+             Chars => New_Internal_Name ('P'));\n+         Specific_Build_RPC_Receiver_Body\n+           (RPC_Receiver => RPC_Receiver,\n+            Request      => RPC_Receiver_Request,\n+            Subp_Id      => RPC_Receiver_Subp_Id,\n+            Subp_Index   => RPC_Receiver_Subp_Index,\n+            Stmts        => RPC_Receiver_Statements,\n+            Decl         => RPC_Receiver_Decl);\n \n          if Get_PCS_Name = Name_PolyORB_DSA then\n \n@@ -1336,10 +1334,10 @@ package body Exp_Dist is\n                        RACW_Type                => Stub_Elements.RACW_Type);\n                   Append_To (Body_Decls, Current_Primitive_Body);\n \n-                  --  Analyzing the body here would cause the Stub type to be\n-                  --  frozen, thus preventing subsequent primitive\n-                  --  declarations. For this reason, it will be analyzed later\n-                  --  in the regular flow (and in the context of the\n+                  --  Analyzing the body here would cause the Stub type to\n+                  --  be frozen, thus preventing subsequent primitive\n+                  --  declarations. For this reason, it will be analyzed\n+                  --  later in the regular flow (and in the context of the\n                   --  appropriate unit body, see Append_RACW_Bodies).\n \n                end if;\n@@ -1447,8 +1445,7 @@ package body Exp_Dist is\n    procedure Add_RAS_Dereference_TSS (N : Node_Id) is\n       Loc : constant Source_Ptr := Sloc (N);\n \n-      Type_Def : constant Node_Id   := Type_Definition (N);\n-\n+      Type_Def  : constant Node_Id   := Type_Definition (N);\n       RAS_Type  : constant Entity_Id := Defining_Identifier (N);\n       Fat_Type  : constant Entity_Id := Equivalent_Type (RAS_Type);\n       RACW_Type : constant Entity_Id := Underlying_RACW_Type (RAS_Type);\n@@ -1540,9 +1537,9 @@ package body Exp_Dist is\n \n          --  Generate a dummy body. This code will never actually be executed,\n          --  because null is the only legal value for a degenerate RAS type.\n-         --  For legality's sake (in order to avoid generating a function\n-         --  that does not contain a return statement), we include a dummy\n-         --  recursive call on the TSS itself.\n+         --  For legality's sake (in order to avoid generating a function that\n+         --  does not contain a return statement), we include a dummy recursive\n+         --  call on the TSS itself.\n \n          Append_To (Stmts,\n            Make_Raise_Program_Error (Loc, Reason => PE_Explicit_Raise));\n@@ -1565,7 +1562,7 @@ package body Exp_Dist is\n \n       if Is_Function then\n          Append_To (Stmts,\n-            Make_Return_Statement (Loc,\n+            Make_Simple_Return_Statement (Loc,\n               Expression =>\n                 Make_Function_Call (Loc,\n                   Name                   => RACW_Primitive_Name,\n@@ -1736,7 +1733,7 @@ package body Exp_Dist is\n                Actuals);\n       else\n          Perform_Call :=\n-           Make_Return_Statement (Loc,\n+           Make_Simple_Return_Statement (Loc,\n              Expression =>\n            Make_Function_Call (Loc,\n              Name =>\n@@ -1853,18 +1850,18 @@ package body Exp_Dist is\n          return;\n       end if;\n \n-      Existing         := False;\n-      Stub_Type        :=\n-        Make_Defining_Identifier (Loc, New_Internal_Name ('S'));\n+      Existing := False;\n+      Stub_Type :=\n+        Make_Defining_Identifier (Loc,\n+          Chars => New_Internal_Name ('S'));\n       Stub_Type_Access :=\n         Make_Defining_Identifier (Loc,\n-          New_External_Name (\n-            Related_Id => Chars (Stub_Type),\n-            Suffix     => 'A'));\n+          Chars => New_External_Name\n+                     (Related_Id => Chars (Stub_Type), Suffix => 'A'));\n \n-      Specific_Build_Stub_Type (\n-        RACW_Type, Stub_Type,\n-        Stub_Type_Decl, RPC_Receiver_Decl);\n+      Specific_Build_Stub_Type\n+        (RACW_Type, Stub_Type,\n+         Stub_Type_Decl, RPC_Receiver_Decl);\n \n       Stub_Type_Access_Decl :=\n         Make_Full_Type_Declaration (Loc,\n@@ -1908,7 +1905,6 @@ package body Exp_Dist is\n \n    procedure Append_RACW_Bodies (Decls : List_Id; Spec_Id : Entity_Id) is\n       E : Entity_Id;\n-\n    begin\n       E := First_Entity (Spec_Id);\n       while Present (E) loop\n@@ -2766,9 +2762,10 @@ package body Exp_Dist is\n    -----------------------------------\n \n    procedure Expand_Receiving_Stubs_Bodies (Unit_Node : Node_Id) is\n-      Spec  : Node_Id;\n-      Decls : List_Id;\n-      Temp  : List_Id;\n+      Spec        : Node_Id;\n+      Decls       : List_Id;\n+      Stubs_Decls : List_Id;\n+      Stubs_Stmts : List_Id;\n \n    begin\n       if Nkind (Unit_Node) = N_Package_Declaration then\n@@ -2780,18 +2777,32 @@ package body Exp_Dist is\n          end if;\n \n          Push_Scope (Scope_Of_Spec (Spec));\n-         Specific_Add_Receiving_Stubs_To_Declarations\n-           (Spec, Decls, Decls);\n+         Specific_Add_Receiving_Stubs_To_Declarations (Spec, Decls, Decls);\n+\n       else\n-         Spec  :=\n+         Spec :=\n            Package_Specification_Of_Scope (Corresponding_Spec (Unit_Node));\n          Decls := Declarations (Unit_Node);\n \n          Push_Scope (Scope_Of_Spec (Unit_Node));\n-         Temp := New_List;\n+         Stubs_Decls := New_List;\n+         Stubs_Stmts := New_List;\n          Specific_Add_Receiving_Stubs_To_Declarations\n-           (Spec, Temp, Statements (Handled_Statement_Sequence (Unit_Node)));\n-         Insert_List_Before (First (Decls), Temp);\n+           (Spec, Stubs_Decls, Stubs_Stmts);\n+\n+         Insert_List_Before (First (Decls), Stubs_Decls);\n+\n+         declare\n+            HSS_Stmts : constant List_Id :=\n+                          Statements (Handled_Statement_Sequence (Unit_Node));\n+            First_HSS_Stmt : constant Node_Id := First (HSS_Stmts);\n+         begin\n+            if No (First_HSS_Stmt) then\n+               Append_List_To (HSS_Stmts, Stubs_Stmts);\n+            else\n+               Insert_List_Before (First_HSS_Stmt, Stubs_Stmts);\n+            end if;\n+         end;\n       end if;\n \n       Pop_Scope;\n@@ -3034,7 +3045,7 @@ package body Exp_Dist is\n                Make_Assignment_Statement (Loc,\n                  Name       => Result,\n                  Expression => Make_Null (Loc)),\n-               Make_Return_Statement (Loc))));\n+               Make_Simple_Return_Statement (Loc))));\n \n          --  If the RACW denotes an object created on the current partition,\n          --  Local_Statements will be executed. The real object will be used.\n@@ -3464,7 +3475,7 @@ package body Exp_Dist is\n                    Make_Op_Not (Loc,\n                      New_Occurrence_Of (All_Calls_Remote, Loc))),\n              Then_Statements => New_List (\n-               Make_Return_Statement (Loc,\n+               Make_Simple_Return_Statement (Loc,\n                  Unchecked_Convert_To (Fat_Type,\n                    OK_Convert_To (RTE (RE_Address),\n                      New_Occurrence_Of (Proxy_Addr, Loc)))))),\n@@ -3501,7 +3512,7 @@ package body Exp_Dist is\n          --  Return the newly created value\n \n          Append_To (Proc_Statements,\n-           Make_Return_Statement (Loc,\n+           Make_Simple_Return_Statement (Loc,\n              Expression =>\n                Unchecked_Convert_To (Fat_Type,\n                  New_Occurrence_Of (Stub_Ptr, Loc))));\n@@ -3924,7 +3935,7 @@ package body Exp_Dist is\n                 Handled_Statement_Sequence =>\n                   Make_Handled_Sequence_Of_Statements (Loc,\n                     Statements => New_List (\n-                      Make_Return_Statement (Loc,\n+                      Make_Simple_Return_Statement (Loc,\n                         Expression =>\n                           OK_Convert_To (RTE (RE_Unsigned_64),\n                                          Subp_Info_Addr))))));\n@@ -4333,7 +4344,7 @@ package body Exp_Dist is\n \n                Append_To (Non_Asynchronous_Statements,\n                  Make_Tag_Check (Loc,\n-                   Make_Return_Statement (Loc,\n+                   Make_Simple_Return_Statement (Loc,\n                      Expression =>\n                        Make_Attribute_Reference (Loc,\n                          Prefix         =>\n@@ -5218,7 +5229,7 @@ package body Exp_Dist is\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (Loc, New_List (\n               Make_Tag_Check (Loc,\n-                Make_Return_Statement (Loc,\n+                Make_Simple_Return_Statement (Loc,\n                   Make_Attribute_Reference (Loc,\n                     Prefix         => New_Occurrence_Of (Var_Type, Loc),\n                     Attribute_Name => Name_Input,\n@@ -5680,7 +5691,7 @@ package body Exp_Dist is\n                  Parameter_Associations => New_List (\n                    New_Occurrence_Of (Reference, Loc))),\n              Then_Statements => New_List (\n-               Make_Return_Statement (Loc,\n+               Make_Simple_Return_Statement (Loc,\n                  Expression =>\n                    Make_Null (Loc)))));\n \n@@ -5760,7 +5771,7 @@ package body Exp_Dist is\n          end if;\n \n          Local_Statements := New_List (\n-           Make_Return_Statement (Loc,\n+           Make_Simple_Return_Statement (Loc,\n              Expression =>\n                Unchecked_Convert_To (RACW_Type,\n                  New_Occurrence_Of (Addr, Loc))));\n@@ -5773,7 +5784,7 @@ package body Exp_Dist is\n              Else_Statements => Stub_Statements));\n \n          Append_To (Statements,\n-           Make_Return_Statement (Loc,\n+           Make_Simple_Return_Statement (Loc,\n              Expression => Unchecked_Convert_To (RACW_Type,\n                New_Occurrence_Of (Stubbed_Result, Loc))));\n \n@@ -6084,7 +6095,7 @@ package body Exp_Dist is\n                      Defining_Identifier (\n                        Stub_Elements.RPC_Receiver_Decl),\n                  Selector_Name => Name_Obj_TypeCode))),\n-           Make_Return_Statement (Loc,\n+           Make_Simple_Return_Statement (Loc,\n              Expression =>\n                New_Occurrence_Of (Any, Loc)));\n \n@@ -6171,7 +6182,7 @@ package body Exp_Dist is\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => New_List (\n-                   Make_Return_Statement (Loc,\n+                   Make_Simple_Return_Statement (Loc,\n                      Expression =>\n                        Make_Selected_Component (Loc,\n                          Prefix =>\n@@ -6532,7 +6543,7 @@ package body Exp_Dist is\n                        New_Occurrence_Of (All_Calls_Remote, Loc)),\n \n                    Then_Statements => New_List (\n-                     Make_Return_Statement (Loc,\n+                     Make_Simple_Return_Statement (Loc,\n                        Unchecked_Convert_To (Fat_Type,\n                          New_Occurrence_Of (Local_Addr, Loc))))))));\n \n@@ -6575,7 +6586,7 @@ package body Exp_Dist is\n              Stub_Ptr, Stub_Elements.Stub_Type));\n \n          Append_To (Proc_Statements,\n-           Make_Return_Statement (Loc,\n+           Make_Simple_Return_Statement (Loc,\n              Expression =>\n                Unchecked_Convert_To (Fat_Type,\n                  New_Occurrence_Of (Stub_Ptr, Loc))));\n@@ -6643,7 +6654,7 @@ package body Exp_Dist is\n \n       begin\n          Statements := New_List (\n-           Make_Return_Statement (Loc,\n+           Make_Simple_Return_Statement (Loc,\n              Expression =>\n                Make_Aggregate (Loc,\n                  Component_Associations => New_List (\n@@ -6726,7 +6737,7 @@ package body Exp_Dist is\n                New_Occurrence_Of (Any, Loc),\n                PolyORB_Support.Helpers.Build_TypeCode_Call (Loc,\n                  RAS_Type, Decls))),\n-           Make_Return_Statement (Loc,\n+           Make_Simple_Return_Statement (Loc,\n              Expression =>\n                New_Occurrence_Of (Any, Loc)));\n \n@@ -6784,7 +6795,7 @@ package body Exp_Dist is\n              Handled_Statement_Sequence =>\n                Make_Handled_Sequence_Of_Statements (Loc,\n                  Statements => New_List (\n-                   Make_Return_Statement (Loc,\n+                   Make_Simple_Return_Statement (Loc,\n                      Expression =>\n                        Make_Function_Call (Loc,\n                          Name =>\n@@ -6907,7 +6918,7 @@ package body Exp_Dist is\n               or else not\n                 Is_Asynchronous (Defining_Entity (Specification (Declaration)))\n             then\n-               Append_To (Case_Stmts, Make_Return_Statement (Loc));\n+               Append_To (Case_Stmts, Make_Simple_Return_Statement (Loc));\n             end if;\n \n             Append_To (RPC_Receiver_Cases,\n@@ -7685,7 +7696,7 @@ package body Exp_Dist is\n \n                Append_To (Non_Asynchronous_Statements,\n                  Make_Tag_Check (Loc,\n-                   Make_Return_Statement (Loc,\n+                   Make_Simple_Return_Statement (Loc,\n                      PolyORB_Support.Helpers.Build_From_Any_Call (\n                          Etype (Result_Definition (Spec)),\n                          Make_Selected_Component (Loc,\n@@ -8703,7 +8714,7 @@ package body Exp_Dist is\n               and then not Is_Tagged_Type (Typ)\n             then\n                Append_To (Stms,\n-                 Make_Return_Statement (Loc,\n+                 Make_Simple_Return_Statement (Loc,\n                    Expression =>\n                      OK_Convert_To (\n                        Typ,\n@@ -8718,7 +8729,7 @@ package body Exp_Dist is\n             then\n                if Nkind (Declaration_Node (Typ)) = N_Subtype_Declaration then\n                   Append_To (Stms,\n-                    Make_Return_Statement (Loc,\n+                    Make_Simple_Return_Statement (Loc,\n                       Expression =>\n                         OK_Convert_To (\n                           Typ,\n@@ -8955,7 +8966,7 @@ package body Exp_Dist is\n                        Counter   => Component_Counter);\n \n                      Append_To (Stms,\n-                       Make_Return_Statement (Loc,\n+                       Make_Simple_Return_Statement (Loc,\n                          Expression => New_Occurrence_Of (Res, Loc)));\n                   end;\n                end if;\n@@ -9202,13 +9213,13 @@ package body Exp_Dist is\n                     Any_Parameter, Counter);\n \n                   Append_To (Stms,\n-                    Make_Return_Statement (Loc,\n+                    Make_Simple_Return_Statement (Loc,\n                       Expression => New_Occurrence_Of (Res, Loc)));\n                end;\n \n             elsif Is_Integer_Type (Typ) or else Is_Unsigned_Type (Typ) then\n                Append_To (Stms,\n-                 Make_Return_Statement (Loc,\n+                 Make_Simple_Return_Statement (Loc,\n                    Expression =>\n                      Unchecked_Convert_To (\n                        Typ,\n@@ -9291,7 +9302,7 @@ package body Exp_Dist is\n                             Parameter_Associations =>\n                               New_List (\n                                 New_Occurrence_Of (Strm, Loc))),\n-                          Make_Return_Statement (Loc,\n+                          Make_Simple_Return_Statement (Loc,\n                             Expression => New_Occurrence_Of (Res, Loc))))));\n \n                end;\n@@ -10081,7 +10092,7 @@ package body Exp_Dist is\n             end if;\n \n             Append_To (Stms,\n-              Make_Return_Statement (Loc,\n+              Make_Simple_Return_Statement (Loc,\n                 Expression => New_Occurrence_Of (Any, Loc)));\n \n             Decl :=\n@@ -10384,7 +10395,7 @@ package body Exp_Dist is\n             procedure Return_Constructed_TypeCode (Kind : Entity_Id) is\n             begin\n                Append_To (Stms,\n-                 Make_Return_Statement (Loc,\n+                 Make_Simple_Return_Statement (Loc,\n                    Expression =>\n                       Make_Constructed_TypeCode (Kind, Parameters)));\n             end Return_Constructed_TypeCode;\n@@ -10549,13 +10560,7 @@ package body Exp_Dist is\n                                             Make_Integer_Literal (Loc, J);\n                                        end if;\n                                        Append_To (Union_TC_Params,\n-                                         Make_Function_Call (Loc,\n-                                           Name => New_Occurrence_Of\n-                                             (RTE (RE_TA_A), Loc),\n-                                           Parameter_Associations =>\n-                                             New_List (\n-                                               Build_To_Any_Call\n-                                                 (Expr, Decls))));\n+                                         Build_To_Any_Call (Expr, Decls));\n \n                                        Add_Params_For_Variant_Components;\n                                        J := J + Uint_1;\n@@ -10593,8 +10598,7 @@ package body Exp_Dist is\n \n                                  --  Add a placeholder member label\n                                  --  for the default case.\n-                                 --  It must be of the discriminant\n-                                 --  type.\n+                                 --  It must be of the discriminant type.\n \n                                  declare\n                                     Exp : constant Node_Id :=\n@@ -10605,30 +10609,21 @@ package body Exp_Dist is\n                                  begin\n                                     Set_Etype (Exp, Discriminant_Type);\n                                     Append_To (Union_TC_Params,\n-                                      Make_Function_Call (Loc,\n-                                        Name => New_Occurrence_Of\n-                                          (RTE (RE_TA_A), Loc),\n-                                        Parameter_Associations =>\n-                                          New_List (\n-                                            Build_To_Any_Call\n-                                              (Exp, Decls))));\n+                                      Build_To_Any_Call (Exp, Decls));\n                                  end;\n \n                                  Add_Params_For_Variant_Components;\n \n                               when others =>\n+\n+                                 --  Case of an explicit choice\n+\n                                  declare\n                                     Exp : constant Node_Id :=\n                                       New_Copy_Tree (Choice);\n                                  begin\n                                     Append_To (Union_TC_Params,\n-                                      Make_Function_Call (Loc,\n-                                        Name => New_Occurrence_Of\n-                                          (RTE (RE_TA_A), Loc),\n-                                        Parameter_Associations =>\n-                                          New_List (\n-                                            Build_To_Any_Call\n-                                              (Exp, Decls))));\n+                                      Build_To_Any_Call (Exp, Decls));\n                                  end;\n \n                                  Add_Params_For_Variant_Components;"}]}