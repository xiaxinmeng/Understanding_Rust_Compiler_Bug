{"sha": "97ca93c3aef6c1b519661e4dddc1e8272f1ccc63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjYTkzYzNhZWY2YzFiNTE5NjYxZTRkZGRjMWU4MjcyZjFjY2M2Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-02T08:52:17Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-02T08:52:17Z"}, "message": "tree.c (build): Don't look at TREE_SIDE_EFFECTS or TREE_RAISES for non-trees.\n\n\t* tree.c (build): Don't look at TREE_SIDE_EFFECTS or TREE_RAISES\n\tfor non-trees.\n\t(build1): Likewise.\n\nFrom-SVN: r29764", "tree": {"sha": "fbb3f33157826fbf0d0a9efcc6fccd16a1fe4a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbb3f33157826fbf0d0a9efcc6fccd16a1fe4a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ca93c3aef6c1b519661e4dddc1e8272f1ccc63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ca93c3aef6c1b519661e4dddc1e8272f1ccc63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ca93c3aef6c1b519661e4dddc1e8272f1ccc63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ca93c3aef6c1b519661e4dddc1e8272f1ccc63/comments", "author": null, "committer": null, "parents": [{"sha": "06900a3427fe455af4e1fb5e59b7d14de453d2f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06900a3427fe455af4e1fb5e59b7d14de453d2f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06900a3427fe455af4e1fb5e59b7d14de453d2f3"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "62642b4eca0c1bc8c5dea111d92f3142084ade16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ca93c3aef6c1b519661e4dddc1e8272f1ccc63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ca93c3aef6c1b519661e4dddc1e8272f1ccc63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97ca93c3aef6c1b519661e4dddc1e8272f1ccc63", "patch": "@@ -1,3 +1,9 @@\n+Sat Oct  2 02:48:21 1999  Mark P. Mitchell  <mark@codesourcery.com>\n+\n+\t* tree.c (build): Don't look at TREE_SIDE_EFFECTS or TREE_RAISES \n+\tfor non-trees.\n+\t(build1): Likewise.\n+\t\n Fri Oct  1 18:01:11 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* i386elf.h (TARGET_DEFAULT): Use symbolic constants."}, {"sha": "25e2680e1b3ee29ef2d1460a156b8eb9bb71b35a", "filename": "gcc/tree.c", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ca93c3aef6c1b519661e4dddc1e8272f1ccc63/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ca93c3aef6c1b519661e4dddc1e8272f1ccc63/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=97ca93c3aef6c1b519661e4dddc1e8272f1ccc63", "patch": "@@ -2990,6 +2990,7 @@ build VPROTO((enum tree_code code, tree tt, ...))\n   register tree t;\n   register int length;\n   register int i;\n+  int fro;\n \n   VA_START (p, tt);\n \n@@ -3002,18 +3003,33 @@ build VPROTO((enum tree_code code, tree tt, ...))\n   length = tree_code_length[(int) code];\n   TREE_TYPE (t) = tt;\n \n+  /* Below, we automatically set TREE_SIDE_EFFECTS and TREE_RAISED for\n+     the result based on those same flags for the arguments.  But, if\n+     the arguments aren't really even `tree' expressions, we shouldn't\n+     be trying to do this.  */\n+  fro = first_rtl_op (code);\n+\n   if (length == 2)\n     {\n       /* This is equivalent to the loop below, but faster.  */\n       register tree arg0 = va_arg (p, tree);\n       register tree arg1 = va_arg (p, tree);\n       TREE_OPERAND (t, 0) = arg0;\n       TREE_OPERAND (t, 1) = arg1;\n-      if ((arg0 && TREE_SIDE_EFFECTS (arg0))\n-\t  || (arg1 && TREE_SIDE_EFFECTS (arg1)))\n-\tTREE_SIDE_EFFECTS (t) = 1;\n-      TREE_RAISES (t)\n-\t= (arg0 && TREE_RAISES (arg0)) || (arg1 && TREE_RAISES (arg1));\n+      if (arg0 && fro > 0)\n+\t{\n+\t  if (TREE_SIDE_EFFECTS (arg0))\n+\t    TREE_SIDE_EFFECTS (t) = 1;\n+\t  if (TREE_RAISES (arg0))\n+\t    TREE_RAISES (t) = 1;\n+\t}\n+      if (arg1 && fro > 1)\n+\t{\n+\t  if (TREE_SIDE_EFFECTS (arg1))\n+\t    TREE_SIDE_EFFECTS (t) = 1;\n+\t  if (TREE_RAISES (arg1))\n+\t    TREE_RAISES (t) = 1;\n+\t}\n     }\n   else if (length == 1)\n     {\n@@ -3023,17 +3039,20 @@ build VPROTO((enum tree_code code, tree tt, ...))\n       if (TREE_CODE_CLASS (code) != 's')\n \tabort ();\n       TREE_OPERAND (t, 0) = arg0;\n-      if (arg0 && TREE_SIDE_EFFECTS (arg0))\n-\tTREE_SIDE_EFFECTS (t) = 1;\n-      TREE_RAISES (t) = (arg0 && TREE_RAISES (arg0));\n+      if (fro > 0)\n+\t{\n+\t  if (arg0 && TREE_SIDE_EFFECTS (arg0))\n+\t    TREE_SIDE_EFFECTS (t) = 1;\n+\t  TREE_RAISES (t) = (arg0 && TREE_RAISES (arg0));\n+\t}\n     }\n   else\n     {\n       for (i = 0; i < length; i++)\n \t{\n \t  register tree operand = va_arg (p, tree);\n \t  TREE_OPERAND (t, i) = operand;\n-\t  if (operand)\n+\t  if (operand && fro > i)\n \t    {\n \t      if (TREE_SIDE_EFFECTS (operand))\n \t\tTREE_SIDE_EFFECTS (t) = 1;\n@@ -3090,7 +3109,7 @@ build1 (code, type, node)\n     TREE_PERMANENT (t) = 1;\n \n   TREE_OPERAND (t, 0) = node;\n-  if (node)\n+  if (node && first_rtl_op (code) != 0)\n     {\n       if (TREE_SIDE_EFFECTS (node))\n \tTREE_SIDE_EFFECTS (t) = 1;"}]}