{"sha": "5f49133f81390b80edb508542edaa91583c9628a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY0OTEzM2Y4MTM5MGI4MGVkYjUwODU0MmVkYWE5MTU4M2M5NjI4YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:13:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:13:09Z"}, "message": "[multiple changes]\n\n2012-10-02  Vincent Pucci  <pucci@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Indexed_Component_Form): Dimension\n\tanalysis for indexed components added.\n\t* sem_ch6.adb (Analyze_Function_Call): Dimension propagation\n\tfor function calls added.\n\t* sem_dim.adb (Analyze_Dimension): Call to\n\tAnalyze_Dimension_Has_Etype when N is a function call.\n\t(Analyze_Dimension_Call): Don't propagate anymore the dimensions\n\tfor function calls since this is now treated separately in\n\tAnalyze_Dimension_Has_Etype.\n\t(Analyze_Dimension_Has_Etype): For\n\tattribute references, propagate the dimensions from the prefix.\n\t* sem_dim.ads (Copy_Dimensions): Fix comment.\n\n2012-10-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* checks.ads, checks.adb (Apply_Parameter_Aliasing_Checks): New routine.\n\t(Apply_Parameter_Aliasing_And_Validity_Checks): This routine\n\thas been split into two.\n\t(Apply_Parameter_Validity_Checks): New routine.\n\t* exp_ch6.adb (Expand_Call): Add checks to verify that actuals\n\tdo not overlap. The checks are made on the caller side to overcome\n\tissues of parameter passing mechanisms.\n\t* freeze.adb (Freeze_Entity): Update call to\n\tApply_Parameter_Aliasing_And_Validity_Checks.\n\nFrom-SVN: r191959", "tree": {"sha": "716355f52bae28ce20b7e98724a88c6311ef33c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/716355f52bae28ce20b7e98724a88c6311ef33c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f49133f81390b80edb508542edaa91583c9628a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f49133f81390b80edb508542edaa91583c9628a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f49133f81390b80edb508542edaa91583c9628a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f49133f81390b80edb508542edaa91583c9628a/comments", "author": null, "committer": null, "parents": [{"sha": "4856cc2a7d10a3da76084704a51a37aae0e59cef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4856cc2a7d10a3da76084704a51a37aae0e59cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4856cc2a7d10a3da76084704a51a37aae0e59cef"}], "stats": {"total": 298, "additions": 234, "deletions": 64}, "files": [{"sha": "addb48f238df53e35d57080e16005d8824d8cb75", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5f49133f81390b80edb508542edaa91583c9628a", "patch": "@@ -1,3 +1,30 @@\n+2012-10-02  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Indexed_Component_Form): Dimension\n+\tanalysis for indexed components added.\n+\t* sem_ch6.adb (Analyze_Function_Call): Dimension propagation\n+\tfor function calls added.\n+\t* sem_dim.adb (Analyze_Dimension): Call to\n+\tAnalyze_Dimension_Has_Etype when N is a function call.\n+\t(Analyze_Dimension_Call): Don't propagate anymore the dimensions\n+\tfor function calls since this is now treated separately in\n+\tAnalyze_Dimension_Has_Etype.\n+\t(Analyze_Dimension_Has_Etype): For\n+\tattribute references, propagate the dimensions from the prefix.\n+\t* sem_dim.ads (Copy_Dimensions): Fix comment.\n+\n+2012-10-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.ads, checks.adb (Apply_Parameter_Aliasing_Checks): New routine.\n+\t(Apply_Parameter_Aliasing_And_Validity_Checks): This routine\n+\thas been split into two.\n+\t(Apply_Parameter_Validity_Checks): New routine.\n+\t* exp_ch6.adb (Expand_Call): Add checks to verify that actuals\n+\tdo not overlap. The checks are made on the caller side to overcome\n+\tissues of parameter passing mechanisms.\n+\t* freeze.adb (Freeze_Entity): Update call to\n+\tApply_Parameter_Aliasing_And_Validity_Checks.\n+\n 2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch4.adb (Is_Empty_Range): Use bounds of index type"}, {"sha": "78104217267fa220f4f283418f8fcff1ff2da26b", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 159, "deletions": 44, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=5f49133f81390b80edb508542edaa91583c9628a", "patch": "@@ -2040,18 +2040,166 @@ package body Checks is\n         (Ck_Node, Target_Typ, Source_Typ, Do_Static => False);\n    end Apply_Length_Check;\n \n-   --------------------------------------------------\n-   -- Apply_Parameter_Aliasing_And_Validity_Checks --\n-   --------------------------------------------------\n+   -------------------------------------\n+   -- Apply_Parameter_Aliasing_Checks --\n+   -------------------------------------\n \n-   procedure Apply_Parameter_Aliasing_And_Validity_Checks (Subp : Entity_Id) is\n-      Subp_Decl : Node_Id;\n+   procedure Apply_Parameter_Aliasing_Checks\n+     (Call : Node_Id;\n+      Subp : Entity_Id)\n+   is\n+      function May_Cause_Aliasing\n+        (Formal_1 : Entity_Id;\n+         Formal_2 : Entity_Id) return Boolean;\n+      --  Determine whether two formal parameters can alias each other\n+      --  depending on their modes.\n \n-      procedure Add_Aliasing_Check\n+      function Original_Actual (N : Node_Id) return Node_Id;\n+      --  The expander may replace an actual with a temporary for the sake of\n+      --  side effect removal. The temporary may hide a potential aliasing as\n+      --  it does not share the address of the actual. This routine attempts\n+      --  to retrieve the original actual.\n+\n+      ------------------------\n+      -- May_Cause_Aliasing --\n+      ------------------------\n+\n+      function May_Cause_Aliasing\n         (Formal_1 : Entity_Id;\n-         Formal_2 : Entity_Id);\n-      --  Add a single 'Overlapping_Storage check to a post condition pragma\n-      --  which verifies that Formal_1 is not aliasing Formal_2.\n+         Formal_2 : Entity_Id) return Boolean\n+      is\n+      begin\n+         --  The following combination cannot lead to aliasing\n+\n+         --     Formal 1    Formal 2\n+         --     IN          IN\n+\n+         if Ekind (Formal_1) = E_In_Parameter\n+           and then Ekind (Formal_2) = E_In_Parameter\n+         then\n+            return False;\n+\n+         --  The following combinations may lead to aliasing\n+\n+         --     Formal 1    Formal 2\n+         --     IN          OUT\n+         --     IN          IN OUT\n+         --     OUT         IN\n+         --     OUT         IN OUT\n+         --     OUT         OUT\n+\n+         else\n+            return True;\n+         end if;\n+      end May_Cause_Aliasing;\n+\n+      ---------------------\n+      -- Original_Actual --\n+      ---------------------\n+\n+      function Original_Actual (N : Node_Id) return Node_Id is\n+      begin\n+         if Nkind (N) = N_Type_Conversion then\n+            return Expression (N);\n+\n+         --  The expander created a temporary to capture the result of a type\n+         --  conversion where the expression is the real actual.\n+\n+         elsif Nkind (N) = N_Identifier\n+           and then Present (Original_Node (N))\n+           and then Nkind (Original_Node (N)) = N_Type_Conversion\n+         then\n+            return Expression (Original_Node (N));\n+         end if;\n+\n+         return N;\n+      end Original_Actual;\n+\n+      --  Local variables\n+\n+      Loc      : constant Source_Ptr := Sloc (Call);\n+      Actual_1 : Node_Id;\n+      Actual_2 : Node_Id;\n+      Check    : Node_Id;\n+      Cond     : Node_Id;\n+      Formal_1 : Entity_Id;\n+      Formal_2 : Entity_Id;\n+\n+   --  Start of processing for Apply_Parameter_Aliasing_Checks\n+\n+   begin\n+      Cond := Empty;\n+\n+      Actual_1 := First_Actual (Call);\n+      Formal_1 := First_Formal (Subp);\n+      while Present (Actual_1) and then Present (Formal_1) loop\n+\n+         --  Ensure that the actual is an object that is not passed by value.\n+         --  Elementary types are always passed by value, therefore actuals of\n+         --  such types cannot lead to aliasing.\n+\n+         if Is_Object_Reference (Original_Actual (Actual_1))\n+           and then not Is_Elementary_Type (Etype (Original_Actual (Actual_1)))\n+         then\n+            Actual_2 := Next_Actual (Actual_1);\n+            Formal_2 := Next_Formal (Formal_1);\n+            while Present (Actual_2) and then Present (Formal_2) loop\n+\n+               --  The other actual we are testing against must also denote\n+               --  a non pass-by-value object. Generate the check only when\n+               --  the mode of the two formals may lead to aliasing.\n+\n+               if Is_Object_Reference (Original_Actual (Actual_2))\n+                 and then not\n+                   Is_Elementary_Type (Etype (Original_Actual (Actual_2)))\n+                 and then May_Cause_Aliasing (Formal_1, Formal_2)\n+               then\n+                  --  Generate:\n+                  --    Actual_1'Overlaps_Storage (Actual_2)\n+\n+                  Check :=\n+                    Make_Attribute_Reference (Loc,\n+                      Prefix         =>\n+                        New_Copy_Tree (Original_Actual (Actual_1)),\n+                      Attribute_Name => Name_Overlaps_Storage,\n+                      Expressions    =>\n+                        New_List (New_Copy_Tree (Original_Actual (Actual_2))));\n+\n+                  if No (Cond) then\n+                     Cond := Check;\n+                  else\n+                     Cond :=\n+                       Make_And_Then (Loc,\n+                         Left_Opnd  => Cond,\n+                         Right_Opnd => Check);\n+                  end if;\n+               end if;\n+\n+               Next_Actual (Actual_2);\n+               Next_Formal (Formal_2);\n+            end loop;\n+         end if;\n+\n+         Next_Actual (Actual_1);\n+         Next_Formal (Formal_1);\n+      end loop;\n+\n+      --  Place the check right before the call\n+\n+      if Present (Cond) then\n+         Insert_Action (Call,\n+           Make_Raise_Program_Error (Loc,\n+             Condition => Cond,\n+             Reason    => PE_Explicit_Raise));\n+      end if;\n+   end Apply_Parameter_Aliasing_Checks;\n+\n+   -------------------------------------\n+   -- Apply_Parameter_Validity_Checks --\n+   -------------------------------------\n+\n+   procedure Apply_Parameter_Validity_Checks (Subp : Entity_Id) is\n+      Subp_Decl : Node_Id;\n \n       procedure Add_Validity_Check\n         (Context    : Entity_Id;\n@@ -2065,24 +2213,6 @@ package body Checks is\n       --  Create a pre or post condition pragma with name PPC_Nam which\n       --  tests expression Check.\n \n-      ------------------------\n-      -- Add_Aliasing_Check --\n-      ------------------------\n-\n-      procedure Add_Aliasing_Check\n-        (Formal_1 : Entity_Id;\n-         Formal_2 : Entity_Id)\n-      is\n-         Loc : constant Source_Ptr := Sloc (Subp);\n-\n-      begin\n-         Build_PPC_Pragma (Name_Postcondition,\n-           Make_Attribute_Reference (Loc,\n-             Prefix         => New_Reference_To (Formal_1, Loc),\n-             Attribute_Name => Name_Overlaps_Storage,\n-             Expressions    => New_List (New_Reference_To (Formal_2, Loc))));\n-      end Add_Aliasing_Check;\n-\n       ------------------------\n       -- Add_Validity_Check --\n       ------------------------\n@@ -2204,10 +2334,9 @@ package body Checks is\n       --  Local variables\n \n       Formal    : Entity_Id;\n-      Pair      : Entity_Id;\n       Subp_Spec : Node_Id;\n \n-   --  Start of processing for Apply_Parameter_Aliasing_And_Validity_Checks\n+   --  Start of processing for Apply_Parameter_Validity_Checks\n \n    begin\n       --  Extract the subprogram specification and declaration nodes\n@@ -2274,20 +2403,6 @@ package body Checks is\n             end if;\n          end if;\n \n-         --  Generate the following aliasing checks for every pair of formal\n-         --  parameters:\n-\n-         --    Formal'Overlapping_Storage (Pair)\n-\n-         if Check_Aliasing_Of_Parameters then\n-            Pair := Next_Formal (Formal);\n-            while Present (Pair) loop\n-               Add_Aliasing_Check (Formal, Pair);\n-\n-               Next_Formal (Pair);\n-            end loop;\n-         end if;\n-\n          Next_Formal (Formal);\n       end loop;\n \n@@ -2301,7 +2416,7 @@ package body Checks is\n       then\n          Add_Validity_Check (Subp, Name_Postcondition, True);\n       end if;\n-   end Apply_Parameter_Aliasing_And_Validity_Checks;\n+   end Apply_Parameter_Validity_Checks;\n \n    ---------------------------\n    -- Apply_Predicate_Check --"}, {"sha": "a43fff7b7c724a1dc08cbd4639e10335ce51c668", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=5f49133f81390b80edb508542edaa91583c9628a", "patch": "@@ -173,10 +173,16 @@ package Checks is\n    --  occur in the signed case for the case of the largest negative number\n    --  divided by minus one.\n \n-   procedure Apply_Parameter_Aliasing_And_Validity_Checks (Subp : Entity_Id);\n+   procedure Apply_Parameter_Aliasing_Checks\n+     (Call : Node_Id;\n+      Subp : Entity_Id);\n+   --  Given a subprogram call Call, add a check to verify that none of the\n+   --  actuals overlap. Subp denotes the subprogram being called.\n+\n+   procedure Apply_Parameter_Validity_Checks (Subp : Entity_Id);\n    --  Given a subprogram Subp, add both a pre and post condition pragmas that\n-   --  detect aliased objects and verify the proper initialization of scalars\n-   --  in parameters and function results.\n+   --  verify the proper initialization of scalars in parameters and function\n+   --  results.\n \n    procedure Apply_Predicate_Check (N : Node_Id; Typ : Entity_Id);\n    --  N is an expression to which a predicate check may need to be applied"}, {"sha": "02d504a9d0109ef572937ae1349ac4948961cf28", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=5f49133f81390b80edb508542edaa91583c9628a", "patch": "@@ -3400,6 +3400,14 @@ package body Exp_Ch6 is\n \n       Expand_Actuals (Call_Node, Subp);\n \n+      --  Verify that the actuals do not share storage. This check must be done\n+      --  on the caller side rather that inside the subprogram to avoid issues\n+      --  of parameter passing.\n+\n+      if Check_Aliasing_Of_Parameters then\n+         Apply_Parameter_Aliasing_Checks (Call_Node, Subp);\n+      end if;\n+\n       --  If the subprogram is a renaming, or if it is inherited, replace it in\n       --  the call with the name of the actual subprogram being called. If this\n       --  is a dispatching call, the run-time decides what to call. The Alias"}, {"sha": "02f6f533f1a0e04a357e188ff065c717a1894376", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=5f49133f81390b80edb508542edaa91583c9628a", "patch": "@@ -2656,13 +2656,13 @@ package body Freeze is\n          end;\n       end if;\n \n-      --  Add checks to detect proper initialization of scalars and overlapping\n-      --  storage of subprogram parameters.\n+      --  Add checks to detect proper initialization of scalars that may appear\n+      --  as subprogram parameters.\n \n       if Is_Subprogram (E)\n-        and then (Check_Aliasing_Of_Parameters or Check_Validity_Of_Parameters)\n+        and then Check_Validity_Of_Parameters\n       then\n-         Apply_Parameter_Aliasing_And_Validity_Checks (E);\n+         Apply_Parameter_Validity_Checks (E);\n       end if;\n \n       --  Deal with delayed aspect specifications. The analysis of the"}, {"sha": "34e5e52a4d08e73e358ec03122cf493db99dd798", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=5f49133f81390b80edb508542edaa91583c9628a", "patch": "@@ -2386,6 +2386,8 @@ package body Sem_Ch4 is\n             Process_Indexed_Component_Or_Slice;\n          end if;\n       end if;\n+\n+      Analyze_Dimension (N);\n    end Analyze_Indexed_Component_Form;\n \n    ------------------------"}, {"sha": "dd2a8b8a3146bf49d977ebdef90355d5d73a5a3f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5f49133f81390b80edb508542edaa91583c9628a", "patch": "@@ -500,6 +500,10 @@ package body Sem_Ch6 is\n       end if;\n \n       Analyze_Call (N);\n+\n+      --  Propagate the dimensions from the returned type, if necessary\n+\n+      Analyze_Dimension (N);\n    end Analyze_Function_Call;\n \n    -----------------------------"}, {"sha": "0d41bda05167dda7649c3b47ed956cbea98cc3e0", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=5f49133f81390b80edb508542edaa91583c9628a", "patch": "@@ -1154,6 +1154,7 @@ package body Sem_Dim is\n \n          when N_Attribute_Reference       |\n               N_Expanded_Name             |\n+              N_Function_Call             |\n               N_Identifier                |\n               N_Indexed_Component         |\n               N_Qualified_Expression      |\n@@ -1651,13 +1652,6 @@ package body Sem_Dim is\n          Next_Actual (Actual);\n          Next_Formal (Formal);\n       end loop;\n-\n-      --  For function calls, propagate the dimensions from the returned type\n-      --  to the function call.\n-\n-      if Nkind (N) = N_Function_Call then\n-         Analyze_Dimension_Has_Etype (N);\n-      end if;\n    end Analyze_Dimension_Call;\n \n    ---------------------------------------------\n@@ -1913,21 +1907,34 @@ package body Sem_Dim is\n \n    procedure Analyze_Dimension_Has_Etype (N : Node_Id) is\n       Etyp         : constant Entity_Id := Etype (N);\n-      Dims_Of_Etyp : constant Dimension_Type := Dimensions_Of (Etyp);\n+      Dims_Of_Etyp : Dimension_Type := Dimensions_Of (Etyp);\n \n    begin\n-      --  Propagation of the dimensions from the type\n+      --  General case. Propagation of the dimensions from the type\n \n       if Exists (Dims_Of_Etyp) then\n          Set_Dimensions (N, Dims_Of_Etyp);\n \n-      --  Propagation of the dimensions from the entity for identifier whose\n-      --  entity is a non-dimensionless consant.\n+      --  Identifier case. Propagate the dimensions from the entity for\n+      --  identifier whose entity is a non-dimensionless consant.\n \n       elsif Nkind (N) = N_Identifier\n         and then Exists (Dimensions_Of (Entity (N)))\n       then\n          Set_Dimensions (N, Dimensions_Of (Entity (N)));\n+\n+      --  Attribute reference case. Propagate the dimensions from the prefix.\n+\n+      elsif Nkind (N) = N_Attribute_Reference\n+        and then Has_Dimension_System (Base_Type (Etyp))\n+      then\n+         Dims_Of_Etyp := Dimensions_Of (Prefix (N));\n+\n+         --  Check the prefix is not dimensionless\n+\n+         if Exists (Dims_Of_Etyp) then\n+            Set_Dimensions (N, Dims_Of_Etyp);\n+         end if;\n       end if;\n \n       --  Removal of dimensions in expression"}, {"sha": "7ce4e591132723da06371ae1058ced9139728f58", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f49133f81390b80edb508542edaa91583c9628a/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=5f49133f81390b80edb508542edaa91583c9628a", "patch": "@@ -163,8 +163,9 @@ package Sem_Dim is\n    --  literal default value in the list of formals Formals.\n \n    procedure Copy_Dimensions (From, To : Node_Id);\n-   --  Copy dimension vector of From to To\n-   --  We should say what the requirements on From and To are here ???\n+   --  Copy dimension vector of node From to node To. Note that To must be a\n+   --  node that is allowed to contain a dimension. (See OK_For_Dimension in\n+   --  body of Sem_Dim).\n \n    procedure Eval_Op_Expon_For_Dimensioned_Type\n      (N    : Node_Id;"}]}