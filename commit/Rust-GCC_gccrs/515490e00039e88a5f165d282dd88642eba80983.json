{"sha": "515490e00039e88a5f165d282dd88642eba80983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE1NDkwZTAwMDM5ZTg4YTVmMTY1ZDI4MmRkODg2NDJlYmE4MDk4Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:43:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:43:51Z"}, "message": "[multiple changes]\n\n2013-10-14  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-exexpr-gcc.adb: Adjust comment.\n\t(Others_Value, All_Others_Value,\n\tUnhandled_Others_Value): Declare as Character to slightly reduce\n\tmemory footprint.\n\n2013-10-14  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb (Size_Known): Size is not known for packed record\n\twith aliased components\n\nFrom-SVN: r203555", "tree": {"sha": "20b47bdbf2fa1eba2d7cbd1aa19b9028052641d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20b47bdbf2fa1eba2d7cbd1aa19b9028052641d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/515490e00039e88a5f165d282dd88642eba80983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515490e00039e88a5f165d282dd88642eba80983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515490e00039e88a5f165d282dd88642eba80983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515490e00039e88a5f165d282dd88642eba80983/comments", "author": null, "committer": null, "parents": [{"sha": "808876a99a6fc19e9977afba400919f041774459", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/808876a99a6fc19e9977afba400919f041774459", "html_url": "https://github.com/Rust-GCC/gccrs/commit/808876a99a6fc19e9977afba400919f041774459"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "72cd47578e197a340376fe14ddfe3c2b942d5e44", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515490e00039e88a5f165d282dd88642eba80983/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515490e00039e88a5f165d282dd88642eba80983/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=515490e00039e88a5f165d282dd88642eba80983", "patch": "@@ -1,3 +1,15 @@\n+2013-10-14  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-exexpr-gcc.adb: Adjust comment.\n+\t(Others_Value, All_Others_Value,\n+\tUnhandled_Others_Value): Declare as Character to slightly reduce\n+\tmemory footprint.\n+\n+2013-10-14  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb (Size_Known): Size is not known for packed record\n+\twith aliased components\n+\n 2013-10-14  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb: Minor fix to error message."}, {"sha": "e98a15a7f396b7817af3b0268beca427c0d0ef46", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515490e00039e88a5f165d282dd88642eba80983/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515490e00039e88a5f165d282dd88642eba80983/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=515490e00039e88a5f165d282dd88642eba80983", "patch": "@@ -295,18 +295,15 @@ package body Exception_Propagation is\n    ---------------------------------------------------------------------------\n \n    --  Currently, these only have their address taken and compared so there is\n-   --  no real point having whole exception data blocks allocated. In any case\n-   --  the types should match what gigi and the personality routine expect.\n-   --  The initial value is an arbitrary value that will not exceed the range\n-   --  of Integer on 16-bit targets (such as AAMP).\n+   --  no real point having whole exception data blocks allocated.\n \n-   Others_Value : constant Integer := 16#7FFF#;\n+   Others_Value : constant Character := 'O';\n    pragma Export (C, Others_Value, \"__gnat_others_value\");\n \n-   All_Others_Value : constant Integer := 16#7FFF#;\n+   All_Others_Value : constant Character := 'A';\n    pragma Export (C, All_Others_Value, \"__gnat_all_others_value\");\n \n-   Unhandled_Others_Value : constant Integer := 16#7FFF#;\n+   Unhandled_Others_Value : constant Character := 'U';\n    pragma Export (C, Unhandled_Others_Value, \"__gnat_unhandled_others_value\");\n    --  Special choice (emitted by gigi) to catch and notify unhandled\n    --  exceptions on targets which always handle exceptions (such as SEH).\n@@ -357,12 +354,15 @@ package body Exception_Propagation is\n \n    procedure Set_Foreign_Occurrence (Excep : EOA; Mo : System.Address) is\n    begin\n-      Excep.Id                 := Foreign_Exception'Access;\n-      Excep.Machine_Occurrence := Mo;\n-      Excep.Msg_Length         := 0;\n-      Excep.Exception_Raised   := True;\n-      Excep.Pid                := Local_Partition_ID;\n-      Excep.Num_Tracebacks     := 0;\n+      Excep.all := (\n+        Id                 => Foreign_Exception'Access,\n+        Machine_Occurrence => Mo,\n+        Msg                => <>,\n+        Msg_Length         => 0,\n+        Exception_Raised   => True,\n+        Pid                => Local_Partition_ID,\n+        Num_Tracebacks     => 0,\n+        Tracebacks         => <>);\n    end Set_Foreign_Occurrence;\n \n    -------------------------"}, {"sha": "d51a73df2a207616677095570bbdae0e70d1e20d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/515490e00039e88a5f165d282dd88642eba80983/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/515490e00039e88a5f165d282dd88642eba80983/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=515490e00039e88a5f165d282dd88642eba80983", "patch": "@@ -835,7 +835,7 @@ package body Freeze is\n                    and then not Has_Independent_Components (T);\n \n                Packed_Size : Uint := Uint_0;\n-               --  SIze in bis so far\n+               --  Size in bits so far\n \n             begin\n                --  Test for variant part present\n@@ -881,11 +881,13 @@ package body Freeze is\n                   end if;\n \n                   --  We do not know the packed size if we have a by reference\n-                  --  type, or an atomic type or an atomic component.\n+                  --  type, or an atomic type or an atomic component, or an\n+                  --  aliased component (because packing does not touch these).\n \n                   if Is_Atomic (Ctyp)\n                     or else Is_Atomic (Comp)\n                     or else Is_By_Reference_Type (Ctyp)\n+                    or else Is_Aliased (Comp)\n                   then\n                      Packed_Size_Known := False;\n                   end if;\n@@ -2529,6 +2531,11 @@ package body Freeze is\n          --  clause (used to warn about useless Bit_Order pragmas, and also\n          --  to detect cases where Implicit_Packing may have an effect).\n \n+         Aliased_Component : Boolean := False;\n+         --  Set True if we find at least one component which is aliased. This\n+         --  is used to prevent Implicit_Packing of the record, since packing\n+         --  cannot modify the size of alignment of an aliased component.\n+\n          All_Scalar_Components : Boolean := True;\n          --  Set False if we encounter a component of a non-scalar type\n \n@@ -2702,6 +2709,9 @@ package body Freeze is\n          Comp := First_Entity (Rec);\n          Prev := Empty;\n          while Present (Comp) loop\n+            if Is_Aliased (Comp) then\n+               Aliased_Component := True;\n+            end if;\n \n             --  Handle the component and discriminant case\n \n@@ -3203,6 +3213,10 @@ package body Freeze is\n \n            and then not Placed_Component\n \n+           --  Or even one component is aliased\n+\n+           and then not Aliased_Component\n+\n            --  Must have size clause and all scalar components\n \n            and then Has_Size_Clause (Rec)"}]}