{"sha": "cf716ab562c1e0549e0632b1c92059932f8b899a", "node_id": "C_kwDOANBUbNoAKGNmNzE2YWI1NjJjMWUwNTQ5ZTA2MzJiMWM5MjA1OTkzMmY4Yjg5OWE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-14T13:33:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-11-14T13:35:07Z"}, "message": "remove duplicate match.pd patterns\n\nThe following merges match.pd patterns that cause genmatch complaints\nabout duplicates when in-order isn't enforced (you have to edit\ngenmatch.cc to do a full duplicate check).\n\n\t* match.pd: Remove duplicates.", "tree": {"sha": "c6cdf00d5a63cafce9d9ba96479c37abd76b263b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6cdf00d5a63cafce9d9ba96479c37abd76b263b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf716ab562c1e0549e0632b1c92059932f8b899a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf716ab562c1e0549e0632b1c92059932f8b899a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf716ab562c1e0549e0632b1c92059932f8b899a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf716ab562c1e0549e0632b1c92059932f8b899a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04e2fd20d3d5fce2c99c856361d5f3d3ce955906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e2fd20d3d5fce2c99c856361d5f3d3ce955906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e2fd20d3d5fce2c99c856361d5f3d3ce955906"}], "stats": {"total": 63, "additions": 30, "deletions": 33}, "files": [{"sha": "4d0898ccdcba4c9fbb8e4f3f6b147b6b0ea0f851", "filename": "gcc/match.pd", "status": "modified", "additions": 30, "deletions": 33, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf716ab562c1e0549e0632b1c92059932f8b899a/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf716ab562c1e0549e0632b1c92059932f8b899a/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=cf716ab562c1e0549e0632b1c92059932f8b899a", "patch": "@@ -1285,8 +1285,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* ~x | x -> -1 */\n /* ~x ^ x -> -1 */\n-/* ~x + x -> -1 */\n-(for op (bit_ior bit_xor plus)\n+(for op (bit_ior bit_xor)\n  (simplify\n   (op:c (convert? @0) (convert? (bit_not @0)))\n   (convert { build_all_ones_cst (TREE_TYPE (@0)); })))\n@@ -2939,9 +2938,9 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n   /* ~A + A -> -1 */\n   (simplify\n-   (plus:c (bit_not @0) @0)\n+   (plus:c (convert? (bit_not @0)) (convert? @0))\n    (if (!TYPE_OVERFLOW_TRAPS (type))\n-    { build_all_ones_cst (type); }))\n+    (convert { build_all_ones_cst (TREE_TYPE (@0)); })))\n \n   /* ~A + 1 -> -A */\n   (simplify\n@@ -5103,34 +5102,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (scmp @0 (bit_not @1)))))\n \n (for cmp (simple_comparison)\n- /* Fold (double)float1 CMP (double)float2 into float1 CMP float2.  */\n- (simplify\n-  (cmp (convert@2 @0) (convert? @1))\n-  (if (FLOAT_TYPE_P (TREE_TYPE (@0))\n-       && (DECIMAL_FLOAT_TYPE_P (TREE_TYPE (@2))\n-\t   == DECIMAL_FLOAT_TYPE_P (TREE_TYPE (@0)))\n-       && (DECIMAL_FLOAT_TYPE_P (TREE_TYPE (@2))\n-\t   == DECIMAL_FLOAT_TYPE_P (TREE_TYPE (@1))))\n-   (with\n-    {\n-      tree type1 = TREE_TYPE (@1);\n-      if (TREE_CODE (@1) == REAL_CST && !DECIMAL_FLOAT_TYPE_P (type1))\n-        {\n-\t  REAL_VALUE_TYPE orig = TREE_REAL_CST (@1);\n-\t  if (TYPE_PRECISION (type1) > TYPE_PRECISION (float_type_node)\n-\t      && exact_real_truncate (TYPE_MODE (float_type_node), &orig))\n-\t    type1 = float_type_node;\n-\t  if (TYPE_PRECISION (type1) > TYPE_PRECISION (double_type_node)\n-\t      && exact_real_truncate (TYPE_MODE (double_type_node), &orig))\n-\t    type1 = double_type_node;\n-        }\n-      tree newtype\n-        = (TYPE_PRECISION (TREE_TYPE (@0)) > TYPE_PRECISION (type1)\n-\t   ? TREE_TYPE (@0) : type1);\n-    }\n-    (if (TYPE_PRECISION (TREE_TYPE (@2)) > TYPE_PRECISION (newtype))\n-     (cmp (convert:newtype @0) (convert:newtype @1))))))\n-\n  (simplify\n   (cmp @0 REAL_CST@1)\n   /* IEEE doesn't distinguish +0 and -0 in comparisons.  */\n@@ -5683,7 +5654,33 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t  (if (cmp == LT_EXPR || cmp == LE_EXPR)\n \t   { constant_boolean_node (above ? true : false, type); }\n \t   (if (cmp == GT_EXPR || cmp == GE_EXPR)\n-\t    { constant_boolean_node (above ? false : true, type); }))))))))))))\n+\t    { constant_boolean_node (above ? false : true, type); })))))))))\n+   /* Fold (double)float1 CMP (double)float2 into float1 CMP float2.  */\n+   (if (FLOAT_TYPE_P (TREE_TYPE (@00))\n+\t&& (DECIMAL_FLOAT_TYPE_P (TREE_TYPE (@0))\n+\t    == DECIMAL_FLOAT_TYPE_P (TREE_TYPE (@00)))\n+\t&& (DECIMAL_FLOAT_TYPE_P (TREE_TYPE (@0))\n+\t    == DECIMAL_FLOAT_TYPE_P (TREE_TYPE (@10))))\n+    (with\n+     {\n+       tree type1 = TREE_TYPE (@10);\n+       if (TREE_CODE (@10) == REAL_CST && !DECIMAL_FLOAT_TYPE_P (type1))\n+\t {\n+\t   REAL_VALUE_TYPE orig = TREE_REAL_CST (@10);\n+\t   if (TYPE_PRECISION (type1) > TYPE_PRECISION (float_type_node)\n+\t       && exact_real_truncate (TYPE_MODE (float_type_node), &orig))\n+\t     type1 = float_type_node;\n+\t   if (TYPE_PRECISION (type1) > TYPE_PRECISION (double_type_node)\n+\t       && exact_real_truncate (TYPE_MODE (double_type_node), &orig))\n+\t     type1 = double_type_node;\n+\t }\n+      tree newtype\n+        = (TYPE_PRECISION (TREE_TYPE (@00)) > TYPE_PRECISION (type1)\n+\t   ? TREE_TYPE (@00) : type1);\n+     }\n+     (if (TYPE_PRECISION (TREE_TYPE (@0)) > TYPE_PRECISION (newtype))\n+      (cmp (convert:newtype @00) (convert:newtype @10))))))))\n+\n \n (for cmp (eq ne)\n  (simplify"}]}