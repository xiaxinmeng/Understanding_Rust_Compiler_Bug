{"sha": "a3017cf147db82ad86e5a81b9677e8ca8e29ead2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwMTdjZjE0N2RiODJhZDg2ZTVhODFiOTY3N2U4Y2E4ZTI5ZWFkMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-02-29T17:45:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-02-29T17:45:55Z"}, "message": "re PR middle-end/52419 (Wrong expansion of misaligned vector store)\n\n\tPR middle-end/52419\n\t* expr.c (expand_assignment): If doing misaligned store that doesn't\n\tcover all mode bits, perform a RMW cycle.\n\n\t* gcc.dg/torture/pr52419.c: New test.\n\nFrom-SVN: r184666", "tree": {"sha": "09361607593fdcf9bf322ea8635b1c004c6db317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09361607593fdcf9bf322ea8635b1c004c6db317"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3017cf147db82ad86e5a81b9677e8ca8e29ead2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3017cf147db82ad86e5a81b9677e8ca8e29ead2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3017cf147db82ad86e5a81b9677e8ca8e29ead2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3017cf147db82ad86e5a81b9677e8ca8e29ead2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "598e67d7a04954fe1d1652c4a7220977ab8b230f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598e67d7a04954fe1d1652c4a7220977ab8b230f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598e67d7a04954fe1d1652c4a7220977ab8b230f"}], "stats": {"total": 96, "additions": 76, "deletions": 20}, "files": [{"sha": "8de6c89ae00a54f7d708552e9fcb5d3382c4db0c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3017cf147db82ad86e5a81b9677e8ca8e29ead2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3017cf147db82ad86e5a81b9677e8ca8e29ead2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3017cf147db82ad86e5a81b9677e8ca8e29ead2", "patch": "@@ -1,5 +1,9 @@\n 2012-02-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/52419\n+\t* expr.c (expand_assignment): If doing misaligned store that doesn't\n+\tcover all mode bits, perform a RMW cycle.\n+\n \tPR tree-optimization/52429\n \t* tree-parloops.c (separate_decls_in_region_debug): Return early\n \tif var is LABEL_DECL."}, {"sha": "a3ace7ad0f0c2422d6ebe642cdbb84aa60f72d8b", "filename": "gcc/expr.c", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3017cf147db82ad86e5a81b9677e8ca8e29ead2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3017cf147db82ad86e5a81b9677e8ca8e29ead2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a3017cf147db82ad86e5a81b9677e8ca8e29ead2", "patch": "@@ -4666,6 +4666,7 @@ expand_assignment (tree to, tree from, bool nontemporal)\n       int volatilep = 0;\n       tree tem;\n       bool misalignp;\n+      rtx mem = NULL_RTX;\n \n       push_temp_slots ();\n       tem = get_inner_reference (to, &bitsize, &bitpos, &offset, &mode1,\n@@ -4686,8 +4687,44 @@ expand_assignment (tree to, tree from, bool nontemporal)\n \t  && ((icode = optab_handler (movmisalign_optab, mode))\n \t      != CODE_FOR_nothing))\n \t{\n+\t  enum machine_mode address_mode;\n+\t  rtx op0;\n+\t  struct expand_operand ops[2];\n+\t  addr_space_t as = TYPE_ADDR_SPACE\n+\t      (TREE_TYPE (TREE_TYPE (TREE_OPERAND (tem, 0))));\n+\t  tree base = TREE_OPERAND (tem, 0);\n+\n \t  misalignp = true;\n \t  to_rtx = gen_reg_rtx (mode);\n+\n+\t  address_mode = targetm.addr_space.address_mode (as);\n+\t  op0 = expand_expr (base, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n+\t  op0 = convert_memory_address_addr_space (address_mode, op0, as);\n+\t  if (!integer_zerop (TREE_OPERAND (tem, 1)))\n+\t    {\n+\t      rtx off = immed_double_int_const (mem_ref_offset (tem),\n+\t\t\t\t\t\taddress_mode);\n+\t      op0 = simplify_gen_binary (PLUS, address_mode, op0, off);\n+\t    }\n+\t  op0 = memory_address_addr_space (mode, op0, as);\n+\t  mem = gen_rtx_MEM (mode, op0);\n+\t  set_mem_attributes (mem, tem, 0);\n+\t  set_mem_addr_space (mem, as);\n+\t  if (TREE_THIS_VOLATILE (tem))\n+\t    MEM_VOLATILE_P (mem) = 1;\n+\n+\t  /* If the misaligned store doesn't overwrite all bits, perform\n+\t     rmw cycle on MEM.  */\n+\t  if (bitsize != GET_MODE_BITSIZE (mode))\n+\t    {\n+\t      create_input_operand (&ops[0], to_rtx, mode);\n+\t      create_fixed_operand (&ops[1], mem);\n+\t      /* The movmisalign<mode> pattern cannot fail, else the assignment\n+\t\t would silently be omitted.  */\n+\t      expand_insn (icode, 2, ops);\n+\n+\t      mem = copy_rtx (mem);\n+\t    }\n \t}\n       else\n \t{\n@@ -4842,26 +4879,6 @@ expand_assignment (tree to, tree from, bool nontemporal)\n       if (misalignp)\n \t{\n \t  struct expand_operand ops[2];\n-\t  enum machine_mode address_mode;\n-\t  rtx op0, mem;\n-\t  addr_space_t as = TYPE_ADDR_SPACE\n-\t      (TREE_TYPE (TREE_TYPE (TREE_OPERAND (tem, 0))));\n-\t  tree base = TREE_OPERAND (tem, 0);\n-\t  address_mode = targetm.addr_space.address_mode (as);\n-\t  op0 = expand_expr (base, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n-\t  op0 = convert_memory_address_addr_space (address_mode, op0, as);\n-\t  if (!integer_zerop (TREE_OPERAND (tem, 1)))\n-\t    {\n-\t      rtx off = immed_double_int_const (mem_ref_offset (tem),\n-\t\t\t\t\t\taddress_mode);\n-\t      op0 = simplify_gen_binary (PLUS, address_mode, op0, off);\n-\t    }\n-\t  op0 = memory_address_addr_space (mode, op0, as);\n-\t  mem = gen_rtx_MEM (mode, op0);\n-\t  set_mem_attributes (mem, tem, 0);\n-\t  set_mem_addr_space (mem, as);\n-\t  if (TREE_THIS_VOLATILE (tem))\n-\t    MEM_VOLATILE_P (mem) = 1;\n \n \t  create_fixed_operand (&ops[0], mem);\n \t  create_input_operand (&ops[1], to_rtx, mode);"}, {"sha": "5826e28e048e29f26ec5e2f42e71b732811609e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3017cf147db82ad86e5a81b9677e8ca8e29ead2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3017cf147db82ad86e5a81b9677e8ca8e29ead2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3017cf147db82ad86e5a81b9677e8ca8e29ead2", "patch": "@@ -1,5 +1,8 @@\n 2012-02-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/52419\n+\t* gcc.dg/torture/pr52419.c: New test.\n+\n \tPR tree-optimization/52429\n \t* gcc.dg/torture/pr52429.c: New test.\n \t* g++.dg/opt/pr52429.C: New test."}, {"sha": "d24225a3ea764c53463086cf707bb07283f1b483", "filename": "gcc/testsuite/gcc.dg/torture/pr52419.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3017cf147db82ad86e5a81b9677e8ca8e29ead2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52419.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3017cf147db82ad86e5a81b9677e8ca8e29ead2/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52419.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52419.c?ref=a3017cf147db82ad86e5a81b9677e8ca8e29ead2", "patch": "@@ -0,0 +1,32 @@\n+/* PR middle-end/52419 */\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+typedef long long V\n+  __attribute__ ((vector_size (2 * sizeof (long long)), may_alias));\n+\n+typedef struct S { V b; } P __attribute__((aligned (1)));\n+\n+struct __attribute__((packed)) T { char c; P s; };\n+\n+__attribute__((noinline, noclone)) void\n+foo (P *p)\n+{\n+  p->b[1] = 5;\n+}\n+\n+int\n+main ()\n+{\n+  V a = { 3, 4 };\n+  struct T t;\n+\n+  t.s.b = a;\n+  foo (&t.s);\n+\n+  if (t.s.b[0] != 3 || t.s.b[1] != 5)\n+    abort ();\n+\n+  return 0;\n+}"}]}