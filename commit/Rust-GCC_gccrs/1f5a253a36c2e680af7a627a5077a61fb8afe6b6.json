{"sha": "1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY1YTI1M2EzNmMyZTY4MGFmN2E2MjdhNTA3N2E2MWZiOGFmZTZiNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-03-16T14:36:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-03-16T14:36:43Z"}, "message": "re PR c++/9629 (virtual inheritance segfault)\n\ncp:\n\tPR c++/9629\n\t* cp-tree.h (struct language_function): Add in_base_initializer.\n\t(in_base_initializer): define it.\n\t(expand_member_init): Remove INIT param.\n\t* init.c (expand_member_init): Remove INIT param, return the member.\n\t(emit_mem_initializers): Set in_base_initializer.\n\t* class.c (build_base_path): Check in_base_initializer.\n\t* parser.c (cp_parser_mem_initializer): Set in_base_initializer.\n\t* pt.c (tsubst_initializer_list): Likewise.\ntestsuite:\n\tPR c++/9629\n\t* g++.dg/init/ctor2.C: New test.\n\nFrom-SVN: r64438", "tree": {"sha": "7874404e7e5a23052c2153596208ca845cfa33ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7874404e7e5a23052c2153596208ca845cfa33ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/comments", "author": null, "committer": null, "parents": [{"sha": "46ea50cb66f3edc9f5f474067e61bfe39c41cb06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ea50cb66f3edc9f5f474067e61bfe39c41cb06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ea50cb66f3edc9f5f474067e61bfe39c41cb06"}], "stats": {"total": 125, "additions": 104, "deletions": 21}, "files": [{"sha": "4a240a0176d3e5313d392c6f83a54f2e278973d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "patch": "@@ -1,3 +1,15 @@\n+2003-03-16  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9629\n+\t* cp-tree.h (struct language_function): Add in_base_initializer.\n+\t(in_base_initializer): define it.\n+\t(expand_member_init): Remove INIT param.\n+\t* init.c (expand_member_init): Remove INIT param, return the member.\n+\t(emit_mem_initializers): Set in_base_initializer.\n+\t* class.c (build_base_path): Check in_base_initializer.\n+\t* parser.c (cp_parser_mem_initializer): Set in_base_initializer.\n+\t* pt.c (tsubst_initializer_list): Likewise.\n+\n 2003-03-16   Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n \t* decl.c (binding_for_name): Fix initialization thinko.\n@@ -596,7 +608,7 @@\n \n 2003-02-21  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* search.c (bfs_walk_grow): Remove. Fold into ...\n+\t* search.c (grow_bfs_bases): Remove. Fold into ...\n \t(bfs_walk): ... here, fix fencepost error. Fix merge lossage\n \tin previous patch.\n "}, {"sha": "0df87ae71af6ce9c73439c187f2d69b1184ee5a2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "patch": "@@ -302,8 +302,25 @@ build_base_path (enum tree_code code,\n       /* Going via virtual base V_BINFO.  We need the static offset\n          from V_BINFO to BINFO, and the dynamic offset from D_BINFO to\n          V_BINFO.  That offset is an entry in D_BINFO's vtable.  */\n-      tree v_offset = build_vfield_ref (build_indirect_ref (expr, NULL),\n-\t\t\t\t\tTREE_TYPE (TREE_TYPE (expr)));\n+      tree v_offset;\n+\n+      if (fixed_type_p < 0 && in_base_initializer)\n+\t{\n+\t  /* In a base member initializer, we cannot rely on\n+\t     the vtable being set up. We have to use the vtt_parm.  */\n+\t  tree derived = BINFO_INHERITANCE_CHAIN (v_binfo);\n+\t  \n+\t  v_offset = build (PLUS_EXPR, TREE_TYPE (current_vtt_parm),\n+\t\t\t    current_vtt_parm, BINFO_VPTR_INDEX (derived));\n+\t  \n+\t  v_offset = build1 (INDIRECT_REF,\n+\t\t\t     TREE_TYPE (TYPE_VFIELD (BINFO_TYPE (derived))),\n+\t\t\t     v_offset);\n+\t  \n+\t}\n+      else\n+\tv_offset = build_vfield_ref (build_indirect_ref (expr, NULL),\n+\t\t\t\t     TREE_TYPE (TREE_TYPE (expr)));\n       \n       v_offset = build (PLUS_EXPR, TREE_TYPE (v_offset),\n \t\t\tv_offset,  BINFO_VPTR_FIELD (v_binfo));"}, {"sha": "587acbcdad5ac1c7ea78a52ba9508074694be45c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "patch": "@@ -866,6 +866,7 @@ struct language_function GTY(())\n   int returns_null;\n   int returns_abnormally;\n   int in_function_try_handler;\n+  int in_base_initializer;\n   int x_expanding_p;\n \n   struct named_label_use_list *x_named_label_uses;\n@@ -936,6 +937,9 @@ struct language_function GTY(())\n \n #define doing_semantic_analysis_p() (!expanding_p)\n \n+/* Non-zero if we are processing a base initializer.  Zero elsewhere.  */\n+#define in_base_initializer cp_function_chain->in_base_initializer\n+\n #define in_function_try_handler cp_function_chain->in_function_try_handler\n \n /* Expression always returned from function, or error_mark_node\n@@ -3915,7 +3919,7 @@ extern void add_friend                          (tree, tree);\n extern tree do_friend\t\t\t\t(tree, tree, tree, tree, tree, enum overload_flags, tree, int);\n \n /* in init.c */\n-extern tree expand_member_init\t\t\t(tree, tree);\n+extern tree expand_member_init\t\t\t(tree);\n extern void emit_mem_initializers\t\t(tree);\n extern tree build_aggr_init\t\t\t(tree, tree, int);\n extern tree build_init\t\t\t\t(tree, tree, int);"}, {"sha": "d8542831f8a2826317f5bc206d09e1123665db1a", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "patch": "@@ -146,7 +146,7 @@ initialize_vtbl_ptrs (addr)\n   list = build_tree_list (type, addr);\n \n   /* Walk through the hierarchy, initializing the vptr in each base\n-     class.  We do these in pre-order because can't find the virtual\n+     class.  We do these in pre-order because we can't find the virtual\n      bases for a class until we've initialized the vtbl for that\n      class.  */\n   dfs_walk_real (TYPE_BINFO (type), dfs_initialize_vtbl_ptrs,\n@@ -664,6 +664,8 @@ emit_mem_initializers (tree mem_inits)\n      initializations should be performed.  */\n   mem_inits = sort_mem_initializers (current_class_type, mem_inits);\n \n+  in_base_initializer = 1;\n+  \n   /* Initialize base classes.  */\n   while (mem_inits \n \t && TREE_CODE (TREE_PURPOSE (mem_inits)) != FIELD_DECL)\n@@ -704,10 +706,11 @@ emit_mem_initializers (tree mem_inits)\n \n       mem_inits = TREE_CHAIN (mem_inits);\n     }\n+  in_base_initializer = 0;\n \n   /* Initialize the vptrs.  */\n   initialize_vtbl_ptrs (current_class_ptr);\n-\n+  \n   /* Initialize the data members.  */\n   while (mem_inits)\n     {\n@@ -951,16 +954,15 @@ member_init_ok_or_else (field, type, member_name)\n \n /* NAME is a FIELD_DECL, an IDENTIFIER_NODE which names a field, or it\n    is a _TYPE node or TYPE_DECL which names a base for that type.\n-   INIT is a parameter list for that field's or base's constructor.\n-   Check the validity of NAME, and return a TREE_LIST of the base\n-   _TYPE or FIELD_DECL and the INIT.  If NAME is invalid, return\n+   Check the validity of NAME, and return either the base _TYPE, base\n+   binfo, or the FIELD_DECL of the member.  If NAME is invalid, return\n    NULL_TREE and issue a diagnostic.\n \n    An old style unnamed direct single base construction is permitted,\n    where NAME is NULL.  */\n \n tree\n-expand_member_init (tree name, tree init)\n+expand_member_init (tree name)\n {\n   tree basetype;\n   tree field;\n@@ -997,14 +999,12 @@ expand_member_init (tree name, tree init)\n   else\n     basetype = NULL_TREE;\n \n-  my_friendly_assert (init != NULL_TREE, 0);\n-\n   if (basetype)\n     {\n       tree binfo;\n \n       if (current_template_parms)\n-\treturn build_tree_list (basetype, init);\n+\treturn basetype;\n \n       binfo = lookup_base (current_class_type, basetype, \n \t\t\t   ba_ignore, NULL);\n@@ -1020,7 +1020,7 @@ expand_member_init (tree name, tree init)\n \t\t   name, current_class_type);\n \t  return NULL_TREE;\n \t}\n-      return build_tree_list (binfo, init);\n+      return binfo;\n     }\n   else\n     {\n@@ -1030,7 +1030,7 @@ expand_member_init (tree name, tree init)\n \tfield = name;\n \n       if (member_init_ok_or_else (field, current_class_type, name))\n-\treturn build_tree_list (field, init);\n+\treturn field;\n     }\n \n   return NULL_TREE;"}, {"sha": "f80c260f42627e607687a2a59031524a7ce01d47", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "patch": "@@ -7236,7 +7236,8 @@ cp_parser_mem_initializer (cp_parser* parser)\n {\n   tree mem_initializer_id;\n   tree expression_list;\n-\n+  tree member;\n+  \n   /* Find out what is being initialized.  */\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))\n     {\n@@ -7245,6 +7246,10 @@ cp_parser_mem_initializer (cp_parser* parser)\n     }\n   else\n     mem_initializer_id = cp_parser_mem_initializer_id (parser);\n+  member = expand_member_init (mem_initializer_id);\n+  if (member && !DECL_P (member))\n+    in_base_initializer = 1;\n+  \n   /* Look for the opening `('.  */\n   cp_parser_require (parser, CPP_OPEN_PAREN, \"`('\");\n   /* Parse the expression-list.  */\n@@ -7256,8 +7261,9 @@ cp_parser_mem_initializer (cp_parser* parser)\n   /* Look for the closing `)'.  */\n   cp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\");\n \n-  return expand_member_init (mem_initializer_id,\n-\t\t\t     expression_list);\n+  in_base_initializer = 0;\n+  \n+  return member ? build_tree_list (member, expression_list) : NULL_TREE;\n }\n \n /* Parse a mem-initializer-id."}, {"sha": "87430b67ffbc757821a33ac64a888b897f68ac15", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "patch": "@@ -11093,9 +11093,12 @@ tsubst_initializer_list (t, argvec)\n \n       decl = tsubst_copy (TREE_PURPOSE (t), argvec, tf_error | tf_warning,\n \t\t\t  NULL_TREE);\n+      decl = expand_member_init (decl);\n+      if (decl && !DECL_P (decl))\n+\tin_base_initializer = 1;\n+      \n       init = tsubst_expr (TREE_VALUE (t), argvec, tf_error | tf_warning,\n \t\t\t  NULL_TREE);\n-\n       if (!init)\n \t;\n       else if (TREE_CODE (init) == TREE_LIST)\n@@ -11104,9 +11107,11 @@ tsubst_initializer_list (t, argvec)\n       else if (init != void_type_node)\n \tinit = convert_from_reference (init);\n \n-      init = expand_member_init (decl, init);\n-      if (init)\n+      in_base_initializer = 0;\n+\n+      if (decl)\n \t{\n+\t  init = build_tree_list (decl, init);\n \t  TREE_CHAIN (init) = inits;\n \t  inits = init;\n \t}"}, {"sha": "d4558f61f9d047c908d627f68bfc849525715791", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "patch": "@@ -1,3 +1,8 @@\n+2003-03-16  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9629\n+\t* g++.dg/init/ctor2.C: New test.\n+\n 2003-03-15  Roger Sayle  <roger@eyesopen.com>\n \n \t* g77.f-torture/compile/xformat.f: New test case."}, {"sha": "cf426f2bf16c36661e5f655a640852ec0629067d", "filename": "gcc/testsuite/g++.dg/init/ctor2.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f5a253a36c2e680af7a627a5077a61fb8afe6b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor2.C?ref=1f5a253a36c2e680af7a627a5077a61fb8afe6b6", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do run }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 14 Mar 2003 <nathan@codesourcery.com>\n+\n+// PR 9629. The vtable is not set up until the base initializers have\n+// run.\n+\n+struct A {\n+  static A *a;\n+  A ();\n+};\n+A *A::a;\n+A::A () {a = this;}\n+\n+struct B {\n+  static A *a;\n+  B (A *);\n+};\n+A *B::a;\n+B::B(A *a_) {a = a_;}\n+\n+struct C : virtual public A, public B {\n+  C();\n+};\n+C::C () : B(this) {}\n+\n+struct D : virtual public C {};\n+\n+int main()\n+{\n+  new D();\n+  return A::a != B::a;\n+}"}]}