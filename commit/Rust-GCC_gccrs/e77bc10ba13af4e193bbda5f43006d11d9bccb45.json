{"sha": "e77bc10ba13af4e193bbda5f43006d11d9bccb45", "node_id": "C_kwDOANBUbNoAKGU3N2JjMTBiYTEzYWY0ZTE5M2JiZGE1ZjQzMDA2ZDExZDliY2NiNDU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-08-05T09:33:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-05T09:33:52Z"}, "message": "Merge #1433\n\n1433: Fix bad transmute for aggregate types r=philberty a=philberty\n\nThis changes the CONVERT_EXPR to use the same ```*(foo*)&bar``` style cast from\r\nthe c front-end to handle the case of:\r\n```\r\n  int a[1];\r\n  int b = (int)a;\r\n```\r\nWhich is converted into:\r\n```\r\n  int b = *(int*)&a;\r\n```\r\nwhich the constant folders can turn directly into int b = a[0];\r\n\r\nFixes #1432\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "16f963fce89d43f130ac9a104ff23fd60f90db0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f963fce89d43f130ac9a104ff23fd60f90db0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e77bc10ba13af4e193bbda5f43006d11d9bccb45", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7OQACRBK7hj4Ov3rIwAA2VMIAKfm8u5F5Ho32flxtTBRUOo0\nc7VVMvgEHSQKMAhleg11XZCe+3sHnnZt4yN+n/FHL29YUlY/DV4KOrBlKZEKiQfq\neEpPMJHvf0feUvC1Es9EqSp0SbHLz+02L7imfR0wvEkATsLdmEwHXU4TrWaVW4pB\nFs7wpm9krHazoOELfBfq1ls/8+7VUSec6EFM/s9ACYo2PnSgBllwIE6vt0J+xO9V\nCKC5KY7exKoxP9iAW/zkLJUOXDsmFTGA09uxsF6QA/vcq+XVy0Q0PRjApsRMBOUj\nDu/ZVtZHWkqwN+58RC9gDrKBqlMqoD0ncjXjynEnYxiXZ8q7goylZL+p9IngkaU=\n=b2sr\n-----END PGP SIGNATURE-----\n", "payload": "tree 16f963fce89d43f130ac9a104ff23fd60f90db0d\nparent bc65cac0e79c9799fa62635df295e73b14501660\nparent 7022b9dd107e534896d8383f6bc4ce70b4726cc9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1659692032 +0000\ncommitter GitHub <noreply@github.com> 1659692032 +0000\n\nMerge #1433\n\n1433: Fix bad transmute for aggregate types r=philberty a=philberty\n\nThis changes the CONVERT_EXPR to use the same ```*(foo*)&bar``` style cast from\r\nthe c front-end to handle the case of:\r\n```\r\n  int a[1];\r\n  int b = (int)a;\r\n```\r\nWhich is converted into:\r\n```\r\n  int b = *(int*)&a;\r\n```\r\nwhich the constant folders can turn directly into int b = a[0];\r\n\r\nFixes #1432\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e77bc10ba13af4e193bbda5f43006d11d9bccb45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e77bc10ba13af4e193bbda5f43006d11d9bccb45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e77bc10ba13af4e193bbda5f43006d11d9bccb45/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc65cac0e79c9799fa62635df295e73b14501660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc65cac0e79c9799fa62635df295e73b14501660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc65cac0e79c9799fa62635df295e73b14501660"}, {"sha": "7022b9dd107e534896d8383f6bc4ce70b4726cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7022b9dd107e534896d8383f6bc4ce70b4726cc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7022b9dd107e534896d8383f6bc4ce70b4726cc9"}], "stats": {"total": 90, "additions": 88, "deletions": 2}, "files": [{"sha": "88d7923a50f5bf22b6ca36169a7bb8ed4f8c9c82", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77bc10ba13af4e193bbda5f43006d11d9bccb45/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77bc10ba13af4e193bbda5f43006d11d9bccb45/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=e77bc10ba13af4e193bbda5f43006d11d9bccb45", "patch": "@@ -545,8 +545,22 @@ transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n   tree result_expr = error_mark_node;\n   if (AGGREGATE_TYPE_P (TREE_TYPE (convert_me_expr)))\n     {\n-      result_expr = fold_build1_loc (Location ().gcc_location (), CONVERT_EXPR,\n-\t\t\t\t     result_type_tree, convert_me_expr);\n+      // Return *(orig_type*)&decl.  */\n+      // tree t = build_fold_addr_expr_loc (location.gcc_location (), this->t_);\n+      // t = fold_build1_loc (location.gcc_location (), NOP_EXPR,\n+      //       \t       build_pointer_type (this->orig_type_), t);\n+      // return build_fold_indirect_ref_loc (location.gcc_location (), t);\n+\n+      // result_expr = fold_build1_loc (Location ().gcc_location (),\n+      // CONVERT_EXPR,\n+      //   \t\t\t     result_type_tree, convert_me_expr);\n+\n+      tree t = build_fold_addr_expr_loc (Location ().gcc_location (),\n+\t\t\t\t\t convert_me_expr);\n+      t = fold_build1_loc (Location ().gcc_location (), NOP_EXPR,\n+\t\t\t   build_pointer_type (target_type_expr), t);\n+      result_expr\n+\t= build_fold_indirect_ref_loc (Location ().gcc_location (), t);\n     }\n   else\n     {"}, {"sha": "2a238e147449793a602eb3d0c8d4e1cecbbf82af", "filename": "gcc/testsuite/rust/compile/torture/issue-1432.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77bc10ba13af4e193bbda5f43006d11d9bccb45/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77bc10ba13af4e193bbda5f43006d11d9bccb45/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1432.rs?ref=e77bc10ba13af4e193bbda5f43006d11d9bccb45", "patch": "@@ -0,0 +1,72 @@\n+// { dg-additional-options \"-w\" }\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn wrapping_add<T>(a: T, b: T) -> T;\n+        pub fn rotate_left<T>(a: T, b: T) -> T;\n+        pub fn rotate_right<T>(a: T, b: T) -> T;\n+        pub fn offset<T>(ptr: *const T, count: isize) -> *const T;\n+    }\n+}\n+\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        fn transmute<T, U>(_: T) -> U;\n+        fn size_of<T>() -> usize;\n+    }\n+}\n+\n+macro_rules! impl_uint {\n+    ($($ty:ident = $lang:literal),*) => {\n+        $(\n+            impl $ty {\n+                pub fn wrapping_add(self, rhs: Self) -> Self {\n+                    // intrinsics::wrapping_add(self, rhs)\n+                    self + rhs\n+                }\n+\n+                pub fn rotate_left(self, n: u32) -> Self {\n+                    unsafe {\n+                        intrinsics::rotate_left(self, n as Self)\n+                    }\n+                }\n+\n+                pub fn rotate_right(self, n: u32) -> Self {\n+                    unsafe {\n+                        intrinsics::rotate_right(self, n as Self)\n+                    }\n+                }\n+\n+                pub fn to_le(self) -> Self {\n+                    #[cfg(target_endian = \"little\")]\n+                    {\n+                        self\n+                    }\n+                }\n+\n+                pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                    Self::from_le(Self::from_ne_bytes(bytes))\n+                }\n+\n+                pub const fn from_le(x: Self) -> Self {\n+                    #[cfg(target_endian = \"little\")]\n+                    {\n+                        x\n+                    }\n+                }\n+\n+                pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n+                    unsafe { mem::transmute(bytes) }\n+                }\n+            }\n+        )*\n+    }\n+}\n+\n+impl_uint!(\n+    u8 = \"u8\",\n+    u16 = \"u16\",\n+    u32 = \"u32\",\n+    u64 = \"u64\",\n+    u128 = \"u128\",\n+    usize = \"usize\"\n+);"}]}